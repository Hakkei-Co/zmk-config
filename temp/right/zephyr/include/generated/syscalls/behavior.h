
/* auto-generated by gen_syscalls.py, don't edit */
#ifndef Z_INCLUDE_SYSCALLS_BEHAVIOR_H
#define Z_INCLUDE_SYSCALLS_BEHAVIOR_H


#ifndef _ASMLANGUAGE

#include <syscall_list.h>
#include <syscall.h>

#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
#pragma GCC diagnostic push
#endif

#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

#ifdef __cplusplus
extern "C" {
#endif

extern int z_impl_behavior_keymap_binding_pressed(struct zmk_behavior_binding * binding, struct zmk_behavior_binding_event event);
static inline int behavior_keymap_binding_pressed(struct zmk_behavior_binding * binding, struct zmk_behavior_binding_event event)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&binding, *(uintptr_t *)&event, K_SYSCALL_BEHAVIOR_KEYMAP_BINDING_PRESSED);
	}
#endif
	compiler_barrier();
	return z_impl_behavior_keymap_binding_pressed(binding, event);
}


extern int z_impl_behavior_keymap_binding_released(struct zmk_behavior_binding * binding, struct zmk_behavior_binding_event event);
static inline int behavior_keymap_binding_released(struct zmk_behavior_binding * binding, struct zmk_behavior_binding_event event)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&binding, *(uintptr_t *)&event, K_SYSCALL_BEHAVIOR_KEYMAP_BINDING_RELEASED);
	}
#endif
	compiler_barrier();
	return z_impl_behavior_keymap_binding_released(binding, event);
}


extern int z_impl_behavior_sensor_keymap_binding_triggered(struct zmk_behavior_binding * binding, const struct device * sensor, int64_t timestamp);
static inline int behavior_sensor_keymap_binding_triggered(struct zmk_behavior_binding * binding, const struct device * sensor, int64_t timestamp)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { struct { uintptr_t lo, hi; } split; int64_t val; } parm0;
		parm0.val = timestamp;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&binding, *(uintptr_t *)&sensor, parm0.split.lo, parm0.split.hi, K_SYSCALL_BEHAVIOR_SENSOR_KEYMAP_BINDING_TRIGGERED);
	}
#endif
	compiler_barrier();
	return z_impl_behavior_sensor_keymap_binding_triggered(binding, sensor, timestamp);
}


#ifdef __cplusplus
}
#endif

#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
#pragma GCC diagnostic pop
#endif

#endif
#endif /* include guard */
