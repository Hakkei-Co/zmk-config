
zmk.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_start>:
 8000000:	20004c68 	.word	0x20004c68
 8000004:	08008f8d 	.word	0x08008f8d
 8000008:	08017b2d 	.word	0x08017b2d
 800000c:	08008fb9 	.word	0x08008fb9
 8000010:	08008fb9 	.word	0x08008fb9
 8000014:	08008fb9 	.word	0x08008fb9
 8000018:	08008fb9 	.word	0x08008fb9
	...
 800002c:	08008d25 	.word	0x08008d25
 8000030:	08008fb9 	.word	0x08008fb9
 8000034:	00000000 	.word	0x00000000
 8000038:	08008cdd 	.word	0x08008cdd
 800003c:	080080e5 	.word	0x080080e5

08000040 <_irq_vector_table>:
 8000040:	08008f65 08008f65 08008f65 08008f65     e...e...e...e...
 8000050:	08008f65 08008f65 08008f65 08008f65     e...e...e...e...
 8000060:	08008f65 08008f65 08008f65 08008f65     e...e...e...e...
 8000070:	08008f65 08008f65 08008f65 08008f65     e...e...e...e...
 8000080:	08008f65 08008f65 08008f65 08008f65     e...e...e...e...
 8000090:	08008f65 08008f65 08008f65 08008f65     e...e...e...e...
 80000a0:	08008f65 08008f65 08008f65 08008f65     e...e...e...e...
 80000b0:	08008f65 08008f65 08008f65 08008f65     e...e...e...e...
 80000c0:	08008f65 08008f65 08008f65 08008f65     e...e...e...e...
 80000d0:	08008f65 08008f65 08008f65 08008f65     e...e...e...e...
 80000e0:	08008f65 08008f65 08008f65 08008f65     e...e...e...e...
 80000f0:	08008f65 08008f65 08008f65 08008f65     e...e...e...e...
 8000100:	08008f65 08008f65 08008f65 08008f65     e...e...e...e...
 8000110:	08008f65 08008f65 08008f65 08008f65     e...e...e...e...
 8000120:	08008f65 08008f65 08008f65 08008f65     e...e...e...e...
 8000130:	08008f65 08008f65 08008f65 08008f65     e...e...e...e...
 8000140:	08008f65 08008f65 08008f65 08008f65     e...e...e...e...
 8000150:	08008f65 08008f65 08008f65 08008f65     e...e...e...e...
 8000160:	08008f65 08008f65 08008f65 08008f65     e...e...e...e...
 8000170:	08008f65 08008f65 08008f65 08008f65     e...e...e...e...
 8000180:	08008f65 08008f65                       e...e...

Disassembly of section text:

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000198:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800019c:	f000 b96e 	b.w	800047c <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f806 	bl	80001b8 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__udivmoddi4>:
 80001b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001bc:	9d08      	ldr	r5, [sp, #32]
 80001be:	460e      	mov	r6, r1
 80001c0:	4604      	mov	r4, r0
 80001c2:	468c      	mov	ip, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	f040 8081 	bne.w	80002cc <__udivmoddi4+0x114>
 80001ca:	428a      	cmp	r2, r1
 80001cc:	4617      	mov	r7, r2
 80001ce:	d945      	bls.n	800025c <__udivmoddi4+0xa4>
 80001d0:	fab2 f282 	clz	r2, r2
 80001d4:	b14a      	cbz	r2, 80001ea <__udivmoddi4+0x32>
 80001d6:	f1c2 0120 	rsb	r1, r2, #32
 80001da:	fa06 f302 	lsl.w	r3, r6, r2
 80001de:	fa20 f101 	lsr.w	r1, r0, r1
 80001e2:	4097      	lsls	r7, r2
 80001e4:	ea41 0c03 	orr.w	ip, r1, r3
 80001e8:	4094      	lsls	r4, r2
 80001ea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80001ee:	0c23      	lsrs	r3, r4, #16
 80001f0:	fbbc f6fe 	udiv	r6, ip, lr
 80001f4:	b2b9      	uxth	r1, r7
 80001f6:	fb0e cc16 	mls	ip, lr, r6, ip
 80001fa:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80001fe:	fb06 f001 	mul.w	r0, r6, r1
 8000202:	4298      	cmp	r0, r3
 8000204:	d909      	bls.n	800021a <__udivmoddi4+0x62>
 8000206:	18fb      	adds	r3, r7, r3
 8000208:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800020c:	f080 8115 	bcs.w	800043a <__udivmoddi4+0x282>
 8000210:	4298      	cmp	r0, r3
 8000212:	f240 8112 	bls.w	800043a <__udivmoddi4+0x282>
 8000216:	3e02      	subs	r6, #2
 8000218:	443b      	add	r3, r7
 800021a:	1a1b      	subs	r3, r3, r0
 800021c:	b2a4      	uxth	r4, r4
 800021e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000222:	fb0e 3310 	mls	r3, lr, r0, r3
 8000226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800022a:	fb00 f101 	mul.w	r1, r0, r1
 800022e:	42a1      	cmp	r1, r4
 8000230:	d909      	bls.n	8000246 <__udivmoddi4+0x8e>
 8000232:	193c      	adds	r4, r7, r4
 8000234:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000238:	f080 8101 	bcs.w	800043e <__udivmoddi4+0x286>
 800023c:	42a1      	cmp	r1, r4
 800023e:	f240 80fe 	bls.w	800043e <__udivmoddi4+0x286>
 8000242:	3802      	subs	r0, #2
 8000244:	443c      	add	r4, r7
 8000246:	1a64      	subs	r4, r4, r1
 8000248:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800024c:	2100      	movs	r1, #0
 800024e:	b11d      	cbz	r5, 8000258 <__udivmoddi4+0xa0>
 8000250:	40d4      	lsrs	r4, r2
 8000252:	2300      	movs	r3, #0
 8000254:	e9c5 4300 	strd	r4, r3, [r5]
 8000258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025c:	b902      	cbnz	r2, 8000260 <__udivmoddi4+0xa8>
 800025e:	deff      	udf	#255	; 0xff
 8000260:	fab2 f282 	clz	r2, r2
 8000264:	2a00      	cmp	r2, #0
 8000266:	d14f      	bne.n	8000308 <__udivmoddi4+0x150>
 8000268:	1bcb      	subs	r3, r1, r7
 800026a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800026e:	fa1f f887 	uxth.w	r8, r7
 8000272:	2101      	movs	r1, #1
 8000274:	fbb3 fcfe 	udiv	ip, r3, lr
 8000278:	0c26      	lsrs	r6, r4, #16
 800027a:	fb0e 331c 	mls	r3, lr, ip, r3
 800027e:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8000282:	fb08 f30c 	mul.w	r3, r8, ip
 8000286:	42b3      	cmp	r3, r6
 8000288:	d907      	bls.n	800029a <__udivmoddi4+0xe2>
 800028a:	19be      	adds	r6, r7, r6
 800028c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000290:	d202      	bcs.n	8000298 <__udivmoddi4+0xe0>
 8000292:	42b3      	cmp	r3, r6
 8000294:	f200 80eb 	bhi.w	800046e <__udivmoddi4+0x2b6>
 8000298:	4684      	mov	ip, r0
 800029a:	1af6      	subs	r6, r6, r3
 800029c:	b2a3      	uxth	r3, r4
 800029e:	fbb6 f0fe 	udiv	r0, r6, lr
 80002a2:	fb0e 6610 	mls	r6, lr, r0, r6
 80002a6:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 80002aa:	fb08 f800 	mul.w	r8, r8, r0
 80002ae:	45a0      	cmp	r8, r4
 80002b0:	d907      	bls.n	80002c2 <__udivmoddi4+0x10a>
 80002b2:	193c      	adds	r4, r7, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	d202      	bcs.n	80002c0 <__udivmoddi4+0x108>
 80002ba:	45a0      	cmp	r8, r4
 80002bc:	f200 80d2 	bhi.w	8000464 <__udivmoddi4+0x2ac>
 80002c0:	4618      	mov	r0, r3
 80002c2:	eba4 0408 	sub.w	r4, r4, r8
 80002c6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002ca:	e7c0      	b.n	800024e <__udivmoddi4+0x96>
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d908      	bls.n	80002e2 <__udivmoddi4+0x12a>
 80002d0:	2d00      	cmp	r5, #0
 80002d2:	f000 80af 	beq.w	8000434 <__udivmoddi4+0x27c>
 80002d6:	2100      	movs	r1, #0
 80002d8:	e9c5 0600 	strd	r0, r6, [r5]
 80002dc:	4608      	mov	r0, r1
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f183 	clz	r1, r3
 80002e6:	2900      	cmp	r1, #0
 80002e8:	d149      	bne.n	800037e <__udivmoddi4+0x1c6>
 80002ea:	42b3      	cmp	r3, r6
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0x13c>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80bb 	bhi.w	800046a <__udivmoddi4+0x2b2>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb66 0303 	sbc.w	r3, r6, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469c      	mov	ip, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0aa      	beq.n	8000258 <__udivmoddi4+0xa0>
 8000302:	e9c5 4c00 	strd	r4, ip, [r5]
 8000306:	e7a7      	b.n	8000258 <__udivmoddi4+0xa0>
 8000308:	f1c2 0320 	rsb	r3, r2, #32
 800030c:	4097      	lsls	r7, r2
 800030e:	40d8      	lsrs	r0, r3
 8000310:	4091      	lsls	r1, r2
 8000312:	40de      	lsrs	r6, r3
 8000314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000318:	4308      	orrs	r0, r1
 800031a:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 800031e:	fbb6 f1fe 	udiv	r1, r6, lr
 8000322:	fa1f f887 	uxth.w	r8, r7
 8000326:	fb0e 6611 	mls	r6, lr, r1, r6
 800032a:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
 800032e:	fb01 f308 	mul.w	r3, r1, r8
 8000332:	42b3      	cmp	r3, r6
 8000334:	fa04 f402 	lsl.w	r4, r4, r2
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x196>
 800033a:	19be      	adds	r6, r7, r6
 800033c:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 8000340:	f080 808e 	bcs.w	8000460 <__udivmoddi4+0x2a8>
 8000344:	42b3      	cmp	r3, r6
 8000346:	f240 808b 	bls.w	8000460 <__udivmoddi4+0x2a8>
 800034a:	3902      	subs	r1, #2
 800034c:	443e      	add	r6, r7
 800034e:	1af3      	subs	r3, r6, r3
 8000350:	b286      	uxth	r6, r0
 8000352:	fbb3 f0fe 	udiv	r0, r3, lr
 8000356:	fb0e 3310 	mls	r3, lr, r0, r3
 800035a:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 800035e:	fb00 f308 	mul.w	r3, r0, r8
 8000362:	42b3      	cmp	r3, r6
 8000364:	d907      	bls.n	8000376 <__udivmoddi4+0x1be>
 8000366:	19be      	adds	r6, r7, r6
 8000368:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800036c:	d274      	bcs.n	8000458 <__udivmoddi4+0x2a0>
 800036e:	42b3      	cmp	r3, r6
 8000370:	d972      	bls.n	8000458 <__udivmoddi4+0x2a0>
 8000372:	3802      	subs	r0, #2
 8000374:	443e      	add	r6, r7
 8000376:	1af3      	subs	r3, r6, r3
 8000378:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037c:	e77a      	b.n	8000274 <__udivmoddi4+0xbc>
 800037e:	f1c1 0720 	rsb	r7, r1, #32
 8000382:	fa03 f401 	lsl.w	r4, r3, r1
 8000386:	fa22 f307 	lsr.w	r3, r2, r7
 800038a:	431c      	orrs	r4, r3
 800038c:	fa20 f907 	lsr.w	r9, r0, r7
 8000390:	fa06 f301 	lsl.w	r3, r6, r1
 8000394:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000398:	40fe      	lsrs	r6, r7
 800039a:	ea49 0903 	orr.w	r9, r9, r3
 800039e:	ea4f 4319 	mov.w	r3, r9, lsr #16
 80003a2:	fbb6 fefc 	udiv	lr, r6, ip
 80003a6:	fa1f f884 	uxth.w	r8, r4
 80003aa:	fb0c 661e 	mls	r6, ip, lr, r6
 80003ae:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 80003b2:	fb0e fa08 	mul.w	sl, lr, r8
 80003b6:	45b2      	cmp	sl, r6
 80003b8:	fa02 f201 	lsl.w	r2, r2, r1
 80003bc:	fa00 f301 	lsl.w	r3, r0, r1
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x21c>
 80003c2:	19a6      	adds	r6, r4, r6
 80003c4:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80003c8:	d248      	bcs.n	800045c <__udivmoddi4+0x2a4>
 80003ca:	45b2      	cmp	sl, r6
 80003cc:	d946      	bls.n	800045c <__udivmoddi4+0x2a4>
 80003ce:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d2:	4426      	add	r6, r4
 80003d4:	eba6 060a 	sub.w	r6, r6, sl
 80003d8:	fa1f f989 	uxth.w	r9, r9
 80003dc:	fbb6 f0fc 	udiv	r0, r6, ip
 80003e0:	fb0c 6610 	mls	r6, ip, r0, r6
 80003e4:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
 80003e8:	fb00 f808 	mul.w	r8, r0, r8
 80003ec:	45b0      	cmp	r8, r6
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0x248>
 80003f0:	19a6      	adds	r6, r4, r6
 80003f2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003f6:	d22d      	bcs.n	8000454 <__udivmoddi4+0x29c>
 80003f8:	45b0      	cmp	r8, r6
 80003fa:	d92b      	bls.n	8000454 <__udivmoddi4+0x29c>
 80003fc:	3802      	subs	r0, #2
 80003fe:	4426      	add	r6, r4
 8000400:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000404:	eba6 0608 	sub.w	r6, r6, r8
 8000408:	fba0 8902 	umull	r8, r9, r0, r2
 800040c:	454e      	cmp	r6, r9
 800040e:	46c4      	mov	ip, r8
 8000410:	46ce      	mov	lr, r9
 8000412:	d318      	bcc.n	8000446 <__udivmoddi4+0x28e>
 8000414:	d015      	beq.n	8000442 <__udivmoddi4+0x28a>
 8000416:	b375      	cbz	r5, 8000476 <__udivmoddi4+0x2be>
 8000418:	ebb3 020c 	subs.w	r2, r3, ip
 800041c:	eb66 060e 	sbc.w	r6, r6, lr
 8000420:	fa06 f707 	lsl.w	r7, r6, r7
 8000424:	fa22 f301 	lsr.w	r3, r2, r1
 8000428:	40ce      	lsrs	r6, r1
 800042a:	431f      	orrs	r7, r3
 800042c:	e9c5 7600 	strd	r7, r6, [r5]
 8000430:	2100      	movs	r1, #0
 8000432:	e711      	b.n	8000258 <__udivmoddi4+0xa0>
 8000434:	4629      	mov	r1, r5
 8000436:	4628      	mov	r0, r5
 8000438:	e70e      	b.n	8000258 <__udivmoddi4+0xa0>
 800043a:	4666      	mov	r6, ip
 800043c:	e6ed      	b.n	800021a <__udivmoddi4+0x62>
 800043e:	4618      	mov	r0, r3
 8000440:	e701      	b.n	8000246 <__udivmoddi4+0x8e>
 8000442:	4543      	cmp	r3, r8
 8000444:	d2e7      	bcs.n	8000416 <__udivmoddi4+0x25e>
 8000446:	ebb8 0c02 	subs.w	ip, r8, r2
 800044a:	eb69 0404 	sbc.w	r4, r9, r4
 800044e:	3801      	subs	r0, #1
 8000450:	46a6      	mov	lr, r4
 8000452:	e7e0      	b.n	8000416 <__udivmoddi4+0x25e>
 8000454:	4660      	mov	r0, ip
 8000456:	e7d3      	b.n	8000400 <__udivmoddi4+0x248>
 8000458:	4660      	mov	r0, ip
 800045a:	e78c      	b.n	8000376 <__udivmoddi4+0x1be>
 800045c:	4686      	mov	lr, r0
 800045e:	e7b9      	b.n	80003d4 <__udivmoddi4+0x21c>
 8000460:	4661      	mov	r1, ip
 8000462:	e774      	b.n	800034e <__udivmoddi4+0x196>
 8000464:	3802      	subs	r0, #2
 8000466:	443c      	add	r4, r7
 8000468:	e72b      	b.n	80002c2 <__udivmoddi4+0x10a>
 800046a:	4608      	mov	r0, r1
 800046c:	e747      	b.n	80002fe <__udivmoddi4+0x146>
 800046e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000472:	443e      	add	r6, r7
 8000474:	e711      	b.n	800029a <__udivmoddi4+0xe2>
 8000476:	4629      	mov	r1, r5
 8000478:	e6ee      	b.n	8000258 <__udivmoddi4+0xa0>
 800047a:	bf00      	nop

0800047c <__aeabi_idiv0>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <activity_expiry_function>:
    }
}

K_WORK_DEFINE(activity_work, activity_work_handler);

void activity_expiry_function() { k_work_submit(&activity_work); }
 8000480:	b508      	push	{r3, lr}
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8000482:	4b0b      	ldr	r3, [pc, #44]	; (80004b0 <activity_expiry_function+0x30>)
 8000484:	f3bf 8f5b 	dmb	ish
 8000488:	e853 2f00 	ldrex	r2, [r3]
 800048c:	f042 0101 	orr.w	r1, r2, #1
 8000490:	e843 1000 	strex	r0, r1, [r3]
 8000494:	2800      	cmp	r0, #0
 8000496:	d1f7      	bne.n	8000488 <activity_expiry_function+0x8>
 8000498:	f3bf 8f5b 	dmb	ish
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 800049c:	f012 0f01 	tst.w	r2, #1
 80004a0:	d000      	beq.n	80004a4 <activity_expiry_function+0x24>
 80004a2:	bd08      	pop	{r3, pc}
		k_queue_append(&work_q->queue, work);
 80004a4:	f1a3 0108 	sub.w	r1, r3, #8
 80004a8:	4802      	ldr	r0, [pc, #8]	; (80004b4 <activity_expiry_function+0x34>)
 80004aa:	f01c fadf 	bl	801ca6c <k_queue_append>
 80004ae:	e7f8      	b.n	80004a2 <activity_expiry_function+0x22>
 80004b0:	20000128 	.word	0x20000128
 80004b4:	20001408 	.word	0x20001408

080004b8 <activity_init>:

K_TIMER_DEFINE(activity_timer, activity_expiry_function, NULL);

int activity_init() {
 80004b8:	b500      	push	{lr}
 80004ba:	b083      	sub	sp, #12
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
 80004bc:	f01c fdc6 	bl	801d04c <z_impl_k_uptime_ticks>
	if (div_ratio) {
		t += off;
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / (from_hz / to_hz);
 80004c0:	220a      	movs	r2, #10
 80004c2:	2300      	movs	r3, #0
 80004c4:	f7ff fe60 	bl	8000188 <__aeabi_uldivmod>
    activity_last_uptime = k_uptime_get();
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <activity_init+0x2c>)
 80004ca:	6018      	str	r0, [r3, #0]

    k_timer_start(&activity_timer, K_SECONDS(1), K_SECONDS(1));
 80004cc:	f242 7210 	movw	r2, #10000	; 0x2710
 80004d0:	2300      	movs	r3, #0
	z_impl_k_timer_start(timer, duration, period);
 80004d2:	e9cd 2300 	strd	r2, r3, [sp]
 80004d6:	4804      	ldr	r0, [pc, #16]	; (80004e8 <activity_init+0x30>)
 80004d8:	f014 fa9a 	bl	8014a10 <z_impl_k_timer_start>
    return 0;
}
 80004dc:	2000      	movs	r0, #0
 80004de:	b003      	add	sp, #12
 80004e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80004e4:	200014a0 	.word	0x200014a0
 80004e8:	20000680 	.word	0x20000680

080004ec <raise_event>:
int raise_event() {
 80004ec:	b508      	push	{r3, lr}
    return ZMK_EVENT_RAISE(new_zmk_activity_state_changed(
 80004ee:	4b03      	ldr	r3, [pc, #12]	; (80004fc <raise_event+0x10>)
 80004f0:	7818      	ldrb	r0, [r3, #0]
 80004f2:	f000 fb0d 	bl	8000b10 <new_zmk_activity_state_changed>
 80004f6:	f014 fd6d 	bl	8014fd4 <zmk_event_manager_raise>
}
 80004fa:	bd08      	pop	{r3, pc}
 80004fc:	200034f2 	.word	0x200034f2

08000500 <set_state>:
int set_state(enum zmk_activity_state state) {
 8000500:	b508      	push	{r3, lr}
    if (activity_state == state)
 8000502:	4b05      	ldr	r3, [pc, #20]	; (8000518 <set_state+0x18>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	4283      	cmp	r3, r0
 8000508:	d004      	beq.n	8000514 <set_state+0x14>
    activity_state = state;
 800050a:	4b03      	ldr	r3, [pc, #12]	; (8000518 <set_state+0x18>)
 800050c:	7018      	strb	r0, [r3, #0]
    return raise_event();
 800050e:	f7ff ffed 	bl	80004ec <raise_event>
}
 8000512:	bd08      	pop	{r3, pc}
        return 0;
 8000514:	2000      	movs	r0, #0
 8000516:	e7fc      	b.n	8000512 <set_state+0x12>
 8000518:	200034f2 	.word	0x200034f2

0800051c <activity_event_listener>:
int activity_event_listener(const zmk_event_t *eh) {
 800051c:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 800051e:	f01c fd95 	bl	801d04c <z_impl_k_uptime_ticks>
 8000522:	220a      	movs	r2, #10
 8000524:	2300      	movs	r3, #0
 8000526:	f7ff fe2f 	bl	8000188 <__aeabi_uldivmod>
    activity_last_uptime = k_uptime_get();
 800052a:	4b03      	ldr	r3, [pc, #12]	; (8000538 <activity_event_listener+0x1c>)
 800052c:	6018      	str	r0, [r3, #0]
    return set_state(ZMK_ACTIVITY_ACTIVE);
 800052e:	2000      	movs	r0, #0
 8000530:	f7ff ffe6 	bl	8000500 <set_state>
}
 8000534:	bd08      	pop	{r3, pc}
 8000536:	bf00      	nop
 8000538:	200014a0 	.word	0x200014a0

0800053c <activity_work_handler>:
void activity_work_handler(struct k_work *work) {
 800053c:	b508      	push	{r3, lr}
 800053e:	f01c fd85 	bl	801d04c <z_impl_k_uptime_ticks>
 8000542:	220a      	movs	r2, #10
 8000544:	2300      	movs	r3, #0
 8000546:	f7ff fe1f 	bl	8000188 <__aeabi_uldivmod>
    int32_t inactive_time = current - activity_last_uptime;
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <activity_work_handler+0x28>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	1ac0      	subs	r0, r0, r3
        if (inactive_time > MAX_IDLE_MS) {
 8000550:	f247 5330 	movw	r3, #30000	; 0x7530
 8000554:	4298      	cmp	r0, r3
 8000556:	dc00      	bgt.n	800055a <activity_work_handler+0x1e>
}
 8000558:	bd08      	pop	{r3, pc}
        set_state(ZMK_ACTIVITY_IDLE);
 800055a:	2001      	movs	r0, #1
 800055c:	f7ff ffd0 	bl	8000500 <set_state>
}
 8000560:	e7fa      	b.n	8000558 <activity_work_handler+0x1c>
 8000562:	bf00      	nop
 8000564:	200014a0 	.word	0x200014a0

08000568 <zmk_kscan_process_msgq>:

    k_msgq_put(&zmk_kscan_msgq, &ev, K_NO_WAIT);
    k_work_submit(&msg_processor.work);
}

void zmk_kscan_process_msgq(struct k_work *item) {
 8000568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056a:	b08d      	sub	sp, #52	; 0x34
    struct zmk_kscan_event ev;

    while (k_msgq_get(&zmk_kscan_msgq, &ev, K_NO_WAIT) == 0) {
 800056c:	e019      	b.n	80005a2 <zmk_kscan_process_msgq+0x3a>
        bool pressed = (ev.state == ZMK_KSCAN_EVENT_STATE_PRESSED);
        uint32_t position = zmk_matrix_transform_row_column_to_position(ev.row, ev.column);
        LOG_DBG("Row: %d, col: %d, position: %d, pressed: %s\n", ev.row, ev.column, position,
 800056e:	4b21      	ldr	r3, [pc, #132]	; (80005f4 <zmk_kscan_process_msgq+0x8c>)
 8000570:	9304      	str	r3, [sp, #16]
 8000572:	462b      	mov	r3, r5
 8000574:	2205      	movs	r2, #5
 8000576:	4669      	mov	r1, sp
 8000578:	481f      	ldr	r0, [pc, #124]	; (80005f8 <zmk_kscan_process_msgq+0x90>)
 800057a:	f003 ff7b 	bl	8004474 <log_n>
                (pressed ? "true" : "false"));
        ZMK_EVENT_RAISE(new_zmk_position_state_changed((struct zmk_position_state_changed){
 800057e:	9408      	str	r4, [sp, #32]
 8000580:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
 8000584:	f01c fd62 	bl	801d04c <z_impl_k_uptime_ticks>
 8000588:	220a      	movs	r2, #10
 800058a:	2300      	movs	r3, #0
 800058c:	f7ff fdfc 	bl	8000188 <__aeabi_uldivmod>
 8000590:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8000594:	ab0c      	add	r3, sp, #48	; 0x30
 8000596:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800059a:	f000 fac5 	bl	8000b28 <new_zmk_position_state_changed>
 800059e:	f014 fd19 	bl	8014fd4 <zmk_event_manager_raise>
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&msgq, *(uintptr_t *)&data, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2300      	movs	r3, #0
 80005a6:	a905      	add	r1, sp, #20
 80005a8:	4814      	ldr	r0, [pc, #80]	; (80005fc <zmk_kscan_process_msgq+0x94>)
 80005aa:	f013 faa3 	bl	8013af4 <z_impl_k_msgq_get>
    while (k_msgq_get(&zmk_kscan_msgq, &ev, K_NO_WAIT) == 0) {
 80005ae:	b9f8      	cbnz	r0, 80005f0 <zmk_kscan_process_msgq+0x88>
        bool pressed = (ev.state == ZMK_KSCAN_EVENT_STATE_PRESSED);
 80005b0:	9f07      	ldr	r7, [sp, #28]
 80005b2:	fab7 f687 	clz	r6, r7
 80005b6:	0976      	lsrs	r6, r6, #5
        uint32_t position = zmk_matrix_transform_row_column_to_position(ev.row, ev.column);
 80005b8:	9906      	ldr	r1, [sp, #24]
 80005ba:	9805      	ldr	r0, [sp, #20]
 80005bc:	f000 f88c 	bl	80006d8 <zmk_matrix_transform_row_column_to_position>
 80005c0:	4604      	mov	r4, r0
        LOG_DBG("Row: %d, col: %d, position: %d, pressed: %s\n", ev.row, ev.column, position,
 80005c2:	2304      	movs	r3, #4
 80005c4:	f363 0502 	bfi	r5, r3, #0, #3
 80005c8:	f36f 05c5 	bfc	r5, #3, #3
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <zmk_kscan_process_msgq+0x98>)
 80005ce:	4a0d      	ldr	r2, [pc, #52]	; (8000604 <zmk_kscan_process_msgq+0x9c>)
 80005d0:	1a9b      	subs	r3, r3, r2
 80005d2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80005d6:	f363 158f 	bfi	r5, r3, #6, #10
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <zmk_kscan_process_msgq+0xa0>)
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	9b05      	ldr	r3, [sp, #20]
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	9b06      	ldr	r3, [sp, #24]
 80005e4:	9302      	str	r3, [sp, #8]
 80005e6:	9003      	str	r0, [sp, #12]
 80005e8:	2f00      	cmp	r7, #0
 80005ea:	d1c0      	bne.n	800056e <zmk_kscan_process_msgq+0x6>
 80005ec:	4b07      	ldr	r3, [pc, #28]	; (800060c <zmk_kscan_process_msgq+0xa4>)
 80005ee:	e7bf      	b.n	8000570 <zmk_kscan_process_msgq+0x8>
            .state = pressed, .position = position, .timestamp = k_uptime_get()}));
    }
}
 80005f0:	b00d      	add	sp, #52	; 0x34
 80005f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f4:	0801d89c 	.word	0x0801d89c
 80005f8:	0801d8a4 	.word	0x0801d8a4
 80005fc:	200007f8 	.word	0x200007f8
 8000600:	0801d7a0 	.word	0x0801d7a0
 8000604:	0801d6d0 	.word	0x0801d6d0
 8000608:	0801d8f8 	.word	0x0801d8f8
 800060c:	0801d894 	.word	0x0801d894

08000610 <zmk_kscan_callback>:
                               bool pressed) {
 8000610:	b500      	push	{lr}
 8000612:	b085      	sub	sp, #20
    struct zmk_kscan_event ev = {
 8000614:	9101      	str	r1, [sp, #4]
 8000616:	9202      	str	r2, [sp, #8]
        .state = (pressed ? ZMK_KSCAN_EVENT_STATE_PRESSED : ZMK_KSCAN_EVENT_STATE_RELEASED)};
 8000618:	f083 0301 	eor.w	r3, r3, #1
    struct zmk_kscan_event ev = {
 800061c:	9303      	str	r3, [sp, #12]
	return z_impl_k_msgq_put(msgq, data, timeout);
 800061e:	2200      	movs	r2, #0
 8000620:	2300      	movs	r3, #0
 8000622:	a901      	add	r1, sp, #4
 8000624:	480d      	ldr	r0, [pc, #52]	; (800065c <zmk_kscan_callback+0x4c>)
 8000626:	f013 fa0d 	bl	8013a44 <z_impl_k_msgq_put>
 800062a:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <zmk_kscan_callback+0x50>)
 800062c:	f3bf 8f5b 	dmb	ish
 8000630:	e853 2f00 	ldrex	r2, [r3]
 8000634:	f042 0101 	orr.w	r1, r2, #1
 8000638:	e843 1000 	strex	r0, r1, [r3]
 800063c:	2800      	cmp	r0, #0
 800063e:	d1f7      	bne.n	8000630 <zmk_kscan_callback+0x20>
 8000640:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 8000644:	f012 0f01 	tst.w	r2, #1
 8000648:	d002      	beq.n	8000650 <zmk_kscan_callback+0x40>
}
 800064a:	b005      	add	sp, #20
 800064c:	f85d fb04 	ldr.w	pc, [sp], #4
		k_queue_append(&work_q->queue, work);
 8000650:	f1a3 0108 	sub.w	r1, r3, #8
 8000654:	4803      	ldr	r0, [pc, #12]	; (8000664 <zmk_kscan_callback+0x54>)
 8000656:	f01c fa09 	bl	801ca6c <k_queue_append>
 800065a:	e7f6      	b.n	800064a <zmk_kscan_callback+0x3a>
 800065c:	200007f8 	.word	0x200007f8
 8000660:	200014ac 	.word	0x200014ac
 8000664:	20001408 	.word	0x20001408

08000668 <zmk_kscan_init>:

int zmk_kscan_init(char *name) {
 8000668:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 800066a:	f012 ff77 	bl	801355c <z_impl_device_get_binding>
    const struct device *dev = device_get_binding(name);
    if (dev == NULL) {
 800066e:	b188      	cbz	r0, 8000694 <zmk_kscan_init+0x2c>
 8000670:	4604      	mov	r4, r0
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <zmk_kscan_init+0x58>)
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	4912      	ldr	r1, [pc, #72]	; (80006c4 <zmk_kscan_init+0x5c>)
 800067a:	6059      	str	r1, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
			     kscan_callback_t callback);

static inline int z_impl_kscan_config(const struct device *dev,
					kscan_callback_t callback)
{
	const struct kscan_driver_api *api =
 800067e:	6883      	ldr	r3, [r0, #8]
				(struct kscan_driver_api *)dev->api;

	return api->config(dev, callback);
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4911      	ldr	r1, [pc, #68]	; (80006c8 <zmk_kscan_init+0x60>)
 8000684:	4798      	blx	r3
 */
__syscall int kscan_enable_callback(const struct device *dev);

static inline int z_impl_kscan_enable_callback(const struct device *dev)
{
	const struct kscan_driver_api *api =
 8000686:	68a3      	ldr	r3, [r4, #8]
			(const struct kscan_driver_api *)dev->api;

	if (api->enable_callback == NULL) {
 8000688:	689b      	ldr	r3, [r3, #8]
 800068a:	b1bb      	cbz	r3, 80006bc <zmk_kscan_init+0x54>
		return -ENOTSUP;
	}

	return api->enable_callback(dev);
 800068c:	4620      	mov	r0, r4
 800068e:	4798      	blx	r3
    k_work_init(&msg_processor.work, zmk_kscan_process_msgq);

    kscan_config(dev, zmk_kscan_callback);
    kscan_enable_callback(dev);

    return 0;
 8000690:	2000      	movs	r0, #0
}
 8000692:	bd10      	pop	{r4, pc}
        LOG_ERR("Failed to get the KSCAN device");
 8000694:	f04f 0100 	mov.w	r1, #0
 8000698:	2301      	movs	r3, #1
 800069a:	f363 0102 	bfi	r1, r3, #0, #3
 800069e:	f36f 01c5 	bfc	r1, #3, #3
 80006a2:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <zmk_kscan_init+0x64>)
 80006a4:	4a0a      	ldr	r2, [pc, #40]	; (80006d0 <zmk_kscan_init+0x68>)
 80006a6:	1a9b      	subs	r3, r3, r2
 80006a8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80006ac:	f363 118f 	bfi	r1, r3, #6, #10
 80006b0:	4808      	ldr	r0, [pc, #32]	; (80006d4 <zmk_kscan_init+0x6c>)
 80006b2:	f003 ff4b 	bl	800454c <log_0>
        return -EINVAL;
 80006b6:	f06f 0015 	mvn.w	r0, #21
 80006ba:	e7ea      	b.n	8000692 <zmk_kscan_init+0x2a>
    return 0;
 80006bc:	2000      	movs	r0, #0
 80006be:	e7e8      	b.n	8000692 <zmk_kscan_init+0x2a>
 80006c0:	200014a4 	.word	0x200014a4
 80006c4:	08000569 	.word	0x08000569
 80006c8:	08000611 	.word	0x08000611
 80006cc:	0801d7a0 	.word	0x0801d7a0
 80006d0:	0801d6d0 	.word	0x0801d6d0
 80006d4:	0801d8d8 	.word	0x0801d8d8

080006d8 <zmk_matrix_transform_row_column_to_position>:

uint32_t zmk_matrix_transform_row_column_to_position(uint32_t row, uint32_t column) {
    uint32_t matrix_index;

#if DT_NODE_HAS_PROP(ZMK_KEYMAP_TRANSFORM_NODE, col_offset)
    column += DT_PROP(ZMK_KEYMAP_TRANSFORM_NODE, col_offset);
 80006d8:	3106      	adds	r1, #6

#if DT_NODE_HAS_PROP(ZMK_KEYMAP_TRANSFORM_NODE, row_offset)
    row += DT_PROP(ZMK_KEYMAP_TRANSFORM_NODE, row_offset);
#endif

    matrix_index = (row * ZMK_MATRIX_COLS) + column;
 80006da:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80006de:	eb01 0180 	add.w	r1, r1, r0, lsl #2
#ifdef ZMK_KEYMAP_TRANSFORM_NODE
    return transform[matrix_index];
#else
    return matrix_index;
#endif /* ZMK_KEYMAP_TRANSFORM_NODE */
};
 80006e2:	4b02      	ldr	r3, [pc, #8]	; (80006ec <zmk_matrix_transform_row_column_to_position+0x14>)
 80006e4:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	0801d910 	.word	0x0801d910

080006f0 <zmk_hid_register_mod>:
        LOG_DBG("Modifiers set to 0x%02X", keyboard_report.body.modifiers);                        \
    }

zmk_mod_flags_t zmk_hid_get_explicit_mods() { return explicit_modifiers; }

int zmk_hid_register_mod(zmk_mod_t modifier) {
 80006f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006f2:	b083      	sub	sp, #12
 80006f4:	4605      	mov	r5, r0
    explicit_modifier_counts[modifier]++;
 80006f6:	4a1a      	ldr	r2, [pc, #104]	; (8000760 <zmk_hid_register_mod+0x70>)
 80006f8:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 80006fc:	3301      	adds	r3, #1
 80006fe:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    LOG_DBG("Modifier %d count %d", modifier, explicit_modifier_counts[modifier]);
 8000702:	2704      	movs	r7, #4
 8000704:	f04f 0200 	mov.w	r2, #0
 8000708:	f367 0202 	bfi	r2, r7, #0, #3
 800070c:	f36f 02c5 	bfc	r2, #3, #3
 8000710:	4c14      	ldr	r4, [pc, #80]	; (8000764 <zmk_hid_register_mod+0x74>)
 8000712:	4915      	ldr	r1, [pc, #84]	; (8000768 <zmk_hid_register_mod+0x78>)
 8000714:	1a64      	subs	r4, r4, r1
 8000716:	f3c4 04c9 	ubfx	r4, r4, #3, #10
 800071a:	f364 128f 	bfi	r2, r4, #6, #10
 800071e:	4e13      	ldr	r6, [pc, #76]	; (800076c <zmk_hid_register_mod+0x7c>)
 8000720:	f8ad 2000 	strh.w	r2, [sp]
 8000724:	4602      	mov	r2, r0
 8000726:	4631      	mov	r1, r6
 8000728:	4811      	ldr	r0, [pc, #68]	; (8000770 <zmk_hid_register_mod+0x80>)
 800072a:	f003 fcd3 	bl	80040d4 <log_3>
    WRITE_BIT(explicit_modifiers, modifier, true);
 800072e:	2201      	movs	r2, #1
 8000730:	fa02 f505 	lsl.w	r5, r2, r5
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <zmk_hid_register_mod+0x84>)
 8000736:	781a      	ldrb	r2, [r3, #0]
 8000738:	432a      	orrs	r2, r5
 800073a:	b2d2      	uxtb	r2, r2
 800073c:	701a      	strb	r2, [r3, #0]
    SET_MODIFIERS(explicit_modifiers);
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <zmk_hid_register_mod+0x88>)
 8000740:	705a      	strb	r2, [r3, #1]
 8000742:	f04f 0300 	mov.w	r3, #0
 8000746:	f367 0302 	bfi	r3, r7, #0, #3
 800074a:	f36f 03c5 	bfc	r3, #3, #3
 800074e:	f364 138f 	bfi	r3, r4, #6, #10
 8000752:	4631      	mov	r1, r6
 8000754:	4809      	ldr	r0, [pc, #36]	; (800077c <zmk_hid_register_mod+0x8c>)
 8000756:	f003 fe09 	bl	800436c <log_2>
    return 0;
}
 800075a:	2000      	movs	r0, #0
 800075c:	b003      	add	sp, #12
 800075e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000760:	200014b0 	.word	0x200014b0
 8000764:	0801d7a0 	.word	0x0801d7a0
 8000768:	0801d6d0 	.word	0x0801d6d0
 800076c:	0801da60 	.word	0x0801da60
 8000770:	0801d9c4 	.word	0x0801d9c4
 8000774:	200034f3 	.word	0x200034f3
 8000778:	2000013c 	.word	0x2000013c
 800077c:	0801d9e0 	.word	0x0801d9e0

08000780 <zmk_hid_unregister_mod>:

int zmk_hid_unregister_mod(zmk_mod_t modifier) {
 8000780:	b570      	push	{r4, r5, r6, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	4604      	mov	r4, r0
    if (explicit_modifier_counts[modifier] <= 0) {
 8000786:	4b34      	ldr	r3, [pc, #208]	; (8000858 <zmk_hid_unregister_mod+0xd8>)
 8000788:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800078c:	2b00      	cmp	r3, #0
 800078e:	dd35      	ble.n	80007fc <zmk_hid_unregister_mod+0x7c>
        LOG_ERR("Tried to unregister modifier %d too often", modifier);
        return -EINVAL;
    }
    explicit_modifier_counts[modifier]--;
 8000790:	3b01      	subs	r3, #1
 8000792:	4e31      	ldr	r6, [pc, #196]	; (8000858 <zmk_hid_unregister_mod+0xd8>)
 8000794:	f846 3020 	str.w	r3, [r6, r0, lsl #2]
    LOG_DBG("Modifier %d count: %d", modifier, explicit_modifier_counts[modifier]);
 8000798:	f04f 0100 	mov.w	r1, #0
 800079c:	2204      	movs	r2, #4
 800079e:	f362 0102 	bfi	r1, r2, #0, #3
 80007a2:	f36f 01c5 	bfc	r1, #3, #3
 80007a6:	4a2d      	ldr	r2, [pc, #180]	; (800085c <zmk_hid_unregister_mod+0xdc>)
 80007a8:	482d      	ldr	r0, [pc, #180]	; (8000860 <zmk_hid_unregister_mod+0xe0>)
 80007aa:	1a12      	subs	r2, r2, r0
 80007ac:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 80007b0:	f362 118f 	bfi	r1, r2, #6, #10
 80007b4:	4d2b      	ldr	r5, [pc, #172]	; (8000864 <zmk_hid_unregister_mod+0xe4>)
 80007b6:	f8ad 1000 	strh.w	r1, [sp]
 80007ba:	4622      	mov	r2, r4
 80007bc:	4629      	mov	r1, r5
 80007be:	482a      	ldr	r0, [pc, #168]	; (8000868 <zmk_hid_unregister_mod+0xe8>)
 80007c0:	f003 fc88 	bl	80040d4 <log_3>
    if (explicit_modifier_counts[modifier] == 0) {
 80007c4:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 80007c8:	b36b      	cbz	r3, 8000826 <zmk_hid_unregister_mod+0xa6>
        LOG_DBG("Modifier %d released", modifier);
        WRITE_BIT(explicit_modifiers, modifier, false);
    }
    SET_MODIFIERS(explicit_modifiers);
 80007ca:	4b28      	ldr	r3, [pc, #160]	; (800086c <zmk_hid_unregister_mod+0xec>)
 80007cc:	781a      	ldrb	r2, [r3, #0]
 80007ce:	4b28      	ldr	r3, [pc, #160]	; (8000870 <zmk_hid_unregister_mod+0xf0>)
 80007d0:	705a      	strb	r2, [r3, #1]
 80007d2:	f04f 0300 	mov.w	r3, #0
 80007d6:	2104      	movs	r1, #4
 80007d8:	f361 0302 	bfi	r3, r1, #0, #3
 80007dc:	f36f 03c5 	bfc	r3, #3, #3
 80007e0:	491e      	ldr	r1, [pc, #120]	; (800085c <zmk_hid_unregister_mod+0xdc>)
 80007e2:	481f      	ldr	r0, [pc, #124]	; (8000860 <zmk_hid_unregister_mod+0xe0>)
 80007e4:	1a09      	subs	r1, r1, r0
 80007e6:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 80007ea:	f361 138f 	bfi	r3, r1, #6, #10
 80007ee:	4629      	mov	r1, r5
 80007f0:	4820      	ldr	r0, [pc, #128]	; (8000874 <zmk_hid_unregister_mod+0xf4>)
 80007f2:	f003 fdbb 	bl	800436c <log_2>
    return 0;
 80007f6:	2000      	movs	r0, #0
}
 80007f8:	b002      	add	sp, #8
 80007fa:	bd70      	pop	{r4, r5, r6, pc}
        LOG_ERR("Tried to unregister modifier %d too often", modifier);
 80007fc:	f04f 0200 	mov.w	r2, #0
 8000800:	2301      	movs	r3, #1
 8000802:	f363 0202 	bfi	r2, r3, #0, #3
 8000806:	f36f 02c5 	bfc	r2, #3, #3
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <zmk_hid_unregister_mod+0xdc>)
 800080c:	4914      	ldr	r1, [pc, #80]	; (8000860 <zmk_hid_unregister_mod+0xe0>)
 800080e:	1a5b      	subs	r3, r3, r1
 8000810:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8000814:	f363 128f 	bfi	r2, r3, #6, #10
 8000818:	4601      	mov	r1, r0
 800081a:	4817      	ldr	r0, [pc, #92]	; (8000878 <zmk_hid_unregister_mod+0xf8>)
 800081c:	f003 fd26 	bl	800426c <log_1>
        return -EINVAL;
 8000820:	f06f 0015 	mvn.w	r0, #21
 8000824:	e7e8      	b.n	80007f8 <zmk_hid_unregister_mod+0x78>
        LOG_DBG("Modifier %d released", modifier);
 8000826:	2204      	movs	r2, #4
 8000828:	f362 0302 	bfi	r3, r2, #0, #3
 800082c:	f36f 03c5 	bfc	r3, #3, #3
 8000830:	4a0a      	ldr	r2, [pc, #40]	; (800085c <zmk_hid_unregister_mod+0xdc>)
 8000832:	490b      	ldr	r1, [pc, #44]	; (8000860 <zmk_hid_unregister_mod+0xe0>)
 8000834:	1a52      	subs	r2, r2, r1
 8000836:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 800083a:	f362 138f 	bfi	r3, r2, #6, #10
 800083e:	4622      	mov	r2, r4
 8000840:	4629      	mov	r1, r5
 8000842:	480e      	ldr	r0, [pc, #56]	; (800087c <zmk_hid_unregister_mod+0xfc>)
 8000844:	f003 fd92 	bl	800436c <log_2>
        WRITE_BIT(explicit_modifiers, modifier, false);
 8000848:	2001      	movs	r0, #1
 800084a:	40a0      	lsls	r0, r4
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <zmk_hid_unregister_mod+0xec>)
 800084e:	781c      	ldrb	r4, [r3, #0]
 8000850:	ea24 0400 	bic.w	r4, r4, r0
 8000854:	701c      	strb	r4, [r3, #0]
 8000856:	e7b8      	b.n	80007ca <zmk_hid_unregister_mod+0x4a>
 8000858:	200014b0 	.word	0x200014b0
 800085c:	0801d7a0 	.word	0x0801d7a0
 8000860:	0801d6d0 	.word	0x0801d6d0
 8000864:	0801da78 	.word	0x0801da78
 8000868:	0801da28 	.word	0x0801da28
 800086c:	200034f3 	.word	0x200034f3
 8000870:	2000013c 	.word	0x2000013c
 8000874:	0801d9e0 	.word	0x0801d9e0
 8000878:	0801d9fc 	.word	0x0801d9fc
 800087c:	0801da44 	.word	0x0801da44

08000880 <zmk_hid_implicit_modifiers_press>:
        if (val) {                                                                                 \
            break;                                                                                 \
        }                                                                                          \
    }

int zmk_hid_implicit_modifiers_press(zmk_mod_flags_t implicit_modifiers) {
 8000880:	b508      	push	{r3, lr}
    SET_MODIFIERS(explicit_modifiers | implicit_modifiers);
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <zmk_hid_implicit_modifiers_press+0x34>)
 8000884:	781a      	ldrb	r2, [r3, #0]
 8000886:	4302      	orrs	r2, r0
 8000888:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <zmk_hid_implicit_modifiers_press+0x38>)
 800088a:	705a      	strb	r2, [r3, #1]
 800088c:	f04f 0300 	mov.w	r3, #0
 8000890:	2104      	movs	r1, #4
 8000892:	f361 0302 	bfi	r3, r1, #0, #3
 8000896:	f36f 03c5 	bfc	r3, #3, #3
 800089a:	4908      	ldr	r1, [pc, #32]	; (80008bc <zmk_hid_implicit_modifiers_press+0x3c>)
 800089c:	4808      	ldr	r0, [pc, #32]	; (80008c0 <zmk_hid_implicit_modifiers_press+0x40>)
 800089e:	1a09      	subs	r1, r1, r0
 80008a0:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 80008a4:	f361 138f 	bfi	r3, r1, #6, #10
 80008a8:	4906      	ldr	r1, [pc, #24]	; (80008c4 <zmk_hid_implicit_modifiers_press+0x44>)
 80008aa:	4807      	ldr	r0, [pc, #28]	; (80008c8 <zmk_hid_implicit_modifiers_press+0x48>)
 80008ac:	f003 fd5e 	bl	800436c <log_2>
    return 0;
}
 80008b0:	2000      	movs	r0, #0
 80008b2:	bd08      	pop	{r3, pc}
 80008b4:	200034f3 	.word	0x200034f3
 80008b8:	2000013c 	.word	0x2000013c
 80008bc:	0801d7a0 	.word	0x0801d7a0
 80008c0:	0801d6d0 	.word	0x0801d6d0
 80008c4:	0801da90 	.word	0x0801da90
 80008c8:	0801d9e0 	.word	0x0801d9e0

080008cc <zmk_hid_implicit_modifiers_release>:

int zmk_hid_implicit_modifiers_release() {
 80008cc:	b508      	push	{r3, lr}
    SET_MODIFIERS(explicit_modifiers);
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <zmk_hid_implicit_modifiers_release+0x34>)
 80008d0:	781a      	ldrb	r2, [r3, #0]
 80008d2:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <zmk_hid_implicit_modifiers_release+0x38>)
 80008d4:	705a      	strb	r2, [r3, #1]
 80008d6:	f04f 0300 	mov.w	r3, #0
 80008da:	2104      	movs	r1, #4
 80008dc:	f361 0302 	bfi	r3, r1, #0, #3
 80008e0:	f36f 03c5 	bfc	r3, #3, #3
 80008e4:	4908      	ldr	r1, [pc, #32]	; (8000908 <zmk_hid_implicit_modifiers_release+0x3c>)
 80008e6:	4809      	ldr	r0, [pc, #36]	; (800090c <zmk_hid_implicit_modifiers_release+0x40>)
 80008e8:	1a09      	subs	r1, r1, r0
 80008ea:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 80008ee:	f361 138f 	bfi	r3, r1, #6, #10
 80008f2:	4907      	ldr	r1, [pc, #28]	; (8000910 <zmk_hid_implicit_modifiers_release+0x44>)
 80008f4:	4807      	ldr	r0, [pc, #28]	; (8000914 <zmk_hid_implicit_modifiers_release+0x48>)
 80008f6:	f003 fd39 	bl	800436c <log_2>
    return 0;
}
 80008fa:	2000      	movs	r0, #0
 80008fc:	bd08      	pop	{r3, pc}
 80008fe:	bf00      	nop
 8000900:	200034f3 	.word	0x200034f3
 8000904:	2000013c 	.word	0x2000013c
 8000908:	0801d7a0 	.word	0x0801d7a0
 800090c:	0801d6d0 	.word	0x0801d6d0
 8000910:	0801dab4 	.word	0x0801dab4
 8000914:	0801d9e0 	.word	0x0801d9e0

08000918 <zmk_hid_keyboard_press>:

int zmk_hid_keyboard_press(zmk_key_t code) {
 8000918:	b508      	push	{r3, lr}
    if (code >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL && code <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI) {
 800091a:	f1a0 03e0 	sub.w	r3, r0, #224	; 0xe0
 800091e:	2b07      	cmp	r3, #7
 8000920:	d901      	bls.n	8000926 <zmk_hid_keyboard_press+0xe>
        return zmk_hid_register_mod(code - HID_USAGE_KEY_KEYBOARD_LEFTCONTROL);
    }
    TOGGLE_KEYBOARD(0U, code);
 8000922:	2300      	movs	r3, #0
 8000924:	e005      	b.n	8000932 <zmk_hid_keyboard_press+0x1a>
        return zmk_hid_register_mod(code - HID_USAGE_KEY_KEYBOARD_LEFTCONTROL);
 8000926:	3020      	adds	r0, #32
 8000928:	b2c0      	uxtb	r0, r0
 800092a:	f7ff fee1 	bl	80006f0 <zmk_hid_register_mod>
 800092e:	e00f      	b.n	8000950 <zmk_hid_keyboard_press+0x38>
    TOGGLE_KEYBOARD(0U, code);
 8000930:	3301      	adds	r3, #1
 8000932:	2b05      	cmp	r3, #5
 8000934:	dc0b      	bgt.n	800094e <zmk_hid_keyboard_press+0x36>
 8000936:	4a07      	ldr	r2, [pc, #28]	; (8000954 <zmk_hid_keyboard_press+0x3c>)
 8000938:	441a      	add	r2, r3
 800093a:	78d2      	ldrb	r2, [r2, #3]
 800093c:	2a00      	cmp	r2, #0
 800093e:	d1f7      	bne.n	8000930 <zmk_hid_keyboard_press+0x18>
 8000940:	4a04      	ldr	r2, [pc, #16]	; (8000954 <zmk_hid_keyboard_press+0x3c>)
 8000942:	441a      	add	r2, r3
 8000944:	70d0      	strb	r0, [r2, #3]
 8000946:	2800      	cmp	r0, #0
 8000948:	d0f2      	beq.n	8000930 <zmk_hid_keyboard_press+0x18>
    return 0;
 800094a:	2000      	movs	r0, #0
 800094c:	e000      	b.n	8000950 <zmk_hid_keyboard_press+0x38>
 800094e:	2000      	movs	r0, #0
};
 8000950:	bd08      	pop	{r3, pc}
 8000952:	bf00      	nop
 8000954:	2000013c 	.word	0x2000013c

08000958 <zmk_hid_keyboard_release>:

int zmk_hid_keyboard_release(zmk_key_t code) {
 8000958:	b508      	push	{r3, lr}
    if (code >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL && code <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI) {
 800095a:	f1a0 03e0 	sub.w	r3, r0, #224	; 0xe0
 800095e:	2b07      	cmp	r3, #7
 8000960:	d901      	bls.n	8000966 <zmk_hid_keyboard_release+0xe>
        return zmk_hid_unregister_mod(code - HID_USAGE_KEY_KEYBOARD_LEFTCONTROL);
    }
    TOGGLE_KEYBOARD(code, 0U);
 8000962:	2300      	movs	r3, #0
 8000964:	e005      	b.n	8000972 <zmk_hid_keyboard_release+0x1a>
        return zmk_hid_unregister_mod(code - HID_USAGE_KEY_KEYBOARD_LEFTCONTROL);
 8000966:	3020      	adds	r0, #32
 8000968:	b2c0      	uxtb	r0, r0
 800096a:	f7ff ff09 	bl	8000780 <zmk_hid_unregister_mod>
 800096e:	e00d      	b.n	800098c <zmk_hid_keyboard_release+0x34>
    TOGGLE_KEYBOARD(code, 0U);
 8000970:	3301      	adds	r3, #1
 8000972:	2b05      	cmp	r3, #5
 8000974:	dc09      	bgt.n	800098a <zmk_hid_keyboard_release+0x32>
 8000976:	4a06      	ldr	r2, [pc, #24]	; (8000990 <zmk_hid_keyboard_release+0x38>)
 8000978:	441a      	add	r2, r3
 800097a:	78d2      	ldrb	r2, [r2, #3]
 800097c:	4282      	cmp	r2, r0
 800097e:	d1f7      	bne.n	8000970 <zmk_hid_keyboard_release+0x18>
 8000980:	4a03      	ldr	r2, [pc, #12]	; (8000990 <zmk_hid_keyboard_release+0x38>)
 8000982:	441a      	add	r2, r3
 8000984:	2100      	movs	r1, #0
 8000986:	70d1      	strb	r1, [r2, #3]
 8000988:	e7f2      	b.n	8000970 <zmk_hid_keyboard_release+0x18>
    return 0;
 800098a:	2000      	movs	r0, #0
};
 800098c:	bd08      	pop	{r3, pc}
 800098e:	bf00      	nop
 8000990:	2000013c 	.word	0x2000013c

08000994 <zmk_hid_keyboard_clear>:

void zmk_hid_keyboard_clear() { memset(&keyboard_report.body, 0, sizeof(keyboard_report.body)); }
 8000994:	b508      	push	{r3, lr}
 8000996:	2208      	movs	r2, #8
 8000998:	2100      	movs	r1, #0
 800099a:	4802      	ldr	r0, [pc, #8]	; (80009a4 <zmk_hid_keyboard_clear+0x10>)
 800099c:	f017 fa93 	bl	8017ec6 <memset>
 80009a0:	bd08      	pop	{r3, pc}
 80009a2:	bf00      	nop
 80009a4:	2000013d 	.word	0x2000013d

080009a8 <zmk_hid_consumer_press>:

int zmk_hid_consumer_press(zmk_key_t code) {
    TOGGLE_CONSUMER(0U, code);
 80009a8:	2300      	movs	r3, #0
 80009aa:	e000      	b.n	80009ae <zmk_hid_consumer_press+0x6>
 80009ac:	3301      	adds	r3, #1
 80009ae:	2b05      	cmp	r3, #5
 80009b0:	dc0d      	bgt.n	80009ce <zmk_hid_consumer_press+0x26>
 80009b2:	4a08      	ldr	r2, [pc, #32]	; (80009d4 <zmk_hid_consumer_press+0x2c>)
 80009b4:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80009b8:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 80009bc:	2a00      	cmp	r2, #0
 80009be:	d1f5      	bne.n	80009ac <zmk_hid_consumer_press+0x4>
 80009c0:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <zmk_hid_consumer_press+0x2c>)
 80009c2:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80009c6:	f8a2 0001 	strh.w	r0, [r2, #1]
 80009ca:	2800      	cmp	r0, #0
 80009cc:	d0ee      	beq.n	80009ac <zmk_hid_consumer_press+0x4>
    return 0;
};
 80009ce:	2000      	movs	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	2000012c 	.word	0x2000012c

080009d8 <zmk_hid_consumer_release>:

int zmk_hid_consumer_release(zmk_key_t code) {
    TOGGLE_CONSUMER(code, 0U);
 80009d8:	2300      	movs	r3, #0
 80009da:	e000      	b.n	80009de <zmk_hid_consumer_release+0x6>
 80009dc:	3301      	adds	r3, #1
 80009de:	2b05      	cmp	r3, #5
 80009e0:	dc0d      	bgt.n	80009fe <zmk_hid_consumer_release+0x26>
 80009e2:	4a08      	ldr	r2, [pc, #32]	; (8000a04 <zmk_hid_consumer_release+0x2c>)
 80009e4:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80009e8:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 80009ec:	4282      	cmp	r2, r0
 80009ee:	d1f5      	bne.n	80009dc <zmk_hid_consumer_release+0x4>
 80009f0:	4a04      	ldr	r2, [pc, #16]	; (8000a04 <zmk_hid_consumer_release+0x2c>)
 80009f2:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80009f6:	2100      	movs	r1, #0
 80009f8:	7051      	strb	r1, [r2, #1]
 80009fa:	7091      	strb	r1, [r2, #2]
 80009fc:	e7ee      	b.n	80009dc <zmk_hid_consumer_release+0x4>
    return 0;
};
 80009fe:	2000      	movs	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	2000012c 	.word	0x2000012c

08000a08 <zmk_hid_consumer_clear>:

void zmk_hid_consumer_clear() { memset(&consumer_report.body, 0, sizeof(consumer_report.body)); }
 8000a08:	b508      	push	{r3, lr}
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4802      	ldr	r0, [pc, #8]	; (8000a18 <zmk_hid_consumer_clear+0x10>)
 8000a10:	f017 fa59 	bl	8017ec6 <memset>
 8000a14:	bd08      	pop	{r3, pc}
 8000a16:	bf00      	nop
 8000a18:	2000012d 	.word	0x2000012d

08000a1c <zmk_hid_get_keyboard_report>:

struct zmk_hid_keyboard_report *zmk_hid_get_keyboard_report() {
    return &keyboard_report;
}
 8000a1c:	4800      	ldr	r0, [pc, #0]	; (8000a20 <zmk_hid_get_keyboard_report+0x4>)
 8000a1e:	4770      	bx	lr
 8000a20:	2000013c 	.word	0x2000013c

08000a24 <zmk_hid_get_consumer_report>:

struct zmk_hid_consumer_report *zmk_hid_get_consumer_report() {
    return &consumer_report;
}
 8000a24:	4800      	ldr	r0, [pc, #0]	; (8000a28 <zmk_hid_get_consumer_report+0x4>)
 8000a26:	4770      	bx	lr
 8000a28:	2000012c 	.word	0x2000012c

08000a2c <zmk_event_manager_handle_from>:
extern struct zmk_event_type *__event_type_end[];

extern struct zmk_event_subscription __event_subscriptions_start[];
extern struct zmk_event_subscription __event_subscriptions_end[];

int zmk_event_manager_handle_from(zmk_event_t *event, uint8_t start_index) {
 8000a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a2e:	4606      	mov	r6, r0
    int ret = 0;
    uint8_t len = __event_subscriptions_end - __event_subscriptions_start;
 8000a30:	4f2f      	ldr	r7, [pc, #188]	; (8000af0 <zmk_event_manager_handle_from+0xc4>)
 8000a32:	4b30      	ldr	r3, [pc, #192]	; (8000af4 <zmk_event_manager_handle_from+0xc8>)
 8000a34:	1aff      	subs	r7, r7, r3
 8000a36:	10ff      	asrs	r7, r7, #3
    for (int i = start_index; i < len; i++) {
 8000a38:	460c      	mov	r4, r1
    int ret = 0;
 8000a3a:	2500      	movs	r5, #0
    for (int i = start_index; i < len; i++) {
 8000a3c:	e02c      	b.n	8000a98 <zmk_event_manager_handle_from+0x6c>
        struct zmk_event_subscription *ev_sub = __event_subscriptions_start + i;
        if (ev_sub->event_type == event->event) {
            ret = ev_sub->listener->callback(event);
            if (ret < 0) {
                LOG_DBG("Listener returned an error: %d", ret);
 8000a3e:	f04f 0300 	mov.w	r3, #0
 8000a42:	2204      	movs	r2, #4
 8000a44:	f362 0302 	bfi	r3, r2, #0, #3
 8000a48:	f36f 03c5 	bfc	r3, #3, #3
 8000a4c:	4a2a      	ldr	r2, [pc, #168]	; (8000af8 <zmk_event_manager_handle_from+0xcc>)
 8000a4e:	492b      	ldr	r1, [pc, #172]	; (8000afc <zmk_event_manager_handle_from+0xd0>)
 8000a50:	1a52      	subs	r2, r2, r1
 8000a52:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8000a56:	f362 138f 	bfi	r3, r2, #6, #10
 8000a5a:	462a      	mov	r2, r5
 8000a5c:	4928      	ldr	r1, [pc, #160]	; (8000b00 <zmk_event_manager_handle_from+0xd4>)
 8000a5e:	4829      	ldr	r0, [pc, #164]	; (8000b04 <zmk_event_manager_handle_from+0xd8>)
 8000a60:	f003 fc84 	bl	800436c <log_2>
                goto release;
 8000a64:	e012      	b.n	8000a8c <zmk_event_manager_handle_from+0x60>
            } else if (ret > 0) {
                switch (ret) {
                case ZMK_EV_EVENT_HANDLED:
                    LOG_DBG("Listener handled the event");
 8000a66:	f04f 0200 	mov.w	r2, #0
 8000a6a:	2304      	movs	r3, #4
 8000a6c:	f363 0202 	bfi	r2, r3, #0, #3
 8000a70:	f36f 02c5 	bfc	r2, #3, #3
 8000a74:	4b20      	ldr	r3, [pc, #128]	; (8000af8 <zmk_event_manager_handle_from+0xcc>)
 8000a76:	4921      	ldr	r1, [pc, #132]	; (8000afc <zmk_event_manager_handle_from+0xd0>)
 8000a78:	1a5b      	subs	r3, r3, r1
 8000a7a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8000a7e:	f363 128f 	bfi	r2, r3, #6, #10
 8000a82:	491f      	ldr	r1, [pc, #124]	; (8000b00 <zmk_event_manager_handle_from+0xd4>)
 8000a84:	4820      	ldr	r0, [pc, #128]	; (8000b08 <zmk_event_manager_handle_from+0xdc>)
 8000a86:	f003 fbf1 	bl	800426c <log_1>
                    ret = 0;
 8000a8a:	2500      	movs	r5, #0
            }
        }
    }

release:
    k_free(event);
 8000a8c:	4630      	mov	r0, r6
 8000a8e:	f01c fbd4 	bl	801d23a <k_free>
    return ret;
}
 8000a92:	4628      	mov	r0, r5
 8000a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (int i = start_index; i < len; i++) {
 8000a96:	3401      	adds	r4, #1
 8000a98:	b2fb      	uxtb	r3, r7
 8000a9a:	429c      	cmp	r4, r3
 8000a9c:	daf6      	bge.n	8000a8c <zmk_event_manager_handle_from+0x60>
        struct zmk_event_subscription *ev_sub = __event_subscriptions_start + i;
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <zmk_event_manager_handle_from+0xc8>)
 8000aa0:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
        if (ev_sub->event_type == event->event) {
 8000aa4:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
 8000aa8:	6833      	ldr	r3, [r6, #0]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d1f3      	bne.n	8000a96 <zmk_event_manager_handle_from+0x6a>
            ret = ev_sub->listener->callback(event);
 8000aae:	684b      	ldr	r3, [r1, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4630      	mov	r0, r6
 8000ab4:	4798      	blx	r3
            if (ret < 0) {
 8000ab6:	1e05      	subs	r5, r0, #0
 8000ab8:	dbc1      	blt.n	8000a3e <zmk_event_manager_handle_from+0x12>
            } else if (ret > 0) {
 8000aba:	2d00      	cmp	r5, #0
 8000abc:	ddeb      	ble.n	8000a96 <zmk_event_manager_handle_from+0x6a>
                switch (ret) {
 8000abe:	2d01      	cmp	r5, #1
 8000ac0:	d0d1      	beq.n	8000a66 <zmk_event_manager_handle_from+0x3a>
 8000ac2:	2d02      	cmp	r5, #2
 8000ac4:	d1e7      	bne.n	8000a96 <zmk_event_manager_handle_from+0x6a>
                    LOG_DBG("Listener captured the event");
 8000ac6:	f04f 0200 	mov.w	r2, #0
 8000aca:	2304      	movs	r3, #4
 8000acc:	f363 0202 	bfi	r2, r3, #0, #3
 8000ad0:	f36f 02c5 	bfc	r2, #3, #3
 8000ad4:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <zmk_event_manager_handle_from+0xcc>)
 8000ad6:	4909      	ldr	r1, [pc, #36]	; (8000afc <zmk_event_manager_handle_from+0xd0>)
 8000ad8:	1a5b      	subs	r3, r3, r1
 8000ada:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8000ade:	f363 128f 	bfi	r2, r3, #6, #10
 8000ae2:	4907      	ldr	r1, [pc, #28]	; (8000b00 <zmk_event_manager_handle_from+0xd4>)
 8000ae4:	4809      	ldr	r0, [pc, #36]	; (8000b0c <zmk_event_manager_handle_from+0xe0>)
 8000ae6:	f003 fbc1 	bl	800426c <log_1>
                    event->last_listener_index = i;
 8000aea:	7134      	strb	r4, [r6, #4]
                    return 0;
 8000aec:	2500      	movs	r5, #0
 8000aee:	e7d0      	b.n	8000a92 <zmk_event_manager_handle_from+0x66>
 8000af0:	08021ecc 	.word	0x08021ecc
 8000af4:	08021e9c 	.word	0x08021e9c
 8000af8:	0801d7a0 	.word	0x0801d7a0
 8000afc:	0801d6d0 	.word	0x0801d6d0
 8000b00:	0801db3c 	.word	0x0801db3c
 8000b04:	0801dad8 	.word	0x0801dad8
 8000b08:	0801dafc 	.word	0x0801dafc
 8000b0c:	0801db1c 	.word	0x0801db1c

08000b10 <new_zmk_activity_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/activity_state_changed.h>

 8000b10:	b510      	push	{r4, lr}
 8000b12:	4604      	mov	r4, r0
 8000b14:	200c      	movs	r0, #12
 8000b16:	f014 fa1b 	bl	8014f50 <k_malloc>
 8000b1a:	4a02      	ldr	r2, [pc, #8]	; (8000b24 <new_zmk_activity_state_changed+0x14>)
 8000b1c:	6002      	str	r2, [r0, #0]
 8000b1e:	7204      	strb	r4, [r0, #8]
 8000b20:	bd10      	pop	{r4, pc}
 8000b22:	bf00      	nop
 8000b24:	0801db78 	.word	0x0801db78

08000b28 <new_zmk_position_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/position_state_changed.h>

 8000b28:	b570      	push	{r4, r5, r6, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	466c      	mov	r4, sp
 8000b2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000b32:	2018      	movs	r0, #24
 8000b34:	f014 fa0c 	bl	8014f50 <k_malloc>
 8000b38:	4606      	mov	r6, r0
 8000b3a:	4605      	mov	r5, r0
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <new_zmk_position_state_changed+0x28>)
 8000b3e:	f845 3b08 	str.w	r3, [r5], #8
 8000b42:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b46:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	b004      	add	sp, #16
 8000b4e:	bd70      	pop	{r4, r5, r6, pc}
 8000b50:	0801db98 	.word	0x0801db98

08000b54 <as_zmk_position_state_changed>:
 8000b54:	6802      	ldr	r2, [r0, #0]
 8000b56:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <as_zmk_position_state_changed+0x10>)
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d101      	bne.n	8000b60 <as_zmk_position_state_changed+0xc>
 8000b5c:	3008      	adds	r0, #8
 8000b5e:	4770      	bx	lr
 8000b60:	2000      	movs	r0, #0
 8000b62:	4770      	bx	lr
 8000b64:	0801db98 	.word	0x0801db98

08000b68 <as_zmk_keycode_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/keycode_state_changed.h>

ZMK_EVENT_IMPL(zmk_keycode_state_changed);
 8000b68:	6802      	ldr	r2, [r0, #0]
 8000b6a:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <as_zmk_keycode_state_changed+0x10>)
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d101      	bne.n	8000b74 <as_zmk_keycode_state_changed+0xc>
 8000b70:	3008      	adds	r0, #8
 8000b72:	4770      	bx	lr
 8000b74:	2000      	movs	r0, #0
 8000b76:	4770      	bx	lr
 8000b78:	0801dbd4 	.word	0x0801dbd4

08000b7c <new_zmk_ble_active_profile_changed>:
 */

#include <kernel.h>
#include <zmk/events/ble_active_profile_changed.h>

 8000b7c:	b510      	push	{r4, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	466c      	mov	r4, sp
 8000b82:	e884 0003 	stmia.w	r4, {r0, r1}
 8000b86:	2010      	movs	r0, #16
 8000b88:	f014 f9e2 	bl	8014f50 <k_malloc>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	4602      	mov	r2, r0
 8000b90:	4904      	ldr	r1, [pc, #16]	; (8000ba4 <new_zmk_ble_active_profile_changed+0x28>)
 8000b92:	f842 1b08 	str.w	r1, [r2], #8
 8000b96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b9a:	e882 0003 	stmia.w	r2, {r0, r1}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	b002      	add	sp, #8
 8000ba2:	bd10      	pop	{r4, pc}
 8000ba4:	0801dc30 	.word	0x0801dc30

08000ba8 <new_zmk_battery_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/battery_state_changed.h>

 8000ba8:	b510      	push	{r4, lr}
 8000baa:	4604      	mov	r4, r0
 8000bac:	200c      	movs	r0, #12
 8000bae:	f014 f9cf 	bl	8014f50 <k_malloc>
 8000bb2:	4a02      	ldr	r2, [pc, #8]	; (8000bbc <new_zmk_battery_state_changed+0x14>)
 8000bb4:	6002      	str	r2, [r0, #0]
 8000bb6:	7204      	strb	r4, [r0, #8]
 8000bb8:	bd10      	pop	{r4, pc}
 8000bba:	bf00      	nop
 8000bbc:	0801dc50 	.word	0x0801dc50

08000bc0 <new_zmk_usb_conn_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/usb_conn_state_changed.h>

 8000bc0:	b510      	push	{r4, lr}
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	200c      	movs	r0, #12
 8000bc6:	f014 f9c3 	bl	8014f50 <k_malloc>
 8000bca:	4a02      	ldr	r2, [pc, #8]	; (8000bd4 <new_zmk_usb_conn_state_changed+0x14>)
 8000bcc:	6002      	str	r2, [r0, #0]
 8000bce:	7204      	strb	r4, [r0, #8]
 8000bd0:	bd10      	pop	{r4, pc}
 8000bd2:	bf00      	nop
 8000bd4:	0801dc70 	.word	0x0801dc70

08000bd8 <on_keymap_binding_pressed>:
LOG_MODULE_DECLARE(zmk, CONFIG_ZMK_LOG_LEVEL);

#include <zmk/ble.h>

static int on_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                     struct zmk_behavior_binding_event event) {
 8000bd8:	b082      	sub	sp, #8
 8000bda:	b508      	push	{r3, lr}
 8000bdc:	a902      	add	r1, sp, #8
 8000bde:	e881 000c 	stmia.w	r1, {r2, r3}
    switch (binding->param1) {
 8000be2:	6841      	ldr	r1, [r0, #4]
 8000be4:	2903      	cmp	r1, #3
 8000be6:	d813      	bhi.n	8000c10 <on_keymap_binding_pressed+0x38>
 8000be8:	e8df f001 	tbb	[pc, r1]
 8000bec:	0e0b0802 	.word	0x0e0b0802
    case BT_CLR_CMD:
        return zmk_ble_clear_bonds();
 8000bf0:	f000 fe4c 	bl	800188c <zmk_ble_clear_bonds>
    default:
        LOG_ERR("Unknown BT command: %d", binding->param1);
    }

    return -ENOTSUP;
}
 8000bf4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000bf8:	b002      	add	sp, #8
 8000bfa:	4770      	bx	lr
        return zmk_ble_prof_next();
 8000bfc:	f000 fed6 	bl	80019ac <zmk_ble_prof_next>
 8000c00:	e7f8      	b.n	8000bf4 <on_keymap_binding_pressed+0x1c>
        return zmk_ble_prof_prev();
 8000c02:	f000 fef3 	bl	80019ec <zmk_ble_prof_prev>
 8000c06:	e7f5      	b.n	8000bf4 <on_keymap_binding_pressed+0x1c>
        return zmk_ble_prof_select(binding->param2);
 8000c08:	7a00      	ldrb	r0, [r0, #8]
 8000c0a:	f000 fea1 	bl	8001950 <zmk_ble_prof_select>
 8000c0e:	e7f1      	b.n	8000bf4 <on_keymap_binding_pressed+0x1c>
        LOG_ERR("Unknown BT command: %d", binding->param1);
 8000c10:	f04f 0200 	mov.w	r2, #0
 8000c14:	2301      	movs	r3, #1
 8000c16:	f363 0202 	bfi	r2, r3, #0, #3
 8000c1a:	f36f 02c5 	bfc	r2, #3, #3
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <on_keymap_binding_pressed+0x60>)
 8000c20:	4806      	ldr	r0, [pc, #24]	; (8000c3c <on_keymap_binding_pressed+0x64>)
 8000c22:	1a1b      	subs	r3, r3, r0
 8000c24:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8000c28:	f363 128f 	bfi	r2, r3, #6, #10
 8000c2c:	4804      	ldr	r0, [pc, #16]	; (8000c40 <on_keymap_binding_pressed+0x68>)
 8000c2e:	f003 fb1d 	bl	800426c <log_1>
    return -ENOTSUP;
 8000c32:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8000c36:	e7dd      	b.n	8000bf4 <on_keymap_binding_pressed+0x1c>
 8000c38:	0801d7a0 	.word	0x0801d7a0
 8000c3c:	0801d6d0 	.word	0x0801d6d0
 8000c40:	0801dc74 	.word	0x0801dc74

08000c44 <raise_profile_changed_event>:

static bt_addr_le_t peripheral_addr;

#endif /* IS_ENABLED(CONFIG_ZMK_SPLIT_BLE_ROLE_CENTRAL) */

static void raise_profile_changed_event() {
 8000c44:	b500      	push	{lr}
 8000c46:	b083      	sub	sp, #12
    ZMK_EVENT_RAISE(new_zmk_ble_active_profile_changed((struct zmk_ble_active_profile_changed){
 8000c48:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <raise_profile_changed_event+0x2c>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	f88d 3000 	strb.w	r3, [sp]
 8000c50:	4a08      	ldr	r2, [pc, #32]	; (8000c74 <raise_profile_changed_event+0x30>)
 8000c52:	2116      	movs	r1, #22
 8000c54:	fb01 2303 	mla	r3, r1, r3, r2
 8000c58:	9301      	str	r3, [sp, #4]
 8000c5a:	ab02      	add	r3, sp, #8
 8000c5c:	e913 0003 	ldmdb	r3, {r0, r1}
 8000c60:	f7ff ff8c 	bl	8000b7c <new_zmk_ble_active_profile_changed>
 8000c64:	f014 f9b6 	bl	8014fd4 <zmk_event_manager_raise>
        .index = active_profile, .profile = &profiles[active_profile]}));
}
 8000c68:	b003      	add	sp, #12
 8000c6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c6e:	bf00      	nop
 8000c70:	200034f4 	.word	0x200034f4
 8000c74:	200014d4 	.word	0x200014d4

08000c78 <ble_save_profile_work>:
};

int zmk_ble_active_profile_index() { return active_profile; }

#if IS_ENABLED(CONFIG_SETTINGS)
static void ble_save_profile_work(struct k_work *work) {
 8000c78:	b508      	push	{r3, lr}
    settings_save_one("ble/active_profile", &active_profile, sizeof(active_profile));
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	4902      	ldr	r1, [pc, #8]	; (8000c88 <ble_save_profile_work+0x10>)
 8000c7e:	4803      	ldr	r0, [pc, #12]	; (8000c8c <ble_save_profile_work+0x14>)
 8000c80:	f005 fb28 	bl	80062d4 <settings_save_one>
}
 8000c84:	bd08      	pop	{r3, pc}
 8000c86:	bf00      	nop
 8000c88:	200034f4 	.word	0x200034f4
 8000c8c:	0801dca4 	.word	0x0801dca4

08000c90 <ble_save_profile>:

static struct k_delayed_work ble_save_work;
#endif

static int ble_save_profile() {
 8000c90:	b510      	push	{r4, lr}
#if IS_ENABLED(CONFIG_SETTINGS)
    k_delayed_work_cancel(&ble_save_work);
 8000c92:	4c05      	ldr	r4, [pc, #20]	; (8000ca8 <ble_save_profile+0x18>)
 8000c94:	4620      	mov	r0, r4
 8000c96:	f01c f94f 	bl	801cf38 <k_delayed_work_cancel>
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					k_timeout_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
 8000c9a:	4a04      	ldr	r2, [pc, #16]	; (8000cac <ble_save_profile+0x1c>)
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4621      	mov	r1, r4
 8000ca0:	4803      	ldr	r0, [pc, #12]	; (8000cb0 <ble_save_profile+0x20>)
 8000ca2:	f013 fcd9 	bl	8014658 <k_delayed_work_submit_to_queue>
    return k_delayed_work_submit(&ble_save_work, K_MSEC(CONFIG_ZMK_SETTINGS_SAVE_DEBOUNCE));
#else
    return 0;
#endif
}
 8000ca6:	bd10      	pop	{r4, pc}
 8000ca8:	20000a70 	.word	0x20000a70
 8000cac:	000927c0 	.word	0x000927c0
 8000cb0:	20001408 	.word	0x20001408

08000cb4 <ble_profiles_handle_set>:
#endif /* IS_ENABLED(CONFIG_ZMK_SPLIT_BLE_ROLE_CENTRAL) */

#if IS_ENABLED(CONFIG_SETTINGS)

static int ble_profiles_handle_set(const char *name, size_t len, settings_read_cb read_cb,
                                   void *cb_arg) {
 8000cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb8:	b094      	sub	sp, #80	; 0x50
 8000cba:	4606      	mov	r6, r0
 8000cbc:	460f      	mov	r7, r1
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	4699      	mov	r9, r3
    const char *next;

    LOG_DBG("Setting BLE value %s", log_strdup(name));
 8000cc2:	f04f 0500 	mov.w	r5, #0
 8000cc6:	2304      	movs	r3, #4
 8000cc8:	f363 0502 	bfi	r5, r3, #0, #3
 8000ccc:	f36f 05c5 	bfc	r5, #3, #3
 8000cd0:	4c86      	ldr	r4, [pc, #536]	; (8000eec <ble_profiles_handle_set+0x238>)
 8000cd2:	4b87      	ldr	r3, [pc, #540]	; (8000ef0 <ble_profiles_handle_set+0x23c>)
 8000cd4:	1ae4      	subs	r4, r4, r3
 8000cd6:	f3c4 04c9 	ubfx	r4, r4, #3, #10
 8000cda:	f364 158f 	bfi	r5, r4, #6, #10
 8000cde:	f8df a258 	ldr.w	sl, [pc, #600]	; 8000f38 <ble_profiles_handle_set+0x284>
 8000ce2:	f003 f8f3 	bl	8003ecc <log_strdup>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	462b      	mov	r3, r5
 8000cea:	4651      	mov	r1, sl
 8000cec:	4881      	ldr	r0, [pc, #516]	; (8000ef4 <ble_profiles_handle_set+0x240>)
 8000cee:	f003 fb3d 	bl	800436c <log_2>

    if (settings_name_steq(name, "profiles", &next) && next) {
 8000cf2:	aa13      	add	r2, sp, #76	; 0x4c
 8000cf4:	4980      	ldr	r1, [pc, #512]	; (8000ef8 <ble_profiles_handle_set+0x244>)
 8000cf6:	4630      	mov	r0, r6
 8000cf8:	f016 f907 	bl	8016f0a <settings_name_steq>
 8000cfc:	2800      	cmp	r0, #0
 8000cfe:	f000 80c6 	beq.w	8000e8e <ble_profiles_handle_set+0x1da>
 8000d02:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8000d04:	2800      	cmp	r0, #0
 8000d06:	f000 80c2 	beq.w	8000e8e <ble_profiles_handle_set+0x1da>
        char *endptr;
        uint8_t idx = strtoul(next, &endptr, 10);
 8000d0a:	220a      	movs	r2, #10
 8000d0c:	a907      	add	r1, sp, #28
 8000d0e:	f016 ffbe 	bl	8017c8e <strtoul>
 8000d12:	b2c2      	uxtb	r2, r0
        if (*endptr != '\0') {
 8000d14:	9b07      	ldr	r3, [sp, #28]
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	b9db      	cbnz	r3, 8000d52 <ble_profiles_handle_set+0x9e>
            LOG_WRN("Invalid profile index: %s", log_strdup(next));
            return -EINVAL;
        }

        if (len != sizeof(struct zmk_ble_profile)) {
 8000d1a:	2f16      	cmp	r7, #22
 8000d1c:	d132      	bne.n	8000d84 <ble_profiles_handle_set+0xd0>
            LOG_ERR("Invalid profile size (got %d expected %d)", len,
                    sizeof(struct zmk_ble_profile));
            return -EINVAL;
        }

        if (idx >= PROFILE_COUNT) {
 8000d1e:	2a00      	cmp	r2, #0
 8000d20:	d146      	bne.n	8000db0 <ble_profiles_handle_set+0xfc>
            LOG_WRN("Profile address for index %d is larger than max of %d", idx, PROFILE_COUNT);
            return -EINVAL;
        }

        int err = read_cb(cb_arg, &profiles[idx], sizeof(struct zmk_ble_profile));
 8000d22:	b2c5      	uxtb	r5, r0
 8000d24:	2216      	movs	r2, #22
 8000d26:	4975      	ldr	r1, [pc, #468]	; (8000efc <ble_profiles_handle_set+0x248>)
 8000d28:	fb02 1105 	mla	r1, r2, r5, r1
 8000d2c:	4648      	mov	r0, r9
 8000d2e:	47c0      	blx	r8
        if (err <= 0) {
 8000d30:	1e04      	subs	r4, r0, #0
 8000d32:	dd53      	ble.n	8000ddc <ble_profiles_handle_set+0x128>
            LOG_ERR("Failed to handle profile address from settings (err %d)", err);
            return err;
        }

        char addr_str[BT_ADDR_LE_STR_LEN];
        bt_addr_le_to_str(&profiles[idx].peer, addr_str, sizeof(addr_str));
 8000d34:	2316      	movs	r3, #22
 8000d36:	fb03 f305 	mul.w	r3, r3, r5
 8000d3a:	3308      	adds	r3, #8
 8000d3c:	4a6f      	ldr	r2, [pc, #444]	; (8000efc <ble_profiles_handle_set+0x248>)
 8000d3e:	4413      	add	r3, r2
 8000d40:	1ddc      	adds	r4, r3, #7
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
 8000d42:	79db      	ldrb	r3, [r3, #7]
 8000d44:	2b03      	cmp	r3, #3
 8000d46:	f200 809c 	bhi.w	8000e82 <ble_profiles_handle_set+0x1ce>
 8000d4a:	e8df f003 	tbb	[pc, r3]
 8000d4e:	8b5a      	.short	0x8b5a
 8000d50:	9590      	.short	0x9590
            LOG_WRN("Invalid profile index: %s", log_strdup(next));
 8000d52:	f04f 0400 	mov.w	r4, #0
 8000d56:	2302      	movs	r3, #2
 8000d58:	f363 0402 	bfi	r4, r3, #0, #3
 8000d5c:	f36f 04c5 	bfc	r4, #3, #3
 8000d60:	4b62      	ldr	r3, [pc, #392]	; (8000eec <ble_profiles_handle_set+0x238>)
 8000d62:	4a63      	ldr	r2, [pc, #396]	; (8000ef0 <ble_profiles_handle_set+0x23c>)
 8000d64:	1a9b      	subs	r3, r3, r2
 8000d66:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8000d6a:	f363 148f 	bfi	r4, r3, #6, #10
 8000d6e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8000d70:	f003 f8ac 	bl	8003ecc <log_strdup>
 8000d74:	4601      	mov	r1, r0
 8000d76:	4622      	mov	r2, r4
 8000d78:	4861      	ldr	r0, [pc, #388]	; (8000f00 <ble_profiles_handle_set+0x24c>)
 8000d7a:	f003 fa77 	bl	800426c <log_1>
            return -EINVAL;
 8000d7e:	f06f 0415 	mvn.w	r4, #21
 8000d82:	e08e      	b.n	8000ea2 <ble_profiles_handle_set+0x1ee>
            LOG_ERR("Invalid profile size (got %d expected %d)", len,
 8000d84:	f04f 0300 	mov.w	r3, #0
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f362 0302 	bfi	r3, r2, #0, #3
 8000d8e:	f36f 03c5 	bfc	r3, #3, #3
 8000d92:	4a56      	ldr	r2, [pc, #344]	; (8000eec <ble_profiles_handle_set+0x238>)
 8000d94:	4956      	ldr	r1, [pc, #344]	; (8000ef0 <ble_profiles_handle_set+0x23c>)
 8000d96:	1a52      	subs	r2, r2, r1
 8000d98:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8000d9c:	f362 138f 	bfi	r3, r2, #6, #10
 8000da0:	2216      	movs	r2, #22
 8000da2:	4639      	mov	r1, r7
 8000da4:	4857      	ldr	r0, [pc, #348]	; (8000f04 <ble_profiles_handle_set+0x250>)
 8000da6:	f003 fae1 	bl	800436c <log_2>
            return -EINVAL;
 8000daa:	f06f 0415 	mvn.w	r4, #21
 8000dae:	e078      	b.n	8000ea2 <ble_profiles_handle_set+0x1ee>
            LOG_WRN("Profile address for index %d is larger than max of %d", idx, PROFILE_COUNT);
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	2202      	movs	r2, #2
 8000db6:	f362 0302 	bfi	r3, r2, #0, #3
 8000dba:	f36f 03c5 	bfc	r3, #3, #3
 8000dbe:	4a4b      	ldr	r2, [pc, #300]	; (8000eec <ble_profiles_handle_set+0x238>)
 8000dc0:	494b      	ldr	r1, [pc, #300]	; (8000ef0 <ble_profiles_handle_set+0x23c>)
 8000dc2:	1a52      	subs	r2, r2, r1
 8000dc4:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8000dc8:	f362 138f 	bfi	r3, r2, #6, #10
 8000dcc:	2201      	movs	r2, #1
 8000dce:	b2c1      	uxtb	r1, r0
 8000dd0:	484d      	ldr	r0, [pc, #308]	; (8000f08 <ble_profiles_handle_set+0x254>)
 8000dd2:	f003 facb 	bl	800436c <log_2>
            return -EINVAL;
 8000dd6:	f06f 0415 	mvn.w	r4, #21
 8000dda:	e062      	b.n	8000ea2 <ble_profiles_handle_set+0x1ee>
            LOG_ERR("Failed to handle profile address from settings (err %d)", err);
 8000ddc:	f04f 0200 	mov.w	r2, #0
 8000de0:	2301      	movs	r3, #1
 8000de2:	f363 0202 	bfi	r2, r3, #0, #3
 8000de6:	f36f 02c5 	bfc	r2, #3, #3
 8000dea:	4b40      	ldr	r3, [pc, #256]	; (8000eec <ble_profiles_handle_set+0x238>)
 8000dec:	4940      	ldr	r1, [pc, #256]	; (8000ef0 <ble_profiles_handle_set+0x23c>)
 8000dee:	1a5b      	subs	r3, r3, r1
 8000df0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8000df4:	f363 128f 	bfi	r2, r3, #6, #10
 8000df8:	4621      	mov	r1, r4
 8000dfa:	4844      	ldr	r0, [pc, #272]	; (8000f0c <ble_profiles_handle_set+0x258>)
 8000dfc:	f003 fa36 	bl	800426c <log_1>
            return err;
 8000e00:	e04f      	b.n	8000ea2 <ble_profiles_handle_set+0x1ee>
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
 8000e02:	4943      	ldr	r1, [pc, #268]	; (8000f10 <ble_profiles_handle_set+0x25c>)
 8000e04:	a808      	add	r0, sp, #32
 8000e06:	f016 ffc3 	bl	8017d90 <strcpy>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
 8000e0a:	7963      	ldrb	r3, [r4, #5]
 8000e0c:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
 8000e0e:	78e1      	ldrb	r1, [r4, #3]
 8000e10:	78a0      	ldrb	r0, [r4, #2]
 8000e12:	7866      	ldrb	r6, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
 8000e14:	af08      	add	r7, sp, #32
 8000e16:	9705      	str	r7, [sp, #20]
 8000e18:	9604      	str	r6, [sp, #16]
 8000e1a:	9003      	str	r0, [sp, #12]
 8000e1c:	9102      	str	r1, [sp, #8]
 8000e1e:	9201      	str	r2, [sp, #4]
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	79a3      	ldrb	r3, [r4, #6]
 8000e24:	4a3b      	ldr	r2, [pc, #236]	; (8000f14 <ble_profiles_handle_set+0x260>)
 8000e26:	211e      	movs	r1, #30
 8000e28:	a80b      	add	r0, sp, #44	; 0x2c
 8000e2a:	f014 fbe8 	bl	80155fe <snprintk>

        LOG_DBG("Loaded %s address for profile %d", log_strdup(addr_str), idx);
 8000e2e:	f04f 0400 	mov.w	r4, #0
 8000e32:	2304      	movs	r3, #4
 8000e34:	f363 0402 	bfi	r4, r3, #0, #3
 8000e38:	f36f 04c5 	bfc	r4, #3, #3
 8000e3c:	4b2b      	ldr	r3, [pc, #172]	; (8000eec <ble_profiles_handle_set+0x238>)
 8000e3e:	4a2c      	ldr	r2, [pc, #176]	; (8000ef0 <ble_profiles_handle_set+0x23c>)
 8000e40:	1a9b      	subs	r3, r3, r2
 8000e42:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8000e46:	f363 148f 	bfi	r4, r3, #6, #10
 8000e4a:	a80b      	add	r0, sp, #44	; 0x2c
 8000e4c:	f003 f83e 	bl	8003ecc <log_strdup>
 8000e50:	4602      	mov	r2, r0
 8000e52:	f8ad 4000 	strh.w	r4, [sp]
 8000e56:	462b      	mov	r3, r5
 8000e58:	4651      	mov	r1, sl
 8000e5a:	482f      	ldr	r0, [pc, #188]	; (8000f18 <ble_profiles_handle_set+0x264>)
 8000e5c:	f003 f93a 	bl	80040d4 <log_3>
            return err;
        }
    }
#endif

    return 0;
 8000e60:	2400      	movs	r4, #0
 8000e62:	e01e      	b.n	8000ea2 <ble_profiles_handle_set+0x1ee>
		strcpy(type, "random");
 8000e64:	492d      	ldr	r1, [pc, #180]	; (8000f1c <ble_profiles_handle_set+0x268>)
 8000e66:	a808      	add	r0, sp, #32
 8000e68:	f016 ff92 	bl	8017d90 <strcpy>
		break;
 8000e6c:	e7cd      	b.n	8000e0a <ble_profiles_handle_set+0x156>
		strcpy(type, "public-id");
 8000e6e:	492c      	ldr	r1, [pc, #176]	; (8000f20 <ble_profiles_handle_set+0x26c>)
 8000e70:	a808      	add	r0, sp, #32
 8000e72:	f016 ff8d 	bl	8017d90 <strcpy>
		break;
 8000e76:	e7c8      	b.n	8000e0a <ble_profiles_handle_set+0x156>
		strcpy(type, "random-id");
 8000e78:	492a      	ldr	r1, [pc, #168]	; (8000f24 <ble_profiles_handle_set+0x270>)
 8000e7a:	a808      	add	r0, sp, #32
 8000e7c:	f016 ff88 	bl	8017d90 <strcpy>
		break;
 8000e80:	e7c3      	b.n	8000e0a <ble_profiles_handle_set+0x156>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
 8000e82:	4a29      	ldr	r2, [pc, #164]	; (8000f28 <ble_profiles_handle_set+0x274>)
 8000e84:	210a      	movs	r1, #10
 8000e86:	a808      	add	r0, sp, #32
 8000e88:	f014 fbb9 	bl	80155fe <snprintk>
		break;
 8000e8c:	e7bd      	b.n	8000e0a <ble_profiles_handle_set+0x156>
    } else if (settings_name_steq(name, "active_profile", &next) && !next) {
 8000e8e:	aa13      	add	r2, sp, #76	; 0x4c
 8000e90:	4926      	ldr	r1, [pc, #152]	; (8000f2c <ble_profiles_handle_set+0x278>)
 8000e92:	4630      	mov	r0, r6
 8000e94:	f016 f839 	bl	8016f0a <settings_name_steq>
 8000e98:	4604      	mov	r4, r0
 8000e9a:	b110      	cbz	r0, 8000ea2 <ble_profiles_handle_set+0x1ee>
 8000e9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8000e9e:	b123      	cbz	r3, 8000eaa <ble_profiles_handle_set+0x1f6>
    return 0;
 8000ea0:	2400      	movs	r4, #0
};
 8000ea2:	4620      	mov	r0, r4
 8000ea4:	b014      	add	sp, #80	; 0x50
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (len != sizeof(active_profile)) {
 8000eaa:	2f01      	cmp	r7, #1
 8000eac:	d11a      	bne.n	8000ee4 <ble_profiles_handle_set+0x230>
        int err = read_cb(cb_arg, &active_profile, sizeof(active_profile));
 8000eae:	2201      	movs	r2, #1
 8000eb0:	491f      	ldr	r1, [pc, #124]	; (8000f30 <ble_profiles_handle_set+0x27c>)
 8000eb2:	4648      	mov	r0, r9
 8000eb4:	47c0      	blx	r8
        if (err <= 0) {
 8000eb6:	1e04      	subs	r4, r0, #0
 8000eb8:	dd01      	ble.n	8000ebe <ble_profiles_handle_set+0x20a>
    return 0;
 8000eba:	2400      	movs	r4, #0
 8000ebc:	e7f1      	b.n	8000ea2 <ble_profiles_handle_set+0x1ee>
            LOG_ERR("Failed to handle active profile from settings (err %d)", err);
 8000ebe:	f04f 0200 	mov.w	r2, #0
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	f363 0202 	bfi	r2, r3, #0, #3
 8000ec8:	f36f 02c5 	bfc	r2, #3, #3
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <ble_profiles_handle_set+0x238>)
 8000ece:	4908      	ldr	r1, [pc, #32]	; (8000ef0 <ble_profiles_handle_set+0x23c>)
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8000ed6:	f363 128f 	bfi	r2, r3, #6, #10
 8000eda:	4621      	mov	r1, r4
 8000edc:	4815      	ldr	r0, [pc, #84]	; (8000f34 <ble_profiles_handle_set+0x280>)
 8000ede:	f003 f9c5 	bl	800426c <log_1>
            return err;
 8000ee2:	e7de      	b.n	8000ea2 <ble_profiles_handle_set+0x1ee>
            return -EINVAL;
 8000ee4:	f06f 0415 	mvn.w	r4, #21
 8000ee8:	e7db      	b.n	8000ea2 <ble_profiles_handle_set+0x1ee>
 8000eea:	bf00      	nop
 8000eec:	0801d7a0 	.word	0x0801d7a0
 8000ef0:	0801d6d0 	.word	0x0801d6d0
 8000ef4:	0801dcb8 	.word	0x0801dcb8
 8000ef8:	0801dcd4 	.word	0x0801dcd4
 8000efc:	200014d4 	.word	0x200014d4
 8000f00:	0801dce0 	.word	0x0801dce0
 8000f04:	0801dcfc 	.word	0x0801dcfc
 8000f08:	0801dd28 	.word	0x0801dd28
 8000f0c:	0801dd60 	.word	0x0801dd60
 8000f10:	0801dd98 	.word	0x0801dd98
 8000f14:	0801ddc0 	.word	0x0801ddc0
 8000f18:	0801dde4 	.word	0x0801dde4
 8000f1c:	0801dda0 	.word	0x0801dda0
 8000f20:	0801dda8 	.word	0x0801dda8
 8000f24:	0801ddb4 	.word	0x0801ddb4
 8000f28:	080215d0 	.word	0x080215d0
 8000f2c:	0801dca8 	.word	0x0801dca8
 8000f30:	200034f4 	.word	0x200034f4
 8000f34:	0801de0c 	.word	0x0801de0c
 8000f38:	0801e250 	.word	0x0801e250

08000f3c <is_conn_active_profile>:

struct settings_handler profiles_handler = {.name = "ble", .h_set = ble_profiles_handle_set};
#endif /* IS_ENABLED(CONFIG_SETTINGS) */

static bool is_conn_active_profile(const struct bt_conn *conn) {
 8000f3c:	b508      	push	{r3, lr}
    return bt_addr_le_cmp(bt_conn_get_dst(conn), &profiles[active_profile].peer) == 0;
 8000f3e:	f017 fe62 	bl	8018c06 <bt_conn_get_dst>
 8000f42:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <is_conn_active_profile+0x28>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2116      	movs	r1, #22
 8000f48:	fb01 f103 	mul.w	r1, r1, r3
 8000f4c:	3108      	adds	r1, #8
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <is_conn_active_profile+0x2c>)
 8000f50:	4419      	add	r1, r3
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
 8000f52:	2207      	movs	r2, #7
 8000f54:	4411      	add	r1, r2
 8000f56:	f016 ff79 	bl	8017e4c <memcmp>
}
 8000f5a:	fab0 f080 	clz	r0, r0
 8000f5e:	0940      	lsrs	r0, r0, #5
 8000f60:	bd08      	pop	{r3, pc}
 8000f62:	bf00      	nop
 8000f64:	200034f4 	.word	0x200034f4
 8000f68:	200014d4 	.word	0x200014d4

08000f6c <le_param_updated>:
        LOG_ERR("Security failed: %s level %u err %d", log_strdup(addr), level, err);
    }
}

static void le_param_updated(struct bt_conn *conn, uint16_t interval, uint16_t latency,
                             uint16_t timeout) {
 8000f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f70:	b094      	sub	sp, #80	; 0x50
 8000f72:	460f      	mov	r7, r1
 8000f74:	4616      	mov	r6, r2
 8000f76:	461d      	mov	r5, r3
    char addr[BT_ADDR_LE_STR_LEN];

    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
 8000f78:	f017 fe45 	bl	8018c06 <bt_conn_get_dst>
 8000f7c:	4604      	mov	r4, r0
	switch (addr->type) {
 8000f7e:	7803      	ldrb	r3, [r0, #0]
 8000f80:	2b03      	cmp	r3, #3
 8000f82:	d84b      	bhi.n	800101c <le_param_updated+0xb0>
 8000f84:	e8df f003 	tbb	[pc, r3]
 8000f88:	45403b02 	.word	0x45403b02
		strcpy(type, "public");
 8000f8c:	4926      	ldr	r1, [pc, #152]	; (8001028 <le_param_updated+0xbc>)
 8000f8e:	a807      	add	r0, sp, #28
 8000f90:	f016 fefe 	bl	8017d90 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
 8000f94:	79a3      	ldrb	r3, [r4, #6]
 8000f96:	7962      	ldrb	r2, [r4, #5]
 8000f98:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
 8000f9a:	78e0      	ldrb	r0, [r4, #3]
 8000f9c:	f894 c002 	ldrb.w	ip, [r4, #2]
 8000fa0:	f894 e001 	ldrb.w	lr, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
 8000fa4:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8000fa8:	ac07      	add	r4, sp, #28
 8000faa:	9405      	str	r4, [sp, #20]
 8000fac:	f8cd e010 	str.w	lr, [sp, #16]
 8000fb0:	f8cd c00c 	str.w	ip, [sp, #12]
 8000fb4:	9002      	str	r0, [sp, #8]
 8000fb6:	9101      	str	r1, [sp, #4]
 8000fb8:	9200      	str	r2, [sp, #0]
 8000fba:	4a1c      	ldr	r2, [pc, #112]	; (800102c <le_param_updated+0xc0>)
 8000fbc:	211e      	movs	r1, #30
 8000fbe:	4640      	mov	r0, r8
 8000fc0:	f014 fb1d 	bl	80155fe <snprintk>

    LOG_DBG("%s: interval %d latency %d timeout %d", addr, interval, latency, timeout);
 8000fc4:	f04f 0300 	mov.w	r3, #0
 8000fc8:	2204      	movs	r2, #4
 8000fca:	f362 0302 	bfi	r3, r2, #0, #3
 8000fce:	f36f 03c5 	bfc	r3, #3, #3
 8000fd2:	4817      	ldr	r0, [pc, #92]	; (8001030 <le_param_updated+0xc4>)
 8000fd4:	4a17      	ldr	r2, [pc, #92]	; (8001034 <le_param_updated+0xc8>)
 8000fd6:	1a80      	subs	r0, r0, r2
 8000fd8:	f3c0 00c9 	ubfx	r0, r0, #3, #10
 8000fdc:	f360 138f 	bfi	r3, r0, #6, #10
 8000fe0:	4a15      	ldr	r2, [pc, #84]	; (8001038 <le_param_updated+0xcc>)
 8000fe2:	9207      	str	r2, [sp, #28]
 8000fe4:	f8cd 8020 	str.w	r8, [sp, #32]
 8000fe8:	9709      	str	r7, [sp, #36]	; 0x24
 8000fea:	960a      	str	r6, [sp, #40]	; 0x28
 8000fec:	950b      	str	r5, [sp, #44]	; 0x2c
 8000fee:	2205      	movs	r2, #5
 8000ff0:	4621      	mov	r1, r4
 8000ff2:	4812      	ldr	r0, [pc, #72]	; (800103c <le_param_updated+0xd0>)
 8000ff4:	f003 fa3e 	bl	8004474 <log_n>
}
 8000ff8:	b014      	add	sp, #80	; 0x50
 8000ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		strcpy(type, "random");
 8000ffe:	4910      	ldr	r1, [pc, #64]	; (8001040 <le_param_updated+0xd4>)
 8001000:	a807      	add	r0, sp, #28
 8001002:	f016 fec5 	bl	8017d90 <strcpy>
		break;
 8001006:	e7c5      	b.n	8000f94 <le_param_updated+0x28>
		strcpy(type, "public-id");
 8001008:	490e      	ldr	r1, [pc, #56]	; (8001044 <le_param_updated+0xd8>)
 800100a:	a807      	add	r0, sp, #28
 800100c:	f016 fec0 	bl	8017d90 <strcpy>
		break;
 8001010:	e7c0      	b.n	8000f94 <le_param_updated+0x28>
		strcpy(type, "random-id");
 8001012:	490d      	ldr	r1, [pc, #52]	; (8001048 <le_param_updated+0xdc>)
 8001014:	a807      	add	r0, sp, #28
 8001016:	f016 febb 	bl	8017d90 <strcpy>
		break;
 800101a:	e7bb      	b.n	8000f94 <le_param_updated+0x28>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
 800101c:	4a0b      	ldr	r2, [pc, #44]	; (800104c <le_param_updated+0xe0>)
 800101e:	210a      	movs	r1, #10
 8001020:	a807      	add	r0, sp, #28
 8001022:	f014 faec 	bl	80155fe <snprintk>
		break;
 8001026:	e7b5      	b.n	8000f94 <le_param_updated+0x28>
 8001028:	0801dd98 	.word	0x0801dd98
 800102c:	0801ddc0 	.word	0x0801ddc0
 8001030:	0801d7a0 	.word	0x0801d7a0
 8001034:	0801d6d0 	.word	0x0801d6d0
 8001038:	0801e298 	.word	0x0801e298
 800103c:	0801de44 	.word	0x0801de44
 8001040:	0801dda0 	.word	0x0801dda0
 8001044:	0801dda8 	.word	0x0801dda8
 8001048:	0801ddb4 	.word	0x0801ddb4
 800104c:	080215d0 	.word	0x080215d0

08001050 <auth_cancel>:
    auth_passkey_entry_conn = bt_conn_ref(conn);
}

#endif

static void auth_cancel(struct bt_conn *conn) {
 8001050:	b570      	push	{r4, r5, r6, lr}
 8001052:	b092      	sub	sp, #72	; 0x48
    char addr[BT_ADDR_LE_STR_LEN];

    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
 8001054:	f017 fdd7 	bl	8018c06 <bt_conn_get_dst>
 8001058:	4604      	mov	r4, r0
	switch (addr->type) {
 800105a:	7803      	ldrb	r3, [r0, #0]
 800105c:	2b03      	cmp	r3, #3
 800105e:	d84c      	bhi.n	80010fa <auth_cancel+0xaa>
 8001060:	e8df f003 	tbb	[pc, r3]
 8001064:	46413c02 	.word	0x46413c02
		strcpy(type, "public");
 8001068:	4927      	ldr	r1, [pc, #156]	; (8001108 <auth_cancel+0xb8>)
 800106a:	a807      	add	r0, sp, #28
 800106c:	f016 fe90 	bl	8017d90 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
 8001070:	79a3      	ldrb	r3, [r4, #6]
 8001072:	7962      	ldrb	r2, [r4, #5]
 8001074:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
 8001076:	78e0      	ldrb	r0, [r4, #3]
 8001078:	78a5      	ldrb	r5, [r4, #2]
 800107a:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
 800107c:	ae07      	add	r6, sp, #28
 800107e:	9605      	str	r6, [sp, #20]
 8001080:	9404      	str	r4, [sp, #16]
 8001082:	9503      	str	r5, [sp, #12]
 8001084:	9002      	str	r0, [sp, #8]
 8001086:	9101      	str	r1, [sp, #4]
 8001088:	9200      	str	r2, [sp, #0]
 800108a:	4a20      	ldr	r2, [pc, #128]	; (800110c <auth_cancel+0xbc>)
 800108c:	211e      	movs	r1, #30
 800108e:	a80a      	add	r0, sp, #40	; 0x28
 8001090:	f014 fab5 	bl	80155fe <snprintk>

    if (auth_passkey_entry_conn) {
 8001094:	4b1e      	ldr	r3, [pc, #120]	; (8001110 <auth_cancel+0xc0>)
 8001096:	6818      	ldr	r0, [r3, #0]
 8001098:	b120      	cbz	r0, 80010a4 <auth_cancel+0x54>
        bt_conn_unref(auth_passkey_entry_conn);
 800109a:	f017 fd6b 	bl	8018b74 <bt_conn_unref>
        auth_passkey_entry_conn = NULL;
 800109e:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <auth_cancel+0xc0>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
    }

    passkey_digit = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	4a1b      	ldr	r2, [pc, #108]	; (8001114 <auth_cancel+0xc4>)
 80010a8:	7013      	strb	r3, [r2, #0]

    LOG_DBG("Pairing cancelled: %s", log_strdup(addr));
 80010aa:	f04f 0400 	mov.w	r4, #0
 80010ae:	2204      	movs	r2, #4
 80010b0:	f362 0402 	bfi	r4, r2, #0, #3
 80010b4:	f363 04c5 	bfi	r4, r3, #3, #3
 80010b8:	4b17      	ldr	r3, [pc, #92]	; (8001118 <auth_cancel+0xc8>)
 80010ba:	4a18      	ldr	r2, [pc, #96]	; (800111c <auth_cancel+0xcc>)
 80010bc:	1a9b      	subs	r3, r3, r2
 80010be:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80010c2:	f363 148f 	bfi	r4, r3, #6, #10
 80010c6:	a80a      	add	r0, sp, #40	; 0x28
 80010c8:	f002 ff00 	bl	8003ecc <log_strdup>
 80010cc:	4602      	mov	r2, r0
 80010ce:	4623      	mov	r3, r4
 80010d0:	4913      	ldr	r1, [pc, #76]	; (8001120 <auth_cancel+0xd0>)
 80010d2:	4814      	ldr	r0, [pc, #80]	; (8001124 <auth_cancel+0xd4>)
 80010d4:	f003 f94a 	bl	800436c <log_2>
}
 80010d8:	b012      	add	sp, #72	; 0x48
 80010da:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
 80010dc:	4912      	ldr	r1, [pc, #72]	; (8001128 <auth_cancel+0xd8>)
 80010de:	a807      	add	r0, sp, #28
 80010e0:	f016 fe56 	bl	8017d90 <strcpy>
		break;
 80010e4:	e7c4      	b.n	8001070 <auth_cancel+0x20>
		strcpy(type, "public-id");
 80010e6:	4911      	ldr	r1, [pc, #68]	; (800112c <auth_cancel+0xdc>)
 80010e8:	a807      	add	r0, sp, #28
 80010ea:	f016 fe51 	bl	8017d90 <strcpy>
		break;
 80010ee:	e7bf      	b.n	8001070 <auth_cancel+0x20>
		strcpy(type, "random-id");
 80010f0:	490f      	ldr	r1, [pc, #60]	; (8001130 <auth_cancel+0xe0>)
 80010f2:	a807      	add	r0, sp, #28
 80010f4:	f016 fe4c 	bl	8017d90 <strcpy>
		break;
 80010f8:	e7ba      	b.n	8001070 <auth_cancel+0x20>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
 80010fa:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <auth_cancel+0xe4>)
 80010fc:	210a      	movs	r1, #10
 80010fe:	a807      	add	r0, sp, #28
 8001100:	f014 fa7d 	bl	80155fe <snprintk>
		break;
 8001104:	e7b4      	b.n	8001070 <auth_cancel+0x20>
 8001106:	bf00      	nop
 8001108:	0801dd98 	.word	0x0801dd98
 800110c:	0801ddc0 	.word	0x0801ddc0
 8001110:	200014d0 	.word	0x200014d0
 8001114:	200034f6 	.word	0x200034f6
 8001118:	0801d7a0 	.word	0x0801d7a0
 800111c:	0801d6d0 	.word	0x0801d6d0
 8001120:	0801e2ac 	.word	0x0801e2ac
 8001124:	0801de70 	.word	0x0801de70
 8001128:	0801dda0 	.word	0x0801dda0
 800112c:	0801dda8 	.word	0x0801dda8
 8001130:	0801ddb4 	.word	0x0801ddb4
 8001134:	080215d0 	.word	0x080215d0

08001138 <security_changed>:
static void security_changed(struct bt_conn *conn, bt_security_t level, enum bt_security_err err) {
 8001138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800113a:	b093      	sub	sp, #76	; 0x4c
 800113c:	460e      	mov	r6, r1
 800113e:	4615      	mov	r5, r2
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
 8001140:	f017 fd61 	bl	8018c06 <bt_conn_get_dst>
 8001144:	4604      	mov	r4, r0
	switch (addr->type) {
 8001146:	7803      	ldrb	r3, [r0, #0]
 8001148:	2b03      	cmp	r3, #3
 800114a:	d846      	bhi.n	80011da <security_changed+0xa2>
 800114c:	e8df f003 	tbb	[pc, r3]
 8001150:	403b3602 	.word	0x403b3602
		strcpy(type, "public");
 8001154:	4931      	ldr	r1, [pc, #196]	; (800121c <security_changed+0xe4>)
 8001156:	a807      	add	r0, sp, #28
 8001158:	f016 fe1a 	bl	8017d90 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
 800115c:	79a3      	ldrb	r3, [r4, #6]
 800115e:	7962      	ldrb	r2, [r4, #5]
 8001160:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
 8001162:	78e0      	ldrb	r0, [r4, #3]
 8001164:	78a7      	ldrb	r7, [r4, #2]
 8001166:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
 8001168:	f10d 0c1c 	add.w	ip, sp, #28
 800116c:	f8cd c014 	str.w	ip, [sp, #20]
 8001170:	9404      	str	r4, [sp, #16]
 8001172:	9703      	str	r7, [sp, #12]
 8001174:	9002      	str	r0, [sp, #8]
 8001176:	9101      	str	r1, [sp, #4]
 8001178:	9200      	str	r2, [sp, #0]
 800117a:	4a29      	ldr	r2, [pc, #164]	; (8001220 <security_changed+0xe8>)
 800117c:	211e      	movs	r1, #30
 800117e:	a80a      	add	r0, sp, #40	; 0x28
 8001180:	f014 fa3d 	bl	80155fe <snprintk>
    if (!err) {
 8001184:	bb7d      	cbnz	r5, 80011e6 <security_changed+0xae>
        LOG_DBG("Security changed: %s level %u", log_strdup(addr), level);
 8001186:	f04f 0400 	mov.w	r4, #0
 800118a:	2304      	movs	r3, #4
 800118c:	f363 0402 	bfi	r4, r3, #0, #3
 8001190:	f36f 04c5 	bfc	r4, #3, #3
 8001194:	4b23      	ldr	r3, [pc, #140]	; (8001224 <security_changed+0xec>)
 8001196:	4a24      	ldr	r2, [pc, #144]	; (8001228 <security_changed+0xf0>)
 8001198:	1a9b      	subs	r3, r3, r2
 800119a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800119e:	f363 148f 	bfi	r4, r3, #6, #10
 80011a2:	a80a      	add	r0, sp, #40	; 0x28
 80011a4:	f002 fe92 	bl	8003ecc <log_strdup>
 80011a8:	4602      	mov	r2, r0
 80011aa:	f8ad 4000 	strh.w	r4, [sp]
 80011ae:	4633      	mov	r3, r6
 80011b0:	491e      	ldr	r1, [pc, #120]	; (800122c <security_changed+0xf4>)
 80011b2:	481f      	ldr	r0, [pc, #124]	; (8001230 <security_changed+0xf8>)
 80011b4:	f002 ff8e 	bl	80040d4 <log_3>
}
 80011b8:	b013      	add	sp, #76	; 0x4c
 80011ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
 80011bc:	491d      	ldr	r1, [pc, #116]	; (8001234 <security_changed+0xfc>)
 80011be:	a807      	add	r0, sp, #28
 80011c0:	f016 fde6 	bl	8017d90 <strcpy>
		break;
 80011c4:	e7ca      	b.n	800115c <security_changed+0x24>
		strcpy(type, "public-id");
 80011c6:	491c      	ldr	r1, [pc, #112]	; (8001238 <security_changed+0x100>)
 80011c8:	a807      	add	r0, sp, #28
 80011ca:	f016 fde1 	bl	8017d90 <strcpy>
		break;
 80011ce:	e7c5      	b.n	800115c <security_changed+0x24>
		strcpy(type, "random-id");
 80011d0:	491a      	ldr	r1, [pc, #104]	; (800123c <security_changed+0x104>)
 80011d2:	a807      	add	r0, sp, #28
 80011d4:	f016 fddc 	bl	8017d90 <strcpy>
		break;
 80011d8:	e7c0      	b.n	800115c <security_changed+0x24>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
 80011da:	4a19      	ldr	r2, [pc, #100]	; (8001240 <security_changed+0x108>)
 80011dc:	210a      	movs	r1, #10
 80011de:	a807      	add	r0, sp, #28
 80011e0:	f014 fa0d 	bl	80155fe <snprintk>
		break;
 80011e4:	e7ba      	b.n	800115c <security_changed+0x24>
        LOG_ERR("Security failed: %s level %u err %d", log_strdup(addr), level, err);
 80011e6:	f04f 0400 	mov.w	r4, #0
 80011ea:	2301      	movs	r3, #1
 80011ec:	f363 0402 	bfi	r4, r3, #0, #3
 80011f0:	f36f 04c5 	bfc	r4, #3, #3
 80011f4:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <security_changed+0xec>)
 80011f6:	4a0c      	ldr	r2, [pc, #48]	; (8001228 <security_changed+0xf0>)
 80011f8:	1a9b      	subs	r3, r3, r2
 80011fa:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80011fe:	f363 148f 	bfi	r4, r3, #6, #10
 8001202:	a80a      	add	r0, sp, #40	; 0x28
 8001204:	f002 fe62 	bl	8003ecc <log_strdup>
 8001208:	4601      	mov	r1, r0
 800120a:	f8ad 4000 	strh.w	r4, [sp]
 800120e:	462b      	mov	r3, r5
 8001210:	4632      	mov	r2, r6
 8001212:	480c      	ldr	r0, [pc, #48]	; (8001244 <security_changed+0x10c>)
 8001214:	f002 ff5e 	bl	80040d4 <log_3>
}
 8001218:	e7ce      	b.n	80011b8 <security_changed+0x80>
 800121a:	bf00      	nop
 800121c:	0801dd98 	.word	0x0801dd98
 8001220:	0801ddc0 	.word	0x0801ddc0
 8001224:	0801d7a0 	.word	0x0801d7a0
 8001228:	0801d6d0 	.word	0x0801d6d0
 800122c:	0801e284 	.word	0x0801e284
 8001230:	0801de8c 	.word	0x0801de8c
 8001234:	0801dda0 	.word	0x0801dda0
 8001238:	0801dda8 	.word	0x0801dda8
 800123c:	0801ddb4 	.word	0x0801ddb4
 8001240:	080215d0 	.word	0x080215d0
 8001244:	0801deb0 	.word	0x0801deb0

08001248 <disconnected>:
static void disconnected(struct bt_conn *conn, uint8_t reason) {
 8001248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124a:	b093      	sub	sp, #76	; 0x4c
 800124c:	4605      	mov	r5, r0
 800124e:	460e      	mov	r6, r1
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
 8001250:	f017 fcd9 	bl	8018c06 <bt_conn_get_dst>
 8001254:	4604      	mov	r4, r0
	switch (addr->type) {
 8001256:	7803      	ldrb	r3, [r0, #0]
 8001258:	2b03      	cmp	r3, #3
 800125a:	d85a      	bhi.n	8001312 <disconnected+0xca>
 800125c:	e8df f003 	tbb	[pc, r3]
 8001260:	544f4a02 	.word	0x544f4a02
		strcpy(type, "public");
 8001264:	4945      	ldr	r1, [pc, #276]	; (800137c <disconnected+0x134>)
 8001266:	a807      	add	r0, sp, #28
 8001268:	f016 fd92 	bl	8017d90 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
 800126c:	79a3      	ldrb	r3, [r4, #6]
 800126e:	7962      	ldrb	r2, [r4, #5]
 8001270:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
 8001272:	78e0      	ldrb	r0, [r4, #3]
 8001274:	78a7      	ldrb	r7, [r4, #2]
 8001276:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
 8001278:	f10d 0c1c 	add.w	ip, sp, #28
 800127c:	f8cd c014 	str.w	ip, [sp, #20]
 8001280:	9404      	str	r4, [sp, #16]
 8001282:	9703      	str	r7, [sp, #12]
 8001284:	9002      	str	r0, [sp, #8]
 8001286:	9101      	str	r1, [sp, #4]
 8001288:	9200      	str	r2, [sp, #0]
 800128a:	4a3d      	ldr	r2, [pc, #244]	; (8001380 <disconnected+0x138>)
 800128c:	211e      	movs	r1, #30
 800128e:	a80a      	add	r0, sp, #40	; 0x28
 8001290:	f014 f9b5 	bl	80155fe <snprintk>
    LOG_DBG("Disconnected from %s (reason 0x%02x)", log_strdup(addr), reason);
 8001294:	f04f 0400 	mov.w	r4, #0
 8001298:	2304      	movs	r3, #4
 800129a:	f363 0402 	bfi	r4, r3, #0, #3
 800129e:	f36f 04c5 	bfc	r4, #3, #3
 80012a2:	4b38      	ldr	r3, [pc, #224]	; (8001384 <disconnected+0x13c>)
 80012a4:	4a38      	ldr	r2, [pc, #224]	; (8001388 <disconnected+0x140>)
 80012a6:	1a9b      	subs	r3, r3, r2
 80012a8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80012ac:	f363 148f 	bfi	r4, r3, #6, #10
 80012b0:	4f36      	ldr	r7, [pc, #216]	; (800138c <disconnected+0x144>)
 80012b2:	a80a      	add	r0, sp, #40	; 0x28
 80012b4:	f002 fe0a 	bl	8003ecc <log_strdup>
 80012b8:	4602      	mov	r2, r0
 80012ba:	f8ad 4000 	strh.w	r4, [sp]
 80012be:	4633      	mov	r3, r6
 80012c0:	4639      	mov	r1, r7
 80012c2:	4833      	ldr	r0, [pc, #204]	; (8001390 <disconnected+0x148>)
 80012c4:	f002 ff06 	bl	80040d4 <log_3>
 80012c8:	4b32      	ldr	r3, [pc, #200]	; (8001394 <disconnected+0x14c>)
 80012ca:	f3bf 8f5b 	dmb	ish
 80012ce:	e853 2f00 	ldrex	r2, [r3]
 80012d2:	f042 0101 	orr.w	r1, r2, #1
 80012d6:	e843 1000 	strex	r0, r1, [r3]
 80012da:	2800      	cmp	r0, #0
 80012dc:	d1f7      	bne.n	80012ce <disconnected+0x86>
 80012de:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 80012e2:	f012 0f01 	tst.w	r2, #1
 80012e6:	d01a      	beq.n	800131e <disconnected+0xd6>
    if (is_conn_active_profile(conn)) {
 80012e8:	4628      	mov	r0, r5
 80012ea:	f7ff fe27 	bl	8000f3c <is_conn_active_profile>
 80012ee:	b9e0      	cbnz	r0, 800132a <disconnected+0xe2>
}
 80012f0:	b013      	add	sp, #76	; 0x4c
 80012f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
 80012f4:	4928      	ldr	r1, [pc, #160]	; (8001398 <disconnected+0x150>)
 80012f6:	a807      	add	r0, sp, #28
 80012f8:	f016 fd4a 	bl	8017d90 <strcpy>
		break;
 80012fc:	e7b6      	b.n	800126c <disconnected+0x24>
		strcpy(type, "public-id");
 80012fe:	4927      	ldr	r1, [pc, #156]	; (800139c <disconnected+0x154>)
 8001300:	a807      	add	r0, sp, #28
 8001302:	f016 fd45 	bl	8017d90 <strcpy>
		break;
 8001306:	e7b1      	b.n	800126c <disconnected+0x24>
		strcpy(type, "random-id");
 8001308:	4925      	ldr	r1, [pc, #148]	; (80013a0 <disconnected+0x158>)
 800130a:	a807      	add	r0, sp, #28
 800130c:	f016 fd40 	bl	8017d90 <strcpy>
		break;
 8001310:	e7ac      	b.n	800126c <disconnected+0x24>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
 8001312:	4a24      	ldr	r2, [pc, #144]	; (80013a4 <disconnected+0x15c>)
 8001314:	210a      	movs	r1, #10
 8001316:	a807      	add	r0, sp, #28
 8001318:	f014 f971 	bl	80155fe <snprintk>
		break;
 800131c:	e7a6      	b.n	800126c <disconnected+0x24>
		k_queue_append(&work_q->queue, work);
 800131e:	f1a3 0108 	sub.w	r1, r3, #8
 8001322:	4821      	ldr	r0, [pc, #132]	; (80013a8 <disconnected+0x160>)
 8001324:	f01b fba2 	bl	801ca6c <k_queue_append>
 8001328:	e7de      	b.n	80012e8 <disconnected+0xa0>
        LOG_DBG("Active profile disconnected");
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	2304      	movs	r3, #4
 8001330:	f363 0202 	bfi	r2, r3, #0, #3
 8001334:	f36f 02c5 	bfc	r2, #3, #3
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <disconnected+0x13c>)
 800133a:	4913      	ldr	r1, [pc, #76]	; (8001388 <disconnected+0x140>)
 800133c:	1a5b      	subs	r3, r3, r1
 800133e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8001342:	f363 128f 	bfi	r2, r3, #6, #10
 8001346:	4639      	mov	r1, r7
 8001348:	4818      	ldr	r0, [pc, #96]	; (80013ac <disconnected+0x164>)
 800134a:	f002 ff8f 	bl	800426c <log_1>
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <disconnected+0x168>)
 8001350:	f3bf 8f5b 	dmb	ish
 8001354:	e853 2f00 	ldrex	r2, [r3]
 8001358:	f042 0101 	orr.w	r1, r2, #1
 800135c:	e843 1000 	strex	r0, r1, [r3]
 8001360:	2800      	cmp	r0, #0
 8001362:	d1f7      	bne.n	8001354 <disconnected+0x10c>
 8001364:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 8001368:	f012 0f01 	tst.w	r2, #1
 800136c:	d1c0      	bne.n	80012f0 <disconnected+0xa8>
		k_queue_append(&work_q->queue, work);
 800136e:	f1a3 0108 	sub.w	r1, r3, #8
 8001372:	480d      	ldr	r0, [pc, #52]	; (80013a8 <disconnected+0x160>)
 8001374:	f01b fb7a 	bl	801ca6c <k_queue_append>
}
 8001378:	e7ba      	b.n	80012f0 <disconnected+0xa8>
 800137a:	bf00      	nop
 800137c:	0801dd98 	.word	0x0801dd98
 8001380:	0801ddc0 	.word	0x0801ddc0
 8001384:	0801d7a0 	.word	0x0801d7a0
 8001388:	0801d6d0 	.word	0x0801d6d0
 800138c:	0801e274 	.word	0x0801e274
 8001390:	0801ded4 	.word	0x0801ded4
 8001394:	200001ac 	.word	0x200001ac
 8001398:	0801dda0 	.word	0x0801dda0
 800139c:	0801dda8 	.word	0x0801dda8
 80013a0:	0801ddb4 	.word	0x0801ddb4
 80013a4:	080215d0 	.word	0x080215d0
 80013a8:	20001408 	.word	0x20001408
 80013ac:	0801df00 	.word	0x0801df00
 80013b0:	200001a0 	.word	0x200001a0

080013b4 <zmk_ble_active_profile_is_open>:
bool zmk_ble_active_profile_is_open() {
 80013b4:	b500      	push	{lr}
 80013b6:	b083      	sub	sp, #12
    return !bt_addr_le_cmp(&profiles[active_profile].peer, BT_ADDR_LE_ANY);
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <zmk_ble_active_profile_is_open+0x34>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2016      	movs	r0, #22
 80013be:	fb00 f003 	mul.w	r0, r0, r3
 80013c2:	3008      	adds	r0, #8
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <zmk_ble_active_profile_is_open+0x38>)
 80013c6:	4418      	add	r0, r3
 80013c8:	2300      	movs	r3, #0
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	f8cd 3003 	str.w	r3, [sp, #3]
 80013d0:	2207      	movs	r2, #7
 80013d2:	4669      	mov	r1, sp
 80013d4:	4410      	add	r0, r2
 80013d6:	f016 fd39 	bl	8017e4c <memcmp>
}
 80013da:	fab0 f080 	clz	r0, r0
 80013de:	0940      	lsrs	r0, r0, #5
 80013e0:	b003      	add	sp, #12
 80013e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80013e6:	bf00      	nop
 80013e8:	200034f4 	.word	0x200034f4
 80013ec:	200014d4 	.word	0x200014d4

080013f0 <set_profile_address>:
void set_profile_address(uint8_t index, const bt_addr_le_t *addr) {
 80013f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013f4:	b096      	sub	sp, #88	; 0x58
 80013f6:	4680      	mov	r8, r0
 80013f8:	460c      	mov	r4, r1
	switch (addr->type) {
 80013fa:	780b      	ldrb	r3, [r1, #0]
 80013fc:	2b03      	cmp	r3, #3
 80013fe:	d86e      	bhi.n	80014de <set_profile_address+0xee>
 8001400:	e8df f003 	tbb	[pc, r3]
 8001404:	68635e02 	.word	0x68635e02
		strcpy(type, "public");
 8001408:	493b      	ldr	r1, [pc, #236]	; (80014f8 <set_profile_address+0x108>)
 800140a:	a807      	add	r0, sp, #28
 800140c:	f016 fcc0 	bl	8017d90 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
 8001410:	7963      	ldrb	r3, [r4, #5]
 8001412:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
 8001414:	78e1      	ldrb	r1, [r4, #3]
 8001416:	78a0      	ldrb	r0, [r4, #2]
 8001418:	7865      	ldrb	r5, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
 800141a:	ae07      	add	r6, sp, #28
 800141c:	9605      	str	r6, [sp, #20]
 800141e:	9504      	str	r5, [sp, #16]
 8001420:	9003      	str	r0, [sp, #12]
 8001422:	9102      	str	r1, [sp, #8]
 8001424:	9201      	str	r2, [sp, #4]
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	79a3      	ldrb	r3, [r4, #6]
 800142a:	4a34      	ldr	r2, [pc, #208]	; (80014fc <set_profile_address+0x10c>)
 800142c:	211e      	movs	r1, #30
 800142e:	a80a      	add	r0, sp, #40	; 0x28
 8001430:	f014 f8e5 	bl	80155fe <snprintk>
    memcpy(&profiles[index].peer, addr, sizeof(bt_addr_le_t));
 8001434:	4e32      	ldr	r6, [pc, #200]	; (8001500 <set_profile_address+0x110>)
 8001436:	2716      	movs	r7, #22
 8001438:	fb07 f508 	mul.w	r5, r7, r8
 800143c:	f105 0008 	add.w	r0, r5, #8
 8001440:	4430      	add	r0, r6
 8001442:	2207      	movs	r2, #7
 8001444:	4621      	mov	r1, r4
 8001446:	4410      	add	r0, r2
 8001448:	f016 fd18 	bl	8017e7c <memcpy>
    sprintf(setting_name, "ble/profiles/%d", index);
 800144c:	4642      	mov	r2, r8
 800144e:	492d      	ldr	r1, [pc, #180]	; (8001504 <set_profile_address+0x114>)
 8001450:	a812      	add	r0, sp, #72	; 0x48
 8001452:	f008 f991 	bl	8009778 <sprintf>
    LOG_DBG("Setting profile addr for %s to %s", log_strdup(setting_name), log_strdup(addr_str));
 8001456:	f04f 0400 	mov.w	r4, #0
 800145a:	2304      	movs	r3, #4
 800145c:	f363 0402 	bfi	r4, r3, #0, #3
 8001460:	f36f 04c5 	bfc	r4, #3, #3
 8001464:	4b28      	ldr	r3, [pc, #160]	; (8001508 <set_profile_address+0x118>)
 8001466:	4a29      	ldr	r2, [pc, #164]	; (800150c <set_profile_address+0x11c>)
 8001468:	1a9b      	subs	r3, r3, r2
 800146a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800146e:	f363 148f 	bfi	r4, r3, #6, #10
 8001472:	a812      	add	r0, sp, #72	; 0x48
 8001474:	f002 fd2a 	bl	8003ecc <log_strdup>
 8001478:	4680      	mov	r8, r0
 800147a:	a80a      	add	r0, sp, #40	; 0x28
 800147c:	f002 fd26 	bl	8003ecc <log_strdup>
 8001480:	4603      	mov	r3, r0
 8001482:	f8ad 4000 	strh.w	r4, [sp]
 8001486:	4642      	mov	r2, r8
 8001488:	4921      	ldr	r1, [pc, #132]	; (8001510 <set_profile_address+0x120>)
 800148a:	4822      	ldr	r0, [pc, #136]	; (8001514 <set_profile_address+0x124>)
 800148c:	f002 fe22 	bl	80040d4 <log_3>
    settings_save_one(setting_name, &profiles[index], sizeof(struct zmk_ble_profile));
 8001490:	463a      	mov	r2, r7
 8001492:	1971      	adds	r1, r6, r5
 8001494:	a812      	add	r0, sp, #72	; 0x48
 8001496:	f004 ff1d 	bl	80062d4 <settings_save_one>
 800149a:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <set_profile_address+0x128>)
 800149c:	f3bf 8f5b 	dmb	ish
 80014a0:	e853 2f00 	ldrex	r2, [r3]
 80014a4:	f042 0101 	orr.w	r1, r2, #1
 80014a8:	e843 1000 	strex	r0, r1, [r3]
 80014ac:	2800      	cmp	r0, #0
 80014ae:	d1f7      	bne.n	80014a0 <set_profile_address+0xb0>
 80014b0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 80014b4:	f012 0f01 	tst.w	r2, #1
 80014b8:	d017      	beq.n	80014ea <set_profile_address+0xfa>
}
 80014ba:	b016      	add	sp, #88	; 0x58
 80014bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		strcpy(type, "random");
 80014c0:	4916      	ldr	r1, [pc, #88]	; (800151c <set_profile_address+0x12c>)
 80014c2:	a807      	add	r0, sp, #28
 80014c4:	f016 fc64 	bl	8017d90 <strcpy>
		break;
 80014c8:	e7a2      	b.n	8001410 <set_profile_address+0x20>
		strcpy(type, "public-id");
 80014ca:	4915      	ldr	r1, [pc, #84]	; (8001520 <set_profile_address+0x130>)
 80014cc:	a807      	add	r0, sp, #28
 80014ce:	f016 fc5f 	bl	8017d90 <strcpy>
		break;
 80014d2:	e79d      	b.n	8001410 <set_profile_address+0x20>
		strcpy(type, "random-id");
 80014d4:	4913      	ldr	r1, [pc, #76]	; (8001524 <set_profile_address+0x134>)
 80014d6:	a807      	add	r0, sp, #28
 80014d8:	f016 fc5a 	bl	8017d90 <strcpy>
		break;
 80014dc:	e798      	b.n	8001410 <set_profile_address+0x20>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
 80014de:	4a12      	ldr	r2, [pc, #72]	; (8001528 <set_profile_address+0x138>)
 80014e0:	210a      	movs	r1, #10
 80014e2:	a807      	add	r0, sp, #28
 80014e4:	f014 f88b 	bl	80155fe <snprintk>
		break;
 80014e8:	e792      	b.n	8001410 <set_profile_address+0x20>
		k_queue_append(&work_q->queue, work);
 80014ea:	f1a3 0108 	sub.w	r1, r3, #8
 80014ee:	480f      	ldr	r0, [pc, #60]	; (800152c <set_profile_address+0x13c>)
 80014f0:	f01b fabc 	bl	801ca6c <k_queue_append>
 80014f4:	e7e1      	b.n	80014ba <set_profile_address+0xca>
 80014f6:	bf00      	nop
 80014f8:	0801dd98 	.word	0x0801dd98
 80014fc:	0801ddc0 	.word	0x0801ddc0
 8001500:	200014d4 	.word	0x200014d4
 8001504:	0801df20 	.word	0x0801df20
 8001508:	0801d7a0 	.word	0x0801d7a0
 800150c:	0801d6d0 	.word	0x0801d6d0
 8001510:	0801e1d8 	.word	0x0801e1d8
 8001514:	0801df30 	.word	0x0801df30
 8001518:	200001a0 	.word	0x200001a0
 800151c:	0801dda0 	.word	0x0801dda0
 8001520:	0801dda8 	.word	0x0801dda8
 8001524:	0801ddb4 	.word	0x0801ddb4
 8001528:	080215d0 	.word	0x080215d0
 800152c:	20001408 	.word	0x20001408

08001530 <zmk_ble_active_profile_addr>:
bt_addr_le_t *zmk_ble_active_profile_addr() { return &profiles[active_profile].peer; }
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <zmk_ble_active_profile_addr+0x14>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2016      	movs	r0, #22
 8001536:	fb00 f003 	mul.w	r0, r0, r3
 800153a:	3008      	adds	r0, #8
 800153c:	4b02      	ldr	r3, [pc, #8]	; (8001548 <zmk_ble_active_profile_addr+0x18>)
 800153e:	4418      	add	r0, r3
 8001540:	3007      	adds	r0, #7
 8001542:	4770      	bx	lr
 8001544:	200034f4 	.word	0x200034f4
 8001548:	200014d4 	.word	0x200014d4

0800154c <update_advertising>:
int update_advertising() {
 800154c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800154e:	b097      	sub	sp, #92	; 0x5c
    if (zmk_ble_active_profile_is_open()) {
 8001550:	f7ff ff30 	bl	80013b4 <zmk_ble_active_profile_is_open>
 8001554:	2800      	cmp	r0, #0
 8001556:	d042      	beq.n	80015de <update_advertising+0x92>
        desired_adv = ZMK_ADV_CONN;
 8001558:	2402      	movs	r4, #2
    LOG_DBG("advertising from %d to %d", advertising_status, desired_adv);
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	2304      	movs	r3, #4
 8001560:	f363 0202 	bfi	r2, r3, #0, #3
 8001564:	f36f 02c5 	bfc	r2, #3, #3
 8001568:	4baf      	ldr	r3, [pc, #700]	; (8001828 <update_advertising+0x2dc>)
 800156a:	49b0      	ldr	r1, [pc, #704]	; (800182c <update_advertising+0x2e0>)
 800156c:	1a5b      	subs	r3, r3, r1
 800156e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8001572:	f363 128f 	bfi	r2, r3, #6, #10
 8001576:	4eae      	ldr	r6, [pc, #696]	; (8001830 <update_advertising+0x2e4>)
 8001578:	4dae      	ldr	r5, [pc, #696]	; (8001834 <update_advertising+0x2e8>)
 800157a:	f8ad 2000 	strh.w	r2, [sp]
 800157e:	4623      	mov	r3, r4
 8001580:	782a      	ldrb	r2, [r5, #0]
 8001582:	4631      	mov	r1, r6
 8001584:	48ac      	ldr	r0, [pc, #688]	; (8001838 <update_advertising+0x2ec>)
 8001586:	f002 fda5 	bl	80040d4 <log_3>
    switch (desired_adv + CURR_ADV(advertising_status)) {
 800158a:	782b      	ldrb	r3, [r5, #0]
 800158c:	eb04 1403 	add.w	r4, r4, r3, lsl #4
 8001590:	3c01      	subs	r4, #1
 8001592:	2c20      	cmp	r4, #32
 8001594:	f200 816f 	bhi.w	8001876 <update_advertising+0x32a>
 8001598:	e8df f014 	tbh	[pc, r4, lsl #1]
 800159c:	013100a6 	.word	0x013100a6
 80015a0:	016d016d 	.word	0x016d016d
 80015a4:	016d016d 	.word	0x016d016d
 80015a8:	016d016d 	.word	0x016d016d
 80015ac:	016d016d 	.word	0x016d016d
 80015b0:	016d016d 	.word	0x016d016d
 80015b4:	016d016d 	.word	0x016d016d
 80015b8:	0028016d 	.word	0x0028016d
 80015bc:	00f30042 	.word	0x00f30042
 80015c0:	016d016d 	.word	0x016d016d
 80015c4:	016d016d 	.word	0x016d016d
 80015c8:	016d016d 	.word	0x016d016d
 80015cc:	016d016d 	.word	0x016d016d
 80015d0:	016d016d 	.word	0x016d016d
 80015d4:	016d016d 	.word	0x016d016d
 80015d8:	0028016d 	.word	0x0028016d
 80015dc:	0042      	.short	0x0042
    } else if (!zmk_ble_active_profile_is_connected()) {
 80015de:	f013 fd0a 	bl	8014ff6 <zmk_ble_active_profile_is_connected>
 80015e2:	b108      	cbz	r0, 80015e8 <update_advertising+0x9c>
    enum advertising_type desired_adv = ZMK_ADV_NONE;
 80015e4:	2400      	movs	r4, #0
 80015e6:	e7b8      	b.n	800155a <update_advertising+0xe>
        desired_adv = ZMK_ADV_CONN;
 80015e8:	2402      	movs	r4, #2
 80015ea:	e7b6      	b.n	800155a <update_advertising+0xe>
        CHECKED_ADV_STOP();
 80015ec:	f00b f9f0 	bl	800c9d0 <bt_le_adv_stop>
 80015f0:	4b90      	ldr	r3, [pc, #576]	; (8001834 <update_advertising+0x2e8>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	701a      	strb	r2, [r3, #0]
 80015f6:	4604      	mov	r4, r0
 80015f8:	2800      	cmp	r0, #0
 80015fa:	f000 8112 	beq.w	8001822 <update_advertising+0x2d6>
 80015fe:	2301      	movs	r3, #1
 8001600:	f363 0202 	bfi	r2, r3, #0, #3
 8001604:	f36f 02c5 	bfc	r2, #3, #3
 8001608:	4b87      	ldr	r3, [pc, #540]	; (8001828 <update_advertising+0x2dc>)
 800160a:	4988      	ldr	r1, [pc, #544]	; (800182c <update_advertising+0x2e0>)
 800160c:	1a5b      	subs	r3, r3, r1
 800160e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8001612:	f363 128f 	bfi	r2, r3, #6, #10
 8001616:	4601      	mov	r1, r0
 8001618:	4888      	ldr	r0, [pc, #544]	; (800183c <update_advertising+0x2f0>)
 800161a:	f002 fe27 	bl	800426c <log_1>
 800161e:	e12b      	b.n	8001878 <update_advertising+0x32c>
        CHECKED_ADV_STOP();
 8001620:	f00b f9d6 	bl	800c9d0 <bt_le_adv_stop>
 8001624:	4b83      	ldr	r3, [pc, #524]	; (8001834 <update_advertising+0x2e8>)
 8001626:	2200      	movs	r2, #0
 8001628:	701a      	strb	r2, [r3, #0]
 800162a:	4604      	mov	r4, r0
 800162c:	b9f0      	cbnz	r0, 800166c <update_advertising+0x120>
        CHECKED_DIR_ADV();
 800162e:	f7ff ff7f 	bl	8001530 <zmk_ble_active_profile_addr>
 8001632:	4605      	mov	r5, r0
 8001634:	4601      	mov	r1, r0
 8001636:	2000      	movs	r0, #0
 8001638:	f00b fffc 	bl	800d634 <bt_conn_lookup_addr_le>
 800163c:	4607      	mov	r7, r0
 800163e:	b330      	cbz	r0, 800168e <update_advertising+0x142>
 8001640:	f04f 0200 	mov.w	r2, #0
 8001644:	2304      	movs	r3, #4
 8001646:	f363 0202 	bfi	r2, r3, #0, #3
 800164a:	f36f 02c5 	bfc	r2, #3, #3
 800164e:	4b76      	ldr	r3, [pc, #472]	; (8001828 <update_advertising+0x2dc>)
 8001650:	4976      	ldr	r1, [pc, #472]	; (800182c <update_advertising+0x2e0>)
 8001652:	1a5b      	subs	r3, r3, r1
 8001654:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8001658:	f363 128f 	bfi	r2, r3, #6, #10
 800165c:	4631      	mov	r1, r6
 800165e:	4878      	ldr	r0, [pc, #480]	; (8001840 <update_advertising+0x2f4>)
 8001660:	f002 fe04 	bl	800426c <log_1>
 8001664:	4638      	mov	r0, r7
 8001666:	f017 fa85 	bl	8018b74 <bt_conn_unref>
 800166a:	e105      	b.n	8001878 <update_advertising+0x32c>
        CHECKED_ADV_STOP();
 800166c:	2301      	movs	r3, #1
 800166e:	f363 0202 	bfi	r2, r3, #0, #3
 8001672:	f36f 02c5 	bfc	r2, #3, #3
 8001676:	4b6c      	ldr	r3, [pc, #432]	; (8001828 <update_advertising+0x2dc>)
 8001678:	496c      	ldr	r1, [pc, #432]	; (800182c <update_advertising+0x2e0>)
 800167a:	1a5b      	subs	r3, r3, r1
 800167c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8001680:	f363 128f 	bfi	r2, r3, #6, #10
 8001684:	4601      	mov	r1, r0
 8001686:	486d      	ldr	r0, [pc, #436]	; (800183c <update_advertising+0x2f0>)
 8001688:	f002 fdf0 	bl	800426c <log_1>
 800168c:	e0f4      	b.n	8001878 <update_advertising+0x32c>
        CHECKED_DIR_ADV();
 800168e:	2300      	movs	r3, #0
 8001690:	f88d 3008 	strb.w	r3, [sp, #8]
 8001694:	f88d 3009 	strb.w	r3, [sp, #9]
 8001698:	f88d 300a 	strb.w	r3, [sp, #10]
 800169c:	2213      	movs	r2, #19
 800169e:	9203      	str	r2, [sp, #12]
 80016a0:	22a0      	movs	r2, #160	; 0xa0
 80016a2:	9204      	str	r2, [sp, #16]
 80016a4:	22f0      	movs	r2, #240	; 0xf0
 80016a6:	9205      	str	r2, [sp, #20]
 80016a8:	9506      	str	r5, [sp, #24]
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	2203      	movs	r2, #3
 80016ae:	4965      	ldr	r1, [pc, #404]	; (8001844 <update_advertising+0x2f8>)
 80016b0:	a802      	add	r0, sp, #8
 80016b2:	f016 ffdd 	bl	8018670 <bt_le_adv_start>
 80016b6:	4604      	mov	r4, r0
 80016b8:	b918      	cbnz	r0, 80016c2 <update_advertising+0x176>
 80016ba:	4b5e      	ldr	r3, [pc, #376]	; (8001834 <update_advertising+0x2e8>)
 80016bc:	2201      	movs	r2, #1
 80016be:	701a      	strb	r2, [r3, #0]
        break;
 80016c0:	e0af      	b.n	8001822 <update_advertising+0x2d6>
        CHECKED_DIR_ADV();
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	2301      	movs	r3, #1
 80016c8:	f363 0202 	bfi	r2, r3, #0, #3
 80016cc:	f36f 02c5 	bfc	r2, #3, #3
 80016d0:	4b55      	ldr	r3, [pc, #340]	; (8001828 <update_advertising+0x2dc>)
 80016d2:	4956      	ldr	r1, [pc, #344]	; (800182c <update_advertising+0x2e0>)
 80016d4:	1a5b      	subs	r3, r3, r1
 80016d6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80016da:	f363 128f 	bfi	r2, r3, #6, #10
 80016de:	4601      	mov	r1, r0
 80016e0:	4859      	ldr	r0, [pc, #356]	; (8001848 <update_advertising+0x2fc>)
 80016e2:	f002 fdc3 	bl	800426c <log_1>
 80016e6:	e0c7      	b.n	8001878 <update_advertising+0x32c>
        CHECKED_DIR_ADV();
 80016e8:	f7ff ff22 	bl	8001530 <zmk_ble_active_profile_addr>
 80016ec:	4604      	mov	r4, r0
 80016ee:	4601      	mov	r1, r0
 80016f0:	2000      	movs	r0, #0
 80016f2:	f00b ff9f 	bl	800d634 <bt_conn_lookup_addr_le>
 80016f6:	4605      	mov	r5, r0
 80016f8:	b1b0      	cbz	r0, 8001728 <update_advertising+0x1dc>
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	2304      	movs	r3, #4
 8001700:	f363 0202 	bfi	r2, r3, #0, #3
 8001704:	f36f 02c5 	bfc	r2, #3, #3
 8001708:	4b47      	ldr	r3, [pc, #284]	; (8001828 <update_advertising+0x2dc>)
 800170a:	4948      	ldr	r1, [pc, #288]	; (800182c <update_advertising+0x2e0>)
 800170c:	1a5b      	subs	r3, r3, r1
 800170e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8001712:	f363 128f 	bfi	r2, r3, #6, #10
 8001716:	4631      	mov	r1, r6
 8001718:	4849      	ldr	r0, [pc, #292]	; (8001840 <update_advertising+0x2f4>)
 800171a:	f002 fda7 	bl	800426c <log_1>
 800171e:	4628      	mov	r0, r5
 8001720:	f017 fa28 	bl	8018b74 <bt_conn_unref>
 8001724:	2400      	movs	r4, #0
 8001726:	e0a7      	b.n	8001878 <update_advertising+0x32c>
 8001728:	2300      	movs	r3, #0
 800172a:	f88d 301c 	strb.w	r3, [sp, #28]
 800172e:	f88d 301d 	strb.w	r3, [sp, #29]
 8001732:	f88d 301e 	strb.w	r3, [sp, #30]
 8001736:	2213      	movs	r2, #19
 8001738:	9208      	str	r2, [sp, #32]
 800173a:	22a0      	movs	r2, #160	; 0xa0
 800173c:	9209      	str	r2, [sp, #36]	; 0x24
 800173e:	22f0      	movs	r2, #240	; 0xf0
 8001740:	920a      	str	r2, [sp, #40]	; 0x28
 8001742:	940b      	str	r4, [sp, #44]	; 0x2c
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	2203      	movs	r2, #3
 8001748:	493e      	ldr	r1, [pc, #248]	; (8001844 <update_advertising+0x2f8>)
 800174a:	a807      	add	r0, sp, #28
 800174c:	f016 ff90 	bl	8018670 <bt_le_adv_start>
 8001750:	4604      	mov	r4, r0
 8001752:	b918      	cbnz	r0, 800175c <update_advertising+0x210>
 8001754:	4b37      	ldr	r3, [pc, #220]	; (8001834 <update_advertising+0x2e8>)
 8001756:	2201      	movs	r2, #1
 8001758:	701a      	strb	r2, [r3, #0]
        break;
 800175a:	e062      	b.n	8001822 <update_advertising+0x2d6>
        CHECKED_DIR_ADV();
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	2301      	movs	r3, #1
 8001762:	f363 0202 	bfi	r2, r3, #0, #3
 8001766:	f36f 02c5 	bfc	r2, #3, #3
 800176a:	4b2f      	ldr	r3, [pc, #188]	; (8001828 <update_advertising+0x2dc>)
 800176c:	492f      	ldr	r1, [pc, #188]	; (800182c <update_advertising+0x2e0>)
 800176e:	1a5b      	subs	r3, r3, r1
 8001770:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8001774:	f363 128f 	bfi	r2, r3, #6, #10
 8001778:	4601      	mov	r1, r0
 800177a:	4833      	ldr	r0, [pc, #204]	; (8001848 <update_advertising+0x2fc>)
 800177c:	f002 fd76 	bl	800426c <log_1>
 8001780:	e07a      	b.n	8001878 <update_advertising+0x32c>
        CHECKED_ADV_STOP();
 8001782:	f00b f925 	bl	800c9d0 <bt_le_adv_stop>
 8001786:	4b2b      	ldr	r3, [pc, #172]	; (8001834 <update_advertising+0x2e8>)
 8001788:	2200      	movs	r2, #0
 800178a:	701a      	strb	r2, [r3, #0]
 800178c:	4604      	mov	r4, r0
 800178e:	b990      	cbnz	r0, 80017b6 <update_advertising+0x26a>
        CHECKED_OPEN_ADV();
 8001790:	ac0c      	add	r4, sp, #48	; 0x30
 8001792:	4d2e      	ldr	r5, [pc, #184]	; (800184c <update_advertising+0x300>)
 8001794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001798:	682b      	ldr	r3, [r5, #0]
 800179a:	6023      	str	r3, [r4, #0]
 800179c:	2300      	movs	r3, #0
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	2203      	movs	r2, #3
 80017a2:	4928      	ldr	r1, [pc, #160]	; (8001844 <update_advertising+0x2f8>)
 80017a4:	a80c      	add	r0, sp, #48	; 0x30
 80017a6:	f016 ff63 	bl	8018670 <bt_le_adv_start>
 80017aa:	4604      	mov	r4, r0
 80017ac:	b9a0      	cbnz	r0, 80017d8 <update_advertising+0x28c>
 80017ae:	4b21      	ldr	r3, [pc, #132]	; (8001834 <update_advertising+0x2e8>)
 80017b0:	2202      	movs	r2, #2
 80017b2:	701a      	strb	r2, [r3, #0]
        break;
 80017b4:	e035      	b.n	8001822 <update_advertising+0x2d6>
        CHECKED_ADV_STOP();
 80017b6:	2301      	movs	r3, #1
 80017b8:	f363 0202 	bfi	r2, r3, #0, #3
 80017bc:	f36f 02c5 	bfc	r2, #3, #3
 80017c0:	4b19      	ldr	r3, [pc, #100]	; (8001828 <update_advertising+0x2dc>)
 80017c2:	491a      	ldr	r1, [pc, #104]	; (800182c <update_advertising+0x2e0>)
 80017c4:	1a5b      	subs	r3, r3, r1
 80017c6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80017ca:	f363 128f 	bfi	r2, r3, #6, #10
 80017ce:	4601      	mov	r1, r0
 80017d0:	481a      	ldr	r0, [pc, #104]	; (800183c <update_advertising+0x2f0>)
 80017d2:	f002 fd4b 	bl	800426c <log_1>
 80017d6:	e04f      	b.n	8001878 <update_advertising+0x32c>
        CHECKED_OPEN_ADV();
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	2301      	movs	r3, #1
 80017de:	f363 0202 	bfi	r2, r3, #0, #3
 80017e2:	f36f 02c5 	bfc	r2, #3, #3
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <update_advertising+0x2dc>)
 80017e8:	4910      	ldr	r1, [pc, #64]	; (800182c <update_advertising+0x2e0>)
 80017ea:	1a5b      	subs	r3, r3, r1
 80017ec:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80017f0:	f363 128f 	bfi	r2, r3, #6, #10
 80017f4:	4601      	mov	r1, r0
 80017f6:	4814      	ldr	r0, [pc, #80]	; (8001848 <update_advertising+0x2fc>)
 80017f8:	f002 fd38 	bl	800426c <log_1>
 80017fc:	e03c      	b.n	8001878 <update_advertising+0x32c>
        CHECKED_OPEN_ADV();
 80017fe:	ac11      	add	r4, sp, #68	; 0x44
 8001800:	4d12      	ldr	r5, [pc, #72]	; (800184c <update_advertising+0x300>)
 8001802:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001804:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001806:	682b      	ldr	r3, [r5, #0]
 8001808:	6023      	str	r3, [r4, #0]
 800180a:	2300      	movs	r3, #0
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	2203      	movs	r2, #3
 8001810:	490c      	ldr	r1, [pc, #48]	; (8001844 <update_advertising+0x2f8>)
 8001812:	a811      	add	r0, sp, #68	; 0x44
 8001814:	f016 ff2c 	bl	8018670 <bt_le_adv_start>
 8001818:	4604      	mov	r4, r0
 800181a:	b9c8      	cbnz	r0, 8001850 <update_advertising+0x304>
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <update_advertising+0x2e8>)
 800181e:	2202      	movs	r2, #2
 8001820:	701a      	strb	r2, [r3, #0]
    return 0;
 8001822:	2400      	movs	r4, #0
 8001824:	e028      	b.n	8001878 <update_advertising+0x32c>
 8001826:	bf00      	nop
 8001828:	0801d7a0 	.word	0x0801d7a0
 800182c:	0801d6d0 	.word	0x0801d6d0
 8001830:	0801e1ec 	.word	0x0801e1ec
 8001834:	200034f5 	.word	0x200034f5
 8001838:	0801df58 	.word	0x0801df58
 800183c:	0801df78 	.word	0x0801df78
 8001840:	0801df9c 	.word	0x0801df9c
 8001844:	0801e2e0 	.word	0x0801e2e0
 8001848:	0801dfd8 	.word	0x0801dfd8
 800184c:	0801d7b8 	.word	0x0801d7b8
        CHECKED_OPEN_ADV();
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	2301      	movs	r3, #1
 8001856:	f363 0202 	bfi	r2, r3, #0, #3
 800185a:	f36f 02c5 	bfc	r2, #3, #3
 800185e:	4b08      	ldr	r3, [pc, #32]	; (8001880 <update_advertising+0x334>)
 8001860:	4908      	ldr	r1, [pc, #32]	; (8001884 <update_advertising+0x338>)
 8001862:	1a5b      	subs	r3, r3, r1
 8001864:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8001868:	f363 128f 	bfi	r2, r3, #6, #10
 800186c:	4601      	mov	r1, r0
 800186e:	4806      	ldr	r0, [pc, #24]	; (8001888 <update_advertising+0x33c>)
 8001870:	f002 fcfc 	bl	800426c <log_1>
 8001874:	e000      	b.n	8001878 <update_advertising+0x32c>
    switch (desired_adv + CURR_ADV(advertising_status)) {
 8001876:	2400      	movs	r4, #0
};
 8001878:	4620      	mov	r0, r4
 800187a:	b017      	add	sp, #92	; 0x5c
 800187c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800187e:	bf00      	nop
 8001880:	0801d7a0 	.word	0x0801d7a0
 8001884:	0801d6d0 	.word	0x0801d6d0
 8001888:	0801dfd8 	.word	0x0801dfd8

0800188c <zmk_ble_clear_bonds>:
int zmk_ble_clear_bonds() {
 800188c:	b510      	push	{r4, lr}
 800188e:	b084      	sub	sp, #16
    LOG_DBG("");
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	2304      	movs	r3, #4
 8001896:	f363 0202 	bfi	r2, r3, #0, #3
 800189a:	f36f 02c5 	bfc	r2, #3, #3
 800189e:	4b25      	ldr	r3, [pc, #148]	; (8001934 <zmk_ble_clear_bonds+0xa8>)
 80018a0:	4925      	ldr	r1, [pc, #148]	; (8001938 <zmk_ble_clear_bonds+0xac>)
 80018a2:	1a5b      	subs	r3, r3, r1
 80018a4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80018a8:	f363 128f 	bfi	r2, r3, #6, #10
 80018ac:	4c23      	ldr	r4, [pc, #140]	; (800193c <zmk_ble_clear_bonds+0xb0>)
 80018ae:	4621      	mov	r1, r4
 80018b0:	4823      	ldr	r0, [pc, #140]	; (8001940 <zmk_ble_clear_bonds+0xb4>)
 80018b2:	f002 fcdb 	bl	800426c <log_1>
    if (bt_addr_le_cmp(&profiles[active_profile].peer, BT_ADDR_LE_ANY)) {
 80018b6:	4b23      	ldr	r3, [pc, #140]	; (8001944 <zmk_ble_clear_bonds+0xb8>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2016      	movs	r0, #22
 80018bc:	fb00 f003 	mul.w	r0, r0, r3
 80018c0:	3008      	adds	r0, #8
 80018c2:	4b21      	ldr	r3, [pc, #132]	; (8001948 <zmk_ble_clear_bonds+0xbc>)
 80018c4:	4418      	add	r0, r3
 80018c6:	2300      	movs	r3, #0
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	f8cd 3003 	str.w	r3, [sp, #3]
 80018ce:	2207      	movs	r2, #7
 80018d0:	4669      	mov	r1, sp
 80018d2:	4410      	add	r0, r2
 80018d4:	f016 faba 	bl	8017e4c <memcmp>
 80018d8:	b920      	cbnz	r0, 80018e4 <zmk_ble_clear_bonds+0x58>
    update_advertising();
 80018da:	f7ff fe37 	bl	800154c <update_advertising>
};
 80018de:	2000      	movs	r0, #0
 80018e0:	b004      	add	sp, #16
 80018e2:	bd10      	pop	{r4, pc}
        LOG_DBG("Unpairing!");
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	2304      	movs	r3, #4
 80018ea:	f363 0202 	bfi	r2, r3, #0, #3
 80018ee:	f36f 02c5 	bfc	r2, #3, #3
 80018f2:	4b10      	ldr	r3, [pc, #64]	; (8001934 <zmk_ble_clear_bonds+0xa8>)
 80018f4:	4910      	ldr	r1, [pc, #64]	; (8001938 <zmk_ble_clear_bonds+0xac>)
 80018f6:	1a5b      	subs	r3, r3, r1
 80018f8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80018fc:	f363 128f 	bfi	r2, r3, #6, #10
 8001900:	4621      	mov	r1, r4
 8001902:	4812      	ldr	r0, [pc, #72]	; (800194c <zmk_ble_clear_bonds+0xc0>)
 8001904:	f002 fcb2 	bl	800426c <log_1>
        bt_unpair(BT_ID_DEFAULT, &profiles[active_profile].peer);
 8001908:	4c0e      	ldr	r4, [pc, #56]	; (8001944 <zmk_ble_clear_bonds+0xb8>)
 800190a:	7823      	ldrb	r3, [r4, #0]
 800190c:	2116      	movs	r1, #22
 800190e:	fb01 f103 	mul.w	r1, r1, r3
 8001912:	3108      	adds	r1, #8
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <zmk_ble_clear_bonds+0xbc>)
 8001916:	4419      	add	r1, r3
 8001918:	3107      	adds	r1, #7
 800191a:	2000      	movs	r0, #0
 800191c:	f009 fe62 	bl	800b5e4 <bt_unpair>
        set_profile_address(active_profile, BT_ADDR_LE_ANY);
 8001920:	2300      	movs	r3, #0
 8001922:	9302      	str	r3, [sp, #8]
 8001924:	f8cd 300b 	str.w	r3, [sp, #11]
 8001928:	a902      	add	r1, sp, #8
 800192a:	7820      	ldrb	r0, [r4, #0]
 800192c:	f7ff fd60 	bl	80013f0 <set_profile_address>
 8001930:	e7d3      	b.n	80018da <zmk_ble_clear_bonds+0x4e>
 8001932:	bf00      	nop
 8001934:	0801d7a0 	.word	0x0801d7a0
 8001938:	0801d6d0 	.word	0x0801d6d0
 800193c:	0801e200 	.word	0x0801e200
 8001940:	0801e000 	.word	0x0801e000
 8001944:	200034f4 	.word	0x200034f4
 8001948:	200014d4 	.word	0x200014d4
 800194c:	0801e008 	.word	0x0801e008

08001950 <zmk_ble_prof_select>:
int zmk_ble_prof_select(uint8_t index) {
 8001950:	b510      	push	{r4, lr}
 8001952:	4604      	mov	r4, r0
    LOG_DBG("profile %d", index);
 8001954:	f04f 0300 	mov.w	r3, #0
 8001958:	2204      	movs	r2, #4
 800195a:	f362 0302 	bfi	r3, r2, #0, #3
 800195e:	f36f 03c5 	bfc	r3, #3, #3
 8001962:	4a0d      	ldr	r2, [pc, #52]	; (8001998 <zmk_ble_prof_select+0x48>)
 8001964:	490d      	ldr	r1, [pc, #52]	; (800199c <zmk_ble_prof_select+0x4c>)
 8001966:	1a52      	subs	r2, r2, r1
 8001968:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 800196c:	f362 138f 	bfi	r3, r2, #6, #10
 8001970:	4602      	mov	r2, r0
 8001972:	490b      	ldr	r1, [pc, #44]	; (80019a0 <zmk_ble_prof_select+0x50>)
 8001974:	480b      	ldr	r0, [pc, #44]	; (80019a4 <zmk_ble_prof_select+0x54>)
 8001976:	f002 fcf9 	bl	800436c <log_2>
    if (active_profile == index) {
 800197a:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <zmk_ble_prof_select+0x58>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	42a3      	cmp	r3, r4
 8001980:	d007      	beq.n	8001992 <zmk_ble_prof_select+0x42>
    active_profile = index;
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <zmk_ble_prof_select+0x58>)
 8001984:	701c      	strb	r4, [r3, #0]
    ble_save_profile();
 8001986:	f7ff f983 	bl	8000c90 <ble_save_profile>
    update_advertising();
 800198a:	f7ff fddf 	bl	800154c <update_advertising>
    raise_profile_changed_event();
 800198e:	f7ff f959 	bl	8000c44 <raise_profile_changed_event>
};
 8001992:	2000      	movs	r0, #0
 8001994:	bd10      	pop	{r4, pc}
 8001996:	bf00      	nop
 8001998:	0801d7a0 	.word	0x0801d7a0
 800199c:	0801d6d0 	.word	0x0801d6d0
 80019a0:	0801e214 	.word	0x0801e214
 80019a4:	0801e018 	.word	0x0801e018
 80019a8:	200034f4 	.word	0x200034f4

080019ac <zmk_ble_prof_next>:
int zmk_ble_prof_next() {
 80019ac:	b508      	push	{r3, lr}
    LOG_DBG("");
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	2304      	movs	r3, #4
 80019b4:	f363 0202 	bfi	r2, r3, #0, #3
 80019b8:	f36f 02c5 	bfc	r2, #3, #3
 80019bc:	4b07      	ldr	r3, [pc, #28]	; (80019dc <zmk_ble_prof_next+0x30>)
 80019be:	4908      	ldr	r1, [pc, #32]	; (80019e0 <zmk_ble_prof_next+0x34>)
 80019c0:	1a5b      	subs	r3, r3, r1
 80019c2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80019c6:	f363 128f 	bfi	r2, r3, #6, #10
 80019ca:	4906      	ldr	r1, [pc, #24]	; (80019e4 <zmk_ble_prof_next+0x38>)
 80019cc:	4806      	ldr	r0, [pc, #24]	; (80019e8 <zmk_ble_prof_next+0x3c>)
 80019ce:	f002 fc4d 	bl	800426c <log_1>
    return zmk_ble_prof_select((active_profile + 1) % PROFILE_COUNT);
 80019d2:	2000      	movs	r0, #0
 80019d4:	f7ff ffbc 	bl	8001950 <zmk_ble_prof_select>
};
 80019d8:	bd08      	pop	{r3, pc}
 80019da:	bf00      	nop
 80019dc:	0801d7a0 	.word	0x0801d7a0
 80019e0:	0801d6d0 	.word	0x0801d6d0
 80019e4:	0801e228 	.word	0x0801e228
 80019e8:	0801e000 	.word	0x0801e000

080019ec <zmk_ble_prof_prev>:
int zmk_ble_prof_prev() {
 80019ec:	b508      	push	{r3, lr}
    LOG_DBG("");
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	2304      	movs	r3, #4
 80019f4:	f363 0202 	bfi	r2, r3, #0, #3
 80019f8:	f36f 02c5 	bfc	r2, #3, #3
 80019fc:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <zmk_ble_prof_prev+0x30>)
 80019fe:	4908      	ldr	r1, [pc, #32]	; (8001a20 <zmk_ble_prof_prev+0x34>)
 8001a00:	1a5b      	subs	r3, r3, r1
 8001a02:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8001a06:	f363 128f 	bfi	r2, r3, #6, #10
 8001a0a:	4906      	ldr	r1, [pc, #24]	; (8001a24 <zmk_ble_prof_prev+0x38>)
 8001a0c:	4806      	ldr	r0, [pc, #24]	; (8001a28 <zmk_ble_prof_prev+0x3c>)
 8001a0e:	f002 fc2d 	bl	800426c <log_1>
    return zmk_ble_prof_select((active_profile + PROFILE_COUNT - 1) % PROFILE_COUNT);
 8001a12:	2000      	movs	r0, #0
 8001a14:	f7ff ff9c 	bl	8001950 <zmk_ble_prof_select>
};
 8001a18:	bd08      	pop	{r3, pc}
 8001a1a:	bf00      	nop
 8001a1c:	0801d7a0 	.word	0x0801d7a0
 8001a20:	0801d6d0 	.word	0x0801d6d0
 8001a24:	0801e23c 	.word	0x0801e23c
 8001a28:	0801e000 	.word	0x0801e000

08001a2c <auth_pairing_complete>:

    return BT_SECURITY_ERR_SUCCESS;
};
#endif /* IS_HOST_PERIPHERAL */

static void auth_pairing_complete(struct bt_conn *conn, bool bonded) {
 8001a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2e:	b09b      	sub	sp, #108	; 0x6c
 8001a30:	4605      	mov	r5, r0
    struct bt_conn_info info;
    char addr[BT_ADDR_LE_STR_LEN];
    const bt_addr_le_t *dst = bt_conn_get_dst(conn);
 8001a32:	f017 f8e8 	bl	8018c06 <bt_conn_get_dst>
 8001a36:	4604      	mov	r4, r0
	switch (addr->type) {
 8001a38:	7803      	ldrb	r3, [r0, #0]
 8001a3a:	2b03      	cmp	r3, #3
 8001a3c:	d846      	bhi.n	8001acc <auth_pairing_complete+0xa0>
 8001a3e:	e8df f003 	tbb	[pc, r3]
 8001a42:	3602      	.short	0x3602
 8001a44:	403b      	.short	0x403b
		strcpy(type, "public");
 8001a46:	4928      	ldr	r1, [pc, #160]	; (8001ae8 <auth_pairing_complete+0xbc>)
 8001a48:	a807      	add	r0, sp, #28
 8001a4a:	f016 f9a1 	bl	8017d90 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
 8001a4e:	79a3      	ldrb	r3, [r4, #6]
 8001a50:	7962      	ldrb	r2, [r4, #5]
 8001a52:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
 8001a54:	78e0      	ldrb	r0, [r4, #3]
 8001a56:	78a6      	ldrb	r6, [r4, #2]
 8001a58:	7867      	ldrb	r7, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
 8001a5a:	f10d 0c1c 	add.w	ip, sp, #28
 8001a5e:	f8cd c014 	str.w	ip, [sp, #20]
 8001a62:	9704      	str	r7, [sp, #16]
 8001a64:	9603      	str	r6, [sp, #12]
 8001a66:	9002      	str	r0, [sp, #8]
 8001a68:	9101      	str	r1, [sp, #4]
 8001a6a:	9200      	str	r2, [sp, #0]
 8001a6c:	4a1f      	ldr	r2, [pc, #124]	; (8001aec <auth_pairing_complete+0xc0>)
 8001a6e:	211e      	movs	r1, #30
 8001a70:	a80a      	add	r0, sp, #40	; 0x28
 8001a72:	f013 fdc4 	bl	80155fe <snprintk>

    bt_addr_le_to_str(dst, addr, sizeof(addr));
    bt_conn_get_info(conn, &info);
 8001a76:	a912      	add	r1, sp, #72	; 0x48
 8001a78:	4628      	mov	r0, r5
 8001a7a:	f00b ff97 	bl	800d9ac <bt_conn_get_info>

    if (info.role != BT_CONN_ROLE_SLAVE) {
 8001a7e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8001a82:	2a01      	cmp	r2, #1
 8001a84:	d028      	beq.n	8001ad8 <auth_pairing_complete+0xac>
        LOG_DBG("SKIPPING FOR ROLE %d", info.role);
 8001a86:	f04f 0300 	mov.w	r3, #0
 8001a8a:	2104      	movs	r1, #4
 8001a8c:	f361 0302 	bfi	r3, r1, #0, #3
 8001a90:	f36f 03c5 	bfc	r3, #3, #3
 8001a94:	4916      	ldr	r1, [pc, #88]	; (8001af0 <auth_pairing_complete+0xc4>)
 8001a96:	4817      	ldr	r0, [pc, #92]	; (8001af4 <auth_pairing_complete+0xc8>)
 8001a98:	1a09      	subs	r1, r1, r0
 8001a9a:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 8001a9e:	f361 138f 	bfi	r3, r1, #6, #10
 8001aa2:	4915      	ldr	r1, [pc, #84]	; (8001af8 <auth_pairing_complete+0xcc>)
 8001aa4:	4815      	ldr	r0, [pc, #84]	; (8001afc <auth_pairing_complete+0xd0>)
 8001aa6:	f002 fc61 	bl	800436c <log_2>
    }
#endif /* IS_HOST_PERIPHERAL */

    set_profile_address(active_profile, dst);
    update_advertising();
};
 8001aaa:	b01b      	add	sp, #108	; 0x6c
 8001aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
 8001aae:	4914      	ldr	r1, [pc, #80]	; (8001b00 <auth_pairing_complete+0xd4>)
 8001ab0:	a807      	add	r0, sp, #28
 8001ab2:	f016 f96d 	bl	8017d90 <strcpy>
		break;
 8001ab6:	e7ca      	b.n	8001a4e <auth_pairing_complete+0x22>
		strcpy(type, "public-id");
 8001ab8:	4912      	ldr	r1, [pc, #72]	; (8001b04 <auth_pairing_complete+0xd8>)
 8001aba:	a807      	add	r0, sp, #28
 8001abc:	f016 f968 	bl	8017d90 <strcpy>
		break;
 8001ac0:	e7c5      	b.n	8001a4e <auth_pairing_complete+0x22>
		strcpy(type, "random-id");
 8001ac2:	4911      	ldr	r1, [pc, #68]	; (8001b08 <auth_pairing_complete+0xdc>)
 8001ac4:	a807      	add	r0, sp, #28
 8001ac6:	f016 f963 	bl	8017d90 <strcpy>
		break;
 8001aca:	e7c0      	b.n	8001a4e <auth_pairing_complete+0x22>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
 8001acc:	4a0f      	ldr	r2, [pc, #60]	; (8001b0c <auth_pairing_complete+0xe0>)
 8001ace:	210a      	movs	r1, #10
 8001ad0:	a807      	add	r0, sp, #28
 8001ad2:	f013 fd94 	bl	80155fe <snprintk>
		break;
 8001ad6:	e7ba      	b.n	8001a4e <auth_pairing_complete+0x22>
    set_profile_address(active_profile, dst);
 8001ad8:	4621      	mov	r1, r4
 8001ada:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <auth_pairing_complete+0xe4>)
 8001adc:	7818      	ldrb	r0, [r3, #0]
 8001ade:	f7ff fc87 	bl	80013f0 <set_profile_address>
    update_advertising();
 8001ae2:	f7ff fd33 	bl	800154c <update_advertising>
 8001ae6:	e7e0      	b.n	8001aaa <auth_pairing_complete+0x7e>
 8001ae8:	0801dd98 	.word	0x0801dd98
 8001aec:	0801ddc0 	.word	0x0801ddc0
 8001af0:	0801d7a0 	.word	0x0801d7a0
 8001af4:	0801d6d0 	.word	0x0801d6d0
 8001af8:	0801e2b8 	.word	0x0801e2b8
 8001afc:	0801e028 	.word	0x0801e028
 8001b00:	0801dda0 	.word	0x0801dda0
 8001b04:	0801dda8 	.word	0x0801dda8
 8001b08:	0801ddb4 	.word	0x0801ddb4
 8001b0c:	080215d0 	.word	0x080215d0
 8001b10:	200034f4 	.word	0x200034f4

08001b14 <connected>:
static void connected(struct bt_conn *conn, uint8_t err) {
 8001b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b16:	b095      	sub	sp, #84	; 0x54
 8001b18:	4605      	mov	r5, r0
 8001b1a:	460e      	mov	r6, r1
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
 8001b1c:	f017 f873 	bl	8018c06 <bt_conn_get_dst>
 8001b20:	4604      	mov	r4, r0
	switch (addr->type) {
 8001b22:	7803      	ldrb	r3, [r0, #0]
 8001b24:	2b03      	cmp	r3, #3
 8001b26:	f200 8081 	bhi.w	8001c2c <connected+0x118>
 8001b2a:	e8df f003 	tbb	[pc, r3]
 8001b2e:	7002      	.short	0x7002
 8001b30:	7a75      	.short	0x7a75
		strcpy(type, "public");
 8001b32:	4975      	ldr	r1, [pc, #468]	; (8001d08 <connected+0x1f4>)
 8001b34:	a806      	add	r0, sp, #24
 8001b36:	f016 f92b 	bl	8017d90 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
 8001b3a:	79a3      	ldrb	r3, [r4, #6]
 8001b3c:	7962      	ldrb	r2, [r4, #5]
 8001b3e:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
 8001b40:	78e0      	ldrb	r0, [r4, #3]
 8001b42:	78a7      	ldrb	r7, [r4, #2]
 8001b44:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
 8001b46:	f10d 0c18 	add.w	ip, sp, #24
 8001b4a:	f8cd c014 	str.w	ip, [sp, #20]
 8001b4e:	9404      	str	r4, [sp, #16]
 8001b50:	9703      	str	r7, [sp, #12]
 8001b52:	9002      	str	r0, [sp, #8]
 8001b54:	9101      	str	r1, [sp, #4]
 8001b56:	9200      	str	r2, [sp, #0]
 8001b58:	4a6c      	ldr	r2, [pc, #432]	; (8001d0c <connected+0x1f8>)
 8001b5a:	211e      	movs	r1, #30
 8001b5c:	a809      	add	r0, sp, #36	; 0x24
 8001b5e:	f013 fd4e 	bl	80155fe <snprintk>
    LOG_DBG("Connected thread: %p", k_current_get());
 8001b62:	f04f 0400 	mov.w	r4, #0
 8001b66:	2304      	movs	r3, #4
 8001b68:	f363 0402 	bfi	r4, r3, #0, #3
 8001b6c:	f36f 04c5 	bfc	r4, #3, #3
 8001b70:	4b67      	ldr	r3, [pc, #412]	; (8001d10 <connected+0x1fc>)
 8001b72:	4a68      	ldr	r2, [pc, #416]	; (8001d14 <connected+0x200>)
 8001b74:	1a9b      	subs	r3, r3, r2
 8001b76:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8001b7a:	f363 148f 	bfi	r4, r3, #6, #10
 8001b7e:	4f66      	ldr	r7, [pc, #408]	; (8001d18 <connected+0x204>)
	return z_impl_k_current_get();
 8001b80:	f012 fc50 	bl	8014424 <z_impl_k_current_get>
 8001b84:	4602      	mov	r2, r0
 8001b86:	4623      	mov	r3, r4
 8001b88:	4639      	mov	r1, r7
 8001b8a:	4864      	ldr	r0, [pc, #400]	; (8001d1c <connected+0x208>)
 8001b8c:	f002 fbee 	bl	800436c <log_2>
    advertising_status = ZMK_ADV_NONE;
 8001b90:	4b63      	ldr	r3, [pc, #396]	; (8001d20 <connected+0x20c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
    if (err) {
 8001b96:	2e00      	cmp	r6, #0
 8001b98:	d14e      	bne.n	8001c38 <connected+0x124>
    LOG_DBG("Connected %s", log_strdup(addr));
 8001b9a:	f04f 0400 	mov.w	r4, #0
 8001b9e:	2304      	movs	r3, #4
 8001ba0:	f363 0402 	bfi	r4, r3, #0, #3
 8001ba4:	f36f 04c5 	bfc	r4, #3, #3
 8001ba8:	4b59      	ldr	r3, [pc, #356]	; (8001d10 <connected+0x1fc>)
 8001baa:	4a5a      	ldr	r2, [pc, #360]	; (8001d14 <connected+0x200>)
 8001bac:	1a9b      	subs	r3, r3, r2
 8001bae:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8001bb2:	f363 148f 	bfi	r4, r3, #6, #10
 8001bb6:	a809      	add	r0, sp, #36	; 0x24
 8001bb8:	f002 f988 	bl	8003ecc <log_strdup>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	4623      	mov	r3, r4
 8001bc0:	4639      	mov	r1, r7
 8001bc2:	4858      	ldr	r0, [pc, #352]	; (8001d24 <connected+0x210>)
 8001bc4:	f002 fbd2 	bl	800436c <log_2>
    err = bt_conn_le_param_update(conn, BT_LE_CONN_PARAM(0x0006, 0x000c, 30, 400));
 8001bc8:	ab11      	add	r3, sp, #68	; 0x44
 8001bca:	4a57      	ldr	r2, [pc, #348]	; (8001d28 <connected+0x214>)
 8001bcc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bd0:	e883 0003 	stmia.w	r3, {r0, r1}
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4628      	mov	r0, r5
 8001bd8:	f017 f861 	bl	8018c9e <bt_conn_le_param_update>
    if (err) {
 8001bdc:	f010 0fff 	tst.w	r0, #255	; 0xff
 8001be0:	d144      	bne.n	8001c6c <connected+0x158>
    bt_conn_le_phy_update(conn, BT_CONN_LE_PHY_PARAM_2M);
 8001be2:	4b52      	ldr	r3, [pc, #328]	; (8001d2c <connected+0x218>)
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	9313      	str	r3, [sp, #76]	; 0x4c
 8001be8:	a913      	add	r1, sp, #76	; 0x4c
 8001bea:	4628      	mov	r0, r5
 8001bec:	f017 f80d 	bl	8018c0a <bt_conn_le_phy_update>
    if (bt_conn_set_security(conn, BT_SECURITY_L2)) {
 8001bf0:	2102      	movs	r1, #2
 8001bf2:	4628      	mov	r0, r5
 8001bf4:	f016 fed4 	bl	80189a0 <bt_conn_set_security>
 8001bf8:	2800      	cmp	r0, #0
 8001bfa:	d14a      	bne.n	8001c92 <connected+0x17e>
    update_advertising();
 8001bfc:	f7ff fca6 	bl	800154c <update_advertising>
    if (is_conn_active_profile(conn)) {
 8001c00:	4628      	mov	r0, r5
 8001c02:	f7ff f99b 	bl	8000f3c <is_conn_active_profile>
 8001c06:	2800      	cmp	r0, #0
 8001c08:	d155      	bne.n	8001cb6 <connected+0x1a2>
}
 8001c0a:	b015      	add	sp, #84	; 0x54
 8001c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
 8001c0e:	4948      	ldr	r1, [pc, #288]	; (8001d30 <connected+0x21c>)
 8001c10:	a806      	add	r0, sp, #24
 8001c12:	f016 f8bd 	bl	8017d90 <strcpy>
		break;
 8001c16:	e790      	b.n	8001b3a <connected+0x26>
		strcpy(type, "public-id");
 8001c18:	4946      	ldr	r1, [pc, #280]	; (8001d34 <connected+0x220>)
 8001c1a:	a806      	add	r0, sp, #24
 8001c1c:	f016 f8b8 	bl	8017d90 <strcpy>
		break;
 8001c20:	e78b      	b.n	8001b3a <connected+0x26>
		strcpy(type, "random-id");
 8001c22:	4945      	ldr	r1, [pc, #276]	; (8001d38 <connected+0x224>)
 8001c24:	a806      	add	r0, sp, #24
 8001c26:	f016 f8b3 	bl	8017d90 <strcpy>
		break;
 8001c2a:	e786      	b.n	8001b3a <connected+0x26>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
 8001c2c:	4a43      	ldr	r2, [pc, #268]	; (8001d3c <connected+0x228>)
 8001c2e:	210a      	movs	r1, #10
 8001c30:	a806      	add	r0, sp, #24
 8001c32:	f013 fce4 	bl	80155fe <snprintk>
		break;
 8001c36:	e780      	b.n	8001b3a <connected+0x26>
        LOG_WRN("Failed to connect to %s (%u)", log_strdup(addr), err);
 8001c38:	f04f 0400 	mov.w	r4, #0
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	f363 0402 	bfi	r4, r3, #0, #3
 8001c42:	f36f 04c5 	bfc	r4, #3, #3
 8001c46:	4b32      	ldr	r3, [pc, #200]	; (8001d10 <connected+0x1fc>)
 8001c48:	4a32      	ldr	r2, [pc, #200]	; (8001d14 <connected+0x200>)
 8001c4a:	1a9b      	subs	r3, r3, r2
 8001c4c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8001c50:	f363 148f 	bfi	r4, r3, #6, #10
 8001c54:	a809      	add	r0, sp, #36	; 0x24
 8001c56:	f002 f939 	bl	8003ecc <log_strdup>
 8001c5a:	4601      	mov	r1, r0
 8001c5c:	4623      	mov	r3, r4
 8001c5e:	4632      	mov	r2, r6
 8001c60:	4837      	ldr	r0, [pc, #220]	; (8001d40 <connected+0x22c>)
 8001c62:	f002 fb83 	bl	800436c <log_2>
        update_advertising();
 8001c66:	f7ff fc71 	bl	800154c <update_advertising>
        return;
 8001c6a:	e7ce      	b.n	8001c0a <connected+0xf6>
        LOG_WRN("Failed to update LE parameters (err %d)", err);
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	2302      	movs	r3, #2
 8001c72:	f363 0202 	bfi	r2, r3, #0, #3
 8001c76:	f36f 02c5 	bfc	r2, #3, #3
 8001c7a:	4b25      	ldr	r3, [pc, #148]	; (8001d10 <connected+0x1fc>)
 8001c7c:	4925      	ldr	r1, [pc, #148]	; (8001d14 <connected+0x200>)
 8001c7e:	1a5b      	subs	r3, r3, r1
 8001c80:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8001c84:	f363 128f 	bfi	r2, r3, #6, #10
 8001c88:	b2c1      	uxtb	r1, r0
 8001c8a:	482e      	ldr	r0, [pc, #184]	; (8001d44 <connected+0x230>)
 8001c8c:	f002 faee 	bl	800426c <log_1>
 8001c90:	e7a7      	b.n	8001be2 <connected+0xce>
        LOG_ERR("Failed to set security");
 8001c92:	f04f 0100 	mov.w	r1, #0
 8001c96:	2301      	movs	r3, #1
 8001c98:	f363 0102 	bfi	r1, r3, #0, #3
 8001c9c:	f36f 01c5 	bfc	r1, #3, #3
 8001ca0:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <connected+0x1fc>)
 8001ca2:	4a1c      	ldr	r2, [pc, #112]	; (8001d14 <connected+0x200>)
 8001ca4:	1a9b      	subs	r3, r3, r2
 8001ca6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8001caa:	f363 118f 	bfi	r1, r3, #6, #10
 8001cae:	4826      	ldr	r0, [pc, #152]	; (8001d48 <connected+0x234>)
 8001cb0:	f002 fc4c 	bl	800454c <log_0>
 8001cb4:	e7a2      	b.n	8001bfc <connected+0xe8>
        LOG_DBG("Active profile connected");
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	2304      	movs	r3, #4
 8001cbc:	f363 0202 	bfi	r2, r3, #0, #3
 8001cc0:	f36f 02c5 	bfc	r2, #3, #3
 8001cc4:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <connected+0x1fc>)
 8001cc6:	4913      	ldr	r1, [pc, #76]	; (8001d14 <connected+0x200>)
 8001cc8:	1a5b      	subs	r3, r3, r1
 8001cca:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8001cce:	f363 128f 	bfi	r2, r3, #6, #10
 8001cd2:	4639      	mov	r1, r7
 8001cd4:	481d      	ldr	r0, [pc, #116]	; (8001d4c <connected+0x238>)
 8001cd6:	f002 fac9 	bl	800426c <log_1>
 8001cda:	4b1d      	ldr	r3, [pc, #116]	; (8001d50 <connected+0x23c>)
 8001cdc:	f3bf 8f5b 	dmb	ish
 8001ce0:	e853 2f00 	ldrex	r2, [r3]
 8001ce4:	f042 0101 	orr.w	r1, r2, #1
 8001ce8:	e843 1000 	strex	r0, r1, [r3]
 8001cec:	2800      	cmp	r0, #0
 8001cee:	d1f7      	bne.n	8001ce0 <connected+0x1cc>
 8001cf0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 8001cf4:	f012 0f01 	tst.w	r2, #1
 8001cf8:	d187      	bne.n	8001c0a <connected+0xf6>
		k_queue_append(&work_q->queue, work);
 8001cfa:	f1a3 0108 	sub.w	r1, r3, #8
 8001cfe:	4815      	ldr	r0, [pc, #84]	; (8001d54 <connected+0x240>)
 8001d00:	f01a feb4 	bl	801ca6c <k_queue_append>
}
 8001d04:	e781      	b.n	8001c0a <connected+0xf6>
 8001d06:	bf00      	nop
 8001d08:	0801dd98 	.word	0x0801dd98
 8001d0c:	0801ddc0 	.word	0x0801ddc0
 8001d10:	0801d7a0 	.word	0x0801d7a0
 8001d14:	0801d6d0 	.word	0x0801d6d0
 8001d18:	0801e268 	.word	0x0801e268
 8001d1c:	0801e044 	.word	0x0801e044
 8001d20:	200034f5 	.word	0x200034f5
 8001d24:	0801e080 	.word	0x0801e080
 8001d28:	0801d7cc 	.word	0x0801d7cc
 8001d2c:	0801d7b8 	.word	0x0801d7b8
 8001d30:	0801dda0 	.word	0x0801dda0
 8001d34:	0801dda8 	.word	0x0801dda8
 8001d38:	0801ddb4 	.word	0x0801ddb4
 8001d3c:	080215d0 	.word	0x080215d0
 8001d40:	0801e060 	.word	0x0801e060
 8001d44:	0801e094 	.word	0x0801e094
 8001d48:	0801e0bc 	.word	0x0801e0bc
 8001d4c:	0801e0d4 	.word	0x0801e0d4
 8001d50:	200001a0 	.word	0x200001a0
 8001d54:	20001408 	.word	0x20001408

08001d58 <zmk_ble_ready>:
    .passkey_entry = auth_passkey_entry,
#endif
    .cancel = auth_cancel,
};

static void zmk_ble_ready(int err) {
 8001d58:	b510      	push	{r4, lr}
 8001d5a:	4604      	mov	r4, r0
    LOG_DBG("ready? %d", err);
 8001d5c:	f04f 0300 	mov.w	r3, #0
 8001d60:	2204      	movs	r2, #4
 8001d62:	f362 0302 	bfi	r3, r2, #0, #3
 8001d66:	f36f 03c5 	bfc	r3, #3, #3
 8001d6a:	4a11      	ldr	r2, [pc, #68]	; (8001db0 <zmk_ble_ready+0x58>)
 8001d6c:	4911      	ldr	r1, [pc, #68]	; (8001db4 <zmk_ble_ready+0x5c>)
 8001d6e:	1a52      	subs	r2, r2, r1
 8001d70:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8001d74:	f362 138f 	bfi	r3, r2, #6, #10
 8001d78:	4602      	mov	r2, r0
 8001d7a:	490f      	ldr	r1, [pc, #60]	; (8001db8 <zmk_ble_ready+0x60>)
 8001d7c:	480f      	ldr	r0, [pc, #60]	; (8001dbc <zmk_ble_ready+0x64>)
 8001d7e:	f002 faf5 	bl	800436c <log_2>
    if (err) {
 8001d82:	b914      	cbnz	r4, 8001d8a <zmk_ble_ready+0x32>
        LOG_ERR("Bluetooth init failed (err %d)", err);
        return;
    }

    update_advertising();
 8001d84:	f7ff fbe2 	bl	800154c <update_advertising>
}
 8001d88:	bd10      	pop	{r4, pc}
        LOG_ERR("Bluetooth init failed (err %d)", err);
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	2301      	movs	r3, #1
 8001d90:	f363 0202 	bfi	r2, r3, #0, #3
 8001d94:	f36f 02c5 	bfc	r2, #3, #3
 8001d98:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <zmk_ble_ready+0x58>)
 8001d9a:	4906      	ldr	r1, [pc, #24]	; (8001db4 <zmk_ble_ready+0x5c>)
 8001d9c:	1a5b      	subs	r3, r3, r1
 8001d9e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8001da2:	f363 128f 	bfi	r2, r3, #6, #10
 8001da6:	4621      	mov	r1, r4
 8001da8:	4805      	ldr	r0, [pc, #20]	; (8001dc0 <zmk_ble_ready+0x68>)
 8001daa:	f002 fa5f 	bl	800426c <log_1>
        return;
 8001dae:	e7eb      	b.n	8001d88 <zmk_ble_ready+0x30>
 8001db0:	0801d7a0 	.word	0x0801d7a0
 8001db4:	0801d6d0 	.word	0x0801d6d0
 8001db8:	0801e2d0 	.word	0x0801e2d0
 8001dbc:	0801e0f4 	.word	0x0801e0f4
 8001dc0:	0801e104 	.word	0x0801e104

08001dc4 <zmk_ble_init>:

static int zmk_ble_init(const struct device *_arg) {
 8001dc4:	b570      	push	{r4, r5, r6, lr}
 8001dc6:	b084      	sub	sp, #16
    int err = bt_enable(NULL);
 8001dc8:	2000      	movs	r0, #0
 8001dca:	f00a fb33 	bl	800c434 <bt_enable>

    if (err) {
 8001dce:	bb58      	cbnz	r0, 8001e28 <zmk_ble_init+0x64>
        LOG_ERR("BLUETOOTH FAILED (%d)", err);
        return err;
    }

#if IS_ENABLED(CONFIG_SETTINGS)
    settings_subsys_init();
 8001dd0:	f004 fc54 	bl	800667c <settings_subsys_init>

    err = settings_register(&profiles_handler);
 8001dd4:	483e      	ldr	r0, [pc, #248]	; (8001ed0 <zmk_ble_init+0x10c>)
 8001dd6:	f004 fb19 	bl	800640c <settings_register>
    if (err) {
 8001dda:	4605      	mov	r5, r0
 8001ddc:	2800      	cmp	r0, #0
 8001dde:	d137      	bne.n	8001e50 <zmk_ble_init+0x8c>
        LOG_ERR("Failed to setup the profile settings handler (err %d)", err);
        return err;
    }

    k_delayed_work_init(&ble_save_work, ble_save_profile_work);
 8001de0:	493c      	ldr	r1, [pc, #240]	; (8001ed4 <zmk_ble_init+0x110>)
 8001de2:	483d      	ldr	r0, [pc, #244]	; (8001ed8 <zmk_ble_init+0x114>)
 8001de4:	f01b f8a0 	bl	801cf28 <k_delayed_work_init>

    settings_load_subtree("ble");
 8001de8:	483c      	ldr	r0, [pc, #240]	; (8001edc <zmk_ble_init+0x118>)
 8001dea:	f004 faaf 	bl	800634c <settings_load_subtree>
    settings_load_subtree("bt");
 8001dee:	483c      	ldr	r0, [pc, #240]	; (8001ee0 <zmk_ble_init+0x11c>)
 8001df0:	f004 faac 	bl	800634c <settings_load_subtree>

#endif

#if IS_ENABLED(CONFIG_ZMK_BLE_CLEAR_BONDS_ON_START)
    LOG_WRN("Clearing all existing BLE bond information from the keyboard");
 8001df4:	f04f 0100 	mov.w	r1, #0
 8001df8:	2302      	movs	r3, #2
 8001dfa:	f363 0102 	bfi	r1, r3, #0, #3
 8001dfe:	f36f 01c5 	bfc	r1, #3, #3
 8001e02:	4b38      	ldr	r3, [pc, #224]	; (8001ee4 <zmk_ble_init+0x120>)
 8001e04:	4a38      	ldr	r2, [pc, #224]	; (8001ee8 <zmk_ble_init+0x124>)
 8001e06:	1a9b      	subs	r3, r3, r2
 8001e08:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8001e0c:	f363 118f 	bfi	r1, r3, #6, #10
 8001e10:	4836      	ldr	r0, [pc, #216]	; (8001eec <zmk_ble_init+0x128>)
 8001e12:	f002 fb9b 	bl	800454c <log_0>

    for (int i = 0; i < 10; i++) {
 8001e16:	462c      	mov	r4, r5
 8001e18:	2c09      	cmp	r4, #9
 8001e1a:	dc2c      	bgt.n	8001e76 <zmk_ble_init+0xb2>
        bt_unpair(i, NULL);
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	b2e0      	uxtb	r0, r4
 8001e20:	f009 fbe0 	bl	800b5e4 <bt_unpair>
    for (int i = 0; i < 10; i++) {
 8001e24:	3401      	adds	r4, #1
 8001e26:	e7f7      	b.n	8001e18 <zmk_ble_init+0x54>
 8001e28:	4605      	mov	r5, r0
        LOG_ERR("BLUETOOTH FAILED (%d)", err);
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	2301      	movs	r3, #1
 8001e30:	f363 0202 	bfi	r2, r3, #0, #3
 8001e34:	f36f 02c5 	bfc	r2, #3, #3
 8001e38:	4b2a      	ldr	r3, [pc, #168]	; (8001ee4 <zmk_ble_init+0x120>)
 8001e3a:	492b      	ldr	r1, [pc, #172]	; (8001ee8 <zmk_ble_init+0x124>)
 8001e3c:	1a5b      	subs	r3, r3, r1
 8001e3e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8001e42:	f363 128f 	bfi	r2, r3, #6, #10
 8001e46:	4601      	mov	r1, r0
 8001e48:	4829      	ldr	r0, [pc, #164]	; (8001ef0 <zmk_ble_init+0x12c>)
 8001e4a:	f002 fa0f 	bl	800426c <log_1>
        return err;
 8001e4e:	e02a      	b.n	8001ea6 <zmk_ble_init+0xe2>
        LOG_ERR("Failed to setup the profile settings handler (err %d)", err);
 8001e50:	f04f 0200 	mov.w	r2, #0
 8001e54:	2301      	movs	r3, #1
 8001e56:	f363 0202 	bfi	r2, r3, #0, #3
 8001e5a:	f36f 02c5 	bfc	r2, #3, #3
 8001e5e:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <zmk_ble_init+0x120>)
 8001e60:	4921      	ldr	r1, [pc, #132]	; (8001ee8 <zmk_ble_init+0x124>)
 8001e62:	1a5b      	subs	r3, r3, r1
 8001e64:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8001e68:	f363 128f 	bfi	r2, r3, #6, #10
 8001e6c:	4601      	mov	r1, r0
 8001e6e:	4821      	ldr	r0, [pc, #132]	; (8001ef4 <zmk_ble_init+0x130>)
 8001e70:	f002 f9fc 	bl	800426c <log_1>
        return err;
 8001e74:	e017      	b.n	8001ea6 <zmk_ble_init+0xe2>
    }

    for (int i = 0; i < PROFILE_COUNT; i++) {
 8001e76:	462c      	mov	r4, r5
 8001e78:	e00a      	b.n	8001e90 <zmk_ble_init+0xcc>
        char setting_name[15];
        sprintf(setting_name, "ble/profiles/%d", i);
 8001e7a:	4622      	mov	r2, r4
 8001e7c:	491e      	ldr	r1, [pc, #120]	; (8001ef8 <zmk_ble_init+0x134>)
 8001e7e:	4668      	mov	r0, sp
 8001e80:	f007 fc7a 	bl	8009778 <sprintf>

        err = settings_delete(setting_name);
 8001e84:	4668      	mov	r0, sp
 8001e86:	f015 f83a 	bl	8016efe <settings_delete>
        if (err) {
 8001e8a:	4601      	mov	r1, r0
 8001e8c:	b970      	cbnz	r0, 8001eac <zmk_ble_init+0xe8>
    for (int i = 0; i < PROFILE_COUNT; i++) {
 8001e8e:	3401      	adds	r4, #1
 8001e90:	2c00      	cmp	r4, #0
 8001e92:	ddf2      	ble.n	8001e7a <zmk_ble_init+0xb6>
            LOG_ERR("Failed to delete setting: %d", err);
        }
    }
#endif

    bt_conn_cb_register(&conn_callbacks);
 8001e94:	4819      	ldr	r0, [pc, #100]	; (8001efc <zmk_ble_init+0x138>)
 8001e96:	f00b fa49 	bl	800d32c <bt_conn_cb_register>
    bt_conn_auth_cb_register(&zmk_ble_auth_cb_display);
 8001e9a:	4819      	ldr	r0, [pc, #100]	; (8001f00 <zmk_ble_init+0x13c>)
 8001e9c:	f00b ff0c 	bl	800dcb8 <bt_conn_auth_cb_register>

    zmk_ble_ready(0);
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f7ff ff59 	bl	8001d58 <zmk_ble_ready>

    return 0;
}
 8001ea6:	4628      	mov	r0, r5
 8001ea8:	b004      	add	sp, #16
 8001eaa:	bd70      	pop	{r4, r5, r6, pc}
            LOG_ERR("Failed to delete setting: %d", err);
 8001eac:	2301      	movs	r3, #1
 8001eae:	f363 0602 	bfi	r6, r3, #0, #3
 8001eb2:	f36f 06c5 	bfc	r6, #3, #3
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <zmk_ble_init+0x120>)
 8001eb8:	4a0b      	ldr	r2, [pc, #44]	; (8001ee8 <zmk_ble_init+0x124>)
 8001eba:	1a9b      	subs	r3, r3, r2
 8001ebc:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8001ec0:	f363 168f 	bfi	r6, r3, #6, #10
 8001ec4:	4632      	mov	r2, r6
 8001ec6:	480f      	ldr	r0, [pc, #60]	; (8001f04 <zmk_ble_init+0x140>)
 8001ec8:	f002 f9d0 	bl	800426c <log_1>
 8001ecc:	e7df      	b.n	8001e8e <zmk_ble_init+0xca>
 8001ece:	bf00      	nop
 8001ed0:	20000180 	.word	0x20000180
 8001ed4:	08000c79 	.word	0x08000c79
 8001ed8:	20000a70 	.word	0x20000a70
 8001edc:	08021374 	.word	0x08021374
 8001ee0:	0801e174 	.word	0x0801e174
 8001ee4:	0801d7a0 	.word	0x0801d7a0
 8001ee8:	0801d6d0 	.word	0x0801d6d0
 8001eec:	0801e178 	.word	0x0801e178
 8001ef0:	0801e124 	.word	0x0801e124
 8001ef4:	0801e13c 	.word	0x0801e13c
 8001ef8:	0801df20 	.word	0x0801df20
 8001efc:	20000160 	.word	0x20000160
 8001f00:	200001b0 	.word	0x200001b0
 8001f04:	0801e1b8 	.word	0x0801e1b8

08001f08 <zmk_battery_update>:
#include <zmk/event_manager.h>
#include <zmk/events/battery_state_changed.h>

const struct device *battery;

static int zmk_battery_update(const struct device *battery) {
 8001f08:	b530      	push	{r4, r5, lr}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	4604      	mov	r4, r0
				       enum sensor_channel type);

static inline int z_impl_sensor_sample_fetch_chan(const struct device *dev,
						  enum sensor_channel type)
{
	const struct sensor_driver_api *api =
 8001f0e:	6883      	ldr	r3, [r0, #8]
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, type);
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	212b      	movs	r1, #43	; 0x2b
 8001f14:	4798      	blx	r3
    struct sensor_value state_of_charge;

    int rc = sensor_sample_fetch_chan(battery, SENSOR_CHAN_GAUGE_STATE_OF_CHARGE);

    if (rc != 0) {
 8001f16:	bb58      	cbnz	r0, 8001f70 <zmk_battery_update+0x68>

static inline int z_impl_sensor_channel_get(const struct device *dev,
					    enum sensor_channel chan,
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
 8001f18:	68a3      	ldr	r3, [r4, #8]
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	466a      	mov	r2, sp
 8001f1e:	212b      	movs	r1, #43	; 0x2b
 8001f20:	4620      	mov	r0, r4
 8001f22:	4798      	blx	r3
        return rc;
    }

    rc = sensor_channel_get(battery, SENSOR_CHAN_GAUGE_STATE_OF_CHARGE, &state_of_charge);

    if (rc != 0) {
 8001f24:	4605      	mov	r5, r0
 8001f26:	2800      	cmp	r0, #0
 8001f28:	d137      	bne.n	8001f9a <zmk_battery_update+0x92>
        LOG_DBG("Failed to get battery state of charge: %d", rc);
        return rc;
    }

    LOG_DBG("Setting BAS GATT battery level to %d.", state_of_charge.val1);
 8001f2a:	f04f 0300 	mov.w	r3, #0
 8001f2e:	2204      	movs	r2, #4
 8001f30:	f362 0302 	bfi	r3, r2, #0, #3
 8001f34:	f36f 03c5 	bfc	r3, #3, #3
 8001f38:	4a2b      	ldr	r2, [pc, #172]	; (8001fe8 <zmk_battery_update+0xe0>)
 8001f3a:	492c      	ldr	r1, [pc, #176]	; (8001fec <zmk_battery_update+0xe4>)
 8001f3c:	1a52      	subs	r2, r2, r1
 8001f3e:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8001f42:	f362 138f 	bfi	r3, r2, #6, #10
 8001f46:	9a00      	ldr	r2, [sp, #0]
 8001f48:	4929      	ldr	r1, [pc, #164]	; (8001ff0 <zmk_battery_update+0xe8>)
 8001f4a:	482a      	ldr	r0, [pc, #168]	; (8001ff4 <zmk_battery_update+0xec>)
 8001f4c:	f002 fa0e 	bl	800436c <log_2>

    rc = bt_bas_set_battery_level(state_of_charge.val1);
 8001f50:	f89d 0000 	ldrb.w	r0, [sp]
 8001f54:	f002 fe4c 	bl	8004bf0 <bt_bas_set_battery_level>

    if (rc != 0) {
 8001f58:	4605      	mov	r5, r0
 8001f5a:	bb90      	cbnz	r0, 8001fc2 <zmk_battery_update+0xba>
        LOG_WRN("Failed to set BAS GATT battery level (err %d)", rc);
        return rc;
    }

    return ZMK_EVENT_RAISE(new_zmk_battery_state_changed(
 8001f5c:	f89d 0000 	ldrb.w	r0, [sp]
 8001f60:	f7fe fe22 	bl	8000ba8 <new_zmk_battery_state_changed>
 8001f64:	f013 f836 	bl	8014fd4 <zmk_event_manager_raise>
 8001f68:	4605      	mov	r5, r0
        (struct zmk_battery_state_changed){.state_of_charge = state_of_charge.val1}));
}
 8001f6a:	4628      	mov	r0, r5
 8001f6c:	b003      	add	sp, #12
 8001f6e:	bd30      	pop	{r4, r5, pc}
 8001f70:	4605      	mov	r5, r0
        LOG_DBG("Failed to fetch battery values: %d", rc);
 8001f72:	f04f 0300 	mov.w	r3, #0
 8001f76:	2204      	movs	r2, #4
 8001f78:	f362 0302 	bfi	r3, r2, #0, #3
 8001f7c:	f36f 03c5 	bfc	r3, #3, #3
 8001f80:	4a19      	ldr	r2, [pc, #100]	; (8001fe8 <zmk_battery_update+0xe0>)
 8001f82:	491a      	ldr	r1, [pc, #104]	; (8001fec <zmk_battery_update+0xe4>)
 8001f84:	1a52      	subs	r2, r2, r1
 8001f86:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8001f8a:	f362 138f 	bfi	r3, r2, #6, #10
 8001f8e:	4602      	mov	r2, r0
 8001f90:	4917      	ldr	r1, [pc, #92]	; (8001ff0 <zmk_battery_update+0xe8>)
 8001f92:	4819      	ldr	r0, [pc, #100]	; (8001ff8 <zmk_battery_update+0xf0>)
 8001f94:	f002 f9ea 	bl	800436c <log_2>
        return rc;
 8001f98:	e7e7      	b.n	8001f6a <zmk_battery_update+0x62>
        LOG_DBG("Failed to get battery state of charge: %d", rc);
 8001f9a:	f04f 0300 	mov.w	r3, #0
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	f362 0302 	bfi	r3, r2, #0, #3
 8001fa4:	f36f 03c5 	bfc	r3, #3, #3
 8001fa8:	4a0f      	ldr	r2, [pc, #60]	; (8001fe8 <zmk_battery_update+0xe0>)
 8001faa:	4910      	ldr	r1, [pc, #64]	; (8001fec <zmk_battery_update+0xe4>)
 8001fac:	1a52      	subs	r2, r2, r1
 8001fae:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8001fb2:	f362 138f 	bfi	r3, r2, #6, #10
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	490d      	ldr	r1, [pc, #52]	; (8001ff0 <zmk_battery_update+0xe8>)
 8001fba:	4810      	ldr	r0, [pc, #64]	; (8001ffc <zmk_battery_update+0xf4>)
 8001fbc:	f002 f9d6 	bl	800436c <log_2>
        return rc;
 8001fc0:	e7d3      	b.n	8001f6a <zmk_battery_update+0x62>
        LOG_WRN("Failed to set BAS GATT battery level (err %d)", rc);
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	f363 0202 	bfi	r2, r3, #0, #3
 8001fcc:	f36f 02c5 	bfc	r2, #3, #3
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <zmk_battery_update+0xe0>)
 8001fd2:	4906      	ldr	r1, [pc, #24]	; (8001fec <zmk_battery_update+0xe4>)
 8001fd4:	1a5b      	subs	r3, r3, r1
 8001fd6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8001fda:	f363 128f 	bfi	r2, r3, #6, #10
 8001fde:	4601      	mov	r1, r0
 8001fe0:	4807      	ldr	r0, [pc, #28]	; (8002000 <zmk_battery_update+0xf8>)
 8001fe2:	f002 f943 	bl	800426c <log_1>
        return rc;
 8001fe6:	e7c0      	b.n	8001f6a <zmk_battery_update+0x62>
 8001fe8:	0801d7a0 	.word	0x0801d7a0
 8001fec:	0801d6d0 	.word	0x0801d6d0
 8001ff0:	0801e40c 	.word	0x0801e40c
 8001ff4:	0801e350 	.word	0x0801e350
 8001ff8:	0801e2f8 	.word	0x0801e2f8
 8001ffc:	0801e320 	.word	0x0801e320
 8002000:	0801e37c 	.word	0x0801e37c

08002004 <zmk_battery_work>:

static void zmk_battery_work(struct k_work *work) {
 8002004:	b508      	push	{r3, lr}
    int rc = zmk_battery_update(battery);
 8002006:	4b0d      	ldr	r3, [pc, #52]	; (800203c <zmk_battery_work+0x38>)
 8002008:	6818      	ldr	r0, [r3, #0]
 800200a:	f7ff ff7d 	bl	8001f08 <zmk_battery_update>

    if (rc != 0) {
 800200e:	b900      	cbnz	r0, 8002012 <zmk_battery_work+0xe>
        LOG_DBG("Failed to update battery value: %d.", rc);
    }
}
 8002010:	bd08      	pop	{r3, pc}
 8002012:	4602      	mov	r2, r0
        LOG_DBG("Failed to update battery value: %d.", rc);
 8002014:	f04f 0300 	mov.w	r3, #0
 8002018:	2104      	movs	r1, #4
 800201a:	f361 0302 	bfi	r3, r1, #0, #3
 800201e:	f36f 03c5 	bfc	r3, #3, #3
 8002022:	4907      	ldr	r1, [pc, #28]	; (8002040 <zmk_battery_work+0x3c>)
 8002024:	4807      	ldr	r0, [pc, #28]	; (8002044 <zmk_battery_work+0x40>)
 8002026:	1a09      	subs	r1, r1, r0
 8002028:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 800202c:	f361 138f 	bfi	r3, r1, #6, #10
 8002030:	4905      	ldr	r1, [pc, #20]	; (8002048 <zmk_battery_work+0x44>)
 8002032:	4806      	ldr	r0, [pc, #24]	; (800204c <zmk_battery_work+0x48>)
 8002034:	f002 f99a 	bl	800436c <log_2>
}
 8002038:	e7ea      	b.n	8002010 <zmk_battery_work+0xc>
 800203a:	bf00      	nop
 800203c:	200014ec 	.word	0x200014ec
 8002040:	0801d7a0 	.word	0x0801d7a0
 8002044:	0801d6d0 	.word	0x0801d6d0
 8002048:	0801e420 	.word	0x0801e420
 800204c:	0801e3ac 	.word	0x0801e3ac

08002050 <zmk_battery_timer>:

K_WORK_DEFINE(battery_work, zmk_battery_work);

static void zmk_battery_timer(struct k_timer *timer) { k_work_submit(&battery_work); }
 8002050:	b508      	push	{r3, lr}
 8002052:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <zmk_battery_timer+0x30>)
 8002054:	f3bf 8f5b 	dmb	ish
 8002058:	e853 2f00 	ldrex	r2, [r3]
 800205c:	f042 0101 	orr.w	r1, r2, #1
 8002060:	e843 1000 	strex	r0, r1, [r3]
 8002064:	2800      	cmp	r0, #0
 8002066:	d1f7      	bne.n	8002058 <zmk_battery_timer+0x8>
 8002068:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 800206c:	f012 0f01 	tst.w	r2, #1
 8002070:	d000      	beq.n	8002074 <zmk_battery_timer+0x24>
 8002072:	bd08      	pop	{r3, pc}
		k_queue_append(&work_q->queue, work);
 8002074:	f1a3 0108 	sub.w	r1, r3, #8
 8002078:	4802      	ldr	r0, [pc, #8]	; (8002084 <zmk_battery_timer+0x34>)
 800207a:	f01a fcf7 	bl	801ca6c <k_queue_append>
 800207e:	e7f8      	b.n	8002072 <zmk_battery_timer+0x22>
 8002080:	200001e0 	.word	0x200001e0
 8002084:	20001408 	.word	0x20001408

08002088 <zmk_battery_init>:

K_TIMER_DEFINE(battery_timer, zmk_battery_timer, NULL);

static int zmk_battery_init(const struct device *_arg) {
 8002088:	b510      	push	{r4, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	481e      	ldr	r0, [pc, #120]	; (8002108 <zmk_battery_init+0x80>)
 800208e:	f011 fa65 	bl	801355c <z_impl_device_get_binding>
    battery = device_get_binding("BATTERY");
 8002092:	4b1e      	ldr	r3, [pc, #120]	; (800210c <zmk_battery_init+0x84>)
 8002094:	6018      	str	r0, [r3, #0]

    if (battery == NULL) {
 8002096:	b168      	cbz	r0, 80020b4 <zmk_battery_init+0x2c>
        LOG_DBG("No battery device labelled BATTERY found.");
        return -ENODEV;
    }

    int rc = zmk_battery_update(battery);
 8002098:	f7ff ff36 	bl	8001f08 <zmk_battery_update>

    if (rc != 0) {
 800209c:	4604      	mov	r4, r0
 800209e:	b9f0      	cbnz	r0, 80020de <zmk_battery_init+0x56>
        LOG_DBG("Failed to update battery value: %d.", rc);
        return rc;
    }

    k_timer_start(&battery_timer, K_MINUTES(1), K_MINUTES(1));
 80020a0:	4a1b      	ldr	r2, [pc, #108]	; (8002110 <zmk_battery_init+0x88>)
 80020a2:	2300      	movs	r3, #0
	z_impl_k_timer_start(timer, duration, period);
 80020a4:	e9cd 2300 	strd	r2, r3, [sp]
 80020a8:	481a      	ldr	r0, [pc, #104]	; (8002114 <zmk_battery_init+0x8c>)
 80020aa:	f012 fcb1 	bl	8014a10 <z_impl_k_timer_start>

    return 0;
}
 80020ae:	4620      	mov	r0, r4
 80020b0:	b002      	add	sp, #8
 80020b2:	bd10      	pop	{r4, pc}
        LOG_DBG("No battery device labelled BATTERY found.");
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	2304      	movs	r3, #4
 80020ba:	f363 0202 	bfi	r2, r3, #0, #3
 80020be:	f36f 02c5 	bfc	r2, #3, #3
 80020c2:	4b15      	ldr	r3, [pc, #84]	; (8002118 <zmk_battery_init+0x90>)
 80020c4:	4915      	ldr	r1, [pc, #84]	; (800211c <zmk_battery_init+0x94>)
 80020c6:	1a5b      	subs	r3, r3, r1
 80020c8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80020cc:	f363 128f 	bfi	r2, r3, #6, #10
 80020d0:	4913      	ldr	r1, [pc, #76]	; (8002120 <zmk_battery_init+0x98>)
 80020d2:	4814      	ldr	r0, [pc, #80]	; (8002124 <zmk_battery_init+0x9c>)
 80020d4:	f002 f8ca 	bl	800426c <log_1>
        return -ENODEV;
 80020d8:	f06f 0412 	mvn.w	r4, #18
 80020dc:	e7e7      	b.n	80020ae <zmk_battery_init+0x26>
        LOG_DBG("Failed to update battery value: %d.", rc);
 80020de:	f04f 0300 	mov.w	r3, #0
 80020e2:	2204      	movs	r2, #4
 80020e4:	f362 0302 	bfi	r3, r2, #0, #3
 80020e8:	f36f 03c5 	bfc	r3, #3, #3
 80020ec:	4a0a      	ldr	r2, [pc, #40]	; (8002118 <zmk_battery_init+0x90>)
 80020ee:	490b      	ldr	r1, [pc, #44]	; (800211c <zmk_battery_init+0x94>)
 80020f0:	1a52      	subs	r2, r2, r1
 80020f2:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 80020f6:	f362 138f 	bfi	r3, r2, #6, #10
 80020fa:	4602      	mov	r2, r0
 80020fc:	4908      	ldr	r1, [pc, #32]	; (8002120 <zmk_battery_init+0x98>)
 80020fe:	480a      	ldr	r0, [pc, #40]	; (8002128 <zmk_battery_init+0xa0>)
 8002100:	f002 f934 	bl	800436c <log_2>
        return rc;
 8002104:	e7d3      	b.n	80020ae <zmk_battery_init+0x26>
 8002106:	bf00      	nop
 8002108:	0801e3d4 	.word	0x0801e3d4
 800210c:	200014ec 	.word	0x200014ec
 8002110:	000927c0 	.word	0x000927c0
 8002114:	200006b8 	.word	0x200006b8
 8002118:	0801d7a0 	.word	0x0801d7a0
 800211c:	0801d6d0 	.word	0x0801d6d0
 8002120:	0801e434 	.word	0x0801e434
 8002124:	0801e3dc 	.word	0x0801e3dc
 8002128:	0801e3ac 	.word	0x0801e3ac

0800212c <split_listener>:
#include <zmk/event_manager.h>
#include <zmk/events/position_state_changed.h>
#include <zmk/hid.h>
#include <zmk/endpoints.h>

int split_listener(const zmk_event_t *eh) {
 800212c:	b510      	push	{r4, lr}
 800212e:	4604      	mov	r4, r0
    LOG_DBG("");
 8002130:	f04f 0200 	mov.w	r2, #0
 8002134:	2304      	movs	r3, #4
 8002136:	f363 0202 	bfi	r2, r3, #0, #3
 800213a:	f36f 02c5 	bfc	r2, #3, #3
 800213e:	4b0d      	ldr	r3, [pc, #52]	; (8002174 <split_listener+0x48>)
 8002140:	490d      	ldr	r1, [pc, #52]	; (8002178 <split_listener+0x4c>)
 8002142:	1a5b      	subs	r3, r3, r1
 8002144:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8002148:	f363 128f 	bfi	r2, r3, #6, #10
 800214c:	490b      	ldr	r1, [pc, #44]	; (800217c <split_listener+0x50>)
 800214e:	480c      	ldr	r0, [pc, #48]	; (8002180 <split_listener+0x54>)
 8002150:	f002 f88c 	bl	800426c <log_1>
    const struct zmk_position_state_changed *ev = as_zmk_position_state_changed(eh);
 8002154:	4620      	mov	r0, r4
 8002156:	f7fe fcfd 	bl	8000b54 <as_zmk_position_state_changed>
    if (ev != NULL) {
 800215a:	b148      	cbz	r0, 8002170 <split_listener+0x44>
        if (ev->state) {
 800215c:	7902      	ldrb	r2, [r0, #4]
 800215e:	b11a      	cbz	r2, 8002168 <split_listener+0x3c>
            return zmk_split_bt_position_pressed(ev->position);
 8002160:	7800      	ldrb	r0, [r0, #0]
 8002162:	f000 f8ed 	bl	8002340 <zmk_split_bt_position_pressed>
        } else {
            return zmk_split_bt_position_released(ev->position);
        }
    }
    return ZMK_EV_EVENT_BUBBLE;
}
 8002166:	bd10      	pop	{r4, pc}
            return zmk_split_bt_position_released(ev->position);
 8002168:	7800      	ldrb	r0, [r0, #0]
 800216a:	f000 f8f9 	bl	8002360 <zmk_split_bt_position_released>
 800216e:	e7fa      	b.n	8002166 <split_listener+0x3a>
    return ZMK_EV_EVENT_BUBBLE;
 8002170:	2000      	movs	r0, #0
 8002172:	e7f8      	b.n	8002166 <split_listener+0x3a>
 8002174:	0801d7a0 	.word	0x0801d7a0
 8002178:	0801d6d0 	.word	0x0801d6d0
 800217c:	0801e448 	.word	0x0801e448
 8002180:	0801e000 	.word	0x0801e000

08002184 <split_svc_pos_state>:

static uint8_t num_of_positions = ZMK_KEYMAP_LEN;
static uint8_t position_state[POS_STATE_LEN];

static ssize_t split_svc_pos_state(struct bt_conn *conn, const struct bt_gatt_attr *attrs,
                                   void *buf, uint16_t len, uint16_t offset) {
 8002184:	b510      	push	{r4, lr}
 8002186:	b084      	sub	sp, #16
    return bt_gatt_attr_read(conn, attrs, buf, len, offset, &position_state,
 8002188:	2410      	movs	r4, #16
 800218a:	9402      	str	r4, [sp, #8]
 800218c:	4c04      	ldr	r4, [pc, #16]	; (80021a0 <split_svc_pos_state+0x1c>)
 800218e:	9401      	str	r4, [sp, #4]
 8002190:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8002194:	9400      	str	r4, [sp, #0]
 8002196:	f017 fec9 	bl	8019f2c <bt_gatt_attr_read>
                             sizeof(position_state));
}
 800219a:	b004      	add	sp, #16
 800219c:	bd10      	pop	{r4, pc}
 800219e:	bf00      	nop
 80021a0:	200014f0 	.word	0x200014f0

080021a4 <split_svc_pos_state_ccc>:
static ssize_t split_svc_num_of_positions(struct bt_conn *conn, const struct bt_gatt_attr *attrs,
                                          void *buf, uint16_t len, uint16_t offset) {
    return bt_gatt_attr_read(conn, attrs, buf, len, offset, attrs->user_data, sizeof(uint8_t));
}

static void split_svc_pos_state_ccc(const struct bt_gatt_attr *attr, uint16_t value) {
 80021a4:	b508      	push	{r3, lr}
 80021a6:	460a      	mov	r2, r1
    LOG_DBG("value %d", value);
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	2104      	movs	r1, #4
 80021ae:	f361 0302 	bfi	r3, r1, #0, #3
 80021b2:	f36f 03c5 	bfc	r3, #3, #3
 80021b6:	4806      	ldr	r0, [pc, #24]	; (80021d0 <split_svc_pos_state_ccc+0x2c>)
 80021b8:	4906      	ldr	r1, [pc, #24]	; (80021d4 <split_svc_pos_state_ccc+0x30>)
 80021ba:	1a40      	subs	r0, r0, r1
 80021bc:	f3c0 00c9 	ubfx	r0, r0, #3, #10
 80021c0:	f360 138f 	bfi	r3, r0, #6, #10
 80021c4:	4904      	ldr	r1, [pc, #16]	; (80021d8 <split_svc_pos_state_ccc+0x34>)
 80021c6:	4805      	ldr	r0, [pc, #20]	; (80021dc <split_svc_pos_state_ccc+0x38>)
 80021c8:	f002 f8d0 	bl	800436c <log_2>
}
 80021cc:	bd08      	pop	{r3, pc}
 80021ce:	bf00      	nop
 80021d0:	0801d7a0 	.word	0x0801d7a0
 80021d4:	0801d6d0 	.word	0x0801d6d0
 80021d8:	0801e4fc 	.word	0x0801e4fc
 80021dc:	0801e45c 	.word	0x0801e45c

080021e0 <send_position_state_callback>:
struct k_work_q service_work_q;

K_MSGQ_DEFINE(position_state_msgq, sizeof(char[POS_STATE_LEN]),
              CONFIG_ZMK_SPLIT_BLE_PERIPHERAL_POSITION_QUEUE_SIZE, 4);

void send_position_state_callback(struct k_work *work) {
 80021e0:	b510      	push	{r4, lr}
 80021e2:	b08a      	sub	sp, #40	; 0x28
	return z_impl_k_msgq_get(msgq, data, timeout);
 80021e4:	2200      	movs	r2, #0
 80021e6:	2300      	movs	r3, #0
 80021e8:	a906      	add	r1, sp, #24
 80021ea:	4815      	ldr	r0, [pc, #84]	; (8002240 <send_position_state_callback+0x60>)
 80021ec:	f011 fc82 	bl	8013af4 <z_impl_k_msgq_get>
    uint8_t state[POS_STATE_LEN];

    while (k_msgq_get(&position_state_msgq, &state, K_NO_WAIT) == 0) {
 80021f0:	bb20      	cbnz	r0, 800223c <send_position_state_callback+0x5c>
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
 80021f2:	2218      	movs	r2, #24
 80021f4:	2100      	movs	r1, #0
 80021f6:	4668      	mov	r0, sp
 80021f8:	f015 fe65 	bl	8017ec6 <memset>

	params.attr = attr;
 80021fc:	4b11      	ldr	r3, [pc, #68]	; (8002244 <send_position_state_callback+0x64>)
 80021fe:	9301      	str	r3, [sp, #4]
	params.data = data;
 8002200:	ab06      	add	r3, sp, #24
 8002202:	9302      	str	r3, [sp, #8]
	params.len = len;
 8002204:	2310      	movs	r3, #16
 8002206:	f8ad 300c 	strh.w	r3, [sp, #12]

	return bt_gatt_notify_cb(conn, &params);
 800220a:	4669      	mov	r1, sp
 800220c:	2000      	movs	r0, #0
 800220e:	f00e f8ed 	bl	80103ec <bt_gatt_notify_cb>
        int err = bt_gatt_notify(NULL, &split_svc.attrs[1], &state, sizeof(state));
        if (err) {
 8002212:	4602      	mov	r2, r0
 8002214:	2800      	cmp	r0, #0
 8002216:	d0e5      	beq.n	80021e4 <send_position_state_callback+0x4>
            LOG_DBG("Error notifying %d", err);
 8002218:	2304      	movs	r3, #4
 800221a:	f363 0402 	bfi	r4, r3, #0, #3
 800221e:	f36f 04c5 	bfc	r4, #3, #3
 8002222:	4b09      	ldr	r3, [pc, #36]	; (8002248 <send_position_state_callback+0x68>)
 8002224:	4909      	ldr	r1, [pc, #36]	; (800224c <send_position_state_callback+0x6c>)
 8002226:	1a5b      	subs	r3, r3, r1
 8002228:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800222c:	f363 148f 	bfi	r4, r3, #6, #10
 8002230:	4623      	mov	r3, r4
 8002232:	4907      	ldr	r1, [pc, #28]	; (8002250 <send_position_state_callback+0x70>)
 8002234:	4807      	ldr	r0, [pc, #28]	; (8002254 <send_position_state_callback+0x74>)
 8002236:	f002 f899 	bl	800436c <log_2>
 800223a:	e7d3      	b.n	80021e4 <send_position_state_callback+0x4>
        }
    }
};
 800223c:	b00a      	add	sp, #40	; 0x28
 800223e:	bd10      	pop	{r4, pc}
 8002240:	20000780 	.word	0x20000780
 8002244:	0801e548 	.word	0x0801e548
 8002248:	0801d7a0 	.word	0x0801d7a0
 800224c:	0801d6d0 	.word	0x0801d6d0
 8002250:	0801e514 	.word	0x0801e514
 8002254:	0801e46c 	.word	0x0801e46c

08002258 <service_init>:
int zmk_split_bt_position_released(uint8_t position) {
    WRITE_BIT(position_state[position / 8], position % 8, false);
    return send_position_state();
}

int service_init(const struct device *_arg) {
 8002258:	b508      	push	{r3, lr}
    k_work_q_start(&service_work_q, service_q_stack, K_THREAD_STACK_SIZEOF(service_q_stack),
 800225a:	2305      	movs	r3, #5
 800225c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002260:	4902      	ldr	r1, [pc, #8]	; (800226c <service_init+0x14>)
 8002262:	4803      	ldr	r0, [pc, #12]	; (8002270 <service_init+0x18>)
 8002264:	f012 f9d2 	bl	801460c <k_work_q_start>
                   CONFIG_ZMK_SPLIT_BLE_PERIPHERAL_PRIORITY);

    return 0;
}
 8002268:	2000      	movs	r0, #0
 800226a:	bd08      	pop	{r3, pc}
 800226c:	200036d0 	.word	0x200036d0
 8002270:	20000aa0 	.word	0x20000aa0

08002274 <send_position_state>:
int send_position_state() {
 8002274:	b510      	push	{r4, lr}
 8002276:	b084      	sub	sp, #16
	return z_impl_k_msgq_put(msgq, data, timeout);
 8002278:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800227c:	2300      	movs	r3, #0
 800227e:	4928      	ldr	r1, [pc, #160]	; (8002320 <send_position_state+0xac>)
 8002280:	4828      	ldr	r0, [pc, #160]	; (8002324 <send_position_state+0xb0>)
 8002282:	f011 fbdf 	bl	8013a44 <z_impl_k_msgq_put>
    if (err) {
 8002286:	4604      	mov	r4, r0
 8002288:	b380      	cbz	r0, 80022ec <send_position_state+0x78>
        switch (err) {
 800228a:	f110 0f0b 	cmn.w	r0, #11
 800228e:	d012      	beq.n	80022b6 <send_position_state+0x42>
            LOG_WRN("Failed to queue position state to send (%d)", err);
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	2302      	movs	r3, #2
 8002296:	f363 0202 	bfi	r2, r3, #0, #3
 800229a:	f36f 02c5 	bfc	r2, #3, #3
 800229e:	4b22      	ldr	r3, [pc, #136]	; (8002328 <send_position_state+0xb4>)
 80022a0:	4922      	ldr	r1, [pc, #136]	; (800232c <send_position_state+0xb8>)
 80022a2:	1a5b      	subs	r3, r3, r1
 80022a4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80022a8:	f363 128f 	bfi	r2, r3, #6, #10
 80022ac:	4601      	mov	r1, r0
 80022ae:	4820      	ldr	r0, [pc, #128]	; (8002330 <send_position_state+0xbc>)
 80022b0:	f001 ffdc 	bl	800426c <log_1>
            return err;
 80022b4:	e02a      	b.n	800230c <send_position_state+0x98>
            LOG_WRN("Position state message queue full, popping first message and queueing again");
 80022b6:	f04f 0100 	mov.w	r1, #0
 80022ba:	2302      	movs	r3, #2
 80022bc:	f363 0102 	bfi	r1, r3, #0, #3
 80022c0:	f36f 01c5 	bfc	r1, #3, #3
 80022c4:	4b18      	ldr	r3, [pc, #96]	; (8002328 <send_position_state+0xb4>)
 80022c6:	4a19      	ldr	r2, [pc, #100]	; (800232c <send_position_state+0xb8>)
 80022c8:	1a9b      	subs	r3, r3, r2
 80022ca:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80022ce:	f363 118f 	bfi	r1, r3, #6, #10
 80022d2:	4818      	ldr	r0, [pc, #96]	; (8002334 <send_position_state+0xc0>)
 80022d4:	f002 f93a 	bl	800454c <log_0>
	return z_impl_k_msgq_get(msgq, data, timeout);
 80022d8:	2200      	movs	r2, #0
 80022da:	2300      	movs	r3, #0
 80022dc:	4669      	mov	r1, sp
 80022de:	4811      	ldr	r0, [pc, #68]	; (8002324 <send_position_state+0xb0>)
 80022e0:	f011 fc08 	bl	8013af4 <z_impl_k_msgq_get>
            return send_position_state();
 80022e4:	f7ff ffc6 	bl	8002274 <send_position_state>
 80022e8:	4604      	mov	r4, r0
 80022ea:	e00f      	b.n	800230c <send_position_state+0x98>
 80022ec:	4b12      	ldr	r3, [pc, #72]	; (8002338 <send_position_state+0xc4>)
 80022ee:	f3bf 8f5b 	dmb	ish
 80022f2:	e853 2f00 	ldrex	r2, [r3]
 80022f6:	f042 0101 	orr.w	r1, r2, #1
 80022fa:	e843 1000 	strex	r0, r1, [r3]
 80022fe:	2800      	cmp	r0, #0
 8002300:	d1f7      	bne.n	80022f2 <send_position_state+0x7e>
 8002302:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 8002306:	f012 0f01 	tst.w	r2, #1
 800230a:	d002      	beq.n	8002312 <send_position_state+0x9e>
}
 800230c:	4620      	mov	r0, r4
 800230e:	b004      	add	sp, #16
 8002310:	bd10      	pop	{r4, pc}
		k_queue_append(&work_q->queue, work);
 8002312:	f1a3 0108 	sub.w	r1, r3, #8
 8002316:	4809      	ldr	r0, [pc, #36]	; (800233c <send_position_state+0xc8>)
 8002318:	f01a fba8 	bl	801ca6c <k_queue_append>
}
 800231c:	e7f6      	b.n	800230c <send_position_state+0x98>
 800231e:	bf00      	nop
 8002320:	200014f0 	.word	0x200014f0
 8002324:	20000780 	.word	0x20000780
 8002328:	0801d7a0 	.word	0x0801d7a0
 800232c:	0801d6d0 	.word	0x0801d6d0
 8002330:	0801e4d0 	.word	0x0801e4d0
 8002334:	0801e484 	.word	0x0801e484
 8002338:	20000258 	.word	0x20000258
 800233c:	20000aa0 	.word	0x20000aa0

08002340 <zmk_split_bt_position_pressed>:
int zmk_split_bt_position_pressed(uint8_t position) {
 8002340:	b510      	push	{r4, lr}
    WRITE_BIT(position_state[position / 8], position % 8, true);
 8002342:	08c1      	lsrs	r1, r0, #3
 8002344:	4c05      	ldr	r4, [pc, #20]	; (800235c <zmk_split_bt_position_pressed+0x1c>)
 8002346:	5c63      	ldrb	r3, [r4, r1]
 8002348:	f000 0007 	and.w	r0, r0, #7
 800234c:	2201      	movs	r2, #1
 800234e:	fa02 f000 	lsl.w	r0, r2, r0
 8002352:	4318      	orrs	r0, r3
 8002354:	5460      	strb	r0, [r4, r1]
    return send_position_state();
 8002356:	f7ff ff8d 	bl	8002274 <send_position_state>
}
 800235a:	bd10      	pop	{r4, pc}
 800235c:	200014f0 	.word	0x200014f0

08002360 <zmk_split_bt_position_released>:
int zmk_split_bt_position_released(uint8_t position) {
 8002360:	b510      	push	{r4, lr}
    WRITE_BIT(position_state[position / 8], position % 8, false);
 8002362:	08c1      	lsrs	r1, r0, #3
 8002364:	4c06      	ldr	r4, [pc, #24]	; (8002380 <zmk_split_bt_position_released+0x20>)
 8002366:	5c63      	ldrb	r3, [r4, r1]
 8002368:	f000 0007 	and.w	r0, r0, #7
 800236c:	2201      	movs	r2, #1
 800236e:	fa02 f000 	lsl.w	r0, r2, r0
 8002372:	ea23 0000 	bic.w	r0, r3, r0
 8002376:	5460      	strb	r0, [r4, r1]
    return send_position_state();
 8002378:	f7ff ff7c 	bl	8002274 <send_position_state>
}
 800237c:	bd10      	pop	{r4, pc}
 800237e:	bf00      	nop
 8002380:	200014f0 	.word	0x200014f0

08002384 <in_ready_cb>:

static const struct device *hid_dev;

static K_SEM_DEFINE(hid_sem, 1, 1);

static void in_ready_cb(const struct device *dev) { k_sem_give(&hid_sem); }
 8002384:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
 8002386:	4802      	ldr	r0, [pc, #8]	; (8002390 <in_ready_cb+0xc>)
 8002388:	f012 f852 	bl	8014430 <z_impl_k_sem_give>
 800238c:	bd08      	pop	{r3, pc}
 800238e:	bf00      	nop
 8002390:	20000820 	.word	0x20000820

08002394 <zmk_usb_init>:
void usb_status_cb(enum usb_dc_status_code status, const uint8_t *params) {
    usb_status = status;
    raise_usb_status_changed_event();
};

static int zmk_usb_init(const struct device *_arg) {
 8002394:	b508      	push	{r3, lr}
 8002396:	481e      	ldr	r0, [pc, #120]	; (8002410 <zmk_usb_init+0x7c>)
 8002398:	f011 f8e0 	bl	801355c <z_impl_device_get_binding>
    int usb_enable_ret;

#ifdef CONFIG_ZMK_USB
    hid_dev = device_get_binding("HID_0");
 800239c:	4b1d      	ldr	r3, [pc, #116]	; (8002414 <zmk_usb_init+0x80>)
 800239e:	6018      	str	r0, [r3, #0]
    if (hid_dev == NULL) {
 80023a0:	b168      	cbz	r0, 80023be <zmk_usb_init+0x2a>
        LOG_ERR("Unable to locate HID device");
        return -EINVAL;
    }

    usb_hid_register_device(hid_dev, zmk_hid_report_desc, sizeof(zmk_hid_report_desc), &ops);
 80023a2:	4b1d      	ldr	r3, [pc, #116]	; (8002418 <zmk_usb_init+0x84>)
 80023a4:	224c      	movs	r2, #76	; 0x4c
 80023a6:	491d      	ldr	r1, [pc, #116]	; (800241c <zmk_usb_init+0x88>)
 80023a8:	f010 fafa 	bl	80129a0 <usb_hid_register_device>

    usb_hid_init(hid_dev);
 80023ac:	4b19      	ldr	r3, [pc, #100]	; (8002414 <zmk_usb_init+0x80>)
 80023ae:	6818      	ldr	r0, [r3, #0]
 80023b0:	f018 feb1 	bl	801b116 <usb_hid_init>

#endif /* CONFIG_ZMK_USB */

    usb_enable_ret = usb_enable(usb_status_cb);
 80023b4:	481a      	ldr	r0, [pc, #104]	; (8002420 <zmk_usb_init+0x8c>)
 80023b6:	f003 fbf3 	bl	8005ba0 <usb_enable>

    if (usb_enable_ret != 0) {
 80023ba:	b9a0      	cbnz	r0, 80023e6 <zmk_usb_init+0x52>
        LOG_ERR("Unable to enable USB");
        return -EINVAL;
    }

    return 0;
}
 80023bc:	bd08      	pop	{r3, pc}
        LOG_ERR("Unable to locate HID device");
 80023be:	f04f 0100 	mov.w	r1, #0
 80023c2:	2301      	movs	r3, #1
 80023c4:	f363 0102 	bfi	r1, r3, #0, #3
 80023c8:	f36f 01c5 	bfc	r1, #3, #3
 80023cc:	4b15      	ldr	r3, [pc, #84]	; (8002424 <zmk_usb_init+0x90>)
 80023ce:	4a16      	ldr	r2, [pc, #88]	; (8002428 <zmk_usb_init+0x94>)
 80023d0:	1a9b      	subs	r3, r3, r2
 80023d2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80023d6:	f363 118f 	bfi	r1, r3, #6, #10
 80023da:	4814      	ldr	r0, [pc, #80]	; (800242c <zmk_usb_init+0x98>)
 80023dc:	f002 f8b6 	bl	800454c <log_0>
        return -EINVAL;
 80023e0:	f06f 0015 	mvn.w	r0, #21
 80023e4:	e7ea      	b.n	80023bc <zmk_usb_init+0x28>
        LOG_ERR("Unable to enable USB");
 80023e6:	f04f 0100 	mov.w	r1, #0
 80023ea:	2301      	movs	r3, #1
 80023ec:	f363 0102 	bfi	r1, r3, #0, #3
 80023f0:	f36f 01c5 	bfc	r1, #3, #3
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <zmk_usb_init+0x90>)
 80023f6:	4a0c      	ldr	r2, [pc, #48]	; (8002428 <zmk_usb_init+0x94>)
 80023f8:	1a9b      	subs	r3, r3, r2
 80023fa:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80023fe:	f363 118f 	bfi	r1, r3, #6, #10
 8002402:	480b      	ldr	r0, [pc, #44]	; (8002430 <zmk_usb_init+0x9c>)
 8002404:	f002 f8a2 	bl	800454c <log_0>
        return -EINVAL;
 8002408:	f06f 0015 	mvn.w	r0, #21
 800240c:	e7d6      	b.n	80023bc <zmk_usb_init+0x28>
 800240e:	bf00      	nop
 8002410:	0801e598 	.word	0x0801e598
 8002414:	20001500 	.word	0x20001500
 8002418:	0801e5d4 	.word	0x0801e5d4
 800241c:	0801e5f8 	.word	0x0801e5f8
 8002420:	080024c1 	.word	0x080024c1
 8002424:	0801d7a0 	.word	0x0801d7a0
 8002428:	0801d6d0 	.word	0x0801d6d0
 800242c:	0801e5a0 	.word	0x0801e5a0
 8002430:	0801e5bc 	.word	0x0801e5bc

08002434 <zmk_usb_hid_send_report>:
int zmk_usb_hid_send_report(const uint8_t *report, size_t len) {
 8002434:	b538      	push	{r3, r4, r5, lr}
    switch (usb_status) {
 8002436:	4b14      	ldr	r3, [pc, #80]	; (8002488 <zmk_usb_hid_send_report+0x54>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b0b      	cmp	r3, #11
 800243c:	d80b      	bhi.n	8002456 <zmk_usb_hid_send_report+0x22>
 800243e:	e8df f003 	tbb	[pc, r3]
 8002442:	1f1f      	.short	0x1f1f
 8002444:	061f0a0a 	.word	0x061f0a0a
 8002448:	0a0a0a0a 	.word	0x0a0a0a0a
 800244c:	1f0a      	.short	0x1f0a
        return usb_wakeup_request();
 800244e:	f014 fc30 	bl	8016cb2 <usb_wakeup_request>
 8002452:	4604      	mov	r4, r0
 8002454:	e016      	b.n	8002484 <zmk_usb_hid_send_report+0x50>
 8002456:	4604      	mov	r4, r0
 8002458:	460d      	mov	r5, r1
	return z_impl_k_sem_take(sem, timeout);
 800245a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800245e:	2300      	movs	r3, #0
 8002460:	480a      	ldr	r0, [pc, #40]	; (800248c <zmk_usb_hid_send_report+0x58>)
 8002462:	f012 f80d 	bl	8014480 <z_impl_k_sem_take>
        int err = hid_int_ep_write(hid_dev, report, len, NULL);
 8002466:	2300      	movs	r3, #0
 8002468:	462a      	mov	r2, r5
 800246a:	4621      	mov	r1, r4
 800246c:	4808      	ldr	r0, [pc, #32]	; (8002490 <zmk_usb_hid_send_report+0x5c>)
 800246e:	6800      	ldr	r0, [r0, #0]
 8002470:	f010 fab0 	bl	80129d4 <hid_int_ep_write>
        if (err) {
 8002474:	4604      	mov	r4, r0
 8002476:	b128      	cbz	r0, 8002484 <zmk_usb_hid_send_report+0x50>
	z_impl_k_sem_give(sem);
 8002478:	4804      	ldr	r0, [pc, #16]	; (800248c <zmk_usb_hid_send_report+0x58>)
 800247a:	f011 ffd9 	bl	8014430 <z_impl_k_sem_give>
}
 800247e:	e001      	b.n	8002484 <zmk_usb_hid_send_report+0x50>
    switch (usb_status) {
 8002480:	f06f 0412 	mvn.w	r4, #18
}
 8002484:	4620      	mov	r0, r4
 8002486:	bd38      	pop	{r3, r4, r5, pc}
 8002488:	200005a1 	.word	0x200005a1
 800248c:	20000820 	.word	0x20000820
 8002490:	20001500 	.word	0x20001500

08002494 <zmk_usb_get_conn_state>:
    switch (usb_status) {
 8002494:	4b09      	ldr	r3, [pc, #36]	; (80024bc <zmk_usb_get_conn_state+0x28>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b04      	cmp	r3, #4
 800249a:	d00a      	beq.n	80024b2 <zmk_usb_get_conn_state+0x1e>
 800249c:	d805      	bhi.n	80024aa <zmk_usb_get_conn_state+0x16>
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d801      	bhi.n	80024a6 <zmk_usb_get_conn_state+0x12>
        return ZMK_USB_CONN_POWERED;
 80024a2:	2001      	movs	r0, #1
 80024a4:	4770      	bx	lr
        return ZMK_USB_CONN_HID;
 80024a6:	2002      	movs	r0, #2
 80024a8:	4770      	bx	lr
    switch (usb_status) {
 80024aa:	2b0b      	cmp	r3, #11
 80024ac:	d103      	bne.n	80024b6 <zmk_usb_get_conn_state+0x22>
 80024ae:	2000      	movs	r0, #0
 80024b0:	4770      	bx	lr
 80024b2:	2000      	movs	r0, #0
 80024b4:	4770      	bx	lr
        return ZMK_USB_CONN_HID;
 80024b6:	2002      	movs	r0, #2
}
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	200005a1 	.word	0x200005a1

080024c0 <usb_status_cb>:
void usb_status_cb(enum usb_dc_status_code status, const uint8_t *params) {
 80024c0:	b508      	push	{r3, lr}
    usb_status = status;
 80024c2:	4b02      	ldr	r3, [pc, #8]	; (80024cc <usb_status_cb+0xc>)
 80024c4:	7018      	strb	r0, [r3, #0]
    raise_usb_status_changed_event();
 80024c6:	f012 fdc2 	bl	801504e <raise_usb_status_changed_event>
};
 80024ca:	bd08      	pop	{r3, pc}
 80024cc:	200005a1 	.word	0x200005a1

080024d0 <read_hids_report_map>:
    return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
                             sizeof(struct hids_report));
}

static ssize_t read_hids_report_map(struct bt_conn *conn, const struct bt_gatt_attr *attr,
                                    void *buf, uint16_t len, uint16_t offset) {
 80024d0:	b510      	push	{r4, lr}
 80024d2:	b084      	sub	sp, #16
    return bt_gatt_attr_read(conn, attr, buf, len, offset, zmk_hid_report_desc,
 80024d4:	244c      	movs	r4, #76	; 0x4c
 80024d6:	9402      	str	r4, [sp, #8]
 80024d8:	4c04      	ldr	r4, [pc, #16]	; (80024ec <read_hids_report_map+0x1c>)
 80024da:	9401      	str	r4, [sp, #4]
 80024dc:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 80024e0:	9400      	str	r4, [sp, #0]
 80024e2:	f017 fd23 	bl	8019f2c <bt_gatt_attr_read>
                             sizeof(zmk_hid_report_desc));
}
 80024e6:	b004      	add	sp, #16
 80024e8:	bd10      	pop	{r4, pc}
 80024ea:	bf00      	nop
 80024ec:	0801e914 	.word	0x0801e914

080024f0 <zmk_hog_init>:
    k_work_submit_to_queue(&hog_work_q, &hog_consumer_work);

    return 0;
};

int zmk_hog_init(const struct device *_arg) {
 80024f0:	b508      	push	{r3, lr}
    k_work_q_start(&hog_work_q, hog_q_stack, K_THREAD_STACK_SIZEOF(hog_q_stack),
 80024f2:	2305      	movs	r3, #5
 80024f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024f8:	4902      	ldr	r1, [pc, #8]	; (8002504 <zmk_hog_init+0x14>)
 80024fa:	4803      	ldr	r0, [pc, #12]	; (8002508 <zmk_hog_init+0x18>)
 80024fc:	f012 f886 	bl	801460c <k_work_q_start>
                   CONFIG_ZMK_BLE_THREAD_PRIORITY);

    return 0;
}
 8002500:	2000      	movs	r0, #0
 8002502:	bd08      	pop	{r3, pc}
 8002504:	200038d0 	.word	0x200038d0
 8002508:	20000b30 	.word	0x20000b30

0800250c <destination_connection>:
struct bt_conn *destination_connection() {
 800250c:	b510      	push	{r4, lr}
 800250e:	b082      	sub	sp, #8
    bt_addr_le_t *addr = zmk_ble_active_profile_addr();
 8002510:	f7ff f80e 	bl	8001530 <zmk_ble_active_profile_addr>
 8002514:	4604      	mov	r4, r0
    LOG_DBG("Address pointer %p", addr);
 8002516:	f04f 0300 	mov.w	r3, #0
 800251a:	2204      	movs	r2, #4
 800251c:	f362 0302 	bfi	r3, r2, #0, #3
 8002520:	f36f 03c5 	bfc	r3, #3, #3
 8002524:	4a20      	ldr	r2, [pc, #128]	; (80025a8 <destination_connection+0x9c>)
 8002526:	4921      	ldr	r1, [pc, #132]	; (80025ac <destination_connection+0xa0>)
 8002528:	1a52      	subs	r2, r2, r1
 800252a:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 800252e:	f362 138f 	bfi	r3, r2, #6, #10
 8002532:	4602      	mov	r2, r0
 8002534:	491e      	ldr	r1, [pc, #120]	; (80025b0 <destination_connection+0xa4>)
 8002536:	481f      	ldr	r0, [pc, #124]	; (80025b4 <destination_connection+0xa8>)
 8002538:	f001 ff18 	bl	800436c <log_2>
    if (!bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
 800253c:	2300      	movs	r3, #0
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	f8cd 3003 	str.w	r3, [sp, #3]
 8002544:	2207      	movs	r2, #7
 8002546:	4669      	mov	r1, sp
 8002548:	4620      	mov	r0, r4
 800254a:	f015 fc7f 	bl	8017e4c <memcmp>
 800254e:	b130      	cbz	r0, 800255e <destination_connection+0x52>
    } else if ((conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr)) == NULL) {
 8002550:	4621      	mov	r1, r4
 8002552:	2000      	movs	r0, #0
 8002554:	f00b f86e 	bl	800d634 <bt_conn_lookup_addr_le>
 8002558:	b1a0      	cbz	r0, 8002584 <destination_connection+0x78>
}
 800255a:	b002      	add	sp, #8
 800255c:	bd10      	pop	{r4, pc}
        LOG_WRN("Not sending, no active address for current profile");
 800255e:	f04f 0100 	mov.w	r1, #0
 8002562:	2302      	movs	r3, #2
 8002564:	f363 0102 	bfi	r1, r3, #0, #3
 8002568:	f36f 01c5 	bfc	r1, #3, #3
 800256c:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <destination_connection+0x9c>)
 800256e:	4a0f      	ldr	r2, [pc, #60]	; (80025ac <destination_connection+0xa0>)
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8002576:	f363 118f 	bfi	r1, r3, #6, #10
 800257a:	480f      	ldr	r0, [pc, #60]	; (80025b8 <destination_connection+0xac>)
 800257c:	f001 ffe6 	bl	800454c <log_0>
        return NULL;
 8002580:	2000      	movs	r0, #0
 8002582:	e7ea      	b.n	800255a <destination_connection+0x4e>
        LOG_WRN("Not sending, not connected to active profile");
 8002584:	f04f 0100 	mov.w	r1, #0
 8002588:	2302      	movs	r3, #2
 800258a:	f363 0102 	bfi	r1, r3, #0, #3
 800258e:	f36f 01c5 	bfc	r1, #3, #3
 8002592:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <destination_connection+0x9c>)
 8002594:	4a05      	ldr	r2, [pc, #20]	; (80025ac <destination_connection+0xa0>)
 8002596:	1a9b      	subs	r3, r3, r2
 8002598:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800259c:	f363 118f 	bfi	r1, r3, #6, #10
 80025a0:	4806      	ldr	r0, [pc, #24]	; (80025bc <destination_connection+0xb0>)
 80025a2:	f001 ffd3 	bl	800454c <log_0>
        return NULL;
 80025a6:	e7eb      	b.n	8002580 <destination_connection+0x74>
 80025a8:	0801d7a0 	.word	0x0801d7a0
 80025ac:	0801d6d0 	.word	0x0801d6d0
 80025b0:	0801e7b0 	.word	0x0801e7b0
 80025b4:	0801e644 	.word	0x0801e644
 80025b8:	0801e65c 	.word	0x0801e65c
 80025bc:	0801e690 	.word	0x0801e690

080025c0 <send_keyboard_report_callback>:
void send_keyboard_report_callback(struct k_work *work) {
 80025c0:	b530      	push	{r4, r5, lr}
 80025c2:	b089      	sub	sp, #36	; 0x24
    while (k_msgq_get(&zmk_hog_keyboard_msgq, &report, K_NO_WAIT) == 0) {
 80025c4:	e012      	b.n	80025ec <send_keyboard_report_callback+0x2c>
            LOG_ERR("Error notifying %d", err);
 80025c6:	2301      	movs	r3, #1
 80025c8:	f363 0502 	bfi	r5, r3, #0, #3
 80025cc:	f36f 05c5 	bfc	r5, #3, #3
 80025d0:	4b16      	ldr	r3, [pc, #88]	; (800262c <send_keyboard_report_callback+0x6c>)
 80025d2:	4a17      	ldr	r2, [pc, #92]	; (8002630 <send_keyboard_report_callback+0x70>)
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80025da:	f363 158f 	bfi	r5, r3, #6, #10
 80025de:	462a      	mov	r2, r5
 80025e0:	4814      	ldr	r0, [pc, #80]	; (8002634 <send_keyboard_report_callback+0x74>)
 80025e2:	f001 fe43 	bl	800426c <log_1>
        bt_conn_unref(conn);
 80025e6:	4620      	mov	r0, r4
 80025e8:	f016 fac4 	bl	8018b74 <bt_conn_unref>
	return z_impl_k_msgq_get(msgq, data, timeout);
 80025ec:	2200      	movs	r2, #0
 80025ee:	2300      	movs	r3, #0
 80025f0:	a906      	add	r1, sp, #24
 80025f2:	4811      	ldr	r0, [pc, #68]	; (8002638 <send_keyboard_report_callback+0x78>)
 80025f4:	f011 fa7e 	bl	8013af4 <z_impl_k_msgq_get>
    while (k_msgq_get(&zmk_hog_keyboard_msgq, &report, K_NO_WAIT) == 0) {
 80025f8:	b9b0      	cbnz	r0, 8002628 <send_keyboard_report_callback+0x68>
        struct bt_conn *conn = destination_connection();
 80025fa:	f7ff ff87 	bl	800250c <destination_connection>
        if (conn == NULL) {
 80025fe:	4604      	mov	r4, r0
 8002600:	b190      	cbz	r0, 8002628 <send_keyboard_report_callback+0x68>
        struct bt_gatt_notify_params notify_params = {
 8002602:	2300      	movs	r3, #0
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	9303      	str	r3, [sp, #12]
 8002608:	9304      	str	r3, [sp, #16]
 800260a:	9305      	str	r3, [sp, #20]
 800260c:	4b0b      	ldr	r3, [pc, #44]	; (800263c <send_keyboard_report_callback+0x7c>)
 800260e:	9301      	str	r3, [sp, #4]
 8002610:	ab06      	add	r3, sp, #24
 8002612:	9302      	str	r3, [sp, #8]
 8002614:	2308      	movs	r3, #8
 8002616:	f8ad 300c 	strh.w	r3, [sp, #12]
        int err = bt_gatt_notify_cb(conn, &notify_params);
 800261a:	4669      	mov	r1, sp
 800261c:	f00d fee6 	bl	80103ec <bt_gatt_notify_cb>
        if (err) {
 8002620:	4601      	mov	r1, r0
 8002622:	2800      	cmp	r0, #0
 8002624:	d0df      	beq.n	80025e6 <send_keyboard_report_callback+0x26>
 8002626:	e7ce      	b.n	80025c6 <send_keyboard_report_callback+0x6>
}
 8002628:	b009      	add	sp, #36	; 0x24
 800262a:	bd30      	pop	{r4, r5, pc}
 800262c:	0801d7a0 	.word	0x0801d7a0
 8002630:	0801d6d0 	.word	0x0801d6d0
 8002634:	0801e470 	.word	0x0801e470
 8002638:	200007d0 	.word	0x200007d0
 800263c:	0801e84c 	.word	0x0801e84c

08002640 <send_consumer_report_callback>:
void send_consumer_report_callback(struct k_work *work) {
 8002640:	b530      	push	{r4, r5, lr}
 8002642:	b08b      	sub	sp, #44	; 0x2c
    while (k_msgq_get(&zmk_hog_consumer_msgq, &report, K_NO_WAIT) == 0) {
 8002644:	e013      	b.n	800266e <send_consumer_report_callback+0x2e>
            LOG_DBG("Error notifying %d", err);
 8002646:	2304      	movs	r3, #4
 8002648:	f363 0502 	bfi	r5, r3, #0, #3
 800264c:	f36f 05c5 	bfc	r5, #3, #3
 8002650:	4b17      	ldr	r3, [pc, #92]	; (80026b0 <send_consumer_report_callback+0x70>)
 8002652:	4918      	ldr	r1, [pc, #96]	; (80026b4 <send_consumer_report_callback+0x74>)
 8002654:	1a5b      	subs	r3, r3, r1
 8002656:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800265a:	f363 158f 	bfi	r5, r3, #6, #10
 800265e:	462b      	mov	r3, r5
 8002660:	4915      	ldr	r1, [pc, #84]	; (80026b8 <send_consumer_report_callback+0x78>)
 8002662:	4816      	ldr	r0, [pc, #88]	; (80026bc <send_consumer_report_callback+0x7c>)
 8002664:	f001 fe82 	bl	800436c <log_2>
        bt_conn_unref(conn);
 8002668:	4620      	mov	r0, r4
 800266a:	f016 fa83 	bl	8018b74 <bt_conn_unref>
 800266e:	2200      	movs	r2, #0
 8002670:	2300      	movs	r3, #0
 8002672:	a907      	add	r1, sp, #28
 8002674:	4812      	ldr	r0, [pc, #72]	; (80026c0 <send_consumer_report_callback+0x80>)
 8002676:	f011 fa3d 	bl	8013af4 <z_impl_k_msgq_get>
    while (k_msgq_get(&zmk_hog_consumer_msgq, &report, K_NO_WAIT) == 0) {
 800267a:	b9b0      	cbnz	r0, 80026aa <send_consumer_report_callback+0x6a>
        struct bt_conn *conn = destination_connection();
 800267c:	f7ff ff46 	bl	800250c <destination_connection>
        if (conn == NULL) {
 8002680:	4604      	mov	r4, r0
 8002682:	b190      	cbz	r0, 80026aa <send_consumer_report_callback+0x6a>
        struct bt_gatt_notify_params notify_params = {
 8002684:	2300      	movs	r3, #0
 8002686:	9301      	str	r3, [sp, #4]
 8002688:	9304      	str	r3, [sp, #16]
 800268a:	9305      	str	r3, [sp, #20]
 800268c:	9306      	str	r3, [sp, #24]
 800268e:	4b0d      	ldr	r3, [pc, #52]	; (80026c4 <send_consumer_report_callback+0x84>)
 8002690:	9302      	str	r3, [sp, #8]
 8002692:	ab07      	add	r3, sp, #28
 8002694:	9303      	str	r3, [sp, #12]
 8002696:	230c      	movs	r3, #12
 8002698:	f8ad 3010 	strh.w	r3, [sp, #16]
        int err = bt_gatt_notify_cb(conn, &notify_params);
 800269c:	a901      	add	r1, sp, #4
 800269e:	f00d fea5 	bl	80103ec <bt_gatt_notify_cb>
        if (err) {
 80026a2:	4602      	mov	r2, r0
 80026a4:	2800      	cmp	r0, #0
 80026a6:	d0df      	beq.n	8002668 <send_consumer_report_callback+0x28>
 80026a8:	e7cd      	b.n	8002646 <send_consumer_report_callback+0x6>
};
 80026aa:	b00b      	add	sp, #44	; 0x2c
 80026ac:	bd30      	pop	{r4, r5, pc}
 80026ae:	bf00      	nop
 80026b0:	0801d7a0 	.word	0x0801d7a0
 80026b4:	0801d6d0 	.word	0x0801d6d0
 80026b8:	0801e7c8 	.word	0x0801e7c8
 80026bc:	0801e46c 	.word	0x0801e46c
 80026c0:	200007a8 	.word	0x200007a8
 80026c4:	0801e8b0 	.word	0x0801e8b0

080026c8 <zmk_hog_send_keyboard_report>:
int zmk_hog_send_keyboard_report(struct zmk_hid_keyboard_report_body *report) {
 80026c8:	b530      	push	{r4, r5, lr}
 80026ca:	b083      	sub	sp, #12
 80026cc:	4604      	mov	r4, r0
	return z_impl_k_msgq_put(msgq, data, timeout);
 80026ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026d2:	2300      	movs	r3, #0
 80026d4:	4601      	mov	r1, r0
 80026d6:	4828      	ldr	r0, [pc, #160]	; (8002778 <zmk_hog_send_keyboard_report+0xb0>)
 80026d8:	f011 f9b4 	bl	8013a44 <z_impl_k_msgq_put>
    if (err) {
 80026dc:	4605      	mov	r5, r0
 80026de:	b388      	cbz	r0, 8002744 <zmk_hog_send_keyboard_report+0x7c>
        switch (err) {
 80026e0:	f110 0f0b 	cmn.w	r0, #11
 80026e4:	d012      	beq.n	800270c <zmk_hog_send_keyboard_report+0x44>
            LOG_WRN("Failed to queue keyboard report to send (%d)", err);
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	2302      	movs	r3, #2
 80026ec:	f363 0202 	bfi	r2, r3, #0, #3
 80026f0:	f36f 02c5 	bfc	r2, #3, #3
 80026f4:	4b21      	ldr	r3, [pc, #132]	; (800277c <zmk_hog_send_keyboard_report+0xb4>)
 80026f6:	4922      	ldr	r1, [pc, #136]	; (8002780 <zmk_hog_send_keyboard_report+0xb8>)
 80026f8:	1a5b      	subs	r3, r3, r1
 80026fa:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80026fe:	f363 128f 	bfi	r2, r3, #6, #10
 8002702:	4601      	mov	r1, r0
 8002704:	481f      	ldr	r0, [pc, #124]	; (8002784 <zmk_hog_send_keyboard_report+0xbc>)
 8002706:	f001 fdb1 	bl	800426c <log_1>
            return err;
 800270a:	e02b      	b.n	8002764 <zmk_hog_send_keyboard_report+0x9c>
            LOG_WRN("Keyboard message queue full, popping first message and queueing again");
 800270c:	f04f 0100 	mov.w	r1, #0
 8002710:	2302      	movs	r3, #2
 8002712:	f363 0102 	bfi	r1, r3, #0, #3
 8002716:	f36f 01c5 	bfc	r1, #3, #3
 800271a:	4b18      	ldr	r3, [pc, #96]	; (800277c <zmk_hog_send_keyboard_report+0xb4>)
 800271c:	4a18      	ldr	r2, [pc, #96]	; (8002780 <zmk_hog_send_keyboard_report+0xb8>)
 800271e:	1a9b      	subs	r3, r3, r2
 8002720:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8002724:	f363 118f 	bfi	r1, r3, #6, #10
 8002728:	4817      	ldr	r0, [pc, #92]	; (8002788 <zmk_hog_send_keyboard_report+0xc0>)
 800272a:	f001 ff0f 	bl	800454c <log_0>
	return z_impl_k_msgq_get(msgq, data, timeout);
 800272e:	2200      	movs	r2, #0
 8002730:	2300      	movs	r3, #0
 8002732:	4669      	mov	r1, sp
 8002734:	4810      	ldr	r0, [pc, #64]	; (8002778 <zmk_hog_send_keyboard_report+0xb0>)
 8002736:	f011 f9dd 	bl	8013af4 <z_impl_k_msgq_get>
            return zmk_hog_send_keyboard_report(report);
 800273a:	4620      	mov	r0, r4
 800273c:	f7ff ffc4 	bl	80026c8 <zmk_hog_send_keyboard_report>
 8002740:	4605      	mov	r5, r0
 8002742:	e00f      	b.n	8002764 <zmk_hog_send_keyboard_report+0x9c>
 8002744:	4b11      	ldr	r3, [pc, #68]	; (800278c <zmk_hog_send_keyboard_report+0xc4>)
 8002746:	f3bf 8f5b 	dmb	ish
 800274a:	e853 2f00 	ldrex	r2, [r3]
 800274e:	f042 0101 	orr.w	r1, r2, #1
 8002752:	e843 1000 	strex	r0, r1, [r3]
 8002756:	2800      	cmp	r0, #0
 8002758:	d1f7      	bne.n	800274a <zmk_hog_send_keyboard_report+0x82>
 800275a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 800275e:	f012 0f01 	tst.w	r2, #1
 8002762:	d002      	beq.n	800276a <zmk_hog_send_keyboard_report+0xa2>
};
 8002764:	4628      	mov	r0, r5
 8002766:	b003      	add	sp, #12
 8002768:	bd30      	pop	{r4, r5, pc}
		k_queue_append(&work_q->queue, work);
 800276a:	f1a3 0108 	sub.w	r1, r3, #8
 800276e:	4808      	ldr	r0, [pc, #32]	; (8002790 <zmk_hog_send_keyboard_report+0xc8>)
 8002770:	f01a f97c 	bl	801ca6c <k_queue_append>
}
 8002774:	e7f6      	b.n	8002764 <zmk_hog_send_keyboard_report+0x9c>
 8002776:	bf00      	nop
 8002778:	200007d0 	.word	0x200007d0
 800277c:	0801d7a0 	.word	0x0801d7a0
 8002780:	0801d6d0 	.word	0x0801d6d0
 8002784:	0801e708 	.word	0x0801e708
 8002788:	0801e6c0 	.word	0x0801e6c0
 800278c:	20000320 	.word	0x20000320
 8002790:	20000b30 	.word	0x20000b30

08002794 <zmk_hog_send_consumer_report>:
int zmk_hog_send_consumer_report(struct zmk_hid_consumer_report_body *report) {
 8002794:	b530      	push	{r4, r5, lr}
 8002796:	b085      	sub	sp, #20
 8002798:	4604      	mov	r4, r0
	return z_impl_k_msgq_put(msgq, data, timeout);
 800279a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800279e:	2300      	movs	r3, #0
 80027a0:	4601      	mov	r1, r0
 80027a2:	4828      	ldr	r0, [pc, #160]	; (8002844 <zmk_hog_send_consumer_report+0xb0>)
 80027a4:	f011 f94e 	bl	8013a44 <z_impl_k_msgq_put>
    if (err) {
 80027a8:	4605      	mov	r5, r0
 80027aa:	b388      	cbz	r0, 8002810 <zmk_hog_send_consumer_report+0x7c>
        switch (err) {
 80027ac:	f110 0f0b 	cmn.w	r0, #11
 80027b0:	d012      	beq.n	80027d8 <zmk_hog_send_consumer_report+0x44>
            LOG_WRN("Failed to queue consumer report to send (%d)", err);
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	2302      	movs	r3, #2
 80027b8:	f363 0202 	bfi	r2, r3, #0, #3
 80027bc:	f36f 02c5 	bfc	r2, #3, #3
 80027c0:	4b21      	ldr	r3, [pc, #132]	; (8002848 <zmk_hog_send_consumer_report+0xb4>)
 80027c2:	4922      	ldr	r1, [pc, #136]	; (800284c <zmk_hog_send_consumer_report+0xb8>)
 80027c4:	1a5b      	subs	r3, r3, r1
 80027c6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80027ca:	f363 128f 	bfi	r2, r3, #6, #10
 80027ce:	4601      	mov	r1, r0
 80027d0:	481f      	ldr	r0, [pc, #124]	; (8002850 <zmk_hog_send_consumer_report+0xbc>)
 80027d2:	f001 fd4b 	bl	800426c <log_1>
            return err;
 80027d6:	e02b      	b.n	8002830 <zmk_hog_send_consumer_report+0x9c>
            LOG_WRN("Consumer message queue full, popping first message and queueing again");
 80027d8:	f04f 0100 	mov.w	r1, #0
 80027dc:	2302      	movs	r3, #2
 80027de:	f363 0102 	bfi	r1, r3, #0, #3
 80027e2:	f36f 01c5 	bfc	r1, #3, #3
 80027e6:	4b18      	ldr	r3, [pc, #96]	; (8002848 <zmk_hog_send_consumer_report+0xb4>)
 80027e8:	4a18      	ldr	r2, [pc, #96]	; (800284c <zmk_hog_send_consumer_report+0xb8>)
 80027ea:	1a9b      	subs	r3, r3, r2
 80027ec:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80027f0:	f363 118f 	bfi	r1, r3, #6, #10
 80027f4:	4817      	ldr	r0, [pc, #92]	; (8002854 <zmk_hog_send_consumer_report+0xc0>)
 80027f6:	f001 fea9 	bl	800454c <log_0>
	return z_impl_k_msgq_get(msgq, data, timeout);
 80027fa:	2200      	movs	r2, #0
 80027fc:	2300      	movs	r3, #0
 80027fe:	a901      	add	r1, sp, #4
 8002800:	4810      	ldr	r0, [pc, #64]	; (8002844 <zmk_hog_send_consumer_report+0xb0>)
 8002802:	f011 f977 	bl	8013af4 <z_impl_k_msgq_get>
            return zmk_hog_send_consumer_report(report);
 8002806:	4620      	mov	r0, r4
 8002808:	f7ff ffc4 	bl	8002794 <zmk_hog_send_consumer_report>
 800280c:	4605      	mov	r5, r0
 800280e:	e00f      	b.n	8002830 <zmk_hog_send_consumer_report+0x9c>
 8002810:	4b11      	ldr	r3, [pc, #68]	; (8002858 <zmk_hog_send_consumer_report+0xc4>)
 8002812:	f3bf 8f5b 	dmb	ish
 8002816:	e853 2f00 	ldrex	r2, [r3]
 800281a:	f042 0101 	orr.w	r1, r2, #1
 800281e:	e843 1000 	strex	r0, r1, [r3]
 8002822:	2800      	cmp	r0, #0
 8002824:	d1f7      	bne.n	8002816 <zmk_hog_send_consumer_report+0x82>
 8002826:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 800282a:	f012 0f01 	tst.w	r2, #1
 800282e:	d002      	beq.n	8002836 <zmk_hog_send_consumer_report+0xa2>
};
 8002830:	4628      	mov	r0, r5
 8002832:	b005      	add	sp, #20
 8002834:	bd30      	pop	{r4, r5, pc}
		k_queue_append(&work_q->queue, work);
 8002836:	f1a3 0108 	sub.w	r1, r3, #8
 800283a:	4808      	ldr	r0, [pc, #32]	; (800285c <zmk_hog_send_consumer_report+0xc8>)
 800283c:	f01a f916 	bl	801ca6c <k_queue_append>
}
 8002840:	e7f6      	b.n	8002830 <zmk_hog_send_consumer_report+0x9c>
 8002842:	bf00      	nop
 8002844:	200007a8 	.word	0x200007a8
 8002848:	0801d7a0 	.word	0x0801d7a0
 800284c:	0801d6d0 	.word	0x0801d6d0
 8002850:	0801e780 	.word	0x0801e780
 8002854:	0801e738 	.word	0x0801e738
 8002858:	20000314 	.word	0x20000314
 800285c:	20000b30 	.word	0x20000b30

08002860 <get_selected_endpoint>:
#else
    return false;
#endif
}

static enum zmk_endpoint get_selected_endpoint() {
 8002860:	b510      	push	{r4, lr}
    if (is_ble_ready()) {
 8002862:	f012 fc58 	bl	8015116 <is_ble_ready>
 8002866:	b360      	cbz	r0, 80028c2 <get_selected_endpoint+0x62>
        if (is_usb_ready()) {
 8002868:	f012 fc59 	bl	801511e <is_usb_ready>
 800286c:	b1a8      	cbz	r0, 800289a <get_selected_endpoint+0x3a>
            LOG_DBG("Both endpoints are ready. Using %d", preferred_endpoint);
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	2204      	movs	r2, #4
 8002874:	f362 0302 	bfi	r3, r2, #0, #3
 8002878:	f36f 03c5 	bfc	r3, #3, #3
 800287c:	4a26      	ldr	r2, [pc, #152]	; (8002918 <get_selected_endpoint+0xb8>)
 800287e:	4927      	ldr	r1, [pc, #156]	; (800291c <get_selected_endpoint+0xbc>)
 8002880:	1a52      	subs	r2, r2, r1
 8002882:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8002886:	f362 138f 	bfi	r3, r2, #6, #10
 800288a:	4c25      	ldr	r4, [pc, #148]	; (8002920 <get_selected_endpoint+0xc0>)
 800288c:	7822      	ldrb	r2, [r4, #0]
 800288e:	4925      	ldr	r1, [pc, #148]	; (8002924 <get_selected_endpoint+0xc4>)
 8002890:	4825      	ldr	r0, [pc, #148]	; (8002928 <get_selected_endpoint+0xc8>)
 8002892:	f001 fd6b 	bl	800436c <log_2>
            return preferred_endpoint;
 8002896:	7820      	ldrb	r0, [r4, #0]
 8002898:	e029      	b.n	80028ee <get_selected_endpoint+0x8e>
        }

        LOG_DBG("Only BLE is ready.");
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	2304      	movs	r3, #4
 80028a0:	f363 0202 	bfi	r2, r3, #0, #3
 80028a4:	f36f 02c5 	bfc	r2, #3, #3
 80028a8:	4b1b      	ldr	r3, [pc, #108]	; (8002918 <get_selected_endpoint+0xb8>)
 80028aa:	491c      	ldr	r1, [pc, #112]	; (800291c <get_selected_endpoint+0xbc>)
 80028ac:	1a5b      	subs	r3, r3, r1
 80028ae:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80028b2:	f363 128f 	bfi	r2, r3, #6, #10
 80028b6:	491b      	ldr	r1, [pc, #108]	; (8002924 <get_selected_endpoint+0xc4>)
 80028b8:	481c      	ldr	r0, [pc, #112]	; (800292c <get_selected_endpoint+0xcc>)
 80028ba:	f001 fcd7 	bl	800426c <log_1>
        return ZMK_ENDPOINT_BLE;
 80028be:	2001      	movs	r0, #1
 80028c0:	e015      	b.n	80028ee <get_selected_endpoint+0x8e>
    }

    if (is_usb_ready()) {
 80028c2:	f012 fc2c 	bl	801511e <is_usb_ready>
 80028c6:	b998      	cbnz	r0, 80028f0 <get_selected_endpoint+0x90>
        LOG_DBG("Only USB is ready.");
        return ZMK_ENDPOINT_USB;
    }

    LOG_DBG("No endpoints are ready.");
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	2304      	movs	r3, #4
 80028ce:	f363 0202 	bfi	r2, r3, #0, #3
 80028d2:	f36f 02c5 	bfc	r2, #3, #3
 80028d6:	4b10      	ldr	r3, [pc, #64]	; (8002918 <get_selected_endpoint+0xb8>)
 80028d8:	4910      	ldr	r1, [pc, #64]	; (800291c <get_selected_endpoint+0xbc>)
 80028da:	1a5b      	subs	r3, r3, r1
 80028dc:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80028e0:	f363 128f 	bfi	r2, r3, #6, #10
 80028e4:	490f      	ldr	r1, [pc, #60]	; (8002924 <get_selected_endpoint+0xc4>)
 80028e6:	4812      	ldr	r0, [pc, #72]	; (8002930 <get_selected_endpoint+0xd0>)
 80028e8:	f001 fcc0 	bl	800426c <log_1>
    return DEFAULT_ENDPOINT;
 80028ec:	2001      	movs	r0, #1
}
 80028ee:	bd10      	pop	{r4, pc}
        LOG_DBG("Only USB is ready.");
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	2304      	movs	r3, #4
 80028f6:	f363 0202 	bfi	r2, r3, #0, #3
 80028fa:	f36f 02c5 	bfc	r2, #3, #3
 80028fe:	4b06      	ldr	r3, [pc, #24]	; (8002918 <get_selected_endpoint+0xb8>)
 8002900:	4906      	ldr	r1, [pc, #24]	; (800291c <get_selected_endpoint+0xbc>)
 8002902:	1a5b      	subs	r3, r3, r1
 8002904:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8002908:	f363 128f 	bfi	r2, r3, #6, #10
 800290c:	4905      	ldr	r1, [pc, #20]	; (8002924 <get_selected_endpoint+0xc4>)
 800290e:	4809      	ldr	r0, [pc, #36]	; (8002934 <get_selected_endpoint+0xd4>)
 8002910:	f001 fcac 	bl	800426c <log_1>
        return ZMK_ENDPOINT_USB;
 8002914:	2000      	movs	r0, #0
 8002916:	e7ea      	b.n	80028ee <get_selected_endpoint+0x8e>
 8002918:	0801d7a0 	.word	0x0801d7a0
 800291c:	0801d6d0 	.word	0x0801d6d0
 8002920:	200034f8 	.word	0x200034f8
 8002924:	0801eb94 	.word	0x0801eb94
 8002928:	0801e960 	.word	0x0801e960
 800292c:	0801e988 	.word	0x0801e988
 8002930:	0801e9b8 	.word	0x0801e9b8
 8002934:	0801e9a0 	.word	0x0801e9a0

08002938 <send_keyboard_report>:
static int send_keyboard_report() {
 8002938:	b510      	push	{r4, lr}
    struct zmk_hid_keyboard_report *keyboard_report = zmk_hid_get_keyboard_report();
 800293a:	f7fe f86f 	bl	8000a1c <zmk_hid_get_keyboard_report>
    switch (current_endpoint) {
 800293e:	4b26      	ldr	r3, [pc, #152]	; (80029d8 <send_keyboard_report+0xa0>)
 8002940:	7819      	ldrb	r1, [r3, #0]
 8002942:	b1b1      	cbz	r1, 8002972 <send_keyboard_report+0x3a>
 8002944:	2901      	cmp	r1, #1
 8002946:	d02d      	beq.n	80029a4 <send_keyboard_report+0x6c>
        LOG_ERR("Unsupported endpoint %d", current_endpoint);
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	2301      	movs	r3, #1
 800294e:	f363 0202 	bfi	r2, r3, #0, #3
 8002952:	f36f 02c5 	bfc	r2, #3, #3
 8002956:	4b21      	ldr	r3, [pc, #132]	; (80029dc <send_keyboard_report+0xa4>)
 8002958:	4821      	ldr	r0, [pc, #132]	; (80029e0 <send_keyboard_report+0xa8>)
 800295a:	1a1b      	subs	r3, r3, r0
 800295c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8002960:	f363 128f 	bfi	r2, r3, #6, #10
 8002964:	481f      	ldr	r0, [pc, #124]	; (80029e4 <send_keyboard_report+0xac>)
 8002966:	f001 fc81 	bl	800426c <log_1>
        return -ENOTSUP;
 800296a:	f06f 0422 	mvn.w	r4, #34	; 0x22
}
 800296e:	4620      	mov	r0, r4
 8002970:	bd10      	pop	{r4, pc}
        int err = zmk_usb_hid_send_report((uint8_t *)keyboard_report, sizeof(*keyboard_report));
 8002972:	2109      	movs	r1, #9
 8002974:	f7ff fd5e 	bl	8002434 <zmk_usb_hid_send_report>
        if (err) {
 8002978:	4604      	mov	r4, r0
 800297a:	2800      	cmp	r0, #0
 800297c:	d0f7      	beq.n	800296e <send_keyboard_report+0x36>
            LOG_ERR("FAILED TO SEND OVER USB: %d", err);
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	2301      	movs	r3, #1
 8002984:	f363 0202 	bfi	r2, r3, #0, #3
 8002988:	f36f 02c5 	bfc	r2, #3, #3
 800298c:	4b13      	ldr	r3, [pc, #76]	; (80029dc <send_keyboard_report+0xa4>)
 800298e:	4914      	ldr	r1, [pc, #80]	; (80029e0 <send_keyboard_report+0xa8>)
 8002990:	1a5b      	subs	r3, r3, r1
 8002992:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8002996:	f363 128f 	bfi	r2, r3, #6, #10
 800299a:	4601      	mov	r1, r0
 800299c:	4812      	ldr	r0, [pc, #72]	; (80029e8 <send_keyboard_report+0xb0>)
 800299e:	f001 fc65 	bl	800426c <log_1>
 80029a2:	e7e4      	b.n	800296e <send_keyboard_report+0x36>
        int err = zmk_hog_send_keyboard_report(&keyboard_report->body);
 80029a4:	3001      	adds	r0, #1
 80029a6:	f7ff fe8f 	bl	80026c8 <zmk_hog_send_keyboard_report>
        if (err) {
 80029aa:	4604      	mov	r4, r0
 80029ac:	2800      	cmp	r0, #0
 80029ae:	d0de      	beq.n	800296e <send_keyboard_report+0x36>
            LOG_ERR("FAILED TO SEND OVER HOG: %d", err);
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	2301      	movs	r3, #1
 80029b6:	f363 0202 	bfi	r2, r3, #0, #3
 80029ba:	f36f 02c5 	bfc	r2, #3, #3
 80029be:	4b07      	ldr	r3, [pc, #28]	; (80029dc <send_keyboard_report+0xa4>)
 80029c0:	4907      	ldr	r1, [pc, #28]	; (80029e0 <send_keyboard_report+0xa8>)
 80029c2:	1a5b      	subs	r3, r3, r1
 80029c4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80029c8:	f363 128f 	bfi	r2, r3, #6, #10
 80029cc:	4601      	mov	r1, r0
 80029ce:	4807      	ldr	r0, [pc, #28]	; (80029ec <send_keyboard_report+0xb4>)
 80029d0:	f001 fc4c 	bl	800426c <log_1>
 80029d4:	e7cb      	b.n	800296e <send_keyboard_report+0x36>
 80029d6:	bf00      	nop
 80029d8:	200005a2 	.word	0x200005a2
 80029dc:	0801d7a0 	.word	0x0801d7a0
 80029e0:	0801d6d0 	.word	0x0801d6d0
 80029e4:	0801ea0c 	.word	0x0801ea0c
 80029e8:	0801e9d4 	.word	0x0801e9d4
 80029ec:	0801e9f0 	.word	0x0801e9f0

080029f0 <send_consumer_report>:
static int send_consumer_report() {
 80029f0:	b510      	push	{r4, lr}
    struct zmk_hid_consumer_report *consumer_report = zmk_hid_get_consumer_report();
 80029f2:	f7fe f817 	bl	8000a24 <zmk_hid_get_consumer_report>
    switch (current_endpoint) {
 80029f6:	4b26      	ldr	r3, [pc, #152]	; (8002a90 <send_consumer_report+0xa0>)
 80029f8:	7819      	ldrb	r1, [r3, #0]
 80029fa:	b1b1      	cbz	r1, 8002a2a <send_consumer_report+0x3a>
 80029fc:	2901      	cmp	r1, #1
 80029fe:	d02d      	beq.n	8002a5c <send_consumer_report+0x6c>
        LOG_ERR("Unsupported endpoint %d", current_endpoint);
 8002a00:	f04f 0200 	mov.w	r2, #0
 8002a04:	2301      	movs	r3, #1
 8002a06:	f363 0202 	bfi	r2, r3, #0, #3
 8002a0a:	f36f 02c5 	bfc	r2, #3, #3
 8002a0e:	4b21      	ldr	r3, [pc, #132]	; (8002a94 <send_consumer_report+0xa4>)
 8002a10:	4821      	ldr	r0, [pc, #132]	; (8002a98 <send_consumer_report+0xa8>)
 8002a12:	1a1b      	subs	r3, r3, r0
 8002a14:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8002a18:	f363 128f 	bfi	r2, r3, #6, #10
 8002a1c:	481f      	ldr	r0, [pc, #124]	; (8002a9c <send_consumer_report+0xac>)
 8002a1e:	f001 fc25 	bl	800426c <log_1>
        return -ENOTSUP;
 8002a22:	f06f 0422 	mvn.w	r4, #34	; 0x22
}
 8002a26:	4620      	mov	r0, r4
 8002a28:	bd10      	pop	{r4, pc}
        int err = zmk_usb_hid_send_report((uint8_t *)consumer_report, sizeof(*consumer_report));
 8002a2a:	210d      	movs	r1, #13
 8002a2c:	f7ff fd02 	bl	8002434 <zmk_usb_hid_send_report>
        if (err) {
 8002a30:	4604      	mov	r4, r0
 8002a32:	2800      	cmp	r0, #0
 8002a34:	d0f7      	beq.n	8002a26 <send_consumer_report+0x36>
            LOG_ERR("FAILED TO SEND OVER USB: %d", err);
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	f363 0202 	bfi	r2, r3, #0, #3
 8002a40:	f36f 02c5 	bfc	r2, #3, #3
 8002a44:	4b13      	ldr	r3, [pc, #76]	; (8002a94 <send_consumer_report+0xa4>)
 8002a46:	4914      	ldr	r1, [pc, #80]	; (8002a98 <send_consumer_report+0xa8>)
 8002a48:	1a5b      	subs	r3, r3, r1
 8002a4a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8002a4e:	f363 128f 	bfi	r2, r3, #6, #10
 8002a52:	4601      	mov	r1, r0
 8002a54:	4812      	ldr	r0, [pc, #72]	; (8002aa0 <send_consumer_report+0xb0>)
 8002a56:	f001 fc09 	bl	800426c <log_1>
 8002a5a:	e7e4      	b.n	8002a26 <send_consumer_report+0x36>
        int err = zmk_hog_send_consumer_report(&consumer_report->body);
 8002a5c:	3001      	adds	r0, #1
 8002a5e:	f7ff fe99 	bl	8002794 <zmk_hog_send_consumer_report>
        if (err) {
 8002a62:	4604      	mov	r4, r0
 8002a64:	2800      	cmp	r0, #0
 8002a66:	d0de      	beq.n	8002a26 <send_consumer_report+0x36>
            LOG_ERR("FAILED TO SEND OVER HOG: %d", err);
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	f363 0202 	bfi	r2, r3, #0, #3
 8002a72:	f36f 02c5 	bfc	r2, #3, #3
 8002a76:	4b07      	ldr	r3, [pc, #28]	; (8002a94 <send_consumer_report+0xa4>)
 8002a78:	4907      	ldr	r1, [pc, #28]	; (8002a98 <send_consumer_report+0xa8>)
 8002a7a:	1a5b      	subs	r3, r3, r1
 8002a7c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8002a80:	f363 128f 	bfi	r2, r3, #6, #10
 8002a84:	4601      	mov	r1, r0
 8002a86:	4807      	ldr	r0, [pc, #28]	; (8002aa4 <send_consumer_report+0xb4>)
 8002a88:	f001 fbf0 	bl	800426c <log_1>
 8002a8c:	e7cb      	b.n	8002a26 <send_consumer_report+0x36>
 8002a8e:	bf00      	nop
 8002a90:	200005a2 	.word	0x200005a2
 8002a94:	0801d7a0 	.word	0x0801d7a0
 8002a98:	0801d6d0 	.word	0x0801d6d0
 8002a9c:	0801ea0c 	.word	0x0801ea0c
 8002aa0:	0801e9d4 	.word	0x0801e9d4
 8002aa4:	0801e9f0 	.word	0x0801e9f0

08002aa8 <zmk_endpoints_init>:
static int zmk_endpoints_init(const struct device *_arg) {
 8002aa8:	b510      	push	{r4, lr}
    settings_subsys_init();
 8002aaa:	f003 fde7 	bl	800667c <settings_subsys_init>
    int err = settings_register(&endpoints_handler);
 8002aae:	4810      	ldr	r0, [pc, #64]	; (8002af0 <zmk_endpoints_init+0x48>)
 8002ab0:	f003 fcac 	bl	800640c <settings_register>
    if (err) {
 8002ab4:	4604      	mov	r4, r0
 8002ab6:	b940      	cbnz	r0, 8002aca <zmk_endpoints_init+0x22>
    k_delayed_work_init(&endpoints_save_work, endpoints_save_preferred_work);
 8002ab8:	490e      	ldr	r1, [pc, #56]	; (8002af4 <zmk_endpoints_init+0x4c>)
 8002aba:	480f      	ldr	r0, [pc, #60]	; (8002af8 <zmk_endpoints_init+0x50>)
 8002abc:	f01a fa34 	bl	801cf28 <k_delayed_work_init>
    settings_load_subtree("endpoints");
 8002ac0:	480e      	ldr	r0, [pc, #56]	; (8002afc <zmk_endpoints_init+0x54>)
 8002ac2:	f003 fc43 	bl	800634c <settings_load_subtree>
}
 8002ac6:	4620      	mov	r0, r4
 8002ac8:	bd10      	pop	{r4, pc}
        LOG_ERR("Failed to register the endpoints settings handler (err %d)", err);
 8002aca:	f04f 0200 	mov.w	r2, #0
 8002ace:	2301      	movs	r3, #1
 8002ad0:	f363 0202 	bfi	r2, r3, #0, #3
 8002ad4:	f36f 02c5 	bfc	r2, #3, #3
 8002ad8:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <zmk_endpoints_init+0x58>)
 8002ada:	490a      	ldr	r1, [pc, #40]	; (8002b04 <zmk_endpoints_init+0x5c>)
 8002adc:	1a5b      	subs	r3, r3, r1
 8002ade:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8002ae2:	f363 128f 	bfi	r2, r3, #6, #10
 8002ae6:	4601      	mov	r1, r0
 8002ae8:	4807      	ldr	r0, [pc, #28]	; (8002b08 <zmk_endpoints_init+0x60>)
 8002aea:	f001 fbbf 	bl	800426c <log_1>
        return err;
 8002aee:	e7ea      	b.n	8002ac6 <zmk_endpoints_init+0x1e>
 8002af0:	20000328 	.word	0x20000328
 8002af4:	08002b0d 	.word	0x08002b0d
 8002af8:	20000bc0 	.word	0x20000bc0
 8002afc:	0801ea60 	.word	0x0801ea60
 8002b00:	0801d7a0 	.word	0x0801d7a0
 8002b04:	0801d6d0 	.word	0x0801d6d0
 8002b08:	0801ea24 	.word	0x0801ea24

08002b0c <endpoints_save_preferred_work>:
static void endpoints_save_preferred_work(struct k_work *work) {
 8002b0c:	b508      	push	{r3, lr}
    settings_save_one("endpoints/preferred", &preferred_endpoint, sizeof(preferred_endpoint));
 8002b0e:	2201      	movs	r2, #1
 8002b10:	4902      	ldr	r1, [pc, #8]	; (8002b1c <endpoints_save_preferred_work+0x10>)
 8002b12:	4803      	ldr	r0, [pc, #12]	; (8002b20 <endpoints_save_preferred_work+0x14>)
 8002b14:	f003 fbde 	bl	80062d4 <settings_save_one>
}
 8002b18:	bd08      	pop	{r3, pc}
 8002b1a:	bf00      	nop
 8002b1c:	200034f8 	.word	0x200034f8
 8002b20:	0801ea6c 	.word	0x0801ea6c

08002b24 <zmk_endpoints_send_report>:
int zmk_endpoints_send_report(uint16_t usage_page) {
 8002b24:	b510      	push	{r4, lr}
 8002b26:	4604      	mov	r4, r0
    LOG_DBG("usage page 0x%02X", usage_page);
 8002b28:	f04f 0300 	mov.w	r3, #0
 8002b2c:	2204      	movs	r2, #4
 8002b2e:	f362 0302 	bfi	r3, r2, #0, #3
 8002b32:	f36f 03c5 	bfc	r3, #3, #3
 8002b36:	4a15      	ldr	r2, [pc, #84]	; (8002b8c <zmk_endpoints_send_report+0x68>)
 8002b38:	4915      	ldr	r1, [pc, #84]	; (8002b90 <zmk_endpoints_send_report+0x6c>)
 8002b3a:	1a52      	subs	r2, r2, r1
 8002b3c:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8002b40:	f362 138f 	bfi	r3, r2, #6, #10
 8002b44:	4602      	mov	r2, r0
 8002b46:	4913      	ldr	r1, [pc, #76]	; (8002b94 <zmk_endpoints_send_report+0x70>)
 8002b48:	4813      	ldr	r0, [pc, #76]	; (8002b98 <zmk_endpoints_send_report+0x74>)
 8002b4a:	f001 fc0f 	bl	800436c <log_2>
    switch (usage_page) {
 8002b4e:	2c07      	cmp	r4, #7
 8002b50:	d016      	beq.n	8002b80 <zmk_endpoints_send_report+0x5c>
 8002b52:	2c0c      	cmp	r4, #12
 8002b54:	d017      	beq.n	8002b86 <zmk_endpoints_send_report+0x62>
        LOG_ERR("Unsupported usage page %d", usage_page);
 8002b56:	f04f 0200 	mov.w	r2, #0
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	f363 0202 	bfi	r2, r3, #0, #3
 8002b60:	f36f 02c5 	bfc	r2, #3, #3
 8002b64:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <zmk_endpoints_send_report+0x68>)
 8002b66:	490a      	ldr	r1, [pc, #40]	; (8002b90 <zmk_endpoints_send_report+0x6c>)
 8002b68:	1a5b      	subs	r3, r3, r1
 8002b6a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8002b6e:	f363 128f 	bfi	r2, r3, #6, #10
 8002b72:	4621      	mov	r1, r4
 8002b74:	4809      	ldr	r0, [pc, #36]	; (8002b9c <zmk_endpoints_send_report+0x78>)
 8002b76:	f001 fb79 	bl	800426c <log_1>
        return -ENOTSUP;
 8002b7a:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8002b7e:	e001      	b.n	8002b84 <zmk_endpoints_send_report+0x60>
        return send_keyboard_report();
 8002b80:	f7ff feda 	bl	8002938 <send_keyboard_report>
}
 8002b84:	bd10      	pop	{r4, pc}
        return send_consumer_report();
 8002b86:	f7ff ff33 	bl	80029f0 <send_consumer_report>
 8002b8a:	e7fb      	b.n	8002b84 <zmk_endpoints_send_report+0x60>
 8002b8c:	0801d7a0 	.word	0x0801d7a0
 8002b90:	0801d6d0 	.word	0x0801d6d0
 8002b94:	0801eb60 	.word	0x0801eb60
 8002b98:	0801ea80 	.word	0x0801ea80
 8002b9c:	0801ea98 	.word	0x0801ea98

08002ba0 <update_current_endpoint>:

    zmk_endpoints_send_report(HID_USAGE_KEY);
    zmk_endpoints_send_report(HID_USAGE_CONSUMER);
}

static void update_current_endpoint() {
 8002ba0:	b510      	push	{r4, lr}
    enum zmk_endpoint new_endpoint = get_selected_endpoint();
 8002ba2:	f7ff fe5d 	bl	8002860 <get_selected_endpoint>

    if (new_endpoint != current_endpoint) {
 8002ba6:	4b0e      	ldr	r3, [pc, #56]	; (8002be0 <update_current_endpoint+0x40>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	4283      	cmp	r3, r0
 8002bac:	d100      	bne.n	8002bb0 <update_current_endpoint+0x10>
        disconnect_current_endpoint();

        current_endpoint = new_endpoint;
        LOG_INF("Endpoint changed: %d", current_endpoint);
    }
}
 8002bae:	bd10      	pop	{r4, pc}
 8002bb0:	4604      	mov	r4, r0
        disconnect_current_endpoint();
 8002bb2:	f012 fabc 	bl	801512e <disconnect_current_endpoint>
        current_endpoint = new_endpoint;
 8002bb6:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <update_current_endpoint+0x40>)
 8002bb8:	701c      	strb	r4, [r3, #0]
        LOG_INF("Endpoint changed: %d", current_endpoint);
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	f363 0202 	bfi	r2, r3, #0, #3
 8002bc4:	f36f 02c5 	bfc	r2, #3, #3
 8002bc8:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <update_current_endpoint+0x44>)
 8002bca:	4907      	ldr	r1, [pc, #28]	; (8002be8 <update_current_endpoint+0x48>)
 8002bcc:	1a5b      	subs	r3, r3, r1
 8002bce:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8002bd2:	f363 128f 	bfi	r2, r3, #6, #10
 8002bd6:	4621      	mov	r1, r4
 8002bd8:	4804      	ldr	r0, [pc, #16]	; (8002bec <update_current_endpoint+0x4c>)
 8002bda:	f001 fb47 	bl	800426c <log_1>
}
 8002bde:	e7e6      	b.n	8002bae <update_current_endpoint+0xe>
 8002be0:	200005a2 	.word	0x200005a2
 8002be4:	0801d7a0 	.word	0x0801d7a0
 8002be8:	0801d6d0 	.word	0x0801d6d0
 8002bec:	0801eab4 	.word	0x0801eab4

08002bf0 <endpoints_handle_set>:
                                void *cb_arg) {
 8002bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bf4:	4681      	mov	r9, r0
 8002bf6:	460e      	mov	r6, r1
 8002bf8:	4617      	mov	r7, r2
 8002bfa:	4698      	mov	r8, r3
    LOG_DBG("Setting endpoint value %s", log_strdup(name));
 8002bfc:	f04f 0500 	mov.w	r5, #0
 8002c00:	2304      	movs	r3, #4
 8002c02:	f363 0502 	bfi	r5, r3, #0, #3
 8002c06:	f36f 05c5 	bfc	r5, #3, #3
 8002c0a:	4c26      	ldr	r4, [pc, #152]	; (8002ca4 <endpoints_handle_set+0xb4>)
 8002c0c:	4b26      	ldr	r3, [pc, #152]	; (8002ca8 <endpoints_handle_set+0xb8>)
 8002c0e:	1ae4      	subs	r4, r4, r3
 8002c10:	f3c4 04c9 	ubfx	r4, r4, #3, #10
 8002c14:	f364 158f 	bfi	r5, r4, #6, #10
 8002c18:	f001 f958 	bl	8003ecc <log_strdup>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	462b      	mov	r3, r5
 8002c20:	4922      	ldr	r1, [pc, #136]	; (8002cac <endpoints_handle_set+0xbc>)
 8002c22:	4823      	ldr	r0, [pc, #140]	; (8002cb0 <endpoints_handle_set+0xc0>)
 8002c24:	f001 fba2 	bl	800436c <log_2>
    if (settings_name_steq(name, "preferred", NULL)) {
 8002c28:	2200      	movs	r2, #0
 8002c2a:	4922      	ldr	r1, [pc, #136]	; (8002cb4 <endpoints_handle_set+0xc4>)
 8002c2c:	4648      	mov	r0, r9
 8002c2e:	f014 f96c 	bl	8016f0a <settings_name_steq>
 8002c32:	4604      	mov	r4, r0
 8002c34:	b150      	cbz	r0, 8002c4c <endpoints_handle_set+0x5c>
        if (len != sizeof(enum zmk_endpoint)) {
 8002c36:	2e01      	cmp	r6, #1
 8002c38:	d10b      	bne.n	8002c52 <endpoints_handle_set+0x62>
        int err = read_cb(cb_arg, &preferred_endpoint, sizeof(enum zmk_endpoint));
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	491e      	ldr	r1, [pc, #120]	; (8002cb8 <endpoints_handle_set+0xc8>)
 8002c3e:	4640      	mov	r0, r8
 8002c40:	47b8      	blx	r7
        if (err <= 0) {
 8002c42:	1e04      	subs	r4, r0, #0
 8002c44:	dd1a      	ble.n	8002c7c <endpoints_handle_set+0x8c>
        update_current_endpoint();
 8002c46:	f7ff ffab 	bl	8002ba0 <update_current_endpoint>
    return 0;
 8002c4a:	2400      	movs	r4, #0
}
 8002c4c:	4620      	mov	r0, r4
 8002c4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            LOG_ERR("Invalid endpoint size (got %d expected %d)", len, sizeof(enum zmk_endpoint));
 8002c52:	2201      	movs	r2, #1
 8002c54:	f04f 0300 	mov.w	r3, #0
 8002c58:	f362 0302 	bfi	r3, r2, #0, #3
 8002c5c:	f36f 03c5 	bfc	r3, #3, #3
 8002c60:	4910      	ldr	r1, [pc, #64]	; (8002ca4 <endpoints_handle_set+0xb4>)
 8002c62:	4811      	ldr	r0, [pc, #68]	; (8002ca8 <endpoints_handle_set+0xb8>)
 8002c64:	1a09      	subs	r1, r1, r0
 8002c66:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 8002c6a:	f361 138f 	bfi	r3, r1, #6, #10
 8002c6e:	4631      	mov	r1, r6
 8002c70:	4812      	ldr	r0, [pc, #72]	; (8002cbc <endpoints_handle_set+0xcc>)
 8002c72:	f001 fb7b 	bl	800436c <log_2>
            return -EINVAL;
 8002c76:	f06f 0415 	mvn.w	r4, #21
 8002c7a:	e7e7      	b.n	8002c4c <endpoints_handle_set+0x5c>
            LOG_ERR("Failed to read preferred endpoint from settings (err %d)", err);
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	2301      	movs	r3, #1
 8002c82:	f363 0202 	bfi	r2, r3, #0, #3
 8002c86:	f36f 02c5 	bfc	r2, #3, #3
 8002c8a:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <endpoints_handle_set+0xb4>)
 8002c8c:	4906      	ldr	r1, [pc, #24]	; (8002ca8 <endpoints_handle_set+0xb8>)
 8002c8e:	1a5b      	subs	r3, r3, r1
 8002c90:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8002c94:	f363 128f 	bfi	r2, r3, #6, #10
 8002c98:	4621      	mov	r1, r4
 8002c9a:	4809      	ldr	r0, [pc, #36]	; (8002cc0 <endpoints_handle_set+0xd0>)
 8002c9c:	f001 fae6 	bl	800426c <log_1>
            return err;
 8002ca0:	e7d4      	b.n	8002c4c <endpoints_handle_set+0x5c>
 8002ca2:	bf00      	nop
 8002ca4:	0801d7a0 	.word	0x0801d7a0
 8002ca8:	0801d6d0 	.word	0x0801d6d0
 8002cac:	0801eb7c 	.word	0x0801eb7c
 8002cb0:	0801eacc 	.word	0x0801eacc
 8002cb4:	0801eaec 	.word	0x0801eaec
 8002cb8:	200034f8 	.word	0x200034f8
 8002cbc:	0801eaf8 	.word	0x0801eaf8
 8002cc0:	0801eb24 	.word	0x0801eb24

08002cc4 <hid_listener_keycode_pressed>:
#include <zmk/events/modifiers_state_changed.h>
#include <zmk/hid.h>
#include <dt-bindings/zmk/hid_usage_pages.h>
#include <zmk/endpoints.h>

static int hid_listener_keycode_pressed(const struct zmk_keycode_state_changed *ev) {
 8002cc4:	b530      	push	{r4, r5, lr}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	4604      	mov	r4, r0
    int err;
    LOG_DBG("usage_page 0x%02X keycode 0x%02X implicit_mods 0x%02X explicit_mods 0x%02X",
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	2204      	movs	r2, #4
 8002cd0:	f362 0302 	bfi	r3, r2, #0, #3
 8002cd4:	f36f 03c5 	bfc	r3, #3, #3
 8002cd8:	4a2b      	ldr	r2, [pc, #172]	; (8002d88 <hid_listener_keycode_pressed+0xc4>)
 8002cda:	492c      	ldr	r1, [pc, #176]	; (8002d8c <hid_listener_keycode_pressed+0xc8>)
 8002cdc:	1a52      	subs	r2, r2, r1
 8002cde:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8002ce2:	f362 138f 	bfi	r3, r2, #6, #10
 8002ce6:	4a2a      	ldr	r2, [pc, #168]	; (8002d90 <hid_listener_keycode_pressed+0xcc>)
 8002ce8:	9201      	str	r2, [sp, #4]
 8002cea:	8802      	ldrh	r2, [r0, #0]
 8002cec:	9202      	str	r2, [sp, #8]
 8002cee:	6842      	ldr	r2, [r0, #4]
 8002cf0:	9203      	str	r2, [sp, #12]
 8002cf2:	7a02      	ldrb	r2, [r0, #8]
 8002cf4:	9204      	str	r2, [sp, #16]
 8002cf6:	7a42      	ldrb	r2, [r0, #9]
 8002cf8:	9205      	str	r2, [sp, #20]
 8002cfa:	2205      	movs	r2, #5
 8002cfc:	a901      	add	r1, sp, #4
 8002cfe:	4825      	ldr	r0, [pc, #148]	; (8002d94 <hid_listener_keycode_pressed+0xd0>)
 8002d00:	f001 fbb8 	bl	8004474 <log_n>
            ev->usage_page, ev->keycode, ev->implicit_modifiers, ev->explicit_modifiers);
    switch (ev->usage_page) {
 8002d04:	8823      	ldrh	r3, [r4, #0]
 8002d06:	2b07      	cmp	r3, #7
 8002d08:	d00e      	beq.n	8002d28 <hid_listener_keycode_pressed+0x64>
 8002d0a:	2b0c      	cmp	r3, #12
 8002d0c:	d024      	beq.n	8002d58 <hid_listener_keycode_pressed+0x94>
            LOG_ERR("Unable to press keycode");
            return err;
        }
        break;
    }
    zmk_hid_register_mods(ev->explicit_modifiers);
 8002d0e:	7a60      	ldrb	r0, [r4, #9]
 8002d10:	f012 f93a 	bl	8014f88 <zmk_hid_register_mods>
    zmk_hid_implicit_modifiers_press(ev->implicit_modifiers);
 8002d14:	7a20      	ldrb	r0, [r4, #8]
 8002d16:	f7fd fdb3 	bl	8000880 <zmk_hid_implicit_modifiers_press>
    return zmk_endpoints_send_report(ev->usage_page);
 8002d1a:	8820      	ldrh	r0, [r4, #0]
 8002d1c:	f7ff ff02 	bl	8002b24 <zmk_endpoints_send_report>
 8002d20:	4605      	mov	r5, r0
}
 8002d22:	4628      	mov	r0, r5
 8002d24:	b007      	add	sp, #28
 8002d26:	bd30      	pop	{r4, r5, pc}
        err = zmk_hid_keyboard_press(ev->keycode);
 8002d28:	6860      	ldr	r0, [r4, #4]
 8002d2a:	f7fd fdf5 	bl	8000918 <zmk_hid_keyboard_press>
        if (err) {
 8002d2e:	4605      	mov	r5, r0
 8002d30:	2800      	cmp	r0, #0
 8002d32:	d0ec      	beq.n	8002d0e <hid_listener_keycode_pressed+0x4a>
            LOG_ERR("Unable to press keycode");
 8002d34:	f04f 0100 	mov.w	r1, #0
 8002d38:	2301      	movs	r3, #1
 8002d3a:	f363 0102 	bfi	r1, r3, #0, #3
 8002d3e:	f36f 01c5 	bfc	r1, #3, #3
 8002d42:	4b11      	ldr	r3, [pc, #68]	; (8002d88 <hid_listener_keycode_pressed+0xc4>)
 8002d44:	4a11      	ldr	r2, [pc, #68]	; (8002d8c <hid_listener_keycode_pressed+0xc8>)
 8002d46:	1a9b      	subs	r3, r3, r2
 8002d48:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8002d4c:	f363 118f 	bfi	r1, r3, #6, #10
 8002d50:	4811      	ldr	r0, [pc, #68]	; (8002d98 <hid_listener_keycode_pressed+0xd4>)
 8002d52:	f001 fbfb 	bl	800454c <log_0>
            return err;
 8002d56:	e7e4      	b.n	8002d22 <hid_listener_keycode_pressed+0x5e>
        err = zmk_hid_consumer_press(ev->keycode);
 8002d58:	6860      	ldr	r0, [r4, #4]
 8002d5a:	f7fd fe25 	bl	80009a8 <zmk_hid_consumer_press>
        if (err) {
 8002d5e:	4605      	mov	r5, r0
 8002d60:	2800      	cmp	r0, #0
 8002d62:	d0d4      	beq.n	8002d0e <hid_listener_keycode_pressed+0x4a>
            LOG_ERR("Unable to press keycode");
 8002d64:	f04f 0100 	mov.w	r1, #0
 8002d68:	2301      	movs	r3, #1
 8002d6a:	f363 0102 	bfi	r1, r3, #0, #3
 8002d6e:	f36f 01c5 	bfc	r1, #3, #3
 8002d72:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <hid_listener_keycode_pressed+0xc4>)
 8002d74:	4a05      	ldr	r2, [pc, #20]	; (8002d8c <hid_listener_keycode_pressed+0xc8>)
 8002d76:	1a9b      	subs	r3, r3, r2
 8002d78:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8002d7c:	f363 118f 	bfi	r1, r3, #6, #10
 8002d80:	4805      	ldr	r0, [pc, #20]	; (8002d98 <hid_listener_keycode_pressed+0xd4>)
 8002d82:	f001 fbe3 	bl	800454c <log_0>
            return err;
 8002d86:	e7cc      	b.n	8002d22 <hid_listener_keycode_pressed+0x5e>
 8002d88:	0801d7a0 	.word	0x0801d7a0
 8002d8c:	0801d6d0 	.word	0x0801d6d0
 8002d90:	0801ec34 	.word	0x0801ec34
 8002d94:	0801ebb0 	.word	0x0801ebb0
 8002d98:	0801ec00 	.word	0x0801ec00

08002d9c <hid_listener_keycode_released>:

static int hid_listener_keycode_released(const struct zmk_keycode_state_changed *ev) {
 8002d9c:	b530      	push	{r4, r5, lr}
 8002d9e:	b087      	sub	sp, #28
 8002da0:	4604      	mov	r4, r0
    int err;
    LOG_DBG("usage_page 0x%02X keycode 0x%02X implicit_mods 0x%02X explicit_mods 0x%02X",
 8002da2:	f04f 0300 	mov.w	r3, #0
 8002da6:	2204      	movs	r2, #4
 8002da8:	f362 0302 	bfi	r3, r2, #0, #3
 8002dac:	f36f 03c5 	bfc	r3, #3, #3
 8002db0:	4a2b      	ldr	r2, [pc, #172]	; (8002e60 <hid_listener_keycode_released+0xc4>)
 8002db2:	492c      	ldr	r1, [pc, #176]	; (8002e64 <hid_listener_keycode_released+0xc8>)
 8002db4:	1a52      	subs	r2, r2, r1
 8002db6:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8002dba:	f362 138f 	bfi	r3, r2, #6, #10
 8002dbe:	4a2a      	ldr	r2, [pc, #168]	; (8002e68 <hid_listener_keycode_released+0xcc>)
 8002dc0:	9201      	str	r2, [sp, #4]
 8002dc2:	8802      	ldrh	r2, [r0, #0]
 8002dc4:	9202      	str	r2, [sp, #8]
 8002dc6:	6842      	ldr	r2, [r0, #4]
 8002dc8:	9203      	str	r2, [sp, #12]
 8002dca:	7a02      	ldrb	r2, [r0, #8]
 8002dcc:	9204      	str	r2, [sp, #16]
 8002dce:	7a42      	ldrb	r2, [r0, #9]
 8002dd0:	9205      	str	r2, [sp, #20]
 8002dd2:	2205      	movs	r2, #5
 8002dd4:	a901      	add	r1, sp, #4
 8002dd6:	4825      	ldr	r0, [pc, #148]	; (8002e6c <hid_listener_keycode_released+0xd0>)
 8002dd8:	f001 fb4c 	bl	8004474 <log_n>
            ev->usage_page, ev->keycode, ev->implicit_modifiers, ev->explicit_modifiers);
    switch (ev->usage_page) {
 8002ddc:	8823      	ldrh	r3, [r4, #0]
 8002dde:	2b07      	cmp	r3, #7
 8002de0:	d00d      	beq.n	8002dfe <hid_listener_keycode_released+0x62>
 8002de2:	2b0c      	cmp	r3, #12
 8002de4:	d023      	beq.n	8002e2e <hid_listener_keycode_released+0x92>
        if (err) {
            LOG_ERR("Unable to release keycode");
            return err;
        }
    }
    zmk_hid_unregister_mods(ev->explicit_modifiers);
 8002de6:	7a60      	ldrb	r0, [r4, #9]
 8002de8:	f012 f8e1 	bl	8014fae <zmk_hid_unregister_mods>
    // There is a minor issue with this code.
    // If LC(A) is pressed, then LS(B), then LC(A) is released, the shift for B will be released
    // prematurely. This causes if LS(B) to repeat like Bbbbbbbb when pressed for a long time.
    // Solving this would require keeping track of which key's implicit modifiers are currently
    // active and only releasing modifiers at that time.
    zmk_hid_implicit_modifiers_release();
 8002dec:	f7fd fd6e 	bl	80008cc <zmk_hid_implicit_modifiers_release>
    return zmk_endpoints_send_report(ev->usage_page);
 8002df0:	8820      	ldrh	r0, [r4, #0]
 8002df2:	f7ff fe97 	bl	8002b24 <zmk_endpoints_send_report>
 8002df6:	4605      	mov	r5, r0
}
 8002df8:	4628      	mov	r0, r5
 8002dfa:	b007      	add	sp, #28
 8002dfc:	bd30      	pop	{r4, r5, pc}
        err = zmk_hid_keyboard_release(ev->keycode);
 8002dfe:	6860      	ldr	r0, [r4, #4]
 8002e00:	f7fd fdaa 	bl	8000958 <zmk_hid_keyboard_release>
        if (err) {
 8002e04:	4605      	mov	r5, r0
 8002e06:	2800      	cmp	r0, #0
 8002e08:	d0ed      	beq.n	8002de6 <hid_listener_keycode_released+0x4a>
            LOG_ERR("Unable to release keycode");
 8002e0a:	f04f 0100 	mov.w	r1, #0
 8002e0e:	2301      	movs	r3, #1
 8002e10:	f363 0102 	bfi	r1, r3, #0, #3
 8002e14:	f36f 01c5 	bfc	r1, #3, #3
 8002e18:	4b11      	ldr	r3, [pc, #68]	; (8002e60 <hid_listener_keycode_released+0xc4>)
 8002e1a:	4a12      	ldr	r2, [pc, #72]	; (8002e64 <hid_listener_keycode_released+0xc8>)
 8002e1c:	1a9b      	subs	r3, r3, r2
 8002e1e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8002e22:	f363 118f 	bfi	r1, r3, #6, #10
 8002e26:	4812      	ldr	r0, [pc, #72]	; (8002e70 <hid_listener_keycode_released+0xd4>)
 8002e28:	f001 fb90 	bl	800454c <log_0>
            return err;
 8002e2c:	e7e4      	b.n	8002df8 <hid_listener_keycode_released+0x5c>
        err = zmk_hid_consumer_release(ev->keycode);
 8002e2e:	6860      	ldr	r0, [r4, #4]
 8002e30:	f7fd fdd2 	bl	80009d8 <zmk_hid_consumer_release>
        if (err) {
 8002e34:	4605      	mov	r5, r0
 8002e36:	2800      	cmp	r0, #0
 8002e38:	d0d5      	beq.n	8002de6 <hid_listener_keycode_released+0x4a>
            LOG_ERR("Unable to release keycode");
 8002e3a:	f04f 0100 	mov.w	r1, #0
 8002e3e:	2301      	movs	r3, #1
 8002e40:	f363 0102 	bfi	r1, r3, #0, #3
 8002e44:	f36f 01c5 	bfc	r1, #3, #3
 8002e48:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <hid_listener_keycode_released+0xc4>)
 8002e4a:	4a06      	ldr	r2, [pc, #24]	; (8002e64 <hid_listener_keycode_released+0xc8>)
 8002e4c:	1a9b      	subs	r3, r3, r2
 8002e4e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8002e52:	f363 118f 	bfi	r1, r3, #6, #10
 8002e56:	4806      	ldr	r0, [pc, #24]	; (8002e70 <hid_listener_keycode_released+0xd4>)
 8002e58:	f001 fb78 	bl	800454c <log_0>
            return err;
 8002e5c:	e7cc      	b.n	8002df8 <hid_listener_keycode_released+0x5c>
 8002e5e:	bf00      	nop
 8002e60:	0801d7a0 	.word	0x0801d7a0
 8002e64:	0801d6d0 	.word	0x0801d6d0
 8002e68:	0801ec54 	.word	0x0801ec54
 8002e6c:	0801ebb0 	.word	0x0801ebb0
 8002e70:	0801ec18 	.word	0x0801ec18

08002e74 <main>:
#include <zmk/display.h>
#include <drivers/ext_power.h>

#define ZMK_KSCAN_DEV DT_LABEL(ZMK_MATRIX_NODE_ID)

void main(void) {
 8002e74:	b508      	push	{r3, lr}
    LOG_INF("Welcome to ZMK!\n");
 8002e76:	f04f 0100 	mov.w	r1, #0
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	f363 0102 	bfi	r1, r3, #0, #3
 8002e80:	f36f 01c5 	bfc	r1, #3, #3
 8002e84:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <main+0x2c>)
 8002e86:	4a07      	ldr	r2, [pc, #28]	; (8002ea4 <main+0x30>)
 8002e88:	1a9b      	subs	r3, r3, r2
 8002e8a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8002e8e:	f363 118f 	bfi	r1, r3, #6, #10
 8002e92:	4805      	ldr	r0, [pc, #20]	; (8002ea8 <main+0x34>)
 8002e94:	f001 fb5a 	bl	800454c <log_0>

    if (zmk_kscan_init(ZMK_KSCAN_DEV) != 0) {
 8002e98:	4804      	ldr	r0, [pc, #16]	; (8002eac <main+0x38>)
 8002e9a:	f7fd fbe5 	bl	8000668 <zmk_kscan_init>
    }

#ifdef CONFIG_ZMK_DISPLAY
    zmk_display_init();
#endif /* CONFIG_ZMK_DISPLAY */
}
 8002e9e:	bd08      	pop	{r3, pc}
 8002ea0:	0801d7a0 	.word	0x0801d7a0
 8002ea4:	0801d6d0 	.word	0x0801d6d0
 8002ea8:	0801ec78 	.word	0x0801ec78
 8002eac:	0801ec8c 	.word	0x0801ec8c

08002eb0 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
 8002eb0:	b430      	push	{r4, r5}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
 8002eb2:	2400      	movs	r4, #0
 8002eb4:	4294      	cmp	r4, r2
 8002eb6:	d20f      	bcs.n	8002ed8 <crc8_ccitt+0x28>
		val ^= p[i];
 8002eb8:	5d0b      	ldrb	r3, [r1, r4]
 8002eba:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
 8002ebc:	0918      	lsrs	r0, r3, #4
 8002ebe:	4d07      	ldr	r5, [pc, #28]	; (8002edc <crc8_ccitt+0x2c>)
 8002ec0:	5628      	ldrsb	r0, [r5, r0]
 8002ec2:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
 8002ec6:	b2c3      	uxtb	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
 8002ec8:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8002ecc:	5628      	ldrsb	r0, [r5, r0]
 8002ece:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
 8002ed2:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
 8002ed4:	3401      	adds	r4, #1
 8002ed6:	e7ed      	b.n	8002eb4 <crc8_ccitt+0x4>
	}
	return val;
}
 8002ed8:	bc30      	pop	{r4, r5}
 8002eda:	4770      	bx	lr
 8002edc:	0801ec98 	.word	0x0801ec98

08002ee0 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
 8002ee0:	b430      	push	{r4, r5}
 8002ee2:	4605      	mov	r5, r0
	uint8_t divisor = 100;
	uint8_t num_digits = 0;
 8002ee4:	2000      	movs	r0, #0
	uint8_t divisor = 100;
 8002ee6:	2364      	movs	r3, #100	; 0x64
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
 8002ee8:	e00f      	b.n	8002f0a <u8_to_dec+0x2a>
		digit = value / divisor;
		if (digit != 0 || divisor == 1 || num_digits != 0) {
			*buf = (char)digit + '0';
 8002eea:	3430      	adds	r4, #48	; 0x30
 8002eec:	f805 4b01 	strb.w	r4, [r5], #1
			buf++;
			buflen--;
 8002ef0:	3901      	subs	r1, #1
 8002ef2:	b2c9      	uxtb	r1, r1
			num_digits++;
 8002ef4:	3001      	adds	r0, #1
 8002ef6:	b2c0      	uxtb	r0, r0
		}

		value -= digit * divisor;
 8002ef8:	fbb2 f4f3 	udiv	r4, r2, r3
 8002efc:	fb03 2214 	mls	r2, r3, r4, r2
 8002f00:	b2d2      	uxtb	r2, r2
		divisor /= 10;
 8002f02:	4c0a      	ldr	r4, [pc, #40]	; (8002f2c <u8_to_dec+0x4c>)
 8002f04:	fba4 4303 	umull	r4, r3, r4, r3
 8002f08:	08db      	lsrs	r3, r3, #3
	while (buflen > 0 && divisor > 0) {
 8002f0a:	b149      	cbz	r1, 8002f20 <u8_to_dec+0x40>
 8002f0c:	b143      	cbz	r3, 8002f20 <u8_to_dec+0x40>
		digit = value / divisor;
 8002f0e:	fbb2 f4f3 	udiv	r4, r2, r3
		if (digit != 0 || divisor == 1 || num_digits != 0) {
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d2e9      	bcs.n	8002eea <u8_to_dec+0xa>
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d0e7      	beq.n	8002eea <u8_to_dec+0xa>
 8002f1a:	2800      	cmp	r0, #0
 8002f1c:	d0ec      	beq.n	8002ef8 <u8_to_dec+0x18>
 8002f1e:	e7e4      	b.n	8002eea <u8_to_dec+0xa>
	}

	if (buflen) {
 8002f20:	b109      	cbz	r1, 8002f26 <u8_to_dec+0x46>
		*buf = '\0';
 8002f22:	2300      	movs	r3, #0
 8002f24:	702b      	strb	r3, [r5, #0]
	}

	return num_digits;
}
 8002f26:	bc30      	pop	{r4, r5}
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	cccccccd 	.word	0xcccccccd

08002f30 <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
			 bool pad_before, char pad_char, int min_width)
{
 8002f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f34:	b089      	sub	sp, #36	; 0x24
 8002f36:	4692      	mov	sl, r2
 8002f38:	469b      	mov	fp, r3
 8002f3a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8002f3e:	9301      	str	r3, [sp, #4]
 8002f40:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
	char buf[DIGITS_BUFLEN];
	int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
 8002f44:	2414      	movs	r4, #20
 8002f46:	9700      	str	r7, [sp, #0]
 8002f48:	460f      	mov	r7, r1
 8002f4a:	4606      	mov	r6, r0
 8002f4c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8002f4e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002f52:	d018      	beq.n	8002f86 <print_digits+0x56>
		buf[i] = "0123456789abcdef"[num % base];
 8002f54:	ea4f 79e5 	mov.w	r9, r5, asr #31
 8002f58:	462a      	mov	r2, r5
 8002f5a:	464b      	mov	r3, r9
 8002f5c:	4650      	mov	r0, sl
 8002f5e:	4659      	mov	r1, fp
 8002f60:	f7fd f912 	bl	8000188 <__aeabi_uldivmod>
 8002f64:	4b27      	ldr	r3, [pc, #156]	; (8003004 <print_digits+0xd4>)
 8002f66:	4413      	add	r3, r2
 8002f68:	781a      	ldrb	r2, [r3, #0]
 8002f6a:	ab08      	add	r3, sp, #32
 8002f6c:	4423      	add	r3, r4
 8002f6e:	f803 2c18 	strb.w	r2, [r3, #-24]
		num /= base;
 8002f72:	462a      	mov	r2, r5
 8002f74:	464b      	mov	r3, r9
 8002f76:	4650      	mov	r0, sl
 8002f78:	4659      	mov	r1, fp
 8002f7a:	f7fd f905 	bl	8000188 <__aeabi_uldivmod>
 8002f7e:	4682      	mov	sl, r0
 8002f80:	468b      	mov	fp, r1
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
 8002f82:	3c01      	subs	r4, #1
 8002f84:	e7e3      	b.n	8002f4e <print_digits+0x1e>
 8002f86:	4635      	mov	r5, r6
 8002f88:	463e      	mov	r6, r7
 8002f8a:	9f00      	ldr	r7, [sp, #0]
	}

	if (i == DIGITS_BUFLEN - 1) {
 8002f8c:	2c14      	cmp	r4, #20
 8002f8e:	d00b      	beq.n	8002fa8 <print_digits+0x78>
		buf[i] = '0';
	} else {
		i++;
 8002f90:	3401      	adds	r4, #1
	}

	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
 8002f92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002f94:	eb04 0803 	add.w	r8, r4, r3
 8002f98:	f1b8 0f15 	cmp.w	r8, #21
 8002f9c:	d00a      	beq.n	8002fb4 <print_digits+0x84>
 8002f9e:	f1a8 0815 	sub.w	r8, r8, #21
 8002fa2:	46a1      	mov	r9, r4
 8002fa4:	9c01      	ldr	r4, [sp, #4]
 8002fa6:	e00f      	b.n	8002fc8 <print_digits+0x98>
		buf[i] = '0';
 8002fa8:	2230      	movs	r2, #48	; 0x30
 8002faa:	ab08      	add	r3, sp, #32
 8002fac:	4423      	add	r3, r4
 8002fae:	f803 2c18 	strb.w	r2, [r3, #-24]
 8002fb2:	e7ee      	b.n	8002f92 <print_digits+0x62>
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
 8002fb4:	f04f 0800 	mov.w	r8, #0
 8002fb8:	46a1      	mov	r9, r4
 8002fba:	9c01      	ldr	r4, [sp, #4]
 8002fbc:	e004      	b.n	8002fc8 <print_digits+0x98>

	for (/**/; pad > 0 && pad_before; pad--) {
		out(pad_char, ctx);
 8002fbe:	4631      	mov	r1, r6
 8002fc0:	4638      	mov	r0, r7
 8002fc2:	47a8      	blx	r5
	for (/**/; pad > 0 && pad_before; pad--) {
 8002fc4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8002fc8:	f1b8 0f00 	cmp.w	r8, #0
 8002fcc:	dd03      	ble.n	8002fd6 <print_digits+0xa6>
 8002fce:	2c00      	cmp	r4, #0
 8002fd0:	d1f5      	bne.n	8002fbe <print_digits+0x8e>
 8002fd2:	464c      	mov	r4, r9
 8002fd4:	e000      	b.n	8002fd8 <print_digits+0xa8>
 8002fd6:	464c      	mov	r4, r9
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
 8002fd8:	2c14      	cmp	r4, #20
 8002fda:	d807      	bhi.n	8002fec <print_digits+0xbc>
		out(buf[i], ctx);
 8002fdc:	ab08      	add	r3, sp, #32
 8002fde:	4423      	add	r3, r4
 8002fe0:	4631      	mov	r1, r6
 8002fe2:	f813 0c18 	ldrb.w	r0, [r3, #-24]
 8002fe6:	47a8      	blx	r5
	for (/**/; i < DIGITS_BUFLEN; i++) {
 8002fe8:	3401      	adds	r4, #1
 8002fea:	e7f5      	b.n	8002fd8 <print_digits+0xa8>
	}
	for (/**/; pad > 0; pad--) {
 8002fec:	f1b8 0f00 	cmp.w	r8, #0
 8002ff0:	dd05      	ble.n	8002ffe <print_digits+0xce>
		out(pad_char, ctx);
 8002ff2:	4631      	mov	r1, r6
 8002ff4:	4638      	mov	r0, r7
 8002ff6:	47a8      	blx	r5
	for (/**/; pad > 0; pad--) {
 8002ff8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8002ffc:	e7f6      	b.n	8002fec <print_digits+0xbc>
	}
}
 8002ffe:	b009      	add	sp, #36	; 0x24
 8003000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003004:	0801eca8 	.word	0x0801eca8

08003008 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
 8003008:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
 800300a:	680b      	ldr	r3, [r1, #0]
 800300c:	3301      	adds	r3, #1
 800300e:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 8003010:	4b01      	ldr	r3, [pc, #4]	; (8003018 <char_out+0x10>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4798      	blx	r3
}
 8003016:	bd08      	pop	{r3, pc}
 8003018:	20000340 	.word	0x20000340

0800301c <__printk_hook_install>:
	_char_out = fn;
 800301c:	4b01      	ldr	r3, [pc, #4]	; (8003024 <__printk_hook_install+0x8>)
 800301e:	6018      	str	r0, [r3, #0]
}
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	20000340 	.word	0x20000340

08003028 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
 8003028:	b500      	push	{lr}
 800302a:	b083      	sub	sp, #12
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
 8003030:	2100      	movs	r1, #0
 8003032:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
 8003034:	a901      	add	r1, sp, #4
 8003036:	4803      	ldr	r0, [pc, #12]	; (8003044 <vprintk+0x1c>)
 8003038:	f012 f948 	bl	80152cc <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
 800303c:	b003      	add	sp, #12
 800303e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003042:	bf00      	nop
 8003044:	08003009 	.word	0x08003009

08003048 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
 8003048:	b510      	push	{r4, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
 800304e:	9001      	str	r0, [sp, #4]
 8003050:	9102      	str	r1, [sp, #8]
 8003052:	2100      	movs	r1, #0
 8003054:	9103      	str	r1, [sp, #12]

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
 8003056:	a901      	add	r1, sp, #4
 8003058:	4805      	ldr	r0, [pc, #20]	; (8003070 <vsnprintk+0x28>)
 800305a:	f012 f937 	bl	80152cc <z_vprintk>

	if (ctx.count < ctx.max) {
 800305e:	9b03      	ldr	r3, [sp, #12]
 8003060:	9a02      	ldr	r2, [sp, #8]
 8003062:	4293      	cmp	r3, r2
 8003064:	da01      	bge.n	800306a <vsnprintk+0x22>
		str[ctx.count] = '\0';
 8003066:	2200      	movs	r2, #0
 8003068:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
 800306a:	9803      	ldr	r0, [sp, #12]
 800306c:	b004      	add	sp, #16
 800306e:	bd10      	pop	{r4, pc}
 8003070:	0801529b 	.word	0x0801529b

08003074 <_ldiv5>:
 * six.  This was tested exhaustively through the first ~10B values in
 * the input space, and for ~2e12 (4 hours runtime) random inputs
 * taken from the full 64 bit space.
 */
static void _ldiv5(uint64_t *v)
{
 8003074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t hi;
	uint64_t rem = *v, quot = 0U, q;
 8003078:	6805      	ldr	r5, [r0, #0]
 800307a:	6846      	ldr	r6, [r0, #4]

	/*
	 * Usage in this file wants rounded behavior, not truncation.  So add
	 * two to get the threshold right.
	 */
	rem += 2U;
 800307c:	3502      	adds	r5, #2
 800307e:	f146 0600 	adc.w	r6, r6, #0

	for (i = 0; i < 3; i++) {
 8003082:	f04f 0c00 	mov.w	ip, #0
	uint64_t rem = *v, quot = 0U, q;
 8003086:	4667      	mov	r7, ip
 8003088:	46e6      	mov	lr, ip
	for (i = 0; i < 3; i++) {
 800308a:	e02c      	b.n	80030e6 <_ldiv5+0x72>
		hi = rem >> shifts[i];
 800308c:	4b1a      	ldr	r3, [pc, #104]	; (80030f8 <_ldiv5+0x84>)
 800308e:	f813 400c 	ldrb.w	r4, [r3, ip]
 8003092:	f1c4 0120 	rsb	r1, r4, #32
 8003096:	f1a4 0320 	sub.w	r3, r4, #32
 800309a:	fa25 f204 	lsr.w	r2, r5, r4
 800309e:	fa06 f101 	lsl.w	r1, r6, r1
 80030a2:	430a      	orrs	r2, r1
 80030a4:	fa26 f303 	lsr.w	r3, r6, r3
 80030a8:	431a      	orrs	r2, r3
		q = (uint64_t)(hi / 5U) << shifts[i];
 80030aa:	4b14      	ldr	r3, [pc, #80]	; (80030fc <_ldiv5+0x88>)
 80030ac:	fba3 2302 	umull	r2, r3, r3, r2
 80030b0:	089b      	lsrs	r3, r3, #2
 80030b2:	f1a4 0820 	sub.w	r8, r4, #32
 80030b6:	f1c4 0220 	rsb	r2, r4, #32
 80030ba:	fa03 f108 	lsl.w	r1, r3, r8
 80030be:	fa23 f202 	lsr.w	r2, r3, r2
 80030c2:	4311      	orrs	r1, r2
 80030c4:	40a3      	lsls	r3, r4
		rem -= q * 5U;
 80030c6:	ea4f 0881 	mov.w	r8, r1, lsl #2
 80030ca:	009a      	lsls	r2, r3, #2
 80030cc:	ea48 7493 	orr.w	r4, r8, r3, lsr #30
 80030d0:	18d2      	adds	r2, r2, r3
 80030d2:	eb41 0404 	adc.w	r4, r1, r4
 80030d6:	1aad      	subs	r5, r5, r2
 80030d8:	eb66 0604 	sbc.w	r6, r6, r4
		quot += q;
 80030dc:	18ff      	adds	r7, r7, r3
 80030de:	eb4e 0e01 	adc.w	lr, lr, r1
	for (i = 0; i < 3; i++) {
 80030e2:	f10c 0c01 	add.w	ip, ip, #1
 80030e6:	f1bc 0f02 	cmp.w	ip, #2
 80030ea:	ddcf      	ble.n	800308c <_ldiv5+0x18>
	}

	*v = quot;
 80030ec:	6007      	str	r7, [r0, #0]
 80030ee:	f8c0 e004 	str.w	lr, [r0, #4]
}
 80030f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030f6:	bf00      	nop
 80030f8:	0801ecc8 	.word	0x0801ecc8
 80030fc:	cccccccd 	.word	0xcccccccd

08003100 <_to_float>:
struct zero_padding { int predot, postdot, trail; };

static int _to_float(char *buf, uint64_t double_temp, char c,
		     bool falt, bool fplus, bool fspace, int precision,
		     struct zero_padding *zp)
{
 8003100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003104:	b089      	sub	sp, #36	; 0x24
 8003106:	4686      	mov	lr, r0
 8003108:	9000      	str	r0, [sp, #0]
 800310a:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 800310e:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
 8003112:	9101      	str	r1, [sp, #4]
 8003114:	f89d 6050 	ldrb.w	r6, [sp, #80]	; 0x50
 8003118:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 800311c:	9d16      	ldr	r5, [sp, #88]	; 0x58
	uint64_t fract;
	uint64_t ltemp;
	bool prune_zero;
	char *start = buf;

	exp = double_temp >> 52 & 0x7ff;
 800311e:	f3c3 540a 	ubfx	r4, r3, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
 8003122:	02d9      	lsls	r1, r3, #11
 8003124:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 8003128:	02d0      	lsls	r0, r2, #11
 800312a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800312e:	9004      	str	r0, [sp, #16]
 8003130:	9105      	str	r1, [sp, #20]
	sign = !!(double_temp & HIGHBIT64);

	if (sign) {
 8003132:	2a00      	cmp	r2, #0
 8003134:	f173 0300 	sbcs.w	r3, r3, #0
 8003138:	db05      	blt.n	8003146 <_to_float+0x46>
		*buf++ = '-';
	} else if (fplus) {
 800313a:	b396      	cbz	r6, 80031a2 <_to_float+0xa2>
		*buf++ = '+';
 800313c:	9e00      	ldr	r6, [sp, #0]
 800313e:	232b      	movs	r3, #43	; 0x2b
 8003140:	f806 3b01 	strb.w	r3, [r6], #1
 8003144:	e003      	b.n	800314e <_to_float+0x4e>
		*buf++ = '-';
 8003146:	4676      	mov	r6, lr
 8003148:	232d      	movs	r3, #45	; 0x2d
 800314a:	f806 3b01 	strb.w	r3, [r6], #1
	} else if (fspace) {
		*buf++ = ' ';
	}

	if (exp == 0x7ff) {
 800314e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003152:	429c      	cmp	r4, r3
 8003154:	d02f      	beq.n	80031b6 <_to_float+0xb6>
		}
		*buf = 0;
		return buf - start;
	}

	if (c == 'F') {
 8003156:	2f46      	cmp	r7, #70	; 0x46
 8003158:	d059      	beq.n	800320e <_to_float+0x10e>
		c = 'f';
	}

	if ((exp | fract) != 0) {
 800315a:	9b04      	ldr	r3, [sp, #16]
 800315c:	ea44 0a03 	orr.w	sl, r4, r3
 8003160:	9905      	ldr	r1, [sp, #20]
 8003162:	17e3      	asrs	r3, r4, #31
 8003164:	ea43 0b01 	orr.w	fp, r3, r1
 8003168:	ea5a 030b 	orrs.w	r3, sl, fp
 800316c:	d007      	beq.n	800317e <_to_float+0x7e>
		if (exp == 0) {
 800316e:	2c00      	cmp	r4, #0
 8003170:	d04f      	beq.n	8003212 <_to_float+0x112>
			/* this is a denormal */
			while (((fract <<= 1) & HIGHBIT64) == 0) {
				exp--;
			}
		}
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
 8003172:	f2a4 34fe 	subw	r4, r4, #1022	; 0x3fe
		fract |= HIGHBIT64;
 8003176:	9b05      	ldr	r3, [sp, #20]
 8003178:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800317c:	9305      	str	r3, [sp, #20]
		c = 'f';
 800317e:	f04f 0800 	mov.w	r8, #0
	}

	decexp = 0;
	while (exp <= -3) {
 8003182:	f114 0f02 	cmn.w	r4, #2
 8003186:	da7b      	bge.n	8003280 <_to_float+0x180>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
 8003188:	9804      	ldr	r0, [sp, #16]
 800318a:	9905      	ldr	r1, [sp, #20]
 800318c:	2300      	movs	r3, #0
 800318e:	2b00      	cmp	r3, #0
 8003190:	bf08      	it	eq
 8003192:	f1b1 3f33 	cmpeq.w	r1, #858993459	; 0x33333333
 8003196:	d34b      	bcc.n	8003230 <_to_float+0x130>
			_rlrshift(&fract);
 8003198:	a804      	add	r0, sp, #16
 800319a:	f012 fdd0 	bl	8015d3e <_rlrshift>
			exp++;
 800319e:	3401      	adds	r4, #1
 80031a0:	e7f2      	b.n	8003188 <_to_float+0x88>
	} else if (fspace) {
 80031a2:	f1bc 0f00 	cmp.w	ip, #0
 80031a6:	d004      	beq.n	80031b2 <_to_float+0xb2>
		*buf++ = ' ';
 80031a8:	9e00      	ldr	r6, [sp, #0]
 80031aa:	2320      	movs	r3, #32
 80031ac:	f806 3b01 	strb.w	r3, [r6], #1
 80031b0:	e7cd      	b.n	800314e <_to_float+0x4e>
 80031b2:	9e00      	ldr	r6, [sp, #0]
 80031b4:	e7cb      	b.n	800314e <_to_float+0x4e>
		if (!fract) {
 80031b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	d116      	bne.n	80031ec <_to_float+0xec>
extern "C" {
#endif

static inline int isupper(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 80031be:	3f41      	subs	r7, #65	; 0x41
			if (isupper((int)c)) {
 80031c0:	2f19      	cmp	r7, #25
 80031c2:	d80b      	bhi.n	80031dc <_to_float+0xdc>
				*buf++ = 'I';
 80031c4:	2349      	movs	r3, #73	; 0x49
 80031c6:	7033      	strb	r3, [r6, #0]
				*buf++ = 'N';
 80031c8:	234e      	movs	r3, #78	; 0x4e
 80031ca:	7073      	strb	r3, [r6, #1]
				*buf++ = 'F';
 80031cc:	1cf3      	adds	r3, r6, #3
 80031ce:	2246      	movs	r2, #70	; 0x46
 80031d0:	70b2      	strb	r2, [r6, #2]
		*buf = 0;
 80031d2:	2200      	movs	r2, #0
 80031d4:	701a      	strb	r2, [r3, #0]
		return buf - start;
 80031d6:	9a00      	ldr	r2, [sp, #0]
 80031d8:	1a98      	subs	r0, r3, r2
 80031da:	e142      	b.n	8003462 <_to_float+0x362>
				*buf++ = 'i';
 80031dc:	2369      	movs	r3, #105	; 0x69
 80031de:	7033      	strb	r3, [r6, #0]
				*buf++ = 'n';
 80031e0:	236e      	movs	r3, #110	; 0x6e
 80031e2:	7073      	strb	r3, [r6, #1]
				*buf++ = 'f';
 80031e4:	1cf3      	adds	r3, r6, #3
 80031e6:	2266      	movs	r2, #102	; 0x66
 80031e8:	70b2      	strb	r2, [r6, #2]
 80031ea:	e7f2      	b.n	80031d2 <_to_float+0xd2>
 80031ec:	3f41      	subs	r7, #65	; 0x41
			if (isupper((int)c)) {
 80031ee:	2f19      	cmp	r7, #25
 80031f0:	d806      	bhi.n	8003200 <_to_float+0x100>
				*buf++ = 'N';
 80031f2:	224e      	movs	r2, #78	; 0x4e
 80031f4:	7032      	strb	r2, [r6, #0]
				*buf++ = 'A';
 80031f6:	2341      	movs	r3, #65	; 0x41
 80031f8:	7073      	strb	r3, [r6, #1]
				*buf++ = 'N';
 80031fa:	1cf3      	adds	r3, r6, #3
 80031fc:	70b2      	strb	r2, [r6, #2]
 80031fe:	e7e8      	b.n	80031d2 <_to_float+0xd2>
				*buf++ = 'n';
 8003200:	226e      	movs	r2, #110	; 0x6e
 8003202:	7032      	strb	r2, [r6, #0]
				*buf++ = 'a';
 8003204:	2361      	movs	r3, #97	; 0x61
 8003206:	7073      	strb	r3, [r6, #1]
				*buf++ = 'n';
 8003208:	1cf3      	adds	r3, r6, #3
 800320a:	70b2      	strb	r2, [r6, #2]
 800320c:	e7e1      	b.n	80031d2 <_to_float+0xd2>
		c = 'f';
 800320e:	2766      	movs	r7, #102	; 0x66
 8003210:	e7a3      	b.n	800315a <_to_float+0x5a>
			while (((fract <<= 1) & HIGHBIT64) == 0) {
 8003212:	9b04      	ldr	r3, [sp, #16]
 8003214:	9a05      	ldr	r2, [sp, #20]
 8003216:	eb13 0803 	adds.w	r8, r3, r3
 800321a:	eb42 0902 	adc.w	r9, r2, r2
 800321e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8003222:	f1b8 0f00 	cmp.w	r8, #0
 8003226:	f179 0300 	sbcs.w	r3, r9, #0
 800322a:	dba2      	blt.n	8003172 <_to_float+0x72>
				exp--;
 800322c:	3c01      	subs	r4, #1
 800322e:	e7f0      	b.n	8003212 <_to_float+0x112>
		}
		fract *= 5U;
 8003230:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 8003234:	0083      	lsls	r3, r0, #2
 8003236:	ea4c 7290 	orr.w	r2, ip, r0, lsr #30
 800323a:	1818      	adds	r0, r3, r0
 800323c:	eb42 0101 	adc.w	r1, r2, r1
 8003240:	9004      	str	r0, [sp, #16]
 8003242:	9105      	str	r1, [sp, #20]
		exp++;
 8003244:	3401      	adds	r4, #1
		decexp--;
 8003246:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff

		while ((fract >> 32) <= (MAXFP1 / 2)) {
 800324a:	9b04      	ldr	r3, [sp, #16]
 800324c:	9a05      	ldr	r2, [sp, #20]
 800324e:	2100      	movs	r1, #0
 8003250:	2900      	cmp	r1, #0
 8003252:	bf08      	it	eq
 8003254:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
 8003258:	d293      	bcs.n	8003182 <_to_float+0x82>
			fract <<= 1;
 800325a:	18db      	adds	r3, r3, r3
 800325c:	4152      	adcs	r2, r2
 800325e:	9304      	str	r3, [sp, #16]
 8003260:	9205      	str	r2, [sp, #20]
			exp--;
 8003262:	3c01      	subs	r4, #1
 8003264:	e7f1      	b.n	800324a <_to_float+0x14a>
	while (exp > 0) {
		_ldiv5(&fract);
		exp--;
		decexp++;
		while ((fract >> 32) <= (MAXFP1 / 2)) {
			fract <<= 1;
 8003266:	18db      	adds	r3, r3, r3
 8003268:	4152      	adcs	r2, r2
 800326a:	9304      	str	r3, [sp, #16]
 800326c:	9205      	str	r2, [sp, #20]
			exp--;
 800326e:	3c01      	subs	r4, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
 8003270:	9b04      	ldr	r3, [sp, #16]
 8003272:	9a05      	ldr	r2, [sp, #20]
 8003274:	2100      	movs	r1, #0
 8003276:	2900      	cmp	r1, #0
 8003278:	bf08      	it	eq
 800327a:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
 800327e:	d3f2      	bcc.n	8003266 <_to_float+0x166>
	while (exp > 0) {
 8003280:	2c00      	cmp	r4, #0
 8003282:	dd0a      	ble.n	800329a <_to_float+0x19a>
		_ldiv5(&fract);
 8003284:	a804      	add	r0, sp, #16
 8003286:	f7ff fef5 	bl	8003074 <_ldiv5>
		exp--;
 800328a:	3c01      	subs	r4, #1
		decexp++;
 800328c:	f108 0801 	add.w	r8, r8, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
 8003290:	e7ee      	b.n	8003270 <_to_float+0x170>
		}
	}

	while (exp < (0 + 4)) {
		_rlrshift(&fract);
 8003292:	a804      	add	r0, sp, #16
 8003294:	f012 fd53 	bl	8015d3e <_rlrshift>
		exp++;
 8003298:	3401      	adds	r4, #1
	while (exp < (0 + 4)) {
 800329a:	2c03      	cmp	r4, #3
 800329c:	ddf9      	ble.n	8003292 <_to_float+0x192>
	}

	if (precision < 0) {
 800329e:	2d00      	cmp	r5, #0
 80032a0:	db13      	blt.n	80032ca <_to_float+0x1ca>
		precision = 6;		/* Default precision if none given */
	}

	prune_zero = false;		/* Assume trailing 0's allowed     */
	if ((c == 'g') || (c == 'G')) {
 80032a2:	2f67      	cmp	r7, #103	; 0x67
 80032a4:	d013      	beq.n	80032ce <_to_float+0x1ce>
 80032a6:	2f47      	cmp	r7, #71	; 0x47
 80032a8:	d011      	beq.n	80032ce <_to_float+0x1ce>
	prune_zero = false;		/* Assume trailing 0's allowed     */
 80032aa:	f04f 0a00 	mov.w	sl, #0
		if (!falt && (precision > 0)) {
			prune_zero = true;
		}
	}

	if (c == 'f') {
 80032ae:	2f66      	cmp	r7, #102	; 0x66
 80032b0:	d027      	beq.n	8003302 <_to_float+0x202>
		exp = precision + decexp;
		if (exp < 0) {
			exp = 0;
		}
	} else {
		exp = precision + 1;
 80032b2:	1c6c      	adds	r4, r5, #1
	}
	digit_count = 16;
 80032b4:	2310      	movs	r3, #16
 80032b6:	9307      	str	r3, [sp, #28]
	if (exp > 16) {
 80032b8:	429c      	cmp	r4, r3
 80032ba:	dd00      	ble.n	80032be <_to_float+0x1be>
		exp = 16;
 80032bc:	461c      	mov	r4, r3
	}

	ltemp = 0x0800000000000000;
 80032be:	2200      	movs	r2, #0
 80032c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80032c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
	while (exp--) {
 80032c8:	e029      	b.n	800331e <_to_float+0x21e>
		precision = 6;		/* Default precision if none given */
 80032ca:	2506      	movs	r5, #6
 80032cc:	e7e9      	b.n	80032a2 <_to_float+0x1a2>
		if (decexp < (-4 + 1) || decexp > precision) {
 80032ce:	f118 0f03 	cmn.w	r8, #3
 80032d2:	db01      	blt.n	80032d8 <_to_float+0x1d8>
 80032d4:	4545      	cmp	r5, r8
 80032d6:	da0b      	bge.n	80032f0 <_to_float+0x1f0>
			c += 'e' - 'g';
 80032d8:	3f02      	subs	r7, #2
 80032da:	b2ff      	uxtb	r7, r7
			if (precision > 0) {
 80032dc:	2d00      	cmp	r5, #0
 80032de:	dd00      	ble.n	80032e2 <_to_float+0x1e2>
				precision--;
 80032e0:	3d01      	subs	r5, #1
		if (!falt && (precision > 0)) {
 80032e2:	9b01      	ldr	r3, [sp, #4]
 80032e4:	b953      	cbnz	r3, 80032fc <_to_float+0x1fc>
 80032e6:	2d00      	cmp	r5, #0
 80032e8:	dd06      	ble.n	80032f8 <_to_float+0x1f8>
			prune_zero = true;
 80032ea:	f04f 0a01 	mov.w	sl, #1
 80032ee:	e7de      	b.n	80032ae <_to_float+0x1ae>
			precision -= decexp;
 80032f0:	eba5 0508 	sub.w	r5, r5, r8
			c = 'f';
 80032f4:	2766      	movs	r7, #102	; 0x66
 80032f6:	e7f4      	b.n	80032e2 <_to_float+0x1e2>
	prune_zero = false;		/* Assume trailing 0's allowed     */
 80032f8:	469a      	mov	sl, r3
 80032fa:	e7d8      	b.n	80032ae <_to_float+0x1ae>
 80032fc:	f04f 0a00 	mov.w	sl, #0
 8003300:	e7d5      	b.n	80032ae <_to_float+0x1ae>
		if (exp < 0) {
 8003302:	eb15 0408 	adds.w	r4, r5, r8
 8003306:	d5d5      	bpl.n	80032b4 <_to_float+0x1b4>
	digit_count = 16;
 8003308:	2310      	movs	r3, #16
 800330a:	9307      	str	r3, [sp, #28]
			exp = 0;
 800330c:	2400      	movs	r4, #0
 800330e:	e7d6      	b.n	80032be <_to_float+0x1be>
		_ldiv5(&ltemp);
 8003310:	a802      	add	r0, sp, #8
 8003312:	f7ff feaf 	bl	8003074 <_ldiv5>
		_rlrshift(&ltemp);
 8003316:	a802      	add	r0, sp, #8
 8003318:	f012 fd11 	bl	8015d3e <_rlrshift>
	while (exp--) {
 800331c:	464c      	mov	r4, r9
 800331e:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 8003322:	2c00      	cmp	r4, #0
 8003324:	d1f4      	bne.n	8003310 <_to_float+0x210>
	}

	fract += ltemp;
 8003326:	9b04      	ldr	r3, [sp, #16]
 8003328:	9a02      	ldr	r2, [sp, #8]
 800332a:	189b      	adds	r3, r3, r2
 800332c:	9a05      	ldr	r2, [sp, #20]
 800332e:	9903      	ldr	r1, [sp, #12]
 8003330:	eb41 0202 	adc.w	r2, r1, r2
 8003334:	9304      	str	r3, [sp, #16]
 8003336:	9205      	str	r2, [sp, #20]
	if ((fract >> 32) & 0xF0000000) {
 8003338:	f002 4070 	and.w	r0, r2, #4026531840	; 0xf0000000
 800333c:	2100      	movs	r1, #0
 800333e:	ea50 0301 	orrs.w	r3, r0, r1
 8003342:	d109      	bne.n	8003358 <_to_float+0x258>
		_ldiv5(&fract);
		_rlrshift(&fract);
		decexp++;
	}

	if (c == 'f') {
 8003344:	2f66      	cmp	r7, #102	; 0x66
 8003346:	f040 808f 	bne.w	8003468 <_to_float+0x368>
		if (decexp > 0) {
 800334a:	f1b8 0f00 	cmp.w	r8, #0
 800334e:	dc14      	bgt.n	800337a <_to_float+0x27a>
				decexp--;
			}
			zp->predot = decexp;
			decexp = 0;
		} else {
			*buf++ = '0';
 8003350:	2330      	movs	r3, #48	; 0x30
 8003352:	f806 3b01 	strb.w	r3, [r6], #1
 8003356:	e01a      	b.n	800338e <_to_float+0x28e>
		_ldiv5(&fract);
 8003358:	a804      	add	r0, sp, #16
 800335a:	f7ff fe8b 	bl	8003074 <_ldiv5>
		_rlrshift(&fract);
 800335e:	a804      	add	r0, sp, #16
 8003360:	f012 fced 	bl	8015d3e <_rlrshift>
		decexp++;
 8003364:	f108 0801 	add.w	r8, r8, #1
 8003368:	e7ec      	b.n	8003344 <_to_float+0x244>
				*buf++ = _get_digit(&fract, &digit_count);
 800336a:	a907      	add	r1, sp, #28
 800336c:	a804      	add	r0, sp, #16
 800336e:	f012 fcf8 	bl	8015d62 <_get_digit>
 8003372:	f806 0b01 	strb.w	r0, [r6], #1
				decexp--;
 8003376:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			while (decexp > 0 && digit_count > 0) {
 800337a:	f1b8 0f00 	cmp.w	r8, #0
 800337e:	dd02      	ble.n	8003386 <_to_float+0x286>
 8003380:	9b07      	ldr	r3, [sp, #28]
 8003382:	2b00      	cmp	r3, #0
 8003384:	dcf1      	bgt.n	800336a <_to_float+0x26a>
			zp->predot = decexp;
 8003386:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003388:	f8c3 8000 	str.w	r8, [r3]
			decexp = 0;
 800338c:	46a0      	mov	r8, r4
		}
		if (falt || (precision > 0)) {
 800338e:	9b01      	ldr	r3, [sp, #4]
 8003390:	b90b      	cbnz	r3, 8003396 <_to_float+0x296>
 8003392:	2d00      	cmp	r5, #0
 8003394:	dd13      	ble.n	80033be <_to_float+0x2be>
			*buf++ = '.';
 8003396:	4633      	mov	r3, r6
 8003398:	222e      	movs	r2, #46	; 0x2e
 800339a:	f803 2b01 	strb.w	r2, [r3], #1
		}
		if (decexp < 0 && precision > 0) {
 800339e:	f1b8 0f00 	cmp.w	r8, #0
 80033a2:	da17      	bge.n	80033d4 <_to_float+0x2d4>
 80033a4:	2d00      	cmp	r5, #0
 80033a6:	dd15      	ble.n	80033d4 <_to_float+0x2d4>
			zp->postdot = -decexp;
 80033a8:	f1c8 0200 	rsb	r2, r8, #0
 80033ac:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80033ae:	604a      	str	r2, [r1, #4]
			if (zp->postdot > precision) {
 80033b0:	42aa      	cmp	r2, r5
 80033b2:	dd00      	ble.n	80033b6 <_to_float+0x2b6>
				zp->postdot = precision;
 80033b4:	604d      	str	r5, [r1, #4]
			}
			precision -= zp->postdot;
 80033b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80033b8:	6852      	ldr	r2, [r2, #4]
 80033ba:	1aad      	subs	r5, r5, r2
 80033bc:	e00a      	b.n	80033d4 <_to_float+0x2d4>
 80033be:	4633      	mov	r3, r6
 80033c0:	e7ed      	b.n	800339e <_to_float+0x29e>
		}
		while (precision > 0 && digit_count > 0) {
			*buf++ = _get_digit(&fract, &digit_count);
 80033c2:	461c      	mov	r4, r3
 80033c4:	a907      	add	r1, sp, #28
 80033c6:	a804      	add	r0, sp, #16
 80033c8:	f012 fccb 	bl	8015d62 <_get_digit>
 80033cc:	f804 0b01 	strb.w	r0, [r4], #1
			precision--;
 80033d0:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
 80033d2:	4623      	mov	r3, r4
		while (precision > 0 && digit_count > 0) {
 80033d4:	2d00      	cmp	r5, #0
 80033d6:	dd02      	ble.n	80033de <_to_float+0x2de>
 80033d8:	9a07      	ldr	r2, [sp, #28]
 80033da:	2a00      	cmp	r2, #0
 80033dc:	dcf1      	bgt.n	80033c2 <_to_float+0x2c2>
		}
		zp->trail = precision;
 80033de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80033e0:	6095      	str	r5, [r2, #8]
			precision--;
		}
		zp->trail = precision;
	}

	if (prune_zero) {
 80033e2:	f1ba 0f00 	cmp.w	sl, #0
 80033e6:	d00a      	beq.n	80033fe <_to_float+0x2fe>
		zp->trail = 0;
 80033e8:	2200      	movs	r2, #0
 80033ea:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80033ec:	608a      	str	r2, [r1, #8]
		while (*--buf == '0')
 80033ee:	461a      	mov	r2, r3
 80033f0:	4613      	mov	r3, r2
 80033f2:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 80033f6:	2930      	cmp	r1, #48	; 0x30
 80033f8:	d0fa      	beq.n	80033f0 <_to_float+0x2f0>
			;
		if (*buf != '.') {
 80033fa:	292e      	cmp	r1, #46	; 0x2e
 80033fc:	d058      	beq.n	80034b0 <_to_float+0x3b0>
			buf++;
		}
	}

	if ((c == 'e') || (c == 'E')) {
 80033fe:	2f65      	cmp	r7, #101	; 0x65
 8003400:	d001      	beq.n	8003406 <_to_float+0x306>
 8003402:	2f45      	cmp	r7, #69	; 0x45
 8003404:	d129      	bne.n	800345a <_to_float+0x35a>
		*buf++ = c;
 8003406:	701f      	strb	r7, [r3, #0]
		if (decexp < 0) {
 8003408:	f1b8 0f00 	cmp.w	r8, #0
 800340c:	db52      	blt.n	80034b4 <_to_float+0x3b4>
			decexp = -decexp;
			*buf++ = '-';
		} else {
			*buf++ = '+';
 800340e:	1c99      	adds	r1, r3, #2
 8003410:	222b      	movs	r2, #43	; 0x2b
 8003412:	705a      	strb	r2, [r3, #1]
		}
		if (decexp >= 100) {
 8003414:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 8003418:	dd0d      	ble.n	8003436 <_to_float+0x336>
			*buf++ = (decexp / 100) + '0';
 800341a:	4a29      	ldr	r2, [pc, #164]	; (80034c0 <_to_float+0x3c0>)
 800341c:	fb82 3208 	smull	r3, r2, r2, r8
 8003420:	ea4f 73e8 	mov.w	r3, r8, asr #31
 8003424:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8003428:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800342c:	f801 2b01 	strb.w	r2, [r1], #1
			decexp %= 100;
 8003430:	2264      	movs	r2, #100	; 0x64
 8003432:	fb02 8813 	mls	r8, r2, r3, r8
		}
		*buf++ = (decexp / 10) + '0';
 8003436:	4b23      	ldr	r3, [pc, #140]	; (80034c4 <_to_float+0x3c4>)
 8003438:	fb83 2308 	smull	r2, r3, r3, r8
 800343c:	ea4f 72e8 	mov.w	r2, r8, asr #31
 8003440:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
 8003444:	f102 0030 	add.w	r0, r2, #48	; 0x30
 8003448:	460b      	mov	r3, r1
 800344a:	f803 0b02 	strb.w	r0, [r3], #2
		decexp %= 10;
 800344e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003452:	eba8 0242 	sub.w	r2, r8, r2, lsl #1
		*buf++ = decexp + '0';
 8003456:	3230      	adds	r2, #48	; 0x30
 8003458:	704a      	strb	r2, [r1, #1]
	}
	*buf = 0;
 800345a:	2200      	movs	r2, #0
 800345c:	701a      	strb	r2, [r3, #0]

	return buf - start;
 800345e:	9a00      	ldr	r2, [sp, #0]
 8003460:	1a98      	subs	r0, r3, r2
}
 8003462:	b009      	add	sp, #36	; 0x24
 8003464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*buf = _get_digit(&fract, &digit_count);
 8003468:	a907      	add	r1, sp, #28
 800346a:	a804      	add	r0, sp, #16
 800346c:	f012 fc79 	bl	8015d62 <_get_digit>
 8003470:	4633      	mov	r3, r6
 8003472:	f803 0b01 	strb.w	r0, [r3], #1
		if (*buf++ != '0') {
 8003476:	2830      	cmp	r0, #48	; 0x30
 8003478:	d001      	beq.n	800347e <_to_float+0x37e>
			decexp--;
 800347a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (falt || (precision > 0)) {
 800347e:	9a01      	ldr	r2, [sp, #4]
 8003480:	b90a      	cbnz	r2, 8003486 <_to_float+0x386>
 8003482:	2d00      	cmp	r5, #0
 8003484:	dd0c      	ble.n	80034a0 <_to_float+0x3a0>
			*buf++ = '.';
 8003486:	1cb3      	adds	r3, r6, #2
 8003488:	222e      	movs	r2, #46	; 0x2e
 800348a:	7072      	strb	r2, [r6, #1]
 800348c:	e008      	b.n	80034a0 <_to_float+0x3a0>
			*buf++ = _get_digit(&fract, &digit_count);
 800348e:	461c      	mov	r4, r3
 8003490:	a907      	add	r1, sp, #28
 8003492:	a804      	add	r0, sp, #16
 8003494:	f012 fc65 	bl	8015d62 <_get_digit>
 8003498:	f804 0b01 	strb.w	r0, [r4], #1
			precision--;
 800349c:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
 800349e:	4623      	mov	r3, r4
		while (precision > 0 && digit_count > 0) {
 80034a0:	2d00      	cmp	r5, #0
 80034a2:	dd02      	ble.n	80034aa <_to_float+0x3aa>
 80034a4:	9a07      	ldr	r2, [sp, #28]
 80034a6:	2a00      	cmp	r2, #0
 80034a8:	dcf1      	bgt.n	800348e <_to_float+0x38e>
		zp->trail = precision;
 80034aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80034ac:	6095      	str	r5, [r2, #8]
 80034ae:	e798      	b.n	80033e2 <_to_float+0x2e2>
		while (*--buf == '0')
 80034b0:	4613      	mov	r3, r2
 80034b2:	e7a4      	b.n	80033fe <_to_float+0x2fe>
			decexp = -decexp;
 80034b4:	f1c8 0800 	rsb	r8, r8, #0
			*buf++ = '-';
 80034b8:	1c99      	adds	r1, r3, #2
 80034ba:	222d      	movs	r2, #45	; 0x2d
 80034bc:	705a      	strb	r2, [r3, #1]
 80034be:	e7a9      	b.n	8003414 <_to_float+0x314>
 80034c0:	51eb851f 	.word	0x51eb851f
 80034c4:	66666667 	.word	0x66666667

080034c8 <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
 80034c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034cc:	b099      	sub	sp, #100	; 0x64
 80034ce:	4606      	mov	r6, r0
 80034d0:	460d      	mov	r5, r1
 80034d2:	920d      	str	r2, [sp, #52]	; 0x34
 80034d4:	930c      	str	r3, [sp, #48]	; 0x30
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
 80034d6:	2400      	movs	r4, #0

	while ((c = *format++)) {
 80034d8:	e000      	b.n	80034dc <z_prf+0x14>
		if (c != '%') {
			PUTC(c);
			count++;
 80034da:	3401      	adds	r4, #1
	while ((c = *format++)) {
 80034dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034de:	1c5a      	adds	r2, r3, #1
 80034e0:	920d      	str	r2, [sp, #52]	; 0x34
 80034e2:	7818      	ldrb	r0, [r3, #0]
 80034e4:	b138      	cbz	r0, 80034f6 <z_prf+0x2e>
		if (c != '%') {
 80034e6:	2825      	cmp	r0, #37	; 0x25
 80034e8:	d018      	beq.n	800351c <z_prf+0x54>
			PUTC(c);
 80034ea:	4629      	mov	r1, r5
 80034ec:	47b0      	blx	r6
 80034ee:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80034f2:	d1f2      	bne.n	80034da <z_prf+0x12>
 80034f4:	4604      	mov	r4, r0
		}
	}
	return count;

#undef PUTC
}
 80034f6:	4620      	mov	r0, r4
 80034f8:	b019      	add	sp, #100	; 0x64
 80034fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					fplus = true;
 80034fe:	f04f 0801 	mov.w	r8, #1
					break;
 8003502:	e013      	b.n	800352c <z_prf+0x64>
					fspace = true;
 8003504:	2301      	movs	r3, #1
 8003506:	9307      	str	r3, [sp, #28]
					break;
 8003508:	e010      	b.n	800352c <z_prf+0x64>
					falt = true;
 800350a:	2301      	movs	r3, #1
 800350c:	9308      	str	r3, [sp, #32]
					break;
 800350e:	e00d      	b.n	800352c <z_prf+0x64>
					fzero = true;
 8003510:	f04f 0901 	mov.w	r9, #1
					break;
 8003514:	e00a      	b.n	800352c <z_prf+0x64>
					fminus = true;
 8003516:	f04f 0a01 	mov.w	sl, #1
 800351a:	e007      	b.n	800352c <z_prf+0x64>
			fminus = fplus = fspace = falt = fzero = false;
 800351c:	f04f 0900 	mov.w	r9, #0
 8003520:	f8cd 901c 	str.w	r9, [sp, #28]
 8003524:	46c8      	mov	r8, r9
 8003526:	46ca      	mov	sl, r9
 8003528:	f8cd 9020 	str.w	r9, [sp, #32]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
 800352c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	920d      	str	r2, [sp, #52]	; 0x34
 8003532:	781f      	ldrb	r7, [r3, #0]
 8003534:	4639      	mov	r1, r7
 8003536:	48c5      	ldr	r0, [pc, #788]	; (800384c <z_prf+0x384>)
 8003538:	f014 fc4e 	bl	8017dd8 <strchr>
 800353c:	b370      	cbz	r0, 800359c <z_prf+0xd4>
				switch (c) {
 800353e:	2f00      	cmp	r7, #0
 8003540:	d0d9      	beq.n	80034f6 <z_prf+0x2e>
 8003542:	2f30      	cmp	r7, #48	; 0x30
 8003544:	d8f2      	bhi.n	800352c <z_prf+0x64>
 8003546:	2f20      	cmp	r7, #32
 8003548:	d3f0      	bcc.n	800352c <z_prf+0x64>
 800354a:	3f20      	subs	r7, #32
 800354c:	2f10      	cmp	r7, #16
 800354e:	d8ed      	bhi.n	800352c <z_prf+0x64>
 8003550:	a301      	add	r3, pc, #4	; (adr r3, 8003558 <z_prf+0x90>)
 8003552:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 8003556:	bf00      	nop
 8003558:	08003505 	.word	0x08003505
 800355c:	0800352d 	.word	0x0800352d
 8003560:	0800352d 	.word	0x0800352d
 8003564:	0800350b 	.word	0x0800350b
 8003568:	0800352d 	.word	0x0800352d
 800356c:	0800352d 	.word	0x0800352d
 8003570:	0800352d 	.word	0x0800352d
 8003574:	0800352d 	.word	0x0800352d
 8003578:	0800352d 	.word	0x0800352d
 800357c:	0800352d 	.word	0x0800352d
 8003580:	0800352d 	.word	0x0800352d
 8003584:	080034ff 	.word	0x080034ff
 8003588:	0800352d 	.word	0x0800352d
 800358c:	08003517 	.word	0x08003517
 8003590:	0800352d 	.word	0x0800352d
 8003594:	0800352d 	.word	0x0800352d
 8003598:	08003511 	.word	0x08003511
			if (c == '*') {
 800359c:	2f2a      	cmp	r7, #42	; 0x2a
 800359e:	f000 8119 	beq.w	80037d4 <z_prf+0x30c>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 80035a2:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
			} else if (!isdigit((int)c)) {
 80035a6:	2b09      	cmp	r3, #9
 80035a8:	f240 8125 	bls.w	80037f6 <z_prf+0x32e>
				width = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	930a      	str	r3, [sp, #40]	; 0x28
			if (c == '.') {
 80035b0:	2f2e      	cmp	r7, #46	; 0x2e
 80035b2:	f000 8129 	beq.w	8003808 <z_prf+0x340>
			precision = -1;
 80035b6:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
			if (strchr("hlz", c) != NULL) {
 80035ba:	9709      	str	r7, [sp, #36]	; 0x24
 80035bc:	4639      	mov	r1, r7
 80035be:	48a4      	ldr	r0, [pc, #656]	; (8003850 <z_prf+0x388>)
 80035c0:	f014 fc0a 	bl	8017dd8 <strchr>
 80035c4:	2800      	cmp	r0, #0
 80035c6:	f000 813d 	beq.w	8003844 <z_prf+0x37c>
				c = *format++;
 80035ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80035cc:	1c5a      	adds	r2, r3, #1
 80035ce:	920d      	str	r2, [sp, #52]	; 0x34
 80035d0:	781f      	ldrb	r7, [r3, #0]
				} else if (i == 'h' && c == 'h') {
 80035d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80035d4:	2968      	cmp	r1, #104	; 0x68
 80035d6:	f000 812c 	beq.w	8003832 <z_prf+0x36a>
			zero.predot = zero.postdot = zero.trail = 0;
 80035da:	2300      	movs	r3, #0
 80035dc:	9310      	str	r3, [sp, #64]	; 0x40
 80035de:	930f      	str	r3, [sp, #60]	; 0x3c
 80035e0:	930e      	str	r3, [sp, #56]	; 0x38
			switch (c) {
 80035e2:	970b      	str	r7, [sp, #44]	; 0x2c
 80035e4:	2f78      	cmp	r7, #120	; 0x78
 80035e6:	f200 825b 	bhi.w	8003aa0 <z_prf+0x5d8>
 80035ea:	a301      	add	r3, pc, #4	; (adr r3, 80035f0 <z_prf+0x128>)
 80035ec:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 80035f0:	080034f7 	.word	0x080034f7
 80035f4:	08003aa1 	.word	0x08003aa1
 80035f8:	08003aa1 	.word	0x08003aa1
 80035fc:	08003aa1 	.word	0x08003aa1
 8003600:	08003aa1 	.word	0x08003aa1
 8003604:	08003aa1 	.word	0x08003aa1
 8003608:	08003aa1 	.word	0x08003aa1
 800360c:	08003aa1 	.word	0x08003aa1
 8003610:	08003aa1 	.word	0x08003aa1
 8003614:	08003aa1 	.word	0x08003aa1
 8003618:	08003aa1 	.word	0x08003aa1
 800361c:	08003aa1 	.word	0x08003aa1
 8003620:	08003aa1 	.word	0x08003aa1
 8003624:	08003aa1 	.word	0x08003aa1
 8003628:	08003aa1 	.word	0x08003aa1
 800362c:	08003aa1 	.word	0x08003aa1
 8003630:	08003aa1 	.word	0x08003aa1
 8003634:	08003aa1 	.word	0x08003aa1
 8003638:	08003aa1 	.word	0x08003aa1
 800363c:	08003aa1 	.word	0x08003aa1
 8003640:	08003aa1 	.word	0x08003aa1
 8003644:	08003aa1 	.word	0x08003aa1
 8003648:	08003aa1 	.word	0x08003aa1
 800364c:	08003aa1 	.word	0x08003aa1
 8003650:	08003aa1 	.word	0x08003aa1
 8003654:	08003aa1 	.word	0x08003aa1
 8003658:	08003aa1 	.word	0x08003aa1
 800365c:	08003aa1 	.word	0x08003aa1
 8003660:	08003aa1 	.word	0x08003aa1
 8003664:	08003aa1 	.word	0x08003aa1
 8003668:	08003aa1 	.word	0x08003aa1
 800366c:	08003aa1 	.word	0x08003aa1
 8003670:	08003aa1 	.word	0x08003aa1
 8003674:	08003aa1 	.word	0x08003aa1
 8003678:	08003aa1 	.word	0x08003aa1
 800367c:	08003aa1 	.word	0x08003aa1
 8003680:	08003aa1 	.word	0x08003aa1
 8003684:	08003a8f 	.word	0x08003a8f
 8003688:	08003aa1 	.word	0x08003aa1
 800368c:	08003aa1 	.word	0x08003aa1
 8003690:	08003aa1 	.word	0x08003aa1
 8003694:	08003aa1 	.word	0x08003aa1
 8003698:	08003aa1 	.word	0x08003aa1
 800369c:	08003aa1 	.word	0x08003aa1
 80036a0:	08003aa1 	.word	0x08003aa1
 80036a4:	08003aa1 	.word	0x08003aa1
 80036a8:	08003aa1 	.word	0x08003aa1
 80036ac:	08003aa1 	.word	0x08003aa1
 80036b0:	08003aa1 	.word	0x08003aa1
 80036b4:	08003aa1 	.word	0x08003aa1
 80036b8:	08003aa1 	.word	0x08003aa1
 80036bc:	08003aa1 	.word	0x08003aa1
 80036c0:	08003aa1 	.word	0x08003aa1
 80036c4:	08003aa1 	.word	0x08003aa1
 80036c8:	08003aa1 	.word	0x08003aa1
 80036cc:	08003aa1 	.word	0x08003aa1
 80036d0:	08003aa1 	.word	0x08003aa1
 80036d4:	08003aa1 	.word	0x08003aa1
 80036d8:	08003aa1 	.word	0x08003aa1
 80036dc:	08003aa1 	.word	0x08003aa1
 80036e0:	08003aa1 	.word	0x08003aa1
 80036e4:	08003aa1 	.word	0x08003aa1
 80036e8:	08003aa1 	.word	0x08003aa1
 80036ec:	08003aa1 	.word	0x08003aa1
 80036f0:	08003aa1 	.word	0x08003aa1
 80036f4:	08003aa1 	.word	0x08003aa1
 80036f8:	08003aa1 	.word	0x08003aa1
 80036fc:	08003aa1 	.word	0x08003aa1
 8003700:	08003aa1 	.word	0x08003aa1
 8003704:	08003911 	.word	0x08003911
 8003708:	08003911 	.word	0x08003911
 800370c:	08003911 	.word	0x08003911
 8003710:	08003aa1 	.word	0x08003aa1
 8003714:	08003aa1 	.word	0x08003aa1
 8003718:	08003aa1 	.word	0x08003aa1
 800371c:	08003aa1 	.word	0x08003aa1
 8003720:	08003aa1 	.word	0x08003aa1
 8003724:	08003aa1 	.word	0x08003aa1
 8003728:	08003aa1 	.word	0x08003aa1
 800372c:	08003aa1 	.word	0x08003aa1
 8003730:	08003aa1 	.word	0x08003aa1
 8003734:	08003aa1 	.word	0x08003aa1
 8003738:	08003aa1 	.word	0x08003aa1
 800373c:	08003aa1 	.word	0x08003aa1
 8003740:	08003aa1 	.word	0x08003aa1
 8003744:	08003aa1 	.word	0x08003aa1
 8003748:	08003aa1 	.word	0x08003aa1
 800374c:	08003aa1 	.word	0x08003aa1
 8003750:	08003a25 	.word	0x08003a25
 8003754:	08003aa1 	.word	0x08003aa1
 8003758:	08003aa1 	.word	0x08003aa1
 800375c:	08003aa1 	.word	0x08003aa1
 8003760:	08003aa1 	.word	0x08003aa1
 8003764:	08003aa1 	.word	0x08003aa1
 8003768:	08003aa1 	.word	0x08003aa1
 800376c:	08003aa1 	.word	0x08003aa1
 8003770:	08003aa1 	.word	0x08003aa1
 8003774:	08003aa1 	.word	0x08003aa1
 8003778:	08003aa1 	.word	0x08003aa1
 800377c:	08003855 	.word	0x08003855
 8003780:	080038bf 	.word	0x080038bf
 8003784:	08003911 	.word	0x08003911
 8003788:	08003911 	.word	0x08003911
 800378c:	08003911 	.word	0x08003911
 8003790:	08003aa1 	.word	0x08003aa1
 8003794:	080038bf 	.word	0x080038bf
 8003798:	08003aa1 	.word	0x08003aa1
 800379c:	08003aa1 	.word	0x08003aa1
 80037a0:	08003aa1 	.word	0x08003aa1
 80037a4:	08003aa1 	.word	0x08003aa1
 80037a8:	08003989 	.word	0x08003989
 80037ac:	08003a25 	.word	0x08003a25
 80037b0:	080039db 	.word	0x080039db
 80037b4:	08003aa1 	.word	0x08003aa1
 80037b8:	08003aa1 	.word	0x08003aa1
 80037bc:	080039f7 	.word	0x080039f7
 80037c0:	08003aa1 	.word	0x08003aa1
 80037c4:	08003a25 	.word	0x08003a25
 80037c8:	08003aa1 	.word	0x08003aa1
 80037cc:	08003aa1 	.word	0x08003aa1
 80037d0:	08003a25 	.word	0x08003a25
				width = va_arg(vargs, int);
 80037d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80037d6:	1d1a      	adds	r2, r3, #4
 80037d8:	920c      	str	r2, [sp, #48]	; 0x30
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	930a      	str	r3, [sp, #40]	; 0x28
				if (width < 0) {
 80037de:	2b00      	cmp	r3, #0
 80037e0:	db04      	blt.n	80037ec <z_prf+0x324>
				c = *format++;
 80037e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80037e4:	1c5a      	adds	r2, r3, #1
 80037e6:	920d      	str	r2, [sp, #52]	; 0x34
 80037e8:	781f      	ldrb	r7, [r3, #0]
 80037ea:	e6e1      	b.n	80035b0 <z_prf+0xe8>
					width = -width;
 80037ec:	425b      	negs	r3, r3
 80037ee:	930a      	str	r3, [sp, #40]	; 0x28
					fminus = true;
 80037f0:	f04f 0a01 	mov.w	sl, #1
 80037f4:	e7f5      	b.n	80037e2 <z_prf+0x31a>
				width = _atoi(&format);	/* Find width */
 80037f6:	a80d      	add	r0, sp, #52	; 0x34
 80037f8:	f012 facf 	bl	8015d9a <_atoi>
 80037fc:	900a      	str	r0, [sp, #40]	; 0x28
				c = *format++;
 80037fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	920d      	str	r2, [sp, #52]	; 0x34
 8003804:	781f      	ldrb	r7, [r3, #0]
 8003806:	e6d3      	b.n	80035b0 <z_prf+0xe8>
				c = *format++;
 8003808:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800380a:	1c5a      	adds	r2, r3, #1
 800380c:	920d      	str	r2, [sp, #52]	; 0x34
 800380e:	781b      	ldrb	r3, [r3, #0]
				if (c == '*') {
 8003810:	2b2a      	cmp	r3, #42	; 0x2a
 8003812:	d109      	bne.n	8003828 <z_prf+0x360>
					precision = va_arg(vargs, int);
 8003814:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003816:	1d1a      	adds	r2, r3, #4
 8003818:	920c      	str	r2, [sp, #48]	; 0x30
 800381a:	f8d3 b000 	ldr.w	fp, [r3]
				c = *format++;
 800381e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	920d      	str	r2, [sp, #52]	; 0x34
 8003824:	781f      	ldrb	r7, [r3, #0]
 8003826:	e6c8      	b.n	80035ba <z_prf+0xf2>
					precision = _atoi(&format);
 8003828:	a80d      	add	r0, sp, #52	; 0x34
 800382a:	f012 fab6 	bl	8015d9a <_atoi>
 800382e:	4683      	mov	fp, r0
 8003830:	e7f5      	b.n	800381e <z_prf+0x356>
				} else if (i == 'h' && c == 'h') {
 8003832:	2f68      	cmp	r7, #104	; 0x68
 8003834:	f47f aed1 	bne.w	80035da <z_prf+0x112>
					c = *format++;
 8003838:	1c9a      	adds	r2, r3, #2
 800383a:	920d      	str	r2, [sp, #52]	; 0x34
 800383c:	785f      	ldrb	r7, [r3, #1]
					i = 'H';
 800383e:	2348      	movs	r3, #72	; 0x48
 8003840:	9309      	str	r3, [sp, #36]	; 0x24
 8003842:	e6ca      	b.n	80035da <z_prf+0x112>
			i = 0;
 8003844:	2300      	movs	r3, #0
 8003846:	9309      	str	r3, [sp, #36]	; 0x24
 8003848:	e6c7      	b.n	80035da <z_prf+0x112>
 800384a:	bf00      	nop
 800384c:	0801ecbc 	.word	0x0801ecbc
 8003850:	0801ecc4 	.word	0x0801ecc4
				buf[0] = va_arg(vargs, int);
 8003854:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003856:	1d1a      	adds	r2, r3, #4
 8003858:	920c      	str	r2, [sp, #48]	; 0x30
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
			prefix = 0;
 8003860:	f04f 0800 	mov.w	r8, #0
				clen = 1;
 8003864:	2301      	movs	r3, #1
 8003866:	9308      	str	r3, [sp, #32]
				precision = 0;
 8003868:	46c3      	mov	fp, r8
			cptr = buf;
 800386a:	af11      	add	r7, sp, #68	; 0x44
			if (precision >= 0) {
 800386c:	f1bb 0f00 	cmp.w	fp, #0
 8003870:	f2c0 813b 	blt.w	8003aea <z_prf+0x622>
				zero_head = precision - clen + prefix;
 8003874:	9b08      	ldr	r3, [sp, #32]
 8003876:	ebab 0903 	sub.w	r9, fp, r3
 800387a:	44c1      	add	r9, r8
			if (zero_head < 0) {
 800387c:	f1b9 0f00 	cmp.w	r9, #0
 8003880:	f2c0 813e 	blt.w	8003b00 <z_prf+0x638>
			width -= clen + zero_head;
 8003884:	9b08      	ldr	r3, [sp, #32]
 8003886:	eb03 0b09 	add.w	fp, r3, r9
 800388a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800388c:	eba3 0b0b 	sub.w	fp, r3, fp
			if (!fminus && width > 0) {
 8003890:	f1ba 0f00 	cmp.w	sl, #0
 8003894:	f040 8137 	bne.w	8003b06 <z_prf+0x63e>
 8003898:	f1bb 0f00 	cmp.w	fp, #0
 800389c:	f340 8133 	ble.w	8003b06 <z_prf+0x63e>
				count += width;
 80038a0:	445c      	add	r4, fp
				while (width-- > 0) {
 80038a2:	465b      	mov	r3, fp
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80038aa:	f340 812c 	ble.w	8003b06 <z_prf+0x63e>
					PUTC(' ');
 80038ae:	4629      	mov	r1, r5
 80038b0:	2020      	movs	r0, #32
 80038b2:	47b0      	blx	r6
 80038b4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80038b8:	d1f3      	bne.n	80038a2 <z_prf+0x3da>
 80038ba:	4604      	mov	r4, r0
 80038bc:	e61b      	b.n	80034f6 <z_prf+0x2e>
				switch (i) {
 80038be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038c0:	2b6c      	cmp	r3, #108	; 0x6c
 80038c2:	d006      	beq.n	80038d2 <z_prf+0x40a>
 80038c4:	2b7a      	cmp	r3, #122	; 0x7a
 80038c6:	d01e      	beq.n	8003906 <z_prf+0x43e>
					val = va_arg(vargs, int);
 80038c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80038ca:	1d1a      	adds	r2, r3, #4
 80038cc:	920c      	str	r2, [sp, #48]	; 0x30
 80038ce:	681f      	ldr	r7, [r3, #0]
					break;
 80038d0:	e003      	b.n	80038da <z_prf+0x412>
					val = va_arg(vargs, long);
 80038d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80038d4:	1d1a      	adds	r2, r3, #4
 80038d6:	920c      	str	r2, [sp, #48]	; 0x30
 80038d8:	681f      	ldr	r7, [r3, #0]
				clen = _to_dec(buf, val, fplus, fspace);
 80038da:	9b07      	ldr	r3, [sp, #28]
 80038dc:	4642      	mov	r2, r8
 80038de:	4639      	mov	r1, r7
 80038e0:	a811      	add	r0, sp, #68	; 0x44
 80038e2:	f012 fa0f 	bl	8015d04 <_to_dec>
 80038e6:	9008      	str	r0, [sp, #32]
				if (fplus || fspace || val < 0) {
 80038e8:	f1b8 0f00 	cmp.w	r8, #0
 80038ec:	f040 80e8 	bne.w	8003ac0 <z_prf+0x5f8>
 80038f0:	9b07      	ldr	r3, [sp, #28]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f040 80e8 	bne.w	8003ac8 <z_prf+0x600>
 80038f8:	2f00      	cmp	r7, #0
 80038fa:	f2c0 80e9 	blt.w	8003ad0 <z_prf+0x608>
			prefix = 0;
 80038fe:	f04f 0800 	mov.w	r8, #0
			cptr = buf;
 8003902:	af11      	add	r7, sp, #68	; 0x44
 8003904:	e7b2      	b.n	800386c <z_prf+0x3a4>
					val = va_arg(vargs, ssize_t);
 8003906:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003908:	1d1a      	adds	r2, r3, #4
 800390a:	920c      	str	r2, [sp, #48]	; 0x30
 800390c:	681f      	ldr	r7, [r3, #0]
					break;
 800390e:	e7e4      	b.n	80038da <z_prf+0x412>
				u.d = va_arg(vargs, double);
 8003910:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003912:	3307      	adds	r3, #7
 8003914:	f023 0307 	bic.w	r3, r3, #7
 8003918:	f103 0208 	add.w	r2, r3, #8
 800391c:	920c      	str	r2, [sp, #48]	; 0x30
 800391e:	e9d3 2300 	ldrd	r2, r3, [r3]
				clen = _to_float(buf, double_val, c, falt,
 8003922:	a90e      	add	r1, sp, #56	; 0x38
 8003924:	9105      	str	r1, [sp, #20]
 8003926:	f8cd b010 	str.w	fp, [sp, #16]
 800392a:	9907      	ldr	r1, [sp, #28]
 800392c:	9103      	str	r1, [sp, #12]
 800392e:	f8cd 8008 	str.w	r8, [sp, #8]
 8003932:	9808      	ldr	r0, [sp, #32]
 8003934:	9001      	str	r0, [sp, #4]
 8003936:	9700      	str	r7, [sp, #0]
 8003938:	a811      	add	r0, sp, #68	; 0x44
 800393a:	f7ff fbe1 	bl	8003100 <_to_float>
				if (fplus || fspace || (buf[0] == '-')) {
 800393e:	f1b8 0f00 	cmp.w	r8, #0
 8003942:	d108      	bne.n	8003956 <z_prf+0x48e>
 8003944:	9907      	ldr	r1, [sp, #28]
 8003946:	b9e1      	cbnz	r1, 8003982 <z_prf+0x4ba>
 8003948:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800394c:	2b2d      	cmp	r3, #45	; 0x2d
 800394e:	d104      	bne.n	800395a <z_prf+0x492>
					prefix = 1;
 8003950:	f04f 0801 	mov.w	r8, #1
 8003954:	e001      	b.n	800395a <z_prf+0x492>
 8003956:	f04f 0801 	mov.w	r8, #1
				clen += zero.predot + zero.postdot + zero.trail;
 800395a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800395c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800395e:	4413      	add	r3, r2
 8003960:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003962:	4413      	add	r3, r2
 8003964:	4403      	add	r3, r0
 8003966:	9308      	str	r3, [sp, #32]
				if (!isdigit((int)buf[prefix])) {
 8003968:	ab18      	add	r3, sp, #96	; 0x60
 800396a:	4443      	add	r3, r8
 800396c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8003970:	3b30      	subs	r3, #48	; 0x30
 8003972:	2b09      	cmp	r3, #9
 8003974:	d901      	bls.n	800397a <z_prf+0x4b2>
					fzero = false;
 8003976:	f04f 0900 	mov.w	r9, #0
				precision = -1;
 800397a:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
			cptr = buf;
 800397e:	af11      	add	r7, sp, #68	; 0x44
 8003980:	e774      	b.n	800386c <z_prf+0x3a4>
					prefix = 1;
 8003982:	f04f 0801 	mov.w	r8, #1
 8003986:	e7e8      	b.n	800395a <z_prf+0x492>
				switch (i) {
 8003988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800398a:	2b6c      	cmp	r3, #108	; 0x6c
 800398c:	d019      	beq.n	80039c2 <z_prf+0x4fa>
 800398e:	dc09      	bgt.n	80039a4 <z_prf+0x4dc>
 8003990:	2b48      	cmp	r3, #72	; 0x48
 8003992:	d010      	beq.n	80039b6 <z_prf+0x4ee>
 8003994:	2b68      	cmp	r3, #104	; 0x68
 8003996:	d11a      	bne.n	80039ce <z_prf+0x506>
					*va_arg(vargs, short *) = count;
 8003998:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800399a:	1d1a      	adds	r2, r3, #4
 800399c:	920c      	str	r2, [sp, #48]	; 0x30
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	801c      	strh	r4, [r3, #0]
					break;
 80039a2:	e59b      	b.n	80034dc <z_prf+0x14>
 80039a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039a6:	2b7a      	cmp	r3, #122	; 0x7a
 80039a8:	d111      	bne.n	80039ce <z_prf+0x506>
					*va_arg(vargs, ssize_t *) = count;
 80039aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80039ac:	1d1a      	adds	r2, r3, #4
 80039ae:	920c      	str	r2, [sp, #48]	; 0x30
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	601c      	str	r4, [r3, #0]
					break;
 80039b4:	e592      	b.n	80034dc <z_prf+0x14>
					*va_arg(vargs, char *) = count;
 80039b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80039b8:	1d1a      	adds	r2, r3, #4
 80039ba:	920c      	str	r2, [sp, #48]	; 0x30
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	701c      	strb	r4, [r3, #0]
					break;
 80039c0:	e58c      	b.n	80034dc <z_prf+0x14>
					*va_arg(vargs, long *) = count;
 80039c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80039c4:	1d1a      	adds	r2, r3, #4
 80039c6:	920c      	str	r2, [sp, #48]	; 0x30
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	601c      	str	r4, [r3, #0]
					break;
 80039cc:	e586      	b.n	80034dc <z_prf+0x14>
					*va_arg(vargs, int *) = count;
 80039ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80039d0:	1d1a      	adds	r2, r3, #4
 80039d2:	920c      	str	r2, [sp, #48]	; 0x30
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	601c      	str	r4, [r3, #0]
				continue;
 80039d8:	e580      	b.n	80034dc <z_prf+0x14>
				val = (uintptr_t) va_arg(vargs, void *);
 80039da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80039dc:	1d0b      	adds	r3, r1, #4
 80039de:	930c      	str	r3, [sp, #48]	; 0x30
				clen = _to_hex(buf, val, true, 'x');
 80039e0:	2378      	movs	r3, #120	; 0x78
 80039e2:	2201      	movs	r2, #1
 80039e4:	6809      	ldr	r1, [r1, #0]
 80039e6:	a811      	add	r0, sp, #68	; 0x44
 80039e8:	f012 f95c 	bl	8015ca4 <_to_hex>
 80039ec:	9008      	str	r0, [sp, #32]
				prefix = 2;
 80039ee:	f04f 0802 	mov.w	r8, #2
			cptr = buf;
 80039f2:	af11      	add	r7, sp, #68	; 0x44
				break;
 80039f4:	e73a      	b.n	800386c <z_prf+0x3a4>
				cptr = va_arg(vargs, char *);
 80039f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80039f8:	1d1a      	adds	r2, r3, #4
 80039fa:	920c      	str	r2, [sp, #48]	; 0x30
 80039fc:	681f      	ldr	r7, [r3, #0]
				if (precision < 0) {
 80039fe:	f1bb 0f00 	cmp.w	fp, #0
 8003a02:	db07      	blt.n	8003a14 <z_prf+0x54c>
				for (clen = 0; clen < precision; clen++) {
 8003a04:	2300      	movs	r3, #0
 8003a06:	459b      	cmp	fp, r3
 8003a08:	dd07      	ble.n	8003a1a <z_prf+0x552>
					if (cptr[clen] == '\0') {
 8003a0a:	5cfa      	ldrb	r2, [r7, r3]
 8003a0c:	2a00      	cmp	r2, #0
 8003a0e:	d063      	beq.n	8003ad8 <z_prf+0x610>
				for (clen = 0; clen < precision; clen++) {
 8003a10:	3301      	adds	r3, #1
 8003a12:	e7f8      	b.n	8003a06 <z_prf+0x53e>
					precision = INT_MAX;
 8003a14:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8003a18:	e7f4      	b.n	8003a04 <z_prf+0x53c>
 8003a1a:	9308      	str	r3, [sp, #32]
			prefix = 0;
 8003a1c:	f04f 0800 	mov.w	r8, #0
				precision = 0;
 8003a20:	46c3      	mov	fp, r8
 8003a22:	e723      	b.n	800386c <z_prf+0x3a4>
				switch (i) {
 8003a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a26:	2b6c      	cmp	r3, #108	; 0x6c
 8003a28:	d006      	beq.n	8003a38 <z_prf+0x570>
 8003a2a:	2b7a      	cmp	r3, #122	; 0x7a
 8003a2c:	d019      	beq.n	8003a62 <z_prf+0x59a>
					val = va_arg(vargs, unsigned int);
 8003a2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a30:	1d1a      	adds	r2, r3, #4
 8003a32:	920c      	str	r2, [sp, #48]	; 0x30
 8003a34:	6819      	ldr	r1, [r3, #0]
					break;
 8003a36:	e003      	b.n	8003a40 <z_prf+0x578>
					val = va_arg(vargs, unsigned long);
 8003a38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a3a:	1d1a      	adds	r2, r3, #4
 8003a3c:	920c      	str	r2, [sp, #48]	; 0x30
 8003a3e:	6819      	ldr	r1, [r3, #0]
				if (c == 'o') {
 8003a40:	2f6f      	cmp	r7, #111	; 0x6f
 8003a42:	d013      	beq.n	8003a6c <z_prf+0x5a4>
				} else if (c == 'u') {
 8003a44:	2f75      	cmp	r7, #117	; 0x75
 8003a46:	d01a      	beq.n	8003a7e <z_prf+0x5b6>
					clen = _to_hex(buf, val, falt, c);
 8003a48:	463b      	mov	r3, r7
 8003a4a:	9f08      	ldr	r7, [sp, #32]
 8003a4c:	463a      	mov	r2, r7
 8003a4e:	a811      	add	r0, sp, #68	; 0x44
 8003a50:	f012 f928 	bl	8015ca4 <_to_hex>
 8003a54:	9008      	str	r0, [sp, #32]
					if (falt) {
 8003a56:	2f00      	cmp	r7, #0
 8003a58:	d143      	bne.n	8003ae2 <z_prf+0x61a>
			prefix = 0;
 8003a5a:	f04f 0800 	mov.w	r8, #0
			cptr = buf;
 8003a5e:	af11      	add	r7, sp, #68	; 0x44
 8003a60:	e704      	b.n	800386c <z_prf+0x3a4>
					val = va_arg(vargs, size_t);
 8003a62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a64:	1d1a      	adds	r2, r3, #4
 8003a66:	920c      	str	r2, [sp, #48]	; 0x30
 8003a68:	6819      	ldr	r1, [r3, #0]
					break;
 8003a6a:	e7e9      	b.n	8003a40 <z_prf+0x578>
					clen = _to_octal(buf, val, falt);
 8003a6c:	9a08      	ldr	r2, [sp, #32]
 8003a6e:	a811      	add	r0, sp, #68	; 0x44
 8003a70:	f012 f932 	bl	8015cd8 <_to_octal>
 8003a74:	9008      	str	r0, [sp, #32]
			prefix = 0;
 8003a76:	f04f 0800 	mov.w	r8, #0
			cptr = buf;
 8003a7a:	af11      	add	r7, sp, #68	; 0x44
 8003a7c:	e6f6      	b.n	800386c <z_prf+0x3a4>
					clen = _to_udec(buf, val);
 8003a7e:	a811      	add	r0, sp, #68	; 0x44
 8003a80:	f012 f93b 	bl	8015cfa <_to_udec>
 8003a84:	9008      	str	r0, [sp, #32]
			prefix = 0;
 8003a86:	f04f 0800 	mov.w	r8, #0
			cptr = buf;
 8003a8a:	af11      	add	r7, sp, #68	; 0x44
 8003a8c:	e6ee      	b.n	800386c <z_prf+0x3a4>
				PUTC('%');
 8003a8e:	4629      	mov	r1, r5
 8003a90:	2025      	movs	r0, #37	; 0x25
 8003a92:	47b0      	blx	r6
 8003a94:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003a98:	f000 80e1 	beq.w	8003c5e <z_prf+0x796>
				count++;
 8003a9c:	3401      	adds	r4, #1
				continue;
 8003a9e:	e51d      	b.n	80034dc <z_prf+0x14>
				PUTC('%');
 8003aa0:	4629      	mov	r1, r5
 8003aa2:	2025      	movs	r0, #37	; 0x25
 8003aa4:	47b0      	blx	r6
 8003aa6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003aaa:	f000 80da 	beq.w	8003c62 <z_prf+0x79a>
				PUTC(c);
 8003aae:	4629      	mov	r1, r5
 8003ab0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003ab2:	47b0      	blx	r6
 8003ab4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003ab8:	f000 80d5 	beq.w	8003c66 <z_prf+0x79e>
				count += 2;
 8003abc:	3402      	adds	r4, #2
				continue;
 8003abe:	e50d      	b.n	80034dc <z_prf+0x14>
					prefix = 1;
 8003ac0:	f04f 0801 	mov.w	r8, #1
			cptr = buf;
 8003ac4:	af11      	add	r7, sp, #68	; 0x44
 8003ac6:	e6d1      	b.n	800386c <z_prf+0x3a4>
					prefix = 1;
 8003ac8:	f04f 0801 	mov.w	r8, #1
			cptr = buf;
 8003acc:	af11      	add	r7, sp, #68	; 0x44
 8003ace:	e6cd      	b.n	800386c <z_prf+0x3a4>
					prefix = 1;
 8003ad0:	f04f 0801 	mov.w	r8, #1
			cptr = buf;
 8003ad4:	af11      	add	r7, sp, #68	; 0x44
 8003ad6:	e6c9      	b.n	800386c <z_prf+0x3a4>
 8003ad8:	9308      	str	r3, [sp, #32]
			prefix = 0;
 8003ada:	f04f 0800 	mov.w	r8, #0
				precision = 0;
 8003ade:	46c3      	mov	fp, r8
 8003ae0:	e6c4      	b.n	800386c <z_prf+0x3a4>
						prefix = 2;
 8003ae2:	f04f 0802 	mov.w	r8, #2
			cptr = buf;
 8003ae6:	af11      	add	r7, sp, #68	; 0x44
 8003ae8:	e6c0      	b.n	800386c <z_prf+0x3a4>
			} else if (fzero) {
 8003aea:	f1b9 0f00 	cmp.w	r9, #0
 8003aee:	d004      	beq.n	8003afa <z_prf+0x632>
				zero_head = width - clen;
 8003af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003af2:	9a08      	ldr	r2, [sp, #32]
 8003af4:	eba3 0902 	sub.w	r9, r3, r2
 8003af8:	e6c0      	b.n	800387c <z_prf+0x3b4>
				zero_head = 0;
 8003afa:	f04f 0900 	mov.w	r9, #0
 8003afe:	e6c1      	b.n	8003884 <z_prf+0x3bc>
				zero_head = 0;
 8003b00:	f04f 0900 	mov.w	r9, #0
 8003b04:	e6be      	b.n	8003884 <z_prf+0x3bc>
			clen -= prefix;
 8003b06:	9b08      	ldr	r3, [sp, #32]
 8003b08:	eba3 0a08 	sub.w	sl, r3, r8
			count += prefix;
 8003b0c:	eb04 0308 	add.w	r3, r4, r8
 8003b10:	461c      	mov	r4, r3
			while (prefix-- > 0) {
 8003b12:	4643      	mov	r3, r8
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8003b1a:	dd08      	ble.n	8003b2e <z_prf+0x666>
				PUTC(*cptr++);
 8003b1c:	4629      	mov	r1, r5
 8003b1e:	f817 0b01 	ldrb.w	r0, [r7], #1
 8003b22:	47b0      	blx	r6
 8003b24:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003b28:	d1f3      	bne.n	8003b12 <z_prf+0x64a>
 8003b2a:	4604      	mov	r4, r0
 8003b2c:	e4e3      	b.n	80034f6 <z_prf+0x2e>
			count += zero_head;
 8003b2e:	4623      	mov	r3, r4
 8003b30:	444b      	add	r3, r9
 8003b32:	4698      	mov	r8, r3
			while (zero_head-- > 0) {
 8003b34:	464b      	mov	r3, r9
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8003b3c:	dd07      	ble.n	8003b4e <z_prf+0x686>
				PUTC('0');
 8003b3e:	4629      	mov	r1, r5
 8003b40:	2030      	movs	r0, #48	; 0x30
 8003b42:	47b0      	blx	r6
 8003b44:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003b48:	d1f4      	bne.n	8003b34 <z_prf+0x66c>
 8003b4a:	4604      	mov	r4, r0
 8003b4c:	e4d3      	b.n	80034f6 <z_prf+0x2e>
			count += clen;
 8003b4e:	44d0      	add	r8, sl
			if (zero.predot) {
 8003b50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b52:	b933      	cbnz	r3, 8003b62 <z_prf+0x69a>
			if (zero.postdot) {
 8003b54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003b56:	bb1b      	cbnz	r3, 8003ba0 <z_prf+0x6d8>
			if (zero.trail) {
 8003b58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d05c      	beq.n	8003c18 <z_prf+0x750>
				c = *cptr;
 8003b5e:	783b      	ldrb	r3, [r7, #0]
				while (isdigit((int)c) || c == '.') {
 8003b60:	e043      	b.n	8003bea <z_prf+0x722>
				c = *cptr;
 8003b62:	7838      	ldrb	r0, [r7, #0]
 8003b64:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
				while (isdigit((int)c)) {
 8003b68:	2b09      	cmp	r3, #9
 8003b6a:	d809      	bhi.n	8003b80 <z_prf+0x6b8>
					PUTC(c);
 8003b6c:	4629      	mov	r1, r5
 8003b6e:	47b0      	blx	r6
 8003b70:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003b74:	d079      	beq.n	8003c6a <z_prf+0x7a2>
					clen--;
 8003b76:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					c = *++cptr;
 8003b7a:	f817 0f01 	ldrb.w	r0, [r7, #1]!
 8003b7e:	e7f1      	b.n	8003b64 <z_prf+0x69c>
				clen -= zero.predot;
 8003b80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b82:	ebaa 0a03 	sub.w	sl, sl, r3
				while (zero.predot-- > 0) {
 8003b86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b88:	1e5a      	subs	r2, r3, #1
 8003b8a:	920e      	str	r2, [sp, #56]	; 0x38
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	dde1      	ble.n	8003b54 <z_prf+0x68c>
					PUTC('0');
 8003b90:	4629      	mov	r1, r5
 8003b92:	2030      	movs	r0, #48	; 0x30
 8003b94:	47b0      	blx	r6
 8003b96:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003b9a:	d1f4      	bne.n	8003b86 <z_prf+0x6be>
 8003b9c:	4604      	mov	r4, r0
 8003b9e:	e4aa      	b.n	80034f6 <z_prf+0x2e>
					c = *cptr++;
 8003ba0:	783c      	ldrb	r4, [r7, #0]
 8003ba2:	3701      	adds	r7, #1
					PUTC(c);
 8003ba4:	4629      	mov	r1, r5
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	47b0      	blx	r6
 8003baa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003bae:	d05e      	beq.n	8003c6e <z_prf+0x7a6>
					clen--;
 8003bb0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				} while (c != '.');
 8003bb4:	2c2e      	cmp	r4, #46	; 0x2e
 8003bb6:	d1f3      	bne.n	8003ba0 <z_prf+0x6d8>
				clen -= zero.postdot;
 8003bb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003bba:	ebaa 0a03 	sub.w	sl, sl, r3
				while (zero.postdot-- > 0) {
 8003bbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003bc0:	1e5a      	subs	r2, r3, #1
 8003bc2:	920f      	str	r2, [sp, #60]	; 0x3c
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	ddc7      	ble.n	8003b58 <z_prf+0x690>
					PUTC('0');
 8003bc8:	4629      	mov	r1, r5
 8003bca:	2030      	movs	r0, #48	; 0x30
 8003bcc:	47b0      	blx	r6
 8003bce:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003bd2:	d1f4      	bne.n	8003bbe <z_prf+0x6f6>
 8003bd4:	4604      	mov	r4, r0
 8003bd6:	e48e      	b.n	80034f6 <z_prf+0x2e>
					PUTC(c);
 8003bd8:	4629      	mov	r1, r5
 8003bda:	47b0      	blx	r6
 8003bdc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003be0:	d047      	beq.n	8003c72 <z_prf+0x7aa>
					clen--;
 8003be2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					c = *++cptr;
 8003be6:	f817 3f01 	ldrb.w	r3, [r7, #1]!
				while (isdigit((int)c) || c == '.') {
 8003bea:	4618      	mov	r0, r3
 8003bec:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003bf0:	2a09      	cmp	r2, #9
 8003bf2:	d9f1      	bls.n	8003bd8 <z_prf+0x710>
 8003bf4:	2b2e      	cmp	r3, #46	; 0x2e
 8003bf6:	d0ef      	beq.n	8003bd8 <z_prf+0x710>
				clen -= zero.trail;
 8003bf8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003bfa:	ebaa 0a03 	sub.w	sl, sl, r3
				while (zero.trail-- > 0) {
 8003bfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003c00:	1e5a      	subs	r2, r3, #1
 8003c02:	9210      	str	r2, [sp, #64]	; 0x40
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	dd07      	ble.n	8003c18 <z_prf+0x750>
					PUTC('0');
 8003c08:	4629      	mov	r1, r5
 8003c0a:	2030      	movs	r0, #48	; 0x30
 8003c0c:	47b0      	blx	r6
 8003c0e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003c12:	d1f4      	bne.n	8003bfe <z_prf+0x736>
 8003c14:	4604      	mov	r4, r0
 8003c16:	e46e      	b.n	80034f6 <z_prf+0x2e>
			while (clen-- > 0) {
 8003c18:	4653      	mov	r3, sl
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003c20:	dd08      	ble.n	8003c34 <z_prf+0x76c>
				PUTC(*cptr++);
 8003c22:	4629      	mov	r1, r5
 8003c24:	f817 0b01 	ldrb.w	r0, [r7], #1
 8003c28:	47b0      	blx	r6
 8003c2a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003c2e:	d1f3      	bne.n	8003c18 <z_prf+0x750>
 8003c30:	4604      	mov	r4, r0
 8003c32:	e460      	b.n	80034f6 <z_prf+0x2e>
			if (width > 0) {
 8003c34:	f1bb 0f00 	cmp.w	fp, #0
 8003c38:	dc01      	bgt.n	8003c3e <z_prf+0x776>
			count += clen;
 8003c3a:	4644      	mov	r4, r8
 8003c3c:	e44e      	b.n	80034dc <z_prf+0x14>
				count += width;
 8003c3e:	eb0b 0408 	add.w	r4, fp, r8
				while (width-- > 0) {
 8003c42:	465b      	mov	r3, fp
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003c4a:	f77f ac47 	ble.w	80034dc <z_prf+0x14>
					PUTC(' ');
 8003c4e:	4629      	mov	r1, r5
 8003c50:	2020      	movs	r0, #32
 8003c52:	47b0      	blx	r6
 8003c54:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003c58:	d1f3      	bne.n	8003c42 <z_prf+0x77a>
 8003c5a:	4604      	mov	r4, r0
 8003c5c:	e44b      	b.n	80034f6 <z_prf+0x2e>
				PUTC('%');
 8003c5e:	4604      	mov	r4, r0
 8003c60:	e449      	b.n	80034f6 <z_prf+0x2e>
				PUTC('%');
 8003c62:	4604      	mov	r4, r0
 8003c64:	e447      	b.n	80034f6 <z_prf+0x2e>
				PUTC(c);
 8003c66:	4604      	mov	r4, r0
 8003c68:	e445      	b.n	80034f6 <z_prf+0x2e>
 8003c6a:	4604      	mov	r4, r0
 8003c6c:	e443      	b.n	80034f6 <z_prf+0x2e>
 8003c6e:	4604      	mov	r4, r0
 8003c70:	e441      	b.n	80034f6 <z_prf+0x2e>
 8003c72:	4604      	mov	r4, r0
 8003c74:	e43f      	b.n	80034f6 <z_prf+0x2e>
 8003c76:	bf00      	nop

08003c78 <stm32f3_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8003c78:	f04f 0210 	mov.w	r2, #16
 8003c7c:	f3ef 8311 	mrs	r3, BASEPRI
 8003c80:	f382 8811 	msr	BASEPRI, r2
 8003c84:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8003c88:	f383 8811 	msr	BASEPRI, r3
 8003c8c:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 8 MHz from HSI */
	SystemCoreClock = 8000000;
 8003c90:	4b02      	ldr	r3, [pc, #8]	; (8003c9c <stm32f3_init+0x24>)
 8003c92:	4a03      	ldr	r2, [pc, #12]	; (8003ca0 <stm32f3_init+0x28>)
 8003c94:	601a      	str	r2, [r3, #0]

	return 0;
}
 8003c96:	2000      	movs	r0, #0
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	20000590 	.word	0x20000590
 8003ca0:	007a1200 	.word	0x007a1200

08003ca4 <is_rodata>:
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
 8003ca4:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <is_rodata+0x18>)
 8003ca6:	4298      	cmp	r0, r3
 8003ca8:	d304      	bcc.n	8003cb4 <is_rodata+0x10>
 8003caa:	4b05      	ldr	r3, [pc, #20]	; (8003cc0 <is_rodata+0x1c>)
 8003cac:	4298      	cmp	r0, r3
 8003cae:	d303      	bcc.n	8003cb8 <is_rodata+0x14>
 8003cb0:	2000      	movs	r0, #0
 8003cb2:	4770      	bx	lr
 8003cb4:	2000      	movs	r0, #0
 8003cb6:	4770      	bx	lr
 8003cb8:	2001      	movs	r0, #1
		((const char *)addr < (const char *)RO_END));
}
 8003cba:	4770      	bx	lr
 8003cbc:	0801d284 	.word	0x0801d284
 8003cc0:	08021ecc 	.word	0x08021ecc

08003cc4 <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
 8003cc4:	b508      	push	{r3, lr}
	proc_tid = process_tid;
 8003cc6:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <thread_set+0x1c>)
 8003cc8:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 8003cca:	b118      	cbz	r0, 8003cd4 <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
 8003ccc:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <thread_set+0x20>)
 8003cce:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
 8003cd0:	2b09      	cmp	r3, #9
 8003cd2:	dc00      	bgt.n	8003cd6 <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
 8003cd4:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
 8003cd6:	4804      	ldr	r0, [pc, #16]	; (8003ce8 <thread_set+0x24>)
 8003cd8:	f010 fbaa 	bl	8014430 <z_impl_k_sem_give>
}
 8003cdc:	e7fa      	b.n	8003cd4 <thread_set+0x10>
 8003cde:	bf00      	nop
 8003ce0:	20001538 	.word	0x20001538
 8003ce4:	20001508 	.word	0x20001508
 8003ce8:	20000838 	.word	0x20000838

08003cec <log_process_thread_timer_expiry_fn>:
	__ASSERT_NO_MSG(false);
}
#endif /* !defined(CONFIG_USERSPACE) */

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
 8003cec:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
 8003cee:	4802      	ldr	r0, [pc, #8]	; (8003cf8 <log_process_thread_timer_expiry_fn+0xc>)
 8003cf0:	f010 fb9e 	bl	8014430 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
 8003cf4:	bd08      	pop	{r3, pc}
 8003cf6:	bf00      	nop
 8003cf8:	20000838 	.word	0x20000838

08003cfc <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
 8003cfc:	b530      	push	{r4, r5, lr}
 8003cfe:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
 8003d00:	2200      	movs	r2, #0
 8003d02:	490f      	ldr	r1, [pc, #60]	; (8003d40 <enable_logger+0x44>)
 8003d04:	480f      	ldr	r0, [pc, #60]	; (8003d44 <enable_logger+0x48>)
 8003d06:	f019 f9d5 	bl	801d0b4 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8003d0a:	4d0f      	ldr	r5, [pc, #60]	; (8003d48 <enable_logger+0x4c>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	2300      	movs	r3, #0
 8003d10:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003d14:	2400      	movs	r4, #0
 8003d16:	9404      	str	r4, [sp, #16]
 8003d18:	230e      	movs	r3, #14
 8003d1a:	9303      	str	r3, [sp, #12]
 8003d1c:	9402      	str	r4, [sp, #8]
 8003d1e:	9401      	str	r4, [sp, #4]
 8003d20:	9400      	str	r4, [sp, #0]
 8003d22:	4b0a      	ldr	r3, [pc, #40]	; (8003d4c <enable_logger+0x50>)
 8003d24:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003d28:	4909      	ldr	r1, [pc, #36]	; (8003d50 <enable_logger+0x54>)
 8003d2a:	4628      	mov	r0, r5
 8003d2c:	f019 f86d 	bl	801ce0a <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
 8003d30:	4908      	ldr	r1, [pc, #32]	; (8003d54 <enable_logger+0x58>)
 8003d32:	4628      	mov	r0, r5
 8003d34:	f019 f858 	bl	801cde8 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
 8003d38:	4620      	mov	r0, r4
 8003d3a:	b009      	add	sp, #36	; 0x24
 8003d3c:	bd30      	pop	{r4, r5, pc}
 8003d3e:	bf00      	nop
 8003d40:	08003ced 	.word	0x08003ced
 8003d44:	20000bf0 	.word	0x20000bf0
 8003d48:	20000c28 	.word	0x20000c28
 8003d4c:	0800423d 	.word	0x0800423d
 8003d50:	20003ad0 	.word	0x20003ad0
 8003d54:	0801eccc 	.word	0x0801eccc

08003d58 <log_core_init>:
{
 8003d58:	b508      	push	{r3, lr}
		log_msg_pool_init();
 8003d5a:	f000 fc9b 	bl	8004694 <log_msg_pool_init>
		log_list_init(&list);
 8003d5e:	4808      	ldr	r0, [pc, #32]	; (8003d80 <log_core_init+0x28>)
 8003d60:	f012 f831 	bl	8015dc6 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
 8003d64:	2306      	movs	r3, #6
 8003d66:	2228      	movs	r2, #40	; 0x28
 8003d68:	4906      	ldr	r1, [pc, #24]	; (8003d84 <log_core_init+0x2c>)
 8003d6a:	4807      	ldr	r0, [pc, #28]	; (8003d88 <log_core_init+0x30>)
 8003d6c:	f018 fdc8 	bl	801c900 <k_mem_slab_init>
		timestamp_func = k_uptime_get_32;
 8003d70:	4b06      	ldr	r3, [pc, #24]	; (8003d8c <log_core_init+0x34>)
 8003d72:	4a07      	ldr	r2, [pc, #28]	; (8003d90 <log_core_init+0x38>)
 8003d74:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
 8003d76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d7a:	f000 fe9f 	bl	8004abc <log_output_timestamp_freq_set>
}
 8003d7e:	bd08      	pop	{r3, pc}
 8003d80:	20001514 	.word	0x20001514
 8003d84:	20005f54 	.word	0x20005f54
 8003d88:	2000151c 	.word	0x2000151c
 8003d8c:	20000344 	.word	0x20000344
 8003d90:	08015dfb 	.word	0x08015dfb

08003d94 <dropped_notify>:
{
 8003d94:	b538      	push	{r3, r4, r5, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8003d96:	4b12      	ldr	r3, [pc, #72]	; (8003de0 <dropped_notify+0x4c>)
 8003d98:	2400      	movs	r4, #0
 8003d9a:	f3bf 8f5b 	dmb	ish
 8003d9e:	e853 5f00 	ldrex	r5, [r3]
 8003da2:	e843 4200 	strex	r2, r4, [r3]
 8003da6:	2a00      	cmp	r2, #0
 8003da8:	d1f9      	bne.n	8003d9e <dropped_notify+0xa>
 8003daa:	f3bf 8f5b 	dmb	ish
	for (int i = 0; i < log_backend_count_get(); i++) {
 8003dae:	e000      	b.n	8003db2 <dropped_notify+0x1e>
 8003db0:	3401      	adds	r4, #1
 8003db2:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <dropped_notify+0x50>)
 8003db4:	4a0c      	ldr	r2, [pc, #48]	; (8003de8 <dropped_notify+0x54>)
 8003db6:	1a9b      	subs	r3, r3, r2
 8003db8:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 8003dbc:	da0f      	bge.n	8003dde <dropped_notify+0x4a>
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
 8003dbe:	480a      	ldr	r0, [pc, #40]	; (8003de8 <dropped_notify+0x54>)
 8003dc0:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 8003dc4:	6843      	ldr	r3, [r0, #4]
 8003dc6:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0f1      	beq.n	8003db0 <dropped_notify+0x1c>
	if (backend->api->dropped != NULL) {
 8003dcc:	0123      	lsls	r3, r4, #4
 8003dce:	4a06      	ldr	r2, [pc, #24]	; (8003de8 <dropped_notify+0x54>)
 8003dd0:	58d3      	ldr	r3, [r2, r3]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0eb      	beq.n	8003db0 <dropped_notify+0x1c>
		backend->api->dropped(backend, cnt);
 8003dd8:	4629      	mov	r1, r5
 8003dda:	4798      	blx	r3
 8003ddc:	e7e8      	b.n	8003db0 <dropped_notify+0x1c>
}
 8003dde:	bd38      	pop	{r3, r4, r5, pc}
 8003de0:	2000150c 	.word	0x2000150c
 8003de4:	0801d7b8 	.word	0x0801d7b8
 8003de8:	0801d7a8 	.word	0x0801d7a8

08003dec <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8003dec:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <log_dropped+0x1c>)
 8003dee:	f3bf 8f5b 	dmb	ish
 8003df2:	e853 2f00 	ldrex	r2, [r3]
 8003df6:	3201      	adds	r2, #1
 8003df8:	e843 2100 	strex	r1, r2, [r3]
 8003dfc:	2900      	cmp	r1, #0
 8003dfe:	d1f8      	bne.n	8003df2 <log_dropped+0x6>
 8003e00:	f3bf 8f5b 	dmb	ish
}
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	2000150c 	.word	0x2000150c

08003e0c <log_source_name_get>:
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
 8003e0c:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <log_source_name_get+0x18>)
 8003e0e:	4a06      	ldr	r2, [pc, #24]	; (8003e28 <log_source_name_get+0x1c>)
 8003e10:	1a9b      	subs	r3, r3, r2
 8003e12:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
 8003e16:	d202      	bcs.n	8003e1e <log_source_name_get+0x12>
 * @param source_id Source ID.
 * @return Name.
 */
static inline const char *log_name_get(uint32_t source_id)
{
	return __log_const_start[source_id].name;
 8003e18:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
 8003e1c:	4770      	bx	lr
 8003e1e:	2000      	movs	r0, #0
}
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	0801d7a8 	.word	0x0801d7a8
 8003e28:	0801d6d0 	.word	0x0801d6d0

08003e2c <log_backend_enable>:
{
 8003e2c:	b508      	push	{r3, lr}
	id += backend - log_backend_get(0);
 8003e2e:	4b0b      	ldr	r3, [pc, #44]	; (8003e5c <log_backend_enable+0x30>)
 8003e30:	1ac3      	subs	r3, r0, r3
 8003e32:	111b      	asrs	r3, r3, #4
 8003e34:	3301      	adds	r3, #1
	backend->cb->id = id;
 8003e36:	6842      	ldr	r2, [r0, #4]
 8003e38:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
 8003e3a:	6843      	ldr	r3, [r0, #4]
 8003e3c:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
 8003e3e:	6843      	ldr	r3, [r0, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	715a      	strb	r2, [r3, #5]
	if (!backend_attached) {
 8003e44:	4b06      	ldr	r3, [pc, #24]	; (8003e60 <log_backend_enable+0x34>)
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	b11b      	cbz	r3, 8003e52 <log_backend_enable+0x26>
	backend_attached = true;
 8003e4a:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <log_backend_enable+0x34>)
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	701a      	strb	r2, [r3, #0]
}
 8003e50:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
 8003e52:	4804      	ldr	r0, [pc, #16]	; (8003e64 <log_backend_enable+0x38>)
 8003e54:	f010 faec 	bl	8014430 <z_impl_k_sem_give>
}
 8003e58:	e7f7      	b.n	8003e4a <log_backend_enable+0x1e>
 8003e5a:	bf00      	nop
 8003e5c:	0801d7a8 	.word	0x0801d7a8
 8003e60:	200034f9 	.word	0x200034f9
 8003e64:	20000838 	.word	0x20000838

08003e68 <log_init>:
{
 8003e68:	b538      	push	{r3, r4, r5, lr}
 8003e6a:	4b15      	ldr	r3, [pc, #84]	; (8003ec0 <log_init+0x58>)
 8003e6c:	f3bf 8f5b 	dmb	ish
 8003e70:	e853 2f00 	ldrex	r2, [r3]
 8003e74:	1c51      	adds	r1, r2, #1
 8003e76:	e843 1000 	strex	r0, r1, [r3]
 8003e7a:	2800      	cmp	r0, #0
 8003e7c:	d1f8      	bne.n	8003e70 <log_init+0x8>
 8003e7e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
 8003e82:	b9da      	cbnz	r2, 8003ebc <log_init+0x54>
	for (i = 0; i < log_backend_count_get(); i++) {
 8003e84:	2400      	movs	r4, #0
 8003e86:	e005      	b.n	8003e94 <log_init+0x2c>
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
 8003e88:	2204      	movs	r2, #4
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	4628      	mov	r0, r5
 8003e8e:	f7ff ffcd 	bl	8003e2c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
 8003e92:	3401      	adds	r4, #1
 8003e94:	4b0b      	ldr	r3, [pc, #44]	; (8003ec4 <log_init+0x5c>)
 8003e96:	4a0c      	ldr	r2, [pc, #48]	; (8003ec8 <log_init+0x60>)
 8003e98:	1a9b      	subs	r3, r3, r2
 8003e9a:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 8003e9e:	da0d      	bge.n	8003ebc <log_init+0x54>
	return &__log_backends_start[idx];
 8003ea0:	4d09      	ldr	r5, [pc, #36]	; (8003ec8 <log_init+0x60>)
 8003ea2:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
 8003ea6:	7b2b      	ldrb	r3, [r5, #12]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0f2      	beq.n	8003e92 <log_init+0x2a>
			if (backend->api->init != NULL) {
 8003eac:	0123      	lsls	r3, r4, #4
 8003eae:	4a06      	ldr	r2, [pc, #24]	; (8003ec8 <log_init+0x60>)
 8003eb0:	58d3      	ldr	r3, [r2, r3]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0e7      	beq.n	8003e88 <log_init+0x20>
				backend->api->init();
 8003eb8:	4798      	blx	r3
 8003eba:	e7e5      	b.n	8003e88 <log_init+0x20>
}
 8003ebc:	bd38      	pop	{r3, r4, r5, pc}
 8003ebe:	bf00      	nop
 8003ec0:	20001510 	.word	0x20001510
 8003ec4:	0801d7b8 	.word	0x0801d7b8
 8003ec8:	0801d7a8 	.word	0x0801d7a8

08003ecc <log_strdup>:
{
 8003ecc:	b510      	push	{r4, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	4604      	mov	r4, r0
	    is_rodata(str) || _is_user_context()) {
 8003ed2:	f7ff fee7 	bl	8003ca4 <is_rodata>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
 8003ed6:	bb10      	cbnz	r0, 8003f1e <log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
 8003ed8:	2200      	movs	r2, #0
 8003eda:	2300      	movs	r3, #0
 8003edc:	a901      	add	r1, sp, #4
 8003ede:	4811      	ldr	r0, [pc, #68]	; (8003f24 <log_strdup+0x58>)
 8003ee0:	f00f fd52 	bl	8013988 <k_mem_slab_alloc>
	if (err != 0) {
 8003ee4:	b108      	cbz	r0, 8003eea <log_strdup+0x1e>
		return (char *)log_strdup_fail_msg;
 8003ee6:	4c10      	ldr	r4, [pc, #64]	; (8003f28 <log_strdup+0x5c>)
 8003ee8:	e019      	b.n	8003f1e <log_strdup+0x52>
	(void)atomic_set(&dup->refcount, 1);
 8003eea:	9b01      	ldr	r3, [sp, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8003eec:	2201      	movs	r2, #1
 8003eee:	f3bf 8f5b 	dmb	ish
 8003ef2:	e853 1f00 	ldrex	r1, [r3]
 8003ef6:	e843 2000 	strex	r0, r2, [r3]
 8003efa:	2800      	cmp	r0, #0
 8003efc:	d1f9      	bne.n	8003ef2 <log_strdup+0x26>
 8003efe:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
 8003f02:	221f      	movs	r2, #31
 8003f04:	4621      	mov	r1, r4
 8003f06:	9801      	ldr	r0, [sp, #4]
 8003f08:	3004      	adds	r0, #4
 8003f0a:	f013 ff4a 	bl	8017da2 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
 8003f0e:	9c01      	ldr	r4, [sp, #4]
 8003f10:	237e      	movs	r3, #126	; 0x7e
 8003f12:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
 8003f16:	2300      	movs	r3, #0
 8003f18:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	return dup->buf;
 8003f1c:	3404      	adds	r4, #4
}
 8003f1e:	4620      	mov	r0, r4
 8003f20:	b002      	add	sp, #8
 8003f22:	bd10      	pop	{r4, pc}
 8003f24:	2000151c 	.word	0x2000151c
 8003f28:	0801ecd4 	.word	0x0801ecd4

08003f2c <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
 8003f2c:	b138      	cbz	r0, 8003f3e <log_is_strdup+0x12>
 8003f2e:	4a07      	ldr	r2, [pc, #28]	; (8003f4c <log_is_strdup+0x20>)
 8003f30:	4290      	cmp	r0, r2
 8003f32:	d306      	bcc.n	8003f42 <log_is_strdup+0x16>
 8003f34:	32f0      	adds	r2, #240	; 0xf0
 8003f36:	4290      	cmp	r0, r2
 8003f38:	d305      	bcc.n	8003f46 <log_is_strdup+0x1a>
 8003f3a:	2000      	movs	r0, #0
 8003f3c:	4770      	bx	lr
 8003f3e:	2000      	movs	r0, #0
 8003f40:	4770      	bx	lr
 8003f42:	2000      	movs	r0, #0
 8003f44:	4770      	bx	lr
 8003f46:	2001      	movs	r0, #1
}
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	20005f54 	.word	0x20005f54

08003f50 <detect_missed_strdup>:
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 8003f50:	7a03      	ldrb	r3, [r0, #8]
	if (!log_msg_is_std(msg)) {
 8003f52:	f013 0f01 	tst.w	r3, #1
 8003f56:	d000      	beq.n	8003f5a <detect_missed_strdup+0xa>
 8003f58:	4770      	bx	lr
{
 8003f5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	4606      	mov	r6, r0
	msg_str = log_msg_str_get(msg);
 8003f62:	f012 f82f 	bl	8015fc4 <log_msg_str_get>
 8003f66:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
 8003f68:	4630      	mov	r0, r6
 8003f6a:	f012 f816 	bl	8015f9a <log_msg_nargs_get>
 8003f6e:	4601      	mov	r1, r0
 8003f70:	4638      	mov	r0, r7
 8003f72:	f011 ff4a 	bl	8015e0a <z_log_get_s_mask>
 8003f76:	4605      	mov	r5, r0
	while (mask) {
 8003f78:	e004      	b.n	8003f84 <detect_missed_strdup+0x34>
		mask &= ~BIT(idx);
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	fa03 f404 	lsl.w	r4, r3, r4
 8003f80:	ea25 0504 	bic.w	r5, r5, r4
	while (mask) {
 8003f84:	b36d      	cbz	r5, 8003fe2 <detect_missed_strdup+0x92>
		idx = 31 - __builtin_clz(mask);
 8003f86:	fab5 f485 	clz	r4, r5
 8003f8a:	f1c4 041f 	rsb	r4, r4, #31
		str = (const char *)log_msg_arg_get(msg, idx);
 8003f8e:	4621      	mov	r1, r4
 8003f90:	4630      	mov	r0, r6
 8003f92:	f012 f805 	bl	8015fa0 <log_msg_arg_get>
 8003f96:	4681      	mov	r9, r0
		if (!is_rodata(str) && !log_is_strdup(str) &&
 8003f98:	f7ff fe84 	bl	8003ca4 <is_rodata>
 8003f9c:	2800      	cmp	r0, #0
 8003f9e:	d1ec      	bne.n	8003f7a <detect_missed_strdup+0x2a>
 8003fa0:	4648      	mov	r0, r9
 8003fa2:	f7ff ffc3 	bl	8003f2c <log_is_strdup>
 8003fa6:	2800      	cmp	r0, #0
 8003fa8:	d1e7      	bne.n	8003f7a <detect_missed_strdup+0x2a>
 8003faa:	4b0f      	ldr	r3, [pc, #60]	; (8003fe8 <detect_missed_strdup+0x98>)
 8003fac:	4599      	cmp	r9, r3
 8003fae:	d0e4      	beq.n	8003f7a <detect_missed_strdup+0x2a>
	return msg->hdr.ids.source_id;
 8003fb0:	8971      	ldrh	r1, [r6, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
 8003fb2:	0989      	lsrs	r1, r1, #6
 8003fb4:	f7ff ff2a 	bl	8003e0c <log_source_name_get>
 8003fb8:	4602      	mov	r2, r0
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
 8003fba:	2301      	movs	r3, #1
 8003fbc:	f363 0802 	bfi	r8, r3, #0, #3
 8003fc0:	f36f 08c5 	bfc	r8, #3, #3
 8003fc4:	4b09      	ldr	r3, [pc, #36]	; (8003fec <detect_missed_strdup+0x9c>)
 8003fc6:	490a      	ldr	r1, [pc, #40]	; (8003ff0 <detect_missed_strdup+0xa0>)
 8003fc8:	1a5b      	subs	r3, r3, r1
 8003fca:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8003fce:	f363 188f 	bfi	r8, r3, #6, #10
 8003fd2:	f8ad 8000 	strh.w	r8, [sp]
 8003fd6:	463b      	mov	r3, r7
 8003fd8:	4621      	mov	r1, r4
 8003fda:	4806      	ldr	r0, [pc, #24]	; (8003ff4 <detect_missed_strdup+0xa4>)
 8003fdc:	f000 f87a 	bl	80040d4 <log_3>
 8003fe0:	e7cb      	b.n	8003f7a <detect_missed_strdup+0x2a>
}
 8003fe2:	b003      	add	sp, #12
 8003fe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003fe8:	0801ecd4 	.word	0x0801ecd4
 8003fec:	0801d750 	.word	0x0801d750
 8003ff0:	0801d6d0 	.word	0x0801d6d0
 8003ff4:	0801ecf0 	.word	0x0801ecf0

08003ff8 <msg_process>:
{
 8003ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ffa:	4606      	mov	r6, r0
	if (!bypass) {
 8003ffc:	bb19      	cbnz	r1, 8004046 <msg_process+0x4e>
		    !panic_mode) {
 8003ffe:	4b14      	ldr	r3, [pc, #80]	; (8004050 <msg_process+0x58>)
 8004000:	781b      	ldrb	r3, [r3, #0]
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
 8004002:	b10b      	cbz	r3, 8004008 <msg_process+0x10>
{
 8004004:	2400      	movs	r4, #0
 8004006:	e003      	b.n	8004010 <msg_process+0x18>
			detect_missed_strdup(msg);
 8004008:	f7ff ffa2 	bl	8003f50 <detect_missed_strdup>
 800400c:	e7fa      	b.n	8004004 <msg_process+0xc>
		for (int i = 0; i < log_backend_count_get(); i++) {
 800400e:	3401      	adds	r4, #1
 8004010:	4b10      	ldr	r3, [pc, #64]	; (8004054 <msg_process+0x5c>)
 8004012:	4a11      	ldr	r2, [pc, #68]	; (8004058 <msg_process+0x60>)
 8004014:	1a9b      	subs	r3, r3, r2
 8004016:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 800401a:	da14      	bge.n	8004046 <msg_process+0x4e>
 800401c:	4d0e      	ldr	r5, [pc, #56]	; (8004058 <msg_process+0x60>)
 800401e:	eb05 1504 	add.w	r5, r5, r4, lsl #4
	return backend->cb->active;
 8004022:	686b      	ldr	r3, [r5, #4]
 8004024:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0f1      	beq.n	800400e <msg_process+0x16>
			    msg_filter_check(backend, msg)) {
 800402a:	4631      	mov	r1, r6
 800402c:	4628      	mov	r0, r5
 800402e:	f011 fee2 	bl	8015df6 <msg_filter_check>
			if (log_backend_is_active(backend) &&
 8004032:	2800      	cmp	r0, #0
 8004034:	d0eb      	beq.n	800400e <msg_process+0x16>
	backend->api->put(backend, msg);
 8004036:	0127      	lsls	r7, r4, #4
 8004038:	4b07      	ldr	r3, [pc, #28]	; (8004058 <msg_process+0x60>)
 800403a:	59db      	ldr	r3, [r3, r7]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4631      	mov	r1, r6
 8004040:	4628      	mov	r0, r5
 8004042:	4798      	blx	r3
}
 8004044:	e7e3      	b.n	800400e <msg_process+0x16>
	log_msg_put(msg);
 8004046:	4630      	mov	r0, r6
 8004048:	f011 ffbe 	bl	8015fc8 <log_msg_put>
}
 800404c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800404e:	bf00      	nop
 8004050:	200034fa 	.word	0x200034fa
 8004054:	0801d7b8 	.word	0x0801d7b8
 8004058:	0801d7a8 	.word	0x0801d7a8

0800405c <z_impl_log_process>:
{
 800405c:	b538      	push	{r3, r4, r5, lr}
 800405e:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
 8004060:	4b18      	ldr	r3, [pc, #96]	; (80040c4 <z_impl_log_process+0x68>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	b903      	cbnz	r3, 8004068 <z_impl_log_process+0xc>
 8004066:	b340      	cbz	r0, 80040ba <z_impl_log_process+0x5e>
	__asm__ volatile(
 8004068:	f04f 0310 	mov.w	r3, #16
 800406c:	f3ef 8511 	mrs	r5, BASEPRI
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
 8004078:	4813      	ldr	r0, [pc, #76]	; (80040c8 <z_impl_log_process+0x6c>)
 800407a:	f011 feb4 	bl	8015de6 <log_list_head_get>
	__asm__ volatile(
 800407e:	f385 8811 	msr	BASEPRI, r5
 8004082:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
 8004086:	b170      	cbz	r0, 80040a6 <z_impl_log_process+0x4a>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8004088:	4b10      	ldr	r3, [pc, #64]	; (80040cc <z_impl_log_process+0x70>)
 800408a:	f3bf 8f5b 	dmb	ish
 800408e:	e853 2f00 	ldrex	r2, [r3]
 8004092:	3a01      	subs	r2, #1
 8004094:	e843 2100 	strex	r1, r2, [r3]
 8004098:	2900      	cmp	r1, #0
 800409a:	d1f8      	bne.n	800408e <z_impl_log_process+0x32>
 800409c:	f3bf 8f5b 	dmb	ish
		msg_process(msg, bypass);
 80040a0:	4621      	mov	r1, r4
 80040a2:	f7ff ffa9 	bl	8003ff8 <msg_process>
	if (!bypass && dropped_cnt) {
 80040a6:	b914      	cbnz	r4, 80040ae <z_impl_log_process+0x52>
 80040a8:	4b09      	ldr	r3, [pc, #36]	; (80040d0 <z_impl_log_process+0x74>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	b933      	cbnz	r3, 80040bc <z_impl_log_process+0x60>
	return (log_list_head_peek(&list) != NULL);
 80040ae:	4806      	ldr	r0, [pc, #24]	; (80040c8 <z_impl_log_process+0x6c>)
 80040b0:	f011 fe97 	bl	8015de2 <log_list_head_peek>
 80040b4:	3800      	subs	r0, #0
 80040b6:	bf18      	it	ne
 80040b8:	2001      	movne	r0, #1
}
 80040ba:	bd38      	pop	{r3, r4, r5, pc}
		dropped_notify();
 80040bc:	f7ff fe6a 	bl	8003d94 <dropped_notify>
 80040c0:	e7f5      	b.n	80040ae <z_impl_log_process+0x52>
 80040c2:	bf00      	nop
 80040c4:	200034f9 	.word	0x200034f9
 80040c8:	20001514 	.word	0x20001514
 80040cc:	20001508 	.word	0x20001508
 80040d0:	2000150c 	.word	0x2000150c

080040d4 <log_3>:
{
 80040d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040d8:	b082      	sub	sp, #8
 80040da:	4680      	mov	r8, r0
 80040dc:	460f      	mov	r7, r1
 80040de:	4616      	mov	r6, r2
 80040e0:	461d      	mov	r5, r3
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 80040e2:	f000 fafb 	bl	80046dc <log_msg_chunk_alloc>

	if (msg != NULL) {
 80040e6:	4604      	mov	r4, r0
 80040e8:	b140      	cbz	r0, 80040fc <log_3+0x28>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
 80040ea:	2301      	movs	r3, #1
 80040ec:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 80040ee:	2200      	movs	r2, #0
 80040f0:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
 80040f2:	f04f 0300 	mov.w	r3, #0
 80040f6:	f362 0300 	bfi	r3, r2, #0, #1
 80040fa:	7203      	strb	r3, [r0, #8]
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
 80040fc:	b14c      	cbz	r4, 8004112 <log_3+0x3e>
		msg->str = str;
 80040fe:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 3U;
 8004102:	7a63      	ldrb	r3, [r4, #9]
 8004104:	2203      	movs	r2, #3
 8004106:	f362 1307 	bfi	r3, r2, #4, #4
 800410a:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
 800410c:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
 800410e:	61a6      	str	r6, [r4, #24]
		msg->payload.single.args[2] = arg3;
 8004110:	61e5      	str	r5, [r4, #28]
		if (msg == NULL) {
 8004112:	2c00      	cmp	r4, #0
 8004114:	d030      	beq.n	8004178 <log_3+0xa4>
	msg->hdr.ids = src_level;
 8004116:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800411a:	8163      	strh	r3, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
 800411c:	4b2a      	ldr	r3, [pc, #168]	; (80041c8 <log_3+0xf4>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4798      	blx	r3
 8004122:	60e0      	str	r0, [r4, #12]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8004124:	4b29      	ldr	r3, [pc, #164]	; (80041cc <log_3+0xf8>)
 8004126:	f3bf 8f5b 	dmb	ish
 800412a:	e853 2f00 	ldrex	r2, [r3]
 800412e:	3201      	adds	r2, #1
 8004130:	e843 2100 	strex	r1, r2, [r3]
 8004134:	2900      	cmp	r1, #0
 8004136:	d1f8      	bne.n	800412a <log_3+0x56>
 8004138:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
 800413c:	f04f 0310 	mov.w	r3, #16
 8004140:	f3ef 8511 	mrs	r5, BASEPRI
 8004144:	f383 8811 	msr	BASEPRI, r3
 8004148:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 800414c:	4621      	mov	r1, r4
 800414e:	4820      	ldr	r0, [pc, #128]	; (80041d0 <log_3+0xfc>)
 8004150:	f011 fe3d 	bl	8015dce <log_list_add_tail>
	__asm__ volatile(
 8004154:	f385 8811 	msr	BASEPRI, r5
 8004158:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
 800415c:	4b1d      	ldr	r3, [pc, #116]	; (80041d4 <log_3+0x100>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	b96b      	cbnz	r3, 800417e <log_3+0xaa>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 8004162:	4b1d      	ldr	r3, [pc, #116]	; (80041d8 <log_3+0x104>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	b11b      	cbz	r3, 8004170 <log_3+0x9c>
 8004168:	4a18      	ldr	r2, [pc, #96]	; (80041cc <log_3+0xf8>)
 800416a:	6812      	ldr	r2, [r2, #0]
 800416c:	2a01      	cmp	r2, #1
 800416e:	d016      	beq.n	800419e <log_3+0xca>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 8004170:	4a16      	ldr	r2, [pc, #88]	; (80041cc <log_3+0xf8>)
 8004172:	6812      	ldr	r2, [r2, #0]
 8004174:	2a0a      	cmp	r2, #10
 8004176:	d01d      	beq.n	80041b4 <log_3+0xe0>
}
 8004178:	b002      	add	sp, #8
 800417a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
 800417e:	f04f 0310 	mov.w	r3, #16
 8004182:	f3ef 8411 	mrs	r4, BASEPRI
 8004186:	f383 8811 	msr	BASEPRI, r3
 800418a:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
 800418e:	2000      	movs	r0, #0
 8004190:	f7ff ff64 	bl	800405c <z_impl_log_process>
	__asm__ volatile(
 8004194:	f384 8811 	msr	BASEPRI, r4
 8004198:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 800419c:	e7ec      	b.n	8004178 <log_3+0xa4>
	z_impl_k_timer_start(timer, duration, period);
 800419e:	2200      	movs	r2, #0
 80041a0:	2300      	movs	r3, #0
 80041a2:	e9cd 2300 	strd	r2, r3, [sp]
 80041a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80041aa:	2300      	movs	r3, #0
 80041ac:	480b      	ldr	r0, [pc, #44]	; (80041dc <log_3+0x108>)
 80041ae:	f010 fc2f 	bl	8014a10 <z_impl_k_timer_start>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 80041b2:	e7e1      	b.n	8004178 <log_3+0xa4>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0df      	beq.n	8004178 <log_3+0xa4>
	z_impl_k_timer_stop(timer);
 80041b8:	4808      	ldr	r0, [pc, #32]	; (80041dc <log_3+0x108>)
 80041ba:	f018 ff87 	bl	801d0cc <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 80041be:	4808      	ldr	r0, [pc, #32]	; (80041e0 <log_3+0x10c>)
 80041c0:	f010 f936 	bl	8014430 <z_impl_k_sem_give>
}
 80041c4:	e7d8      	b.n	8004178 <log_3+0xa4>
 80041c6:	bf00      	nop
 80041c8:	20000344 	.word	0x20000344
 80041cc:	20001508 	.word	0x20001508
 80041d0:	20001514 	.word	0x20001514
 80041d4:	200034fa 	.word	0x200034fa
 80041d8:	20001538 	.word	0x20001538
 80041dc:	20000bf0 	.word	0x20000bf0
 80041e0:	20000838 	.word	0x20000838

080041e4 <z_impl_log_panic>:
	if (panic_mode) {
 80041e4:	4b12      	ldr	r3, [pc, #72]	; (8004230 <z_impl_log_panic+0x4c>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	b103      	cbz	r3, 80041ec <z_impl_log_panic+0x8>
 80041ea:	4770      	bx	lr
{
 80041ec:	b510      	push	{r4, lr}
	log_init();
 80041ee:	f7ff fe3b 	bl	8003e68 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
 80041f2:	2400      	movs	r4, #0
 80041f4:	e000      	b.n	80041f8 <z_impl_log_panic+0x14>
 80041f6:	3401      	adds	r4, #1
 80041f8:	4b0e      	ldr	r3, [pc, #56]	; (8004234 <z_impl_log_panic+0x50>)
 80041fa:	4a0f      	ldr	r2, [pc, #60]	; (8004238 <z_impl_log_panic+0x54>)
 80041fc:	1a9b      	subs	r3, r3, r2
 80041fe:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 8004202:	da0c      	bge.n	800421e <z_impl_log_panic+0x3a>
	return &__log_backends_start[idx];
 8004204:	480c      	ldr	r0, [pc, #48]	; (8004238 <z_impl_log_panic+0x54>)
 8004206:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
 800420a:	6843      	ldr	r3, [r0, #4]
 800420c:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0f1      	beq.n	80041f6 <z_impl_log_panic+0x12>
	backend->api->panic(backend);
 8004212:	0123      	lsls	r3, r4, #4
 8004214:	4a08      	ldr	r2, [pc, #32]	; (8004238 <z_impl_log_panic+0x54>)
 8004216:	58d3      	ldr	r3, [r2, r3]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	4798      	blx	r3
}
 800421c:	e7eb      	b.n	80041f6 <z_impl_log_panic+0x12>
 800421e:	2000      	movs	r0, #0
 8004220:	f7ff ff1c 	bl	800405c <z_impl_log_process>
		while (log_process(false) == true) {
 8004224:	2800      	cmp	r0, #0
 8004226:	d1fa      	bne.n	800421e <z_impl_log_panic+0x3a>
	panic_mode = true;
 8004228:	4b01      	ldr	r3, [pc, #4]	; (8004230 <z_impl_log_panic+0x4c>)
 800422a:	2201      	movs	r2, #1
 800422c:	701a      	strb	r2, [r3, #0]
}
 800422e:	bd10      	pop	{r4, pc}
 8004230:	200034fa 	.word	0x200034fa
 8004234:	0801d7b8 	.word	0x0801d7b8
 8004238:	0801d7a8 	.word	0x0801d7a8

0800423c <log_process_thread_func>:
{
 800423c:	b508      	push	{r3, lr}
	log_init();
 800423e:	f7ff fe13 	bl	8003e68 <log_init>
	return z_impl_k_current_get();
 8004242:	f010 f8ef 	bl	8014424 <z_impl_k_current_get>
	thread_set(k_current_get());
 8004246:	f7ff fd3d 	bl	8003cc4 <thread_set>
 800424a:	e006      	b.n	800425a <log_process_thread_func+0x1e>
	return z_impl_k_sem_take(sem, timeout);
 800424c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004250:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004254:	4804      	ldr	r0, [pc, #16]	; (8004268 <log_process_thread_func+0x2c>)
 8004256:	f010 f913 	bl	8014480 <z_impl_k_sem_take>
 800425a:	2000      	movs	r0, #0
 800425c:	f7ff fefe 	bl	800405c <z_impl_log_process>
		if (log_process(false) == false) {
 8004260:	2800      	cmp	r0, #0
 8004262:	d1fa      	bne.n	800425a <log_process_thread_func+0x1e>
 8004264:	e7f2      	b.n	800424c <log_process_thread_func+0x10>
 8004266:	bf00      	nop
 8004268:	20000838 	.word	0x20000838

0800426c <log_1>:
{
 800426c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800426e:	b083      	sub	sp, #12
 8004270:	4606      	mov	r6, r0
 8004272:	460d      	mov	r5, r1
 8004274:	4617      	mov	r7, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 8004276:	f000 fa31 	bl	80046dc <log_msg_chunk_alloc>
	if (msg != NULL) {
 800427a:	4604      	mov	r4, r0
 800427c:	b140      	cbz	r0, 8004290 <log_1+0x24>
		msg->hdr.ref_cnt = 1;
 800427e:	2301      	movs	r3, #1
 8004280:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 8004282:	2100      	movs	r1, #0
 8004284:	8101      	strh	r1, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
 8004286:	f04f 0300 	mov.w	r3, #0
 800428a:	f361 0300 	bfi	r3, r1, #0, #1
 800428e:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
 8004290:	b134      	cbz	r4, 80042a0 <log_1+0x34>
		msg->str = str;
 8004292:	6126      	str	r6, [r4, #16]
		msg->hdr.params.std.nargs = 1U;
 8004294:	7a63      	ldrb	r3, [r4, #9]
 8004296:	2201      	movs	r2, #1
 8004298:	f362 1307 	bfi	r3, r2, #4, #4
 800429c:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
 800429e:	6165      	str	r5, [r4, #20]
		if (msg == NULL) {
 80042a0:	2c00      	cmp	r4, #0
 80042a2:	d02e      	beq.n	8004302 <log_1+0x96>
	msg->hdr.ids = src_level;
 80042a4:	8167      	strh	r7, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
 80042a6:	4b2a      	ldr	r3, [pc, #168]	; (8004350 <log_1+0xe4>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4798      	blx	r3
 80042ac:	60e0      	str	r0, [r4, #12]
 80042ae:	4b29      	ldr	r3, [pc, #164]	; (8004354 <log_1+0xe8>)
 80042b0:	f3bf 8f5b 	dmb	ish
 80042b4:	e853 2f00 	ldrex	r2, [r3]
 80042b8:	3201      	adds	r2, #1
 80042ba:	e843 2100 	strex	r1, r2, [r3]
 80042be:	2900      	cmp	r1, #0
 80042c0:	d1f8      	bne.n	80042b4 <log_1+0x48>
 80042c2:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
 80042c6:	f04f 0310 	mov.w	r3, #16
 80042ca:	f3ef 8511 	mrs	r5, BASEPRI
 80042ce:	f383 8811 	msr	BASEPRI, r3
 80042d2:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 80042d6:	4621      	mov	r1, r4
 80042d8:	481f      	ldr	r0, [pc, #124]	; (8004358 <log_1+0xec>)
 80042da:	f011 fd78 	bl	8015dce <log_list_add_tail>
	__asm__ volatile(
 80042de:	f385 8811 	msr	BASEPRI, r5
 80042e2:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
 80042e6:	4b1d      	ldr	r3, [pc, #116]	; (800435c <log_1+0xf0>)
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	b963      	cbnz	r3, 8004306 <log_1+0x9a>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 80042ec:	4b1c      	ldr	r3, [pc, #112]	; (8004360 <log_1+0xf4>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	b11b      	cbz	r3, 80042fa <log_1+0x8e>
 80042f2:	4a18      	ldr	r2, [pc, #96]	; (8004354 <log_1+0xe8>)
 80042f4:	6812      	ldr	r2, [r2, #0]
 80042f6:	2a01      	cmp	r2, #1
 80042f8:	d015      	beq.n	8004326 <log_1+0xba>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 80042fa:	4a16      	ldr	r2, [pc, #88]	; (8004354 <log_1+0xe8>)
 80042fc:	6812      	ldr	r2, [r2, #0]
 80042fe:	2a0a      	cmp	r2, #10
 8004300:	d01c      	beq.n	800433c <log_1+0xd0>
}
 8004302:	b003      	add	sp, #12
 8004304:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__asm__ volatile(
 8004306:	f04f 0310 	mov.w	r3, #16
 800430a:	f3ef 8411 	mrs	r4, BASEPRI
 800430e:	f383 8811 	msr	BASEPRI, r3
 8004312:	f3bf 8f6f 	isb	sy
 8004316:	2000      	movs	r0, #0
 8004318:	f7ff fea0 	bl	800405c <z_impl_log_process>
	__asm__ volatile(
 800431c:	f384 8811 	msr	BASEPRI, r4
 8004320:	f3bf 8f6f 	isb	sy
}
 8004324:	e7ed      	b.n	8004302 <log_1+0x96>
	z_impl_k_timer_start(timer, duration, period);
 8004326:	2200      	movs	r2, #0
 8004328:	2300      	movs	r3, #0
 800432a:	e9cd 2300 	strd	r2, r3, [sp]
 800432e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004332:	2300      	movs	r3, #0
 8004334:	480b      	ldr	r0, [pc, #44]	; (8004364 <log_1+0xf8>)
 8004336:	f010 fb6b 	bl	8014a10 <z_impl_k_timer_start>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 800433a:	e7e2      	b.n	8004302 <log_1+0x96>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0e0      	beq.n	8004302 <log_1+0x96>
	z_impl_k_timer_stop(timer);
 8004340:	4808      	ldr	r0, [pc, #32]	; (8004364 <log_1+0xf8>)
 8004342:	f018 fec3 	bl	801d0cc <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 8004346:	4808      	ldr	r0, [pc, #32]	; (8004368 <log_1+0xfc>)
 8004348:	f010 f872 	bl	8014430 <z_impl_k_sem_give>
}
 800434c:	e7d9      	b.n	8004302 <log_1+0x96>
 800434e:	bf00      	nop
 8004350:	20000344 	.word	0x20000344
 8004354:	20001508 	.word	0x20001508
 8004358:	20001514 	.word	0x20001514
 800435c:	200034fa 	.word	0x200034fa
 8004360:	20001538 	.word	0x20001538
 8004364:	20000bf0 	.word	0x20000bf0
 8004368:	20000838 	.word	0x20000838

0800436c <log_2>:
{
 800436c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004370:	b082      	sub	sp, #8
 8004372:	4607      	mov	r7, r0
 8004374:	460e      	mov	r6, r1
 8004376:	4615      	mov	r5, r2
 8004378:	4698      	mov	r8, r3
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 800437a:	f000 f9af 	bl	80046dc <log_msg_chunk_alloc>
	if (msg != NULL) {
 800437e:	4604      	mov	r4, r0
 8004380:	b140      	cbz	r0, 8004394 <log_2+0x28>
		msg->hdr.ref_cnt = 1;
 8004382:	2301      	movs	r3, #1
 8004384:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 8004386:	2200      	movs	r2, #0
 8004388:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
 800438a:	f04f 0300 	mov.w	r3, #0
 800438e:	f362 0300 	bfi	r3, r2, #0, #1
 8004392:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
 8004394:	b13c      	cbz	r4, 80043a6 <log_2+0x3a>
		msg->str = str;
 8004396:	6127      	str	r7, [r4, #16]
		msg->hdr.params.std.nargs = 2U;
 8004398:	7a63      	ldrb	r3, [r4, #9]
 800439a:	2202      	movs	r2, #2
 800439c:	f362 1307 	bfi	r3, r2, #4, #4
 80043a0:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
 80043a2:	6166      	str	r6, [r4, #20]
		msg->payload.single.args[1] = arg2;
 80043a4:	61a5      	str	r5, [r4, #24]
		if (msg == NULL) {
 80043a6:	2c00      	cmp	r4, #0
 80043a8:	d02f      	beq.n	800440a <log_2+0x9e>
	msg->hdr.ids = src_level;
 80043aa:	f8a4 800a 	strh.w	r8, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
 80043ae:	4b2a      	ldr	r3, [pc, #168]	; (8004458 <log_2+0xec>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4798      	blx	r3
 80043b4:	60e0      	str	r0, [r4, #12]
 80043b6:	4b29      	ldr	r3, [pc, #164]	; (800445c <log_2+0xf0>)
 80043b8:	f3bf 8f5b 	dmb	ish
 80043bc:	e853 2f00 	ldrex	r2, [r3]
 80043c0:	3201      	adds	r2, #1
 80043c2:	e843 2100 	strex	r1, r2, [r3]
 80043c6:	2900      	cmp	r1, #0
 80043c8:	d1f8      	bne.n	80043bc <log_2+0x50>
 80043ca:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
 80043ce:	f04f 0310 	mov.w	r3, #16
 80043d2:	f3ef 8511 	mrs	r5, BASEPRI
 80043d6:	f383 8811 	msr	BASEPRI, r3
 80043da:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 80043de:	4621      	mov	r1, r4
 80043e0:	481f      	ldr	r0, [pc, #124]	; (8004460 <log_2+0xf4>)
 80043e2:	f011 fcf4 	bl	8015dce <log_list_add_tail>
	__asm__ volatile(
 80043e6:	f385 8811 	msr	BASEPRI, r5
 80043ea:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
 80043ee:	4b1d      	ldr	r3, [pc, #116]	; (8004464 <log_2+0xf8>)
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	b96b      	cbnz	r3, 8004410 <log_2+0xa4>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 80043f4:	4b1c      	ldr	r3, [pc, #112]	; (8004468 <log_2+0xfc>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	b11b      	cbz	r3, 8004402 <log_2+0x96>
 80043fa:	4a18      	ldr	r2, [pc, #96]	; (800445c <log_2+0xf0>)
 80043fc:	6812      	ldr	r2, [r2, #0]
 80043fe:	2a01      	cmp	r2, #1
 8004400:	d016      	beq.n	8004430 <log_2+0xc4>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 8004402:	4a16      	ldr	r2, [pc, #88]	; (800445c <log_2+0xf0>)
 8004404:	6812      	ldr	r2, [r2, #0]
 8004406:	2a0a      	cmp	r2, #10
 8004408:	d01d      	beq.n	8004446 <log_2+0xda>
}
 800440a:	b002      	add	sp, #8
 800440c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
 8004410:	f04f 0310 	mov.w	r3, #16
 8004414:	f3ef 8411 	mrs	r4, BASEPRI
 8004418:	f383 8811 	msr	BASEPRI, r3
 800441c:	f3bf 8f6f 	isb	sy
 8004420:	2000      	movs	r0, #0
 8004422:	f7ff fe1b 	bl	800405c <z_impl_log_process>
	__asm__ volatile(
 8004426:	f384 8811 	msr	BASEPRI, r4
 800442a:	f3bf 8f6f 	isb	sy
}
 800442e:	e7ec      	b.n	800440a <log_2+0x9e>
	z_impl_k_timer_start(timer, duration, period);
 8004430:	2200      	movs	r2, #0
 8004432:	2300      	movs	r3, #0
 8004434:	e9cd 2300 	strd	r2, r3, [sp]
 8004438:	f242 7210 	movw	r2, #10000	; 0x2710
 800443c:	2300      	movs	r3, #0
 800443e:	480b      	ldr	r0, [pc, #44]	; (800446c <log_2+0x100>)
 8004440:	f010 fae6 	bl	8014a10 <z_impl_k_timer_start>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 8004444:	e7e1      	b.n	800440a <log_2+0x9e>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0df      	beq.n	800440a <log_2+0x9e>
	z_impl_k_timer_stop(timer);
 800444a:	4808      	ldr	r0, [pc, #32]	; (800446c <log_2+0x100>)
 800444c:	f018 fe3e 	bl	801d0cc <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 8004450:	4807      	ldr	r0, [pc, #28]	; (8004470 <log_2+0x104>)
 8004452:	f00f ffed 	bl	8014430 <z_impl_k_sem_give>
}
 8004456:	e7d8      	b.n	800440a <log_2+0x9e>
 8004458:	20000344 	.word	0x20000344
 800445c:	20001508 	.word	0x20001508
 8004460:	20001514 	.word	0x20001514
 8004464:	200034fa 	.word	0x200034fa
 8004468:	20001538 	.word	0x20001538
 800446c:	20000bf0 	.word	0x20000bf0
 8004470:	20000838 	.word	0x20000838

08004474 <log_n>:
{
 8004474:	b530      	push	{r4, r5, lr}
 8004476:	b083      	sub	sp, #12
 8004478:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
 800447a:	f011 fde9 	bl	8016050 <log_msg_create_n>
		if (msg == NULL) {
 800447e:	2800      	cmp	r0, #0
 8004480:	d02f      	beq.n	80044e2 <log_n+0x6e>
 8004482:	4605      	mov	r5, r0
	msg->hdr.ids = src_level;
 8004484:	8144      	strh	r4, [r0, #10]
	msg->hdr.timestamp = timestamp_func();
 8004486:	4b2a      	ldr	r3, [pc, #168]	; (8004530 <log_n+0xbc>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4798      	blx	r3
 800448c:	60e8      	str	r0, [r5, #12]
 800448e:	4b29      	ldr	r3, [pc, #164]	; (8004534 <log_n+0xc0>)
 8004490:	f3bf 8f5b 	dmb	ish
 8004494:	e853 2f00 	ldrex	r2, [r3]
 8004498:	3201      	adds	r2, #1
 800449a:	e843 2100 	strex	r1, r2, [r3]
 800449e:	2900      	cmp	r1, #0
 80044a0:	d1f8      	bne.n	8004494 <log_n+0x20>
 80044a2:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
 80044a6:	f04f 0310 	mov.w	r3, #16
 80044aa:	f3ef 8411 	mrs	r4, BASEPRI
 80044ae:	f383 8811 	msr	BASEPRI, r3
 80044b2:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 80044b6:	4629      	mov	r1, r5
 80044b8:	481f      	ldr	r0, [pc, #124]	; (8004538 <log_n+0xc4>)
 80044ba:	f011 fc88 	bl	8015dce <log_list_add_tail>
	__asm__ volatile(
 80044be:	f384 8811 	msr	BASEPRI, r4
 80044c2:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
 80044c6:	4b1d      	ldr	r3, [pc, #116]	; (800453c <log_n+0xc8>)
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	b963      	cbnz	r3, 80044e6 <log_n+0x72>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 80044cc:	4b1c      	ldr	r3, [pc, #112]	; (8004540 <log_n+0xcc>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	b11b      	cbz	r3, 80044da <log_n+0x66>
 80044d2:	4a18      	ldr	r2, [pc, #96]	; (8004534 <log_n+0xc0>)
 80044d4:	6812      	ldr	r2, [r2, #0]
 80044d6:	2a01      	cmp	r2, #1
 80044d8:	d015      	beq.n	8004506 <log_n+0x92>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 80044da:	4a16      	ldr	r2, [pc, #88]	; (8004534 <log_n+0xc0>)
 80044dc:	6812      	ldr	r2, [r2, #0]
 80044de:	2a0a      	cmp	r2, #10
 80044e0:	d01c      	beq.n	800451c <log_n+0xa8>
}
 80044e2:	b003      	add	sp, #12
 80044e4:	bd30      	pop	{r4, r5, pc}
	__asm__ volatile(
 80044e6:	f04f 0310 	mov.w	r3, #16
 80044ea:	f3ef 8411 	mrs	r4, BASEPRI
 80044ee:	f383 8811 	msr	BASEPRI, r3
 80044f2:	f3bf 8f6f 	isb	sy
 80044f6:	2000      	movs	r0, #0
 80044f8:	f7ff fdb0 	bl	800405c <z_impl_log_process>
	__asm__ volatile(
 80044fc:	f384 8811 	msr	BASEPRI, r4
 8004500:	f3bf 8f6f 	isb	sy
}
 8004504:	e7ed      	b.n	80044e2 <log_n+0x6e>
	z_impl_k_timer_start(timer, duration, period);
 8004506:	2200      	movs	r2, #0
 8004508:	2300      	movs	r3, #0
 800450a:	e9cd 2300 	strd	r2, r3, [sp]
 800450e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004512:	2300      	movs	r3, #0
 8004514:	480b      	ldr	r0, [pc, #44]	; (8004544 <log_n+0xd0>)
 8004516:	f010 fa7b 	bl	8014a10 <z_impl_k_timer_start>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 800451a:	e7e2      	b.n	80044e2 <log_n+0x6e>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0e0      	beq.n	80044e2 <log_n+0x6e>
	z_impl_k_timer_stop(timer);
 8004520:	4808      	ldr	r0, [pc, #32]	; (8004544 <log_n+0xd0>)
 8004522:	f018 fdd3 	bl	801d0cc <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 8004526:	4808      	ldr	r0, [pc, #32]	; (8004548 <log_n+0xd4>)
 8004528:	f00f ff82 	bl	8014430 <z_impl_k_sem_give>
}
 800452c:	e7d9      	b.n	80044e2 <log_n+0x6e>
 800452e:	bf00      	nop
 8004530:	20000344 	.word	0x20000344
 8004534:	20001508 	.word	0x20001508
 8004538:	20001514 	.word	0x20001514
 800453c:	200034fa 	.word	0x200034fa
 8004540:	20001538 	.word	0x20001538
 8004544:	20000bf0 	.word	0x20000bf0
 8004548:	20000838 	.word	0x20000838

0800454c <log_0>:
{
 800454c:	b570      	push	{r4, r5, r6, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	4605      	mov	r5, r0
 8004552:	460e      	mov	r6, r1
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 8004554:	f000 f8c2 	bl	80046dc <log_msg_chunk_alloc>
	if (msg != NULL) {
 8004558:	4604      	mov	r4, r0
 800455a:	b140      	cbz	r0, 800456e <log_0+0x22>
		msg->hdr.ref_cnt = 1;
 800455c:	2301      	movs	r3, #1
 800455e:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 8004560:	2200      	movs	r2, #0
 8004562:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
 8004564:	f04f 0300 	mov.w	r3, #0
 8004568:	f362 0300 	bfi	r3, r2, #0, #1
 800456c:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
 800456e:	b104      	cbz	r4, 8004572 <log_0+0x26>
		msg->str = str;
 8004570:	6125      	str	r5, [r4, #16]
		if (msg == NULL) {
 8004572:	2c00      	cmp	r4, #0
 8004574:	d02e      	beq.n	80045d4 <log_0+0x88>
	msg->hdr.ids = src_level;
 8004576:	8166      	strh	r6, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
 8004578:	4b29      	ldr	r3, [pc, #164]	; (8004620 <log_0+0xd4>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4798      	blx	r3
 800457e:	60e0      	str	r0, [r4, #12]
 8004580:	4b28      	ldr	r3, [pc, #160]	; (8004624 <log_0+0xd8>)
 8004582:	f3bf 8f5b 	dmb	ish
 8004586:	e853 2f00 	ldrex	r2, [r3]
 800458a:	3201      	adds	r2, #1
 800458c:	e843 2100 	strex	r1, r2, [r3]
 8004590:	2900      	cmp	r1, #0
 8004592:	d1f8      	bne.n	8004586 <log_0+0x3a>
 8004594:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
 8004598:	f04f 0310 	mov.w	r3, #16
 800459c:	f3ef 8511 	mrs	r5, BASEPRI
 80045a0:	f383 8811 	msr	BASEPRI, r3
 80045a4:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 80045a8:	4621      	mov	r1, r4
 80045aa:	481f      	ldr	r0, [pc, #124]	; (8004628 <log_0+0xdc>)
 80045ac:	f011 fc0f 	bl	8015dce <log_list_add_tail>
	__asm__ volatile(
 80045b0:	f385 8811 	msr	BASEPRI, r5
 80045b4:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
 80045b8:	4b1c      	ldr	r3, [pc, #112]	; (800462c <log_0+0xe0>)
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	b963      	cbnz	r3, 80045d8 <log_0+0x8c>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 80045be:	4b1c      	ldr	r3, [pc, #112]	; (8004630 <log_0+0xe4>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	b11b      	cbz	r3, 80045cc <log_0+0x80>
 80045c4:	4a17      	ldr	r2, [pc, #92]	; (8004624 <log_0+0xd8>)
 80045c6:	6812      	ldr	r2, [r2, #0]
 80045c8:	2a01      	cmp	r2, #1
 80045ca:	d015      	beq.n	80045f8 <log_0+0xac>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 80045cc:	4a15      	ldr	r2, [pc, #84]	; (8004624 <log_0+0xd8>)
 80045ce:	6812      	ldr	r2, [r2, #0]
 80045d0:	2a0a      	cmp	r2, #10
 80045d2:	d01c      	beq.n	800460e <log_0+0xc2>
}
 80045d4:	b002      	add	sp, #8
 80045d6:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
 80045d8:	f04f 0310 	mov.w	r3, #16
 80045dc:	f3ef 8411 	mrs	r4, BASEPRI
 80045e0:	f383 8811 	msr	BASEPRI, r3
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	2000      	movs	r0, #0
 80045ea:	f7ff fd37 	bl	800405c <z_impl_log_process>
	__asm__ volatile(
 80045ee:	f384 8811 	msr	BASEPRI, r4
 80045f2:	f3bf 8f6f 	isb	sy
}
 80045f6:	e7ed      	b.n	80045d4 <log_0+0x88>
	z_impl_k_timer_start(timer, duration, period);
 80045f8:	2200      	movs	r2, #0
 80045fa:	2300      	movs	r3, #0
 80045fc:	e9cd 2300 	strd	r2, r3, [sp]
 8004600:	f242 7210 	movw	r2, #10000	; 0x2710
 8004604:	2300      	movs	r3, #0
 8004606:	480b      	ldr	r0, [pc, #44]	; (8004634 <log_0+0xe8>)
 8004608:	f010 fa02 	bl	8014a10 <z_impl_k_timer_start>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 800460c:	e7e2      	b.n	80045d4 <log_0+0x88>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0e0      	beq.n	80045d4 <log_0+0x88>
	z_impl_k_timer_stop(timer);
 8004612:	4808      	ldr	r0, [pc, #32]	; (8004634 <log_0+0xe8>)
 8004614:	f018 fd5a 	bl	801d0cc <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 8004618:	4807      	ldr	r0, [pc, #28]	; (8004638 <log_0+0xec>)
 800461a:	f00f ff09 	bl	8014430 <z_impl_k_sem_give>
}
 800461e:	e7d9      	b.n	80045d4 <log_0+0x88>
 8004620:	20000344 	.word	0x20000344
 8004624:	20001508 	.word	0x20001508
 8004628:	20001514 	.word	0x20001514
 800462c:	200034fa 	.word	0x200034fa
 8004630:	20001538 	.word	0x20001538
 8004634:	20000bf0 	.word	0x20000bf0
 8004638:	20000838 	.word	0x20000838

0800463c <log_free>:
{
 800463c:	b500      	push	{lr}
 800463e:	b083      	sub	sp, #12
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
 8004640:	3804      	subs	r0, #4
 8004642:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8004644:	f3bf 8f5b 	dmb	ish
 8004648:	e850 3f00 	ldrex	r3, [r0]
 800464c:	1e5a      	subs	r2, r3, #1
 800464e:	e840 2100 	strex	r1, r2, [r0]
 8004652:	2900      	cmp	r1, #0
 8004654:	d1f8      	bne.n	8004648 <log_free+0xc>
 8004656:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
 800465a:	2b01      	cmp	r3, #1
 800465c:	d002      	beq.n	8004664 <log_free+0x28>
}
 800465e:	b003      	add	sp, #12
 8004660:	f85d fb04 	ldr.w	pc, [sp], #4
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
 8004664:	a901      	add	r1, sp, #4
 8004666:	4802      	ldr	r0, [pc, #8]	; (8004670 <log_free+0x34>)
 8004668:	f00f f9c4 	bl	80139f4 <k_mem_slab_free>
}
 800466c:	e7f7      	b.n	800465e <log_free+0x22>
 800466e:	bf00      	nop
 8004670:	2000151c 	.word	0x2000151c

08004674 <cont_free>:
{
	atomic_inc(&msg->hdr.ref_cnt);
}

static void cont_free(struct log_msg_cont *cont)
{
 8004674:	b510      	push	{r4, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	9001      	str	r0, [sp, #4]
	struct log_msg_cont *next;

	while (cont != NULL) {
 800467a:	9b01      	ldr	r3, [sp, #4]
 800467c:	b133      	cbz	r3, 800468c <cont_free+0x18>
		next = cont->next;
 800467e:	681c      	ldr	r4, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
 8004680:	a901      	add	r1, sp, #4
 8004682:	4803      	ldr	r0, [pc, #12]	; (8004690 <cont_free+0x1c>)
 8004684:	f00f f9b6 	bl	80139f4 <k_mem_slab_free>
		cont = next;
 8004688:	9401      	str	r4, [sp, #4]
 800468a:	e7f6      	b.n	800467a <cont_free+0x6>
	}
}
 800468c:	b002      	add	sp, #8
 800468e:	bd10      	pop	{r4, pc}
 8004690:	2000153c 	.word	0x2000153c

08004694 <log_msg_pool_init>:
{
 8004694:	b508      	push	{r3, lr}
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
 8004696:	2340      	movs	r3, #64	; 0x40
 8004698:	2220      	movs	r2, #32
 800469a:	4902      	ldr	r1, [pc, #8]	; (80046a4 <log_msg_pool_init+0x10>)
 800469c:	4802      	ldr	r0, [pc, #8]	; (80046a8 <log_msg_pool_init+0x14>)
 800469e:	f018 f92f 	bl	801c900 <k_mem_slab_init>
}
 80046a2:	bd08      	pop	{r3, pc}
 80046a4:	20006044 	.word	0x20006044
 80046a8:	2000153c 	.word	0x2000153c

080046ac <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
 80046ac:	b510      	push	{r4, lr}
 80046ae:	b082      	sub	sp, #8
	union log_msg_chunk *msg = NULL;
 80046b0:	2300      	movs	r3, #0
 80046b2:	9301      	str	r3, [sp, #4]
 80046b4:	2001      	movs	r0, #1
 80046b6:	f7ff fcd1 	bl	800405c <z_impl_log_process>
 80046ba:	4604      	mov	r4, r0
	int err;

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
 80046bc:	f7ff fb96 	bl	8003dec <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
 80046c0:	2200      	movs	r2, #0
 80046c2:	2300      	movs	r3, #0
 80046c4:	a901      	add	r1, sp, #4
 80046c6:	4804      	ldr	r0, [pc, #16]	; (80046d8 <log_msg_no_space_handle+0x2c>)
 80046c8:	f00f f95e 	bl	8013988 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
 80046cc:	b108      	cbz	r0, 80046d2 <log_msg_no_space_handle+0x26>
 80046ce:	2c00      	cmp	r4, #0
 80046d0:	d1f0      	bne.n	80046b4 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
 80046d2:	9801      	ldr	r0, [sp, #4]
 80046d4:	b002      	add	sp, #8
 80046d6:	bd10      	pop	{r4, pc}
 80046d8:	2000153c 	.word	0x2000153c

080046dc <log_msg_chunk_alloc>:
{
 80046dc:	b500      	push	{lr}
 80046de:	b083      	sub	sp, #12
	union log_msg_chunk *msg = NULL;
 80046e0:	2300      	movs	r3, #0
 80046e2:	9301      	str	r3, [sp, #4]
		   block_on_alloc()
 80046e4:	f011 fbb2 	bl	8015e4c <block_on_alloc>
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
 80046e8:	b150      	cbz	r0, 8004700 <log_msg_chunk_alloc+0x24>
 80046ea:	2200      	movs	r2, #0
 80046ec:	2300      	movs	r3, #0
 80046ee:	a901      	add	r1, sp, #4
 80046f0:	4807      	ldr	r0, [pc, #28]	; (8004710 <log_msg_chunk_alloc+0x34>)
 80046f2:	f00f f949 	bl	8013988 <k_mem_slab_alloc>
	if (err != 0) {
 80046f6:	b930      	cbnz	r0, 8004706 <log_msg_chunk_alloc+0x2a>
}
 80046f8:	9801      	ldr	r0, [sp, #4]
 80046fa:	b003      	add	sp, #12
 80046fc:	f85d fb04 	ldr.w	pc, [sp], #4
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
 8004700:	2200      	movs	r2, #0
 8004702:	2300      	movs	r3, #0
 8004704:	e7f3      	b.n	80046ee <log_msg_chunk_alloc+0x12>
		msg = log_msg_no_space_handle();
 8004706:	f7ff ffd1 	bl	80046ac <log_msg_no_space_handle>
 800470a:	9001      	str	r0, [sp, #4]
 800470c:	e7f4      	b.n	80046f8 <log_msg_chunk_alloc+0x1c>
 800470e:	bf00      	nop
 8004710:	2000153c 	.word	0x2000153c

08004714 <msg_free>:
{
 8004714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004716:	b083      	sub	sp, #12
 8004718:	9001      	str	r0, [sp, #4]
	uint32_t nargs = log_msg_nargs_get(msg);
 800471a:	4604      	mov	r4, r0
 800471c:	f011 fc3d 	bl	8015f9a <log_msg_nargs_get>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 8004720:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg) && nargs) {
 8004722:	f013 0f01 	tst.w	r3, #1
 8004726:	d101      	bne.n	800472c <msg_free+0x18>
 8004728:	4606      	mov	r6, r0
 800472a:	bb50      	cbnz	r0, 8004782 <msg_free+0x6e>
	if (msg->hdr.params.generic.ext == 1) {
 800472c:	9b01      	ldr	r3, [sp, #4]
 800472e:	7a1a      	ldrb	r2, [r3, #8]
 8004730:	f012 0f02 	tst.w	r2, #2
 8004734:	d128      	bne.n	8004788 <msg_free+0x74>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
 8004736:	a901      	add	r1, sp, #4
 8004738:	4815      	ldr	r0, [pc, #84]	; (8004790 <msg_free+0x7c>)
 800473a:	f00f f95b 	bl	80139f4 <k_mem_slab_free>
}
 800473e:	b003      	add	sp, #12
 8004740:	bdf0      	pop	{r4, r5, r6, r7, pc}
					smask = z_log_get_s_mask(
 8004742:	9801      	ldr	r0, [sp, #4]
 8004744:	f011 fc3e 	bl	8015fc4 <log_msg_str_get>
 8004748:	4631      	mov	r1, r6
 800474a:	f011 fb5e 	bl	8015e0a <z_log_get_s_mask>
					if (smask == 0) {
 800474e:	4607      	mov	r7, r0
 8004750:	b988      	cbnz	r0, 8004776 <msg_free+0x62>
 8004752:	e7eb      	b.n	800472c <msg_free+0x18>
					log_free(buf);
 8004754:	4628      	mov	r0, r5
 8004756:	f7ff ff71 	bl	800463c <log_free>
		for (i = 0; i < nargs; i++) {
 800475a:	3401      	adds	r4, #1
 800475c:	42b4      	cmp	r4, r6
 800475e:	d2e5      	bcs.n	800472c <msg_free+0x18>
			void *buf = (void *)log_msg_arg_get(msg, i);
 8004760:	4621      	mov	r1, r4
 8004762:	9801      	ldr	r0, [sp, #4]
 8004764:	f011 fc1c 	bl	8015fa0 <log_msg_arg_get>
 8004768:	4605      	mov	r5, r0
			if (log_is_strdup(buf)) {
 800476a:	f7ff fbdf 	bl	8003f2c <log_is_strdup>
 800476e:	2800      	cmp	r0, #0
 8004770:	d0f3      	beq.n	800475a <msg_free+0x46>
				if (smask == 0) {
 8004772:	2f00      	cmp	r7, #0
 8004774:	d0e5      	beq.n	8004742 <msg_free+0x2e>
				if (smask & BIT(i)) {
 8004776:	fa27 f304 	lsr.w	r3, r7, r4
 800477a:	f013 0f01 	tst.w	r3, #1
 800477e:	d0ec      	beq.n	800475a <msg_free+0x46>
 8004780:	e7e8      	b.n	8004754 <msg_free+0x40>
		uint32_t smask = 0;
 8004782:	2700      	movs	r7, #0
		for (i = 0; i < nargs; i++) {
 8004784:	463c      	mov	r4, r7
 8004786:	e7e9      	b.n	800475c <msg_free+0x48>
		cont_free(msg->payload.ext.next);
 8004788:	6958      	ldr	r0, [r3, #20]
 800478a:	f7ff ff73 	bl	8004674 <cont_free>
 800478e:	e7d2      	b.n	8004736 <msg_free+0x22>
 8004790:	2000153c 	.word	0x2000153c

08004794 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
 8004794:	b40e      	push	{r1, r2, r3}
 8004796:	b500      	push	{lr}
 8004798:	b082      	sub	sp, #8
 800479a:	4601      	mov	r1, r0
 800479c:	ab03      	add	r3, sp, #12
 800479e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
 80047a2:	9301      	str	r3, [sp, #4]
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
 80047a4:	4804      	ldr	r0, [pc, #16]	; (80047b8 <print_formatted+0x24>)
 80047a6:	f010 fd91 	bl	80152cc <z_vprintk>
#endif
	va_end(args);

	return length;
}
 80047aa:	2000      	movs	r0, #0
 80047ac:	b002      	add	sp, #8
 80047ae:	f85d eb04 	ldr.w	lr, [sp], #4
 80047b2:	b003      	add	sp, #12
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	080163f1 	.word	0x080163f1

080047bc <timestamp_print>:
	log_output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *log_output,
			   uint32_t flags, uint32_t timestamp)
{
 80047bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047be:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
 80047c0:	f011 0f44 	tst.w	r1, #68	; 0x44
 80047c4:	d005      	beq.n	80047d2 <timestamp_print+0x16>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
 80047c6:	4b1a      	ldr	r3, [pc, #104]	; (8004830 <timestamp_print+0x74>)
 80047c8:	681c      	ldr	r4, [r3, #0]
 80047ca:	b934      	cbnz	r4, 80047da <timestamp_print+0x1e>
			length = print_formatted(log_output,
						 "[%02d:%02d:%02d.%03d,%03d] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
 80047cc:	2000      	movs	r0, #0
	}

	return length;
}
 80047ce:	b005      	add	sp, #20
 80047d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		length = print_formatted(log_output, "[%08lu] ", timestamp);
 80047d2:	4918      	ldr	r1, [pc, #96]	; (8004834 <timestamp_print+0x78>)
 80047d4:	f7ff ffde 	bl	8004794 <print_formatted>
 80047d8:	e7f9      	b.n	80047ce <timestamp_print+0x12>
		timestamp /= timestamp_div;
 80047da:	4b17      	ldr	r3, [pc, #92]	; (8004838 <timestamp_print+0x7c>)
 80047dc:	6819      	ldr	r1, [r3, #0]
 80047de:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
 80047e2:	fbb1 f5f4 	udiv	r5, r1, r4
		hours = seconds / 3600U;
 80047e6:	4a15      	ldr	r2, [pc, #84]	; (800483c <timestamp_print+0x80>)
 80047e8:	fba2 3205 	umull	r3, r2, r2, r5
 80047ec:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
 80047ee:	f44f 6661 	mov.w	r6, #3600	; 0xe10
 80047f2:	fb06 5612 	mls	r6, r6, r2, r5
		mins = seconds / 60U;
 80047f6:	4b12      	ldr	r3, [pc, #72]	; (8004840 <timestamp_print+0x84>)
 80047f8:	fba3 7306 	umull	r7, r3, r3, r6
 80047fc:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
 80047fe:	fb04 1115 	mls	r1, r4, r5, r1
		ms = (remainder * 1000U) / freq;
 8004802:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8004806:	fb05 f101 	mul.w	r1, r5, r1
 800480a:	fbb1 f7f4 	udiv	r7, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 800480e:	fb07 1114 	mls	r1, r7, r4, r1
 8004812:	fb05 f101 	mul.w	r1, r5, r1
 8004816:	fbb1 f4f4 	udiv	r4, r1, r4
			length = print_formatted(log_output,
 800481a:	9402      	str	r4, [sp, #8]
 800481c:	9701      	str	r7, [sp, #4]
 800481e:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
 8004822:	eba6 0181 	sub.w	r1, r6, r1, lsl #2
 8004826:	9100      	str	r1, [sp, #0]
 8004828:	4906      	ldr	r1, [pc, #24]	; (8004844 <timestamp_print+0x88>)
 800482a:	f7ff ffb3 	bl	8004794 <print_formatted>
 800482e:	e7ce      	b.n	80047ce <timestamp_print+0x12>
 8004830:	20001558 	.word	0x20001558
 8004834:	0801ed34 	.word	0x0801ed34
 8004838:	2000155c 	.word	0x2000155c
 800483c:	91a2b3c5 	.word	0x91a2b3c5
 8004840:	88888889 	.word	0x88888889
 8004844:	0801ed40 	.word	0x0801ed40

08004848 <color_print>:

static void color_print(const struct log_output *log_output,
			bool color, bool start, uint32_t level)
{
	if (color) {
 8004848:	b161      	cbz	r1, 8004864 <color_print+0x1c>
{
 800484a:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
 800484c:	b12a      	cbz	r2, 800485a <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
 800484e:	4a06      	ldr	r2, [pc, #24]	; (8004868 <color_print+0x20>)
 8004850:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004854:	b912      	cbnz	r2, 800485c <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
 8004856:	4a05      	ldr	r2, [pc, #20]	; (800486c <color_print+0x24>)
 8004858:	e000      	b.n	800485c <color_print+0x14>
 800485a:	4a04      	ldr	r2, [pc, #16]	; (800486c <color_print+0x24>)
		print_formatted(log_output, "%s", log_color);
 800485c:	4904      	ldr	r1, [pc, #16]	; (8004870 <color_print+0x28>)
 800485e:	f7ff ff99 	bl	8004794 <print_formatted>
	}
}
 8004862:	bd08      	pop	{r3, pc}
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	0801edb0 	.word	0x0801edb0
 800486c:	0801ed5c 	.word	0x0801ed5c
 8004870:	0802029c 	.word	0x0802029c

08004874 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 8004874:	f011 0f10 	tst.w	r1, #16
 8004878:	d10b      	bne.n	8004892 <newline_print+0x1e>
{
 800487a:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 800487c:	f011 0f20 	tst.w	r1, #32
 8004880:	d003      	beq.n	800488a <newline_print+0x16>
		print_formatted(ctx, "\n");
 8004882:	4904      	ldr	r1, [pc, #16]	; (8004894 <newline_print+0x20>)
 8004884:	f7ff ff86 	bl	8004794 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
 8004888:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
 800488a:	4903      	ldr	r1, [pc, #12]	; (8004898 <newline_print+0x24>)
 800488c:	f7ff ff82 	bl	8004794 <print_formatted>
 8004890:	e7fa      	b.n	8004888 <newline_print+0x14>
 8004892:	4770      	bx	lr
 8004894:	0801ed64 	.word	0x0801ed64
 8004898:	0801ed68 	.word	0x0801ed68

0800489c <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *log_output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
 800489c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048a0:	4605      	mov	r5, r0
 80048a2:	460f      	mov	r7, r1
 80048a4:	4616      	mov	r6, r2
 80048a6:	4698      	mov	r8, r3
	newline_print(log_output, flags);
 80048a8:	9906      	ldr	r1, [sp, #24]
 80048aa:	f7ff ffe3 	bl	8004874 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
 80048ae:	2400      	movs	r4, #0
 80048b0:	4544      	cmp	r4, r8
 80048b2:	da05      	bge.n	80048c0 <hexdump_line_print+0x24>
		print_formatted(log_output, " ");
 80048b4:	4923      	ldr	r1, [pc, #140]	; (8004944 <hexdump_line_print+0xa8>)
 80048b6:	4628      	mov	r0, r5
 80048b8:	f7ff ff6c 	bl	8004794 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 80048bc:	3401      	adds	r4, #1
 80048be:	e7f7      	b.n	80048b0 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80048c0:	2400      	movs	r4, #0
 80048c2:	e009      	b.n	80048d8 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(log_output, " ");
 80048c4:	491f      	ldr	r1, [pc, #124]	; (8004944 <hexdump_line_print+0xa8>)
 80048c6:	4628      	mov	r0, r5
 80048c8:	f7ff ff64 	bl	8004794 <print_formatted>
 80048cc:	e00b      	b.n	80048e6 <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(log_output, "%02x ", data[i]);
		} else {
			print_formatted(log_output, "   ");
 80048ce:	491e      	ldr	r1, [pc, #120]	; (8004948 <hexdump_line_print+0xac>)
 80048d0:	4628      	mov	r0, r5
 80048d2:	f7ff ff5f 	bl	8004794 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80048d6:	3401      	adds	r4, #1
 80048d8:	2c0f      	cmp	r4, #15
 80048da:	dc0c      	bgt.n	80048f6 <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
 80048dc:	2c00      	cmp	r4, #0
 80048de:	dd02      	ble.n	80048e6 <hexdump_line_print+0x4a>
 80048e0:	f014 0f07 	tst.w	r4, #7
 80048e4:	d0ee      	beq.n	80048c4 <hexdump_line_print+0x28>
		if (i < length) {
 80048e6:	42b4      	cmp	r4, r6
 80048e8:	d2f1      	bcs.n	80048ce <hexdump_line_print+0x32>
			print_formatted(log_output, "%02x ", data[i]);
 80048ea:	5d3a      	ldrb	r2, [r7, r4]
 80048ec:	4917      	ldr	r1, [pc, #92]	; (800494c <hexdump_line_print+0xb0>)
 80048ee:	4628      	mov	r0, r5
 80048f0:	f7ff ff50 	bl	8004794 <print_formatted>
 80048f4:	e7ef      	b.n	80048d6 <hexdump_line_print+0x3a>
		}
	}

	print_formatted(log_output, "|");
 80048f6:	4916      	ldr	r1, [pc, #88]	; (8004950 <hexdump_line_print+0xb4>)
 80048f8:	4628      	mov	r0, r5
 80048fa:	f7ff ff4b 	bl	8004794 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80048fe:	2400      	movs	r4, #0
 8004900:	e009      	b.n	8004916 <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(log_output, " ");
 8004902:	4910      	ldr	r1, [pc, #64]	; (8004944 <hexdump_line_print+0xa8>)
 8004904:	4628      	mov	r0, r5
 8004906:	f7ff ff45 	bl	8004794 <print_formatted>
 800490a:	e00b      	b.n	8004924 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(log_output, "%c",
 800490c:	4911      	ldr	r1, [pc, #68]	; (8004954 <hexdump_line_print+0xb8>)
 800490e:	4628      	mov	r0, r5
 8004910:	f7ff ff40 	bl	8004794 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8004914:	3401      	adds	r4, #1
 8004916:	2c0f      	cmp	r4, #15
 8004918:	dc12      	bgt.n	8004940 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
 800491a:	2c00      	cmp	r4, #0
 800491c:	dd02      	ble.n	8004924 <hexdump_line_print+0x88>
 800491e:	f014 0f07 	tst.w	r4, #7
 8004922:	d0ee      	beq.n	8004902 <hexdump_line_print+0x66>
		if (i < length) {
 8004924:	42b4      	cmp	r4, r6
 8004926:	d206      	bcs.n	8004936 <hexdump_line_print+0x9a>
			char c = (char)data[i];
 8004928:	5d3a      	ldrb	r2, [r7, r4]
	return (int)((((unsigned)c) >= ' ') &&
 800492a:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(log_output, "%c",
 800492e:	2b5e      	cmp	r3, #94	; 0x5e
 8004930:	d9ec      	bls.n	800490c <hexdump_line_print+0x70>
 8004932:	222e      	movs	r2, #46	; 0x2e
 8004934:	e7ea      	b.n	800490c <hexdump_line_print+0x70>
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(log_output, " ");
 8004936:	4903      	ldr	r1, [pc, #12]	; (8004944 <hexdump_line_print+0xa8>)
 8004938:	4628      	mov	r0, r5
 800493a:	f7ff ff2b 	bl	8004794 <print_formatted>
 800493e:	e7e9      	b.n	8004914 <hexdump_line_print+0x78>
		}
	}
}
 8004940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004944:	0801ed88 	.word	0x0801ed88
 8004948:	0801ed74 	.word	0x0801ed74
 800494c:	0801ed6c 	.word	0x0801ed6c
 8004950:	0801ed78 	.word	0x0801ed78
 8004954:	0801ed7c 	.word	0x0801ed7c

08004958 <ids_print>:
{
 8004958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800495a:	4604      	mov	r4, r0
 800495c:	4616      	mov	r6, r2
 800495e:	461d      	mov	r5, r3
	if (level_on) {
 8004960:	b949      	cbnz	r1, 8004976 <ids_print+0x1e>
	int total = 0;
 8004962:	2700      	movs	r7, #0
	total += print_formatted(log_output,
 8004964:	b186      	cbz	r6, 8004988 <ids_print+0x30>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
 8004966:	2301      	movs	r3, #1
 8004968:	9a07      	ldr	r2, [sp, #28]
 800496a:	4093      	lsls	r3, r2
				(func_on &&
 800496c:	f013 0f10 	tst.w	r3, #16
 8004970:	d116      	bne.n	80049a0 <ids_print+0x48>
	total += print_formatted(log_output,
 8004972:	4e0c      	ldr	r6, [pc, #48]	; (80049a4 <ids_print+0x4c>)
 8004974:	e009      	b.n	800498a <ids_print+0x32>
		total += print_formatted(log_output, "<%s> ", severity[level]);
 8004976:	4b0c      	ldr	r3, [pc, #48]	; (80049a8 <ids_print+0x50>)
 8004978:	9a07      	ldr	r2, [sp, #28]
 800497a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800497e:	490b      	ldr	r1, [pc, #44]	; (80049ac <ids_print+0x54>)
 8004980:	f7ff ff08 	bl	8004794 <print_formatted>
 8004984:	4607      	mov	r7, r0
 8004986:	e7ed      	b.n	8004964 <ids_print+0xc>
	total += print_formatted(log_output,
 8004988:	4e06      	ldr	r6, [pc, #24]	; (80049a4 <ids_print+0x4c>)
 800498a:	9906      	ldr	r1, [sp, #24]
 800498c:	4628      	mov	r0, r5
 800498e:	f7ff fa3d 	bl	8003e0c <log_source_name_get>
 8004992:	4602      	mov	r2, r0
 8004994:	4631      	mov	r1, r6
 8004996:	4620      	mov	r0, r4
 8004998:	f7ff fefc 	bl	8004794 <print_formatted>
}
 800499c:	4438      	add	r0, r7
 800499e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	total += print_formatted(log_output,
 80049a0:	4e03      	ldr	r6, [pc, #12]	; (80049b0 <ids_print+0x58>)
 80049a2:	e7f2      	b.n	800498a <ids_print+0x32>
 80049a4:	0801e000 	.word	0x0801e000
 80049a8:	0801edec 	.word	0x0801edec
 80049ac:	0801ed84 	.word	0x0801ed84
 80049b0:	0801ed80 	.word	0x0801ed80

080049b4 <hexdump_print>:

static void hexdump_print(struct log_msg *msg,
			  const struct log_output *log_output,
			  int prefix_offset, uint32_t flags)
{
 80049b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80049b8:	b089      	sub	sp, #36	; 0x24
 80049ba:	4607      	mov	r7, r0
 80049bc:	460e      	mov	r6, r1
 80049be:	4691      	mov	r9, r2
 80049c0:	4698      	mov	r8, r3
	uint32_t offset = 0U;
	uint8_t buf[HEXDUMP_BYTES_IN_LINE];
	size_t length;

	print_formatted(log_output, "%s", log_msg_str_get(msg));
 80049c2:	f011 faff 	bl	8015fc4 <log_msg_str_get>
 80049c6:	4602      	mov	r2, r0
 80049c8:	490e      	ldr	r1, [pc, #56]	; (8004a04 <hexdump_print+0x50>)
 80049ca:	4630      	mov	r0, r6
 80049cc:	f7ff fee2 	bl	8004794 <print_formatted>
	uint32_t offset = 0U;
 80049d0:	2400      	movs	r4, #0

	do {
		length = sizeof(buf);
 80049d2:	2510      	movs	r5, #16
 80049d4:	9503      	str	r5, [sp, #12]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
 80049d6:	4623      	mov	r3, r4
 80049d8:	aa03      	add	r2, sp, #12
 80049da:	eb0d 0105 	add.w	r1, sp, r5
 80049de:	4638      	mov	r0, r7
 80049e0:	f011 fb4a 	bl	8016078 <log_msg_hexdump_data_get>

		if (length) {
 80049e4:	9a03      	ldr	r2, [sp, #12]
 80049e6:	b152      	cbz	r2, 80049fe <hexdump_print+0x4a>
			hexdump_line_print(log_output, buf, length,
 80049e8:	f8cd 8000 	str.w	r8, [sp]
 80049ec:	464b      	mov	r3, r9
 80049ee:	eb0d 0105 	add.w	r1, sp, r5
 80049f2:	4630      	mov	r0, r6
 80049f4:	f7ff ff52 	bl	800489c <hexdump_line_print>
					   prefix_offset, flags);
			offset += length;
 80049f8:	9d03      	ldr	r5, [sp, #12]
 80049fa:	442c      	add	r4, r5
		length = sizeof(buf);
 80049fc:	e7e9      	b.n	80049d2 <hexdump_print+0x1e>
		} else {
			break;
		}
	} while (true);
}
 80049fe:	b009      	add	sp, #36	; 0x24
 8004a00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a04:	0802029c 	.word	0x0802029c

08004a08 <raw_string_print>:

static void raw_string_print(struct log_msg *msg,
			     const struct log_output *log_output)
{
 8004a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	4606      	mov	r6, r0
 8004a0e:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(log_output->size);

	size_t offset = 0;
	size_t length;
	bool eol = false;
 8004a10:	2700      	movs	r7, #0
	size_t offset = 0;
 8004a12:	463d      	mov	r5, r7
 8004a14:	e00d      	b.n	8004a32 <raw_string_print+0x2a>
		/* Sting is stored in a hexdump message. */
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
		log_output->control_block->offset = length;

		if (length != 0) {
			eol = (log_output->buf[length - 1] == '\n');
 8004a16:	68a2      	ldr	r2, [r4, #8]
 8004a18:	4413      	add	r3, r2
 8004a1a:	f813 7c01 	ldrb.w	r7, [r3, #-1]
 8004a1e:	2f0a      	cmp	r7, #10
 8004a20:	bf14      	ite	ne
 8004a22:	2700      	movne	r7, #0
 8004a24:	2701      	moveq	r7, #1
		}

		log_output_flush(log_output);
 8004a26:	4620      	mov	r0, r4
 8004a28:	f011 fcd5 	bl	80163d6 <log_output_flush>
		offset += length;
 8004a2c:	9b01      	ldr	r3, [sp, #4]
 8004a2e:	441d      	add	r5, r3
	} while (length > 0);
 8004a30:	b173      	cbz	r3, 8004a50 <raw_string_print+0x48>
		length = log_output->size;
 8004a32:	68e3      	ldr	r3, [r4, #12]
 8004a34:	9301      	str	r3, [sp, #4]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
 8004a36:	462b      	mov	r3, r5
 8004a38:	aa01      	add	r2, sp, #4
 8004a3a:	68a1      	ldr	r1, [r4, #8]
 8004a3c:	4630      	mov	r0, r6
 8004a3e:	f011 fb1b 	bl	8016078 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
 8004a42:	6863      	ldr	r3, [r4, #4]
 8004a44:	9a01      	ldr	r2, [sp, #4]
 8004a46:	601a      	str	r2, [r3, #0]
		if (length != 0) {
 8004a48:	9b01      	ldr	r3, [sp, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0eb      	beq.n	8004a26 <raw_string_print+0x1e>
 8004a4e:	e7e2      	b.n	8004a16 <raw_string_print+0xe>

	if (eol) {
 8004a50:	b90f      	cbnz	r7, 8004a56 <raw_string_print+0x4e>
		print_formatted(log_output, "\r");
	}
}
 8004a52:	b003      	add	sp, #12
 8004a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(log_output, "\r");
 8004a56:	4902      	ldr	r1, [pc, #8]	; (8004a60 <raw_string_print+0x58>)
 8004a58:	4620      	mov	r0, r4
 8004a5a:	f7ff fe9b 	bl	8004794 <print_formatted>
}
 8004a5e:	e7f8      	b.n	8004a52 <raw_string_print+0x4a>
 8004a60:	0801ed8c 	.word	0x0801ed8c

08004a64 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, uint32_t cnt)
{
 8004a64:	b570      	push	{r4, r5, r6, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
 8004a6a:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8004a6c:	f242 730f 	movw	r3, #9999	; 0x270f
 8004a70:	428b      	cmp	r3, r1
 8004a72:	bf28      	it	cs
 8004a74:	460b      	movcs	r3, r1
 8004a76:	4a0e      	ldr	r2, [pc, #56]	; (8004ab0 <log_output_dropped_process+0x4c>)
 8004a78:	2105      	movs	r1, #5
 8004a7a:	4668      	mov	r0, sp
 8004a7c:	f010 fdbf 	bl	80155fe <snprintk>
 8004a80:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     log_output->control_block->ctx);
 8004a82:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	220b      	movs	r2, #11
 8004a88:	490a      	ldr	r1, [pc, #40]	; (8004ab4 <log_output_dropped_process+0x50>)
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	f011 fafc 	bl	8016088 <buffer_write>
	buffer_write(outf, buf, len, log_output->control_block->ctx);
 8004a90:	6863      	ldr	r3, [r4, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	4632      	mov	r2, r6
 8004a96:	4669      	mov	r1, sp
 8004a98:	4628      	mov	r0, r5
 8004a9a:	f011 faf5 	bl	8016088 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     log_output->control_block->ctx);
 8004a9e:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	221b      	movs	r2, #27
 8004aa4:	4904      	ldr	r1, [pc, #16]	; (8004ab8 <log_output_dropped_process+0x54>)
 8004aa6:	4628      	mov	r0, r5
 8004aa8:	f011 faee 	bl	8016088 <buffer_write>
}
 8004aac:	b002      	add	sp, #8
 8004aae:	bd70      	pop	{r4, r5, r6, pc}
 8004ab0:	0801f578 	.word	0x0801f578
 8004ab4:	0801ede0 	.word	0x0801ede0
 8004ab8:	0801edc4 	.word	0x0801edc4

08004abc <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
 8004abc:	4b07      	ldr	r3, [pc, #28]	; (8004adc <log_output_timestamp_freq_set+0x20>)
 8004abe:	2201      	movs	r2, #1
 8004ac0:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 8004ac2:	4b07      	ldr	r3, [pc, #28]	; (8004ae0 <log_output_timestamp_freq_set+0x24>)
 8004ac4:	4298      	cmp	r0, r3
 8004ac6:	d905      	bls.n	8004ad4 <log_output_timestamp_freq_set+0x18>
		frequency /= 2U;
 8004ac8:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 8004aca:	4a04      	ldr	r2, [pc, #16]	; (8004adc <log_output_timestamp_freq_set+0x20>)
 8004acc:	6813      	ldr	r3, [r2, #0]
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	e7f6      	b.n	8004ac2 <log_output_timestamp_freq_set+0x6>
	}

	freq = frequency;
 8004ad4:	4b03      	ldr	r3, [pc, #12]	; (8004ae4 <log_output_timestamp_freq_set+0x28>)
 8004ad6:	6018      	str	r0, [r3, #0]
}
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	2000155c 	.word	0x2000155c
 8004ae0:	000f4240 	.word	0x000f4240
 8004ae4:	20001558 	.word	0x20001558

08004ae8 <char_out>:
#include <assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
 8004ae8:	b570      	push	{r4, r5, r6, lr}
 8004aea:	4606      	mov	r6, r0
 8004aec:	460d      	mov	r5, r1
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
 8004aee:	2400      	movs	r4, #0
 8004af0:	42ac      	cmp	r4, r5
 8004af2:	d207      	bcs.n	8004b04 <char_out+0x1c>
		uart_poll_out(uart_dev, data[i]);
 8004af4:	4b04      	ldr	r3, [pc, #16]	; (8004b08 <char_out+0x20>)
 8004af6:	6818      	ldr	r0, [r3, #0]
 8004af8:	5d31      	ldrb	r1, [r6, r4]
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
 8004afa:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
 8004b00:	3401      	adds	r4, #1
 8004b02:	e7f5      	b.n	8004af0 <char_out+0x8>
	}

	return length;
}
 8004b04:	4628      	mov	r0, r5
 8004b06:	bd70      	pop	{r4, r5, r6, pc}
 8004b08:	20001574 	.word	0x20001574

08004b0c <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
 8004b0c:	b508      	push	{r3, lr}
 8004b0e:	4803      	ldr	r0, [pc, #12]	; (8004b1c <log_backend_uart_init+0x10>)
 8004b10:	f00e fd24 	bl	801355c <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 8004b14:	4b02      	ldr	r3, [pc, #8]	; (8004b20 <log_backend_uart_init+0x14>)
 8004b16:	6018      	str	r0, [r3, #0]
	assert((void *)uart_dev);
}
 8004b18:	bd08      	pop	{r3, pc}
 8004b1a:	bf00      	nop
 8004b1c:	0801ec88 	.word	0x0801ec88
 8004b20:	20001574 	.word	0x20001574

08004b24 <panic>:

static void panic(struct log_backend const *const backend)
{
 8004b24:	b508      	push	{r3, lr}
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
 8004b26:	4802      	ldr	r0, [pc, #8]	; (8004b30 <panic+0xc>)
 8004b28:	f011 fc55 	bl	80163d6 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
 8004b2c:	bd08      	pop	{r3, pc}
 8004b2e:	bf00      	nop
 8004b30:	0801ee2c 	.word	0x0801ee2c

08004b34 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
 8004b34:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, uint32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
 8004b36:	4802      	ldr	r0, [pc, #8]	; (8004b40 <dropped+0xc>)
 8004b38:	f7ff ff94 	bl	8004a64 <log_output_dropped_process>
	ARG_UNUSED(backend);

	log_backend_std_dropped(&log_output_uart, cnt);
}
 8004b3c:	bd08      	pop	{r3, pc}
 8004b3e:	bf00      	nop
 8004b40:	0801ee2c 	.word	0x0801ee2c

08004b44 <put>:
{
 8004b44:	b510      	push	{r4, lr}
 8004b46:	460c      	mov	r4, r1
	log_msg_get(msg);
 8004b48:	4608      	mov	r0, r1
 8004b4a:	f011 fa19 	bl	8015f80 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
 8004b4e:	220f      	movs	r2, #15
 8004b50:	4621      	mov	r1, r4
 8004b52:	4803      	ldr	r0, [pc, #12]	; (8004b60 <put+0x1c>)
 8004b54:	f011 fc68 	bl	8016428 <log_output_msg_process>
	log_msg_put(msg);
 8004b58:	4620      	mov	r0, r4
 8004b5a:	f011 fa35 	bl	8015fc8 <log_msg_put>
}
 8004b5e:	bd10      	pop	{r4, pc}
 8004b60:	0801ee2c 	.word	0x0801ee2c

08004b64 <read_pnp_id>:

#if CONFIG_BT_DIS_PNP
static ssize_t read_pnp_id(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, void *buf,
			   uint16_t len, uint16_t offset)
{
 8004b64:	b510      	push	{r4, lr}
 8004b66:	b084      	sub	sp, #16
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &dis_pnp_id,
 8004b68:	2407      	movs	r4, #7
 8004b6a:	9402      	str	r4, [sp, #8]
 8004b6c:	4c04      	ldr	r4, [pc, #16]	; (8004b80 <read_pnp_id+0x1c>)
 8004b6e:	9401      	str	r4, [sp, #4]
 8004b70:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8004b74:	9400      	str	r4, [sp, #0]
 8004b76:	f015 f9d9 	bl	8019f2c <bt_gatt_attr_read>
				 sizeof(dis_pnp_id));
}
 8004b7a:	b004      	add	sp, #16
 8004b7c:	bd10      	pop	{r4, pc}
 8004b7e:	bf00      	nop
 8004b80:	2000038c 	.word	0x2000038c

08004b84 <blvl_ccc_cfg_changed>:

static uint8_t battery_level = 100U;

static void blvl_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				       uint16_t value)
{
 8004b84:	b508      	push	{r3, lr}
	ARG_UNUSED(attr);

	bool notif_enabled = (value == BT_GATT_CCC_NOTIFY);

	LOG_INF("BAS Notifications %s", notif_enabled ? "enabled" : "disabled");
 8004b86:	f04f 0200 	mov.w	r2, #0
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	f363 0202 	bfi	r2, r3, #0, #3
 8004b90:	f36f 02c5 	bfc	r2, #3, #3
 8004b94:	4b07      	ldr	r3, [pc, #28]	; (8004bb4 <blvl_ccc_cfg_changed+0x30>)
 8004b96:	4808      	ldr	r0, [pc, #32]	; (8004bb8 <blvl_ccc_cfg_changed+0x34>)
 8004b98:	1a1b      	subs	r3, r3, r0
 8004b9a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8004b9e:	f363 128f 	bfi	r2, r3, #6, #10
 8004ba2:	2901      	cmp	r1, #1
 8004ba4:	d004      	beq.n	8004bb0 <blvl_ccc_cfg_changed+0x2c>
 8004ba6:	4905      	ldr	r1, [pc, #20]	; (8004bbc <blvl_ccc_cfg_changed+0x38>)
 8004ba8:	4805      	ldr	r0, [pc, #20]	; (8004bc0 <blvl_ccc_cfg_changed+0x3c>)
 8004baa:	f7ff fb5f 	bl	800426c <log_1>
}
 8004bae:	bd08      	pop	{r3, pc}
	LOG_INF("BAS Notifications %s", notif_enabled ? "enabled" : "disabled");
 8004bb0:	4904      	ldr	r1, [pc, #16]	; (8004bc4 <blvl_ccc_cfg_changed+0x40>)
 8004bb2:	e7f9      	b.n	8004ba8 <blvl_ccc_cfg_changed+0x24>
 8004bb4:	0801d6d0 	.word	0x0801d6d0
 8004bb8:	0801d6d0 	.word	0x0801d6d0
 8004bbc:	0801f108 	.word	0x0801f108
 8004bc0:	0801eeec 	.word	0x0801eeec
 8004bc4:	0801f0c4 	.word	0x0801f0c4

08004bc8 <read_blvl>:

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
 8004bc8:	b510      	push	{r4, lr}
 8004bca:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
 8004bcc:	4c07      	ldr	r4, [pc, #28]	; (8004bec <read_blvl+0x24>)
 8004bce:	7824      	ldrb	r4, [r4, #0]
 8004bd0:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
 8004bd4:	2401      	movs	r4, #1
 8004bd6:	9402      	str	r4, [sp, #8]
 8004bd8:	f10d 0417 	add.w	r4, sp, #23
 8004bdc:	9401      	str	r4, [sp, #4]
 8004bde:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8004be2:	9400      	str	r4, [sp, #0]
 8004be4:	f015 f9a2 	bl	8019f2c <bt_gatt_attr_read>
				 sizeof(lvl8));
}
 8004be8:	b006      	add	sp, #24
 8004bea:	bd10      	pop	{r4, pc}
 8004bec:	200005a3 	.word	0x200005a3

08004bf0 <bt_bas_set_battery_level>:
{
	return battery_level;
}

int bt_bas_set_battery_level(uint8_t level)
{
 8004bf0:	b500      	push	{lr}
 8004bf2:	b089      	sub	sp, #36	; 0x24
 8004bf4:	f88d 0007 	strb.w	r0, [sp, #7]
	int rc;

	if (level > 100U) {
 8004bf8:	2864      	cmp	r0, #100	; 0x64
 8004bfa:	d818      	bhi.n	8004c2e <bt_bas_set_battery_level+0x3e>
		return -EINVAL;
	}

	battery_level = level;
 8004bfc:	4b0e      	ldr	r3, [pc, #56]	; (8004c38 <bt_bas_set_battery_level+0x48>)
 8004bfe:	7018      	strb	r0, [r3, #0]
	memset(&params, 0, sizeof(params));
 8004c00:	2218      	movs	r2, #24
 8004c02:	2100      	movs	r1, #0
 8004c04:	a802      	add	r0, sp, #8
 8004c06:	f013 f95e 	bl	8017ec6 <memset>
	params.attr = attr;
 8004c0a:	4b0c      	ldr	r3, [pc, #48]	; (8004c3c <bt_bas_set_battery_level+0x4c>)
 8004c0c:	9303      	str	r3, [sp, #12]
	params.data = data;
 8004c0e:	f10d 0307 	add.w	r3, sp, #7
 8004c12:	9304      	str	r3, [sp, #16]
	params.len = len;
 8004c14:	2301      	movs	r3, #1
 8004c16:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
 8004c1a:	a902      	add	r1, sp, #8
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	f00b fbe5 	bl	80103ec <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &bas.attrs[1], &level, sizeof(level));

	return rc == -ENOTCONN ? 0 : rc;
 8004c22:	f110 0f39 	cmn.w	r0, #57	; 0x39
 8004c26:	d005      	beq.n	8004c34 <bt_bas_set_battery_level+0x44>
}
 8004c28:	b009      	add	sp, #36	; 0x24
 8004c2a:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
 8004c2e:	f06f 0015 	mvn.w	r0, #21
 8004c32:	e7f9      	b.n	8004c28 <bt_bas_set_battery_level+0x38>
	return rc == -ENOTCONN ? 0 : rc;
 8004c34:	2000      	movs	r0, #0
 8004c36:	e7f7      	b.n	8004c28 <bt_bas_set_battery_level+0x38>
 8004c38:	200005a3 	.word	0x200005a3
 8004c3c:	0801ef1c 	.word	0x0801ef1c

08004c40 <nvs_init>:
	}
	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
 8004c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c42:	b085      	sub	sp, #20
 8004c44:	4604      	mov	r4, r0
 8004c46:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
 8004c48:	3014      	adds	r0, #20
	return z_impl_k_mutex_init(mutex);
 8004c4a:	f017 fe7b 	bl	801c944 <z_impl_k_mutex_init>
 8004c4e:	4628      	mov	r0, r5
 8004c50:	f00e fc84 	bl	801355c <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
 8004c54:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
 8004c56:	2800      	cmp	r0, #0
 8004c58:	d02a      	beq.n	8004cb0 <nvs_init+0x70>
 */
__syscall const struct flash_parameters *flash_get_parameters(const struct device *dev);

static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
 8004c5a:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	4798      	blx	r3
		LOG_ERR("No valid flash device found");
		return -ENXIO;
	}

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
 8004c60:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
 8004c62:	2800      	cmp	r0, #0
 8004c64:	d038      	beq.n	8004cd8 <nvs_init+0x98>
		LOG_ERR("Could not obtain flash parameters");
		return -EINVAL;
	}

	write_block_size = flash_get_write_block_size(fs->flash_device);
 8004c66:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	const struct flash_driver_api *api =
 8004c68:	6883      	ldr	r3, [r0, #8]
	return api->get_parameters(dev)->write_block_size;
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	4798      	blx	r3
 8004c6e:	6803      	ldr	r3, [r0, #0]

	/* check that the write block size is supported */
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
 8004c70:	3b01      	subs	r3, #1
 8004c72:	2b1f      	cmp	r3, #31
 8004c74:	d844      	bhi.n	8004d00 <nvs_init+0xc0>
		LOG_ERR("Unsupported write block size");
		return -EINVAL;
	}

	/* check that sector size is a multiple of pagesize */
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
 8004c76:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004c78:	6821      	ldr	r1, [r4, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
 8004c7a:	aa01      	add	r2, sp, #4
 8004c7c:	f016 fc14 	bl	801b4a8 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
 8004c80:	2800      	cmp	r0, #0
 8004c82:	d151      	bne.n	8004d28 <nvs_init+0xe8>
		LOG_ERR("Unable to get page info");
		return -EINVAL;
	}
	if (!fs->sector_size || fs->sector_size % info.size) {
 8004c84:	89a3      	ldrh	r3, [r4, #12]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d062      	beq.n	8004d50 <nvs_init+0x110>
 8004c8a:	9902      	ldr	r1, [sp, #8]
 8004c8c:	fbb3 f2f1 	udiv	r2, r3, r1
 8004c90:	fb01 3312 	mls	r3, r1, r2, r3
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d15b      	bne.n	8004d50 <nvs_init+0x110>
		LOG_ERR("Invalid sector size");
		return -EINVAL;
	}

	/* check the number of sectors, it should be at least 2 */
	if (fs->sector_count < 2) {
 8004c98:	89e3      	ldrh	r3, [r4, #14]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d96c      	bls.n	8004d78 <nvs_init+0x138>
		LOG_ERR("Configuration error - sector count");
		return -EINVAL;
	}

	rc = nvs_startup(fs);
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	f011 fee9 	bl	8016a76 <nvs_startup>
	if (rc) {
 8004ca4:	4606      	mov	r6, r0
 8004ca6:	2800      	cmp	r0, #0
 8004ca8:	d07a      	beq.n	8004da0 <nvs_init+0x160>
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
 8004caa:	4630      	mov	r0, r6
 8004cac:	b005      	add	sp, #20
 8004cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("No valid flash device found");
 8004cb0:	f04f 0100 	mov.w	r1, #0
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	f363 0102 	bfi	r1, r3, #0, #3
 8004cba:	f36f 01c5 	bfc	r1, #3, #3
 8004cbe:	4b51      	ldr	r3, [pc, #324]	; (8004e04 <nvs_init+0x1c4>)
 8004cc0:	4a51      	ldr	r2, [pc, #324]	; (8004e08 <nvs_init+0x1c8>)
 8004cc2:	1a9b      	subs	r3, r3, r2
 8004cc4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8004cc8:	f363 118f 	bfi	r1, r3, #6, #10
 8004ccc:	484f      	ldr	r0, [pc, #316]	; (8004e0c <nvs_init+0x1cc>)
 8004cce:	f7ff fc3d 	bl	800454c <log_0>
		return -ENXIO;
 8004cd2:	f06f 0605 	mvn.w	r6, #5
 8004cd6:	e7e8      	b.n	8004caa <nvs_init+0x6a>
		LOG_ERR("Could not obtain flash parameters");
 8004cd8:	f04f 0100 	mov.w	r1, #0
 8004cdc:	2301      	movs	r3, #1
 8004cde:	f363 0102 	bfi	r1, r3, #0, #3
 8004ce2:	f36f 01c5 	bfc	r1, #3, #3
 8004ce6:	4b47      	ldr	r3, [pc, #284]	; (8004e04 <nvs_init+0x1c4>)
 8004ce8:	4a47      	ldr	r2, [pc, #284]	; (8004e08 <nvs_init+0x1c8>)
 8004cea:	1a9b      	subs	r3, r3, r2
 8004cec:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8004cf0:	f363 118f 	bfi	r1, r3, #6, #10
 8004cf4:	4846      	ldr	r0, [pc, #280]	; (8004e10 <nvs_init+0x1d0>)
 8004cf6:	f7ff fc29 	bl	800454c <log_0>
		return -EINVAL;
 8004cfa:	f06f 0615 	mvn.w	r6, #21
 8004cfe:	e7d4      	b.n	8004caa <nvs_init+0x6a>
		LOG_ERR("Unsupported write block size");
 8004d00:	f04f 0100 	mov.w	r1, #0
 8004d04:	2301      	movs	r3, #1
 8004d06:	f363 0102 	bfi	r1, r3, #0, #3
 8004d0a:	f36f 01c5 	bfc	r1, #3, #3
 8004d0e:	4b3d      	ldr	r3, [pc, #244]	; (8004e04 <nvs_init+0x1c4>)
 8004d10:	4a3d      	ldr	r2, [pc, #244]	; (8004e08 <nvs_init+0x1c8>)
 8004d12:	1a9b      	subs	r3, r3, r2
 8004d14:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8004d18:	f363 118f 	bfi	r1, r3, #6, #10
 8004d1c:	483d      	ldr	r0, [pc, #244]	; (8004e14 <nvs_init+0x1d4>)
 8004d1e:	f7ff fc15 	bl	800454c <log_0>
		return -EINVAL;
 8004d22:	f06f 0615 	mvn.w	r6, #21
 8004d26:	e7c0      	b.n	8004caa <nvs_init+0x6a>
		LOG_ERR("Unable to get page info");
 8004d28:	f04f 0100 	mov.w	r1, #0
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	f363 0102 	bfi	r1, r3, #0, #3
 8004d32:	f36f 01c5 	bfc	r1, #3, #3
 8004d36:	4b33      	ldr	r3, [pc, #204]	; (8004e04 <nvs_init+0x1c4>)
 8004d38:	4a33      	ldr	r2, [pc, #204]	; (8004e08 <nvs_init+0x1c8>)
 8004d3a:	1a9b      	subs	r3, r3, r2
 8004d3c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8004d40:	f363 118f 	bfi	r1, r3, #6, #10
 8004d44:	4834      	ldr	r0, [pc, #208]	; (8004e18 <nvs_init+0x1d8>)
 8004d46:	f7ff fc01 	bl	800454c <log_0>
		return -EINVAL;
 8004d4a:	f06f 0615 	mvn.w	r6, #21
 8004d4e:	e7ac      	b.n	8004caa <nvs_init+0x6a>
		LOG_ERR("Invalid sector size");
 8004d50:	f04f 0100 	mov.w	r1, #0
 8004d54:	2301      	movs	r3, #1
 8004d56:	f363 0102 	bfi	r1, r3, #0, #3
 8004d5a:	f36f 01c5 	bfc	r1, #3, #3
 8004d5e:	4b29      	ldr	r3, [pc, #164]	; (8004e04 <nvs_init+0x1c4>)
 8004d60:	4a29      	ldr	r2, [pc, #164]	; (8004e08 <nvs_init+0x1c8>)
 8004d62:	1a9b      	subs	r3, r3, r2
 8004d64:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8004d68:	f363 118f 	bfi	r1, r3, #6, #10
 8004d6c:	482b      	ldr	r0, [pc, #172]	; (8004e1c <nvs_init+0x1dc>)
 8004d6e:	f7ff fbed 	bl	800454c <log_0>
		return -EINVAL;
 8004d72:	f06f 0615 	mvn.w	r6, #21
 8004d76:	e798      	b.n	8004caa <nvs_init+0x6a>
		LOG_ERR("Configuration error - sector count");
 8004d78:	f04f 0100 	mov.w	r1, #0
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	f363 0102 	bfi	r1, r3, #0, #3
 8004d82:	f36f 01c5 	bfc	r1, #3, #3
 8004d86:	4b1f      	ldr	r3, [pc, #124]	; (8004e04 <nvs_init+0x1c4>)
 8004d88:	4a1f      	ldr	r2, [pc, #124]	; (8004e08 <nvs_init+0x1c8>)
 8004d8a:	1a9b      	subs	r3, r3, r2
 8004d8c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8004d90:	f363 118f 	bfi	r1, r3, #6, #10
 8004d94:	4822      	ldr	r0, [pc, #136]	; (8004e20 <nvs_init+0x1e0>)
 8004d96:	f7ff fbd9 	bl	800454c <log_0>
		return -EINVAL;
 8004d9a:	f06f 0615 	mvn.w	r6, #21
 8004d9e:	e784      	b.n	8004caa <nvs_init+0x6a>
	fs->ready = true;
 8004da0:	2301      	movs	r3, #1
 8004da2:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
 8004da4:	2703      	movs	r7, #3
 8004da6:	f04f 0300 	mov.w	r3, #0
 8004daa:	f367 0302 	bfi	r3, r7, #0, #3
 8004dae:	f36f 03c5 	bfc	r3, #3, #3
 8004db2:	4d14      	ldr	r5, [pc, #80]	; (8004e04 <nvs_init+0x1c4>)
 8004db4:	4a14      	ldr	r2, [pc, #80]	; (8004e08 <nvs_init+0x1c8>)
 8004db6:	1aad      	subs	r5, r5, r2
 8004db8:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8004dbc:	f365 138f 	bfi	r3, r5, #6, #10
 8004dc0:	89a2      	ldrh	r2, [r4, #12]
 8004dc2:	89e1      	ldrh	r1, [r4, #14]
 8004dc4:	4817      	ldr	r0, [pc, #92]	; (8004e24 <nvs_init+0x1e4>)
 8004dc6:	f7ff fad1 	bl	800436c <log_2>
	LOG_INF("alloc wra: %d, %x",
 8004dca:	f04f 0300 	mov.w	r3, #0
 8004dce:	f367 0302 	bfi	r3, r7, #0, #3
 8004dd2:	f36f 03c5 	bfc	r3, #3, #3
 8004dd6:	f365 138f 	bfi	r3, r5, #6, #10
 8004dda:	6861      	ldr	r1, [r4, #4]
 8004ddc:	b28a      	uxth	r2, r1
 8004dde:	0c09      	lsrs	r1, r1, #16
 8004de0:	4811      	ldr	r0, [pc, #68]	; (8004e28 <nvs_init+0x1e8>)
 8004de2:	f7ff fac3 	bl	800436c <log_2>
	LOG_INF("data wra: %d, %x",
 8004de6:	f04f 0300 	mov.w	r3, #0
 8004dea:	f367 0302 	bfi	r3, r7, #0, #3
 8004dee:	f36f 03c5 	bfc	r3, #3, #3
 8004df2:	f365 138f 	bfi	r3, r5, #6, #10
 8004df6:	68a1      	ldr	r1, [r4, #8]
 8004df8:	b28a      	uxth	r2, r1
 8004dfa:	0c09      	lsrs	r1, r1, #16
 8004dfc:	480b      	ldr	r0, [pc, #44]	; (8004e2c <nvs_init+0x1ec>)
 8004dfe:	f7ff fab5 	bl	800436c <log_2>
	return 0;
 8004e02:	e752      	b.n	8004caa <nvs_init+0x6a>
 8004e04:	0801d748 	.word	0x0801d748
 8004e08:	0801d6d0 	.word	0x0801d6d0
 8004e0c:	0801ef6c 	.word	0x0801ef6c
 8004e10:	0801ef88 	.word	0x0801ef88
 8004e14:	0801efac 	.word	0x0801efac
 8004e18:	0801efcc 	.word	0x0801efcc
 8004e1c:	0801efe4 	.word	0x0801efe4
 8004e20:	0801eff8 	.word	0x0801eff8
 8004e24:	0801f01c 	.word	0x0801f01c
 8004e28:	0801f034 	.word	0x0801f034
 8004e2c:	0801f048 	.word	0x0801f048

08004e30 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
 8004e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e34:	b087      	sub	sp, #28
 8004e36:	9201      	str	r2, [sp, #4]
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
 8004e38:	f890 b010 	ldrb.w	fp, [r0, #16]
 8004e3c:	f1bb 0f00 	cmp.w	fp, #0
 8004e40:	d027      	beq.n	8004e92 <nvs_write+0x62>
 8004e42:	4604      	mov	r4, r0
 8004e44:	460e      	mov	r6, r1
 8004e46:	4699      	mov	r9, r3
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
 8004e48:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	b2d9      	uxtb	r1, r3
	if (write_block_size <= 1U) {
 8004e4e:	2901      	cmp	r1, #1
 8004e50:	d933      	bls.n	8004eba <nvs_write+0x8a>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
 8004e52:	f101 0a07 	add.w	sl, r1, #7
 8004e56:	424a      	negs	r2, r1
 8004e58:	ea0a 0a02 	and.w	sl, sl, r2
	if (write_block_size <= 1U) {
 8004e5c:	2901      	cmp	r1, #1
 8004e5e:	d92f      	bls.n	8004ec0 <nvs_write+0x90>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	eb09 0803 	add.w	r8, r9, r3
 8004e66:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004e6a:	425b      	negs	r3, r3
 8004e6c:	ea08 0803 	and.w	r8, r8, r3

	/* The maximum data size is sector size - 3 ate
	 * where: 1 ate for data, 1 ate for sector close
	 * and 1 ate to always allow a delete.
	 */
	if ((len > (fs->sector_size - 3 * ate_size)) ||
 8004e70:	89a3      	ldrh	r3, [r4, #12]
 8004e72:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
 8004e76:	1a9b      	subs	r3, r3, r2
 8004e78:	454b      	cmp	r3, r9
 8004e7a:	f0c0 8096 	bcc.w	8004faa <nvs_write+0x17a>
 8004e7e:	f1b9 0f00 	cmp.w	r9, #0
 8004e82:	d003      	beq.n	8004e8c <nvs_write+0x5c>
	    ((len > 0) && (data == NULL))) {
 8004e84:	9b01      	ldr	r3, [sp, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f000 8092 	beq.w	8004fb0 <nvs_write+0x180>
		return -EINVAL;
	}

	/* find latest entry with same id */
	wlk_addr = fs->ate_wra;
 8004e8c:	6863      	ldr	r3, [r4, #4]
 8004e8e:	9303      	str	r3, [sp, #12]
	rd_addr = wlk_addr;
 8004e90:	e01c      	b.n	8004ecc <nvs_write+0x9c>
		LOG_ERR("NVS not initialized");
 8004e92:	f04f 0100 	mov.w	r1, #0
 8004e96:	2301      	movs	r3, #1
 8004e98:	f363 0102 	bfi	r1, r3, #0, #3
 8004e9c:	f36f 01c5 	bfc	r1, #3, #3
 8004ea0:	4b45      	ldr	r3, [pc, #276]	; (8004fb8 <nvs_write+0x188>)
 8004ea2:	4a46      	ldr	r2, [pc, #280]	; (8004fbc <nvs_write+0x18c>)
 8004ea4:	1a9b      	subs	r3, r3, r2
 8004ea6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8004eaa:	f363 118f 	bfi	r1, r3, #6, #10
 8004eae:	4844      	ldr	r0, [pc, #272]	; (8004fc0 <nvs_write+0x190>)
 8004eb0:	f7ff fb4c 	bl	800454c <log_0>
		return -EACCES;
 8004eb4:	f06f 050c 	mvn.w	r5, #12
 8004eb8:	e071      	b.n	8004f9e <nvs_write+0x16e>
		return len;
 8004eba:	f04f 0a08 	mov.w	sl, #8
 8004ebe:	e7cd      	b.n	8004e5c <nvs_write+0x2c>
 8004ec0:	46c8      	mov	r8, r9
 8004ec2:	e7d5      	b.n	8004e70 <nvs_write+0x40>
		}
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
			prev_found = true;
			break;
		}
		if (wlk_addr == fs->ate_wra) {
 8004ec4:	6862      	ldr	r2, [r4, #4]
 8004ec6:	9b03      	ldr	r3, [sp, #12]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d012      	beq.n	8004ef2 <nvs_write+0xc2>
		rd_addr = wlk_addr;
 8004ecc:	9f03      	ldr	r7, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
 8004ece:	aa04      	add	r2, sp, #16
 8004ed0:	a903      	add	r1, sp, #12
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	f011 fbec 	bl	80166b0 <nvs_prev_ate>
		if (rc) {
 8004ed8:	4605      	mov	r5, r0
 8004eda:	2800      	cmp	r0, #0
 8004edc:	d15f      	bne.n	8004f9e <nvs_write+0x16e>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
 8004ede:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8004ee2:	42b3      	cmp	r3, r6
 8004ee4:	d1ee      	bne.n	8004ec4 <nvs_write+0x94>
 8004ee6:	a804      	add	r0, sp, #16
 8004ee8:	f011 fb9d 	bl	8016626 <nvs_ate_crc8_check>
 8004eec:	2800      	cmp	r0, #0
 8004eee:	d1e9      	bne.n	8004ec4 <nvs_write+0x94>
 8004ef0:	e001      	b.n	8004ef6 <nvs_write+0xc6>
	bool prev_found = false;
 8004ef2:	f04f 0b00 	mov.w	fp, #0
			break;
		}
	}

	if (prev_found) {
 8004ef6:	f1bb 0f00 	cmp.w	fp, #0
 8004efa:	d018      	beq.n	8004f2e <nvs_write+0xfe>
		/* previous entry found */
		rd_addr &= ADDR_SECT_MASK;
 8004efc:	0c3f      	lsrs	r7, r7, #16
 8004efe:	043f      	lsls	r7, r7, #16
		rd_addr += wlk_ate.offset;
 8004f00:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8004f04:	4439      	add	r1, r7

		if (len == 0) {
 8004f06:	f1b9 0f00 	cmp.w	r9, #0
 8004f0a:	d103      	bne.n	8004f14 <nvs_write+0xe4>
			/* do not try to compare with empty data */
			if (wlk_ate.len == 0U) {
 8004f0c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8004f10:	b983      	cbnz	r3, 8004f34 <nvs_write+0x104>
 8004f12:	e044      	b.n	8004f9e <nvs_write+0x16e>
				/* skip delete entry as it is already the
				 * last one
				 */
				return 0;
			}
		} else if (len == wlk_ate.len) {
 8004f14:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8004f18:	454b      	cmp	r3, r9
 8004f1a:	d10b      	bne.n	8004f34 <nvs_write+0x104>
			/* do not try to compare if lengths are not equal */
			/* compare the data and if equal return 0 */
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
 8004f1c:	464b      	mov	r3, r9
 8004f1e:	9a01      	ldr	r2, [sp, #4]
 8004f20:	4620      	mov	r0, r4
 8004f22:	f011 fb08 	bl	8016536 <nvs_flash_block_cmp>
			if (rc <= 0) {
 8004f26:	2800      	cmp	r0, #0
 8004f28:	dc04      	bgt.n	8004f34 <nvs_write+0x104>
				return rc;
 8004f2a:	4605      	mov	r5, r0
 8004f2c:	e037      	b.n	8004f9e <nvs_write+0x16e>
			}
		}
	} else {
		/* skip delete entry for non-existing entry */
		if (len == 0) {
 8004f2e:	f1b9 0f00 	cmp.w	r9, #0
 8004f32:	d034      	beq.n	8004f9e <nvs_write+0x16e>
			return 0;
		}
	}

	/* calculate required space if the entry contains data */
	if (data_size) {
 8004f34:	f1b8 0f00 	cmp.w	r8, #0
 8004f38:	d00c      	beq.n	8004f54 <nvs_write+0x124>
		/* Leave space for delete ate */
		required_space = data_size + ate_size;
 8004f3a:	fa1a f788 	uxtah	r7, sl, r8
 8004f3e:	b2bf      	uxth	r7, r7
	}

	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
 8004f40:	f104 0814 	add.w	r8, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
 8004f44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f4c:	4640      	mov	r0, r8
 8004f4e:	f00e fe33 	bl	8013bb8 <z_impl_k_mutex_lock>

	gc_count = 0;
 8004f52:	e00c      	b.n	8004f6e <nvs_write+0x13e>
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
 8004f54:	2700      	movs	r7, #0
 8004f56:	e7f3      	b.n	8004f40 <nvs_write+0x110>
			goto end;
		}

		if (fs->ate_wra >= fs->data_wra + required_space) {

			rc = nvs_flash_wrt_entry(fs, id, data, len);
 8004f58:	464b      	mov	r3, r9
 8004f5a:	9a01      	ldr	r2, [sp, #4]
 8004f5c:	4631      	mov	r1, r6
 8004f5e:	4620      	mov	r0, r4
 8004f60:	f011 fd3a 	bl	80169d8 <nvs_flash_wrt_entry>
			if (rc) {
 8004f64:	4605      	mov	r5, r0
 8004f66:	b9b8      	cbnz	r0, 8004f98 <nvs_write+0x168>
		if (rc) {
			goto end;
		}
		gc_count++;
	}
	rc = len;
 8004f68:	464d      	mov	r5, r9
 8004f6a:	e015      	b.n	8004f98 <nvs_write+0x168>
		gc_count++;
 8004f6c:	3501      	adds	r5, #1
		if (gc_count == fs->sector_count) {
 8004f6e:	89e3      	ldrh	r3, [r4, #14]
 8004f70:	429d      	cmp	r5, r3
 8004f72:	d00f      	beq.n	8004f94 <nvs_write+0x164>
		if (fs->ate_wra >= fs->data_wra + required_space) {
 8004f74:	6862      	ldr	r2, [r4, #4]
 8004f76:	68a3      	ldr	r3, [r4, #8]
 8004f78:	443b      	add	r3, r7
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d2ec      	bcs.n	8004f58 <nvs_write+0x128>
		rc = nvs_sector_close(fs);
 8004f7e:	4620      	mov	r0, r4
 8004f80:	f011 fd49 	bl	8016a16 <nvs_sector_close>
		if (rc) {
 8004f84:	b978      	cbnz	r0, 8004fa6 <nvs_write+0x176>
		rc = nvs_gc(fs);
 8004f86:	4620      	mov	r0, r4
 8004f88:	f011 fc91 	bl	80168ae <nvs_gc>
		if (rc) {
 8004f8c:	2800      	cmp	r0, #0
 8004f8e:	d0ed      	beq.n	8004f6c <nvs_write+0x13c>
		rc = nvs_gc(fs);
 8004f90:	4605      	mov	r5, r0
 8004f92:	e001      	b.n	8004f98 <nvs_write+0x168>
			rc = -ENOSPC;
 8004f94:	f06f 051b 	mvn.w	r5, #27
	return z_impl_k_mutex_unlock(mutex);
 8004f98:	4640      	mov	r0, r8
 8004f9a:	f00e fe97 	bl	8013ccc <z_impl_k_mutex_unlock>
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	b007      	add	sp, #28
 8004fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = nvs_sector_close(fs);
 8004fa6:	4605      	mov	r5, r0
 8004fa8:	e7f6      	b.n	8004f98 <nvs_write+0x168>
		return -EINVAL;
 8004faa:	f06f 0515 	mvn.w	r5, #21
 8004fae:	e7f6      	b.n	8004f9e <nvs_write+0x16e>
 8004fb0:	f06f 0515 	mvn.w	r5, #21
 8004fb4:	e7f3      	b.n	8004f9e <nvs_write+0x16e>
 8004fb6:	bf00      	nop
 8004fb8:	0801d748 	.word	0x0801d748
 8004fbc:	0801d6d0 	.word	0x0801d6d0
 8004fc0:	0801ef58 	.word	0x0801ef58

08004fc4 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
 8004fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc8:	b084      	sub	sp, #16
 8004fca:	4699      	mov	r9, r3
 8004fcc:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
 8004fd0:	7c03      	ldrb	r3, [r0, #16]
 8004fd2:	b1a3      	cbz	r3, 8004ffe <nvs_read_hist+0x3a>
 8004fd4:	4604      	mov	r4, r0
 8004fd6:	460f      	mov	r7, r1
 8004fd8:	4692      	mov	sl, r2
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
 8004fda:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
 8004fe0:	2a01      	cmp	r2, #1
 8004fe2:	d920      	bls.n	8005026 <nvs_read_hist+0x62>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	3207      	adds	r2, #7
 8004fe8:	425b      	negs	r3, r3
 8004fea:	401a      	ands	r2, r3
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));

	if (len > (fs->sector_size - 2 * ate_size)) {
 8004fec:	89a3      	ldrh	r3, [r4, #12]
 8004fee:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8004ff2:	454b      	cmp	r3, r9
 8004ff4:	d357      	bcc.n	80050a6 <nvs_read_hist+0xe2>
		return -EINVAL;
	}

	cnt_his = 0U;

	wlk_addr = fs->ate_wra;
 8004ff6:	6866      	ldr	r6, [r4, #4]
 8004ff8:	9603      	str	r6, [sp, #12]
	cnt_his = 0U;
 8004ffa:	2500      	movs	r5, #0
	rd_addr = wlk_addr;

	while (cnt_his <= cnt) {
 8004ffc:	e019      	b.n	8005032 <nvs_read_hist+0x6e>
		LOG_ERR("NVS not initialized");
 8004ffe:	f04f 0100 	mov.w	r1, #0
 8005002:	2301      	movs	r3, #1
 8005004:	f363 0102 	bfi	r1, r3, #0, #3
 8005008:	f36f 01c5 	bfc	r1, #3, #3
 800500c:	4b2a      	ldr	r3, [pc, #168]	; (80050b8 <nvs_read_hist+0xf4>)
 800500e:	4a2b      	ldr	r2, [pc, #172]	; (80050bc <nvs_read_hist+0xf8>)
 8005010:	1a9b      	subs	r3, r3, r2
 8005012:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8005016:	f363 118f 	bfi	r1, r3, #6, #10
 800501a:	4829      	ldr	r0, [pc, #164]	; (80050c0 <nvs_read_hist+0xfc>)
 800501c:	f7ff fa96 	bl	800454c <log_0>
		return -EACCES;
 8005020:	f06f 030c 	mvn.w	r3, #12
 8005024:	e034      	b.n	8005090 <nvs_read_hist+0xcc>
		return len;
 8005026:	2208      	movs	r2, #8
 8005028:	e7e0      	b.n	8004fec <nvs_read_hist+0x28>
			goto err;
		}
		if ((wlk_ate.id == id) &&  (!nvs_ate_crc8_check(&wlk_ate))) {
			cnt_his++;
		}
		if (wlk_addr == fs->ate_wra) {
 800502a:	6862      	ldr	r2, [r4, #4]
 800502c:	9b03      	ldr	r3, [sp, #12]
 800502e:	429a      	cmp	r2, r3
 8005030:	d015      	beq.n	800505e <nvs_read_hist+0x9a>
	while (cnt_his <= cnt) {
 8005032:	4545      	cmp	r5, r8
 8005034:	d813      	bhi.n	800505e <nvs_read_hist+0x9a>
		rd_addr = wlk_addr;
 8005036:	9e03      	ldr	r6, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
 8005038:	aa01      	add	r2, sp, #4
 800503a:	a903      	add	r1, sp, #12
 800503c:	4620      	mov	r0, r4
 800503e:	f011 fb37 	bl	80166b0 <nvs_prev_ate>
		if (rc) {
 8005042:	4603      	mov	r3, r0
 8005044:	bb20      	cbnz	r0, 8005090 <nvs_read_hist+0xcc>
		if ((wlk_ate.id == id) &&  (!nvs_ate_crc8_check(&wlk_ate))) {
 8005046:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800504a:	42bb      	cmp	r3, r7
 800504c:	d1ed      	bne.n	800502a <nvs_read_hist+0x66>
 800504e:	a801      	add	r0, sp, #4
 8005050:	f011 fae9 	bl	8016626 <nvs_ate_crc8_check>
 8005054:	2800      	cmp	r0, #0
 8005056:	d1e8      	bne.n	800502a <nvs_read_hist+0x66>
			cnt_his++;
 8005058:	3501      	adds	r5, #1
 800505a:	b2ad      	uxth	r5, r5
 800505c:	e7e5      	b.n	800502a <nvs_read_hist+0x66>
			break;
		}
	}

	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
 800505e:	6862      	ldr	r2, [r4, #4]
 8005060:	9b03      	ldr	r3, [sp, #12]
 8005062:	429a      	cmp	r2, r3
 8005064:	d018      	beq.n	8005098 <nvs_read_hist+0xd4>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
 8005066:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
 800506a:	b1fb      	cbz	r3, 80050ac <nvs_read_hist+0xe8>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
 800506c:	4545      	cmp	r5, r8
 800506e:	d320      	bcc.n	80050b2 <nvs_read_hist+0xee>
		return -ENOENT;
	}

	rd_addr &= ADDR_SECT_MASK;
 8005070:	0c36      	lsrs	r6, r6, #16
 8005072:	0436      	lsls	r6, r6, #16
	rd_addr += wlk_ate.offset;
 8005074:	f8bd 1006 	ldrh.w	r1, [sp, #6]
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
 8005078:	454b      	cmp	r3, r9
 800507a:	bf28      	it	cs
 800507c:	464b      	movcs	r3, r9
 800507e:	4652      	mov	r2, sl
 8005080:	4431      	add	r1, r6
 8005082:	4620      	mov	r0, r4
 8005084:	f011 fa2c 	bl	80164e0 <nvs_flash_rd>
	if (rc) {
 8005088:	4603      	mov	r3, r0
 800508a:	b908      	cbnz	r0, 8005090 <nvs_read_hist+0xcc>
		goto err;
	}

	return wlk_ate.len;
 800508c:	f8bd 3008 	ldrh.w	r3, [sp, #8]

err:
	return rc;
}
 8005090:	4618      	mov	r0, r3
 8005092:	b004      	add	sp, #16
 8005094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
 8005098:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800509c:	42bb      	cmp	r3, r7
 800509e:	d0e2      	beq.n	8005066 <nvs_read_hist+0xa2>
		return -ENOENT;
 80050a0:	f06f 0301 	mvn.w	r3, #1
 80050a4:	e7f4      	b.n	8005090 <nvs_read_hist+0xcc>
		return -EINVAL;
 80050a6:	f06f 0315 	mvn.w	r3, #21
 80050aa:	e7f1      	b.n	8005090 <nvs_read_hist+0xcc>
		return -ENOENT;
 80050ac:	f06f 0301 	mvn.w	r3, #1
 80050b0:	e7ee      	b.n	8005090 <nvs_read_hist+0xcc>
 80050b2:	f06f 0301 	mvn.w	r3, #1
 80050b6:	e7eb      	b.n	8005090 <nvs_read_hist+0xcc>
 80050b8:	0801d748 	.word	0x0801d748
 80050bc:	0801d6d0 	.word	0x0801d6d0
 80050c0:	0801ef58 	.word	0x0801ef58

080050c4 <usb_handle_request>:
 *
 * @return true if the request was handles successfully
 */
static bool usb_handle_request(struct usb_setup_packet *setup,
			       int32_t *len, uint8_t **data)
{
 80050c4:	b510      	push	{r4, lr}
	uint32_t type = REQTYPE_GET_TYPE(setup->bmRequestType);
 80050c6:	7803      	ldrb	r3, [r0, #0]
 80050c8:	f3c3 1341 	ubfx	r3, r3, #5, #2
	usb_request_handler handler = usb_dev.req_handlers[type];
 80050cc:	330a      	adds	r3, #10
 80050ce:	4c06      	ldr	r4, [pc, #24]	; (80050e8 <usb_handle_request+0x24>)
 80050d0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
	if (type >= MAX_NUM_REQ_HANDLERS) {
		LOG_DBG("Error Incorrect iType %d", type);
		return false;
	}

	if (handler == NULL) {
 80050d4:	b123      	cbz	r3, 80050e0 <usb_handle_request+0x1c>
		LOG_DBG("No handler for reqtype %d", type);
		return false;
	}

	if ((*handler)(setup, len, data) < 0) {
 80050d6:	4798      	blx	r3
 80050d8:	2800      	cmp	r0, #0
 80050da:	db03      	blt.n	80050e4 <usb_handle_request+0x20>
		LOG_DBG("Handler Error %d", type);
		usb_print_setup(setup);
		return false;
	}

	return true;
 80050dc:	2001      	movs	r0, #1
}
 80050de:	bd10      	pop	{r4, pc}
		return false;
 80050e0:	2000      	movs	r0, #0
 80050e2:	e7fc      	b.n	80050de <usb_handle_request+0x1a>
		return false;
 80050e4:	2000      	movs	r0, #0
 80050e6:	e7fa      	b.n	80050de <usb_handle_request+0x1a>
 80050e8:	20001578 	.word	0x20001578

080050ec <usb_register_request_handler>:
 * @return N/A
 */
static void usb_register_request_handler(int32_t type,
					 usb_request_handler handler)
{
	usb_dev.req_handlers[type] = handler;
 80050ec:	300a      	adds	r0, #10
 80050ee:	4b02      	ldr	r3, [pc, #8]	; (80050f8 <usb_register_request_handler+0xc>)
 80050f0:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	20001578 	.word	0x20001578

080050fc <usb_register_descriptors>:
 *
 * @param [in] usb_descriptors The descriptor byte array
 */
static void usb_register_descriptors(const uint8_t *usb_descriptors)
{
	usb_dev.descriptors = usb_descriptors;
 80050fc:	4b01      	ldr	r3, [pc, #4]	; (8005104 <usb_register_descriptors+0x8>)
 80050fe:	6258      	str	r0, [r3, #36]	; 0x24
}
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	20001578 	.word	0x20001578

08005108 <usb_get_descriptor>:
 *
 * @return true if the descriptor was found, false otherwise
 */
static bool usb_get_descriptor(uint16_t type_index, uint16_t lang_id,
		int32_t *len, uint8_t **data)
{
 8005108:	b4f0      	push	{r4, r5, r6, r7}
	bool found = false;

	/*Avoid compiler warning until this is used for something*/
	ARG_UNUSED(lang_id);

	type = GET_DESC_TYPE(type_index);
 800510a:	0a05      	lsrs	r5, r0, #8

	/*
	 * Invalid types of descriptors,
	 * see USB Spec. Revision 2.0, 9.4.3 Get Descriptor
	 */
	if ((type == USB_INTERFACE_DESC) || (type == USB_ENDPOINT_DESC) ||
 800510c:	1f29      	subs	r1, r5, #4
 800510e:	b2c9      	uxtb	r1, r1
 8005110:	2901      	cmp	r1, #1
 8005112:	d91e      	bls.n	8005152 <usb_get_descriptor+0x4a>
 8005114:	b2c6      	uxtb	r6, r0
 8005116:	2d07      	cmp	r5, #7
 8005118:	d81e      	bhi.n	8005158 <usb_get_descriptor+0x50>
	    (type > USB_OTHER_SPEED)) {
		return false;
	}

	p = (uint8_t *)usb_dev.descriptors;
 800511a:	4910      	ldr	r1, [pc, #64]	; (800515c <usb_get_descriptor+0x54>)
 800511c:	6a49      	ldr	r1, [r1, #36]	; 0x24
	cur_index = 0;
 800511e:	2700      	movs	r7, #0

	while (p[DESC_bLength] != 0U) {
 8005120:	e000      	b.n	8005124 <usb_get_descriptor+0x1c>
				break;
			}
			cur_index++;
		}
		/* skip to next descriptor */
		p += p[DESC_bLength];
 8005122:	4401      	add	r1, r0
	while (p[DESC_bLength] != 0U) {
 8005124:	7808      	ldrb	r0, [r1, #0]
 8005126:	b138      	cbz	r0, 8005138 <usb_get_descriptor+0x30>
		if (p[DESC_bDescriptorType] == type) {
 8005128:	784c      	ldrb	r4, [r1, #1]
 800512a:	42ac      	cmp	r4, r5
 800512c:	d1f9      	bne.n	8005122 <usb_get_descriptor+0x1a>
			if (cur_index == index) {
 800512e:	42be      	cmp	r6, r7
 8005130:	d001      	beq.n	8005136 <usb_get_descriptor+0x2e>
			cur_index++;
 8005132:	3701      	adds	r7, #1
 8005134:	e7f5      	b.n	8005122 <usb_get_descriptor+0x1a>
				found = true;
 8005136:	2001      	movs	r0, #1
	}

	if (found) {
 8005138:	b160      	cbz	r0, 8005154 <usb_get_descriptor+0x4c>
		/* set data pointer */
		*data = p;
 800513a:	6019      	str	r1, [r3, #0]
		/* get length from structure */
		if (type == USB_CONFIGURATION_DESC) {
 800513c:	2d02      	cmp	r5, #2
 800513e:	d002      	beq.n	8005146 <usb_get_descriptor+0x3e>
			 */
			*len = (p[CONF_DESC_wTotalLength]) |
			    (p[CONF_DESC_wTotalLength + 1] << 8);
		} else {
			/* normally length is at offset 0 */
			*len = p[DESC_bLength];
 8005140:	780b      	ldrb	r3, [r1, #0]
 8005142:	6013      	str	r3, [r2, #0]
 8005144:	e006      	b.n	8005154 <usb_get_descriptor+0x4c>
			*len = (p[CONF_DESC_wTotalLength]) |
 8005146:	788b      	ldrb	r3, [r1, #2]
			    (p[CONF_DESC_wTotalLength + 1] << 8);
 8005148:	78c9      	ldrb	r1, [r1, #3]
			*len = (p[CONF_DESC_wTotalLength]) |
 800514a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800514e:	6013      	str	r3, [r2, #0]
 8005150:	e000      	b.n	8005154 <usb_get_descriptor+0x4c>
		return false;
 8005152:	2000      	movs	r0, #0
	} else {
		/* nothing found */
		LOG_DBG("Desc %x not found!", type_index);
	}
	return found;
}
 8005154:	bcf0      	pop	{r4, r5, r6, r7}
 8005156:	4770      	bx	lr
		return false;
 8005158:	2000      	movs	r0, #0
 800515a:	e7fb      	b.n	8005154 <usb_get_descriptor+0x4c>
 800515c:	20001578 	.word	0x20001578

08005160 <is_device_configured>:
 *
 * @return true if Configured, false otherwise.
 */
static bool is_device_configured(void)
{
	return (usb_dev.configuration != 0);
 8005160:	4b03      	ldr	r3, [pc, #12]	; (8005170 <is_device_configured+0x10>)
 8005162:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
}
 8005166:	3800      	subs	r0, #0
 8005168:	bf18      	it	ne
 800516a:	2001      	movne	r0, #1
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	20001578 	.word	0x20001578

08005174 <is_interface_valid>:
 *
 * @return true if interface exists - valid
 */
static bool is_interface_valid(uint8_t interface)
{
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
 8005174:	4b07      	ldr	r3, [pc, #28]	; (8005194 <is_interface_valid+0x20>)
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	const struct usb_cfg_descriptor *cfg_descr;

	/* Search through descriptor for matching interface */
	while (p[DESC_bLength] != 0U) {
 8005178:	e000      	b.n	800517c <is_interface_valid+0x8>
			cfg_descr = (const struct usb_cfg_descriptor *)p;
			if (interface < cfg_descr->bNumInterfaces) {
				return true;
			}
		}
		p += p[DESC_bLength];
 800517a:	4413      	add	r3, r2
	while (p[DESC_bLength] != 0U) {
 800517c:	781a      	ldrb	r2, [r3, #0]
 800517e:	b13a      	cbz	r2, 8005190 <is_interface_valid+0x1c>
		if (p[DESC_bDescriptorType] == USB_CONFIGURATION_DESC) {
 8005180:	7859      	ldrb	r1, [r3, #1]
 8005182:	2902      	cmp	r1, #2
 8005184:	d1f9      	bne.n	800517a <is_interface_valid+0x6>
			if (interface < cfg_descr->bNumInterfaces) {
 8005186:	7919      	ldrb	r1, [r3, #4]
 8005188:	4281      	cmp	r1, r0
 800518a:	d9f6      	bls.n	800517a <is_interface_valid+0x6>
				return true;
 800518c:	2001      	movs	r0, #1
	}

	return false;
}
 800518e:	4770      	bx	lr
	return false;
 8005190:	2000      	movs	r0, #0
 8005192:	4770      	bx	lr
 8005194:	20001578 	.word	0x20001578

08005198 <is_ep_valid>:
 * either Control Endpoint or one used by the device.
 *
 * @return true if endpoint exists - valid
 */
static bool is_ep_valid(uint8_t ep)
{
 8005198:	b470      	push	{r4, r5, r6}
	size_t size = (__usb_data_end - __usb_data_start);
 800519a:	4b16      	ldr	r3, [pc, #88]	; (80051f4 <is_ep_valid+0x5c>)
 800519c:	4a16      	ldr	r2, [pc, #88]	; (80051f8 <is_ep_valid+0x60>)
 800519e:	1a9b      	subs	r3, r3, r2
 80051a0:	109b      	asrs	r3, r3, #2
 80051a2:	4e16      	ldr	r6, [pc, #88]	; (80051fc <is_ep_valid+0x64>)
 80051a4:	fb06 f603 	mul.w	r6, r6, r3
	const struct usb_ep_cfg_data *ep_data;
	const struct usb_cfg_data *cfg;

	/* Check if its Endpoint 0 */
	if (USB_EP_GET_IDX(ep) == 0) {
 80051a8:	f030 0380 	bics.w	r3, r0, #128	; 0x80
 80051ac:	d01d      	beq.n	80051ea <is_ep_valid+0x52>
		return true;
	}

	for (size_t i = 0; i < size; i++) {
 80051ae:	2400      	movs	r4, #0
 80051b0:	42b4      	cmp	r4, r6
 80051b2:	d218      	bcs.n	80051e6 <is_ep_valid+0x4e>
		cfg = &__usb_data_start[i];
		ep_data = cfg->endpoint;
 80051b4:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 80051b8:	4b0f      	ldr	r3, [pc, #60]	; (80051f8 <is_ep_valid+0x60>)
 80051ba:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80051be:	6a15      	ldr	r5, [r2, #32]

		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
 80051c0:	2300      	movs	r3, #0
 80051c2:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 80051c6:	490c      	ldr	r1, [pc, #48]	; (80051f8 <is_ep_valid+0x60>)
 80051c8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80051cc:	7f12      	ldrb	r2, [r2, #28]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d907      	bls.n	80051e2 <is_ep_valid+0x4a>
			if (ep_data[n].ep_addr == ep) {
 80051d2:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 80051d6:	7912      	ldrb	r2, [r2, #4]
 80051d8:	4282      	cmp	r2, r0
 80051da:	d008      	beq.n	80051ee <is_ep_valid+0x56>
		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
 80051dc:	3301      	adds	r3, #1
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	e7ef      	b.n	80051c2 <is_ep_valid+0x2a>
	for (size_t i = 0; i < size; i++) {
 80051e2:	3401      	adds	r4, #1
 80051e4:	e7e4      	b.n	80051b0 <is_ep_valid+0x18>
				return true;
			}
		}
	}

	return false;
 80051e6:	2000      	movs	r0, #0
 80051e8:	e002      	b.n	80051f0 <is_ep_valid+0x58>
		return true;
 80051ea:	2001      	movs	r0, #1
 80051ec:	e000      	b.n	80051f0 <is_ep_valid+0x58>
				return true;
 80051ee:	2001      	movs	r0, #1
}
 80051f0:	bc70      	pop	{r4, r5, r6}
 80051f2:	4770      	bx	lr
 80051f4:	20000a70 	.word	0x20000a70
 80051f8:	20000a4c 	.word	0x20000a4c
 80051fc:	38e38e39 	.word	0x38e38e39

08005200 <usb_register_custom_req_handler>:
 *
 * @param [in] handler Callback function pointer
 */
static void usb_register_custom_req_handler(usb_request_handler handler)
{
	usb_dev.custom_req_handler = handler;
 8005200:	4b01      	ldr	r3, [pc, #4]	; (8005208 <usb_register_custom_req_handler+0x8>)
 8005202:	6198      	str	r0, [r3, #24]
}
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	20001578 	.word	0x20001578

0800520c <usb_register_status_callback>:
 *
 * @param [in] cb Callback function pointer
 */
static void usb_register_status_callback(usb_dc_status_callback cb)
{
	usb_dev.status_callback = cb;
 800520c:	4b01      	ldr	r3, [pc, #4]	; (8005214 <usb_register_status_callback+0x8>)
 800520e:	61d8      	str	r0, [r3, #28]
}
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	20001578 	.word	0x20001578

08005218 <foreach_ep>:

static int foreach_ep(int (* endpoint_callback)(const struct usb_ep_cfg_data *))
{
 8005218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800521c:	4606      	mov	r6, r0
	size_t size = (__usb_data_end - __usb_data_start);
 800521e:	4b14      	ldr	r3, [pc, #80]	; (8005270 <foreach_ep+0x58>)
 8005220:	4a14      	ldr	r2, [pc, #80]	; (8005274 <foreach_ep+0x5c>)
 8005222:	eba3 0802 	sub.w	r8, r3, r2
 8005226:	ea4f 03a8 	mov.w	r3, r8, asr #2
 800522a:	4a13      	ldr	r2, [pc, #76]	; (8005278 <foreach_ep+0x60>)
 800522c:	fb02 f803 	mul.w	r8, r2, r3

	for (size_t i = 0; i < size; i++) {
 8005230:	2500      	movs	r5, #0
 8005232:	4545      	cmp	r5, r8
 8005234:	d218      	bcs.n	8005268 <foreach_ep+0x50>
		struct usb_cfg_data *cfg = &__usb_data_start[i];
		struct usb_ep_cfg_data *ep_data = cfg->endpoint;
 8005236:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800523a:	4a0e      	ldr	r2, [pc, #56]	; (8005274 <foreach_ep+0x5c>)
 800523c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005240:	6a1f      	ldr	r7, [r3, #32]

		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
 8005242:	2400      	movs	r4, #0
 8005244:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8005248:	4a0a      	ldr	r2, [pc, #40]	; (8005274 <foreach_ep+0x5c>)
 800524a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800524e:	7f1b      	ldrb	r3, [r3, #28]
 8005250:	42a3      	cmp	r3, r4
 8005252:	d907      	bls.n	8005264 <foreach_ep+0x4c>
			int ret;

			ret = endpoint_callback(&ep_data[n]);
 8005254:	eb07 00c4 	add.w	r0, r7, r4, lsl #3
 8005258:	47b0      	blx	r6
			if (ret < 0) {
 800525a:	2800      	cmp	r0, #0
 800525c:	db05      	blt.n	800526a <foreach_ep+0x52>
		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
 800525e:	3401      	adds	r4, #1
 8005260:	b2e4      	uxtb	r4, r4
 8005262:	e7ef      	b.n	8005244 <foreach_ep+0x2c>
	for (size_t i = 0; i < size; i++) {
 8005264:	3501      	adds	r5, #1
 8005266:	e7e4      	b.n	8005232 <foreach_ep+0x1a>
				return ret;
			}
		}
	}

	return 0;
 8005268:	2000      	movs	r0, #0
}
 800526a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800526e:	bf00      	nop
 8005270:	20000a70 	.word	0x20000a70
 8005274:	20000a4c 	.word	0x20000a4c
 8005278:	38e38e39 	.word	0x38e38e39

0800527c <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
 800527c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	size_t size = (__usb_data_end - __usb_data_start);
 800527e:	4f13      	ldr	r7, [pc, #76]	; (80052cc <class_handler+0x50>)
 8005280:	4b13      	ldr	r3, [pc, #76]	; (80052d0 <class_handler+0x54>)
 8005282:	1aff      	subs	r7, r7, r3
 8005284:	10bb      	asrs	r3, r7, #2
 8005286:	4f13      	ldr	r7, [pc, #76]	; (80052d4 <class_handler+0x58>)
 8005288:	fb07 f703 	mul.w	r7, r7, r3
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	for (size_t i = 0; i < size; i++) {
 800528c:	2300      	movs	r3, #0
 800528e:	e000      	b.n	8005292 <class_handler+0x16>
 8005290:	3301      	adds	r3, #1
 8005292:	42bb      	cmp	r3, r7
 8005294:	d216      	bcs.n	80052c4 <class_handler+0x48>
		iface = &(__usb_data_start[i].interface);
		if_descr = __usb_data_start[i].interface_descriptor;
 8005296:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
 800529a:	4d0d      	ldr	r5, [pc, #52]	; (80052d0 <class_handler+0x54>)
 800529c:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 80052a0:	6866      	ldr	r6, [r4, #4]
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
 80052a2:	4c0d      	ldr	r4, [pc, #52]	; (80052d8 <class_handler+0x5c>)
 80052a4:	6a64      	ldr	r4, [r4, #36]	; 0x24
 80052a6:	42a6      	cmp	r6, r4
 80052a8:	d3f2      	bcc.n	8005290 <class_handler+0x14>
			continue;
		}

		if (iface->class_handler &&
 80052aa:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
 80052ae:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 80052b2:	6924      	ldr	r4, [r4, #16]
 80052b4:	2c00      	cmp	r4, #0
 80052b6:	d0eb      	beq.n	8005290 <class_handler+0x14>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
 80052b8:	78b6      	ldrb	r6, [r6, #2]
 80052ba:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
 80052bc:	42ae      	cmp	r6, r5
 80052be:	d1e7      	bne.n	8005290 <class_handler+0x14>
			return iface->class_handler(pSetup, len, data);
 80052c0:	47a0      	blx	r4
 80052c2:	e001      	b.n	80052c8 <class_handler+0x4c>
		}
	}

	return -ENOTSUP;
 80052c4:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 80052c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052ca:	bf00      	nop
 80052cc:	20000a70 	.word	0x20000a70
 80052d0:	20000a4c 	.word	0x20000a4c
 80052d4:	38e38e39 	.word	0x38e38e39
 80052d8:	20001578 	.word	0x20001578

080052dc <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
 80052dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	size_t size = (__usb_data_end - __usb_data_start);
 80052de:	4f15      	ldr	r7, [pc, #84]	; (8005334 <custom_handler+0x58>)
 80052e0:	4b15      	ldr	r3, [pc, #84]	; (8005338 <custom_handler+0x5c>)
 80052e2:	1aff      	subs	r7, r7, r3
 80052e4:	10bb      	asrs	r3, r7, #2
 80052e6:	4f15      	ldr	r7, [pc, #84]	; (800533c <custom_handler+0x60>)
 80052e8:	fb07 f703 	mul.w	r7, r7, r3
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	for (size_t i = 0; i < size; i++) {
 80052ec:	2300      	movs	r3, #0
 80052ee:	e000      	b.n	80052f2 <custom_handler+0x16>
 80052f0:	3301      	adds	r3, #1
 80052f2:	42bb      	cmp	r3, r7
 80052f4:	d21b      	bcs.n	800532e <custom_handler+0x52>
		iface = &(__usb_data_start[i].interface);
		if_descr = __usb_data_start[i].interface_descriptor;
 80052f6:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
 80052fa:	4d0f      	ldr	r5, [pc, #60]	; (8005338 <custom_handler+0x5c>)
 80052fc:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8005300:	6864      	ldr	r4, [r4, #4]
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
 8005302:	4d0f      	ldr	r5, [pc, #60]	; (8005340 <custom_handler+0x64>)
 8005304:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 8005306:	42ac      	cmp	r4, r5
 8005308:	d3f2      	bcc.n	80052f0 <custom_handler+0x14>
		}

		/* An exception for AUDIO_CLASS is temporary and shall not be
		 * considered as valid solution for other classes.
		 */
		if (iface->custom_handler &&
 800530a:	eb03 05c3 	add.w	r5, r3, r3, lsl #3
 800530e:	4e0a      	ldr	r6, [pc, #40]	; (8005338 <custom_handler+0x5c>)
 8005310:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8005314:	69ad      	ldr	r5, [r5, #24]
 8005316:	2d00      	cmp	r5, #0
 8005318:	d0ea      	beq.n	80052f0 <custom_handler+0x14>
		    (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF) ||
 800531a:	f894 c002 	ldrb.w	ip, [r4, #2]
 800531e:	7906      	ldrb	r6, [r0, #4]
		if (iface->custom_handler &&
 8005320:	45b4      	cmp	ip, r6
 8005322:	d002      	beq.n	800532a <custom_handler+0x4e>
		     if_descr->bInterfaceClass == AUDIO_CLASS)) {
 8005324:	7964      	ldrb	r4, [r4, #5]
		    (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF) ||
 8005326:	2c01      	cmp	r4, #1
 8005328:	d1e2      	bne.n	80052f0 <custom_handler+0x14>
			return iface->custom_handler(pSetup, len, data);
 800532a:	47a8      	blx	r5
 800532c:	e001      	b.n	8005332 <custom_handler+0x56>
		}
	}

	return -ENOTSUP;
 800532e:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 8005332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005334:	20000a70 	.word	0x20000a70
 8005338:	20000a4c 	.word	0x20000a4c
 800533c:	38e38e39 	.word	0x38e38e39
 8005340:	20001578 	.word	0x20001578

08005344 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
 8005344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005348:	4681      	mov	r9, r0
 800534a:	4688      	mov	r8, r1
 800534c:	4617      	mov	r7, r2
	size_t size = (__usb_data_end - __usb_data_start);
 800534e:	4e10      	ldr	r6, [pc, #64]	; (8005390 <vendor_handler+0x4c>)
 8005350:	4b10      	ldr	r3, [pc, #64]	; (8005394 <vendor_handler+0x50>)
 8005352:	1af6      	subs	r6, r6, r3
 8005354:	10b3      	asrs	r3, r6, #2
 8005356:	4e10      	ldr	r6, [pc, #64]	; (8005398 <vendor_handler+0x54>)
 8005358:	fb06 f603 	mul.w	r6, r6, r3
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	for (size_t i = 0; i < size; i++) {
 800535c:	2400      	movs	r4, #0
 800535e:	e000      	b.n	8005362 <vendor_handler+0x1e>
 8005360:	3401      	adds	r4, #1
 8005362:	42a6      	cmp	r6, r4
 8005364:	d90f      	bls.n	8005386 <vendor_handler+0x42>
		iface = &(__usb_data_start[i].interface);
		if (iface->vendor_handler) {
 8005366:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800536a:	4d0a      	ldr	r5, [pc, #40]	; (8005394 <vendor_handler+0x50>)
 800536c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d0f4      	beq.n	8005360 <vendor_handler+0x1c>
			if (!iface->vendor_handler(pSetup, len, data)) {
 8005376:	463a      	mov	r2, r7
 8005378:	4641      	mov	r1, r8
 800537a:	4648      	mov	r0, r9
 800537c:	4798      	blx	r3
 800537e:	4603      	mov	r3, r0
 8005380:	2800      	cmp	r0, #0
 8005382:	d1ed      	bne.n	8005360 <vendor_handler+0x1c>
 8005384:	e001      	b.n	800538a <vendor_handler+0x46>
				return 0;
			}
		}
	}

	return -ENOTSUP;
 8005386:	f06f 0322 	mvn.w	r3, #34	; 0x22
}
 800538a:	4618      	mov	r0, r3
 800538c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005390:	20000a70 	.word	0x20000a70
 8005394:	20000a4c 	.word	0x20000a4c
 8005398:	38e38e39 	.word	0x38e38e39

0800539c <set_endpoint>:
{
 800539c:	b500      	push	{lr}
 800539e:	b083      	sub	sp, #12
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
 80053a0:	7883      	ldrb	r3, [r0, #2]
 80053a2:	f88d 3000 	strb.w	r3, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
 80053a6:	8883      	ldrh	r3, [r0, #4]
 80053a8:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
 80053ac:	78c3      	ldrb	r3, [r0, #3]
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	f88d 3004 	strb.w	r3, [sp, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
 80053b6:	4668      	mov	r0, sp
 80053b8:	f001 fdce 	bl	8006f58 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
 80053bc:	f110 0f45 	cmn.w	r0, #69	; 0x45
 80053c0:	d010      	beq.n	80053e4 <set_endpoint+0x48>
	} else if (ret) {
 80053c2:	bb18      	cbnz	r0, 800540c <set_endpoint+0x70>
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
 80053c4:	f89d 0000 	ldrb.w	r0, [sp]
 80053c8:	f001 fe6a 	bl	80070a0 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
 80053cc:	f110 0f45 	cmn.w	r0, #69	; 0x45
 80053d0:	d031      	beq.n	8005436 <set_endpoint+0x9a>
	} else if (ret) {
 80053d2:	2800      	cmp	r0, #0
 80053d4:	d143      	bne.n	800545e <set_endpoint+0xc2>
	usb_dev.configured = true;
 80053d6:	2001      	movs	r0, #1
 80053d8:	4b2b      	ldr	r3, [pc, #172]	; (8005488 <set_endpoint+0xec>)
 80053da:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
}
 80053de:	b003      	add	sp, #12
 80053e0:	f85d fb04 	ldr.w	pc, [sp], #4
		LOG_WRN("Endpoint 0x%02x already configured", ep_cfg.ep_addr);
 80053e4:	f04f 0200 	mov.w	r2, #0
 80053e8:	2302      	movs	r3, #2
 80053ea:	f363 0202 	bfi	r2, r3, #0, #3
 80053ee:	f36f 02c5 	bfc	r2, #3, #3
 80053f2:	4b26      	ldr	r3, [pc, #152]	; (800548c <set_endpoint+0xf0>)
 80053f4:	4926      	ldr	r1, [pc, #152]	; (8005490 <set_endpoint+0xf4>)
 80053f6:	1a5b      	subs	r3, r3, r1
 80053f8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80053fc:	f363 128f 	bfi	r2, r3, #6, #10
 8005400:	f89d 1000 	ldrb.w	r1, [sp]
 8005404:	4823      	ldr	r0, [pc, #140]	; (8005494 <set_endpoint+0xf8>)
 8005406:	f7fe ff31 	bl	800426c <log_1>
 800540a:	e7db      	b.n	80053c4 <set_endpoint+0x28>
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
 800540c:	f04f 0200 	mov.w	r2, #0
 8005410:	2301      	movs	r3, #1
 8005412:	f363 0202 	bfi	r2, r3, #0, #3
 8005416:	f36f 02c5 	bfc	r2, #3, #3
 800541a:	4b1c      	ldr	r3, [pc, #112]	; (800548c <set_endpoint+0xf0>)
 800541c:	491c      	ldr	r1, [pc, #112]	; (8005490 <set_endpoint+0xf4>)
 800541e:	1a5b      	subs	r3, r3, r1
 8005420:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8005424:	f363 128f 	bfi	r2, r3, #6, #10
 8005428:	f89d 1000 	ldrb.w	r1, [sp]
 800542c:	481a      	ldr	r0, [pc, #104]	; (8005498 <set_endpoint+0xfc>)
 800542e:	f7fe ff1d 	bl	800426c <log_1>
		return false;
 8005432:	2000      	movs	r0, #0
 8005434:	e7d3      	b.n	80053de <set_endpoint+0x42>
		LOG_WRN("Endpoint 0x%02x already enabled", ep_cfg.ep_addr);
 8005436:	f04f 0200 	mov.w	r2, #0
 800543a:	2302      	movs	r3, #2
 800543c:	f363 0202 	bfi	r2, r3, #0, #3
 8005440:	f36f 02c5 	bfc	r2, #3, #3
 8005444:	4b11      	ldr	r3, [pc, #68]	; (800548c <set_endpoint+0xf0>)
 8005446:	4912      	ldr	r1, [pc, #72]	; (8005490 <set_endpoint+0xf4>)
 8005448:	1a5b      	subs	r3, r3, r1
 800544a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800544e:	f363 128f 	bfi	r2, r3, #6, #10
 8005452:	f89d 1000 	ldrb.w	r1, [sp]
 8005456:	4811      	ldr	r0, [pc, #68]	; (800549c <set_endpoint+0x100>)
 8005458:	f7fe ff08 	bl	800426c <log_1>
 800545c:	e7bb      	b.n	80053d6 <set_endpoint+0x3a>
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
 800545e:	f04f 0200 	mov.w	r2, #0
 8005462:	2301      	movs	r3, #1
 8005464:	f363 0202 	bfi	r2, r3, #0, #3
 8005468:	f36f 02c5 	bfc	r2, #3, #3
 800546c:	4b07      	ldr	r3, [pc, #28]	; (800548c <set_endpoint+0xf0>)
 800546e:	4908      	ldr	r1, [pc, #32]	; (8005490 <set_endpoint+0xf4>)
 8005470:	1a5b      	subs	r3, r3, r1
 8005472:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8005476:	f363 128f 	bfi	r2, r3, #6, #10
 800547a:	f89d 1000 	ldrb.w	r1, [sp]
 800547e:	4808      	ldr	r0, [pc, #32]	; (80054a0 <set_endpoint+0x104>)
 8005480:	f7fe fef4 	bl	800426c <log_1>
		return false;
 8005484:	2000      	movs	r0, #0
 8005486:	e7aa      	b.n	80053de <set_endpoint+0x42>
 8005488:	20001578 	.word	0x20001578
 800548c:	0801d788 	.word	0x0801d788
 8005490:	0801d6d0 	.word	0x0801d6d0
 8005494:	0801f064 	.word	0x0801f064
 8005498:	0801f088 	.word	0x0801f088
 800549c:	0801f0ac 	.word	0x0801f0ac
 80054a0:	0801f0cc 	.word	0x0801f0cc

080054a4 <usb_set_configuration>:
{
 80054a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054a8:	b082      	sub	sp, #8
 80054aa:	f88d 0007 	strb.w	r0, [sp, #7]
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
 80054ae:	4b1a      	ldr	r3, [pc, #104]	; (8005518 <usb_set_configuration+0x74>)
 80054b0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	if (config_index == 0U) {
 80054b2:	b370      	cbz	r0, 8005512 <usb_set_configuration+0x6e>
 80054b4:	460e      	mov	r6, r1
	bool found = false;
 80054b6:	2700      	movs	r7, #0
	uint8_t cur_config = 0xFF;
 80054b8:	25ff      	movs	r5, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
 80054ba:	46a8      	mov	r8, r5
 80054bc:	e003      	b.n	80054c6 <usb_set_configuration+0x22>
			cur_alt_setting =
 80054be:	f894 8003 	ldrb.w	r8, [r4, #3]
		p += p[DESC_bLength];
 80054c2:	7823      	ldrb	r3, [r4, #0]
 80054c4:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
 80054c6:	7823      	ldrb	r3, [r4, #0]
 80054c8:	b1c3      	cbz	r3, 80054fc <usb_set_configuration+0x58>
		switch (p[DESC_bDescriptorType]) {
 80054ca:	7863      	ldrb	r3, [r4, #1]
 80054cc:	2b04      	cmp	r3, #4
 80054ce:	d0f6      	beq.n	80054be <usb_set_configuration+0x1a>
 80054d0:	2b05      	cmp	r3, #5
 80054d2:	d008      	beq.n	80054e6 <usb_set_configuration+0x42>
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d1f4      	bne.n	80054c2 <usb_set_configuration+0x1e>
			cur_config = p[CONF_DESC_bConfigurationValue];
 80054d8:	7965      	ldrb	r5, [r4, #5]
			if (cur_config == config_index) {
 80054da:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80054de:	42ab      	cmp	r3, r5
 80054e0:	d1ef      	bne.n	80054c2 <usb_set_configuration+0x1e>
				found = true;
 80054e2:	2701      	movs	r7, #1
 80054e4:	e7ed      	b.n	80054c2 <usb_set_configuration+0x1e>
			if ((cur_config != config_index) ||
 80054e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80054ea:	429d      	cmp	r5, r3
 80054ec:	d1e9      	bne.n	80054c2 <usb_set_configuration+0x1e>
 80054ee:	45b0      	cmp	r8, r6
 80054f0:	d1e7      	bne.n	80054c2 <usb_set_configuration+0x1e>
			found = set_endpoint((struct usb_ep_descriptor *)p);
 80054f2:	4620      	mov	r0, r4
 80054f4:	f7ff ff52 	bl	800539c <set_endpoint>
 80054f8:	4607      	mov	r7, r0
			break;
 80054fa:	e7e2      	b.n	80054c2 <usb_set_configuration+0x1e>
	if (usb_dev.status_callback) {
 80054fc:	4b06      	ldr	r3, [pc, #24]	; (8005518 <usb_set_configuration+0x74>)
 80054fe:	69db      	ldr	r3, [r3, #28]
 8005500:	b11b      	cbz	r3, 800550a <usb_set_configuration+0x66>
		usb_dev.status_callback(USB_DC_CONFIGURED, &config_index);
 8005502:	f10d 0107 	add.w	r1, sp, #7
 8005506:	2003      	movs	r0, #3
 8005508:	4798      	blx	r3
}
 800550a:	4638      	mov	r0, r7
 800550c:	b002      	add	sp, #8
 800550e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return true;
 8005512:	2701      	movs	r7, #1
 8005514:	e7f9      	b.n	800550a <usb_set_configuration+0x66>
 8005516:	bf00      	nop
 8005518:	20001578 	.word	0x20001578

0800551c <usb_handle_std_device_req>:
{
 800551c:	b570      	push	{r4, r5, r6, lr}
	uint16_t value = setup->wValue;
 800551e:	8844      	ldrh	r4, [r0, #2]
	uint16_t index = setup->wIndex;
 8005520:	8886      	ldrh	r6, [r0, #4]
	uint8_t *data = *data_buf;
 8005522:	6815      	ldr	r5, [r2, #0]
	switch (setup->bRequest) {
 8005524:	7843      	ldrb	r3, [r0, #1]
 8005526:	2b09      	cmp	r3, #9
 8005528:	d82a      	bhi.n	8005580 <usb_handle_std_device_req+0x64>
 800552a:	e8df f003 	tbb	[pc, r3]
 800552e:	2905      	.short	0x2905
 8005530:	0c292929 	.word	0x0c292929
 8005534:	1f182911 	.word	0x1f182911
		data[1] = 0U;
 8005538:	2300      	movs	r3, #0
 800553a:	706b      	strb	r3, [r5, #1]
			data[0] |= DEVICE_STATUS_SELF_POWERED;
 800553c:	2001      	movs	r0, #1
 800553e:	7028      	strb	r0, [r5, #0]
		*len = 2;
 8005540:	2302      	movs	r3, #2
 8005542:	600b      	str	r3, [r1, #0]
		break;
 8005544:	e01d      	b.n	8005582 <usb_handle_std_device_req+0x66>
		usb_dc_set_address(value);
 8005546:	b2e0      	uxtb	r0, r4
 8005548:	f001 fc28 	bl	8006d9c <usb_dc_set_address>
	bool ret = true;
 800554c:	2001      	movs	r0, #1
		break;
 800554e:	e018      	b.n	8005582 <usb_handle_std_device_req+0x66>
		ret = usb_get_descriptor(value, index, len, data_buf);
 8005550:	4613      	mov	r3, r2
 8005552:	460a      	mov	r2, r1
 8005554:	4631      	mov	r1, r6
 8005556:	4620      	mov	r0, r4
 8005558:	f7ff fdd6 	bl	8005108 <usb_get_descriptor>
		break;
 800555c:	e011      	b.n	8005582 <usb_handle_std_device_req+0x66>
		data[0] = usb_dev.configuration;
 800555e:	4b09      	ldr	r3, [pc, #36]	; (8005584 <usb_handle_std_device_req+0x68>)
 8005560:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
 8005564:	702b      	strb	r3, [r5, #0]
		*len = 1;
 8005566:	2001      	movs	r0, #1
 8005568:	6008      	str	r0, [r1, #0]
		break;
 800556a:	e00a      	b.n	8005582 <usb_handle_std_device_req+0x66>
		if (!usb_set_configuration(value, 0)) {
 800556c:	b2e4      	uxtb	r4, r4
 800556e:	2100      	movs	r1, #0
 8005570:	4620      	mov	r0, r4
 8005572:	f7ff ff97 	bl	80054a4 <usb_set_configuration>
 8005576:	b120      	cbz	r0, 8005582 <usb_handle_std_device_req+0x66>
			usb_dev.configuration = value;
 8005578:	4b02      	ldr	r3, [pc, #8]	; (8005584 <usb_handle_std_device_req+0x68>)
 800557a:	f883 40ba 	strb.w	r4, [r3, #186]	; 0xba
 800557e:	e000      	b.n	8005582 <usb_handle_std_device_req+0x66>
	switch (setup->bRequest) {
 8005580:	2000      	movs	r0, #0
}
 8005582:	bd70      	pop	{r4, r5, r6, pc}
 8005584:	20001578 	.word	0x20001578

08005588 <reset_endpoint>:
{
 8005588:	b510      	push	{r4, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
 800558a:	7884      	ldrb	r4, [r0, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
 800558c:	4620      	mov	r0, r4
 800558e:	f000 fdd3 	bl	8006138 <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
 8005592:	4620      	mov	r0, r4
 8005594:	f001 fdc2 	bl	800711c <usb_dc_ep_disable>
	if (ret == -EALREADY) {
 8005598:	f110 0f45 	cmn.w	r0, #69	; 0x45
 800559c:	d002      	beq.n	80055a4 <reset_endpoint+0x1c>
	} else if (ret) {
 800559e:	b9a8      	cbnz	r0, 80055cc <reset_endpoint+0x44>
	return true;
 80055a0:	2001      	movs	r0, #1
}
 80055a2:	bd10      	pop	{r4, pc}
		LOG_WRN("Endpoint 0x%02x already disabled", ep_cfg.ep_addr);
 80055a4:	f04f 0200 	mov.w	r2, #0
 80055a8:	2302      	movs	r3, #2
 80055aa:	f363 0202 	bfi	r2, r3, #0, #3
 80055ae:	f36f 02c5 	bfc	r2, #3, #3
 80055b2:	4b10      	ldr	r3, [pc, #64]	; (80055f4 <reset_endpoint+0x6c>)
 80055b4:	4910      	ldr	r1, [pc, #64]	; (80055f8 <reset_endpoint+0x70>)
 80055b6:	1a5b      	subs	r3, r3, r1
 80055b8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80055bc:	f363 128f 	bfi	r2, r3, #6, #10
 80055c0:	4621      	mov	r1, r4
 80055c2:	480e      	ldr	r0, [pc, #56]	; (80055fc <reset_endpoint+0x74>)
 80055c4:	f7fe fe52 	bl	800426c <log_1>
	return true;
 80055c8:	2001      	movs	r0, #1
 80055ca:	e7ea      	b.n	80055a2 <reset_endpoint+0x1a>
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_cfg.ep_addr);
 80055cc:	f04f 0200 	mov.w	r2, #0
 80055d0:	2301      	movs	r3, #1
 80055d2:	f363 0202 	bfi	r2, r3, #0, #3
 80055d6:	f36f 02c5 	bfc	r2, #3, #3
 80055da:	4b06      	ldr	r3, [pc, #24]	; (80055f4 <reset_endpoint+0x6c>)
 80055dc:	4906      	ldr	r1, [pc, #24]	; (80055f8 <reset_endpoint+0x70>)
 80055de:	1a5b      	subs	r3, r3, r1
 80055e0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80055e4:	f363 128f 	bfi	r2, r3, #6, #10
 80055e8:	4621      	mov	r1, r4
 80055ea:	4805      	ldr	r0, [pc, #20]	; (8005600 <reset_endpoint+0x78>)
 80055ec:	f7fe fe3e 	bl	800426c <log_1>
		return false;
 80055f0:	2000      	movs	r0, #0
 80055f2:	e7d6      	b.n	80055a2 <reset_endpoint+0x1a>
 80055f4:	0801d788 	.word	0x0801d788
 80055f8:	0801d6d0 	.word	0x0801d6d0
 80055fc:	0801f0f0 	.word	0x0801f0f0
 8005600:	0801f114 	.word	0x0801f114

08005604 <usb_set_interface>:
{
 8005604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005608:	4606      	mov	r6, r0
 800560a:	4689      	mov	r9, r1
	const uint8_t *p = usb_dev.descriptors;
 800560c:	4b15      	ldr	r3, [pc, #84]	; (8005664 <usb_set_interface+0x60>)
 800560e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	bool ret = false;
 8005610:	f04f 0800 	mov.w	r8, #0
	uint8_t cur_iface = 0xFF;
 8005614:	25ff      	movs	r5, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
 8005616:	462f      	mov	r7, r5
	const uint8_t *if_desc = NULL;
 8005618:	46c2      	mov	sl, r8
 800561a:	e005      	b.n	8005628 <usb_set_interface+0x24>
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
 800561c:	78e7      	ldrb	r7, [r4, #3]
			cur_iface = p[INTF_DESC_bInterfaceNumber];
 800561e:	78a5      	ldrb	r5, [r4, #2]
			if (cur_iface == iface &&
 8005620:	42b5      	cmp	r5, r6
 8005622:	d011      	beq.n	8005648 <usb_set_interface+0x44>
		p += p[DESC_bLength];
 8005624:	7823      	ldrb	r3, [r4, #0]
 8005626:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
 8005628:	7823      	ldrb	r3, [r4, #0]
 800562a:	b18b      	cbz	r3, 8005650 <usb_set_interface+0x4c>
		switch (p[DESC_bDescriptorType]) {
 800562c:	7863      	ldrb	r3, [r4, #1]
 800562e:	2b04      	cmp	r3, #4
 8005630:	d0f4      	beq.n	800561c <usb_set_interface+0x18>
 8005632:	2b05      	cmp	r3, #5
 8005634:	d1f6      	bne.n	8005624 <usb_set_interface+0x20>
			if (cur_iface == iface) {
 8005636:	42ae      	cmp	r6, r5
 8005638:	d1f4      	bne.n	8005624 <usb_set_interface+0x20>
				ret = usb_eps_reconfigure(ep, cur_alt_setting,
 800563a:	464a      	mov	r2, r9
 800563c:	4639      	mov	r1, r7
 800563e:	4620      	mov	r0, r4
 8005640:	f011 fafc 	bl	8016c3c <usb_eps_reconfigure>
 8005644:	4680      	mov	r8, r0
 8005646:	e7ed      	b.n	8005624 <usb_set_interface+0x20>
			if (cur_iface == iface &&
 8005648:	454f      	cmp	r7, r9
 800564a:	d1eb      	bne.n	8005624 <usb_set_interface+0x20>
				if_desc = (void *)p;
 800564c:	46a2      	mov	sl, r4
 800564e:	e7e9      	b.n	8005624 <usb_set_interface+0x20>
	if (usb_dev.status_callback) {
 8005650:	4b04      	ldr	r3, [pc, #16]	; (8005664 <usb_set_interface+0x60>)
 8005652:	69db      	ldr	r3, [r3, #28]
 8005654:	b113      	cbz	r3, 800565c <usb_set_interface+0x58>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
 8005656:	4651      	mov	r1, sl
 8005658:	2007      	movs	r0, #7
 800565a:	4798      	blx	r3
}
 800565c:	4640      	mov	r0, r8
 800565e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005662:	bf00      	nop
 8005664:	20001578 	.word	0x20001578

08005668 <usb_handle_std_endpoint_req>:
{
 8005668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800566c:	b082      	sub	sp, #8
 800566e:	4604      	mov	r4, r0
 8005670:	460e      	mov	r6, r1
	uint8_t ep = (uint8_t)setup->wIndex;
 8005672:	7905      	ldrb	r5, [r0, #4]
 8005674:	f88d 5007 	strb.w	r5, [sp, #7]
	uint8_t *data = *data_buf;
 8005678:	f8d2 8000 	ldr.w	r8, [r2]
	if (!is_ep_valid(ep)) {
 800567c:	4628      	mov	r0, r5
 800567e:	f7ff fd8b 	bl	8005198 <is_ep_valid>
 8005682:	4607      	mov	r7, r0
 8005684:	b130      	cbz	r0, 8005694 <usb_handle_std_endpoint_req+0x2c>
	switch (setup->bRequest) {
 8005686:	7863      	ldrb	r3, [r4, #1]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d018      	beq.n	80056be <usb_handle_std_endpoint_req+0x56>
 800568c:	2b03      	cmp	r3, #3
 800568e:	d03f      	beq.n	8005710 <usb_handle_std_endpoint_req+0xa8>
 8005690:	b123      	cbz	r3, 800569c <usb_handle_std_endpoint_req+0x34>
 8005692:	2700      	movs	r7, #0
}
 8005694:	4638      	mov	r0, r7
 8005696:	b002      	add	sp, #8
 8005698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
 800569c:	f035 0380 	bics.w	r3, r5, #128	; 0x80
 80056a0:	d003      	beq.n	80056aa <usb_handle_std_endpoint_req+0x42>
 80056a2:	f7ff fd5d 	bl	8005160 <is_device_configured>
 80056a6:	2800      	cmp	r0, #0
 80056a8:	d059      	beq.n	800575e <usb_handle_std_endpoint_req+0xf6>
			usb_dc_ep_is_stalled(ep, &data[0]);
 80056aa:	4641      	mov	r1, r8
 80056ac:	4628      	mov	r0, r5
 80056ae:	f011 fdd6 	bl	801725e <usb_dc_ep_is_stalled>
			data[1] = 0U;
 80056b2:	2300      	movs	r3, #0
 80056b4:	f888 3001 	strb.w	r3, [r8, #1]
			*len = 2;
 80056b8:	2302      	movs	r3, #2
 80056ba:	6033      	str	r3, [r6, #0]
			break;
 80056bc:	e7ea      	b.n	8005694 <usb_handle_std_endpoint_req+0x2c>
		if (setup->wValue == FEA_ENDPOINT_HALT) {
 80056be:	8863      	ldrh	r3, [r4, #2]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d14e      	bne.n	8005762 <usb_handle_std_endpoint_req+0xfa>
			if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
 80056c4:	f035 0380 	bics.w	r3, r5, #128	; 0x80
 80056c8:	d003      	beq.n	80056d2 <usb_handle_std_endpoint_req+0x6a>
 80056ca:	f7ff fd49 	bl	8005160 <is_device_configured>
 80056ce:	2800      	cmp	r0, #0
 80056d0:	d049      	beq.n	8005766 <usb_handle_std_endpoint_req+0xfe>
				LOG_INF("... EP clear halt %x", ep);
 80056d2:	f04f 0200 	mov.w	r2, #0
 80056d6:	2303      	movs	r3, #3
 80056d8:	f363 0202 	bfi	r2, r3, #0, #3
 80056dc:	f36f 02c5 	bfc	r2, #3, #3
 80056e0:	4b24      	ldr	r3, [pc, #144]	; (8005774 <usb_handle_std_endpoint_req+0x10c>)
 80056e2:	4925      	ldr	r1, [pc, #148]	; (8005778 <usb_handle_std_endpoint_req+0x110>)
 80056e4:	1a5b      	subs	r3, r3, r1
 80056e6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80056ea:	f363 128f 	bfi	r2, r3, #6, #10
 80056ee:	4629      	mov	r1, r5
 80056f0:	4822      	ldr	r0, [pc, #136]	; (800577c <usb_handle_std_endpoint_req+0x114>)
 80056f2:	f7fe fdbb 	bl	800426c <log_1>
				usb_dc_ep_clear_stall(ep);
 80056f6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80056fa:	f001 fca1 	bl	8007040 <usb_dc_ep_clear_stall>
				if (usb_dev.status_callback) {
 80056fe:	4b20      	ldr	r3, [pc, #128]	; (8005780 <usb_handle_std_endpoint_req+0x118>)
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d0c6      	beq.n	8005694 <usb_handle_std_endpoint_req+0x2c>
					usb_dev.status_callback(
 8005706:	f10d 0107 	add.w	r1, sp, #7
 800570a:	2009      	movs	r0, #9
 800570c:	4798      	blx	r3
 800570e:	e7c1      	b.n	8005694 <usb_handle_std_endpoint_req+0x2c>
		if (setup->wValue == FEA_ENDPOINT_HALT) {
 8005710:	8863      	ldrh	r3, [r4, #2]
 8005712:	bb53      	cbnz	r3, 800576a <usb_handle_std_endpoint_req+0x102>
			if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
 8005714:	f035 0380 	bics.w	r3, r5, #128	; 0x80
 8005718:	d002      	beq.n	8005720 <usb_handle_std_endpoint_req+0xb8>
 800571a:	f7ff fd21 	bl	8005160 <is_device_configured>
 800571e:	b330      	cbz	r0, 800576e <usb_handle_std_endpoint_req+0x106>
				LOG_INF("--- EP SET halt %x", ep);
 8005720:	f04f 0200 	mov.w	r2, #0
 8005724:	2303      	movs	r3, #3
 8005726:	f363 0202 	bfi	r2, r3, #0, #3
 800572a:	f36f 02c5 	bfc	r2, #3, #3
 800572e:	4b11      	ldr	r3, [pc, #68]	; (8005774 <usb_handle_std_endpoint_req+0x10c>)
 8005730:	4911      	ldr	r1, [pc, #68]	; (8005778 <usb_handle_std_endpoint_req+0x110>)
 8005732:	1a5b      	subs	r3, r3, r1
 8005734:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8005738:	f363 128f 	bfi	r2, r3, #6, #10
 800573c:	4629      	mov	r1, r5
 800573e:	4811      	ldr	r0, [pc, #68]	; (8005784 <usb_handle_std_endpoint_req+0x11c>)
 8005740:	f7fe fd94 	bl	800426c <log_1>
				usb_dc_ep_set_stall(ep);
 8005744:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8005748:	f001 fc4a 	bl	8006fe0 <usb_dc_ep_set_stall>
				if (usb_dev.status_callback) {
 800574c:	4b0c      	ldr	r3, [pc, #48]	; (8005780 <usb_handle_std_endpoint_req+0x118>)
 800574e:	69db      	ldr	r3, [r3, #28]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d09f      	beq.n	8005694 <usb_handle_std_endpoint_req+0x2c>
					usb_dev.status_callback(
 8005754:	f10d 0107 	add.w	r1, sp, #7
 8005758:	2008      	movs	r0, #8
 800575a:	4798      	blx	r3
 800575c:	e79a      	b.n	8005694 <usb_handle_std_endpoint_req+0x2c>
		return false;
 800575e:	4607      	mov	r7, r0
 8005760:	e798      	b.n	8005694 <usb_handle_std_endpoint_req+0x2c>
		return false;
 8005762:	2700      	movs	r7, #0
 8005764:	e796      	b.n	8005694 <usb_handle_std_endpoint_req+0x2c>
 8005766:	4607      	mov	r7, r0
 8005768:	e794      	b.n	8005694 <usb_handle_std_endpoint_req+0x2c>
		return false;
 800576a:	2700      	movs	r7, #0
 800576c:	e792      	b.n	8005694 <usb_handle_std_endpoint_req+0x2c>
 800576e:	4607      	mov	r7, r0
 8005770:	e790      	b.n	8005694 <usb_handle_std_endpoint_req+0x2c>
 8005772:	bf00      	nop
 8005774:	0801d788 	.word	0x0801d788
 8005778:	0801d6d0 	.word	0x0801d6d0
 800577c:	0801f138 	.word	0x0801f138
 8005780:	20001578 	.word	0x20001578
 8005784:	0801f150 	.word	0x0801f150

08005788 <usb_handle_standard_request>:
{
 8005788:	b570      	push	{r4, r5, r6, lr}
 800578a:	4604      	mov	r4, r0
 800578c:	460d      	mov	r5, r1
 800578e:	4616      	mov	r6, r2
	if (usb_dev.custom_req_handler &&
 8005790:	4b18      	ldr	r3, [pc, #96]	; (80057f4 <usb_handle_standard_request+0x6c>)
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	b10b      	cbz	r3, 800579a <usb_handle_standard_request+0x12>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
 8005796:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
 8005798:	b148      	cbz	r0, 80057ae <usb_handle_standard_request+0x26>
	switch (REQTYPE_GET_RECIP(setup->bmRequestType)) {
 800579a:	7823      	ldrb	r3, [r4, #0]
 800579c:	f003 031f 	and.w	r3, r3, #31
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d00d      	beq.n	80057c0 <usb_handle_standard_request+0x38>
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d013      	beq.n	80057d0 <usb_handle_standard_request+0x48>
 80057a8:	b113      	cbz	r3, 80057b0 <usb_handle_standard_request+0x28>
 80057aa:	f06f 0015 	mvn.w	r0, #21
}
 80057ae:	bd70      	pop	{r4, r5, r6, pc}
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
 80057b0:	4632      	mov	r2, r6
 80057b2:	4629      	mov	r1, r5
 80057b4:	4620      	mov	r0, r4
 80057b6:	f7ff feb1 	bl	800551c <usb_handle_std_device_req>
 80057ba:	b188      	cbz	r0, 80057e0 <usb_handle_standard_request+0x58>
	int rc = 0;
 80057bc:	2000      	movs	r0, #0
 80057be:	e7f6      	b.n	80057ae <usb_handle_standard_request+0x26>
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
 80057c0:	4632      	mov	r2, r6
 80057c2:	4629      	mov	r1, r5
 80057c4:	4620      	mov	r0, r4
 80057c6:	f011 fa42 	bl	8016c4e <usb_handle_std_interface_req>
 80057ca:	b160      	cbz	r0, 80057e6 <usb_handle_standard_request+0x5e>
	int rc = 0;
 80057cc:	2000      	movs	r0, #0
 80057ce:	e7ee      	b.n	80057ae <usb_handle_standard_request+0x26>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
 80057d0:	4632      	mov	r2, r6
 80057d2:	4629      	mov	r1, r5
 80057d4:	4620      	mov	r0, r4
 80057d6:	f7ff ff47 	bl	8005668 <usb_handle_std_endpoint_req>
 80057da:	b138      	cbz	r0, 80057ec <usb_handle_standard_request+0x64>
	int rc = 0;
 80057dc:	2000      	movs	r0, #0
 80057de:	e7e6      	b.n	80057ae <usb_handle_standard_request+0x26>
			rc = -EINVAL;
 80057e0:	f06f 0015 	mvn.w	r0, #21
 80057e4:	e7e3      	b.n	80057ae <usb_handle_standard_request+0x26>
			rc = -EINVAL;
 80057e6:	f06f 0015 	mvn.w	r0, #21
 80057ea:	e7e0      	b.n	80057ae <usb_handle_standard_request+0x26>
			rc = -EINVAL;
 80057ec:	f06f 0015 	mvn.w	r0, #21
 80057f0:	e7dd      	b.n	80057ae <usb_handle_standard_request+0x26>
 80057f2:	bf00      	nop
 80057f4:	20001578 	.word	0x20001578

080057f8 <composite_setup_ep_cb>:

static int composite_setup_ep_cb(void)
{
 80057f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	size_t size = (__usb_data_end - __usb_data_start);
 80057fa:	4f15      	ldr	r7, [pc, #84]	; (8005850 <composite_setup_ep_cb+0x58>)
 80057fc:	4b15      	ldr	r3, [pc, #84]	; (8005854 <composite_setup_ep_cb+0x5c>)
 80057fe:	1aff      	subs	r7, r7, r3
 8005800:	10bb      	asrs	r3, r7, #2
 8005802:	4f15      	ldr	r7, [pc, #84]	; (8005858 <composite_setup_ep_cb+0x60>)
 8005804:	fb07 f703 	mul.w	r7, r7, r3
	struct usb_ep_cfg_data *ep_data;

	for (size_t i = 0; i < size; i++) {
 8005808:	2500      	movs	r5, #0
 800580a:	42af      	cmp	r7, r5
 800580c:	d91b      	bls.n	8005846 <composite_setup_ep_cb+0x4e>
		ep_data = __usb_data_start[i].endpoint;
 800580e:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8005812:	4a10      	ldr	r2, [pc, #64]	; (8005854 <composite_setup_ep_cb+0x5c>)
 8005814:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005818:	6a1e      	ldr	r6, [r3, #32]
		for (uint8_t n = 0; n < __usb_data_start[i].num_endpoints; n++) {
 800581a:	2400      	movs	r4, #0
 800581c:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8005820:	4a0c      	ldr	r2, [pc, #48]	; (8005854 <composite_setup_ep_cb+0x5c>)
 8005822:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005826:	7f1b      	ldrb	r3, [r3, #28]
 8005828:	429c      	cmp	r4, r3
 800582a:	d20a      	bcs.n	8005842 <composite_setup_ep_cb+0x4a>
			LOG_DBG("set cb, ep: 0x%x", ep_data[n].ep_addr);
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
 800582c:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
 8005830:	f856 1034 	ldr.w	r1, [r6, r4, lsl #3]
 8005834:	7918      	ldrb	r0, [r3, #4]
 8005836:	f011 fd07 	bl	8017248 <usb_dc_ep_set_callback>
 800583a:	b930      	cbnz	r0, 800584a <composite_setup_ep_cb+0x52>
		for (uint8_t n = 0; n < __usb_data_start[i].num_endpoints; n++) {
 800583c:	3401      	adds	r4, #1
 800583e:	b2e4      	uxtb	r4, r4
 8005840:	e7ec      	b.n	800581c <composite_setup_ep_cb+0x24>
	for (size_t i = 0; i < size; i++) {
 8005842:	3501      	adds	r5, #1
 8005844:	e7e1      	b.n	800580a <composite_setup_ep_cb+0x12>
				return -1;
			}
		}
	}

	return 0;
 8005846:	2000      	movs	r0, #0
 8005848:	e001      	b.n	800584e <composite_setup_ep_cb+0x56>
				return -1;
 800584a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800584e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005850:	20000a70 	.word	0x20000a70
 8005854:	20000a4c 	.word	0x20000a4c
 8005858:	38e38e39 	.word	0x38e38e39

0800585c <forward_status_cb>:
{
 800585c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800585e:	4606      	mov	r6, r0
 8005860:	460f      	mov	r7, r1
	size_t size = (__usb_data_end - __usb_data_start);
 8005862:	4d1a      	ldr	r5, [pc, #104]	; (80058cc <forward_status_cb+0x70>)
 8005864:	4b1a      	ldr	r3, [pc, #104]	; (80058d0 <forward_status_cb+0x74>)
 8005866:	1aed      	subs	r5, r5, r3
 8005868:	10ab      	asrs	r3, r5, #2
 800586a:	4d1a      	ldr	r5, [pc, #104]	; (80058d4 <forward_status_cb+0x78>)
 800586c:	fb05 f503 	mul.w	r5, r5, r3
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND) {
 8005870:	1f03      	subs	r3, r0, #4
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b01      	cmp	r3, #1
 8005876:	d901      	bls.n	800587c <forward_status_cb+0x20>
{
 8005878:	2400      	movs	r4, #0
 800587a:	e011      	b.n	80058a0 <forward_status_cb+0x44>
		if (usb_dev.configured) {
 800587c:	4b16      	ldr	r3, [pc, #88]	; (80058d8 <forward_status_cb+0x7c>)
 800587e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005882:	2b00      	cmp	r3, #0
 8005884:	d0f8      	beq.n	8005878 <forward_status_cb+0x1c>
			usb_cancel_transfers();
 8005886:	f000 fc89 	bl	800619c <usb_cancel_transfers>
			if (status == USB_DC_DISCONNECTED) {
 800588a:	2e04      	cmp	r6, #4
 800588c:	d1f4      	bne.n	8005878 <forward_status_cb+0x1c>
				foreach_ep(disable_interface_ep);
 800588e:	4813      	ldr	r0, [pc, #76]	; (80058dc <forward_status_cb+0x80>)
 8005890:	f7ff fcc2 	bl	8005218 <foreach_ep>
				usb_dev.configured = false;
 8005894:	4b10      	ldr	r3, [pc, #64]	; (80058d8 <forward_status_cb+0x7c>)
 8005896:	2200      	movs	r2, #0
 8005898:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
 800589c:	e7ec      	b.n	8005878 <forward_status_cb+0x1c>
	for (size_t i = 0; i < size; i++) {
 800589e:	3401      	adds	r4, #1
 80058a0:	42ac      	cmp	r4, r5
 80058a2:	d20b      	bcs.n	80058bc <forward_status_cb+0x60>
		struct usb_cfg_data *cfg = &__usb_data_start[i];
 80058a4:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 80058a8:	4b09      	ldr	r3, [pc, #36]	; (80058d0 <forward_status_cb+0x74>)
 80058aa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
		if (cfg->cb_usb_status) {
 80058ae:	68c3      	ldr	r3, [r0, #12]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0f4      	beq.n	800589e <forward_status_cb+0x42>
			cfg->cb_usb_status(cfg, status, param);
 80058b4:	463a      	mov	r2, r7
 80058b6:	4631      	mov	r1, r6
 80058b8:	4798      	blx	r3
 80058ba:	e7f0      	b.n	800589e <forward_status_cb+0x42>
	if (usb_dev.user_status_callback) {
 80058bc:	4b06      	ldr	r3, [pc, #24]	; (80058d8 <forward_status_cb+0x7c>)
 80058be:	6a1b      	ldr	r3, [r3, #32]
 80058c0:	b113      	cbz	r3, 80058c8 <forward_status_cb+0x6c>
		usb_dev.user_status_callback(status, param);
 80058c2:	4639      	mov	r1, r7
 80058c4:	4630      	mov	r0, r6
 80058c6:	4798      	blx	r3
}
 80058c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058ca:	bf00      	nop
 80058cc:	20000a70 	.word	0x20000a70
 80058d0:	20000a4c 	.word	0x20000a4c
 80058d4:	38e38e39 	.word	0x38e38e39
 80058d8:	20001578 	.word	0x20001578
 80058dc:	08016ca9 	.word	0x08016ca9

080058e0 <usb_write>:
{
 80058e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058e4:	4606      	mov	r6, r0
 80058e6:	4689      	mov	r9, r1
 80058e8:	4690      	mov	r8, r2
 80058ea:	461f      	mov	r7, r3
	int tries = CONFIG_USB_NUMOF_EP_WRITE_RETRIES;
 80058ec:	250a      	movs	r5, #10
 80058ee:	e018      	b.n	8005922 <usb_write+0x42>
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
 80058f0:	2302      	movs	r3, #2
 80058f2:	f363 0a02 	bfi	sl, r3, #0, #3
 80058f6:	f36f 0ac5 	bfc	sl, #3, #3
 80058fa:	4b11      	ldr	r3, [pc, #68]	; (8005940 <usb_write+0x60>)
 80058fc:	4a11      	ldr	r2, [pc, #68]	; (8005944 <usb_write+0x64>)
 80058fe:	1a9b      	subs	r3, r3, r2
 8005900:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8005904:	f363 1a8f 	bfi	sl, r3, #6, #10
 8005908:	4652      	mov	r2, sl
 800590a:	4631      	mov	r1, r6
 800590c:	480e      	ldr	r0, [pc, #56]	; (8005948 <usb_write+0x68>)
 800590e:	f7fe fcad 	bl	800426c <log_1>
	z_impl_k_yield();
 8005912:	f00e fd2b 	bl	801436c <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
 8005916:	f114 0f0b 	cmn.w	r4, #11
 800591a:	d10d      	bne.n	8005938 <usb_write+0x58>
 800591c:	1e6b      	subs	r3, r5, #1
 800591e:	b15d      	cbz	r5, 8005938 <usb_write+0x58>
 8005920:	461d      	mov	r5, r3
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
 8005922:	463b      	mov	r3, r7
 8005924:	4642      	mov	r2, r8
 8005926:	4649      	mov	r1, r9
 8005928:	4630      	mov	r0, r6
 800592a:	f001 fc25 	bl	8007178 <usb_dc_ep_write>
 800592e:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
 8005930:	f110 0f0b 	cmn.w	r0, #11
 8005934:	d1ef      	bne.n	8005916 <usb_write+0x36>
 8005936:	e7db      	b.n	80058f0 <usb_write+0x10>
}
 8005938:	4620      	mov	r0, r4
 800593a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800593e:	bf00      	nop
 8005940:	0801d788 	.word	0x0801d788
 8005944:	0801d6d0 	.word	0x0801d6d0
 8005948:	0801f164 	.word	0x0801f164

0800594c <usb_data_to_host>:
{
 800594c:	b530      	push	{r4, r5, lr}
 800594e:	b083      	sub	sp, #12
	if (usb_dev.zlp_flag == false) {
 8005950:	4b13      	ldr	r3, [pc, #76]	; (80059a0 <usb_data_to_host+0x54>)
 8005952:	7d1b      	ldrb	r3, [r3, #20]
 8005954:	b9cb      	cbnz	r3, 800598a <usb_data_to_host+0x3e>
 8005956:	4605      	mov	r5, r0
		uint32_t chunk = usb_dev.data_buf_residue;
 8005958:	4c11      	ldr	r4, [pc, #68]	; (80059a0 <usb_data_to_host+0x54>)
 800595a:	68e2      	ldr	r2, [r4, #12]
 800595c:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_IN_EP0, usb_dev.data_buf,
 800595e:	ab01      	add	r3, sp, #4
 8005960:	68a1      	ldr	r1, [r4, #8]
 8005962:	2080      	movs	r0, #128	; 0x80
 8005964:	f7ff ffbc 	bl	80058e0 <usb_write>
		usb_dev.data_buf += chunk;
 8005968:	9901      	ldr	r1, [sp, #4]
 800596a:	68a2      	ldr	r2, [r4, #8]
 800596c:	440a      	add	r2, r1
 800596e:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
 8005970:	68e3      	ldr	r3, [r4, #12]
 8005972:	1a5b      	subs	r3, r3, r1
 8005974:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && len > usb_dev.data_buf_len) {
 8005976:	b983      	cbnz	r3, 800599a <usb_data_to_host+0x4e>
 8005978:	6923      	ldr	r3, [r4, #16]
 800597a:	429d      	cmp	r5, r3
 800597c:	dd0d      	ble.n	800599a <usb_data_to_host+0x4e>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
 800597e:	f013 0f3f 	tst.w	r3, #63	; 0x3f
 8005982:	d10a      	bne.n	800599a <usb_data_to_host+0x4e>
				usb_dev.zlp_flag = true;
 8005984:	2201      	movs	r2, #1
 8005986:	7522      	strb	r2, [r4, #20]
 8005988:	e007      	b.n	800599a <usb_data_to_host+0x4e>
		usb_dev.zlp_flag = false;
 800598a:	2100      	movs	r1, #0
 800598c:	4b04      	ldr	r3, [pc, #16]	; (80059a0 <usb_data_to_host+0x54>)
 800598e:	7519      	strb	r1, [r3, #20]
		usb_dc_ep_write(USB_CONTROL_IN_EP0, NULL, 0, NULL);
 8005990:	460b      	mov	r3, r1
 8005992:	460a      	mov	r2, r1
 8005994:	2080      	movs	r0, #128	; 0x80
 8005996:	f001 fbef 	bl	8007178 <usb_dc_ep_write>
}
 800599a:	b003      	add	sp, #12
 800599c:	bd30      	pop	{r4, r5, pc}
 800599e:	bf00      	nop
 80059a0:	20001578 	.word	0x20001578

080059a4 <usb_handle_control_transfer>:
{
 80059a4:	b510      	push	{r4, lr}
 80059a6:	b084      	sub	sp, #16
	uint32_t chunk = 0U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	9303      	str	r3, [sp, #12]
	if (ep == USB_CONTROL_OUT_EP0 && ep_status == USB_DC_EP_SETUP) {
 80059ac:	4604      	mov	r4, r0
 80059ae:	b900      	cbnz	r0, 80059b2 <usb_handle_control_transfer+0xe>
 80059b0:	b349      	cbz	r1, 8005a06 <usb_handle_control_transfer+0x62>
	} else if (ep == USB_CONTROL_OUT_EP0) {
 80059b2:	2c00      	cmp	r4, #0
 80059b4:	f040 8096 	bne.w	8005ae4 <usb_handle_control_transfer+0x140>
		if (usb_dev.data_buf_residue <= 0) {
 80059b8:	4b52      	ldr	r3, [pc, #328]	; (8005b04 <usb_handle_control_transfer+0x160>)
 80059ba:	68da      	ldr	r2, [r3, #12]
 80059bc:	2a00      	cmp	r2, #0
 80059be:	dd79      	ble.n	8005ab4 <usb_handle_control_transfer+0x110>
		if (usb_dc_ep_read(USB_CONTROL_OUT_EP0,
 80059c0:	ab03      	add	r3, sp, #12
 80059c2:	4950      	ldr	r1, [pc, #320]	; (8005b04 <usb_handle_control_transfer+0x160>)
 80059c4:	6889      	ldr	r1, [r1, #8]
 80059c6:	2000      	movs	r0, #0
 80059c8:	f011 fc59 	bl	801727e <usb_dc_ep_read>
 80059cc:	2800      	cmp	r0, #0
 80059ce:	db7e      	blt.n	8005ace <usb_handle_control_transfer+0x12a>
		usb_dev.data_buf += chunk;
 80059d0:	9803      	ldr	r0, [sp, #12]
 80059d2:	4a4c      	ldr	r2, [pc, #304]	; (8005b04 <usb_handle_control_transfer+0x160>)
 80059d4:	6891      	ldr	r1, [r2, #8]
 80059d6:	4401      	add	r1, r0
 80059d8:	6091      	str	r1, [r2, #8]
		usb_dev.data_buf_residue -= chunk;
 80059da:	68d3      	ldr	r3, [r2, #12]
 80059dc:	1a1b      	subs	r3, r3, r0
 80059de:	60d3      	str	r3, [r2, #12]
		if (usb_dev.data_buf_residue == 0) {
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f040 8081 	bne.w	8005ae8 <usb_handle_control_transfer+0x144>
			usb_dev.data_buf = usb_dev.req_data;
 80059e6:	4610      	mov	r0, r2
 80059e8:	f102 0338 	add.w	r3, r2, #56	; 0x38
 80059ec:	f842 3f08 	str.w	r3, [r2, #8]!
			if (!usb_handle_request(setup,
 80059f0:	f100 0110 	add.w	r1, r0, #16
 80059f4:	f7ff fb66 	bl	80050c4 <usb_handle_request>
 80059f8:	2800      	cmp	r0, #0
 80059fa:	d06f      	beq.n	8005adc <usb_handle_control_transfer+0x138>
			usb_data_to_host(setup->wLength);
 80059fc:	4b41      	ldr	r3, [pc, #260]	; (8005b04 <usb_handle_control_transfer+0x160>)
 80059fe:	88d8      	ldrh	r0, [r3, #6]
 8005a00:	f7ff ffa4 	bl	800594c <usb_data_to_host>
 8005a04:	e070      	b.n	8005ae8 <usb_handle_control_transfer+0x144>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
 8005a06:	2208      	movs	r2, #8
 8005a08:	a901      	add	r1, sp, #4
 8005a0a:	f011 fc38 	bl	801727e <usb_dc_ep_read>
 8005a0e:	2800      	cmp	r0, #0
 8005a10:	db30      	blt.n	8005a74 <usb_handle_control_transfer+0xd0>
		setup->bmRequestType = setup_raw.bmRequestType;
 8005a12:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8005a16:	4b3b      	ldr	r3, [pc, #236]	; (8005b04 <usb_handle_control_transfer+0x160>)
 8005a18:	7019      	strb	r1, [r3, #0]
		setup->bRequest = setup_raw.bRequest;
 8005a1a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8005a1e:	705a      	strb	r2, [r3, #1]
		setup->wValue = sys_le16_to_cpu(setup_raw.wValue);
 8005a20:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8005a24:	805a      	strh	r2, [r3, #2]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
 8005a26:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8005a2a:	809a      	strh	r2, [r3, #4]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
 8005a2c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8005a30:	80da      	strh	r2, [r3, #6]
		if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
 8005a32:	2a80      	cmp	r2, #128	; 0x80
 8005a34:	d901      	bls.n	8005a3a <usb_handle_control_transfer+0x96>
			if (REQTYPE_GET_DIR(setup->bmRequestType)
 8005a36:	09cb      	lsrs	r3, r1, #7
 8005a38:	d020      	beq.n	8005a7c <usb_handle_control_transfer+0xd8>
		usb_dev.data_buf = usb_dev.req_data;
 8005a3a:	4b32      	ldr	r3, [pc, #200]	; (8005b04 <usb_handle_control_transfer+0x160>)
 8005a3c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005a40:	6098      	str	r0, [r3, #8]
		usb_dev.data_buf_residue = setup->wLength;
 8005a42:	60da      	str	r2, [r3, #12]
		usb_dev.data_buf_len = setup->wLength;
 8005a44:	611a      	str	r2, [r3, #16]
		usb_dev.zlp_flag = false;
 8005a46:	2000      	movs	r0, #0
 8005a48:	7518      	strb	r0, [r3, #20]
		if (setup->wLength &&
 8005a4a:	b10a      	cbz	r2, 8005a50 <usb_handle_control_transfer+0xac>
 8005a4c:	09cb      	lsrs	r3, r1, #7
 8005a4e:	d04b      	beq.n	8005ae8 <usb_handle_control_transfer+0x144>
		if (!usb_handle_request(setup,
 8005a50:	482c      	ldr	r0, [pc, #176]	; (8005b04 <usb_handle_control_transfer+0x160>)
 8005a52:	f100 0208 	add.w	r2, r0, #8
 8005a56:	f100 0110 	add.w	r1, r0, #16
 8005a5a:	f7ff fb33 	bl	80050c4 <usb_handle_request>
 8005a5e:	b328      	cbz	r0, 8005aac <usb_handle_control_transfer+0x108>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
 8005a60:	4b28      	ldr	r3, [pc, #160]	; (8005b04 <usb_handle_control_transfer+0x160>)
 8005a62:	88d8      	ldrh	r0, [r3, #6]
 8005a64:	691a      	ldr	r2, [r3, #16]
 8005a66:	4282      	cmp	r2, r0
 8005a68:	bfa8      	it	ge
 8005a6a:	4602      	movge	r2, r0
 8005a6c:	60da      	str	r2, [r3, #12]
		usb_data_to_host(setup->wLength);
 8005a6e:	f7ff ff6d 	bl	800594c <usb_data_to_host>
 8005a72:	e039      	b.n	8005ae8 <usb_handle_control_transfer+0x144>
			usb_dc_ep_set_stall(USB_CONTROL_IN_EP0);
 8005a74:	2080      	movs	r0, #128	; 0x80
 8005a76:	f001 fab3 	bl	8006fe0 <usb_dc_ep_set_stall>
			return;
 8005a7a:	e035      	b.n	8005ae8 <usb_handle_control_transfer+0x144>
				LOG_ERR("Request buffer too small");
 8005a7c:	f04f 0100 	mov.w	r1, #0
 8005a80:	2301      	movs	r3, #1
 8005a82:	f363 0102 	bfi	r1, r3, #0, #3
 8005a86:	f36f 01c5 	bfc	r1, #3, #3
 8005a8a:	4b1f      	ldr	r3, [pc, #124]	; (8005b08 <usb_handle_control_transfer+0x164>)
 8005a8c:	4a1f      	ldr	r2, [pc, #124]	; (8005b0c <usb_handle_control_transfer+0x168>)
 8005a8e:	1a9b      	subs	r3, r3, r2
 8005a90:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8005a94:	f363 118f 	bfi	r1, r3, #6, #10
 8005a98:	481d      	ldr	r0, [pc, #116]	; (8005b10 <usb_handle_control_transfer+0x16c>)
 8005a9a:	f7fe fd57 	bl	800454c <log_0>
				usb_dc_ep_set_stall(USB_CONTROL_IN_EP0);
 8005a9e:	2080      	movs	r0, #128	; 0x80
 8005aa0:	f001 fa9e 	bl	8006fe0 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_OUT_EP0);
 8005aa4:	2000      	movs	r0, #0
 8005aa6:	f001 fa9b 	bl	8006fe0 <usb_dc_ep_set_stall>
				return;
 8005aaa:	e01d      	b.n	8005ae8 <usb_handle_control_transfer+0x144>
			usb_dc_ep_set_stall(USB_CONTROL_IN_EP0);
 8005aac:	2080      	movs	r0, #128	; 0x80
 8005aae:	f001 fa97 	bl	8006fe0 <usb_dc_ep_set_stall>
			return;
 8005ab2:	e019      	b.n	8005ae8 <usb_handle_control_transfer+0x144>
			if (usb_dc_ep_read(USB_CONTROL_OUT_EP0,
 8005ab4:	ab03      	add	r3, sp, #12
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	4912      	ldr	r1, [pc, #72]	; (8005b04 <usb_handle_control_transfer+0x160>)
 8005aba:	6889      	ldr	r1, [r1, #8]
 8005abc:	4610      	mov	r0, r2
 8005abe:	f011 fbde 	bl	801727e <usb_dc_ep_read>
 8005ac2:	2800      	cmp	r0, #0
 8005ac4:	da10      	bge.n	8005ae8 <usb_handle_control_transfer+0x144>
				usb_dc_ep_set_stall(USB_CONTROL_IN_EP0);
 8005ac6:	2080      	movs	r0, #128	; 0x80
 8005ac8:	f001 fa8a 	bl	8006fe0 <usb_dc_ep_set_stall>
			return;
 8005acc:	e00c      	b.n	8005ae8 <usb_handle_control_transfer+0x144>
			usb_dc_ep_set_stall(USB_CONTROL_IN_EP0);
 8005ace:	2080      	movs	r0, #128	; 0x80
 8005ad0:	f001 fa86 	bl	8006fe0 <usb_dc_ep_set_stall>
			usb_dc_ep_set_stall(USB_CONTROL_OUT_EP0);
 8005ad4:	2000      	movs	r0, #0
 8005ad6:	f001 fa83 	bl	8006fe0 <usb_dc_ep_set_stall>
			return;
 8005ada:	e005      	b.n	8005ae8 <usb_handle_control_transfer+0x144>
				usb_dc_ep_set_stall(USB_CONTROL_IN_EP0);
 8005adc:	2080      	movs	r0, #128	; 0x80
 8005ade:	f001 fa7f 	bl	8006fe0 <usb_dc_ep_set_stall>
				return;
 8005ae2:	e001      	b.n	8005ae8 <usb_handle_control_transfer+0x144>
	} else if (ep == USB_CONTROL_IN_EP0) {
 8005ae4:	2c80      	cmp	r4, #128	; 0x80
 8005ae6:	d001      	beq.n	8005aec <usb_handle_control_transfer+0x148>
}
 8005ae8:	b004      	add	sp, #16
 8005aea:	bd10      	pop	{r4, pc}
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
 8005aec:	4b05      	ldr	r3, [pc, #20]	; (8005b04 <usb_handle_control_transfer+0x160>)
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	b91b      	cbnz	r3, 8005afa <usb_handle_control_transfer+0x156>
 8005af2:	4b04      	ldr	r3, [pc, #16]	; (8005b04 <usb_handle_control_transfer+0x160>)
 8005af4:	7d1b      	ldrb	r3, [r3, #20]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d0f6      	beq.n	8005ae8 <usb_handle_control_transfer+0x144>
			usb_data_to_host(setup->wLength);
 8005afa:	4b02      	ldr	r3, [pc, #8]	; (8005b04 <usb_handle_control_transfer+0x160>)
 8005afc:	88d8      	ldrh	r0, [r3, #6]
 8005afe:	f7ff ff25 	bl	800594c <usb_data_to_host>
		__ASSERT_NO_MSG(false);
 8005b02:	e7f1      	b.n	8005ae8 <usb_handle_control_transfer+0x144>
 8005b04:	20001578 	.word	0x20001578
 8005b08:	0801d788 	.word	0x0801d788
 8005b0c:	0801d6d0 	.word	0x0801d6d0
 8005b10:	0801f18c 	.word	0x0801f18c

08005b14 <usb_set_config>:

int usb_set_config(const uint8_t *device_descriptor)
{
 8005b14:	b508      	push	{r3, lr}
	/* register descriptors */
	usb_register_descriptors(device_descriptor);
 8005b16:	f7ff faf1 	bl	80050fc <usb_register_descriptors>

	/* register standard request handler */
	usb_register_request_handler(REQTYPE_TYPE_STANDARD,
 8005b1a:	4908      	ldr	r1, [pc, #32]	; (8005b3c <usb_set_config+0x28>)
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	f7ff fae5 	bl	80050ec <usb_register_request_handler>
				     usb_handle_standard_request);

	/* register class request handlers for each interface*/
	usb_register_request_handler(REQTYPE_TYPE_CLASS, class_handler);
 8005b22:	4907      	ldr	r1, [pc, #28]	; (8005b40 <usb_set_config+0x2c>)
 8005b24:	2001      	movs	r0, #1
 8005b26:	f7ff fae1 	bl	80050ec <usb_register_request_handler>

	/* register vendor request handler */
	usb_register_request_handler(REQTYPE_TYPE_VENDOR, vendor_handler);
 8005b2a:	4906      	ldr	r1, [pc, #24]	; (8005b44 <usb_set_config+0x30>)
 8005b2c:	2002      	movs	r0, #2
 8005b2e:	f7ff fadd 	bl	80050ec <usb_register_request_handler>

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);
 8005b32:	4805      	ldr	r0, [pc, #20]	; (8005b48 <usb_set_config+0x34>)
 8005b34:	f7ff fb64 	bl	8005200 <usb_register_custom_req_handler>

	return 0;
}
 8005b38:	2000      	movs	r0, #0
 8005b3a:	bd08      	pop	{r3, pc}
 8005b3c:	08005789 	.word	0x08005789
 8005b40:	0800527d 	.word	0x0800527d
 8005b44:	08005345 	.word	0x08005345
 8005b48:	080052dd 	.word	0x080052dd

08005b4c <usb_device_init>:
/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(const struct device *dev)
{
 8005b4c:	b508      	push	{r3, lr}
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
 8005b4e:	4b10      	ldr	r3, [pc, #64]	; (8005b90 <usb_device_init+0x44>)
 8005b50:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8005b54:	b10b      	cbz	r3, 8005b5a <usb_device_init+0xe>
		return 0;
 8005b56:	2000      	movs	r0, #0
	}

	usb_set_config(device_descriptor);

	return 0;
}
 8005b58:	bd08      	pop	{r3, pc}
	device_descriptor = usb_get_device_descriptor();
 8005b5a:	f000 f9d7 	bl	8005f0c <usb_get_device_descriptor>
	if (!device_descriptor) {
 8005b5e:	b118      	cbz	r0, 8005b68 <usb_device_init+0x1c>
	usb_set_config(device_descriptor);
 8005b60:	f7ff ffd8 	bl	8005b14 <usb_set_config>
	return 0;
 8005b64:	2000      	movs	r0, #0
 8005b66:	e7f7      	b.n	8005b58 <usb_device_init+0xc>
		LOG_ERR("Failed to configure USB device stack");
 8005b68:	f04f 0100 	mov.w	r1, #0
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	f363 0102 	bfi	r1, r3, #0, #3
 8005b72:	f36f 01c5 	bfc	r1, #3, #3
 8005b76:	4b07      	ldr	r3, [pc, #28]	; (8005b94 <usb_device_init+0x48>)
 8005b78:	4a07      	ldr	r2, [pc, #28]	; (8005b98 <usb_device_init+0x4c>)
 8005b7a:	1a9b      	subs	r3, r3, r2
 8005b7c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8005b80:	f363 118f 	bfi	r1, r3, #6, #10
 8005b84:	4805      	ldr	r0, [pc, #20]	; (8005b9c <usb_device_init+0x50>)
 8005b86:	f7fe fce1 	bl	800454c <log_0>
		return -1;
 8005b8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b8e:	e7e3      	b.n	8005b58 <usb_device_init+0xc>
 8005b90:	20001578 	.word	0x20001578
 8005b94:	0801d788 	.word	0x0801d788
 8005b98:	0801d6d0 	.word	0x0801d6d0
 8005b9c:	0801f1a8 	.word	0x0801f1a8

08005ba0 <usb_enable>:
{
 8005ba0:	b530      	push	{r4, r5, lr}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
 8005ba6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005baa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bae:	482d      	ldr	r0, [pc, #180]	; (8005c64 <usb_enable+0xc4>)
 8005bb0:	f00e f802 	bl	8013bb8 <z_impl_k_mutex_lock>
	if (usb_dev.enabled == true) {
 8005bb4:	4b2c      	ldr	r3, [pc, #176]	; (8005c68 <usb_enable+0xc8>)
 8005bb6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d14a      	bne.n	8005c54 <usb_enable+0xb4>
	ret = usb_vbus_set(true);
 8005bbe:	2001      	movs	r0, #1
 8005bc0:	f011 f83a 	bl	8016c38 <usb_vbus_set>
	if (ret < 0) {
 8005bc4:	1e04      	subs	r4, r0, #0
 8005bc6:	db46      	blt.n	8005c56 <usb_enable+0xb6>
	usb_dev.user_status_callback = status_cb;
 8005bc8:	4b27      	ldr	r3, [pc, #156]	; (8005c68 <usb_enable+0xc8>)
 8005bca:	621d      	str	r5, [r3, #32]
	usb_register_status_callback(forward_status_cb);
 8005bcc:	4c27      	ldr	r4, [pc, #156]	; (8005c6c <usb_enable+0xcc>)
 8005bce:	4620      	mov	r0, r4
 8005bd0:	f7ff fb1c 	bl	800520c <usb_register_status_callback>
	usb_dc_set_status_callback(forward_status_cb);
 8005bd4:	4620      	mov	r0, r4
 8005bd6:	f001 f8db 	bl	8006d90 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
 8005bda:	f001 f8ab 	bl	8006d34 <usb_dc_attach>
	if (ret < 0) {
 8005bde:	1e04      	subs	r4, r0, #0
 8005be0:	db39      	blt.n	8005c56 <usb_enable+0xb6>
	ret = usb_transfer_init();
 8005be2:	f000 fb1d 	bl	8006220 <usb_transfer_init>
	if (ret < 0) {
 8005be6:	1e04      	subs	r4, r0, #0
 8005be8:	db35      	blt.n	8005c56 <usb_enable+0xb6>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
 8005bea:	2340      	movs	r3, #64	; 0x40
 8005bec:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	f88d 3004 	strb.w	r3, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_OUT_EP0;
 8005bf6:	f88d 3000 	strb.w	r3, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
 8005bfa:	4668      	mov	r0, sp
 8005bfc:	f001 f9ac 	bl	8006f58 <usb_dc_ep_configure>
	if (ret < 0) {
 8005c00:	1e04      	subs	r4, r0, #0
 8005c02:	db28      	blt.n	8005c56 <usb_enable+0xb6>
	ep0_cfg.ep_addr = USB_CONTROL_IN_EP0;
 8005c04:	2380      	movs	r3, #128	; 0x80
 8005c06:	f88d 3000 	strb.w	r3, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
 8005c0a:	4668      	mov	r0, sp
 8005c0c:	f001 f9a4 	bl	8006f58 <usb_dc_ep_configure>
	if (ret < 0) {
 8005c10:	1e04      	subs	r4, r0, #0
 8005c12:	db20      	blt.n	8005c56 <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_OUT_EP0,
 8005c14:	4916      	ldr	r1, [pc, #88]	; (8005c70 <usb_enable+0xd0>)
 8005c16:	2000      	movs	r0, #0
 8005c18:	f011 fb16 	bl	8017248 <usb_dc_ep_set_callback>
	if (ret < 0) {
 8005c1c:	1e04      	subs	r4, r0, #0
 8005c1e:	db1a      	blt.n	8005c56 <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_IN_EP0,
 8005c20:	4913      	ldr	r1, [pc, #76]	; (8005c70 <usb_enable+0xd0>)
 8005c22:	2080      	movs	r0, #128	; 0x80
 8005c24:	f011 fb10 	bl	8017248 <usb_dc_ep_set_callback>
	if (ret < 0) {
 8005c28:	1e04      	subs	r4, r0, #0
 8005c2a:	db14      	blt.n	8005c56 <usb_enable+0xb6>
	ret = composite_setup_ep_cb();
 8005c2c:	f7ff fde4 	bl	80057f8 <composite_setup_ep_cb>
	if (ret < 0) {
 8005c30:	1e04      	subs	r4, r0, #0
 8005c32:	db10      	blt.n	8005c56 <usb_enable+0xb6>
	ret = usb_dc_ep_enable(USB_CONTROL_OUT_EP0);
 8005c34:	2000      	movs	r0, #0
 8005c36:	f001 fa33 	bl	80070a0 <usb_dc_ep_enable>
	if (ret < 0) {
 8005c3a:	1e04      	subs	r4, r0, #0
 8005c3c:	db0b      	blt.n	8005c56 <usb_enable+0xb6>
	ret = usb_dc_ep_enable(USB_CONTROL_IN_EP0);
 8005c3e:	2080      	movs	r0, #128	; 0x80
 8005c40:	f001 fa2e 	bl	80070a0 <usb_dc_ep_enable>
	if (ret < 0) {
 8005c44:	1e04      	subs	r4, r0, #0
 8005c46:	db06      	blt.n	8005c56 <usb_enable+0xb6>
	usb_dev.enabled = true;
 8005c48:	4b07      	ldr	r3, [pc, #28]	; (8005c68 <usb_enable+0xc8>)
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	ret = 0;
 8005c50:	2400      	movs	r4, #0
 8005c52:	e000      	b.n	8005c56 <usb_enable+0xb6>
		ret = 0;
 8005c54:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
 8005c56:	4803      	ldr	r0, [pc, #12]	; (8005c64 <usb_enable+0xc4>)
 8005c58:	f00e f838 	bl	8013ccc <z_impl_k_mutex_unlock>
}
 8005c5c:	4620      	mov	r0, r4
 8005c5e:	b003      	add	sp, #12
 8005c60:	bd30      	pop	{r4, r5, pc}
 8005c62:	bf00      	nop
 8005c64:	2000076c 	.word	0x2000076c
 8005c68:	20001578 	.word	0x20001578
 8005c6c:	0800585d 	.word	0x0800585d
 8005c70:	080059a5 	.word	0x080059a5

08005c74 <usb_get_cfg_data>:
 * The interface descriptor of a USB function must be assigned to the
 * usb_cfg_data so that usb_ep_cfg_data and matching endpoint descriptor
 * can be found.
 */
static struct usb_cfg_data *usb_get_cfg_data(struct usb_if_descriptor *iface)
{
 8005c74:	b410      	push	{r4}
	size_t length = (__usb_data_end - __usb_data_start);
 8005c76:	4c0e      	ldr	r4, [pc, #56]	; (8005cb0 <usb_get_cfg_data+0x3c>)
 8005c78:	4b0e      	ldr	r3, [pc, #56]	; (8005cb4 <usb_get_cfg_data+0x40>)
 8005c7a:	1ae4      	subs	r4, r4, r3
 8005c7c:	10a3      	asrs	r3, r4, #2
 8005c7e:	4c0e      	ldr	r4, [pc, #56]	; (8005cb8 <usb_get_cfg_data+0x44>)
 8005c80:	fb04 f403 	mul.w	r4, r4, r3

	for (size_t i = 0; i < length; i++) {
 8005c84:	2300      	movs	r3, #0
 8005c86:	42a3      	cmp	r3, r4
 8005c88:	d20e      	bcs.n	8005ca8 <usb_get_cfg_data+0x34>
		if (__usb_data_start[i].interface_descriptor == iface) {
 8005c8a:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8005c8e:	4909      	ldr	r1, [pc, #36]	; (8005cb4 <usb_get_cfg_data+0x40>)
 8005c90:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8005c94:	6852      	ldr	r2, [r2, #4]
 8005c96:	4282      	cmp	r2, r0
 8005c98:	d001      	beq.n	8005c9e <usb_get_cfg_data+0x2a>
	for (size_t i = 0; i < length; i++) {
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	e7f3      	b.n	8005c86 <usb_get_cfg_data+0x12>
			return &__usb_data_start[i];
 8005c9e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8005ca2:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8005ca6:	e000      	b.n	8005caa <usb_get_cfg_data+0x36>
		}
	}

	return NULL;
 8005ca8:	2000      	movs	r0, #0
}
 8005caa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	20000a70 	.word	0x20000a70
 8005cb4:	20000a4c 	.word	0x20000a4c
 8005cb8:	38e38e39 	.word	0x38e38e39

08005cbc <usb_update_sn_string_descriptor>:
 * Hardware Information Driver (HWINFO). User can implement own variant
 * of this function. Please note that the length of the new Serial Number
 * descriptor may not exceed the length of the CONFIG_USB_DEVICE_SN.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
 8005cbc:	b530      	push	{r4, r5, lr}
 8005cbe:	b089      	sub	sp, #36	; 0x24
	uint8_t hwid[sizeof(CONFIG_USB_DEVICE_SN) / 2];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
 8005cc0:	ac01      	add	r4, sp, #4
 8005cc2:	4d19      	ldr	r5, [pc, #100]	; (8005d28 <usb_update_sn_string_descriptor+0x6c>)
 8005cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005cc8:	682b      	ldr	r3, [r5, #0]
 8005cca:	7023      	strb	r3, [r4, #0]

	memset(hwid, 0, sizeof(hwid));
 8005ccc:	2208      	movs	r2, #8
 8005cce:	2100      	movs	r1, #0
 8005cd0:	a806      	add	r0, sp, #24
 8005cd2:	f012 f8f8 	bl	8017ec6 <memset>
	memset(sn, 0, sizeof(sn));
 8005cd6:	2212      	movs	r2, #18
 8005cd8:	2100      	movs	r1, #0
 8005cda:	4814      	ldr	r0, [pc, #80]	; (8005d2c <usb_update_sn_string_descriptor+0x70>)
 8005cdc:	f012 f8f3 	bl	8017ec6 <memset>
	if (z_syscall_trap()) {
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
 8005ce0:	2108      	movs	r1, #8
 8005ce2:	a806      	add	r0, sp, #24
 8005ce4:	f001 fbfa 	bl	80074dc <z_impl_hwinfo_get_device_id>

	if (hwinfo_get_device_id(hwid, sizeof(hwid)) > 0) {
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	dd19      	ble.n	8005d20 <usb_update_sn_string_descriptor+0x64>
		LOG_HEXDUMP_DBG(hwid, sizeof(hwid), "Serial Number");
		for (int i = 0; i < sizeof(hwid); i++) {
 8005cec:	2200      	movs	r2, #0
 8005cee:	e015      	b.n	8005d1c <usb_update_sn_string_descriptor+0x60>
			sn[i * 2] = hex[hwid[i] >> 4];
 8005cf0:	ab08      	add	r3, sp, #32
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8005cf8:	0051      	lsls	r1, r2, #1
 8005cfa:	a808      	add	r0, sp, #32
 8005cfc:	eb00 1013 	add.w	r0, r0, r3, lsr #4
 8005d00:	f810 4c1c 	ldrb.w	r4, [r0, #-28]
 8005d04:	4809      	ldr	r0, [pc, #36]	; (8005d2c <usb_update_sn_string_descriptor+0x70>)
 8005d06:	f800 4012 	strb.w	r4, [r0, r2, lsl #1]
			sn[i * 2 + 1] = hex[hwid[i] & 0xF];
 8005d0a:	f003 030f 	and.w	r3, r3, #15
 8005d0e:	3101      	adds	r1, #1
 8005d10:	ac08      	add	r4, sp, #32
 8005d12:	4423      	add	r3, r4
 8005d14:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005d18:	5443      	strb	r3, [r0, r1]
		for (int i = 0; i < sizeof(hwid); i++) {
 8005d1a:	3201      	adds	r2, #1
 8005d1c:	2a07      	cmp	r2, #7
 8005d1e:	d9e7      	bls.n	8005cf0 <usb_update_sn_string_descriptor+0x34>
		}
	}

	return sn;
}
 8005d20:	4802      	ldr	r0, [pc, #8]	; (8005d2c <usb_update_sn_string_descriptor+0x70>)
 8005d22:	b009      	add	sp, #36	; 0x24
 8005d24:	bd30      	pop	{r4, r5, pc}
 8005d26:	bf00      	nop
 8005d28:	0801f1dc 	.word	0x0801f1dc
 8005d2c:	20001634 	.word	0x20001634

08005d30 <usb_fix_ascii_sn_string_descriptor>:

static void usb_fix_ascii_sn_string_descriptor(struct usb_sn_descriptor *sn)
{
 8005d30:	b570      	push	{r4, r5, r6, lr}
 8005d32:	4604      	mov	r4, r0
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
 8005d34:	f7ff ffc2 	bl	8005cbc <usb_update_sn_string_descriptor>
	int runtime_sn_len, default_sn_len;

	if (!runtime_sn) {
 8005d38:	b120      	cbz	r0, 8005d44 <usb_fix_ascii_sn_string_descriptor+0x14>
 8005d3a:	4605      	mov	r5, r0
		return;
	}

	runtime_sn_len = strlen(runtime_sn);
 8005d3c:	f012 f858 	bl	8017df0 <strlen>
	if (!runtime_sn_len) {
 8005d40:	4606      	mov	r6, r0
 8005d42:	b900      	cbnz	r0, 8005d46 <usb_fix_ascii_sn_string_descriptor+0x16>
			"length as CONFIG_USB_DEVICE_SN");
		return;
	}

	memcpy(sn->bString, runtime_sn, runtime_sn_len);
}
 8005d44:	bd70      	pop	{r4, r5, r6, pc}
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
 8005d46:	480e      	ldr	r0, [pc, #56]	; (8005d80 <usb_fix_ascii_sn_string_descriptor+0x50>)
 8005d48:	f012 f852 	bl	8017df0 <strlen>
	if (runtime_sn_len != default_sn_len) {
 8005d4c:	4286      	cmp	r6, r0
 8005d4e:	d011      	beq.n	8005d74 <usb_fix_ascii_sn_string_descriptor+0x44>
		LOG_ERR("the new SN descriptor doesn't have the same "
 8005d50:	f04f 0100 	mov.w	r1, #0
 8005d54:	2301      	movs	r3, #1
 8005d56:	f363 0102 	bfi	r1, r3, #0, #3
 8005d5a:	f36f 01c5 	bfc	r1, #3, #3
 8005d5e:	4b09      	ldr	r3, [pc, #36]	; (8005d84 <usb_fix_ascii_sn_string_descriptor+0x54>)
 8005d60:	4a09      	ldr	r2, [pc, #36]	; (8005d88 <usb_fix_ascii_sn_string_descriptor+0x58>)
 8005d62:	1a9b      	subs	r3, r3, r2
 8005d64:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8005d68:	f363 118f 	bfi	r1, r3, #6, #10
 8005d6c:	4807      	ldr	r0, [pc, #28]	; (8005d8c <usb_fix_ascii_sn_string_descriptor+0x5c>)
 8005d6e:	f7fe fbed 	bl	800454c <log_0>
		return;
 8005d72:	e7e7      	b.n	8005d44 <usb_fix_ascii_sn_string_descriptor+0x14>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
 8005d74:	4632      	mov	r2, r6
 8005d76:	4629      	mov	r1, r5
 8005d78:	1ca0      	adds	r0, r4, #2
 8005d7a:	f012 f87f 	bl	8017e7c <memcpy>
 8005d7e:	e7e1      	b.n	8005d44 <usb_fix_ascii_sn_string_descriptor+0x14>
 8005d80:	0801f1dc 	.word	0x0801f1dc
 8005d84:	0801d780 	.word	0x0801d780
 8005d88:	0801d6d0 	.word	0x0801d6d0
 8005d8c:	0801f1f0 	.word	0x0801f1f0

08005d90 <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
 8005d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d94:	b082      	sub	sp, #8
 8005d96:	4604      	mov	r4, r0
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
	uint32_t requested_ep = BIT(16) | BIT(0);
 8005d98:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8005d9c:	9301      	str	r3, [sp, #4]
	uint8_t str_descr_idx = 0U;
 8005d9e:	2500      	movs	r5, #0
	uint8_t numof_ifaces = 0U;
 8005da0:	462f      	mov	r7, r5
	struct usb_cfg_data *cfg_data = NULL;
 8005da2:	46a8      	mov	r8, r5
	struct usb_cfg_descriptor *cfg_descr = NULL;
 8005da4:	462e      	mov	r6, r5

	while (head->bLength != 0U) {
 8005da6:	e065      	b.n	8005e74 <usb_fix_descriptor+0xe4>
			LOG_DBG("Association descriptor %p", head);
			break;
		case USB_INTERFACE_DESC:
			if_descr = (struct usb_if_descriptor *)head;
			LOG_DBG("Interface descriptor %p", head);
			if (if_descr->bAlternateSetting) {
 8005da8:	78e3      	ldrb	r3, [r4, #3]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d160      	bne.n	8005e70 <usb_fix_descriptor+0xe0>
				LOG_DBG("Skip alternate interface");
				break;
			}

			if (if_descr->bInterfaceNumber == 0U) {
 8005dae:	78a3      	ldrb	r3, [r4, #2]
 8005db0:	b94b      	cbnz	r3, 8005dc6 <usb_fix_descriptor+0x36>
				cfg_data = usb_get_cfg_data(if_descr);
 8005db2:	4620      	mov	r0, r4
 8005db4:	f7ff ff5e 	bl	8005c74 <usb_get_cfg_data>
				if (!cfg_data) {
 8005db8:	4680      	mov	r8, r0
 8005dba:	b138      	cbz	r0, 8005dcc <usb_fix_descriptor+0x3c>
					LOG_ERR("There is no usb_cfg_data "
						"for %p", head);
					return -1;
				}

				if (cfg_data->interface_config) {
 8005dbc:	6883      	ldr	r3, [r0, #8]
 8005dbe:	b113      	cbz	r3, 8005dc6 <usb_fix_descriptor+0x36>
					cfg_data->interface_config(head,
 8005dc0:	4639      	mov	r1, r7
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	4798      	blx	r3
							numof_ifaces);
				}
			}

			numof_ifaces++;
 8005dc6:	3701      	adds	r7, #1
 8005dc8:	b2ff      	uxtb	r7, r7
			break;
 8005dca:	e051      	b.n	8005e70 <usb_fix_descriptor+0xe0>
					LOG_ERR("There is no usb_cfg_data "
 8005dcc:	f04f 0200 	mov.w	r2, #0
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	f363 0202 	bfi	r2, r3, #0, #3
 8005dd6:	f36f 02c5 	bfc	r2, #3, #3
 8005dda:	4b45      	ldr	r3, [pc, #276]	; (8005ef0 <usb_fix_descriptor+0x160>)
 8005ddc:	4945      	ldr	r1, [pc, #276]	; (8005ef4 <usb_fix_descriptor+0x164>)
 8005dde:	1a5b      	subs	r3, r3, r1
 8005de0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8005de4:	f363 128f 	bfi	r2, r3, #6, #10
 8005de8:	4621      	mov	r1, r4
 8005dea:	4843      	ldr	r0, [pc, #268]	; (8005ef8 <usb_fix_descriptor+0x168>)
 8005dec:	f7fe fa3e 	bl	800426c <log_1>
					return -1;
 8005df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005df4:	e075      	b.n	8005ee2 <usb_fix_descriptor+0x152>
		case USB_ENDPOINT_DESC:
			if (!cfg_data) {
 8005df6:	f1b8 0f00 	cmp.w	r8, #0
 8005dfa:	d019      	beq.n	8005e30 <usb_fix_descriptor+0xa0>
				return -1;
			}

			LOG_DBG("Endpoint descriptor %p", head);
			ep_descr = (struct usb_ep_descriptor *)head;
			if (usb_validate_ep_cfg_data(ep_descr,
 8005dfc:	aa01      	add	r2, sp, #4
 8005dfe:	4641      	mov	r1, r8
 8005e00:	4620      	mov	r0, r4
 8005e02:	f010 ff6e 	bl	8016ce2 <usb_validate_ep_cfg_data>
 8005e06:	b398      	cbz	r0, 8005e70 <usb_fix_descriptor+0xe0>
						     cfg_data,
						     &requested_ep)) {
				LOG_ERR("Failed to validate endpoints");
 8005e08:	f04f 0100 	mov.w	r1, #0
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	f363 0102 	bfi	r1, r3, #0, #3
 8005e12:	f36f 01c5 	bfc	r1, #3, #3
 8005e16:	4b36      	ldr	r3, [pc, #216]	; (8005ef0 <usb_fix_descriptor+0x160>)
 8005e18:	4a36      	ldr	r2, [pc, #216]	; (8005ef4 <usb_fix_descriptor+0x164>)
 8005e1a:	1a9b      	subs	r3, r3, r2
 8005e1c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8005e20:	f363 118f 	bfi	r1, r3, #6, #10
 8005e24:	4835      	ldr	r0, [pc, #212]	; (8005efc <usb_fix_descriptor+0x16c>)
 8005e26:	f7fe fb91 	bl	800454c <log_0>
				return -1;
 8005e2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e2e:	e058      	b.n	8005ee2 <usb_fix_descriptor+0x152>
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
 8005e30:	f04f 0100 	mov.w	r1, #0
 8005e34:	2301      	movs	r3, #1
 8005e36:	f363 0102 	bfi	r1, r3, #0, #3
 8005e3a:	f36f 01c5 	bfc	r1, #3, #3
 8005e3e:	4b2c      	ldr	r3, [pc, #176]	; (8005ef0 <usb_fix_descriptor+0x160>)
 8005e40:	4a2c      	ldr	r2, [pc, #176]	; (8005ef4 <usb_fix_descriptor+0x164>)
 8005e42:	1a9b      	subs	r3, r3, r2
 8005e44:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8005e48:	f363 118f 	bfi	r1, r3, #6, #10
 8005e4c:	482c      	ldr	r0, [pc, #176]	; (8005f00 <usb_fix_descriptor+0x170>)
 8005e4e:	f7fe fb7d 	bl	800454c <log_0>
				return -1;
 8005e52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e56:	e044      	b.n	8005ee2 <usb_fix_descriptor+0x152>
		case 0:
		case USB_STRING_DESC:
			/*
			 * Copy runtime SN string descriptor first, if has
			 */
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
 8005e58:	2d03      	cmp	r5, #3
 8005e5a:	d01f      	beq.n	8005e9c <usb_fix_descriptor+0x10c>
			}
			/*
			 * Skip language descriptor but correct
			 * wTotalLength and bNumInterfaces once.
			 */
			if (str_descr_idx) {
 8005e5c:	bb15      	cbnz	r5, 8005ea4 <usb_fix_descriptor+0x114>
				ascii7_to_utf16le(head);
			} else {
				if (!cfg_descr) {
 8005e5e:	b32e      	cbz	r6, 8005eac <usb_fix_descriptor+0x11c>
					return -1;
				}

				LOG_DBG("Now the wTotalLength is %zd",
					(uint8_t *)head - (uint8_t *)cfg_descr);
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
 8005e60:	1ba3      	subs	r3, r4, r6
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
 8005e62:	70b3      	strb	r3, [r6, #2]
	dst[1] = val >> 8;
 8005e64:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8005e68:	70f3      	strb	r3, [r6, #3]
					     (uint8_t *)&cfg_descr->wTotalLength);
				cfg_descr->bNumInterfaces = numof_ifaces;
 8005e6a:	7137      	strb	r7, [r6, #4]
			}

			str_descr_idx += 1U;
 8005e6c:	3501      	adds	r5, #1
 8005e6e:	b2ed      	uxtb	r5, r5
		default:
			break;
		}

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
 8005e70:	7823      	ldrb	r3, [r4, #0]
 8005e72:	441c      	add	r4, r3
	while (head->bLength != 0U) {
 8005e74:	7823      	ldrb	r3, [r4, #0]
 8005e76:	b37b      	cbz	r3, 8005ed8 <usb_fix_descriptor+0x148>
		switch (head->bDescriptorType) {
 8005e78:	7863      	ldrb	r3, [r4, #1]
 8005e7a:	2b05      	cmp	r3, #5
 8005e7c:	d8f8      	bhi.n	8005e70 <usb_fix_descriptor+0xe0>
 8005e7e:	a201      	add	r2, pc, #4	; (adr r2, 8005e84 <usb_fix_descriptor+0xf4>)
 8005e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e84:	08005e59 	.word	0x08005e59
 8005e88:	08005e71 	.word	0x08005e71
 8005e8c:	08005ed5 	.word	0x08005ed5
 8005e90:	08005e59 	.word	0x08005e59
 8005e94:	08005da9 	.word	0x08005da9
 8005e98:	08005df7 	.word	0x08005df7
				usb_fix_ascii_sn_string_descriptor(sn);
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	f7ff ff47 	bl	8005d30 <usb_fix_ascii_sn_string_descriptor>
 8005ea2:	e7db      	b.n	8005e5c <usb_fix_descriptor+0xcc>
				ascii7_to_utf16le(head);
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	f010 ff07 	bl	8016cb8 <ascii7_to_utf16le>
 8005eaa:	e7df      	b.n	8005e6c <usb_fix_descriptor+0xdc>
					LOG_ERR("Incomplete device descriptor");
 8005eac:	f04f 0100 	mov.w	r1, #0
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	f363 0102 	bfi	r1, r3, #0, #3
 8005eb6:	f36f 01c5 	bfc	r1, #3, #3
 8005eba:	4b0d      	ldr	r3, [pc, #52]	; (8005ef0 <usb_fix_descriptor+0x160>)
 8005ebc:	4a0d      	ldr	r2, [pc, #52]	; (8005ef4 <usb_fix_descriptor+0x164>)
 8005ebe:	1a9b      	subs	r3, r3, r2
 8005ec0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8005ec4:	f363 118f 	bfi	r1, r3, #6, #10
 8005ec8:	480e      	ldr	r0, [pc, #56]	; (8005f04 <usb_fix_descriptor+0x174>)
 8005eca:	f7fe fb3f 	bl	800454c <log_0>
					return -1;
 8005ece:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ed2:	e006      	b.n	8005ee2 <usb_fix_descriptor+0x152>
			cfg_descr = (struct usb_cfg_descriptor *)head;
 8005ed4:	4626      	mov	r6, r4
 8005ed6:	e7cb      	b.n	8005e70 <usb_fix_descriptor+0xe0>
	}

	if ((head + 1) != __usb_descriptor_end) {
 8005ed8:	1ca0      	adds	r0, r4, #2
 8005eda:	4b0b      	ldr	r3, [pc, #44]	; (8005f08 <usb_fix_descriptor+0x178>)
 8005edc:	4298      	cmp	r0, r3
 8005ede:	d103      	bne.n	8005ee8 <usb_fix_descriptor+0x158>
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
	}

	return 0;
 8005ee0:	2000      	movs	r0, #0
}
 8005ee2:	b002      	add	sp, #8
 8005ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return usb_fix_descriptor(head + 1);
 8005ee8:	f7ff ff52 	bl	8005d90 <usb_fix_descriptor>
 8005eec:	e7f9      	b.n	8005ee2 <usb_fix_descriptor+0x152>
 8005eee:	bf00      	nop
 8005ef0:	0801d780 	.word	0x0801d780
 8005ef4:	0801d6d0 	.word	0x0801d6d0
 8005ef8:	0801f23c 	.word	0x0801f23c
 8005efc:	0801f2a0 	.word	0x0801f2a0
 8005f00:	0801f25c 	.word	0x0801f25c
 8005f04:	0801f2c0 	.word	0x0801f2c0
 8005f08:	20000a4c 	.word	0x20000a4c

08005f0c <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
 8005f0c:	b508      	push	{r3, lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
 8005f0e:	480c      	ldr	r0, [pc, #48]	; (8005f40 <usb_get_device_descriptor+0x34>)
 8005f10:	f7ff ff3e 	bl	8005d90 <usb_fix_descriptor>
 8005f14:	b908      	cbnz	r0, 8005f1a <usb_get_device_descriptor+0xe>
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
 8005f16:	480a      	ldr	r0, [pc, #40]	; (8005f40 <usb_get_device_descriptor+0x34>)
}
 8005f18:	bd08      	pop	{r3, pc}
		LOG_ERR("Failed to fixup USB descriptor");
 8005f1a:	f04f 0100 	mov.w	r1, #0
 8005f1e:	2301      	movs	r3, #1
 8005f20:	f363 0102 	bfi	r1, r3, #0, #3
 8005f24:	f36f 01c5 	bfc	r1, #3, #3
 8005f28:	4b06      	ldr	r3, [pc, #24]	; (8005f44 <usb_get_device_descriptor+0x38>)
 8005f2a:	4a07      	ldr	r2, [pc, #28]	; (8005f48 <usb_get_device_descriptor+0x3c>)
 8005f2c:	1a9b      	subs	r3, r3, r2
 8005f2e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8005f32:	f363 118f 	bfi	r1, r3, #6, #10
 8005f36:	4805      	ldr	r0, [pc, #20]	; (8005f4c <usb_get_device_descriptor+0x40>)
 8005f38:	f7fe fb08 	bl	800454c <log_0>
		return NULL;
 8005f3c:	2000      	movs	r0, #0
 8005f3e:	e7eb      	b.n	8005f18 <usb_get_device_descriptor+0xc>
 8005f40:	200009c0 	.word	0x200009c0
 8005f44:	0801d780 	.word	0x0801d780
 8005f48:	0801d6d0 	.word	0x0801d6d0
 8005f4c:	0801f2e0 	.word	0x0801f2e0

08005f50 <usb_ep_get_transfer>:
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
 8005f50:	2300      	movs	r3, #0
 8005f52:	2b03      	cmp	r3, #3
 8005f54:	dc0d      	bgt.n	8005f72 <usb_ep_get_transfer+0x22>
		if (ut_data[i].ep == ep) {
 8005f56:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8005f5a:	4907      	ldr	r1, [pc, #28]	; (8005f78 <usb_ep_get_transfer+0x28>)
 8005f5c:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
 8005f60:	4282      	cmp	r2, r0
 8005f62:	d001      	beq.n	8005f68 <usb_ep_get_transfer+0x18>
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
 8005f64:	3301      	adds	r3, #1
 8005f66:	e7f4      	b.n	8005f52 <usb_ep_get_transfer+0x2>
			return &ut_data[i];
 8005f68:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8005f6c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8005f70:	4770      	bx	lr
		}
	}

	return NULL;
 8005f72:	2000      	movs	r0, #0
}
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	20001648 	.word	0x20001648

08005f7c <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
 8005f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f80:	b082      	sub	sp, #8
 8005f82:	4604      	mov	r4, r0
	int ret = 0;
	uint32_t bytes;
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;
 8005f84:	f810 5c34 	ldrb.w	r5, [r0, #-52]

	if (trans->status != -EBUSY) {
 8005f88:	f850 3c30 	ldr.w	r3, [r0, #-48]
 8005f8c:	f113 0f10 	cmn.w	r3, #16
 8005f90:	d10c      	bne.n	8005fac <usb_transfer_work+0x30>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
 8005f92:	68c3      	ldr	r3, [r0, #12]
 8005f94:	f013 0f02 	tst.w	r3, #2
 8005f98:	d065      	beq.n	8006066 <usb_transfer_work+0xea>
		if (!trans->bsize) {
 8005f9a:	f850 2c28 	ldr.w	r2, [r0, #-40]
 8005f9e:	bb92      	cbnz	r2, 8006006 <usb_transfer_work+0x8a>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
 8005fa0:	f013 0f04 	tst.w	r3, #4
 8005fa4:	d028      	beq.n	8005ff8 <usb_transfer_work+0x7c>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
			}
			trans->status = 0;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	f844 3c30 	str.w	r3, [r4, #-48]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
 8005fac:	f854 3c30 	ldr.w	r3, [r4, #-48]
 8005fb0:	f113 0f10 	cmn.w	r3, #16
 8005fb4:	f000 80af 	beq.w	8006116 <usb_transfer_work+0x19a>
 8005fb8:	f854 6c20 	ldr.w	r6, [r4, #-32]
 8005fbc:	2e00      	cmp	r6, #0
 8005fbe:	f000 80aa 	beq.w	8006116 <usb_transfer_work+0x19a>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
 8005fc2:	f854 7c24 	ldr.w	r7, [r4, #-36]
		void *priv = trans->priv;
 8005fc6:	f854 8c1c 	ldr.w	r8, [r4, #-28]

		if (k_is_in_isr()) {
 8005fca:	f016 ff07 	bl	801cddc <k_is_in_isr>
 8005fce:	2800      	cmp	r0, #0
 8005fd0:	f040 8090 	bne.w	80060f4 <usb_transfer_work+0x178>
		}

		LOG_DBG("Transfer done, ep 0x%02x, status %d, size %zu",
			trans->ep, trans->status, trans->tsize);

		trans->cb = NULL;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	f844 3c20 	str.w	r3, [r4, #-32]
		k_sem_give(&trans->sem);
 8005fda:	f1a4 0018 	sub.w	r0, r4, #24
	z_impl_k_sem_give(sem);
 8005fde:	f00e fa27 	bl	8014430 <z_impl_k_sem_give>

		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
 8005fe2:	f854 3c30 	ldr.w	r3, [r4, #-48]
 8005fe6:	f113 0f48 	cmn.w	r3, #72	; 0x48
 8005fea:	f000 8094 	beq.w	8006116 <usb_transfer_work+0x19a>
			cb(ep, tsize, priv);
 8005fee:	4642      	mov	r2, r8
 8005ff0:	4639      	mov	r1, r7
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	47b0      	blx	r6
 8005ff6:	e08e      	b.n	8006116 <usb_transfer_work+0x19a>
				usb_write(ep, NULL, 0, NULL);
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	4628      	mov	r0, r5
 8006000:	f7ff fc6e 	bl	80058e0 <usb_write>
 8006004:	e7cf      	b.n	8005fa6 <usb_transfer_work+0x2a>
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
 8006006:	ab01      	add	r3, sp, #4
 8006008:	f850 1c2c 	ldr.w	r1, [r0, #-44]
 800600c:	4628      	mov	r0, r5
 800600e:	f7ff fc67 	bl	80058e0 <usb_write>
		if (ret) {
 8006012:	4601      	mov	r1, r0
 8006014:	b980      	cbnz	r0, 8006038 <usb_transfer_work+0xbc>
		trans->buffer += bytes;
 8006016:	f854 3c2c 	ldr.w	r3, [r4, #-44]
 800601a:	9a01      	ldr	r2, [sp, #4]
 800601c:	4413      	add	r3, r2
 800601e:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
 8006022:	f854 3c28 	ldr.w	r3, [r4, #-40]
 8006026:	1a9b      	subs	r3, r3, r2
 8006028:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
 800602c:	f854 3c24 	ldr.w	r3, [r4, #-36]
 8006030:	4413      	add	r3, r2
 8006032:	f844 3c24 	str.w	r3, [r4, #-36]
 8006036:	e7b9      	b.n	8005fac <usb_transfer_work+0x30>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
 8006038:	f04f 0300 	mov.w	r3, #0
 800603c:	2201      	movs	r2, #1
 800603e:	f362 0302 	bfi	r3, r2, #0, #3
 8006042:	f36f 03c5 	bfc	r3, #3, #3
 8006046:	4a38      	ldr	r2, [pc, #224]	; (8006128 <usb_transfer_work+0x1ac>)
 8006048:	4838      	ldr	r0, [pc, #224]	; (800612c <usb_transfer_work+0x1b0>)
 800604a:	1a12      	subs	r2, r2, r0
 800604c:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8006050:	f362 138f 	bfi	r3, r2, #6, #10
 8006054:	462a      	mov	r2, r5
 8006056:	4836      	ldr	r0, [pc, #216]	; (8006130 <usb_transfer_work+0x1b4>)
 8006058:	f7fe f988 	bl	800436c <log_2>
			trans->status = -EINVAL;
 800605c:	f06f 0315 	mvn.w	r3, #21
 8006060:	f844 3c30 	str.w	r3, [r4, #-48]
			goto done;
 8006064:	e7a2      	b.n	8005fac <usb_transfer_work+0x30>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
 8006066:	ab01      	add	r3, sp, #4
 8006068:	f850 2c28 	ldr.w	r2, [r0, #-40]
 800606c:	f850 1c2c 	ldr.w	r1, [r0, #-44]
 8006070:	4628      	mov	r0, r5
 8006072:	f001 f919 	bl	80072a8 <usb_dc_ep_read_wait>
		if (ret) {
 8006076:	4601      	mov	r1, r0
 8006078:	b9a0      	cbnz	r0, 80060a4 <usb_transfer_work+0x128>
		trans->buffer += bytes;
 800607a:	f854 3c2c 	ldr.w	r3, [r4, #-44]
 800607e:	9e01      	ldr	r6, [sp, #4]
 8006080:	4433      	add	r3, r6
 8006082:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
 8006086:	f854 3c28 	ldr.w	r3, [r4, #-40]
 800608a:	1b9b      	subs	r3, r3, r6
 800608c:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
 8006090:	f854 3c24 	ldr.w	r3, [r4, #-36]
 8006094:	4433      	add	r3, r6
 8006096:	f844 3c24 	str.w	r3, [r4, #-36]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
 800609a:	b9d6      	cbnz	r6, 80060d2 <usb_transfer_work+0x156>
			trans->status = 0;
 800609c:	2300      	movs	r3, #0
 800609e:	f844 3c30 	str.w	r3, [r4, #-48]
			goto done;
 80060a2:	e783      	b.n	8005fac <usb_transfer_work+0x30>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
 80060a4:	f04f 0300 	mov.w	r3, #0
 80060a8:	2201      	movs	r2, #1
 80060aa:	f362 0302 	bfi	r3, r2, #0, #3
 80060ae:	f36f 03c5 	bfc	r3, #3, #3
 80060b2:	4a1d      	ldr	r2, [pc, #116]	; (8006128 <usb_transfer_work+0x1ac>)
 80060b4:	481d      	ldr	r0, [pc, #116]	; (800612c <usb_transfer_work+0x1b0>)
 80060b6:	1a12      	subs	r2, r2, r0
 80060b8:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 80060bc:	f362 138f 	bfi	r3, r2, #6, #10
 80060c0:	462a      	mov	r2, r5
 80060c2:	481b      	ldr	r0, [pc, #108]	; (8006130 <usb_transfer_work+0x1b4>)
 80060c4:	f7fe f952 	bl	800436c <log_2>
			trans->status = -EINVAL;
 80060c8:	f06f 0315 	mvn.w	r3, #21
 80060cc:	f844 3c30 	str.w	r3, [r4, #-48]
			goto done;
 80060d0:	e76c      	b.n	8005fac <usb_transfer_work+0x30>
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
 80060d2:	4628      	mov	r0, r5
 80060d4:	f011 f8e3 	bl	801729e <usb_dc_ep_mps>
 80060d8:	fbb6 f3f0 	udiv	r3, r6, r0
 80060dc:	fb00 6013 	mls	r0, r0, r3, r6
 80060e0:	2800      	cmp	r0, #0
 80060e2:	d1db      	bne.n	800609c <usb_transfer_work+0x120>
 80060e4:	f854 3c28 	ldr.w	r3, [r4, #-40]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d0d7      	beq.n	800609c <usb_transfer_work+0x120>
		usb_dc_ep_read_continue(ep);
 80060ec:	4628      	mov	r0, r5
 80060ee:	f001 f957 	bl	80073a0 <usb_dc_ep_read_continue>
 80060f2:	e75b      	b.n	8005fac <usb_transfer_work+0x30>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 80060f4:	f104 0308 	add.w	r3, r4, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 80060f8:	f3bf 8f5b 	dmb	ish
 80060fc:	e853 2f00 	ldrex	r2, [r3]
 8006100:	f042 0101 	orr.w	r1, r2, #1
 8006104:	e843 1000 	strex	r0, r1, [r3]
 8006108:	2800      	cmp	r0, #0
 800610a:	d1f7      	bne.n	80060fc <usb_transfer_work+0x180>
 800610c:	f3bf 8f5b 	dmb	ish
 8006110:	f012 0f01 	tst.w	r2, #1
 8006114:	d002      	beq.n	800611c <usb_transfer_work+0x1a0>
		}
	}
}
 8006116:	b002      	add	sp, #8
 8006118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		k_queue_append(&work_q->queue, work);
 800611c:	4621      	mov	r1, r4
 800611e:	4805      	ldr	r0, [pc, #20]	; (8006134 <usb_transfer_work+0x1b8>)
 8006120:	f016 fca4 	bl	801ca6c <k_queue_append>
			return;
 8006124:	e7f7      	b.n	8006116 <usb_transfer_work+0x19a>
 8006126:	bf00      	nop
 8006128:	0801d798 	.word	0x0801d798
 800612c:	0801d6d0 	.word	0x0801d6d0
 8006130:	0801f310 	.word	0x0801f310
 8006134:	20001408 	.word	0x20001408

08006138 <usb_cancel_transfer>:
	irq_unlock(key);
	return ret;
}

void usb_cancel_transfer(uint8_t ep)
{
 8006138:	b510      	push	{r4, lr}
	__asm__ volatile(
 800613a:	f04f 0310 	mov.w	r3, #16
 800613e:	f3ef 8411 	mrs	r4, BASEPRI
 8006142:	f383 8811 	msr	BASEPRI, r3
 8006146:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
 800614a:	f7ff ff01 	bl	8005f50 <usb_ep_get_transfer>
	if (!trans) {
 800614e:	b120      	cbz	r0, 800615a <usb_cancel_transfer+0x22>
 8006150:	4603      	mov	r3, r0
		goto done;
	}

	if (trans->status != -EBUSY) {
 8006152:	6842      	ldr	r2, [r0, #4]
 8006154:	f112 0f10 	cmn.w	r2, #16
 8006158:	d004      	beq.n	8006164 <usb_cancel_transfer+0x2c>
	__asm__ volatile(
 800615a:	f384 8811 	msr	BASEPRI, r4
 800615e:	f3bf 8f6f 	isb	sy
	trans->status = -ECANCELED;
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);

done:
	irq_unlock(key);
}
 8006162:	bd10      	pop	{r4, pc}
	trans->status = -ECANCELED;
 8006164:	f06f 0247 	mvn.w	r2, #71	; 0x47
 8006168:	6042      	str	r2, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
 800616a:	f100 0134 	add.w	r1, r0, #52	; 0x34
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 800616e:	333c      	adds	r3, #60	; 0x3c
 8006170:	f3bf 8f5b 	dmb	ish
 8006174:	e853 2f00 	ldrex	r2, [r3]
 8006178:	f042 0001 	orr.w	r0, r2, #1
 800617c:	e843 0c00 	strex	ip, r0, [r3]
 8006180:	f1bc 0f00 	cmp.w	ip, #0
 8006184:	d1f6      	bne.n	8006174 <usb_cancel_transfer+0x3c>
 8006186:	f3bf 8f5b 	dmb	ish
 800618a:	f012 0f01 	tst.w	r2, #1
 800618e:	d1e4      	bne.n	800615a <usb_cancel_transfer+0x22>
		k_queue_append(&work_q->queue, work);
 8006190:	4801      	ldr	r0, [pc, #4]	; (8006198 <usb_cancel_transfer+0x60>)
 8006192:	f016 fc6b 	bl	801ca6c <k_queue_append>
}
 8006196:	e7e0      	b.n	800615a <usb_cancel_transfer+0x22>
 8006198:	20001408 	.word	0x20001408

0800619c <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
 800619c:	b538      	push	{r3, r4, r5, lr}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
 800619e:	2400      	movs	r4, #0
 80061a0:	e020      	b.n	80061e4 <usb_cancel_transfers+0x48>
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
			trans->status = -ECANCELED;
 80061a2:	4b1d      	ldr	r3, [pc, #116]	; (8006218 <usb_cancel_transfers+0x7c>)
 80061a4:	441a      	add	r2, r3
 80061a6:	f06f 0147 	mvn.w	r1, #71	; 0x47
 80061aa:	6051      	str	r1, [r2, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
 80061ac:	eb04 1104 	add.w	r1, r4, r4, lsl #4
 80061b0:	008a      	lsls	r2, r1, #2
 80061b2:	3230      	adds	r2, #48	; 0x30
 80061b4:	4413      	add	r3, r2
 80061b6:	1d19      	adds	r1, r3, #4
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 80061b8:	330c      	adds	r3, #12
 80061ba:	f3bf 8f5b 	dmb	ish
 80061be:	e853 2f00 	ldrex	r2, [r3]
 80061c2:	f042 0001 	orr.w	r0, r2, #1
 80061c6:	e843 0c00 	strex	ip, r0, [r3]
 80061ca:	f1bc 0f00 	cmp.w	ip, #0
 80061ce:	d1f6      	bne.n	80061be <usb_cancel_transfers+0x22>
 80061d0:	f3bf 8f5b 	dmb	ish
 80061d4:	f012 0f01 	tst.w	r2, #1
 80061d8:	d018      	beq.n	800620c <usb_cancel_transfers+0x70>
 80061da:	f385 8811 	msr	BASEPRI, r5
 80061de:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
 80061e2:	3401      	adds	r4, #1
 80061e4:	2c03      	cmp	r4, #3
 80061e6:	dc15      	bgt.n	8006214 <usb_cancel_transfers+0x78>
	__asm__ volatile(
 80061e8:	f04f 0310 	mov.w	r3, #16
 80061ec:	f3ef 8511 	mrs	r5, BASEPRI
 80061f0:	f383 8811 	msr	BASEPRI, r3
 80061f4:	f3bf 8f6f 	isb	sy
		if (trans->status == -EBUSY) {
 80061f8:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 80061fc:	009a      	lsls	r2, r3, #2
 80061fe:	4b06      	ldr	r3, [pc, #24]	; (8006218 <usb_cancel_transfers+0x7c>)
 8006200:	4413      	add	r3, r2
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f113 0f10 	cmn.w	r3, #16
 8006208:	d1e7      	bne.n	80061da <usb_cancel_transfers+0x3e>
 800620a:	e7ca      	b.n	80061a2 <usb_cancel_transfers+0x6>
		k_queue_append(&work_q->queue, work);
 800620c:	4803      	ldr	r0, [pc, #12]	; (800621c <usb_cancel_transfers+0x80>)
 800620e:	f016 fc2d 	bl	801ca6c <k_queue_append>
}
 8006212:	e7e2      	b.n	80061da <usb_cancel_transfers+0x3e>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
 8006214:	bd38      	pop	{r3, r4, r5, pc}
 8006216:	bf00      	nop
 8006218:	20001648 	.word	0x20001648
 800621c:	20001408 	.word	0x20001408

08006220 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
 8006220:	b510      	push	{r4, lr}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
 8006222:	2400      	movs	r4, #0
 8006224:	e014      	b.n	8006250 <usb_transfer_init+0x30>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 8006226:	480c      	ldr	r0, [pc, #48]	; (8006258 <usb_transfer_init+0x38>)
 8006228:	eb04 1204 	add.w	r2, r4, r4, lsl #4
 800622c:	0093      	lsls	r3, r2, #2
 800622e:	4403      	add	r3, r0
 8006230:	2200      	movs	r2, #0
 8006232:	635a      	str	r2, [r3, #52]	; 0x34
 8006234:	4909      	ldr	r1, [pc, #36]	; (800625c <usb_transfer_init+0x3c>)
 8006236:	6399      	str	r1, [r3, #56]	; 0x38
 8006238:	63da      	str	r2, [r3, #60]	; 0x3c
		k_work_init(&ut_data[i].work, usb_transfer_work);
		k_sem_init(&ut_data[i].sem, 1, 1);
 800623a:	eb04 1204 	add.w	r2, r4, r4, lsl #4
 800623e:	0093      	lsls	r3, r2, #2
 8006240:	3318      	adds	r3, #24
 8006242:	4418      	add	r0, r3
 8006244:	3004      	adds	r0, #4
	return z_impl_k_sem_init(sem, initial_count, limit);
 8006246:	2201      	movs	r2, #1
 8006248:	4611      	mov	r1, r2
 800624a:	f016 fdaf 	bl	801cdac <z_impl_k_sem_init>
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
 800624e:	3401      	adds	r4, #1
 8006250:	2c03      	cmp	r4, #3
 8006252:	dde8      	ble.n	8006226 <usb_transfer_init+0x6>
	}

	return 0;
}
 8006254:	2000      	movs	r0, #0
 8006256:	bd10      	pop	{r4, pc}
 8006258:	20001648 	.word	0x20001648
 800625c:	08005f7d 	.word	0x08005f7d

08006260 <get_flash_area_from_id>:

extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
 8006260:	b410      	push	{r4}
 8006262:	4604      	mov	r4, r0
	for (int i = 0; i < flash_map_entries; i++) {
 8006264:	2300      	movs	r3, #0
 8006266:	4a09      	ldr	r2, [pc, #36]	; (800628c <get_flash_area_from_id+0x2c>)
 8006268:	6812      	ldr	r2, [r2, #0]
 800626a:	429a      	cmp	r2, r3
 800626c:	dd09      	ble.n	8006282 <get_flash_area_from_id+0x22>
		if (flash_map[i].fa_id == idx) {
 800626e:	011a      	lsls	r2, r3, #4
 8006270:	4907      	ldr	r1, [pc, #28]	; (8006290 <get_flash_area_from_id+0x30>)
 8006272:	6809      	ldr	r1, [r1, #0]
 8006274:	eb01 1003 	add.w	r0, r1, r3, lsl #4
 8006278:	5c8a      	ldrb	r2, [r1, r2]
 800627a:	42a2      	cmp	r2, r4
 800627c:	d002      	beq.n	8006284 <get_flash_area_from_id+0x24>
	for (int i = 0; i < flash_map_entries; i++) {
 800627e:	3301      	adds	r3, #1
 8006280:	e7f1      	b.n	8006266 <get_flash_area_from_id+0x6>
			return &flash_map[i];
		}
	}

	return NULL;
 8006282:	2000      	movs	r0, #0
}
 8006284:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	0801f35c 	.word	0x0801f35c
 8006290:	200003cc 	.word	0x200003cc

08006294 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
 8006294:	4b08      	ldr	r3, [pc, #32]	; (80062b8 <flash_area_open+0x24>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	b13b      	cbz	r3, 80062aa <flash_area_open+0x16>
{
 800629a:	b510      	push	{r4, lr}
 800629c:	460c      	mov	r4, r1
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
 800629e:	f7ff ffdf 	bl	8006260 <get_flash_area_from_id>
	if (area == NULL) {
 80062a2:	b128      	cbz	r0, 80062b0 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
 80062a4:	6020      	str	r0, [r4, #0]
	return 0;
 80062a6:	2000      	movs	r0, #0
}
 80062a8:	bd10      	pop	{r4, pc}
		return -EACCES;
 80062aa:	f06f 000c 	mvn.w	r0, #12
}
 80062ae:	4770      	bx	lr
		return -ENOENT;
 80062b0:	f06f 0001 	mvn.w	r0, #1
 80062b4:	e7f8      	b.n	80062a8 <flash_area_open+0x14>
 80062b6:	bf00      	nop
 80062b8:	200003cc 	.word	0x200003cc

080062bc <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
 80062bc:	b500      	push	{lr}
 80062be:	b08b      	sub	sp, #44	; 0x2c
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
 80062c0:	ab03      	add	r3, sp, #12
 80062c2:	9300      	str	r3, [sp, #0]
 80062c4:	4b02      	ldr	r3, [pc, #8]	; (80062d0 <flash_area_get_sectors+0x14>)
 80062c6:	f010 fdf3 	bl	8016eb0 <flash_area_layout>
}
 80062ca:	b00b      	add	sp, #44	; 0x2c
 80062cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80062d0:	08016e75 	.word	0x08016e75

080062d4 <settings_save_one>:

/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int settings_save_one(const char *name, const void *value, size_t val_len)
{
 80062d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
 80062d8:	4b0f      	ldr	r3, [pc, #60]	; (8006318 <settings_save_one+0x44>)
 80062da:	681d      	ldr	r5, [r3, #0]
	if (!cs) {
 80062dc:	b1cd      	cbz	r5, 8006312 <settings_save_one+0x3e>
 80062de:	4680      	mov	r8, r0
 80062e0:	460f      	mov	r7, r1
 80062e2:	4614      	mov	r4, r2
	return z_impl_k_mutex_lock(mutex, timeout);
 80062e4:	4e0d      	ldr	r6, [pc, #52]	; (800631c <settings_save_one+0x48>)
 80062e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062ee:	4630      	mov	r0, r6
 80062f0:	f00d fc62 	bl	8013bb8 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
 80062f4:	686b      	ldr	r3, [r5, #4]
 80062f6:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80062fa:	4623      	mov	r3, r4
 80062fc:	463a      	mov	r2, r7
 80062fe:	4641      	mov	r1, r8
 8006300:	4628      	mov	r0, r5
 8006302:	47c8      	blx	r9
 8006304:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
 8006306:	4630      	mov	r0, r6
 8006308:	f00d fce0 	bl	8013ccc <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
 800630c:	4620      	mov	r0, r4
 800630e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOENT;
 8006312:	f06f 0401 	mvn.w	r4, #1
 8006316:	e7f9      	b.n	800630c <settings_save_one+0x38>
 8006318:	20001760 	.word	0x20001760
 800631c:	20000758 	.word	0x20000758

08006320 <settings_src_register>:
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
 8006320:	2300      	movs	r3, #0
 8006322:	6003      	str	r3, [r0, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
 8006324:	4b05      	ldr	r3, [pc, #20]	; (800633c <settings_src_register+0x1c>)
 8006326:	685b      	ldr	r3, [r3, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
 8006328:	b11b      	cbz	r3, 8006332 <settings_src_register+0x12>
	parent->next = child;
 800632a:	6018      	str	r0, [r3, #0]
	list->tail = node;
 800632c:	4b03      	ldr	r3, [pc, #12]	; (800633c <settings_src_register+0x1c>)
 800632e:	6058      	str	r0, [r3, #4]
}
 8006330:	4770      	bx	lr
 8006332:	4b02      	ldr	r3, [pc, #8]	; (800633c <settings_src_register+0x1c>)
 8006334:	6058      	str	r0, [r3, #4]
	list->head = node;
 8006336:	6018      	str	r0, [r3, #0]
}
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	20001758 	.word	0x20001758

08006340 <settings_dst_register>:
	settings_save_dst = cs;
 8006340:	4b01      	ldr	r3, [pc, #4]	; (8006348 <settings_dst_register+0x8>)
 8006342:	6018      	str	r0, [r3, #0]
}
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	20001760 	.word	0x20001760

0800634c <settings_load_subtree>:
{
 800634c:	b530      	push	{r4, r5, lr}
 800634e:	b085      	sub	sp, #20
 8006350:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
 8006352:	2300      	movs	r3, #0
 8006354:	9302      	str	r3, [sp, #8]
 8006356:	9303      	str	r3, [sp, #12]
 8006358:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
 800635a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800635e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006362:	480d      	ldr	r0, [pc, #52]	; (8006398 <settings_load_subtree+0x4c>)
 8006364:	f00d fc28 	bl	8013bb8 <z_impl_k_mutex_lock>
	return list->head;
 8006368:	4b0c      	ldr	r3, [pc, #48]	; (800639c <settings_load_subtree+0x50>)
 800636a:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
 800636c:	b14c      	cbz	r4, 8006382 <settings_load_subtree+0x36>
		cs->cs_itf->csi_load(cs, &arg);
 800636e:	6863      	ldr	r3, [r4, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	a901      	add	r1, sp, #4
 8006374:	4620      	mov	r0, r4
 8006376:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
 8006378:	2c00      	cmp	r4, #0
 800637a:	d0f7      	beq.n	800636c <settings_load_subtree+0x20>
	return node->next;
 800637c:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
 800637e:	2c00      	cmp	r4, #0
 8006380:	d1f4      	bne.n	800636c <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
 8006382:	4628      	mov	r0, r5
 8006384:	f000 f93a 	bl	80065fc <settings_commit_subtree>
 8006388:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
 800638a:	4803      	ldr	r0, [pc, #12]	; (8006398 <settings_load_subtree+0x4c>)
 800638c:	f00d fc9e 	bl	8013ccc <z_impl_k_mutex_unlock>
}
 8006390:	4620      	mov	r0, r4
 8006392:	b005      	add	sp, #20
 8006394:	bd30      	pop	{r4, r5, pc}
 8006396:	bf00      	nop
 8006398:	20000758 	.word	0x20000758
 800639c:	20001758 	.word	0x20001758

080063a0 <settings_load_subtree_direct>:
{
 80063a0:	b510      	push	{r4, lr}
 80063a2:	b084      	sub	sp, #16
	const struct settings_load_arg arg = {
 80063a4:	9001      	str	r0, [sp, #4]
 80063a6:	9102      	str	r1, [sp, #8]
 80063a8:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
 80063aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063b2:	480b      	ldr	r0, [pc, #44]	; (80063e0 <settings_load_subtree_direct+0x40>)
 80063b4:	f00d fc00 	bl	8013bb8 <z_impl_k_mutex_lock>
	return list->head;
 80063b8:	4b0a      	ldr	r3, [pc, #40]	; (80063e4 <settings_load_subtree_direct+0x44>)
 80063ba:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
 80063bc:	b14c      	cbz	r4, 80063d2 <settings_load_subtree_direct+0x32>
		cs->cs_itf->csi_load(cs, &arg);
 80063be:	6863      	ldr	r3, [r4, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	a901      	add	r1, sp, #4
 80063c4:	4620      	mov	r0, r4
 80063c6:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
 80063c8:	2c00      	cmp	r4, #0
 80063ca:	d0f7      	beq.n	80063bc <settings_load_subtree_direct+0x1c>
	return node->next;
 80063cc:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
 80063ce:	2c00      	cmp	r4, #0
 80063d0:	d1f4      	bne.n	80063bc <settings_load_subtree_direct+0x1c>
	return z_impl_k_mutex_unlock(mutex);
 80063d2:	4803      	ldr	r0, [pc, #12]	; (80063e0 <settings_load_subtree_direct+0x40>)
 80063d4:	f00d fc7a 	bl	8013ccc <z_impl_k_mutex_unlock>
}
 80063d8:	2000      	movs	r0, #0
 80063da:	b004      	add	sp, #16
 80063dc:	bd10      	pop	{r4, pc}
 80063de:	bf00      	nop
 80063e0:	20000758 	.word	0x20000758
 80063e4:	20001758 	.word	0x20001758

080063e8 <settings_store_init>:
	list->head = NULL;
 80063e8:	4b02      	ldr	r3, [pc, #8]	; (80063f4 <settings_store_init+0xc>)
 80063ea:	2200      	movs	r2, #0
 80063ec:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
 80063ee:	605a      	str	r2, [r3, #4]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	20001758 	.word	0x20001758

080063f8 <settings_init>:


void settings_store_init(void);

void settings_init(void)
{
 80063f8:	b508      	push	{r3, lr}
	list->head = NULL;
 80063fa:	4b03      	ldr	r3, [pc, #12]	; (8006408 <settings_init+0x10>)
 80063fc:	2200      	movs	r2, #0
 80063fe:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
 8006400:	605a      	str	r2, [r3, #4]
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
 8006402:	f7ff fff1 	bl	80063e8 <settings_store_init>
}
 8006406:	bd08      	pop	{r3, pc}
 8006408:	20001764 	.word	0x20001764

0800640c <settings_register>:

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
int settings_register(struct settings_handler *handler)
{
 800640c:	b538      	push	{r3, r4, r5, lr}
 800640e:	4605      	mov	r5, r0
	int rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
 8006410:	4c20      	ldr	r4, [pc, #128]	; (8006494 <settings_register+0x88>)
 8006412:	4b21      	ldr	r3, [pc, #132]	; (8006498 <settings_register+0x8c>)
 8006414:	429c      	cmp	r4, r3
 8006416:	d207      	bcs.n	8006428 <settings_register+0x1c>
		if (strcmp(handler->name, ch->name) == 0) {
 8006418:	6821      	ldr	r1, [r4, #0]
 800641a:	6828      	ldr	r0, [r5, #0]
 800641c:	f011 fcf0 	bl	8017e00 <strcmp>
 8006420:	2800      	cmp	r0, #0
 8006422:	d033      	beq.n	800648c <settings_register+0x80>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
 8006424:	3414      	adds	r4, #20
 8006426:	e7f4      	b.n	8006412 <settings_register+0x6>
	return z_impl_k_mutex_lock(mutex, timeout);
 8006428:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800642c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006430:	481a      	ldr	r0, [pc, #104]	; (800649c <settings_register+0x90>)
 8006432:	f00d fbc1 	bl	8013bb8 <z_impl_k_mutex_lock>
	return list->head;
 8006436:	4b1a      	ldr	r3, [pc, #104]	; (80064a0 <settings_register+0x94>)
 8006438:	681c      	ldr	r4, [r3, #0]
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
 800643a:	b114      	cbz	r4, 8006442 <settings_register+0x36>
 800643c:	3c14      	subs	r4, #20
 800643e:	e000      	b.n	8006442 <settings_register+0x36>
 8006440:	461c      	mov	r4, r3
 8006442:	b15c      	cbz	r4, 800645c <settings_register+0x50>
		if (strcmp(handler->name, ch->name) == 0) {
 8006444:	6821      	ldr	r1, [r4, #0]
 8006446:	6828      	ldr	r0, [r5, #0]
 8006448:	f011 fcda 	bl	8017e00 <strcmp>
 800644c:	b1d8      	cbz	r0, 8006486 <settings_register+0x7a>
Z_GENLIST_PEEK_NEXT(slist, snode)
 800644e:	f114 0314 	adds.w	r3, r4, #20
 8006452:	d0f5      	beq.n	8006440 <settings_register+0x34>
	return node->next;
 8006454:	6964      	ldr	r4, [r4, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
 8006456:	b10c      	cbz	r4, 800645c <settings_register+0x50>
 8006458:	3c14      	subs	r4, #20
 800645a:	e7f2      	b.n	8006442 <settings_register+0x36>
			rc = -EEXIST;
			goto end;
		}
	}
	sys_slist_append(&settings_handlers, &handler->node);
 800645c:	f105 0314 	add.w	r3, r5, #20
	parent->next = child;
 8006460:	2200      	movs	r2, #0
 8006462:	616a      	str	r2, [r5, #20]
	return list->tail;
 8006464:	4a0e      	ldr	r2, [pc, #56]	; (80064a0 <settings_register+0x94>)
 8006466:	6852      	ldr	r2, [r2, #4]
Z_GENLIST_APPEND(slist, snode)
 8006468:	b142      	cbz	r2, 800647c <settings_register+0x70>
	parent->next = child;
 800646a:	6013      	str	r3, [r2, #0]
	list->tail = node;
 800646c:	4a0c      	ldr	r2, [pc, #48]	; (80064a0 <settings_register+0x94>)
 800646e:	6053      	str	r3, [r2, #4]
	int rc = 0;
 8006470:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
 8006472:	480a      	ldr	r0, [pc, #40]	; (800649c <settings_register+0x90>)
 8006474:	f00d fc2a 	bl	8013ccc <z_impl_k_mutex_unlock>

end:
	k_mutex_unlock(&settings_lock);
	return rc;
}
 8006478:	4620      	mov	r0, r4
 800647a:	bd38      	pop	{r3, r4, r5, pc}
 800647c:	4a08      	ldr	r2, [pc, #32]	; (80064a0 <settings_register+0x94>)
 800647e:	6053      	str	r3, [r2, #4]
	list->head = node;
 8006480:	6013      	str	r3, [r2, #0]
	int rc = 0;
 8006482:	2400      	movs	r4, #0
}
 8006484:	e7f5      	b.n	8006472 <settings_register+0x66>
			rc = -EEXIST;
 8006486:	f06f 0410 	mvn.w	r4, #16
 800648a:	e7f2      	b.n	8006472 <settings_register+0x66>
			return -EEXIST;
 800648c:	f06f 0410 	mvn.w	r4, #16
 8006490:	e7f2      	b.n	8006478 <settings_register+0x6c>
 8006492:	bf00      	nop
 8006494:	0801d658 	.word	0x0801d658
 8006498:	0801d6d0 	.word	0x0801d6d0
 800649c:	20000758 	.word	0x20000758
 80064a0:	20001764 	.word	0x20001764

080064a4 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
 80064a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064a6:	b083      	sub	sp, #12
 80064a8:	4606      	mov	r6, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
 80064aa:	460f      	mov	r7, r1
 80064ac:	b109      	cbz	r1, 80064b2 <settings_parse_and_lookup+0xe>
		*next = NULL;
 80064ae:	2300      	movs	r3, #0
 80064b0:	600b      	str	r3, [r1, #0]
				*next = tmpnext;
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = ch;
 80064b2:	4c27      	ldr	r4, [pc, #156]	; (8006550 <settings_parse_and_lookup+0xac>)
 80064b4:	2500      	movs	r5, #0
 80064b6:	e004      	b.n	80064c2 <settings_parse_and_lookup+0x1e>
			if (next) {
 80064b8:	b10f      	cbz	r7, 80064be <settings_parse_and_lookup+0x1a>
				*next = tmpnext;
 80064ba:	9b01      	ldr	r3, [sp, #4]
 80064bc:	603b      	str	r3, [r7, #0]
			bestmatch = ch;
 80064be:	4625      	mov	r5, r4
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
 80064c0:	3414      	adds	r4, #20
 80064c2:	4b24      	ldr	r3, [pc, #144]	; (8006554 <settings_parse_and_lookup+0xb0>)
 80064c4:	429c      	cmp	r4, r3
 80064c6:	d216      	bcs.n	80064f6 <settings_parse_and_lookup+0x52>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
 80064c8:	aa01      	add	r2, sp, #4
 80064ca:	6821      	ldr	r1, [r4, #0]
 80064cc:	4630      	mov	r0, r6
 80064ce:	f010 fd1c 	bl	8016f0a <settings_name_steq>
 80064d2:	2800      	cmp	r0, #0
 80064d4:	d0f4      	beq.n	80064c0 <settings_parse_and_lookup+0x1c>
		if (!bestmatch) {
 80064d6:	2d00      	cmp	r5, #0
 80064d8:	d0ee      	beq.n	80064b8 <settings_parse_and_lookup+0x14>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
 80064da:	2200      	movs	r2, #0
 80064dc:	6829      	ldr	r1, [r5, #0]
 80064de:	6820      	ldr	r0, [r4, #0]
 80064e0:	f010 fd13 	bl	8016f0a <settings_name_steq>
 80064e4:	2800      	cmp	r0, #0
 80064e6:	d0eb      	beq.n	80064c0 <settings_parse_and_lookup+0x1c>
			if (next) {
 80064e8:	b11f      	cbz	r7, 80064f2 <settings_parse_and_lookup+0x4e>
				*next = tmpnext;
 80064ea:	9b01      	ldr	r3, [sp, #4]
 80064ec:	603b      	str	r3, [r7, #0]
			bestmatch = ch;
 80064ee:	4625      	mov	r5, r4
 80064f0:	e7e6      	b.n	80064c0 <settings_parse_and_lookup+0x1c>
 80064f2:	4625      	mov	r5, r4
 80064f4:	e7e4      	b.n	80064c0 <settings_parse_and_lookup+0x1c>
	return list->head;
 80064f6:	4b18      	ldr	r3, [pc, #96]	; (8006558 <settings_parse_and_lookup+0xb4>)
 80064f8:	681c      	ldr	r4, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
 80064fa:	b15c      	cbz	r4, 8006514 <settings_parse_and_lookup+0x70>
 80064fc:	3c14      	subs	r4, #20
 80064fe:	e009      	b.n	8006514 <settings_parse_and_lookup+0x70>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
			continue;
		}
		if (!bestmatch) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
 8006500:	b10f      	cbz	r7, 8006506 <settings_parse_and_lookup+0x62>
				*next = tmpnext;
 8006502:	9b01      	ldr	r3, [sp, #4]
 8006504:	603b      	str	r3, [r7, #0]
			bestmatch = (struct settings_handler_static *)ch;
 8006506:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 8006508:	f114 0314 	adds.w	r3, r4, #20
 800650c:	d01a      	beq.n	8006544 <settings_parse_and_lookup+0xa0>
	return node->next;
 800650e:	6964      	ldr	r4, [r4, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
 8006510:	b104      	cbz	r4, 8006514 <settings_parse_and_lookup+0x70>
 8006512:	3c14      	subs	r4, #20
 8006514:	b1c4      	cbz	r4, 8006548 <settings_parse_and_lookup+0xa4>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
 8006516:	aa01      	add	r2, sp, #4
 8006518:	6821      	ldr	r1, [r4, #0]
 800651a:	4630      	mov	r0, r6
 800651c:	f010 fcf5 	bl	8016f0a <settings_name_steq>
 8006520:	2800      	cmp	r0, #0
 8006522:	d0f1      	beq.n	8006508 <settings_parse_and_lookup+0x64>
		if (!bestmatch) {
 8006524:	2d00      	cmp	r5, #0
 8006526:	d0eb      	beq.n	8006500 <settings_parse_and_lookup+0x5c>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
 8006528:	2200      	movs	r2, #0
 800652a:	6829      	ldr	r1, [r5, #0]
 800652c:	6820      	ldr	r0, [r4, #0]
 800652e:	f010 fcec 	bl	8016f0a <settings_name_steq>
 8006532:	2800      	cmp	r0, #0
 8006534:	d0e8      	beq.n	8006508 <settings_parse_and_lookup+0x64>
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
 8006536:	b11f      	cbz	r7, 8006540 <settings_parse_and_lookup+0x9c>
				*next = tmpnext;
 8006538:	9b01      	ldr	r3, [sp, #4]
 800653a:	603b      	str	r3, [r7, #0]
			bestmatch = (struct settings_handler_static *)ch;
 800653c:	4625      	mov	r5, r4
 800653e:	e7e3      	b.n	8006508 <settings_parse_and_lookup+0x64>
 8006540:	4625      	mov	r5, r4
 8006542:	e7e1      	b.n	8006508 <settings_parse_and_lookup+0x64>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
 8006544:	461c      	mov	r4, r3
 8006546:	e7e5      	b.n	8006514 <settings_parse_and_lookup+0x70>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
 8006548:	4628      	mov	r0, r5
 800654a:	b003      	add	sp, #12
 800654c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800654e:	bf00      	nop
 8006550:	0801d658 	.word	0x0801d658
 8006554:	0801d6d0 	.word	0x0801d6d0
 8006558:	20001764 	.word	0x20001764

0800655c <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
 800655c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006560:	b085      	sub	sp, #20
 8006562:	4604      	mov	r4, r0
 8006564:	4689      	mov	r9, r1
 8006566:	4690      	mov	r8, r2
 8006568:	461f      	mov	r7, r3
 800656a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
	int rc;
	const char *name_key = name;
 800656c:	9003      	str	r0, [sp, #12]

	if (load_arg && load_arg->subtree &&
 800656e:	b135      	cbz	r5, 800657e <settings_call_set_handler+0x22>
 8006570:	6829      	ldr	r1, [r5, #0]
 8006572:	b121      	cbz	r1, 800657e <settings_call_set_handler+0x22>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
 8006574:	aa03      	add	r2, sp, #12
 8006576:	f010 fcc8 	bl	8016f0a <settings_name_steq>
	if (load_arg && load_arg->subtree &&
 800657a:	4606      	mov	r6, r0
 800657c:	b150      	cbz	r0, 8006594 <settings_call_set_handler+0x38>
		return 0;
	}

	if (load_arg && load_arg->cb) {
 800657e:	b16d      	cbz	r5, 800659c <settings_call_set_handler+0x40>
 8006580:	686e      	ldr	r6, [r5, #4]
 8006582:	b15e      	cbz	r6, 800659c <settings_call_set_handler+0x40>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
 8006584:	68ab      	ldr	r3, [r5, #8]
 8006586:	9300      	str	r3, [sp, #0]
 8006588:	463b      	mov	r3, r7
 800658a:	4642      	mov	r2, r8
 800658c:	4649      	mov	r1, r9
 800658e:	9803      	ldr	r0, [sp, #12]
 8006590:	47b0      	blx	r6
 8006592:	4606      	mov	r6, r0
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
 8006594:	4630      	mov	r0, r6
 8006596:	b005      	add	sp, #20
 8006598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ch = settings_parse_and_lookup(name, &name_key);
 800659c:	a903      	add	r1, sp, #12
 800659e:	4620      	mov	r0, r4
 80065a0:	f7ff ff80 	bl	80064a4 <settings_parse_and_lookup>
		if (!ch) {
 80065a4:	b308      	cbz	r0, 80065ea <settings_call_set_handler+0x8e>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
 80065a6:	6885      	ldr	r5, [r0, #8]
 80065a8:	463b      	mov	r3, r7
 80065aa:	4642      	mov	r2, r8
 80065ac:	4649      	mov	r1, r9
 80065ae:	9803      	ldr	r0, [sp, #12]
 80065b0:	47a8      	blx	r5
		if (rc != 0) {
 80065b2:	4606      	mov	r6, r0
 80065b4:	2800      	cmp	r0, #0
 80065b6:	d0ed      	beq.n	8006594 <settings_call_set_handler+0x38>
			LOG_ERR("set-value failure. key: %s error(%d)",
 80065b8:	f04f 0500 	mov.w	r5, #0
 80065bc:	2301      	movs	r3, #1
 80065be:	f363 0502 	bfi	r5, r3, #0, #3
 80065c2:	f36f 05c5 	bfc	r5, #3, #3
 80065c6:	4b0a      	ldr	r3, [pc, #40]	; (80065f0 <settings_call_set_handler+0x94>)
 80065c8:	4a0a      	ldr	r2, [pc, #40]	; (80065f4 <settings_call_set_handler+0x98>)
 80065ca:	1a9b      	subs	r3, r3, r2
 80065cc:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80065d0:	f363 158f 	bfi	r5, r3, #6, #10
 80065d4:	4620      	mov	r0, r4
 80065d6:	f7fd fc79 	bl	8003ecc <log_strdup>
 80065da:	4601      	mov	r1, r0
 80065dc:	462b      	mov	r3, r5
 80065de:	4632      	mov	r2, r6
 80065e0:	4805      	ldr	r0, [pc, #20]	; (80065f8 <settings_call_set_handler+0x9c>)
 80065e2:	f7fd fec3 	bl	800436c <log_2>
			rc = 0;
 80065e6:	2600      	movs	r6, #0
 80065e8:	e7d4      	b.n	8006594 <settings_call_set_handler+0x38>
			return 0;
 80065ea:	2600      	movs	r6, #0
 80065ec:	e7d2      	b.n	8006594 <settings_call_set_handler+0x38>
 80065ee:	bf00      	nop
 80065f0:	0801d768 	.word	0x0801d768
 80065f4:	0801d6d0 	.word	0x0801d6d0
 80065f8:	0801f360 	.word	0x0801f360

080065fc <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
 80065fc:	b570      	push	{r4, r5, r6, lr}
 80065fe:	4605      	mov	r5, r0
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
 8006600:	4c1b      	ldr	r4, [pc, #108]	; (8006670 <settings_commit_subtree+0x74>)
	rc = 0;
 8006602:	2600      	movs	r6, #0
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
 8006604:	e000      	b.n	8006608 <settings_commit_subtree+0xc>
 8006606:	3414      	adds	r4, #20
 8006608:	4b1a      	ldr	r3, [pc, #104]	; (8006674 <settings_commit_subtree+0x78>)
 800660a:	429c      	cmp	r4, r3
 800660c:	d20f      	bcs.n	800662e <settings_commit_subtree+0x32>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
 800660e:	b135      	cbz	r5, 800661e <settings_commit_subtree+0x22>
 8006610:	2200      	movs	r2, #0
 8006612:	4629      	mov	r1, r5
 8006614:	6820      	ldr	r0, [r4, #0]
 8006616:	f010 fc78 	bl	8016f0a <settings_name_steq>
 800661a:	2800      	cmp	r0, #0
 800661c:	d0f3      	beq.n	8006606 <settings_commit_subtree+0xa>
			continue;
		}
		if (ch->h_commit) {
 800661e:	68e3      	ldr	r3, [r4, #12]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d0f0      	beq.n	8006606 <settings_commit_subtree+0xa>
			rc2 = ch->h_commit();
 8006624:	4798      	blx	r3
			if (!rc) {
 8006626:	2e00      	cmp	r6, #0
 8006628:	d1ed      	bne.n	8006606 <settings_commit_subtree+0xa>
				rc = rc2;
 800662a:	4606      	mov	r6, r0
 800662c:	e7eb      	b.n	8006606 <settings_commit_subtree+0xa>
	return list->head;
 800662e:	4b12      	ldr	r3, [pc, #72]	; (8006678 <settings_commit_subtree+0x7c>)
 8006630:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
 8006632:	b13c      	cbz	r4, 8006644 <settings_commit_subtree+0x48>
 8006634:	3c14      	subs	r4, #20
 8006636:	e005      	b.n	8006644 <settings_commit_subtree+0x48>
Z_GENLIST_PEEK_NEXT(slist, snode)
 8006638:	f114 0314 	adds.w	r3, r4, #20
 800663c:	d013      	beq.n	8006666 <settings_commit_subtree+0x6a>
	return node->next;
 800663e:	6964      	ldr	r4, [r4, #20]
 8006640:	b104      	cbz	r4, 8006644 <settings_commit_subtree+0x48>
 8006642:	3c14      	subs	r4, #20
 8006644:	b18c      	cbz	r4, 800666a <settings_commit_subtree+0x6e>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
 8006646:	b135      	cbz	r5, 8006656 <settings_commit_subtree+0x5a>
 8006648:	2200      	movs	r2, #0
 800664a:	4629      	mov	r1, r5
 800664c:	6820      	ldr	r0, [r4, #0]
 800664e:	f010 fc5c 	bl	8016f0a <settings_name_steq>
 8006652:	2800      	cmp	r0, #0
 8006654:	d0f0      	beq.n	8006638 <settings_commit_subtree+0x3c>
			continue;
		}
		if (ch->h_commit) {
 8006656:	68e3      	ldr	r3, [r4, #12]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d0ed      	beq.n	8006638 <settings_commit_subtree+0x3c>
			rc2 = ch->h_commit();
 800665c:	4798      	blx	r3
			if (!rc) {
 800665e:	2e00      	cmp	r6, #0
 8006660:	d1ea      	bne.n	8006638 <settings_commit_subtree+0x3c>
				rc = rc2;
 8006662:	4606      	mov	r6, r0
 8006664:	e7e8      	b.n	8006638 <settings_commit_subtree+0x3c>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
 8006666:	461c      	mov	r4, r3
 8006668:	e7ec      	b.n	8006644 <settings_commit_subtree+0x48>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
 800666a:	4630      	mov	r0, r6
 800666c:	bd70      	pop	{r4, r5, r6, pc}
 800666e:	bf00      	nop
 8006670:	0801d658 	.word	0x0801d658
 8006674:	0801d6d0 	.word	0x0801d6d0
 8006678:	20001764 	.word	0x20001764

0800667c <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
 800667c:	b508      	push	{r3, lr}

	int err = 0;

	if (settings_subsys_initialized) {
 800667e:	4b07      	ldr	r3, [pc, #28]	; (800669c <settings_subsys_init+0x20>)
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	b10b      	cbz	r3, 8006688 <settings_subsys_init+0xc>
		return 0;
 8006684:	2000      	movs	r0, #0
	if (!err) {
		settings_subsys_initialized = true;
	}

	return err;
}
 8006686:	bd08      	pop	{r3, pc}
	settings_init();
 8006688:	f7ff feb6 	bl	80063f8 <settings_init>
	err = settings_backend_init(); /* func rises kernel panic once error */
 800668c:	f000 f87c 	bl	8006788 <settings_backend_init>
	if (!err) {
 8006690:	2800      	cmp	r0, #0
 8006692:	d1f8      	bne.n	8006686 <settings_subsys_init+0xa>
		settings_subsys_initialized = true;
 8006694:	4b01      	ldr	r3, [pc, #4]	; (800669c <settings_subsys_init+0x20>)
 8006696:	2201      	movs	r2, #1
 8006698:	701a      	strb	r2, [r3, #0]
 800669a:	e7f4      	b.n	8006686 <settings_subsys_init+0xa>
 800669c:	200034fc 	.word	0x200034fc

080066a0 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
 80066a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066a4:	b098      	sub	sp, #96	; 0x60
 80066a6:	4680      	mov	r8, r0
 80066a8:	4689      	mov	r9, r1
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
 80066aa:	f9b0 4038 	ldrsh.w	r4, [r0, #56]	; 0x38
 80066ae:	3401      	adds	r4, #1
 80066b0:	b2a4      	uxth	r4, r4
	int ret = 0;
 80066b2:	f04f 0a00 	mov.w	sl, #0
 80066b6:	e00f      	b.n	80066d8 <settings_nvs_load+0x38>
		 */
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
			       &buf, sizeof(buf));

		if ((rc1 <= 0) && (rc2 <= 0)) {
 80066b8:	2800      	cmp	r0, #0
 80066ba:	dc28      	bgt.n	800670e <settings_nvs_load+0x6e>
 80066bc:	e00b      	b.n	80066d6 <settings_nvs_load+0x36>
			/* Settings item is not stored correctly in the NVS.
			 * NVS entry for its name or value is either missing
			 * or deleted. Clean dirty entries to make space for
			 * future settings item.
			 */
			if (name_id == cf->last_name_id) {
 80066be:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
 80066c2:	42ab      	cmp	r3, r5
 80066c4:	d03e      	beq.n	8006744 <settings_nvs_load+0xa4>
				cf->last_name_id--;
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
					  &cf->last_name_id, sizeof(uint16_t));
			}
			nvs_delete(&cf->cf_nvs, name_id);
 80066c6:	4629      	mov	r1, r5
 80066c8:	4638      	mov	r0, r7
 80066ca:	f010 faa7 	bl	8016c1c <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
 80066ce:	4621      	mov	r1, r4
 80066d0:	4638      	mov	r0, r7
 80066d2:	f010 faa3 	bl	8016c1c <nvs_delete>
{
 80066d6:	462c      	mov	r4, r5
		name_id--;
 80066d8:	1e65      	subs	r5, r4, #1
 80066da:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
 80066dc:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 80066e0:	d02c      	beq.n	800673c <settings_nvs_load+0x9c>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
 80066e2:	f108 0708 	add.w	r7, r8, #8
 80066e6:	234a      	movs	r3, #74	; 0x4a
 80066e8:	aa03      	add	r2, sp, #12
 80066ea:	4629      	mov	r1, r5
 80066ec:	4638      	mov	r0, r7
 80066ee:	f010 fa9b 	bl	8016c28 <nvs_read>
 80066f2:	4606      	mov	r6, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
 80066f4:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
 80066f8:	343f      	adds	r4, #63	; 0x3f
 80066fa:	b2a4      	uxth	r4, r4
 80066fc:	2301      	movs	r3, #1
 80066fe:	f10d 020b 	add.w	r2, sp, #11
 8006702:	4621      	mov	r1, r4
 8006704:	4638      	mov	r0, r7
 8006706:	f010 fa8f 	bl	8016c28 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
 800670a:	2e00      	cmp	r6, #0
 800670c:	ddd4      	ble.n	80066b8 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
 800670e:	2e00      	cmp	r6, #0
 8006710:	ddd5      	ble.n	80066be <settings_nvs_load+0x1e>
 8006712:	2800      	cmp	r0, #0
 8006714:	ddd3      	ble.n	80066be <settings_nvs_load+0x1e>
			continue;
		}

		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
 8006716:	ab18      	add	r3, sp, #96	; 0x60
 8006718:	441e      	add	r6, r3
 800671a:	2300      	movs	r3, #0
 800671c:	f806 3c54 	strb.w	r3, [r6, #-84]
		read_fn_arg.fs = &cf->cf_nvs;
 8006720:	9716      	str	r7, [sp, #88]	; 0x58
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
 8006722:	f8ad 405c 	strh.w	r4, [sp, #92]	; 0x5c

		ret = settings_call_set_handler(
 8006726:	f8cd 9000 	str.w	r9, [sp]
 800672a:	ab16      	add	r3, sp, #88	; 0x58
 800672c:	4a0b      	ldr	r2, [pc, #44]	; (800675c <settings_nvs_load+0xbc>)
 800672e:	4601      	mov	r1, r0
 8006730:	a803      	add	r0, sp, #12
 8006732:	f7ff ff13 	bl	800655c <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
 8006736:	4682      	mov	sl, r0
 8006738:	2800      	cmp	r0, #0
 800673a:	d0cc      	beq.n	80066d6 <settings_nvs_load+0x36>
			break;
		}
	}
	return ret;
}
 800673c:	4650      	mov	r0, sl
 800673e:	b018      	add	sp, #96	; 0x60
 8006740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				cf->last_name_id--;
 8006744:	3b01      	subs	r3, #1
 8006746:	4642      	mov	r2, r8
 8006748:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
 800674c:	2302      	movs	r3, #2
 800674e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006752:	4638      	mov	r0, r7
 8006754:	f7fe fb6c 	bl	8004e30 <nvs_write>
 8006758:	e7b5      	b.n	80066c6 <settings_nvs_load+0x26>
 800675a:	bf00      	nop
 800675c:	08016f9b 	.word	0x08016f9b

08006760 <settings_nvs_src>:
{
 8006760:	b508      	push	{r3, lr}
	cf->cf_store.cs_itf = &settings_nvs_itf;
 8006762:	4b03      	ldr	r3, [pc, #12]	; (8006770 <settings_nvs_src+0x10>)
 8006764:	6043      	str	r3, [r0, #4]
	settings_src_register(&cf->cf_store);
 8006766:	f7ff fddb 	bl	8006320 <settings_src_register>
}
 800676a:	2000      	movs	r0, #0
 800676c:	bd08      	pop	{r3, pc}
 800676e:	bf00      	nop
 8006770:	200003d0 	.word	0x200003d0

08006774 <settings_nvs_dst>:
{
 8006774:	b508      	push	{r3, lr}
	cf->cf_store.cs_itf = &settings_nvs_itf;
 8006776:	4b03      	ldr	r3, [pc, #12]	; (8006784 <settings_nvs_dst+0x10>)
 8006778:	6043      	str	r3, [r0, #4]
	settings_dst_register(&cf->cf_store);
 800677a:	f7ff fde1 	bl	8006340 <settings_dst_register>
}
 800677e:	2000      	movs	r0, #0
 8006780:	bd08      	pop	{r3, pc}
 8006782:	bf00      	nop
 8006784:	200003d0 	.word	0x200003d0

08006788 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
 8006788:	b510      	push	{r4, lr}
 800678a:	b084      	sub	sp, #16
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
 800678c:	2301      	movs	r3, #1
 800678e:	9300      	str	r3, [sp, #0]

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
 8006790:	a903      	add	r1, sp, #12
 8006792:	2000      	movs	r0, #0
 8006794:	f7ff fd7e 	bl	8006294 <flash_area_open>
	if (rc) {
 8006798:	4603      	mov	r3, r0
 800679a:	b110      	cbz	r0, 80067a2 <settings_backend_init+0x1a>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
 800679c:	4618      	mov	r0, r3
 800679e:	b004      	add	sp, #16
 80067a0:	bd10      	pop	{r4, pc}
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
 80067a2:	aa01      	add	r2, sp, #4
 80067a4:	4669      	mov	r1, sp
 80067a6:	f7ff fd89 	bl	80062bc <flash_area_get_sectors>
 80067aa:	4603      	mov	r3, r0
	if (rc == -ENODEV) {
 80067ac:	f110 0f13 	cmn.w	r0, #19
 80067b0:	d0f4      	beq.n	800679c <settings_backend_init+0x14>
	} else if (rc != 0 && rc != -ENOMEM) {
 80067b2:	b140      	cbz	r0, 80067c6 <settings_backend_init+0x3e>
 80067b4:	f110 0f0c 	cmn.w	r0, #12
 80067b8:	d005      	beq.n	80067c6 <settings_backend_init+0x3e>
		k_panic();
 80067ba:	4040      	eors	r0, r0
 80067bc:	f380 8811 	msr	BASEPRI, r0
 80067c0:	f04f 0004 	mov.w	r0, #4
 80067c4:	df02      	svc	2
	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
 80067c6:	9c02      	ldr	r4, [sp, #8]
	if (nvs_sector_size > UINT16_MAX) {
 80067c8:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 80067cc:	d223      	bcs.n	8006816 <settings_backend_init+0x8e>
	size_t nvs_sector_size, nvs_size = 0;
 80067ce:	2200      	movs	r2, #0
	uint16_t cnt = 0;
 80067d0:	4613      	mov	r3, r2
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
 80067d2:	2b07      	cmp	r3, #7
 80067d4:	d807      	bhi.n	80067e6 <settings_backend_init+0x5e>
		nvs_size += nvs_sector_size;
 80067d6:	4422      	add	r2, r4
		if (nvs_size > fa->fa_size) {
 80067d8:	9903      	ldr	r1, [sp, #12]
 80067da:	6889      	ldr	r1, [r1, #8]
 80067dc:	4291      	cmp	r1, r2
 80067de:	d302      	bcc.n	80067e6 <settings_backend_init+0x5e>
		cnt++;
 80067e0:	3301      	adds	r3, #1
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	e7f5      	b.n	80067d2 <settings_backend_init+0x4a>
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
 80067e6:	480d      	ldr	r0, [pc, #52]	; (800681c <settings_backend_init+0x94>)
 80067e8:	8284      	strh	r4, [r0, #20]
	default_settings_nvs.cf_nvs.sector_count = cnt;
 80067ea:	82c3      	strh	r3, [r0, #22]
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
 80067ec:	9b03      	ldr	r3, [sp, #12]
 80067ee:	685a      	ldr	r2, [r3, #4]
 80067f0:	6082      	str	r2, [r0, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	63c3      	str	r3, [r0, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
 80067f6:	f010 fc7d 	bl	80170f4 <settings_nvs_backend_init>
	if (rc) {
 80067fa:	4603      	mov	r3, r0
 80067fc:	2800      	cmp	r0, #0
 80067fe:	d1cd      	bne.n	800679c <settings_backend_init+0x14>
	rc = settings_nvs_src(&default_settings_nvs);
 8006800:	4806      	ldr	r0, [pc, #24]	; (800681c <settings_backend_init+0x94>)
 8006802:	f7ff ffad 	bl	8006760 <settings_nvs_src>
	if (rc) {
 8006806:	4603      	mov	r3, r0
 8006808:	2800      	cmp	r0, #0
 800680a:	d1c7      	bne.n	800679c <settings_backend_init+0x14>
	rc = settings_nvs_dst(&default_settings_nvs);
 800680c:	4803      	ldr	r0, [pc, #12]	; (800681c <settings_backend_init+0x94>)
 800680e:	f7ff ffb1 	bl	8006774 <settings_nvs_dst>
 8006812:	4603      	mov	r3, r0
	return rc;
 8006814:	e7c2      	b.n	800679c <settings_backend_init+0x14>
		return -EDOM;
 8006816:	f06f 0324 	mvn.w	r3, #36	; 0x24
 800681a:	e7bf      	b.n	800679c <settings_backend_init+0x14>
 800681c:	2000176c 	.word	0x2000176c

08006820 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
 8006820:	b510      	push	{r4, lr}
 8006822:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
 8006824:	280a      	cmp	r0, #10
 8006826:	d007      	beq.n	8006838 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
 8006828:	4b07      	ldr	r3, [pc, #28]	; (8006848 <console_out+0x28>)
 800682a:	6818      	ldr	r0, [r3, #0]
 800682c:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
 800682e:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	4798      	blx	r3

	return c;
}
 8006834:	4620      	mov	r0, r4
 8006836:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
 8006838:	4b03      	ldr	r3, [pc, #12]	; (8006848 <console_out+0x28>)
 800683a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 800683c:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	210d      	movs	r1, #13
 8006842:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
 8006844:	e7f0      	b.n	8006828 <console_out+0x8>
 8006846:	bf00      	nop
 8006848:	200017ac 	.word	0x200017ac

0800684c <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
 800684c:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
 800684e:	4c04      	ldr	r4, [pc, #16]	; (8006860 <uart_console_hook_install+0x14>)
 8006850:	4620      	mov	r0, r4
 8006852:	f002 ff8b 	bl	800976c <__stdout_hook_install>
	__printk_hook_install(console_out);
 8006856:	4620      	mov	r0, r4
 8006858:	f7fc fbe0 	bl	800301c <__printk_hook_install>
}
 800685c:	bd10      	pop	{r4, pc}
 800685e:	bf00      	nop
 8006860:	08006821 	.word	0x08006821

08006864 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 8006864:	b508      	push	{r3, lr}
 8006866:	4804      	ldr	r0, [pc, #16]	; (8006878 <uart_console_init+0x14>)
 8006868:	f00c fe78 	bl	801355c <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 800686c:	4b03      	ldr	r3, [pc, #12]	; (800687c <uart_console_init+0x18>)
 800686e:	6018      	str	r0, [r3, #0]

	uart_console_hook_install();
 8006870:	f7ff ffec 	bl	800684c <uart_console_hook_install>

	return 0;
}
 8006874:	2000      	movs	r0, #0
 8006876:	bd08      	pop	{r3, pc}
 8006878:	0801ec88 	.word	0x0801ec88
 800687c:	200017ac 	.word	0x200017ac

08006880 <__stm32_exti_isr>:
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
{
 8006880:	b570      	push	{r4, r5, r6, lr}
 8006882:	4604      	mov	r4, r0
 8006884:	460d      	mov	r5, r1
	struct stm32_exti_data *data = dev->data;
 8006886:	68d6      	ldr	r6, [r2, #12]
	int line;

	/* see which bits are set */
	for (line = min; line < max; line++) {
 8006888:	e000      	b.n	800688c <__stm32_exti_isr+0xc>
 800688a:	3401      	adds	r4, #1
 800688c:	42ac      	cmp	r4, r5
 800688e:	da14      	bge.n	80068ba <__stm32_exti_isr+0x3a>
	if (line < 32) {
 8006890:	2c1f      	cmp	r4, #31
 8006892:	dcfa      	bgt.n	800688a <__stm32_exti_isr+0xa>
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8006894:	2301      	movs	r3, #1
 8006896:	40a3      	lsls	r3, r4
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8006898:	4a08      	ldr	r2, [pc, #32]	; (80068bc <__stm32_exti_isr+0x3c>)
 800689a:	6952      	ldr	r2, [r2, #20]
		/* check if interrupt is pending */
		if (stm32_exti_is_pending(line)) {
 800689c:	ea33 0202 	bics.w	r2, r3, r2
 80068a0:	d1f3      	bne.n	800688a <__stm32_exti_isr+0xa>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 80068a2:	4a06      	ldr	r2, [pc, #24]	; (80068bc <__stm32_exti_isr+0x3c>)
 80068a4:	6153      	str	r3, [r2, #20]
			/* clear pending interrupt */
			stm32_exti_clear_pending(line);

			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
 80068a6:	f856 3034 	ldr.w	r3, [r6, r4, lsl #3]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d0ed      	beq.n	800688a <__stm32_exti_isr+0xa>
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 80068ae:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
 80068b2:	6851      	ldr	r1, [r2, #4]
 80068b4:	4620      	mov	r0, r4
 80068b6:	4798      	blx	r3
 80068b8:	e7e7      	b.n	800688a <__stm32_exti_isr+0xa>
		}
	}
}
 80068ba:	bd70      	pop	{r4, r5, r6, pc}
 80068bc:	40010400 	.word	0x40010400

080068c0 <stm32_exti_enable>:
{
 80068c0:	b508      	push	{r3, lr}
	LL_EXTI_EnableIT_0_31(1 << line);
 80068c2:	2301      	movs	r3, #1
 80068c4:	4083      	lsls	r3, r0
  SET_BIT(EXTI->IMR, ExtiLine);
 80068c6:	4a04      	ldr	r2, [pc, #16]	; (80068d8 <stm32_exti_enable+0x18>)
 80068c8:	6811      	ldr	r1, [r2, #0]
 80068ca:	430b      	orrs	r3, r1
 80068cc:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 80068ce:	4b03      	ldr	r3, [pc, #12]	; (80068dc <stm32_exti_enable+0x1c>)
 80068d0:	5618      	ldrsb	r0, [r3, r0]
 80068d2:	f002 fa37 	bl	8008d44 <arch_irq_enable>
}
 80068d6:	bd08      	pop	{r3, pc}
 80068d8:	40010400 	.word	0x40010400
 80068dc:	0801f3a0 	.word	0x0801f3a0

080068e0 <stm32_exti_disable>:
	if (line < 32) {
 80068e0:	281f      	cmp	r0, #31
 80068e2:	dc06      	bgt.n	80068f2 <stm32_exti_disable+0x12>
		LL_EXTI_DisableIT_0_31(1 << line);
 80068e4:	2301      	movs	r3, #1
 80068e6:	4083      	lsls	r3, r0
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80068e8:	4a02      	ldr	r2, [pc, #8]	; (80068f4 <stm32_exti_disable+0x14>)
 80068ea:	6810      	ldr	r0, [r2, #0]
 80068ec:	ea20 0003 	bic.w	r0, r0, r3
 80068f0:	6010      	str	r0, [r2, #0]
}
 80068f2:	4770      	bx	lr
 80068f4:	40010400 	.word	0x40010400

080068f8 <stm32_exti_trigger>:
	switch (trigger) {
 80068f8:	2903      	cmp	r1, #3
 80068fa:	d832      	bhi.n	8006962 <stm32_exti_trigger+0x6a>
 80068fc:	e8df f001 	tbb	[pc, r1]
 8006900:	271b0f02 	.word	0x271b0f02
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 8006904:	2301      	movs	r3, #1
 8006906:	fa03 f000 	lsl.w	r0, r3, r0
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800690a:	4b16      	ldr	r3, [pc, #88]	; (8006964 <stm32_exti_trigger+0x6c>)
 800690c:	689a      	ldr	r2, [r3, #8]
 800690e:	ea22 0200 	bic.w	r2, r2, r0
 8006912:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8006914:	68da      	ldr	r2, [r3, #12]
 8006916:	ea22 0000 	bic.w	r0, r2, r0
 800691a:	60d8      	str	r0, [r3, #12]
}
 800691c:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 800691e:	2301      	movs	r3, #1
 8006920:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 8006924:	4b0f      	ldr	r3, [pc, #60]	; (8006964 <stm32_exti_trigger+0x6c>)
 8006926:	689a      	ldr	r2, [r3, #8]
 8006928:	4302      	orrs	r2, r0
 800692a:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800692c:	68da      	ldr	r2, [r3, #12]
 800692e:	ea22 0000 	bic.w	r0, r2, r0
 8006932:	60d8      	str	r0, [r3, #12]
}
 8006934:	4770      	bx	lr
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 8006936:	2301      	movs	r3, #1
 8006938:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR, ExtiLine);
 800693c:	4b09      	ldr	r3, [pc, #36]	; (8006964 <stm32_exti_trigger+0x6c>)
 800693e:	68da      	ldr	r2, [r3, #12]
 8006940:	4302      	orrs	r2, r0
 8006942:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8006944:	689a      	ldr	r2, [r3, #8]
 8006946:	ea22 0000 	bic.w	r0, r2, r0
 800694a:	6098      	str	r0, [r3, #8]
}
 800694c:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 800694e:	2301      	movs	r3, #1
 8006950:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 8006954:	4b03      	ldr	r3, [pc, #12]	; (8006964 <stm32_exti_trigger+0x6c>)
 8006956:	689a      	ldr	r2, [r3, #8]
 8006958:	4302      	orrs	r2, r0
 800695a:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800695c:	68da      	ldr	r2, [r3, #12]
 800695e:	4310      	orrs	r0, r2
 8006960:	60d8      	str	r0, [r3, #12]
}
 8006962:	4770      	bx	lr
 8006964:	40010400 	.word	0x40010400

08006968 <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_GET(exti_stm32);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 8006968:	4b07      	ldr	r3, [pc, #28]	; (8006988 <stm32_exti_set_callback+0x20>)
 800696a:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 800696e:	b93b      	cbnz	r3, 8006980 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8006970:	4b05      	ldr	r3, [pc, #20]	; (8006988 <stm32_exti_set_callback+0x20>)
 8006972:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	data->cb[line].data = arg;
 8006976:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800697a:	6042      	str	r2, [r0, #4]

	return 0;
 800697c:	2000      	movs	r0, #0
 800697e:	4770      	bx	lr
		return -EBUSY;
 8006980:	f06f 000f 	mvn.w	r0, #15
}
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	200017b0 	.word	0x200017b0

0800698c <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_GET(exti_stm32);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 800698c:	4b03      	ldr	r3, [pc, #12]	; (800699c <stm32_exti_unset_callback+0x10>)
 800698e:	2200      	movs	r2, #0
 8006990:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 8006994:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8006998:	605a      	str	r2, [r3, #4]
}
 800699a:	4770      	bx	lr
 800699c:	200017b0 	.word	0x200017b0

080069a0 <stm32_clock_control_on>:
	return clock / prescaler;
}

static inline int stm32_clock_control_on(const struct device *dev,
					 clock_control_subsys_t sub_system)
{
 80069a0:	b084      	sub	sp, #16
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 80069a2:	680b      	ldr	r3, [r1, #0]
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d011      	beq.n	80069cc <stm32_clock_control_on+0x2c>
 80069a8:	2b03      	cmp	r3, #3
 80069aa:	d01a      	beq.n	80069e2 <stm32_clock_control_on+0x42>
 80069ac:	b11b      	cbz	r3, 80069b6 <stm32_clock_control_on+0x16>
 80069ae:	f06f 0022 	mvn.w	r0, #34	; 0x22
	default:
		return -ENOTSUP;
	}

	return 0;
}
 80069b2:	b004      	add	sp, #16
 80069b4:	4770      	bx	lr
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 80069b6:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80069b8:	4a0f      	ldr	r2, [pc, #60]	; (80069f8 <stm32_clock_control_on+0x58>)
 80069ba:	6951      	ldr	r1, [r2, #20]
 80069bc:	4319      	orrs	r1, r3
 80069be:	6151      	str	r1, [r2, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80069c0:	6952      	ldr	r2, [r2, #20]
 80069c2:	4013      	ands	r3, r2
 80069c4:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80069c6:	9b01      	ldr	r3, [sp, #4]
	return 0;
 80069c8:	2000      	movs	r0, #0
}
 80069ca:	e7f2      	b.n	80069b2 <stm32_clock_control_on+0x12>
		LL_APB1_GRP1_EnableClock(pclken->enr);
 80069cc:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80069ce:	4a0a      	ldr	r2, [pc, #40]	; (80069f8 <stm32_clock_control_on+0x58>)
 80069d0:	69d1      	ldr	r1, [r2, #28]
 80069d2:	4319      	orrs	r1, r3
 80069d4:	61d1      	str	r1, [r2, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80069d6:	69d2      	ldr	r2, [r2, #28]
 80069d8:	4013      	ands	r3, r2
 80069da:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80069dc:	9b02      	ldr	r3, [sp, #8]
	return 0;
 80069de:	2000      	movs	r0, #0
}
 80069e0:	e7e7      	b.n	80069b2 <stm32_clock_control_on+0x12>
		LL_APB2_GRP1_EnableClock(pclken->enr);
 80069e2:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80069e4:	4a04      	ldr	r2, [pc, #16]	; (80069f8 <stm32_clock_control_on+0x58>)
 80069e6:	6991      	ldr	r1, [r2, #24]
 80069e8:	4319      	orrs	r1, r3
 80069ea:	6191      	str	r1, [r2, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80069ec:	6992      	ldr	r2, [r2, #24]
 80069ee:	4013      	ands	r3, r2
 80069f0:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 80069f2:	9b03      	ldr	r3, [sp, #12]
	return 0;
 80069f4:	2000      	movs	r0, #0
}
 80069f6:	e7dc      	b.n	80069b2 <stm32_clock_control_on+0x12>
 80069f8:	40021000 	.word	0x40021000

080069fc <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 80069fc:	680b      	ldr	r3, [r1, #0]
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d00d      	beq.n	8006a1e <stm32_clock_control_off+0x22>
 8006a02:	2b03      	cmp	r3, #3
 8006a04:	d013      	beq.n	8006a2e <stm32_clock_control_off+0x32>
 8006a06:	b113      	cbz	r3, 8006a0e <stm32_clock_control_off+0x12>
 8006a08:	f06f 0022 	mvn.w	r0, #34	; 0x22
	default:
		return -ENOTSUP;
	}

	return 0;
}
 8006a0c:	4770      	bx	lr
		LL_AHB1_GRP1_DisableClock(pclken->enr);
 8006a0e:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->AHBENR, Periphs);
 8006a10:	4a0b      	ldr	r2, [pc, #44]	; (8006a40 <stm32_clock_control_off+0x44>)
 8006a12:	6953      	ldr	r3, [r2, #20]
 8006a14:	ea23 0301 	bic.w	r3, r3, r1
 8006a18:	6153      	str	r3, [r2, #20]
	return 0;
 8006a1a:	2000      	movs	r0, #0
}
 8006a1c:	4770      	bx	lr
		LL_APB1_GRP1_DisableClock(pclken->enr);
 8006a1e:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8006a20:	4a07      	ldr	r2, [pc, #28]	; (8006a40 <stm32_clock_control_off+0x44>)
 8006a22:	69d3      	ldr	r3, [r2, #28]
 8006a24:	ea23 0301 	bic.w	r3, r3, r1
 8006a28:	61d3      	str	r3, [r2, #28]
	return 0;
 8006a2a:	2000      	movs	r0, #0
}
 8006a2c:	4770      	bx	lr
		LL_APB2_GRP1_DisableClock(pclken->enr);
 8006a2e:	6849      	ldr	r1, [r1, #4]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8006a30:	4a03      	ldr	r2, [pc, #12]	; (8006a40 <stm32_clock_control_off+0x44>)
 8006a32:	6993      	ldr	r3, [r2, #24]
 8006a34:	ea23 0301 	bic.w	r3, r3, r1
 8006a38:	6193      	str	r3, [r2, #24]
	return 0;
 8006a3a:	2000      	movs	r0, #0
}
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	40021000 	.word	0x40021000

08006a44 <stm32_clock_control_get_subsys_rate>:


static int stm32_clock_control_get_subsys_rate(const struct device *clock,
						clock_control_subsys_t sub_system,
						uint32_t *rate)
{
 8006a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a46:	460c      	mov	r4, r1
 8006a48:	4615      	mov	r5, r2
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 8006a4a:	4b11      	ldr	r3, [pc, #68]	; (8006a90 <stm32_clock_control_get_subsys_rate+0x4c>)
 8006a4c:	681f      	ldr	r7, [r3, #0]
	uint32_t apb1_clock = get_bus_clock(ahb_clock,
 8006a4e:	2102      	movs	r1, #2
 8006a50:	4638      	mov	r0, r7
 8006a52:	f010 fbd1 	bl	80171f8 <get_bus_clock>
 8006a56:	4606      	mov	r6, r0
				CONFIG_CLOCK_STM32_APB1_PRESCALER);
#if !defined (CONFIG_SOC_SERIES_STM32F0X) && !defined (CONFIG_SOC_SERIES_STM32G0X)
	uint32_t apb2_clock = get_bus_clock(ahb_clock,
 8006a58:	2101      	movs	r1, #1
 8006a5a:	4638      	mov	r0, r7
 8006a5c:	f010 fbcc 	bl	80171f8 <get_bus_clock>
				CONFIG_CLOCK_STM32_APB2_PRESCALER);
#endif /* CONFIG_SOC_SERIES_STM32F0X && CONFIG_SOC_SERIES_STM32G0X */

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8006a60:	6823      	ldr	r3, [r4, #0]
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d00d      	beq.n	8006a82 <stm32_clock_control_get_subsys_rate+0x3e>
 8006a66:	d804      	bhi.n	8006a72 <stm32_clock_control_get_subsys_rate+0x2e>
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d80d      	bhi.n	8006a88 <stm32_clock_control_get_subsys_rate+0x44>
	case STM32_CLOCK_BUS_AHB1:
	case STM32_CLOCK_BUS_AHB2:
#ifdef CONFIG_SOC_SERIES_STM32L0X
	case STM32_CLOCK_BUS_IOP:
#endif /* CONFIG_SOC_SERIES_STM32L0X */
		*rate = ahb_clock;
 8006a6c:	602f      	str	r7, [r5, #0]
#endif /* CONFIG_SOC_SERIES_STM32F0X && CONFIG_SOC_SERIES_STM32G0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 8006a6e:	2000      	movs	r0, #0
		break;
 8006a70:	e006      	b.n	8006a80 <stm32_clock_control_get_subsys_rate+0x3c>
	switch (pclken->bus) {
 8006a72:	2b03      	cmp	r3, #3
 8006a74:	d102      	bne.n	8006a7c <stm32_clock_control_get_subsys_rate+0x38>
		*rate = apb2_clock;
 8006a76:	6028      	str	r0, [r5, #0]
	return 0;
 8006a78:	2000      	movs	r0, #0
		break;
 8006a7a:	e001      	b.n	8006a80 <stm32_clock_control_get_subsys_rate+0x3c>
	switch (pclken->bus) {
 8006a7c:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 8006a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*rate = apb1_clock;
 8006a82:	602e      	str	r6, [r5, #0]
	return 0;
 8006a84:	2000      	movs	r0, #0
		break;
 8006a86:	e7fb      	b.n	8006a80 <stm32_clock_control_get_subsys_rate+0x3c>
	switch (pclken->bus) {
 8006a88:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8006a8c:	e7f8      	b.n	8006a80 <stm32_clock_control_get_subsys_rate+0x3c>
 8006a8e:	bf00      	nop
 8006a90:	20000590 	.word	0x20000590

08006a94 <stm32_clock_switch_to_hsi>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8006a94:	4b0f      	ldr	r3, [pc, #60]	; (8006ad4 <stm32_clock_switch_to_hsi+0x40>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 */
__unused
static void stm32_clock_switch_to_hsi(uint32_t ahb_prescaler)
{
	/* Enable HSI if not enabled */
	if (LL_RCC_HSI_IsReady() != 1) {
 8006a98:	f013 0f02 	tst.w	r3, #2
 8006a9c:	d109      	bne.n	8006ab2 <stm32_clock_switch_to_hsi+0x1e>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006a9e:	4a0d      	ldr	r2, [pc, #52]	; (8006ad4 <stm32_clock_switch_to_hsi+0x40>)
 8006aa0:	6813      	ldr	r3, [r2, #0]
 8006aa2:	f043 0301 	orr.w	r3, r3, #1
 8006aa6:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8006aa8:	4b0a      	ldr	r3, [pc, #40]	; (8006ad4 <stm32_clock_switch_to_hsi+0x40>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
		/* Enable HSI */
		LL_RCC_HSI_Enable();
		while (LL_RCC_HSI_IsReady() != 1) {
 8006aac:	f013 0f02 	tst.w	r3, #2
 8006ab0:	d0fa      	beq.n	8006aa8 <stm32_clock_switch_to_hsi+0x14>
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006ab2:	4b08      	ldr	r3, [pc, #32]	; (8006ad4 <stm32_clock_switch_to_hsi+0x40>)
 8006ab4:	685a      	ldr	r2, [r3, #4]
 8006ab6:	f022 0203 	bic.w	r2, r2, #3
 8006aba:	605a      	str	r2, [r3, #4]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006abc:	685a      	ldr	r2, [r3, #4]
 8006abe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006ac2:	4310      	orrs	r0, r2
 8006ac4:	6058      	str	r0, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006ac6:	4b03      	ldr	r3, [pc, #12]	; (8006ad4 <stm32_clock_switch_to_hsi+0x40>)
 8006ac8:	685b      	ldr	r3, [r3, #4]
	}

	/* Set HSI as SYSCLCK source */
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
	LL_RCC_SetAHBPrescaler(ahb_prescaler);
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8006aca:	f013 0f0c 	tst.w	r3, #12
 8006ace:	d1fa      	bne.n	8006ac6 <stm32_clock_switch_to_hsi+0x32>
	}
}
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	40021000 	.word	0x40021000

08006ad8 <stm32_clock_control_init>:
			 mco2_prescaler(CONFIG_CLOCK_STM32_MCO2_DIV));
#endif /* CONFIG_CLOCK_STM32_MCO2_SRC_NOCLOCK */
}

static int stm32_clock_control_init(const struct device *dev)
{
 8006ad8:	b510      	push	{r4, lr}
 8006ada:	b086      	sub	sp, #24
#endif

	ARG_UNUSED(dev);

	/* configure clock for AHB/APB buses */
	config_bus_clk_init((LL_UTILS_ClkInitTypeDef *)&s_ClkInitStruct);
 8006adc:	a803      	add	r0, sp, #12
 8006ade:	f010 fb84 	bl	80171ea <config_bus_clk_init>
#else
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
#endif /* CONFIG_SOC_SERIES_STM32WBX */

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8006ae2:	f000 f81f 	bl	8006b24 <config_enable_default_clocks>

#ifdef CONFIG_CLOCK_STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 8006ae6:	a801      	add	r0, sp, #4
 8006ae8:	f010 fb89 	bl	80171fe <config_pll_init>
	 *
	 * Don't use s_ClkInitStruct.AHBCLKDivider as the AHB
	 * prescaler here. In this configuration, that's the value to
	 * use when the SYSCLK source is the PLL, not HSI.
	 */
	stm32_clock_switch_to_hsi(LL_RCC_SYSCLK_DIV_1);
 8006aec:	2000      	movs	r0, #0
 8006aee:	f7ff ffd1 	bl	8006a94 <stm32_clock_switch_to_hsi>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006af2:	4c0a      	ldr	r4, [pc, #40]	; (8006b1c <stm32_clock_control_init+0x44>)
 8006af4:	6823      	ldr	r3, [r4, #0]
 8006af6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006afa:	6023      	str	r3, [r4, #0]
	} else {
		hse_bypass = LL_UTILS_HSEBYPASS_OFF;
	}

	/* Switch to PLL with HSE as clock source */
	LL_PLL_ConfigSystemClock_HSE(
 8006afc:	ab03      	add	r3, sp, #12
 8006afe:	aa01      	add	r2, sp, #4
 8006b00:	2100      	movs	r1, #0
 8006b02:	4807      	ldr	r0, [pc, #28]	; (8006b20 <stm32_clock_control_init+0x48>)
 8006b04:	f00c f8f8 	bl	8012cf8 <LL_PLL_ConfigSystemClock_HSE>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006b08:	6823      	ldr	r3, [r4, #0]
 8006b0a:	f023 0301 	bic.w	r3, r3, #1
 8006b0e:	6023      	str	r3, [r4, #0]
		&s_PLLInitStruct,
		&s_ClkInitStruct);

	/* Disable other clocks */
	LL_RCC_HSI_Disable();
	LL_RCC_MSI_Disable();
 8006b10:	f010 fb7b 	bl	801720a <LL_RCC_MSI_Disable>

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8006b14:	2000      	movs	r0, #0
 8006b16:	b006      	add	sp, #24
 8006b18:	bd10      	pop	{r4, pc}
 8006b1a:	bf00      	nop
 8006b1c:	40021000 	.word	0x40021000
 8006b20:	007a1200 	.word	0x007a1200

08006b24 <config_enable_default_clocks>:

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 8006b24:	b082      	sub	sp, #8
  SET_BIT(RCC->APB2ENR, Periphs);
 8006b26:	4b06      	ldr	r3, [pc, #24]	; (8006b40 <config_enable_default_clocks+0x1c>)
 8006b28:	699a      	ldr	r2, [r3, #24]
 8006b2a:	f042 0201 	orr.w	r2, r2, #1
 8006b2e:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	f003 0301 	and.w	r3, r3, #1
 8006b36:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8006b38:	9b01      	ldr	r3, [sp, #4]
	/* SYSCFG is required to remap IRQ to avoid conflicts with CAN */
	/* cf §14.1.3, RM0316 */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
#endif
#endif /* !CONFIG_SOC_SERIES_STM32F3X */
}
 8006b3a:	b002      	add	sp, #8
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	40021000 	.word	0x40021000

08006b44 <enable_port>:
 * @param clk  optional clock device
 *
 * @return 0 on success, error otherwise
 */
static int enable_port(uint32_t port, const struct device *clk)
{
 8006b44:	b510      	push	{r4, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	4604      	mov	r4, r0
	/* enable port clock */
	if (!clk) {
 8006b4a:	4608      	mov	r0, r1
 8006b4c:	b171      	cbz	r1, 8006b6c <enable_port+0x28>
		clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);
	}

	struct stm32_pclken pclken;

	pclken.bus = STM32_CLOCK_BUS_GPIO;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	9300      	str	r3, [sp, #0]
	pclken.enr = ports_enable[port];
 8006b52:	4b0a      	ldr	r3, [pc, #40]	; (8006b7c <enable_port+0x38>)
 8006b54:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006b58:	9301      	str	r3, [sp, #4]

	if (pclken.enr == STM32_PORT_NOT_AVAILABLE) {
 8006b5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b5e:	d009      	beq.n	8006b74 <enable_port+0x30>
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_on(const struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
 8006b60:	6883      	ldr	r3, [r0, #8]
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4669      	mov	r1, sp
 8006b66:	4798      	blx	r3
		return -EIO;
	}

	return clock_control_on(clk, (clock_control_subsys_t *) &pclken);
}
 8006b68:	b002      	add	sp, #8
 8006b6a:	bd10      	pop	{r4, pc}
 8006b6c:	4804      	ldr	r0, [pc, #16]	; (8006b80 <enable_port+0x3c>)
 8006b6e:	f00c fcf5 	bl	801355c <z_impl_device_get_binding>
 8006b72:	e7ec      	b.n	8006b4e <enable_port+0xa>
		return -EIO;
 8006b74:	f06f 0004 	mvn.w	r0, #4
 8006b78:	e7f6      	b.n	8006b68 <enable_port+0x24>
 8006b7a:	bf00      	nop
 8006b7c:	0801f3bc 	.word	0x0801f3bc
 8006b80:	0801f3b0 	.word	0x0801f3b0

08006b84 <stm32_setup_pins>:
 * @param pinconf  board pin configuration array
 * @param pins     array size
 */
void stm32_setup_pins(const struct pin_config *pinconf,
		      size_t pins)
{
 8006b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b86:	4605      	mov	r5, r0
 8006b88:	460e      	mov	r6, r1
 8006b8a:	4809      	ldr	r0, [pc, #36]	; (8006bb0 <stm32_setup_pins+0x2c>)
 8006b8c:	f00c fce6 	bl	801355c <z_impl_device_get_binding>
 8006b90:	4607      	mov	r7, r0
	const struct device *clk;
	int i;

	clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);

	for (i = 0; i < pins; i++) {
 8006b92:	2400      	movs	r4, #0
 8006b94:	42b4      	cmp	r4, r6
 8006b96:	d209      	bcs.n	8006bac <stm32_setup_pins+0x28>
		z_pinmux_stm32_set(pinconf[i].pin_num,
 8006b98:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8006b9c:	463a      	mov	r2, r7
 8006b9e:	6859      	ldr	r1, [r3, #4]
 8006ba0:	f815 0034 	ldrb.w	r0, [r5, r4, lsl #3]
 8006ba4:	f010 fb3e 	bl	8017224 <z_pinmux_stm32_set>
	for (i = 0; i < pins; i++) {
 8006ba8:	3401      	adds	r4, #1
 8006baa:	e7f3      	b.n	8006b94 <stm32_setup_pins+0x10>
				  pinconf[i].mode,
				  clk);
	}
}
 8006bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	0801f3b0 	.word	0x0801f3b0

08006bb4 <usb_dc_stm32_get_ep_state>:

static struct usb_dc_stm32_ep_state *usb_dc_stm32_get_ep_state(uint8_t ep)
{
	struct usb_dc_stm32_ep_state *ep_state_base;

	if (USB_EP_GET_IDX(ep) >= USB_NUM_BIDIR_ENDPOINTS) {
 8006bb4:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 8006bb8:	2b07      	cmp	r3, #7
 8006bba:	dc0b      	bgt.n	8006bd4 <usb_dc_stm32_get_ep_state+0x20>
		return NULL;
	}

	if (USB_EP_DIR_IS_OUT(ep)) {
 8006bbc:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006bc0:	d106      	bne.n	8006bd0 <usb_dc_stm32_get_ep_state+0x1c>
		ep_state_base = usb_dc_stm32_state.out_ep_state;
 8006bc2:	4a05      	ldr	r2, [pc, #20]	; (8006bd8 <usb_dc_stm32_get_ep_state+0x24>)
	} else {
		ep_state_base = usb_dc_stm32_state.in_ep_state;
	}

	return ep_state_base + USB_EP_GET_IDX(ep);
 8006bc4:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8006bc8:	232c      	movs	r3, #44	; 0x2c
 8006bca:	fb03 2000 	mla	r0, r3, r0, r2
 8006bce:	4770      	bx	lr
		ep_state_base = usb_dc_stm32_state.in_ep_state;
 8006bd0:	4a02      	ldr	r2, [pc, #8]	; (8006bdc <usb_dc_stm32_get_ep_state+0x28>)
 8006bd2:	e7f7      	b.n	8006bc4 <usb_dc_stm32_get_ep_state+0x10>
		return NULL;
 8006bd4:	2000      	movs	r0, #0
}
 8006bd6:	4770      	bx	lr
 8006bd8:	20001aa0 	.word	0x20001aa0
 8006bdc:	20001c00 	.word	0x20001c00

08006be0 <usb_dc_stm32_clock_enable>:
	usb_dc_stm32_state.status_cb(USB_DC_SOF, NULL);
}
#endif

static int usb_dc_stm32_clock_enable(void)
{
 8006be0:	b510      	push	{r4, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	4812      	ldr	r0, [pc, #72]	; (8006c30 <usb_dc_stm32_clock_enable+0x50>)
 8006be6:	f00c fcb9 	bl	801355c <z_impl_device_get_binding>
 8006bea:	4603      	mov	r3, r0
	const struct device *clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);
	struct stm32_pclken pclken = {
 8006bec:	4911      	ldr	r1, [pc, #68]	; (8006c34 <usb_dc_stm32_clock_enable+0x54>)
 8006bee:	466a      	mov	r2, sp
 8006bf0:	c903      	ldmia	r1, {r0, r1}
 8006bf2:	e882 0003 	stmia.w	r2, {r0, r1}
	const struct clock_control_driver_api *api =
 8006bf6:	6899      	ldr	r1, [r3, #8]
	return api->on(dev, sys);
 8006bf8:	680c      	ldr	r4, [r1, #0]
 8006bfa:	4611      	mov	r1, r2
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	47a0      	blx	r4
		LOG_ERR("Unable to set USB clock source to PLL.");
	}
#endif /* CONFIG_CLOCK_STM32_MSI_PLL_MODE && !CONFIG_CLOCK_STM32_SYSCLK_SRC_MSI */
#endif /* RCC_HSI48_SUPPORT / LL_RCC_USB_CLKSOURCE_NONE */

	if (clock_control_on(clk, (clock_control_subsys_t *)&pclken) != 0) {
 8006c00:	b908      	cbnz	r0, 8006c06 <usb_dc_stm32_clock_enable+0x26>
	LL_AHB1_GRP1_DisableClockLowPower(LL_AHB1_GRP1_PERIPH_OTGHSULPI);
#endif
#endif

	return 0;
}
 8006c02:	b002      	add	sp, #8
 8006c04:	bd10      	pop	{r4, pc}
		LOG_ERR("Unable to enable USB clock");
 8006c06:	f04f 0100 	mov.w	r1, #0
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	f363 0102 	bfi	r1, r3, #0, #3
 8006c10:	f36f 01c5 	bfc	r1, #3, #3
 8006c14:	4b08      	ldr	r3, [pc, #32]	; (8006c38 <usb_dc_stm32_clock_enable+0x58>)
 8006c16:	4a09      	ldr	r2, [pc, #36]	; (8006c3c <usb_dc_stm32_clock_enable+0x5c>)
 8006c18:	1a9b      	subs	r3, r3, r2
 8006c1a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8006c1e:	f363 118f 	bfi	r1, r3, #6, #10
 8006c22:	4807      	ldr	r0, [pc, #28]	; (8006c40 <usb_dc_stm32_clock_enable+0x60>)
 8006c24:	f7fd fc92 	bl	800454c <log_0>
		return -EIO;
 8006c28:	f06f 0004 	mvn.w	r0, #4
 8006c2c:	e7e9      	b.n	8006c02 <usb_dc_stm32_clock_enable+0x22>
 8006c2e:	bf00      	nop
 8006c30:	0801f3b0 	.word	0x0801f3b0
 8006c34:	0801d7d8 	.word	0x0801d7d8
 8006c38:	0801d778 	.word	0x0801d778
 8006c3c:	0801d6d0 	.word	0x0801d6d0
 8006c40:	0801f3e8 	.word	0x0801f3e8

08006c44 <usb_dc_stm32_init>:
	return speed;
}
#endif /* USB_OTG_FS || USB_OTG_HS */

static int usb_dc_stm32_init(void)
{
 8006c44:	b510      	push	{r4, lr}
	HAL_StatusTypeDef status;
	unsigned int i;

#ifdef USB
	usb_dc_stm32_state.pcd.Instance = USB;
 8006c46:	4831      	ldr	r0, [pc, #196]	; (8006d0c <usb_dc_stm32_init+0xc8>)
 8006c48:	4b31      	ldr	r3, [pc, #196]	; (8006d10 <usb_dc_stm32_init+0xcc>)
 8006c4a:	6003      	str	r3, [r0, #0]
	usb_dc_stm32_state.pcd.Init.speed = PCD_SPEED_FULL;
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	6083      	str	r3, [r0, #8]
	usb_dc_stm32_state.pcd.Init.dev_endpoints = USB_NUM_BIDIR_ENDPOINTS;
 8006c50:	2208      	movs	r2, #8
 8006c52:	6042      	str	r2, [r0, #4]
	usb_dc_stm32_state.pcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006c54:	6103      	str	r3, [r0, #16]
	usb_dc_stm32_state.pcd.Init.ep0_mps = PCD_EP0MPS_64;
 8006c56:	2300      	movs	r3, #0
 8006c58:	60c3      	str	r3, [r0, #12]
	usb_dc_stm32_state.pcd.Init.low_power_enable = 0;
 8006c5a:	6183      	str	r3, [r0, #24]
#ifdef CONFIG_USB_DEVICE_SOF
	usb_dc_stm32_state.pcd.Init.Sof_enable = 1;
#endif /* CONFIG_USB_DEVICE_SOF */

	LOG_DBG("HAL_PCD_Init");
	status = HAL_PCD_Init(&usb_dc_stm32_state.pcd);
 8006c5c:	f014 fc55 	bl	801b50a <HAL_PCD_Init>
	if (status != HAL_OK) {
 8006c60:	b990      	cbnz	r0, 8006c88 <usb_dc_stm32_init+0x44>
		LOG_ERR("PCD_Init failed, %d", (int)status);
		return -EIO;
	}

	LOG_DBG("HAL_PCD_Start");
	status = HAL_PCD_Start(&usb_dc_stm32_state.pcd);
 8006c62:	482a      	ldr	r0, [pc, #168]	; (8006d0c <usb_dc_stm32_init+0xc8>)
 8006c64:	f014 fca9 	bl	801b5ba <HAL_PCD_Start>
	if (status != HAL_OK) {
 8006c68:	4601      	mov	r1, r0
 8006c6a:	bb10      	cbnz	r0, 8006cb2 <usb_dc_stm32_init+0x6e>
		LOG_ERR("PCD_Start failed, %d", (int)status);
		return -EIO;
	}

	usb_dc_stm32_state.out_ep_state[EP0_IDX].ep_mps = EP0_MPS;
 8006c6c:	4b27      	ldr	r3, [pc, #156]	; (8006d0c <usb_dc_stm32_init+0xc8>)
 8006c6e:	2240      	movs	r2, #64	; 0x40
 8006c70:	f8a3 2270 	strh.w	r2, [r3, #624]	; 0x270
	usb_dc_stm32_state.out_ep_state[EP0_IDX].ep_type = EP_TYPE_CTRL;
 8006c74:	2400      	movs	r4, #0
 8006c76:	f883 4274 	strb.w	r4, [r3, #628]	; 0x274
	usb_dc_stm32_state.in_ep_state[EP0_IDX].ep_mps = EP0_MPS;
 8006c7a:	f8a3 23d0 	strh.w	r2, [r3, #976]	; 0x3d0
	usb_dc_stm32_state.in_ep_state[EP0_IDX].ep_type = EP_TYPE_CTRL;
 8006c7e:	f883 43d4 	strb.w	r4, [r3, #980]	; 0x3d4

#ifdef USB
	/* Start PMA configuration for the endpoints after the BTABLE. */
	usb_dc_stm32_state.pma_offset = USB_BTABLE_SIZE;
 8006c82:	f8c3 2730 	str.w	r2, [r3, #1840]	; 0x730

	for (i = 0U; i < USB_NUM_BIDIR_ENDPOINTS; i++) {
 8006c86:	e035      	b.n	8006cf4 <usb_dc_stm32_init+0xb0>
 8006c88:	4601      	mov	r1, r0
		LOG_ERR("PCD_Init failed, %d", (int)status);
 8006c8a:	f04f 0200 	mov.w	r2, #0
 8006c8e:	2301      	movs	r3, #1
 8006c90:	f363 0202 	bfi	r2, r3, #0, #3
 8006c94:	f36f 02c5 	bfc	r2, #3, #3
 8006c98:	4b1e      	ldr	r3, [pc, #120]	; (8006d14 <usb_dc_stm32_init+0xd0>)
 8006c9a:	481f      	ldr	r0, [pc, #124]	; (8006d18 <usb_dc_stm32_init+0xd4>)
 8006c9c:	1a1b      	subs	r3, r3, r0
 8006c9e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8006ca2:	f363 128f 	bfi	r2, r3, #6, #10
 8006ca6:	481d      	ldr	r0, [pc, #116]	; (8006d1c <usb_dc_stm32_init+0xd8>)
 8006ca8:	f7fd fae0 	bl	800426c <log_1>
		return -EIO;
 8006cac:	f06f 0004 	mvn.w	r0, #4
 8006cb0:	e02b      	b.n	8006d0a <usb_dc_stm32_init+0xc6>
		LOG_ERR("PCD_Start failed, %d", (int)status);
 8006cb2:	f04f 0200 	mov.w	r2, #0
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	f363 0202 	bfi	r2, r3, #0, #3
 8006cbc:	f36f 02c5 	bfc	r2, #3, #3
 8006cc0:	4b14      	ldr	r3, [pc, #80]	; (8006d14 <usb_dc_stm32_init+0xd0>)
 8006cc2:	4815      	ldr	r0, [pc, #84]	; (8006d18 <usb_dc_stm32_init+0xd4>)
 8006cc4:	1a1b      	subs	r3, r3, r0
 8006cc6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8006cca:	f363 128f 	bfi	r2, r3, #6, #10
 8006cce:	4814      	ldr	r0, [pc, #80]	; (8006d20 <usb_dc_stm32_init+0xdc>)
 8006cd0:	f7fd facc 	bl	800426c <log_1>
		return -EIO;
 8006cd4:	f06f 0004 	mvn.w	r0, #4
 8006cd8:	e017      	b.n	8006d0a <usb_dc_stm32_init+0xc6>
		k_sem_init(&usb_dc_stm32_state.in_ep_state[i].write_sem, 1, 1);
 8006cda:	202c      	movs	r0, #44	; 0x2c
 8006cdc:	fb00 f004 	mul.w	r0, r0, r4
 8006ce0:	f500 7378 	add.w	r3, r0, #992	; 0x3e0
 8006ce4:	4809      	ldr	r0, [pc, #36]	; (8006d0c <usb_dc_stm32_init+0xc8>)
 8006ce6:	4418      	add	r0, r3
 8006ce8:	3004      	adds	r0, #4
	return z_impl_k_sem_init(sem, initial_count, limit);
 8006cea:	2201      	movs	r2, #1
 8006cec:	4611      	mov	r1, r2
 8006cee:	f016 f85d 	bl	801cdac <z_impl_k_sem_init>
	for (i = 0U; i < USB_NUM_BIDIR_ENDPOINTS; i++) {
 8006cf2:	3401      	adds	r4, #1
 8006cf4:	2c07      	cmp	r4, #7
 8006cf6:	d9f0      	bls.n	8006cda <usb_dc_stm32_init+0x96>
				    FIFO_EP_WORDS);
		k_sem_init(&usb_dc_stm32_state.in_ep_state[i].write_sem, 1, 1);
	}
#endif /* USB */

	IRQ_CONNECT(USB_IRQ, USB_IRQ_PRI,
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	4611      	mov	r1, r2
 8006cfc:	204b      	movs	r0, #75	; 0x4b
 8006cfe:	f002 f845 	bl	8008d8c <z_arm_irq_priority_set>
		    usb_dc_stm32_isr, 0, 0);
	irq_enable(USB_IRQ);
 8006d02:	204b      	movs	r0, #75	; 0x4b
 8006d04:	f002 f81e 	bl	8008d44 <arch_irq_enable>
	return 0;
 8006d08:	2000      	movs	r0, #0
}
 8006d0a:	bd10      	pop	{r4, pc}
 8006d0c:	20001830 	.word	0x20001830
 8006d10:	40005c00 	.word	0x40005c00
 8006d14:	0801d778 	.word	0x0801d778
 8006d18:	0801d6d0 	.word	0x0801d6d0
 8006d1c:	0801f404 	.word	0x0801f404
 8006d20:	0801f418 	.word	0x0801f418

08006d24 <usb_dc_stm32_isr>:
{
 8006d24:	b508      	push	{r3, lr}
	HAL_PCD_IRQHandler(&usb_dc_stm32_state.pcd);
 8006d26:	4802      	ldr	r0, [pc, #8]	; (8006d30 <usb_dc_stm32_isr+0xc>)
 8006d28:	f014 fed5 	bl	801bad6 <HAL_PCD_IRQHandler>
}
 8006d2c:	bd08      	pop	{r3, pc}
 8006d2e:	bf00      	nop
 8006d30:	20001830 	.word	0x20001830

08006d34 <usb_dc_attach>:

/* Zephyr USB device controller API implementation */

int usb_dc_attach(void)
{
 8006d34:	b508      	push	{r3, lr}
  return (READ_BIT(RCC->APB2ENR, Periphs) == Periphs);
 8006d36:	4b11      	ldr	r3, [pc, #68]	; (8006d7c <usb_dc_attach+0x48>)
 8006d38:	699b      	ldr	r3, [r3, #24]
	/*
	 * STM32F302/F303: USB IRQ collides with CAN_1 IRQ (§14.1.3, RM0316)
	 * Remap IRQ by default to enable use of both IPs simultaneoulsy
	 * This should be done before calling any HAL function
	 */
	if (LL_APB2_GRP1_IsEnabledClock(LL_APB2_GRP1_PERIPH_SYSCFG)) {
 8006d3a:	f013 0f01 	tst.w	r3, #1
 8006d3e:	d008      	beq.n	8006d52 <usb_dc_attach+0x1e>
  * @rmtoll SYSCFG_CFGR1 USB_IT_RMP    LL_SYSCFG_EnableRemapIT_USB
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableRemapIT_USB(void)
{
  SET_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_USB_IT_RMP);
 8006d40:	4a0f      	ldr	r2, [pc, #60]	; (8006d80 <usb_dc_attach+0x4c>)
 8006d42:	6813      	ldr	r3, [r2, #0]
 8006d44:	f043 0320 	orr.w	r3, r3, #32
 8006d48:	6013      	str	r3, [r2, #0]
		LOG_ERR("System Configuration Controller clock is "
			"disabled. Unable to enable pin remapping.");
	}
#endif

	ret = usb_dc_stm32_clock_enable();
 8006d4a:	f7ff ff49 	bl	8006be0 <usb_dc_stm32_clock_enable>
	if (ret) {
 8006d4e:	b190      	cbz	r0, 8006d76 <usb_dc_attach+0x42>
	LL_PWR_EnableVddUSB();
#endif /* defined(LL_APB1_GRP1_PERIPH_PWR) */
#endif /* PWR_CR2_USV */

	return 0;
}
 8006d50:	bd08      	pop	{r3, pc}
		LOG_ERR("System Configuration Controller clock is "
 8006d52:	f04f 0100 	mov.w	r1, #0
 8006d56:	2301      	movs	r3, #1
 8006d58:	f363 0102 	bfi	r1, r3, #0, #3
 8006d5c:	f36f 01c5 	bfc	r1, #3, #3
 8006d60:	4b08      	ldr	r3, [pc, #32]	; (8006d84 <usb_dc_attach+0x50>)
 8006d62:	4a09      	ldr	r2, [pc, #36]	; (8006d88 <usb_dc_attach+0x54>)
 8006d64:	1a9b      	subs	r3, r3, r2
 8006d66:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8006d6a:	f363 118f 	bfi	r1, r3, #6, #10
 8006d6e:	4807      	ldr	r0, [pc, #28]	; (8006d8c <usb_dc_attach+0x58>)
 8006d70:	f7fd fbec 	bl	800454c <log_0>
 8006d74:	e7e9      	b.n	8006d4a <usb_dc_attach+0x16>
	ret = usb_dc_stm32_init();
 8006d76:	f7ff ff65 	bl	8006c44 <usb_dc_stm32_init>
	if (ret) {
 8006d7a:	e7e9      	b.n	8006d50 <usb_dc_attach+0x1c>
 8006d7c:	40021000 	.word	0x40021000
 8006d80:	40010000 	.word	0x40010000
 8006d84:	0801d778 	.word	0x0801d778
 8006d88:	0801d6d0 	.word	0x0801d6d0
 8006d8c:	0801f430 	.word	0x0801f430

08006d90 <usb_dc_set_status_callback>:

void usb_dc_set_status_callback(const usb_dc_status_callback cb)
{
	LOG_DBG("");

	usb_dc_stm32_state.status_cb = cb;
 8006d90:	4b01      	ldr	r3, [pc, #4]	; (8006d98 <usb_dc_set_status_callback+0x8>)
 8006d92:	f8c3 026c 	str.w	r0, [r3, #620]	; 0x26c
}
 8006d96:	4770      	bx	lr
 8006d98:	20001830 	.word	0x20001830

08006d9c <usb_dc_set_address>:

int usb_dc_set_address(const uint8_t addr)
{
 8006d9c:	b510      	push	{r4, lr}
 8006d9e:	4604      	mov	r4, r0
	HAL_StatusTypeDef status;

	LOG_DBG("addr %u (0x%02x)", addr, addr);

	status = HAL_PCD_SetAddress(&usb_dc_stm32_state.pcd, addr);
 8006da0:	4601      	mov	r1, r0
 8006da2:	480e      	ldr	r0, [pc, #56]	; (8006ddc <usb_dc_set_address+0x40>)
 8006da4:	f014 fc21 	bl	801b5ea <HAL_PCD_SetAddress>
	if (status != HAL_OK) {
 8006da8:	b908      	cbnz	r0, 8006dae <usb_dc_set_address+0x12>
		LOG_ERR("HAL_PCD_SetAddress failed(0x%02x), %d", addr,
			(int)status);
		return -EIO;
	}

	return 0;
 8006daa:	2000      	movs	r0, #0
}
 8006dac:	bd10      	pop	{r4, pc}
 8006dae:	4602      	mov	r2, r0
		LOG_ERR("HAL_PCD_SetAddress failed(0x%02x), %d", addr,
 8006db0:	f04f 0300 	mov.w	r3, #0
 8006db4:	2101      	movs	r1, #1
 8006db6:	f361 0302 	bfi	r3, r1, #0, #3
 8006dba:	f36f 03c5 	bfc	r3, #3, #3
 8006dbe:	4908      	ldr	r1, [pc, #32]	; (8006de0 <usb_dc_set_address+0x44>)
 8006dc0:	4808      	ldr	r0, [pc, #32]	; (8006de4 <usb_dc_set_address+0x48>)
 8006dc2:	1a09      	subs	r1, r1, r0
 8006dc4:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 8006dc8:	f361 138f 	bfi	r3, r1, #6, #10
 8006dcc:	4621      	mov	r1, r4
 8006dce:	4806      	ldr	r0, [pc, #24]	; (8006de8 <usb_dc_set_address+0x4c>)
 8006dd0:	f7fd facc 	bl	800436c <log_2>
		return -EIO;
 8006dd4:	f06f 0004 	mvn.w	r0, #4
 8006dd8:	e7e8      	b.n	8006dac <usb_dc_set_address+0x10>
 8006dda:	bf00      	nop
 8006ddc:	20001830 	.word	0x20001830
 8006de0:	0801d778 	.word	0x0801d778
 8006de4:	0801d6d0 	.word	0x0801d6d0
 8006de8:	0801f484 	.word	0x0801f484

08006dec <usb_dc_ep_start_read>:

int usb_dc_ep_start_read(uint8_t ep, uint8_t *data, uint32_t max_data_len)
{
 8006dec:	b510      	push	{r4, lr}
 8006dee:	4604      	mov	r4, r0
 8006df0:	4613      	mov	r3, r2
	HAL_StatusTypeDef status;

	LOG_DBG("ep 0x%02x, len %u", ep, max_data_len);

	/* we flush EP0_IN by doing a 0 length receive on it */
	if (!USB_EP_DIR_IS_OUT(ep) && (ep != EP0_IN || max_data_len)) {
 8006df2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006df6:	d110      	bne.n	8006e1a <usb_dc_ep_start_read+0x2e>
		LOG_ERR("invalid ep 0x%02x", ep);
		return -EINVAL;
	}

	if (max_data_len > EP_MPS) {
 8006df8:	2b40      	cmp	r3, #64	; 0x40
 8006dfa:	d900      	bls.n	8006dfe <usb_dc_ep_start_read+0x12>
		max_data_len = EP_MPS;
 8006dfc:	2340      	movs	r3, #64	; 0x40
	}

	status = HAL_PCD_EP_Receive(&usb_dc_stm32_state.pcd, ep,
				    usb_dc_stm32_state.ep_buf[USB_EP_GET_IDX(ep)],
 8006dfe:	f024 0180 	bic.w	r1, r4, #128	; 0x80
 8006e02:	481d      	ldr	r0, [pc, #116]	; (8006e78 <usb_dc_ep_start_read+0x8c>)
 8006e04:	0189      	lsls	r1, r1, #6
 8006e06:	f501 61a6 	add.w	r1, r1, #1328	; 0x530
	status = HAL_PCD_EP_Receive(&usb_dc_stm32_state.pcd, ep,
 8006e0a:	1842      	adds	r2, r0, r1
 8006e0c:	4621      	mov	r1, r4
 8006e0e:	f014 fc66 	bl	801b6de <HAL_PCD_EP_Receive>
				    max_data_len);
	if (status != HAL_OK) {
 8006e12:	4602      	mov	r2, r0
 8006e14:	b9d0      	cbnz	r0, 8006e4c <usb_dc_ep_start_read+0x60>
		LOG_ERR("HAL_PCD_EP_Receive failed(0x%02x), %d", ep,
			(int)status);
		return -EIO;
	}

	return 0;
 8006e16:	2000      	movs	r0, #0
}
 8006e18:	bd10      	pop	{r4, pc}
	if (!USB_EP_DIR_IS_OUT(ep) && (ep != EP0_IN || max_data_len)) {
 8006e1a:	2880      	cmp	r0, #128	; 0x80
 8006e1c:	d101      	bne.n	8006e22 <usb_dc_ep_start_read+0x36>
 8006e1e:	2a00      	cmp	r2, #0
 8006e20:	d0ea      	beq.n	8006df8 <usb_dc_ep_start_read+0xc>
		LOG_ERR("invalid ep 0x%02x", ep);
 8006e22:	f04f 0200 	mov.w	r2, #0
 8006e26:	2301      	movs	r3, #1
 8006e28:	f363 0202 	bfi	r2, r3, #0, #3
 8006e2c:	f36f 02c5 	bfc	r2, #3, #3
 8006e30:	4b12      	ldr	r3, [pc, #72]	; (8006e7c <usb_dc_ep_start_read+0x90>)
 8006e32:	4913      	ldr	r1, [pc, #76]	; (8006e80 <usb_dc_ep_start_read+0x94>)
 8006e34:	1a5b      	subs	r3, r3, r1
 8006e36:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8006e3a:	f363 128f 	bfi	r2, r3, #6, #10
 8006e3e:	4621      	mov	r1, r4
 8006e40:	4810      	ldr	r0, [pc, #64]	; (8006e84 <usb_dc_ep_start_read+0x98>)
 8006e42:	f7fd fa13 	bl	800426c <log_1>
		return -EINVAL;
 8006e46:	f06f 0015 	mvn.w	r0, #21
 8006e4a:	e7e5      	b.n	8006e18 <usb_dc_ep_start_read+0x2c>
		LOG_ERR("HAL_PCD_EP_Receive failed(0x%02x), %d", ep,
 8006e4c:	f04f 0300 	mov.w	r3, #0
 8006e50:	2101      	movs	r1, #1
 8006e52:	f361 0302 	bfi	r3, r1, #0, #3
 8006e56:	f36f 03c5 	bfc	r3, #3, #3
 8006e5a:	4908      	ldr	r1, [pc, #32]	; (8006e7c <usb_dc_ep_start_read+0x90>)
 8006e5c:	4808      	ldr	r0, [pc, #32]	; (8006e80 <usb_dc_ep_start_read+0x94>)
 8006e5e:	1a09      	subs	r1, r1, r0
 8006e60:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 8006e64:	f361 138f 	bfi	r3, r1, #6, #10
 8006e68:	4621      	mov	r1, r4
 8006e6a:	4807      	ldr	r0, [pc, #28]	; (8006e88 <usb_dc_ep_start_read+0x9c>)
 8006e6c:	f7fd fa7e 	bl	800436c <log_2>
		return -EIO;
 8006e70:	f06f 0004 	mvn.w	r0, #4
 8006e74:	e7d0      	b.n	8006e18 <usb_dc_ep_start_read+0x2c>
 8006e76:	bf00      	nop
 8006e78:	20001830 	.word	0x20001830
 8006e7c:	0801d778 	.word	0x0801d778
 8006e80:	0801d6d0 	.word	0x0801d6d0
 8006e84:	0801f4ac 	.word	0x0801f4ac
 8006e88:	0801f4c0 	.word	0x0801f4c0

08006e8c <usb_dc_ep_get_read_count>:

int usb_dc_ep_get_read_count(uint8_t ep, uint32_t *read_bytes)
{
 8006e8c:	b510      	push	{r4, lr}
	if (!USB_EP_DIR_IS_OUT(ep) || !read_bytes) {
 8006e8e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006e92:	d108      	bne.n	8006ea6 <usb_dc_ep_get_read_count+0x1a>
 8006e94:	460c      	mov	r4, r1
 8006e96:	b131      	cbz	r1, 8006ea6 <usb_dc_ep_get_read_count+0x1a>
		LOG_ERR("invalid ep 0x%02x", ep);
		return -EINVAL;
	}

	*read_bytes = HAL_PCD_EP_GetRxCount(&usb_dc_stm32_state.pcd, ep);
 8006e98:	4601      	mov	r1, r0
 8006e9a:	480d      	ldr	r0, [pc, #52]	; (8006ed0 <usb_dc_ep_get_read_count+0x44>)
 8006e9c:	f014 fc3f 	bl	801b71e <HAL_PCD_EP_GetRxCount>
 8006ea0:	6020      	str	r0, [r4, #0]

	return 0;
 8006ea2:	2000      	movs	r0, #0
}
 8006ea4:	bd10      	pop	{r4, pc}
		LOG_ERR("invalid ep 0x%02x", ep);
 8006ea6:	f04f 0200 	mov.w	r2, #0
 8006eaa:	2301      	movs	r3, #1
 8006eac:	f363 0202 	bfi	r2, r3, #0, #3
 8006eb0:	f36f 02c5 	bfc	r2, #3, #3
 8006eb4:	4b07      	ldr	r3, [pc, #28]	; (8006ed4 <usb_dc_ep_get_read_count+0x48>)
 8006eb6:	4908      	ldr	r1, [pc, #32]	; (8006ed8 <usb_dc_ep_get_read_count+0x4c>)
 8006eb8:	1a5b      	subs	r3, r3, r1
 8006eba:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8006ebe:	f363 128f 	bfi	r2, r3, #6, #10
 8006ec2:	4601      	mov	r1, r0
 8006ec4:	4805      	ldr	r0, [pc, #20]	; (8006edc <usb_dc_ep_get_read_count+0x50>)
 8006ec6:	f7fd f9d1 	bl	800426c <log_1>
		return -EINVAL;
 8006eca:	f06f 0015 	mvn.w	r0, #21
 8006ece:	e7e9      	b.n	8006ea4 <usb_dc_ep_get_read_count+0x18>
 8006ed0:	20001830 	.word	0x20001830
 8006ed4:	0801d778 	.word	0x0801d778
 8006ed8:	0801d6d0 	.word	0x0801d6d0
 8006edc:	0801f4ac 	.word	0x0801f4ac

08006ee0 <usb_dc_ep_check_cap>:

int usb_dc_ep_check_cap(const struct usb_dc_ep_cfg_data * const cfg)
{
 8006ee0:	b508      	push	{r3, lr}
	uint8_t ep_idx = USB_EP_GET_IDX(cfg->ep_addr);
 8006ee2:	7803      	ldrb	r3, [r0, #0]

	LOG_DBG("ep %x, mps %d, type %d", cfg->ep_addr, cfg->ep_mps,
		cfg->ep_type);

	if ((cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
 8006ee4:	7902      	ldrb	r2, [r0, #4]
 8006ee6:	b912      	cbnz	r2, 8006eee <usb_dc_ep_check_cap+0xe>
 8006ee8:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8006eec:	b921      	cbnz	r1, 8006ef8 <usb_dc_ep_check_cap+0x18>
		LOG_ERR("invalid endpoint configuration");
		return -1;
	}

	if (ep_idx > (USB_NUM_BIDIR_ENDPOINTS - 1)) {
 8006eee:	f013 0f78 	tst.w	r3, #120	; 0x78
 8006ef2:	d115      	bne.n	8006f20 <usb_dc_ep_check_cap+0x40>
		LOG_ERR("endpoint index/address out of range");
		return -1;
	}

	return 0;
 8006ef4:	2000      	movs	r0, #0
}
 8006ef6:	bd08      	pop	{r3, pc}
		LOG_ERR("invalid endpoint configuration");
 8006ef8:	f04f 0100 	mov.w	r1, #0
 8006efc:	2301      	movs	r3, #1
 8006efe:	f363 0102 	bfi	r1, r3, #0, #3
 8006f02:	f36f 01c5 	bfc	r1, #3, #3
 8006f06:	4b10      	ldr	r3, [pc, #64]	; (8006f48 <usb_dc_ep_check_cap+0x68>)
 8006f08:	4a10      	ldr	r2, [pc, #64]	; (8006f4c <usb_dc_ep_check_cap+0x6c>)
 8006f0a:	1a9b      	subs	r3, r3, r2
 8006f0c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8006f10:	f363 118f 	bfi	r1, r3, #6, #10
 8006f14:	480e      	ldr	r0, [pc, #56]	; (8006f50 <usb_dc_ep_check_cap+0x70>)
 8006f16:	f7fd fb19 	bl	800454c <log_0>
		return -1;
 8006f1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f1e:	e7ea      	b.n	8006ef6 <usb_dc_ep_check_cap+0x16>
		LOG_ERR("endpoint index/address out of range");
 8006f20:	f04f 0100 	mov.w	r1, #0
 8006f24:	2301      	movs	r3, #1
 8006f26:	f363 0102 	bfi	r1, r3, #0, #3
 8006f2a:	f36f 01c5 	bfc	r1, #3, #3
 8006f2e:	4b06      	ldr	r3, [pc, #24]	; (8006f48 <usb_dc_ep_check_cap+0x68>)
 8006f30:	4a06      	ldr	r2, [pc, #24]	; (8006f4c <usb_dc_ep_check_cap+0x6c>)
 8006f32:	1a9b      	subs	r3, r3, r2
 8006f34:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8006f38:	f363 118f 	bfi	r1, r3, #6, #10
 8006f3c:	4805      	ldr	r0, [pc, #20]	; (8006f54 <usb_dc_ep_check_cap+0x74>)
 8006f3e:	f7fd fb05 	bl	800454c <log_0>
		return -1;
 8006f42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f46:	e7d6      	b.n	8006ef6 <usb_dc_ep_check_cap+0x16>
 8006f48:	0801d778 	.word	0x0801d778
 8006f4c:	0801d6d0 	.word	0x0801d6d0
 8006f50:	0801f4e8 	.word	0x0801f4e8
 8006f54:	0801f508 	.word	0x0801f508

08006f58 <usb_dc_ep_configure>:

int usb_dc_ep_configure(const struct usb_dc_ep_cfg_data * const ep_cfg)
{
 8006f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5a:	4604      	mov	r4, r0
	uint8_t ep = ep_cfg->ep_addr;
 8006f5c:	7805      	ldrb	r5, [r0, #0]
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 8006f5e:	4628      	mov	r0, r5
 8006f60:	f7ff fe28 	bl	8006bb4 <usb_dc_stm32_get_ep_state>

	LOG_DBG("ep 0x%02x, previous ep_mps %u, ep_mps %u, ep_type %u",
		ep_cfg->ep_addr, ep_state->ep_mps, ep_cfg->ep_mps,
		ep_cfg->ep_type);

	if (!ep_state) {
 8006f64:	b380      	cbz	r0, 8006fc8 <usb_dc_ep_configure+0x70>
 8006f66:	4606      	mov	r6, r0
		return -EINVAL;
	}

#ifdef USB
	if (ep_cfg->ep_mps > ep_state->ep_pma_buf_len) {
 8006f68:	8862      	ldrh	r2, [r4, #2]
 8006f6a:	8843      	ldrh	r3, [r0, #2]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d913      	bls.n	8006f98 <usb_dc_ep_configure+0x40>
		if (USB_RAM_SIZE <=
		    (usb_dc_stm32_state.pma_offset + ep_cfg->ep_mps)) {
 8006f70:	4b1a      	ldr	r3, [pc, #104]	; (8006fdc <usb_dc_ep_configure+0x84>)
 8006f72:	f8d3 3730 	ldr.w	r3, [r3, #1840]	; 0x730
 8006f76:	441a      	add	r2, r3
		if (USB_RAM_SIZE <=
 8006f78:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8006f7c:	d227      	bcs.n	8006fce <usb_dc_ep_configure+0x76>
			return -EINVAL;
		}
		HAL_PCDEx_PMAConfig(&usb_dc_stm32_state.pcd, ep, PCD_SNG_BUF,
 8006f7e:	4f17      	ldr	r7, [pc, #92]	; (8006fdc <usb_dc_ep_configure+0x84>)
 8006f80:	2200      	movs	r2, #0
 8006f82:	4629      	mov	r1, r5
 8006f84:	4638      	mov	r0, r7
 8006f86:	f014 fec4 	bl	801bd12 <HAL_PCDEx_PMAConfig>
				    usb_dc_stm32_state.pma_offset);
		ep_state->ep_pma_buf_len = ep_cfg->ep_mps;
 8006f8a:	8862      	ldrh	r2, [r4, #2]
 8006f8c:	8072      	strh	r2, [r6, #2]
		usb_dc_stm32_state.pma_offset += ep_cfg->ep_mps;
 8006f8e:	f8d7 3730 	ldr.w	r3, [r7, #1840]	; 0x730
 8006f92:	4413      	add	r3, r2
 8006f94:	f8c7 3730 	str.w	r3, [r7, #1840]	; 0x730
	}
#endif
	ep_state->ep_mps = ep_cfg->ep_mps;
 8006f98:	8863      	ldrh	r3, [r4, #2]
 8006f9a:	8033      	strh	r3, [r6, #0]

	switch (ep_cfg->ep_type) {
 8006f9c:	7923      	ldrb	r3, [r4, #4]
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	d818      	bhi.n	8006fd4 <usb_dc_ep_configure+0x7c>
 8006fa2:	e8df f003 	tbb	[pc, r3]
 8006fa6:	0502      	.short	0x0502
 8006fa8:	0d09      	.short	0x0d09
	case USB_DC_EP_CONTROL:
		ep_state->ep_type = EP_TYPE_CTRL;
 8006faa:	2000      	movs	r0, #0
 8006fac:	7130      	strb	r0, [r6, #4]
	default:
		return -EINVAL;
	}

	return 0;
}
 8006fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ep_state->ep_type = EP_TYPE_ISOC;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	7133      	strb	r3, [r6, #4]
	return 0;
 8006fb4:	2000      	movs	r0, #0
		break;
 8006fb6:	e7fa      	b.n	8006fae <usb_dc_ep_configure+0x56>
		ep_state->ep_type = EP_TYPE_BULK;
 8006fb8:	2302      	movs	r3, #2
 8006fba:	7133      	strb	r3, [r6, #4]
	return 0;
 8006fbc:	2000      	movs	r0, #0
		break;
 8006fbe:	e7f6      	b.n	8006fae <usb_dc_ep_configure+0x56>
		ep_state->ep_type = EP_TYPE_INTR;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	7133      	strb	r3, [r6, #4]
	return 0;
 8006fc4:	2000      	movs	r0, #0
		break;
 8006fc6:	e7f2      	b.n	8006fae <usb_dc_ep_configure+0x56>
		return -EINVAL;
 8006fc8:	f06f 0015 	mvn.w	r0, #21
 8006fcc:	e7ef      	b.n	8006fae <usb_dc_ep_configure+0x56>
			return -EINVAL;
 8006fce:	f06f 0015 	mvn.w	r0, #21
 8006fd2:	e7ec      	b.n	8006fae <usb_dc_ep_configure+0x56>
	switch (ep_cfg->ep_type) {
 8006fd4:	f06f 0015 	mvn.w	r0, #21
 8006fd8:	e7e9      	b.n	8006fae <usb_dc_ep_configure+0x56>
 8006fda:	bf00      	nop
 8006fdc:	20001830 	.word	0x20001830

08006fe0 <usb_dc_ep_set_stall>:

int usb_dc_ep_set_stall(const uint8_t ep)
{
 8006fe0:	b538      	push	{r3, r4, r5, lr}
 8006fe2:	4604      	mov	r4, r0
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 8006fe4:	f7ff fde6 	bl	8006bb4 <usb_dc_stm32_get_ep_state>
	HAL_StatusTypeDef status;

	LOG_DBG("ep 0x%02x", ep);

	if (!ep_state) {
 8006fe8:	b1f8      	cbz	r0, 800702a <usb_dc_ep_set_stall+0x4a>
 8006fea:	4605      	mov	r5, r0
		return -EINVAL;
	}

	status = HAL_PCD_EP_SetStall(&usb_dc_stm32_state.pcd, ep);
 8006fec:	4621      	mov	r1, r4
 8006fee:	4810      	ldr	r0, [pc, #64]	; (8007030 <usb_dc_ep_set_stall+0x50>)
 8006ff0:	f014 fe21 	bl	801bc36 <HAL_PCD_EP_SetStall>
	if (status != HAL_OK) {
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	b918      	cbnz	r0, 8007000 <usb_dc_ep_set_stall+0x20>
		LOG_ERR("HAL_PCD_EP_SetStall failed(0x%02x), %d", ep,
			(int)status);
		return -EIO;
	}

	ep_state->ep_stalled = 1U;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	716b      	strb	r3, [r5, #5]

	return 0;
 8006ffc:	2000      	movs	r0, #0
}
 8006ffe:	bd38      	pop	{r3, r4, r5, pc}
		LOG_ERR("HAL_PCD_EP_SetStall failed(0x%02x), %d", ep,
 8007000:	f04f 0300 	mov.w	r3, #0
 8007004:	2101      	movs	r1, #1
 8007006:	f361 0302 	bfi	r3, r1, #0, #3
 800700a:	f36f 03c5 	bfc	r3, #3, #3
 800700e:	4909      	ldr	r1, [pc, #36]	; (8007034 <usb_dc_ep_set_stall+0x54>)
 8007010:	4809      	ldr	r0, [pc, #36]	; (8007038 <usb_dc_ep_set_stall+0x58>)
 8007012:	1a09      	subs	r1, r1, r0
 8007014:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 8007018:	f361 138f 	bfi	r3, r1, #6, #10
 800701c:	4621      	mov	r1, r4
 800701e:	4807      	ldr	r0, [pc, #28]	; (800703c <usb_dc_ep_set_stall+0x5c>)
 8007020:	f7fd f9a4 	bl	800436c <log_2>
		return -EIO;
 8007024:	f06f 0004 	mvn.w	r0, #4
 8007028:	e7e9      	b.n	8006ffe <usb_dc_ep_set_stall+0x1e>
		return -EINVAL;
 800702a:	f06f 0015 	mvn.w	r0, #21
 800702e:	e7e6      	b.n	8006ffe <usb_dc_ep_set_stall+0x1e>
 8007030:	20001830 	.word	0x20001830
 8007034:	0801d778 	.word	0x0801d778
 8007038:	0801d6d0 	.word	0x0801d6d0
 800703c:	0801f52c 	.word	0x0801f52c

08007040 <usb_dc_ep_clear_stall>:

int usb_dc_ep_clear_stall(const uint8_t ep)
{
 8007040:	b538      	push	{r3, r4, r5, lr}
 8007042:	4605      	mov	r5, r0
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 8007044:	f7ff fdb6 	bl	8006bb4 <usb_dc_stm32_get_ep_state>
	HAL_StatusTypeDef status;

	LOG_DBG("ep 0x%02x", ep);

	if (!ep_state) {
 8007048:	b1f8      	cbz	r0, 800708a <usb_dc_ep_clear_stall+0x4a>
 800704a:	4604      	mov	r4, r0
		return -EINVAL;
	}

	status = HAL_PCD_EP_ClrStall(&usb_dc_stm32_state.pcd, ep);
 800704c:	4629      	mov	r1, r5
 800704e:	4810      	ldr	r0, [pc, #64]	; (8007090 <usb_dc_ep_clear_stall+0x50>)
 8007050:	f014 fe28 	bl	801bca4 <HAL_PCD_EP_ClrStall>
	if (status != HAL_OK) {
 8007054:	4602      	mov	r2, r0
 8007056:	b918      	cbnz	r0, 8007060 <usb_dc_ep_clear_stall+0x20>
		LOG_ERR("HAL_PCD_EP_ClrStall failed(0x%02x), %d", ep,
			(int)status);
		return -EIO;
	}

	ep_state->ep_stalled = 0U;
 8007058:	2000      	movs	r0, #0
 800705a:	7160      	strb	r0, [r4, #5]
	ep_state->read_count = 0U;
 800705c:	60e0      	str	r0, [r4, #12]

	return 0;
}
 800705e:	bd38      	pop	{r3, r4, r5, pc}
		LOG_ERR("HAL_PCD_EP_ClrStall failed(0x%02x), %d", ep,
 8007060:	f04f 0300 	mov.w	r3, #0
 8007064:	2101      	movs	r1, #1
 8007066:	f361 0302 	bfi	r3, r1, #0, #3
 800706a:	f36f 03c5 	bfc	r3, #3, #3
 800706e:	4909      	ldr	r1, [pc, #36]	; (8007094 <usb_dc_ep_clear_stall+0x54>)
 8007070:	4809      	ldr	r0, [pc, #36]	; (8007098 <usb_dc_ep_clear_stall+0x58>)
 8007072:	1a09      	subs	r1, r1, r0
 8007074:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 8007078:	f361 138f 	bfi	r3, r1, #6, #10
 800707c:	4629      	mov	r1, r5
 800707e:	4807      	ldr	r0, [pc, #28]	; (800709c <usb_dc_ep_clear_stall+0x5c>)
 8007080:	f7fd f974 	bl	800436c <log_2>
		return -EIO;
 8007084:	f06f 0004 	mvn.w	r0, #4
 8007088:	e7e9      	b.n	800705e <usb_dc_ep_clear_stall+0x1e>
		return -EINVAL;
 800708a:	f06f 0015 	mvn.w	r0, #21
 800708e:	e7e6      	b.n	800705e <usb_dc_ep_clear_stall+0x1e>
 8007090:	20001830 	.word	0x20001830
 8007094:	0801d778 	.word	0x0801d778
 8007098:	0801d6d0 	.word	0x0801d6d0
 800709c:	0801f554 	.word	0x0801f554

080070a0 <usb_dc_ep_enable>:

	return 0;
}

int usb_dc_ep_enable(const uint8_t ep)
{
 80070a0:	b510      	push	{r4, lr}
 80070a2:	4604      	mov	r4, r0
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 80070a4:	f7ff fd86 	bl	8006bb4 <usb_dc_stm32_get_ep_state>
	HAL_StatusTypeDef status;

	LOG_DBG("ep 0x%02x", ep);

	if (!ep_state) {
 80070a8:	b368      	cbz	r0, 8007106 <usb_dc_ep_enable+0x66>
	}

	LOG_DBG("HAL_PCD_EP_Open(0x%02x, %u, %u)", ep, ep_state->ep_mps,
		ep_state->ep_type);

	status = HAL_PCD_EP_Open(&usb_dc_stm32_state.pcd, ep,
 80070aa:	7903      	ldrb	r3, [r0, #4]
 80070ac:	8802      	ldrh	r2, [r0, #0]
 80070ae:	4621      	mov	r1, r4
 80070b0:	4816      	ldr	r0, [pc, #88]	; (800710c <usb_dc_ep_enable+0x6c>)
 80070b2:	f014 faae 	bl	801b612 <HAL_PCD_EP_Open>
				 ep_state->ep_mps, ep_state->ep_type);
	if (status != HAL_OK) {
 80070b6:	4602      	mov	r2, r0
 80070b8:	b920      	cbnz	r0, 80070c4 <usb_dc_ep_enable+0x24>
		LOG_ERR("HAL_PCD_EP_Open failed(0x%02x), %d", ep,
			(int)status);
		return -EIO;
	}

	if (USB_EP_DIR_IS_OUT(ep) && ep != EP0_OUT) {
 80070ba:	b263      	sxtb	r3, r4
 80070bc:	2b00      	cmp	r3, #0
 80070be:	dc16      	bgt.n	80070ee <usb_dc_ep_enable+0x4e>
		return usb_dc_ep_start_read(ep,
					  usb_dc_stm32_state.ep_buf[USB_EP_GET_IDX(ep)],
					  EP_MPS);
	}

	return 0;
 80070c0:	2000      	movs	r0, #0
}
 80070c2:	bd10      	pop	{r4, pc}
		LOG_ERR("HAL_PCD_EP_Open failed(0x%02x), %d", ep,
 80070c4:	f04f 0300 	mov.w	r3, #0
 80070c8:	2101      	movs	r1, #1
 80070ca:	f361 0302 	bfi	r3, r1, #0, #3
 80070ce:	f36f 03c5 	bfc	r3, #3, #3
 80070d2:	490f      	ldr	r1, [pc, #60]	; (8007110 <usb_dc_ep_enable+0x70>)
 80070d4:	480f      	ldr	r0, [pc, #60]	; (8007114 <usb_dc_ep_enable+0x74>)
 80070d6:	1a09      	subs	r1, r1, r0
 80070d8:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 80070dc:	f361 138f 	bfi	r3, r1, #6, #10
 80070e0:	4621      	mov	r1, r4
 80070e2:	480d      	ldr	r0, [pc, #52]	; (8007118 <usb_dc_ep_enable+0x78>)
 80070e4:	f7fd f942 	bl	800436c <log_2>
		return -EIO;
 80070e8:	f06f 0004 	mvn.w	r0, #4
 80070ec:	e7e9      	b.n	80070c2 <usb_dc_ep_enable+0x22>
					  usb_dc_stm32_state.ep_buf[USB_EP_GET_IDX(ep)],
 80070ee:	f024 0380 	bic.w	r3, r4, #128	; 0x80
 80070f2:	019b      	lsls	r3, r3, #6
 80070f4:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
		return usb_dc_ep_start_read(ep,
 80070f8:	2240      	movs	r2, #64	; 0x40
 80070fa:	4904      	ldr	r1, [pc, #16]	; (800710c <usb_dc_ep_enable+0x6c>)
 80070fc:	4419      	add	r1, r3
 80070fe:	4620      	mov	r0, r4
 8007100:	f7ff fe74 	bl	8006dec <usb_dc_ep_start_read>
 8007104:	e7dd      	b.n	80070c2 <usb_dc_ep_enable+0x22>
		return -EINVAL;
 8007106:	f06f 0015 	mvn.w	r0, #21
 800710a:	e7da      	b.n	80070c2 <usb_dc_ep_enable+0x22>
 800710c:	20001830 	.word	0x20001830
 8007110:	0801d778 	.word	0x0801d778
 8007114:	0801d6d0 	.word	0x0801d6d0
 8007118:	0801f57c 	.word	0x0801f57c

0800711c <usb_dc_ep_disable>:

int usb_dc_ep_disable(const uint8_t ep)
{
 800711c:	b510      	push	{r4, lr}
 800711e:	4604      	mov	r4, r0
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 8007120:	f7ff fd48 	bl	8006bb4 <usb_dc_stm32_get_ep_state>
	HAL_StatusTypeDef status;

	LOG_DBG("ep 0x%02x", ep);

	if (!ep_state) {
 8007124:	b1e0      	cbz	r0, 8007160 <usb_dc_ep_disable+0x44>
		return -EINVAL;
	}

	status = HAL_PCD_EP_Close(&usb_dc_stm32_state.pcd, ep);
 8007126:	4621      	mov	r1, r4
 8007128:	480f      	ldr	r0, [pc, #60]	; (8007168 <usb_dc_ep_disable+0x4c>)
 800712a:	f014 faaa 	bl	801b682 <HAL_PCD_EP_Close>
	if (status != HAL_OK) {
 800712e:	4602      	mov	r2, r0
 8007130:	b908      	cbnz	r0, 8007136 <usb_dc_ep_disable+0x1a>
		LOG_ERR("HAL_PCD_EP_Close failed(0x%02x), %d", ep,
			(int)status);
		return -EIO;
	}

	return 0;
 8007132:	2000      	movs	r0, #0
}
 8007134:	bd10      	pop	{r4, pc}
		LOG_ERR("HAL_PCD_EP_Close failed(0x%02x), %d", ep,
 8007136:	f04f 0300 	mov.w	r3, #0
 800713a:	2101      	movs	r1, #1
 800713c:	f361 0302 	bfi	r3, r1, #0, #3
 8007140:	f36f 03c5 	bfc	r3, #3, #3
 8007144:	4909      	ldr	r1, [pc, #36]	; (800716c <usb_dc_ep_disable+0x50>)
 8007146:	480a      	ldr	r0, [pc, #40]	; (8007170 <usb_dc_ep_disable+0x54>)
 8007148:	1a09      	subs	r1, r1, r0
 800714a:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 800714e:	f361 138f 	bfi	r3, r1, #6, #10
 8007152:	4621      	mov	r1, r4
 8007154:	4807      	ldr	r0, [pc, #28]	; (8007174 <usb_dc_ep_disable+0x58>)
 8007156:	f7fd f909 	bl	800436c <log_2>
		return -EIO;
 800715a:	f06f 0004 	mvn.w	r0, #4
 800715e:	e7e9      	b.n	8007134 <usb_dc_ep_disable+0x18>
		return -EINVAL;
 8007160:	f06f 0015 	mvn.w	r0, #21
 8007164:	e7e6      	b.n	8007134 <usb_dc_ep_disable+0x18>
 8007166:	bf00      	nop
 8007168:	20001830 	.word	0x20001830
 800716c:	0801d778 	.word	0x0801d778
 8007170:	0801d6d0 	.word	0x0801d6d0
 8007174:	0801f5a0 	.word	0x0801f5a0

08007178 <usb_dc_ep_write>:

int usb_dc_ep_write(const uint8_t ep, const uint8_t *const data,
		    const uint32_t data_len, uint32_t * const ret_bytes)
{
 8007178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800717c:	4604      	mov	r4, r0
 800717e:	460f      	mov	r7, r1
 8007180:	4615      	mov	r5, r2
 8007182:	4698      	mov	r8, r3
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 8007184:	f7ff fd16 	bl	8006bb4 <usb_dc_stm32_get_ep_state>
	uint32_t len = data_len;
	int ret = 0;

	LOG_DBG("ep 0x%02x, len %u", ep, data_len);

	if (!ep_state || !USB_EP_DIR_IS_IN(ep)) {
 8007188:	b360      	cbz	r0, 80071e4 <usb_dc_ep_write+0x6c>
 800718a:	4606      	mov	r6, r0
 800718c:	f014 0f80 	tst.w	r4, #128	; 0x80
 8007190:	d028      	beq.n	80071e4 <usb_dc_ep_write+0x6c>
		LOG_ERR("invalid ep 0x%02x", ep);
		return -EINVAL;
	}

	ret = k_sem_take(&ep_state->write_sem, K_NO_WAIT);
 8007192:	3614      	adds	r6, #20
	return z_impl_k_sem_take(sem, timeout);
 8007194:	2200      	movs	r2, #0
 8007196:	2300      	movs	r3, #0
 8007198:	4630      	mov	r0, r6
 800719a:	f00d f971 	bl	8014480 <z_impl_k_sem_take>
	if (ret) {
 800719e:	4681      	mov	r9, r0
 80071a0:	2800      	cmp	r0, #0
 80071a2:	d134      	bne.n	800720e <usb_dc_ep_write+0x96>
		LOG_ERR("Unable to get write lock (%d)", ret);
		return -EAGAIN;
	}

	if (!k_is_in_isr()) {
 80071a4:	f015 fe1a 	bl	801cddc <k_is_in_isr>
 80071a8:	2800      	cmp	r0, #0
 80071aa:	d045      	beq.n	8007238 <usb_dc_ep_write+0xc0>
		irq_disable(USB_IRQ);
	}

	if (ep == EP0_IN && len > USB_MAX_CTRL_MPS) {
 80071ac:	2c80      	cmp	r4, #128	; 0x80
 80071ae:	d047      	beq.n	8007240 <usb_dc_ep_write+0xc8>
		len = USB_MAX_CTRL_MPS;
	}

	status = HAL_PCD_EP_Transmit(&usb_dc_stm32_state.pcd, ep,
 80071b0:	462b      	mov	r3, r5
 80071b2:	463a      	mov	r2, r7
 80071b4:	4621      	mov	r1, r4
 80071b6:	4836      	ldr	r0, [pc, #216]	; (8007290 <usb_dc_ep_write+0x118>)
 80071b8:	f014 fab8 	bl	801b72c <HAL_PCD_EP_Transmit>
				     (void *)data, len);
	if (status != HAL_OK) {
 80071bc:	4602      	mov	r2, r0
 80071be:	2800      	cmp	r0, #0
 80071c0:	d142      	bne.n	8007248 <usb_dc_ep_write+0xd0>
			(int)status);
		k_sem_give(&ep_state->write_sem);
		ret = -EIO;
	}

	if (!ret && ep == EP0_IN && len > 0) {
 80071c2:	2c80      	cmp	r4, #128	; 0x80
 80071c4:	d058      	beq.n	8007278 <usb_dc_ep_write+0x100>
		 * This also flushes the TX FIFO to the host.
		 */
		usb_dc_ep_start_read(ep, NULL, 0);
	}

	if (!k_is_in_isr()) {
 80071c6:	f015 fe09 	bl	801cddc <k_is_in_isr>
 80071ca:	2800      	cmp	r0, #0
 80071cc:	d05c      	beq.n	8007288 <usb_dc_ep_write+0x110>
		irq_enable(USB_IRQ);
	}

	if (!ret && ret_bytes) {
 80071ce:	f1b9 0f00 	cmp.w	r9, #0
 80071d2:	d104      	bne.n	80071de <usb_dc_ep_write+0x66>
 80071d4:	f1b8 0f00 	cmp.w	r8, #0
 80071d8:	d001      	beq.n	80071de <usb_dc_ep_write+0x66>
		*ret_bytes = len;
 80071da:	f8c8 5000 	str.w	r5, [r8]
	}

	return ret;
}
 80071de:	4648      	mov	r0, r9
 80071e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("invalid ep 0x%02x", ep);
 80071e4:	f04f 0200 	mov.w	r2, #0
 80071e8:	2301      	movs	r3, #1
 80071ea:	f363 0202 	bfi	r2, r3, #0, #3
 80071ee:	f36f 02c5 	bfc	r2, #3, #3
 80071f2:	4b28      	ldr	r3, [pc, #160]	; (8007294 <usb_dc_ep_write+0x11c>)
 80071f4:	4928      	ldr	r1, [pc, #160]	; (8007298 <usb_dc_ep_write+0x120>)
 80071f6:	1a5b      	subs	r3, r3, r1
 80071f8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80071fc:	f363 128f 	bfi	r2, r3, #6, #10
 8007200:	4621      	mov	r1, r4
 8007202:	4826      	ldr	r0, [pc, #152]	; (800729c <usb_dc_ep_write+0x124>)
 8007204:	f7fd f832 	bl	800426c <log_1>
		return -EINVAL;
 8007208:	f06f 0915 	mvn.w	r9, #21
 800720c:	e7e7      	b.n	80071de <usb_dc_ep_write+0x66>
		LOG_ERR("Unable to get write lock (%d)", ret);
 800720e:	f04f 0200 	mov.w	r2, #0
 8007212:	2301      	movs	r3, #1
 8007214:	f363 0202 	bfi	r2, r3, #0, #3
 8007218:	f36f 02c5 	bfc	r2, #3, #3
 800721c:	4b1d      	ldr	r3, [pc, #116]	; (8007294 <usb_dc_ep_write+0x11c>)
 800721e:	491e      	ldr	r1, [pc, #120]	; (8007298 <usb_dc_ep_write+0x120>)
 8007220:	1a5b      	subs	r3, r3, r1
 8007222:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8007226:	f363 128f 	bfi	r2, r3, #6, #10
 800722a:	4601      	mov	r1, r0
 800722c:	481c      	ldr	r0, [pc, #112]	; (80072a0 <usb_dc_ep_write+0x128>)
 800722e:	f7fd f81d 	bl	800426c <log_1>
		return -EAGAIN;
 8007232:	f06f 090a 	mvn.w	r9, #10
 8007236:	e7d2      	b.n	80071de <usb_dc_ep_write+0x66>
		irq_disable(USB_IRQ);
 8007238:	204b      	movs	r0, #75	; 0x4b
 800723a:	f001 fd93 	bl	8008d64 <arch_irq_disable>
 800723e:	e7b5      	b.n	80071ac <usb_dc_ep_write+0x34>
	if (ep == EP0_IN && len > USB_MAX_CTRL_MPS) {
 8007240:	2d40      	cmp	r5, #64	; 0x40
 8007242:	d9b5      	bls.n	80071b0 <usb_dc_ep_write+0x38>
		len = USB_MAX_CTRL_MPS;
 8007244:	2540      	movs	r5, #64	; 0x40
 8007246:	e7b3      	b.n	80071b0 <usb_dc_ep_write+0x38>
		LOG_ERR("HAL_PCD_EP_Transmit failed(0x%02x), %d", ep,
 8007248:	f04f 0300 	mov.w	r3, #0
 800724c:	2101      	movs	r1, #1
 800724e:	f361 0302 	bfi	r3, r1, #0, #3
 8007252:	f36f 03c5 	bfc	r3, #3, #3
 8007256:	490f      	ldr	r1, [pc, #60]	; (8007294 <usb_dc_ep_write+0x11c>)
 8007258:	480f      	ldr	r0, [pc, #60]	; (8007298 <usb_dc_ep_write+0x120>)
 800725a:	1a09      	subs	r1, r1, r0
 800725c:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 8007260:	f361 138f 	bfi	r3, r1, #6, #10
 8007264:	4621      	mov	r1, r4
 8007266:	480f      	ldr	r0, [pc, #60]	; (80072a4 <usb_dc_ep_write+0x12c>)
 8007268:	f7fd f880 	bl	800436c <log_2>
	z_impl_k_sem_give(sem);
 800726c:	4630      	mov	r0, r6
 800726e:	f00d f8df 	bl	8014430 <z_impl_k_sem_give>
		ret = -EIO;
 8007272:	f06f 0904 	mvn.w	r9, #4
 8007276:	e7a6      	b.n	80071c6 <usb_dc_ep_write+0x4e>
	if (!ret && ep == EP0_IN && len > 0) {
 8007278:	2d00      	cmp	r5, #0
 800727a:	d0a4      	beq.n	80071c6 <usb_dc_ep_write+0x4e>
		usb_dc_ep_start_read(ep, NULL, 0);
 800727c:	2200      	movs	r2, #0
 800727e:	4611      	mov	r1, r2
 8007280:	4620      	mov	r0, r4
 8007282:	f7ff fdb3 	bl	8006dec <usb_dc_ep_start_read>
 8007286:	e79e      	b.n	80071c6 <usb_dc_ep_write+0x4e>
		irq_enable(USB_IRQ);
 8007288:	204b      	movs	r0, #75	; 0x4b
 800728a:	f001 fd5b 	bl	8008d44 <arch_irq_enable>
 800728e:	e79e      	b.n	80071ce <usb_dc_ep_write+0x56>
 8007290:	20001830 	.word	0x20001830
 8007294:	0801d778 	.word	0x0801d778
 8007298:	0801d6d0 	.word	0x0801d6d0
 800729c:	0801f4ac 	.word	0x0801f4ac
 80072a0:	0801f5c4 	.word	0x0801f5c4
 80072a4:	0801f5e4 	.word	0x0801f5e4

080072a8 <usb_dc_ep_read_wait>:

int usb_dc_ep_read_wait(uint8_t ep, uint8_t *data, uint32_t max_data_len,
			uint32_t *read_bytes)
{
 80072a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072ac:	4604      	mov	r4, r0
 80072ae:	460f      	mov	r7, r1
 80072b0:	4691      	mov	r9, r2
 80072b2:	461d      	mov	r5, r3
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 80072b4:	f7ff fc7e 	bl	8006bb4 <usb_dc_stm32_get_ep_state>
	uint32_t read_count;

	if (!ep_state) {
 80072b8:	b328      	cbz	r0, 8007306 <usb_dc_ep_read_wait+0x5e>
 80072ba:	4606      	mov	r6, r0
		LOG_ERR("Invalid Endpoint %x", ep);
		return -EINVAL;
	}

	read_count = ep_state->read_count;
 80072bc:	f8d0 800c 	ldr.w	r8, [r0, #12]

	LOG_DBG("ep 0x%02x, %u bytes, %u+%u, %p", ep, max_data_len,
		ep_state->read_offset, read_count, data);

	if (!USB_EP_DIR_IS_OUT(ep)) { /* check if OUT ep */
 80072c0:	f014 0f80 	tst.w	r4, #128	; 0x80
 80072c4:	d134      	bne.n	8007330 <usb_dc_ep_read_wait+0x88>

	/* When both buffer and max data to read are zero, just ingore reading
	 * and return available data in buffer. Otherwise, return data
	 * previously stored in the buffer.
	 */
	if (data) {
 80072c6:	2f00      	cmp	r7, #0
 80072c8:	d047      	beq.n	800735a <usb_dc_ep_read_wait+0xb2>
		read_count = MIN(read_count, max_data_len);
 80072ca:	45c8      	cmp	r8, r9
 80072cc:	bf28      	it	cs
 80072ce:	46c8      	movcs	r8, r9
		memcpy(data, usb_dc_stm32_state.ep_buf[USB_EP_GET_IDX(ep)] +
 80072d0:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 80072d4:	01a4      	lsls	r4, r4, #6
 80072d6:	f504 64a6 	add.w	r4, r4, #1328	; 0x530
 80072da:	492b      	ldr	r1, [pc, #172]	; (8007388 <usb_dc_ep_read_wait+0xe0>)
 80072dc:	440c      	add	r4, r1
		       ep_state->read_offset, read_count);
 80072de:	6901      	ldr	r1, [r0, #16]
		memcpy(data, usb_dc_stm32_state.ep_buf[USB_EP_GET_IDX(ep)] +
 80072e0:	4642      	mov	r2, r8
 80072e2:	4421      	add	r1, r4
 80072e4:	4638      	mov	r0, r7
 80072e6:	f010 fdc9 	bl	8017e7c <memcpy>
		ep_state->read_count -= read_count;
 80072ea:	68f3      	ldr	r3, [r6, #12]
 80072ec:	eba3 0308 	sub.w	r3, r3, r8
 80072f0:	60f3      	str	r3, [r6, #12]
		ep_state->read_offset += read_count;
 80072f2:	6933      	ldr	r3, [r6, #16]
 80072f4:	4443      	add	r3, r8
 80072f6:	6133      	str	r3, [r6, #16]
	} else if (max_data_len) {
		LOG_ERR("Wrong arguments");
	}

	if (read_bytes) {
 80072f8:	2d00      	cmp	r5, #0
 80072fa:	d043      	beq.n	8007384 <usb_dc_ep_read_wait+0xdc>
		*read_bytes = read_count;
 80072fc:	f8c5 8000 	str.w	r8, [r5]
	}

	return 0;
 8007300:	2000      	movs	r0, #0
}
 8007302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("Invalid Endpoint %x", ep);
 8007306:	f04f 0200 	mov.w	r2, #0
 800730a:	2301      	movs	r3, #1
 800730c:	f363 0202 	bfi	r2, r3, #0, #3
 8007310:	f36f 02c5 	bfc	r2, #3, #3
 8007314:	4b1d      	ldr	r3, [pc, #116]	; (800738c <usb_dc_ep_read_wait+0xe4>)
 8007316:	491e      	ldr	r1, [pc, #120]	; (8007390 <usb_dc_ep_read_wait+0xe8>)
 8007318:	1a5b      	subs	r3, r3, r1
 800731a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800731e:	f363 128f 	bfi	r2, r3, #6, #10
 8007322:	4621      	mov	r1, r4
 8007324:	481b      	ldr	r0, [pc, #108]	; (8007394 <usb_dc_ep_read_wait+0xec>)
 8007326:	f7fc ffa1 	bl	800426c <log_1>
		return -EINVAL;
 800732a:	f06f 0015 	mvn.w	r0, #21
 800732e:	e7e8      	b.n	8007302 <usb_dc_ep_read_wait+0x5a>
		LOG_ERR("Wrong endpoint direction: 0x%02x", ep);
 8007330:	f04f 0200 	mov.w	r2, #0
 8007334:	2301      	movs	r3, #1
 8007336:	f363 0202 	bfi	r2, r3, #0, #3
 800733a:	f36f 02c5 	bfc	r2, #3, #3
 800733e:	4b13      	ldr	r3, [pc, #76]	; (800738c <usb_dc_ep_read_wait+0xe4>)
 8007340:	4913      	ldr	r1, [pc, #76]	; (8007390 <usb_dc_ep_read_wait+0xe8>)
 8007342:	1a5b      	subs	r3, r3, r1
 8007344:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8007348:	f363 128f 	bfi	r2, r3, #6, #10
 800734c:	4621      	mov	r1, r4
 800734e:	4812      	ldr	r0, [pc, #72]	; (8007398 <usb_dc_ep_read_wait+0xf0>)
 8007350:	f7fc ff8c 	bl	800426c <log_1>
		return -EINVAL;
 8007354:	f06f 0015 	mvn.w	r0, #21
 8007358:	e7d3      	b.n	8007302 <usb_dc_ep_read_wait+0x5a>
	} else if (max_data_len) {
 800735a:	f1b9 0f00 	cmp.w	r9, #0
 800735e:	d0cb      	beq.n	80072f8 <usb_dc_ep_read_wait+0x50>
		LOG_ERR("Wrong arguments");
 8007360:	f04f 0100 	mov.w	r1, #0
 8007364:	2301      	movs	r3, #1
 8007366:	f363 0102 	bfi	r1, r3, #0, #3
 800736a:	f36f 01c5 	bfc	r1, #3, #3
 800736e:	4b07      	ldr	r3, [pc, #28]	; (800738c <usb_dc_ep_read_wait+0xe4>)
 8007370:	4a07      	ldr	r2, [pc, #28]	; (8007390 <usb_dc_ep_read_wait+0xe8>)
 8007372:	1a9b      	subs	r3, r3, r2
 8007374:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8007378:	f363 118f 	bfi	r1, r3, #6, #10
 800737c:	4807      	ldr	r0, [pc, #28]	; (800739c <usb_dc_ep_read_wait+0xf4>)
 800737e:	f7fd f8e5 	bl	800454c <log_0>
 8007382:	e7b9      	b.n	80072f8 <usb_dc_ep_read_wait+0x50>
	return 0;
 8007384:	2000      	movs	r0, #0
 8007386:	e7bc      	b.n	8007302 <usb_dc_ep_read_wait+0x5a>
 8007388:	20001830 	.word	0x20001830
 800738c:	0801d778 	.word	0x0801d778
 8007390:	0801d6d0 	.word	0x0801d6d0
 8007394:	0801f60c 	.word	0x0801f60c
 8007398:	0801f620 	.word	0x0801f620
 800739c:	0801f644 	.word	0x0801f644

080073a0 <usb_dc_ep_read_continue>:

int usb_dc_ep_read_continue(uint8_t ep)
{
 80073a0:	b510      	push	{r4, lr}
 80073a2:	4604      	mov	r4, r0
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 80073a4:	f7ff fc06 	bl	8006bb4 <usb_dc_stm32_get_ep_state>

	if (!ep_state || !USB_EP_DIR_IS_OUT(ep)) { /* Check if OUT ep */
 80073a8:	b130      	cbz	r0, 80073b8 <usb_dc_ep_read_continue+0x18>
 80073aa:	f014 0f80 	tst.w	r4, #128	; 0x80
 80073ae:	d103      	bne.n	80073b8 <usb_dc_ep_read_continue+0x18>
	}

	/* If no more data in the buffer, start a new read transaction.
	 * DataOutStageCallback will called on transaction complete.
	 */
	if (!ep_state->read_count) {
 80073b0:	68c3      	ldr	r3, [r0, #12]
 80073b2:	b1b3      	cbz	r3, 80073e2 <usb_dc_ep_read_continue+0x42>
		usb_dc_ep_start_read(ep, usb_dc_stm32_state.ep_buf[USB_EP_GET_IDX(ep)],
				     EP_MPS);
	}

	return 0;
 80073b4:	2000      	movs	r0, #0
}
 80073b6:	bd10      	pop	{r4, pc}
		LOG_ERR("Not valid endpoint: %02x", ep);
 80073b8:	f04f 0200 	mov.w	r2, #0
 80073bc:	2301      	movs	r3, #1
 80073be:	f363 0202 	bfi	r2, r3, #0, #3
 80073c2:	f36f 02c5 	bfc	r2, #3, #3
 80073c6:	4b0d      	ldr	r3, [pc, #52]	; (80073fc <usb_dc_ep_read_continue+0x5c>)
 80073c8:	490d      	ldr	r1, [pc, #52]	; (8007400 <usb_dc_ep_read_continue+0x60>)
 80073ca:	1a5b      	subs	r3, r3, r1
 80073cc:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80073d0:	f363 128f 	bfi	r2, r3, #6, #10
 80073d4:	4621      	mov	r1, r4
 80073d6:	480b      	ldr	r0, [pc, #44]	; (8007404 <usb_dc_ep_read_continue+0x64>)
 80073d8:	f7fc ff48 	bl	800426c <log_1>
		return -EINVAL;
 80073dc:	f06f 0015 	mvn.w	r0, #21
 80073e0:	e7e9      	b.n	80073b6 <usb_dc_ep_read_continue+0x16>
		usb_dc_ep_start_read(ep, usb_dc_stm32_state.ep_buf[USB_EP_GET_IDX(ep)],
 80073e2:	f024 0380 	bic.w	r3, r4, #128	; 0x80
 80073e6:	019b      	lsls	r3, r3, #6
 80073e8:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 80073ec:	2240      	movs	r2, #64	; 0x40
 80073ee:	4906      	ldr	r1, [pc, #24]	; (8007408 <usb_dc_ep_read_continue+0x68>)
 80073f0:	4419      	add	r1, r3
 80073f2:	4620      	mov	r0, r4
 80073f4:	f7ff fcfa 	bl	8006dec <usb_dc_ep_start_read>
	return 0;
 80073f8:	2000      	movs	r0, #0
 80073fa:	e7dc      	b.n	80073b6 <usb_dc_ep_read_continue+0x16>
 80073fc:	0801d778 	.word	0x0801d778
 8007400:	0801d6d0 	.word	0x0801d6d0
 8007404:	0801f654 	.word	0x0801f654
 8007408:	20001830 	.word	0x20001830

0800740c <HAL_PCD_ResetCallback>:
}

/* Callbacks from the STM32 Cube HAL code */

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800740c:	b510      	push	{r4, lr}
	int i;

	LOG_DBG("");

	HAL_PCD_EP_Open(&usb_dc_stm32_state.pcd, EP0_IN, EP0_MPS, EP_TYPE_CTRL);
 800740e:	4c12      	ldr	r4, [pc, #72]	; (8007458 <HAL_PCD_ResetCallback+0x4c>)
 8007410:	2300      	movs	r3, #0
 8007412:	2240      	movs	r2, #64	; 0x40
 8007414:	2180      	movs	r1, #128	; 0x80
 8007416:	4620      	mov	r0, r4
 8007418:	f014 f8fb 	bl	801b612 <HAL_PCD_EP_Open>
	HAL_PCD_EP_Open(&usb_dc_stm32_state.pcd, EP0_OUT, EP0_MPS,
 800741c:	2300      	movs	r3, #0
 800741e:	2240      	movs	r2, #64	; 0x40
 8007420:	4619      	mov	r1, r3
 8007422:	4620      	mov	r0, r4
 8007424:	f014 f8f5 	bl	801b612 <HAL_PCD_EP_Open>
			EP_TYPE_CTRL);

	/* The DataInCallback will never be called at this point for any pending
	 * transactions. Reset the IN semaphores to prevent perpetual locked state.
	 * */
	for (i = 0; i < USB_NUM_BIDIR_ENDPOINTS; i++) {
 8007428:	2400      	movs	r4, #0
 800742a:	e00a      	b.n	8007442 <HAL_PCD_ResetCallback+0x36>
		k_sem_give(&usb_dc_stm32_state.in_ep_state[i].write_sem);
 800742c:	202c      	movs	r0, #44	; 0x2c
 800742e:	fb00 f004 	mul.w	r0, r0, r4
 8007432:	f500 7378 	add.w	r3, r0, #992	; 0x3e0
 8007436:	4808      	ldr	r0, [pc, #32]	; (8007458 <HAL_PCD_ResetCallback+0x4c>)
 8007438:	4418      	add	r0, r3
 800743a:	3004      	adds	r0, #4
 800743c:	f00c fff8 	bl	8014430 <z_impl_k_sem_give>
	for (i = 0; i < USB_NUM_BIDIR_ENDPOINTS; i++) {
 8007440:	3401      	adds	r4, #1
 8007442:	2c07      	cmp	r4, #7
 8007444:	ddf2      	ble.n	800742c <HAL_PCD_ResetCallback+0x20>
	}

	if (usb_dc_stm32_state.status_cb) {
 8007446:	4b04      	ldr	r3, [pc, #16]	; (8007458 <HAL_PCD_ResetCallback+0x4c>)
 8007448:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800744c:	b113      	cbz	r3, 8007454 <HAL_PCD_ResetCallback+0x48>
		usb_dc_stm32_state.status_cb(USB_DC_RESET, NULL);
 800744e:	2100      	movs	r1, #0
 8007450:	2001      	movs	r0, #1
 8007452:	4798      	blx	r3
	}
}
 8007454:	bd10      	pop	{r4, pc}
 8007456:	bf00      	nop
 8007458:	20001830 	.word	0x20001830

0800745c <HAL_PCD_SuspendCallback>:
		usb_dc_stm32_state.status_cb(USB_DC_DISCONNECTED, NULL);
	}
}

void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800745c:	b508      	push	{r3, lr}
	LOG_DBG("");

	if (usb_dc_stm32_state.status_cb) {
 800745e:	4b04      	ldr	r3, [pc, #16]	; (8007470 <HAL_PCD_SuspendCallback+0x14>)
 8007460:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007464:	b113      	cbz	r3, 800746c <HAL_PCD_SuspendCallback+0x10>
		usb_dc_stm32_state.status_cb(USB_DC_SUSPEND, NULL);
 8007466:	2100      	movs	r1, #0
 8007468:	2005      	movs	r0, #5
 800746a:	4798      	blx	r3
	}
}
 800746c:	bd08      	pop	{r3, pc}
 800746e:	bf00      	nop
 8007470:	20001830 	.word	0x20001830

08007474 <HAL_PCD_ResumeCallback>:

void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8007474:	b508      	push	{r3, lr}
	LOG_DBG("");

	if (usb_dc_stm32_state.status_cb) {
 8007476:	4b04      	ldr	r3, [pc, #16]	; (8007488 <HAL_PCD_ResumeCallback+0x14>)
 8007478:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800747c:	b113      	cbz	r3, 8007484 <HAL_PCD_ResumeCallback+0x10>
		usb_dc_stm32_state.status_cb(USB_DC_RESUME, NULL);
 800747e:	2100      	movs	r1, #0
 8007480:	2006      	movs	r0, #6
 8007482:	4798      	blx	r3
	}
}
 8007484:	bd08      	pop	{r3, pc}
 8007486:	bf00      	nop
 8007488:	20001830 	.word	0x20001830

0800748c <HAL_PCD_SetupStageCallback>:

void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800748c:	b510      	push	{r4, lr}
	struct usb_setup_packet *setup = (void *)usb_dc_stm32_state.pcd.Setup;
	struct usb_dc_stm32_ep_state *ep_state;

	LOG_DBG("");

	ep_state = usb_dc_stm32_get_ep_state(EP0_OUT); /* can't fail for ep0 */
 800748e:	2000      	movs	r0, #0
 8007490:	f7ff fb90 	bl	8006bb4 <usb_dc_stm32_get_ep_state>
 8007494:	4604      	mov	r4, r0
	__ASSERT(ep_state, "No corresponding ep_state for EP0");

	ep_state->read_count = SETUP_SIZE;
 8007496:	2208      	movs	r2, #8
 8007498:	60c2      	str	r2, [r0, #12]
	ep_state->read_offset = 0U;
 800749a:	2300      	movs	r3, #0
 800749c:	6103      	str	r3, [r0, #16]
	memcpy(&usb_dc_stm32_state.ep_buf[EP0_IDX],
 800749e:	480d      	ldr	r0, [pc, #52]	; (80074d4 <HAL_PCD_SetupStageCallback+0x48>)
 80074a0:	f500 710c 	add.w	r1, r0, #560	; 0x230
 80074a4:	f500 60a6 	add.w	r0, r0, #1328	; 0x530
 80074a8:	f010 fce8 	bl	8017e7c <memcpy>
	       usb_dc_stm32_state.pcd.Setup, ep_state->read_count);

	if (ep_state->cb) {
 80074ac:	68a3      	ldr	r3, [r4, #8]
 80074ae:	b153      	cbz	r3, 80074c6 <HAL_PCD_SetupStageCallback+0x3a>
		ep_state->cb(EP0_OUT, USB_DC_EP_SETUP);
 80074b0:	2100      	movs	r1, #0
 80074b2:	4608      	mov	r0, r1
 80074b4:	4798      	blx	r3

		if (!(setup->wLength == 0U) &&
 80074b6:	4b07      	ldr	r3, [pc, #28]	; (80074d4 <HAL_PCD_SetupStageCallback+0x48>)
 80074b8:	f8b3 2236 	ldrh.w	r2, [r3, #566]	; 0x236
 80074bc:	b11a      	cbz	r2, 80074c6 <HAL_PCD_SetupStageCallback+0x3a>
		    !(REQTYPE_GET_DIR(setup->bmRequestType) ==
 80074be:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
		if (!(setup->wLength == 0U) &&
 80074c2:	09db      	lsrs	r3, r3, #7
 80074c4:	d000      	beq.n	80074c8 <HAL_PCD_SetupStageCallback+0x3c>
			usb_dc_ep_start_read(EP0_OUT,
					     usb_dc_stm32_state.ep_buf[EP0_IDX],
					     setup->wLength);
		}
	}
}
 80074c6:	bd10      	pop	{r4, pc}
			usb_dc_ep_start_read(EP0_OUT,
 80074c8:	4903      	ldr	r1, [pc, #12]	; (80074d8 <HAL_PCD_SetupStageCallback+0x4c>)
 80074ca:	2000      	movs	r0, #0
 80074cc:	f7ff fc8e 	bl	8006dec <usb_dc_ep_start_read>
}
 80074d0:	e7f9      	b.n	80074c6 <HAL_PCD_SetupStageCallback+0x3a>
 80074d2:	bf00      	nop
 80074d4:	20001830 	.word	0x20001830
 80074d8:	20001d60 	.word	0x20001d60

080074dc <z_impl_hwinfo_get_device_id>:
struct stm32_uid {
	uint32_t id[3];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
 80074dc:	b510      	push	{r4, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	460c      	mov	r4, r1
  * @brief  Get Word2 of the unique device identifier (UID based on 96 bits)
  * @retval UID[95:64]: Lot number (ASCII encoded) - LOT_NUM[55:24]
  */
__STATIC_INLINE uint32_t LL_GetUID_Word2(void)
{
  return (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE_ADDRESS + 8U))));
 80074e2:	4b1a      	ldr	r3, [pc, #104]	; (800754c <z_impl_hwinfo_get_device_id+0x70>)
 80074e4:	681a      	ldr	r2, [r3, #0]
	struct stm32_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(LL_GetUID_Word2());
 80074e6:	0a13      	lsrs	r3, r2, #8
 80074e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80074ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80074f0:	0211      	lsls	r1, r2, #8
 80074f2:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 80074f6:	430b      	orrs	r3, r1
 80074f8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80074fc:	9301      	str	r3, [sp, #4]
  return (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE_ADDRESS + 4U))));
 80074fe:	4b14      	ldr	r3, [pc, #80]	; (8007550 <z_impl_hwinfo_get_device_id+0x74>)
 8007500:	681a      	ldr	r2, [r3, #0]
	dev_id.id[1] = sys_cpu_to_be32(LL_GetUID_Word1());
 8007502:	0a13      	lsrs	r3, r2, #8
 8007504:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007508:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800750c:	0211      	lsls	r1, r2, #8
 800750e:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8007512:	430b      	orrs	r3, r1
 8007514:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007518:	9302      	str	r3, [sp, #8]
  return (uint32_t)(READ_REG(*((uint32_t *)UID_BASE_ADDRESS)));
 800751a:	4b0e      	ldr	r3, [pc, #56]	; (8007554 <z_impl_hwinfo_get_device_id+0x78>)
 800751c:	681a      	ldr	r2, [r3, #0]
	dev_id.id[2] = sys_cpu_to_be32(LL_GetUID_Word0());
 800751e:	0a13      	lsrs	r3, r2, #8
 8007520:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007524:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8007528:	0211      	lsls	r1, r2, #8
 800752a:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 800752e:	430b      	orrs	r3, r1
 8007530:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007534:	9303      	str	r3, [sp, #12]

	if (length > sizeof(dev_id.id)) {
 8007536:	2c0c      	cmp	r4, #12
 8007538:	d900      	bls.n	800753c <z_impl_hwinfo_get_device_id+0x60>
		length = sizeof(dev_id.id);
 800753a:	240c      	movs	r4, #12
	}

	memcpy(buffer, dev_id.id, length);
 800753c:	4622      	mov	r2, r4
 800753e:	a901      	add	r1, sp, #4
 8007540:	f010 fc9c 	bl	8017e7c <memcpy>

	return length;
}
 8007544:	4620      	mov	r0, r4
 8007546:	b004      	add	sp, #16
 8007548:	bd10      	pop	{r4, pc}
 800754a:	bf00      	nop
 800754c:	1ffff7b4 	.word	0x1ffff7b4
 8007550:	1ffff7b0 	.word	0x1ffff7b0
 8007554:	1ffff7ac 	.word	0x1ffff7ac

08007558 <flash_stm32_get_parameters>:
flash_stm32_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_stm32_parameters;
}
 8007558:	4800      	ldr	r0, [pc, #0]	; (800755c <flash_stm32_get_parameters+0x4>)
 800755a:	4770      	bx	lr
 800755c:	0801f754 	.word	0x0801f754

08007560 <flash_stm32_write>:
{
 8007560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007562:	4606      	mov	r6, r0
 8007564:	460f      	mov	r7, r1
 8007566:	4615      	mov	r5, r2
 8007568:	461c      	mov	r4, r3
	if (!flash_stm32_valid_range(dev, offset, len, true)) {
 800756a:	2301      	movs	r3, #1
 800756c:	4622      	mov	r2, r4
 800756e:	f00f fef7 	bl	8017360 <flash_stm32_valid_range>
 8007572:	b118      	cbz	r0, 800757c <flash_stm32_write+0x1c>
	if (!len) {
 8007574:	b9c4      	cbnz	r4, 80075a8 <flash_stm32_write+0x48>
		return 0;
 8007576:	2400      	movs	r4, #0
}
 8007578:	4620      	mov	r0, r4
 800757a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LOG_ERR("Write range invalid. Offset: %ld, len: %zu",
 800757c:	f04f 0300 	mov.w	r3, #0
 8007580:	2201      	movs	r2, #1
 8007582:	f362 0302 	bfi	r3, r2, #0, #3
 8007586:	f36f 03c5 	bfc	r3, #3, #3
 800758a:	4a11      	ldr	r2, [pc, #68]	; (80075d0 <flash_stm32_write+0x70>)
 800758c:	4911      	ldr	r1, [pc, #68]	; (80075d4 <flash_stm32_write+0x74>)
 800758e:	1a52      	subs	r2, r2, r1
 8007590:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8007594:	f362 138f 	bfi	r3, r2, #6, #10
 8007598:	4622      	mov	r2, r4
 800759a:	4639      	mov	r1, r7
 800759c:	480e      	ldr	r0, [pc, #56]	; (80075d8 <flash_stm32_write+0x78>)
 800759e:	f7fc fee5 	bl	800436c <log_2>
		return -EINVAL;
 80075a2:	f06f 0415 	mvn.w	r4, #21
 80075a6:	e7e7      	b.n	8007578 <flash_stm32_write+0x18>
	k_sem_take(&FLASH_STM32_PRIV(dev)->sem, K_FOREVER);
 80075a8:	68f0      	ldr	r0, [r6, #12]
 80075aa:	300c      	adds	r0, #12
	return z_impl_k_sem_take(sem, timeout);
 80075ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075b4:	f00c ff64 	bl	8014480 <z_impl_k_sem_take>
	rc = flash_stm32_write_range(dev, offset, data, len);
 80075b8:	4623      	mov	r3, r4
 80075ba:	462a      	mov	r2, r5
 80075bc:	4639      	mov	r1, r7
 80075be:	4630      	mov	r0, r6
 80075c0:	f00f fef8 	bl	80173b4 <flash_stm32_write_range>
 80075c4:	4604      	mov	r4, r0
	k_sem_give(&FLASH_STM32_PRIV(dev)->sem);
 80075c6:	68f0      	ldr	r0, [r6, #12]
 80075c8:	300c      	adds	r0, #12
	z_impl_k_sem_give(sem);
 80075ca:	f00c ff31 	bl	8014430 <z_impl_k_sem_give>
	return rc;
 80075ce:	e7d3      	b.n	8007578 <flash_stm32_write+0x18>
 80075d0:	0801d738 	.word	0x0801d738
 80075d4:	0801d6d0 	.word	0x0801d6d0
 80075d8:	0801f680 	.word	0x0801f680

080075dc <flash_stm32_read>:
{
 80075dc:	b570      	push	{r4, r5, r6, lr}
 80075de:	460e      	mov	r6, r1
 80075e0:	4615      	mov	r5, r2
 80075e2:	461c      	mov	r4, r3
	if (!flash_stm32_valid_range(dev, offset, len, false)) {
 80075e4:	2300      	movs	r3, #0
 80075e6:	4622      	mov	r2, r4
 80075e8:	f00f feba 	bl	8017360 <flash_stm32_valid_range>
 80075ec:	b110      	cbz	r0, 80075f4 <flash_stm32_read+0x18>
	if (!len) {
 80075ee:	b9bc      	cbnz	r4, 8007620 <flash_stm32_read+0x44>
		return 0;
 80075f0:	2000      	movs	r0, #0
}
 80075f2:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("Read range invalid. Offset: %ld, len: %zu",
 80075f4:	f04f 0300 	mov.w	r3, #0
 80075f8:	2201      	movs	r2, #1
 80075fa:	f362 0302 	bfi	r3, r2, #0, #3
 80075fe:	f36f 03c5 	bfc	r3, #3, #3
 8007602:	4a0b      	ldr	r2, [pc, #44]	; (8007630 <flash_stm32_read+0x54>)
 8007604:	490b      	ldr	r1, [pc, #44]	; (8007634 <flash_stm32_read+0x58>)
 8007606:	1a52      	subs	r2, r2, r1
 8007608:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 800760c:	f362 138f 	bfi	r3, r2, #6, #10
 8007610:	4622      	mov	r2, r4
 8007612:	4631      	mov	r1, r6
 8007614:	4808      	ldr	r0, [pc, #32]	; (8007638 <flash_stm32_read+0x5c>)
 8007616:	f7fc fea9 	bl	800436c <log_2>
		return -EINVAL;
 800761a:	f06f 0015 	mvn.w	r0, #21
 800761e:	e7e8      	b.n	80075f2 <flash_stm32_read+0x16>
	memcpy(data, (uint8_t *) CONFIG_FLASH_BASE_ADDRESS + offset, len);
 8007620:	4622      	mov	r2, r4
 8007622:	f106 6100 	add.w	r1, r6, #134217728	; 0x8000000
 8007626:	4628      	mov	r0, r5
 8007628:	f010 fc28 	bl	8017e7c <memcpy>
	return 0;
 800762c:	2000      	movs	r0, #0
 800762e:	e7e0      	b.n	80075f2 <flash_stm32_read+0x16>
 8007630:	0801d738 	.word	0x0801d738
 8007634:	0801d6d0 	.word	0x0801d6d0
 8007638:	0801f6ac 	.word	0x0801f6ac

0800763c <flash_stm32_erase>:
{
 800763c:	b570      	push	{r4, r5, r6, lr}
 800763e:	4605      	mov	r5, r0
 8007640:	460e      	mov	r6, r1
 8007642:	4614      	mov	r4, r2
	if (!flash_stm32_valid_range(dev, offset, len, true)) {
 8007644:	2301      	movs	r3, #1
 8007646:	f00f fe8b 	bl	8017360 <flash_stm32_valid_range>
 800764a:	b118      	cbz	r0, 8007654 <flash_stm32_erase+0x18>
	if (!len) {
 800764c:	b9c4      	cbnz	r4, 8007680 <flash_stm32_erase+0x44>
		return 0;
 800764e:	2400      	movs	r4, #0
}
 8007650:	4620      	mov	r0, r4
 8007652:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("Erase range invalid. Offset: %ld, len: %zu",
 8007654:	f04f 0300 	mov.w	r3, #0
 8007658:	2201      	movs	r2, #1
 800765a:	f362 0302 	bfi	r3, r2, #0, #3
 800765e:	f36f 03c5 	bfc	r3, #3, #3
 8007662:	4a11      	ldr	r2, [pc, #68]	; (80076a8 <flash_stm32_erase+0x6c>)
 8007664:	4911      	ldr	r1, [pc, #68]	; (80076ac <flash_stm32_erase+0x70>)
 8007666:	1a52      	subs	r2, r2, r1
 8007668:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 800766c:	f362 138f 	bfi	r3, r2, #6, #10
 8007670:	4622      	mov	r2, r4
 8007672:	4631      	mov	r1, r6
 8007674:	480e      	ldr	r0, [pc, #56]	; (80076b0 <flash_stm32_erase+0x74>)
 8007676:	f7fc fe79 	bl	800436c <log_2>
		return -EINVAL;
 800767a:	f06f 0415 	mvn.w	r4, #21
 800767e:	e7e7      	b.n	8007650 <flash_stm32_erase+0x14>
	k_sem_take(&FLASH_STM32_PRIV(dev)->sem, K_FOREVER);
 8007680:	68e8      	ldr	r0, [r5, #12]
 8007682:	300c      	adds	r0, #12
	return z_impl_k_sem_take(sem, timeout);
 8007684:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007688:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800768c:	f00c fef8 	bl	8014480 <z_impl_k_sem_take>
	rc = flash_stm32_block_erase_loop(dev, offset, len);
 8007690:	4622      	mov	r2, r4
 8007692:	4631      	mov	r1, r6
 8007694:	4628      	mov	r0, r5
 8007696:	f000 f903 	bl	80078a0 <flash_stm32_block_erase_loop>
 800769a:	4604      	mov	r4, r0
	k_sem_give(&FLASH_STM32_PRIV(dev)->sem);
 800769c:	68e8      	ldr	r0, [r5, #12]
 800769e:	300c      	adds	r0, #12
	z_impl_k_sem_give(sem);
 80076a0:	f00c fec6 	bl	8014430 <z_impl_k_sem_give>
	return rc;
 80076a4:	e7d4      	b.n	8007650 <flash_stm32_erase+0x14>
 80076a6:	bf00      	nop
 80076a8:	0801d738 	.word	0x0801d738
 80076ac:	0801d6d0 	.word	0x0801d6d0
 80076b0:	0801f6d8 	.word	0x0801f6d8

080076b4 <flash_stm32_wait_flash_idle>:
{
 80076b4:	b570      	push	{r4, r5, r6, lr}
 80076b6:	4606      	mov	r6, r0
	return z_impl_k_uptime_ticks();
 80076b8:	f015 fcc8 	bl	801d04c <z_impl_k_uptime_ticks>
 80076bc:	220a      	movs	r2, #10
 80076be:	2300      	movs	r3, #0
 80076c0:	f7f8 fd62 	bl	8000188 <__aeabi_uldivmod>
	int64_t timeout_time = k_uptime_get() + STM32_FLASH_TIMEOUT;
 80076c4:	f110 0450 	adds.w	r4, r0, #80	; 0x50
 80076c8:	f141 0500 	adc.w	r5, r1, #0
	rc = flash_stm32_check_status(dev);
 80076cc:	4630      	mov	r0, r6
 80076ce:	f00f fe13 	bl	80172f8 <flash_stm32_check_status>
	if (rc < 0) {
 80076d2:	2800      	cmp	r0, #0
 80076d4:	db26      	blt.n	8007724 <flash_stm32_wait_flash_idle+0x70>
	while ((FLASH_STM32_REGS(dev)->SR & FLASH_SR_BSY)) {
 80076d6:	68f3      	ldr	r3, [r6, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	f013 0f01 	tst.w	r3, #1
 80076e0:	d01e      	beq.n	8007720 <flash_stm32_wait_flash_idle+0x6c>
 80076e2:	f015 fcb3 	bl	801d04c <z_impl_k_uptime_ticks>
 80076e6:	220a      	movs	r2, #10
 80076e8:	2300      	movs	r3, #0
 80076ea:	f7f8 fd4d 	bl	8000188 <__aeabi_uldivmod>
		if (k_uptime_get() > timeout_time) {
 80076ee:	4284      	cmp	r4, r0
 80076f0:	eb75 0301 	sbcs.w	r3, r5, r1
 80076f4:	daef      	bge.n	80076d6 <flash_stm32_wait_flash_idle+0x22>
			LOG_ERR("Timeout! val: %d", STM32_FLASH_TIMEOUT);
 80076f6:	f04f 0200 	mov.w	r2, #0
 80076fa:	2301      	movs	r3, #1
 80076fc:	f363 0202 	bfi	r2, r3, #0, #3
 8007700:	f36f 02c5 	bfc	r2, #3, #3
 8007704:	4b09      	ldr	r3, [pc, #36]	; (800772c <flash_stm32_wait_flash_idle+0x78>)
 8007706:	490a      	ldr	r1, [pc, #40]	; (8007730 <flash_stm32_wait_flash_idle+0x7c>)
 8007708:	1a5b      	subs	r3, r3, r1
 800770a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800770e:	f363 128f 	bfi	r2, r3, #6, #10
 8007712:	2150      	movs	r1, #80	; 0x50
 8007714:	4807      	ldr	r0, [pc, #28]	; (8007734 <flash_stm32_wait_flash_idle+0x80>)
 8007716:	f7fc fda9 	bl	800426c <log_1>
			return -EIO;
 800771a:	f06f 0004 	mvn.w	r0, #4
 800771e:	e000      	b.n	8007722 <flash_stm32_wait_flash_idle+0x6e>
	return 0;
 8007720:	2000      	movs	r0, #0
}
 8007722:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
 8007724:	f06f 0004 	mvn.w	r0, #4
 8007728:	e7fb      	b.n	8007722 <flash_stm32_wait_flash_idle+0x6e>
 800772a:	bf00      	nop
 800772c:	0801d738 	.word	0x0801d738
 8007730:	0801d6d0 	.word	0x0801d6d0
 8007734:	0801f704 	.word	0x0801f704

08007738 <flash_stm32_write_protection>:
{
 8007738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800773a:	4604      	mov	r4, r0
 800773c:	460d      	mov	r5, r1
	FLASH_TypeDef *regs = FLASH_STM32_REGS(dev);
 800773e:	68c0      	ldr	r0, [r0, #12]
 8007740:	f850 6b0c 	ldr.w	r6, [r0], #12
	return z_impl_k_sem_take(sem, timeout);
 8007744:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007748:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800774c:	f00c fe98 	bl	8014480 <z_impl_k_sem_take>
	if (enable) {
 8007750:	b95d      	cbnz	r5, 800776a <flash_stm32_write_protection+0x32>
	int rc = 0;
 8007752:	2700      	movs	r7, #0
	if (enable) {
 8007754:	b1a5      	cbz	r5, 8007780 <flash_stm32_write_protection+0x48>
		regs->CR |= FLASH_CR_LOCK;
 8007756:	6933      	ldr	r3, [r6, #16]
 8007758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800775c:	6133      	str	r3, [r6, #16]
	k_sem_give(&FLASH_STM32_PRIV(dev)->sem);
 800775e:	68e0      	ldr	r0, [r4, #12]
 8007760:	300c      	adds	r0, #12
	z_impl_k_sem_give(sem);
 8007762:	f00c fe65 	bl	8014430 <z_impl_k_sem_give>
}
 8007766:	4638      	mov	r0, r7
 8007768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rc = flash_stm32_wait_flash_idle(dev);
 800776a:	4620      	mov	r0, r4
 800776c:	f7ff ffa2 	bl	80076b4 <flash_stm32_wait_flash_idle>
		if (rc) {
 8007770:	4607      	mov	r7, r0
 8007772:	2800      	cmp	r0, #0
 8007774:	d0ee      	beq.n	8007754 <flash_stm32_write_protection+0x1c>
	k_sem_give(&FLASH_STM32_PRIV(dev)->sem);
 8007776:	68e0      	ldr	r0, [r4, #12]
 8007778:	300c      	adds	r0, #12
 800777a:	f00c fe59 	bl	8014430 <z_impl_k_sem_give>
			return rc;
 800777e:	e7f2      	b.n	8007766 <flash_stm32_write_protection+0x2e>
		if (regs->CR & FLASH_CR_LOCK) {
 8007780:	6933      	ldr	r3, [r6, #16]
 8007782:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007786:	d0ea      	beq.n	800775e <flash_stm32_write_protection+0x26>
			regs->KEYR = FLASH_KEY1;
 8007788:	4b02      	ldr	r3, [pc, #8]	; (8007794 <flash_stm32_write_protection+0x5c>)
 800778a:	6073      	str	r3, [r6, #4]
			regs->KEYR = FLASH_KEY2;
 800778c:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8007790:	6073      	str	r3, [r6, #4]
 8007792:	e7e4      	b.n	800775e <flash_stm32_write_protection+0x26>
 8007794:	45670123 	.word	0x45670123

08007798 <stm32_flash_init>:
	.page_layout = flash_stm32_page_layout,
#endif
};

static int stm32_flash_init(const struct device *dev)
{
 8007798:	b538      	push	{r3, r4, r5, lr}
 800779a:	4604      	mov	r4, r0
#if defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32F0X) || \
	defined(CONFIG_SOC_SERIES_STM32F1X) || \
	defined(CONFIG_SOC_SERIES_STM32F3X) || \
	defined(CONFIG_SOC_SERIES_STM32G0X)
	struct flash_stm32_priv *p = FLASH_STM32_PRIV(dev);
 800779c:	68c5      	ldr	r5, [r0, #12]
 800779e:	4818      	ldr	r0, [pc, #96]	; (8007800 <stm32_flash_init+0x68>)
 80077a0:	f00b fedc 	bl	801355c <z_impl_device_get_binding>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80077a4:	4a17      	ldr	r2, [pc, #92]	; (8007804 <stm32_flash_init+0x6c>)
 80077a6:	6813      	ldr	r3, [r2, #0]
 80077a8:	f043 0301 	orr.w	r3, r3, #1
 80077ac:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80077ae:	4b15      	ldr	r3, [pc, #84]	; (8007804 <stm32_flash_init+0x6c>)
 80077b0:	681b      	ldr	r3, [r3, #0]
#if defined(CONFIG_SOC_SERIES_STM32F0X) || \
	defined(CONFIG_SOC_SERIES_STM32F1X) || \
	defined(CONFIG_SOC_SERIES_STM32F3X)
	LL_RCC_HSI_Enable();

	while (!LL_RCC_HSI_IsReady()) {
 80077b2:	f013 0f02 	tst.w	r3, #2
 80077b6:	d0fa      	beq.n	80077ae <stm32_flash_init+0x16>
	const struct clock_control_driver_api *api =
 80077b8:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	1d29      	adds	r1, r5, #4
 80077be:	4798      	blx	r3
	}
#endif

	/* enable clock */
	if (clock_control_on(clk, (clock_control_subsys_t *)&p->pclken) != 0) {
 80077c0:	b950      	cbnz	r0, 80077d8 <stm32_flash_init+0x40>

#ifdef CONFIG_SOC_SERIES_STM32WBX
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_HSEM);
#endif /* CONFIG_SOC_SERIES_STM32WBX */

	flash_stm32_sem_init(dev);
 80077c2:	68e0      	ldr	r0, [r4, #12]
 80077c4:	300c      	adds	r0, #12
	return z_impl_k_sem_init(sem, initial_count, limit);
 80077c6:	2201      	movs	r2, #1
 80077c8:	4611      	mov	r1, r2
 80077ca:	f015 faef 	bl	801cdac <z_impl_k_sem_init>
		LOG_DBG("Block %zu: bs: %zu count: %zu", i,
			layout[i].pages_size, layout[i].pages_count);
	}
#endif

	return flash_stm32_write_protection(dev, false);
 80077ce:	2100      	movs	r1, #0
 80077d0:	4620      	mov	r0, r4
 80077d2:	f7ff ffb1 	bl	8007738 <flash_stm32_write_protection>
}
 80077d6:	bd38      	pop	{r3, r4, r5, pc}
		LOG_ERR("Failed to enable clock");
 80077d8:	f04f 0100 	mov.w	r1, #0
 80077dc:	2301      	movs	r3, #1
 80077de:	f363 0102 	bfi	r1, r3, #0, #3
 80077e2:	f36f 01c5 	bfc	r1, #3, #3
 80077e6:	4b08      	ldr	r3, [pc, #32]	; (8007808 <stm32_flash_init+0x70>)
 80077e8:	4a08      	ldr	r2, [pc, #32]	; (800780c <stm32_flash_init+0x74>)
 80077ea:	1a9b      	subs	r3, r3, r2
 80077ec:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80077f0:	f363 118f 	bfi	r1, r3, #6, #10
 80077f4:	4806      	ldr	r0, [pc, #24]	; (8007810 <stm32_flash_init+0x78>)
 80077f6:	f7fc fea9 	bl	800454c <log_0>
		return -EIO;
 80077fa:	f06f 0004 	mvn.w	r0, #4
 80077fe:	e7ea      	b.n	80077d6 <stm32_flash_init+0x3e>
 8007800:	0801f3b0 	.word	0x0801f3b0
 8007804:	40021000 	.word	0x40021000
 8007808:	0801d738 	.word	0x0801d738
 800780c:	0801d6d0 	.word	0x0801d6d0
 8007810:	0801f718 	.word	0x0801f718

08007814 <write_value>:
}
#endif

static int write_value(const struct device *dev, off_t offset,
		       flash_prg_t val)
{
 8007814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007818:	4605      	mov	r5, r0
 800781a:	4617      	mov	r7, r2
	volatile flash_prg_t *flash = (flash_prg_t *)(
		offset + CONFIG_FLASH_BASE_ADDRESS);
 800781c:	f101 6600 	add.w	r6, r1, #134217728	; 0x8000000
	FLASH_TypeDef *regs = FLASH_STM32_REGS(dev);
 8007820:	68c3      	ldr	r3, [r0, #12]
 8007822:	f8d3 8000 	ldr.w	r8, [r3]
	int rc;

	/* if the control register is locked, do not fail silently */
	if (is_flash_locked(regs)) {
 8007826:	4640      	mov	r0, r8
 8007828:	f00f fd78 	bl	801731c <is_flash_locked>
 800782c:	b9d0      	cbnz	r0, 8007864 <write_value+0x50>
		LOG_ERR("Flash is locked");
		return -EIO;
	}

	/* Check that no Flash main memory operation is ongoing */
	rc = flash_stm32_wait_flash_idle(dev);
 800782e:	4628      	mov	r0, r5
 8007830:	f7ff ff40 	bl	80076b4 <flash_stm32_wait_flash_idle>
	if (rc < 0) {
 8007834:	1e04      	subs	r4, r0, #0
 8007836:	db12      	blt.n	800785e <write_value+0x4a>
		return rc;
	}

	/* Check if this half word is erased */
	if (*flash != FLASH_ERASED_VALUE) {
 8007838:	8833      	ldrh	r3, [r6, #0]
 800783a:	b29b      	uxth	r3, r3
 800783c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007840:	4293      	cmp	r3, r2
 8007842:	d123      	bne.n	800788c <write_value+0x78>
		LOG_DBG("Flash location not erased");
		return -EIO;
	}

	/* Enable writing */
	write_enable(regs);
 8007844:	4640      	mov	r0, r8
 8007846:	f00f fd6d 	bl	8017324 <write_enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800784a:	f3bf 8f4f 	dsb	sy

	/* Make sure the register write has taken effect */
	__DSB();

	/* Perform the data write operation at the desired memory address */
	*flash = val;
 800784e:	8037      	strh	r7, [r6, #0]

	/* Wait until the BSY bit is cleared */
	rc = flash_stm32_wait_flash_idle(dev);
 8007850:	4628      	mov	r0, r5
 8007852:	f7ff ff2f 	bl	80076b4 <flash_stm32_wait_flash_idle>
 8007856:	4604      	mov	r4, r0

	/* Disable writing */
	write_disable(regs);
 8007858:	4640      	mov	r0, r8
 800785a:	f00f fd68 	bl	801732e <write_disable>

	return rc;
}
 800785e:	4620      	mov	r0, r4
 8007860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Flash is locked");
 8007864:	f04f 0100 	mov.w	r1, #0
 8007868:	2301      	movs	r3, #1
 800786a:	f363 0102 	bfi	r1, r3, #0, #3
 800786e:	f36f 01c5 	bfc	r1, #3, #3
 8007872:	4b08      	ldr	r3, [pc, #32]	; (8007894 <write_value+0x80>)
 8007874:	4a08      	ldr	r2, [pc, #32]	; (8007898 <write_value+0x84>)
 8007876:	1a9b      	subs	r3, r3, r2
 8007878:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800787c:	f363 118f 	bfi	r1, r3, #6, #10
 8007880:	4806      	ldr	r0, [pc, #24]	; (800789c <write_value+0x88>)
 8007882:	f7fc fe63 	bl	800454c <log_0>
		return -EIO;
 8007886:	f06f 0404 	mvn.w	r4, #4
 800788a:	e7e8      	b.n	800785e <write_value+0x4a>
		return -EIO;
 800788c:	f06f 0404 	mvn.w	r4, #4
 8007890:	e7e5      	b.n	800785e <write_value+0x4a>
 8007892:	bf00      	nop
 8007894:	0801d740 	.word	0x0801d740
 8007898:	0801d6d0 	.word	0x0801d6d0
 800789c:	0801f75c 	.word	0x0801f75c

080078a0 <flash_stm32_block_erase_loop>:
}

int flash_stm32_block_erase_loop(const struct device *dev,
				 unsigned int offset,
				 unsigned int len)
{
 80078a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078a4:	4607      	mov	r7, r0
 80078a6:	4688      	mov	r8, r1
 80078a8:	4691      	mov	r9, r2
	FLASH_TypeDef *regs = FLASH_STM32_REGS(dev);
 80078aa:	68c3      	ldr	r3, [r0, #12]
 80078ac:	681e      	ldr	r6, [r3, #0]
	int i, rc = 0;

	/* if the control register is locked, do not fail silently */
	if (is_flash_locked(regs)) {
 80078ae:	4630      	mov	r0, r6
 80078b0:	f00f fd34 	bl	801731c <is_flash_locked>
 80078b4:	bb00      	cbnz	r0, 80078f8 <flash_stm32_block_erase_loop+0x58>
		LOG_ERR("Flash is locked");
		return -EIO;
	}

	/* Check that no Flash memory operation is ongoing */
	rc = flash_stm32_wait_flash_idle(dev);
 80078b6:	4638      	mov	r0, r7
 80078b8:	f7ff fefc 	bl	80076b4 <flash_stm32_wait_flash_idle>
	if (rc < 0) {
 80078bc:	1e04      	subs	r4, r0, #0
 80078be:	db2e      	blt.n	800791e <flash_stm32_block_erase_loop+0x7e>
		return rc;
	}

	for (i = get_page(offset); i <= get_page(offset + len - 1); ++i) {
 80078c0:	4640      	mov	r0, r8
 80078c2:	f00f fd24 	bl	801730e <get_page>
 80078c6:	4605      	mov	r5, r0
 80078c8:	eb08 0009 	add.w	r0, r8, r9
 80078cc:	3801      	subs	r0, #1
 80078ce:	f00f fd1e 	bl	801730e <get_page>
 80078d2:	42a8      	cmp	r0, r5
 80078d4:	d323      	bcc.n	800791e <flash_stm32_block_erase_loop+0x7e>
		erase_page_begin(regs, i);
 80078d6:	4629      	mov	r1, r5
 80078d8:	4630      	mov	r0, r6
 80078da:	f00f fd2d 	bl	8017338 <erase_page_begin>
 80078de:	f3bf 8f4f 	dsb	sy
		__DSB();
		rc = flash_stm32_wait_flash_idle(dev);
 80078e2:	4638      	mov	r0, r7
 80078e4:	f7ff fee6 	bl	80076b4 <flash_stm32_wait_flash_idle>
 80078e8:	4604      	mov	r4, r0
		erase_page_end(regs);
 80078ea:	4630      	mov	r0, r6
 80078ec:	f00f fd33 	bl	8017356 <erase_page_end>

		if (rc < 0) {
 80078f0:	2c00      	cmp	r4, #0
 80078f2:	db14      	blt.n	800791e <flash_stm32_block_erase_loop+0x7e>
	for (i = get_page(offset); i <= get_page(offset + len - 1); ++i) {
 80078f4:	3501      	adds	r5, #1
 80078f6:	e7e7      	b.n	80078c8 <flash_stm32_block_erase_loop+0x28>
		LOG_ERR("Flash is locked");
 80078f8:	f04f 0100 	mov.w	r1, #0
 80078fc:	2301      	movs	r3, #1
 80078fe:	f363 0102 	bfi	r1, r3, #0, #3
 8007902:	f36f 01c5 	bfc	r1, #3, #3
 8007906:	4b07      	ldr	r3, [pc, #28]	; (8007924 <flash_stm32_block_erase_loop+0x84>)
 8007908:	4a07      	ldr	r2, [pc, #28]	; (8007928 <flash_stm32_block_erase_loop+0x88>)
 800790a:	1a9b      	subs	r3, r3, r2
 800790c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8007910:	f363 118f 	bfi	r1, r3, #6, #10
 8007914:	4805      	ldr	r0, [pc, #20]	; (800792c <flash_stm32_block_erase_loop+0x8c>)
 8007916:	f7fc fe19 	bl	800454c <log_0>
		return -EIO;
 800791a:	f06f 0404 	mvn.w	r4, #4
			break;
		}
	}

	return rc;
}
 800791e:	4620      	mov	r0, r4
 8007920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007924:	0801d740 	.word	0x0801d740
 8007928:	0801d6d0 	.word	0x0801d6d0
 800792c:	0801f75c 	.word	0x0801f75c

08007930 <flash_stm32_page_layout>:
		.pages_size = 0,
	};

	ARG_UNUSED(dev);

	if (flash_layout.pages_count == 0) {
 8007930:	4b06      	ldr	r3, [pc, #24]	; (800794c <flash_stm32_page_layout+0x1c>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	b92b      	cbnz	r3, 8007942 <flash_stm32_page_layout+0x12>
#if defined(CONFIG_SOC_SERIES_STM32F3X)
		flash_layout.pages_count =
 8007936:	4b05      	ldr	r3, [pc, #20]	; (800794c <flash_stm32_page_layout+0x1c>)
 8007938:	2080      	movs	r0, #128	; 0x80
 800793a:	6018      	str	r0, [r3, #0]
			DT_REG_SIZE(DT_INST(0, soc_nv_flash)) / FLASH_PAGE_SIZE;
#else
		flash_layout.pages_count = (CONFIG_FLASH_SIZE * 1024) /
			FLASH_PAGE_SIZE;
#endif
		flash_layout.pages_size = FLASH_PAGE_SIZE;
 800793c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007940:	6058      	str	r0, [r3, #4]
	}

	*layout = &flash_layout;
 8007942:	4b02      	ldr	r3, [pc, #8]	; (800794c <flash_stm32_page_layout+0x1c>)
 8007944:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
 8007946:	2301      	movs	r3, #1
 8007948:	6013      	str	r3, [r2, #0]
}
 800794a:	4770      	bx	lr
 800794c:	20001f64 	.word	0x20001f64

08007950 <reset_rx>:
	net_buf_add_mem(buf, rx.hdr, rx.hdr_len);
}

static void reset_rx(void)
{
	rx.type = H4_NONE;
 8007950:	4b05      	ldr	r3, [pc, #20]	; (8007968 <reset_rx+0x18>)
 8007952:	2200      	movs	r2, #0
 8007954:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	rx.remaining = 0U;
 8007958:	839a      	strh	r2, [r3, #28]
	rx.have_hdr = false;
 800795a:	f883 2020 	strb.w	r2, [r3, #32]
	rx.hdr_len = 0U;
 800795e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	rx.discardable = false;
 8007962:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8007966:	4770      	bx	lr
 8007968:	20000418 	.word	0x20000418

0800796c <h4_send>:
		}
	}
}

static int h4_send(struct net_buf *buf)
{
 800796c:	b508      	push	{r3, lr}
 800796e:	4601      	mov	r1, r0
	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	net_buf_put(&tx.fifo, buf);
 8007970:	4805      	ldr	r0, [pc, #20]	; (8007988 <h4_send+0x1c>)
 8007972:	f013 fb19 	bl	801afa8 <net_buf_put>
	uart_irq_tx_enable(h4_dev);
 8007976:	4b05      	ldr	r3, [pc, #20]	; (800798c <h4_send+0x20>)
 8007978:	6818      	ldr	r0, [r3, #0]
__syscall void uart_irq_tx_enable(const struct device *dev);

static inline void z_impl_uart_irq_tx_enable(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
 800797a:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->irq_tx_enable) {
 800797c:	69db      	ldr	r3, [r3, #28]
 800797e:	b103      	cbz	r3, 8007982 <h4_send+0x16>
		api->irq_tx_enable(dev);
 8007980:	4798      	blx	r3

	return 0;
}
 8007982:	2000      	movs	r0, #0
 8007984:	bd08      	pop	{r3, pc}
 8007986:	bf00      	nop
 8007988:	20000448 	.word	0x20000448
 800798c:	20001f6c 	.word	0x20001f6c

08007990 <get_rx>:
{
 8007990:	b508      	push	{r3, lr}
 8007992:	4602      	mov	r2, r0
 8007994:	460b      	mov	r3, r1
	switch (rx.type) {
 8007996:	490a      	ldr	r1, [pc, #40]	; (80079c0 <get_rx+0x30>)
 8007998:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
 800799c:	2902      	cmp	r1, #2
 800799e:	d009      	beq.n	80079b4 <get_rx+0x24>
 80079a0:	2904      	cmp	r1, #4
 80079a2:	d10b      	bne.n	80079bc <get_rx+0x2c>
		return bt_buf_get_evt(rx.evt.evt, rx.discardable, timeout);
 80079a4:	4806      	ldr	r0, [pc, #24]	; (80079c0 <get_rx+0x30>)
 80079a6:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
 80079aa:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 80079ae:	f005 f96f 	bl	800cc90 <bt_buf_get_evt>
 80079b2:	e004      	b.n	80079be <get_rx+0x2e>
		return bt_buf_get_rx(BT_BUF_ACL_IN, timeout);
 80079b4:	2003      	movs	r0, #3
 80079b6:	f005 f929 	bl	800cc0c <bt_buf_get_rx>
 80079ba:	e000      	b.n	80079be <get_rx+0x2e>
	switch (rx.type) {
 80079bc:	2000      	movs	r0, #0
}
 80079be:	bd08      	pop	{r3, pc}
 80079c0:	20000418 	.word	0x20000418

080079c4 <rx_thread>:
{
 80079c4:	b538      	push	{r3, r4, r5, lr}
		if (rx.have_hdr && !rx.buf) {
 80079c6:	4b2f      	ldr	r3, [pc, #188]	; (8007a84 <rx_thread+0xc0>)
 80079c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80079cc:	b113      	cbz	r3, 80079d4 <rx_thread+0x10>
 80079ce:	4b2d      	ldr	r3, [pc, #180]	; (8007a84 <rx_thread+0xc0>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	b173      	cbz	r3, 80079f2 <rx_thread+0x2e>
		uart_irq_rx_enable(h4_dev);
 80079d4:	4b2c      	ldr	r3, [pc, #176]	; (8007a88 <rx_thread+0xc4>)
 80079d6:	6818      	ldr	r0, [r3, #0]
__syscall void uart_irq_rx_enable(const struct device *dev);

static inline void z_impl_uart_irq_rx_enable(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
 80079d8:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->irq_rx_enable) {
 80079da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079dc:	b103      	cbz	r3, 80079e0 <rx_thread+0x1c>
		api->irq_rx_enable(dev);
 80079de:	4798      	blx	r3
		buf = net_buf_get(&rx.fifo, K_FOREVER);
 80079e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079e8:	4828      	ldr	r0, [pc, #160]	; (8007a8c <rx_thread+0xc8>)
 80079ea:	f013 fabe 	bl	801af6a <net_buf_get>
 80079ee:	4604      	mov	r4, r0
 80079f0:	e034      	b.n	8007a5c <rx_thread+0x98>
			rx.buf = get_rx(K_FOREVER);
 80079f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80079fa:	f7ff ffc9 	bl	8007990 <get_rx>
 80079fe:	4b21      	ldr	r3, [pc, #132]	; (8007a84 <rx_thread+0xc0>)
 8007a00:	6018      	str	r0, [r3, #0]
			if (rx.remaining > net_buf_tailroom(rx.buf)) {
 8007a02:	8b9c      	ldrh	r4, [r3, #28]
 8007a04:	3008      	adds	r0, #8
 8007a06:	f013 fb62 	bl	801b0ce <net_buf_simple_tailroom>
 8007a0a:	4284      	cmp	r4, r0
 8007a0c:	d915      	bls.n	8007a3a <rx_thread+0x76>
				BT_ERR("Not enough space in buffer");
 8007a0e:	2301      	movs	r3, #1
 8007a10:	f363 0502 	bfi	r5, r3, #0, #3
 8007a14:	f36f 05c5 	bfc	r5, #3, #3
 8007a18:	4b1d      	ldr	r3, [pc, #116]	; (8007a90 <rx_thread+0xcc>)
 8007a1a:	4a1e      	ldr	r2, [pc, #120]	; (8007a94 <rx_thread+0xd0>)
 8007a1c:	1a9b      	subs	r3, r3, r2
 8007a1e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8007a22:	f363 158f 	bfi	r5, r3, #6, #10
 8007a26:	4629      	mov	r1, r5
 8007a28:	481b      	ldr	r0, [pc, #108]	; (8007a98 <rx_thread+0xd4>)
 8007a2a:	f7fc fd8f 	bl	800454c <log_0>
				rx.discard = rx.remaining;
 8007a2e:	4b15      	ldr	r3, [pc, #84]	; (8007a84 <rx_thread+0xc0>)
 8007a30:	8b9a      	ldrh	r2, [r3, #28]
 8007a32:	83da      	strh	r2, [r3, #30]
				reset_rx();
 8007a34:	f7ff ff8c 	bl	8007950 <reset_rx>
 8007a38:	e7cc      	b.n	80079d4 <rx_thread+0x10>
				copy_hdr(rx.buf);
 8007a3a:	4912      	ldr	r1, [pc, #72]	; (8007a84 <rx_thread+0xc0>)
 8007a3c:	6808      	ldr	r0, [r1, #0]
	net_buf_add_mem(buf, rx.hdr, rx.hdr_len);
 8007a3e:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
 8007a42:	3124      	adds	r1, #36	; 0x24
 8007a44:	3008      	adds	r0, #8
 8007a46:	f013 fb0c 	bl	801b062 <net_buf_simple_add_mem>
}
 8007a4a:	e7c3      	b.n	80079d4 <rx_thread+0x10>
			buf = net_buf_get(&rx.fifo, K_NO_WAIT);
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	2300      	movs	r3, #0
 8007a50:	480e      	ldr	r0, [pc, #56]	; (8007a8c <rx_thread+0xc8>)
 8007a52:	f013 fa8a 	bl	801af6a <net_buf_get>
		} while (buf);
 8007a56:	4604      	mov	r4, r0
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	d0b4      	beq.n	80079c6 <rx_thread+0x2>
			uart_irq_rx_enable(h4_dev);
 8007a5c:	4b0a      	ldr	r3, [pc, #40]	; (8007a88 <rx_thread+0xc4>)
 8007a5e:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 8007a60:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_enable) {
 8007a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a64:	b103      	cbz	r3, 8007a68 <rx_thread+0xa4>
		api->irq_rx_enable(dev);
 8007a66:	4798      	blx	r3
			bt_recv(buf);
 8007a68:	4620      	mov	r0, r4
 8007a6a:	f004 fc29 	bl	800c2c0 <bt_recv>
	z_impl_k_yield();
 8007a6e:	f00c fc7d 	bl	801436c <z_impl_k_yield>
			uart_irq_rx_disable(h4_dev);
 8007a72:	4b05      	ldr	r3, [pc, #20]	; (8007a88 <rx_thread+0xc4>)
 8007a74:	6818      	ldr	r0, [r3, #0]
__syscall void uart_irq_rx_disable(const struct device *dev);

static inline void z_impl_uart_irq_rx_disable(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
 8007a76:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->irq_rx_disable) {
 8007a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d0e6      	beq.n	8007a4c <rx_thread+0x88>
		api->irq_rx_disable(dev);
 8007a7e:	4798      	blx	r3
 8007a80:	e7e4      	b.n	8007a4c <rx_thread+0x88>
 8007a82:	bf00      	nop
 8007a84:	20000418 	.word	0x20000418
 8007a88:	20001f6c 	.word	0x20001f6c
 8007a8c:	2000041c 	.word	0x2000041c
 8007a90:	0801d6f8 	.word	0x0801d6f8
 8007a94:	0801d6d0 	.word	0x0801d6d0
 8007a98:	0801f780 	.word	0x0801f780

08007a9c <process_rx>:
{
 8007a9c:	b538      	push	{r3, r4, r5, lr}
	if (rx.discard) {
 8007a9e:	4b97      	ldr	r3, [pc, #604]	; (8007cfc <process_rx+0x260>)
 8007aa0:	8bd9      	ldrh	r1, [r3, #30]
 8007aa2:	2900      	cmp	r1, #0
 8007aa4:	d13c      	bne.n	8007b20 <process_rx+0x84>
	if (rx.have_hdr) {
 8007aa6:	4b95      	ldr	r3, [pc, #596]	; (8007cfc <process_rx+0x260>)
 8007aa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f000 80c4 	beq.w	8007c3a <process_rx+0x19e>
	if (!rx.buf) {
 8007ab2:	4b92      	ldr	r3, [pc, #584]	; (8007cfc <process_rx+0x260>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d03b      	beq.n	8007b32 <process_rx+0x96>
	read = uart_fifo_read(h4_dev, net_buf_tail(rx.buf), rx.remaining);
 8007aba:	4b91      	ldr	r3, [pc, #580]	; (8007d00 <process_rx+0x264>)
 8007abc:	6818      	ldr	r0, [r3, #0]
 8007abe:	4b8f      	ldr	r3, [pc, #572]	; (8007cfc <process_rx+0x260>)
 8007ac0:	681a      	ldr	r2, [r3, #0]
 *
 * @return Tail pointer for the buffer.
 */
static inline uint8_t *net_buf_simple_tail(struct net_buf_simple *buf)
{
	return buf->data + buf->len;
 8007ac2:	6891      	ldr	r1, [r2, #8]
 8007ac4:	8992      	ldrh	r2, [r2, #12]
 8007ac6:	4411      	add	r1, r2
 8007ac8:	8b9a      	ldrh	r2, [r3, #28]
	const struct uart_driver_api *api =
 8007aca:	6883      	ldr	r3, [r0, #8]
	if (api->fifo_read) {
 8007acc:	699b      	ldr	r3, [r3, #24]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f000 8092 	beq.w	8007bf8 <process_rx+0x15c>
		return api->fifo_read(dev, rx_data, size);
 8007ad4:	4798      	blx	r3
 8007ad6:	4604      	mov	r4, r0
	net_buf_add(rx.buf, read);
 8007ad8:	4d88      	ldr	r5, [pc, #544]	; (8007cfc <process_rx+0x260>)
 8007ada:	6828      	ldr	r0, [r5, #0]
 8007adc:	4621      	mov	r1, r4
 8007ade:	3008      	adds	r0, #8
 8007ae0:	f013 fab9 	bl	801b056 <net_buf_simple_add>
	rx.remaining -= read;
 8007ae4:	8ba8      	ldrh	r0, [r5, #28]
 8007ae6:	1b00      	subs	r0, r0, r4
 8007ae8:	b280      	uxth	r0, r0
 8007aea:	83a8      	strh	r0, [r5, #28]
	if (rx.remaining) {
 8007aec:	bb00      	cbnz	r0, 8007b30 <process_rx+0x94>
	buf = rx.buf;
 8007aee:	462b      	mov	r3, r5
 8007af0:	682d      	ldr	r5, [r5, #0]
	rx.buf = NULL;
 8007af2:	2200      	movs	r2, #0
 8007af4:	601a      	str	r2, [r3, #0]
	if (rx.type == H4_EVT) {
 8007af6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007afa:	2b04      	cmp	r3, #4
 8007afc:	d07e      	beq.n	8007bfc <process_rx+0x160>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(uint8_t *)net_buf_user_data(buf) = type;
 8007afe:	2303      	movs	r3, #3
 8007b00:	752b      	strb	r3, [r5, #20]
		evt_flags = BT_HCI_EVT_FLAG_RECV;
 8007b02:	2402      	movs	r4, #2
	reset_rx();
 8007b04:	f7ff ff24 	bl	8007950 <reset_rx>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
 8007b08:	f014 0f01 	tst.w	r4, #1
 8007b0c:	f040 8091 	bne.w	8007c32 <process_rx+0x196>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
 8007b10:	f014 0f02 	tst.w	r4, #2
 8007b14:	d00c      	beq.n	8007b30 <process_rx+0x94>
		net_buf_put(&rx.fifo, buf);
 8007b16:	4629      	mov	r1, r5
 8007b18:	487a      	ldr	r0, [pc, #488]	; (8007d04 <process_rx+0x268>)
 8007b1a:	f013 fa45 	bl	801afa8 <net_buf_put>
 8007b1e:	e007      	b.n	8007b30 <process_rx+0x94>
		rx.discard -= h4_discard(h4_dev, rx.discard);
 8007b20:	4b77      	ldr	r3, [pc, #476]	; (8007d00 <process_rx+0x264>)
 8007b22:	6818      	ldr	r0, [r3, #0]
 8007b24:	f00f fc5e 	bl	80173e4 <h4_discard>
 8007b28:	4a74      	ldr	r2, [pc, #464]	; (8007cfc <process_rx+0x260>)
 8007b2a:	8bd3      	ldrh	r3, [r2, #30]
 8007b2c:	1a1b      	subs	r3, r3, r0
 8007b2e:	83d3      	strh	r3, [r2, #30]
}
 8007b30:	bd38      	pop	{r3, r4, r5, pc}
		rx.buf = get_rx(K_NO_WAIT);
 8007b32:	2000      	movs	r0, #0
 8007b34:	2100      	movs	r1, #0
 8007b36:	f7ff ff2b 	bl	8007990 <get_rx>
 8007b3a:	4b70      	ldr	r3, [pc, #448]	; (8007cfc <process_rx+0x260>)
 8007b3c:	6018      	str	r0, [r3, #0]
		if (!rx.buf) {
 8007b3e:	b178      	cbz	r0, 8007b60 <process_rx+0xc4>
		if (rx.remaining > net_buf_tailroom(rx.buf)) {
 8007b40:	4b6e      	ldr	r3, [pc, #440]	; (8007cfc <process_rx+0x260>)
 8007b42:	8b9c      	ldrh	r4, [r3, #28]
 8007b44:	3008      	adds	r0, #8
 8007b46:	f013 fac2 	bl	801b0ce <net_buf_simple_tailroom>
 8007b4a:	4284      	cmp	r4, r0
 8007b4c:	d83d      	bhi.n	8007bca <process_rx+0x12e>
		copy_hdr(rx.buf);
 8007b4e:	496b      	ldr	r1, [pc, #428]	; (8007cfc <process_rx+0x260>)
 8007b50:	6808      	ldr	r0, [r1, #0]
	net_buf_add_mem(buf, rx.hdr, rx.hdr_len);
 8007b52:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
 8007b56:	3124      	adds	r1, #36	; 0x24
 8007b58:	3008      	adds	r0, #8
 8007b5a:	f013 fa82 	bl	801b062 <net_buf_simple_add_mem>
 8007b5e:	e7ac      	b.n	8007aba <process_rx+0x1e>
			if (rx.discardable) {
 8007b60:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007b64:	b1c3      	cbz	r3, 8007b98 <process_rx+0xfc>
				BT_WARN("Discarding event 0x%02x", rx.evt.evt);
 8007b66:	f04f 0200 	mov.w	r2, #0
 8007b6a:	2302      	movs	r3, #2
 8007b6c:	f363 0202 	bfi	r2, r3, #0, #3
 8007b70:	f36f 02c5 	bfc	r2, #3, #3
 8007b74:	4b64      	ldr	r3, [pc, #400]	; (8007d08 <process_rx+0x26c>)
 8007b76:	4965      	ldr	r1, [pc, #404]	; (8007d0c <process_rx+0x270>)
 8007b78:	1a5b      	subs	r3, r3, r1
 8007b7a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8007b7e:	f363 128f 	bfi	r2, r3, #6, #10
 8007b82:	4c5e      	ldr	r4, [pc, #376]	; (8007cfc <process_rx+0x260>)
 8007b84:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 8007b88:	4861      	ldr	r0, [pc, #388]	; (8007d10 <process_rx+0x274>)
 8007b8a:	f7fc fb6f 	bl	800426c <log_1>
				rx.discard = rx.remaining;
 8007b8e:	8ba3      	ldrh	r3, [r4, #28]
 8007b90:	83e3      	strh	r3, [r4, #30]
				reset_rx();
 8007b92:	f7ff fedd 	bl	8007950 <reset_rx>
				return;
 8007b96:	e7cb      	b.n	8007b30 <process_rx+0x94>
			BT_WARN("Failed to allocate, deferring to rx_thread");
 8007b98:	f04f 0100 	mov.w	r1, #0
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	f363 0102 	bfi	r1, r3, #0, #3
 8007ba2:	f36f 01c5 	bfc	r1, #3, #3
 8007ba6:	4b58      	ldr	r3, [pc, #352]	; (8007d08 <process_rx+0x26c>)
 8007ba8:	4a58      	ldr	r2, [pc, #352]	; (8007d0c <process_rx+0x270>)
 8007baa:	1a9b      	subs	r3, r3, r2
 8007bac:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8007bb0:	f363 118f 	bfi	r1, r3, #6, #10
 8007bb4:	4857      	ldr	r0, [pc, #348]	; (8007d14 <process_rx+0x278>)
 8007bb6:	f7fc fcc9 	bl	800454c <log_0>
			uart_irq_rx_disable(h4_dev);
 8007bba:	4b51      	ldr	r3, [pc, #324]	; (8007d00 <process_rx+0x264>)
 8007bbc:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 8007bbe:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_disable) {
 8007bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d0b4      	beq.n	8007b30 <process_rx+0x94>
		api->irq_rx_disable(dev);
 8007bc6:	4798      	blx	r3
			return;
 8007bc8:	e7b2      	b.n	8007b30 <process_rx+0x94>
			BT_ERR("Not enough space in buffer");
 8007bca:	f04f 0100 	mov.w	r1, #0
 8007bce:	2301      	movs	r3, #1
 8007bd0:	f363 0102 	bfi	r1, r3, #0, #3
 8007bd4:	f36f 01c5 	bfc	r1, #3, #3
 8007bd8:	4b4b      	ldr	r3, [pc, #300]	; (8007d08 <process_rx+0x26c>)
 8007bda:	4a4c      	ldr	r2, [pc, #304]	; (8007d0c <process_rx+0x270>)
 8007bdc:	1a9b      	subs	r3, r3, r2
 8007bde:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8007be2:	f363 118f 	bfi	r1, r3, #6, #10
 8007be6:	484c      	ldr	r0, [pc, #304]	; (8007d18 <process_rx+0x27c>)
 8007be8:	f7fc fcb0 	bl	800454c <log_0>
			rx.discard = rx.remaining;
 8007bec:	4b43      	ldr	r3, [pc, #268]	; (8007cfc <process_rx+0x260>)
 8007bee:	8b9a      	ldrh	r2, [r3, #28]
 8007bf0:	83da      	strh	r2, [r3, #30]
			reset_rx();
 8007bf2:	f7ff fead 	bl	8007950 <reset_rx>
			return;
 8007bf6:	e79b      	b.n	8007b30 <process_rx+0x94>
	return 0;
 8007bf8:	2400      	movs	r4, #0
 8007bfa:	e76d      	b.n	8007ad8 <process_rx+0x3c>
		evt_flags = bt_hci_evt_get_flags(rx.evt.evt);
 8007bfc:	4b3f      	ldr	r3, [pc, #252]	; (8007cfc <process_rx+0x260>)
 8007bfe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
 8007c02:	3b05      	subs	r3, #5
 8007c04:	2b15      	cmp	r3, #21
 8007c06:	d80e      	bhi.n	8007c26 <process_rx+0x18a>
 8007c08:	e8df f003 	tbb	[pc, r3]
 8007c0c:	0d0d0d0b 	.word	0x0d0d0d0b
 8007c10:	0d0d0d0d 	.word	0x0d0d0d0d
 8007c14:	0d11110d 	.word	0x0d11110d
 8007c18:	0d110d0d 	.word	0x0d110d0d
 8007c1c:	0d0d0d0d 	.word	0x0d0d0d0d
 8007c20:	110d      	.short	0x110d
 8007c22:	2403      	movs	r4, #3
 8007c24:	e000      	b.n	8007c28 <process_rx+0x18c>
#endif /* defined(CONFIG_BT_CONN) */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
 8007c26:	2402      	movs	r4, #2
 8007c28:	2301      	movs	r3, #1
 8007c2a:	752b      	strb	r3, [r5, #20]
}
 8007c2c:	e76a      	b.n	8007b04 <process_rx+0x68>
		return BT_HCI_EVT_FLAG_RECV_PRIO;
 8007c2e:	2401      	movs	r4, #1
 8007c30:	e7fa      	b.n	8007c28 <process_rx+0x18c>
		bt_recv_prio(buf);
 8007c32:	4628      	mov	r0, r5
 8007c34:	f004 fb70 	bl	800c318 <bt_recv_prio>
 8007c38:	e76a      	b.n	8007b10 <process_rx+0x74>
	switch (rx.type) {
 8007c3a:	4b30      	ldr	r3, [pc, #192]	; (8007cfc <process_rx+0x260>)
 8007c3c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	f000 80cc 	beq.w	8007dde <process_rx+0x342>
 8007c46:	2b04      	cmp	r3, #4
 8007c48:	d16a      	bne.n	8007d20 <process_rx+0x284>
	int to_read = rx.hdr_len - rx.remaining;
 8007c4a:	4b2c      	ldr	r3, [pc, #176]	; (8007cfc <process_rx+0x260>)
 8007c4c:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 8007c50:	8b9a      	ldrh	r2, [r3, #28]
 8007c52:	1a89      	subs	r1, r1, r2
	rx.remaining -= uart_fifo_read(h4_dev, (uint8_t *)hdr + to_read,
 8007c54:	482a      	ldr	r0, [pc, #168]	; (8007d00 <process_rx+0x264>)
 8007c56:	6800      	ldr	r0, [r0, #0]
 8007c58:	3324      	adds	r3, #36	; 0x24
 8007c5a:	4419      	add	r1, r3
	const struct uart_driver_api *api =
 8007c5c:	6883      	ldr	r3, [r0, #8]
	if (api->fifo_read) {
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f000 80a5 	beq.w	8007db0 <process_rx+0x314>
		return api->fifo_read(dev, rx_data, size);
 8007c66:	4798      	blx	r3
 8007c68:	4a24      	ldr	r2, [pc, #144]	; (8007cfc <process_rx+0x260>)
 8007c6a:	8b93      	ldrh	r3, [r2, #28]
 8007c6c:	1a1b      	subs	r3, r3, r0
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	8393      	strh	r3, [r2, #28]
	if (rx.hdr_len == sizeof(*hdr) && rx.remaining < sizeof(*hdr)) {
 8007c72:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8007c76:	2a02      	cmp	r2, #2
 8007c78:	f000 809c 	beq.w	8007db4 <process_rx+0x318>
	if (!rx.remaining) {
 8007c7c:	4b1f      	ldr	r3, [pc, #124]	; (8007cfc <process_rx+0x260>)
 8007c7e:	8b9b      	ldrh	r3, [r3, #28]
 8007c80:	b993      	cbnz	r3, 8007ca8 <process_rx+0x20c>
		if (rx.evt.evt == BT_HCI_EVT_LE_META_EVENT &&
 8007c82:	4b1e      	ldr	r3, [pc, #120]	; (8007cfc <process_rx+0x260>)
 8007c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c86:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8007c8a:	4a24      	ldr	r2, [pc, #144]	; (8007d1c <process_rx+0x280>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	f000 80a1 	beq.w	8007dd4 <process_rx+0x338>
		rx.remaining = hdr->len - (rx.hdr_len - sizeof(*hdr));
 8007c92:	4a1a      	ldr	r2, [pc, #104]	; (8007cfc <process_rx+0x260>)
 8007c94:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8007c98:	f892 1022 	ldrb.w	r1, [r2, #34]	; 0x22
 8007c9c:	1a5b      	subs	r3, r3, r1
 8007c9e:	3302      	adds	r3, #2
 8007ca0:	8393      	strh	r3, [r2, #28]
		rx.have_hdr = true;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	f882 3020 	strb.w	r3, [r2, #32]
	if (rx.have_hdr && rx.buf) {
 8007ca8:	4b14      	ldr	r3, [pc, #80]	; (8007cfc <process_rx+0x260>)
 8007caa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	f43f af3e 	beq.w	8007b30 <process_rx+0x94>
 8007cb4:	4b11      	ldr	r3, [pc, #68]	; (8007cfc <process_rx+0x260>)
 8007cb6:	6818      	ldr	r0, [r3, #0]
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	f43f af39 	beq.w	8007b30 <process_rx+0x94>
		if (rx.remaining > net_buf_tailroom(rx.buf)) {
 8007cbe:	8b9c      	ldrh	r4, [r3, #28]
 8007cc0:	3008      	adds	r0, #8
 8007cc2:	f013 fa04 	bl	801b0ce <net_buf_simple_tailroom>
 8007cc6:	4284      	cmp	r4, r0
 8007cc8:	f240 80a6 	bls.w	8007e18 <process_rx+0x37c>
			BT_ERR("Not enough space in buffer");
 8007ccc:	f04f 0100 	mov.w	r1, #0
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	f363 0102 	bfi	r1, r3, #0, #3
 8007cd6:	f36f 01c5 	bfc	r1, #3, #3
 8007cda:	4b0b      	ldr	r3, [pc, #44]	; (8007d08 <process_rx+0x26c>)
 8007cdc:	4a0b      	ldr	r2, [pc, #44]	; (8007d0c <process_rx+0x270>)
 8007cde:	1a9b      	subs	r3, r3, r2
 8007ce0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8007ce4:	f363 118f 	bfi	r1, r3, #6, #10
 8007ce8:	480b      	ldr	r0, [pc, #44]	; (8007d18 <process_rx+0x27c>)
 8007cea:	f7fc fc2f 	bl	800454c <log_0>
			rx.discard = rx.remaining;
 8007cee:	4b03      	ldr	r3, [pc, #12]	; (8007cfc <process_rx+0x260>)
 8007cf0:	8b9a      	ldrh	r2, [r3, #28]
 8007cf2:	83da      	strh	r2, [r3, #30]
			reset_rx();
 8007cf4:	f7ff fe2c 	bl	8007950 <reset_rx>
 8007cf8:	e71a      	b.n	8007b30 <process_rx+0x94>
 8007cfa:	bf00      	nop
 8007cfc:	20000418 	.word	0x20000418
 8007d00:	20001f6c 	.word	0x20001f6c
 8007d04:	2000041c 	.word	0x2000041c
 8007d08:	0801d6f8 	.word	0x0801d6f8
 8007d0c:	0801d6d0 	.word	0x0801d6d0
 8007d10:	0801f79c 	.word	0x0801f79c
 8007d14:	0801f7b4 	.word	0x0801f7b4
 8007d18:	0801f780 	.word	0x0801f780
 8007d1c:	0002003e 	.word	0x0002003e
	if (uart_fifo_read(h4_dev, &rx.type, 1) != 1) {
 8007d20:	4b42      	ldr	r3, [pc, #264]	; (8007e2c <process_rx+0x390>)
 8007d22:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 8007d24:	6883      	ldr	r3, [r0, #8]
	if (api->fifo_read) {
 8007d26:	699b      	ldr	r3, [r3, #24]
 8007d28:	b123      	cbz	r3, 8007d34 <process_rx+0x298>
		return api->fifo_read(dev, rx_data, size);
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	4940      	ldr	r1, [pc, #256]	; (8007e30 <process_rx+0x394>)
 8007d2e:	4798      	blx	r3
 8007d30:	2801      	cmp	r0, #1
 8007d32:	d015      	beq.n	8007d60 <process_rx+0x2c4>
		BT_WARN("Unable to read H:4 packet type");
 8007d34:	f04f 0100 	mov.w	r1, #0
 8007d38:	2302      	movs	r3, #2
 8007d3a:	f363 0102 	bfi	r1, r3, #0, #3
 8007d3e:	f36f 01c5 	bfc	r1, #3, #3
 8007d42:	4b3c      	ldr	r3, [pc, #240]	; (8007e34 <process_rx+0x398>)
 8007d44:	4a3c      	ldr	r2, [pc, #240]	; (8007e38 <process_rx+0x39c>)
 8007d46:	1a9b      	subs	r3, r3, r2
 8007d48:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8007d4c:	f363 118f 	bfi	r1, r3, #6, #10
 8007d50:	483a      	ldr	r0, [pc, #232]	; (8007e3c <process_rx+0x3a0>)
 8007d52:	f7fc fbfb 	bl	800454c <log_0>
		rx.type = H4_NONE;
 8007d56:	4b3a      	ldr	r3, [pc, #232]	; (8007e40 <process_rx+0x3a4>)
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		return;
 8007d5e:	e6e7      	b.n	8007b30 <process_rx+0x94>
	switch (rx.type) {
 8007d60:	4b37      	ldr	r3, [pc, #220]	; (8007e40 <process_rx+0x3a4>)
 8007d62:	f893 1023 	ldrb.w	r1, [r3, #35]	; 0x23
 8007d66:	2902      	cmp	r1, #2
 8007d68:	d006      	beq.n	8007d78 <process_rx+0x2dc>
 8007d6a:	2904      	cmp	r1, #4
 8007d6c:	d10a      	bne.n	8007d84 <process_rx+0x2e8>
		rx.remaining = sizeof(rx.evt);
 8007d6e:	2202      	movs	r2, #2
 8007d70:	839a      	strh	r2, [r3, #28]
		rx.hdr_len = rx.remaining;
 8007d72:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		break;
 8007d76:	e6db      	b.n	8007b30 <process_rx+0x94>
		rx.remaining = sizeof(rx.acl);
 8007d78:	4b31      	ldr	r3, [pc, #196]	; (8007e40 <process_rx+0x3a4>)
 8007d7a:	2204      	movs	r2, #4
 8007d7c:	839a      	strh	r2, [r3, #28]
		rx.hdr_len = rx.remaining;
 8007d7e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		break;
 8007d82:	e6d5      	b.n	8007b30 <process_rx+0x94>
		BT_ERR("Unknown H:4 type 0x%02x", rx.type);
 8007d84:	f04f 0200 	mov.w	r2, #0
 8007d88:	2301      	movs	r3, #1
 8007d8a:	f363 0202 	bfi	r2, r3, #0, #3
 8007d8e:	f36f 02c5 	bfc	r2, #3, #3
 8007d92:	4b28      	ldr	r3, [pc, #160]	; (8007e34 <process_rx+0x398>)
 8007d94:	4828      	ldr	r0, [pc, #160]	; (8007e38 <process_rx+0x39c>)
 8007d96:	1a1b      	subs	r3, r3, r0
 8007d98:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8007d9c:	f363 128f 	bfi	r2, r3, #6, #10
 8007da0:	4828      	ldr	r0, [pc, #160]	; (8007e44 <process_rx+0x3a8>)
 8007da2:	f7fc fa63 	bl	800426c <log_1>
		rx.type = H4_NONE;
 8007da6:	4b26      	ldr	r3, [pc, #152]	; (8007e40 <process_rx+0x3a4>)
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8007dae:	e6bf      	b.n	8007b30 <process_rx+0x94>
	return 0;
 8007db0:	2000      	movs	r0, #0
 8007db2:	e759      	b.n	8007c68 <process_rx+0x1cc>
	if (rx.hdr_len == sizeof(*hdr) && rx.remaining < sizeof(*hdr)) {
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	f63f af61 	bhi.w	8007c7c <process_rx+0x1e0>
		switch (rx.evt.evt) {
 8007dba:	4921      	ldr	r1, [pc, #132]	; (8007e40 <process_rx+0x3a4>)
 8007dbc:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
 8007dc0:	293e      	cmp	r1, #62	; 0x3e
 8007dc2:	f47f af5b 	bne.w	8007c7c <process_rx+0x1e0>
			rx.remaining++;
 8007dc6:	491e      	ldr	r1, [pc, #120]	; (8007e40 <process_rx+0x3a4>)
 8007dc8:	3301      	adds	r3, #1
 8007dca:	838b      	strh	r3, [r1, #28]
			rx.hdr_len++;
 8007dcc:	3201      	adds	r2, #1
 8007dce:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
			break;
 8007dd2:	e753      	b.n	8007c7c <process_rx+0x1e0>
			rx.discardable = true;
 8007dd4:	4b1a      	ldr	r3, [pc, #104]	; (8007e40 <process_rx+0x3a4>)
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8007ddc:	e759      	b.n	8007c92 <process_rx+0x1f6>
	int to_read = sizeof(*hdr) - rx.remaining;
 8007dde:	4b18      	ldr	r3, [pc, #96]	; (8007e40 <process_rx+0x3a4>)
 8007de0:	8b9a      	ldrh	r2, [r3, #28]
 8007de2:	f1c2 0104 	rsb	r1, r2, #4
	rx.remaining -= uart_fifo_read(h4_dev, (uint8_t *)hdr + to_read,
 8007de6:	4811      	ldr	r0, [pc, #68]	; (8007e2c <process_rx+0x390>)
 8007de8:	6800      	ldr	r0, [r0, #0]
 8007dea:	3324      	adds	r3, #36	; 0x24
 8007dec:	4419      	add	r1, r3
	const struct uart_driver_api *api =
 8007dee:	6883      	ldr	r3, [r0, #8]
	if (api->fifo_read) {
 8007df0:	699b      	ldr	r3, [r3, #24]
 8007df2:	b17b      	cbz	r3, 8007e14 <process_rx+0x378>
		return api->fifo_read(dev, rx_data, size);
 8007df4:	4798      	blx	r3
 8007df6:	4a12      	ldr	r2, [pc, #72]	; (8007e40 <process_rx+0x3a4>)
 8007df8:	8b93      	ldrh	r3, [r2, #28]
 8007dfa:	1a1b      	subs	r3, r3, r0
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	8393      	strh	r3, [r2, #28]
	if (!rx.remaining) {
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f47f af51 	bne.w	8007ca8 <process_rx+0x20c>
		rx.remaining = sys_le16_to_cpu(hdr->len);
 8007e06:	4613      	mov	r3, r2
 8007e08:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8007e0a:	839a      	strh	r2, [r3, #28]
		rx.have_hdr = true;
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	f883 2020 	strb.w	r2, [r3, #32]
}
 8007e12:	e749      	b.n	8007ca8 <process_rx+0x20c>
	return 0;
 8007e14:	2000      	movs	r0, #0
 8007e16:	e7ee      	b.n	8007df6 <process_rx+0x35a>
			copy_hdr(rx.buf);
 8007e18:	4909      	ldr	r1, [pc, #36]	; (8007e40 <process_rx+0x3a4>)
 8007e1a:	6808      	ldr	r0, [r1, #0]
	net_buf_add_mem(buf, rx.hdr, rx.hdr_len);
 8007e1c:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
 8007e20:	3124      	adds	r1, #36	; 0x24
 8007e22:	3008      	adds	r0, #8
 8007e24:	f013 f91d 	bl	801b062 <net_buf_simple_add_mem>
}
 8007e28:	e682      	b.n	8007b30 <process_rx+0x94>
 8007e2a:	bf00      	nop
 8007e2c:	20001f6c 	.word	0x20001f6c
 8007e30:	2000043b 	.word	0x2000043b
 8007e34:	0801d6f8 	.word	0x0801d6f8
 8007e38:	0801d6d0 	.word	0x0801d6d0
 8007e3c:	0801f7e0 	.word	0x0801f7e0
 8007e40:	20000418 	.word	0x20000418
 8007e44:	0801f800 	.word	0x0801f800

08007e48 <bt_uart_isr>:
{
 8007e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	while (uart_irq_update(h4_dev) && uart_irq_is_pending(h4_dev)) {
 8007e4a:	4b60      	ldr	r3, [pc, #384]	; (8007fcc <bt_uart_isr+0x184>)
 8007e4c:	6818      	ldr	r0, [r3, #0]
__syscall int uart_irq_update(const struct device *dev);

static inline int z_impl_uart_irq_update(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
 8007e4e:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update) {
 8007e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f000 80b8 	beq.w	8007fc8 <bt_uart_isr+0x180>
		return api->irq_update(dev);
 8007e58:	4798      	blx	r3
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	f000 80b4 	beq.w	8007fc8 <bt_uart_isr+0x180>
 8007e60:	4b5a      	ldr	r3, [pc, #360]	; (8007fcc <bt_uart_isr+0x184>)
 8007e62:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 8007e64:	6883      	ldr	r3, [r0, #8]
	if (api->irq_is_pending)	{
 8007e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	f000 80ad 	beq.w	8007fc8 <bt_uart_isr+0x180>
		return api->irq_is_pending(dev);
 8007e6e:	4798      	blx	r3
 8007e70:	2800      	cmp	r0, #0
 8007e72:	f000 80a9 	beq.w	8007fc8 <bt_uart_isr+0x180>
		if (uart_irq_tx_ready(h4_dev)) {
 8007e76:	4b55      	ldr	r3, [pc, #340]	; (8007fcc <bt_uart_isr+0x184>)
 8007e78:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 8007e7a:	6883      	ldr	r3, [r0, #8]
	if (api->irq_tx_ready) {
 8007e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7e:	b10b      	cbz	r3, 8007e84 <bt_uart_isr+0x3c>
		return api->irq_tx_ready(dev);
 8007e80:	4798      	blx	r3
 8007e82:	b958      	cbnz	r0, 8007e9c <bt_uart_isr+0x54>
		if (uart_irq_rx_ready(h4_dev)) {
 8007e84:	4b51      	ldr	r3, [pc, #324]	; (8007fcc <bt_uart_isr+0x184>)
 8007e86:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 8007e88:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_ready) {
 8007e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d0dc      	beq.n	8007e4a <bt_uart_isr+0x2>
		return api->irq_rx_ready(dev);
 8007e90:	4798      	blx	r3
 8007e92:	2800      	cmp	r0, #0
 8007e94:	d0d9      	beq.n	8007e4a <bt_uart_isr+0x2>
			process_rx();
 8007e96:	f7ff fe01 	bl	8007a9c <process_rx>
 8007e9a:	e7d6      	b.n	8007e4a <bt_uart_isr+0x2>
	if (!tx.buf) {
 8007e9c:	4b4c      	ldr	r3, [pc, #304]	; (8007fd0 <bt_uart_isr+0x188>)
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	b35b      	cbz	r3, 8007efa <bt_uart_isr+0xb2>
	if (!tx.type) {
 8007ea2:	4b4b      	ldr	r3, [pc, #300]	; (8007fd0 <bt_uart_isr+0x188>)
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d15e      	bne.n	8007f68 <bt_uart_isr+0x120>
		switch (bt_buf_get_type(tx.buf)) {
 8007eaa:	4b49      	ldr	r3, [pc, #292]	; (8007fd0 <bt_uart_isr+0x188>)
 8007eac:	685b      	ldr	r3, [r3, #4]
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
 8007eae:	7d1b      	ldrb	r3, [r3, #20]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d044      	beq.n	8007f3e <bt_uart_isr+0xf6>
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d146      	bne.n	8007f46 <bt_uart_isr+0xfe>
			tx.type = H4_ACL;
 8007eb8:	4b45      	ldr	r3, [pc, #276]	; (8007fd0 <bt_uart_isr+0x188>)
 8007eba:	2202      	movs	r2, #2
 8007ebc:	701a      	strb	r2, [r3, #0]
		bytes = uart_fifo_fill(h4_dev, &tx.type, 1);
 8007ebe:	4b43      	ldr	r3, [pc, #268]	; (8007fcc <bt_uart_isr+0x184>)
 8007ec0:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 8007ec2:	6883      	ldr	r3, [r0, #8]
	if (api->fifo_fill) {
 8007ec4:	695b      	ldr	r3, [r3, #20]
 8007ec6:	b123      	cbz	r3, 8007ed2 <bt_uart_isr+0x8a>
		return api->fifo_fill(dev, tx_data, size);
 8007ec8:	2201      	movs	r2, #1
 8007eca:	4941      	ldr	r1, [pc, #260]	; (8007fd0 <bt_uart_isr+0x188>)
 8007ecc:	4798      	blx	r3
		if (bytes != 1) {
 8007ece:	2801      	cmp	r0, #1
 8007ed0:	d04a      	beq.n	8007f68 <bt_uart_isr+0x120>
			BT_WARN("Unable to send H:4 type");
 8007ed2:	2302      	movs	r3, #2
 8007ed4:	f363 0402 	bfi	r4, r3, #0, #3
 8007ed8:	f36f 04c5 	bfc	r4, #3, #3
 8007edc:	4b3d      	ldr	r3, [pc, #244]	; (8007fd4 <bt_uart_isr+0x18c>)
 8007ede:	4a3e      	ldr	r2, [pc, #248]	; (8007fd8 <bt_uart_isr+0x190>)
 8007ee0:	1a9b      	subs	r3, r3, r2
 8007ee2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8007ee6:	f363 148f 	bfi	r4, r3, #6, #10
 8007eea:	4621      	mov	r1, r4
 8007eec:	483b      	ldr	r0, [pc, #236]	; (8007fdc <bt_uart_isr+0x194>)
 8007eee:	f7fc fb2d 	bl	800454c <log_0>
			tx.type = H4_NONE;
 8007ef2:	4b37      	ldr	r3, [pc, #220]	; (8007fd0 <bt_uart_isr+0x188>)
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	701a      	strb	r2, [r3, #0]
			return;
 8007ef8:	e7c4      	b.n	8007e84 <bt_uart_isr+0x3c>
		tx.buf = net_buf_get(&tx.fifo, K_NO_WAIT);
 8007efa:	4f35      	ldr	r7, [pc, #212]	; (8007fd0 <bt_uart_isr+0x188>)
 8007efc:	2200      	movs	r2, #0
 8007efe:	2300      	movs	r3, #0
 8007f00:	f107 0008 	add.w	r0, r7, #8
 8007f04:	f013 f831 	bl	801af6a <net_buf_get>
 8007f08:	6078      	str	r0, [r7, #4]
		if (!tx.buf) {
 8007f0a:	2800      	cmp	r0, #0
 8007f0c:	d1c9      	bne.n	8007ea2 <bt_uart_isr+0x5a>
			BT_ERR("TX interrupt but no pending buffer!");
 8007f0e:	2301      	movs	r3, #1
 8007f10:	f363 0602 	bfi	r6, r3, #0, #3
 8007f14:	f36f 06c5 	bfc	r6, #3, #3
 8007f18:	4b2e      	ldr	r3, [pc, #184]	; (8007fd4 <bt_uart_isr+0x18c>)
 8007f1a:	4a2f      	ldr	r2, [pc, #188]	; (8007fd8 <bt_uart_isr+0x190>)
 8007f1c:	1a9b      	subs	r3, r3, r2
 8007f1e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8007f22:	f363 168f 	bfi	r6, r3, #6, #10
 8007f26:	4631      	mov	r1, r6
 8007f28:	482d      	ldr	r0, [pc, #180]	; (8007fe0 <bt_uart_isr+0x198>)
 8007f2a:	f7fc fb0f 	bl	800454c <log_0>
			uart_irq_tx_disable(h4_dev);
 8007f2e:	4b27      	ldr	r3, [pc, #156]	; (8007fcc <bt_uart_isr+0x184>)
 8007f30:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 8007f32:	6883      	ldr	r3, [r0, #8]
	if (api->irq_tx_disable) {
 8007f34:	6a1b      	ldr	r3, [r3, #32]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d0a4      	beq.n	8007e84 <bt_uart_isr+0x3c>
		api->irq_tx_disable(dev);
 8007f3a:	4798      	blx	r3
			return;
 8007f3c:	e7a2      	b.n	8007e84 <bt_uart_isr+0x3c>
			tx.type = H4_CMD;
 8007f3e:	4b24      	ldr	r3, [pc, #144]	; (8007fd0 <bt_uart_isr+0x188>)
 8007f40:	2201      	movs	r2, #1
 8007f42:	701a      	strb	r2, [r3, #0]
			break;
 8007f44:	e7bb      	b.n	8007ebe <bt_uart_isr+0x76>
			BT_ERR("Unknown buffer type");
 8007f46:	2301      	movs	r3, #1
 8007f48:	f363 0502 	bfi	r5, r3, #0, #3
 8007f4c:	f36f 05c5 	bfc	r5, #3, #3
 8007f50:	4b20      	ldr	r3, [pc, #128]	; (8007fd4 <bt_uart_isr+0x18c>)
 8007f52:	4a21      	ldr	r2, [pc, #132]	; (8007fd8 <bt_uart_isr+0x190>)
 8007f54:	1a9b      	subs	r3, r3, r2
 8007f56:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8007f5a:	f363 158f 	bfi	r5, r3, #6, #10
 8007f5e:	4629      	mov	r1, r5
 8007f60:	4820      	ldr	r0, [pc, #128]	; (8007fe4 <bt_uart_isr+0x19c>)
 8007f62:	f7fc faf3 	bl	800454c <log_0>
			goto done;
 8007f66:	e014      	b.n	8007f92 <bt_uart_isr+0x14a>
	bytes = uart_fifo_fill(h4_dev, tx.buf->data, tx.buf->len);
 8007f68:	4b18      	ldr	r3, [pc, #96]	; (8007fcc <bt_uart_isr+0x184>)
 8007f6a:	6818      	ldr	r0, [r3, #0]
 8007f6c:	4b18      	ldr	r3, [pc, #96]	; (8007fd0 <bt_uart_isr+0x188>)
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	6899      	ldr	r1, [r3, #8]
 8007f72:	899a      	ldrh	r2, [r3, #12]
	const struct uart_driver_api *api =
 8007f74:	6883      	ldr	r3, [r0, #8]
	if (api->fifo_fill) {
 8007f76:	695b      	ldr	r3, [r3, #20]
 8007f78:	b323      	cbz	r3, 8007fc4 <bt_uart_isr+0x17c>
		return api->fifo_fill(dev, tx_data, size);
 8007f7a:	4798      	blx	r3
 8007f7c:	4601      	mov	r1, r0
	net_buf_pull(tx.buf, bytes);
 8007f7e:	4f14      	ldr	r7, [pc, #80]	; (8007fd0 <bt_uart_isr+0x188>)
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	3008      	adds	r0, #8
 8007f84:	f013 f887 	bl	801b096 <net_buf_simple_pull>
	if (tx.buf->len) {
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	899b      	ldrh	r3, [r3, #12]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	f47f af79 	bne.w	8007e84 <bt_uart_isr+0x3c>
	tx.type = H4_NONE;
 8007f92:	4f0f      	ldr	r7, [pc, #60]	; (8007fd0 <bt_uart_isr+0x188>)
 8007f94:	2300      	movs	r3, #0
 8007f96:	703b      	strb	r3, [r7, #0]
	net_buf_unref(tx.buf);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f013 f812 	bl	801afc2 <net_buf_unref>
	tx.buf = net_buf_get(&tx.fifo, K_NO_WAIT);
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	f107 0008 	add.w	r0, r7, #8
 8007fa6:	f012 ffe0 	bl	801af6a <net_buf_get>
 8007faa:	6078      	str	r0, [r7, #4]
	if (!tx.buf) {
 8007fac:	2800      	cmp	r0, #0
 8007fae:	f47f af69 	bne.w	8007e84 <bt_uart_isr+0x3c>
		uart_irq_tx_disable(h4_dev);
 8007fb2:	4b06      	ldr	r3, [pc, #24]	; (8007fcc <bt_uart_isr+0x184>)
 8007fb4:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 8007fb6:	6883      	ldr	r3, [r0, #8]
	if (api->irq_tx_disable) {
 8007fb8:	6a1b      	ldr	r3, [r3, #32]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	f43f af62 	beq.w	8007e84 <bt_uart_isr+0x3c>
		api->irq_tx_disable(dev);
 8007fc0:	4798      	blx	r3
 8007fc2:	e75f      	b.n	8007e84 <bt_uart_isr+0x3c>
	return 0;
 8007fc4:	2100      	movs	r1, #0
 8007fc6:	e7da      	b.n	8007f7e <bt_uart_isr+0x136>
}
 8007fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	20001f6c 	.word	0x20001f6c
 8007fd0:	20000440 	.word	0x20000440
 8007fd4:	0801d6f8 	.word	0x0801d6f8
 8007fd8:	0801d6d0 	.word	0x0801d6d0
 8007fdc:	0801f850 	.word	0x0801f850
 8007fe0:	0801f818 	.word	0x0801f818
 8007fe4:	0801f83c 	.word	0x0801f83c

08007fe8 <bt_uart_init>:
	.open		= h4_open,
	.send		= h4_send,
};

static int bt_uart_init(const struct device *unused)
{
 8007fe8:	b508      	push	{r3, lr}
 8007fea:	4807      	ldr	r0, [pc, #28]	; (8008008 <bt_uart_init+0x20>)
 8007fec:	f00b fab6 	bl	801355c <z_impl_device_get_binding>
	ARG_UNUSED(unused);

	h4_dev = device_get_binding(CONFIG_BT_UART_ON_DEV_NAME);
 8007ff0:	4b06      	ldr	r3, [pc, #24]	; (800800c <bt_uart_init+0x24>)
 8007ff2:	6018      	str	r0, [r3, #0]
	if (!h4_dev) {
 8007ff4:	b120      	cbz	r0, 8008000 <bt_uart_init+0x18>
		return -EINVAL;
	}

	bt_hci_driver_register(&drv);
 8007ff6:	4806      	ldr	r0, [pc, #24]	; (8008010 <bt_uart_init+0x28>)
 8007ff8:	f004 f9ac 	bl	800c354 <bt_hci_driver_register>

	return 0;
 8007ffc:	2000      	movs	r0, #0
}
 8007ffe:	bd08      	pop	{r3, pc}
		return -EINVAL;
 8008000:	f06f 0015 	mvn.w	r0, #21
 8008004:	e7fb      	b.n	8007ffe <bt_uart_init+0x16>
 8008006:	bf00      	nop
 8008008:	0801ec88 	.word	0x0801ec88
 800800c:	20001f6c 	.word	0x20001f6c
 8008010:	0801f878 	.word	0x0801f878

08008014 <bt_hci_transport_setup>:
{
 8008014:	b508      	push	{r3, lr}
	h4_discard(h4_dev, 32);
 8008016:	2120      	movs	r1, #32
 8008018:	4b02      	ldr	r3, [pc, #8]	; (8008024 <bt_hci_transport_setup+0x10>)
 800801a:	6818      	ldr	r0, [r3, #0]
 800801c:	f00f f9e2 	bl	80173e4 <h4_discard>
}
 8008020:	2000      	movs	r0, #0
 8008022:	bd08      	pop	{r3, pc}
 8008024:	20001f6c 	.word	0x20001f6c

08008028 <h4_open>:
{
 8008028:	b510      	push	{r4, lr}
 800802a:	b088      	sub	sp, #32
	uart_irq_rx_disable(h4_dev);
 800802c:	4b19      	ldr	r3, [pc, #100]	; (8008094 <h4_open+0x6c>)
 800802e:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 8008030:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_disable) {
 8008032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008034:	b103      	cbz	r3, 8008038 <h4_open+0x10>
		api->irq_rx_disable(dev);
 8008036:	4798      	blx	r3
	uart_irq_tx_disable(h4_dev);
 8008038:	4b16      	ldr	r3, [pc, #88]	; (8008094 <h4_open+0x6c>)
 800803a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 800803c:	6883      	ldr	r3, [r0, #8]
	if (api->irq_tx_disable) {
 800803e:	6a1b      	ldr	r3, [r3, #32]
 8008040:	b103      	cbz	r3, 8008044 <h4_open+0x1c>
		api->irq_tx_disable(dev);
 8008042:	4798      	blx	r3
	ret = bt_hci_transport_setup(h4_dev);
 8008044:	4b13      	ldr	r3, [pc, #76]	; (8008094 <h4_open+0x6c>)
 8008046:	6818      	ldr	r0, [r3, #0]
 8008048:	f7ff ffe4 	bl	8008014 <bt_hci_transport_setup>
	if (ret < 0) {
 800804c:	2800      	cmp	r0, #0
 800804e:	db1e      	blt.n	800808e <h4_open+0x66>
	uart_irq_callback_set(h4_dev, bt_uart_isr);
 8008050:	4b10      	ldr	r3, [pc, #64]	; (8008094 <h4_open+0x6c>)
 8008052:	6818      	ldr	r0, [r3, #0]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
 8008054:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
 8008056:	b123      	cbz	r3, 8008062 <h4_open+0x3a>
 8008058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800805a:	b113      	cbz	r3, 8008062 <h4_open+0x3a>
		api->irq_callback_set(dev, cb, user_data);
 800805c:	2200      	movs	r2, #0
 800805e:	490e      	ldr	r1, [pc, #56]	; (8008098 <h4_open+0x70>)
 8008060:	4798      	blx	r3
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8008062:	2200      	movs	r2, #0
 8008064:	2300      	movs	r3, #0
 8008066:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800806a:	2400      	movs	r4, #0
 800806c:	9404      	str	r4, [sp, #16]
 800806e:	f06f 0307 	mvn.w	r3, #7
 8008072:	9303      	str	r3, [sp, #12]
 8008074:	9402      	str	r4, [sp, #8]
 8008076:	9401      	str	r4, [sp, #4]
 8008078:	9400      	str	r4, [sp, #0]
 800807a:	4b08      	ldr	r3, [pc, #32]	; (800809c <h4_open+0x74>)
 800807c:	f640 0298 	movw	r2, #2200	; 0x898
 8008080:	4907      	ldr	r1, [pc, #28]	; (80080a0 <h4_open+0x78>)
 8008082:	4808      	ldr	r0, [pc, #32]	; (80080a4 <h4_open+0x7c>)
 8008084:	f014 fec1 	bl	801ce0a <z_impl_k_thread_create>
	return 0;
 8008088:	4620      	mov	r0, r4
}
 800808a:	b008      	add	sp, #32
 800808c:	bd10      	pop	{r4, pc}
		return -EIO;
 800808e:	f06f 0004 	mvn.w	r0, #4
 8008092:	e7fa      	b.n	800808a <h4_open+0x62>
 8008094:	20001f6c 	.word	0x20001f6c
 8008098:	08007e49 	.word	0x08007e49
 800809c:	080079c5 	.word	0x080079c5
 80080a0:	20003dd0 	.word	0x20003dd0
 80080a4:	20000ca0 	.word	0x20000ca0

080080a8 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 80080a8:	4b0b      	ldr	r3, [pc, #44]	; (80080d8 <elapsed+0x30>)
 80080aa:	6899      	ldr	r1, [r3, #8]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 80080ac:	681a      	ldr	r2, [r3, #0]
	uint32_t val2 = SysTick->VAL;	/* C */
 80080ae:	6898      	ldr	r0, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 80080b0:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80080b4:	d101      	bne.n	80080ba <elapsed+0x12>
	    || (val1 < val2)) {
 80080b6:	4281      	cmp	r1, r0
 80080b8:	d207      	bcs.n	80080ca <elapsed+0x22>
		overflow_cyc += last_load;
 80080ba:	4b08      	ldr	r3, [pc, #32]	; (80080dc <elapsed+0x34>)
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	4908      	ldr	r1, [pc, #32]	; (80080e0 <elapsed+0x38>)
 80080c0:	6809      	ldr	r1, [r1, #0]
 80080c2:	440a      	add	r2, r1
 80080c4:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 80080c6:	4b04      	ldr	r3, [pc, #16]	; (80080d8 <elapsed+0x30>)
 80080c8:	681b      	ldr	r3, [r3, #0]
	}

	return (last_load - val2) + overflow_cyc;
 80080ca:	4b05      	ldr	r3, [pc, #20]	; (80080e0 <elapsed+0x38>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	1a1b      	subs	r3, r3, r0
 80080d0:	4a02      	ldr	r2, [pc, #8]	; (80080dc <elapsed+0x34>)
 80080d2:	6810      	ldr	r0, [r2, #0]
}
 80080d4:	4418      	add	r0, r3
 80080d6:	4770      	bx	lr
 80080d8:	e000e010 	.word	0xe000e010
 80080dc:	20001f7c 	.word	0x20001f7c
 80080e0:	20001f78 	.word	0x20001f78

080080e4 <z_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void z_clock_isr(void *arg)
{
 80080e4:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	uint32_t dticks;

	/* Update overflow_cyc and clear COUNTFLAG by invoking elapsed() */
	elapsed();
 80080e6:	f7ff ffdf 	bl	80080a8 <elapsed>

	/* Increment the amount of HW cycles elapsed (complete counter
	 * cycles) and announce the progress to the kernel.
	 */
	cycle_count += overflow_cyc;
 80080ea:	4b0c      	ldr	r3, [pc, #48]	; (800811c <z_clock_isr+0x38>)
 80080ec:	6818      	ldr	r0, [r3, #0]
 80080ee:	4a0c      	ldr	r2, [pc, #48]	; (8008120 <z_clock_isr+0x3c>)
 80080f0:	6811      	ldr	r1, [r2, #0]
 80080f2:	4408      	add	r0, r1
 80080f4:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 80080f6:	2200      	movs	r2, #0
 80080f8:	601a      	str	r2, [r3, #0]
		 * because the value has been updated before LOAD re-program.
		 *
		 * We can assess if this is the case by inspecting COUNTFLAG.
		 */

		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 80080fa:	4a0a      	ldr	r2, [pc, #40]	; (8008124 <z_clock_isr+0x40>)
 80080fc:	6811      	ldr	r1, [r2, #0]
 80080fe:	1a40      	subs	r0, r0, r1
 8008100:	4b09      	ldr	r3, [pc, #36]	; (8008128 <z_clock_isr+0x44>)
 8008102:	fba3 3000 	umull	r3, r0, r3, r0
 8008106:	0b00      	lsrs	r0, r0, #12
		announced_cycles += dticks * CYC_PER_TICK;
 8008108:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 800810c:	fb03 1300 	mla	r3, r3, r0, r1
 8008110:	6013      	str	r3, [r2, #0]
		z_clock_announce(dticks);
 8008112:	f00c fbd1 	bl	80148b8 <z_clock_announce>
	} else {
		z_clock_announce(1);
	}
	z_arm_int_exit();
 8008116:	f001 fad5 	bl	80096c4 <z_arm_exc_exit>
}
 800811a:	bd08      	pop	{r3, pc}
 800811c:	20001f7c 	.word	0x20001f7c
 8008120:	20001f74 	.word	0x20001f74
 8008124:	20001f70 	.word	0x20001f70
 8008128:	91a2b3c5 	.word	0x91a2b3c5

0800812c <z_clock_driver_init>:
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800812c:	4b09      	ldr	r3, [pc, #36]	; (8008154 <z_clock_driver_init+0x28>)
 800812e:	2210      	movs	r2, #16
 8008130:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
int z_clock_driver_init(const struct device *device)
{
	ARG_UNUSED(device);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 8008134:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8008138:	4b07      	ldr	r3, [pc, #28]	; (8008158 <z_clock_driver_init+0x2c>)
 800813a:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 800813c:	2000      	movs	r0, #0
 800813e:	4b07      	ldr	r3, [pc, #28]	; (800815c <z_clock_driver_init+0x30>)
 8008140:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8008142:	4b07      	ldr	r3, [pc, #28]	; (8008160 <z_clock_driver_init+0x34>)
 8008144:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 8008146:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	f042 0207 	orr.w	r2, r2, #7
 800814e:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	e000ed00 	.word	0xe000ed00
 8008158:	20001f78 	.word	0x20001f78
 800815c:	20001f7c 	.word	0x20001f7c
 8008160:	e000e010 	.word	0xe000e010

08008164 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
 8008164:	b538      	push	{r3, r4, r5, lr}
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_IDLE) && idle
 8008166:	b111      	cbz	r1, 800816e <z_clock_set_timeout+0xa>
	    && ticks == K_TICKS_FOREVER) {
 8008168:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800816c:	d03f      	beq.n	80081ee <z_clock_set_timeout+0x8a>
	}

#if defined(CONFIG_TICKLESS_KERNEL)
	uint32_t delay;

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 800816e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008172:	d046      	beq.n	8008202 <z_clock_set_timeout+0x9e>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
 8008174:	1e44      	subs	r4, r0, #1
 8008176:	f640 1318 	movw	r3, #2328	; 0x918
 800817a:	429c      	cmp	r4, r3
 800817c:	dc01      	bgt.n	8008182 <z_clock_set_timeout+0x1e>
 800817e:	2c00      	cmp	r4, #0
 8008180:	dd42      	ble.n	8008208 <z_clock_set_timeout+0xa4>
 8008182:	f640 1318 	movw	r3, #2328	; 0x918
 8008186:	429c      	cmp	r4, r3
 8008188:	dd01      	ble.n	800818e <z_clock_set_timeout+0x2a>
 800818a:	f640 1419 	movw	r4, #2329	; 0x919
 800818e:	f04f 0310 	mov.w	r3, #16
 8008192:	f3ef 8511 	mrs	r5, BASEPRI
 8008196:	f383 8811 	msr	BASEPRI, r3
 800819a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	uint32_t pending = elapsed();
 800819e:	f7ff ff83 	bl	80080a8 <elapsed>

	cycle_count += pending;
 80081a2:	4b25      	ldr	r3, [pc, #148]	; (8008238 <z_clock_set_timeout+0xd4>)
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	4410      	add	r0, r2
 80081a8:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
 80081aa:	4b24      	ldr	r3, [pc, #144]	; (800823c <z_clock_set_timeout+0xd8>)
 80081ac:	2200      	movs	r2, #0
 80081ae:	601a      	str	r2, [r3, #0]

	uint32_t unannounced = cycle_count - announced_cycles;
 80081b0:	4b23      	ldr	r3, [pc, #140]	; (8008240 <z_clock_set_timeout+0xdc>)
 80081b2:	681b      	ldr	r3, [r3, #0]

	if ((int32_t)unannounced < 0) {
 80081b4:	1ac1      	subs	r1, r0, r3
 80081b6:	d429      	bmi.n	800820c <z_clock_set_timeout+0xa8>
		 * delay is at least the minimum delay possible.
		 */
		last_load = MIN_DELAY;
	} else {
		/* Desired delay in the future */
		delay = ticks * CYC_PER_TICK;
 80081b8:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20

		/* Round delay up to next tick boundary */
		delay += unannounced;
 80081bc:	fb02 1404 	mla	r4, r2, r4, r1
		delay =
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 80081c0:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 80081c4:	341f      	adds	r4, #31
 80081c6:	491f      	ldr	r1, [pc, #124]	; (8008244 <z_clock_set_timeout+0xe0>)
 80081c8:	fba1 1404 	umull	r1, r4, r1, r4
 80081cc:	0b24      	lsrs	r4, r4, #12
		delay -= unannounced;
 80081ce:	1a18      	subs	r0, r3, r0
 80081d0:	fb02 0404 	mla	r4, r2, r4, r0
		delay = MAX(delay, MIN_DELAY);
 80081d4:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80081d8:	d91d      	bls.n	8008216 <z_clock_set_timeout+0xb2>
		if (delay > MAX_CYCLES) {
 80081da:	4b1b      	ldr	r3, [pc, #108]	; (8008248 <z_clock_set_timeout+0xe4>)
 80081dc:	429c      	cmp	r4, r3
 80081de:	d91c      	bls.n	800821a <z_clock_set_timeout+0xb6>
			last_load = MAX_CYCLES;
 80081e0:	4b1a      	ldr	r3, [pc, #104]	; (800824c <z_clock_set_timeout+0xe8>)
 80081e2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80081e6:	f502 4243 	add.w	r2, r2, #49920	; 0xc300
 80081ea:	601a      	str	r2, [r3, #0]
 80081ec:	e017      	b.n	800821e <z_clock_set_timeout+0xba>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 80081ee:	4a18      	ldr	r2, [pc, #96]	; (8008250 <z_clock_set_timeout+0xec>)
 80081f0:	6813      	ldr	r3, [r2, #0]
 80081f2:	f023 0301 	bic.w	r3, r3, #1
 80081f6:	6013      	str	r3, [r2, #0]
		last_load = TIMER_STOPPED;
 80081f8:	4b14      	ldr	r3, [pc, #80]	; (800824c <z_clock_set_timeout+0xe8>)
 80081fa:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80081fe:	601a      	str	r2, [r3, #0]
		return;
 8008200:	e018      	b.n	8008234 <z_clock_set_timeout+0xd0>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8008202:	f640 1019 	movw	r0, #2329	; 0x919
 8008206:	e7b5      	b.n	8008174 <z_clock_set_timeout+0x10>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
 8008208:	2400      	movs	r4, #0
 800820a:	e7c0      	b.n	800818e <z_clock_set_timeout+0x2a>
		last_load = MIN_DELAY;
 800820c:	4b0f      	ldr	r3, [pc, #60]	; (800824c <z_clock_set_timeout+0xe8>)
 800820e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008212:	601a      	str	r2, [r3, #0]
 8008214:	e003      	b.n	800821e <z_clock_set_timeout+0xba>
		delay = MAX(delay, MIN_DELAY);
 8008216:	f44f 6480 	mov.w	r4, #1024	; 0x400
		} else {
			last_load = delay;
 800821a:	4b0c      	ldr	r3, [pc, #48]	; (800824c <z_clock_set_timeout+0xe8>)
 800821c:	601c      	str	r4, [r3, #0]
		}
	}
	SysTick->LOAD = last_load - 1;
 800821e:	4b0b      	ldr	r3, [pc, #44]	; (800824c <z_clock_set_timeout+0xe8>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	3b01      	subs	r3, #1
 8008224:	4a0a      	ldr	r2, [pc, #40]	; (8008250 <z_clock_set_timeout+0xec>)
 8008226:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 8008228:	2300      	movs	r3, #0
 800822a:	6093      	str	r3, [r2, #8]
	__asm__ volatile(
 800822c:	f385 8811 	msr	BASEPRI, r5
 8008230:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
#endif
}
 8008234:	bd38      	pop	{r3, r4, r5, pc}
 8008236:	bf00      	nop
 8008238:	20001f74 	.word	0x20001f74
 800823c:	20001f7c 	.word	0x20001f7c
 8008240:	20001f70 	.word	0x20001f70
 8008244:	91a2b3c5 	.word	0x91a2b3c5
 8008248:	00ffdf20 	.word	0x00ffdf20
 800824c:	20001f78 	.word	0x20001f78
 8008250:	e000e010 	.word	0xe000e010

08008254 <z_clock_elapsed>:

uint32_t z_clock_elapsed(void)
{
 8008254:	b510      	push	{r4, lr}
	__asm__ volatile(
 8008256:	f04f 0310 	mov.w	r3, #16
 800825a:	f3ef 8411 	mrs	r4, BASEPRI
 800825e:	f383 8811 	msr	BASEPRI, r3
 8008262:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8008266:	f7ff ff1f 	bl	80080a8 <elapsed>
 800826a:	4b07      	ldr	r3, [pc, #28]	; (8008288 <z_clock_elapsed+0x34>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4418      	add	r0, r3
 8008270:	4b06      	ldr	r3, [pc, #24]	; (800828c <z_clock_elapsed+0x38>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	1ac0      	subs	r0, r0, r3
	__asm__ volatile(
 8008276:	f384 8811 	msr	BASEPRI, r4
 800827a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
 800827e:	4b04      	ldr	r3, [pc, #16]	; (8008290 <z_clock_elapsed+0x3c>)
 8008280:	fba3 3000 	umull	r3, r0, r3, r0
}
 8008284:	0b00      	lsrs	r0, r0, #12
 8008286:	bd10      	pop	{r4, pc}
 8008288:	20001f74 	.word	0x20001f74
 800828c:	20001f70 	.word	0x20001f70
 8008290:	91a2b3c5 	.word	0x91a2b3c5

08008294 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
 8008294:	b4f0      	push	{r4, r5, r6, r7}
 8008296:	b08c      	sub	sp, #48	; 0x30
 8008298:	4607      	mov	r7, r0
 800829a:	460e      	mov	r6, r1
	const unsigned int rconst[11] = {
 800829c:	ac01      	add	r4, sp, #4
 800829e:	4d2a      	ldr	r5, [pc, #168]	; (8008348 <tc_aes128_set_encrypt_key+0xb4>)
 80082a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80082a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80082a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80082ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
 80082b0:	2f00      	cmp	r7, #0
 80082b2:	d045      	beq.n	8008340 <tc_aes128_set_encrypt_key+0xac>
 80082b4:	4638      	mov	r0, r7
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
 80082b6:	2e00      	cmp	r6, #0
 80082b8:	d044      	beq.n	8008344 <tc_aes128_set_encrypt_key+0xb0>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
 80082ba:	2300      	movs	r3, #0
 80082bc:	e00f      	b.n	80082de <tc_aes128_set_encrypt_key+0x4a>
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
 80082be:	f816 4023 	ldrb.w	r4, [r6, r3, lsl #2]
 80082c2:	eb06 0183 	add.w	r1, r6, r3, lsl #2
 80082c6:	784a      	ldrb	r2, [r1, #1]
 80082c8:	0412      	lsls	r2, r2, #16
 80082ca:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
 80082ce:	788c      	ldrb	r4, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
 80082d0:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
 80082d4:	78c9      	ldrb	r1, [r1, #3]
 80082d6:	430a      	orrs	r2, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
 80082d8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < Nk; ++i) {
 80082dc:	3301      	adds	r3, #1
 80082de:	2b03      	cmp	r3, #3
 80082e0:	d9ed      	bls.n	80082be <tc_aes128_set_encrypt_key+0x2a>
 80082e2:	e006      	b.n	80082f2 <tc_aes128_set_encrypt_key+0x5e>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
 80082e4:	1f19      	subs	r1, r3, #4
 80082e6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80082ea:	404a      	eors	r2, r1
 80082ec:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
 80082f0:	3301      	adds	r3, #1
 80082f2:	2b2b      	cmp	r3, #43	; 0x2b
 80082f4:	d820      	bhi.n	8008338 <tc_aes128_set_encrypt_key+0xa4>
		t = s->words[i-1];
 80082f6:	1e5a      	subs	r2, r3, #1
 80082f8:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		if ((i % Nk) == 0) {
 80082fc:	f013 0f03 	tst.w	r3, #3
 8008300:	d1f0      	bne.n	80082e4 <tc_aes128_set_encrypt_key+0x50>
	return (((a) >> 24)|((a) << 8));
 8008302:	ea4f 6232 	mov.w	r2, r2, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
 8008306:	0e11      	lsrs	r1, r2, #24
 8008308:	4c10      	ldr	r4, [pc, #64]	; (800834c <tc_aes128_set_encrypt_key+0xb8>)
 800830a:	5c65      	ldrb	r5, [r4, r1]
 800830c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8008310:	5c61      	ldrb	r1, [r4, r1]
 8008312:	0409      	lsls	r1, r1, #16
 8008314:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
 8008318:	f3c2 2507 	ubfx	r5, r2, #8, #8
 800831c:	5d65      	ldrb	r5, [r4, r5]
 800831e:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8008322:	b2d2      	uxtb	r2, r2
 8008324:	5ca2      	ldrb	r2, [r4, r2]
 8008326:	4311      	orrs	r1, r2
 8008328:	f023 0203 	bic.w	r2, r3, #3
 800832c:	ac0c      	add	r4, sp, #48	; 0x30
 800832e:	4422      	add	r2, r4
 8008330:	f852 2c2c 	ldr.w	r2, [r2, #-44]
 8008334:	404a      	eors	r2, r1
 8008336:	e7d5      	b.n	80082e4 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
 8008338:	2001      	movs	r0, #1
}
 800833a:	b00c      	add	sp, #48	; 0x30
 800833c:	bcf0      	pop	{r4, r5, r6, r7}
 800833e:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 8008340:	2000      	movs	r0, #0
 8008342:	e7fa      	b.n	800833a <tc_aes128_set_encrypt_key+0xa6>
		return TC_CRYPTO_FAIL;
 8008344:	2000      	movs	r0, #0
 8008346:	e7f8      	b.n	800833a <tc_aes128_set_encrypt_key+0xa6>
 8008348:	0801d7e0 	.word	0x0801d7e0
 800834c:	0801f898 	.word	0x0801f898

08008350 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
 8008350:	2800      	cmp	r0, #0
 8008352:	f000 839a 	beq.w	8008a8a <tc_aes_encrypt+0x73a>
{
 8008356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800835a:	b088      	sub	sp, #32
 800835c:	4616      	mov	r6, r2
 800835e:	4607      	mov	r7, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
 8008360:	2900      	cmp	r1, #0
 8008362:	f000 8394 	beq.w	8008a8e <tc_aes_encrypt+0x73e>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
 8008366:	2a00      	cmp	r2, #0
 8008368:	f000 8393 	beq.w	8008a92 <tc_aes_encrypt+0x742>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
 800836c:	2310      	movs	r3, #16
 800836e:	460a      	mov	r2, r1
 8008370:	4619      	mov	r1, r3
 8008372:	eb0d 0003 	add.w	r0, sp, r3
 8008376:	f00f f845 	bl	8017404 <_copy>
	add_round_key(state, s->words);
 800837a:	4635      	mov	r5, r6
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
 800837c:	6833      	ldr	r3, [r6, #0]
 800837e:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8008382:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
 8008386:	f88d 2010 	strb.w	r2, [sp, #16]
 800838a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800838e:	f89d 1011 	ldrb.w	r1, [sp, #17]
 8008392:	404a      	eors	r2, r1
 8008394:	f88d 2011 	strb.w	r2, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
 8008398:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800839c:	f89d 1012 	ldrb.w	r1, [sp, #18]
 80083a0:	404a      	eors	r2, r1
 80083a2:	f88d 2012 	strb.w	r2, [sp, #18]
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	f89d 2013 	ldrb.w	r2, [sp, #19]
 80083ac:	4053      	eors	r3, r2
 80083ae:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
 80083b2:	6873      	ldr	r3, [r6, #4]
 80083b4:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80083b8:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
 80083bc:	f88d 2014 	strb.w	r2, [sp, #20]
 80083c0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80083c4:	f89d 1015 	ldrb.w	r1, [sp, #21]
 80083c8:	404a      	eors	r2, r1
 80083ca:	f88d 2015 	strb.w	r2, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
 80083ce:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80083d2:	f89d 1016 	ldrb.w	r1, [sp, #22]
 80083d6:	404a      	eors	r2, r1
 80083d8:	f88d 2016 	strb.w	r2, [sp, #22]
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80083e2:	4053      	eors	r3, r2
 80083e4:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
 80083e8:	68b3      	ldr	r3, [r6, #8]
 80083ea:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80083ee:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
 80083f2:	f88d 2018 	strb.w	r2, [sp, #24]
 80083f6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80083fa:	f89d 1019 	ldrb.w	r1, [sp, #25]
 80083fe:	404a      	eors	r2, r1
 8008400:	f88d 2019 	strb.w	r2, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
 8008404:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008408:	f89d 101a 	ldrb.w	r1, [sp, #26]
 800840c:	404a      	eors	r2, r1
 800840e:	f88d 201a 	strb.w	r2, [sp, #26]
 8008412:	b2db      	uxtb	r3, r3
 8008414:	f89d 201b 	ldrb.w	r2, [sp, #27]
 8008418:	4053      	eors	r3, r2
 800841a:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
 800841e:	68f3      	ldr	r3, [r6, #12]
 8008420:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8008424:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
 8008428:	f88d 201c 	strb.w	r2, [sp, #28]
 800842c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008430:	f89d 101d 	ldrb.w	r1, [sp, #29]
 8008434:	404a      	eors	r2, r1
 8008436:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
 800843a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800843e:	f89d 101e 	ldrb.w	r1, [sp, #30]
 8008442:	404a      	eors	r2, r1
 8008444:	f88d 201e 	strb.w	r2, [sp, #30]
 8008448:	b2db      	uxtb	r3, r3
 800844a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800844e:	4053      	eors	r3, r2
 8008450:	f88d 301f 	strb.w	r3, [sp, #31]

	for (i = 0; i < (Nr - 1); ++i) {
 8008454:	2400      	movs	r4, #0
}
 8008456:	e239      	b.n	80088cc <tc_aes_encrypt+0x57c>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
 8008458:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800845c:	f88d 3000 	strb.w	r3, [sp]
 8008460:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8008464:	f88d 3001 	strb.w	r3, [sp, #1]
 8008468:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800846c:	f88d 3002 	strb.w	r3, [sp, #2]
 8008470:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8008474:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
 8008478:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800847c:	f88d 3004 	strb.w	r3, [sp, #4]
 8008480:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8008484:	f88d 3005 	strb.w	r3, [sp, #5]
 8008488:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800848c:	f88d 3006 	strb.w	r3, [sp, #6]
 8008490:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8008494:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
 8008498:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800849c:	f88d 3008 	strb.w	r3, [sp, #8]
 80084a0:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80084a4:	f88d 3009 	strb.w	r3, [sp, #9]
 80084a8:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80084ac:	f88d 300a 	strb.w	r3, [sp, #10]
 80084b0:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80084b4:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
 80084b8:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80084bc:	f88d 300c 	strb.w	r3, [sp, #12]
 80084c0:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80084c4:	f88d 300d 	strb.w	r3, [sp, #13]
 80084c8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80084cc:	f88d 300e 	strb.w	r3, [sp, #14]
 80084d0:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80084d4:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
 80084d8:	2310      	movs	r3, #16
 80084da:	466a      	mov	r2, sp
 80084dc:	4619      	mov	r1, r3
 80084de:	eb0d 0003 	add.w	r0, sp, r3
 80084e2:	f00e ff8f 	bl	8017404 <_copy>
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
 80084e6:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80084ea:	f00e ff9c 	bl	8017426 <_double_byte>
 80084ee:	4680      	mov	r8, r0
 80084f0:	f89d 0011 	ldrb.w	r0, [sp, #17]
 80084f4:	f00e ff97 	bl	8017426 <_double_byte>
 80084f8:	4601      	mov	r1, r0
 80084fa:	f89d 0011 	ldrb.w	r0, [sp, #17]
 80084fe:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8008502:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8008506:	4041      	eors	r1, r0
 8008508:	ea88 0801 	eor.w	r8, r8, r1
 800850c:	ea82 0208 	eor.w	r2, r2, r8
 8008510:	4053      	eors	r3, r2
 8008512:	f88d 3000 	strb.w	r3, [sp]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
 8008516:	f89d 8010 	ldrb.w	r8, [sp, #16]
 800851a:	f00e ff84 	bl	8017426 <_double_byte>
 800851e:	ea88 0800 	eor.w	r8, r8, r0
 8008522:	fa5f f888 	uxtb.w	r8, r8
 8008526:	f89d 0012 	ldrb.w	r0, [sp, #18]
 800852a:	f00e ff7c 	bl	8017426 <_double_byte>
 800852e:	4602      	mov	r2, r0
 8008530:	f89d 0012 	ldrb.w	r0, [sp, #18]
 8008534:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8008538:	4042      	eors	r2, r0
 800853a:	ea88 0802 	eor.w	r8, r8, r2
 800853e:	ea83 0308 	eor.w	r3, r3, r8
 8008542:	f88d 3001 	strb.w	r3, [sp, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
 8008546:	f89d 8010 	ldrb.w	r8, [sp, #16]
 800854a:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800854e:	ea88 0803 	eor.w	r8, r8, r3
 8008552:	f00e ff68 	bl	8017426 <_double_byte>
 8008556:	ea88 0800 	eor.w	r8, r8, r0
 800855a:	fa5f f888 	uxtb.w	r8, r8
 800855e:	f89d 0013 	ldrb.w	r0, [sp, #19]
 8008562:	f00e ff60 	bl	8017426 <_double_byte>
 8008566:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800856a:	4058      	eors	r0, r3
 800856c:	ea88 0800 	eor.w	r8, r8, r0
 8008570:	f88d 8002 	strb.w	r8, [sp, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
 8008574:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8008578:	f00e ff55 	bl	8017426 <_double_byte>
 800857c:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8008580:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8008584:	f89d 8012 	ldrb.w	r8, [sp, #18]
 8008588:	4050      	eors	r0, r2
 800858a:	4043      	eors	r3, r0
 800858c:	ea88 0803 	eor.w	r8, r8, r3
 8008590:	fa5f f888 	uxtb.w	r8, r8
 8008594:	f89d 0013 	ldrb.w	r0, [sp, #19]
 8008598:	f00e ff45 	bl	8017426 <_double_byte>
 800859c:	ea88 0800 	eor.w	r8, r8, r0
 80085a0:	f88d 8003 	strb.w	r8, [sp, #3]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
 80085a4:	f89d 0014 	ldrb.w	r0, [sp, #20]
 80085a8:	f00e ff3d 	bl	8017426 <_double_byte>
 80085ac:	4680      	mov	r8, r0
 80085ae:	f89d 0015 	ldrb.w	r0, [sp, #21]
 80085b2:	f00e ff38 	bl	8017426 <_double_byte>
 80085b6:	4601      	mov	r1, r0
 80085b8:	f89d 0015 	ldrb.w	r0, [sp, #21]
 80085bc:	f89d 2016 	ldrb.w	r2, [sp, #22]
 80085c0:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80085c4:	4041      	eors	r1, r0
 80085c6:	ea88 0801 	eor.w	r8, r8, r1
 80085ca:	ea82 0208 	eor.w	r2, r2, r8
 80085ce:	4053      	eors	r3, r2
 80085d0:	f88d 3004 	strb.w	r3, [sp, #4]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
 80085d4:	f89d 8014 	ldrb.w	r8, [sp, #20]
 80085d8:	f00e ff25 	bl	8017426 <_double_byte>
 80085dc:	ea88 0800 	eor.w	r8, r8, r0
 80085e0:	fa5f f888 	uxtb.w	r8, r8
 80085e4:	f89d 0016 	ldrb.w	r0, [sp, #22]
 80085e8:	f00e ff1d 	bl	8017426 <_double_byte>
 80085ec:	4602      	mov	r2, r0
 80085ee:	f89d 0016 	ldrb.w	r0, [sp, #22]
 80085f2:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80085f6:	4042      	eors	r2, r0
 80085f8:	ea88 0802 	eor.w	r8, r8, r2
 80085fc:	ea83 0308 	eor.w	r3, r3, r8
 8008600:	f88d 3005 	strb.w	r3, [sp, #5]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
 8008604:	f89d 8014 	ldrb.w	r8, [sp, #20]
 8008608:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800860c:	ea88 0803 	eor.w	r8, r8, r3
 8008610:	f00e ff09 	bl	8017426 <_double_byte>
 8008614:	ea88 0800 	eor.w	r8, r8, r0
 8008618:	fa5f f888 	uxtb.w	r8, r8
 800861c:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8008620:	f00e ff01 	bl	8017426 <_double_byte>
 8008624:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8008628:	4058      	eors	r0, r3
 800862a:	ea88 0800 	eor.w	r8, r8, r0
 800862e:	f88d 8006 	strb.w	r8, [sp, #6]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
 8008632:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8008636:	f00e fef6 	bl	8017426 <_double_byte>
 800863a:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800863e:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8008642:	f89d 8016 	ldrb.w	r8, [sp, #22]
 8008646:	4050      	eors	r0, r2
 8008648:	4043      	eors	r3, r0
 800864a:	ea88 0803 	eor.w	r8, r8, r3
 800864e:	fa5f f888 	uxtb.w	r8, r8
 8008652:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8008656:	f00e fee6 	bl	8017426 <_double_byte>
 800865a:	ea88 0800 	eor.w	r8, r8, r0
 800865e:	f88d 8007 	strb.w	r8, [sp, #7]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
 8008662:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8008666:	f00e fede 	bl	8017426 <_double_byte>
 800866a:	4680      	mov	r8, r0
 800866c:	f89d 0019 	ldrb.w	r0, [sp, #25]
 8008670:	f00e fed9 	bl	8017426 <_double_byte>
 8008674:	4601      	mov	r1, r0
 8008676:	f89d 0019 	ldrb.w	r0, [sp, #25]
 800867a:	f89d 201a 	ldrb.w	r2, [sp, #26]
 800867e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8008682:	4041      	eors	r1, r0
 8008684:	ea88 0801 	eor.w	r8, r8, r1
 8008688:	ea82 0208 	eor.w	r2, r2, r8
 800868c:	4053      	eors	r3, r2
 800868e:	f88d 3008 	strb.w	r3, [sp, #8]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
 8008692:	f89d 8018 	ldrb.w	r8, [sp, #24]
 8008696:	f00e fec6 	bl	8017426 <_double_byte>
 800869a:	ea88 0800 	eor.w	r8, r8, r0
 800869e:	fa5f f888 	uxtb.w	r8, r8
 80086a2:	f89d 001a 	ldrb.w	r0, [sp, #26]
 80086a6:	f00e febe 	bl	8017426 <_double_byte>
 80086aa:	4602      	mov	r2, r0
 80086ac:	f89d 001a 	ldrb.w	r0, [sp, #26]
 80086b0:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80086b4:	4042      	eors	r2, r0
 80086b6:	ea88 0802 	eor.w	r8, r8, r2
 80086ba:	ea83 0308 	eor.w	r3, r3, r8
 80086be:	f88d 3009 	strb.w	r3, [sp, #9]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
 80086c2:	f89d 8018 	ldrb.w	r8, [sp, #24]
 80086c6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80086ca:	ea88 0803 	eor.w	r8, r8, r3
 80086ce:	f00e feaa 	bl	8017426 <_double_byte>
 80086d2:	ea88 0800 	eor.w	r8, r8, r0
 80086d6:	fa5f f888 	uxtb.w	r8, r8
 80086da:	f89d 001b 	ldrb.w	r0, [sp, #27]
 80086de:	f00e fea2 	bl	8017426 <_double_byte>
 80086e2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80086e6:	4058      	eors	r0, r3
 80086e8:	ea88 0800 	eor.w	r8, r8, r0
 80086ec:	f88d 800a 	strb.w	r8, [sp, #10]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
 80086f0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80086f4:	f00e fe97 	bl	8017426 <_double_byte>
 80086f8:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80086fc:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8008700:	f89d 801a 	ldrb.w	r8, [sp, #26]
 8008704:	4050      	eors	r0, r2
 8008706:	4043      	eors	r3, r0
 8008708:	ea88 0803 	eor.w	r8, r8, r3
 800870c:	fa5f f888 	uxtb.w	r8, r8
 8008710:	f89d 001b 	ldrb.w	r0, [sp, #27]
 8008714:	f00e fe87 	bl	8017426 <_double_byte>
 8008718:	ea88 0800 	eor.w	r8, r8, r0
 800871c:	f88d 800b 	strb.w	r8, [sp, #11]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
 8008720:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8008724:	f00e fe7f 	bl	8017426 <_double_byte>
 8008728:	4680      	mov	r8, r0
 800872a:	f89d 001d 	ldrb.w	r0, [sp, #29]
 800872e:	f00e fe7a 	bl	8017426 <_double_byte>
 8008732:	4601      	mov	r1, r0
 8008734:	f89d 001d 	ldrb.w	r0, [sp, #29]
 8008738:	f89d 201e 	ldrb.w	r2, [sp, #30]
 800873c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8008740:	4041      	eors	r1, r0
 8008742:	ea88 0801 	eor.w	r8, r8, r1
 8008746:	ea82 0208 	eor.w	r2, r2, r8
 800874a:	4053      	eors	r3, r2
 800874c:	f88d 300c 	strb.w	r3, [sp, #12]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
 8008750:	f89d 801c 	ldrb.w	r8, [sp, #28]
 8008754:	f00e fe67 	bl	8017426 <_double_byte>
 8008758:	ea88 0800 	eor.w	r8, r8, r0
 800875c:	fa5f f888 	uxtb.w	r8, r8
 8008760:	f89d 001e 	ldrb.w	r0, [sp, #30]
 8008764:	f00e fe5f 	bl	8017426 <_double_byte>
 8008768:	4602      	mov	r2, r0
 800876a:	f89d 001e 	ldrb.w	r0, [sp, #30]
 800876e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8008772:	4042      	eors	r2, r0
 8008774:	ea88 0802 	eor.w	r8, r8, r2
 8008778:	ea83 0308 	eor.w	r3, r3, r8
 800877c:	f88d 300d 	strb.w	r3, [sp, #13]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
 8008780:	f89d 801c 	ldrb.w	r8, [sp, #28]
 8008784:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8008788:	ea88 0803 	eor.w	r8, r8, r3
 800878c:	f00e fe4b 	bl	8017426 <_double_byte>
 8008790:	ea88 0800 	eor.w	r8, r8, r0
 8008794:	fa5f f888 	uxtb.w	r8, r8
 8008798:	f89d 001f 	ldrb.w	r0, [sp, #31]
 800879c:	f00e fe43 	bl	8017426 <_double_byte>
 80087a0:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80087a4:	4058      	eors	r0, r3
 80087a6:	ea88 0800 	eor.w	r8, r8, r0
 80087aa:	f88d 800e 	strb.w	r8, [sp, #14]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
 80087ae:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80087b2:	f00e fe38 	bl	8017426 <_double_byte>
 80087b6:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80087ba:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80087be:	f89d 801e 	ldrb.w	r8, [sp, #30]
 80087c2:	4050      	eors	r0, r2
 80087c4:	4043      	eors	r3, r0
 80087c6:	ea88 0803 	eor.w	r8, r8, r3
 80087ca:	fa5f f888 	uxtb.w	r8, r8
 80087ce:	f89d 001f 	ldrb.w	r0, [sp, #31]
 80087d2:	f00e fe28 	bl	8017426 <_double_byte>
 80087d6:	ea88 0800 	eor.w	r8, r8, r0
 80087da:	f88d 800f 	strb.w	r8, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
 80087de:	2310      	movs	r3, #16
 80087e0:	466a      	mov	r2, sp
 80087e2:	4619      	mov	r1, r3
 80087e4:	eb0d 0003 	add.w	r0, sp, r3
 80087e8:	f00e fe0c 	bl	8017404 <_copy>
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
 80087ec:	3401      	adds	r4, #1
 80087ee:	0123      	lsls	r3, r4, #4
 80087f0:	eb05 1204 	add.w	r2, r5, r4, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
 80087f4:	58eb      	ldr	r3, [r5, r3]
 80087f6:	f89d 1010 	ldrb.w	r1, [sp, #16]
 80087fa:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
 80087fe:	f88d 1010 	strb.w	r1, [sp, #16]
 8008802:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8008806:	f89d 0011 	ldrb.w	r0, [sp, #17]
 800880a:	4041      	eors	r1, r0
 800880c:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
 8008810:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8008814:	f89d 0012 	ldrb.w	r0, [sp, #18]
 8008818:	4041      	eors	r1, r0
 800881a:	f88d 1012 	strb.w	r1, [sp, #18]
 800881e:	b2db      	uxtb	r3, r3
 8008820:	f89d 1013 	ldrb.w	r1, [sp, #19]
 8008824:	404b      	eors	r3, r1
 8008826:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
 800882a:	6853      	ldr	r3, [r2, #4]
 800882c:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8008830:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
 8008834:	f88d 1014 	strb.w	r1, [sp, #20]
 8008838:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800883c:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8008840:	4041      	eors	r1, r0
 8008842:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
 8008846:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800884a:	f89d 0016 	ldrb.w	r0, [sp, #22]
 800884e:	4041      	eors	r1, r0
 8008850:	f88d 1016 	strb.w	r1, [sp, #22]
 8008854:	b2db      	uxtb	r3, r3
 8008856:	f89d 1017 	ldrb.w	r1, [sp, #23]
 800885a:	404b      	eors	r3, r1
 800885c:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
 8008860:	6893      	ldr	r3, [r2, #8]
 8008862:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8008866:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
 800886a:	f88d 1018 	strb.w	r1, [sp, #24]
 800886e:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8008872:	f89d 0019 	ldrb.w	r0, [sp, #25]
 8008876:	4041      	eors	r1, r0
 8008878:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
 800887c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8008880:	f89d 001a 	ldrb.w	r0, [sp, #26]
 8008884:	4041      	eors	r1, r0
 8008886:	f88d 101a 	strb.w	r1, [sp, #26]
 800888a:	b2db      	uxtb	r3, r3
 800888c:	f89d 101b 	ldrb.w	r1, [sp, #27]
 8008890:	404b      	eors	r3, r1
 8008892:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
 8008896:	68d3      	ldr	r3, [r2, #12]
 8008898:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800889c:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
 80088a0:	f88d 201c 	strb.w	r2, [sp, #28]
 80088a4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80088a8:	f89d 101d 	ldrb.w	r1, [sp, #29]
 80088ac:	404a      	eors	r2, r1
 80088ae:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
 80088b2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80088b6:	f89d 101e 	ldrb.w	r1, [sp, #30]
 80088ba:	404a      	eors	r2, r1
 80088bc:	f88d 201e 	strb.w	r2, [sp, #30]
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80088c6:	4053      	eors	r3, r2
 80088c8:	f88d 301f 	strb.w	r3, [sp, #31]
	for (i = 0; i < (Nr - 1); ++i) {
 80088cc:	2c08      	cmp	r4, #8
 80088ce:	d80a      	bhi.n	80088e6 <tc_aes_encrypt+0x596>
	for (i = 0; i < (Nb * Nk); ++i) {
 80088d0:	2300      	movs	r3, #0
 80088d2:	2b0f      	cmp	r3, #15
 80088d4:	f63f adc0 	bhi.w	8008458 <tc_aes_encrypt+0x108>
		s[i] = sbox[s[i]];
 80088d8:	a904      	add	r1, sp, #16
 80088da:	5cc8      	ldrb	r0, [r1, r3]
 80088dc:	4a6e      	ldr	r2, [pc, #440]	; (8008a98 <tc_aes_encrypt+0x748>)
 80088de:	5c10      	ldrb	r0, [r2, r0]
 80088e0:	54c8      	strb	r0, [r1, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
 80088e2:	3301      	adds	r3, #1
 80088e4:	e7f5      	b.n	80088d2 <tc_aes_encrypt+0x582>
 80088e6:	2300      	movs	r3, #0
 80088e8:	e005      	b.n	80088f6 <tc_aes_encrypt+0x5a6>
		s[i] = sbox[s[i]];
 80088ea:	aa04      	add	r2, sp, #16
 80088ec:	5cd1      	ldrb	r1, [r2, r3]
 80088ee:	486a      	ldr	r0, [pc, #424]	; (8008a98 <tc_aes_encrypt+0x748>)
 80088f0:	5c41      	ldrb	r1, [r0, r1]
 80088f2:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
 80088f4:	3301      	adds	r3, #1
 80088f6:	2b0f      	cmp	r3, #15
 80088f8:	d9f7      	bls.n	80088ea <tc_aes_encrypt+0x59a>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
 80088fa:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80088fe:	f88d 3000 	strb.w	r3, [sp]
 8008902:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8008906:	f88d 3001 	strb.w	r3, [sp, #1]
 800890a:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800890e:	f88d 3002 	strb.w	r3, [sp, #2]
 8008912:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8008916:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
 800891a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800891e:	f88d 3004 	strb.w	r3, [sp, #4]
 8008922:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8008926:	f88d 3005 	strb.w	r3, [sp, #5]
 800892a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800892e:	f88d 3006 	strb.w	r3, [sp, #6]
 8008932:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8008936:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
 800893a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800893e:	f88d 3008 	strb.w	r3, [sp, #8]
 8008942:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8008946:	f88d 3009 	strb.w	r3, [sp, #9]
 800894a:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800894e:	f88d 300a 	strb.w	r3, [sp, #10]
 8008952:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8008956:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
 800895a:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800895e:	f88d 300c 	strb.w	r3, [sp, #12]
 8008962:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8008966:	f88d 300d 	strb.w	r3, [sp, #13]
 800896a:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800896e:	f88d 300e 	strb.w	r3, [sp, #14]
 8008972:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8008976:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
 800897a:	2310      	movs	r3, #16
 800897c:	466a      	mov	r2, sp
 800897e:	4619      	mov	r1, r3
 8008980:	eb0d 0003 	add.w	r0, sp, r3
 8008984:	f00e fd3e 	bl	8017404 <_copy>
	}

	sub_bytes(state);
	shift_rows(state);
	add_round_key(state, s->words + Nb*(i+1));
 8008988:	1c63      	adds	r3, r4, #1
 800898a:	011a      	lsls	r2, r3, #4
 800898c:	eb06 1303 	add.w	r3, r6, r3, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
 8008990:	58b2      	ldr	r2, [r6, r2]
 8008992:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8008996:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
 800899a:	f88d 1010 	strb.w	r1, [sp, #16]
 800899e:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80089a2:	f89d 0011 	ldrb.w	r0, [sp, #17]
 80089a6:	4041      	eors	r1, r0
 80089a8:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
 80089ac:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80089b0:	f89d 0012 	ldrb.w	r0, [sp, #18]
 80089b4:	4041      	eors	r1, r0
 80089b6:	f88d 1012 	strb.w	r1, [sp, #18]
 80089ba:	b2d2      	uxtb	r2, r2
 80089bc:	f89d 1013 	ldrb.w	r1, [sp, #19]
 80089c0:	404a      	eors	r2, r1
 80089c2:	f88d 2013 	strb.w	r2, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
 80089c6:	685a      	ldr	r2, [r3, #4]
 80089c8:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80089cc:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
 80089d0:	f88d 1014 	strb.w	r1, [sp, #20]
 80089d4:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80089d8:	f89d 0015 	ldrb.w	r0, [sp, #21]
 80089dc:	4041      	eors	r1, r0
 80089de:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
 80089e2:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80089e6:	f89d 0016 	ldrb.w	r0, [sp, #22]
 80089ea:	4041      	eors	r1, r0
 80089ec:	f88d 1016 	strb.w	r1, [sp, #22]
 80089f0:	b2d2      	uxtb	r2, r2
 80089f2:	f89d 1017 	ldrb.w	r1, [sp, #23]
 80089f6:	404a      	eors	r2, r1
 80089f8:	f88d 2017 	strb.w	r2, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
 80089fc:	689a      	ldr	r2, [r3, #8]
 80089fe:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8008a02:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
 8008a06:	f88d 1018 	strb.w	r1, [sp, #24]
 8008a0a:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8008a0e:	f89d 0019 	ldrb.w	r0, [sp, #25]
 8008a12:	4041      	eors	r1, r0
 8008a14:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
 8008a18:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8008a1c:	f89d 001a 	ldrb.w	r0, [sp, #26]
 8008a20:	4041      	eors	r1, r0
 8008a22:	f88d 101a 	strb.w	r1, [sp, #26]
 8008a26:	b2d2      	uxtb	r2, r2
 8008a28:	f89d 101b 	ldrb.w	r1, [sp, #27]
 8008a2c:	404a      	eors	r2, r1
 8008a2e:	f88d 201b 	strb.w	r2, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8008a38:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
 8008a3c:	f88d 201c 	strb.w	r2, [sp, #28]
 8008a40:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008a44:	f89d 101d 	ldrb.w	r1, [sp, #29]
 8008a48:	404a      	eors	r2, r1
 8008a4a:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
 8008a4e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008a52:	f89d 101e 	ldrb.w	r1, [sp, #30]
 8008a56:	404a      	eors	r2, r1
 8008a58:	f88d 201e 	strb.w	r2, [sp, #30]
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8008a62:	4053      	eors	r3, r2
 8008a64:	f88d 301f 	strb.w	r3, [sp, #31]

	(void)_copy(out, sizeof(state), state, sizeof(state));
 8008a68:	2310      	movs	r3, #16
 8008a6a:	eb0d 0203 	add.w	r2, sp, r3
 8008a6e:	4619      	mov	r1, r3
 8008a70:	4638      	mov	r0, r7
 8008a72:	f00e fcc7 	bl	8017404 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
 8008a76:	2210      	movs	r2, #16
 8008a78:	2100      	movs	r1, #0
 8008a7a:	eb0d 0002 	add.w	r0, sp, r2
 8008a7e:	f00e fcce 	bl	801741e <_set>

	return TC_CRYPTO_SUCCESS;
 8008a82:	2001      	movs	r0, #1
}
 8008a84:	b008      	add	sp, #32
 8008a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
 8008a8a:	2000      	movs	r0, #0
}
 8008a8c:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 8008a8e:	2000      	movs	r0, #0
 8008a90:	e7f8      	b.n	8008a84 <tc_aes_encrypt+0x734>
		return TC_CRYPTO_FAIL;
 8008a92:	2000      	movs	r0, #0
 8008a94:	e7f6      	b.n	8008a84 <tc_aes_encrypt+0x734>
 8008a96:	bf00      	nop
 8008a98:	0801f898 	.word	0x0801f898

08008a9c <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
 8008a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa0:	b09b      	sub	sp, #108	; 0x6c
	unsigned int t1, t2;
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
 8008aa2:	6806      	ldr	r6, [r0, #0]
 8008aa4:	9603      	str	r6, [sp, #12]
 8008aa6:	6842      	ldr	r2, [r0, #4]
 8008aa8:	9204      	str	r2, [sp, #16]
 8008aaa:	6884      	ldr	r4, [r0, #8]
 8008aac:	9405      	str	r4, [sp, #20]
 8008aae:	68c7      	ldr	r7, [r0, #12]
 8008ab0:	9706      	str	r7, [sp, #24]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
 8008ab2:	6905      	ldr	r5, [r0, #16]
 8008ab4:	9507      	str	r5, [sp, #28]
 8008ab6:	6943      	ldr	r3, [r0, #20]
 8008ab8:	9301      	str	r3, [sp, #4]
 8008aba:	6983      	ldr	r3, [r0, #24]
 8008abc:	9302      	str	r3, [sp, #8]
 8008abe:	69c3      	ldr	r3, [r0, #28]
 8008ac0:	9308      	str	r3, [sp, #32]
 8008ac2:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008ac6:	f8dd 9004 	ldr.w	r9, [sp, #4]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
 8008aca:	46ba      	mov	sl, r7
 8008acc:	46a4      	mov	ip, r4
 8008ace:	4696      	mov	lr, r2

	for (i = 0; i < 16; ++i) {
 8008ad0:	2700      	movs	r7, #0
 8008ad2:	2f0f      	cmp	r7, #15
 8008ad4:	d83b      	bhi.n	8008b4e <compress+0xb2>
	n = (((unsigned int)(*((*c)++))) << 24);
 8008ad6:	780c      	ldrb	r4, [r1, #0]
	n |= ((unsigned int)(*((*c)++)) << 16);
 8008ad8:	784a      	ldrb	r2, [r1, #1]
 8008ada:	0412      	lsls	r2, r2, #16
 8008adc:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
	n |= ((unsigned int)(*((*c)++)) << 8);
 8008ae0:	788c      	ldrb	r4, [r1, #2]
 8008ae2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
	n |= ((unsigned int)(*((*c)++)));
 8008ae6:	78cc      	ldrb	r4, [r1, #3]
 8008ae8:	4322      	orrs	r2, r4
		n = BigEndian(&data);
		t1 = work_space[i] = n;
 8008aea:	ac1a      	add	r4, sp, #104	; 0x68
 8008aec:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 8008af0:	f844 2c40 	str.w	r2, [r4, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
 8008af4:	ea4f 24f5 	mov.w	r4, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 8008af8:	ea84 14b5 	eor.w	r4, r4, r5, ror #6
 8008afc:	ea84 6475 	eor.w	r4, r4, r5, ror #25
 8008b00:	4423      	add	r3, r4
 8008b02:	ea05 0409 	and.w	r4, r5, r9
 8008b06:	ea28 0b05 	bic.w	fp, r8, r5
 8008b0a:	ea84 040b 	eor.w	r4, r4, fp
 8008b0e:	4423      	add	r3, r4
 8008b10:	4c4d      	ldr	r4, [pc, #308]	; (8008c48 <compress+0x1ac>)
 8008b12:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
 8008b16:	4423      	add	r3, r4
 8008b18:	441a      	add	r2, r3
	return (((a) >> n) | ((a) << (32 - n)));
 8008b1a:	ea4f 3376 	mov.w	r3, r6, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
 8008b1e:	ea83 03b6 	eor.w	r3, r3, r6, ror #2
 8008b22:	ea83 53b6 	eor.w	r3, r3, r6, ror #22
 8008b26:	ea8e 040c 	eor.w	r4, lr, ip
 8008b2a:	4034      	ands	r4, r6
 8008b2c:	ea0e 0b0c 	and.w	fp, lr, ip
 8008b30:	ea84 040b 	eor.w	r4, r4, fp
 8008b34:	441c      	add	r4, r3
	for (i = 0; i < 16; ++i) {
 8008b36:	3701      	adds	r7, #1
	n |= ((unsigned int)(*((*c)++)));
 8008b38:	3104      	adds	r1, #4
		h = g; g = f; f = e; e = d + t1;
 8008b3a:	4643      	mov	r3, r8
 8008b3c:	46c8      	mov	r8, r9
 8008b3e:	46a9      	mov	r9, r5
 8008b40:	eb0a 0502 	add.w	r5, sl, r2
		d = c; c = b; b = a; a = t1 + t2;
 8008b44:	46e2      	mov	sl, ip
 8008b46:	46f4      	mov	ip, lr
 8008b48:	46b6      	mov	lr, r6
 8008b4a:	1916      	adds	r6, r2, r4
 8008b4c:	e7c1      	b.n	8008ad2 <compress+0x36>
 8008b4e:	9009      	str	r0, [sp, #36]	; 0x24
	}

	for ( ; i < 64; ++i) {
 8008b50:	2f3f      	cmp	r7, #63	; 0x3f
 8008b52:	d85c      	bhi.n	8008c0e <compress+0x172>
		s0 = work_space[(i+1)&0x0f];
 8008b54:	1c79      	adds	r1, r7, #1
 8008b56:	f001 020f 	and.w	r2, r1, #15
 8008b5a:	ac1a      	add	r4, sp, #104	; 0x68
 8008b5c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008b60:	f852 2c40 	ldr.w	r2, [r2, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
 8008b64:	ea4f 44b2 	mov.w	r4, r2, ror #18
		s0 = sigma0(s0);
 8008b68:	ea84 14f2 	eor.w	r4, r4, r2, ror #7
 8008b6c:	ea84 04d2 	eor.w	r4, r4, r2, lsr #3
		s1 = work_space[(i+14)&0x0f];
 8008b70:	f107 020e 	add.w	r2, r7, #14
 8008b74:	f002 020f 	and.w	r2, r2, #15
 8008b78:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 8008b7c:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8008b80:	f852 bc40 	ldr.w	fp, [r2, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
 8008b84:	ea4f 42fb 	mov.w	r2, fp, ror #19
		s1 = sigma1(s1);
 8008b88:	ea82 427b 	eor.w	r2, r2, fp, ror #17
 8008b8c:	ea82 229b 	eor.w	r2, r2, fp, lsr #10

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 8008b90:	f007 0b0f 	and.w	fp, r7, #15
 8008b94:	4414      	add	r4, r2
 8008b96:	f107 0209 	add.w	r2, r7, #9
 8008b9a:	f002 020f 	and.w	r2, r2, #15
 8008b9e:	a81a      	add	r0, sp, #104	; 0x68
 8008ba0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008ba4:	f852 2c40 	ldr.w	r2, [r2, #-64]
 8008ba8:	4414      	add	r4, r2
 8008baa:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 8008bae:	f85b 2c40 	ldr.w	r2, [fp, #-64]
 8008bb2:	4414      	add	r4, r2
 8008bb4:	f84b 4c40 	str.w	r4, [fp, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
 8008bb8:	ea4f 22f5 	mov.w	r2, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 8008bbc:	ea82 12b5 	eor.w	r2, r2, r5, ror #6
 8008bc0:	ea82 6275 	eor.w	r2, r2, r5, ror #25
 8008bc4:	441a      	add	r2, r3
 8008bc6:	ea05 0309 	and.w	r3, r5, r9
 8008bca:	ea28 0b05 	bic.w	fp, r8, r5
 8008bce:	ea83 030b 	eor.w	r3, r3, fp
 8008bd2:	441a      	add	r2, r3
 8008bd4:	4b1c      	ldr	r3, [pc, #112]	; (8008c48 <compress+0x1ac>)
 8008bd6:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 8008bda:	441a      	add	r2, r3
 8008bdc:	4422      	add	r2, r4
	return (((a) >> n) | ((a) << (32 - n)));
 8008bde:	ea4f 3476 	mov.w	r4, r6, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
 8008be2:	ea84 04b6 	eor.w	r4, r4, r6, ror #2
 8008be6:	ea84 54b6 	eor.w	r4, r4, r6, ror #22
 8008bea:	ea8e 030c 	eor.w	r3, lr, ip
 8008bee:	4033      	ands	r3, r6
 8008bf0:	ea0e 070c 	and.w	r7, lr, ip
 8008bf4:	407b      	eors	r3, r7
 8008bf6:	441c      	add	r4, r3
	for ( ; i < 64; ++i) {
 8008bf8:	460f      	mov	r7, r1
		h = g; g = f; f = e; e = d + t1;
 8008bfa:	4643      	mov	r3, r8
 8008bfc:	46c8      	mov	r8, r9
 8008bfe:	46a9      	mov	r9, r5
 8008c00:	eb0a 0502 	add.w	r5, sl, r2
		d = c; c = b; b = a; a = t1 + t2;
 8008c04:	46e2      	mov	sl, ip
 8008c06:	46f4      	mov	ip, lr
 8008c08:	46b6      	mov	lr, r6
 8008c0a:	1916      	adds	r6, r2, r4
 8008c0c:	e7a0      	b.n	8008b50 <compress+0xb4>
 8008c0e:	9809      	ldr	r0, [sp, #36]	; 0x24
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
 8008c10:	9a03      	ldr	r2, [sp, #12]
 8008c12:	4416      	add	r6, r2
 8008c14:	6006      	str	r6, [r0, #0]
 8008c16:	9a04      	ldr	r2, [sp, #16]
 8008c18:	4472      	add	r2, lr
 8008c1a:	6042      	str	r2, [r0, #4]
 8008c1c:	9a05      	ldr	r2, [sp, #20]
 8008c1e:	4462      	add	r2, ip
 8008c20:	6082      	str	r2, [r0, #8]
 8008c22:	9a06      	ldr	r2, [sp, #24]
 8008c24:	4452      	add	r2, sl
 8008c26:	60c2      	str	r2, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
 8008c28:	9a07      	ldr	r2, [sp, #28]
 8008c2a:	4415      	add	r5, r2
 8008c2c:	6105      	str	r5, [r0, #16]
 8008c2e:	9a01      	ldr	r2, [sp, #4]
 8008c30:	444a      	add	r2, r9
 8008c32:	6142      	str	r2, [r0, #20]
 8008c34:	9a02      	ldr	r2, [sp, #8]
 8008c36:	4442      	add	r2, r8
 8008c38:	6182      	str	r2, [r0, #24]
 8008c3a:	9a08      	ldr	r2, [sp, #32]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	61c3      	str	r3, [r0, #28]
}
 8008c40:	b01b      	add	sp, #108	; 0x6c
 8008c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c46:	bf00      	nop
 8008c48:	0801f998 	.word	0x0801f998

08008c4c <tc_sha256_init>:
	if (s == (TCSha256State_t) 0) {
 8008c4c:	b1e0      	cbz	r0, 8008c88 <tc_sha256_init+0x3c>
{
 8008c4e:	b510      	push	{r4, lr}
 8008c50:	4604      	mov	r4, r0
	_set((uint8_t *) s, 0x00, sizeof(*s));
 8008c52:	2270      	movs	r2, #112	; 0x70
 8008c54:	2100      	movs	r1, #0
 8008c56:	f00e fbe2 	bl	801741e <_set>
	s->iv[0] = 0x6a09e667;
 8008c5a:	4b0c      	ldr	r3, [pc, #48]	; (8008c8c <tc_sha256_init+0x40>)
 8008c5c:	6023      	str	r3, [r4, #0]
	s->iv[1] = 0xbb67ae85;
 8008c5e:	4b0c      	ldr	r3, [pc, #48]	; (8008c90 <tc_sha256_init+0x44>)
 8008c60:	6063      	str	r3, [r4, #4]
	s->iv[2] = 0x3c6ef372;
 8008c62:	4b0c      	ldr	r3, [pc, #48]	; (8008c94 <tc_sha256_init+0x48>)
 8008c64:	60a3      	str	r3, [r4, #8]
	s->iv[3] = 0xa54ff53a;
 8008c66:	4b0c      	ldr	r3, [pc, #48]	; (8008c98 <tc_sha256_init+0x4c>)
 8008c68:	60e3      	str	r3, [r4, #12]
	s->iv[4] = 0x510e527f;
 8008c6a:	4b0c      	ldr	r3, [pc, #48]	; (8008c9c <tc_sha256_init+0x50>)
 8008c6c:	6123      	str	r3, [r4, #16]
	s->iv[5] = 0x9b05688c;
 8008c6e:	4b0c      	ldr	r3, [pc, #48]	; (8008ca0 <tc_sha256_init+0x54>)
 8008c70:	6163      	str	r3, [r4, #20]
	s->iv[6] = 0x1f83d9ab;
 8008c72:	4b0c      	ldr	r3, [pc, #48]	; (8008ca4 <tc_sha256_init+0x58>)
 8008c74:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
 8008c76:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8008c7a:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8008c7e:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8008c82:	61e3      	str	r3, [r4, #28]
	return TC_CRYPTO_SUCCESS;
 8008c84:	2001      	movs	r0, #1
}
 8008c86:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
 8008c88:	2000      	movs	r0, #0
}
 8008c8a:	4770      	bx	lr
 8008c8c:	6a09e667 	.word	0x6a09e667
 8008c90:	bb67ae85 	.word	0xbb67ae85
 8008c94:	3c6ef372 	.word	0x3c6ef372
 8008c98:	a54ff53a 	.word	0xa54ff53a
 8008c9c:	510e527f 	.word	0x510e527f
 8008ca0:	9b05688c 	.word	0x9b05688c
 8008ca4:	1f83d9ab 	.word	0x1f83d9ab

08008ca8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8008ca8:	4a09      	ldr	r2, [pc, #36]	; (8008cd0 <arch_swap+0x28>)
 8008caa:	6893      	ldr	r3, [r2, #8]
 8008cac:	66d8      	str	r0, [r3, #108]	; 0x6c
	_current->arch.swap_return_value = _k_neg_eagain;
 8008cae:	4909      	ldr	r1, [pc, #36]	; (8008cd4 <arch_swap+0x2c>)
 8008cb0:	6809      	ldr	r1, [r1, #0]
 8008cb2:	6719      	str	r1, [r3, #112]	; 0x70

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8008cb4:	4908      	ldr	r1, [pc, #32]	; (8008cd8 <arch_swap+0x30>)
 8008cb6:	684b      	ldr	r3, [r1, #4]
 8008cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cbc:	604b      	str	r3, [r1, #4]
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	f383 8811 	msr	BASEPRI, r3
 8008cc4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8008cc8:	6893      	ldr	r3, [r2, #8]
}
 8008cca:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	20002278 	.word	0x20002278
 8008cd4:	08021d48 	.word	0x08021d48
 8008cd8:	e000ed00 	.word	0xe000ed00

08008cdc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8008cdc:	490f      	ldr	r1, [pc, #60]	; (8008d1c <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8008cde:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8008ce0:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
 8008ce4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8008ce6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8008cea:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8008cee:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8008cf0:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8008cf4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8008cf8:	4f09      	ldr	r7, [pc, #36]	; (8008d20 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8008cfa:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8008cfe:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
 8008d00:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8008d02:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8008d04:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    movs r3, #0
 8008d06:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8008d08:	66d3      	str	r3, [r2, #108]	; 0x6c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8008d0a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8008d0e:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
 8008d12:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8008d16:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
 8008d1a:	4770      	bx	lr
    ldr r1, =_kernel
 8008d1c:	20002278 	.word	0x20002278
    ldr v4, =_SCS_ICSR
 8008d20:	e000ed04 	.word	0xe000ed04

08008d24 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
 8008d24:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8008d28:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8008d2a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8008d2e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8008d32:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8008d34:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8008d38:	2902      	cmp	r1, #2
    beq _oops
 8008d3a:	d0ff      	beq.n	8008d3c <_oops>

08008d3c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8008d3c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 8008d3e:	f00e feef 	bl	8017b20 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 8008d42:	bd01      	pop	{r0, pc}

08008d44 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8008d44:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	db08      	blt.n	8008d5c <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008d4a:	f000 001f 	and.w	r0, r0, #31
 8008d4e:	095b      	lsrs	r3, r3, #5
 8008d50:	2201      	movs	r2, #1
 8008d52:	fa02 f000 	lsl.w	r0, r2, r0
 8008d56:	4a02      	ldr	r2, [pc, #8]	; (8008d60 <arch_irq_enable+0x1c>)
 8008d58:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8008d5c:	4770      	bx	lr
 8008d5e:	bf00      	nop
 8008d60:	e000e100 	.word	0xe000e100

08008d64 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
 8008d64:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	db0d      	blt.n	8008d86 <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008d6a:	f000 001f 	and.w	r0, r0, #31
 8008d6e:	095b      	lsrs	r3, r3, #5
 8008d70:	2201      	movs	r2, #1
 8008d72:	fa02 f000 	lsl.w	r0, r2, r0
 8008d76:	3320      	adds	r3, #32
 8008d78:	4a03      	ldr	r2, [pc, #12]	; (8008d88 <arch_irq_disable+0x24>)
 8008d7a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8008d7e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008d82:	f3bf 8f6f 	isb	sy
}
 8008d86:	4770      	bx	lr
 8008d88:	e000e100 	.word	0xe000e100

08008d8c <z_arm_irq_priority_set>:
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
 8008d8c:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8008d8e:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	db08      	blt.n	8008da6 <z_arm_irq_priority_set+0x1a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d94:	0109      	lsls	r1, r1, #4
 8008d96:	b2c9      	uxtb	r1, r1
 8008d98:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8008d9c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8008da0:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
 8008da4:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008da6:	f000 000f 	and.w	r0, r0, #15
 8008daa:	0109      	lsls	r1, r1, #4
 8008dac:	b2c9      	uxtb	r1, r1
 8008dae:	4b01      	ldr	r3, [pc, #4]	; (8008db4 <z_arm_irq_priority_set+0x28>)
 8008db0:	5419      	strb	r1, [r3, r0]
}
 8008db2:	4770      	bx	lr
 8008db4:	e000ed14 	.word	0xe000ed14

08008db8 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
 8008db8:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8008dba:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
 8008dbe:	490d      	ldr	r1, [pc, #52]	; (8008df4 <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
 8008dc0:	f021 0101 	bic.w	r1, r1, #1
 8008dc4:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
 8008dc8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8008dcc:	9b01      	ldr	r3, [sp, #4]
 8008dce:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
 8008dd2:	9b02      	ldr	r3, [sp, #8]
 8008dd4:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8008dd8:	9b03      	ldr	r3, [sp, #12]
 8008dda:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8008dde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008de2:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
 8008de6:	6584      	str	r4, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
 8008de8:	2300      	movs	r3, #0
 8008dea:	66c3      	str	r3, [r0, #108]	; 0x6c
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8008dec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008df0:	4770      	bx	lr
 8008df2:	bf00      	nop
 8008df4:	0801561b 	.word	0x0801561b

08008df8 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8008df8:	b508      	push	{r3, lr}
 8008dfa:	4606      	mov	r6, r0
 8008dfc:	460d      	mov	r5, r1
 8008dfe:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();
 8008e00:	f00e fe7e 	bl	8017b00 <z_arm_prepare_switch_to_main>

	_current = main_thread;
 8008e04:	4b07      	ldr	r3, [pc, #28]	; (8008e24 <arch_switch_to_main_thread+0x2c>)
 8008e06:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8008e08:	4620      	mov	r0, r4
 8008e0a:	f385 8809 	msr	PSP, r5
 8008e0e:	2100      	movs	r1, #0
 8008e10:	b663      	cpsie	if
 8008e12:	f381 8811 	msr	BASEPRI, r1
 8008e16:	f3bf 8f6f 	isb	sy
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	f00c fbfc 	bl	801561a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8008e22:	bf00      	nop
 8008e24:	20002278 	.word	0x20002278

08008e28 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8008e28:	4901      	ldr	r1, [pc, #4]	; (8008e30 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8008e2a:	2210      	movs	r2, #16
	str	r2, [r1]
 8008e2c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8008e2e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8008e30:	e000ed10 	.word	0xe000ed10

08008e34 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8008e34:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8008e36:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8008e38:	f380 8811 	msr	BASEPRI, r0
	isb
 8008e3c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8008e40:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8008e44:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8008e46:	b662      	cpsie	i
	isb
 8008e48:	f3bf 8f6f 	isb	sy

	bx	lr
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop

08008e50 <esf_dump>:
#include <kernel.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os);

static void esf_dump(const z_arch_esf_t *esf)
{
 8008e50:	b570      	push	{r4, r5, r6, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	4604      	mov	r4, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 8008e56:	2601      	movs	r6, #1
 8008e58:	f04f 0300 	mov.w	r3, #0
 8008e5c:	f366 0302 	bfi	r3, r6, #0, #3
 8008e60:	f36f 03c5 	bfc	r3, #3, #3
 8008e64:	4d1c      	ldr	r5, [pc, #112]	; (8008ed8 <esf_dump+0x88>)
 8008e66:	4a1d      	ldr	r2, [pc, #116]	; (8008edc <esf_dump+0x8c>)
 8008e68:	1aad      	subs	r5, r5, r2
 8008e6a:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8008e6e:	f365 138f 	bfi	r3, r5, #6, #10
 8008e72:	f8ad 3000 	strh.w	r3, [sp]
 8008e76:	6883      	ldr	r3, [r0, #8]
 8008e78:	6842      	ldr	r2, [r0, #4]
 8008e7a:	6801      	ldr	r1, [r0, #0]
 8008e7c:	4818      	ldr	r0, [pc, #96]	; (8008ee0 <esf_dump+0x90>)
 8008e7e:	f7fb f929 	bl	80040d4 <log_3>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 8008e82:	f04f 0300 	mov.w	r3, #0
 8008e86:	f366 0302 	bfi	r3, r6, #0, #3
 8008e8a:	f36f 03c5 	bfc	r3, #3, #3
 8008e8e:	f365 138f 	bfi	r3, r5, #6, #10
 8008e92:	f8ad 3000 	strh.w	r3, [sp]
 8008e96:	6963      	ldr	r3, [r4, #20]
 8008e98:	6922      	ldr	r2, [r4, #16]
 8008e9a:	68e1      	ldr	r1, [r4, #12]
 8008e9c:	4811      	ldr	r0, [pc, #68]	; (8008ee4 <esf_dump+0x94>)
 8008e9e:	f7fb f919 	bl	80040d4 <log_3>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 8008ea2:	f04f 0200 	mov.w	r2, #0
 8008ea6:	f366 0202 	bfi	r2, r6, #0, #3
 8008eaa:	f36f 02c5 	bfc	r2, #3, #3
 8008eae:	f365 128f 	bfi	r2, r5, #6, #10
 8008eb2:	69e1      	ldr	r1, [r4, #28]
 8008eb4:	480c      	ldr	r0, [pc, #48]	; (8008ee8 <esf_dump+0x98>)
 8008eb6:	f7fb f9d9 	bl	800426c <log_1>
			callee->v4, callee->v5, callee->v6);
		LOG_ERR("r10/v7: 0x%08x  r11/v8: 0x%08x    psp:  0x%08x",
			callee->v7, callee->v8, callee->psp);
	}
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 8008eba:	f04f 0200 	mov.w	r2, #0
 8008ebe:	f366 0202 	bfi	r2, r6, #0, #3
 8008ec2:	f36f 02c5 	bfc	r2, #3, #3
 8008ec6:	f365 128f 	bfi	r2, r5, #6, #10
 8008eca:	69a1      	ldr	r1, [r4, #24]
 8008ecc:	4807      	ldr	r0, [pc, #28]	; (8008eec <esf_dump+0x9c>)
 8008ece:	f7fb f9cd 	bl	800426c <log_1>
		esf->basic.pc);
}
 8008ed2:	b002      	add	sp, #8
 8008ed4:	bd70      	pop	{r4, r5, r6, pc}
 8008ed6:	bf00      	nop
 8008ed8:	0801d760 	.word	0x0801d760
 8008edc:	0801d6d0 	.word	0x0801d6d0
 8008ee0:	0801fa98 	.word	0x0801fa98
 8008ee4:	0801fac8 	.word	0x0801fac8
 8008ee8:	0801faf8 	.word	0x0801faf8
 8008eec:	0801fb08 	.word	0x0801fb08

08008ef0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8008ef0:	bf30      	wfi
    b z_SysNmiOnReset
 8008ef2:	f7ff bffd 	b.w	8008ef0 <z_SysNmiOnReset>
 8008ef6:	bf00      	nop

08008ef8 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
 8008ef8:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8008efa:	4b17      	ldr	r3, [pc, #92]	; (8008f58 <z_arm_prep_c+0x60>)
 8008efc:	4a17      	ldr	r2, [pc, #92]	; (8008f5c <z_arm_prep_c+0x64>)
 8008efe:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8008f02:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8008f04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008f08:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8008f0c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008f10:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008f14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
 8008f18:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008f1c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8008f20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR &= (~(FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk));
 8008f24:	4a0e      	ldr	r2, [pc, #56]	; (8008f60 <z_arm_prep_c+0x68>)
 8008f26:	6853      	ldr	r3, [r2, #4]
 8008f28:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008f2c:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8008f2e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008f32:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 8008f36:	2300      	movs	r3, #0
 8008f38:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8008f3c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8008f40:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8008f44:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8008f48:	f00a fc78 	bl	801383c <z_bss_zero>
	z_data_copy();
 8008f4c:	f00a fc82 	bl	8013854 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8008f50:	f000 fbc6 	bl	80096e0 <z_arm_interrupt_init>
	z_cstart();
 8008f54:	f00a fcbc 	bl	80138d0 <z_cstart>
 8008f58:	e000ed00 	.word	0xe000ed00
 8008f5c:	08000000 	.word	0x08000000
 8008f60:	e000ef30 	.word	0xe000ef30

08008f64 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8008f64:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8008f66:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8008f6a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8008f6e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8008f72:	4904      	ldr	r1, [pc, #16]	; (8008f84 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8008f74:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8008f76:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8008f78:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8008f7a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8008f7e:	4902      	ldr	r1, [pc, #8]	; (8008f88 <_isr_wrapper+0x24>)
	bx r1
 8008f80:	4708      	bx	r1
 8008f82:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8008f84:	0801d374 	.word	0x0801d374
	ldr r1, =z_arm_int_exit
 8008f88:	080096c5 	.word	0x080096c5

08008f8c <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8008f8c:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8008f8e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8008f92:	4808      	ldr	r0, [pc, #32]	; (8008fb4 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8008f94:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
 8008f98:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8008f9a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8008f9e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8008fa2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8008fa4:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8008fa6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8008faa:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8008fae:	f7ff ffa3 	bl	8008ef8 <z_arm_prep_c>
 8008fb2:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8008fb4:	20004da8 	.word	0x20004da8

08008fb8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8008fb8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8008fbc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8008fc0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 8008fc2:	4672      	mov	r2, lr
	bl z_arm_fault
 8008fc4:	f000 fb14 	bl	80095f0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 8008fc8:	bd01      	pop	{r0, pc}
 8008fca:	bf00      	nop

08008fcc <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
 8008fcc:	b508      	push	{r3, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
 8008fce:	f04f 0100 	mov.w	r1, #0
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	f363 0102 	bfi	r1, r3, #0, #3
 8008fd8:	f36f 01c5 	bfc	r1, #3, #3
 8008fdc:	4b4e      	ldr	r3, [pc, #312]	; (8009118 <usage_fault+0x14c>)
 8008fde:	4a4f      	ldr	r2, [pc, #316]	; (800911c <usage_fault+0x150>)
 8008fe0:	1a9b      	subs	r3, r3, r2
 8008fe2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8008fe6:	f363 118f 	bfi	r1, r3, #6, #10
 8008fea:	484d      	ldr	r0, [pc, #308]	; (8009120 <usage_fault+0x154>)
 8008fec:	f7fb faae 	bl	800454c <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8008ff0:	4b4c      	ldr	r3, [pc, #304]	; (8009124 <usage_fault+0x158>)
 8008ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008ff8:	d121      	bne.n	800903e <usage_fault+0x72>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8008ffa:	4b4a      	ldr	r3, [pc, #296]	; (8009124 <usage_fault+0x158>)
 8008ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ffe:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8009002:	d12e      	bne.n	8009062 <usage_fault+0x96>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8009004:	4b47      	ldr	r3, [pc, #284]	; (8009124 <usage_fault+0x158>)
 8009006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009008:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800900c:	d13b      	bne.n	8009086 <usage_fault+0xba>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 800900e:	4b45      	ldr	r3, [pc, #276]	; (8009124 <usage_fault+0x158>)
 8009010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009012:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8009016:	d148      	bne.n	80090aa <usage_fault+0xde>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8009018:	4b42      	ldr	r3, [pc, #264]	; (8009124 <usage_fault+0x158>)
 800901a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800901c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8009020:	d155      	bne.n	80090ce <usage_fault+0x102>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8009022:	4b40      	ldr	r3, [pc, #256]	; (8009124 <usage_fault+0x158>)
 8009024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009026:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800902a:	d162      	bne.n	80090f2 <usage_fault+0x126>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 800902c:	4a3d      	ldr	r2, [pc, #244]	; (8009124 <usage_fault+0x158>)
 800902e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8009030:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8009034:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8009038:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
 800903a:	2000      	movs	r0, #0
 800903c:	bd08      	pop	{r3, pc}
		PR_FAULT_INFO("  Division by zero");
 800903e:	f04f 0100 	mov.w	r1, #0
 8009042:	2301      	movs	r3, #1
 8009044:	f363 0102 	bfi	r1, r3, #0, #3
 8009048:	f36f 01c5 	bfc	r1, #3, #3
 800904c:	4b32      	ldr	r3, [pc, #200]	; (8009118 <usage_fault+0x14c>)
 800904e:	4a33      	ldr	r2, [pc, #204]	; (800911c <usage_fault+0x150>)
 8009050:	1a9b      	subs	r3, r3, r2
 8009052:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8009056:	f363 118f 	bfi	r1, r3, #6, #10
 800905a:	4833      	ldr	r0, [pc, #204]	; (8009128 <usage_fault+0x15c>)
 800905c:	f7fb fa76 	bl	800454c <log_0>
 8009060:	e7cb      	b.n	8008ffa <usage_fault+0x2e>
		PR_FAULT_INFO("  Unaligned memory access");
 8009062:	f04f 0100 	mov.w	r1, #0
 8009066:	2301      	movs	r3, #1
 8009068:	f363 0102 	bfi	r1, r3, #0, #3
 800906c:	f36f 01c5 	bfc	r1, #3, #3
 8009070:	4b29      	ldr	r3, [pc, #164]	; (8009118 <usage_fault+0x14c>)
 8009072:	4a2a      	ldr	r2, [pc, #168]	; (800911c <usage_fault+0x150>)
 8009074:	1a9b      	subs	r3, r3, r2
 8009076:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800907a:	f363 118f 	bfi	r1, r3, #6, #10
 800907e:	482b      	ldr	r0, [pc, #172]	; (800912c <usage_fault+0x160>)
 8009080:	f7fb fa64 	bl	800454c <log_0>
 8009084:	e7be      	b.n	8009004 <usage_fault+0x38>
		PR_FAULT_INFO("  No coprocessor instructions");
 8009086:	f04f 0100 	mov.w	r1, #0
 800908a:	2301      	movs	r3, #1
 800908c:	f363 0102 	bfi	r1, r3, #0, #3
 8009090:	f36f 01c5 	bfc	r1, #3, #3
 8009094:	4b20      	ldr	r3, [pc, #128]	; (8009118 <usage_fault+0x14c>)
 8009096:	4a21      	ldr	r2, [pc, #132]	; (800911c <usage_fault+0x150>)
 8009098:	1a9b      	subs	r3, r3, r2
 800909a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800909e:	f363 118f 	bfi	r1, r3, #6, #10
 80090a2:	4823      	ldr	r0, [pc, #140]	; (8009130 <usage_fault+0x164>)
 80090a4:	f7fb fa52 	bl	800454c <log_0>
 80090a8:	e7b1      	b.n	800900e <usage_fault+0x42>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 80090aa:	f04f 0100 	mov.w	r1, #0
 80090ae:	2301      	movs	r3, #1
 80090b0:	f363 0102 	bfi	r1, r3, #0, #3
 80090b4:	f36f 01c5 	bfc	r1, #3, #3
 80090b8:	4b17      	ldr	r3, [pc, #92]	; (8009118 <usage_fault+0x14c>)
 80090ba:	4a18      	ldr	r2, [pc, #96]	; (800911c <usage_fault+0x150>)
 80090bc:	1a9b      	subs	r3, r3, r2
 80090be:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80090c2:	f363 118f 	bfi	r1, r3, #6, #10
 80090c6:	481b      	ldr	r0, [pc, #108]	; (8009134 <usage_fault+0x168>)
 80090c8:	f7fb fa40 	bl	800454c <log_0>
 80090cc:	e7a4      	b.n	8009018 <usage_fault+0x4c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
 80090ce:	f04f 0100 	mov.w	r1, #0
 80090d2:	2301      	movs	r3, #1
 80090d4:	f363 0102 	bfi	r1, r3, #0, #3
 80090d8:	f36f 01c5 	bfc	r1, #3, #3
 80090dc:	4b0e      	ldr	r3, [pc, #56]	; (8009118 <usage_fault+0x14c>)
 80090de:	4a0f      	ldr	r2, [pc, #60]	; (800911c <usage_fault+0x150>)
 80090e0:	1a9b      	subs	r3, r3, r2
 80090e2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80090e6:	f363 118f 	bfi	r1, r3, #6, #10
 80090ea:	4813      	ldr	r0, [pc, #76]	; (8009138 <usage_fault+0x16c>)
 80090ec:	f7fb fa2e 	bl	800454c <log_0>
 80090f0:	e797      	b.n	8009022 <usage_fault+0x56>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 80090f2:	f04f 0100 	mov.w	r1, #0
 80090f6:	2301      	movs	r3, #1
 80090f8:	f363 0102 	bfi	r1, r3, #0, #3
 80090fc:	f36f 01c5 	bfc	r1, #3, #3
 8009100:	4b05      	ldr	r3, [pc, #20]	; (8009118 <usage_fault+0x14c>)
 8009102:	4a06      	ldr	r2, [pc, #24]	; (800911c <usage_fault+0x150>)
 8009104:	1a9b      	subs	r3, r3, r2
 8009106:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800910a:	f363 118f 	bfi	r1, r3, #6, #10
 800910e:	480b      	ldr	r0, [pc, #44]	; (800913c <usage_fault+0x170>)
 8009110:	f7fb fa1c 	bl	800454c <log_0>
 8009114:	e78a      	b.n	800902c <usage_fault+0x60>
 8009116:	bf00      	nop
 8009118:	0801d760 	.word	0x0801d760
 800911c:	0801d6d0 	.word	0x0801d6d0
 8009120:	0801fb38 	.word	0x0801fb38
 8009124:	e000ed00 	.word	0xe000ed00
 8009128:	0801fb50 	.word	0x0801fb50
 800912c:	0801fb64 	.word	0x0801fb64
 8009130:	0801fb80 	.word	0x0801fb80
 8009134:	0801fba0 	.word	0x0801fba0
 8009138:	0801fbc8 	.word	0x0801fbc8
 800913c:	0801fbe4 	.word	0x0801fbe4

08009140 <debug_monitor>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void debug_monitor(const z_arch_esf_t *esf)
{
 8009140:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	PR_FAULT_INFO(
 8009142:	f04f 0100 	mov.w	r1, #0
 8009146:	2301      	movs	r3, #1
 8009148:	f363 0102 	bfi	r1, r3, #0, #3
 800914c:	f36f 01c5 	bfc	r1, #3, #3
 8009150:	4b05      	ldr	r3, [pc, #20]	; (8009168 <debug_monitor+0x28>)
 8009152:	4a06      	ldr	r2, [pc, #24]	; (800916c <debug_monitor+0x2c>)
 8009154:	1a9b      	subs	r3, r3, r2
 8009156:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800915a:	f363 118f 	bfi	r1, r3, #6, #10
 800915e:	4804      	ldr	r0, [pc, #16]	; (8009170 <debug_monitor+0x30>)
 8009160:	f7fb f9f4 	bl	800454c <log_0>
		"***** Debug monitor exception (not implemented) *****");
}
 8009164:	bd08      	pop	{r3, pc}
 8009166:	bf00      	nop
 8009168:	0801d760 	.word	0x0801d760
 800916c:	0801d6d0 	.word	0x0801d6d0
 8009170:	0801fc10 	.word	0x0801fc10

08009174 <mem_manage_fault>:
{
 8009174:	b570      	push	{r4, r5, r6, lr}
 8009176:	4605      	mov	r5, r0
 8009178:	460e      	mov	r6, r1
 800917a:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
 800917c:	f04f 0100 	mov.w	r1, #0
 8009180:	2301      	movs	r3, #1
 8009182:	f363 0102 	bfi	r1, r3, #0, #3
 8009186:	f36f 01c5 	bfc	r1, #3, #3
 800918a:	4b53      	ldr	r3, [pc, #332]	; (80092d8 <mem_manage_fault+0x164>)
 800918c:	4a53      	ldr	r2, [pc, #332]	; (80092dc <mem_manage_fault+0x168>)
 800918e:	1a9b      	subs	r3, r3, r2
 8009190:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8009194:	f363 118f 	bfi	r1, r3, #6, #10
 8009198:	4851      	ldr	r0, [pc, #324]	; (80092e0 <mem_manage_fault+0x16c>)
 800919a:	f7fb f9d7 	bl	800454c <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 800919e:	4b51      	ldr	r3, [pc, #324]	; (80092e4 <mem_manage_fault+0x170>)
 80091a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091a2:	f013 0f10 	tst.w	r3, #16
 80091a6:	d11f      	bne.n	80091e8 <mem_manage_fault+0x74>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 80091a8:	4b4e      	ldr	r3, [pc, #312]	; (80092e4 <mem_manage_fault+0x170>)
 80091aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ac:	f013 0f08 	tst.w	r3, #8
 80091b0:	d12c      	bne.n	800920c <mem_manage_fault+0x98>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 80091b2:	4b4c      	ldr	r3, [pc, #304]	; (80092e4 <mem_manage_fault+0x170>)
 80091b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091b6:	f013 0f02 	tst.w	r3, #2
 80091ba:	d139      	bne.n	8009230 <mem_manage_fault+0xbc>
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 80091bc:	4b49      	ldr	r3, [pc, #292]	; (80092e4 <mem_manage_fault+0x170>)
 80091be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c0:	f013 0f01 	tst.w	r3, #1
 80091c4:	d164      	bne.n	8009290 <mem_manage_fault+0x11c>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 80091c6:	4b47      	ldr	r3, [pc, #284]	; (80092e4 <mem_manage_fault+0x170>)
 80091c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ca:	f013 0f20 	tst.w	r3, #32
 80091ce:	d171      	bne.n	80092b4 <mem_manage_fault+0x140>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
 80091d0:	4b44      	ldr	r3, [pc, #272]	; (80092e4 <mem_manage_fault+0x170>)
 80091d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 80091d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80091d6:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 80091da:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
 80091dc:	4628      	mov	r0, r5
 80091de:	f00e fcab 	bl	8017b38 <memory_fault_recoverable>
 80091e2:	7020      	strb	r0, [r4, #0]
}
 80091e4:	2000      	movs	r0, #0
 80091e6:	bd70      	pop	{r4, r5, r6, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
 80091e8:	f04f 0100 	mov.w	r1, #0
 80091ec:	2301      	movs	r3, #1
 80091ee:	f363 0102 	bfi	r1, r3, #0, #3
 80091f2:	f36f 01c5 	bfc	r1, #3, #3
 80091f6:	4b38      	ldr	r3, [pc, #224]	; (80092d8 <mem_manage_fault+0x164>)
 80091f8:	4a38      	ldr	r2, [pc, #224]	; (80092dc <mem_manage_fault+0x168>)
 80091fa:	1a9b      	subs	r3, r3, r2
 80091fc:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8009200:	f363 118f 	bfi	r1, r3, #6, #10
 8009204:	4838      	ldr	r0, [pc, #224]	; (80092e8 <mem_manage_fault+0x174>)
 8009206:	f7fb f9a1 	bl	800454c <log_0>
 800920a:	e7cd      	b.n	80091a8 <mem_manage_fault+0x34>
		PR_FAULT_INFO("  Unstacking error");
 800920c:	f04f 0100 	mov.w	r1, #0
 8009210:	2301      	movs	r3, #1
 8009212:	f363 0102 	bfi	r1, r3, #0, #3
 8009216:	f36f 01c5 	bfc	r1, #3, #3
 800921a:	4b2f      	ldr	r3, [pc, #188]	; (80092d8 <mem_manage_fault+0x164>)
 800921c:	4a2f      	ldr	r2, [pc, #188]	; (80092dc <mem_manage_fault+0x168>)
 800921e:	1a9b      	subs	r3, r3, r2
 8009220:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8009224:	f363 118f 	bfi	r1, r3, #6, #10
 8009228:	4830      	ldr	r0, [pc, #192]	; (80092ec <mem_manage_fault+0x178>)
 800922a:	f7fb f98f 	bl	800454c <log_0>
 800922e:	e7c0      	b.n	80091b2 <mem_manage_fault+0x3e>
		PR_FAULT_INFO("  Data Access Violation");
 8009230:	f04f 0100 	mov.w	r1, #0
 8009234:	2301      	movs	r3, #1
 8009236:	f363 0102 	bfi	r1, r3, #0, #3
 800923a:	f36f 01c5 	bfc	r1, #3, #3
 800923e:	4b26      	ldr	r3, [pc, #152]	; (80092d8 <mem_manage_fault+0x164>)
 8009240:	4a26      	ldr	r2, [pc, #152]	; (80092dc <mem_manage_fault+0x168>)
 8009242:	1a9b      	subs	r3, r3, r2
 8009244:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8009248:	f363 118f 	bfi	r1, r3, #6, #10
 800924c:	4828      	ldr	r0, [pc, #160]	; (80092f0 <mem_manage_fault+0x17c>)
 800924e:	f7fb f97d 	bl	800454c <log_0>
		mmfar = SCB->MMFAR;
 8009252:	4b24      	ldr	r3, [pc, #144]	; (80092e4 <mem_manage_fault+0x170>)
 8009254:	6b59      	ldr	r1, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8009256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009258:	f013 0f80 	tst.w	r3, #128	; 0x80
 800925c:	d0ae      	beq.n	80091bc <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 800925e:	f04f 0200 	mov.w	r2, #0
 8009262:	2301      	movs	r3, #1
 8009264:	f363 0202 	bfi	r2, r3, #0, #3
 8009268:	f36f 02c5 	bfc	r2, #3, #3
 800926c:	4b1a      	ldr	r3, [pc, #104]	; (80092d8 <mem_manage_fault+0x164>)
 800926e:	481b      	ldr	r0, [pc, #108]	; (80092dc <mem_manage_fault+0x168>)
 8009270:	1a1b      	subs	r3, r3, r0
 8009272:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8009276:	f363 128f 	bfi	r2, r3, #6, #10
 800927a:	481e      	ldr	r0, [pc, #120]	; (80092f4 <mem_manage_fault+0x180>)
 800927c:	f7fa fff6 	bl	800426c <log_1>
			if (from_hard_fault) {
 8009280:	2e00      	cmp	r6, #0
 8009282:	d09b      	beq.n	80091bc <mem_manage_fault+0x48>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8009284:	4a17      	ldr	r2, [pc, #92]	; (80092e4 <mem_manage_fault+0x170>)
 8009286:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8009288:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800928c:	6293      	str	r3, [r2, #40]	; 0x28
 800928e:	e795      	b.n	80091bc <mem_manage_fault+0x48>
		PR_FAULT_INFO("  Instruction Access Violation");
 8009290:	f04f 0100 	mov.w	r1, #0
 8009294:	2301      	movs	r3, #1
 8009296:	f363 0102 	bfi	r1, r3, #0, #3
 800929a:	f36f 01c5 	bfc	r1, #3, #3
 800929e:	4b0e      	ldr	r3, [pc, #56]	; (80092d8 <mem_manage_fault+0x164>)
 80092a0:	4a0e      	ldr	r2, [pc, #56]	; (80092dc <mem_manage_fault+0x168>)
 80092a2:	1a9b      	subs	r3, r3, r2
 80092a4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80092a8:	f363 118f 	bfi	r1, r3, #6, #10
 80092ac:	4812      	ldr	r0, [pc, #72]	; (80092f8 <mem_manage_fault+0x184>)
 80092ae:	f7fb f94d 	bl	800454c <log_0>
 80092b2:	e788      	b.n	80091c6 <mem_manage_fault+0x52>
		PR_FAULT_INFO(
 80092b4:	f04f 0100 	mov.w	r1, #0
 80092b8:	2301      	movs	r3, #1
 80092ba:	f363 0102 	bfi	r1, r3, #0, #3
 80092be:	f36f 01c5 	bfc	r1, #3, #3
 80092c2:	4b05      	ldr	r3, [pc, #20]	; (80092d8 <mem_manage_fault+0x164>)
 80092c4:	4a05      	ldr	r2, [pc, #20]	; (80092dc <mem_manage_fault+0x168>)
 80092c6:	1a9b      	subs	r3, r3, r2
 80092c8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80092cc:	f363 118f 	bfi	r1, r3, #6, #10
 80092d0:	480a      	ldr	r0, [pc, #40]	; (80092fc <mem_manage_fault+0x188>)
 80092d2:	f7fb f93b 	bl	800454c <log_0>
 80092d6:	e77b      	b.n	80091d0 <mem_manage_fault+0x5c>
 80092d8:	0801d760 	.word	0x0801d760
 80092dc:	0801d6d0 	.word	0x0801d6d0
 80092e0:	0801fc48 	.word	0x0801fc48
 80092e4:	e000ed00 	.word	0xe000ed00
 80092e8:	0801fc60 	.word	0x0801fc60
 80092ec:	0801fc94 	.word	0x0801fc94
 80092f0:	0801fca8 	.word	0x0801fca8
 80092f4:	0801fcc0 	.word	0x0801fcc0
 80092f8:	0801fcd8 	.word	0x0801fcd8
 80092fc:	0801fcf8 	.word	0x0801fcf8

08009300 <bus_fault>:
{
 8009300:	b570      	push	{r4, r5, r6, lr}
 8009302:	4605      	mov	r5, r0
 8009304:	460e      	mov	r6, r1
 8009306:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** BUS FAULT *****");
 8009308:	f04f 0100 	mov.w	r1, #0
 800930c:	2301      	movs	r3, #1
 800930e:	f363 0102 	bfi	r1, r3, #0, #3
 8009312:	f36f 01c5 	bfc	r1, #3, #3
 8009316:	4b5f      	ldr	r3, [pc, #380]	; (8009494 <bus_fault+0x194>)
 8009318:	4a5f      	ldr	r2, [pc, #380]	; (8009498 <bus_fault+0x198>)
 800931a:	1a9b      	subs	r3, r3, r2
 800931c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8009320:	f363 118f 	bfi	r1, r3, #6, #10
 8009324:	485d      	ldr	r0, [pc, #372]	; (800949c <bus_fault+0x19c>)
 8009326:	f7fb f911 	bl	800454c <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 800932a:	4b5d      	ldr	r3, [pc, #372]	; (80094a0 <bus_fault+0x1a0>)
 800932c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800932e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8009332:	d124      	bne.n	800937e <bus_fault+0x7e>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8009334:	4b5a      	ldr	r3, [pc, #360]	; (80094a0 <bus_fault+0x1a0>)
 8009336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009338:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800933c:	d131      	bne.n	80093a2 <bus_fault+0xa2>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 800933e:	4b58      	ldr	r3, [pc, #352]	; (80094a0 <bus_fault+0x1a0>)
 8009340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009342:	f413 7f00 	tst.w	r3, #512	; 0x200
 8009346:	d13e      	bne.n	80093c6 <bus_fault+0xc6>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8009348:	4b55      	ldr	r3, [pc, #340]	; (80094a0 <bus_fault+0x1a0>)
 800934a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800934c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8009350:	d169      	bne.n	8009426 <bus_fault+0x126>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8009352:	4b53      	ldr	r3, [pc, #332]	; (80094a0 <bus_fault+0x1a0>)
 8009354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009356:	f413 7f80 	tst.w	r3, #256	; 0x100
 800935a:	d176      	bne.n	800944a <bus_fault+0x14a>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 800935c:	4b50      	ldr	r3, [pc, #320]	; (80094a0 <bus_fault+0x1a0>)
 800935e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009360:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8009364:	f040 8083 	bne.w	800946e <bus_fault+0x16e>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8009368:	4a4d      	ldr	r2, [pc, #308]	; (80094a0 <bus_fault+0x1a0>)
 800936a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800936c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8009370:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
 8009372:	4628      	mov	r0, r5
 8009374:	f00e fbe0 	bl	8017b38 <memory_fault_recoverable>
 8009378:	7020      	strb	r0, [r4, #0]
}
 800937a:	2000      	movs	r0, #0
 800937c:	bd70      	pop	{r4, r5, r6, pc}
		PR_FAULT_INFO("  Stacking error");
 800937e:	f04f 0100 	mov.w	r1, #0
 8009382:	2301      	movs	r3, #1
 8009384:	f363 0102 	bfi	r1, r3, #0, #3
 8009388:	f36f 01c5 	bfc	r1, #3, #3
 800938c:	4b41      	ldr	r3, [pc, #260]	; (8009494 <bus_fault+0x194>)
 800938e:	4a42      	ldr	r2, [pc, #264]	; (8009498 <bus_fault+0x198>)
 8009390:	1a9b      	subs	r3, r3, r2
 8009392:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8009396:	f363 118f 	bfi	r1, r3, #6, #10
 800939a:	4842      	ldr	r0, [pc, #264]	; (80094a4 <bus_fault+0x1a4>)
 800939c:	f7fb f8d6 	bl	800454c <log_0>
 80093a0:	e7c8      	b.n	8009334 <bus_fault+0x34>
		PR_FAULT_INFO("  Unstacking error");
 80093a2:	f04f 0100 	mov.w	r1, #0
 80093a6:	2301      	movs	r3, #1
 80093a8:	f363 0102 	bfi	r1, r3, #0, #3
 80093ac:	f36f 01c5 	bfc	r1, #3, #3
 80093b0:	4b38      	ldr	r3, [pc, #224]	; (8009494 <bus_fault+0x194>)
 80093b2:	4a39      	ldr	r2, [pc, #228]	; (8009498 <bus_fault+0x198>)
 80093b4:	1a9b      	subs	r3, r3, r2
 80093b6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80093ba:	f363 118f 	bfi	r1, r3, #6, #10
 80093be:	483a      	ldr	r0, [pc, #232]	; (80094a8 <bus_fault+0x1a8>)
 80093c0:	f7fb f8c4 	bl	800454c <log_0>
 80093c4:	e7bb      	b.n	800933e <bus_fault+0x3e>
		PR_FAULT_INFO("  Precise data bus error");
 80093c6:	f04f 0100 	mov.w	r1, #0
 80093ca:	2301      	movs	r3, #1
 80093cc:	f363 0102 	bfi	r1, r3, #0, #3
 80093d0:	f36f 01c5 	bfc	r1, #3, #3
 80093d4:	4b2f      	ldr	r3, [pc, #188]	; (8009494 <bus_fault+0x194>)
 80093d6:	4a30      	ldr	r2, [pc, #192]	; (8009498 <bus_fault+0x198>)
 80093d8:	1a9b      	subs	r3, r3, r2
 80093da:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80093de:	f363 118f 	bfi	r1, r3, #6, #10
 80093e2:	4832      	ldr	r0, [pc, #200]	; (80094ac <bus_fault+0x1ac>)
 80093e4:	f7fb f8b2 	bl	800454c <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
 80093e8:	4b2d      	ldr	r3, [pc, #180]	; (80094a0 <bus_fault+0x1a0>)
 80093ea:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 80093ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ee:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80093f2:	d0a9      	beq.n	8009348 <bus_fault+0x48>
			PR_EXC("  BFAR Address: 0x%x", bfar);
 80093f4:	f04f 0200 	mov.w	r2, #0
 80093f8:	2301      	movs	r3, #1
 80093fa:	f363 0202 	bfi	r2, r3, #0, #3
 80093fe:	f36f 02c5 	bfc	r2, #3, #3
 8009402:	4b24      	ldr	r3, [pc, #144]	; (8009494 <bus_fault+0x194>)
 8009404:	4824      	ldr	r0, [pc, #144]	; (8009498 <bus_fault+0x198>)
 8009406:	1a1b      	subs	r3, r3, r0
 8009408:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800940c:	f363 128f 	bfi	r2, r3, #6, #10
 8009410:	4827      	ldr	r0, [pc, #156]	; (80094b0 <bus_fault+0x1b0>)
 8009412:	f7fa ff2b 	bl	800426c <log_1>
			if (from_hard_fault) {
 8009416:	2e00      	cmp	r6, #0
 8009418:	d096      	beq.n	8009348 <bus_fault+0x48>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 800941a:	4a21      	ldr	r2, [pc, #132]	; (80094a0 <bus_fault+0x1a0>)
 800941c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800941e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009422:	6293      	str	r3, [r2, #40]	; 0x28
 8009424:	e790      	b.n	8009348 <bus_fault+0x48>
		PR_FAULT_INFO("  Imprecise data bus error");
 8009426:	f04f 0100 	mov.w	r1, #0
 800942a:	2301      	movs	r3, #1
 800942c:	f363 0102 	bfi	r1, r3, #0, #3
 8009430:	f36f 01c5 	bfc	r1, #3, #3
 8009434:	4b17      	ldr	r3, [pc, #92]	; (8009494 <bus_fault+0x194>)
 8009436:	4a18      	ldr	r2, [pc, #96]	; (8009498 <bus_fault+0x198>)
 8009438:	1a9b      	subs	r3, r3, r2
 800943a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800943e:	f363 118f 	bfi	r1, r3, #6, #10
 8009442:	481c      	ldr	r0, [pc, #112]	; (80094b4 <bus_fault+0x1b4>)
 8009444:	f7fb f882 	bl	800454c <log_0>
 8009448:	e783      	b.n	8009352 <bus_fault+0x52>
		PR_FAULT_INFO("  Instruction bus error");
 800944a:	f04f 0100 	mov.w	r1, #0
 800944e:	2301      	movs	r3, #1
 8009450:	f363 0102 	bfi	r1, r3, #0, #3
 8009454:	f36f 01c5 	bfc	r1, #3, #3
 8009458:	4b0e      	ldr	r3, [pc, #56]	; (8009494 <bus_fault+0x194>)
 800945a:	4a0f      	ldr	r2, [pc, #60]	; (8009498 <bus_fault+0x198>)
 800945c:	1a9b      	subs	r3, r3, r2
 800945e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8009462:	f363 118f 	bfi	r1, r3, #6, #10
 8009466:	4814      	ldr	r0, [pc, #80]	; (80094b8 <bus_fault+0x1b8>)
 8009468:	f7fb f870 	bl	800454c <log_0>
 800946c:	e77c      	b.n	8009368 <bus_fault+0x68>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 800946e:	f04f 0100 	mov.w	r1, #0
 8009472:	2301      	movs	r3, #1
 8009474:	f363 0102 	bfi	r1, r3, #0, #3
 8009478:	f36f 01c5 	bfc	r1, #3, #3
 800947c:	4b05      	ldr	r3, [pc, #20]	; (8009494 <bus_fault+0x194>)
 800947e:	4a06      	ldr	r2, [pc, #24]	; (8009498 <bus_fault+0x198>)
 8009480:	1a9b      	subs	r3, r3, r2
 8009482:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8009486:	f363 118f 	bfi	r1, r3, #6, #10
 800948a:	480c      	ldr	r0, [pc, #48]	; (80094bc <bus_fault+0x1bc>)
 800948c:	f7fb f85e 	bl	800454c <log_0>
 8009490:	e76a      	b.n	8009368 <bus_fault+0x68>
 8009492:	bf00      	nop
 8009494:	0801d760 	.word	0x0801d760
 8009498:	0801d6d0 	.word	0x0801d6d0
 800949c:	0801fd28 	.word	0x0801fd28
 80094a0:	e000ed00 	.word	0xe000ed00
 80094a4:	0801fd40 	.word	0x0801fd40
 80094a8:	0801fc94 	.word	0x0801fc94
 80094ac:	0801fd54 	.word	0x0801fd54
 80094b0:	0801fd70 	.word	0x0801fd70
 80094b4:	0801fd88 	.word	0x0801fd88
 80094b8:	0801fda4 	.word	0x0801fda4
 80094bc:	0801fcf8 	.word	0x0801fcf8

080094c0 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
 80094c0:	b570      	push	{r4, r5, r6, lr}
 80094c2:	4605      	mov	r5, r0
 80094c4:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** HARD FAULT *****");
 80094c6:	f04f 0100 	mov.w	r1, #0
 80094ca:	2301      	movs	r3, #1
 80094cc:	f363 0102 	bfi	r1, r3, #0, #3
 80094d0:	f36f 01c5 	bfc	r1, #3, #3
 80094d4:	4b2b      	ldr	r3, [pc, #172]	; (8009584 <hard_fault+0xc4>)
 80094d6:	4a2c      	ldr	r2, [pc, #176]	; (8009588 <hard_fault+0xc8>)
 80094d8:	1a9b      	subs	r3, r3, r2
 80094da:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80094de:	f363 118f 	bfi	r1, r3, #6, #10
 80094e2:	482a      	ldr	r0, [pc, #168]	; (800958c <hard_fault+0xcc>)
 80094e4:	f7fb f832 	bl	800454c <log_0>
	}
#undef _SVC_OPCODE

	*recoverable = memory_fault_recoverable(esf);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
 80094e8:	2300      	movs	r3, #0
 80094ea:	7023      	strb	r3, [r4, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 80094ec:	4b28      	ldr	r3, [pc, #160]	; (8009590 <hard_fault+0xd0>)
 80094ee:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 80094f0:	f016 0602 	ands.w	r6, r6, #2
 80094f4:	d105      	bne.n	8009502 <hard_fault+0x42>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 80094f6:	4b26      	ldr	r3, [pc, #152]	; (8009590 <hard_fault+0xd0>)
 80094f8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80094fa:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
 80094fe:	d113      	bne.n	8009528 <hard_fault+0x68>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
 8009500:	bd70      	pop	{r4, r5, r6, pc}
		PR_EXC("  Bus fault on vector table read");
 8009502:	f04f 0100 	mov.w	r1, #0
 8009506:	2301      	movs	r3, #1
 8009508:	f363 0102 	bfi	r1, r3, #0, #3
 800950c:	f36f 01c5 	bfc	r1, #3, #3
 8009510:	4b1c      	ldr	r3, [pc, #112]	; (8009584 <hard_fault+0xc4>)
 8009512:	4a1d      	ldr	r2, [pc, #116]	; (8009588 <hard_fault+0xc8>)
 8009514:	1a9b      	subs	r3, r3, r2
 8009516:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800951a:	f363 118f 	bfi	r1, r3, #6, #10
 800951e:	481d      	ldr	r0, [pc, #116]	; (8009594 <hard_fault+0xd4>)
 8009520:	f7fb f814 	bl	800454c <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8009524:	2000      	movs	r0, #0
 8009526:	e7eb      	b.n	8009500 <hard_fault+0x40>
		PR_EXC("  Fault escalation (see below)");
 8009528:	f04f 0100 	mov.w	r1, #0
 800952c:	2301      	movs	r3, #1
 800952e:	f363 0102 	bfi	r1, r3, #0, #3
 8009532:	f36f 01c5 	bfc	r1, #3, #3
 8009536:	4b13      	ldr	r3, [pc, #76]	; (8009584 <hard_fault+0xc4>)
 8009538:	4a13      	ldr	r2, [pc, #76]	; (8009588 <hard_fault+0xc8>)
 800953a:	1a9b      	subs	r3, r3, r2
 800953c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8009540:	f363 118f 	bfi	r1, r3, #6, #10
 8009544:	4814      	ldr	r0, [pc, #80]	; (8009598 <hard_fault+0xd8>)
 8009546:	f7fb f801 	bl	800454c <log_0>
		if (SCB_MMFSR != 0) {
 800954a:	4b14      	ldr	r3, [pc, #80]	; (800959c <hard_fault+0xdc>)
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	b943      	cbnz	r3, 8009562 <hard_fault+0xa2>
		} else if (SCB_BFSR != 0) {
 8009550:	4b13      	ldr	r3, [pc, #76]	; (80095a0 <hard_fault+0xe0>)
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	b95b      	cbnz	r3, 800956e <hard_fault+0xae>
		} else if (SCB_UFSR != 0) {
 8009556:	4b13      	ldr	r3, [pc, #76]	; (80095a4 <hard_fault+0xe4>)
 8009558:	881b      	ldrh	r3, [r3, #0]
 800955a:	b29b      	uxth	r3, r3
 800955c:	b96b      	cbnz	r3, 800957a <hard_fault+0xba>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800955e:	4630      	mov	r0, r6
	return reason;
 8009560:	e7ce      	b.n	8009500 <hard_fault+0x40>
			reason = mem_manage_fault(esf, 1, recoverable);
 8009562:	4622      	mov	r2, r4
 8009564:	2101      	movs	r1, #1
 8009566:	4628      	mov	r0, r5
 8009568:	f7ff fe04 	bl	8009174 <mem_manage_fault>
 800956c:	e7c8      	b.n	8009500 <hard_fault+0x40>
			reason = bus_fault(esf, 1, recoverable);
 800956e:	4622      	mov	r2, r4
 8009570:	2101      	movs	r1, #1
 8009572:	4628      	mov	r0, r5
 8009574:	f7ff fec4 	bl	8009300 <bus_fault>
 8009578:	e7c2      	b.n	8009500 <hard_fault+0x40>
			reason = usage_fault(esf);
 800957a:	4628      	mov	r0, r5
 800957c:	f7ff fd26 	bl	8008fcc <usage_fault>
 8009580:	e7be      	b.n	8009500 <hard_fault+0x40>
 8009582:	bf00      	nop
 8009584:	0801d760 	.word	0x0801d760
 8009588:	0801d6d0 	.word	0x0801d6d0
 800958c:	0801fdbc 	.word	0x0801fdbc
 8009590:	e000ed00 	.word	0xe000ed00
 8009594:	0801fdd4 	.word	0x0801fdd4
 8009598:	0801fdf8 	.word	0x0801fdf8
 800959c:	e000ed28 	.word	0xe000ed28
 80095a0:	e000ed29 	.word	0xe000ed29
 80095a4:	e000ed2a 	.word	0xe000ed2a

080095a8 <reserved_exception>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
 80095a8:	b508      	push	{r3, lr}
 80095aa:	460a      	mov	r2, r1
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
 80095ac:	f04f 0300 	mov.w	r3, #0
 80095b0:	2101      	movs	r1, #1
 80095b2:	f361 0302 	bfi	r3, r1, #0, #3
 80095b6:	f36f 03c5 	bfc	r3, #3, #3
 80095ba:	4808      	ldr	r0, [pc, #32]	; (80095dc <reserved_exception+0x34>)
 80095bc:	4908      	ldr	r1, [pc, #32]	; (80095e0 <reserved_exception+0x38>)
 80095be:	1a40      	subs	r0, r0, r1
 80095c0:	f3c0 00c9 	ubfx	r0, r0, #3, #10
 80095c4:	f360 138f 	bfi	r3, r0, #6, #10
 80095c8:	2a0f      	cmp	r2, #15
 80095ca:	dc05      	bgt.n	80095d8 <reserved_exception+0x30>
 80095cc:	4905      	ldr	r1, [pc, #20]	; (80095e4 <reserved_exception+0x3c>)
 80095ce:	3a10      	subs	r2, #16
 80095d0:	4805      	ldr	r0, [pc, #20]	; (80095e8 <reserved_exception+0x40>)
 80095d2:	f7fa fecb 	bl	800436c <log_2>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
 80095d6:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****",
 80095d8:	4904      	ldr	r1, [pc, #16]	; (80095ec <reserved_exception+0x44>)
 80095da:	e7f8      	b.n	80095ce <reserved_exception+0x26>
 80095dc:	0801d760 	.word	0x0801d760
 80095e0:	0801d6d0 	.word	0x0801d6d0
 80095e4:	0801fe18 	.word	0x0801fe18
 80095e8:	0801fe4c 	.word	0x0801fe4c
 80095ec:	0801fe30 	.word	0x0801fe30

080095f0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 80095f0:	b570      	push	{r4, r5, r6, lr}
 80095f2:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80095f4:	4b2b      	ldr	r3, [pc, #172]	; (80096a4 <z_arm_fault+0xb4>)
 80095f6:	685d      	ldr	r5, [r3, #4]
 80095f8:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80095fc:	2300      	movs	r3, #0
 80095fe:	f383 8811 	msr	BASEPRI, r3
 8009602:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8009606:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 800960a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800960e:	d12b      	bne.n	8009668 <z_arm_fault+0x78>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 8009610:	f002 030c 	and.w	r3, r2, #12
 8009614:	2b08      	cmp	r3, #8
 8009616:	d010      	beq.n	800963a <z_arm_fault+0x4a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8009618:	f012 0f08 	tst.w	r2, #8
 800961c:	d021      	beq.n	8009662 <z_arm_fault+0x72>
			ptr_esf =  (z_arch_esf_t *)psp;
 800961e:	460c      	mov	r4, r1
	*nested_exc = false;
 8009620:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
 8009622:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 8009626:	4629      	mov	r1, r5
 8009628:	4620      	mov	r0, r4
 800962a:	f00e fa87 	bl	8017b3c <fault_handle>
 800962e:	4605      	mov	r5, r0
	if (recoverable) {
 8009630:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8009634:	b1db      	cbz	r3, 800966e <z_arm_fault+0x7e>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
 8009636:	b00a      	add	sp, #40	; 0x28
 8009638:	bd70      	pop	{r4, r5, r6, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 800963a:	f04f 0100 	mov.w	r1, #0
 800963e:	2301      	movs	r3, #1
 8009640:	f363 0102 	bfi	r1, r3, #0, #3
 8009644:	f36f 01c5 	bfc	r1, #3, #3
 8009648:	4b17      	ldr	r3, [pc, #92]	; (80096a8 <z_arm_fault+0xb8>)
 800964a:	4a18      	ldr	r2, [pc, #96]	; (80096ac <z_arm_fault+0xbc>)
 800964c:	1a9b      	subs	r3, r3, r2
 800964e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8009652:	f363 118f 	bfi	r1, r3, #6, #10
 8009656:	4816      	ldr	r0, [pc, #88]	; (80096b0 <z_arm_fault+0xc0>)
 8009658:	f7fa ff78 	bl	800454c <log_0>
	*nested_exc = false;
 800965c:	2600      	movs	r6, #0
		return NULL;
 800965e:	4634      	mov	r4, r6
 8009660:	e7df      	b.n	8009622 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
 8009662:	4604      	mov	r4, r0
			*nested_exc = true;
 8009664:	2601      	movs	r6, #1
 8009666:	e7dc      	b.n	8009622 <z_arm_fault+0x32>
	*nested_exc = false;
 8009668:	2600      	movs	r6, #0
		return NULL;
 800966a:	4634      	mov	r4, r6
 800966c:	e7d9      	b.n	8009622 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 800966e:	2220      	movs	r2, #32
 8009670:	4621      	mov	r1, r4
 8009672:	a801      	add	r0, sp, #4
 8009674:	f00e fc02 	bl	8017e7c <memcpy>
	if (nested_exc) {
 8009678:	b14e      	cbz	r6, 800968e <z_arm_fault+0x9e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 800967a:	9b08      	ldr	r3, [sp, #32]
 800967c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009680:	b95a      	cbnz	r2, 800969a <z_arm_fault+0xaa>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8009682:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8009686:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 800968a:	9308      	str	r3, [sp, #32]
 800968c:	e005      	b.n	800969a <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 800968e:	9b08      	ldr	r3, [sp, #32]
 8009690:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8009694:	f023 0301 	bic.w	r3, r3, #1
 8009698:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
 800969a:	a901      	add	r1, sp, #4
 800969c:	4628      	mov	r0, r5
 800969e:	f00e fa33 	bl	8017b08 <z_arm_fatal_error>
 80096a2:	e7c8      	b.n	8009636 <z_arm_fault+0x46>
 80096a4:	e000ed00 	.word	0xe000ed00
 80096a8:	0801d760 	.word	0x0801d760
 80096ac:	0801d6d0 	.word	0x0801d6d0
 80096b0:	0801fe60 	.word	0x0801fe60

080096b4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 80096b4:	4a02      	ldr	r2, [pc, #8]	; (80096c0 <z_arm_fault_init+0xc>)
 80096b6:	6953      	ldr	r3, [r2, #20]
 80096b8:	f043 0310 	orr.w	r3, r3, #16
 80096bc:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 80096be:	4770      	bx	lr
 80096c0:	e000ed00 	.word	0xe000ed00

080096c4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 80096c4:	4b04      	ldr	r3, [pc, #16]	; (80096d8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 80096c6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 80096c8:	6a18      	ldr	r0, [r3, #32]
	cmp r0, r1
 80096ca:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 80096cc:	d003      	beq.n	80096d6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 80096ce:	4903      	ldr	r1, [pc, #12]	; (80096dc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 80096d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 80096d4:	600a      	str	r2, [r1, #0]

080096d6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 80096d6:	4770      	bx	lr
	ldr r3, =_kernel
 80096d8:	20002278 	.word	0x20002278
	ldr r1, =_SCS_ICSR
 80096dc:	e000ed04 	.word	0xe000ed04

080096e0 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 80096e0:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 80096e2:	e006      	b.n	80096f2 <z_arm_interrupt_init+0x12>
 80096e4:	f002 010f 	and.w	r1, r2, #15
 80096e8:	4b09      	ldr	r3, [pc, #36]	; (8009710 <z_arm_interrupt_init+0x30>)
 80096ea:	440b      	add	r3, r1
 80096ec:	2110      	movs	r1, #16
 80096ee:	7619      	strb	r1, [r3, #24]
 80096f0:	3201      	adds	r2, #1
 80096f2:	2a51      	cmp	r2, #81	; 0x51
 80096f4:	dc0a      	bgt.n	800970c <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
 80096f6:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	dbf3      	blt.n	80096e4 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80096fc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8009700:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8009704:	2110      	movs	r1, #16
 8009706:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
 800970a:	e7f1      	b.n	80096f0 <z_arm_interrupt_init+0x10>
	}
}
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	e000ecfc 	.word	0xe000ecfc

08009714 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
 8009714:	b510      	push	{r4, lr}
 8009716:	4604      	mov	r4, r0
	z_thread_single_abort(thread);
 8009718:	f00a fd22 	bl	8014160 <z_thread_single_abort>

	if (_current == thread) {
 800971c:	4b11      	ldr	r3, [pc, #68]	; (8009764 <z_impl_k_thread_abort+0x50>)
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	42a3      	cmp	r3, r4
 8009722:	d00a      	beq.n	800973a <z_impl_k_thread_abort+0x26>
	__asm__ volatile(
 8009724:	f04f 0310 	mov.w	r3, #16
 8009728:	f3ef 8011 	mrs	r0, BASEPRI
 800972c:	f383 8811 	msr	BASEPRI, r3
 8009730:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
 8009734:	f013 fa26 	bl	801cb84 <z_reschedule_irqlock>
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
 8009738:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800973a:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 800973e:	b12b      	cbz	r3, 800974c <z_impl_k_thread_abort+0x38>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8009740:	4a09      	ldr	r2, [pc, #36]	; (8009768 <z_impl_k_thread_abort+0x54>)
 8009742:	6853      	ldr	r3, [r2, #4]
 8009744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009748:	6053      	str	r3, [r2, #4]
 800974a:	e7eb      	b.n	8009724 <z_impl_k_thread_abort+0x10>
 800974c:	f04f 0310 	mov.w	r3, #16
 8009750:	f3ef 8011 	mrs	r0, BASEPRI
 8009754:	f383 8811 	msr	BASEPRI, r3
 8009758:	f3bf 8f6f 	isb	sy

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
	ret = arch_swap(key);
 800975c:	f7ff faa4 	bl	8008ca8 <arch_swap>
}

static inline void z_swap_unlocked(void)
{
	(void) z_swap_irqlock(arch_irq_lock());
}
 8009760:	e7e0      	b.n	8009724 <z_impl_k_thread_abort+0x10>
 8009762:	bf00      	nop
 8009764:	20002278 	.word	0x20002278
 8009768:	e000ed00 	.word	0xe000ed00

0800976c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 800976c:	4b01      	ldr	r3, [pc, #4]	; (8009774 <__stdout_hook_install+0x8>)
 800976e:	6018      	str	r0, [r3, #0]
}
 8009770:	4770      	bx	lr
 8009772:	bf00      	nop
 8009774:	20000460 	.word	0x20000460

08009778 <sprintf>:
	*(p.ptr) = 0;
	return r;
}

int sprintf(char *_MLIBC_RESTRICT s, const char *_MLIBC_RESTRICT format, ...)
{
 8009778:	b40e      	push	{r1, r2, r3}
 800977a:	b500      	push	{lr}
 800977c:	b084      	sub	sp, #16
 800977e:	ab05      	add	r3, sp, #20
 8009780:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list vargs;

	struct emitter p;
	int     r;

	p.ptr = s;
 8009784:	9001      	str	r0, [sp, #4]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
 8009786:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800978a:	9102      	str	r1, [sp, #8]

	va_start(vargs, format);
 800978c:	9303      	str	r3, [sp, #12]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
 800978e:	a901      	add	r1, sp, #4
 8009790:	4805      	ldr	r0, [pc, #20]	; (80097a8 <sprintf+0x30>)
 8009792:	f7f9 fe99 	bl	80034c8 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
 8009796:	9b01      	ldr	r3, [sp, #4]
 8009798:	2200      	movs	r2, #0
 800979a:	701a      	strb	r2, [r3, #0]
	return r;
}
 800979c:	b004      	add	sp, #16
 800979e:	f85d eb04 	ldr.w	lr, [sp], #4
 80097a2:	b003      	add	sp, #12
 80097a4:	4770      	bx	lr
 80097a6:	bf00      	nop
 80097a8:	08017f09 	.word	0x08017f09

080097ac <pinmux_stm32_init>:
    {STM32_PIN_PD0, STM32F3_PINMUX_FUNC_PD0_CAN1_RX},
    {STM32_PIN_PD1, STM32F3_PINMUX_FUNC_PD1_CAN1_TX},
#endif
};

static int pinmux_stm32_init(const struct device *port) {
 80097ac:	b508      	push	{r3, lr}
    ARG_UNUSED(port);

    stm32_setup_pins(pinconf, ARRAY_SIZE(pinconf));
 80097ae:	2102      	movs	r1, #2
 80097b0:	4802      	ldr	r0, [pc, #8]	; (80097bc <pinmux_stm32_init+0x10>)
 80097b2:	f7fd f9e7 	bl	8006b84 <stm32_setup_pins>

    return 0;
}
 80097b6:	2000      	movs	r0, #0
 80097b8:	bd08      	pop	{r3, pc}
 80097ba:	bf00      	nop
 80097bc:	0801fe8c 	.word	0x0801fe8c

080097c0 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
 80097c0:	2940      	cmp	r1, #64	; 0x40
 80097c2:	bf28      	it	cs
 80097c4:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
 80097c6:	2300      	movs	r3, #0
 80097c8:	428b      	cmp	r3, r1
 80097ca:	d217      	bcs.n	80097fc <bt_hex_real+0x3c>
{
 80097cc:	b470      	push	{r4, r5, r6}
		str[i * 2]     = hex[b[i] >> 4];
 80097ce:	5cc4      	ldrb	r4, [r0, r3]
 80097d0:	0924      	lsrs	r4, r4, #4
 80097d2:	005a      	lsls	r2, r3, #1
 80097d4:	4e0c      	ldr	r6, [pc, #48]	; (8009808 <bt_hex_real+0x48>)
 80097d6:	5d34      	ldrb	r4, [r6, r4]
 80097d8:	4d0c      	ldr	r5, [pc, #48]	; (800980c <bt_hex_real+0x4c>)
 80097da:	f805 4013 	strb.w	r4, [r5, r3, lsl #1]
		str[i * 2 + 1] = hex[b[i] & 0xf];
 80097de:	5cc4      	ldrb	r4, [r0, r3]
 80097e0:	f004 040f 	and.w	r4, r4, #15
 80097e4:	3201      	adds	r2, #1
 80097e6:	5d34      	ldrb	r4, [r6, r4]
 80097e8:	54ac      	strb	r4, [r5, r2]
	for (i = 0; i < len; i++) {
 80097ea:	3301      	adds	r3, #1
 80097ec:	428b      	cmp	r3, r1
 80097ee:	d3ee      	bcc.n	80097ce <bt_hex_real+0xe>
	}

	str[i * 2] = '\0';
 80097f0:	4806      	ldr	r0, [pc, #24]	; (800980c <bt_hex_real+0x4c>)
 80097f2:	2200      	movs	r2, #0
 80097f4:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]

	return str;
}
 80097f8:	bc70      	pop	{r4, r5, r6}
 80097fa:	4770      	bx	lr
	str[i * 2] = '\0';
 80097fc:	4803      	ldr	r0, [pc, #12]	; (800980c <bt_hex_real+0x4c>)
 80097fe:	2200      	movs	r2, #0
 8009800:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
}
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop
 8009808:	0801fe9c 	.word	0x0801fe9c
 800980c:	20001f80 	.word	0x20001f80

08009810 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
 8009810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009812:	b08b      	sub	sp, #44	; 0x2c
 8009814:	4604      	mov	r4, r0
	switch (addr->type) {
 8009816:	7803      	ldrb	r3, [r0, #0]
 8009818:	2b03      	cmp	r3, #3
 800981a:	d82c      	bhi.n	8009876 <bt_addr_le_str_real+0x66>
 800981c:	e8df f003 	tbb	[pc, r3]
 8009820:	26211c02 	.word	0x26211c02
		strcpy(type, "public");
 8009824:	4917      	ldr	r1, [pc, #92]	; (8009884 <bt_addr_le_str_real+0x74>)
 8009826:	a807      	add	r0, sp, #28
 8009828:	f00e fab2 	bl	8017d90 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
 800982c:	7963      	ldrb	r3, [r4, #5]
 800982e:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
 8009830:	78e1      	ldrb	r1, [r4, #3]
 8009832:	78a0      	ldrb	r0, [r4, #2]
 8009834:	7866      	ldrb	r6, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
 8009836:	4d14      	ldr	r5, [pc, #80]	; (8009888 <bt_addr_le_str_real+0x78>)
 8009838:	af07      	add	r7, sp, #28
 800983a:	9705      	str	r7, [sp, #20]
 800983c:	9604      	str	r6, [sp, #16]
 800983e:	9003      	str	r0, [sp, #12]
 8009840:	9102      	str	r1, [sp, #8]
 8009842:	9201      	str	r2, [sp, #4]
 8009844:	9300      	str	r3, [sp, #0]
 8009846:	79a3      	ldrb	r3, [r4, #6]
 8009848:	4a10      	ldr	r2, [pc, #64]	; (800988c <bt_addr_le_str_real+0x7c>)
 800984a:	211e      	movs	r1, #30
 800984c:	4628      	mov	r0, r5
 800984e:	f00b fed6 	bl	80155fe <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
 8009852:	4628      	mov	r0, r5
 8009854:	b00b      	add	sp, #44	; 0x2c
 8009856:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
 8009858:	490d      	ldr	r1, [pc, #52]	; (8009890 <bt_addr_le_str_real+0x80>)
 800985a:	a807      	add	r0, sp, #28
 800985c:	f00e fa98 	bl	8017d90 <strcpy>
		break;
 8009860:	e7e4      	b.n	800982c <bt_addr_le_str_real+0x1c>
		strcpy(type, "public-id");
 8009862:	490c      	ldr	r1, [pc, #48]	; (8009894 <bt_addr_le_str_real+0x84>)
 8009864:	a807      	add	r0, sp, #28
 8009866:	f00e fa93 	bl	8017d90 <strcpy>
		break;
 800986a:	e7df      	b.n	800982c <bt_addr_le_str_real+0x1c>
		strcpy(type, "random-id");
 800986c:	490a      	ldr	r1, [pc, #40]	; (8009898 <bt_addr_le_str_real+0x88>)
 800986e:	a807      	add	r0, sp, #28
 8009870:	f00e fa8e 	bl	8017d90 <strcpy>
		break;
 8009874:	e7da      	b.n	800982c <bt_addr_le_str_real+0x1c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
 8009876:	4a09      	ldr	r2, [pc, #36]	; (800989c <bt_addr_le_str_real+0x8c>)
 8009878:	210a      	movs	r1, #10
 800987a:	a807      	add	r0, sp, #28
 800987c:	f00b febf 	bl	80155fe <snprintk>
		break;
 8009880:	e7d4      	b.n	800982c <bt_addr_le_str_real+0x1c>
 8009882:	bf00      	nop
 8009884:	0801dd98 	.word	0x0801dd98
 8009888:	20002004 	.word	0x20002004
 800988c:	0801ddc0 	.word	0x0801ddc0
 8009890:	0801dda0 	.word	0x0801dda0
 8009894:	0801dda8 	.word	0x0801dda8
 8009898:	0801ddb4 	.word	0x0801ddb4
 800989c:	080215d0 	.word	0x080215d0

080098a0 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
 80098a0:	b508      	push	{r3, lr}
	int err;
	BT_INFO("Saving ID");
 80098a2:	f04f 0100 	mov.w	r1, #0
 80098a6:	2303      	movs	r3, #3
 80098a8:	f363 0102 	bfi	r1, r3, #0, #3
 80098ac:	f36f 01c5 	bfc	r1, #3, #3
 80098b0:	4b12      	ldr	r3, [pc, #72]	; (80098fc <save_id+0x5c>)
 80098b2:	4a13      	ldr	r2, [pc, #76]	; (8009900 <save_id+0x60>)
 80098b4:	1a9b      	subs	r3, r3, r2
 80098b6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80098ba:	f363 118f 	bfi	r1, r3, #6, #10
 80098be:	4811      	ldr	r0, [pc, #68]	; (8009904 <save_id+0x64>)
 80098c0:	f7fa fe44 	bl	800454c <log_0>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
 80098c4:	4910      	ldr	r1, [pc, #64]	; (8009908 <save_id+0x68>)
 80098c6:	79ca      	ldrb	r2, [r1, #7]
	err = settings_save_one("bt/id", &bt_dev.id_addr,
 80098c8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80098cc:	480f      	ldr	r0, [pc, #60]	; (800990c <save_id+0x6c>)
 80098ce:	f7fc fd01 	bl	80062d4 <settings_save_one>
	if (err) {
 80098d2:	b900      	cbnz	r0, 80098d6 <save_id+0x36>
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
 80098d4:	bd08      	pop	{r3, pc}
 80098d6:	4601      	mov	r1, r0
		BT_ERR("Failed to save ID (err %d)", err);
 80098d8:	f04f 0200 	mov.w	r2, #0
 80098dc:	2301      	movs	r3, #1
 80098de:	f363 0202 	bfi	r2, r3, #0, #3
 80098e2:	f36f 02c5 	bfc	r2, #3, #3
 80098e6:	4b05      	ldr	r3, [pc, #20]	; (80098fc <save_id+0x5c>)
 80098e8:	4805      	ldr	r0, [pc, #20]	; (8009900 <save_id+0x60>)
 80098ea:	1a1b      	subs	r3, r3, r0
 80098ec:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80098f0:	f363 128f 	bfi	r2, r3, #6, #10
 80098f4:	4806      	ldr	r0, [pc, #24]	; (8009910 <save_id+0x70>)
 80098f6:	f7fa fcb9 	bl	800426c <log_1>
}
 80098fa:	e7eb      	b.n	80098d4 <save_id+0x34>
 80098fc:	0801d728 	.word	0x0801d728
 8009900:	0801d6d0 	.word	0x0801d6d0
 8009904:	0801feb8 	.word	0x0801feb8
 8009908:	20000000 	.word	0x20000000
 800990c:	0801fec4 	.word	0x0801fec4
 8009910:	0801fecc 	.word	0x0801fecc

08009914 <set>:
{
 8009914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009916:	b083      	sub	sp, #12
	if (!name) {
 8009918:	2800      	cmp	r0, #0
 800991a:	d03c      	beq.n	8009996 <set+0x82>
 800991c:	4616      	mov	r6, r2
 800991e:	461d      	mov	r5, r3
 8009920:	4604      	mov	r4, r0
	len = settings_name_next(name, &next);
 8009922:	a901      	add	r1, sp, #4
 8009924:	f00d fb1c 	bl	8016f60 <settings_name_next>
 8009928:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
 800992a:	4941      	ldr	r1, [pc, #260]	; (8009a30 <set+0x11c>)
 800992c:	4620      	mov	r0, r4
 800992e:	f00e fa71 	bl	8017e14 <strncmp>
 8009932:	4607      	mov	r7, r0
 8009934:	2800      	cmp	r0, #0
 8009936:	d177      	bne.n	8009a28 <set+0x114>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8009938:	f3bf 8f5b 	dmb	ish
 800993c:	4b3d      	ldr	r3, [pc, #244]	; (8009a34 <set+0x120>)
 800993e:	6819      	ldr	r1, [r3, #0]
 8009940:	f3bf 8f5b 	dmb	ish
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
 8009944:	f3c1 0480 	ubfx	r4, r1, #2, #1
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
 8009948:	f011 0f04 	tst.w	r1, #4
 800994c:	d137      	bne.n	80099be <set+0xaa>
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
 800994e:	2207      	movs	r2, #7
 8009950:	4939      	ldr	r1, [pc, #228]	; (8009a38 <set+0x124>)
 8009952:	4628      	mov	r0, r5
 8009954:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
 8009956:	2806      	cmp	r0, #6
 8009958:	d857      	bhi.n	8009a0a <set+0xf6>
			if (len < 0) {
 800995a:	2800      	cmp	r0, #0
 800995c:	db42      	blt.n	80099e4 <set+0xd0>
				BT_ERR("Invalid length ID address in storage");
 800995e:	f04f 0100 	mov.w	r1, #0
 8009962:	2301      	movs	r3, #1
 8009964:	f363 0102 	bfi	r1, r3, #0, #3
 8009968:	f36f 01c5 	bfc	r1, #3, #3
 800996c:	4b33      	ldr	r3, [pc, #204]	; (8009a3c <set+0x128>)
 800996e:	4a34      	ldr	r2, [pc, #208]	; (8009a40 <set+0x12c>)
 8009970:	1a9b      	subs	r3, r3, r2
 8009972:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8009976:	f363 118f 	bfi	r1, r3, #6, #10
 800997a:	4832      	ldr	r0, [pc, #200]	; (8009a44 <set+0x130>)
 800997c:	f7fa fde6 	bl	800454c <log_0>
			(void)memset(bt_dev.id_addr, 0,
 8009980:	4d2d      	ldr	r5, [pc, #180]	; (8009a38 <set+0x124>)
 8009982:	2207      	movs	r2, #7
 8009984:	2100      	movs	r1, #0
 8009986:	4628      	mov	r0, r5
 8009988:	f00e fa9d 	bl	8017ec6 <memset>
			bt_dev.id_count = 0U;
 800998c:	2300      	movs	r3, #0
 800998e:	71eb      	strb	r3, [r5, #7]
}
 8009990:	4620      	mov	r0, r4
 8009992:	b003      	add	sp, #12
 8009994:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("Insufficient number of arguments");
 8009996:	f04f 0100 	mov.w	r1, #0
 800999a:	2301      	movs	r3, #1
 800999c:	f363 0102 	bfi	r1, r3, #0, #3
 80099a0:	f36f 01c5 	bfc	r1, #3, #3
 80099a4:	4b25      	ldr	r3, [pc, #148]	; (8009a3c <set+0x128>)
 80099a6:	4a26      	ldr	r2, [pc, #152]	; (8009a40 <set+0x12c>)
 80099a8:	1a9b      	subs	r3, r3, r2
 80099aa:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80099ae:	f363 118f 	bfi	r1, r3, #6, #10
 80099b2:	4825      	ldr	r0, [pc, #148]	; (8009a48 <set+0x134>)
 80099b4:	f7fa fdca 	bl	800454c <log_0>
		return -ENOENT;
 80099b8:	f06f 0401 	mvn.w	r4, #1
 80099bc:	e7e8      	b.n	8009990 <set+0x7c>
			BT_WARN("Ignoring identities stored in flash");
 80099be:	f04f 0100 	mov.w	r1, #0
 80099c2:	2302      	movs	r3, #2
 80099c4:	f363 0102 	bfi	r1, r3, #0, #3
 80099c8:	f36f 01c5 	bfc	r1, #3, #3
 80099cc:	4b1b      	ldr	r3, [pc, #108]	; (8009a3c <set+0x128>)
 80099ce:	4a1c      	ldr	r2, [pc, #112]	; (8009a40 <set+0x12c>)
 80099d0:	1a9b      	subs	r3, r3, r2
 80099d2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80099d6:	f363 118f 	bfi	r1, r3, #6, #10
 80099da:	481c      	ldr	r0, [pc, #112]	; (8009a4c <set+0x138>)
 80099dc:	f7fa fdb6 	bl	800454c <log_0>
			return 0;
 80099e0:	463c      	mov	r4, r7
 80099e2:	e7d5      	b.n	8009990 <set+0x7c>
				BT_ERR("Failed to read ID address from storage"
 80099e4:	f04f 0200 	mov.w	r2, #0
 80099e8:	2301      	movs	r3, #1
 80099ea:	f363 0202 	bfi	r2, r3, #0, #3
 80099ee:	f36f 02c5 	bfc	r2, #3, #3
 80099f2:	4b12      	ldr	r3, [pc, #72]	; (8009a3c <set+0x128>)
 80099f4:	4912      	ldr	r1, [pc, #72]	; (8009a40 <set+0x12c>)
 80099f6:	1a5b      	subs	r3, r3, r1
 80099f8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80099fc:	f363 128f 	bfi	r2, r3, #6, #10
 8009a00:	4601      	mov	r1, r0
 8009a02:	4813      	ldr	r0, [pc, #76]	; (8009a50 <set+0x13c>)
 8009a04:	f7fa fc32 	bl	800426c <log_1>
 8009a08:	e7ba      	b.n	8009980 <set+0x6c>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
 8009a0a:	4a12      	ldr	r2, [pc, #72]	; (8009a54 <set+0x140>)
 8009a0c:	fba2 3200 	umull	r3, r2, r2, r0
 8009a10:	1a80      	subs	r0, r0, r2
 8009a12:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 8009a16:	f3c2 0287 	ubfx	r2, r2, #2, #8
 8009a1a:	4b07      	ldr	r3, [pc, #28]	; (8009a38 <set+0x124>)
 8009a1c:	71da      	strb	r2, [r3, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
 8009a1e:	4623      	mov	r3, r4
 8009a20:	4293      	cmp	r3, r2
 8009a22:	dab5      	bge.n	8009990 <set+0x7c>
 8009a24:	3301      	adds	r3, #1
 8009a26:	e7fb      	b.n	8009a20 <set+0x10c>
	return -ENOENT;
 8009a28:	f06f 0401 	mvn.w	r4, #1
 8009a2c:	e7b0      	b.n	8009990 <set+0x7c>
 8009a2e:	bf00      	nop
 8009a30:	0801ff0c 	.word	0x0801ff0c
 8009a34:	20000094 	.word	0x20000094
 8009a38:	20000000 	.word	0x20000000
 8009a3c:	0801d728 	.word	0x0801d728
 8009a40:	0801d6d0 	.word	0x0801d6d0
 8009a44:	0801ff68 	.word	0x0801ff68
 8009a48:	0801fee8 	.word	0x0801fee8
 8009a4c:	0801ff10 	.word	0x0801ff10
 8009a50:	0801ff34 	.word	0x0801ff34
 8009a54:	24924925 	.word	0x24924925

08009a58 <bt_settings_encode_key>:
{
 8009a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a5c:	b088      	sub	sp, #32
 8009a5e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	if (key) {
 8009a60:	b1dc      	cbz	r4, 8009a9a <bt_settings_encode_key+0x42>
			 addr->a.val[5], addr->a.val[4], addr->a.val[3],
 8009a62:	799d      	ldrb	r5, [r3, #6]
 8009a64:	795e      	ldrb	r6, [r3, #5]
 8009a66:	791f      	ldrb	r7, [r3, #4]
			 addr->a.val[2], addr->a.val[1], addr->a.val[0],
 8009a68:	f893 c003 	ldrb.w	ip, [r3, #3]
 8009a6c:	f893 e002 	ldrb.w	lr, [r3, #2]
 8009a70:	f893 8001 	ldrb.w	r8, [r3, #1]
			 addr->type, key);
 8009a74:	781b      	ldrb	r3, [r3, #0]
		snprintk(path, path_size,
 8009a76:	9407      	str	r4, [sp, #28]
 8009a78:	9306      	str	r3, [sp, #24]
 8009a7a:	f8cd 8014 	str.w	r8, [sp, #20]
 8009a7e:	f8cd e010 	str.w	lr, [sp, #16]
 8009a82:	f8cd c00c 	str.w	ip, [sp, #12]
 8009a86:	9702      	str	r7, [sp, #8]
 8009a88:	9601      	str	r6, [sp, #4]
 8009a8a:	9500      	str	r5, [sp, #0]
 8009a8c:	4613      	mov	r3, r2
 8009a8e:	4a0e      	ldr	r2, [pc, #56]	; (8009ac8 <bt_settings_encode_key+0x70>)
 8009a90:	f00b fdb5 	bl	80155fe <snprintk>
}
 8009a94:	b008      	add	sp, #32
 8009a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			 addr->a.val[5], addr->a.val[4], addr->a.val[3],
 8009a9a:	799c      	ldrb	r4, [r3, #6]
 8009a9c:	795d      	ldrb	r5, [r3, #5]
 8009a9e:	791e      	ldrb	r6, [r3, #4]
			 addr->a.val[2], addr->a.val[1], addr->a.val[0],
 8009aa0:	78df      	ldrb	r7, [r3, #3]
 8009aa2:	f893 c002 	ldrb.w	ip, [r3, #2]
 8009aa6:	f893 e001 	ldrb.w	lr, [r3, #1]
			 addr->type);
 8009aaa:	781b      	ldrb	r3, [r3, #0]
		snprintk(path, path_size,
 8009aac:	9306      	str	r3, [sp, #24]
 8009aae:	f8cd e014 	str.w	lr, [sp, #20]
 8009ab2:	f8cd c010 	str.w	ip, [sp, #16]
 8009ab6:	9703      	str	r7, [sp, #12]
 8009ab8:	9602      	str	r6, [sp, #8]
 8009aba:	9501      	str	r5, [sp, #4]
 8009abc:	9400      	str	r4, [sp, #0]
 8009abe:	4613      	mov	r3, r2
 8009ac0:	4a02      	ldr	r2, [pc, #8]	; (8009acc <bt_settings_encode_key+0x74>)
 8009ac2:	f00b fd9c 	bl	80155fe <snprintk>
}
 8009ac6:	e7e5      	b.n	8009a94 <bt_settings_encode_key+0x3c>
 8009ac8:	0801ff90 	.word	0x0801ff90
 8009acc:	0801ffb4 	.word	0x0801ffb4

08009ad0 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
 8009ad0:	b508      	push	{r3, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8009ad2:	4b0b      	ldr	r3, [pc, #44]	; (8009b00 <bt_settings_save_id+0x30>)
 8009ad4:	f3bf 8f5b 	dmb	ish
 8009ad8:	e853 2f00 	ldrex	r2, [r3]
 8009adc:	f042 0101 	orr.w	r1, r2, #1
 8009ae0:	e843 1000 	strex	r0, r1, [r3]
 8009ae4:	2800      	cmp	r0, #0
 8009ae6:	d1f7      	bne.n	8009ad8 <bt_settings_save_id+0x8>
 8009ae8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 8009aec:	f012 0f01 	tst.w	r2, #1
 8009af0:	d000      	beq.n	8009af4 <bt_settings_save_id+0x24>
	k_work_submit(&save_id_work);
}
 8009af2:	bd08      	pop	{r3, pc}
		k_queue_append(&work_q->queue, work);
 8009af4:	f1a3 0108 	sub.w	r1, r3, #8
 8009af8:	4802      	ldr	r0, [pc, #8]	; (8009b04 <bt_settings_save_id+0x34>)
 8009afa:	f012 ffb7 	bl	801ca6c <k_queue_append>
 8009afe:	e7f8      	b.n	8009af2 <bt_settings_save_id+0x22>
 8009b00:	2000046c 	.word	0x2000046c
 8009b04:	20001408 	.word	0x20001408

08009b08 <commit>:

static int commit(void)
{
 8009b08:	b510      	push	{r4, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
 8009b0a:	4b20      	ldr	r3, [pc, #128]	; (8009b8c <commit+0x84>)
 8009b0c:	79db      	ldrb	r3, [r3, #7]
 8009b0e:	b30b      	cbz	r3, 8009b54 <commit+0x4c>
		bt_setup_public_id_addr();
	}

	if (!bt_dev.id_count) {
 8009b10:	4b1e      	ldr	r3, [pc, #120]	; (8009b8c <commit+0x84>)
 8009b12:	79db      	ldrb	r3, [r3, #7]
 8009b14:	b91b      	cbnz	r3, 8009b1e <commit+0x16>
		int err;

		err = bt_setup_random_id_addr();
 8009b16:	f00e fd99 	bl	801864c <bt_setup_random_id_addr>
		if (err) {
 8009b1a:	4604      	mov	r4, r0
 8009b1c:	b9e8      	cbnz	r0, 8009b5a <commit+0x52>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8009b1e:	f3bf 8f5b 	dmb	ish
 8009b22:	4b1b      	ldr	r3, [pc, #108]	; (8009b90 <commit+0x88>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f3bf 8f5b 	dmb	ish
			BT_ERR("Unable to setup an identity address");
			return err;
		}
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
 8009b2a:	f013 0f02 	tst.w	r3, #2
 8009b2e:	d026      	beq.n	8009b7e <commit+0x76>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8009b30:	4b17      	ldr	r3, [pc, #92]	; (8009b90 <commit+0x88>)
 8009b32:	f3bf 8f5b 	dmb	ish
 8009b36:	e853 4f00 	ldrex	r4, [r3]
 8009b3a:	f424 4200 	bic.w	r2, r4, #32768	; 0x8000
 8009b3e:	e843 2100 	strex	r1, r2, [r3]
 8009b42:	2900      	cmp	r1, #0
 8009b44:	d1f7      	bne.n	8009b36 <commit+0x2e>
 8009b46:	f3bf 8f5b 	dmb	ish
	}

	/* If any part of the Identity Information of the device has been
	 * generated this Identity needs to be saved persistently.
	 */
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
 8009b4a:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
 8009b4e:	d119      	bne.n	8009b84 <commit+0x7c>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
 8009b50:	4620      	mov	r0, r4
 8009b52:	bd10      	pop	{r4, pc}
		bt_setup_public_id_addr();
 8009b54:	f002 fd64 	bl	800c620 <bt_setup_public_id_addr>
 8009b58:	e7da      	b.n	8009b10 <commit+0x8>
			BT_ERR("Unable to setup an identity address");
 8009b5a:	f04f 0100 	mov.w	r1, #0
 8009b5e:	2301      	movs	r3, #1
 8009b60:	f363 0102 	bfi	r1, r3, #0, #3
 8009b64:	f36f 01c5 	bfc	r1, #3, #3
 8009b68:	4b0a      	ldr	r3, [pc, #40]	; (8009b94 <commit+0x8c>)
 8009b6a:	4a0b      	ldr	r2, [pc, #44]	; (8009b98 <commit+0x90>)
 8009b6c:	1a9b      	subs	r3, r3, r2
 8009b6e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8009b72:	f363 118f 	bfi	r1, r3, #6, #10
 8009b76:	4809      	ldr	r0, [pc, #36]	; (8009b9c <commit+0x94>)
 8009b78:	f7fa fce8 	bl	800454c <log_0>
			return err;
 8009b7c:	e7e8      	b.n	8009b50 <commit+0x48>
		bt_finalize_init();
 8009b7e:	f002 fc01 	bl	800c384 <bt_finalize_init>
 8009b82:	e7d5      	b.n	8009b30 <commit+0x28>
		bt_settings_save_id();
 8009b84:	f7ff ffa4 	bl	8009ad0 <bt_settings_save_id>
	return 0;
 8009b88:	2400      	movs	r4, #0
 8009b8a:	e7e1      	b.n	8009b50 <commit+0x48>
 8009b8c:	20000000 	.word	0x20000000
 8009b90:	20000094 	.word	0x20000094
 8009b94:	0801d728 	.word	0x0801d728
 8009b98:	0801d6d0 	.word	0x0801d6d0
 8009b9c:	0801ffd8 	.word	0x0801ffd8

08009ba0 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
 8009ba0:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
 8009ba2:	f7fc fd6b 	bl	800667c <settings_subsys_init>
	if (err) {
 8009ba6:	4604      	mov	r4, r0
 8009ba8:	b908      	cbnz	r0, 8009bae <bt_settings_init+0xe>
		BT_ERR("settings_subsys_init failed (err %d)", err);
		return err;
	}

	return 0;
}
 8009baa:	4620      	mov	r0, r4
 8009bac:	bd10      	pop	{r4, pc}
		BT_ERR("settings_subsys_init failed (err %d)", err);
 8009bae:	f04f 0200 	mov.w	r2, #0
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	f363 0202 	bfi	r2, r3, #0, #3
 8009bb8:	f36f 02c5 	bfc	r2, #3, #3
 8009bbc:	4b05      	ldr	r3, [pc, #20]	; (8009bd4 <bt_settings_init+0x34>)
 8009bbe:	4906      	ldr	r1, [pc, #24]	; (8009bd8 <bt_settings_init+0x38>)
 8009bc0:	1a5b      	subs	r3, r3, r1
 8009bc2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8009bc6:	f363 128f 	bfi	r2, r3, #6, #10
 8009bca:	4601      	mov	r1, r0
 8009bcc:	4803      	ldr	r0, [pc, #12]	; (8009bdc <bt_settings_init+0x3c>)
 8009bce:	f7fa fb4d 	bl	800426c <log_1>
		return err;
 8009bd2:	e7ea      	b.n	8009baa <bt_settings_init+0xa>
 8009bd4:	0801d728 	.word	0x0801d728
 8009bd8:	0801d6d0 	.word	0x0801d6d0
 8009bdc:	0801fffc 	.word	0x0801fffc

08009be0 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
 8009be0:	b570      	push	{r4, r5, r6, lr}
 8009be2:	4605      	mov	r5, r0
 8009be4:	460c      	mov	r4, r1
	switch (src->type) {
 8009be6:	7803      	ldrb	r3, [r0, #0]
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d010      	beq.n	8009c0e <uuid_to_uuid128+0x2e>
 8009bec:	2b02      	cmp	r3, #2
 8009bee:	d020      	beq.n	8009c32 <uuid_to_uuid128+0x52>
 8009bf0:	b103      	cbz	r3, 8009bf4 <uuid_to_uuid128+0x14>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
 8009bf2:	bd70      	pop	{r4, r5, r6, pc}
		*dst = uuid128_base;
 8009bf4:	4e12      	ldr	r6, [pc, #72]	; (8009c40 <uuid_to_uuid128+0x60>)
 8009bf6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009bf8:	6020      	str	r0, [r4, #0]
 8009bfa:	6061      	str	r1, [r4, #4]
 8009bfc:	60a2      	str	r2, [r4, #8]
 8009bfe:	60e3      	str	r3, [r4, #12]
 8009c00:	7833      	ldrb	r3, [r6, #0]
 8009c02:	7423      	strb	r3, [r4, #16]
		sys_put_le16(BT_UUID_16(src)->val,
 8009c04:	886b      	ldrh	r3, [r5, #2]
	dst[0] = val;
 8009c06:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
 8009c08:	0a1b      	lsrs	r3, r3, #8
 8009c0a:	73a3      	strb	r3, [r4, #14]
}
 8009c0c:	e7f1      	b.n	8009bf2 <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
 8009c0e:	4e0c      	ldr	r6, [pc, #48]	; (8009c40 <uuid_to_uuid128+0x60>)
 8009c10:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009c12:	6020      	str	r0, [r4, #0]
 8009c14:	6061      	str	r1, [r4, #4]
 8009c16:	60a2      	str	r2, [r4, #8]
 8009c18:	60e3      	str	r3, [r4, #12]
 8009c1a:	7833      	ldrb	r3, [r6, #0]
 8009c1c:	7423      	strb	r3, [r4, #16]
		sys_put_le32(BT_UUID_32(src)->val,
 8009c1e:	686b      	ldr	r3, [r5, #4]
	dst[0] = val;
 8009c20:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
 8009c22:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009c26:	73a2      	strb	r2, [r4, #14]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
 8009c28:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
 8009c2a:	73e2      	strb	r2, [r4, #15]
	dst[1] = val >> 8;
 8009c2c:	0e1b      	lsrs	r3, r3, #24
 8009c2e:	7423      	strb	r3, [r4, #16]
}
 8009c30:	e7df      	b.n	8009bf2 <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
 8009c32:	2211      	movs	r2, #17
 8009c34:	4601      	mov	r1, r0
 8009c36:	4620      	mov	r0, r4
 8009c38:	f00e f920 	bl	8017e7c <memcpy>
		return;
 8009c3c:	e7d9      	b.n	8009bf2 <uuid_to_uuid128+0x12>
 8009c3e:	bf00      	nop
 8009c40:	08020030 	.word	0x08020030

08009c44 <bt_adv_foreach>:
#endif /* CONFIG_BT_BROADCASTER */
#endif /* defined(CONFIG_BT_EXT_ADV) */

static void bt_adv_foreach(void (*func)(struct bt_le_ext_adv *adv, void *data),
			   void *data)
{
 8009c44:	b508      	push	{r3, lr}
 8009c46:	4603      	mov	r3, r0
		if (atomic_test_bit(adv_pool[i].flags, BT_ADV_CREATED)) {
			func(&adv_pool[i], data);
		}
	}
#else
	func(&bt_dev.adv, data);
 8009c48:	4801      	ldr	r0, [pc, #4]	; (8009c50 <bt_adv_foreach+0xc>)
 8009c4a:	4798      	blx	r3
#endif /* defined(CONFIG_BT_EXT_ADV) */
}
 8009c4c:	bd08      	pop	{r3, pc}
 8009c4e:	bf00      	nop
 8009c50:	20000018 	.word	0x20000018

08009c54 <adv_new_legacy>:
	bt_dev.adv = adv_new();
	return bt_dev.adv;
#else
	return &bt_dev.adv;
#endif
}
 8009c54:	4800      	ldr	r0, [pc, #0]	; (8009c58 <adv_new_legacy+0x4>)
 8009c56:	4770      	bx	lr
 8009c58:	20000018 	.word	0x20000018

08009c5c <le_dhkey_complete>:

	pub_key_cb = NULL;
}

static void le_dhkey_complete(struct net_buf *buf)
{
 8009c5c:	b508      	push	{r3, lr}
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
 8009c5e:	6880      	ldr	r0, [r0, #8]

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
 8009c60:	4b06      	ldr	r3, [pc, #24]	; (8009c7c <le_dhkey_complete+0x20>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	b133      	cbz	r3, 8009c74 <le_dhkey_complete+0x18>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
 8009c66:	7802      	ldrb	r2, [r0, #0]
 8009c68:	b92a      	cbnz	r2, 8009c76 <le_dhkey_complete+0x1a>
 8009c6a:	3001      	adds	r0, #1
 8009c6c:	4798      	blx	r3
		dh_key_cb = NULL;
 8009c6e:	4b03      	ldr	r3, [pc, #12]	; (8009c7c <le_dhkey_complete+0x20>)
 8009c70:	2200      	movs	r2, #0
 8009c72:	601a      	str	r2, [r3, #0]
	}
}
 8009c74:	bd08      	pop	{r3, pc}
		dh_key_cb(evt->status ? NULL : evt->dhkey);
 8009c76:	2000      	movs	r0, #0
 8009c78:	e7f8      	b.n	8009c6c <le_dhkey_complete+0x10>
 8009c7a:	bf00      	nop
 8009c7c:	2000203c 	.word	0x2000203c

08009c80 <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
 8009c80:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.hci_version = rp->hci_version;
 8009c82:	7851      	ldrb	r1, [r2, #1]
 8009c84:	4b07      	ldr	r3, [pc, #28]	; (8009ca4 <read_local_ver_complete+0x24>)
 8009c86:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
 8009c8a:	8851      	ldrh	r1, [r2, #2]
 8009c8c:	8759      	strh	r1, [r3, #58]	; 0x3a
	bt_dev.lmp_version = rp->lmp_version;
 8009c8e:	7911      	ldrb	r1, [r2, #4]
 8009c90:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
 8009c94:	f8b2 1007 	ldrh.w	r1, [r2, #7]
 8009c98:	8799      	strh	r1, [r3, #60]	; 0x3c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
 8009c9a:	f8b2 2005 	ldrh.w	r2, [r2, #5]
 8009c9e:	87da      	strh	r2, [r3, #62]	; 0x3e
}
 8009ca0:	4770      	bx	lr
 8009ca2:	bf00      	nop
 8009ca4:	20000000 	.word	0x20000000

08009ca8 <le_read_supp_states_complete>:
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
}

static void le_read_supp_states_complete(struct net_buf *buf)
{
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
 8009ca8:	6883      	ldr	r3, [r0, #8]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
 8009caa:	7a19      	ldrb	r1, [r3, #8]
 8009cac:	79da      	ldrb	r2, [r3, #7]
 8009cae:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
 8009cb2:	7998      	ldrb	r0, [r3, #6]
 8009cb4:	795a      	ldrb	r2, [r3, #5]
 8009cb6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 *
 *  @return 32-bit integer in host endianness.
 */
static inline uint32_t sys_get_le32(const uint8_t src[4])
{
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
 8009cba:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	return ((uint16_t)src[1] << 8) | src[0];
 8009cbe:	7918      	ldrb	r0, [r3, #4]
 8009cc0:	78d9      	ldrb	r1, [r3, #3]
 8009cc2:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8009cc6:	7898      	ldrb	r0, [r3, #2]
 8009cc8:	785b      	ldrb	r3, [r3, #1]
 8009cca:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
 8009cce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
 8009cd2:	4903      	ldr	r1, [pc, #12]	; (8009ce0 <le_read_supp_states_complete+0x38>)
 8009cd4:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
 8009cd8:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
}
 8009cdc:	4770      	bx	lr
 8009cde:	bf00      	nop
 8009ce0:	20000000 	.word	0x20000000

08009ce4 <le_read_resolving_list_size_complete>:

#if defined(CONFIG_BT_SMP)
static void le_read_resolving_list_size_complete(struct net_buf *buf)
{
	struct bt_hci_rp_le_read_rl_size *rp = (void *)buf->data;
 8009ce4:	6883      	ldr	r3, [r0, #8]

	BT_DBG("Resolving List size %u", rp->rl_size);

	bt_dev.le.rl_size = rp->rl_size;
 8009ce6:	785a      	ldrb	r2, [r3, #1]
 8009ce8:	4b01      	ldr	r3, [pc, #4]	; (8009cf0 <le_read_resolving_list_size_complete+0xc>)
 8009cea:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 8009cee:	4770      	bx	lr
 8009cf0:	20000000 	.word	0x20000000

08009cf4 <ver_str>:
	return 1U;
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(uint8_t ver)
{
 8009cf4:	b470      	push	{r4, r5, r6}
 8009cf6:	b08d      	sub	sp, #52	; 0x34
 8009cf8:	4606      	mov	r6, r0
	const char * const str[] = {
 8009cfa:	466c      	mov	r4, sp
 8009cfc:	4d0a      	ldr	r5, [pc, #40]	; (8009d28 <ver_str+0x34>)
 8009cfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009d00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009d02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009d04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009d06:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009d0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2"
	};

	if (ver < ARRAY_SIZE(str)) {
 8009d0e:	2e0b      	cmp	r6, #11
 8009d10:	d903      	bls.n	8009d1a <ver_str+0x26>
		return str[ver];
	}

	return "unknown";
 8009d12:	4806      	ldr	r0, [pc, #24]	; (8009d2c <ver_str+0x38>)
}
 8009d14:	b00d      	add	sp, #52	; 0x34
 8009d16:	bc70      	pop	{r4, r5, r6}
 8009d18:	4770      	bx	lr
		return str[ver];
 8009d1a:	ab0c      	add	r3, sp, #48	; 0x30
 8009d1c:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8009d20:	f856 0c30 	ldr.w	r0, [r6, #-48]
 8009d24:	e7f6      	b.n	8009d14 <ver_str+0x20>
 8009d26:	bf00      	nop
 8009d28:	0801d80c 	.word	0x0801d80c
 8009d2c:	08020084 	.word	0x08020084

08009d30 <hci_reset_complete>:
	uint8_t status = buf->data[0];
 8009d30:	6883      	ldr	r3, [r0, #8]
 8009d32:	781b      	ldrb	r3, [r3, #0]
	if (status) {
 8009d34:	b993      	cbnz	r3, 8009d5c <hci_reset_complete+0x2c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8009d36:	f3bf 8f5b 	dmb	ish
 8009d3a:	4b09      	ldr	r3, [pc, #36]	; (8009d60 <hci_reset_complete+0x30>)
 8009d3c:	f853 2f94 	ldr.w	r2, [r3, #148]!
 8009d40:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
 8009d44:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8009d48:	f3bf 8f5b 	dmb	ish
 8009d4c:	e853 1f00 	ldrex	r1, [r3]
 8009d50:	e843 2000 	strex	r0, r2, [r3]
 8009d54:	2800      	cmp	r0, #0
 8009d56:	d1f9      	bne.n	8009d4c <hci_reset_complete+0x1c>
 8009d58:	f3bf 8f5b 	dmb	ish
}
 8009d5c:	4770      	bx	lr
 8009d5e:	bf00      	nop
 8009d60:	20000000 	.word	0x20000000

08009d64 <read_local_features_complete>:
{
 8009d64:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
 8009d66:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
 8009d68:	2208      	movs	r2, #8
 8009d6a:	3101      	adds	r1, #1
 8009d6c:	4801      	ldr	r0, [pc, #4]	; (8009d74 <read_local_features_complete+0x10>)
 8009d6e:	f00e f885 	bl	8017e7c <memcpy>
}
 8009d72:	bd08      	pop	{r3, pc}
 8009d74:	20000040 	.word	0x20000040

08009d78 <read_supported_commands_complete>:
{
 8009d78:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
 8009d7a:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
 8009d7c:	2240      	movs	r2, #64	; 0x40
 8009d7e:	3101      	adds	r1, #1
 8009d80:	4801      	ldr	r0, [pc, #4]	; (8009d88 <read_supported_commands_complete+0x10>)
 8009d82:	f00e f87b 	bl	8017e7c <memcpy>
}
 8009d86:	bd08      	pop	{r3, pc}
 8009d88:	20000048 	.word	0x20000048

08009d8c <read_le_features_complete>:
{
 8009d8c:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
 8009d8e:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
 8009d90:	2208      	movs	r2, #8
 8009d92:	3101      	adds	r1, #1
 8009d94:	4801      	ldr	r0, [pc, #4]	; (8009d9c <read_le_features_complete+0x10>)
 8009d96:	f00e f871 	bl	8017e7c <memcpy>
}
 8009d9a:	bd08      	pop	{r3, pc}
 8009d9c:	20000098 	.word	0x20000098

08009da0 <set_data_add>:
	size_t len;
};

static int set_data_add(uint8_t *set_data, uint8_t set_data_len_max,
			const struct bt_ad *ad, size_t ad_len, uint8_t *data_len)
{
 8009da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009da4:	b083      	sub	sp, #12
 8009da6:	4607      	mov	r7, r0
 8009da8:	4689      	mov	r9, r1
 8009daa:	9201      	str	r2, [sp, #4]
 8009dac:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;

	for (size_t i = 0; i < ad_len; i++) {
 8009dae:	f04f 0b00 	mov.w	fp, #0
	uint8_t set_data_len = 0;
 8009db2:	465c      	mov	r4, fp
	for (size_t i = 0; i < ad_len; i++) {
 8009db4:	9b00      	ldr	r3, [sp, #0]
 8009db6:	459b      	cmp	fp, r3
 8009db8:	d246      	bcs.n	8009e48 <set_data_add+0xa8>
		const struct bt_data *data = ad[i].data;
 8009dba:	9b01      	ldr	r3, [sp, #4]
 8009dbc:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8009dc0:	f853 803b 	ldr.w	r8, [r3, fp, lsl #3]

		for (size_t j = 0; j < ad[i].len; j++) {
 8009dc4:	2500      	movs	r5, #0
 8009dc6:	e011      	b.n	8009dec <set_data_add+0x4c>
				      shortened_len > 0)) {
					BT_ERR("Too big advertising data");
					return -EINVAL;
				}

				type = BT_DATA_NAME_SHORTENED;
 8009dc8:	2008      	movs	r0, #8
				len = shortened_len;
			}

			set_data[set_data_len++] = len + 1;
 8009dca:	b2d6      	uxtb	r6, r2
 8009dcc:	1c63      	adds	r3, r4, #1
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	f106 0e01 	add.w	lr, r6, #1
 8009dd4:	f807 e00c 	strb.w	lr, [r7, ip]
			set_data[set_data_len++] = type;
 8009dd8:	3402      	adds	r4, #2
 8009dda:	b2e4      	uxtb	r4, r4
 8009ddc:	54f8      	strb	r0, [r7, r3]

			memcpy(&set_data[set_data_len], data[j].data, len);
 8009dde:	6849      	ldr	r1, [r1, #4]
 8009de0:	1938      	adds	r0, r7, r4
 8009de2:	f00e f84b 	bl	8017e7c <memcpy>
			set_data_len += len;
 8009de6:	4434      	add	r4, r6
 8009de8:	b2e4      	uxtb	r4, r4
		for (size_t j = 0; j < ad[i].len; j++) {
 8009dea:	3501      	adds	r5, #1
 8009dec:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009df0:	42ab      	cmp	r3, r5
 8009df2:	d926      	bls.n	8009e42 <set_data_add+0xa2>
			size_t len = data[j].data_len;
 8009df4:	eb08 01c5 	add.w	r1, r8, r5, lsl #3
 8009df8:	784a      	ldrb	r2, [r1, #1]
			uint8_t type = data[j].type;
 8009dfa:	f818 0035 	ldrb.w	r0, [r8, r5, lsl #3]
			if ((set_data_len + len + 2) > set_data_len_max) {
 8009dfe:	46a4      	mov	ip, r4
 8009e00:	18a3      	adds	r3, r4, r2
 8009e02:	3302      	adds	r3, #2
 8009e04:	454b      	cmp	r3, r9
 8009e06:	d9e0      	bls.n	8009dca <set_data_add+0x2a>
				ssize_t shortened_len = set_data_len_max -
 8009e08:	eba9 0204 	sub.w	r2, r9, r4
 8009e0c:	3a02      	subs	r2, #2
				if (!(type == BT_DATA_NAME_COMPLETE &&
 8009e0e:	2809      	cmp	r0, #9
 8009e10:	d101      	bne.n	8009e16 <set_data_add+0x76>
 8009e12:	2a00      	cmp	r2, #0
 8009e14:	dcd8      	bgt.n	8009dc8 <set_data_add+0x28>
					BT_ERR("Too big advertising data");
 8009e16:	f04f 0100 	mov.w	r1, #0
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	f363 0102 	bfi	r1, r3, #0, #3
 8009e20:	f36f 01c5 	bfc	r1, #3, #3
 8009e24:	4b0a      	ldr	r3, [pc, #40]	; (8009e50 <set_data_add+0xb0>)
 8009e26:	4a0b      	ldr	r2, [pc, #44]	; (8009e54 <set_data_add+0xb4>)
 8009e28:	1a9b      	subs	r3, r3, r2
 8009e2a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8009e2e:	f363 118f 	bfi	r1, r3, #6, #10
 8009e32:	4809      	ldr	r0, [pc, #36]	; (8009e58 <set_data_add+0xb8>)
 8009e34:	f7fa fb8a 	bl	800454c <log_0>
					return -EINVAL;
 8009e38:	f06f 0015 	mvn.w	r0, #21
		}
	}

	*data_len = set_data_len;
	return 0;
}
 8009e3c:	b003      	add	sp, #12
 8009e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < ad_len; i++) {
 8009e42:	f10b 0b01 	add.w	fp, fp, #1
 8009e46:	e7b5      	b.n	8009db4 <set_data_add+0x14>
	*data_len = set_data_len;
 8009e48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e4a:	701c      	strb	r4, [r3, #0]
	return 0;
 8009e4c:	2000      	movs	r0, #0
 8009e4e:	e7f5      	b.n	8009e3c <set_data_add+0x9c>
 8009e50:	0801d708 	.word	0x0801d708
 8009e54:	0801d6d0 	.word	0x0801d6d0
 8009e58:	0802008c 	.word	0x0802008c

08009e5c <le_read_buffer_size_complete>:
{
 8009e5c:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
 8009e5e:	6882      	ldr	r2, [r0, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
 8009e60:	f8b2 3001 	ldrh.w	r3, [r2, #1]
 8009e64:	b299      	uxth	r1, r3
 8009e66:	4805      	ldr	r0, [pc, #20]	; (8009e7c <le_read_buffer_size_complete+0x20>)
 8009e68:	f8a0 30c4 	strh.w	r3, [r0, #196]	; 0xc4
	if (!bt_dev.le.acl_mtu) {
 8009e6c:	b901      	cbnz	r1, 8009e70 <le_read_buffer_size_complete+0x14>
}
 8009e6e:	bd08      	pop	{r3, pc}
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
 8009e70:	78d1      	ldrb	r1, [r2, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
 8009e72:	460a      	mov	r2, r1
 8009e74:	30c8      	adds	r0, #200	; 0xc8
 8009e76:	f012 ff99 	bl	801cdac <z_impl_k_sem_init>
 8009e7a:	e7f8      	b.n	8009e6e <le_read_buffer_size_complete+0x12>
 8009e7c:	20000000 	.word	0x20000000

08009e80 <read_buffer_size_complete>:
{
 8009e80:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
 8009e82:	6882      	ldr	r2, [r0, #8]
	if (bt_dev.le.acl_mtu) {
 8009e84:	4b07      	ldr	r3, [pc, #28]	; (8009ea4 <read_buffer_size_complete+0x24>)
 8009e86:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8009e8a:	b103      	cbz	r3, 8009e8e <read_buffer_size_complete+0xe>
}
 8009e8c:	bd08      	pop	{r3, pc}
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
 8009e8e:	f8b2 3001 	ldrh.w	r3, [r2, #1]
 8009e92:	4804      	ldr	r0, [pc, #16]	; (8009ea4 <read_buffer_size_complete+0x24>)
 8009e94:	f8a0 30c4 	strh.w	r3, [r0, #196]	; 0xc4
	pkts = sys_le16_to_cpu(rp->acl_max_num);
 8009e98:	8891      	ldrh	r1, [r2, #4]
 8009e9a:	460a      	mov	r2, r1
 8009e9c:	30c8      	adds	r0, #200	; 0xc8
 8009e9e:	f012 ff85 	bl	801cdac <z_impl_k_sem_init>
 8009ea2:	e7f3      	b.n	8009e8c <read_buffer_size_complete+0xc>
 8009ea4:	20000000 	.word	0x20000000

08009ea8 <pending_id_keys_update_set>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8009ea8:	4b08      	ldr	r3, [pc, #32]	; (8009ecc <pending_id_keys_update_set+0x24>)
 8009eaa:	f3bf 8f5b 	dmb	ish
 8009eae:	e853 2f00 	ldrex	r2, [r3]
 8009eb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009eb6:	e843 2c00 	strex	ip, r2, [r3]
 8009eba:	f1bc 0f00 	cmp.w	ip, #0
 8009ebe:	d1f6      	bne.n	8009eae <pending_id_keys_update_set+0x6>
 8009ec0:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
 8009ec4:	7a03      	ldrb	r3, [r0, #8]
 8009ec6:	4319      	orrs	r1, r3
 8009ec8:	7201      	strb	r1, [r0, #8]
}
 8009eca:	4770      	bx	lr
 8009ecc:	20000094 	.word	0x20000094

08009ed0 <hci_data_buf_overflow>:
{
 8009ed0:	b508      	push	{r3, lr}
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
 8009ed2:	6881      	ldr	r1, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
 8009ed4:	f04f 0200 	mov.w	r2, #0
 8009ed8:	2302      	movs	r3, #2
 8009eda:	f363 0202 	bfi	r2, r3, #0, #3
 8009ede:	f36f 02c5 	bfc	r2, #3, #3
 8009ee2:	4b06      	ldr	r3, [pc, #24]	; (8009efc <hci_data_buf_overflow+0x2c>)
 8009ee4:	4806      	ldr	r0, [pc, #24]	; (8009f00 <hci_data_buf_overflow+0x30>)
 8009ee6:	1a1b      	subs	r3, r3, r0
 8009ee8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8009eec:	f363 128f 	bfi	r2, r3, #6, #10
 8009ef0:	7809      	ldrb	r1, [r1, #0]
 8009ef2:	4804      	ldr	r0, [pc, #16]	; (8009f04 <hci_data_buf_overflow+0x34>)
 8009ef4:	f7fa f9ba 	bl	800426c <log_1>
}
 8009ef8:	bd08      	pop	{r3, pc}
 8009efa:	bf00      	nop
 8009efc:	0801d708 	.word	0x0801d708
 8009f00:	0801d6d0 	.word	0x0801d6d0
 8009f04:	080200a8 	.word	0x080200a8

08009f08 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
 8009f08:	b570      	push	{r4, r5, r6, lr}
 8009f0a:	4605      	mov	r5, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
 8009f0c:	2400      	movs	r4, #0
 8009f0e:	4b0a      	ldr	r3, [pc, #40]	; (8009f38 <id_find+0x30>)
 8009f10:	79db      	ldrb	r3, [r3, #7]
 8009f12:	42a3      	cmp	r3, r4
 8009f14:	d90c      	bls.n	8009f30 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
 8009f16:	4626      	mov	r6, r4
 8009f18:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8009f1c:	2207      	movs	r2, #7
 8009f1e:	4b06      	ldr	r3, [pc, #24]	; (8009f38 <id_find+0x30>)
 8009f20:	4419      	add	r1, r3
 8009f22:	4628      	mov	r0, r5
 8009f24:	f00d ff92 	bl	8017e4c <memcmp>
 8009f28:	b120      	cbz	r0, 8009f34 <id_find+0x2c>
	for (id = 0U; id < bt_dev.id_count; id++) {
 8009f2a:	3401      	adds	r4, #1
 8009f2c:	b2e4      	uxtb	r4, r4
 8009f2e:	e7ee      	b.n	8009f0e <id_find+0x6>
			return id;
		}
	}

	return -ENOENT;
 8009f30:	f06f 0601 	mvn.w	r6, #1
}
 8009f34:	4630      	mov	r0, r6
 8009f36:	bd70      	pop	{r4, r5, r6, pc}
 8009f38:	20000000 	.word	0x20000000

08009f3c <valid_adv_ext_param>:
	return err;
}
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */

static bool valid_adv_ext_param(const struct bt_le_adv_param *param)
{
 8009f3c:	b510      	push	{r4, lr}
 8009f3e:	b082      	sub	sp, #8
 8009f40:	4604      	mov	r4, r0
			/* Extended options require extended advertising. */
			return false;
		}
	}

	if (param->id >= bt_dev.id_count ||
 8009f42:	7800      	ldrb	r0, [r0, #0]
 8009f44:	4b1d      	ldr	r3, [pc, #116]	; (8009fbc <valid_adv_ext_param+0x80>)
 8009f46:	79db      	ldrb	r3, [r3, #7]
 8009f48:	4298      	cmp	r0, r3
 8009f4a:	d302      	bcc.n	8009f52 <valid_adv_ext_param+0x16>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
		return false;
 8009f4c:	2000      	movs	r0, #0
			return false;
		}
	}

	return true;
}
 8009f4e:	b002      	add	sp, #8
 8009f50:	bd10      	pop	{r4, pc}
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
 8009f52:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8009f56:	2300      	movs	r3, #0
 8009f58:	9300      	str	r3, [sp, #0]
 8009f5a:	f8cd 3003 	str.w	r3, [sp, #3]
 8009f5e:	2207      	movs	r2, #7
 8009f60:	4669      	mov	r1, sp
 8009f62:	4b16      	ldr	r3, [pc, #88]	; (8009fbc <valid_adv_ext_param+0x80>)
 8009f64:	4418      	add	r0, r3
 8009f66:	f00d ff71 	bl	8017e4c <memcmp>
	if (param->id >= bt_dev.id_count ||
 8009f6a:	2800      	cmp	r0, #0
 8009f6c:	d0ee      	beq.n	8009f4c <valid_adv_ext_param+0x10>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
 8009f6e:	6863      	ldr	r3, [r4, #4]
 8009f70:	f013 0f01 	tst.w	r3, #1
 8009f74:	d107      	bne.n	8009f86 <valid_adv_ext_param+0x4a>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
 8009f76:	4a11      	ldr	r2, [pc, #68]	; (8009fbc <valid_adv_ext_param+0x80>)
 8009f78:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8009f7c:	2a08      	cmp	r2, #8
 8009f7e:	d802      	bhi.n	8009f86 <valid_adv_ext_param+0x4a>
		    param->interval_min < 0x00a0) {
 8009f80:	68a2      	ldr	r2, [r4, #8]
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
 8009f82:	2a9f      	cmp	r2, #159	; 0x9f
 8009f84:	d911      	bls.n	8009faa <valid_adv_ext_param+0x6e>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
 8009f86:	f013 0f10 	tst.w	r3, #16
 8009f8a:	d103      	bne.n	8009f94 <valid_adv_ext_param+0x58>
	    !param->peer) {
 8009f8c:	6923      	ldr	r3, [r4, #16]
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
 8009f8e:	b10b      	cbz	r3, 8009f94 <valid_adv_ext_param+0x58>
	return true;
 8009f90:	2001      	movs	r0, #1
 8009f92:	e7dc      	b.n	8009f4e <valid_adv_ext_param+0x12>
		if (param->interval_min > param->interval_max ||
 8009f94:	68a3      	ldr	r3, [r4, #8]
 8009f96:	68e2      	ldr	r2, [r4, #12]
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d808      	bhi.n	8009fae <valid_adv_ext_param+0x72>
 8009f9c:	2b1f      	cmp	r3, #31
 8009f9e:	d908      	bls.n	8009fb2 <valid_adv_ext_param+0x76>
		    param->interval_min < 0x0020 ||
 8009fa0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8009fa4:	d807      	bhi.n	8009fb6 <valid_adv_ext_param+0x7a>
	return true;
 8009fa6:	2001      	movs	r0, #1
 8009fa8:	e7d1      	b.n	8009f4e <valid_adv_ext_param+0x12>
			return false;
 8009faa:	2000      	movs	r0, #0
 8009fac:	e7cf      	b.n	8009f4e <valid_adv_ext_param+0x12>
			return false;
 8009fae:	2000      	movs	r0, #0
 8009fb0:	e7cd      	b.n	8009f4e <valid_adv_ext_param+0x12>
 8009fb2:	2000      	movs	r0, #0
 8009fb4:	e7cb      	b.n	8009f4e <valid_adv_ext_param+0x12>
 8009fb6:	2000      	movs	r0, #0
 8009fb8:	e7c9      	b.n	8009f4e <valid_adv_ext_param+0x12>
 8009fba:	bf00      	nop
 8009fbc:	20000000 	.word	0x20000000

08009fc0 <update_sec_level>:
{
 8009fc0:	b510      	push	{r4, lr}
 8009fc2:	4604      	mov	r4, r0
	if (!conn->encrypt) {
 8009fc4:	7ac3      	ldrb	r3, [r0, #11]
 8009fc6:	b17b      	cbz	r3, 8009fe8 <update_sec_level+0x28>
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
 8009fc8:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 8009fcc:	b193      	cbz	r3, 8009ff4 <update_sec_level+0x34>
 8009fce:	7b5a      	ldrb	r2, [r3, #13]
 8009fd0:	f012 0f01 	tst.w	r2, #1
 8009fd4:	d00e      	beq.n	8009ff4 <update_sec_level+0x34>
		if (conn->le.keys->flags & BT_KEYS_SC &&
 8009fd6:	f012 0f10 	tst.w	r2, #16
 8009fda:	d002      	beq.n	8009fe2 <update_sec_level+0x22>
		    conn->le.keys->enc_size == BT_SMP_MAX_ENC_KEY_SIZE) {
 8009fdc:	7b1b      	ldrb	r3, [r3, #12]
		if (conn->le.keys->flags & BT_KEYS_SC &&
 8009fde:	2b10      	cmp	r3, #16
 8009fe0:	d005      	beq.n	8009fee <update_sec_level+0x2e>
			conn->sec_level = BT_SECURITY_L3;
 8009fe2:	2303      	movs	r3, #3
 8009fe4:	7263      	strb	r3, [r4, #9]
 8009fe6:	e007      	b.n	8009ff8 <update_sec_level+0x38>
		conn->sec_level = BT_SECURITY_L1;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	7243      	strb	r3, [r0, #9]
		return;
 8009fec:	e008      	b.n	800a000 <update_sec_level+0x40>
			conn->sec_level = BT_SECURITY_L4;
 8009fee:	2304      	movs	r3, #4
 8009ff0:	7243      	strb	r3, [r0, #9]
 8009ff2:	e001      	b.n	8009ff8 <update_sec_level+0x38>
		conn->sec_level = BT_SECURITY_L2;
 8009ff4:	2302      	movs	r3, #2
 8009ff6:	7263      	strb	r3, [r4, #9]
	if (conn->required_sec_level > conn->sec_level) {
 8009ff8:	7aa2      	ldrb	r2, [r4, #10]
 8009ffa:	7a63      	ldrb	r3, [r4, #9]
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d800      	bhi.n	800a002 <update_sec_level+0x42>
}
 800a000:	bd10      	pop	{r4, pc}
		BT_ERR("Failed to set required security level");
 800a002:	f04f 0100 	mov.w	r1, #0
 800a006:	2301      	movs	r3, #1
 800a008:	f363 0102 	bfi	r1, r3, #0, #3
 800a00c:	f36f 01c5 	bfc	r1, #3, #3
 800a010:	4b07      	ldr	r3, [pc, #28]	; (800a030 <update_sec_level+0x70>)
 800a012:	4a08      	ldr	r2, [pc, #32]	; (800a034 <update_sec_level+0x74>)
 800a014:	1a9b      	subs	r3, r3, r2
 800a016:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800a01a:	f363 118f 	bfi	r1, r3, #6, #10
 800a01e:	4806      	ldr	r0, [pc, #24]	; (800a038 <update_sec_level+0x78>)
 800a020:	f7fa fa94 	bl	800454c <log_0>
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
 800a024:	2105      	movs	r1, #5
 800a026:	4620      	mov	r0, r4
 800a028:	f003 fcf4 	bl	800da14 <bt_conn_disconnect>
 800a02c:	e7e8      	b.n	800a000 <update_sec_level+0x40>
 800a02e:	bf00      	nop
 800a030:	0801d708 	.word	0x0801d708
 800a034:	0801d6d0 	.word	0x0801d6d0
 800a038:	080200d0 	.word	0x080200d0

0800a03c <unpair>:
{
 800a03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a03e:	4604      	mov	r4, r0
 800a040:	460d      	mov	r5, r1
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, addr);
 800a042:	f003 faf7 	bl	800d634 <bt_conn_lookup_addr_le>
	if (conn) {
 800a046:	b318      	cbz	r0, 800a090 <unpair+0x54>
 800a048:	4607      	mov	r7, r0
		if (conn->type == BT_CONN_TYPE_LE) {
 800a04a:	7883      	ldrb	r3, [r0, #2]
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d019      	beq.n	800a084 <unpair+0x48>
	struct bt_keys *keys = NULL;
 800a050:	2600      	movs	r6, #0
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
 800a052:	2113      	movs	r1, #19
 800a054:	4638      	mov	r0, r7
 800a056:	f003 fcdd 	bl	800da14 <bt_conn_disconnect>
		bt_conn_unref(conn);
 800a05a:	4638      	mov	r0, r7
 800a05c:	f00e fd8a 	bl	8018b74 <bt_conn_unref>
		if (!keys) {
 800a060:	b1b6      	cbz	r6, 800a090 <unpair+0x54>
		if (keys) {
 800a062:	b116      	cbz	r6, 800a06a <unpair+0x2e>
			bt_keys_clear(keys);
 800a064:	4630      	mov	r0, r6
 800a066:	f008 f8af 	bl	80121c8 <bt_keys_clear>
	bt_gatt_clear(id, addr);
 800a06a:	4629      	mov	r1, r5
 800a06c:	4620      	mov	r0, r4
 800a06e:	f010 f8cd 	bl	801a20c <bt_gatt_clear>
	if (bt_auth && bt_auth->bond_deleted) {
 800a072:	4b0a      	ldr	r3, [pc, #40]	; (800a09c <unpair+0x60>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	b123      	cbz	r3, 800a082 <unpair+0x46>
 800a078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a07a:	b113      	cbz	r3, 800a082 <unpair+0x46>
		bt_auth->bond_deleted(id, addr);
 800a07c:	4629      	mov	r1, r5
 800a07e:	4620      	mov	r0, r4
 800a080:	4798      	blx	r3
}
 800a082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			keys = conn->le.keys;
 800a084:	f8d0 60b4 	ldr.w	r6, [r0, #180]	; 0xb4
			conn->le.keys = NULL;
 800a088:	2300      	movs	r3, #0
 800a08a:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
 800a08e:	e7e0      	b.n	800a052 <unpair+0x16>
			keys = bt_keys_find_addr(id, addr);
 800a090:	4629      	mov	r1, r5
 800a092:	4620      	mov	r0, r4
 800a094:	f008 f87a 	bl	801218c <bt_keys_find_addr>
 800a098:	4606      	mov	r6, r0
 800a09a:	e7e2      	b.n	800a062 <unpair+0x26>
 800a09c:	20002088 	.word	0x20002088

0800a0a0 <find_pending_connect>:
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
 800a0a0:	2801      	cmp	r0, #1
 800a0a2:	d001      	beq.n	800a0a8 <find_pending_connect+0x8>
	return NULL;
 800a0a4:	2000      	movs	r0, #0
}
 800a0a6:	4770      	bx	lr
{
 800a0a8:	b500      	push	{lr}
 800a0aa:	b083      	sub	sp, #12
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
 800a0ac:	2205      	movs	r2, #5
 800a0ae:	4b0d      	ldr	r3, [pc, #52]	; (800a0e4 <find_pending_connect+0x44>)
 800a0b0:	f893 0037 	ldrb.w	r0, [r3, #55]	; 0x37
 800a0b4:	f003 faec 	bl	800d690 <bt_conn_lookup_state_le>
		if (!conn) {
 800a0b8:	b110      	cbz	r0, 800a0c0 <find_pending_connect+0x20>
}
 800a0ba:	b003      	add	sp, #12
 800a0bc:	f85d fb04 	ldr.w	pc, [sp], #4
						       BT_ADDR_LE_NONE,
 800a0c0:	4b09      	ldr	r3, [pc, #36]	; (800a0e8 <find_pending_connect+0x48>)
 800a0c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a0c6:	9000      	str	r0, [sp, #0]
 800a0c8:	f8ad 1004 	strh.w	r1, [sp, #4]
 800a0cc:	0c09      	lsrs	r1, r1, #16
 800a0ce:	f88d 1006 	strb.w	r1, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
 800a0d2:	2204      	movs	r2, #4
 800a0d4:	4669      	mov	r1, sp
 800a0d6:	4b03      	ldr	r3, [pc, #12]	; (800a0e4 <find_pending_connect+0x44>)
 800a0d8:	f893 0037 	ldrb.w	r0, [r3, #55]	; 0x37
 800a0dc:	f003 fad8 	bl	800d690 <bt_conn_lookup_state_le>
		return conn;
 800a0e0:	e7eb      	b.n	800a0ba <find_pending_connect+0x1a>
 800a0e2:	bf00      	nop
 800a0e4:	20000000 	.word	0x20000000
 800a0e8:	0801d83c 	.word	0x0801d83c

0800a0ec <le_pkey_complete>:
{
 800a0ec:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
 800a0ee:	6885      	ldr	r5, [r0, #8]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800a0f0:	4b19      	ldr	r3, [pc, #100]	; (800a158 <le_pkey_complete+0x6c>)
 800a0f2:	f3bf 8f5b 	dmb	ish
 800a0f6:	e853 2f00 	ldrex	r2, [r3]
 800a0fa:	f022 0210 	bic.w	r2, r2, #16
 800a0fe:	e843 2100 	strex	r1, r2, [r3]
 800a102:	2900      	cmp	r1, #0
 800a104:	d1f7      	bne.n	800a0f6 <le_pkey_complete+0xa>
 800a106:	f3bf 8f5b 	dmb	ish
	if (!evt->status) {
 800a10a:	782b      	ldrb	r3, [r5, #0]
 800a10c:	b113      	cbz	r3, 800a114 <le_pkey_complete+0x28>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
 800a10e:	4b13      	ldr	r3, [pc, #76]	; (800a15c <le_pkey_complete+0x70>)
 800a110:	681c      	ldr	r4, [r3, #0]
 800a112:	e015      	b.n	800a140 <le_pkey_complete+0x54>
		memcpy(pub_key, evt->key, 64);
 800a114:	2240      	movs	r2, #64	; 0x40
 800a116:	1c69      	adds	r1, r5, #1
 800a118:	4811      	ldr	r0, [pc, #68]	; (800a160 <le_pkey_complete+0x74>)
 800a11a:	f00d feaf 	bl	8017e7c <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800a11e:	4b0e      	ldr	r3, [pc, #56]	; (800a158 <le_pkey_complete+0x6c>)
 800a120:	f3bf 8f5b 	dmb	ish
 800a124:	e853 2f00 	ldrex	r2, [r3]
 800a128:	f042 0208 	orr.w	r2, r2, #8
 800a12c:	e843 2100 	strex	r1, r2, [r3]
 800a130:	2900      	cmp	r1, #0
 800a132:	d1f7      	bne.n	800a124 <le_pkey_complete+0x38>
 800a134:	f3bf 8f5b 	dmb	ish
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
}
 800a138:	e7e9      	b.n	800a10e <le_pkey_complete+0x22>
		cb->func(evt->status ? NULL : pub_key);
 800a13a:	2000      	movs	r0, #0
 800a13c:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
 800a13e:	6864      	ldr	r4, [r4, #4]
 800a140:	b12c      	cbz	r4, 800a14e <le_pkey_complete+0x62>
		cb->func(evt->status ? NULL : pub_key);
 800a142:	6823      	ldr	r3, [r4, #0]
 800a144:	782a      	ldrb	r2, [r5, #0]
 800a146:	2a00      	cmp	r2, #0
 800a148:	d1f7      	bne.n	800a13a <le_pkey_complete+0x4e>
 800a14a:	4805      	ldr	r0, [pc, #20]	; (800a160 <le_pkey_complete+0x74>)
 800a14c:	e7f6      	b.n	800a13c <le_pkey_complete+0x50>
	pub_key_cb = NULL;
 800a14e:	4b03      	ldr	r3, [pc, #12]	; (800a15c <le_pkey_complete+0x70>)
 800a150:	2200      	movs	r2, #0
 800a152:	601a      	str	r2, [r3, #0]
}
 800a154:	bd38      	pop	{r3, r4, r5, pc}
 800a156:	bf00      	nop
 800a158:	20000094 	.word	0x20000094
 800a15c:	20002080 	.word	0x20002080
 800a160:	20002040 	.word	0x20002040

0800a164 <pending_id_keys_update>:
{
 800a164:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800a166:	4b0b      	ldr	r3, [pc, #44]	; (800a194 <pending_id_keys_update+0x30>)
 800a168:	f3bf 8f5b 	dmb	ish
 800a16c:	e853 2f00 	ldrex	r2, [r3]
 800a170:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
 800a174:	e843 1000 	strex	r0, r1, [r3]
 800a178:	2800      	cmp	r0, #0
 800a17a:	d1f7      	bne.n	800a16c <pending_id_keys_update+0x8>
 800a17c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
 800a180:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800a184:	d100      	bne.n	800a188 <pending_id_keys_update+0x24>
}
 800a186:	bd08      	pop	{r3, pc}
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
 800a188:	2200      	movs	r2, #0
 800a18a:	4903      	ldr	r1, [pc, #12]	; (800a198 <pending_id_keys_update+0x34>)
 800a18c:	2002      	movs	r0, #2
 800a18e:	f007 ff57 	bl	8012040 <bt_keys_foreach>
}
 800a192:	e7f8      	b.n	800a186 <pending_id_keys_update+0x22>
 800a194:	20000094 	.word	0x20000094
 800a198:	080183b7 	.word	0x080183b7

0800a19c <hci_hardware_error>:
{
 800a19c:	b508      	push	{r3, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
 800a19e:	2101      	movs	r1, #1
 800a1a0:	3008      	adds	r0, #8
 800a1a2:	f010 ff80 	bl	801b0a6 <net_buf_simple_pull_mem>
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
 800a1a6:	f04f 0200 	mov.w	r2, #0
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	f363 0202 	bfi	r2, r3, #0, #3
 800a1b0:	f36f 02c5 	bfc	r2, #3, #3
 800a1b4:	4b05      	ldr	r3, [pc, #20]	; (800a1cc <hci_hardware_error+0x30>)
 800a1b6:	4906      	ldr	r1, [pc, #24]	; (800a1d0 <hci_hardware_error+0x34>)
 800a1b8:	1a5b      	subs	r3, r3, r1
 800a1ba:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800a1be:	f363 128f 	bfi	r2, r3, #6, #10
 800a1c2:	7801      	ldrb	r1, [r0, #0]
 800a1c4:	4803      	ldr	r0, [pc, #12]	; (800a1d4 <hci_hardware_error+0x38>)
 800a1c6:	f7fa f851 	bl	800426c <log_1>
}
 800a1ca:	bd08      	pop	{r3, pc}
 800a1cc:	0801d708 	.word	0x0801d708
 800a1d0:	0801d6d0 	.word	0x0801d6d0
 800a1d4:	080200f8 	.word	0x080200f8

0800a1d8 <le_data_len_change>:
{
 800a1d8:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
 800a1da:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
 800a1dc:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
 800a1de:	4620      	mov	r0, r4
 800a1e0:	f003 fa1e 	bl	800d620 <bt_conn_lookup_handle>
	if (!conn) {
 800a1e4:	b110      	cbz	r0, 800a1ec <le_data_len_change+0x14>
	bt_conn_unref(conn);
 800a1e6:	f00e fcc5 	bl	8018b74 <bt_conn_unref>
}
 800a1ea:	bd10      	pop	{r4, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
 800a1ec:	f04f 0200 	mov.w	r2, #0
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	f363 0202 	bfi	r2, r3, #0, #3
 800a1f6:	f36f 02c5 	bfc	r2, #3, #3
 800a1fa:	4b06      	ldr	r3, [pc, #24]	; (800a214 <le_data_len_change+0x3c>)
 800a1fc:	4906      	ldr	r1, [pc, #24]	; (800a218 <le_data_len_change+0x40>)
 800a1fe:	1a5b      	subs	r3, r3, r1
 800a200:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800a204:	f363 128f 	bfi	r2, r3, #6, #10
 800a208:	4621      	mov	r1, r4
 800a20a:	4804      	ldr	r0, [pc, #16]	; (800a21c <le_data_len_change+0x44>)
 800a20c:	f7fa f82e 	bl	800426c <log_1>
		return;
 800a210:	e7eb      	b.n	800a1ea <le_data_len_change+0x12>
 800a212:	bf00      	nop
 800a214:	0801d708 	.word	0x0801d708
 800a218:	0801d6d0 	.word	0x0801d6d0
 800a21c:	0802011c 	.word	0x0802011c

0800a220 <hci_disconn_complete_prio>:
{
 800a220:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
 800a222:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
 800a224:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	b103      	cbz	r3, 800a22e <hci_disconn_complete_prio+0xe>
}
 800a22c:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
 800a22e:	4620      	mov	r0, r4
 800a230:	f003 f9f6 	bl	800d620 <bt_conn_lookup_handle>
	if (!conn) {
 800a234:	4605      	mov	r5, r0
 800a236:	b130      	cbz	r0, 800a246 <hci_disconn_complete_prio+0x26>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
 800a238:	2101      	movs	r1, #1
 800a23a:	f003 fabf 	bl	800d7bc <bt_conn_set_state>
	bt_conn_unref(conn);
 800a23e:	4628      	mov	r0, r5
 800a240:	f00e fc98 	bl	8018b74 <bt_conn_unref>
 800a244:	e7f2      	b.n	800a22c <hci_disconn_complete_prio+0xc>
		BT_ERR("Unable to look up conn with handle %u", handle);
 800a246:	f04f 0200 	mov.w	r2, #0
 800a24a:	2301      	movs	r3, #1
 800a24c:	f363 0202 	bfi	r2, r3, #0, #3
 800a250:	f36f 02c5 	bfc	r2, #3, #3
 800a254:	4b05      	ldr	r3, [pc, #20]	; (800a26c <hci_disconn_complete_prio+0x4c>)
 800a256:	4906      	ldr	r1, [pc, #24]	; (800a270 <hci_disconn_complete_prio+0x50>)
 800a258:	1a5b      	subs	r3, r3, r1
 800a25a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800a25e:	f363 128f 	bfi	r2, r3, #6, #10
 800a262:	4621      	mov	r1, r4
 800a264:	4803      	ldr	r0, [pc, #12]	; (800a274 <hci_disconn_complete_prio+0x54>)
 800a266:	f7fa f801 	bl	800426c <log_1>
		return;
 800a26a:	e7df      	b.n	800a22c <hci_disconn_complete_prio+0xc>
 800a26c:	0801d708 	.word	0x0801d708
 800a270:	0801d6d0 	.word	0x0801d6d0
 800a274:	08020140 	.word	0x08020140

0800a278 <hci_disconn_complete>:
{
 800a278:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
 800a27a:	6884      	ldr	r4, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
 800a27c:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	if (evt->status) {
 800a280:	7823      	ldrb	r3, [r4, #0]
 800a282:	b103      	cbz	r3, 800a286 <hci_disconn_complete+0xe>
}
 800a284:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_lookup_handle(handle);
 800a286:	4630      	mov	r0, r6
 800a288:	f003 f9ca 	bl	800d620 <bt_conn_lookup_handle>
	if (!conn) {
 800a28c:	4605      	mov	r5, r0
 800a28e:	b168      	cbz	r0, 800a2ac <hci_disconn_complete+0x34>
	conn->err = evt->reason;
 800a290:	78e3      	ldrb	r3, [r4, #3]
 800a292:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
 800a294:	2100      	movs	r1, #0
 800a296:	f003 fa91 	bl	800d7bc <bt_conn_set_state>
	conn->handle = 0U;
 800a29a:	2300      	movs	r3, #0
 800a29c:	802b      	strh	r3, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
 800a29e:	78ab      	ldrb	r3, [r5, #2]
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d016      	beq.n	800a2d2 <hci_disconn_complete+0x5a>
		bt_conn_unref(conn);
 800a2a4:	4628      	mov	r0, r5
 800a2a6:	f00e fc65 	bl	8018b74 <bt_conn_unref>
		return;
 800a2aa:	e7eb      	b.n	800a284 <hci_disconn_complete+0xc>
		BT_ERR("Unable to look up conn with handle %u", handle);
 800a2ac:	f04f 0200 	mov.w	r2, #0
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	f363 0202 	bfi	r2, r3, #0, #3
 800a2b6:	f36f 02c5 	bfc	r2, #3, #3
 800a2ba:	4b08      	ldr	r3, [pc, #32]	; (800a2dc <hci_disconn_complete+0x64>)
 800a2bc:	4908      	ldr	r1, [pc, #32]	; (800a2e0 <hci_disconn_complete+0x68>)
 800a2be:	1a5b      	subs	r3, r3, r1
 800a2c0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800a2c4:	f363 128f 	bfi	r2, r3, #6, #10
 800a2c8:	4631      	mov	r1, r6
 800a2ca:	4806      	ldr	r0, [pc, #24]	; (800a2e4 <hci_disconn_complete+0x6c>)
 800a2cc:	f7f9 ffce 	bl	800426c <log_1>
		return;
 800a2d0:	e7d8      	b.n	800a284 <hci_disconn_complete+0xc>
	bt_conn_unref(conn);
 800a2d2:	4628      	mov	r0, r5
 800a2d4:	f00e fc4e 	bl	8018b74 <bt_conn_unref>
 800a2d8:	e7d4      	b.n	800a284 <hci_disconn_complete+0xc>
 800a2da:	bf00      	nop
 800a2dc:	0801d708 	.word	0x0801d708
 800a2e0:	0801d6d0 	.word	0x0801d6d0
 800a2e4:	08020140 	.word	0x08020140

0800a2e8 <le_adv_stop_free_conn>:
{
 800a2e8:	b570      	push	{r4, r5, r6, lr}
 800a2ea:	b084      	sub	sp, #16
 800a2ec:	4604      	mov	r4, r0
 800a2ee:	460e      	mov	r6, r1
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
 800a2f0:	f100 050b 	add.w	r5, r0, #11
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	9300      	str	r3, [sp, #0]
 800a2f8:	f8cd 3003 	str.w	r3, [sp, #3]
 800a2fc:	2207      	movs	r2, #7
 800a2fe:	4669      	mov	r1, sp
 800a300:	4628      	mov	r0, r5
 800a302:	f00d fda3 	bl	8017e4c <memcmp>
 800a306:	b9c8      	cbnz	r0, 800a33c <le_adv_stop_free_conn+0x54>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
 800a308:	4b10      	ldr	r3, [pc, #64]	; (800a34c <le_adv_stop_free_conn+0x64>)
 800a30a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a30e:	9002      	str	r0, [sp, #8]
 800a310:	f8ad 100c 	strh.w	r1, [sp, #12]
 800a314:	0c09      	lsrs	r1, r1, #16
 800a316:	f88d 100e 	strb.w	r1, [sp, #14]
 800a31a:	2204      	movs	r2, #4
 800a31c:	a902      	add	r1, sp, #8
 800a31e:	7820      	ldrb	r0, [r4, #0]
 800a320:	f003 f9b6 	bl	800d690 <bt_conn_lookup_state_le>
 800a324:	4604      	mov	r4, r0
	if (conn) {
 800a326:	b13c      	cbz	r4, 800a338 <le_adv_stop_free_conn+0x50>
		conn->err = status;
 800a328:	7326      	strb	r6, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
 800a32a:	2100      	movs	r1, #0
 800a32c:	4620      	mov	r0, r4
 800a32e:	f003 fa45 	bl	800d7bc <bt_conn_set_state>
		bt_conn_unref(conn);
 800a332:	4620      	mov	r0, r4
 800a334:	f00e fc1e 	bl	8018b74 <bt_conn_unref>
}
 800a338:	b004      	add	sp, #16
 800a33a:	bd70      	pop	{r4, r5, r6, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
 800a33c:	2205      	movs	r2, #5
 800a33e:	4629      	mov	r1, r5
 800a340:	7820      	ldrb	r0, [r4, #0]
 800a342:	f003 f9a5 	bl	800d690 <bt_conn_lookup_state_le>
 800a346:	4604      	mov	r4, r0
 800a348:	e7ed      	b.n	800a326 <le_adv_stop_free_conn+0x3e>
 800a34a:	bf00      	nop
 800a34c:	0801d83c 	.word	0x0801d83c

0800a350 <hci_cmd_done>:
{
 800a350:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a352:	b085      	sub	sp, #20
 800a354:	4605      	mov	r5, r0
 800a356:	460e      	mov	r6, r1
 800a358:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
 800a35a:	7990      	ldrb	r0, [r2, #6]
 800a35c:	f008 f888 	bl	8012470 <net_buf_pool_get>
 800a360:	4b51      	ldr	r3, [pc, #324]	; (800a4a8 <hci_cmd_done+0x158>)
 800a362:	4283      	cmp	r3, r0
 800a364:	d01d      	beq.n	800a3a2 <hci_cmd_done+0x52>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
 800a366:	f04f 0600 	mov.w	r6, #0
 800a36a:	2302      	movs	r3, #2
 800a36c:	f363 0602 	bfi	r6, r3, #0, #3
 800a370:	f36f 06c5 	bfc	r6, #3, #3
 800a374:	4b4d      	ldr	r3, [pc, #308]	; (800a4ac <hci_cmd_done+0x15c>)
 800a376:	4a4e      	ldr	r2, [pc, #312]	; (800a4b0 <hci_cmd_done+0x160>)
 800a378:	1a9b      	subs	r3, r3, r2
 800a37a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800a37e:	f363 168f 	bfi	r6, r3, #6, #10
 800a382:	9500      	str	r5, [sp, #0]
 800a384:	79a0      	ldrb	r0, [r4, #6]
 800a386:	9001      	str	r0, [sp, #4]
 800a388:	f008 f872 	bl	8012470 <net_buf_pool_get>
 800a38c:	9002      	str	r0, [sp, #8]
 800a38e:	4b46      	ldr	r3, [pc, #280]	; (800a4a8 <hci_cmd_done+0x158>)
 800a390:	9303      	str	r3, [sp, #12]
 800a392:	4633      	mov	r3, r6
 800a394:	2204      	movs	r2, #4
 800a396:	4669      	mov	r1, sp
 800a398:	4846      	ldr	r0, [pc, #280]	; (800a4b4 <hci_cmd_done+0x164>)
 800a39a:	f7fa f86b 	bl	8004474 <log_n>
}
 800a39e:	b005      	add	sp, #20
 800a3a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (cmd(buf)->opcode != opcode) {
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	f008 f86c 	bl	8012480 <net_buf_id>
 800a3a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800a3ac:	4b42      	ldr	r3, [pc, #264]	; (800a4b8 <hci_cmd_done+0x168>)
 800a3ae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a3b2:	8843      	ldrh	r3, [r0, #2]
 800a3b4:	42ab      	cmp	r3, r5
 800a3b6:	d129      	bne.n	800a40c <hci_cmd_done+0xbc>
	if (cmd(buf)->state && !status) {
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	f008 f861 	bl	8012480 <net_buf_id>
 800a3be:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800a3c2:	4b3d      	ldr	r3, [pc, #244]	; (800a4b8 <hci_cmd_done+0x168>)
 800a3c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a3c8:	6843      	ldr	r3, [r0, #4]
 800a3ca:	b10b      	cbz	r3, 800a3d0 <hci_cmd_done+0x80>
 800a3cc:	2e00      	cmp	r6, #0
 800a3ce:	d03a      	beq.n	800a446 <hci_cmd_done+0xf6>
	if (cmd(buf)->sync) {
 800a3d0:	4620      	mov	r0, r4
 800a3d2:	f008 f855 	bl	8012480 <net_buf_id>
 800a3d6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800a3da:	4b37      	ldr	r3, [pc, #220]	; (800a4b8 <hci_cmd_done+0x168>)
 800a3dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a3e0:	6883      	ldr	r3, [r0, #8]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d0db      	beq.n	800a39e <hci_cmd_done+0x4e>
		cmd(buf)->status = status;
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	f008 f84a 	bl	8012480 <net_buf_id>
 800a3ec:	4d32      	ldr	r5, [pc, #200]	; (800a4b8 <hci_cmd_done+0x168>)
 800a3ee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800a3f2:	f805 6020 	strb.w	r6, [r5, r0, lsl #2]
		k_sem_give(cmd(buf)->sync);
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	f008 f842 	bl	8012480 <net_buf_id>
 800a3fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800a400:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 800a404:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
 800a406:	f00a f813 	bl	8014430 <z_impl_k_sem_give>
}
 800a40a:	e7c8      	b.n	800a39e <hci_cmd_done+0x4e>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
 800a40c:	f04f 0700 	mov.w	r7, #0
 800a410:	2302      	movs	r3, #2
 800a412:	f363 0702 	bfi	r7, r3, #0, #3
 800a416:	f36f 07c5 	bfc	r7, #3, #3
 800a41a:	4b24      	ldr	r3, [pc, #144]	; (800a4ac <hci_cmd_done+0x15c>)
 800a41c:	4a24      	ldr	r2, [pc, #144]	; (800a4b0 <hci_cmd_done+0x160>)
 800a41e:	1a9b      	subs	r3, r3, r2
 800a420:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800a424:	f363 178f 	bfi	r7, r3, #6, #10
 800a428:	4620      	mov	r0, r4
 800a42a:	f008 f829 	bl	8012480 <net_buf_id>
 800a42e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800a432:	4b21      	ldr	r3, [pc, #132]	; (800a4b8 <hci_cmd_done+0x168>)
 800a434:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a438:	463b      	mov	r3, r7
 800a43a:	8842      	ldrh	r2, [r0, #2]
 800a43c:	4629      	mov	r1, r5
 800a43e:	481f      	ldr	r0, [pc, #124]	; (800a4bc <hci_cmd_done+0x16c>)
 800a440:	f7f9 ff94 	bl	800436c <log_2>
 800a444:	e7b8      	b.n	800a3b8 <hci_cmd_done+0x68>
		struct cmd_state_set *update = cmd(buf)->state;
 800a446:	4620      	mov	r0, r4
 800a448:	f008 f81a 	bl	8012480 <net_buf_id>
 800a44c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800a450:	4b19      	ldr	r3, [pc, #100]	; (800a4b8 <hci_cmd_done+0x168>)
 800a452:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a456:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
 800a458:	6813      	ldr	r3, [r2, #0]
 800a45a:	6851      	ldr	r1, [r2, #4]
 800a45c:	7a10      	ldrb	r0, [r2, #8]
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
 800a45e:	f001 051f 	and.w	r5, r1, #31
 800a462:	2201      	movs	r2, #1
 800a464:	40aa      	lsls	r2, r5

	if (val) {
 800a466:	b170      	cbz	r0, 800a486 <hci_cmd_done+0x136>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
 800a468:	0949      	lsrs	r1, r1, #5
 800a46a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800a46e:	f3bf 8f5b 	dmb	ish
 800a472:	e853 1f00 	ldrex	r1, [r3]
 800a476:	4311      	orrs	r1, r2
 800a478:	e843 1000 	strex	r0, r1, [r3]
 800a47c:	2800      	cmp	r0, #0
 800a47e:	d1f8      	bne.n	800a472 <hci_cmd_done+0x122>
 800a480:	f3bf 8f5b 	dmb	ish
 800a484:	e7a4      	b.n	800a3d0 <hci_cmd_done+0x80>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 800a486:	0949      	lsrs	r1, r1, #5
 800a488:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a48c:	43d2      	mvns	r2, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800a48e:	f3bf 8f5b 	dmb	ish
 800a492:	e853 1f00 	ldrex	r1, [r3]
 800a496:	4011      	ands	r1, r2
 800a498:	e843 1000 	strex	r0, r1, [r3]
 800a49c:	2800      	cmp	r0, #0
 800a49e:	d1f8      	bne.n	800a492 <hci_cmd_done+0x142>
 800a4a0:	f3bf 8f5b 	dmb	ish
	}
}
 800a4a4:	e794      	b.n	800a3d0 <hci_cmd_done+0x80>
 800a4a6:	bf00      	nop
 800a4a8:	20000948 	.word	0x20000948
 800a4ac:	0801d708 	.word	0x0801d708
 800a4b0:	0801d6d0 	.word	0x0801d6d0
 800a4b4:	08020168 	.word	0x08020168
 800a4b8:	20002024 	.word	0x20002024
 800a4bc:	080201a0 	.word	0x080201a0

0800a4c0 <hci_cmd_status>:
{
 800a4c0:	b538      	push	{r3, r4, r5, lr}
 800a4c2:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
 800a4c4:	2104      	movs	r1, #4
 800a4c6:	3008      	adds	r0, #8
 800a4c8:	f010 fded 	bl	801b0a6 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
 800a4cc:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
 800a4ce:	4622      	mov	r2, r4
 800a4d0:	7801      	ldrb	r1, [r0, #0]
 800a4d2:	8840      	ldrh	r0, [r0, #2]
 800a4d4:	f7ff ff3c 	bl	800a350 <hci_cmd_done>
	if (ncmd) {
 800a4d8:	b905      	cbnz	r5, 800a4dc <hci_cmd_status+0x1c>
}
 800a4da:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
 800a4dc:	4801      	ldr	r0, [pc, #4]	; (800a4e4 <hci_cmd_status+0x24>)
 800a4de:	f009 ffa7 	bl	8014430 <z_impl_k_sem_give>
 800a4e2:	e7fa      	b.n	800a4da <hci_cmd_status+0x1a>
 800a4e4:	200000e8 	.word	0x200000e8

0800a4e8 <hci_cmd_complete>:
{
 800a4e8:	b538      	push	{r3, r4, r5, lr}
 800a4ea:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
 800a4ec:	2103      	movs	r1, #3
 800a4ee:	3008      	adds	r0, #8
 800a4f0:	f010 fdd9 	bl	801b0a6 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
 800a4f4:	7805      	ldrb	r5, [r0, #0]
	status = buf->data[0];
 800a4f6:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
 800a4f8:	4622      	mov	r2, r4
 800a4fa:	7819      	ldrb	r1, [r3, #0]
 800a4fc:	f8b0 0001 	ldrh.w	r0, [r0, #1]
 800a500:	f7ff ff26 	bl	800a350 <hci_cmd_done>
	if (ncmd) {
 800a504:	b905      	cbnz	r5, 800a508 <hci_cmd_complete+0x20>
}
 800a506:	bd38      	pop	{r3, r4, r5, pc}
 800a508:	4801      	ldr	r0, [pc, #4]	; (800a510 <hci_cmd_complete+0x28>)
 800a50a:	f009 ff91 	bl	8014430 <z_impl_k_sem_give>
 800a50e:	e7fa      	b.n	800a506 <hci_cmd_complete+0x1e>
 800a510:	200000e8 	.word	0x200000e8

0800a514 <hci_acl>:
{
 800a514:	b570      	push	{r4, r5, r6, lr}
 800a516:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
 800a518:	8983      	ldrh	r3, [r0, #12]
 800a51a:	2b03      	cmp	r3, #3
 800a51c:	d924      	bls.n	800a568 <hci_acl+0x54>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
 800a51e:	2104      	movs	r1, #4
 800a520:	f104 0008 	add.w	r0, r4, #8
 800a524:	f010 fdbf 	bl	801b0a6 <net_buf_simple_pull_mem>
	len = sys_le16_to_cpu(hdr->len);
 800a528:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
 800a52a:	8800      	ldrh	r0, [r0, #0]
	flags = bt_acl_flags(handle);
 800a52c:	0b06      	lsrs	r6, r0, #12
	acl(buf)->handle = bt_acl_handle(handle);
 800a52e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800a532:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
 800a534:	23ff      	movs	r3, #255	; 0xff
 800a536:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
 800a538:	89a1      	ldrh	r1, [r4, #12]
 800a53a:	4291      	cmp	r1, r2
 800a53c:	d022      	beq.n	800a584 <hci_acl+0x70>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
 800a53e:	f04f 0300 	mov.w	r3, #0
 800a542:	2001      	movs	r0, #1
 800a544:	f360 0302 	bfi	r3, r0, #0, #3
 800a548:	f36f 03c5 	bfc	r3, #3, #3
 800a54c:	4820      	ldr	r0, [pc, #128]	; (800a5d0 <hci_acl+0xbc>)
 800a54e:	4d21      	ldr	r5, [pc, #132]	; (800a5d4 <hci_acl+0xc0>)
 800a550:	1b40      	subs	r0, r0, r5
 800a552:	f3c0 00c9 	ubfx	r0, r0, #3, #10
 800a556:	f360 138f 	bfi	r3, r0, #6, #10
 800a55a:	481f      	ldr	r0, [pc, #124]	; (800a5d8 <hci_acl+0xc4>)
 800a55c:	f7f9 ff06 	bl	800436c <log_2>
		net_buf_unref(buf);
 800a560:	4620      	mov	r0, r4
 800a562:	f010 fd2e 	bl	801afc2 <net_buf_unref>
}
 800a566:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
 800a568:	f240 530b 	movw	r3, #1291	; 0x50b
 800a56c:	4a1b      	ldr	r2, [pc, #108]	; (800a5dc <hci_acl+0xc8>)
 800a56e:	491c      	ldr	r1, [pc, #112]	; (800a5e0 <hci_acl+0xcc>)
 800a570:	481c      	ldr	r0, [pc, #112]	; (800a5e4 <hci_acl+0xd0>)
 800a572:	f00b f836 	bl	80155e2 <printk>
 800a576:	4040      	eors	r0, r0
 800a578:	f380 8811 	msr	BASEPRI, r0
 800a57c:	f04f 0003 	mov.w	r0, #3
 800a580:	df02      	svc	2
 800a582:	e7cc      	b.n	800a51e <hci_acl+0xa>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
 800a584:	f003 f84c 	bl	800d620 <bt_conn_lookup_handle>
	if (!conn) {
 800a588:	4605      	mov	r5, r0
 800a58a:	b158      	cbz	r0, 800a5a4 <hci_acl+0x90>
	acl(buf)->index = bt_conn_index(conn);
 800a58c:	f003 fbbc 	bl	800dd08 <bt_conn_index>
 800a590:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
 800a592:	4632      	mov	r2, r6
 800a594:	4621      	mov	r1, r4
 800a596:	4628      	mov	r0, r5
 800a598:	f002 fef2 	bl	800d380 <bt_conn_recv>
	bt_conn_unref(conn);
 800a59c:	4628      	mov	r0, r5
 800a59e:	f00e fae9 	bl	8018b74 <bt_conn_unref>
 800a5a2:	e7e0      	b.n	800a566 <hci_acl+0x52>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
 800a5a4:	f04f 0200 	mov.w	r2, #0
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	f363 0202 	bfi	r2, r3, #0, #3
 800a5ae:	f36f 02c5 	bfc	r2, #3, #3
 800a5b2:	4b07      	ldr	r3, [pc, #28]	; (800a5d0 <hci_acl+0xbc>)
 800a5b4:	4907      	ldr	r1, [pc, #28]	; (800a5d4 <hci_acl+0xc0>)
 800a5b6:	1a5b      	subs	r3, r3, r1
 800a5b8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800a5bc:	f363 128f 	bfi	r2, r3, #6, #10
 800a5c0:	8ae1      	ldrh	r1, [r4, #22]
 800a5c2:	4809      	ldr	r0, [pc, #36]	; (800a5e8 <hci_acl+0xd4>)
 800a5c4:	f7f9 fe52 	bl	800426c <log_1>
		net_buf_unref(buf);
 800a5c8:	4620      	mov	r0, r4
 800a5ca:	f010 fcfa 	bl	801afc2 <net_buf_unref>
		return;
 800a5ce:	e7ca      	b.n	800a566 <hci_acl+0x52>
 800a5d0:	0801d708 	.word	0x0801d708
 800a5d4:	0801d6d0 	.word	0x0801d6d0
 800a5d8:	08020244 	.word	0x08020244
 800a5dc:	080201d4 	.word	0x080201d4
 800a5e0:	08020208 	.word	0x08020208
 800a5e4:	08020224 	.word	0x08020224
 800a5e8:	08020268 	.word	0x08020268

0800a5ec <le_phy_update_complete>:
{
 800a5ec:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
 800a5ee:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
 800a5f0:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
 800a5f4:	4630      	mov	r0, r6
 800a5f6:	f003 f813 	bl	800d620 <bt_conn_lookup_handle>
	if (!conn) {
 800a5fa:	b188      	cbz	r0, 800a620 <le_phy_update_complete+0x34>
 800a5fc:	4604      	mov	r4, r0
	conn->le.phy.tx_phy = get_phy(evt->tx_phy);
 800a5fe:	78e8      	ldrb	r0, [r5, #3]
 800a600:	f00d fd4b 	bl	801809a <get_phy>
 800a604:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
	conn->le.phy.rx_phy = get_phy(evt->rx_phy);
 800a608:	7928      	ldrb	r0, [r5, #4]
 800a60a:	f00d fd46 	bl	801809a <get_phy>
 800a60e:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
	notify_le_phy_updated(conn);
 800a612:	4620      	mov	r0, r4
 800a614:	f002 fe0c 	bl	800d230 <notify_le_phy_updated>
	bt_conn_unref(conn);
 800a618:	4620      	mov	r0, r4
 800a61a:	f00e faab 	bl	8018b74 <bt_conn_unref>
}
 800a61e:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
 800a620:	f04f 0200 	mov.w	r2, #0
 800a624:	2301      	movs	r3, #1
 800a626:	f363 0202 	bfi	r2, r3, #0, #3
 800a62a:	f36f 02c5 	bfc	r2, #3, #3
 800a62e:	4b06      	ldr	r3, [pc, #24]	; (800a648 <le_phy_update_complete+0x5c>)
 800a630:	4906      	ldr	r1, [pc, #24]	; (800a64c <le_phy_update_complete+0x60>)
 800a632:	1a5b      	subs	r3, r3, r1
 800a634:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800a638:	f363 128f 	bfi	r2, r3, #6, #10
 800a63c:	4631      	mov	r1, r6
 800a63e:	4804      	ldr	r0, [pc, #16]	; (800a650 <le_phy_update_complete+0x64>)
 800a640:	f7f9 fe14 	bl	800426c <log_1>
		return;
 800a644:	e7eb      	b.n	800a61e <le_phy_update_complete+0x32>
 800a646:	bf00      	nop
 800a648:	0801d708 	.word	0x0801d708
 800a64c:	0801d6d0 	.word	0x0801d6d0
 800a650:	0802011c 	.word	0x0802011c

0800a654 <slave_update_conn_param>:
{
 800a654:	b508      	push	{r3, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800a656:	f3bf 8f5b 	dmb	ish
 800a65a:	6843      	ldr	r3, [r0, #4]
 800a65c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_UPDATE)) {
 800a660:	f413 7f80 	tst.w	r3, #256	; 0x100
 800a664:	d000      	beq.n	800a668 <slave_update_conn_param+0x14>
}
 800a666:	bd08      	pop	{r3, pc}
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
 800a668:	f24c 3250 	movw	r2, #50000	; 0xc350
 800a66c:	2300      	movs	r3, #0
 800a66e:	f100 0158 	add.w	r1, r0, #88	; 0x58
 800a672:	4802      	ldr	r0, [pc, #8]	; (800a67c <slave_update_conn_param+0x28>)
 800a674:	f009 fff0 	bl	8014658 <k_delayed_work_submit_to_queue>
 800a678:	e7f5      	b.n	800a666 <slave_update_conn_param+0x12>
 800a67a:	bf00      	nop
 800a67c:	20001408 	.word	0x20001408

0800a680 <le_conn_update_complete>:
{
 800a680:	b570      	push	{r4, r5, r6, lr}
 800a682:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
 800a684:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
 800a686:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
 800a68a:	4630      	mov	r0, r6
 800a68c:	f002 ffc8 	bl	800d620 <bt_conn_lookup_handle>
	if (!conn) {
 800a690:	b148      	cbz	r0, 800a6a6 <le_conn_update_complete+0x26>
 800a692:	4605      	mov	r5, r0
	if (!evt->status) {
 800a694:	7823      	ldrb	r3, [r4, #0]
 800a696:	b1cb      	cbz	r3, 800a6cc <le_conn_update_complete+0x4c>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
 800a698:	2b1a      	cmp	r3, #26
 800a69a:	d026      	beq.n	800a6ea <le_conn_update_complete+0x6a>
	bt_conn_unref(conn);
 800a69c:	4628      	mov	r0, r5
 800a69e:	f00e fa69 	bl	8018b74 <bt_conn_unref>
}
 800a6a2:	b002      	add	sp, #8
 800a6a4:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
 800a6a6:	f04f 0200 	mov.w	r2, #0
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	f363 0202 	bfi	r2, r3, #0, #3
 800a6b0:	f36f 02c5 	bfc	r2, #3, #3
 800a6b4:	4b21      	ldr	r3, [pc, #132]	; (800a73c <le_conn_update_complete+0xbc>)
 800a6b6:	4922      	ldr	r1, [pc, #136]	; (800a740 <le_conn_update_complete+0xc0>)
 800a6b8:	1a5b      	subs	r3, r3, r1
 800a6ba:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800a6be:	f363 128f 	bfi	r2, r3, #6, #10
 800a6c2:	4631      	mov	r1, r6
 800a6c4:	481f      	ldr	r0, [pc, #124]	; (800a744 <le_conn_update_complete+0xc4>)
 800a6c6:	f7f9 fdd1 	bl	800426c <log_1>
		return;
 800a6ca:	e7ea      	b.n	800a6a2 <le_conn_update_complete+0x22>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
 800a6cc:	f8b4 3003 	ldrh.w	r3, [r4, #3]
 800a6d0:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
 800a6d4:	f8b4 3005 	ldrh.w	r3, [r4, #5]
 800a6d8:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
 800a6dc:	f8b4 3007 	ldrh.w	r3, [r4, #7]
 800a6e0:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
 800a6e4:	f002 fd68 	bl	800d1b8 <notify_le_param_updated>
 800a6e8:	e7d8      	b.n	800a69c <le_conn_update_complete+0x1c>
		   conn->role == BT_HCI_ROLE_SLAVE &&
 800a6ea:	78c3      	ldrb	r3, [r0, #3]
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
 800a6ec:	2b01      	cmp	r3, #1
 800a6ee:	d1d5      	bne.n	800a69c <le_conn_update_complete+0x1c>
		   !atomic_test_and_set_bit(conn->flags,
 800a6f0:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800a6f2:	f3bf 8f5b 	dmb	ish
 800a6f6:	e853 2f00 	ldrex	r2, [r3]
 800a6fa:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
 800a6fe:	e843 1000 	strex	r0, r1, [r3]
 800a702:	2800      	cmp	r0, #0
 800a704:	d1f7      	bne.n	800a6f6 <le_conn_update_complete+0x76>
 800a706:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_SLAVE &&
 800a70a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800a70e:	d1c5      	bne.n	800a69c <le_conn_update_complete+0x1c>
		param.interval_min = conn->le.interval_min;
 800a710:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
 800a714:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
 800a718:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
 800a71c:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
 800a720:	f8b5 30a8 	ldrh.w	r3, [r5, #168]	; 0xa8
 800a724:	f8ad 3004 	strh.w	r3, [sp, #4]
		param.timeout = conn->le.pending_timeout;
 800a728:	f8b5 30aa 	ldrh.w	r3, [r5, #170]	; 0xaa
 800a72c:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
 800a730:	4669      	mov	r1, sp
 800a732:	4628      	mov	r0, r5
 800a734:	f00e fc05 	bl	8018f42 <bt_l2cap_update_conn_param>
 800a738:	e7b0      	b.n	800a69c <le_conn_update_complete+0x1c>
 800a73a:	bf00      	nop
 800a73c:	0801d708 	.word	0x0801d708
 800a740:	0801d6d0 	.word	0x0801d6d0
 800a744:	0802011c 	.word	0x0802011c

0800a748 <bt_dev_show_info>:
{
 800a748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a74c:	b086      	sub	sp, #24
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
 800a74e:	f04f 0400 	mov.w	r4, #0
 800a752:	2303      	movs	r3, #3
 800a754:	f363 0402 	bfi	r4, r3, #0, #3
 800a758:	f36f 04c5 	bfc	r4, #3, #3
 800a75c:	4b39      	ldr	r3, [pc, #228]	; (800a844 <bt_dev_show_info+0xfc>)
 800a75e:	4a3a      	ldr	r2, [pc, #232]	; (800a848 <bt_dev_show_info+0x100>)
 800a760:	1a9b      	subs	r3, r3, r2
 800a762:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800a766:	f363 148f 	bfi	r4, r3, #6, #10
 800a76a:	4b38      	ldr	r3, [pc, #224]	; (800a84c <bt_dev_show_info+0x104>)
 800a76c:	79db      	ldrb	r3, [r3, #7]
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d92c      	bls.n	800a7cc <bt_dev_show_info+0x84>
 800a772:	4e37      	ldr	r6, [pc, #220]	; (800a850 <bt_dev_show_info+0x108>)
 800a774:	4835      	ldr	r0, [pc, #212]	; (800a84c <bt_dev_show_info+0x104>)
 800a776:	f7ff f84b 	bl	8009810 <bt_addr_le_str_real>
 800a77a:	f7f9 fba7 	bl	8003ecc <log_strdup>
 800a77e:	4602      	mov	r2, r0
 800a780:	4623      	mov	r3, r4
 800a782:	4631      	mov	r1, r6
 800a784:	4833      	ldr	r0, [pc, #204]	; (800a854 <bt_dev_show_info+0x10c>)
 800a786:	f7f9 fdf1 	bl	800436c <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
 800a78a:	2401      	movs	r4, #1
 800a78c:	4b2f      	ldr	r3, [pc, #188]	; (800a84c <bt_dev_show_info+0x104>)
 800a78e:	79db      	ldrb	r3, [r3, #7]
 800a790:	42a3      	cmp	r3, r4
 800a792:	dd1d      	ble.n	800a7d0 <bt_dev_show_info+0x88>
		BT_INFO("Identity[%d]: %s",
 800a794:	2303      	movs	r3, #3
 800a796:	f363 0502 	bfi	r5, r3, #0, #3
 800a79a:	f36f 05c5 	bfc	r5, #3, #3
 800a79e:	4b29      	ldr	r3, [pc, #164]	; (800a844 <bt_dev_show_info+0xfc>)
 800a7a0:	4a29      	ldr	r2, [pc, #164]	; (800a848 <bt_dev_show_info+0x100>)
 800a7a2:	1a9b      	subs	r3, r3, r2
 800a7a4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800a7a8:	f363 158f 	bfi	r5, r3, #6, #10
 800a7ac:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800a7b0:	4826      	ldr	r0, [pc, #152]	; (800a84c <bt_dev_show_info+0x104>)
 800a7b2:	4418      	add	r0, r3
 800a7b4:	f7ff f82c 	bl	8009810 <bt_addr_le_str_real>
 800a7b8:	f7f9 fb88 	bl	8003ecc <log_strdup>
 800a7bc:	4602      	mov	r2, r0
 800a7be:	462b      	mov	r3, r5
 800a7c0:	4621      	mov	r1, r4
 800a7c2:	4825      	ldr	r0, [pc, #148]	; (800a858 <bt_dev_show_info+0x110>)
 800a7c4:	f7f9 fdd2 	bl	800436c <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
 800a7c8:	3401      	adds	r4, #1
 800a7ca:	e7df      	b.n	800a78c <bt_dev_show_info+0x44>
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
 800a7cc:	4e23      	ldr	r6, [pc, #140]	; (800a85c <bt_dev_show_info+0x114>)
 800a7ce:	e7d1      	b.n	800a774 <bt_dev_show_info+0x2c>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
 800a7d0:	2703      	movs	r7, #3
 800a7d2:	f04f 0500 	mov.w	r5, #0
 800a7d6:	f367 0502 	bfi	r5, r7, #0, #3
 800a7da:	f36f 05c5 	bfc	r5, #3, #3
 800a7de:	4c19      	ldr	r4, [pc, #100]	; (800a844 <bt_dev_show_info+0xfc>)
 800a7e0:	4b19      	ldr	r3, [pc, #100]	; (800a848 <bt_dev_show_info+0x100>)
 800a7e2:	1ae4      	subs	r4, r4, r3
 800a7e4:	f3c4 04c9 	ubfx	r4, r4, #3, #10
 800a7e8:	f364 158f 	bfi	r5, r4, #6, #10
 800a7ec:	4e17      	ldr	r6, [pc, #92]	; (800a84c <bt_dev_show_info+0x104>)
 800a7ee:	f896 8038 	ldrb.w	r8, [r6, #56]	; 0x38
 800a7f2:	4640      	mov	r0, r8
 800a7f4:	f7ff fa7e 	bl	8009cf4 <ver_str>
 800a7f8:	9002      	str	r0, [sp, #8]
 800a7fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7fe:	8f73      	ldrh	r3, [r6, #58]	; 0x3a
 800a800:	9304      	str	r3, [sp, #16]
 800a802:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 800a804:	9305      	str	r3, [sp, #20]
 800a806:	462b      	mov	r3, r5
 800a808:	2204      	movs	r2, #4
 800a80a:	a902      	add	r1, sp, #8
 800a80c:	4814      	ldr	r0, [pc, #80]	; (800a860 <bt_dev_show_info+0x118>)
 800a80e:	f7f9 fe31 	bl	8004474 <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
 800a812:	f04f 0500 	mov.w	r5, #0
 800a816:	f367 0502 	bfi	r5, r7, #0, #3
 800a81a:	f36f 05c5 	bfc	r5, #3, #3
 800a81e:	f364 158f 	bfi	r5, r4, #6, #10
 800a822:	f896 4039 	ldrb.w	r4, [r6, #57]	; 0x39
 800a826:	4620      	mov	r0, r4
 800a828:	f7ff fa64 	bl	8009cf4 <ver_str>
 800a82c:	4601      	mov	r1, r0
 800a82e:	f8ad 5000 	strh.w	r5, [sp]
 800a832:	8fb3      	ldrh	r3, [r6, #60]	; 0x3c
 800a834:	4622      	mov	r2, r4
 800a836:	480b      	ldr	r0, [pc, #44]	; (800a864 <bt_dev_show_info+0x11c>)
 800a838:	f7f9 fc4c 	bl	80040d4 <log_3>
}
 800a83c:	b006      	add	sp, #24
 800a83e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a842:	bf00      	nop
 800a844:	0801d708 	.word	0x0801d708
 800a848:	0801d6d0 	.word	0x0801d6d0
 800a84c:	20000000 	.word	0x20000000
 800a850:	0802028c 	.word	0x0802028c
 800a854:	08020290 	.word	0x08020290
 800a858:	080202a0 	.word	0x080202a0
 800a85c:	0801ec88 	.word	0x0801ec88
 800a860:	080202b4 	.word	0x080202b4
 800a864:	080202f4 	.word	0x080202f4

0800a868 <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
 800a868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a86a:	b087      	sub	sp, #28
 800a86c:	4604      	mov	r4, r0
 800a86e:	460e      	mov	r6, r1
	struct adv_id_check_data check_data = {
		.id = adv->id,
 800a870:	7803      	ldrb	r3, [r0, #0]
	struct adv_id_check_data check_data = {
 800a872:	f88d 3004 	strb.w	r3, [sp, #4]
 800a876:	2300      	movs	r3, #0
 800a878:	f88d 3005 	strb.w	r3, [sp, #5]
		.adv_enabled = false
	};
	struct bt_conn *conn;

	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
 800a87c:	a901      	add	r1, sp, #4
 800a87e:	4825      	ldr	r0, [pc, #148]	; (800a914 <le_adv_start_add_conn+0xac>)
 800a880:	f7ff f9e0 	bl	8009c44 <bt_adv_foreach>
	if (check_data.adv_enabled) {
 800a884:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d13a      	bne.n	800a902 <le_adv_start_add_conn+0x9a>
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
 800a88c:	4625      	mov	r5, r4
 800a88e:	f815 2b0b 	ldrb.w	r2, [r5], #11
 800a892:	4b21      	ldr	r3, [pc, #132]	; (800a918 <le_adv_start_add_conn+0xb0>)
 800a894:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
 800a898:	2300      	movs	r3, #0
 800a89a:	9302      	str	r3, [sp, #8]
 800a89c:	f8cd 300b 	str.w	r3, [sp, #11]
 800a8a0:	2207      	movs	r2, #7
 800a8a2:	a902      	add	r1, sp, #8
 800a8a4:	4628      	mov	r0, r5
 800a8a6:	f00d fad1 	bl	8017e4c <memcmp>
 800a8aa:	4607      	mov	r7, r0
 800a8ac:	b9b0      	cbnz	r0, 800a8dc <le_adv_start_add_conn+0x74>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
 800a8ae:	4b1b      	ldr	r3, [pc, #108]	; (800a91c <le_adv_start_add_conn+0xb4>)
 800a8b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a8b4:	9004      	str	r0, [sp, #16]
 800a8b6:	f8ad 1014 	strh.w	r1, [sp, #20]
 800a8ba:	0c09      	lsrs	r1, r1, #16
 800a8bc:	f88d 1016 	strb.w	r1, [sp, #22]
 800a8c0:	a904      	add	r1, sp, #16
 800a8c2:	7820      	ldrb	r0, [r4, #0]
 800a8c4:	f00e f8e3 	bl	8018a8e <bt_conn_add_le>
		if (!conn) {
 800a8c8:	4604      	mov	r4, r0
 800a8ca:	b120      	cbz	r0, 800a8d6 <le_adv_start_add_conn+0x6e>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
 800a8cc:	2104      	movs	r1, #4
 800a8ce:	f002 ff75 	bl	800d7bc <bt_conn_set_state>
		*out_conn = conn;
 800a8d2:	6034      	str	r4, [r6, #0]
		return 0;
 800a8d4:	e012      	b.n	800a8fc <le_adv_start_add_conn+0x94>
			return -ENOMEM;
 800a8d6:	f06f 070b 	mvn.w	r7, #11
 800a8da:	e00f      	b.n	800a8fc <le_adv_start_add_conn+0x94>
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
 800a8dc:	4629      	mov	r1, r5
 800a8de:	7820      	ldrb	r0, [r4, #0]
 800a8e0:	f002 ff18 	bl	800d714 <bt_conn_exists_le>
 800a8e4:	b980      	cbnz	r0, 800a908 <le_adv_start_add_conn+0xa0>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
 800a8e6:	4629      	mov	r1, r5
 800a8e8:	7820      	ldrb	r0, [r4, #0]
 800a8ea:	f00e f8d0 	bl	8018a8e <bt_conn_add_le>
	if (!conn) {
 800a8ee:	4604      	mov	r4, r0
 800a8f0:	b168      	cbz	r0, 800a90e <le_adv_start_add_conn+0xa6>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
 800a8f2:	2105      	movs	r1, #5
 800a8f4:	f002 ff62 	bl	800d7bc <bt_conn_set_state>
	*out_conn = conn;
 800a8f8:	6034      	str	r4, [r6, #0]
	return 0;
 800a8fa:	2700      	movs	r7, #0
}
 800a8fc:	4638      	mov	r0, r7
 800a8fe:	b007      	add	sp, #28
 800a900:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
 800a902:	f06f 0722 	mvn.w	r7, #34	; 0x22
 800a906:	e7f9      	b.n	800a8fc <le_adv_start_add_conn+0x94>
		return -EINVAL;
 800a908:	f06f 0715 	mvn.w	r7, #21
 800a90c:	e7f6      	b.n	800a8fc <le_adv_start_add_conn+0x94>
		return -ENOMEM;
 800a90e:	f06f 070b 	mvn.w	r7, #11
 800a912:	e7f3      	b.n	800a8fc <le_adv_start_add_conn+0x94>
 800a914:	080180b7 	.word	0x080180b7
 800a918:	20000000 	.word	0x20000000
 800a91c:	0801d83c 	.word	0x0801d83c

0800a920 <hci_num_completed_packets>:
{
 800a920:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
 800a924:	f8d0 8008 	ldr.w	r8, [r0, #8]
	for (i = 0; i < evt->num_handles; i++) {
 800a928:	2700      	movs	r7, #0
 800a92a:	e082      	b.n	800aa32 <hci_num_completed_packets+0x112>
	__asm__ volatile(
 800a92c:	f38b 8811 	msr	BASEPRI, fp
 800a930:	f3bf 8f6f 	isb	sy
			BT_ERR("No connection for handle %u", handle);
 800a934:	2301      	movs	r3, #1
 800a936:	f363 0a02 	bfi	sl, r3, #0, #3
 800a93a:	f36f 0ac5 	bfc	sl, #3, #3
 800a93e:	4b50      	ldr	r3, [pc, #320]	; (800aa80 <hci_num_completed_packets+0x160>)
 800a940:	4a50      	ldr	r2, [pc, #320]	; (800aa84 <hci_num_completed_packets+0x164>)
 800a942:	1a9b      	subs	r3, r3, r2
 800a944:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800a948:	f363 1a8f 	bfi	sl, r3, #6, #10
 800a94c:	4652      	mov	r2, sl
 800a94e:	4629      	mov	r1, r5
 800a950:	484d      	ldr	r0, [pc, #308]	; (800aa88 <hci_num_completed_packets+0x168>)
 800a952:	f7f9 fc8b 	bl	800426c <log_1>
			continue;
 800a956:	e06b      	b.n	800aa30 <hci_num_completed_packets+0x110>
				conn->pending_no_cb--;
 800a958:	3b01      	subs	r3, #1
 800a95a:	61e3      	str	r3, [r4, #28]
 800a95c:	f382 8811 	msr	BASEPRI, r2
 800a960:	f3bf 8f6f 	isb	sy
				k_sem_give(bt_conn_get_pkts(conn));
 800a964:	4620      	mov	r0, r4
 800a966:	f002 fb8f 	bl	800d088 <bt_conn_get_pkts>
 800a96a:	f009 fd61 	bl	8014430 <z_impl_k_sem_give>
				continue;
 800a96e:	e034      	b.n	800a9da <hci_num_completed_packets+0xba>
	list->tail = node;
 800a970:	61a1      	str	r1, [r4, #24]
 800a972:	f382 8811 	msr	BASEPRI, r2
 800a976:	f3bf 8f6f 	isb	sy
			if (!node) {
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d045      	beq.n	800aa0a <hci_num_completed_packets+0xea>
	__asm__ volatile(
 800a97e:	f04f 0210 	mov.w	r2, #16
 800a982:	f3ef 8111 	mrs	r1, BASEPRI
 800a986:	f382 8811 	msr	BASEPRI, r2
 800a98a:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
 800a98e:	68da      	ldr	r2, [r3, #12]
 800a990:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
 800a992:	2200      	movs	r2, #0
 800a994:	60da      	str	r2, [r3, #12]
	parent->next = child;
 800a996:	601a      	str	r2, [r3, #0]
	return list->tail;
 800a998:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
 800a99a:	2a00      	cmp	r2, #0
 800a99c:	d067      	beq.n	800aa6e <hci_num_completed_packets+0x14e>
	parent->next = child;
 800a99e:	6013      	str	r3, [r2, #0]
	list->tail = node;
 800a9a0:	6263      	str	r3, [r4, #36]	; 0x24
	__asm__ volatile(
 800a9a2:	f381 8811 	msr	BASEPRI, r1
 800a9a6:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
 800a9aa:	f104 0128 	add.w	r1, r4, #40	; 0x28
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 800a9ae:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800a9b2:	f3bf 8f5b 	dmb	ish
 800a9b6:	e853 2f00 	ldrex	r2, [r3]
 800a9ba:	f042 0001 	orr.w	r0, r2, #1
 800a9be:	e843 0600 	strex	r6, r0, [r3]
 800a9c2:	2e00      	cmp	r6, #0
 800a9c4:	d1f7      	bne.n	800a9b6 <hci_num_completed_packets+0x96>
 800a9c6:	f3bf 8f5b 	dmb	ish
 800a9ca:	f012 0f01 	tst.w	r2, #1
 800a9ce:	d051      	beq.n	800aa74 <hci_num_completed_packets+0x154>
			k_sem_give(bt_conn_get_pkts(conn));
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	f002 fb59 	bl	800d088 <bt_conn_get_pkts>
 800a9d6:	f009 fd2b 	bl	8014430 <z_impl_k_sem_give>
{
 800a9da:	462e      	mov	r6, r5
		while (count--) {
 800a9dc:	1e75      	subs	r5, r6, #1
 800a9de:	b2ad      	uxth	r5, r5
 800a9e0:	b31e      	cbz	r6, 800aa2a <hci_num_completed_packets+0x10a>
	__asm__ volatile(
 800a9e2:	f04f 0310 	mov.w	r3, #16
 800a9e6:	f3ef 8211 	mrs	r2, BASEPRI
 800a9ea:	f383 8811 	msr	BASEPRI, r3
 800a9ee:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
 800a9f2:	69e3      	ldr	r3, [r4, #28]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d1af      	bne.n	800a958 <hci_num_completed_packets+0x38>
	return list->head;
 800a9f8:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d0b9      	beq.n	800a972 <hci_num_completed_packets+0x52>
	return node->next;
 800a9fe:	6819      	ldr	r1, [r3, #0]
	list->head = node;
 800aa00:	6161      	str	r1, [r4, #20]
	return list->tail;
 800aa02:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 800aa04:	4283      	cmp	r3, r0
 800aa06:	d1b4      	bne.n	800a972 <hci_num_completed_packets+0x52>
 800aa08:	e7b2      	b.n	800a970 <hci_num_completed_packets+0x50>
				BT_ERR("packets count mismatch");
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	f363 0902 	bfi	r9, r3, #0, #3
 800aa10:	f36f 09c5 	bfc	r9, #3, #3
 800aa14:	4b1a      	ldr	r3, [pc, #104]	; (800aa80 <hci_num_completed_packets+0x160>)
 800aa16:	4a1b      	ldr	r2, [pc, #108]	; (800aa84 <hci_num_completed_packets+0x164>)
 800aa18:	1a9b      	subs	r3, r3, r2
 800aa1a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800aa1e:	f363 198f 	bfi	r9, r3, #6, #10
 800aa22:	4649      	mov	r1, r9
 800aa24:	4819      	ldr	r0, [pc, #100]	; (800aa8c <hci_num_completed_packets+0x16c>)
 800aa26:	f7f9 fd91 	bl	800454c <log_0>
		bt_conn_unref(conn);
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	f00e f8a2 	bl	8018b74 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
 800aa30:	3701      	adds	r7, #1
 800aa32:	f898 3000 	ldrb.w	r3, [r8]
 800aa36:	429f      	cmp	r7, r3
 800aa38:	da20      	bge.n	800aa7c <hci_num_completed_packets+0x15c>
		handle = sys_le16_to_cpu(evt->h[i].handle);
 800aa3a:	eb08 0387 	add.w	r3, r8, r7, lsl #2
 800aa3e:	f8b3 5001 	ldrh.w	r5, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
 800aa42:	f8b3 6003 	ldrh.w	r6, [r3, #3]
 800aa46:	f04f 0310 	mov.w	r3, #16
 800aa4a:	f3ef 8b11 	mrs	fp, BASEPRI
 800aa4e:	f383 8811 	msr	BASEPRI, r3
 800aa52:	f3bf 8f6f 	isb	sy
		conn = bt_conn_lookup_handle(handle);
 800aa56:	4628      	mov	r0, r5
 800aa58:	f002 fde2 	bl	800d620 <bt_conn_lookup_handle>
		if (!conn) {
 800aa5c:	4604      	mov	r4, r0
 800aa5e:	2800      	cmp	r0, #0
 800aa60:	f43f af64 	beq.w	800a92c <hci_num_completed_packets+0xc>
	__asm__ volatile(
 800aa64:	f38b 8811 	msr	BASEPRI, fp
 800aa68:	f3bf 8f6f 	isb	sy
}
 800aa6c:	e7b6      	b.n	800a9dc <hci_num_completed_packets+0xbc>
	list->tail = node;
 800aa6e:	6263      	str	r3, [r4, #36]	; 0x24
	list->head = node;
 800aa70:	6223      	str	r3, [r4, #32]
}
 800aa72:	e796      	b.n	800a9a2 <hci_num_completed_packets+0x82>
		k_queue_append(&work_q->queue, work);
 800aa74:	4806      	ldr	r0, [pc, #24]	; (800aa90 <hci_num_completed_packets+0x170>)
 800aa76:	f011 fff9 	bl	801ca6c <k_queue_append>
 800aa7a:	e7a9      	b.n	800a9d0 <hci_num_completed_packets+0xb0>
}
 800aa7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa80:	0801d708 	.word	0x0801d708
 800aa84:	0801d6d0 	.word	0x0801d6d0
 800aa88:	0802031c 	.word	0x0802031c
 800aa8c:	08020338 	.word	0x08020338
 800aa90:	20001408 	.word	0x20001408

0800aa94 <hci_le_meta_event>:
{
 800aa94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa96:	b083      	sub	sp, #12
 800aa98:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
 800aa9a:	2101      	movs	r1, #1
 800aa9c:	3008      	adds	r0, #8
 800aa9e:	f010 fb02 	bl	801b0a6 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
 800aaa2:	7805      	ldrb	r5, [r0, #0]
	for (i = 0; i < num_handlers; i++) {
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	2b09      	cmp	r3, #9
 800aaa8:	d824      	bhi.n	800aaf4 <hci_le_meta_event+0x60>
		const struct event_handler *handler = &handlers[i];
 800aaaa:	4a21      	ldr	r2, [pc, #132]	; (800ab30 <hci_le_meta_event+0x9c>)
 800aaac:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
		if (handler->event != event) {
 800aab0:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800aab4:	4295      	cmp	r5, r2
 800aab6:	d108      	bne.n	800aaca <hci_le_meta_event+0x36>
		if (buf->len < handler->min_len) {
 800aab8:	89a1      	ldrh	r1, [r4, #12]
 800aaba:	7843      	ldrb	r3, [r0, #1]
 800aabc:	4299      	cmp	r1, r3
 800aabe:	d306      	bcc.n	800aace <hci_le_meta_event+0x3a>
		handler->handler(buf);
 800aac0:	6843      	ldr	r3, [r0, #4]
 800aac2:	4620      	mov	r0, r4
 800aac4:	4798      	blx	r3
}
 800aac6:	b003      	add	sp, #12
 800aac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < num_handlers; i++) {
 800aaca:	3301      	adds	r3, #1
 800aacc:	e7eb      	b.n	800aaa6 <hci_le_meta_event+0x12>
			BT_ERR("Too small (%u bytes) event 0x%02x",
 800aace:	f04f 0300 	mov.w	r3, #0
 800aad2:	2201      	movs	r2, #1
 800aad4:	f362 0302 	bfi	r3, r2, #0, #3
 800aad8:	f36f 03c5 	bfc	r3, #3, #3
 800aadc:	4a15      	ldr	r2, [pc, #84]	; (800ab34 <hci_le_meta_event+0xa0>)
 800aade:	4816      	ldr	r0, [pc, #88]	; (800ab38 <hci_le_meta_event+0xa4>)
 800aae0:	1a12      	subs	r2, r2, r0
 800aae2:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 800aae6:	f362 138f 	bfi	r3, r2, #6, #10
 800aaea:	462a      	mov	r2, r5
 800aaec:	4813      	ldr	r0, [pc, #76]	; (800ab3c <hci_le_meta_event+0xa8>)
 800aaee:	f7f9 fc3d 	bl	800436c <log_2>
			return;
 800aaf2:	e7e8      	b.n	800aac6 <hci_le_meta_event+0x32>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
 800aaf4:	f04f 0600 	mov.w	r6, #0
 800aaf8:	2302      	movs	r3, #2
 800aafa:	f363 0602 	bfi	r6, r3, #0, #3
 800aafe:	f36f 06c5 	bfc	r6, #3, #3
 800ab02:	4b0c      	ldr	r3, [pc, #48]	; (800ab34 <hci_le_meta_event+0xa0>)
 800ab04:	4a0c      	ldr	r2, [pc, #48]	; (800ab38 <hci_le_meta_event+0xa4>)
 800ab06:	1a9b      	subs	r3, r3, r2
 800ab08:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800ab0c:	f363 168f 	bfi	r6, r3, #6, #10
 800ab10:	89a7      	ldrh	r7, [r4, #12]
 800ab12:	4639      	mov	r1, r7
 800ab14:	68a0      	ldr	r0, [r4, #8]
 800ab16:	f7fe fe53 	bl	80097c0 <bt_hex_real>
 800ab1a:	f7f9 f9d7 	bl	8003ecc <log_strdup>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	f8ad 6000 	strh.w	r6, [sp]
 800ab24:	463a      	mov	r2, r7
 800ab26:	4629      	mov	r1, r5
 800ab28:	4805      	ldr	r0, [pc, #20]	; (800ab40 <hci_le_meta_event+0xac>)
 800ab2a:	f7f9 fad3 	bl	80040d4 <log_3>
}
 800ab2e:	e7ca      	b.n	800aac6 <hci_le_meta_event+0x32>
 800ab30:	080208e0 	.word	0x080208e0
 800ab34:	0801d708 	.word	0x0801d708
 800ab38:	0801d6d0 	.word	0x0801d6d0
 800ab3c:	08020350 	.word	0x08020350
 800ab40:	08020374 	.word	0x08020374

0800ab44 <hci_event>:
{
 800ab44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab46:	b083      	sub	sp, #12
 800ab48:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
 800ab4a:	8983      	ldrh	r3, [r0, #12]
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	d916      	bls.n	800ab7e <hci_event+0x3a>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
 800ab50:	2102      	movs	r1, #2
 800ab52:	f104 0008 	add.w	r0, r4, #8
 800ab56:	f010 faa6 	bl	801b0a6 <net_buf_simple_pull_mem>
 800ab5a:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
 800ab5c:	7803      	ldrb	r3, [r0, #0]
	switch (evt) {
 800ab5e:	3b05      	subs	r3, #5
 800ab60:	2b15      	cmp	r3, #21
 800ab62:	d81c      	bhi.n	800ab9e <hci_event+0x5a>
 800ab64:	e8df f003 	tbb	[pc, r3]
 800ab68:	1b1b1b19 	.word	0x1b1b1b19
 800ab6c:	1b1b1b1b 	.word	0x1b1b1b1b
 800ab70:	1b36361b 	.word	0x1b36361b
 800ab74:	1b361b1b 	.word	0x1b361b1b
 800ab78:	1b1b1b1b 	.word	0x1b1b1b1b
 800ab7c:	361b      	.short	0x361b
	BT_ASSERT(buf->len >= sizeof(*hdr));
 800ab7e:	f241 33f8 	movw	r3, #5112	; 0x13f8
 800ab82:	4a36      	ldr	r2, [pc, #216]	; (800ac5c <hci_event+0x118>)
 800ab84:	4936      	ldr	r1, [pc, #216]	; (800ac60 <hci_event+0x11c>)
 800ab86:	4837      	ldr	r0, [pc, #220]	; (800ac64 <hci_event+0x120>)
 800ab88:	f00a fd2b 	bl	80155e2 <printk>
 800ab8c:	4040      	eors	r0, r0
 800ab8e:	f380 8811 	msr	BASEPRI, r0
 800ab92:	f04f 0003 	mov.w	r0, #3
 800ab96:	df02      	svc	2
 800ab98:	e7da      	b.n	800ab50 <hci_event+0xc>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
 800ab9a:	2303      	movs	r3, #3
 800ab9c:	e000      	b.n	800aba0 <hci_event+0x5c>
		return BT_HCI_EVT_FLAG_RECV;
 800ab9e:	2302      	movs	r3, #2
 800aba0:	f013 0f02 	tst.w	r3, #2
 800aba4:	d018      	beq.n	800abd8 <hci_event+0x94>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
 800aba6:	782d      	ldrb	r5, [r5, #0]
	for (i = 0; i < num_handlers; i++) {
 800aba8:	2300      	movs	r3, #0
 800abaa:	2b05      	cmp	r3, #5
 800abac:	d837      	bhi.n	800ac1e <hci_event+0xda>
		const struct event_handler *handler = &handlers[i];
 800abae:	4a2e      	ldr	r2, [pc, #184]	; (800ac68 <hci_event+0x124>)
 800abb0:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
		if (handler->event != event) {
 800abb4:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800abb8:	4295      	cmp	r5, r2
 800abba:	d11b      	bne.n	800abf4 <hci_event+0xb0>
		if (buf->len < handler->min_len) {
 800abbc:	89a1      	ldrh	r1, [r4, #12]
 800abbe:	7843      	ldrb	r3, [r0, #1]
 800abc0:	4299      	cmp	r1, r3
 800abc2:	d319      	bcc.n	800abf8 <hci_event+0xb4>
		handler->handler(buf);
 800abc4:	6843      	ldr	r3, [r0, #4]
 800abc6:	4620      	mov	r0, r4
 800abc8:	4798      	blx	r3
	net_buf_unref(buf);
 800abca:	4620      	mov	r0, r4
 800abcc:	f010 f9f9 	bl	801afc2 <net_buf_unref>
}
 800abd0:	b003      	add	sp, #12
 800abd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_HCI_EVT_FLAG_RECV_PRIO;
 800abd4:	2301      	movs	r3, #1
 800abd6:	e7e3      	b.n	800aba0 <hci_event+0x5c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
 800abd8:	f241 33fc 	movw	r3, #5116	; 0x13fc
 800abdc:	4a1f      	ldr	r2, [pc, #124]	; (800ac5c <hci_event+0x118>)
 800abde:	4923      	ldr	r1, [pc, #140]	; (800ac6c <hci_event+0x128>)
 800abe0:	4820      	ldr	r0, [pc, #128]	; (800ac64 <hci_event+0x120>)
 800abe2:	f00a fcfe 	bl	80155e2 <printk>
 800abe6:	4040      	eors	r0, r0
 800abe8:	f380 8811 	msr	BASEPRI, r0
 800abec:	f04f 0003 	mov.w	r0, #3
 800abf0:	df02      	svc	2
 800abf2:	e7d8      	b.n	800aba6 <hci_event+0x62>
	for (i = 0; i < num_handlers; i++) {
 800abf4:	3301      	adds	r3, #1
 800abf6:	e7d8      	b.n	800abaa <hci_event+0x66>
			BT_ERR("Too small (%u bytes) event 0x%02x",
 800abf8:	f04f 0300 	mov.w	r3, #0
 800abfc:	2201      	movs	r2, #1
 800abfe:	f362 0302 	bfi	r3, r2, #0, #3
 800ac02:	f36f 03c5 	bfc	r3, #3, #3
 800ac06:	4a1a      	ldr	r2, [pc, #104]	; (800ac70 <hci_event+0x12c>)
 800ac08:	481a      	ldr	r0, [pc, #104]	; (800ac74 <hci_event+0x130>)
 800ac0a:	1a12      	subs	r2, r2, r0
 800ac0c:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 800ac10:	f362 138f 	bfi	r3, r2, #6, #10
 800ac14:	462a      	mov	r2, r5
 800ac16:	4818      	ldr	r0, [pc, #96]	; (800ac78 <hci_event+0x134>)
 800ac18:	f7f9 fba8 	bl	800436c <log_2>
			return;
 800ac1c:	e7d5      	b.n	800abca <hci_event+0x86>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
 800ac1e:	f04f 0600 	mov.w	r6, #0
 800ac22:	2302      	movs	r3, #2
 800ac24:	f363 0602 	bfi	r6, r3, #0, #3
 800ac28:	f36f 06c5 	bfc	r6, #3, #3
 800ac2c:	4b10      	ldr	r3, [pc, #64]	; (800ac70 <hci_event+0x12c>)
 800ac2e:	4a11      	ldr	r2, [pc, #68]	; (800ac74 <hci_event+0x130>)
 800ac30:	1a9b      	subs	r3, r3, r2
 800ac32:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800ac36:	f363 168f 	bfi	r6, r3, #6, #10
 800ac3a:	89a7      	ldrh	r7, [r4, #12]
 800ac3c:	4639      	mov	r1, r7
 800ac3e:	68a0      	ldr	r0, [r4, #8]
 800ac40:	f7fe fdbe 	bl	80097c0 <bt_hex_real>
 800ac44:	f7f9 f942 	bl	8003ecc <log_strdup>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	f8ad 6000 	strh.w	r6, [sp]
 800ac4e:	463a      	mov	r2, r7
 800ac50:	4629      	mov	r1, r5
 800ac52:	480a      	ldr	r0, [pc, #40]	; (800ac7c <hci_event+0x138>)
 800ac54:	f7f9 fa3e 	bl	80040d4 <log_3>
 800ac58:	e7b7      	b.n	800abca <hci_event+0x86>
 800ac5a:	bf00      	nop
 800ac5c:	080201d4 	.word	0x080201d4
 800ac60:	08020208 	.word	0x08020208
 800ac64:	08020224 	.word	0x08020224
 800ac68:	08020980 	.word	0x08020980
 800ac6c:	08020398 	.word	0x08020398
 800ac70:	0801d708 	.word	0x0801d708
 800ac74:	0801d6d0 	.word	0x0801d6d0
 800ac78:	08020350 	.word	0x08020350
 800ac7c:	08020374 	.word	0x08020374

0800ac80 <bt_hci_cmd_create>:
{
 800ac80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac84:	4682      	mov	sl, r0
 800ac86:	460e      	mov	r6, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
 800ac88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac90:	4817      	ldr	r0, [pc, #92]	; (800acf0 <bt_hci_cmd_create+0x70>)
 800ac92:	f010 f963 	bl	801af5c <net_buf_alloc_fixed>
 800ac96:	4604      	mov	r4, r0
	net_buf_reserve(buf, BT_BUF_RESERVE);
 800ac98:	f100 0808 	add.w	r8, r0, #8
 800ac9c:	2100      	movs	r1, #0
 800ac9e:	4640      	mov	r0, r8
 800aca0:	f010 f97e 	bl	801afa0 <net_buf_simple_reserve>
	*(uint8_t *)net_buf_user_data(buf) = type;
 800aca4:	2700      	movs	r7, #0
 800aca6:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
 800aca8:	4620      	mov	r0, r4
 800acaa:	f007 fbe9 	bl	8012480 <net_buf_id>
 800acae:	4d11      	ldr	r5, [pc, #68]	; (800acf4 <bt_hci_cmd_create+0x74>)
 800acb0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800acb4:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800acb8:	f8a0 a002 	strh.w	sl, [r0, #2]
	cmd(buf)->sync = NULL;
 800acbc:	4620      	mov	r0, r4
 800acbe:	f007 fbdf 	bl	8012480 <net_buf_id>
 800acc2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800acc6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800acca:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
 800accc:	4620      	mov	r0, r4
 800acce:	f007 fbd7 	bl	8012480 <net_buf_id>
 800acd2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800acd6:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 800acda:	606f      	str	r7, [r5, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
 800acdc:	2103      	movs	r1, #3
 800acde:	4640      	mov	r0, r8
 800ace0:	f010 f9b9 	bl	801b056 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
 800ace4:	f8a0 a000 	strh.w	sl, [r0]
	hdr->param_len = param_len;
 800ace8:	7086      	strb	r6, [r0, #2]
}
 800acea:	4620      	mov	r0, r4
 800acec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acf0:	20000948 	.word	0x20000948
 800acf4:	20002024 	.word	0x20002024

0800acf8 <bt_hci_cmd_send_sync>:
{
 800acf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acfa:	b087      	sub	sp, #28
 800acfc:	4606      	mov	r6, r0
 800acfe:	4615      	mov	r5, r2
	if (!buf) {
 800ad00:	460c      	mov	r4, r1
 800ad02:	b359      	cbz	r1, 800ad5c <bt_hci_cmd_send_sync+0x64>
	return z_impl_k_sem_init(sem, initial_count, limit);
 800ad04:	2201      	movs	r2, #1
 800ad06:	2100      	movs	r1, #0
 800ad08:	4668      	mov	r0, sp
 800ad0a:	f012 f84f 	bl	801cdac <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
 800ad0e:	4620      	mov	r0, r4
 800ad10:	f007 fbb6 	bl	8012480 <net_buf_id>
 800ad14:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800ad18:	4b2f      	ldr	r3, [pc, #188]	; (800add8 <bt_hci_cmd_send_sync+0xe0>)
 800ad1a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ad1e:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
 800ad22:	4620      	mov	r0, r4
 800ad24:	f010 f973 	bl	801b00e <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
 800ad28:	4621      	mov	r1, r4
 800ad2a:	482c      	ldr	r0, [pc, #176]	; (800addc <bt_hci_cmd_send_sync+0xe4>)
 800ad2c:	f010 f93c 	bl	801afa8 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
 800ad30:	4a2b      	ldr	r2, [pc, #172]	; (800ade0 <bt_hci_cmd_send_sync+0xe8>)
 800ad32:	2300      	movs	r3, #0
 800ad34:	4668      	mov	r0, sp
 800ad36:	f009 fba3 	bl	8014480 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
 800ad3a:	4607      	mov	r7, r0
 800ad3c:	b9b0      	cbnz	r0, 800ad6c <bt_hci_cmd_send_sync+0x74>
	status = cmd(buf)->status;
 800ad3e:	4620      	mov	r0, r4
 800ad40:	f007 fb9e 	bl	8012480 <net_buf_id>
 800ad44:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800ad48:	4b23      	ldr	r3, [pc, #140]	; (800add8 <bt_hci_cmd_send_sync+0xe0>)
 800ad4a:	f813 7020 	ldrb.w	r7, [r3, r0, lsl #2]
	if (status) {
 800ad4e:	b9ff      	cbnz	r7, 800ad90 <bt_hci_cmd_send_sync+0x98>
	if (rsp) {
 800ad50:	2d00      	cmp	r5, #0
 800ad52:	d03b      	beq.n	800adcc <bt_hci_cmd_send_sync+0xd4>
		*rsp = buf;
 800ad54:	602c      	str	r4, [r5, #0]
	return 0;
 800ad56:	2000      	movs	r0, #0
}
 800ad58:	b007      	add	sp, #28
 800ad5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf = bt_hci_cmd_create(opcode, 0);
 800ad5c:	f7ff ff90 	bl	800ac80 <bt_hci_cmd_create>
		if (!buf) {
 800ad60:	4604      	mov	r4, r0
 800ad62:	2800      	cmp	r0, #0
 800ad64:	d1ce      	bne.n	800ad04 <bt_hci_cmd_send_sync+0xc>
			return -ENOBUFS;
 800ad66:	f06f 0036 	mvn.w	r0, #54	; 0x36
 800ad6a:	e7f5      	b.n	800ad58 <bt_hci_cmd_send_sync+0x60>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
 800ad6c:	f240 1377 	movw	r3, #375	; 0x177
 800ad70:	4a1c      	ldr	r2, [pc, #112]	; (800ade4 <bt_hci_cmd_send_sync+0xec>)
 800ad72:	491d      	ldr	r1, [pc, #116]	; (800ade8 <bt_hci_cmd_send_sync+0xf0>)
 800ad74:	481d      	ldr	r0, [pc, #116]	; (800adec <bt_hci_cmd_send_sync+0xf4>)
 800ad76:	f00a fc34 	bl	80155e2 <printk>
 800ad7a:	4639      	mov	r1, r7
 800ad7c:	481c      	ldr	r0, [pc, #112]	; (800adf0 <bt_hci_cmd_send_sync+0xf8>)
 800ad7e:	f00a fc30 	bl	80155e2 <printk>
 800ad82:	4040      	eors	r0, r0
 800ad84:	f380 8811 	msr	BASEPRI, r0
 800ad88:	f04f 0003 	mov.w	r0, #3
 800ad8c:	df02      	svc	2
 800ad8e:	e7d6      	b.n	800ad3e <bt_hci_cmd_send_sync+0x46>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
 800ad90:	f04f 0300 	mov.w	r3, #0
 800ad94:	2202      	movs	r2, #2
 800ad96:	f362 0302 	bfi	r3, r2, #0, #3
 800ad9a:	f36f 03c5 	bfc	r3, #3, #3
 800ad9e:	4a15      	ldr	r2, [pc, #84]	; (800adf4 <bt_hci_cmd_send_sync+0xfc>)
 800ada0:	4915      	ldr	r1, [pc, #84]	; (800adf8 <bt_hci_cmd_send_sync+0x100>)
 800ada2:	1a52      	subs	r2, r2, r1
 800ada4:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 800ada8:	f362 138f 	bfi	r3, r2, #6, #10
 800adac:	463a      	mov	r2, r7
 800adae:	4631      	mov	r1, r6
 800adb0:	4812      	ldr	r0, [pc, #72]	; (800adfc <bt_hci_cmd_send_sync+0x104>)
 800adb2:	f7f9 fadb 	bl	800436c <log_2>
		net_buf_unref(buf);
 800adb6:	4620      	mov	r0, r4
 800adb8:	f010 f903 	bl	801afc2 <net_buf_unref>
		switch (status) {
 800adbc:	2f09      	cmp	r7, #9
 800adbe:	d002      	beq.n	800adc6 <bt_hci_cmd_send_sync+0xce>
			return -EIO;
 800adc0:	f06f 0004 	mvn.w	r0, #4
 800adc4:	e7c8      	b.n	800ad58 <bt_hci_cmd_send_sync+0x60>
			return -ECONNREFUSED;
 800adc6:	f06f 003c 	mvn.w	r0, #60	; 0x3c
 800adca:	e7c5      	b.n	800ad58 <bt_hci_cmd_send_sync+0x60>
		net_buf_unref(buf);
 800adcc:	4620      	mov	r0, r4
 800adce:	f010 f8f8 	bl	801afc2 <net_buf_unref>
	return 0;
 800add2:	2000      	movs	r0, #0
 800add4:	e7c0      	b.n	800ad58 <bt_hci_cmd_send_sync+0x60>
 800add6:	bf00      	nop
 800add8:	20002024 	.word	0x20002024
 800addc:	20000104 	.word	0x20000104
 800ade0:	000186a0 	.word	0x000186a0
 800ade4:	080201d4 	.word	0x080201d4
 800ade8:	080203c8 	.word	0x080203c8
 800adec:	08020224 	.word	0x08020224
 800adf0:	080203d4 	.word	0x080203d4
 800adf4:	0801d708 	.word	0x0801d708
 800adf8:	0801d6d0 	.word	0x0801d6d0
 800adfc:	080203f4 	.word	0x080203f4

0800ae00 <set_flow_control>:
{
 800ae00:	b538      	push	{r3, r4, r5, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
 800ae02:	4b27      	ldr	r3, [pc, #156]	; (800aea0 <set_flow_control+0xa0>)
 800ae04:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ae08:	f013 0f20 	tst.w	r3, #32
 800ae0c:	d02e      	beq.n	800ae6c <set_flow_control+0x6c>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
 800ae0e:	2107      	movs	r1, #7
 800ae10:	f640 4033 	movw	r0, #3123	; 0xc33
 800ae14:	f7ff ff34 	bl	800ac80 <bt_hci_cmd_create>
	if (!buf) {
 800ae18:	4605      	mov	r5, r0
 800ae1a:	b3d0      	cbz	r0, 800ae92 <set_flow_control+0x92>
	hbs = net_buf_add(buf, sizeof(*hbs));
 800ae1c:	2107      	movs	r1, #7
 800ae1e:	3008      	adds	r0, #8
 800ae20:	f010 f919 	bl	801b056 <net_buf_simple_add>
 800ae24:	4604      	mov	r4, r0
	(void)memset(hbs, 0, sizeof(*hbs));
 800ae26:	2207      	movs	r2, #7
 800ae28:	2100      	movs	r1, #0
 800ae2a:	f00d f84c 	bl	8017ec6 <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
 800ae2e:	2200      	movs	r2, #0
 800ae30:	2345      	movs	r3, #69	; 0x45
 800ae32:	7023      	strb	r3, [r4, #0]
 800ae34:	7062      	strb	r2, [r4, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
 800ae36:	2306      	movs	r3, #6
 800ae38:	70e3      	strb	r3, [r4, #3]
 800ae3a:	7122      	strb	r2, [r4, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
 800ae3c:	4629      	mov	r1, r5
 800ae3e:	f640 4033 	movw	r0, #3123	; 0xc33
 800ae42:	f7ff ff59 	bl	800acf8 <bt_hci_cmd_send_sync>
	if (err) {
 800ae46:	bb18      	cbnz	r0, 800ae90 <set_flow_control+0x90>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
 800ae48:	2101      	movs	r1, #1
 800ae4a:	f640 4031 	movw	r0, #3121	; 0xc31
 800ae4e:	f7ff ff17 	bl	800ac80 <bt_hci_cmd_create>
	if (!buf) {
 800ae52:	4604      	mov	r4, r0
 800ae54:	b300      	cbz	r0, 800ae98 <set_flow_control+0x98>
	net_buf_add_u8(buf, BT_HCI_CTL_TO_HOST_FLOW_ENABLE);
 800ae56:	2101      	movs	r1, #1
 800ae58:	3008      	adds	r0, #8
 800ae5a:	f010 f90d 	bl	801b078 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
 800ae5e:	2200      	movs	r2, #0
 800ae60:	4621      	mov	r1, r4
 800ae62:	f640 4031 	movw	r0, #3121	; 0xc31
 800ae66:	f7ff ff47 	bl	800acf8 <bt_hci_cmd_send_sync>
 800ae6a:	e011      	b.n	800ae90 <set_flow_control+0x90>
		BT_WARN("Controller to host flow control not supported");
 800ae6c:	f04f 0100 	mov.w	r1, #0
 800ae70:	2302      	movs	r3, #2
 800ae72:	f363 0102 	bfi	r1, r3, #0, #3
 800ae76:	f36f 01c5 	bfc	r1, #3, #3
 800ae7a:	4b0a      	ldr	r3, [pc, #40]	; (800aea4 <set_flow_control+0xa4>)
 800ae7c:	4a0a      	ldr	r2, [pc, #40]	; (800aea8 <set_flow_control+0xa8>)
 800ae7e:	1a9b      	subs	r3, r3, r2
 800ae80:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800ae84:	f363 118f 	bfi	r1, r3, #6, #10
 800ae88:	4808      	ldr	r0, [pc, #32]	; (800aeac <set_flow_control+0xac>)
 800ae8a:	f7f9 fb5f 	bl	800454c <log_0>
		return 0;
 800ae8e:	2000      	movs	r0, #0
}
 800ae90:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
 800ae92:	f06f 0036 	mvn.w	r0, #54	; 0x36
 800ae96:	e7fb      	b.n	800ae90 <set_flow_control+0x90>
		return -ENOBUFS;
 800ae98:	f06f 0036 	mvn.w	r0, #54	; 0x36
 800ae9c:	e7f8      	b.n	800ae90 <set_flow_control+0x90>
 800ae9e:	bf00      	nop
 800aea0:	20000000 	.word	0x20000000
 800aea4:	0801d708 	.word	0x0801d708
 800aea8:	0801d6d0 	.word	0x0801d6d0
 800aeac:	08020410 	.word	0x08020410

0800aeb0 <common_init>:
{
 800aeb0:	b500      	push	{lr}
 800aeb2:	b083      	sub	sp, #12
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
 800aeb4:	4b26      	ldr	r3, [pc, #152]	; (800af50 <common_init+0xa0>)
 800aeb6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800aeba:	689b      	ldr	r3, [r3, #8]
 800aebc:	f013 0f01 	tst.w	r3, #1
 800aec0:	d10d      	bne.n	800aede <common_init+0x2e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
 800aec2:	aa01      	add	r2, sp, #4
 800aec4:	2100      	movs	r1, #0
 800aec6:	f640 4003 	movw	r0, #3075	; 0xc03
 800aeca:	f7ff ff15 	bl	800acf8 <bt_hci_cmd_send_sync>
		if (err) {
 800aece:	4603      	mov	r3, r0
 800aed0:	b968      	cbnz	r0, 800aeee <common_init+0x3e>
		hci_reset_complete(rsp);
 800aed2:	9801      	ldr	r0, [sp, #4]
 800aed4:	f7fe ff2c 	bl	8009d30 <hci_reset_complete>
		net_buf_unref(rsp);
 800aed8:	9801      	ldr	r0, [sp, #4]
 800aeda:	f010 f872 	bl	801afc2 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
 800aede:	aa01      	add	r2, sp, #4
 800aee0:	2100      	movs	r1, #0
 800aee2:	f241 0003 	movw	r0, #4099	; 0x1003
 800aee6:	f7ff ff07 	bl	800acf8 <bt_hci_cmd_send_sync>
	if (err) {
 800aeea:	4603      	mov	r3, r0
 800aeec:	b118      	cbz	r0, 800aef6 <common_init+0x46>
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	b003      	add	sp, #12
 800aef2:	f85d fb04 	ldr.w	pc, [sp], #4
	read_local_features_complete(rsp);
 800aef6:	9801      	ldr	r0, [sp, #4]
 800aef8:	f7fe ff34 	bl	8009d64 <read_local_features_complete>
	net_buf_unref(rsp);
 800aefc:	9801      	ldr	r0, [sp, #4]
 800aefe:	f010 f860 	bl	801afc2 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
 800af02:	aa01      	add	r2, sp, #4
 800af04:	2100      	movs	r1, #0
 800af06:	f241 0001 	movw	r0, #4097	; 0x1001
 800af0a:	f7ff fef5 	bl	800acf8 <bt_hci_cmd_send_sync>
	if (err) {
 800af0e:	4603      	mov	r3, r0
 800af10:	2800      	cmp	r0, #0
 800af12:	d1ec      	bne.n	800aeee <common_init+0x3e>
	read_local_ver_complete(rsp);
 800af14:	9801      	ldr	r0, [sp, #4]
 800af16:	f7fe feb3 	bl	8009c80 <read_local_ver_complete>
	net_buf_unref(rsp);
 800af1a:	9801      	ldr	r0, [sp, #4]
 800af1c:	f010 f851 	bl	801afc2 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
 800af20:	aa01      	add	r2, sp, #4
 800af22:	2100      	movs	r1, #0
 800af24:	f241 0002 	movw	r0, #4098	; 0x1002
 800af28:	f7ff fee6 	bl	800acf8 <bt_hci_cmd_send_sync>
	if (err) {
 800af2c:	4603      	mov	r3, r0
 800af2e:	2800      	cmp	r0, #0
 800af30:	d1dd      	bne.n	800aeee <common_init+0x3e>
	read_supported_commands_complete(rsp);
 800af32:	9801      	ldr	r0, [sp, #4]
 800af34:	f7fe ff20 	bl	8009d78 <read_supported_commands_complete>
	net_buf_unref(rsp);
 800af38:	9801      	ldr	r0, [sp, #4]
 800af3a:	f010 f842 	bl	801afc2 <net_buf_unref>
		err = prng_init();
 800af3e:	f001 fff5 	bl	800cf2c <prng_init>
		if (err) {
 800af42:	4603      	mov	r3, r0
 800af44:	2800      	cmp	r0, #0
 800af46:	d1d2      	bne.n	800aeee <common_init+0x3e>
	err = set_flow_control();
 800af48:	f7ff ff5a 	bl	800ae00 <set_flow_control>
 800af4c:	4603      	mov	r3, r0
	if (err) {
 800af4e:	e7ce      	b.n	800aeee <common_init+0x3e>
 800af50:	20000000 	.word	0x20000000

0800af54 <hci_le_read_max_data_len>:
{
 800af54:	b570      	push	{r4, r5, r6, lr}
 800af56:	b082      	sub	sp, #8
 800af58:	4605      	mov	r5, r0
 800af5a:	460c      	mov	r4, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
 800af5c:	aa01      	add	r2, sp, #4
 800af5e:	2100      	movs	r1, #0
 800af60:	f242 002f 	movw	r0, #8239	; 0x202f
 800af64:	f7ff fec8 	bl	800acf8 <bt_hci_cmd_send_sync>
	if (err) {
 800af68:	4606      	mov	r6, r0
 800af6a:	b960      	cbnz	r0, 800af86 <hci_le_read_max_data_len+0x32>
	rp = (void *)rsp->data;
 800af6c:	9801      	ldr	r0, [sp, #4]
 800af6e:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
 800af70:	f8b3 2001 	ldrh.w	r2, [r3, #1]
 800af74:	802a      	strh	r2, [r5, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
 800af76:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800af7a:	8023      	strh	r3, [r4, #0]
	net_buf_unref(rsp);
 800af7c:	f010 f821 	bl	801afc2 <net_buf_unref>
}
 800af80:	4630      	mov	r0, r6
 800af82:	b002      	add	sp, #8
 800af84:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Failed to read DLE max data len");
 800af86:	f04f 0100 	mov.w	r1, #0
 800af8a:	2301      	movs	r3, #1
 800af8c:	f363 0102 	bfi	r1, r3, #0, #3
 800af90:	f36f 01c5 	bfc	r1, #3, #3
 800af94:	4b05      	ldr	r3, [pc, #20]	; (800afac <hci_le_read_max_data_len+0x58>)
 800af96:	4a06      	ldr	r2, [pc, #24]	; (800afb0 <hci_le_read_max_data_len+0x5c>)
 800af98:	1a9b      	subs	r3, r3, r2
 800af9a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800af9e:	f363 118f 	bfi	r1, r3, #6, #10
 800afa2:	4804      	ldr	r0, [pc, #16]	; (800afb4 <hci_le_read_max_data_len+0x60>)
 800afa4:	f7f9 fad2 	bl	800454c <log_0>
		return err;
 800afa8:	e7ea      	b.n	800af80 <hci_le_read_max_data_len+0x2c>
 800afaa:	bf00      	nop
 800afac:	0801d708 	.word	0x0801d708
 800afb0:	0801d6d0 	.word	0x0801d6d0
 800afb4:	08020440 	.word	0x08020440

0800afb8 <le_set_event_mask>:
{
 800afb8:	b570      	push	{r4, r5, r6, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
 800afba:	2108      	movs	r1, #8
 800afbc:	f242 0001 	movw	r0, #8193	; 0x2001
 800afc0:	f7ff fe5e 	bl	800ac80 <bt_hci_cmd_create>
	if (!buf) {
 800afc4:	2800      	cmp	r0, #0
 800afc6:	d04b      	beq.n	800b060 <le_set_event_mask+0xa8>
 800afc8:	4604      	mov	r4, r0
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
 800afca:	2108      	movs	r1, #8
 800afcc:	4408      	add	r0, r1
 800afce:	f010 f842 	bl	801b056 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
 800afd2:	4b25      	ldr	r3, [pc, #148]	; (800b068 <le_set_event_mask+0xb0>)
 800afd4:	f893 1098 	ldrb.w	r1, [r3, #152]	; 0x98
		if ((IS_ENABLED(CONFIG_BT_SMP) &&
 800afd8:	f011 0f40 	tst.w	r1, #64	; 0x40
 800afdc:	d03a      	beq.n	800b054 <le_set_event_mask+0x9c>
			mask |= BT_EVT_MASK_LE_ENH_CONN_COMPLETE;
 800afde:	f240 2602 	movw	r6, #514	; 0x202
 800afe2:	2500      	movs	r5, #0
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
 800afe4:	f046 030c 	orr.w	r3, r6, #12
 800afe8:	462a      	mov	r2, r5
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
 800afea:	f011 0f02 	tst.w	r1, #2
 800afee:	d001      	beq.n	800aff4 <le_set_event_mask+0x3c>
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
 800aff0:	f046 032c 	orr.w	r3, r6, #44	; 0x2c
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
 800aff4:	f011 0f20 	tst.w	r1, #32
 800aff8:	d001      	beq.n	800affe <le_set_event_mask+0x46>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
 800affa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
		    (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
 800affe:	4d1a      	ldr	r5, [pc, #104]	; (800b068 <le_set_event_mask+0xb0>)
 800b000:	f895 5099 	ldrb.w	r5, [r5, #153]	; 0x99
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
 800b004:	f015 0f09 	tst.w	r5, #9
 800b008:	d001      	beq.n	800b00e <le_set_event_mask+0x56>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
 800b00a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_SMP) &&
 800b00e:	f011 0f01 	tst.w	r1, #1
 800b012:	d001      	beq.n	800b018 <le_set_event_mask+0x60>
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
 800b014:	f043 0310 	orr.w	r3, r3, #16
	    (BT_CMD_TEST(bt_dev.supported_commands, 34, 1)) &&
 800b018:	4913      	ldr	r1, [pc, #76]	; (800b068 <le_set_event_mask+0xb0>)
 800b01a:	f891 106a 	ldrb.w	r1, [r1, #106]	; 0x6a
	if (IS_ENABLED(CONFIG_BT_ECC) &&
 800b01e:	f001 0106 	and.w	r1, r1, #6
 800b022:	2906      	cmp	r1, #6
 800b024:	d019      	beq.n	800b05a <le_set_event_mask+0xa2>
	dst[0] = val;
 800b026:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
 800b028:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800b02c:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
 800b02e:	0c19      	lsrs	r1, r3, #16
	dst[0] = val;
 800b030:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
 800b032:	0e1b      	lsrs	r3, r3, #24
 800b034:	70c3      	strb	r3, [r0, #3]
	dst[0] = val;
 800b036:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
 800b038:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800b03c:	7143      	strb	r3, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
 800b03e:	0c13      	lsrs	r3, r2, #16
	dst[0] = val;
 800b040:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
 800b042:	0e12      	lsrs	r2, r2, #24
 800b044:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
 800b046:	2200      	movs	r2, #0
 800b048:	4621      	mov	r1, r4
 800b04a:	f242 0001 	movw	r0, #8193	; 0x2001
 800b04e:	f7ff fe53 	bl	800acf8 <bt_hci_cmd_send_sync>
}
 800b052:	bd70      	pop	{r4, r5, r6, pc}
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
 800b054:	2603      	movs	r6, #3
 800b056:	2500      	movs	r5, #0
 800b058:	e7c4      	b.n	800afe4 <le_set_event_mask+0x2c>
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
 800b05a:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800b05e:	e7e2      	b.n	800b026 <le_set_event_mask+0x6e>
		return -ENOBUFS;
 800b060:	f06f 0036 	mvn.w	r0, #54	; 0x36
 800b064:	e7f5      	b.n	800b052 <le_set_event_mask+0x9a>
 800b066:	bf00      	nop
 800b068:	20000000 	.word	0x20000000

0800b06c <le_init>:
{
 800b06c:	b510      	push	{r4, lr}
 800b06e:	b082      	sub	sp, #8
	if (!BT_FEAT_LE(bt_dev.features)) {
 800b070:	4b5b      	ldr	r3, [pc, #364]	; (800b1e0 <le_init+0x174>)
 800b072:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b076:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b07a:	d00a      	beq.n	800b092 <le_init+0x26>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
 800b07c:	aa01      	add	r2, sp, #4
 800b07e:	2100      	movs	r1, #0
 800b080:	f242 0003 	movw	r0, #8195	; 0x2003
 800b084:	f7ff fe38 	bl	800acf8 <bt_hci_cmd_send_sync>
	if (err) {
 800b088:	4603      	mov	r3, r0
 800b08a:	b1b0      	cbz	r0, 800b0ba <le_init+0x4e>
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	b002      	add	sp, #8
 800b090:	bd10      	pop	{r4, pc}
		BT_ERR("Non-LE capable controller detected!");
 800b092:	f04f 0100 	mov.w	r1, #0
 800b096:	2301      	movs	r3, #1
 800b098:	f363 0102 	bfi	r1, r3, #0, #3
 800b09c:	f36f 01c5 	bfc	r1, #3, #3
 800b0a0:	4b50      	ldr	r3, [pc, #320]	; (800b1e4 <le_init+0x178>)
 800b0a2:	4a51      	ldr	r2, [pc, #324]	; (800b1e8 <le_init+0x17c>)
 800b0a4:	1a9b      	subs	r3, r3, r2
 800b0a6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b0aa:	f363 118f 	bfi	r1, r3, #6, #10
 800b0ae:	484f      	ldr	r0, [pc, #316]	; (800b1ec <le_init+0x180>)
 800b0b0:	f7f9 fa4c 	bl	800454c <log_0>
		return -ENODEV;
 800b0b4:	f06f 0312 	mvn.w	r3, #18
 800b0b8:	e7e8      	b.n	800b08c <le_init+0x20>
	read_le_features_complete(rsp);
 800b0ba:	9801      	ldr	r0, [sp, #4]
 800b0bc:	f7fe fe66 	bl	8009d8c <read_le_features_complete>
	net_buf_unref(rsp);
 800b0c0:	9801      	ldr	r0, [sp, #4]
 800b0c2:	f00f ff7e 	bl	801afc2 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
 800b0c6:	aa01      	add	r2, sp, #4
 800b0c8:	2100      	movs	r1, #0
 800b0ca:	f242 0002 	movw	r0, #8194	; 0x2002
 800b0ce:	f7ff fe13 	bl	800acf8 <bt_hci_cmd_send_sync>
		if (err) {
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	d1d9      	bne.n	800b08c <le_init+0x20>
		le_read_buffer_size_complete(rsp);
 800b0d8:	9801      	ldr	r0, [sp, #4]
 800b0da:	f7fe febf 	bl	8009e5c <le_read_buffer_size_complete>
		net_buf_unref(rsp);
 800b0de:	9801      	ldr	r0, [sp, #4]
 800b0e0:	f00f ff6f 	bl	801afc2 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
 800b0e4:	4b3e      	ldr	r3, [pc, #248]	; (800b1e0 <le_init+0x174>)
 800b0e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0ea:	f013 0f20 	tst.w	r3, #32
 800b0ee:	d024      	beq.n	800b13a <le_init+0xce>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
 800b0f0:	4b3b      	ldr	r3, [pc, #236]	; (800b1e0 <le_init+0x174>)
 800b0f2:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800b0f6:	f013 0f08 	tst.w	r3, #8
 800b0fa:	d137      	bne.n	800b16c <le_init+0x100>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
 800b0fc:	4b38      	ldr	r3, [pc, #224]	; (800b1e0 <le_init+0x174>)
 800b0fe:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
	if (IS_ENABLED(CONFIG_BT_CONN) &&
 800b102:	f013 0f20 	tst.w	r3, #32
 800b106:	d141      	bne.n	800b18c <le_init+0x120>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
 800b108:	4b35      	ldr	r3, [pc, #212]	; (800b1e0 <le_init+0x174>)
 800b10a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b10e:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b112:	d00e      	beq.n	800b132 <le_init+0xc6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
 800b114:	aa01      	add	r2, sp, #4
 800b116:	2100      	movs	r1, #0
 800b118:	f242 002a 	movw	r0, #8234	; 0x202a
 800b11c:	f7ff fdec 	bl	800acf8 <bt_hci_cmd_send_sync>
		if (err) {
 800b120:	4603      	mov	r3, r0
 800b122:	2800      	cmp	r0, #0
 800b124:	d1b2      	bne.n	800b08c <le_init+0x20>
		le_read_resolving_list_size_complete(rsp);
 800b126:	9801      	ldr	r0, [sp, #4]
 800b128:	f7fe fddc 	bl	8009ce4 <le_read_resolving_list_size_complete>
		net_buf_unref(rsp);
 800b12c:	9801      	ldr	r0, [sp, #4]
 800b12e:	f00f ff48 	bl	801afc2 <net_buf_unref>
	return  le_set_event_mask();
 800b132:	f7ff ff41 	bl	800afb8 <le_set_event_mask>
 800b136:	4603      	mov	r3, r0
 800b138:	e7a8      	b.n	800b08c <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
 800b13a:	2102      	movs	r1, #2
 800b13c:	f640 406d 	movw	r0, #3181	; 0xc6d
 800b140:	f7ff fd9e 	bl	800ac80 <bt_hci_cmd_create>
		if (!buf) {
 800b144:	4604      	mov	r4, r0
 800b146:	2800      	cmp	r0, #0
 800b148:	d047      	beq.n	800b1da <le_init+0x16e>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
 800b14a:	2102      	movs	r1, #2
 800b14c:	3008      	adds	r0, #8
 800b14e:	f00f ff82 	bl	801b056 <net_buf_simple_add>
		cp_le->le = 0x01;
 800b152:	2301      	movs	r3, #1
 800b154:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
 800b156:	2200      	movs	r2, #0
 800b158:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
 800b15a:	4621      	mov	r1, r4
 800b15c:	f640 406d 	movw	r0, #3181	; 0xc6d
 800b160:	f7ff fdca 	bl	800acf8 <bt_hci_cmd_send_sync>
		if (err) {
 800b164:	4603      	mov	r3, r0
 800b166:	2800      	cmp	r0, #0
 800b168:	d0c2      	beq.n	800b0f0 <le_init+0x84>
 800b16a:	e78f      	b.n	800b08c <le_init+0x20>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
 800b16c:	aa01      	add	r2, sp, #4
 800b16e:	2100      	movs	r1, #0
 800b170:	f242 001c 	movw	r0, #8220	; 0x201c
 800b174:	f7ff fdc0 	bl	800acf8 <bt_hci_cmd_send_sync>
		if (err) {
 800b178:	4603      	mov	r3, r0
 800b17a:	2800      	cmp	r0, #0
 800b17c:	d186      	bne.n	800b08c <le_init+0x20>
		le_read_supp_states_complete(rsp);
 800b17e:	9801      	ldr	r0, [sp, #4]
 800b180:	f7fe fd92 	bl	8009ca8 <le_read_supp_states_complete>
		net_buf_unref(rsp);
 800b184:	9801      	ldr	r0, [sp, #4]
 800b186:	f00f ff1c 	bl	801afc2 <net_buf_unref>
 800b18a:	e7b7      	b.n	800b0fc <le_init+0x90>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
 800b18c:	f10d 0102 	add.w	r1, sp, #2
 800b190:	4668      	mov	r0, sp
 800b192:	f7ff fedf 	bl	800af54 <hci_le_read_max_data_len>
		if (err) {
 800b196:	4603      	mov	r3, r0
 800b198:	2800      	cmp	r0, #0
 800b19a:	f47f af77 	bne.w	800b08c <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
 800b19e:	2104      	movs	r1, #4
 800b1a0:	f242 0024 	movw	r0, #8228	; 0x2024
 800b1a4:	f7ff fd6c 	bl	800ac80 <bt_hci_cmd_create>
		if (!buf) {
 800b1a8:	4604      	mov	r4, r0
 800b1aa:	b198      	cbz	r0, 800b1d4 <le_init+0x168>
		cp = net_buf_add(buf, sizeof(*cp));
 800b1ac:	2104      	movs	r1, #4
 800b1ae:	3008      	adds	r0, #8
 800b1b0:	f00f ff51 	bl	801b056 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
 800b1b4:	f8bd 3000 	ldrh.w	r3, [sp]
 800b1b8:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
 800b1ba:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800b1be:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	4621      	mov	r1, r4
 800b1c4:	f242 0024 	movw	r0, #8228	; 0x2024
 800b1c8:	f7ff fd96 	bl	800acf8 <bt_hci_cmd_send_sync>
		if (err) {
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	2800      	cmp	r0, #0
 800b1d0:	d09a      	beq.n	800b108 <le_init+0x9c>
 800b1d2:	e75b      	b.n	800b08c <le_init+0x20>
			return -ENOBUFS;
 800b1d4:	f06f 0336 	mvn.w	r3, #54	; 0x36
 800b1d8:	e758      	b.n	800b08c <le_init+0x20>
			return -ENOBUFS;
 800b1da:	f06f 0336 	mvn.w	r3, #54	; 0x36
 800b1de:	e755      	b.n	800b08c <le_init+0x20>
 800b1e0:	20000000 	.word	0x20000000
 800b1e4:	0801d708 	.word	0x0801d708
 800b1e8:	0801d6d0 	.word	0x0801d6d0
 800b1ec:	08020460 	.word	0x08020460

0800b1f0 <br_init>:
{
 800b1f0:	b510      	push	{r4, lr}
 800b1f2:	b082      	sub	sp, #8
	if (bt_dev.le.acl_mtu) {
 800b1f4:	4b0b      	ldr	r3, [pc, #44]	; (800b224 <br_init+0x34>)
 800b1f6:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800b1fa:	b11b      	cbz	r3, 800b204 <br_init+0x14>
		return 0;
 800b1fc:	2400      	movs	r4, #0
}
 800b1fe:	4620      	mov	r0, r4
 800b200:	b002      	add	sp, #8
 800b202:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
 800b204:	aa01      	add	r2, sp, #4
 800b206:	2100      	movs	r1, #0
 800b208:	f241 0005 	movw	r0, #4101	; 0x1005
 800b20c:	f7ff fd74 	bl	800acf8 <bt_hci_cmd_send_sync>
	if (err) {
 800b210:	4604      	mov	r4, r0
 800b212:	2800      	cmp	r0, #0
 800b214:	d1f3      	bne.n	800b1fe <br_init+0xe>
	read_buffer_size_complete(rsp);
 800b216:	9801      	ldr	r0, [sp, #4]
 800b218:	f7fe fe32 	bl	8009e80 <read_buffer_size_complete>
	net_buf_unref(rsp);
 800b21c:	9801      	ldr	r0, [sp, #4]
 800b21e:	f00f fed0 	bl	801afc2 <net_buf_unref>
	return 0;
 800b222:	e7ec      	b.n	800b1fe <br_init+0xe>
 800b224:	20000000 	.word	0x20000000

0800b228 <set_event_mask>:
{
 800b228:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
 800b22a:	2108      	movs	r1, #8
 800b22c:	f640 4001 	movw	r0, #3073	; 0xc01
 800b230:	f7ff fd26 	bl	800ac80 <bt_hci_cmd_create>
	if (!buf) {
 800b234:	b338      	cbz	r0, 800b286 <set_event_mask+0x5e>
 800b236:	4604      	mov	r4, r0
	ev = net_buf_add(buf, sizeof(*ev));
 800b238:	2108      	movs	r1, #8
 800b23a:	4408      	add	r0, r1
 800b23c:	f00f ff0b 	bl	801b056 <net_buf_simple_add>
	    BT_FEAT_LE_ENCR(bt_dev.le.features)) {
 800b240:	4b12      	ldr	r3, [pc, #72]	; (800b28c <set_event_mask+0x64>)
 800b242:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
	if (IS_ENABLED(CONFIG_BT_SMP) &&
 800b246:	f013 0f01 	tst.w	r3, #1
 800b24a:	d119      	bne.n	800b280 <set_event_mask+0x58>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
 800b24c:	4a10      	ldr	r2, [pc, #64]	; (800b290 <set_event_mask+0x68>)
 800b24e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
	sys_put_le16(val, dst);
 800b252:	b291      	uxth	r1, r2
	dst[0] = val;
 800b254:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
 800b256:	0a09      	lsrs	r1, r1, #8
 800b258:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
 800b25a:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
 800b25c:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
 800b25e:	0e12      	lsrs	r2, r2, #24
 800b260:	70c2      	strb	r2, [r0, #3]
	sys_put_le16(val, dst);
 800b262:	b29a      	uxth	r2, r3
	dst[0] = val;
 800b264:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
 800b266:	0a12      	lsrs	r2, r2, #8
 800b268:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
 800b26a:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
 800b26c:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
 800b26e:	0e1b      	lsrs	r3, r3, #24
 800b270:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
 800b272:	2200      	movs	r2, #0
 800b274:	4621      	mov	r1, r4
 800b276:	f640 4001 	movw	r0, #3073	; 0xc01
 800b27a:	f7ff fd3d 	bl	800acf8 <bt_hci_cmd_send_sync>
}
 800b27e:	bd10      	pop	{r4, pc}
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
 800b280:	4a04      	ldr	r2, [pc, #16]	; (800b294 <set_event_mask+0x6c>)
 800b282:	4b05      	ldr	r3, [pc, #20]	; (800b298 <set_event_mask+0x70>)
 800b284:	e7e5      	b.n	800b252 <set_event_mask+0x2a>
		return -ENOBUFS;
 800b286:	f06f 0036 	mvn.w	r0, #54	; 0x36
 800b28a:	e7f8      	b.n	800b27e <set_event_mask+0x56>
 800b28c:	20000000 	.word	0x20000000
 800b290:	02008810 	.word	0x02008810
 800b294:	02008890 	.word	0x02008890
 800b298:	20008000 	.word	0x20008000

0800b29c <hci_init>:
{
 800b29c:	b508      	push	{r3, lr}
	err = common_init();
 800b29e:	f7ff fe07 	bl	800aeb0 <common_init>
	if (err) {
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	b108      	cbz	r0, 800b2aa <hci_init+0xe>
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	bd08      	pop	{r3, pc}
	err = le_init();
 800b2aa:	f7ff fedf 	bl	800b06c <le_init>
	if (err) {
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	2800      	cmp	r0, #0
 800b2b2:	d1f8      	bne.n	800b2a6 <hci_init+0xa>
	if (BT_FEAT_BREDR(bt_dev.features)) {
 800b2b4:	4b07      	ldr	r3, [pc, #28]	; (800b2d4 <hci_init+0x38>)
 800b2b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2ba:	f013 0f20 	tst.w	r3, #32
 800b2be:	d104      	bne.n	800b2ca <hci_init+0x2e>
		err = br_init();
 800b2c0:	f7ff ff96 	bl	800b1f0 <br_init>
		if (err) {
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	2800      	cmp	r0, #0
 800b2c8:	d1ed      	bne.n	800b2a6 <hci_init+0xa>
	err = set_event_mask();
 800b2ca:	f7ff ffad 	bl	800b228 <set_event_mask>
 800b2ce:	4603      	mov	r3, r0
	if (err) {
 800b2d0:	e7e9      	b.n	800b2a6 <hci_init+0xa>
 800b2d2:	bf00      	nop
 800b2d4:	20000000 	.word	0x20000000

0800b2d8 <set_le_adv_enable_legacy>:
{
 800b2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2da:	b085      	sub	sp, #20
 800b2dc:	4605      	mov	r5, r0
 800b2de:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
 800b2e0:	2101      	movs	r1, #1
 800b2e2:	f242 000a 	movw	r0, #8202	; 0x200a
 800b2e6:	f7ff fccb 	bl	800ac80 <bt_hci_cmd_create>
	if (!buf) {
 800b2ea:	b318      	cbz	r0, 800b334 <set_le_adv_enable_legacy+0x5c>
 800b2ec:	4606      	mov	r6, r0
	if (enable) {
 800b2ee:	b1e4      	cbz	r4, 800b32a <set_le_adv_enable_legacy+0x52>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
 800b2f0:	2101      	movs	r1, #1
 800b2f2:	3008      	adds	r0, #8
 800b2f4:	f00f fec0 	bl	801b078 <net_buf_simple_add_u8>
	cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
 800b2f8:	af01      	add	r7, sp, #4
 800b2fa:	4623      	mov	r3, r4
 800b2fc:	2206      	movs	r2, #6
 800b2fe:	f105 0114 	add.w	r1, r5, #20
 800b302:	4638      	mov	r0, r7
 800b304:	f00c ff07 	bl	8018116 <cmd_state_set_init>
	cmd(buf)->state = &state;
 800b308:	4630      	mov	r0, r6
 800b30a:	f007 f8b9 	bl	8012480 <net_buf_id>
 800b30e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800b312:	4b0a      	ldr	r3, [pc, #40]	; (800b33c <set_le_adv_enable_legacy+0x64>)
 800b314:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b318:	6047      	str	r7, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
 800b31a:	2200      	movs	r2, #0
 800b31c:	4631      	mov	r1, r6
 800b31e:	f242 000a 	movw	r0, #8202	; 0x200a
 800b322:	f7ff fce9 	bl	800acf8 <bt_hci_cmd_send_sync>
}
 800b326:	b005      	add	sp, #20
 800b328:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
 800b32a:	2100      	movs	r1, #0
 800b32c:	3008      	adds	r0, #8
 800b32e:	f00f fea3 	bl	801b078 <net_buf_simple_add_u8>
 800b332:	e7e1      	b.n	800b2f8 <set_le_adv_enable_legacy+0x20>
		return -ENOBUFS;
 800b334:	f06f 0036 	mvn.w	r0, #54	; 0x36
 800b338:	e7f5      	b.n	800b326 <set_le_adv_enable_legacy+0x4e>
 800b33a:	bf00      	nop
 800b33c:	20002024 	.word	0x20002024

0800b340 <le_set_privacy_mode>:
{
 800b340:	b510      	push	{r4, lr}
 800b342:	b082      	sub	sp, #8
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
 800b344:	4b1b      	ldr	r3, [pc, #108]	; (800b3b4 <le_set_privacy_mode+0x74>)
 800b346:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800b34a:	f013 0f04 	tst.w	r3, #4
 800b34e:	d01b      	beq.n	800b388 <le_set_privacy_mode+0x48>
 800b350:	460c      	mov	r4, r1
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
 800b352:	2207      	movs	r2, #7
 800b354:	4601      	mov	r1, r0
 800b356:	4668      	mov	r0, sp
 800b358:	f00c fd90 	bl	8017e7c <memcpy>
	cp.mode = mode;
 800b35c:	f88d 4007 	strb.w	r4, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
 800b360:	2108      	movs	r1, #8
 800b362:	f242 004e 	movw	r0, #8270	; 0x204e
 800b366:	f7ff fc8b 	bl	800ac80 <bt_hci_cmd_create>
	if (!buf) {
 800b36a:	4604      	mov	r4, r0
 800b36c:	b1f8      	cbz	r0, 800b3ae <le_set_privacy_mode+0x6e>
	net_buf_add_mem(buf, &cp, sizeof(cp));
 800b36e:	2208      	movs	r2, #8
 800b370:	4669      	mov	r1, sp
 800b372:	4410      	add	r0, r2
 800b374:	f00f fe75 	bl	801b062 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
 800b378:	2200      	movs	r2, #0
 800b37a:	4621      	mov	r1, r4
 800b37c:	f242 004e 	movw	r0, #8270	; 0x204e
 800b380:	f7ff fcba 	bl	800acf8 <bt_hci_cmd_send_sync>
}
 800b384:	b002      	add	sp, #8
 800b386:	bd10      	pop	{r4, pc}
		BT_WARN("Set privacy mode command is not supported");
 800b388:	f04f 0100 	mov.w	r1, #0
 800b38c:	2302      	movs	r3, #2
 800b38e:	f363 0102 	bfi	r1, r3, #0, #3
 800b392:	f36f 01c5 	bfc	r1, #3, #3
 800b396:	4b08      	ldr	r3, [pc, #32]	; (800b3b8 <le_set_privacy_mode+0x78>)
 800b398:	4a08      	ldr	r2, [pc, #32]	; (800b3bc <le_set_privacy_mode+0x7c>)
 800b39a:	1a9b      	subs	r3, r3, r2
 800b39c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b3a0:	f363 118f 	bfi	r1, r3, #6, #10
 800b3a4:	4806      	ldr	r0, [pc, #24]	; (800b3c0 <le_set_privacy_mode+0x80>)
 800b3a6:	f7f9 f8d1 	bl	800454c <log_0>
		return 0;
 800b3aa:	2000      	movs	r0, #0
 800b3ac:	e7ea      	b.n	800b384 <le_set_privacy_mode+0x44>
		return -ENOBUFS;
 800b3ae:	f06f 0036 	mvn.w	r0, #54	; 0x36
 800b3b2:	e7e7      	b.n	800b384 <le_set_privacy_mode+0x44>
 800b3b4:	20000000 	.word	0x20000000
 800b3b8:	0801d708 	.word	0x0801d708
 800b3bc:	0801d6d0 	.word	0x0801d6d0
 800b3c0:	08020484 	.word	0x08020484

0800b3c4 <bt_read_public_addr>:
{
 800b3c4:	b530      	push	{r4, r5, lr}
 800b3c6:	b087      	sub	sp, #28
 800b3c8:	4605      	mov	r5, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
 800b3ca:	aa01      	add	r2, sp, #4
 800b3cc:	2100      	movs	r1, #0
 800b3ce:	f241 0009 	movw	r0, #4105	; 0x1009
 800b3d2:	f7ff fc91 	bl	800acf8 <bt_hci_cmd_send_sync>
	if (err) {
 800b3d6:	b9f0      	cbnz	r0, 800b416 <bt_read_public_addr+0x52>
	rp = (void *)rsp->data;
 800b3d8:	9b01      	ldr	r3, [sp, #4]
 800b3da:	689c      	ldr	r4, [r3, #8]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
 800b3dc:	3401      	adds	r4, #1
 800b3de:	2300      	movs	r3, #0
 800b3e0:	9302      	str	r3, [sp, #8]
 800b3e2:	f8ad 300c 	strh.w	r3, [sp, #12]
	return memcmp(a, b, sizeof(*a));
 800b3e6:	2206      	movs	r2, #6
 800b3e8:	a902      	add	r1, sp, #8
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	f00c fd2e 	bl	8017e4c <memcmp>
 800b3f0:	b158      	cbz	r0, 800b40a <bt_read_public_addr+0x46>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
 800b3f2:	4b18      	ldr	r3, [pc, #96]	; (800b454 <bt_read_public_addr+0x90>)
 800b3f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b3f8:	9004      	str	r0, [sp, #16]
 800b3fa:	f8ad 1014 	strh.w	r1, [sp, #20]
 800b3fe:	2206      	movs	r2, #6
 800b400:	a904      	add	r1, sp, #16
 800b402:	4620      	mov	r0, r4
 800b404:	f00c fd22 	bl	8017e4c <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
 800b408:	b9c0      	cbnz	r0, 800b43c <bt_read_public_addr+0x78>
		net_buf_unref(rsp);
 800b40a:	9801      	ldr	r0, [sp, #4]
 800b40c:	f00f fdd9 	bl	801afc2 <net_buf_unref>
		return 0U;
 800b410:	2000      	movs	r0, #0
}
 800b412:	b007      	add	sp, #28
 800b414:	bd30      	pop	{r4, r5, pc}
		BT_WARN("Failed to read public address");
 800b416:	f04f 0100 	mov.w	r1, #0
 800b41a:	2302      	movs	r3, #2
 800b41c:	f363 0102 	bfi	r1, r3, #0, #3
 800b420:	f36f 01c5 	bfc	r1, #3, #3
 800b424:	4b0c      	ldr	r3, [pc, #48]	; (800b458 <bt_read_public_addr+0x94>)
 800b426:	4a0d      	ldr	r2, [pc, #52]	; (800b45c <bt_read_public_addr+0x98>)
 800b428:	1a9b      	subs	r3, r3, r2
 800b42a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b42e:	f363 118f 	bfi	r1, r3, #6, #10
 800b432:	480b      	ldr	r0, [pc, #44]	; (800b460 <bt_read_public_addr+0x9c>)
 800b434:	f7f9 f88a 	bl	800454c <log_0>
		return 0U;
 800b438:	2000      	movs	r0, #0
 800b43a:	e7ea      	b.n	800b412 <bt_read_public_addr+0x4e>
	memcpy(dst, src, sizeof(*dst));
 800b43c:	2206      	movs	r2, #6
 800b43e:	4621      	mov	r1, r4
 800b440:	1c68      	adds	r0, r5, #1
 800b442:	f00c fd1b 	bl	8017e7c <memcpy>
	addr->type = BT_ADDR_LE_PUBLIC;
 800b446:	2300      	movs	r3, #0
 800b448:	702b      	strb	r3, [r5, #0]
	net_buf_unref(rsp);
 800b44a:	9801      	ldr	r0, [sp, #4]
 800b44c:	f00f fdb9 	bl	801afc2 <net_buf_unref>
	return 1U;
 800b450:	2001      	movs	r0, #1
 800b452:	e7de      	b.n	800b412 <bt_read_public_addr+0x4e>
 800b454:	0801d844 	.word	0x0801d844
 800b458:	0801d708 	.word	0x0801d708
 800b45c:	0801d6d0 	.word	0x0801d6d0
 800b460:	080204b0 	.word	0x080204b0

0800b464 <set_random_address>:
{
 800b464:	b570      	push	{r4, r5, r6, lr}
 800b466:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
 800b468:	2206      	movs	r2, #6
 800b46a:	4915      	ldr	r1, [pc, #84]	; (800b4c0 <set_random_address+0x5c>)
 800b46c:	f00c fcee 	bl	8017e4c <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
 800b470:	4605      	mov	r5, r0
 800b472:	b908      	cbnz	r0, 800b478 <set_random_address+0x14>
}
 800b474:	4628      	mov	r0, r5
 800b476:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
 800b478:	2106      	movs	r1, #6
 800b47a:	f242 0005 	movw	r0, #8197	; 0x2005
 800b47e:	f7ff fbff 	bl	800ac80 <bt_hci_cmd_create>
	if (!buf) {
 800b482:	4605      	mov	r5, r0
 800b484:	b1c0      	cbz	r0, 800b4b8 <set_random_address+0x54>
	net_buf_add_mem(buf, addr, sizeof(*addr));
 800b486:	2206      	movs	r2, #6
 800b488:	4621      	mov	r1, r4
 800b48a:	3008      	adds	r0, #8
 800b48c:	f00f fde9 	bl	801b062 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
 800b490:	2200      	movs	r2, #0
 800b492:	4629      	mov	r1, r5
 800b494:	f242 0005 	movw	r0, #8197	; 0x2005
 800b498:	f7ff fc2e 	bl	800acf8 <bt_hci_cmd_send_sync>
	if (err) {
 800b49c:	4605      	mov	r5, r0
 800b49e:	2800      	cmp	r0, #0
 800b4a0:	d1e8      	bne.n	800b474 <set_random_address+0x10>
	memcpy(dst, src, sizeof(*dst));
 800b4a2:	4e08      	ldr	r6, [pc, #32]	; (800b4c4 <set_random_address+0x60>)
 800b4a4:	2206      	movs	r2, #6
 800b4a6:	4621      	mov	r1, r4
 800b4a8:	f106 0031 	add.w	r0, r6, #49	; 0x31
 800b4ac:	f00c fce6 	bl	8017e7c <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
	return 0;
 800b4b6:	e7dd      	b.n	800b474 <set_random_address+0x10>
		return -ENOBUFS;
 800b4b8:	f06f 0536 	mvn.w	r5, #54	; 0x36
 800b4bc:	e7da      	b.n	800b474 <set_random_address+0x10>
 800b4be:	bf00      	nop
 800b4c0:	20000031 	.word	0x20000031
 800b4c4:	20000000 	.word	0x20000000

0800b4c8 <le_adv_set_random_addr>:
{
 800b4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ca:	460d      	mov	r5, r1
 800b4cc:	461e      	mov	r6, r3
	id_addr = &bt_dev.id_addr[adv->id];
 800b4ce:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
 800b4d0:	f011 0f01 	tst.w	r1, #1
 800b4d4:	d024      	beq.n	800b520 <le_adv_set_random_addr+0x58>
 800b4d6:	4617      	mov	r7, r2
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
 800b4d8:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800b4dc:	4a22      	ldr	r2, [pc, #136]	; (800b568 <le_adv_set_random_addr+0xa0>)
 800b4de:	5cd3      	ldrb	r3, [r2, r3]
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d013      	beq.n	800b50c <le_adv_set_random_addr+0x44>
			*own_addr_type = id_addr->type;
 800b4e4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800b4e8:	4b1f      	ldr	r3, [pc, #124]	; (800b568 <le_adv_set_random_addr+0xa0>)
 800b4ea:	5d1b      	ldrb	r3, [r3, r4]
 800b4ec:	7033      	strb	r3, [r6, #0]
		if (dir_adv) {
 800b4ee:	b3a7      	cbz	r7, 800b55a <le_adv_set_random_addr+0x92>
			    BT_FEAT_LE_PRIVACY(bt_dev.le.features) &&
 800b4f0:	4a1d      	ldr	r2, [pc, #116]	; (800b568 <le_adv_set_random_addr+0xa0>)
 800b4f2:	f892 2098 	ldrb.w	r2, [r2, #152]	; 0x98
			if (IS_ENABLED(CONFIG_BT_SMP) &&
 800b4f6:	f012 0f40 	tst.w	r2, #64	; 0x40
 800b4fa:	d030      	beq.n	800b55e <le_adv_set_random_addr+0x96>
			    BT_FEAT_LE_PRIVACY(bt_dev.le.features) &&
 800b4fc:	f015 0f20 	tst.w	r5, #32
 800b500:	d02f      	beq.n	800b562 <le_adv_set_random_addr+0x9a>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
 800b502:	f043 0302 	orr.w	r3, r3, #2
 800b506:	7033      	strb	r3, [r6, #0]
	return 0;
 800b508:	2000      	movs	r0, #0
 800b50a:	e018      	b.n	800b53e <le_adv_set_random_addr+0x76>
				err = set_adv_random_address(adv, &id_addr->a);
 800b50c:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800b510:	4611      	mov	r1, r2
 800b512:	4419      	add	r1, r3
 800b514:	3101      	adds	r1, #1
 800b516:	f00c fedb 	bl	80182d0 <set_adv_random_address>
				if (err) {
 800b51a:	2800      	cmp	r0, #0
 800b51c:	d0e2      	beq.n	800b4e4 <le_adv_set_random_addr+0x1c>
 800b51e:	e00e      	b.n	800b53e <le_adv_set_random_addr+0x76>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
 800b520:	f011 0f04 	tst.w	r1, #4
 800b524:	d014      	beq.n	800b550 <le_adv_set_random_addr+0x88>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
 800b526:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800b52a:	4a0f      	ldr	r2, [pc, #60]	; (800b568 <le_adv_set_random_addr+0xa0>)
 800b52c:	5cd3      	ldrb	r3, [r2, r3]
 800b52e:	2b01      	cmp	r3, #1
 800b530:	d006      	beq.n	800b540 <le_adv_set_random_addr+0x78>
	int err = 0;
 800b532:	2000      	movs	r0, #0
			*own_addr_type = id_addr->type;
 800b534:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800b538:	4b0b      	ldr	r3, [pc, #44]	; (800b568 <le_adv_set_random_addr+0xa0>)
 800b53a:	5d1b      	ldrb	r3, [r3, r4]
 800b53c:	7033      	strb	r3, [r6, #0]
}
 800b53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				err = set_adv_random_address(adv, &id_addr->a);
 800b540:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800b544:	4611      	mov	r1, r2
 800b546:	4419      	add	r1, r3
 800b548:	3101      	adds	r1, #1
 800b54a:	f00c fec1 	bl	80182d0 <set_adv_random_address>
 800b54e:	e7f1      	b.n	800b534 <le_adv_set_random_addr+0x6c>
			err = le_adv_set_private_addr(adv);
 800b550:	f00c fec3 	bl	80182da <le_adv_set_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
 800b554:	2301      	movs	r3, #1
 800b556:	7033      	strb	r3, [r6, #0]
		if (err) {
 800b558:	e7f1      	b.n	800b53e <le_adv_set_random_addr+0x76>
	return 0;
 800b55a:	2000      	movs	r0, #0
 800b55c:	e7ef      	b.n	800b53e <le_adv_set_random_addr+0x76>
 800b55e:	2000      	movs	r0, #0
 800b560:	e7ed      	b.n	800b53e <le_adv_set_random_addr+0x76>
 800b562:	2000      	movs	r0, #0
 800b564:	e7eb      	b.n	800b53e <le_adv_set_random_addr+0x76>
 800b566:	bf00      	nop
 800b568:	20000000 	.word	0x20000000

0800b56c <bt_adv_lookup_legacy>:
}
 800b56c:	4800      	ldr	r0, [pc, #0]	; (800b570 <bt_adv_lookup_legacy+0x4>)
 800b56e:	4770      	bx	lr
 800b570:	20000018 	.word	0x20000018

0800b574 <le_conn_complete_adv_timeout>:
{
 800b574:	b510      	push	{r4, lr}
		struct bt_le_ext_adv *adv = bt_adv_lookup_legacy();
 800b576:	f7ff fff9 	bl	800b56c <bt_adv_lookup_legacy>
		atomic_clear_bit(adv->flags, BT_ADV_ENABLED);
 800b57a:	3014      	adds	r0, #20
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800b57c:	f3bf 8f5b 	dmb	ish
 800b580:	e850 3f00 	ldrex	r3, [r0]
 800b584:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b588:	e840 3200 	strex	r2, r3, [r0]
 800b58c:	2a00      	cmp	r2, #0
 800b58e:	d1f7      	bne.n	800b580 <le_conn_complete_adv_timeout+0xc>
 800b590:	f3bf 8f5b 	dmb	ish
		conn = find_pending_connect(BT_HCI_ROLE_SLAVE, NULL);
 800b594:	2100      	movs	r1, #0
 800b596:	2001      	movs	r0, #1
 800b598:	f7fe fd82 	bl	800a0a0 <find_pending_connect>
		if (!conn) {
 800b59c:	4604      	mov	r4, r0
 800b59e:	b140      	cbz	r0, 800b5b2 <le_conn_complete_adv_timeout+0x3e>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
 800b5a0:	233c      	movs	r3, #60	; 0x3c
 800b5a2:	7303      	strb	r3, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
 800b5a4:	2100      	movs	r1, #0
 800b5a6:	f002 f909 	bl	800d7bc <bt_conn_set_state>
		bt_conn_unref(conn);
 800b5aa:	4620      	mov	r0, r4
 800b5ac:	f00d fae2 	bl	8018b74 <bt_conn_unref>
}
 800b5b0:	bd10      	pop	{r4, pc}
			BT_ERR("No pending slave connection");
 800b5b2:	f04f 0100 	mov.w	r1, #0
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	f363 0102 	bfi	r1, r3, #0, #3
 800b5bc:	f36f 01c5 	bfc	r1, #3, #3
 800b5c0:	4b05      	ldr	r3, [pc, #20]	; (800b5d8 <le_conn_complete_adv_timeout+0x64>)
 800b5c2:	4a06      	ldr	r2, [pc, #24]	; (800b5dc <le_conn_complete_adv_timeout+0x68>)
 800b5c4:	1a9b      	subs	r3, r3, r2
 800b5c6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b5ca:	f363 118f 	bfi	r1, r3, #6, #10
 800b5ce:	4804      	ldr	r0, [pc, #16]	; (800b5e0 <le_conn_complete_adv_timeout+0x6c>)
 800b5d0:	f7f8 ffbc 	bl	800454c <log_0>
			return;
 800b5d4:	e7ec      	b.n	800b5b0 <le_conn_complete_adv_timeout+0x3c>
 800b5d6:	bf00      	nop
 800b5d8:	0801d708 	.word	0x0801d708
 800b5dc:	0801d6d0 	.word	0x0801d6d0
 800b5e0:	080204d0 	.word	0x080204d0

0800b5e4 <bt_unpair>:
{
 800b5e4:	b510      	push	{r4, lr}
 800b5e6:	b084      	sub	sp, #16
 800b5e8:	f88d 0007 	strb.w	r0, [sp, #7]
	if (id >= CONFIG_BT_ID_MAX) {
 800b5ec:	b9e0      	cbnz	r0, 800b628 <bt_unpair+0x44>
 800b5ee:	460c      	mov	r4, r1
	if (IS_ENABLED(CONFIG_BT_SMP) &&
 800b5f0:	b149      	cbz	r1, 800b606 <bt_unpair+0x22>
	    (!addr || !bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	9302      	str	r3, [sp, #8]
 800b5f6:	f8cd 300b 	str.w	r3, [sp, #11]
	return memcmp(a, b, sizeof(*a));
 800b5fa:	2207      	movs	r2, #7
 800b5fc:	a902      	add	r1, sp, #8
 800b5fe:	4620      	mov	r0, r4
 800b600:	f00c fc24 	bl	8017e4c <memcmp>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
 800b604:	b948      	cbnz	r0, 800b61a <bt_unpair+0x36>
		bt_foreach_bond(id, unpair_remote, &id);
 800b606:	f10d 0207 	add.w	r2, sp, #7
 800b60a:	4909      	ldr	r1, [pc, #36]	; (800b630 <bt_unpair+0x4c>)
 800b60c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800b610:	f006 fcf2 	bl	8011ff8 <bt_foreach_bond>
		return 0;
 800b614:	2000      	movs	r0, #0
}
 800b616:	b004      	add	sp, #16
 800b618:	bd10      	pop	{r4, pc}
	unpair(id, addr);
 800b61a:	4621      	mov	r1, r4
 800b61c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800b620:	f7fe fd0c 	bl	800a03c <unpair>
	return 0;
 800b624:	2000      	movs	r0, #0
 800b626:	e7f6      	b.n	800b616 <bt_unpair+0x32>
		return -EINVAL;
 800b628:	f06f 0015 	mvn.w	r0, #21
 800b62c:	e7f3      	b.n	800b616 <bt_unpair+0x32>
 800b62e:	bf00      	nop
 800b630:	08018109 	.word	0x08018109

0800b634 <hci_encrypt_key_refresh_complete>:
{
 800b634:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
 800b636:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
 800b638:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
 800b63c:	4630      	mov	r0, r6
 800b63e:	f001 ffef 	bl	800d620 <bt_conn_lookup_handle>
	if (!conn) {
 800b642:	b170      	cbz	r0, 800b662 <hci_encrypt_key_refresh_complete+0x2e>
 800b644:	4604      	mov	r4, r0
	if (evt->status) {
 800b646:	782e      	ldrb	r6, [r5, #0]
 800b648:	b9f6      	cbnz	r6, 800b688 <hci_encrypt_key_refresh_complete+0x54>
	if (conn->type == BT_CONN_TYPE_LE) {
 800b64a:	7883      	ldrb	r3, [r0, #2]
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d027      	beq.n	800b6a0 <hci_encrypt_key_refresh_complete+0x6c>
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
 800b650:	2200      	movs	r2, #0
 800b652:	7829      	ldrb	r1, [r5, #0]
 800b654:	4620      	mov	r0, r4
 800b656:	f001 fe4f 	bl	800d2f8 <bt_conn_security_changed>
	bt_conn_unref(conn);
 800b65a:	4620      	mov	r0, r4
 800b65c:	f00d fa8a 	bl	8018b74 <bt_conn_unref>
}
 800b660:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to look up conn with handle %u", handle);
 800b662:	f04f 0200 	mov.w	r2, #0
 800b666:	2301      	movs	r3, #1
 800b668:	f363 0202 	bfi	r2, r3, #0, #3
 800b66c:	f36f 02c5 	bfc	r2, #3, #3
 800b670:	4b0e      	ldr	r3, [pc, #56]	; (800b6ac <hci_encrypt_key_refresh_complete+0x78>)
 800b672:	490f      	ldr	r1, [pc, #60]	; (800b6b0 <hci_encrypt_key_refresh_complete+0x7c>)
 800b674:	1a5b      	subs	r3, r3, r1
 800b676:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b67a:	f363 128f 	bfi	r2, r3, #6, #10
 800b67e:	4631      	mov	r1, r6
 800b680:	480c      	ldr	r0, [pc, #48]	; (800b6b4 <hci_encrypt_key_refresh_complete+0x80>)
 800b682:	f7f8 fdf3 	bl	800426c <log_1>
		return;
 800b686:	e7eb      	b.n	800b660 <hci_encrypt_key_refresh_complete+0x2c>
		bt_conn_security_changed(conn, evt->status,
 800b688:	4630      	mov	r0, r6
 800b68a:	f00c fe6f 	bl	801836c <bt_security_err_get>
 800b68e:	4602      	mov	r2, r0
 800b690:	4631      	mov	r1, r6
 800b692:	4620      	mov	r0, r4
 800b694:	f001 fe30 	bl	800d2f8 <bt_conn_security_changed>
		bt_conn_unref(conn);
 800b698:	4620      	mov	r0, r4
 800b69a:	f00d fa6b 	bl	8018b74 <bt_conn_unref>
		return;
 800b69e:	e7df      	b.n	800b660 <hci_encrypt_key_refresh_complete+0x2c>
		bt_smp_update_keys(conn);
 800b6a0:	f006 fb98 	bl	8011dd4 <bt_smp_update_keys>
		update_sec_level(conn);
 800b6a4:	4620      	mov	r0, r4
 800b6a6:	f7fe fc8b 	bl	8009fc0 <update_sec_level>
 800b6aa:	e7d1      	b.n	800b650 <hci_encrypt_key_refresh_complete+0x1c>
 800b6ac:	0801d708 	.word	0x0801d708
 800b6b0:	0801d6d0 	.word	0x0801d6d0
 800b6b4:	08020140 	.word	0x08020140

0800b6b8 <hci_encrypt_change>:
{
 800b6b8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
 800b6ba:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
 800b6bc:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	f001 ffad 	bl	800d620 <bt_conn_lookup_handle>
	if (!conn) {
 800b6c6:	b180      	cbz	r0, 800b6ea <hci_encrypt_change+0x32>
 800b6c8:	4604      	mov	r4, r0
	if (evt->status) {
 800b6ca:	782e      	ldrb	r6, [r5, #0]
 800b6cc:	bb06      	cbnz	r6, 800b710 <hci_encrypt_change+0x58>
	conn->encrypt = evt->encrypt;
 800b6ce:	78eb      	ldrb	r3, [r5, #3]
 800b6d0:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
 800b6d2:	7882      	ldrb	r2, [r0, #2]
 800b6d4:	2a01      	cmp	r2, #1
 800b6d6:	d027      	beq.n	800b728 <hci_encrypt_change+0x70>
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
 800b6d8:	2200      	movs	r2, #0
 800b6da:	7829      	ldrb	r1, [r5, #0]
 800b6dc:	4620      	mov	r0, r4
 800b6de:	f001 fe0b 	bl	800d2f8 <bt_conn_security_changed>
	bt_conn_unref(conn);
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	f00d fa46 	bl	8018b74 <bt_conn_unref>
}
 800b6e8:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to look up conn with handle %u", handle);
 800b6ea:	f04f 0200 	mov.w	r2, #0
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	f363 0202 	bfi	r2, r3, #0, #3
 800b6f4:	f36f 02c5 	bfc	r2, #3, #3
 800b6f8:	4b0f      	ldr	r3, [pc, #60]	; (800b738 <hci_encrypt_change+0x80>)
 800b6fa:	4910      	ldr	r1, [pc, #64]	; (800b73c <hci_encrypt_change+0x84>)
 800b6fc:	1a5b      	subs	r3, r3, r1
 800b6fe:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b702:	f363 128f 	bfi	r2, r3, #6, #10
 800b706:	4631      	mov	r1, r6
 800b708:	480d      	ldr	r0, [pc, #52]	; (800b740 <hci_encrypt_change+0x88>)
 800b70a:	f7f8 fdaf 	bl	800426c <log_1>
		return;
 800b70e:	e7eb      	b.n	800b6e8 <hci_encrypt_change+0x30>
		bt_conn_security_changed(conn, evt->status,
 800b710:	4630      	mov	r0, r6
 800b712:	f00c fe2b 	bl	801836c <bt_security_err_get>
 800b716:	4602      	mov	r2, r0
 800b718:	4631      	mov	r1, r6
 800b71a:	4620      	mov	r0, r4
 800b71c:	f001 fdec 	bl	800d2f8 <bt_conn_security_changed>
		bt_conn_unref(conn);
 800b720:	4620      	mov	r0, r4
 800b722:	f00d fa27 	bl	8018b74 <bt_conn_unref>
		return;
 800b726:	e7df      	b.n	800b6e8 <hci_encrypt_change+0x30>
		if (conn->encrypt) {
 800b728:	b91b      	cbnz	r3, 800b732 <hci_encrypt_change+0x7a>
		update_sec_level(conn);
 800b72a:	4620      	mov	r0, r4
 800b72c:	f7fe fc48 	bl	8009fc0 <update_sec_level>
 800b730:	e7d2      	b.n	800b6d8 <hci_encrypt_change+0x20>
			bt_smp_update_keys(conn);
 800b732:	f006 fb4f 	bl	8011dd4 <bt_smp_update_keys>
 800b736:	e7f8      	b.n	800b72a <hci_encrypt_change+0x72>
 800b738:	0801d708 	.word	0x0801d708
 800b73c:	0801d6d0 	.word	0x0801d6d0
 800b740:	08020140 	.word	0x08020140

0800b744 <bt_id_add>:
{
 800b744:	b538      	push	{r3, r4, r5, lr}
 800b746:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
 800b748:	4b61      	ldr	r3, [pc, #388]	; (800b8d0 <bt_id_add+0x18c>)
 800b74a:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800b74e:	b123      	cbz	r3, 800b75a <bt_id_add+0x16>
 800b750:	4a5f      	ldr	r2, [pc, #380]	; (800b8d0 <bt_id_add+0x18c>)
 800b752:	f892 20e1 	ldrb.w	r2, [r2, #225]	; 0xe1
 800b756:	4293      	cmp	r3, r2
 800b758:	d20a      	bcs.n	800b770 <bt_id_add+0x2c>
		bt_dev.le.rl_entries++;
 800b75a:	4a5d      	ldr	r2, [pc, #372]	; (800b8d0 <bt_id_add+0x18c>)
 800b75c:	f892 30e1 	ldrb.w	r3, [r2, #225]	; 0xe1
 800b760:	3301      	adds	r3, #1
 800b762:	f882 30e1 	strb.w	r3, [r2, #225]	; 0xe1
		keys->state |= BT_KEYS_ID_ADDED;
 800b766:	7a23      	ldrb	r3, [r4, #8]
 800b768:	f043 0304 	orr.w	r3, r3, #4
 800b76c:	7223      	strb	r3, [r4, #8]
}
 800b76e:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
 800b770:	2206      	movs	r2, #6
 800b772:	2100      	movs	r1, #0
 800b774:	4608      	mov	r0, r1
 800b776:	f001 ff8b 	bl	800d690 <bt_conn_lookup_state_le>
	if (conn) {
 800b77a:	4605      	mov	r5, r0
 800b77c:	b138      	cbz	r0, 800b78e <bt_id_add+0x4a>
		pending_id_keys_update_set(keys, BT_KEYS_ID_PENDING_ADD);
 800b77e:	2101      	movs	r1, #1
 800b780:	4620      	mov	r0, r4
 800b782:	f7fe fb91 	bl	8009ea8 <pending_id_keys_update_set>
		bt_conn_unref(conn);
 800b786:	4628      	mov	r0, r5
 800b788:	f00d f9f4 	bl	8018b74 <bt_conn_unref>
		return;
 800b78c:	e7ef      	b.n	800b76e <bt_id_add+0x2a>
	bt_adv_foreach(adv_pause_enabled, NULL);
 800b78e:	2100      	movs	r1, #0
 800b790:	4850      	ldr	r0, [pc, #320]	; (800b8d4 <bt_id_add+0x190>)
 800b792:	f7fe fa57 	bl	8009c44 <bt_adv_foreach>
	if (bt_dev.le.rl_entries) {
 800b796:	4b4e      	ldr	r3, [pc, #312]	; (800b8d0 <bt_id_add+0x18c>)
 800b798:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800b79c:	bb3b      	cbnz	r3, 800b7ee <bt_id_add+0xaa>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
 800b79e:	4b4c      	ldr	r3, [pc, #304]	; (800b8d0 <bt_id_add+0x18c>)
 800b7a0:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
 800b7a4:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d037      	beq.n	800b81c <bt_id_add+0xd8>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
 800b7ac:	1c65      	adds	r5, r4, #1
 800b7ae:	4622      	mov	r2, r4
 800b7b0:	f812 0b2a 	ldrb.w	r0, [r2], #42
 800b7b4:	4629      	mov	r1, r5
 800b7b6:	f00c fce9 	bl	801818c <hci_id_add>
	if (err) {
 800b7ba:	2800      	cmp	r0, #0
 800b7bc:	d163      	bne.n	800b886 <bt_id_add+0x142>
	bt_dev.le.rl_entries++;
 800b7be:	4a44      	ldr	r2, [pc, #272]	; (800b8d0 <bt_id_add+0x18c>)
 800b7c0:	f892 30e1 	ldrb.w	r3, [r2, #225]	; 0xe1
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	f882 30e1 	strb.w	r3, [r2, #225]	; 0xe1
	keys->state |= BT_KEYS_ID_ADDED;
 800b7ca:	7a23      	ldrb	r3, [r4, #8]
 800b7cc:	f043 0304 	orr.w	r3, r3, #4
 800b7d0:	7223      	strb	r3, [r4, #8]
	err = le_set_privacy_mode(&keys->addr, BT_HCI_LE_PRIVACY_MODE_DEVICE);
 800b7d2:	2101      	movs	r1, #1
 800b7d4:	4628      	mov	r0, r5
 800b7d6:	f7ff fdb3 	bl	800b340 <le_set_privacy_mode>
	if (err) {
 800b7da:	2800      	cmp	r0, #0
 800b7dc:	d165      	bne.n	800b8aa <bt_id_add+0x166>
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
 800b7de:	2001      	movs	r0, #1
 800b7e0:	f00c fd0a 	bl	80181f8 <addr_res_enable>
	bt_adv_foreach(adv_unpause_enabled, NULL);
 800b7e4:	2100      	movs	r1, #0
 800b7e6:	483c      	ldr	r0, [pc, #240]	; (800b8d8 <bt_id_add+0x194>)
 800b7e8:	f7fe fa2c 	bl	8009c44 <bt_adv_foreach>
 800b7ec:	e7bf      	b.n	800b76e <bt_id_add+0x2a>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
 800b7ee:	2000      	movs	r0, #0
 800b7f0:	f00c fd02 	bl	80181f8 <addr_res_enable>
		if (err) {
 800b7f4:	2800      	cmp	r0, #0
 800b7f6:	d0d2      	beq.n	800b79e <bt_id_add+0x5a>
			BT_WARN("Failed to disable address resolution");
 800b7f8:	f04f 0100 	mov.w	r1, #0
 800b7fc:	2302      	movs	r3, #2
 800b7fe:	f363 0102 	bfi	r1, r3, #0, #3
 800b802:	f36f 01c5 	bfc	r1, #3, #3
 800b806:	4b35      	ldr	r3, [pc, #212]	; (800b8dc <bt_id_add+0x198>)
 800b808:	4a35      	ldr	r2, [pc, #212]	; (800b8e0 <bt_id_add+0x19c>)
 800b80a:	1a9b      	subs	r3, r3, r2
 800b80c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b810:	f363 118f 	bfi	r1, r3, #6, #10
 800b814:	4833      	ldr	r0, [pc, #204]	; (800b8e4 <bt_id_add+0x1a0>)
 800b816:	f7f8 fe99 	bl	800454c <log_0>
			goto done;
 800b81a:	e7e0      	b.n	800b7de <bt_id_add+0x9a>
		BT_WARN("Resolving list size exceeded. Switching to host.");
 800b81c:	f04f 0100 	mov.w	r1, #0
 800b820:	2302      	movs	r3, #2
 800b822:	f363 0102 	bfi	r1, r3, #0, #3
 800b826:	f36f 01c5 	bfc	r1, #3, #3
 800b82a:	4b2c      	ldr	r3, [pc, #176]	; (800b8dc <bt_id_add+0x198>)
 800b82c:	4a2c      	ldr	r2, [pc, #176]	; (800b8e0 <bt_id_add+0x19c>)
 800b82e:	1a9b      	subs	r3, r3, r2
 800b830:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b834:	f363 118f 	bfi	r1, r3, #6, #10
 800b838:	482b      	ldr	r0, [pc, #172]	; (800b8e8 <bt_id_add+0x1a4>)
 800b83a:	f7f8 fe87 	bl	800454c <log_0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
 800b83e:	2200      	movs	r2, #0
 800b840:	4611      	mov	r1, r2
 800b842:	f242 0029 	movw	r0, #8233	; 0x2029
 800b846:	f7ff fa57 	bl	800acf8 <bt_hci_cmd_send_sync>
		if (err) {
 800b84a:	b950      	cbnz	r0, 800b862 <bt_id_add+0x11e>
		bt_dev.le.rl_entries++;
 800b84c:	4a20      	ldr	r2, [pc, #128]	; (800b8d0 <bt_id_add+0x18c>)
 800b84e:	f892 30e1 	ldrb.w	r3, [r2, #225]	; 0xe1
 800b852:	3301      	adds	r3, #1
 800b854:	f882 30e1 	strb.w	r3, [r2, #225]	; 0xe1
		keys->state |= BT_KEYS_ID_ADDED;
 800b858:	7a23      	ldrb	r3, [r4, #8]
 800b85a:	f043 0304 	orr.w	r3, r3, #4
 800b85e:	7223      	strb	r3, [r4, #8]
		goto done;
 800b860:	e7bd      	b.n	800b7de <bt_id_add+0x9a>
			BT_ERR("Failed to clear resolution list");
 800b862:	f04f 0100 	mov.w	r1, #0
 800b866:	2301      	movs	r3, #1
 800b868:	f363 0102 	bfi	r1, r3, #0, #3
 800b86c:	f36f 01c5 	bfc	r1, #3, #3
 800b870:	4b1a      	ldr	r3, [pc, #104]	; (800b8dc <bt_id_add+0x198>)
 800b872:	4a1b      	ldr	r2, [pc, #108]	; (800b8e0 <bt_id_add+0x19c>)
 800b874:	1a9b      	subs	r3, r3, r2
 800b876:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b87a:	f363 118f 	bfi	r1, r3, #6, #10
 800b87e:	481b      	ldr	r0, [pc, #108]	; (800b8ec <bt_id_add+0x1a8>)
 800b880:	f7f8 fe64 	bl	800454c <log_0>
			goto done;
 800b884:	e7ab      	b.n	800b7de <bt_id_add+0x9a>
		BT_ERR("Failed to add IRK to controller");
 800b886:	f04f 0100 	mov.w	r1, #0
 800b88a:	2301      	movs	r3, #1
 800b88c:	f363 0102 	bfi	r1, r3, #0, #3
 800b890:	f36f 01c5 	bfc	r1, #3, #3
 800b894:	4b11      	ldr	r3, [pc, #68]	; (800b8dc <bt_id_add+0x198>)
 800b896:	4a12      	ldr	r2, [pc, #72]	; (800b8e0 <bt_id_add+0x19c>)
 800b898:	1a9b      	subs	r3, r3, r2
 800b89a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b89e:	f363 118f 	bfi	r1, r3, #6, #10
 800b8a2:	4813      	ldr	r0, [pc, #76]	; (800b8f0 <bt_id_add+0x1ac>)
 800b8a4:	f7f8 fe52 	bl	800454c <log_0>
		goto done;
 800b8a8:	e799      	b.n	800b7de <bt_id_add+0x9a>
		BT_ERR("Failed to set privacy mode");
 800b8aa:	f04f 0100 	mov.w	r1, #0
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	f363 0102 	bfi	r1, r3, #0, #3
 800b8b4:	f36f 01c5 	bfc	r1, #3, #3
 800b8b8:	4b08      	ldr	r3, [pc, #32]	; (800b8dc <bt_id_add+0x198>)
 800b8ba:	4a09      	ldr	r2, [pc, #36]	; (800b8e0 <bt_id_add+0x19c>)
 800b8bc:	1a9b      	subs	r3, r3, r2
 800b8be:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b8c2:	f363 118f 	bfi	r1, r3, #6, #10
 800b8c6:	480b      	ldr	r0, [pc, #44]	; (800b8f4 <bt_id_add+0x1b0>)
 800b8c8:	f7f8 fe40 	bl	800454c <log_0>
		goto done;
 800b8cc:	e787      	b.n	800b7de <bt_id_add+0x9a>
 800b8ce:	bf00      	nop
 800b8d0:	20000000 	.word	0x20000000
 800b8d4:	08018157 	.word	0x08018157
 800b8d8:	08018127 	.word	0x08018127
 800b8dc:	0801d708 	.word	0x0801d708
 800b8e0:	0801d6d0 	.word	0x0801d6d0
 800b8e4:	080204ec 	.word	0x080204ec
 800b8e8:	08020514 	.word	0x08020514
 800b8ec:	08020548 	.word	0x08020548
 800b8f0:	08020568 	.word	0x08020568
 800b8f4:	08020588 	.word	0x08020588

0800b8f8 <bt_id_del>:
{
 800b8f8:	b538      	push	{r3, r4, r5, lr}
 800b8fa:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size ||
 800b8fc:	4b40      	ldr	r3, [pc, #256]	; (800ba00 <bt_id_del+0x108>)
 800b8fe:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800b902:	b12b      	cbz	r3, 800b910 <bt_id_del+0x18>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
 800b904:	4a3e      	ldr	r2, [pc, #248]	; (800ba00 <bt_id_del+0x108>)
 800b906:	f892 20e1 	ldrb.w	r2, [r2, #225]	; 0xe1
 800b90a:	3301      	adds	r3, #1
	if (!bt_dev.le.rl_size ||
 800b90c:	429a      	cmp	r2, r3
 800b90e:	dd0a      	ble.n	800b926 <bt_id_del+0x2e>
		bt_dev.le.rl_entries--;
 800b910:	4a3b      	ldr	r2, [pc, #236]	; (800ba00 <bt_id_del+0x108>)
 800b912:	f892 30e1 	ldrb.w	r3, [r2, #225]	; 0xe1
 800b916:	3b01      	subs	r3, #1
 800b918:	f882 30e1 	strb.w	r3, [r2, #225]	; 0xe1
		keys->state &= ~BT_KEYS_ID_ADDED;
 800b91c:	7a23      	ldrb	r3, [r4, #8]
 800b91e:	f023 0304 	bic.w	r3, r3, #4
 800b922:	7223      	strb	r3, [r4, #8]
}
 800b924:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
 800b926:	2206      	movs	r2, #6
 800b928:	2100      	movs	r1, #0
 800b92a:	4608      	mov	r0, r1
 800b92c:	f001 feb0 	bl	800d690 <bt_conn_lookup_state_le>
	if (conn) {
 800b930:	4605      	mov	r5, r0
 800b932:	b138      	cbz	r0, 800b944 <bt_id_del+0x4c>
		pending_id_keys_update_set(keys, BT_KEYS_ID_PENDING_DEL);
 800b934:	2102      	movs	r1, #2
 800b936:	4620      	mov	r0, r4
 800b938:	f7fe fab6 	bl	8009ea8 <pending_id_keys_update_set>
		bt_conn_unref(conn);
 800b93c:	4628      	mov	r0, r5
 800b93e:	f00d f919 	bl	8018b74 <bt_conn_unref>
		return;
 800b942:	e7ef      	b.n	800b924 <bt_id_del+0x2c>
	bt_adv_foreach(adv_pause_enabled, NULL);
 800b944:	2100      	movs	r1, #0
 800b946:	482f      	ldr	r0, [pc, #188]	; (800ba04 <bt_id_del+0x10c>)
 800b948:	f7fe f97c 	bl	8009c44 <bt_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
 800b94c:	2000      	movs	r0, #0
 800b94e:	f00c fc53 	bl	80181f8 <addr_res_enable>
	if (err) {
 800b952:	4601      	mov	r1, r0
 800b954:	b9f0      	cbnz	r0, 800b994 <bt_id_del+0x9c>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
 800b956:	4a2a      	ldr	r2, [pc, #168]	; (800ba00 <bt_id_del+0x108>)
 800b958:	f892 30e1 	ldrb.w	r3, [r2, #225]	; 0xe1
 800b95c:	f892 20e0 	ldrb.w	r2, [r2, #224]	; 0xe0
 800b960:	4293      	cmp	r3, r2
 800b962:	d829      	bhi.n	800b9b8 <bt_id_del+0xc0>
	err = hci_id_del(&keys->addr);
 800b964:	1c60      	adds	r0, r4, #1
 800b966:	f00c fc5e 	bl	8018226 <hci_id_del>
	if (err) {
 800b96a:	bb98      	cbnz	r0, 800b9d4 <bt_id_del+0xdc>
	bt_dev.le.rl_entries--;
 800b96c:	4a24      	ldr	r2, [pc, #144]	; (800ba00 <bt_id_del+0x108>)
 800b96e:	f892 30e1 	ldrb.w	r3, [r2, #225]	; 0xe1
 800b972:	3b01      	subs	r3, #1
 800b974:	f882 30e1 	strb.w	r3, [r2, #225]	; 0xe1
	keys->state &= ~BT_KEYS_ID_ADDED;
 800b978:	7a23      	ldrb	r3, [r4, #8]
 800b97a:	f023 0304 	bic.w	r3, r3, #4
 800b97e:	7223      	strb	r3, [r4, #8]
	if (bt_dev.le.rl_entries) {
 800b980:	4b1f      	ldr	r3, [pc, #124]	; (800ba00 <bt_id_del+0x108>)
 800b982:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800b986:	2b00      	cmp	r3, #0
 800b988:	d136      	bne.n	800b9f8 <bt_id_del+0x100>
	bt_adv_foreach(adv_unpause_enabled, NULL);
 800b98a:	2100      	movs	r1, #0
 800b98c:	481e      	ldr	r0, [pc, #120]	; (800ba08 <bt_id_del+0x110>)
 800b98e:	f7fe f959 	bl	8009c44 <bt_adv_foreach>
 800b992:	e7c7      	b.n	800b924 <bt_id_del+0x2c>
		BT_ERR("Disabling address resolution failed (err %d)", err);
 800b994:	f04f 0200 	mov.w	r2, #0
 800b998:	2301      	movs	r3, #1
 800b99a:	f363 0202 	bfi	r2, r3, #0, #3
 800b99e:	f36f 02c5 	bfc	r2, #3, #3
 800b9a2:	4b1a      	ldr	r3, [pc, #104]	; (800ba0c <bt_id_del+0x114>)
 800b9a4:	481a      	ldr	r0, [pc, #104]	; (800ba10 <bt_id_del+0x118>)
 800b9a6:	1a1b      	subs	r3, r3, r0
 800b9a8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b9ac:	f363 128f 	bfi	r2, r3, #6, #10
 800b9b0:	4818      	ldr	r0, [pc, #96]	; (800ba14 <bt_id_del+0x11c>)
 800b9b2:	f7f8 fc5b 	bl	800426c <log_1>
		goto done;
 800b9b6:	e7e3      	b.n	800b980 <bt_id_del+0x88>
		bt_dev.le.rl_entries--;
 800b9b8:	3b01      	subs	r3, #1
 800b9ba:	4a11      	ldr	r2, [pc, #68]	; (800ba00 <bt_id_del+0x108>)
 800b9bc:	f882 30e1 	strb.w	r3, [r2, #225]	; 0xe1
		keys->state &= ~BT_KEYS_ID_ADDED;
 800b9c0:	7a23      	ldrb	r3, [r4, #8]
 800b9c2:	f023 0304 	bic.w	r3, r3, #4
 800b9c6:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	4913      	ldr	r1, [pc, #76]	; (800ba18 <bt_id_del+0x120>)
 800b9cc:	2002      	movs	r0, #2
 800b9ce:	f006 fb37 	bl	8012040 <bt_keys_foreach>
		goto done;
 800b9d2:	e7d5      	b.n	800b980 <bt_id_del+0x88>
		BT_ERR("Failed to remove IRK from controller");
 800b9d4:	f04f 0100 	mov.w	r1, #0
 800b9d8:	2301      	movs	r3, #1
 800b9da:	f363 0102 	bfi	r1, r3, #0, #3
 800b9de:	f36f 01c5 	bfc	r1, #3, #3
 800b9e2:	4b0a      	ldr	r3, [pc, #40]	; (800ba0c <bt_id_del+0x114>)
 800b9e4:	4a0a      	ldr	r2, [pc, #40]	; (800ba10 <bt_id_del+0x118>)
 800b9e6:	1a9b      	subs	r3, r3, r2
 800b9e8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b9ec:	f363 118f 	bfi	r1, r3, #6, #10
 800b9f0:	480a      	ldr	r0, [pc, #40]	; (800ba1c <bt_id_del+0x124>)
 800b9f2:	f7f8 fdab 	bl	800454c <log_0>
		goto done;
 800b9f6:	e7c3      	b.n	800b980 <bt_id_del+0x88>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
 800b9f8:	2001      	movs	r0, #1
 800b9fa:	f00c fbfd 	bl	80181f8 <addr_res_enable>
 800b9fe:	e7c4      	b.n	800b98a <bt_id_del+0x92>
 800ba00:	20000000 	.word	0x20000000
 800ba04:	08018157 	.word	0x08018157
 800ba08:	08018127 	.word	0x08018127
 800ba0c:	0801d708 	.word	0x0801d708
 800ba10:	0801d6d0 	.word	0x0801d6d0
 800ba14:	080205a4 	.word	0x080205a4
 800ba18:	080181dd 	.word	0x080181dd
 800ba1c:	080205d4 	.word	0x080205d4

0800ba20 <id_create>:
{
 800ba20:	b530      	push	{r4, r5, lr}
 800ba22:	b085      	sub	sp, #20
 800ba24:	4604      	mov	r4, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
 800ba26:	460d      	mov	r5, r1
 800ba28:	b149      	cbz	r1, 800ba3e <id_create+0x1e>
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	9302      	str	r3, [sp, #8]
 800ba2e:	f8cd 300b 	str.w	r3, [sp, #11]
 800ba32:	2207      	movs	r2, #7
 800ba34:	a902      	add	r1, sp, #8
 800ba36:	4628      	mov	r0, r5
 800ba38:	f00c fa08 	bl	8017e4c <memcmp>
 800ba3c:	bb10      	cbnz	r0, 800ba84 <id_create+0x64>
			bt_addr_le_create_static(&new_addr);
 800ba3e:	4668      	mov	r0, sp
 800ba40:	f00c fcce 	bl	80183e0 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
 800ba44:	4668      	mov	r0, sp
 800ba46:	f7fe fa5f 	bl	8009f08 <id_find>
 800ba4a:	2800      	cmp	r0, #0
 800ba4c:	daf7      	bge.n	800ba3e <id_create+0x1e>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
 800ba4e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800ba52:	4b12      	ldr	r3, [pc, #72]	; (800ba9c <id_create+0x7c>)
 800ba54:	441c      	add	r4, r3
	memcpy(dst, src, sizeof(*dst));
 800ba56:	2207      	movs	r2, #7
 800ba58:	4669      	mov	r1, sp
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	f00c fa0e 	bl	8017e7c <memcpy>
		if (addr) {
 800ba60:	b125      	cbz	r5, 800ba6c <id_create+0x4c>
 800ba62:	2207      	movs	r2, #7
 800ba64:	4621      	mov	r1, r4
 800ba66:	4628      	mov	r0, r5
 800ba68:	f00c fa08 	bl	8017e7c <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800ba6c:	f3bf 8f5b 	dmb	ish
 800ba70:	4b0a      	ldr	r3, [pc, #40]	; (800ba9c <id_create+0x7c>)
 800ba72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba76:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
 800ba7a:	f013 0f02 	tst.w	r3, #2
 800ba7e:	d10a      	bne.n	800ba96 <id_create+0x76>
}
 800ba80:	b005      	add	sp, #20
 800ba82:	bd30      	pop	{r4, r5, pc}
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
 800ba84:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800ba88:	2207      	movs	r2, #7
 800ba8a:	4629      	mov	r1, r5
 800ba8c:	4803      	ldr	r0, [pc, #12]	; (800ba9c <id_create+0x7c>)
 800ba8e:	4420      	add	r0, r4
 800ba90:	f00c f9f4 	bl	8017e7c <memcpy>
}
 800ba94:	e7ea      	b.n	800ba6c <id_create+0x4c>
		bt_settings_save_id();
 800ba96:	f7fe f81b 	bl	8009ad0 <bt_settings_save_id>
}
 800ba9a:	e7f1      	b.n	800ba80 <id_create+0x60>
 800ba9c:	20000000 	.word	0x20000000

0800baa0 <bt_send>:
{
 800baa0:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
 800baa2:	4b03      	ldr	r3, [pc, #12]	; (800bab0 <bt_send+0x10>)
 800baa4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800baa8:	691b      	ldr	r3, [r3, #16]
 800baaa:	4798      	blx	r3
}
 800baac:	bd08      	pop	{r3, pc}
 800baae:	bf00      	nop
 800bab0:	20000000 	.word	0x20000000

0800bab4 <bt_hci_cmd_send>:
{
 800bab4:	b538      	push	{r3, r4, r5, lr}
 800bab6:	4604      	mov	r4, r0
	if (!buf) {
 800bab8:	460d      	mov	r5, r1
 800baba:	b151      	cbz	r1, 800bad2 <bt_hci_cmd_send+0x1e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
 800babc:	f640 4335 	movw	r3, #3125	; 0xc35
 800bac0:	429c      	cmp	r4, r3
 800bac2:	d00e      	beq.n	800bae2 <bt_hci_cmd_send+0x2e>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
 800bac4:	4629      	mov	r1, r5
 800bac6:	4815      	ldr	r0, [pc, #84]	; (800bb1c <bt_hci_cmd_send+0x68>)
 800bac8:	f00f fa6e 	bl	801afa8 <net_buf_put>
	return 0;
 800bacc:	2400      	movs	r4, #0
}
 800bace:	4620      	mov	r0, r4
 800bad0:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_hci_cmd_create(opcode, 0);
 800bad2:	f7ff f8d5 	bl	800ac80 <bt_hci_cmd_create>
		if (!buf) {
 800bad6:	4605      	mov	r5, r0
 800bad8:	2800      	cmp	r0, #0
 800bada:	d1ef      	bne.n	800babc <bt_hci_cmd_send+0x8>
			return -ENOBUFS;
 800badc:	f06f 0436 	mvn.w	r4, #54	; 0x36
 800bae0:	e7f5      	b.n	800bace <bt_hci_cmd_send+0x1a>
		err = bt_send(buf);
 800bae2:	4628      	mov	r0, r5
 800bae4:	f7ff ffdc 	bl	800baa0 <bt_send>
		if (err) {
 800bae8:	4604      	mov	r4, r0
 800baea:	2800      	cmp	r0, #0
 800baec:	d0ef      	beq.n	800bace <bt_hci_cmd_send+0x1a>
			BT_ERR("Unable to send to driver (err %d)", err);
 800baee:	f04f 0200 	mov.w	r2, #0
 800baf2:	2301      	movs	r3, #1
 800baf4:	f363 0202 	bfi	r2, r3, #0, #3
 800baf8:	f36f 02c5 	bfc	r2, #3, #3
 800bafc:	4b08      	ldr	r3, [pc, #32]	; (800bb20 <bt_hci_cmd_send+0x6c>)
 800bafe:	4909      	ldr	r1, [pc, #36]	; (800bb24 <bt_hci_cmd_send+0x70>)
 800bb00:	1a5b      	subs	r3, r3, r1
 800bb02:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800bb06:	f363 128f 	bfi	r2, r3, #6, #10
 800bb0a:	4601      	mov	r1, r0
 800bb0c:	4806      	ldr	r0, [pc, #24]	; (800bb28 <bt_hci_cmd_send+0x74>)
 800bb0e:	f7f8 fbad 	bl	800426c <log_1>
			net_buf_unref(buf);
 800bb12:	4628      	mov	r0, r5
 800bb14:	f00f fa55 	bl	801afc2 <net_buf_unref>
		return err;
 800bb18:	e7d9      	b.n	800bace <bt_hci_cmd_send+0x1a>
 800bb1a:	bf00      	nop
 800bb1c:	20000104 	.word	0x20000104
 800bb20:	0801d708 	.word	0x0801d708
 800bb24:	0801d6d0 	.word	0x0801d6d0
 800bb28:	080205fc 	.word	0x080205fc

0800bb2c <le_ltk_reply>:
{
 800bb2c:	b570      	push	{r4, r5, r6, lr}
 800bb2e:	4605      	mov	r5, r0
 800bb30:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
 800bb32:	2112      	movs	r1, #18
 800bb34:	f242 001a 	movw	r0, #8218	; 0x201a
 800bb38:	f7ff f8a2 	bl	800ac80 <bt_hci_cmd_create>
	if (!buf) {
 800bb3c:	b180      	cbz	r0, 800bb60 <le_ltk_reply+0x34>
 800bb3e:	4606      	mov	r6, r0
	cp = net_buf_add(buf, sizeof(*cp));
 800bb40:	2112      	movs	r1, #18
 800bb42:	3008      	adds	r0, #8
 800bb44:	f00f fa87 	bl	801b056 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
 800bb48:	f820 5b02 	strh.w	r5, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
 800bb4c:	2210      	movs	r2, #16
 800bb4e:	4621      	mov	r1, r4
 800bb50:	f00c f994 	bl	8017e7c <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
 800bb54:	4631      	mov	r1, r6
 800bb56:	f242 001a 	movw	r0, #8218	; 0x201a
 800bb5a:	f7ff ffab 	bl	800bab4 <bt_hci_cmd_send>
}
 800bb5e:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Out of command buffers");
 800bb60:	f04f 0100 	mov.w	r1, #0
 800bb64:	2301      	movs	r3, #1
 800bb66:	f363 0102 	bfi	r1, r3, #0, #3
 800bb6a:	f36f 01c5 	bfc	r1, #3, #3
 800bb6e:	4b05      	ldr	r3, [pc, #20]	; (800bb84 <le_ltk_reply+0x58>)
 800bb70:	4a05      	ldr	r2, [pc, #20]	; (800bb88 <le_ltk_reply+0x5c>)
 800bb72:	1a9b      	subs	r3, r3, r2
 800bb74:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800bb78:	f363 118f 	bfi	r1, r3, #6, #10
 800bb7c:	4803      	ldr	r0, [pc, #12]	; (800bb8c <le_ltk_reply+0x60>)
 800bb7e:	f7f8 fce5 	bl	800454c <log_0>
		return;
 800bb82:	e7ec      	b.n	800bb5e <le_ltk_reply+0x32>
 800bb84:	0801d708 	.word	0x0801d708
 800bb88:	0801d6d0 	.word	0x0801d6d0
 800bb8c:	08020620 	.word	0x08020620

0800bb90 <le_ltk_neg_reply>:
{
 800bb90:	b538      	push	{r3, r4, r5, lr}
 800bb92:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
 800bb94:	2102      	movs	r1, #2
 800bb96:	f242 001b 	movw	r0, #8219	; 0x201b
 800bb9a:	f7ff f871 	bl	800ac80 <bt_hci_cmd_create>
	if (!buf) {
 800bb9e:	b158      	cbz	r0, 800bbb8 <le_ltk_neg_reply+0x28>
 800bba0:	4605      	mov	r5, r0
	cp = net_buf_add(buf, sizeof(*cp));
 800bba2:	2102      	movs	r1, #2
 800bba4:	3008      	adds	r0, #8
 800bba6:	f00f fa56 	bl	801b056 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
 800bbaa:	8004      	strh	r4, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
 800bbac:	4629      	mov	r1, r5
 800bbae:	f242 001b 	movw	r0, #8219	; 0x201b
 800bbb2:	f7ff ff7f 	bl	800bab4 <bt_hci_cmd_send>
}
 800bbb6:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Out of command buffers");
 800bbb8:	f04f 0100 	mov.w	r1, #0
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	f363 0102 	bfi	r1, r3, #0, #3
 800bbc2:	f36f 01c5 	bfc	r1, #3, #3
 800bbc6:	4b05      	ldr	r3, [pc, #20]	; (800bbdc <le_ltk_neg_reply+0x4c>)
 800bbc8:	4a05      	ldr	r2, [pc, #20]	; (800bbe0 <le_ltk_neg_reply+0x50>)
 800bbca:	1a9b      	subs	r3, r3, r2
 800bbcc:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800bbd0:	f363 118f 	bfi	r1, r3, #6, #10
 800bbd4:	4803      	ldr	r0, [pc, #12]	; (800bbe4 <le_ltk_neg_reply+0x54>)
 800bbd6:	f7f8 fcb9 	bl	800454c <log_0>
		return;
 800bbda:	e7ec      	b.n	800bbb6 <le_ltk_neg_reply+0x26>
 800bbdc:	0801d708 	.word	0x0801d708
 800bbe0:	0801d6d0 	.word	0x0801d6d0
 800bbe4:	08020620 	.word	0x08020620

0800bbe8 <le_ltk_request>:
{
 800bbe8:	b570      	push	{r4, r5, r6, lr}
 800bbea:	b086      	sub	sp, #24
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
 800bbec:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
 800bbee:	8825      	ldrh	r5, [r4, #0]
	conn = bt_conn_lookup_handle(handle);
 800bbf0:	4628      	mov	r0, r5
 800bbf2:	f001 fd15 	bl	800d620 <bt_conn_lookup_handle>
	if (!conn) {
 800bbf6:	b1a0      	cbz	r0, 800bc22 <le_ltk_request+0x3a>
 800bbf8:	4606      	mov	r6, r0
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
 800bbfa:	f8d4 2002 	ldr.w	r2, [r4, #2]
 800bbfe:	f8d4 3006 	ldr.w	r3, [r4, #6]
 800bc02:	a902      	add	r1, sp, #8
 800bc04:	9101      	str	r1, [sp, #4]
 800bc06:	8961      	ldrh	r1, [r4, #10]
 800bc08:	9100      	str	r1, [sp, #0]
 800bc0a:	f00f f820 	bl	801ac4e <bt_smp_request_ltk>
 800bc0e:	b1d8      	cbz	r0, 800bc48 <le_ltk_request+0x60>
		le_ltk_reply(handle, ltk);
 800bc10:	a902      	add	r1, sp, #8
 800bc12:	4628      	mov	r0, r5
 800bc14:	f7ff ff8a 	bl	800bb2c <le_ltk_reply>
	bt_conn_unref(conn);
 800bc18:	4630      	mov	r0, r6
 800bc1a:	f00c ffab 	bl	8018b74 <bt_conn_unref>
}
 800bc1e:	b006      	add	sp, #24
 800bc20:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
 800bc22:	f04f 0200 	mov.w	r2, #0
 800bc26:	2301      	movs	r3, #1
 800bc28:	f363 0202 	bfi	r2, r3, #0, #3
 800bc2c:	f36f 02c5 	bfc	r2, #3, #3
 800bc30:	4b07      	ldr	r3, [pc, #28]	; (800bc50 <le_ltk_request+0x68>)
 800bc32:	4908      	ldr	r1, [pc, #32]	; (800bc54 <le_ltk_request+0x6c>)
 800bc34:	1a5b      	subs	r3, r3, r1
 800bc36:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800bc3a:	f363 128f 	bfi	r2, r3, #6, #10
 800bc3e:	4629      	mov	r1, r5
 800bc40:	4805      	ldr	r0, [pc, #20]	; (800bc58 <le_ltk_request+0x70>)
 800bc42:	f7f8 fb13 	bl	800426c <log_1>
		return;
 800bc46:	e7ea      	b.n	800bc1e <le_ltk_request+0x36>
		le_ltk_neg_reply(handle);
 800bc48:	4628      	mov	r0, r5
 800bc4a:	f7ff ffa1 	bl	800bb90 <le_ltk_neg_reply>
 800bc4e:	e7e3      	b.n	800bc18 <le_ltk_request+0x30>
 800bc50:	0801d708 	.word	0x0801d708
 800bc54:	0801d6d0 	.word	0x0801d6d0
 800bc58:	0802011c 	.word	0x0802011c

0800bc5c <le_conn_param_neg_reply>:
{
 800bc5c:	b570      	push	{r4, r5, r6, lr}
 800bc5e:	4605      	mov	r5, r0
 800bc60:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
 800bc62:	2103      	movs	r1, #3
 800bc64:	f242 0021 	movw	r0, #8225	; 0x2021
 800bc68:	f7ff f80a 	bl	800ac80 <bt_hci_cmd_create>
	if (!buf) {
 800bc6c:	b160      	cbz	r0, 800bc88 <le_conn_param_neg_reply+0x2c>
 800bc6e:	4606      	mov	r6, r0
	cp = net_buf_add(buf, sizeof(*cp));
 800bc70:	2103      	movs	r1, #3
 800bc72:	3008      	adds	r0, #8
 800bc74:	f00f f9ef 	bl	801b056 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
 800bc78:	8005      	strh	r5, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
 800bc7a:	7084      	strb	r4, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
 800bc7c:	4631      	mov	r1, r6
 800bc7e:	f242 0021 	movw	r0, #8225	; 0x2021
 800bc82:	f7ff ff17 	bl	800bab4 <bt_hci_cmd_send>
}
 800bc86:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to allocate buffer");
 800bc88:	f04f 0100 	mov.w	r1, #0
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	f363 0102 	bfi	r1, r3, #0, #3
 800bc92:	f36f 01c5 	bfc	r1, #3, #3
 800bc96:	4b05      	ldr	r3, [pc, #20]	; (800bcac <le_conn_param_neg_reply+0x50>)
 800bc98:	4a05      	ldr	r2, [pc, #20]	; (800bcb0 <le_conn_param_neg_reply+0x54>)
 800bc9a:	1a9b      	subs	r3, r3, r2
 800bc9c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800bca0:	f363 118f 	bfi	r1, r3, #6, #10
 800bca4:	4803      	ldr	r0, [pc, #12]	; (800bcb4 <le_conn_param_neg_reply+0x58>)
 800bca6:	f7f8 fc51 	bl	800454c <log_0>
		return;
 800bcaa:	e7ec      	b.n	800bc86 <le_conn_param_neg_reply+0x2a>
 800bcac:	0801d708 	.word	0x0801d708
 800bcb0:	0801d6d0 	.word	0x0801d6d0
 800bcb4:	08020638 	.word	0x08020638

0800bcb8 <le_conn_param_req>:
{
 800bcb8:	b530      	push	{r4, r5, lr}
 800bcba:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
 800bcbc:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
 800bcbe:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
 800bcc0:	885a      	ldrh	r2, [r3, #2]
 800bcc2:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
 800bcc6:	889a      	ldrh	r2, [r3, #4]
 800bcc8:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
 800bccc:	88da      	ldrh	r2, [r3, #6]
 800bcce:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
 800bcd2:	891b      	ldrh	r3, [r3, #8]
 800bcd4:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
 800bcd8:	4620      	mov	r0, r4
 800bcda:	f001 fca1 	bl	800d620 <bt_conn_lookup_handle>
	if (!conn) {
 800bcde:	b168      	cbz	r0, 800bcfc <le_conn_param_req+0x44>
 800bce0:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
 800bce2:	4669      	mov	r1, sp
 800bce4:	f001 fab6 	bl	800d254 <le_param_req>
 800bce8:	b9f8      	cbnz	r0, 800bd2a <le_conn_param_req+0x72>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
 800bcea:	211e      	movs	r1, #30
 800bcec:	4620      	mov	r0, r4
 800bcee:	f7ff ffb5 	bl	800bc5c <le_conn_param_neg_reply>
	bt_conn_unref(conn);
 800bcf2:	4628      	mov	r0, r5
 800bcf4:	f00c ff3e 	bl	8018b74 <bt_conn_unref>
}
 800bcf8:	b003      	add	sp, #12
 800bcfa:	bd30      	pop	{r4, r5, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
 800bcfc:	f04f 0200 	mov.w	r2, #0
 800bd00:	2301      	movs	r3, #1
 800bd02:	f363 0202 	bfi	r2, r3, #0, #3
 800bd06:	f36f 02c5 	bfc	r2, #3, #3
 800bd0a:	4b0a      	ldr	r3, [pc, #40]	; (800bd34 <le_conn_param_req+0x7c>)
 800bd0c:	490a      	ldr	r1, [pc, #40]	; (800bd38 <le_conn_param_req+0x80>)
 800bd0e:	1a5b      	subs	r3, r3, r1
 800bd10:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800bd14:	f363 128f 	bfi	r2, r3, #6, #10
 800bd18:	4621      	mov	r1, r4
 800bd1a:	4808      	ldr	r0, [pc, #32]	; (800bd3c <le_conn_param_req+0x84>)
 800bd1c:	f7f8 faa6 	bl	800426c <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
 800bd20:	2102      	movs	r1, #2
 800bd22:	4620      	mov	r0, r4
 800bd24:	f7ff ff9a 	bl	800bc5c <le_conn_param_neg_reply>
		return;
 800bd28:	e7e6      	b.n	800bcf8 <le_conn_param_req+0x40>
		le_conn_param_req_reply(handle, &param);
 800bd2a:	4669      	mov	r1, sp
 800bd2c:	4620      	mov	r0, r4
 800bd2e:	f00c fbbe 	bl	80184ae <le_conn_param_req_reply>
 800bd32:	e7de      	b.n	800bcf2 <le_conn_param_req+0x3a>
 800bd34:	0801d708 	.word	0x0801d708
 800bd38:	0801d6d0 	.word	0x0801d6d0
 800bd3c:	0802011c 	.word	0x0802011c

0800bd40 <conn_auto_initiate>:
	if (conn->state != BT_CONN_CONNECTED) {
 800bd40:	7b43      	ldrb	r3, [r0, #13]
 800bd42:	2b07      	cmp	r3, #7
 800bd44:	d000      	beq.n	800bd48 <conn_auto_initiate+0x8>
 800bd46:	4770      	bx	lr
{
 800bd48:	b510      	push	{r4, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	4604      	mov	r4, r0
 800bd4e:	f3bf 8f5b 	dmb	ish
 800bd52:	6843      	ldr	r3, [r0, #4]
 800bd54:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
 800bd58:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800bd5c:	d10b      	bne.n	800bd76 <conn_auto_initiate+0x36>
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
 800bd5e:	78c3      	ldrb	r3, [r0, #3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
 800bd60:	b12b      	cbz	r3, 800bd6e <conn_auto_initiate+0x2e>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
 800bd62:	4b21      	ldr	r3, [pc, #132]	; (800bde8 <conn_auto_initiate+0xa8>)
 800bd64:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
 800bd68:	f013 0f08 	tst.w	r3, #8
 800bd6c:	d003      	beq.n	800bd76 <conn_auto_initiate+0x36>
		err = hci_le_read_remote_features(conn);
 800bd6e:	4620      	mov	r0, r4
 800bd70:	f00c fbc2 	bl	80184f8 <hci_le_read_remote_features>
		if (!err) {
 800bd74:	b178      	cbz	r0, 800bd96 <conn_auto_initiate+0x56>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
 800bd76:	4b1c      	ldr	r3, [pc, #112]	; (800bde8 <conn_auto_initiate+0xa8>)
 800bd78:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
 800bd7c:	f013 0f20 	tst.w	r3, #32
 800bd80:	d006      	beq.n	800bd90 <conn_auto_initiate+0x50>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
 800bd82:	4b19      	ldr	r3, [pc, #100]	; (800bde8 <conn_auto_initiate+0xa8>)
 800bd84:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800bd88:	689b      	ldr	r3, [r3, #8]
 800bd8a:	f013 0f02 	tst.w	r3, #2
 800bd8e:	d104      	bne.n	800bd9a <conn_auto_initiate+0x5a>
	    conn->role == BT_CONN_ROLE_SLAVE) {
 800bd90:	78e3      	ldrb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
 800bd92:	2b01      	cmp	r3, #1
 800bd94:	d024      	beq.n	800bde0 <conn_auto_initiate+0xa0>
}
 800bd96:	b002      	add	sp, #8
 800bd98:	bd10      	pop	{r4, pc}
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
 800bd9a:	f10d 0106 	add.w	r1, sp, #6
 800bd9e:	a801      	add	r0, sp, #4
 800bda0:	f7ff f8d8 	bl	800af54 <hci_le_read_max_data_len>
			if (!err) {
 800bda4:	2800      	cmp	r0, #0
 800bda6:	d1f3      	bne.n	800bd90 <conn_auto_initiate+0x50>
				err = bt_le_set_data_len(conn,
 800bda8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bdac:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800bdb0:	4620      	mov	r0, r4
 800bdb2:	f00c fb3c 	bl	801842e <bt_le_set_data_len>
				if (err) {
 800bdb6:	4601      	mov	r1, r0
 800bdb8:	2800      	cmp	r0, #0
 800bdba:	d0e9      	beq.n	800bd90 <conn_auto_initiate+0x50>
					BT_ERR("Failed to set data len (%d)", err);
 800bdbc:	f04f 0200 	mov.w	r2, #0
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	f363 0202 	bfi	r2, r3, #0, #3
 800bdc6:	f36f 02c5 	bfc	r2, #3, #3
 800bdca:	4b08      	ldr	r3, [pc, #32]	; (800bdec <conn_auto_initiate+0xac>)
 800bdcc:	4808      	ldr	r0, [pc, #32]	; (800bdf0 <conn_auto_initiate+0xb0>)
 800bdce:	1a1b      	subs	r3, r3, r0
 800bdd0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800bdd4:	f363 128f 	bfi	r2, r3, #6, #10
 800bdd8:	4806      	ldr	r0, [pc, #24]	; (800bdf4 <conn_auto_initiate+0xb4>)
 800bdda:	f7f8 fa47 	bl	800426c <log_1>
 800bdde:	e7d7      	b.n	800bd90 <conn_auto_initiate+0x50>
		slave_update_conn_param(conn);
 800bde0:	4620      	mov	r0, r4
 800bde2:	f7fe fc37 	bl	800a654 <slave_update_conn_param>
 800bde6:	e7d6      	b.n	800bd96 <conn_auto_initiate+0x56>
 800bde8:	20000000 	.word	0x20000000
 800bdec:	0801d708 	.word	0x0801d708
 800bdf0:	0801d6d0 	.word	0x0801d6d0
 800bdf4:	08020654 	.word	0x08020654

0800bdf8 <le_remote_feat_complete>:
{
 800bdf8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
 800bdfa:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
 800bdfc:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
 800be00:	4630      	mov	r0, r6
 800be02:	f001 fc0d 	bl	800d620 <bt_conn_lookup_handle>
	if (!conn) {
 800be06:	b1b0      	cbz	r0, 800be36 <le_remote_feat_complete+0x3e>
 800be08:	4604      	mov	r4, r0
	if (!evt->status) {
 800be0a:	782b      	ldrb	r3, [r5, #0]
 800be0c:	b333      	cbz	r3, 800be5c <le_remote_feat_complete+0x64>
	atomic_set_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH);
 800be0e:	1d23      	adds	r3, r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800be10:	f3bf 8f5b 	dmb	ish
 800be14:	e853 2f00 	ldrex	r2, [r3]
 800be18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800be1c:	e843 2100 	strex	r1, r2, [r3]
 800be20:	2900      	cmp	r1, #0
 800be22:	d1f7      	bne.n	800be14 <le_remote_feat_complete+0x1c>
 800be24:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
 800be28:	4620      	mov	r0, r4
 800be2a:	f7ff ff89 	bl	800bd40 <conn_auto_initiate>
	bt_conn_unref(conn);
 800be2e:	4620      	mov	r0, r4
 800be30:	f00c fea0 	bl	8018b74 <bt_conn_unref>
}
 800be34:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
 800be36:	f04f 0200 	mov.w	r2, #0
 800be3a:	2301      	movs	r3, #1
 800be3c:	f363 0202 	bfi	r2, r3, #0, #3
 800be40:	f36f 02c5 	bfc	r2, #3, #3
 800be44:	4b08      	ldr	r3, [pc, #32]	; (800be68 <le_remote_feat_complete+0x70>)
 800be46:	4909      	ldr	r1, [pc, #36]	; (800be6c <le_remote_feat_complete+0x74>)
 800be48:	1a5b      	subs	r3, r3, r1
 800be4a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800be4e:	f363 128f 	bfi	r2, r3, #6, #10
 800be52:	4631      	mov	r1, r6
 800be54:	4806      	ldr	r0, [pc, #24]	; (800be70 <le_remote_feat_complete+0x78>)
 800be56:	f7f8 fa09 	bl	800426c <log_1>
		return;
 800be5a:	e7eb      	b.n	800be34 <le_remote_feat_complete+0x3c>
		memcpy(conn->le.features, evt->features,
 800be5c:	2208      	movs	r2, #8
 800be5e:	1ce9      	adds	r1, r5, #3
 800be60:	30ac      	adds	r0, #172	; 0xac
 800be62:	f00c f80b 	bl	8017e7c <memcpy>
 800be66:	e7d2      	b.n	800be0e <le_remote_feat_complete+0x16>
 800be68:	0801d708 	.word	0x0801d708
 800be6c:	0801d6d0 	.word	0x0801d6d0
 800be70:	0802011c 	.word	0x0802011c

0800be74 <report_completed_packet>:
{
 800be74:	b570      	push	{r4, r5, r6, lr}
 800be76:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
 800be78:	8ac5      	ldrh	r5, [r0, #22]
 *
 * @param buf Buffer to destroy.
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 800be7a:	7980      	ldrb	r0, [r0, #6]
 800be7c:	f006 faf8 	bl	8012470 <net_buf_pool_get>

	k_lifo_put(&pool->free, buf);
 800be80:	4621      	mov	r1, r4
 800be82:	f010 fdfa 	bl	801ca7a <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
 800be86:	4b38      	ldr	r3, [pc, #224]	; (800bf68 <report_completed_packet+0xf4>)
 800be88:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800be8c:	f013 0f20 	tst.w	r3, #32
 800be90:	d100      	bne.n	800be94 <report_completed_packet+0x20>
}
 800be92:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_lookup_index(acl(buf)->index);
 800be94:	7d60      	ldrb	r0, [r4, #21]
 800be96:	f001 ff43 	bl	800dd20 <bt_conn_lookup_index>
	if (!conn) {
 800be9a:	4606      	mov	r6, r0
 800be9c:	b350      	cbz	r0, 800bef4 <report_completed_packet+0x80>
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
 800be9e:	7b43      	ldrb	r3, [r0, #13]
 800bea0:	2b01      	cmp	r3, #1
 800bea2:	d005      	beq.n	800beb0 <report_completed_packet+0x3c>
 800bea4:	b25a      	sxtb	r2, r3
 800bea6:	b3c2      	cbz	r2, 800bf1a <report_completed_packet+0xa6>
 800bea8:	3b07      	subs	r3, #7
 800beaa:	b2db      	uxtb	r3, r3
 800beac:	2b01      	cmp	r3, #1
 800beae:	d834      	bhi.n	800bf1a <report_completed_packet+0xa6>
	bt_conn_unref(conn);
 800beb0:	4630      	mov	r0, r6
 800beb2:	f00c fe5f 	bl	8018b74 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
 800beb6:	2105      	movs	r1, #5
 800beb8:	f640 4035 	movw	r0, #3125	; 0xc35
 800bebc:	f7fe fee0 	bl	800ac80 <bt_hci_cmd_create>
	if (!buf) {
 800bec0:	4604      	mov	r4, r0
 800bec2:	2800      	cmp	r0, #0
 800bec4:	d03e      	beq.n	800bf44 <report_completed_packet+0xd0>
	cp = net_buf_add(buf, sizeof(*cp));
 800bec6:	f100 0608 	add.w	r6, r0, #8
 800beca:	2101      	movs	r1, #1
 800becc:	4630      	mov	r0, r6
 800bece:	f00f f8c2 	bl	801b056 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
 800bed2:	2301      	movs	r3, #1
 800bed4:	7003      	strb	r3, [r0, #0]
	hc = net_buf_add(buf, sizeof(*hc));
 800bed6:	2104      	movs	r1, #4
 800bed8:	4630      	mov	r0, r6
 800beda:	f00f f8bc 	bl	801b056 <net_buf_simple_add>
	hc->handle = sys_cpu_to_le16(handle);
 800bede:	8005      	strh	r5, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
 800bee0:	2301      	movs	r3, #1
 800bee2:	7083      	strb	r3, [r0, #2]
 800bee4:	2300      	movs	r3, #0
 800bee6:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
 800bee8:	4621      	mov	r1, r4
 800beea:	f640 4035 	movw	r0, #3125	; 0xc35
 800beee:	f7ff fde1 	bl	800bab4 <bt_hci_cmd_send>
 800bef2:	e7ce      	b.n	800be92 <report_completed_packet+0x1e>
		BT_WARN("Unable to look up conn with index 0x%02x",
 800bef4:	f04f 0200 	mov.w	r2, #0
 800bef8:	2302      	movs	r3, #2
 800befa:	f363 0202 	bfi	r2, r3, #0, #3
 800befe:	f36f 02c5 	bfc	r2, #3, #3
 800bf02:	4b1a      	ldr	r3, [pc, #104]	; (800bf6c <report_completed_packet+0xf8>)
 800bf04:	491a      	ldr	r1, [pc, #104]	; (800bf70 <report_completed_packet+0xfc>)
 800bf06:	1a5b      	subs	r3, r3, r1
 800bf08:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800bf0c:	f363 128f 	bfi	r2, r3, #6, #10
 800bf10:	7d61      	ldrb	r1, [r4, #21]
 800bf12:	4818      	ldr	r0, [pc, #96]	; (800bf74 <report_completed_packet+0x100>)
 800bf14:	f7f8 f9aa 	bl	800426c <log_1>
		return;
 800bf18:	e7bb      	b.n	800be92 <report_completed_packet+0x1e>
		BT_WARN("Not reporting packet for non-connected conn");
 800bf1a:	f04f 0100 	mov.w	r1, #0
 800bf1e:	2302      	movs	r3, #2
 800bf20:	f363 0102 	bfi	r1, r3, #0, #3
 800bf24:	f36f 01c5 	bfc	r1, #3, #3
 800bf28:	4b10      	ldr	r3, [pc, #64]	; (800bf6c <report_completed_packet+0xf8>)
 800bf2a:	4a11      	ldr	r2, [pc, #68]	; (800bf70 <report_completed_packet+0xfc>)
 800bf2c:	1a9b      	subs	r3, r3, r2
 800bf2e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800bf32:	f363 118f 	bfi	r1, r3, #6, #10
 800bf36:	4810      	ldr	r0, [pc, #64]	; (800bf78 <report_completed_packet+0x104>)
 800bf38:	f7f8 fb08 	bl	800454c <log_0>
		bt_conn_unref(conn);
 800bf3c:	4630      	mov	r0, r6
 800bf3e:	f00c fe19 	bl	8018b74 <bt_conn_unref>
		return;
 800bf42:	e7a6      	b.n	800be92 <report_completed_packet+0x1e>
		BT_ERR("Unable to allocate new HCI command");
 800bf44:	f04f 0100 	mov.w	r1, #0
 800bf48:	2301      	movs	r3, #1
 800bf4a:	f363 0102 	bfi	r1, r3, #0, #3
 800bf4e:	f36f 01c5 	bfc	r1, #3, #3
 800bf52:	4b06      	ldr	r3, [pc, #24]	; (800bf6c <report_completed_packet+0xf8>)
 800bf54:	4a06      	ldr	r2, [pc, #24]	; (800bf70 <report_completed_packet+0xfc>)
 800bf56:	1a9b      	subs	r3, r3, r2
 800bf58:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800bf5c:	f363 118f 	bfi	r1, r3, #6, #10
 800bf60:	4806      	ldr	r0, [pc, #24]	; (800bf7c <report_completed_packet+0x108>)
 800bf62:	f7f8 faf3 	bl	800454c <log_0>
		return;
 800bf66:	e794      	b.n	800be92 <report_completed_packet+0x1e>
 800bf68:	20000000 	.word	0x20000000
 800bf6c:	0801d708 	.word	0x0801d708
 800bf70:	0801d6d0 	.word	0x0801d6d0
 800bf74:	08020670 	.word	0x08020670
 800bf78:	0802069c 	.word	0x0802069c
 800bf7c:	080206c8 	.word	0x080206c8

0800bf80 <send_cmd>:
{
 800bf80:	b538      	push	{r3, r4, r5, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
 800bf82:	2200      	movs	r2, #0
 800bf84:	2300      	movs	r3, #0
 800bf86:	4838      	ldr	r0, [pc, #224]	; (800c068 <send_cmd+0xe8>)
 800bf88:	f00e ffef 	bl	801af6a <net_buf_get>
	BT_ASSERT(buf);
 800bf8c:	4604      	mov	r4, r0
 800bf8e:	b378      	cbz	r0, 800bff0 <send_cmd+0x70>
 800bf90:	4d36      	ldr	r5, [pc, #216]	; (800c06c <send_cmd+0xec>)
 800bf92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf9a:	f105 00e8 	add.w	r0, r5, #232	; 0xe8
 800bf9e:	f008 fa6f 	bl	8014480 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
 800bfa2:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 800bfa6:	b1bb      	cbz	r3, 800bfd8 <send_cmd+0x58>
		BT_ERR("Uncleared pending sent_cmd");
 800bfa8:	f04f 0100 	mov.w	r1, #0
 800bfac:	2301      	movs	r3, #1
 800bfae:	f363 0102 	bfi	r1, r3, #0, #3
 800bfb2:	f36f 01c5 	bfc	r1, #3, #3
 800bfb6:	4b2e      	ldr	r3, [pc, #184]	; (800c070 <send_cmd+0xf0>)
 800bfb8:	4a2e      	ldr	r2, [pc, #184]	; (800c074 <send_cmd+0xf4>)
 800bfba:	1a9b      	subs	r3, r3, r2
 800bfbc:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800bfc0:	f363 118f 	bfi	r1, r3, #6, #10
 800bfc4:	482c      	ldr	r0, [pc, #176]	; (800c078 <send_cmd+0xf8>)
 800bfc6:	f7f8 fac1 	bl	800454c <log_0>
		net_buf_unref(bt_dev.sent_cmd);
 800bfca:	f8d5 0100 	ldr.w	r0, [r5, #256]	; 0x100
 800bfce:	f00e fff8 	bl	801afc2 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
	bt_dev.sent_cmd = net_buf_ref(buf);
 800bfd8:	4620      	mov	r0, r4
 800bfda:	f00f f818 	bl	801b00e <net_buf_ref>
 800bfde:	4b23      	ldr	r3, [pc, #140]	; (800c06c <send_cmd+0xec>)
 800bfe0:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	err = bt_send(buf);
 800bfe4:	4620      	mov	r0, r4
 800bfe6:	f7ff fd5b 	bl	800baa0 <bt_send>
	if (err) {
 800bfea:	4601      	mov	r1, r0
 800bfec:	b970      	cbnz	r0, 800c00c <send_cmd+0x8c>
}
 800bfee:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
 800bff0:	f241 430b 	movw	r3, #5131	; 0x140b
 800bff4:	4a21      	ldr	r2, [pc, #132]	; (800c07c <send_cmd+0xfc>)
 800bff6:	4922      	ldr	r1, [pc, #136]	; (800c080 <send_cmd+0x100>)
 800bff8:	4822      	ldr	r0, [pc, #136]	; (800c084 <send_cmd+0x104>)
 800bffa:	f009 faf2 	bl	80155e2 <printk>
 800bffe:	4040      	eors	r0, r0
 800c000:	f380 8811 	msr	BASEPRI, r0
 800c004:	f04f 0003 	mov.w	r0, #3
 800c008:	df02      	svc	2
 800c00a:	e7c1      	b.n	800bf90 <send_cmd+0x10>
		BT_ERR("Unable to send to driver (err %d)", err);
 800c00c:	f04f 0200 	mov.w	r2, #0
 800c010:	2301      	movs	r3, #1
 800c012:	f363 0202 	bfi	r2, r3, #0, #3
 800c016:	f36f 02c5 	bfc	r2, #3, #3
 800c01a:	4b15      	ldr	r3, [pc, #84]	; (800c070 <send_cmd+0xf0>)
 800c01c:	4815      	ldr	r0, [pc, #84]	; (800c074 <send_cmd+0xf4>)
 800c01e:	1a1b      	subs	r3, r3, r0
 800c020:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800c024:	f363 128f 	bfi	r2, r3, #6, #10
 800c028:	4817      	ldr	r0, [pc, #92]	; (800c088 <send_cmd+0x108>)
 800c02a:	f7f8 f91f 	bl	800426c <log_1>
	z_impl_k_sem_give(sem);
 800c02e:	4d0f      	ldr	r5, [pc, #60]	; (800c06c <send_cmd+0xec>)
 800c030:	f105 00e8 	add.w	r0, r5, #232	; 0xe8
 800c034:	f008 f9fc 	bl	8014430 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
 800c038:	4620      	mov	r0, r4
 800c03a:	f006 fa21 	bl	8012480 <net_buf_id>
 800c03e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800c042:	4b12      	ldr	r3, [pc, #72]	; (800c08c <send_cmd+0x10c>)
 800c044:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c048:	4622      	mov	r2, r4
 800c04a:	211f      	movs	r1, #31
 800c04c:	8840      	ldrh	r0, [r0, #2]
 800c04e:	f7fe f97f 	bl	800a350 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
 800c052:	f8d5 0100 	ldr.w	r0, [r5, #256]	; 0x100
 800c056:	f00e ffb4 	bl	801afc2 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
 800c05a:	2300      	movs	r3, #0
 800c05c:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
		net_buf_unref(buf);
 800c060:	4620      	mov	r0, r4
 800c062:	f00e ffae 	bl	801afc2 <net_buf_unref>
 800c066:	e7c2      	b.n	800bfee <send_cmd+0x6e>
 800c068:	20000104 	.word	0x20000104
 800c06c:	20000000 	.word	0x20000000
 800c070:	0801d708 	.word	0x0801d708
 800c074:	0801d6d0 	.word	0x0801d6d0
 800c078:	080206ec 	.word	0x080206ec
 800c07c:	080201d4 	.word	0x080201d4
 800c080:	08021848 	.word	0x08021848
 800c084:	08020224 	.word	0x08020224
 800c088:	080205fc 	.word	0x080205fc
 800c08c:	20002024 	.word	0x20002024

0800c090 <process_events>:
{
 800c090:	b570      	push	{r4, r5, r6, lr}
 800c092:	4604      	mov	r4, r0
 800c094:	460d      	mov	r5, r1
	BT_DBG("count %d", count);
 800c096:	e014      	b.n	800c0c2 <process_events+0x32>
				send_cmd();
 800c098:	f7ff ff72 	bl	800bf80 <send_cmd>
 800c09c:	e00f      	b.n	800c0be <process_events+0x2e>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
 800c09e:	2302      	movs	r3, #2
 800c0a0:	f363 0602 	bfi	r6, r3, #0, #3
 800c0a4:	f36f 06c5 	bfc	r6, #3, #3
 800c0a8:	4b0f      	ldr	r3, [pc, #60]	; (800c0e8 <process_events+0x58>)
 800c0aa:	4a10      	ldr	r2, [pc, #64]	; (800c0ec <process_events+0x5c>)
 800c0ac:	1a9b      	subs	r3, r3, r2
 800c0ae:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800c0b2:	f363 168f 	bfi	r6, r3, #6, #10
 800c0b6:	4632      	mov	r2, r6
 800c0b8:	480d      	ldr	r0, [pc, #52]	; (800c0f0 <process_events+0x60>)
 800c0ba:	f7f8 f8d7 	bl	800426c <log_1>
	for (; count; ev++, count--) {
 800c0be:	3414      	adds	r4, #20
 800c0c0:	3d01      	subs	r5, #1
 800c0c2:	b185      	cbz	r5, 800c0e6 <process_events+0x56>
		switch (ev->state) {
 800c0c4:	68e1      	ldr	r1, [r4, #12]
 800c0c6:	f3c1 3104 	ubfx	r1, r1, #12, #5
 800c0ca:	2901      	cmp	r1, #1
 800c0cc:	d9f7      	bls.n	800c0be <process_events+0x2e>
 800c0ce:	2904      	cmp	r1, #4
 800c0d0:	d1e5      	bne.n	800c09e <process_events+0xe>
			if (ev->tag == BT_EVENT_CMD_TX) {
 800c0d2:	7b23      	ldrb	r3, [r4, #12]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d0df      	beq.n	800c098 <process_events+0x8>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
 800c0d8:	2b01      	cmp	r3, #1
 800c0da:	d1f0      	bne.n	800c0be <process_events+0x2e>
					conn = CONTAINER_OF(ev->fifo,
 800c0dc:	6920      	ldr	r0, [r4, #16]
					bt_conn_process_tx(conn);
 800c0de:	3834      	subs	r0, #52	; 0x34
 800c0e0:	f001 fdac 	bl	800dc3c <bt_conn_process_tx>
 800c0e4:	e7eb      	b.n	800c0be <process_events+0x2e>
}
 800c0e6:	bd70      	pop	{r4, r5, r6, pc}
 800c0e8:	0801d708 	.word	0x0801d708
 800c0ec:	0801d6d0 	.word	0x0801d6d0
 800c0f0:	08020708 	.word	0x08020708

0800c0f4 <hci_tx_thread>:
{
 800c0f4:	b538      	push	{r3, r4, r5, lr}
 800c0f6:	e005      	b.n	800c104 <hci_tx_thread+0x10>
		process_events(events, ev_count);
 800c0f8:	4621      	mov	r1, r4
 800c0fa:	4813      	ldr	r0, [pc, #76]	; (800c148 <hci_tx_thread+0x54>)
 800c0fc:	f7ff ffc8 	bl	800c090 <process_events>
	z_impl_k_yield();
 800c100:	f008 f934 	bl	801436c <z_impl_k_yield>
		events[0].state = K_POLL_STATE_NOT_READY;
 800c104:	4d10      	ldr	r5, [pc, #64]	; (800c148 <hci_tx_thread+0x54>)
 800c106:	68eb      	ldr	r3, [r5, #12]
 800c108:	f36f 3310 	bfc	r3, #12, #5
 800c10c:	60eb      	str	r3, [r5, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
 800c10e:	f105 0014 	add.w	r0, r5, #20
 800c112:	f001 fa63 	bl	800d5dc <bt_conn_prepare_events>
 800c116:	1c44      	adds	r4, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
 800c118:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c11c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c120:	4621      	mov	r1, r4
 800c122:	4628      	mov	r0, r5
 800c124:	f008 fcde 	bl	8014ae4 <z_impl_k_poll>
		BT_ASSERT(err == 0);
 800c128:	2800      	cmp	r0, #0
 800c12a:	d0e5      	beq.n	800c0f8 <hci_tx_thread+0x4>
 800c12c:	f241 436e 	movw	r3, #5230	; 0x146e
 800c130:	4a06      	ldr	r2, [pc, #24]	; (800c14c <hci_tx_thread+0x58>)
 800c132:	4907      	ldr	r1, [pc, #28]	; (800c150 <hci_tx_thread+0x5c>)
 800c134:	4807      	ldr	r0, [pc, #28]	; (800c154 <hci_tx_thread+0x60>)
 800c136:	f009 fa54 	bl	80155e2 <printk>
 800c13a:	4040      	eors	r0, r0
 800c13c:	f380 8811 	msr	BASEPRI, r0
 800c140:	f04f 0003 	mov.w	r0, #3
 800c144:	df02      	svc	2
 800c146:	e7d7      	b.n	800c0f8 <hci_tx_thread+0x4>
 800c148:	20000470 	.word	0x20000470
 800c14c:	080201d4 	.word	0x080201d4
 800c150:	080203c8 	.word	0x080203c8
 800c154:	08020224 	.word	0x08020224

0800c158 <hci_event_prio>:
{
 800c158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c15c:	b084      	sub	sp, #16
 800c15e:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
 800c160:	f100 0508 	add.w	r5, r0, #8
	state->offset = net_buf_simple_headroom(buf);
 800c164:	4628      	mov	r0, r5
 800c166:	f00e ffae 	bl	801b0c6 <net_buf_simple_headroom>
 800c16a:	f8ad 000c 	strh.w	r0, [sp, #12]
	state->len = buf->len;
 800c16e:	89a3      	ldrh	r3, [r4, #12]
 800c170:	f8ad 300e 	strh.w	r3, [sp, #14]
	BT_ASSERT(buf->len >= sizeof(*hdr));
 800c174:	2b01      	cmp	r3, #1
 800c176:	d915      	bls.n	800c1a4 <hci_event_prio+0x4c>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
 800c178:	2102      	movs	r1, #2
 800c17a:	4628      	mov	r0, r5
 800c17c:	f00e ff93 	bl	801b0a6 <net_buf_simple_pull_mem>
 800c180:	4605      	mov	r5, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
 800c182:	7803      	ldrb	r3, [r0, #0]
	switch (evt) {
 800c184:	3b05      	subs	r3, #5
 800c186:	2b15      	cmp	r3, #21
 800c188:	d81c      	bhi.n	800c1c4 <hci_event_prio+0x6c>
 800c18a:	e8df f003 	tbb	[pc, r3]
 800c18e:	1b19      	.short	0x1b19
 800c190:	1b1b1b1b 	.word	0x1b1b1b1b
 800c194:	3f1b1b1b 	.word	0x3f1b1b1b
 800c198:	1b1b1b3f 	.word	0x1b1b1b3f
 800c19c:	1b1b1b3f 	.word	0x1b1b1b3f
 800c1a0:	3f1b1b1b 	.word	0x3f1b1b1b
	BT_ASSERT(buf->len >= sizeof(*hdr));
 800c1a4:	f641 03c4 	movw	r3, #6340	; 0x18c4
 800c1a8:	4a3c      	ldr	r2, [pc, #240]	; (800c29c <hci_event_prio+0x144>)
 800c1aa:	493d      	ldr	r1, [pc, #244]	; (800c2a0 <hci_event_prio+0x148>)
 800c1ac:	483d      	ldr	r0, [pc, #244]	; (800c2a4 <hci_event_prio+0x14c>)
 800c1ae:	f009 fa18 	bl	80155e2 <printk>
 800c1b2:	4040      	eors	r0, r0
 800c1b4:	f380 8811 	msr	BASEPRI, r0
 800c1b8:	f04f 0003 	mov.w	r0, #3
 800c1bc:	df02      	svc	2
 800c1be:	e7db      	b.n	800c178 <hci_event_prio+0x20>
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
 800c1c0:	2603      	movs	r6, #3
 800c1c2:	e000      	b.n	800c1c6 <hci_event_prio+0x6e>
		return BT_HCI_EVT_FLAG_RECV;
 800c1c4:	2602      	movs	r6, #2
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
 800c1c6:	f016 0f01 	tst.w	r6, #1
 800c1ca:	d021      	beq.n	800c210 <hci_event_prio+0xb8>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
 800c1cc:	782d      	ldrb	r5, [r5, #0]
	for (i = 0; i < num_handlers; i++) {
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	2b04      	cmp	r3, #4
 800c1d2:	d840      	bhi.n	800c256 <hci_event_prio+0xfe>
		const struct event_handler *handler = &handlers[i];
 800c1d4:	4a34      	ldr	r2, [pc, #208]	; (800c2a8 <hci_event_prio+0x150>)
 800c1d6:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
		if (handler->event != event) {
 800c1da:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800c1de:	4295      	cmp	r5, r2
 800c1e0:	d124      	bne.n	800c22c <hci_event_prio+0xd4>
		if (buf->len < handler->min_len) {
 800c1e2:	89a1      	ldrh	r1, [r4, #12]
 800c1e4:	7843      	ldrb	r3, [r0, #1]
 800c1e6:	4299      	cmp	r1, r3
 800c1e8:	d322      	bcc.n	800c230 <hci_event_prio+0xd8>
		handler->handler(buf);
 800c1ea:	6843      	ldr	r3, [r0, #4]
 800c1ec:	4620      	mov	r0, r4
 800c1ee:	4798      	blx	r3
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
 800c1f0:	f016 0f02 	tst.w	r6, #2
 800c1f4:	d04e      	beq.n	800c294 <hci_event_prio+0x13c>
	buf->data = buf->__buf + state->offset;
 800c1f6:	6923      	ldr	r3, [r4, #16]
 800c1f8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800c1fc:	4413      	add	r3, r2
 800c1fe:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
 800c200:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800c204:	81a3      	strh	r3, [r4, #12]
}
 800c206:	b004      	add	sp, #16
 800c208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_EVT_FLAG_RECV_PRIO;
 800c20c:	2601      	movs	r6, #1
 800c20e:	e7da      	b.n	800c1c6 <hci_event_prio+0x6e>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
 800c210:	f641 03c8 	movw	r3, #6344	; 0x18c8
 800c214:	4a21      	ldr	r2, [pc, #132]	; (800c29c <hci_event_prio+0x144>)
 800c216:	4925      	ldr	r1, [pc, #148]	; (800c2ac <hci_event_prio+0x154>)
 800c218:	4822      	ldr	r0, [pc, #136]	; (800c2a4 <hci_event_prio+0x14c>)
 800c21a:	f009 f9e2 	bl	80155e2 <printk>
 800c21e:	4040      	eors	r0, r0
 800c220:	f380 8811 	msr	BASEPRI, r0
 800c224:	f04f 0003 	mov.w	r0, #3
 800c228:	df02      	svc	2
 800c22a:	e7cf      	b.n	800c1cc <hci_event_prio+0x74>
	for (i = 0; i < num_handlers; i++) {
 800c22c:	3301      	adds	r3, #1
 800c22e:	e7cf      	b.n	800c1d0 <hci_event_prio+0x78>
			BT_ERR("Too small (%u bytes) event 0x%02x",
 800c230:	f04f 0300 	mov.w	r3, #0
 800c234:	2201      	movs	r2, #1
 800c236:	f362 0302 	bfi	r3, r2, #0, #3
 800c23a:	f36f 03c5 	bfc	r3, #3, #3
 800c23e:	4a1c      	ldr	r2, [pc, #112]	; (800c2b0 <hci_event_prio+0x158>)
 800c240:	481c      	ldr	r0, [pc, #112]	; (800c2b4 <hci_event_prio+0x15c>)
 800c242:	1a12      	subs	r2, r2, r0
 800c244:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 800c248:	f362 138f 	bfi	r3, r2, #6, #10
 800c24c:	462a      	mov	r2, r5
 800c24e:	481a      	ldr	r0, [pc, #104]	; (800c2b8 <hci_event_prio+0x160>)
 800c250:	f7f8 f88c 	bl	800436c <log_2>
			return;
 800c254:	e7cc      	b.n	800c1f0 <hci_event_prio+0x98>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
 800c256:	f04f 0700 	mov.w	r7, #0
 800c25a:	2302      	movs	r3, #2
 800c25c:	f363 0702 	bfi	r7, r3, #0, #3
 800c260:	f36f 07c5 	bfc	r7, #3, #3
 800c264:	4b12      	ldr	r3, [pc, #72]	; (800c2b0 <hci_event_prio+0x158>)
 800c266:	4a13      	ldr	r2, [pc, #76]	; (800c2b4 <hci_event_prio+0x15c>)
 800c268:	1a9b      	subs	r3, r3, r2
 800c26a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800c26e:	f363 178f 	bfi	r7, r3, #6, #10
 800c272:	f8b4 800c 	ldrh.w	r8, [r4, #12]
 800c276:	4641      	mov	r1, r8
 800c278:	68a0      	ldr	r0, [r4, #8]
 800c27a:	f7fd faa1 	bl	80097c0 <bt_hex_real>
 800c27e:	f7f7 fe25 	bl	8003ecc <log_strdup>
 800c282:	4603      	mov	r3, r0
 800c284:	f8ad 7000 	strh.w	r7, [sp]
 800c288:	4642      	mov	r2, r8
 800c28a:	4629      	mov	r1, r5
 800c28c:	480b      	ldr	r0, [pc, #44]	; (800c2bc <hci_event_prio+0x164>)
 800c28e:	f7f7 ff21 	bl	80040d4 <log_3>
 800c292:	e7ad      	b.n	800c1f0 <hci_event_prio+0x98>
		net_buf_unref(buf);
 800c294:	4620      	mov	r0, r4
 800c296:	f00e fe94 	bl	801afc2 <net_buf_unref>
}
 800c29a:	e7b4      	b.n	800c206 <hci_event_prio+0xae>
 800c29c:	080201d4 	.word	0x080201d4
 800c2a0:	08020208 	.word	0x08020208
 800c2a4:	08020224 	.word	0x08020224
 800c2a8:	080209b0 	.word	0x080209b0
 800c2ac:	0802072c 	.word	0x0802072c
 800c2b0:	0801d708 	.word	0x0801d708
 800c2b4:	0801d6d0 	.word	0x0801d6d0
 800c2b8:	08020350 	.word	0x08020350
 800c2bc:	08020374 	.word	0x08020374

0800c2c0 <bt_recv>:
{
 800c2c0:	b510      	push	{r4, lr}
 800c2c2:	4604      	mov	r4, r0
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
 800c2c4:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
 800c2c6:	2901      	cmp	r1, #1
 800c2c8:	d005      	beq.n	800c2d6 <bt_recv+0x16>
 800c2ca:	2903      	cmp	r1, #3
 800c2cc:	d107      	bne.n	800c2de <bt_recv+0x1e>
		hci_acl(buf);
 800c2ce:	f7fe f921 	bl	800a514 <hci_acl>
		return 0;
 800c2d2:	2000      	movs	r0, #0
}
 800c2d4:	bd10      	pop	{r4, pc}
		hci_event(buf);
 800c2d6:	f7fe fc35 	bl	800ab44 <hci_event>
		return 0;
 800c2da:	2000      	movs	r0, #0
 800c2dc:	e7fa      	b.n	800c2d4 <bt_recv+0x14>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
 800c2de:	f04f 0200 	mov.w	r2, #0
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	f363 0202 	bfi	r2, r3, #0, #3
 800c2e8:	f36f 02c5 	bfc	r2, #3, #3
 800c2ec:	4b07      	ldr	r3, [pc, #28]	; (800c30c <bt_recv+0x4c>)
 800c2ee:	4808      	ldr	r0, [pc, #32]	; (800c310 <bt_recv+0x50>)
 800c2f0:	1a1b      	subs	r3, r3, r0
 800c2f2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800c2f6:	f363 128f 	bfi	r2, r3, #6, #10
 800c2fa:	4806      	ldr	r0, [pc, #24]	; (800c314 <bt_recv+0x54>)
 800c2fc:	f7f7 ffb6 	bl	800426c <log_1>
		net_buf_unref(buf);
 800c300:	4620      	mov	r0, r4
 800c302:	f00e fe5e 	bl	801afc2 <net_buf_unref>
		return -EINVAL;
 800c306:	f06f 0015 	mvn.w	r0, #21
 800c30a:	e7e3      	b.n	800c2d4 <bt_recv+0x14>
 800c30c:	0801d708 	.word	0x0801d708
 800c310:	0801d6d0 	.word	0x0801d6d0
 800c314:	08020748 	.word	0x08020748

0800c318 <bt_recv_prio>:
{
 800c318:	b510      	push	{r4, lr}
 800c31a:	4604      	mov	r4, r0
 800c31c:	7d03      	ldrb	r3, [r0, #20]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
 800c31e:	2b01      	cmp	r3, #1
 800c320:	d104      	bne.n	800c32c <bt_recv_prio+0x14>
	hci_event_prio(buf);
 800c322:	4620      	mov	r0, r4
 800c324:	f7ff ff18 	bl	800c158 <hci_event_prio>
}
 800c328:	2000      	movs	r0, #0
 800c32a:	bd10      	pop	{r4, pc}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
 800c32c:	f641 130b 	movw	r3, #6411	; 0x190b
 800c330:	4a05      	ldr	r2, [pc, #20]	; (800c348 <bt_recv_prio+0x30>)
 800c332:	4906      	ldr	r1, [pc, #24]	; (800c34c <bt_recv_prio+0x34>)
 800c334:	4806      	ldr	r0, [pc, #24]	; (800c350 <bt_recv_prio+0x38>)
 800c336:	f009 f954 	bl	80155e2 <printk>
 800c33a:	4040      	eors	r0, r0
 800c33c:	f380 8811 	msr	BASEPRI, r0
 800c340:	f04f 0003 	mov.w	r0, #3
 800c344:	df02      	svc	2
 800c346:	e7ec      	b.n	800c322 <bt_recv_prio+0xa>
 800c348:	080201d4 	.word	0x080201d4
 800c34c:	0802075c 	.word	0x0802075c
 800c350:	08020224 	.word	0x08020224

0800c354 <bt_hci_driver_register>:
	if (bt_dev.drv) {
 800c354:	4b0a      	ldr	r3, [pc, #40]	; (800c380 <bt_hci_driver_register+0x2c>)
 800c356:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800c35a:	b943      	cbnz	r3, 800c36e <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
 800c35c:	68c3      	ldr	r3, [r0, #12]
 800c35e:	b14b      	cbz	r3, 800c374 <bt_hci_driver_register+0x20>
 800c360:	6903      	ldr	r3, [r0, #16]
 800c362:	b153      	cbz	r3, 800c37a <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
 800c364:	4b06      	ldr	r3, [pc, #24]	; (800c380 <bt_hci_driver_register+0x2c>)
 800c366:	f8c3 011c 	str.w	r0, [r3, #284]	; 0x11c
	return 0;
 800c36a:	2000      	movs	r0, #0
 800c36c:	4770      	bx	lr
		return -EALREADY;
 800c36e:	f06f 0044 	mvn.w	r0, #68	; 0x44
 800c372:	4770      	bx	lr
		return -EINVAL;
 800c374:	f06f 0015 	mvn.w	r0, #21
 800c378:	4770      	bx	lr
 800c37a:	f06f 0015 	mvn.w	r0, #21
}
 800c37e:	4770      	bx	lr
 800c380:	20000000 	.word	0x20000000

0800c384 <bt_finalize_init>:
{
 800c384:	b508      	push	{r3, lr}
 800c386:	4b08      	ldr	r3, [pc, #32]	; (800c3a8 <bt_finalize_init+0x24>)
 800c388:	f3bf 8f5b 	dmb	ish
 800c38c:	e853 2f00 	ldrex	r2, [r3]
 800c390:	f042 0202 	orr.w	r2, r2, #2
 800c394:	e843 2100 	strex	r1, r2, [r3]
 800c398:	2900      	cmp	r1, #0
 800c39a:	d1f7      	bne.n	800c38c <bt_finalize_init+0x8>
 800c39c:	f3bf 8f5b 	dmb	ish
	bt_dev_show_info();
 800c3a0:	f7fe f9d2 	bl	800a748 <bt_dev_show_info>
}
 800c3a4:	bd08      	pop	{r3, pc}
 800c3a6:	bf00      	nop
 800c3a8:	20000094 	.word	0x20000094

0800c3ac <bt_init>:
{
 800c3ac:	b510      	push	{r4, lr}
	err = hci_init();
 800c3ae:	f7fe ff75 	bl	800b29c <hci_init>
	if (err) {
 800c3b2:	4604      	mov	r4, r0
 800c3b4:	b9a8      	cbnz	r0, 800c3e2 <bt_init+0x36>
		err = bt_conn_init();
 800c3b6:	f001 fccf 	bl	800dd58 <bt_conn_init>
		if (err) {
 800c3ba:	4604      	mov	r4, r0
 800c3bc:	b988      	cbnz	r0, 800c3e2 <bt_init+0x36>
		if (!bt_dev.id_count) {
 800c3be:	4b13      	ldr	r3, [pc, #76]	; (800c40c <bt_init+0x60>)
 800c3c0:	79db      	ldrb	r3, [r3, #7]
 800c3c2:	b183      	cbz	r3, 800c3e6 <bt_init+0x3a>
 800c3c4:	4b12      	ldr	r3, [pc, #72]	; (800c410 <bt_init+0x64>)
 800c3c6:	f3bf 8f5b 	dmb	ish
 800c3ca:	e853 2f00 	ldrex	r2, [r3]
 800c3ce:	f042 0204 	orr.w	r2, r2, #4
 800c3d2:	e843 2100 	strex	r1, r2, [r3]
 800c3d6:	2900      	cmp	r1, #0
 800c3d8:	d1f7      	bne.n	800c3ca <bt_init+0x1e>
 800c3da:	f3bf 8f5b 	dmb	ish
	bt_finalize_init();
 800c3de:	f7ff ffd1 	bl	800c384 <bt_finalize_init>
}
 800c3e2:	4620      	mov	r0, r4
 800c3e4:	bd10      	pop	{r4, pc}
			BT_INFO("No ID address. App must call settings_load()");
 800c3e6:	f04f 0100 	mov.w	r1, #0
 800c3ea:	2303      	movs	r3, #3
 800c3ec:	f363 0102 	bfi	r1, r3, #0, #3
 800c3f0:	f36f 01c5 	bfc	r1, #3, #3
 800c3f4:	4b07      	ldr	r3, [pc, #28]	; (800c414 <bt_init+0x68>)
 800c3f6:	4a08      	ldr	r2, [pc, #32]	; (800c418 <bt_init+0x6c>)
 800c3f8:	1a9b      	subs	r3, r3, r2
 800c3fa:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800c3fe:	f363 118f 	bfi	r1, r3, #6, #10
 800c402:	4806      	ldr	r0, [pc, #24]	; (800c41c <bt_init+0x70>)
 800c404:	f7f8 f8a2 	bl	800454c <log_0>
			return 0;
 800c408:	e7eb      	b.n	800c3e2 <bt_init+0x36>
 800c40a:	bf00      	nop
 800c40c:	20000000 	.word	0x20000000
 800c410:	20000094 	.word	0x20000094
 800c414:	0801d708 	.word	0x0801d708
 800c418:	0801d6d0 	.word	0x0801d6d0
 800c41c:	08020780 	.word	0x08020780

0800c420 <init_work>:
{
 800c420:	b508      	push	{r3, lr}
	err = bt_init();
 800c422:	f7ff ffc3 	bl	800c3ac <bt_init>
	if (ready_cb) {
 800c426:	4b02      	ldr	r3, [pc, #8]	; (800c430 <init_work+0x10>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	b103      	cbz	r3, 800c42e <init_work+0xe>
		ready_cb(err);
 800c42c:	4798      	blx	r3
}
 800c42e:	bd08      	pop	{r3, pc}
 800c430:	20002084 	.word	0x20002084

0800c434 <bt_enable>:
{
 800c434:	b530      	push	{r4, r5, lr}
 800c436:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.drv) {
 800c438:	4b42      	ldr	r3, [pc, #264]	; (800c544 <bt_enable+0x110>)
 800c43a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d04b      	beq.n	800c4da <bt_enable+0xa6>
 800c442:	4605      	mov	r5, r0
 800c444:	4b40      	ldr	r3, [pc, #256]	; (800c548 <bt_enable+0x114>)
 800c446:	f3bf 8f5b 	dmb	ish
 800c44a:	e853 2f00 	ldrex	r2, [r3]
 800c44e:	f042 0101 	orr.w	r1, r2, #1
 800c452:	e843 1000 	strex	r0, r1, [r3]
 800c456:	2800      	cmp	r0, #0
 800c458:	d1f7      	bne.n	800c44a <bt_enable+0x16>
 800c45a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
 800c45e:	f012 0f01 	tst.w	r2, #1
 800c462:	d16b      	bne.n	800c53c <bt_enable+0x108>
		err = bt_settings_init();
 800c464:	f7fd fb9c 	bl	8009ba0 <bt_settings_init>
		if (err) {
 800c468:	4604      	mov	r4, r0
 800c46a:	2800      	cmp	r0, #0
 800c46c:	d132      	bne.n	800c4d4 <bt_enable+0xa0>
	ready_cb = cb;
 800c46e:	4b37      	ldr	r3, [pc, #220]	; (800c54c <bt_enable+0x118>)
 800c470:	601d      	str	r5, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 800c472:	4c37      	ldr	r4, [pc, #220]	; (800c550 <bt_enable+0x11c>)
 800c474:	2200      	movs	r2, #0
 800c476:	2300      	movs	r3, #0
 800c478:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c47c:	2300      	movs	r3, #0
 800c47e:	9304      	str	r3, [sp, #16]
 800c480:	f06f 0208 	mvn.w	r2, #8
 800c484:	9203      	str	r2, [sp, #12]
 800c486:	9302      	str	r3, [sp, #8]
 800c488:	9301      	str	r3, [sp, #4]
 800c48a:	9300      	str	r3, [sp, #0]
 800c48c:	4b31      	ldr	r3, [pc, #196]	; (800c554 <bt_enable+0x120>)
 800c48e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c492:	4931      	ldr	r1, [pc, #196]	; (800c558 <bt_enable+0x124>)
 800c494:	4620      	mov	r0, r4
 800c496:	f010 fcb8 	bl	801ce0a <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
 800c49a:	4930      	ldr	r1, [pc, #192]	; (800c55c <bt_enable+0x128>)
 800c49c:	4620      	mov	r0, r4
 800c49e:	f010 fca3 	bl	801cde8 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
 800c4a2:	4b28      	ldr	r3, [pc, #160]	; (800c544 <bt_enable+0x110>)
 800c4a4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800c4a8:	68db      	ldr	r3, [r3, #12]
 800c4aa:	4798      	blx	r3
	if (err) {
 800c4ac:	4604      	mov	r4, r0
 800c4ae:	bb40      	cbnz	r0, 800c502 <bt_enable+0xce>
	if (!cb) {
 800c4b0:	2d00      	cmp	r5, #0
 800c4b2:	d039      	beq.n	800c528 <bt_enable+0xf4>
 800c4b4:	4b2a      	ldr	r3, [pc, #168]	; (800c560 <bt_enable+0x12c>)
 800c4b6:	f3bf 8f5b 	dmb	ish
 800c4ba:	e853 2f00 	ldrex	r2, [r3]
 800c4be:	f042 0101 	orr.w	r1, r2, #1
 800c4c2:	e843 1000 	strex	r0, r1, [r3]
 800c4c6:	2800      	cmp	r0, #0
 800c4c8:	d1f7      	bne.n	800c4ba <bt_enable+0x86>
 800c4ca:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 800c4ce:	f012 0f01 	tst.w	r2, #1
 800c4d2:	d02d      	beq.n	800c530 <bt_enable+0xfc>
}
 800c4d4:	4620      	mov	r0, r4
 800c4d6:	b009      	add	sp, #36	; 0x24
 800c4d8:	bd30      	pop	{r4, r5, pc}
		BT_ERR("No HCI driver registered");
 800c4da:	f04f 0100 	mov.w	r1, #0
 800c4de:	2301      	movs	r3, #1
 800c4e0:	f363 0102 	bfi	r1, r3, #0, #3
 800c4e4:	f36f 01c5 	bfc	r1, #3, #3
 800c4e8:	4b1e      	ldr	r3, [pc, #120]	; (800c564 <bt_enable+0x130>)
 800c4ea:	4a1f      	ldr	r2, [pc, #124]	; (800c568 <bt_enable+0x134>)
 800c4ec:	1a9b      	subs	r3, r3, r2
 800c4ee:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800c4f2:	f363 118f 	bfi	r1, r3, #6, #10
 800c4f6:	481d      	ldr	r0, [pc, #116]	; (800c56c <bt_enable+0x138>)
 800c4f8:	f7f8 f828 	bl	800454c <log_0>
		return -ENODEV;
 800c4fc:	f06f 0412 	mvn.w	r4, #18
 800c500:	e7e8      	b.n	800c4d4 <bt_enable+0xa0>
		BT_ERR("HCI driver open failed (%d)", err);
 800c502:	f04f 0200 	mov.w	r2, #0
 800c506:	2301      	movs	r3, #1
 800c508:	f363 0202 	bfi	r2, r3, #0, #3
 800c50c:	f36f 02c5 	bfc	r2, #3, #3
 800c510:	4b14      	ldr	r3, [pc, #80]	; (800c564 <bt_enable+0x130>)
 800c512:	4915      	ldr	r1, [pc, #84]	; (800c568 <bt_enable+0x134>)
 800c514:	1a5b      	subs	r3, r3, r1
 800c516:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800c51a:	f363 128f 	bfi	r2, r3, #6, #10
 800c51e:	4601      	mov	r1, r0
 800c520:	4813      	ldr	r0, [pc, #76]	; (800c570 <bt_enable+0x13c>)
 800c522:	f7f7 fea3 	bl	800426c <log_1>
		return err;
 800c526:	e7d5      	b.n	800c4d4 <bt_enable+0xa0>
		return bt_init();
 800c528:	f7ff ff40 	bl	800c3ac <bt_init>
 800c52c:	4604      	mov	r4, r0
 800c52e:	e7d1      	b.n	800c4d4 <bt_enable+0xa0>
		k_queue_append(&work_q->queue, work);
 800c530:	f1a3 0108 	sub.w	r1, r3, #8
 800c534:	480f      	ldr	r0, [pc, #60]	; (800c574 <bt_enable+0x140>)
 800c536:	f010 fa99 	bl	801ca6c <k_queue_append>
}
 800c53a:	e7cb      	b.n	800c4d4 <bt_enable+0xa0>
		return -EALREADY;
 800c53c:	f06f 0444 	mvn.w	r4, #68	; 0x44
 800c540:	e7c8      	b.n	800c4d4 <bt_enable+0xa0>
 800c542:	bf00      	nop
 800c544:	20000000 	.word	0x20000000
 800c548:	20000094 	.word	0x20000094
 800c54c:	20002084 	.word	0x20002084
 800c550:	20000d18 	.word	0x20000d18
 800c554:	0800c0f5 	.word	0x0800c0f5
 800c558:	20004668 	.word	0x20004668
 800c55c:	080207cc 	.word	0x080207cc
 800c560:	20000090 	.word	0x20000090
 800c564:	0801d708 	.word	0x0801d708
 800c568:	0801d6d0 	.word	0x0801d6d0
 800c56c:	080207b0 	.word	0x080207b0
 800c570:	080207d4 	.word	0x080207d4
 800c574:	20001408 	.word	0x20001408

0800c578 <bt_get_name>:
}
 800c578:	4800      	ldr	r0, [pc, #0]	; (800c57c <bt_get_name+0x4>)
 800c57a:	4770      	bx	lr
 800c57c:	080207f0 	.word	0x080207f0

0800c580 <bt_id_create>:
{
 800c580:	b570      	push	{r4, r5, r6, lr}
 800c582:	b082      	sub	sp, #8
 800c584:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
 800c586:	4605      	mov	r5, r0
 800c588:	b348      	cbz	r0, 800c5de <bt_id_create+0x5e>
 800c58a:	2300      	movs	r3, #0
 800c58c:	9300      	str	r3, [sp, #0]
 800c58e:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
 800c592:	2207      	movs	r2, #7
 800c594:	4669      	mov	r1, sp
 800c596:	f00b fc59 	bl	8017e4c <memcmp>
 800c59a:	b300      	cbz	r0, 800c5de <bt_id_create+0x5e>
		if (addr->type != BT_ADDR_LE_RANDOM ||
 800c59c:	782b      	ldrb	r3, [r5, #0]
 800c59e:	2b01      	cmp	r3, #1
 800c5a0:	d104      	bne.n	800c5ac <bt_id_create+0x2c>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
 800c5a2:	79ab      	ldrb	r3, [r5, #6]
		if (addr->type != BT_ADDR_LE_RANDOM ||
 800c5a4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c5a8:	2bc0      	cmp	r3, #192	; 0xc0
 800c5aa:	d013      	beq.n	800c5d4 <bt_id_create+0x54>
			BT_ERR("Only static random identity address supported");
 800c5ac:	f04f 0100 	mov.w	r1, #0
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	f363 0102 	bfi	r1, r3, #0, #3
 800c5b6:	f36f 01c5 	bfc	r1, #3, #3
 800c5ba:	4b15      	ldr	r3, [pc, #84]	; (800c610 <bt_id_create+0x90>)
 800c5bc:	4a15      	ldr	r2, [pc, #84]	; (800c614 <bt_id_create+0x94>)
 800c5be:	1a9b      	subs	r3, r3, r2
 800c5c0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800c5c4:	f363 118f 	bfi	r1, r3, #6, #10
 800c5c8:	4813      	ldr	r0, [pc, #76]	; (800c618 <bt_id_create+0x98>)
 800c5ca:	f7f7 ffbf 	bl	800454c <log_0>
			return -EINVAL;
 800c5ce:	f06f 0615 	mvn.w	r6, #21
 800c5d2:	e010      	b.n	800c5f6 <bt_id_create+0x76>
		if (id_find(addr) >= 0) {
 800c5d4:	4628      	mov	r0, r5
 800c5d6:	f7fd fc97 	bl	8009f08 <id_find>
 800c5da:	2800      	cmp	r0, #0
 800c5dc:	da0e      	bge.n	800c5fc <bt_id_create+0x7c>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
 800c5de:	b984      	cbnz	r4, 800c602 <bt_id_create+0x82>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
 800c5e0:	4b0e      	ldr	r3, [pc, #56]	; (800c61c <bt_id_create+0x9c>)
 800c5e2:	79d8      	ldrb	r0, [r3, #7]
 800c5e4:	2801      	cmp	r0, #1
 800c5e6:	d00f      	beq.n	800c608 <bt_id_create+0x88>
	new_id = bt_dev.id_count++;
 800c5e8:	1c42      	adds	r2, r0, #1
 800c5ea:	71da      	strb	r2, [r3, #7]
 800c5ec:	4606      	mov	r6, r0
	id_create(new_id, addr, irk);
 800c5ee:	4622      	mov	r2, r4
 800c5f0:	4629      	mov	r1, r5
 800c5f2:	f7ff fa15 	bl	800ba20 <id_create>
}
 800c5f6:	4630      	mov	r0, r6
 800c5f8:	b002      	add	sp, #8
 800c5fa:	bd70      	pop	{r4, r5, r6, pc}
			return -EALREADY;
 800c5fc:	f06f 0644 	mvn.w	r6, #68	; 0x44
 800c600:	e7f9      	b.n	800c5f6 <bt_id_create+0x76>
		return -EINVAL;
 800c602:	f06f 0615 	mvn.w	r6, #21
 800c606:	e7f6      	b.n	800c5f6 <bt_id_create+0x76>
		return -ENOMEM;
 800c608:	f06f 060b 	mvn.w	r6, #11
 800c60c:	e7f3      	b.n	800c5f6 <bt_id_create+0x76>
 800c60e:	bf00      	nop
 800c610:	0801d708 	.word	0x0801d708
 800c614:	0801d6d0 	.word	0x0801d6d0
 800c618:	080207fc 	.word	0x080207fc
 800c61c:	20000000 	.word	0x20000000

0800c620 <bt_setup_public_id_addr>:
{
 800c620:	b500      	push	{lr}
 800c622:	b083      	sub	sp, #12
	bt_dev.id_count = bt_read_public_addr(&addr);
 800c624:	4668      	mov	r0, sp
 800c626:	f7fe fecd 	bl	800b3c4 <bt_read_public_addr>
 800c62a:	4b06      	ldr	r3, [pc, #24]	; (800c644 <bt_setup_public_id_addr+0x24>)
 800c62c:	71d8      	strb	r0, [r3, #7]
	if (!bt_dev.id_count) {
 800c62e:	b910      	cbnz	r0, 800c636 <bt_setup_public_id_addr+0x16>
}
 800c630:	b003      	add	sp, #12
 800c632:	f85d fb04 	ldr.w	pc, [sp], #4
	id_create(BT_ID_DEFAULT, &addr, irk);
 800c636:	2200      	movs	r2, #0
 800c638:	4669      	mov	r1, sp
 800c63a:	4610      	mov	r0, r2
 800c63c:	f7ff f9f0 	bl	800ba20 <id_create>
 800c640:	e7f6      	b.n	800c630 <bt_setup_public_id_addr+0x10>
 800c642:	bf00      	nop
 800c644:	20000000 	.word	0x20000000

0800c648 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
 800c648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c64c:	b08d      	sub	sp, #52	; 0x34
 800c64e:	469a      	mov	sl, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
 800c650:	2300      	movs	r3, #0
 800c652:	9305      	str	r3, [sp, #20]
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
 800c654:	690f      	ldr	r7, [r1, #16]
 800c656:	1afe      	subs	r6, r7, r3
 800c658:	bf18      	it	ne
 800c65a:	2601      	movne	r6, #1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800c65c:	f3bf 8f5b 	dmb	ish
 800c660:	4bc0      	ldr	r3, [pc, #768]	; (800c964 <bt_le_adv_start_legacy+0x31c>)
 800c662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c666:	f3bf 8f5b 	dmb	ish
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
 800c66a:	f013 0f02 	tst.w	r3, #2
 800c66e:	f000 819d 	beq.w	800c9ac <bt_le_adv_start_legacy+0x364>
 800c672:	4605      	mov	r5, r0
 800c674:	460c      	mov	r4, r1
 800c676:	4691      	mov	r9, r2
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
 800c678:	4608      	mov	r0, r1
 800c67a:	f00b fd34 	bl	80180e6 <valid_adv_param>
 800c67e:	2800      	cmp	r0, #0
 800c680:	f000 8197 	beq.w	800c9b2 <bt_le_adv_start_legacy+0x36a>
		return -EINVAL;
	}

	if (!bt_le_adv_random_addr_check(param)) {
 800c684:	4620      	mov	r0, r4
 800c686:	f00b fd06 	bl	8018096 <bt_le_adv_random_addr_check>
 800c68a:	4683      	mov	fp, r0
 800c68c:	2800      	cmp	r0, #0
 800c68e:	f000 8193 	beq.w	800c9b8 <bt_le_adv_start_legacy+0x370>
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
 800c692:	f105 0814 	add.w	r8, r5, #20
 800c696:	f3bf 8f5b 	dmb	ish
 800c69a:	696b      	ldr	r3, [r5, #20]
 800c69c:	f3bf 8f5b 	dmb	ish
 800c6a0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c6a4:	f040 818b 	bne.w	800c9be <bt_le_adv_start_legacy+0x376>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
 800c6a8:	220f      	movs	r2, #15
 800c6aa:	2100      	movs	r1, #0
 800c6ac:	a806      	add	r0, sp, #24
 800c6ae:	f00b fc0a 	bl	8017ec6 <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
 800c6b2:	68a3      	ldr	r3, [r4, #8]
 800c6b4:	f8ad 3018 	strh.w	r3, [sp, #24]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
 800c6b8:	68e3      	ldr	r3, [r4, #12]
 800c6ba:	f8ad 301a 	strh.w	r3, [sp, #26]
	set_param.channel_map  = 0x07;
 800c6be:	2307      	movs	r3, #7
 800c6c0:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	set_param.filter_policy = get_filter_policy(param->options);
 800c6c4:	7920      	ldrb	r0, [r4, #4]
 800c6c6:	f00b fcf4 	bl	80180b2 <get_filter_policy>
 800c6ca:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26

	if (adv->id != param->id) {
 800c6ce:	782a      	ldrb	r2, [r5, #0]
 800c6d0:	7823      	ldrb	r3, [r4, #0]
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	d00c      	beq.n	800c6f0 <bt_le_adv_start_legacy+0xa8>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800c6d6:	4ba4      	ldr	r3, [pc, #656]	; (800c968 <bt_le_adv_start_legacy+0x320>)
 800c6d8:	f3bf 8f5b 	dmb	ish
 800c6dc:	e853 2f00 	ldrex	r2, [r3]
 800c6e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c6e4:	e843 2100 	strex	r1, r2, [r3]
 800c6e8:	2900      	cmp	r1, #0
 800c6ea:	d1f7      	bne.n	800c6dc <bt_le_adv_start_legacy+0x94>
 800c6ec:	f3bf 8f5b 	dmb	ish
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
 800c6f0:	7823      	ldrb	r3, [r4, #0]
 800c6f2:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
 800c6f4:	4a9b      	ldr	r2, [pc, #620]	; (800c964 <bt_le_adv_start_legacy+0x31c>)
 800c6f6:	f882 3037 	strb.w	r3, [r2, #55]	; 0x37

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
 800c6fa:	f10d 031d 	add.w	r3, sp, #29
 800c6fe:	4632      	mov	r2, r6
 800c700:	6861      	ldr	r1, [r4, #4]
 800c702:	4628      	mov	r0, r5
 800c704:	f7fe fee0 	bl	800b4c8 <le_adv_set_random_addr>
				     &set_param.own_addr_type);
	if (err) {
 800c708:	4606      	mov	r6, r0
 800c70a:	2800      	cmp	r0, #0
 800c70c:	f040 80db 	bne.w	800c8c6 <bt_le_adv_start_legacy+0x27e>
		return err;
	}

	if (dir_adv) {
 800c710:	b1bf      	cbz	r7, 800c742 <bt_le_adv_start_legacy+0xfa>
	memcpy(dst, src, sizeof(*dst));
 800c712:	2207      	movs	r2, #7
 800c714:	6921      	ldr	r1, [r4, #16]
 800c716:	f105 000b 	add.w	r0, r5, #11
 800c71a:	f00b fbaf 	bl	8017e7c <memcpy>
		bt_addr_le_copy(&adv->target_addr, param->peer);
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
 800c71e:	6863      	ldr	r3, [r4, #4]
 800c720:	f013 0f01 	tst.w	r3, #1
 800c724:	d020      	beq.n	800c768 <bt_le_adv_start_legacy+0x120>
		scannable = true;

		if (dir_adv) {
 800c726:	b1df      	cbz	r7, 800c760 <bt_le_adv_start_legacy+0x118>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
 800c728:	f013 0f10 	tst.w	r3, #16
 800c72c:	d014      	beq.n	800c758 <bt_le_adv_start_legacy+0x110>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
 800c72e:	2304      	movs	r3, #4
 800c730:	f88d 301c 	strb.w	r3, [sp, #28]
 800c734:	2207      	movs	r2, #7
 800c736:	6921      	ldr	r1, [r4, #16]
 800c738:	f10d 001e 	add.w	r0, sp, #30
 800c73c:	f00b fb9e 	bl	8017e7c <memcpy>
}
 800c740:	e01b      	b.n	800c77a <bt_le_adv_start_legacy+0x132>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
 800c742:	2300      	movs	r3, #0
 800c744:	930a      	str	r3, [sp, #40]	; 0x28
 800c746:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b
	memcpy(dst, src, sizeof(*dst));
 800c74a:	2207      	movs	r2, #7
 800c74c:	a90a      	add	r1, sp, #40	; 0x28
 800c74e:	f105 000b 	add.w	r0, r5, #11
 800c752:	f00b fb93 	bl	8017e7c <memcpy>
 800c756:	e7e2      	b.n	800c71e <bt_le_adv_start_legacy+0xd6>
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
 800c758:	2301      	movs	r3, #1
 800c75a:	f88d 301c 	strb.w	r3, [sp, #28]
 800c75e:	e7e9      	b.n	800c734 <bt_le_adv_start_legacy+0xec>
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
		} else {
			set_param.type = BT_HCI_ADV_IND;
 800c760:	2300      	movs	r3, #0
 800c762:	f88d 301c 	strb.w	r3, [sp, #28]
 800c766:	e008      	b.n	800c77a <bt_le_adv_start_legacy+0x132>
		}
	} else {
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
 800c768:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c76a:	b37a      	cbz	r2, 800c7cc <bt_le_adv_start_legacy+0x184>
 800c76c:	2601      	movs	r6, #1

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
 800c76e:	f016 0b01 	ands.w	fp, r6, #1
 800c772:	d030      	beq.n	800c7d6 <bt_le_adv_start_legacy+0x18e>
 800c774:	2302      	movs	r3, #2
 800c776:	f88d 301c 	strb.w	r3, [sp, #28]
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
 800c77a:	210f      	movs	r1, #15
 800c77c:	f242 0006 	movw	r0, #8198	; 0x2006
 800c780:	f7fe fa7e 	bl	800ac80 <bt_hci_cmd_create>
	if (!buf) {
 800c784:	4606      	mov	r6, r0
 800c786:	2800      	cmp	r0, #0
 800c788:	f000 811c 	beq.w	800c9c4 <bt_le_adv_start_legacy+0x37c>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));
 800c78c:	220f      	movs	r2, #15
 800c78e:	a906      	add	r1, sp, #24
 800c790:	3008      	adds	r0, #8
 800c792:	f00e fc66 	bl	801b062 <net_buf_simple_add_mem>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
 800c796:	2200      	movs	r2, #0
 800c798:	4631      	mov	r1, r6
 800c79a:	f242 0006 	movw	r0, #8198	; 0x2006
 800c79e:	f7fe faab 	bl	800acf8 <bt_hci_cmd_send_sync>
	if (err) {
 800c7a2:	4606      	mov	r6, r0
 800c7a4:	2800      	cmp	r0, #0
 800c7a6:	f040 808e 	bne.w	800c8c6 <bt_le_adv_start_legacy+0x27e>
		return err;
	}

	if (!dir_adv) {
 800c7aa:	b1b7      	cbz	r7, 800c7da <bt_le_adv_start_legacy+0x192>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
 800c7ac:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
 800c7ae:	f013 0f01 	tst.w	r3, #1
 800c7b2:	d02c      	beq.n	800c80e <bt_le_adv_start_legacy+0x1c6>
		err = le_adv_start_add_conn(adv, &conn);
 800c7b4:	a905      	add	r1, sp, #20
 800c7b6:	4628      	mov	r0, r5
 800c7b8:	f7fe f856 	bl	800a868 <le_adv_start_add_conn>
		if (err) {
 800c7bc:	b338      	cbz	r0, 800c80e <bt_le_adv_start_legacy+0x1c6>
			if (err == -ENOMEM && !dir_adv &&
 800c7be:	f110 0f0c 	cmn.w	r0, #12
 800c7c2:	f040 8102 	bne.w	800c9ca <bt_le_adv_start_legacy+0x382>
 800c7c6:	b1e7      	cbz	r7, 800c802 <bt_le_adv_start_legacy+0x1ba>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
				goto set_adv_state;
			}

			return err;
 800c7c8:	4606      	mov	r6, r0
 800c7ca:	e07c      	b.n	800c8c6 <bt_le_adv_start_legacy+0x27e>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
 800c7cc:	f013 0f08 	tst.w	r3, #8
 800c7d0:	d0cd      	beq.n	800c76e <bt_le_adv_start_legacy+0x126>
 800c7d2:	2601      	movs	r6, #1
 800c7d4:	e7cb      	b.n	800c76e <bt_le_adv_start_legacy+0x126>
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
 800c7d6:	2303      	movs	r3, #3
 800c7d8:	e7cd      	b.n	800c776 <bt_le_adv_start_legacy+0x12e>
				    param->options & BT_LE_ADV_OPT_USE_NAME);
 800c7da:	6863      	ldr	r3, [r4, #4]
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
 800c7dc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c7e0:	9303      	str	r3, [sp, #12]
 800c7e2:	f8cd b008 	str.w	fp, [sp, #8]
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	9301      	str	r3, [sp, #4]
 800c7ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c7ec:	9300      	str	r3, [sp, #0]
 800c7ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c7f0:	4652      	mov	r2, sl
 800c7f2:	4649      	mov	r1, r9
 800c7f4:	4628      	mov	r0, r5
 800c7f6:	f00b fe98 	bl	801852a <le_adv_update>
		if (err) {
 800c7fa:	2800      	cmp	r0, #0
 800c7fc:	d0d6      	beq.n	800c7ac <bt_le_adv_start_legacy+0x164>
			return err;
 800c7fe:	4606      	mov	r6, r0
 800c800:	e061      	b.n	800c8c6 <bt_le_adv_start_legacy+0x27e>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
 800c802:	6862      	ldr	r2, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
 800c804:	f012 0f02 	tst.w	r2, #2
 800c808:	d00c      	beq.n	800c824 <bt_le_adv_start_legacy+0x1dc>
			return err;
 800c80a:	4606      	mov	r6, r0
 800c80c:	e05b      	b.n	800c8c6 <bt_le_adv_start_legacy+0x27e>
		}
	}

	err = set_le_adv_enable(adv, true);
 800c80e:	2101      	movs	r1, #1
 800c810:	4628      	mov	r0, r5
 800c812:	f00b fc84 	bl	801811e <set_le_adv_enable>
	if (err) {
 800c816:	4605      	mov	r5, r0
 800c818:	2800      	cmp	r0, #0
 800c81a:	d158      	bne.n	800c8ce <bt_le_adv_start_legacy+0x286>
		}

		return err;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
 800c81c:	9805      	ldr	r0, [sp, #20]
 800c81e:	b108      	cbz	r0, 800c824 <bt_le_adv_start_legacy+0x1dc>
		/* If undirected connectable advertiser we have created a
		 * connection object that we don't yet give to the application.
		 * Since we don't give the application a reference to manage in
		 * this case, we need to release this reference here
		 */
		bt_conn_unref(conn);
 800c820:	f00c f9a8 	bl	8018b74 <bt_conn_unref>
	}

set_adv_state:
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
 800c824:	2f00      	cmp	r7, #0
 800c826:	d06d      	beq.n	800c904 <bt_le_adv_start_legacy+0x2bc>
 800c828:	4633      	mov	r3, r6
	if (val) {
 800c82a:	f013 0f01 	tst.w	r3, #1
 800c82e:	d071      	beq.n	800c914 <bt_le_adv_start_legacy+0x2cc>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800c830:	f3bf 8f5b 	dmb	ish
 800c834:	e858 3f00 	ldrex	r3, [r8]
 800c838:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c83c:	e848 3200 	strex	r2, r3, [r8]
 800c840:	2a00      	cmp	r2, #0
 800c842:	d1f7      	bne.n	800c834 <bt_le_adv_start_legacy+0x1ec>
 800c844:	f3bf 8f5b 	dmb	ish
			  !(param->options & BT_LE_ADV_OPT_ONE_TIME));

	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
			  param->options & BT_LE_ADV_OPT_USE_NAME);
 800c848:	6863      	ldr	r3, [r4, #4]
	if (val) {
 800c84a:	f013 0f08 	tst.w	r3, #8
 800c84e:	d06e      	beq.n	800c92e <bt_le_adv_start_legacy+0x2e6>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800c850:	f3bf 8f5b 	dmb	ish
 800c854:	e858 3f00 	ldrex	r3, [r8]
 800c858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c85c:	e848 3200 	strex	r2, r3, [r8]
 800c860:	2a00      	cmp	r2, #0
 800c862:	d1f7      	bne.n	800c854 <bt_le_adv_start_legacy+0x20c>
 800c864:	f3bf 8f5b 	dmb	ish

	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
			  param->options & BT_LE_ADV_OPT_CONNECTABLE);
 800c868:	6863      	ldr	r3, [r4, #4]
	if (val) {
 800c86a:	f013 0f01 	tst.w	r3, #1
 800c86e:	d06b      	beq.n	800c948 <bt_le_adv_start_legacy+0x300>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800c870:	f3bf 8f5b 	dmb	ish
 800c874:	e858 3f00 	ldrex	r3, [r8]
 800c878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c87c:	e848 3200 	strex	r2, r3, [r8]
 800c880:	2a00      	cmp	r2, #0
 800c882:	d1f7      	bne.n	800c874 <bt_le_adv_start_legacy+0x22c>
 800c884:	f3bf 8f5b 	dmb	ish
	if (val) {
 800c888:	f1bb 0f00 	cmp.w	fp, #0
 800c88c:	d074      	beq.n	800c978 <bt_le_adv_start_legacy+0x330>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800c88e:	f3bf 8f5b 	dmb	ish
 800c892:	e858 3f00 	ldrex	r3, [r8]
 800c896:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c89a:	e848 3200 	strex	r2, r3, [r8]
 800c89e:	2a00      	cmp	r2, #0
 800c8a0:	d1f7      	bne.n	800c892 <bt_le_adv_start_legacy+0x24a>
 800c8a2:	f3bf 8f5b 	dmb	ish

	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);
 800c8a6:	6863      	ldr	r3, [r4, #4]
	if (val) {
 800c8a8:	f013 0f04 	tst.w	r3, #4
 800c8ac:	d071      	beq.n	800c992 <bt_le_adv_start_legacy+0x34a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800c8ae:	f3bf 8f5b 	dmb	ish
 800c8b2:	e858 3f00 	ldrex	r3, [r8]
 800c8b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c8ba:	e848 3200 	strex	r2, r3, [r8]
 800c8be:	2a00      	cmp	r2, #0
 800c8c0:	d1f7      	bne.n	800c8b2 <bt_le_adv_start_legacy+0x26a>
 800c8c2:	f3bf 8f5b 	dmb	ish

	return 0;
}
 800c8c6:	4630      	mov	r0, r6
 800c8c8:	b00d      	add	sp, #52	; 0x34
 800c8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		BT_ERR("Failed to start advertiser");
 800c8ce:	f04f 0100 	mov.w	r1, #0
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	f363 0102 	bfi	r1, r3, #0, #3
 800c8d8:	f36f 01c5 	bfc	r1, #3, #3
 800c8dc:	4b23      	ldr	r3, [pc, #140]	; (800c96c <bt_le_adv_start_legacy+0x324>)
 800c8de:	4a24      	ldr	r2, [pc, #144]	; (800c970 <bt_le_adv_start_legacy+0x328>)
 800c8e0:	1a9b      	subs	r3, r3, r2
 800c8e2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800c8e6:	f363 118f 	bfi	r1, r3, #6, #10
 800c8ea:	4822      	ldr	r0, [pc, #136]	; (800c974 <bt_le_adv_start_legacy+0x32c>)
 800c8ec:	f7f7 fe2e 	bl	800454c <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
 800c8f0:	9805      	ldr	r0, [sp, #20]
 800c8f2:	b128      	cbz	r0, 800c900 <bt_le_adv_start_legacy+0x2b8>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
 800c8f4:	2100      	movs	r1, #0
 800c8f6:	f000 ff61 	bl	800d7bc <bt_conn_set_state>
			bt_conn_unref(conn);
 800c8fa:	9805      	ldr	r0, [sp, #20]
 800c8fc:	f00c f93a 	bl	8018b74 <bt_conn_unref>
		return err;
 800c900:	462e      	mov	r6, r5
 800c902:	e7e0      	b.n	800c8c6 <bt_le_adv_start_legacy+0x27e>
			  !(param->options & BT_LE_ADV_OPT_ONE_TIME));
 800c904:	6863      	ldr	r3, [r4, #4]
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
 800c906:	f013 0f02 	tst.w	r3, #2
 800c90a:	d001      	beq.n	800c910 <bt_le_adv_start_legacy+0x2c8>
 800c90c:	4633      	mov	r3, r6
 800c90e:	e78c      	b.n	800c82a <bt_le_adv_start_legacy+0x1e2>
 800c910:	2301      	movs	r3, #1
 800c912:	e78a      	b.n	800c82a <bt_le_adv_start_legacy+0x1e2>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800c914:	f3bf 8f5b 	dmb	ish
 800c918:	e858 3f00 	ldrex	r3, [r8]
 800c91c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c920:	e848 3200 	strex	r2, r3, [r8]
 800c924:	2a00      	cmp	r2, #0
 800c926:	d1f7      	bne.n	800c918 <bt_le_adv_start_legacy+0x2d0>
 800c928:	f3bf 8f5b 	dmb	ish
 800c92c:	e78c      	b.n	800c848 <bt_le_adv_start_legacy+0x200>
 800c92e:	f3bf 8f5b 	dmb	ish
 800c932:	e858 3f00 	ldrex	r3, [r8]
 800c936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c93a:	e848 3200 	strex	r2, r3, [r8]
 800c93e:	2a00      	cmp	r2, #0
 800c940:	d1f7      	bne.n	800c932 <bt_le_adv_start_legacy+0x2ea>
 800c942:	f3bf 8f5b 	dmb	ish
 800c946:	e78f      	b.n	800c868 <bt_le_adv_start_legacy+0x220>
 800c948:	f3bf 8f5b 	dmb	ish
 800c94c:	e858 3f00 	ldrex	r3, [r8]
 800c950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c954:	e848 3200 	strex	r2, r3, [r8]
 800c958:	2a00      	cmp	r2, #0
 800c95a:	d1f7      	bne.n	800c94c <bt_le_adv_start_legacy+0x304>
 800c95c:	f3bf 8f5b 	dmb	ish
 800c960:	e792      	b.n	800c888 <bt_le_adv_start_legacy+0x240>
 800c962:	bf00      	nop
 800c964:	20000000 	.word	0x20000000
 800c968:	20000094 	.word	0x20000094
 800c96c:	0801d708 	.word	0x0801d708
 800c970:	0801d6d0 	.word	0x0801d6d0
 800c974:	0802082c 	.word	0x0802082c
 800c978:	f3bf 8f5b 	dmb	ish
 800c97c:	e858 3f00 	ldrex	r3, [r8]
 800c980:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c984:	e848 3200 	strex	r2, r3, [r8]
 800c988:	2a00      	cmp	r2, #0
 800c98a:	d1f7      	bne.n	800c97c <bt_le_adv_start_legacy+0x334>
 800c98c:	f3bf 8f5b 	dmb	ish
 800c990:	e789      	b.n	800c8a6 <bt_le_adv_start_legacy+0x25e>
 800c992:	f3bf 8f5b 	dmb	ish
 800c996:	e858 3f00 	ldrex	r3, [r8]
 800c99a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c99e:	e848 3200 	strex	r2, r3, [r8]
 800c9a2:	2a00      	cmp	r2, #0
 800c9a4:	d1f7      	bne.n	800c996 <bt_le_adv_start_legacy+0x34e>
 800c9a6:	f3bf 8f5b 	dmb	ish
}
 800c9aa:	e78c      	b.n	800c8c6 <bt_le_adv_start_legacy+0x27e>
		return -EAGAIN;
 800c9ac:	f06f 060a 	mvn.w	r6, #10
 800c9b0:	e789      	b.n	800c8c6 <bt_le_adv_start_legacy+0x27e>
		return -EINVAL;
 800c9b2:	f06f 0615 	mvn.w	r6, #21
 800c9b6:	e786      	b.n	800c8c6 <bt_le_adv_start_legacy+0x27e>
		return -EINVAL;
 800c9b8:	f06f 0615 	mvn.w	r6, #21
 800c9bc:	e783      	b.n	800c8c6 <bt_le_adv_start_legacy+0x27e>
		return -EALREADY;
 800c9be:	f06f 0644 	mvn.w	r6, #68	; 0x44
 800c9c2:	e780      	b.n	800c8c6 <bt_le_adv_start_legacy+0x27e>
		return -ENOBUFS;
 800c9c4:	f06f 0636 	mvn.w	r6, #54	; 0x36
 800c9c8:	e77d      	b.n	800c8c6 <bt_le_adv_start_legacy+0x27e>
			return err;
 800c9ca:	4606      	mov	r6, r0
 800c9cc:	e77b      	b.n	800c8c6 <bt_le_adv_start_legacy+0x27e>
 800c9ce:	bf00      	nop

0800c9d0 <bt_le_adv_stop>:

	return err;
}

int bt_le_adv_stop(void)
{
 800c9d0:	b510      	push	{r4, lr}
	struct bt_le_ext_adv *adv = bt_adv_lookup_legacy();
 800c9d2:	f7fe fdcb 	bl	800b56c <bt_adv_lookup_legacy>
	int err;

	if (!adv) {
 800c9d6:	b1c8      	cbz	r0, 800ca0c <bt_le_adv_stop+0x3c>
 800c9d8:	4604      	mov	r4, r0
	}

	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);
 800c9da:	f100 0314 	add.w	r3, r0, #20
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800c9de:	f3bf 8f5b 	dmb	ish
 800c9e2:	e853 2f00 	ldrex	r2, [r3]
 800c9e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c9ea:	e843 2100 	strex	r1, r2, [r3]
 800c9ee:	2900      	cmp	r1, #0
 800c9f0:	d1f7      	bne.n	800c9e2 <bt_le_adv_stop+0x12>
 800c9f2:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800c9f6:	f3bf 8f5b 	dmb	ish
 800c9fa:	6963      	ldr	r3, [r4, #20]
 800c9fc:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
 800ca00:	f3c3 1080 	ubfx	r0, r3, #6, #1

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
 800ca04:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ca08:	d113      	bne.n	800ca32 <bt_le_adv_stop+0x62>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
 800ca0a:	bd10      	pop	{r4, pc}
		BT_ERR("No valid legacy adv");
 800ca0c:	f04f 0100 	mov.w	r1, #0
 800ca10:	2301      	movs	r3, #1
 800ca12:	f363 0102 	bfi	r1, r3, #0, #3
 800ca16:	f36f 01c5 	bfc	r1, #3, #3
 800ca1a:	4b0f      	ldr	r3, [pc, #60]	; (800ca58 <bt_le_adv_stop+0x88>)
 800ca1c:	4a0f      	ldr	r2, [pc, #60]	; (800ca5c <bt_le_adv_stop+0x8c>)
 800ca1e:	1a9b      	subs	r3, r3, r2
 800ca20:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800ca24:	f363 118f 	bfi	r1, r3, #6, #10
 800ca28:	480d      	ldr	r0, [pc, #52]	; (800ca60 <bt_le_adv_stop+0x90>)
 800ca2a:	f7f7 fd8f 	bl	800454c <log_0>
		return 0;
 800ca2e:	2000      	movs	r0, #0
 800ca30:	e7eb      	b.n	800ca0a <bt_le_adv_stop+0x3a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800ca32:	f3bf 8f5b 	dmb	ish
 800ca36:	6963      	ldr	r3, [r4, #20]
 800ca38:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
 800ca3c:	f413 7f80 	tst.w	r3, #256	; 0x100
 800ca40:	d104      	bne.n	800ca4c <bt_le_adv_stop+0x7c>
		err = set_le_adv_enable_legacy(adv, false);
 800ca42:	2100      	movs	r1, #0
 800ca44:	4620      	mov	r0, r4
 800ca46:	f7fe fc47 	bl	800b2d8 <set_le_adv_enable_legacy>
		if (err) {
 800ca4a:	e7de      	b.n	800ca0a <bt_le_adv_stop+0x3a>
		le_adv_stop_free_conn(adv, 0);
 800ca4c:	2100      	movs	r1, #0
 800ca4e:	4620      	mov	r0, r4
 800ca50:	f7fd fc4a 	bl	800a2e8 <le_adv_stop_free_conn>
 800ca54:	e7f5      	b.n	800ca42 <bt_le_adv_stop+0x72>
 800ca56:	bf00      	nop
 800ca58:	0801d708 	.word	0x0801d708
 800ca5c:	0801d6d0 	.word	0x0801d6d0
 800ca60:	08020848 	.word	0x08020848

0800ca64 <enh_conn_complete>:
{
 800ca64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca66:	b085      	sub	sp, #20
 800ca68:	4604      	mov	r4, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
 800ca6a:	f8b0 6001 	ldrh.w	r6, [r0, #1]
	pending_id_keys_update();
 800ca6e:	f7fd fb79 	bl	800a164 <pending_id_keys_update>
	if (evt->status) {
 800ca72:	7820      	ldrb	r0, [r4, #0]
 800ca74:	b1b8      	cbz	r0, 800caa6 <enh_conn_complete+0x42>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
 800ca76:	283c      	cmp	r0, #60	; 0x3c
 800ca78:	d012      	beq.n	800caa0 <enh_conn_complete+0x3c>
		BT_WARN("Unexpected status 0x%02x", evt->status);
 800ca7a:	f04f 0200 	mov.w	r2, #0
 800ca7e:	2302      	movs	r3, #2
 800ca80:	f363 0202 	bfi	r2, r3, #0, #3
 800ca84:	f36f 02c5 	bfc	r2, #3, #3
 800ca88:	4b5b      	ldr	r3, [pc, #364]	; (800cbf8 <enh_conn_complete+0x194>)
 800ca8a:	495c      	ldr	r1, [pc, #368]	; (800cbfc <enh_conn_complete+0x198>)
 800ca8c:	1a5b      	subs	r3, r3, r1
 800ca8e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800ca92:	f363 128f 	bfi	r2, r3, #6, #10
 800ca96:	4601      	mov	r1, r0
 800ca98:	4859      	ldr	r0, [pc, #356]	; (800cc00 <enh_conn_complete+0x19c>)
 800ca9a:	f7f7 fbe7 	bl	800426c <log_1>
		return;
 800ca9e:	e04b      	b.n	800cb38 <enh_conn_complete+0xd4>
			le_conn_complete_adv_timeout();
 800caa0:	f7fe fd68 	bl	800b574 <le_conn_complete_adv_timeout>
			return;
 800caa4:	e048      	b.n	800cb38 <enh_conn_complete+0xd4>
 800caa6:	b2b7      	uxth	r7, r6
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
 800caa8:	7923      	ldrb	r3, [r4, #4]
 800caaa:	3b02      	subs	r3, #2
 800caac:	b2db      	uxtb	r3, r3
 800caae:	2b01      	cmp	r3, #1
 800cab0:	d944      	bls.n	800cb3c <enh_conn_complete+0xd8>
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
 800cab2:	78e3      	ldrb	r3, [r4, #3]
 800cab4:	2b01      	cmp	r3, #1
 800cab6:	d056      	beq.n	800cb66 <enh_conn_complete+0x102>
				bt_lookup_id_addr(id, &evt->peer_addr));
 800cab8:	1d25      	adds	r5, r4, #4
		bt_addr_le_copy(&id_addr,
 800caba:	4629      	mov	r1, r5
 800cabc:	f00b fc22 	bl	8018304 <bt_lookup_id_addr>
 800cac0:	4601      	mov	r1, r0
 800cac2:	2207      	movs	r2, #7
 800cac4:	4668      	mov	r0, sp
 800cac6:	f00b f9d9 	bl	8017e7c <memcpy>
 800caca:	2207      	movs	r2, #7
 800cacc:	4629      	mov	r1, r5
 800cace:	a802      	add	r0, sp, #8
 800cad0:	f00b f9d4 	bl	8017e7c <memcpy>
	conn = find_pending_connect(evt->role, &id_addr);
 800cad4:	4669      	mov	r1, sp
 800cad6:	78e0      	ldrb	r0, [r4, #3]
 800cad8:	f7fd fae2 	bl	800a0a0 <find_pending_connect>
 800cadc:	4605      	mov	r5, r0
	    evt->role == BT_HCI_ROLE_SLAVE &&
 800cade:	78e3      	ldrb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
 800cae0:	2b01      	cmp	r3, #1
 800cae2:	d044      	beq.n	800cb6e <enh_conn_complete+0x10a>
	if (!conn) {
 800cae4:	2d00      	cmp	r5, #0
 800cae6:	d052      	beq.n	800cb8e <enh_conn_complete+0x12a>
	conn->handle = handle;
 800cae8:	4628      	mov	r0, r5
 800caea:	f820 6b88 	strh.w	r6, [r0], #136
 800caee:	2207      	movs	r2, #7
 800caf0:	4669      	mov	r1, sp
 800caf2:	f00b f9c3 	bl	8017e7c <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
 800caf6:	f8b4 3017 	ldrh.w	r3, [r4, #23]
 800cafa:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
 800cafe:	f8b4 3019 	ldrh.w	r3, [r4, #25]
 800cb02:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
 800cb06:	f8b4 301b 	ldrh.w	r3, [r4, #27]
 800cb0a:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
 800cb0e:	78e3      	ldrb	r3, [r4, #3]
 800cb10:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
 800cb12:	2200      	movs	r2, #0
 800cb14:	732a      	strb	r2, [r5, #12]
	conn->le.phy.tx_phy = BT_GAP_LE_PHY_1M;
 800cb16:	2201      	movs	r2, #1
 800cb18:	f885 20b8 	strb.w	r2, [r5, #184]	; 0xb8
	conn->le.phy.rx_phy = BT_GAP_LE_PHY_1M;
 800cb1c:	f885 20b9 	strb.w	r2, [r5, #185]	; 0xb9
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
 800cb20:	4293      	cmp	r3, r2
 800cb22:	d04f      	beq.n	800cbc4 <enh_conn_complete+0x160>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
 800cb24:	2107      	movs	r1, #7
 800cb26:	4628      	mov	r0, r5
 800cb28:	f000 fe48 	bl	800d7bc <bt_conn_set_state>
	conn_auto_initiate(conn);
 800cb2c:	4628      	mov	r0, r5
 800cb2e:	f7ff f907 	bl	800bd40 <conn_auto_initiate>
	bt_conn_unref(conn);
 800cb32:	4628      	mov	r0, r5
 800cb34:	f00c f81e 	bl	8018b74 <bt_conn_unref>
}
 800cb38:	b005      	add	sp, #20
 800cb3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb3c:	2207      	movs	r2, #7
 800cb3e:	1d21      	adds	r1, r4, #4
 800cb40:	4668      	mov	r0, sp
 800cb42:	f00b f99b 	bl	8017e7c <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
 800cb46:	f89d 3000 	ldrb.w	r3, [sp]
 800cb4a:	3b02      	subs	r3, #2
 800cb4c:	f88d 3000 	strb.w	r3, [sp]
	memcpy(dst, src, sizeof(*dst));
 800cb50:	2206      	movs	r2, #6
 800cb52:	f104 0111 	add.w	r1, r4, #17
 800cb56:	f10d 0009 	add.w	r0, sp, #9
 800cb5a:	f00b f98f 	bl	8017e7c <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
 800cb5e:	2301      	movs	r3, #1
 800cb60:	f88d 3008 	strb.w	r3, [sp, #8]
 800cb64:	e7b6      	b.n	800cad4 <enh_conn_complete+0x70>
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
 800cb66:	4b27      	ldr	r3, [pc, #156]	; (800cc04 <enh_conn_complete+0x1a0>)
 800cb68:	f893 0037 	ldrb.w	r0, [r3, #55]	; 0x37
 800cb6c:	e7a4      	b.n	800cab8 <enh_conn_complete+0x54>
		struct bt_le_ext_adv *adv = bt_adv_lookup_legacy();
 800cb6e:	f7fe fcfd 	bl	800b56c <bt_adv_lookup_legacy>
		atomic_clear_bit(adv->flags, BT_ADV_ENABLED);
 800cb72:	3014      	adds	r0, #20
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800cb74:	f3bf 8f5b 	dmb	ish
 800cb78:	e850 3f00 	ldrex	r3, [r0]
 800cb7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb80:	e840 3200 	strex	r2, r3, [r0]
 800cb84:	2a00      	cmp	r2, #0
 800cb86:	d1f7      	bne.n	800cb78 <enh_conn_complete+0x114>
 800cb88:	f3bf 8f5b 	dmb	ish
}
 800cb8c:	e7aa      	b.n	800cae4 <enh_conn_complete+0x80>
		BT_ERR("No pending conn for peer %s",
 800cb8e:	2301      	movs	r3, #1
 800cb90:	f363 0502 	bfi	r5, r3, #0, #3
 800cb94:	f36f 05c5 	bfc	r5, #3, #3
 800cb98:	4b17      	ldr	r3, [pc, #92]	; (800cbf8 <enh_conn_complete+0x194>)
 800cb9a:	4a18      	ldr	r2, [pc, #96]	; (800cbfc <enh_conn_complete+0x198>)
 800cb9c:	1a9b      	subs	r3, r3, r2
 800cb9e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800cba2:	f363 158f 	bfi	r5, r3, #6, #10
 800cba6:	1d20      	adds	r0, r4, #4
 800cba8:	f7fc fe32 	bl	8009810 <bt_addr_le_str_real>
 800cbac:	f7f7 f98e 	bl	8003ecc <log_strdup>
 800cbb0:	4601      	mov	r1, r0
 800cbb2:	462a      	mov	r2, r5
 800cbb4:	4814      	ldr	r0, [pc, #80]	; (800cc08 <enh_conn_complete+0x1a4>)
 800cbb6:	f7f7 fb59 	bl	800426c <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
 800cbba:	211f      	movs	r1, #31
 800cbbc:	4638      	mov	r0, r7
 800cbbe:	f00b fc1d 	bl	80183fc <bt_hci_disconnect>
		return;
 800cbc2:	e7b9      	b.n	800cb38 <enh_conn_complete+0xd4>
	memcpy(dst, src, sizeof(*dst));
 800cbc4:	2207      	movs	r2, #7
 800cbc6:	a902      	add	r1, sp, #8
 800cbc8:	f105 008f 	add.w	r0, r5, #143	; 0x8f
 800cbcc:	f00b f956 	bl	8017e7c <memcpy>
						&bt_dev.id_addr[conn->id]);
 800cbd0:	7a29      	ldrb	r1, [r5, #8]
 800cbd2:	4c0c      	ldr	r4, [pc, #48]	; (800cc04 <enh_conn_complete+0x1a0>)
 800cbd4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800cbd8:	2207      	movs	r2, #7
 800cbda:	4421      	add	r1, r4
 800cbdc:	f105 0096 	add.w	r0, r5, #150	; 0x96
 800cbe0:	f00b f94c 	bl	8017e7c <memcpy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
 800cbe4:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800cbe8:	2200      	movs	r2, #0
 800cbea:	f001 0340 	and.w	r3, r1, #64	; 0x40
 800cbee:	4313      	orrs	r3, r2
 800cbf0:	d098      	beq.n	800cb24 <enh_conn_complete+0xc0>
			bt_le_adv_resume();
 800cbf2:	f00b fd53 	bl	801869c <bt_le_adv_resume>
 800cbf6:	e795      	b.n	800cb24 <enh_conn_complete+0xc0>
 800cbf8:	0801d708 	.word	0x0801d708
 800cbfc:	0801d6d0 	.word	0x0801d6d0
 800cc00:	0802085c 	.word	0x0802085c
 800cc04:	20000000 	.word	0x20000000
 800cc08:	08020878 	.word	0x08020878

0800cc0c <bt_buf_get_rx>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
				    buf, NULL);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
 800cc0c:	b538      	push	{r3, r4, r5, lr}
 800cc0e:	4605      	mov	r5, r0
	if (IS_ENABLED(CONFIG_BT_ISO) && type == BT_BUF_ISO_IN) {
		return bt_iso_get_rx(timeout);
	}

#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	if (type == BT_BUF_EVT) {
 800cc10:	2801      	cmp	r0, #1
 800cc12:	d00c      	beq.n	800cc2e <bt_buf_get_rx+0x22>
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
 800cc14:	4808      	ldr	r0, [pc, #32]	; (800cc38 <bt_buf_get_rx+0x2c>)
 800cc16:	f00e f9a1 	bl	801af5c <net_buf_alloc_fixed>
 800cc1a:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
 800cc1c:	b12c      	cbz	r4, 800cc2a <bt_buf_get_rx+0x1e>
		net_buf_reserve(buf, BT_BUF_RESERVE);
 800cc1e:	2100      	movs	r1, #0
 800cc20:	f104 0008 	add.w	r0, r4, #8
 800cc24:	f00e f9bc 	bl	801afa0 <net_buf_simple_reserve>
	*(uint8_t *)net_buf_user_data(buf) = type;
 800cc28:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
 800cc2a:	4620      	mov	r0, r4
 800cc2c:	bd38      	pop	{r3, r4, r5, pc}
		buf = net_buf_alloc(&hci_rx_pool, timeout);
 800cc2e:	4803      	ldr	r0, [pc, #12]	; (800cc3c <bt_buf_get_rx+0x30>)
 800cc30:	f00e f994 	bl	801af5c <net_buf_alloc_fixed>
 800cc34:	4604      	mov	r4, r0
 800cc36:	e7f1      	b.n	800cc1c <bt_buf_get_rx+0x10>
 800cc38:	20000880 	.word	0x20000880
 800cc3c:	20000970 	.word	0x20000970

0800cc40 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
 800cc40:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 800cc42:	f04f 0310 	mov.w	r3, #16
 800cc46:	f3ef 8211 	mrs	r2, BASEPRI
 800cc4a:	f383 8811 	msr	BASEPRI, r3
 800cc4e:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
 800cc52:	4b0e      	ldr	r3, [pc, #56]	; (800cc8c <bt_buf_get_cmd_complete+0x4c>)
 800cc54:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
	bt_dev.sent_cmd = NULL;
 800cc58:	2500      	movs	r5, #0
 800cc5a:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	__asm__ volatile(
 800cc5e:	f382 8811 	msr	BASEPRI, r2
 800cc62:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
 800cc66:	b14c      	cbz	r4, 800cc7c <bt_buf_get_cmd_complete+0x3c>
 800cc68:	2301      	movs	r3, #1
 800cc6a:	7523      	strb	r3, [r4, #20]
		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0U;
 800cc6c:	4629      	mov	r1, r5
 800cc6e:	81a5      	strh	r5, [r4, #12]
		net_buf_reserve(buf, BT_BUF_RESERVE);
 800cc70:	f104 0008 	add.w	r0, r4, #8
 800cc74:	f00e f994 	bl	801afa0 <net_buf_simple_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
 800cc78:	4620      	mov	r0, r4
 800cc7a:	bd38      	pop	{r3, r4, r5, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
 800cc7c:	4602      	mov	r2, r0
 800cc7e:	460b      	mov	r3, r1
 800cc80:	2001      	movs	r0, #1
 800cc82:	f7ff ffc3 	bl	800cc0c <bt_buf_get_rx>
 800cc86:	4604      	mov	r4, r0
 800cc88:	e7f6      	b.n	800cc78 <bt_buf_get_cmd_complete+0x38>
 800cc8a:	bf00      	nop
 800cc8c:	20000000 	.word	0x20000000

0800cc90 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable, k_timeout_t timeout)
{
 800cc90:	b510      	push	{r4, lr}
	switch (evt) {
 800cc92:	280f      	cmp	r0, #15
 800cc94:	d90d      	bls.n	800ccb2 <bt_buf_get_evt+0x22>
 800cc96:	2813      	cmp	r0, #19
 800cc98:	d10d      	bne.n	800ccb6 <bt_buf_get_evt+0x26>
#if defined(CONFIG_BT_CONN)
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		{
			struct net_buf *buf;

			buf = net_buf_alloc(&num_complete_pool, timeout);
 800cc9a:	4814      	ldr	r0, [pc, #80]	; (800ccec <bt_buf_get_evt+0x5c>)
 800cc9c:	f00e f95e 	bl	801af5c <net_buf_alloc_fixed>
			if (buf) {
 800cca0:	4604      	mov	r4, r0
 800cca2:	b198      	cbz	r0, 800cccc <bt_buf_get_evt+0x3c>
				net_buf_reserve(buf, BT_BUF_RESERVE);
 800cca4:	2100      	movs	r1, #0
 800cca6:	3008      	adds	r0, #8
 800cca8:	f00e f97a 	bl	801afa0 <net_buf_simple_reserve>
 800ccac:	2301      	movs	r3, #1
 800ccae:	7523      	strb	r3, [r4, #20]
}
 800ccb0:	e00c      	b.n	800cccc <bt_buf_get_evt+0x3c>
	switch (evt) {
 800ccb2:	280e      	cmp	r0, #14
 800ccb4:	d205      	bcs.n	800ccc2 <bt_buf_get_evt+0x32>
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return bt_buf_get_cmd_complete(timeout);
	default:
#if defined(CONFIG_BT_DISCARDABLE_BUF_COUNT)
		if (discardable) {
 800ccb6:	b959      	cbnz	r1, 800ccd0 <bt_buf_get_evt+0x40>

			return buf;
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
 800ccb8:	2001      	movs	r0, #1
 800ccba:	f7ff ffa7 	bl	800cc0c <bt_buf_get_rx>
 800ccbe:	4604      	mov	r4, r0
 800ccc0:	e004      	b.n	800cccc <bt_buf_get_evt+0x3c>
		return bt_buf_get_cmd_complete(timeout);
 800ccc2:	4610      	mov	r0, r2
 800ccc4:	4619      	mov	r1, r3
 800ccc6:	f7ff ffbb 	bl	800cc40 <bt_buf_get_cmd_complete>
 800ccca:	4604      	mov	r4, r0
	}
}
 800cccc:	4620      	mov	r0, r4
 800ccce:	bd10      	pop	{r4, pc}
			buf = net_buf_alloc(&discardable_pool, timeout);
 800ccd0:	4807      	ldr	r0, [pc, #28]	; (800ccf0 <bt_buf_get_evt+0x60>)
 800ccd2:	f00e f943 	bl	801af5c <net_buf_alloc_fixed>
			if (buf) {
 800ccd6:	4604      	mov	r4, r0
 800ccd8:	2800      	cmp	r0, #0
 800ccda:	d0f7      	beq.n	800cccc <bt_buf_get_evt+0x3c>
				net_buf_reserve(buf, BT_BUF_RESERVE);
 800ccdc:	2100      	movs	r1, #0
 800ccde:	3008      	adds	r0, #8
 800cce0:	f00e f95e 	bl	801afa0 <net_buf_simple_reserve>
	*(uint8_t *)net_buf_user_data(buf) = type;
 800cce4:	2301      	movs	r3, #1
 800cce6:	7523      	strb	r3, [r4, #20]
			return buf;
 800cce8:	e7f0      	b.n	800cccc <bt_buf_get_evt+0x3c>
 800ccea:	bf00      	nop
 800ccec:	20000998 	.word	0x20000998
 800ccf0:	200008f8 	.word	0x200008f8

0800ccf4 <bt_pub_key_gen>:
}
#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
 800ccf4:	b510      	push	{r4, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
 800ccf6:	4b34      	ldr	r3, [pc, #208]	; (800cdc8 <bt_pub_key_gen+0xd4>)
 800ccf8:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800ccfc:	f003 0306 	and.w	r3, r3, #6
 800cd00:	2b06      	cmp	r3, #6
 800cd02:	d115      	bne.n	800cd30 <bt_pub_key_gen+0x3c>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
		return -ENOTSUP;
	}

	new_cb->_next = pub_key_cb;
 800cd04:	4b31      	ldr	r3, [pc, #196]	; (800cdcc <bt_pub_key_gen+0xd8>)
 800cd06:	681a      	ldr	r2, [r3, #0]
 800cd08:	6042      	str	r2, [r0, #4]
	pub_key_cb = new_cb;
 800cd0a:	6018      	str	r0, [r3, #0]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800cd0c:	4b30      	ldr	r3, [pc, #192]	; (800cdd0 <bt_pub_key_gen+0xdc>)
 800cd0e:	f3bf 8f5b 	dmb	ish
 800cd12:	e853 2f00 	ldrex	r2, [r3]
 800cd16:	f042 0110 	orr.w	r1, r2, #16
 800cd1a:	e843 1000 	strex	r0, r1, [r3]
 800cd1e:	2800      	cmp	r0, #0
 800cd20:	d1f7      	bne.n	800cd12 <bt_pub_key_gen+0x1e>
 800cd22:	f3bf 8f5b 	dmb	ish

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
 800cd26:	f012 0f10 	tst.w	r2, #16
 800cd2a:	d015      	beq.n	800cd58 <bt_pub_key_gen+0x64>
		return 0;
 800cd2c:	2400      	movs	r4, #0
 800cd2e:	e027      	b.n	800cd80 <bt_pub_key_gen+0x8c>
		BT_WARN("ECC HCI commands not available");
 800cd30:	f04f 0100 	mov.w	r1, #0
 800cd34:	2302      	movs	r3, #2
 800cd36:	f363 0102 	bfi	r1, r3, #0, #3
 800cd3a:	f36f 01c5 	bfc	r1, #3, #3
 800cd3e:	4b25      	ldr	r3, [pc, #148]	; (800cdd4 <bt_pub_key_gen+0xe0>)
 800cd40:	4a25      	ldr	r2, [pc, #148]	; (800cdd8 <bt_pub_key_gen+0xe4>)
 800cd42:	1a9b      	subs	r3, r3, r2
 800cd44:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800cd48:	f363 118f 	bfi	r1, r3, #6, #10
 800cd4c:	4823      	ldr	r0, [pc, #140]	; (800cddc <bt_pub_key_gen+0xe8>)
 800cd4e:	f7f7 fbfd 	bl	800454c <log_0>
		return -ENOTSUP;
 800cd52:	f06f 0422 	mvn.w	r4, #34	; 0x22
 800cd56:	e013      	b.n	800cd80 <bt_pub_key_gen+0x8c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800cd58:	f3bf 8f5b 	dmb	ish
 800cd5c:	e853 2f00 	ldrex	r2, [r3]
 800cd60:	f022 0208 	bic.w	r2, r2, #8
 800cd64:	e843 2100 	strex	r1, r2, [r3]
 800cd68:	2900      	cmp	r1, #0
 800cd6a:	d1f7      	bne.n	800cd5c <bt_pub_key_gen+0x68>
 800cd6c:	f3bf 8f5b 	dmb	ish
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
 800cd70:	2200      	movs	r2, #0
 800cd72:	4611      	mov	r1, r2
 800cd74:	f242 0025 	movw	r0, #8229	; 0x2025
 800cd78:	f7fd ffbe 	bl	800acf8 <bt_hci_cmd_send_sync>
	if (err) {
 800cd7c:	4604      	mov	r4, r0
 800cd7e:	b908      	cbnz	r0, 800cd84 <bt_pub_key_gen+0x90>
		pub_key_cb = NULL;
		return err;
	}

	return 0;
}
 800cd80:	4620      	mov	r0, r4
 800cd82:	bd10      	pop	{r4, pc}
		BT_ERR("Sending LE P256 Public Key command failed");
 800cd84:	f04f 0100 	mov.w	r1, #0
 800cd88:	2301      	movs	r3, #1
 800cd8a:	f363 0102 	bfi	r1, r3, #0, #3
 800cd8e:	f36f 01c5 	bfc	r1, #3, #3
 800cd92:	4b10      	ldr	r3, [pc, #64]	; (800cdd4 <bt_pub_key_gen+0xe0>)
 800cd94:	4a10      	ldr	r2, [pc, #64]	; (800cdd8 <bt_pub_key_gen+0xe4>)
 800cd96:	1a9b      	subs	r3, r3, r2
 800cd98:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800cd9c:	f363 118f 	bfi	r1, r3, #6, #10
 800cda0:	480f      	ldr	r0, [pc, #60]	; (800cde0 <bt_pub_key_gen+0xec>)
 800cda2:	f7f7 fbd3 	bl	800454c <log_0>
 800cda6:	4b0a      	ldr	r3, [pc, #40]	; (800cdd0 <bt_pub_key_gen+0xdc>)
 800cda8:	f3bf 8f5b 	dmb	ish
 800cdac:	e853 2f00 	ldrex	r2, [r3]
 800cdb0:	f022 0210 	bic.w	r2, r2, #16
 800cdb4:	e843 2100 	strex	r1, r2, [r3]
 800cdb8:	2900      	cmp	r1, #0
 800cdba:	d1f7      	bne.n	800cdac <bt_pub_key_gen+0xb8>
 800cdbc:	f3bf 8f5b 	dmb	ish
		pub_key_cb = NULL;
 800cdc0:	4b02      	ldr	r3, [pc, #8]	; (800cdcc <bt_pub_key_gen+0xd8>)
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	601a      	str	r2, [r3, #0]
		return err;
 800cdc6:	e7db      	b.n	800cd80 <bt_pub_key_gen+0x8c>
 800cdc8:	20000000 	.word	0x20000000
 800cdcc:	20002080 	.word	0x20002080
 800cdd0:	20000094 	.word	0x20000094
 800cdd4:	0801d708 	.word	0x0801d708
 800cdd8:	0801d6d0 	.word	0x0801d6d0
 800cddc:	08020894 	.word	0x08020894
 800cde0:	080208b4 	.word	0x080208b4

0800cde4 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800cde4:	f3bf 8f5b 	dmb	ish
 800cde8:	4b05      	ldr	r3, [pc, #20]	; (800ce00 <bt_pub_key_get+0x1c>)
 800cdea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cdee:	f3bf 8f5b 	dmb	ish

const uint8_t *bt_pub_key_get(void)
{
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
 800cdf2:	f013 0f08 	tst.w	r3, #8
 800cdf6:	d001      	beq.n	800cdfc <bt_pub_key_get+0x18>
		return pub_key;
 800cdf8:	4802      	ldr	r0, [pc, #8]	; (800ce04 <bt_pub_key_get+0x20>)
	}

	return NULL;
}
 800cdfa:	4770      	bx	lr
	return NULL;
 800cdfc:	2000      	movs	r0, #0
 800cdfe:	4770      	bx	lr
 800ce00:	20000000 	.word	0x20000000
 800ce04:	20002040 	.word	0x20002040

0800ce08 <bt_dh_key_gen>:

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
 800ce08:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
 800ce0a:	4b20      	ldr	r3, [pc, #128]	; (800ce8c <bt_dh_key_gen+0x84>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	bb6b      	cbnz	r3, 800ce6c <bt_dh_key_gen+0x64>
 800ce10:	4605      	mov	r5, r0
 800ce12:	f3bf 8f5b 	dmb	ish
 800ce16:	4b1e      	ldr	r3, [pc, #120]	; (800ce90 <bt_dh_key_gen+0x88>)
 800ce18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ce1c:	f3bf 8f5b 	dmb	ish
 800ce20:	f013 0f10 	tst.w	r3, #16
 800ce24:	d122      	bne.n	800ce6c <bt_dh_key_gen+0x64>
 800ce26:	f3bf 8f5b 	dmb	ish
 800ce2a:	4b19      	ldr	r3, [pc, #100]	; (800ce90 <bt_dh_key_gen+0x88>)
 800ce2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ce30:	f3bf 8f5b 	dmb	ish
		return -EBUSY;
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
 800ce34:	f013 0f08 	tst.w	r3, #8
 800ce38:	d025      	beq.n	800ce86 <bt_dh_key_gen+0x7e>
		return -EADDRNOTAVAIL;
	}

	dh_key_cb = cb;
 800ce3a:	4b14      	ldr	r3, [pc, #80]	; (800ce8c <bt_dh_key_gen+0x84>)
 800ce3c:	6019      	str	r1, [r3, #0]

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
 800ce3e:	2140      	movs	r1, #64	; 0x40
 800ce40:	f242 0026 	movw	r0, #8230	; 0x2026
 800ce44:	f7fd ff1c 	bl	800ac80 <bt_hci_cmd_create>
	if (!buf) {
 800ce48:	4604      	mov	r4, r0
 800ce4a:	b190      	cbz	r0, 800ce72 <bt_dh_key_gen+0x6a>
		dh_key_cb = NULL;
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
 800ce4c:	2140      	movs	r1, #64	; 0x40
 800ce4e:	3008      	adds	r0, #8
 800ce50:	f00e f901 	bl	801b056 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
 800ce54:	2240      	movs	r2, #64	; 0x40
 800ce56:	4629      	mov	r1, r5
 800ce58:	f00b f810 	bl	8017e7c <memcpy>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	4621      	mov	r1, r4
 800ce60:	f242 0026 	movw	r0, #8230	; 0x2026
 800ce64:	f7fd ff48 	bl	800acf8 <bt_hci_cmd_send_sync>
	if (err) {
 800ce68:	b948      	cbnz	r0, 800ce7e <bt_dh_key_gen+0x76>
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
 800ce6a:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
 800ce6c:	f06f 000f 	mvn.w	r0, #15
 800ce70:	e7fb      	b.n	800ce6a <bt_dh_key_gen+0x62>
		dh_key_cb = NULL;
 800ce72:	4b06      	ldr	r3, [pc, #24]	; (800ce8c <bt_dh_key_gen+0x84>)
 800ce74:	2200      	movs	r2, #0
 800ce76:	601a      	str	r2, [r3, #0]
		return -ENOBUFS;
 800ce78:	f06f 0036 	mvn.w	r0, #54	; 0x36
 800ce7c:	e7f5      	b.n	800ce6a <bt_dh_key_gen+0x62>
		dh_key_cb = NULL;
 800ce7e:	4b03      	ldr	r3, [pc, #12]	; (800ce8c <bt_dh_key_gen+0x84>)
 800ce80:	2200      	movs	r2, #0
 800ce82:	601a      	str	r2, [r3, #0]
		return err;
 800ce84:	e7f1      	b.n	800ce6a <bt_dh_key_gen+0x62>
		return -EADDRNOTAVAIL;
 800ce86:	f06f 0030 	mvn.w	r0, #48	; 0x30
 800ce8a:	e7ee      	b.n	800ce6a <bt_dh_key_gen+0x62>
 800ce8c:	2000203c 	.word	0x2000203c
 800ce90:	20000000 	.word	0x20000000

0800ce94 <prng_reseed>:
#include "hci_core.h"

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
{
 800ce94:	b530      	push	{r4, r5, lr}
 800ce96:	b08f      	sub	sp, #60	; 0x3c
 800ce98:	4605      	mov	r5, r0
	uint8_t seed[32];
	int64_t extra;
	size_t i;
	int ret;

	for (i = 0; i < (sizeof(seed) / 8); i++) {
 800ce9a:	2400      	movs	r4, #0
 800ce9c:	2c03      	cmp	r4, #3
 800ce9e:	d815      	bhi.n	800cecc <prng_reseed+0x38>
		struct bt_hci_rp_le_rand *rp;
		struct net_buf *rsp;

		ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
 800cea0:	aa03      	add	r2, sp, #12
 800cea2:	2100      	movs	r1, #0
 800cea4:	f242 0018 	movw	r0, #8216	; 0x2018
 800cea8:	f7fd ff26 	bl	800acf8 <bt_hci_cmd_send_sync>
		if (ret) {
 800ceac:	4603      	mov	r3, r0
 800ceae:	b9f8      	cbnz	r0, 800cef0 <prng_reseed+0x5c>
			return ret;
		}

		rp = (void *)rsp->data;
 800ceb0:	9b03      	ldr	r3, [sp, #12]
 800ceb2:	6899      	ldr	r1, [r3, #8]
		memcpy(&seed[i * 8], rp->rand, 8);
 800ceb4:	2208      	movs	r2, #8
 800ceb6:	3101      	adds	r1, #1
 800ceb8:	ab06      	add	r3, sp, #24
 800ceba:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
 800cebe:	f00a ffdd 	bl	8017e7c <memcpy>

		net_buf_unref(rsp);
 800cec2:	9803      	ldr	r0, [sp, #12]
 800cec4:	f00e f87d 	bl	801afc2 <net_buf_unref>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
 800cec8:	3401      	adds	r4, #1
 800ceca:	e7e7      	b.n	800ce9c <prng_reseed+0x8>
	return z_impl_k_uptime_ticks();
 800cecc:	f010 f8be 	bl	801d04c <z_impl_k_uptime_ticks>
 800ced0:	220a      	movs	r2, #10
 800ced2:	2300      	movs	r3, #0
 800ced4:	f7f3 f958 	bl	8000188 <__aeabi_uldivmod>
	}

	extra = k_uptime_get();
 800ced8:	e9cd 0104 	strd	r0, r1, [sp, #16]

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
 800cedc:	2308      	movs	r3, #8
 800cede:	9300      	str	r3, [sp, #0]
 800cee0:	ab04      	add	r3, sp, #16
 800cee2:	2220      	movs	r2, #32
 800cee4:	a906      	add	r1, sp, #24
 800cee6:	4628      	mov	r0, r5
 800cee8:	f00a fd8d 	bl	8017a06 <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
 800ceec:	b118      	cbz	r0, 800cef6 <prng_reseed+0x62>
		BT_ERR("Failed to re-seed PRNG");
		return -EIO;
	}

	return 0;
 800ceee:	2300      	movs	r3, #0
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	b00f      	add	sp, #60	; 0x3c
 800cef4:	bd30      	pop	{r4, r5, pc}
		BT_ERR("Failed to re-seed PRNG");
 800cef6:	f04f 0100 	mov.w	r1, #0
 800cefa:	2301      	movs	r3, #1
 800cefc:	f363 0102 	bfi	r1, r3, #0, #3
 800cf00:	f36f 01c5 	bfc	r1, #3, #3
 800cf04:	4b06      	ldr	r3, [pc, #24]	; (800cf20 <prng_reseed+0x8c>)
 800cf06:	4a07      	ldr	r2, [pc, #28]	; (800cf24 <prng_reseed+0x90>)
 800cf08:	1a9b      	subs	r3, r3, r2
 800cf0a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800cf0e:	f363 118f 	bfi	r1, r3, #6, #10
 800cf12:	4805      	ldr	r0, [pc, #20]	; (800cf28 <prng_reseed+0x94>)
 800cf14:	f7f7 fb1a 	bl	800454c <log_0>
		return -EIO;
 800cf18:	f06f 0304 	mvn.w	r3, #4
 800cf1c:	e7e8      	b.n	800cef0 <prng_reseed+0x5c>
 800cf1e:	bf00      	nop
 800cf20:	0801d6e8 	.word	0x0801d6e8
 800cf24:	0801d6d0 	.word	0x0801d6d0
 800cf28:	080209d8 	.word	0x080209d8

0800cf2c <prng_init>:
	struct bt_hci_rp_le_rand *rp;
	struct net_buf *rsp;
	int ret;

	/* Check first that HCI_LE_Rand is supported */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
 800cf2c:	4b1b      	ldr	r3, [pc, #108]	; (800cf9c <prng_init+0x70>)
 800cf2e:	f993 3063 	ldrsb.w	r3, [r3, #99]	; 0x63
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	da2e      	bge.n	800cf94 <prng_init+0x68>
{
 800cf36:	b510      	push	{r4, lr}
 800cf38:	b082      	sub	sp, #8
		return -ENOTSUP;
	}

	ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
 800cf3a:	aa01      	add	r2, sp, #4
 800cf3c:	2100      	movs	r1, #0
 800cf3e:	f242 0018 	movw	r0, #8216	; 0x2018
 800cf42:	f7fd fed9 	bl	800acf8 <bt_hci_cmd_send_sync>
	if (ret) {
 800cf46:	b108      	cbz	r0, 800cf4c <prng_init+0x20>
		return -EIO;
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
 800cf48:	b002      	add	sp, #8
 800cf4a:	bd10      	pop	{r4, pc}
	rp = (void *)rsp->data;
 800cf4c:	9b01      	ldr	r3, [sp, #4]
 800cf4e:	6899      	ldr	r1, [r3, #8]
	ret = tc_hmac_prng_init(&prng, rp->rand, sizeof(rp->rand));
 800cf50:	2208      	movs	r2, #8
 800cf52:	3101      	adds	r1, #1
 800cf54:	4812      	ldr	r0, [pc, #72]	; (800cfa0 <prng_init+0x74>)
 800cf56:	f00a fd33 	bl	80179c0 <tc_hmac_prng_init>
 800cf5a:	4604      	mov	r4, r0
	net_buf_unref(rsp);
 800cf5c:	9801      	ldr	r0, [sp, #4]
 800cf5e:	f00e f830 	bl	801afc2 <net_buf_unref>
	if (ret == TC_CRYPTO_FAIL) {
 800cf62:	b11c      	cbz	r4, 800cf6c <prng_init+0x40>
	return prng_reseed(&prng);
 800cf64:	480e      	ldr	r0, [pc, #56]	; (800cfa0 <prng_init+0x74>)
 800cf66:	f7ff ff95 	bl	800ce94 <prng_reseed>
 800cf6a:	e7ed      	b.n	800cf48 <prng_init+0x1c>
		BT_ERR("Failed to initialize PRNG");
 800cf6c:	f04f 0100 	mov.w	r1, #0
 800cf70:	2301      	movs	r3, #1
 800cf72:	f363 0102 	bfi	r1, r3, #0, #3
 800cf76:	f36f 01c5 	bfc	r1, #3, #3
 800cf7a:	4b0a      	ldr	r3, [pc, #40]	; (800cfa4 <prng_init+0x78>)
 800cf7c:	4a0a      	ldr	r2, [pc, #40]	; (800cfa8 <prng_init+0x7c>)
 800cf7e:	1a9b      	subs	r3, r3, r2
 800cf80:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800cf84:	f363 118f 	bfi	r1, r3, #6, #10
 800cf88:	4808      	ldr	r0, [pc, #32]	; (800cfac <prng_init+0x80>)
 800cf8a:	f7f7 fadf 	bl	800454c <log_0>
		return -EIO;
 800cf8e:	f06f 0004 	mvn.w	r0, #4
 800cf92:	e7d9      	b.n	800cf48 <prng_init+0x1c>
		return -ENOTSUP;
 800cf94:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 800cf98:	4770      	bx	lr
 800cf9a:	bf00      	nop
 800cf9c:	20000000 	.word	0x20000000
 800cfa0:	20000d90 	.word	0x20000d90
 800cfa4:	0801d6e8 	.word	0x0801d6e8
 800cfa8:	0801d6d0 	.word	0x0801d6d0
 800cfac:	080209f0 	.word	0x080209f0

0800cfb0 <bt_rand>:

int bt_rand(void *buf, size_t len)
{
 800cfb0:	b538      	push	{r3, r4, r5, lr}
 800cfb2:	4604      	mov	r4, r0
 800cfb4:	460d      	mov	r5, r1
	int ret;

	ret = tc_hmac_prng_generate(buf, len, &prng);
 800cfb6:	4a0c      	ldr	r2, [pc, #48]	; (800cfe8 <bt_rand+0x38>)
 800cfb8:	f00a fd47 	bl	8017a4a <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
 800cfbc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800cfc0:	d003      	beq.n	800cfca <bt_rand+0x1a>
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
	}

	if (ret == TC_CRYPTO_SUCCESS) {
 800cfc2:	2801      	cmp	r0, #1
 800cfc4:	d10c      	bne.n	800cfe0 <bt_rand+0x30>
		return 0;
 800cfc6:	2000      	movs	r0, #0
	}

	return -EIO;
}
 800cfc8:	bd38      	pop	{r3, r4, r5, pc}
		ret = prng_reseed(&prng);
 800cfca:	4807      	ldr	r0, [pc, #28]	; (800cfe8 <bt_rand+0x38>)
 800cfcc:	f7ff ff62 	bl	800ce94 <prng_reseed>
		if (ret) {
 800cfd0:	2800      	cmp	r0, #0
 800cfd2:	d1f9      	bne.n	800cfc8 <bt_rand+0x18>
		ret = tc_hmac_prng_generate(buf, len, &prng);
 800cfd4:	4a04      	ldr	r2, [pc, #16]	; (800cfe8 <bt_rand+0x38>)
 800cfd6:	4629      	mov	r1, r5
 800cfd8:	4620      	mov	r0, r4
 800cfda:	f00a fd36 	bl	8017a4a <tc_hmac_prng_generate>
 800cfde:	e7f0      	b.n	800cfc2 <bt_rand+0x12>
	return -EIO;
 800cfe0:	f06f 0004 	mvn.w	r0, #4
 800cfe4:	e7f0      	b.n	800cfc8 <bt_rand+0x18>
 800cfe6:	bf00      	nop
 800cfe8:	20000d90 	.word	0x20000d90

0800cfec <notify_disconnected>:
		bt_gatt_connected(conn);
	}
}

static void notify_disconnected(struct bt_conn *conn)
{
 800cfec:	b538      	push	{r3, r4, r5, lr}
 800cfee:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
 800cff0:	4b06      	ldr	r3, [pc, #24]	; (800d00c <notify_disconnected+0x20>)
 800cff2:	681c      	ldr	r4, [r3, #0]
 800cff4:	e000      	b.n	800cff8 <notify_disconnected+0xc>
 800cff6:	69e4      	ldr	r4, [r4, #28]
 800cff8:	b134      	cbz	r4, 800d008 <notify_disconnected+0x1c>
		if (cb->disconnected) {
 800cffa:	6863      	ldr	r3, [r4, #4]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d0fa      	beq.n	800cff6 <notify_disconnected+0xa>
			cb->disconnected(conn, conn->err);
 800d000:	7b29      	ldrb	r1, [r5, #12]
 800d002:	4628      	mov	r0, r5
 800d004:	4798      	blx	r3
 800d006:	e7f6      	b.n	800cff6 <notify_disconnected+0xa>
		}
	}
}
 800d008:	bd38      	pop	{r3, r4, r5, pc}
 800d00a:	bf00      	nop
 800d00c:	2000208c 	.word	0x2000208c

0800d010 <tx_free>:
	 */
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
 800d010:	b508      	push	{r3, lr}
 800d012:	4601      	mov	r1, r0
	tx->cb = NULL;
 800d014:	2300      	movs	r3, #0
 800d016:	6043      	str	r3, [r0, #4]
	tx->user_data = NULL;
 800d018:	6083      	str	r3, [r0, #8]
	tx->pending_no_cb = 0U;
 800d01a:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
 800d01c:	4801      	ldr	r0, [pc, #4]	; (800d024 <tx_free+0x14>)
 800d01e:	f00f fd25 	bl	801ca6c <k_queue_append>
}
 800d022:	bd08      	pop	{r3, pc}
 800d024:	20000868 	.word	0x20000868

0800d028 <conn_tx_alloc>:
	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);
	bt_l2cap_recv(conn, buf);
}

static struct bt_conn_tx *conn_tx_alloc(void)
{
 800d028:	b508      	push	{r3, lr}
	return z_impl_k_current_get();
 800d02a:	f007 f9fb 	bl	8014424 <z_impl_k_current_get>
	/* The TX context always get freed in the system workqueue,
	 * so if we're in the same workqueue but there are no immediate
	 * contexts available, there's no chance we'll get one by waiting.
	 */
	if (k_current_get() == &k_sys_work_q.thread) {
 800d02e:	4b08      	ldr	r3, [pc, #32]	; (800d050 <conn_tx_alloc+0x28>)
 800d030:	4283      	cmp	r3, r0
 800d032:	d007      	beq.n	800d044 <conn_tx_alloc+0x1c>
	return z_impl_k_queue_get(queue, timeout);
 800d034:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d038:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d03c:	4805      	ldr	r0, [pc, #20]	; (800d054 <conn_tx_alloc+0x2c>)
 800d03e:	f006 fe87 	bl	8013d50 <z_impl_k_queue_get>

		BT_WARN("Unable to get an immediate free conn_tx");
	}

	return k_fifo_get(&free_tx, K_FOREVER);
}
 800d042:	bd08      	pop	{r3, pc}
 800d044:	2200      	movs	r2, #0
 800d046:	2300      	movs	r3, #0
 800d048:	4802      	ldr	r0, [pc, #8]	; (800d054 <conn_tx_alloc+0x2c>)
 800d04a:	f006 fe81 	bl	8013d50 <z_impl_k_queue_get>
 800d04e:	e7f8      	b.n	800d042 <conn_tx_alloc+0x1a>
 800d050:	20001420 	.word	0x20001420
 800d054:	20000868 	.word	0x20000868

0800d058 <notify_connected>:
{
 800d058:	b538      	push	{r3, r4, r5, lr}
 800d05a:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
 800d05c:	4b09      	ldr	r3, [pc, #36]	; (800d084 <notify_connected+0x2c>)
 800d05e:	681c      	ldr	r4, [r3, #0]
 800d060:	e000      	b.n	800d064 <notify_connected+0xc>
 800d062:	69e4      	ldr	r4, [r4, #28]
 800d064:	b134      	cbz	r4, 800d074 <notify_connected+0x1c>
		if (cb->connected) {
 800d066:	6823      	ldr	r3, [r4, #0]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d0fa      	beq.n	800d062 <notify_connected+0xa>
			cb->connected(conn, conn->err);
 800d06c:	7b29      	ldrb	r1, [r5, #12]
 800d06e:	4628      	mov	r0, r5
 800d070:	4798      	blx	r3
 800d072:	e7f6      	b.n	800d062 <notify_connected+0xa>
	if (!conn->err) {
 800d074:	7b2b      	ldrb	r3, [r5, #12]
 800d076:	b103      	cbz	r3, 800d07a <notify_connected+0x22>
}
 800d078:	bd38      	pop	{r3, r4, r5, pc}
		bt_gatt_connected(conn);
 800d07a:	4628      	mov	r0, r5
 800d07c:	f003 fb8a 	bl	8010794 <bt_gatt_connected>
}
 800d080:	e7fa      	b.n	800d078 <notify_connected+0x20>
 800d082:	bf00      	nop
 800d084:	2000208c 	.word	0x2000208c

0800d088 <bt_conn_get_pkts>:
}
 800d088:	4800      	ldr	r0, [pc, #0]	; (800d08c <bt_conn_get_pkts+0x4>)
 800d08a:	4770      	bx	lr
 800d08c:	200000c8 	.word	0x200000c8

0800d090 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
 800d090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d094:	4605      	mov	r5, r0
 800d096:	460e      	mov	r6, r1
 800d098:	4691      	mov	r9, r2
 800d09a:	461c      	mov	r4, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
 800d09c:	694f      	ldr	r7, [r1, #20]

	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
	       flags);

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
 800d09e:	f7ff fff3 	bl	800d088 <bt_conn_get_pkts>
 800d0a2:	4680      	mov	r8, r0
	return z_impl_k_sem_take(sem, timeout);
 800d0a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d0a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0ac:	f007 f9e8 	bl	8014480 <z_impl_k_sem_take>

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
 800d0b0:	7b6b      	ldrb	r3, [r5, #13]
 800d0b2:	2b07      	cmp	r3, #7
 800d0b4:	d15a      	bne.n	800d16c <send_frag+0xdc>
	__asm__ volatile(
 800d0b6:	f04f 0210 	mov.w	r2, #16
 800d0ba:	f3ef 8311 	mrs	r3, BASEPRI
 800d0be:	f382 8811 	msr	BASEPRI, r2
 800d0c2:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
 800d0c6:	b1af      	cbz	r7, 800d0f4 <send_frag+0x64>
	parent->next = child;
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	603a      	str	r2, [r7, #0]
	return list->tail;
 800d0cc:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_APPEND(slist, snode)
 800d0ce:	b172      	cbz	r2, 800d0ee <send_frag+0x5e>
	parent->next = child;
 800d0d0:	6017      	str	r7, [r2, #0]
	list->tail = node;
 800d0d2:	61af      	str	r7, [r5, #24]
	__asm__ volatile(
 800d0d4:	f383 8811 	msr	BASEPRI, r3
 800d0d8:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	if (IS_ENABLED(CONFIG_BT_ISO) && conn->type == BT_CONN_TYPE_ISO) {
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
 800d0dc:	464a      	mov	r2, r9
 800d0de:	4631      	mov	r1, r6
 800d0e0:	4628      	mov	r0, r5
 800d0e2:	f00b fbd4 	bl	801888e <send_acl>
	}

	if (err) {
 800d0e6:	4601      	mov	r1, r0
 800d0e8:	b988      	cbnz	r0, 800d10e <send_frag+0x7e>
		}
		irq_unlock(key);
		goto fail;
	}

	return true;
 800d0ea:	2001      	movs	r0, #1
 800d0ec:	e047      	b.n	800d17e <send_frag+0xee>
 800d0ee:	61af      	str	r7, [r5, #24]
	list->head = node;
 800d0f0:	616f      	str	r7, [r5, #20]
}
 800d0f2:	e7ef      	b.n	800d0d4 <send_frag+0x44>
	return list->tail;
 800d0f4:	69aa      	ldr	r2, [r5, #24]
		if (tail_tx) {
 800d0f6:	b13a      	cbz	r2, 800d108 <send_frag+0x78>
			pending_no_cb = &tail_tx->pending_no_cb;
 800d0f8:	f102 0a0c 	add.w	sl, r2, #12
		(*pending_no_cb)++;
 800d0fc:	f8da 2000 	ldr.w	r2, [sl]
 800d100:	3201      	adds	r2, #1
 800d102:	f8ca 2000 	str.w	r2, [sl]
 800d106:	e7e5      	b.n	800d0d4 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
 800d108:	f105 0a1c 	add.w	sl, r5, #28
 800d10c:	e7f6      	b.n	800d0fc <send_frag+0x6c>
		BT_ERR("Unable to send to driver (err %d)", err);
 800d10e:	f04f 0200 	mov.w	r2, #0
 800d112:	2301      	movs	r3, #1
 800d114:	f363 0202 	bfi	r2, r3, #0, #3
 800d118:	f36f 02c5 	bfc	r2, #3, #3
 800d11c:	4b23      	ldr	r3, [pc, #140]	; (800d1ac <send_frag+0x11c>)
 800d11e:	4824      	ldr	r0, [pc, #144]	; (800d1b0 <send_frag+0x120>)
 800d120:	1a1b      	subs	r3, r3, r0
 800d122:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800d126:	f363 128f 	bfi	r2, r3, #6, #10
 800d12a:	4822      	ldr	r0, [pc, #136]	; (800d1b4 <send_frag+0x124>)
 800d12c:	f7f7 f89e 	bl	800426c <log_1>
	__asm__ volatile(
 800d130:	f04f 0310 	mov.w	r3, #16
 800d134:	f3ef 8011 	mrs	r0, BASEPRI
 800d138:	f383 8811 	msr	BASEPRI, r3
 800d13c:	f3bf 8f6f 	isb	sy
		if (tx) {
 800d140:	b347      	cbz	r7, 800d194 <send_frag+0x104>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
 800d142:	4639      	mov	r1, r7
	return list->head;
 800d144:	696b      	ldr	r3, [r5, #20]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800d146:	2200      	movs	r2, #0
 800d148:	b163      	cbz	r3, 800d164 <send_frag+0xd4>
 800d14a:	4299      	cmp	r1, r3
 800d14c:	d002      	beq.n	800d154 <send_frag+0xc4>
 800d14e:	461a      	mov	r2, r3
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	e7f9      	b.n	800d148 <send_frag+0xb8>
Z_GENLIST_REMOVE(slist, snode)
 800d154:	b1aa      	cbz	r2, 800d182 <send_frag+0xf2>
	return node->next;
 800d156:	683b      	ldr	r3, [r7, #0]
	parent->next = child;
 800d158:	6013      	str	r3, [r2, #0]
	return list->tail;
 800d15a:	69ab      	ldr	r3, [r5, #24]
Z_GENLIST_REMOVE(slist, snode)
 800d15c:	429f      	cmp	r7, r3
 800d15e:	d017      	beq.n	800d190 <send_frag+0x100>
	parent->next = child;
 800d160:	2300      	movs	r3, #0
 800d162:	603b      	str	r3, [r7, #0]
	__asm__ volatile(
 800d164:	f380 8811 	msr	BASEPRI, r0
 800d168:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
 800d16c:	4640      	mov	r0, r8
 800d16e:	f007 f95f 	bl	8014430 <z_impl_k_sem_give>

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
 800d172:	b117      	cbz	r7, 800d17a <send_frag+0xea>
		tx_free(tx);
 800d174:	4638      	mov	r0, r7
 800d176:	f7ff ff4b 	bl	800d010 <tx_free>
	}

	if (always_consume) {
 800d17a:	b98c      	cbnz	r4, 800d1a0 <send_frag+0x110>
		net_buf_unref(buf);
	}
	return false;
 800d17c:	4620      	mov	r0, r4
}
 800d17e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next;
 800d182:	683b      	ldr	r3, [r7, #0]
	list->head = node;
 800d184:	616b      	str	r3, [r5, #20]
	return list->tail;
 800d186:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_REMOVE(slist, snode)
 800d188:	4297      	cmp	r7, r2
 800d18a:	d1e9      	bne.n	800d160 <send_frag+0xd0>
	list->tail = node;
 800d18c:	61ab      	str	r3, [r5, #24]
}
 800d18e:	e7e7      	b.n	800d160 <send_frag+0xd0>
	list->tail = node;
 800d190:	61aa      	str	r2, [r5, #24]
}
 800d192:	e7e5      	b.n	800d160 <send_frag+0xd0>
			(*pending_no_cb)--;
 800d194:	f8da 3000 	ldr.w	r3, [sl]
 800d198:	3b01      	subs	r3, #1
 800d19a:	f8ca 3000 	str.w	r3, [sl]
 800d19e:	e7e1      	b.n	800d164 <send_frag+0xd4>
		net_buf_unref(buf);
 800d1a0:	4630      	mov	r0, r6
 800d1a2:	f00d ff0e 	bl	801afc2 <net_buf_unref>
	return false;
 800d1a6:	2000      	movs	r0, #0
 800d1a8:	e7e9      	b.n	800d17e <send_frag+0xee>
 800d1aa:	bf00      	nop
 800d1ac:	0801d6e0 	.word	0x0801d6e0
 800d1b0:	0801d6d0 	.word	0x0801d6d0
 800d1b4:	080205fc 	.word	0x080205fc

0800d1b8 <notify_le_param_updated>:
{
 800d1b8:	b570      	push	{r4, r5, r6, lr}
 800d1ba:	4605      	mov	r5, r0
 800d1bc:	f3bf 8f5b 	dmb	ish
 800d1c0:	6843      	ldr	r3, [r0, #4]
 800d1c2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
 800d1c6:	f413 7f00 	tst.w	r3, #512	; 0x200
 800d1ca:	d010      	beq.n	800d1ee <notify_le_param_updated+0x36>
 800d1cc:	1d02      	adds	r2, r0, #4
	    conn->le.interval >= conn->le.interval_min &&
 800d1ce:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
 800d1d2:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
 800d1d6:	428b      	cmp	r3, r1
 800d1d8:	d309      	bcc.n	800d1ee <notify_le_param_updated+0x36>
	    conn->le.interval <= conn->le.interval_max &&
 800d1da:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
	    conn->le.interval >= conn->le.interval_min &&
 800d1de:	428b      	cmp	r3, r1
 800d1e0:	d805      	bhi.n	800d1ee <notify_le_param_updated+0x36>
	    conn->le.latency == conn->le.pending_latency &&
 800d1e2:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
 800d1e6:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
 800d1ea:	4299      	cmp	r1, r3
 800d1ec:	d002      	beq.n	800d1f4 <notify_le_param_updated+0x3c>
	for (cb = callback_list; cb; cb = cb->_next) {
 800d1ee:	4b0f      	ldr	r3, [pc, #60]	; (800d22c <notify_le_param_updated+0x74>)
 800d1f0:	681c      	ldr	r4, [r3, #0]
 800d1f2:	e00d      	b.n	800d210 <notify_le_param_updated+0x58>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800d1f4:	f3bf 8f5b 	dmb	ish
 800d1f8:	e852 3f00 	ldrex	r3, [r2]
 800d1fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d200:	e842 3100 	strex	r1, r3, [r2]
 800d204:	2900      	cmp	r1, #0
 800d206:	d1f7      	bne.n	800d1f8 <notify_le_param_updated+0x40>
 800d208:	f3bf 8f5b 	dmb	ish
}
 800d20c:	e7ef      	b.n	800d1ee <notify_le_param_updated+0x36>
 800d20e:	69e4      	ldr	r4, [r4, #28]
 800d210:	b15c      	cbz	r4, 800d22a <notify_le_param_updated+0x72>
		if (cb->le_param_updated) {
 800d212:	68e6      	ldr	r6, [r4, #12]
 800d214:	2e00      	cmp	r6, #0
 800d216:	d0fa      	beq.n	800d20e <notify_le_param_updated+0x56>
			cb->le_param_updated(conn, conn->le.interval,
 800d218:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 800d21c:	f8b5 20a4 	ldrh.w	r2, [r5, #164]	; 0xa4
 800d220:	f8b5 109e 	ldrh.w	r1, [r5, #158]	; 0x9e
 800d224:	4628      	mov	r0, r5
 800d226:	47b0      	blx	r6
 800d228:	e7f1      	b.n	800d20e <notify_le_param_updated+0x56>
}
 800d22a:	bd70      	pop	{r4, r5, r6, pc}
 800d22c:	2000208c 	.word	0x2000208c

0800d230 <notify_le_phy_updated>:
{
 800d230:	b538      	push	{r3, r4, r5, lr}
 800d232:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
 800d234:	4b06      	ldr	r3, [pc, #24]	; (800d250 <notify_le_phy_updated+0x20>)
 800d236:	681c      	ldr	r4, [r3, #0]
 800d238:	e000      	b.n	800d23c <notify_le_phy_updated+0xc>
 800d23a:	69e4      	ldr	r4, [r4, #28]
 800d23c:	b13c      	cbz	r4, 800d24e <notify_le_phy_updated+0x1e>
		if (cb->le_phy_updated) {
 800d23e:	69a3      	ldr	r3, [r4, #24]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d0fa      	beq.n	800d23a <notify_le_phy_updated+0xa>
			cb->le_phy_updated(conn, &conn->le.phy);
 800d244:	f105 01b8 	add.w	r1, r5, #184	; 0xb8
 800d248:	4628      	mov	r0, r5
 800d24a:	4798      	blx	r3
 800d24c:	e7f5      	b.n	800d23a <notify_le_phy_updated+0xa>
}
 800d24e:	bd38      	pop	{r3, r4, r5, pc}
 800d250:	2000208c 	.word	0x2000208c

0800d254 <le_param_req>:
{
 800d254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d256:	4606      	mov	r6, r0
 800d258:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
 800d25a:	4608      	mov	r0, r1
 800d25c:	f00b f85b 	bl	8018316 <bt_le_conn_params_valid>
 800d260:	4607      	mov	r7, r0
 800d262:	b198      	cbz	r0, 800d28c <le_param_req+0x38>
	for (cb = callback_list; cb; cb = cb->_next) {
 800d264:	4b0a      	ldr	r3, [pc, #40]	; (800d290 <le_param_req+0x3c>)
 800d266:	681c      	ldr	r4, [r3, #0]
 800d268:	e000      	b.n	800d26c <le_param_req+0x18>
 800d26a:	69e4      	ldr	r4, [r4, #28]
 800d26c:	b174      	cbz	r4, 800d28c <le_param_req+0x38>
		if (!cb->le_param_req) {
 800d26e:	68a3      	ldr	r3, [r4, #8]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d0fa      	beq.n	800d26a <le_param_req+0x16>
		if (!cb->le_param_req(conn, param)) {
 800d274:	4629      	mov	r1, r5
 800d276:	4630      	mov	r0, r6
 800d278:	4798      	blx	r3
 800d27a:	b130      	cbz	r0, 800d28a <le_param_req+0x36>
		if (!bt_le_conn_params_valid(param)) {
 800d27c:	4628      	mov	r0, r5
 800d27e:	f00b f84a 	bl	8018316 <bt_le_conn_params_valid>
 800d282:	2800      	cmp	r0, #0
 800d284:	d1f1      	bne.n	800d26a <le_param_req+0x16>
			return false;
 800d286:	4607      	mov	r7, r0
 800d288:	e000      	b.n	800d28c <le_param_req+0x38>
			return false;
 800d28a:	4607      	mov	r7, r0
}
 800d28c:	4638      	mov	r0, r7
 800d28e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d290:	2000208c 	.word	0x2000208c

0800d294 <acl_conn_new>:
{
 800d294:	b510      	push	{r4, lr}
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
 800d296:	2101      	movs	r1, #1
 800d298:	4807      	ldr	r0, [pc, #28]	; (800d2b8 <acl_conn_new+0x24>)
 800d29a:	f00b fb5b 	bl	8018954 <bt_conn_new>
	if (!conn) {
 800d29e:	4604      	mov	r4, r0
 800d2a0:	b140      	cbz	r0, 800d2b4 <acl_conn_new+0x20>
	k_delayed_work_init(&conn->update_work, conn_update_timeout);
 800d2a2:	4906      	ldr	r1, [pc, #24]	; (800d2bc <acl_conn_new+0x28>)
 800d2a4:	3058      	adds	r0, #88	; 0x58
 800d2a6:	f00f fe3f 	bl	801cf28 <k_delayed_work_init>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	62a3      	str	r3, [r4, #40]	; 0x28
 800d2ae:	4a04      	ldr	r2, [pc, #16]	; (800d2c0 <acl_conn_new+0x2c>)
 800d2b0:	62e2      	str	r2, [r4, #44]	; 0x2c
 800d2b2:	6323      	str	r3, [r4, #48]	; 0x30
}
 800d2b4:	4620      	mov	r0, r4
 800d2b6:	bd10      	pop	{r4, pc}
 800d2b8:	20000ec8 	.word	0x20000ec8
 800d2bc:	08018ba5 	.word	0x08018ba5
 800d2c0:	08018885 	.word	0x08018885

0800d2c4 <bt_conn_identity_resolved>:
{
 800d2c4:	b570      	push	{r4, r5, r6, lr}
 800d2c6:	4605      	mov	r5, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
 800d2c8:	78c3      	ldrb	r3, [r0, #3]
 800d2ca:	b923      	cbnz	r3, 800d2d6 <bt_conn_identity_resolved+0x12>
		rpa = &conn->le.resp_addr;
 800d2cc:	f100 0696 	add.w	r6, r0, #150	; 0x96
	for (cb = callback_list; cb; cb = cb->_next) {
 800d2d0:	4b08      	ldr	r3, [pc, #32]	; (800d2f4 <bt_conn_identity_resolved+0x30>)
 800d2d2:	681c      	ldr	r4, [r3, #0]
 800d2d4:	e003      	b.n	800d2de <bt_conn_identity_resolved+0x1a>
		rpa = &conn->le.init_addr;
 800d2d6:	f100 068f 	add.w	r6, r0, #143	; 0x8f
 800d2da:	e7f9      	b.n	800d2d0 <bt_conn_identity_resolved+0xc>
	for (cb = callback_list; cb; cb = cb->_next) {
 800d2dc:	69e4      	ldr	r4, [r4, #28]
 800d2de:	b144      	cbz	r4, 800d2f2 <bt_conn_identity_resolved+0x2e>
		if (cb->identity_resolved) {
 800d2e0:	6923      	ldr	r3, [r4, #16]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d0fa      	beq.n	800d2dc <bt_conn_identity_resolved+0x18>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
 800d2e6:	f105 0288 	add.w	r2, r5, #136	; 0x88
 800d2ea:	4631      	mov	r1, r6
 800d2ec:	4628      	mov	r0, r5
 800d2ee:	4798      	blx	r3
 800d2f0:	e7f4      	b.n	800d2dc <bt_conn_identity_resolved+0x18>
}
 800d2f2:	bd70      	pop	{r4, r5, r6, pc}
 800d2f4:	2000208c 	.word	0x2000208c

0800d2f8 <bt_conn_security_changed>:
{
 800d2f8:	b570      	push	{r4, r5, r6, lr}
 800d2fa:	4605      	mov	r5, r0
 800d2fc:	460c      	mov	r4, r1
 800d2fe:	4616      	mov	r6, r2
	reset_pairing(conn);
 800d300:	f00b fa94 	bl	801882c <reset_pairing>
	bt_l2cap_security_changed(conn, hci_err);
 800d304:	4621      	mov	r1, r4
 800d306:	4628      	mov	r0, r5
 800d308:	f00b fd8e 	bl	8018e28 <bt_l2cap_security_changed>
	for (cb = callback_list; cb; cb = cb->_next) {
 800d30c:	4b06      	ldr	r3, [pc, #24]	; (800d328 <bt_conn_security_changed+0x30>)
 800d30e:	681c      	ldr	r4, [r3, #0]
 800d310:	e000      	b.n	800d314 <bt_conn_security_changed+0x1c>
 800d312:	69e4      	ldr	r4, [r4, #28]
 800d314:	b13c      	cbz	r4, 800d326 <bt_conn_security_changed+0x2e>
		if (cb->security_changed) {
 800d316:	6963      	ldr	r3, [r4, #20]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d0fa      	beq.n	800d312 <bt_conn_security_changed+0x1a>
			cb->security_changed(conn, conn->sec_level, err);
 800d31c:	4632      	mov	r2, r6
 800d31e:	7a69      	ldrb	r1, [r5, #9]
 800d320:	4628      	mov	r0, r5
 800d322:	4798      	blx	r3
 800d324:	e7f5      	b.n	800d312 <bt_conn_security_changed+0x1a>
}
 800d326:	bd70      	pop	{r4, r5, r6, pc}
 800d328:	2000208c 	.word	0x2000208c

0800d32c <bt_conn_cb_register>:
	cb->_next = callback_list;
 800d32c:	4b02      	ldr	r3, [pc, #8]	; (800d338 <bt_conn_cb_register+0xc>)
 800d32e:	681a      	ldr	r2, [r3, #0]
 800d330:	61c2      	str	r2, [r0, #28]
	callback_list = cb;
 800d332:	6018      	str	r0, [r3, #0]
}
 800d334:	4770      	bx	lr
 800d336:	bf00      	nop
 800d338:	2000208c 	.word	0x2000208c

0800d33c <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
 800d33c:	b538      	push	{r3, r4, r5, lr}
 800d33e:	4605      	mov	r5, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
 800d340:	e004      	b.n	800d34c <conn_cleanup+0x10>
		if (tx_data(buf)->tx) {
			tx_free(tx_data(buf)->tx);
 800d342:	f7ff fe65 	bl	800d010 <tx_free>
		}

		net_buf_unref(buf);
 800d346:	4620      	mov	r0, r4
 800d348:	f00d fe3b 	bl	801afc2 <net_buf_unref>
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
 800d34c:	2200      	movs	r2, #0
 800d34e:	2300      	movs	r3, #0
 800d350:	f105 0034 	add.w	r0, r5, #52	; 0x34
 800d354:	f00d fe09 	bl	801af6a <net_buf_get>
 800d358:	4604      	mov	r4, r0
 800d35a:	b118      	cbz	r0, 800d364 <conn_cleanup+0x28>
		if (tx_data(buf)->tx) {
 800d35c:	6960      	ldr	r0, [r4, #20]
 800d35e:	2800      	cmp	r0, #0
 800d360:	d1ef      	bne.n	800d342 <conn_cleanup+0x6>
 800d362:	e7f0      	b.n	800d346 <conn_cleanup+0xa>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);

	bt_conn_reset_rx_state(conn);
 800d364:	4628      	mov	r0, r5
 800d366:	f00b fb55 	bl	8018a14 <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
 800d36a:	2200      	movs	r2, #0
 800d36c:	2300      	movs	r3, #0
 800d36e:	f105 0158 	add.w	r1, r5, #88	; 0x58
 800d372:	4802      	ldr	r0, [pc, #8]	; (800d37c <conn_cleanup+0x40>)
 800d374:	f007 f970 	bl	8014658 <k_delayed_work_submit_to_queue>

	k_delayed_work_submit(&conn->update_work, K_NO_WAIT);
}
 800d378:	bd38      	pop	{r3, r4, r5, pc}
 800d37a:	bf00      	nop
 800d37c:	20001408 	.word	0x20001408

0800d380 <bt_conn_recv>:
{
 800d380:	b570      	push	{r4, r5, r6, lr}
 800d382:	4604      	mov	r4, r0
 800d384:	460e      	mov	r6, r1
 800d386:	4615      	mov	r5, r2
	tx_notify(conn);
 800d388:	f00b fa57 	bl	801883a <tx_notify>
	switch (flags) {
 800d38c:	2d01      	cmp	r5, #1
 800d38e:	d02c      	beq.n	800d3ea <bt_conn_recv+0x6a>
 800d390:	2d02      	cmp	r5, #2
 800d392:	d171      	bne.n	800d478 <bt_conn_recv+0xf8>
		if (conn->rx) {
 800d394:	6923      	ldr	r3, [r4, #16]
 800d396:	b19b      	cbz	r3, 800d3c0 <bt_conn_recv+0x40>
			BT_ERR("Unexpected first L2CAP frame");
 800d398:	f04f 0100 	mov.w	r1, #0
 800d39c:	2301      	movs	r3, #1
 800d39e:	f363 0102 	bfi	r1, r3, #0, #3
 800d3a2:	f36f 01c5 	bfc	r1, #3, #3
 800d3a6:	4b4c      	ldr	r3, [pc, #304]	; (800d4d8 <bt_conn_recv+0x158>)
 800d3a8:	4a4c      	ldr	r2, [pc, #304]	; (800d4dc <bt_conn_recv+0x15c>)
 800d3aa:	1a9b      	subs	r3, r3, r2
 800d3ac:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800d3b0:	f363 118f 	bfi	r1, r3, #6, #10
 800d3b4:	484a      	ldr	r0, [pc, #296]	; (800d4e0 <bt_conn_recv+0x160>)
 800d3b6:	f7f7 f8c9 	bl	800454c <log_0>
			bt_conn_reset_rx_state(conn);
 800d3ba:	4620      	mov	r0, r4
 800d3bc:	f00b fb2a 	bl	8018a14 <bt_conn_reset_rx_state>
		conn->rx = buf;
 800d3c0:	6126      	str	r6, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
 800d3c2:	6921      	ldr	r1, [r4, #16]
 800d3c4:	8988      	ldrh	r0, [r1, #12]
 800d3c6:	2801      	cmp	r0, #1
 800d3c8:	d96e      	bls.n	800d4a8 <bt_conn_recv+0x128>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
 800d3ca:	688b      	ldr	r3, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
 800d3cc:	785d      	ldrb	r5, [r3, #1]
 800d3ce:	781a      	ldrb	r2, [r3, #0]
 800d3d0:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800d3d4:	3204      	adds	r2, #4
 800d3d6:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
 800d3d8:	4282      	cmp	r2, r0
 800d3da:	d865      	bhi.n	800d4a8 <bt_conn_recv+0x128>
	if (conn->rx->len > acl_total_len) {
 800d3dc:	d365      	bcc.n	800d4aa <bt_conn_recv+0x12a>
	conn->rx = NULL;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf);
 800d3e2:	4620      	mov	r0, r4
 800d3e4:	f000 fe7e 	bl	800e0e4 <bt_l2cap_recv>
 800d3e8:	e05e      	b.n	800d4a8 <bt_conn_recv+0x128>
		if (!conn->rx) {
 800d3ea:	6920      	ldr	r0, [r4, #16]
 800d3ec:	b180      	cbz	r0, 800d410 <bt_conn_recv+0x90>
		if (!buf->len) {
 800d3ee:	89b5      	ldrh	r5, [r6, #12]
 800d3f0:	b335      	cbz	r5, 800d440 <bt_conn_recv+0xc0>
		if (buf->len > net_buf_tailroom(conn->rx)) {
 800d3f2:	3008      	adds	r0, #8
 800d3f4:	f00d fe6b 	bl	801b0ce <net_buf_simple_tailroom>
 800d3f8:	4285      	cmp	r5, r0
 800d3fa:	d825      	bhi.n	800d448 <bt_conn_recv+0xc8>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
 800d3fc:	6920      	ldr	r0, [r4, #16]
 800d3fe:	89b2      	ldrh	r2, [r6, #12]
 800d400:	68b1      	ldr	r1, [r6, #8]
 800d402:	3008      	adds	r0, #8
 800d404:	f00d fe2d 	bl	801b062 <net_buf_simple_add_mem>
		net_buf_unref(buf);
 800d408:	4630      	mov	r0, r6
 800d40a:	f00d fdda 	bl	801afc2 <net_buf_unref>
		break;
 800d40e:	e7d8      	b.n	800d3c2 <bt_conn_recv+0x42>
			BT_ERR("Unexpected L2CAP continuation");
 800d410:	f04f 0100 	mov.w	r1, #0
 800d414:	2301      	movs	r3, #1
 800d416:	f363 0102 	bfi	r1, r3, #0, #3
 800d41a:	f36f 01c5 	bfc	r1, #3, #3
 800d41e:	4b2e      	ldr	r3, [pc, #184]	; (800d4d8 <bt_conn_recv+0x158>)
 800d420:	4a2e      	ldr	r2, [pc, #184]	; (800d4dc <bt_conn_recv+0x15c>)
 800d422:	1a9b      	subs	r3, r3, r2
 800d424:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800d428:	f363 118f 	bfi	r1, r3, #6, #10
 800d42c:	482d      	ldr	r0, [pc, #180]	; (800d4e4 <bt_conn_recv+0x164>)
 800d42e:	f7f7 f88d 	bl	800454c <log_0>
			bt_conn_reset_rx_state(conn);
 800d432:	4620      	mov	r0, r4
 800d434:	f00b faee 	bl	8018a14 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
 800d438:	4630      	mov	r0, r6
 800d43a:	f00d fdc2 	bl	801afc2 <net_buf_unref>
			return;
 800d43e:	e033      	b.n	800d4a8 <bt_conn_recv+0x128>
			net_buf_unref(buf);
 800d440:	4630      	mov	r0, r6
 800d442:	f00d fdbe 	bl	801afc2 <net_buf_unref>
			return;
 800d446:	e02f      	b.n	800d4a8 <bt_conn_recv+0x128>
			BT_ERR("Not enough buffer space for L2CAP data");
 800d448:	f04f 0100 	mov.w	r1, #0
 800d44c:	2301      	movs	r3, #1
 800d44e:	f363 0102 	bfi	r1, r3, #0, #3
 800d452:	f36f 01c5 	bfc	r1, #3, #3
 800d456:	4b20      	ldr	r3, [pc, #128]	; (800d4d8 <bt_conn_recv+0x158>)
 800d458:	4a20      	ldr	r2, [pc, #128]	; (800d4dc <bt_conn_recv+0x15c>)
 800d45a:	1a9b      	subs	r3, r3, r2
 800d45c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800d460:	f363 118f 	bfi	r1, r3, #6, #10
 800d464:	4820      	ldr	r0, [pc, #128]	; (800d4e8 <bt_conn_recv+0x168>)
 800d466:	f7f7 f871 	bl	800454c <log_0>
			bt_conn_reset_rx_state(conn);
 800d46a:	4620      	mov	r0, r4
 800d46c:	f00b fad2 	bl	8018a14 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
 800d470:	4630      	mov	r0, r6
 800d472:	f00d fda6 	bl	801afc2 <net_buf_unref>
			return;
 800d476:	e017      	b.n	800d4a8 <bt_conn_recv+0x128>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
 800d478:	f04f 0200 	mov.w	r2, #0
 800d47c:	2301      	movs	r3, #1
 800d47e:	f363 0202 	bfi	r2, r3, #0, #3
 800d482:	f36f 02c5 	bfc	r2, #3, #3
 800d486:	4b14      	ldr	r3, [pc, #80]	; (800d4d8 <bt_conn_recv+0x158>)
 800d488:	4914      	ldr	r1, [pc, #80]	; (800d4dc <bt_conn_recv+0x15c>)
 800d48a:	1a5b      	subs	r3, r3, r1
 800d48c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800d490:	f363 128f 	bfi	r2, r3, #6, #10
 800d494:	4629      	mov	r1, r5
 800d496:	4815      	ldr	r0, [pc, #84]	; (800d4ec <bt_conn_recv+0x16c>)
 800d498:	f7f6 fee8 	bl	800426c <log_1>
		bt_conn_reset_rx_state(conn);
 800d49c:	4620      	mov	r0, r4
 800d49e:	f00b fab9 	bl	8018a14 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
 800d4a2:	4630      	mov	r0, r6
 800d4a4:	f00d fd8d 	bl	801afc2 <net_buf_unref>
}
 800d4a8:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("ACL len mismatch (%u > %u)",
 800d4aa:	f04f 0300 	mov.w	r3, #0
 800d4ae:	2101      	movs	r1, #1
 800d4b0:	f361 0302 	bfi	r3, r1, #0, #3
 800d4b4:	f36f 03c5 	bfc	r3, #3, #3
 800d4b8:	4907      	ldr	r1, [pc, #28]	; (800d4d8 <bt_conn_recv+0x158>)
 800d4ba:	4d08      	ldr	r5, [pc, #32]	; (800d4dc <bt_conn_recv+0x15c>)
 800d4bc:	1b49      	subs	r1, r1, r5
 800d4be:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 800d4c2:	f361 138f 	bfi	r3, r1, #6, #10
 800d4c6:	4601      	mov	r1, r0
 800d4c8:	4809      	ldr	r0, [pc, #36]	; (800d4f0 <bt_conn_recv+0x170>)
 800d4ca:	f7f6 ff4f 	bl	800436c <log_2>
		bt_conn_reset_rx_state(conn);
 800d4ce:	4620      	mov	r0, r4
 800d4d0:	f00b faa0 	bl	8018a14 <bt_conn_reset_rx_state>
		return;
 800d4d4:	e7e8      	b.n	800d4a8 <bt_conn_recv+0x128>
 800d4d6:	bf00      	nop
 800d4d8:	0801d6e0 	.word	0x0801d6e0
 800d4dc:	0801d6d0 	.word	0x0801d6d0
 800d4e0:	08020a18 	.word	0x08020a18
 800d4e4:	08020a38 	.word	0x08020a38
 800d4e8:	08020a58 	.word	0x08020a58
 800d4ec:	08020a80 	.word	0x08020a80
 800d4f0:	08020aa0 	.word	0x08020aa0

0800d4f4 <bt_conn_send_cb>:
{
 800d4f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4f8:	460d      	mov	r5, r1
 800d4fa:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
 800d4fc:	7b43      	ldrb	r3, [r0, #13]
 800d4fe:	2b07      	cmp	r3, #7
 800d500:	d117      	bne.n	800d532 <bt_conn_send_cb+0x3e>
 800d502:	4604      	mov	r4, r0
 800d504:	4616      	mov	r6, r2
	if (cb) {
 800d506:	2a00      	cmp	r2, #0
 800d508:	d05b      	beq.n	800d5c2 <bt_conn_send_cb+0xce>
		tx = conn_tx_alloc();
 800d50a:	f7ff fd8d 	bl	800d028 <conn_tx_alloc>
		if (!tx) {
 800d50e:	4680      	mov	r8, r0
 800d510:	b330      	cbz	r0, 800d560 <bt_conn_send_cb+0x6c>
		if (conn->state != BT_CONN_CONNECTED) {
 800d512:	7b63      	ldrb	r3, [r4, #13]
 800d514:	2b07      	cmp	r3, #7
 800d516:	d13a      	bne.n	800d58e <bt_conn_send_cb+0x9a>
		tx->cb = cb;
 800d518:	6046      	str	r6, [r0, #4]
		tx->user_data = user_data;
 800d51a:	6087      	str	r7, [r0, #8]
		tx->pending_no_cb = 0U;
 800d51c:	2300      	movs	r3, #0
 800d51e:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
 800d520:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
 800d522:	4629      	mov	r1, r5
 800d524:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800d528:	f00d fd3e 	bl	801afa8 <net_buf_put>
	return 0;
 800d52c:	2000      	movs	r0, #0
}
 800d52e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_ERR("not connected!");
 800d532:	f04f 0100 	mov.w	r1, #0
 800d536:	2301      	movs	r3, #1
 800d538:	f363 0102 	bfi	r1, r3, #0, #3
 800d53c:	f36f 01c5 	bfc	r1, #3, #3
 800d540:	4b21      	ldr	r3, [pc, #132]	; (800d5c8 <bt_conn_send_cb+0xd4>)
 800d542:	4a22      	ldr	r2, [pc, #136]	; (800d5cc <bt_conn_send_cb+0xd8>)
 800d544:	1a9b      	subs	r3, r3, r2
 800d546:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800d54a:	f363 118f 	bfi	r1, r3, #6, #10
 800d54e:	4820      	ldr	r0, [pc, #128]	; (800d5d0 <bt_conn_send_cb+0xdc>)
 800d550:	f7f6 fffc 	bl	800454c <log_0>
		net_buf_unref(buf);
 800d554:	4628      	mov	r0, r5
 800d556:	f00d fd34 	bl	801afc2 <net_buf_unref>
		return -ENOTCONN;
 800d55a:	f06f 0038 	mvn.w	r0, #56	; 0x38
 800d55e:	e7e6      	b.n	800d52e <bt_conn_send_cb+0x3a>
			BT_ERR("Unable to allocate TX context");
 800d560:	f04f 0100 	mov.w	r1, #0
 800d564:	2301      	movs	r3, #1
 800d566:	f363 0102 	bfi	r1, r3, #0, #3
 800d56a:	f36f 01c5 	bfc	r1, #3, #3
 800d56e:	4b16      	ldr	r3, [pc, #88]	; (800d5c8 <bt_conn_send_cb+0xd4>)
 800d570:	4a16      	ldr	r2, [pc, #88]	; (800d5cc <bt_conn_send_cb+0xd8>)
 800d572:	1a9b      	subs	r3, r3, r2
 800d574:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800d578:	f363 118f 	bfi	r1, r3, #6, #10
 800d57c:	4815      	ldr	r0, [pc, #84]	; (800d5d4 <bt_conn_send_cb+0xe0>)
 800d57e:	f7f6 ffe5 	bl	800454c <log_0>
			net_buf_unref(buf);
 800d582:	4628      	mov	r0, r5
 800d584:	f00d fd1d 	bl	801afc2 <net_buf_unref>
			return -ENOBUFS;
 800d588:	f06f 0036 	mvn.w	r0, #54	; 0x36
 800d58c:	e7cf      	b.n	800d52e <bt_conn_send_cb+0x3a>
			BT_WARN("Disconnected while allocating context");
 800d58e:	f04f 0100 	mov.w	r1, #0
 800d592:	2302      	movs	r3, #2
 800d594:	f363 0102 	bfi	r1, r3, #0, #3
 800d598:	f36f 01c5 	bfc	r1, #3, #3
 800d59c:	4b0a      	ldr	r3, [pc, #40]	; (800d5c8 <bt_conn_send_cb+0xd4>)
 800d59e:	4a0b      	ldr	r2, [pc, #44]	; (800d5cc <bt_conn_send_cb+0xd8>)
 800d5a0:	1a9b      	subs	r3, r3, r2
 800d5a2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800d5a6:	f363 118f 	bfi	r1, r3, #6, #10
 800d5aa:	480b      	ldr	r0, [pc, #44]	; (800d5d8 <bt_conn_send_cb+0xe4>)
 800d5ac:	f7f6 ffce 	bl	800454c <log_0>
			net_buf_unref(buf);
 800d5b0:	4628      	mov	r0, r5
 800d5b2:	f00d fd06 	bl	801afc2 <net_buf_unref>
			tx_free(tx);
 800d5b6:	4640      	mov	r0, r8
 800d5b8:	f7ff fd2a 	bl	800d010 <tx_free>
			return -ENOTCONN;
 800d5bc:	f06f 0038 	mvn.w	r0, #56	; 0x38
 800d5c0:	e7b5      	b.n	800d52e <bt_conn_send_cb+0x3a>
		tx_data(buf)->tx = NULL;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	614b      	str	r3, [r1, #20]
 800d5c6:	e7ac      	b.n	800d522 <bt_conn_send_cb+0x2e>
 800d5c8:	0801d6e0 	.word	0x0801d6e0
 800d5cc:	0801d6d0 	.word	0x0801d6d0
 800d5d0:	08020abc 	.word	0x08020abc
 800d5d4:	08020acc 	.word	0x08020acc
 800d5d8:	08020aec 	.word	0x08020aec

0800d5dc <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
 800d5dc:	b570      	push	{r4, r5, r6, lr}
 800d5de:	4606      	mov	r6, r0
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
 800d5e0:	4b0d      	ldr	r3, [pc, #52]	; (800d618 <bt_conn_prepare_events+0x3c>)
 800d5e2:	2400      	movs	r4, #0
 800d5e4:	609c      	str	r4, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
 800d5e6:	4622      	mov	r2, r4
 800d5e8:	2101      	movs	r1, #1
 800d5ea:	f00f fddf 	bl	801d1ac <k_poll_event_init>
 800d5ee:	2501      	movs	r5, #1
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
 800d5f0:	2c00      	cmp	r4, #0
 800d5f2:	dd01      	ble.n	800d5f8 <bt_conn_prepare_events+0x1c>
		}
	}
#endif

	return ev_count;
}
 800d5f4:	4628      	mov	r0, r5
 800d5f6:	bd70      	pop	{r4, r5, r6, pc}
		conn = &acl_conns[i];
 800d5f8:	eb04 0044 	add.w	r0, r4, r4, lsl #1
		if (!conn_prepare_events(conn, &events[ev_count])) {
 800d5fc:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 800d600:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 800d604:	4b05      	ldr	r3, [pc, #20]	; (800d61c <bt_conn_prepare_events+0x40>)
 800d606:	eb03 1080 	add.w	r0, r3, r0, lsl #6
 800d60a:	f00b fa0c 	bl	8018a26 <conn_prepare_events>
 800d60e:	b900      	cbnz	r0, 800d612 <bt_conn_prepare_events+0x36>
			ev_count++;
 800d610:	3501      	adds	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
 800d612:	3401      	adds	r4, #1
 800d614:	e7ec      	b.n	800d5f0 <bt_conn_prepare_events+0x14>
 800d616:	bf00      	nop
 800d618:	200004ac 	.word	0x200004ac
 800d61c:	20000ec8 	.word	0x20000ec8

0800d620 <bt_conn_lookup_handle>:
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(uint16_t handle)
{
 800d620:	b508      	push	{r3, lr}
 800d622:	4602      	mov	r2, r0
	struct bt_conn *conn;

	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
 800d624:	2101      	movs	r1, #1
 800d626:	4802      	ldr	r0, [pc, #8]	; (800d630 <bt_conn_lookup_handle+0x10>)
 800d628:	f00b fa7f 	bl	8018b2a <conn_lookup_handle>
		return conn;
	}
#endif

	return NULL;
}
 800d62c:	bd08      	pop	{r3, pc}
 800d62e:	bf00      	nop
 800d630:	20000ec8 	.word	0x20000ec8

0800d634 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
 800d634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d636:	4606      	mov	r6, r0
 800d638:	460d      	mov	r5, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
 800d63a:	2400      	movs	r4, #0
 800d63c:	2c00      	cmp	r4, #0
 800d63e:	dd01      	ble.n	800d644 <bt_conn_lookup_addr_le+0x10>
		if (bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
			return bt_conn_ref(&acl_conns[i]);
		}
	}

	return NULL;
 800d640:	2000      	movs	r0, #0
}
 800d642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!atomic_get(&acl_conns[i].ref)) {
 800d644:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d648:	019b      	lsls	r3, r3, #6
 800d64a:	3350      	adds	r3, #80	; 0x50
 800d64c:	4a0f      	ldr	r2, [pc, #60]	; (800d68c <bt_conn_lookup_addr_le+0x58>)
 800d64e:	4413      	add	r3, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800d650:	f3bf 8f5b 	dmb	ish
 800d654:	685b      	ldr	r3, [r3, #4]
 800d656:	f3bf 8f5b 	dmb	ish
 800d65a:	b133      	cbz	r3, 800d66a <bt_conn_lookup_addr_le+0x36>
		if (acl_conns[i].type != BT_CONN_TYPE_LE) {
 800d65c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d660:	eb02 1383 	add.w	r3, r2, r3, lsl #6
 800d664:	789b      	ldrb	r3, [r3, #2]
 800d666:	2b01      	cmp	r3, #1
 800d668:	d001      	beq.n	800d66e <bt_conn_lookup_addr_le+0x3a>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
 800d66a:	3401      	adds	r4, #1
 800d66c:	e7e6      	b.n	800d63c <bt_conn_lookup_addr_le+0x8>
		if (bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
 800d66e:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 800d672:	eb02 1787 	add.w	r7, r2, r7, lsl #6
 800d676:	462a      	mov	r2, r5
 800d678:	4631      	mov	r1, r6
 800d67a:	4638      	mov	r0, r7
 800d67c:	f00b fa20 	bl	8018ac0 <bt_conn_is_peer_addr_le>
 800d680:	2800      	cmp	r0, #0
 800d682:	d0f2      	beq.n	800d66a <bt_conn_lookup_addr_le+0x36>
			return bt_conn_ref(&acl_conns[i]);
 800d684:	4638      	mov	r0, r7
 800d686:	f00b fa42 	bl	8018b0e <bt_conn_ref>
 800d68a:	e7da      	b.n	800d642 <bt_conn_lookup_addr_le+0xe>
 800d68c:	20000ec8 	.word	0x20000ec8

0800d690 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
 800d690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d692:	4607      	mov	r7, r0
 800d694:	460d      	mov	r5, r1
 800d696:	4616      	mov	r6, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
 800d698:	2400      	movs	r4, #0
 800d69a:	2c00      	cmp	r4, #0
 800d69c:	dd01      	ble.n	800d6a2 <bt_conn_lookup_state_le+0x12>
		if (acl_conns[i].state == state && acl_conns[i].id == id) {
			return bt_conn_ref(&acl_conns[i]);
		}
	}

	return NULL;
 800d69e:	2000      	movs	r0, #0
}
 800d6a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!atomic_get(&acl_conns[i].ref)) {
 800d6a2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d6a6:	019b      	lsls	r3, r3, #6
 800d6a8:	3350      	adds	r3, #80	; 0x50
 800d6aa:	4a19      	ldr	r2, [pc, #100]	; (800d710 <bt_conn_lookup_state_le+0x80>)
 800d6ac:	4413      	add	r3, r2
 800d6ae:	f3bf 8f5b 	dmb	ish
 800d6b2:	685b      	ldr	r3, [r3, #4]
 800d6b4:	f3bf 8f5b 	dmb	ish
 800d6b8:	b1cb      	cbz	r3, 800d6ee <bt_conn_lookup_state_le+0x5e>
		if (acl_conns[i].type != BT_CONN_TYPE_LE) {
 800d6ba:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d6be:	eb02 1383 	add.w	r3, r2, r3, lsl #6
 800d6c2:	789b      	ldrb	r3, [r3, #2]
 800d6c4:	2b01      	cmp	r3, #1
 800d6c6:	d112      	bne.n	800d6ee <bt_conn_lookup_state_le+0x5e>
		if (peer && !bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
 800d6c8:	b14d      	cbz	r5, 800d6de <bt_conn_lookup_state_le+0x4e>
 800d6ca:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 800d6ce:	462a      	mov	r2, r5
 800d6d0:	4639      	mov	r1, r7
 800d6d2:	4b0f      	ldr	r3, [pc, #60]	; (800d710 <bt_conn_lookup_state_le+0x80>)
 800d6d4:	eb03 1080 	add.w	r0, r3, r0, lsl #6
 800d6d8:	f00b f9f2 	bl	8018ac0 <bt_conn_is_peer_addr_le>
 800d6dc:	b138      	cbz	r0, 800d6ee <bt_conn_lookup_state_le+0x5e>
		if (acl_conns[i].state == state && acl_conns[i].id == id) {
 800d6de:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d6e2:	4a0b      	ldr	r2, [pc, #44]	; (800d710 <bt_conn_lookup_state_le+0x80>)
 800d6e4:	eb02 1383 	add.w	r3, r2, r3, lsl #6
 800d6e8:	7b5b      	ldrb	r3, [r3, #13]
 800d6ea:	42b3      	cmp	r3, r6
 800d6ec:	d001      	beq.n	800d6f2 <bt_conn_lookup_state_le+0x62>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
 800d6ee:	3401      	adds	r4, #1
 800d6f0:	e7d3      	b.n	800d69a <bt_conn_lookup_state_le+0xa>
		if (acl_conns[i].state == state && acl_conns[i].id == id) {
 800d6f2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d6f6:	eb02 1383 	add.w	r3, r2, r3, lsl #6
 800d6fa:	7a1b      	ldrb	r3, [r3, #8]
 800d6fc:	42bb      	cmp	r3, r7
 800d6fe:	d1f6      	bne.n	800d6ee <bt_conn_lookup_state_le+0x5e>
			return bt_conn_ref(&acl_conns[i]);
 800d700:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800d704:	eb02 1084 	add.w	r0, r2, r4, lsl #6
 800d708:	f00b fa01 	bl	8018b0e <bt_conn_ref>
 800d70c:	e7c8      	b.n	800d6a0 <bt_conn_lookup_state_le+0x10>
 800d70e:	bf00      	nop
 800d710:	20000ec8 	.word	0x20000ec8

0800d714 <bt_conn_exists_le>:
{
 800d714:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
 800d716:	f7ff ff8d 	bl	800d634 <bt_conn_lookup_addr_le>
	if (conn) {
 800d71a:	b908      	cbnz	r0, 800d720 <bt_conn_exists_le+0xc>
	return false;
 800d71c:	2000      	movs	r0, #0
}
 800d71e:	bd10      	pop	{r4, pc}
 800d720:	4604      	mov	r4, r0
		BT_WARN("Found valid connection in %s state",
 800d722:	f04f 0200 	mov.w	r2, #0
 800d726:	2302      	movs	r3, #2
 800d728:	f363 0202 	bfi	r2, r3, #0, #3
 800d72c:	f36f 02c5 	bfc	r2, #3, #3
 800d730:	4b15      	ldr	r3, [pc, #84]	; (800d788 <bt_conn_exists_le+0x74>)
 800d732:	4916      	ldr	r1, [pc, #88]	; (800d78c <bt_conn_exists_le+0x78>)
 800d734:	1a5b      	subs	r3, r3, r1
 800d736:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800d73a:	f363 128f 	bfi	r2, r3, #6, #10
 800d73e:	7b43      	ldrb	r3, [r0, #13]
	switch (state) {
 800d740:	2b08      	cmp	r3, #8
 800d742:	d81d      	bhi.n	800d780 <bt_conn_exists_le+0x6c>
 800d744:	e8df f003 	tbb	[pc, r3]
 800d748:	140e1e05 	.word	0x140e1e05
 800d74c:	18161012 	.word	0x18161012
 800d750:	1a          	.byte	0x1a
 800d751:	00          	.byte	0x00
		BT_WARN("Found valid connection in %s state",
 800d752:	490f      	ldr	r1, [pc, #60]	; (800d790 <bt_conn_exists_le+0x7c>)
 800d754:	480f      	ldr	r0, [pc, #60]	; (800d794 <bt_conn_exists_le+0x80>)
 800d756:	f7f6 fd89 	bl	800426c <log_1>
		bt_conn_unref(conn);
 800d75a:	4620      	mov	r0, r4
 800d75c:	f00b fa0a 	bl	8018b74 <bt_conn_unref>
		return true;
 800d760:	2001      	movs	r0, #1
 800d762:	e7dc      	b.n	800d71e <bt_conn_exists_le+0xa>
		return "connect-scan";
 800d764:	490c      	ldr	r1, [pc, #48]	; (800d798 <bt_conn_exists_le+0x84>)
 800d766:	e7f5      	b.n	800d754 <bt_conn_exists_le+0x40>
		return "connect-dir-adv";
 800d768:	490c      	ldr	r1, [pc, #48]	; (800d79c <bt_conn_exists_le+0x88>)
 800d76a:	e7f3      	b.n	800d754 <bt_conn_exists_le+0x40>
		return "connect-adv";
 800d76c:	490c      	ldr	r1, [pc, #48]	; (800d7a0 <bt_conn_exists_le+0x8c>)
 800d76e:	e7f1      	b.n	800d754 <bt_conn_exists_le+0x40>
		return "connect-auto";
 800d770:	490c      	ldr	r1, [pc, #48]	; (800d7a4 <bt_conn_exists_le+0x90>)
 800d772:	e7ef      	b.n	800d754 <bt_conn_exists_le+0x40>
		return "connect";
 800d774:	490c      	ldr	r1, [pc, #48]	; (800d7a8 <bt_conn_exists_le+0x94>)
 800d776:	e7ed      	b.n	800d754 <bt_conn_exists_le+0x40>
		return "connected";
 800d778:	490c      	ldr	r1, [pc, #48]	; (800d7ac <bt_conn_exists_le+0x98>)
 800d77a:	e7eb      	b.n	800d754 <bt_conn_exists_le+0x40>
		return "disconnect";
 800d77c:	490c      	ldr	r1, [pc, #48]	; (800d7b0 <bt_conn_exists_le+0x9c>)
 800d77e:	e7e9      	b.n	800d754 <bt_conn_exists_le+0x40>
		return "(unknown)";
 800d780:	490c      	ldr	r1, [pc, #48]	; (800d7b4 <bt_conn_exists_le+0xa0>)
 800d782:	e7e7      	b.n	800d754 <bt_conn_exists_le+0x40>
		return "disconnect-complete";
 800d784:	490c      	ldr	r1, [pc, #48]	; (800d7b8 <bt_conn_exists_le+0xa4>)
 800d786:	e7e5      	b.n	800d754 <bt_conn_exists_le+0x40>
 800d788:	0801d6e0 	.word	0x0801d6e0
 800d78c:	0801d6d0 	.word	0x0801d6d0
 800d790:	08020b84 	.word	0x08020b84
 800d794:	08020b94 	.word	0x08020b94
 800d798:	08020b34 	.word	0x08020b34
 800d79c:	08020b44 	.word	0x08020b44
 800d7a0:	08020b54 	.word	0x08020b54
 800d7a4:	08020b60 	.word	0x08020b60
 800d7a8:	08020b70 	.word	0x08020b70
 800d7ac:	08020e58 	.word	0x08020e58
 800d7b0:	08020b78 	.word	0x08020b78
 800d7b4:	08020b14 	.word	0x08020b14
 800d7b8:	08020b20 	.word	0x08020b20

0800d7bc <bt_conn_set_state>:
{
 800d7bc:	b570      	push	{r4, r5, r6, lr}
 800d7be:	460e      	mov	r6, r1
	if (conn->state == state) {
 800d7c0:	7b45      	ldrb	r5, [r0, #13]
 800d7c2:	428d      	cmp	r5, r1
 800d7c4:	d00e      	beq.n	800d7e4 <bt_conn_set_state+0x28>
 800d7c6:	4604      	mov	r4, r0
	conn->state = state;
 800d7c8:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
 800d7ca:	2d00      	cmp	r5, #0
 800d7cc:	d038      	beq.n	800d840 <bt_conn_set_state+0x84>
	switch (conn->state) {
 800d7ce:	7b63      	ldrb	r3, [r4, #13]
 800d7d0:	2b08      	cmp	r3, #8
 800d7d2:	f200 80b7 	bhi.w	800d944 <bt_conn_set_state+0x188>
 800d7d6:	e8df f003 	tbb	[pc, r3]
 800d7da:	b14b      	.short	0xb14b
 800d7dc:	b4b4b4b4 	.word	0xb4b4b4b4
 800d7e0:	36b4      	.short	0x36b4
 800d7e2:	b4          	.byte	0xb4
 800d7e3:	00          	.byte	0x00
		BT_WARN("no transition %s", state2str(state));
 800d7e4:	f04f 0200 	mov.w	r2, #0
 800d7e8:	2302      	movs	r3, #2
 800d7ea:	f363 0202 	bfi	r2, r3, #0, #3
 800d7ee:	f36f 02c5 	bfc	r2, #3, #3
 800d7f2:	4b5e      	ldr	r3, [pc, #376]	; (800d96c <bt_conn_set_state+0x1b0>)
 800d7f4:	495e      	ldr	r1, [pc, #376]	; (800d970 <bt_conn_set_state+0x1b4>)
 800d7f6:	1a5b      	subs	r3, r3, r1
 800d7f8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800d7fc:	f363 128f 	bfi	r2, r3, #6, #10
	switch (state) {
 800d800:	2e08      	cmp	r6, #8
 800d802:	d819      	bhi.n	800d838 <bt_conn_set_state+0x7c>
 800d804:	e8df f006 	tbb	[pc, r6]
 800d808:	100a1a05 	.word	0x100a1a05
 800d80c:	14120c0e 	.word	0x14120c0e
 800d810:	16          	.byte	0x16
 800d811:	00          	.byte	0x00
		BT_WARN("no transition %s", state2str(state));
 800d812:	4958      	ldr	r1, [pc, #352]	; (800d974 <bt_conn_set_state+0x1b8>)
 800d814:	4858      	ldr	r0, [pc, #352]	; (800d978 <bt_conn_set_state+0x1bc>)
 800d816:	f7f6 fd29 	bl	800426c <log_1>
		return;
 800d81a:	e092      	b.n	800d942 <bt_conn_set_state+0x186>
		return "connect-scan";
 800d81c:	4957      	ldr	r1, [pc, #348]	; (800d97c <bt_conn_set_state+0x1c0>)
 800d81e:	e7f9      	b.n	800d814 <bt_conn_set_state+0x58>
		return "connect-dir-adv";
 800d820:	4957      	ldr	r1, [pc, #348]	; (800d980 <bt_conn_set_state+0x1c4>)
 800d822:	e7f7      	b.n	800d814 <bt_conn_set_state+0x58>
		return "connect-adv";
 800d824:	4957      	ldr	r1, [pc, #348]	; (800d984 <bt_conn_set_state+0x1c8>)
 800d826:	e7f5      	b.n	800d814 <bt_conn_set_state+0x58>
		return "connect-auto";
 800d828:	4957      	ldr	r1, [pc, #348]	; (800d988 <bt_conn_set_state+0x1cc>)
 800d82a:	e7f3      	b.n	800d814 <bt_conn_set_state+0x58>
		return "connect";
 800d82c:	4957      	ldr	r1, [pc, #348]	; (800d98c <bt_conn_set_state+0x1d0>)
 800d82e:	e7f1      	b.n	800d814 <bt_conn_set_state+0x58>
		return "connected";
 800d830:	4957      	ldr	r1, [pc, #348]	; (800d990 <bt_conn_set_state+0x1d4>)
 800d832:	e7ef      	b.n	800d814 <bt_conn_set_state+0x58>
		return "disconnect";
 800d834:	4957      	ldr	r1, [pc, #348]	; (800d994 <bt_conn_set_state+0x1d8>)
 800d836:	e7ed      	b.n	800d814 <bt_conn_set_state+0x58>
		return "(unknown)";
 800d838:	4957      	ldr	r1, [pc, #348]	; (800d998 <bt_conn_set_state+0x1dc>)
 800d83a:	e7eb      	b.n	800d814 <bt_conn_set_state+0x58>
		return "disconnect-complete";
 800d83c:	4957      	ldr	r1, [pc, #348]	; (800d99c <bt_conn_set_state+0x1e0>)
 800d83e:	e7e9      	b.n	800d814 <bt_conn_set_state+0x58>
		bt_conn_ref(conn);
 800d840:	f00b f965 	bl	8018b0e <bt_conn_ref>
		break;
 800d844:	e7c3      	b.n	800d7ce <bt_conn_set_state+0x12>
		if (conn->type == BT_CONN_TYPE_SCO) {
 800d846:	78a3      	ldrb	r3, [r4, #2]
 800d848:	2b04      	cmp	r3, #4
 800d84a:	d07a      	beq.n	800d942 <bt_conn_set_state+0x186>
		k_fifo_init(&conn->tx_queue);
 800d84c:	f104 0034 	add.w	r0, r4, #52	; 0x34
	z_impl_k_queue_init(queue);
 800d850:	f00f f900 	bl	801ca54 <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
 800d854:	2100      	movs	r1, #0
 800d856:	4852      	ldr	r0, [pc, #328]	; (800d9a0 <bt_conn_set_state+0x1e4>)
 800d858:	f007 fb4e 	bl	8014ef8 <z_impl_k_poll_signal_raise>
	list->head = NULL;
 800d85c:	2300      	movs	r3, #0
 800d85e:	64e3      	str	r3, [r4, #76]	; 0x4c
	list->tail = NULL;
 800d860:	6523      	str	r3, [r4, #80]	; 0x50
		bt_l2cap_connected(conn);
 800d862:	4620      	mov	r0, r4
 800d864:	f000 fb52 	bl	800df0c <bt_l2cap_connected>
		notify_connected(conn);
 800d868:	4620      	mov	r0, r4
 800d86a:	f7ff fbf5 	bl	800d058 <notify_connected>
		break;
 800d86e:	e068      	b.n	800d942 <bt_conn_set_state+0x186>
		if (conn->type == BT_CONN_TYPE_SCO) {
 800d870:	78a3      	ldrb	r3, [r4, #2]
 800d872:	2b04      	cmp	r3, #4
 800d874:	d008      	beq.n	800d888 <bt_conn_set_state+0xcc>
		switch (old_state) {
 800d876:	2d08      	cmp	r5, #8
 800d878:	d863      	bhi.n	800d942 <bt_conn_set_state+0x186>
 800d87a:	e8df f005 	tbb	[pc, r5]
 800d87e:	094c      	.short	0x094c
 800d880:	3a484430 	.word	0x3a484430
 800d884:	4c26      	.short	0x4c26
 800d886:	4c          	.byte	0x4c
 800d887:	00          	.byte	0x00
			bt_conn_unref(conn);
 800d888:	4620      	mov	r0, r4
 800d88a:	f00b f973 	bl	8018b74 <bt_conn_unref>
			break;
 800d88e:	e058      	b.n	800d942 <bt_conn_set_state+0x186>
			tx_notify(conn);
 800d890:	4620      	mov	r0, r4
 800d892:	f00a ffd2 	bl	801883a <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
 800d896:	78a3      	ldrb	r3, [r4, #2]
 800d898:	2b01      	cmp	r3, #1
 800d89a:	d011      	beq.n	800d8c0 <bt_conn_set_state+0x104>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
 800d89c:	3404      	adds	r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800d89e:	f3bf 8f5b 	dmb	ish
 800d8a2:	e854 3f00 	ldrex	r3, [r4]
 800d8a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8aa:	e844 3200 	strex	r2, r3, [r4]
 800d8ae:	2a00      	cmp	r2, #0
 800d8b0:	d1f7      	bne.n	800d8a2 <bt_conn_set_state+0xe6>
 800d8b2:	f3bf 8f5b 	dmb	ish
 800d8b6:	2100      	movs	r1, #0
 800d8b8:	4839      	ldr	r0, [pc, #228]	; (800d9a0 <bt_conn_set_state+0x1e4>)
 800d8ba:	f007 fb1d 	bl	8014ef8 <z_impl_k_poll_signal_raise>
 800d8be:	e040      	b.n	800d942 <bt_conn_set_state+0x186>
				k_delayed_work_cancel(&conn->update_work);
 800d8c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d8c4:	f00f fb38 	bl	801cf38 <k_delayed_work_cancel>
 800d8c8:	e7e8      	b.n	800d89c <bt_conn_set_state+0xe0>
			if (conn->err) {
 800d8ca:	7b23      	ldrb	r3, [r4, #12]
 800d8cc:	b91b      	cbnz	r3, 800d8d6 <bt_conn_set_state+0x11a>
			bt_conn_unref(conn);
 800d8ce:	4620      	mov	r0, r4
 800d8d0:	f00b f950 	bl	8018b74 <bt_conn_unref>
			break;
 800d8d4:	e035      	b.n	800d942 <bt_conn_set_state+0x186>
				notify_connected(conn);
 800d8d6:	4620      	mov	r0, r4
 800d8d8:	f7ff fbbe 	bl	800d058 <notify_connected>
 800d8dc:	e7f7      	b.n	800d8ce <bt_conn_set_state+0x112>
			if (conn->err) {
 800d8de:	7b23      	ldrb	r3, [r4, #12]
 800d8e0:	b91b      	cbnz	r3, 800d8ea <bt_conn_set_state+0x12e>
			bt_conn_unref(conn);
 800d8e2:	4620      	mov	r0, r4
 800d8e4:	f00b f946 	bl	8018b74 <bt_conn_unref>
			break;
 800d8e8:	e02b      	b.n	800d942 <bt_conn_set_state+0x186>
				notify_connected(conn);
 800d8ea:	4620      	mov	r0, r4
 800d8ec:	f7ff fbb4 	bl	800d058 <notify_connected>
 800d8f0:	e7f7      	b.n	800d8e2 <bt_conn_set_state+0x126>
			if (conn->err) {
 800d8f2:	7b23      	ldrb	r3, [r4, #12]
 800d8f4:	b91b      	cbnz	r3, 800d8fe <bt_conn_set_state+0x142>
			bt_conn_unref(conn);
 800d8f6:	4620      	mov	r0, r4
 800d8f8:	f00b f93c 	bl	8018b74 <bt_conn_unref>
			break;
 800d8fc:	e021      	b.n	800d942 <bt_conn_set_state+0x186>
				notify_connected(conn);
 800d8fe:	4620      	mov	r0, r4
 800d900:	f7ff fbaa 	bl	800d058 <notify_connected>
 800d904:	e7f7      	b.n	800d8f6 <bt_conn_set_state+0x13a>
			bt_conn_unref(conn);
 800d906:	4620      	mov	r0, r4
 800d908:	f00b f934 	bl	8018b74 <bt_conn_unref>
			break;
 800d90c:	e019      	b.n	800d942 <bt_conn_set_state+0x186>
			bt_conn_unref(conn);
 800d90e:	4620      	mov	r0, r4
 800d910:	f00b f930 	bl	8018b74 <bt_conn_unref>
			break;
 800d914:	e015      	b.n	800d942 <bt_conn_set_state+0x186>
			BT_WARN("Invalid (%u) old state", state);
 800d916:	f04f 0200 	mov.w	r2, #0
 800d91a:	2302      	movs	r3, #2
 800d91c:	f363 0202 	bfi	r2, r3, #0, #3
 800d920:	f36f 02c5 	bfc	r2, #3, #3
 800d924:	4b11      	ldr	r3, [pc, #68]	; (800d96c <bt_conn_set_state+0x1b0>)
 800d926:	4912      	ldr	r1, [pc, #72]	; (800d970 <bt_conn_set_state+0x1b4>)
 800d928:	1a5b      	subs	r3, r3, r1
 800d92a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800d92e:	f363 128f 	bfi	r2, r3, #6, #10
 800d932:	4631      	mov	r1, r6
 800d934:	481b      	ldr	r0, [pc, #108]	; (800d9a4 <bt_conn_set_state+0x1e8>)
 800d936:	f7f6 fc99 	bl	800426c <log_1>
 800d93a:	e002      	b.n	800d942 <bt_conn_set_state+0x186>
		process_unack_tx(conn);
 800d93c:	4620      	mov	r0, r4
 800d93e:	f00a ffc8 	bl	80188d2 <process_unack_tx>
}
 800d942:	bd70      	pop	{r4, r5, r6, pc}
		BT_WARN("no valid (%u) state was set", state);
 800d944:	f04f 0200 	mov.w	r2, #0
 800d948:	2302      	movs	r3, #2
 800d94a:	f363 0202 	bfi	r2, r3, #0, #3
 800d94e:	f36f 02c5 	bfc	r2, #3, #3
 800d952:	4b06      	ldr	r3, [pc, #24]	; (800d96c <bt_conn_set_state+0x1b0>)
 800d954:	4906      	ldr	r1, [pc, #24]	; (800d970 <bt_conn_set_state+0x1b4>)
 800d956:	1a5b      	subs	r3, r3, r1
 800d958:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800d95c:	f363 128f 	bfi	r2, r3, #6, #10
 800d960:	4631      	mov	r1, r6
 800d962:	4811      	ldr	r0, [pc, #68]	; (800d9a8 <bt_conn_set_state+0x1ec>)
 800d964:	f7f6 fc82 	bl	800426c <log_1>
 800d968:	e7eb      	b.n	800d942 <bt_conn_set_state+0x186>
 800d96a:	bf00      	nop
 800d96c:	0801d6e0 	.word	0x0801d6e0
 800d970:	0801d6d0 	.word	0x0801d6d0
 800d974:	08020b84 	.word	0x08020b84
 800d978:	08020bb8 	.word	0x08020bb8
 800d97c:	08020b34 	.word	0x08020b34
 800d980:	08020b44 	.word	0x08020b44
 800d984:	08020b54 	.word	0x08020b54
 800d988:	08020b60 	.word	0x08020b60
 800d98c:	08020b70 	.word	0x08020b70
 800d990:	08020e58 	.word	0x08020e58
 800d994:	08020b78 	.word	0x08020b78
 800d998:	08020b14 	.word	0x08020b14
 800d99c:	08020b20 	.word	0x08020b20
 800d9a0:	200004ac 	.word	0x200004ac
 800d9a4:	08020bcc 	.word	0x08020bcc
 800d9a8:	08020be4 	.word	0x08020be4

0800d9ac <bt_conn_get_info>:
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
	info->type = conn->type;
 800d9ac:	7883      	ldrb	r3, [r0, #2]
 800d9ae:	700b      	strb	r3, [r1, #0]
	info->role = conn->role;
 800d9b0:	78c3      	ldrb	r3, [r0, #3]
 800d9b2:	704b      	strb	r3, [r1, #1]
	info->id = conn->id;
 800d9b4:	7a03      	ldrb	r3, [r0, #8]
 800d9b6:	708b      	strb	r3, [r1, #2]

	switch (conn->type) {
 800d9b8:	7883      	ldrb	r3, [r0, #2]
 800d9ba:	2b01      	cmp	r3, #1
 800d9bc:	d124      	bne.n	800da08 <bt_conn_get_info+0x5c>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
 800d9be:	f100 0388 	add.w	r3, r0, #136	; 0x88
 800d9c2:	608b      	str	r3, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
 800d9c4:	7a03      	ldrb	r3, [r0, #8]
 800d9c6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800d9ca:	4a11      	ldr	r2, [pc, #68]	; (800da10 <bt_conn_get_info+0x64>)
 800d9cc:	4413      	add	r3, r2
 800d9ce:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_MASTER) {
 800d9d0:	78c3      	ldrb	r3, [r0, #3]
 800d9d2:	b993      	cbnz	r3, 800d9fa <bt_conn_get_info+0x4e>
			info->le.local = &conn->le.init_addr;
 800d9d4:	f100 038f 	add.w	r3, r0, #143	; 0x8f
 800d9d8:	60cb      	str	r3, [r1, #12]
			info->le.remote = &conn->le.resp_addr;
 800d9da:	f100 0396 	add.w	r3, r0, #150	; 0x96
 800d9de:	610b      	str	r3, [r1, #16]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
 800d9e0:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
 800d9e4:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
 800d9e6:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
 800d9ea:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
 800d9ec:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 800d9f0:	830b      	strh	r3, [r1, #24]
#if defined(CONFIG_BT_USER_PHY_UPDATE)
		info->le.phy = &conn->le.phy;
 800d9f2:	30b8      	adds	r0, #184	; 0xb8
 800d9f4:	61c8      	str	r0, [r1, #28]
#endif
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
		info->le.data_len = &conn->le.data_len;
#endif
		return 0;
 800d9f6:	2000      	movs	r0, #0
 800d9f8:	4770      	bx	lr
			info->le.local = &conn->le.resp_addr;
 800d9fa:	f100 0396 	add.w	r3, r0, #150	; 0x96
 800d9fe:	60cb      	str	r3, [r1, #12]
			info->le.remote = &conn->le.init_addr;
 800da00:	f100 038f 	add.w	r3, r0, #143	; 0x8f
 800da04:	610b      	str	r3, [r1, #16]
 800da06:	e7eb      	b.n	800d9e0 <bt_conn_get_info+0x34>
		info->br.dst = &conn->br.dst;
		return 0;
#endif
	}

	return -EINVAL;
 800da08:	f06f 0015 	mvn.w	r0, #21
}
 800da0c:	4770      	bx	lr
 800da0e:	bf00      	nop
 800da10:	20000000 	.word	0x20000000

0800da14 <bt_conn_disconnect>:
			     param->pref_rx_phy, phy_opts);
}
#endif

int bt_conn_disconnect(struct bt_conn *conn, uint8_t reason)
{
 800da14:	b538      	push	{r3, r4, r5, lr}
 800da16:	4604      	mov	r4, r0
 800da18:	460d      	mov	r5, r1
	    conn->type == BT_CONN_TYPE_LE) {
		bt_le_set_auto_conn(&conn->le.dst, NULL);
	}
#endif /* !defined(CONFIG_BT_WHITELIST) */

	switch (conn->state) {
 800da1a:	7b43      	ldrb	r3, [r0, #13]
 800da1c:	3b02      	subs	r3, #2
 800da1e:	2b06      	cmp	r3, #6
 800da20:	d829      	bhi.n	800da76 <bt_conn_disconnect+0x62>
 800da22:	e8df f003 	tbb	[pc, r3]
 800da26:	2806      	.short	0x2806
 800da28:	25040c28 	.word	0x25040c28
 800da2c:	04          	.byte	0x04
 800da2d:	00          	.byte	0x00
 800da2e:	2000      	movs	r0, #0
		return 0;
	case BT_CONN_DISCONNECTED:
	default:
		return -ENOTCONN;
	}
}
 800da30:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
 800da32:	7321      	strb	r1, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
 800da34:	2100      	movs	r1, #0
 800da36:	f7ff fec1 	bl	800d7bc <bt_conn_set_state>
		return 0;
 800da3a:	2000      	movs	r0, #0
 800da3c:	e7f8      	b.n	800da30 <bt_conn_disconnect+0x1c>
		BT_WARN("Deprecated: Use bt_le_adv_stop instead");
 800da3e:	f04f 0100 	mov.w	r1, #0
 800da42:	2302      	movs	r3, #2
 800da44:	f363 0102 	bfi	r1, r3, #0, #3
 800da48:	f36f 01c5 	bfc	r1, #3, #3
 800da4c:	4b0b      	ldr	r3, [pc, #44]	; (800da7c <bt_conn_disconnect+0x68>)
 800da4e:	4a0c      	ldr	r2, [pc, #48]	; (800da80 <bt_conn_disconnect+0x6c>)
 800da50:	1a9b      	subs	r3, r3, r2
 800da52:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800da56:	f363 118f 	bfi	r1, r3, #6, #10
 800da5a:	480a      	ldr	r0, [pc, #40]	; (800da84 <bt_conn_disconnect+0x70>)
 800da5c:	f7f6 fd76 	bl	800454c <log_0>
		conn->err = reason;
 800da60:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
 800da62:	2100      	movs	r1, #0
 800da64:	4620      	mov	r0, r4
 800da66:	f7ff fea9 	bl	800d7bc <bt_conn_set_state>
			return bt_le_adv_stop();
 800da6a:	f7fe ffb1 	bl	800c9d0 <bt_le_adv_stop>
 800da6e:	e7df      	b.n	800da30 <bt_conn_disconnect+0x1c>
		return conn_disconnect(conn, reason);
 800da70:	f00b f8bb 	bl	8018bea <conn_disconnect>
 800da74:	e7dc      	b.n	800da30 <bt_conn_disconnect+0x1c>
		return -ENOTCONN;
 800da76:	f06f 0038 	mvn.w	r0, #56	; 0x38
 800da7a:	e7d9      	b.n	800da30 <bt_conn_disconnect+0x1c>
 800da7c:	0801d6e0 	.word	0x0801d6e0
 800da80:	0801d6d0 	.word	0x0801d6d0
 800da84:	08020c00 	.word	0x08020c00

0800da88 <send_conn_le_param_update>:
{
 800da88:	b538      	push	{r3, r4, r5, lr}
 800da8a:	4604      	mov	r4, r0
 800da8c:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
 800da8e:	4608      	mov	r0, r1
 800da90:	f00a fc41 	bl	8018316 <bt_le_conn_params_valid>
 800da94:	b330      	cbz	r0, 800dae4 <send_conn_le_param_update+0x5c>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
 800da96:	4b15      	ldr	r3, [pc, #84]	; (800daec <send_conn_le_param_update+0x64>)
 800da98:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800da9c:	f013 0f02 	tst.w	r3, #2
 800daa0:	d004      	beq.n	800daac <send_conn_le_param_update+0x24>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
 800daa2:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
 800daa6:	f013 0f02 	tst.w	r3, #2
 800daaa:	d10d      	bne.n	800dac8 <send_conn_le_param_update+0x40>
	     (conn->role == BT_HCI_ROLE_MASTER)) {
 800daac:	78e3      	ldrb	r3, [r4, #3]
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
 800daae:	b9a3      	cbnz	r3, 800dada <send_conn_le_param_update+0x52>
		rc = bt_conn_le_conn_update(conn, param);
 800dab0:	4629      	mov	r1, r5
 800dab2:	4620      	mov	r0, r4
 800dab4:	f00b f8cc 	bl	8018c50 <bt_conn_le_conn_update>
		if (rc == 0) {
 800dab8:	b998      	cbnz	r0, 800dae2 <send_conn_le_param_update+0x5a>
			conn->le.pending_latency = param->latency;
 800daba:	88ab      	ldrh	r3, [r5, #4]
 800dabc:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
 800dac0:	88eb      	ldrh	r3, [r5, #6]
 800dac2:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
		return rc;
 800dac6:	e00c      	b.n	800dae2 <send_conn_le_param_update+0x5a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800dac8:	f3bf 8f5b 	dmb	ish
 800dacc:	6863      	ldr	r3, [r4, #4]
 800dace:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
 800dad2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800dad6:	d1e9      	bne.n	800daac <send_conn_le_param_update+0x24>
 800dad8:	e7ea      	b.n	800dab0 <send_conn_le_param_update+0x28>
	return bt_l2cap_update_conn_param(conn, param);
 800dada:	4629      	mov	r1, r5
 800dadc:	4620      	mov	r0, r4
 800dade:	f00b fa30 	bl	8018f42 <bt_l2cap_update_conn_param>
}
 800dae2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 800dae4:	f06f 0015 	mvn.w	r0, #21
 800dae8:	e7fb      	b.n	800dae2 <send_conn_le_param_update+0x5a>
 800daea:	bf00      	nop
 800daec:	20000000 	.word	0x20000000

0800daf0 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
 800daf0:	b538      	push	{r3, r4, r5, lr}
 800daf2:	460c      	mov	r4, r1
	 * PDU must not be allocated from ISR as we block with 'K_FOREVER'
	 * during the allocation
	 */
	__ASSERT_NO_MSG(!k_is_in_isr());

	if (!pool) {
 800daf4:	4601      	mov	r1, r0
 800daf6:	b150      	cbz	r0, 800db0e <bt_conn_create_pdu_timeout+0x1e>
	} else {
#if defined(CONFIG_NET_BUF_LOG)
		buf = net_buf_alloc_fixed_debug(pool, timeout, func,
							line);
#else
		buf = net_buf_alloc(pool, timeout);
 800daf8:	4608      	mov	r0, r1
 800dafa:	f00d fa2f 	bl	801af5c <net_buf_alloc_fixed>
#endif
	}

	if (!buf) {
 800dafe:	4605      	mov	r5, r0
 800db00:	b138      	cbz	r0, 800db12 <bt_conn_create_pdu_timeout+0x22>
		BT_WARN("Unable to allocate buffer within timeout");
		return NULL;
	}

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);
 800db02:	1d21      	adds	r1, r4, #4
 800db04:	3008      	adds	r0, #8
 800db06:	f00d fa4b 	bl	801afa0 <net_buf_simple_reserve>

	return buf;
}
 800db0a:	4628      	mov	r0, r5
 800db0c:	bd38      	pop	{r3, r4, r5, pc}
		pool = &acl_tx_pool;
 800db0e:	490a      	ldr	r1, [pc, #40]	; (800db38 <bt_conn_create_pdu_timeout+0x48>)
 800db10:	e7f2      	b.n	800daf8 <bt_conn_create_pdu_timeout+0x8>
		BT_WARN("Unable to allocate buffer within timeout");
 800db12:	f04f 0100 	mov.w	r1, #0
 800db16:	2302      	movs	r3, #2
 800db18:	f363 0102 	bfi	r1, r3, #0, #3
 800db1c:	f36f 01c5 	bfc	r1, #3, #3
 800db20:	4b06      	ldr	r3, [pc, #24]	; (800db3c <bt_conn_create_pdu_timeout+0x4c>)
 800db22:	4a07      	ldr	r2, [pc, #28]	; (800db40 <bt_conn_create_pdu_timeout+0x50>)
 800db24:	1a9b      	subs	r3, r3, r2
 800db26:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800db2a:	f363 118f 	bfi	r1, r3, #6, #10
 800db2e:	4805      	ldr	r0, [pc, #20]	; (800db44 <bt_conn_create_pdu_timeout+0x54>)
 800db30:	f7f6 fd0c 	bl	800454c <log_0>
		return NULL;
 800db34:	e7e9      	b.n	800db0a <bt_conn_create_pdu_timeout+0x1a>
 800db36:	bf00      	nop
 800db38:	200008a8 	.word	0x200008a8
 800db3c:	0801d6e0 	.word	0x0801d6e0
 800db40:	0801d6d0 	.word	0x0801d6d0
 800db44:	08020c28 	.word	0x08020c28

0800db48 <bt_conn_create_frag_timeout>:
{
 800db48:	b508      	push	{r3, lr}
 800db4a:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
 800db4c:	4801      	ldr	r0, [pc, #4]	; (800db54 <bt_conn_create_frag_timeout+0xc>)
 800db4e:	f7ff ffcf 	bl	800daf0 <bt_conn_create_pdu_timeout>
}
 800db52:	bd08      	pop	{r3, pc}
 800db54:	20000920 	.word	0x20000920

0800db58 <create_frag>:
{
 800db58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db5a:	4606      	mov	r6, r0
 800db5c:	460d      	mov	r5, r1
		frag = bt_conn_create_frag(0);
 800db5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db66:	2000      	movs	r0, #0
 800db68:	f7ff ffee 	bl	800db48 <bt_conn_create_frag_timeout>
 800db6c:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
 800db6e:	7b73      	ldrb	r3, [r6, #13]
 800db70:	2b07      	cmp	r3, #7
 800db72:	d11a      	bne.n	800dbaa <create_frag+0x52>
	tx_data(frag)->tx = NULL;
 800db74:	2300      	movs	r3, #0
 800db76:	6143      	str	r3, [r0, #20]
	return bt_dev.le.acl_mtu;
 800db78:	4b10      	ldr	r3, [pc, #64]	; (800dbbc <create_frag+0x64>)
 800db7a:	f8b3 60c4 	ldrh.w	r6, [r3, #196]	; 0xc4
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
 800db7e:	f100 0708 	add.w	r7, r0, #8
 800db82:	4638      	mov	r0, r7
 800db84:	f00d faa3 	bl	801b0ce <net_buf_simple_tailroom>
 800db88:	4286      	cmp	r6, r0
 800db8a:	d212      	bcs.n	800dbb2 <create_frag+0x5a>
	return bt_dev.le.acl_mtu;
 800db8c:	4b0b      	ldr	r3, [pc, #44]	; (800dbbc <create_frag+0x64>)
 800db8e:	f8b3 60c4 	ldrh.w	r6, [r3, #196]	; 0xc4
	net_buf_add_mem(frag, buf->data, frag_len);
 800db92:	4632      	mov	r2, r6
 800db94:	f855 1f08 	ldr.w	r1, [r5, #8]!
 800db98:	4638      	mov	r0, r7
 800db9a:	f00d fa62 	bl	801b062 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
 800db9e:	4631      	mov	r1, r6
 800dba0:	4628      	mov	r0, r5
 800dba2:	f00d fa78 	bl	801b096 <net_buf_simple_pull>
}
 800dba6:	4620      	mov	r0, r4
 800dba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(frag);
 800dbaa:	f00d fa0a 	bl	801afc2 <net_buf_unref>
		return NULL;
 800dbae:	2400      	movs	r4, #0
 800dbb0:	e7f9      	b.n	800dba6 <create_frag+0x4e>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
 800dbb2:	4638      	mov	r0, r7
 800dbb4:	f00d fa8b 	bl	801b0ce <net_buf_simple_tailroom>
 800dbb8:	b286      	uxth	r6, r0
 800dbba:	e7ea      	b.n	800db92 <create_frag+0x3a>
 800dbbc:	20000000 	.word	0x20000000

0800dbc0 <send_buf>:
{
 800dbc0:	b538      	push	{r3, r4, r5, lr}
 800dbc2:	4605      	mov	r5, r0
 800dbc4:	460c      	mov	r4, r1
	if (buf->len <= conn_mtu(conn)) {
 800dbc6:	898b      	ldrh	r3, [r1, #12]
	return bt_dev.le.acl_mtu;
 800dbc8:	4a1b      	ldr	r2, [pc, #108]	; (800dc38 <send_buf+0x78>)
 800dbca:	f8b2 20c4 	ldrh.w	r2, [r2, #196]	; 0xc4
	if (buf->len <= conn_mtu(conn)) {
 800dbce:	429a      	cmp	r2, r3
 800dbd0:	d21f      	bcs.n	800dc12 <send_buf+0x52>
	frag = create_frag(conn, buf);
 800dbd2:	f7ff ffc1 	bl	800db58 <create_frag>
	if (!frag) {
 800dbd6:	4601      	mov	r1, r0
 800dbd8:	b350      	cbz	r0, 800dc30 <send_buf+0x70>
	if (!send_frag(conn, frag, FRAG_START, true)) {
 800dbda:	2301      	movs	r3, #1
 800dbdc:	2200      	movs	r2, #0
 800dbde:	4628      	mov	r0, r5
 800dbe0:	f7ff fa56 	bl	800d090 <send_frag>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	b1c8      	cbz	r0, 800dc1c <send_buf+0x5c>
	while (buf->len > conn_mtu(conn)) {
 800dbe8:	89a3      	ldrh	r3, [r4, #12]
	return bt_dev.le.acl_mtu;
 800dbea:	4a13      	ldr	r2, [pc, #76]	; (800dc38 <send_buf+0x78>)
 800dbec:	f8b2 20c4 	ldrh.w	r2, [r2, #196]	; 0xc4
	while (buf->len > conn_mtu(conn)) {
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	d215      	bcs.n	800dc20 <send_buf+0x60>
		frag = create_frag(conn, buf);
 800dbf4:	4621      	mov	r1, r4
 800dbf6:	4628      	mov	r0, r5
 800dbf8:	f7ff ffae 	bl	800db58 <create_frag>
		if (!frag) {
 800dbfc:	4601      	mov	r1, r0
 800dbfe:	b1c8      	cbz	r0, 800dc34 <send_buf+0x74>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
 800dc00:	2301      	movs	r3, #1
 800dc02:	461a      	mov	r2, r3
 800dc04:	4628      	mov	r0, r5
 800dc06:	f7ff fa43 	bl	800d090 <send_frag>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	2800      	cmp	r0, #0
 800dc0e:	d1eb      	bne.n	800dbe8 <send_buf+0x28>
 800dc10:	e004      	b.n	800dc1c <send_buf+0x5c>
		return send_frag(conn, buf, FRAG_SINGLE, false);
 800dc12:	2300      	movs	r3, #0
 800dc14:	2202      	movs	r2, #2
 800dc16:	f7ff fa3b 	bl	800d090 <send_frag>
 800dc1a:	4603      	mov	r3, r0
}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	bd38      	pop	{r3, r4, r5, pc}
	return send_frag(conn, buf, FRAG_END, false);
 800dc20:	2300      	movs	r3, #0
 800dc22:	2203      	movs	r2, #3
 800dc24:	4621      	mov	r1, r4
 800dc26:	4628      	mov	r0, r5
 800dc28:	f7ff fa32 	bl	800d090 <send_frag>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	e7f5      	b.n	800dc1c <send_buf+0x5c>
		return false;
 800dc30:	2300      	movs	r3, #0
 800dc32:	e7f3      	b.n	800dc1c <send_buf+0x5c>
			return false;
 800dc34:	2300      	movs	r3, #0
 800dc36:	e7f1      	b.n	800dc1c <send_buf+0x5c>
 800dc38:	20000000 	.word	0x20000000

0800dc3c <bt_conn_process_tx>:
{
 800dc3c:	b538      	push	{r3, r4, r5, lr}
 800dc3e:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
 800dc40:	7b43      	ldrb	r3, [r0, #13]
 800dc42:	b97b      	cbnz	r3, 800dc64 <bt_conn_process_tx+0x28>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
 800dc44:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800dc46:	f3bf 8f5b 	dmb	ish
 800dc4a:	e853 2f00 	ldrex	r2, [r3]
 800dc4e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 800dc52:	e843 1000 	strex	r0, r1, [r3]
 800dc56:	2800      	cmp	r0, #0
 800dc58:	d1f7      	bne.n	800dc4a <bt_conn_process_tx+0xe>
 800dc5a:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
 800dc5e:	f012 0f40 	tst.w	r2, #64	; 0x40
 800dc62:	d10d      	bne.n	800dc80 <bt_conn_process_tx+0x44>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
 800dc64:	2200      	movs	r2, #0
 800dc66:	2300      	movs	r3, #0
 800dc68:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800dc6c:	f00d f97d 	bl	801af6a <net_buf_get>
	BT_ASSERT(buf);
 800dc70:	4605      	mov	r5, r0
 800dc72:	b148      	cbz	r0, 800dc88 <bt_conn_process_tx+0x4c>
	if (!send_buf(conn, buf)) {
 800dc74:	4629      	mov	r1, r5
 800dc76:	4620      	mov	r0, r4
 800dc78:	f7ff ffa2 	bl	800dbc0 <send_buf>
 800dc7c:	b190      	cbz	r0, 800dca4 <bt_conn_process_tx+0x68>
}
 800dc7e:	bd38      	pop	{r3, r4, r5, pc}
		conn_cleanup(conn);
 800dc80:	4620      	mov	r0, r4
 800dc82:	f7ff fb5b 	bl	800d33c <conn_cleanup>
		return;
 800dc86:	e7fa      	b.n	800dc7e <bt_conn_process_tx+0x42>
	BT_ASSERT(buf);
 800dc88:	f240 5356 	movw	r3, #1366	; 0x556
 800dc8c:	4a07      	ldr	r2, [pc, #28]	; (800dcac <bt_conn_process_tx+0x70>)
 800dc8e:	4908      	ldr	r1, [pc, #32]	; (800dcb0 <bt_conn_process_tx+0x74>)
 800dc90:	4808      	ldr	r0, [pc, #32]	; (800dcb4 <bt_conn_process_tx+0x78>)
 800dc92:	f007 fca6 	bl	80155e2 <printk>
 800dc96:	4040      	eors	r0, r0
 800dc98:	f380 8811 	msr	BASEPRI, r0
 800dc9c:	f04f 0003 	mov.w	r0, #3
 800dca0:	df02      	svc	2
 800dca2:	e7e7      	b.n	800dc74 <bt_conn_process_tx+0x38>
		net_buf_unref(buf);
 800dca4:	4628      	mov	r0, r5
 800dca6:	f00d f98c 	bl	801afc2 <net_buf_unref>
 800dcaa:	e7e8      	b.n	800dc7e <bt_conn_process_tx+0x42>
 800dcac:	08020c54 	.word	0x08020c54
 800dcb0:	08021848 	.word	0x08021848
 800dcb4:	08020224 	.word	0x08020224

0800dcb8 <bt_conn_auth_cb_register>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
 800dcb8:	4603      	mov	r3, r0
 800dcba:	b140      	cbz	r0, 800dcce <bt_conn_auth_cb_register+0x16>
		bt_auth = NULL;
		return 0;
	}

	if (bt_auth) {
 800dcbc:	4a11      	ldr	r2, [pc, #68]	; (800dd04 <bt_conn_auth_cb_register+0x4c>)
 800dcbe:	6812      	ldr	r2, [r2, #0]
 800dcc0:	b9a2      	cbnz	r2, 800dcec <bt_conn_auth_cb_register+0x34>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
 800dcc2:	6942      	ldr	r2, [r0, #20]
 800dcc4:	b132      	cbz	r2, 800dcd4 <bt_conn_auth_cb_register+0x1c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
 800dcc6:	4a0f      	ldr	r2, [pc, #60]	; (800dd04 <bt_conn_auth_cb_register+0x4c>)
 800dcc8:	6013      	str	r3, [r2, #0]
	return 0;
 800dcca:	2000      	movs	r0, #0
 800dccc:	4770      	bx	lr
		bt_auth = NULL;
 800dcce:	4b0d      	ldr	r3, [pc, #52]	; (800dd04 <bt_conn_auth_cb_register+0x4c>)
 800dcd0:	6018      	str	r0, [r3, #0]
		return 0;
 800dcd2:	4770      	bx	lr
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
 800dcd4:	6842      	ldr	r2, [r0, #4]
	if (!cb->cancel &&
 800dcd6:	b962      	cbnz	r2, 800dcf2 <bt_conn_auth_cb_register+0x3a>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
 800dcd8:	6882      	ldr	r2, [r0, #8]
 800dcda:	b96a      	cbnz	r2, 800dcf8 <bt_conn_auth_cb_register+0x40>
 800dcdc:	68c2      	ldr	r2, [r0, #12]
 800dcde:	b972      	cbnz	r2, 800dcfe <bt_conn_auth_cb_register+0x46>
	     cb->pairing_confirm)) {
 800dce0:	6982      	ldr	r2, [r0, #24]
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
 800dce2:	2a00      	cmp	r2, #0
 800dce4:	d0ef      	beq.n	800dcc6 <bt_conn_auth_cb_register+0xe>
		return -EINVAL;
 800dce6:	f06f 0015 	mvn.w	r0, #21
}
 800dcea:	4770      	bx	lr
		return -EALREADY;
 800dcec:	f06f 0044 	mvn.w	r0, #68	; 0x44
 800dcf0:	4770      	bx	lr
		return -EINVAL;
 800dcf2:	f06f 0015 	mvn.w	r0, #21
 800dcf6:	4770      	bx	lr
 800dcf8:	f06f 0015 	mvn.w	r0, #21
 800dcfc:	4770      	bx	lr
 800dcfe:	f06f 0015 	mvn.w	r0, #21
 800dd02:	4770      	bx	lr
 800dd04:	20002088 	.word	0x20002088

0800dd08 <bt_conn_index>:
		__ASSERT(index < CONFIG_BT_MAX_SCO_CONN,
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
 800dd08:	4b03      	ldr	r3, [pc, #12]	; (800dd18 <bt_conn_index+0x10>)
 800dd0a:	1ac0      	subs	r0, r0, r3
 800dd0c:	1180      	asrs	r0, r0, #6
 800dd0e:	4b03      	ldr	r3, [pc, #12]	; (800dd1c <bt_conn_index+0x14>)
 800dd10:	fb03 f000 	mul.w	r0, r3, r0
		__ASSERT(index < CONFIG_BT_MAX_CONN, "Invalid bt_conn pointer");
		break;
	}

	return index;
}
 800dd14:	b2c0      	uxtb	r0, r0
 800dd16:	4770      	bx	lr
 800dd18:	20000ec8 	.word	0x20000ec8
 800dd1c:	aaaaaaab 	.word	0xaaaaaaab

0800dd20 <bt_conn_lookup_index>:

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	struct bt_conn *conn;

	if (index >= ARRAY_SIZE(acl_conns)) {
 800dd20:	b9a0      	cbnz	r0, 800dd4c <bt_conn_lookup_index+0x2c>
{
 800dd22:	b508      	push	{r3, lr}
 800dd24:	4603      	mov	r3, r0
		return NULL;
	}

	conn = &acl_conns[index];
 800dd26:	4a0b      	ldr	r2, [pc, #44]	; (800dd54 <bt_conn_lookup_index+0x34>)
 800dd28:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800dd2c:	eb02 1080 	add.w	r0, r2, r0, lsl #6

	if (!atomic_get(&conn->ref)) {
 800dd30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800dd34:	019b      	lsls	r3, r3, #6
 800dd36:	3350      	adds	r3, #80	; 0x50
 800dd38:	4413      	add	r3, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800dd3a:	f3bf 8f5b 	dmb	ish
 800dd3e:	685b      	ldr	r3, [r3, #4]
 800dd40:	f3bf 8f5b 	dmb	ish
 800dd44:	b123      	cbz	r3, 800dd50 <bt_conn_lookup_index+0x30>
		return NULL;
	}

	return bt_conn_ref(conn);
 800dd46:	f00a fee2 	bl	8018b0e <bt_conn_ref>
}
 800dd4a:	bd08      	pop	{r3, pc}
		return NULL;
 800dd4c:	2000      	movs	r0, #0
}
 800dd4e:	4770      	bx	lr
		return NULL;
 800dd50:	2000      	movs	r0, #0
 800dd52:	e7fa      	b.n	800dd4a <bt_conn_lookup_index+0x2a>
 800dd54:	20000ec8 	.word	0x20000ec8

0800dd58 <bt_conn_init>:

int bt_conn_init(void)
{
 800dd58:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
 800dd5a:	2400      	movs	r4, #0
 800dd5c:	e006      	b.n	800dd6c <bt_conn_init+0x14>
		k_fifo_put(&free_tx, &conn_tx[i]);
 800dd5e:	490a      	ldr	r1, [pc, #40]	; (800dd88 <bt_conn_init+0x30>)
 800dd60:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800dd64:	4809      	ldr	r0, [pc, #36]	; (800dd8c <bt_conn_init+0x34>)
 800dd66:	f00e fe81 	bl	801ca6c <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
 800dd6a:	3401      	adds	r4, #1
 800dd6c:	2c02      	cmp	r4, #2
 800dd6e:	ddf6      	ble.n	800dd5e <bt_conn_init+0x6>
	}

	bt_att_init();
 800dd70:	f00b fdce 	bl	8019910 <bt_att_init>

	err = bt_smp_init();
 800dd74:	f004 f8d6 	bl	8011f24 <bt_smp_init>
	if (err) {
 800dd78:	4604      	mov	r4, r0
 800dd7a:	b108      	cbz	r0, 800dd80 <bt_conn_init+0x28>
#endif /* !defined(CONFIG_BT_WHITELIST) */
		}
	}

	return 0;
}
 800dd7c:	4620      	mov	r0, r4
 800dd7e:	bd10      	pop	{r4, pc}
	bt_l2cap_init();
 800dd80:	f00b f907 	bl	8018f92 <bt_l2cap_init>
	return 0;
 800dd84:	e7fa      	b.n	800dd7c <bt_conn_init+0x24>
 800dd86:	bf00      	nop
 800dd88:	20002090 	.word	0x20002090
 800dd8c:	20000868 	.word	0x20000868

0800dd90 <get_ident>:

static uint8_t get_ident(void)
{
	static uint8_t ident;

	ident++;
 800dd90:	4a05      	ldr	r2, [pc, #20]	; (800dda8 <get_ident+0x18>)
 800dd92:	7813      	ldrb	r3, [r2, #0]
 800dd94:	3301      	adds	r3, #1
 800dd96:	b2db      	uxtb	r3, r3
 800dd98:	7013      	strb	r3, [r2, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
 800dd9a:	b90b      	cbnz	r3, 800dda0 <get_ident+0x10>
		ident++;
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	7013      	strb	r3, [r2, #0]
	}

	return ident;
}
 800dda0:	4b01      	ldr	r3, [pc, #4]	; (800dda8 <get_ident+0x18>)
 800dda2:	7818      	ldrb	r0, [r3, #0]
 800dda4:	4770      	bx	lr
 800dda6:	bf00      	nop
 800dda8:	200034fd 	.word	0x200034fd

0800ddac <le_conn_param_rsp>:

	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
}

static void le_conn_param_rsp(struct bt_l2cap *l2cap, struct net_buf *buf)
{
 800ddac:	b508      	push	{r3, lr}
	struct bt_l2cap_conn_param_rsp *rsp = (void *)buf->data;

	if (buf->len < sizeof(*rsp)) {
 800ddae:	898b      	ldrh	r3, [r1, #12]
 800ddb0:	2b01      	cmp	r3, #1
 800ddb2:	d900      	bls.n	800ddb6 <le_conn_param_rsp+0xa>
		BT_ERR("Too small LE conn param rsp");
		return;
	}

	BT_DBG("LE conn param rsp result %u", sys_le16_to_cpu(rsp->result));
}
 800ddb4:	bd08      	pop	{r3, pc}
		BT_ERR("Too small LE conn param rsp");
 800ddb6:	f04f 0100 	mov.w	r1, #0
 800ddba:	2301      	movs	r3, #1
 800ddbc:	f363 0102 	bfi	r1, r3, #0, #3
 800ddc0:	f36f 01c5 	bfc	r1, #3, #3
 800ddc4:	4b05      	ldr	r3, [pc, #20]	; (800dddc <le_conn_param_rsp+0x30>)
 800ddc6:	4a06      	ldr	r2, [pc, #24]	; (800dde0 <le_conn_param_rsp+0x34>)
 800ddc8:	1a9b      	subs	r3, r3, r2
 800ddca:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800ddce:	f363 118f 	bfi	r1, r3, #6, #10
 800ddd2:	4804      	ldr	r0, [pc, #16]	; (800dde4 <le_conn_param_rsp+0x38>)
 800ddd4:	f7f6 fbba 	bl	800454c <log_0>
		return;
 800ddd8:	e7ec      	b.n	800ddb4 <le_conn_param_rsp+0x8>
 800ddda:	bf00      	nop
 800dddc:	0801d718 	.word	0x0801d718
 800dde0:	0801d6d0 	.word	0x0801d6d0
 800dde4:	08020cac 	.word	0x08020cac

0800dde8 <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
 800dde8:	b510      	push	{r4, lr}
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
 800ddea:	2300      	movs	r3, #0
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	dd14      	ble.n	800de1a <l2cap_accept+0x32>
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
 800ddf0:	f04f 0200 	mov.w	r2, #0
 800ddf4:	2301      	movs	r3, #1
 800ddf6:	f363 0202 	bfi	r2, r3, #0, #3
 800ddfa:	f36f 02c5 	bfc	r2, #3, #3
 800ddfe:	4b0f      	ldr	r3, [pc, #60]	; (800de3c <l2cap_accept+0x54>)
 800de00:	490f      	ldr	r1, [pc, #60]	; (800de40 <l2cap_accept+0x58>)
 800de02:	1a5b      	subs	r3, r3, r1
 800de04:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800de08:	f363 128f 	bfi	r2, r3, #6, #10
 800de0c:	4601      	mov	r1, r0
 800de0e:	480d      	ldr	r0, [pc, #52]	; (800de44 <l2cap_accept+0x5c>)
 800de10:	f7f6 fa2c 	bl	800426c <log_1>

	return -ENOMEM;
 800de14:	f06f 000b 	mvn.w	r0, #11
}
 800de18:	bd10      	pop	{r4, pc}
		if (l2cap->chan.chan.conn) {
 800de1a:	22b8      	movs	r2, #184	; 0xb8
 800de1c:	fb02 f203 	mul.w	r2, r2, r3
 800de20:	4c09      	ldr	r4, [pc, #36]	; (800de48 <l2cap_accept+0x60>)
 800de22:	58a2      	ldr	r2, [r4, r2]
 800de24:	b10a      	cbz	r2, 800de2a <l2cap_accept+0x42>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
 800de26:	3301      	adds	r3, #1
 800de28:	e7e0      	b.n	800ddec <l2cap_accept+0x4>
		l2cap->chan.chan.ops = &ops;
 800de2a:	4a07      	ldr	r2, [pc, #28]	; (800de48 <l2cap_accept+0x60>)
 800de2c:	20b8      	movs	r0, #184	; 0xb8
 800de2e:	fb00 2303 	mla	r3, r0, r3, r2
 800de32:	4a06      	ldr	r2, [pc, #24]	; (800de4c <l2cap_accept+0x64>)
 800de34:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
 800de36:	600b      	str	r3, [r1, #0]
		return 0;
 800de38:	2000      	movs	r0, #0
 800de3a:	e7ed      	b.n	800de18 <l2cap_accept+0x30>
 800de3c:	0801d718 	.word	0x0801d718
 800de40:	0801d6d0 	.word	0x0801d6d0
 800de44:	08020cc8 	.word	0x08020cc8
 800de48:	20000f88 	.word	0x20000f88
 800de4c:	08020e34 	.word	0x08020e34

0800de50 <l2cap_rtx_timeout>:
{
 800de50:	b538      	push	{r3, r4, r5, lr}
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
 800de52:	f1a0 0410 	sub.w	r4, r0, #16
	struct bt_conn *conn = chan->chan.conn;
 800de56:	f850 5c10 	ldr.w	r5, [r0, #-16]
	BT_ERR("chan %p timeout", chan);
 800de5a:	f04f 0200 	mov.w	r2, #0
 800de5e:	2301      	movs	r3, #1
 800de60:	f363 0202 	bfi	r2, r3, #0, #3
 800de64:	f36f 02c5 	bfc	r2, #3, #3
 800de68:	4b09      	ldr	r3, [pc, #36]	; (800de90 <l2cap_rtx_timeout+0x40>)
 800de6a:	490a      	ldr	r1, [pc, #40]	; (800de94 <l2cap_rtx_timeout+0x44>)
 800de6c:	1a5b      	subs	r3, r3, r1
 800de6e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800de72:	f363 128f 	bfi	r2, r3, #6, #10
 800de76:	4621      	mov	r1, r4
 800de78:	4807      	ldr	r0, [pc, #28]	; (800de98 <l2cap_rtx_timeout+0x48>)
 800de7a:	f7f6 f9f7 	bl	800426c <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
 800de7e:	4621      	mov	r1, r4
 800de80:	4628      	mov	r0, r5
 800de82:	f00a ff63 	bl	8018d4c <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
 800de86:	4620      	mov	r0, r4
 800de88:	f00a ff89 	bl	8018d9e <bt_l2cap_chan_del>
}
 800de8c:	bd38      	pop	{r3, r4, r5, pc}
 800de8e:	bf00      	nop
 800de90:	0801d718 	.word	0x0801d718
 800de94:	0801d6d0 	.word	0x0801d6d0
 800de98:	08020cf0 	.word	0x08020cf0

0800de9c <l2cap_chan_add>:
{
 800de9c:	b570      	push	{r4, r5, r6, lr}
	if (!ch) {
 800de9e:	b1d9      	cbz	r1, 800ded8 <l2cap_chan_add+0x3c>
 800dea0:	4604      	mov	r4, r0
 800dea2:	4615      	mov	r5, r2
 800dea4:	460e      	mov	r6, r1
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
 800dea6:	4915      	ldr	r1, [pc, #84]	; (800defc <l2cap_chan_add+0x60>)
 800dea8:	f106 0010 	add.w	r0, r6, #16
 800deac:	f00f f83c 	bl	801cf28 <k_delayed_work_init>
	atomic_clear(chan->status);
 800deb0:	f106 0340 	add.w	r3, r6, #64	; 0x40
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 800deb4:	2200      	movs	r2, #0
 800deb6:	f3bf 8f5b 	dmb	ish
 800deba:	e853 1f00 	ldrex	r1, [r3]
 800debe:	e843 2000 	strex	r0, r2, [r3]
 800dec2:	2800      	cmp	r0, #0
 800dec4:	d1f9      	bne.n	800deba <l2cap_chan_add+0x1e>
 800dec6:	f3bf 8f5b 	dmb	ish
	bt_l2cap_chan_add(conn, chan, destroy);
 800deca:	462a      	mov	r2, r5
 800decc:	4631      	mov	r1, r6
 800dece:	4620      	mov	r0, r4
 800ded0:	f00a ff78 	bl	8018dc4 <bt_l2cap_chan_add>
	return true;
 800ded4:	2001      	movs	r0, #1
}
 800ded6:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to allocate L2CAP CID");
 800ded8:	2301      	movs	r3, #1
 800deda:	f363 0102 	bfi	r1, r3, #0, #3
 800dede:	f36f 01c5 	bfc	r1, #3, #3
 800dee2:	4b07      	ldr	r3, [pc, #28]	; (800df00 <l2cap_chan_add+0x64>)
 800dee4:	4a07      	ldr	r2, [pc, #28]	; (800df04 <l2cap_chan_add+0x68>)
 800dee6:	1a9b      	subs	r3, r3, r2
 800dee8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800deec:	f363 118f 	bfi	r1, r3, #6, #10
 800def0:	4805      	ldr	r0, [pc, #20]	; (800df08 <l2cap_chan_add+0x6c>)
 800def2:	f7f6 fb2b 	bl	800454c <log_0>
		return false;
 800def6:	2000      	movs	r0, #0
 800def8:	e7ed      	b.n	800ded6 <l2cap_chan_add+0x3a>
 800defa:	bf00      	nop
 800defc:	0800de51 	.word	0x0800de51
 800df00:	0801d718 	.word	0x0801d718
 800df04:	0801d6d0 	.word	0x0801d6d0
 800df08:	08020d00 	.word	0x08020d00

0800df0c <bt_l2cap_connected>:
{
 800df0c:	b530      	push	{r4, r5, lr}
 800df0e:	b083      	sub	sp, #12
 800df10:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
 800df12:	4c1a      	ldr	r4, [pc, #104]	; (800df7c <bt_l2cap_connected+0x70>)
 800df14:	e000      	b.n	800df18 <bt_l2cap_connected+0xc>
 800df16:	340c      	adds	r4, #12
 800df18:	4b19      	ldr	r3, [pc, #100]	; (800df80 <bt_l2cap_connected+0x74>)
 800df1a:	429c      	cmp	r4, r3
 800df1c:	d22c      	bcs.n	800df78 <bt_l2cap_connected+0x6c>
		if (fchan->accept(conn, &chan) < 0) {
 800df1e:	6863      	ldr	r3, [r4, #4]
 800df20:	a901      	add	r1, sp, #4
 800df22:	4628      	mov	r0, r5
 800df24:	4798      	blx	r3
 800df26:	2800      	cmp	r0, #0
 800df28:	dbf5      	blt.n	800df16 <bt_l2cap_connected+0xa>
		ch = BT_L2CAP_LE_CHAN(chan);
 800df2a:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
 800df2c:	8823      	ldrh	r3, [r4, #0]
 800df2e:	f8a1 3048 	strh.w	r3, [r1, #72]	; 0x48
		ch->tx.cid = fchan->cid;
 800df32:	f8a1 3054 	strh.w	r3, [r1, #84]	; 0x54
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
 800df36:	68a2      	ldr	r2, [r4, #8]
 800df38:	4628      	mov	r0, r5
 800df3a:	f7ff ffaf 	bl	800de9c <l2cap_chan_add>
 800df3e:	b1d8      	cbz	r0, 800df78 <bt_l2cap_connected+0x6c>
		if (chan->ops->connected) {
 800df40:	9801      	ldr	r0, [sp, #4]
 800df42:	6843      	ldr	r3, [r0, #4]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	b103      	cbz	r3, 800df4a <bt_l2cap_connected+0x3e>
			chan->ops->connected(chan);
 800df48:	4798      	blx	r3
		atomic_set_bit(chan->status, BT_L2CAP_STATUS_OUT);
 800df4a:	9b01      	ldr	r3, [sp, #4]
 800df4c:	3340      	adds	r3, #64	; 0x40
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800df4e:	f3bf 8f5b 	dmb	ish
 800df52:	e853 2f00 	ldrex	r2, [r3]
 800df56:	f042 0201 	orr.w	r2, r2, #1
 800df5a:	e843 2100 	strex	r1, r2, [r3]
 800df5e:	2900      	cmp	r1, #0
 800df60:	d1f7      	bne.n	800df52 <bt_l2cap_connected+0x46>
 800df62:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
 800df66:	9801      	ldr	r0, [sp, #4]
 800df68:	6843      	ldr	r3, [r0, #4]
 800df6a:	699b      	ldr	r3, [r3, #24]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d0d2      	beq.n	800df16 <bt_l2cap_connected+0xa>
			chan->ops->status(chan, chan->status);
 800df70:	f100 0140 	add.w	r1, r0, #64	; 0x40
 800df74:	4798      	blx	r3
 800df76:	e7ce      	b.n	800df16 <bt_l2cap_connected+0xa>
}
 800df78:	b003      	add	sp, #12
 800df7a:	bd30      	pop	{r4, r5, pc}
 800df7c:	0801d604 	.word	0x0801d604
 800df80:	0801d628 	.word	0x0801d628

0800df84 <l2cap_create_le_sig_pdu>:
{
 800df84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df86:	460c      	mov	r4, r1
 800df88:	4616      	mov	r6, r2
 800df8a:	461d      	mov	r5, r3
	if (code == BT_L2CAP_DISCONN_REQ) {
 800df8c:	2906      	cmp	r1, #6
 800df8e:	d011      	beq.n	800dfb4 <l2cap_create_le_sig_pdu+0x30>
	struct net_buf_pool *pool = NULL;
 800df90:	2000      	movs	r0, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
 800df92:	f644 6220 	movw	r2, #20000	; 0x4e20
 800df96:	2300      	movs	r3, #0
 800df98:	2100      	movs	r1, #0
 800df9a:	f00a ff6a 	bl	8018e72 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
 800df9e:	4607      	mov	r7, r0
 800dfa0:	b150      	cbz	r0, 800dfb8 <l2cap_create_le_sig_pdu+0x34>
	hdr = net_buf_add(buf, sizeof(*hdr));
 800dfa2:	2104      	movs	r1, #4
 800dfa4:	3008      	adds	r0, #8
 800dfa6:	f00d f856 	bl	801b056 <net_buf_simple_add>
	hdr->code = code;
 800dfaa:	7004      	strb	r4, [r0, #0]
	hdr->ident = ident;
 800dfac:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
 800dfae:	8045      	strh	r5, [r0, #2]
}
 800dfb0:	4638      	mov	r0, r7
 800dfb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pool = &disc_pool;
 800dfb4:	480a      	ldr	r0, [pc, #40]	; (800dfe0 <l2cap_create_le_sig_pdu+0x5c>)
 800dfb6:	e7ec      	b.n	800df92 <l2cap_create_le_sig_pdu+0xe>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
 800dfb8:	f04f 0200 	mov.w	r2, #0
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	f363 0202 	bfi	r2, r3, #0, #3
 800dfc2:	f36f 02c5 	bfc	r2, #3, #3
 800dfc6:	4b07      	ldr	r3, [pc, #28]	; (800dfe4 <l2cap_create_le_sig_pdu+0x60>)
 800dfc8:	4907      	ldr	r1, [pc, #28]	; (800dfe8 <l2cap_create_le_sig_pdu+0x64>)
 800dfca:	1a5b      	subs	r3, r3, r1
 800dfcc:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800dfd0:	f363 128f 	bfi	r2, r3, #6, #10
 800dfd4:	4621      	mov	r1, r4
 800dfd6:	4805      	ldr	r0, [pc, #20]	; (800dfec <l2cap_create_le_sig_pdu+0x68>)
 800dfd8:	f7f6 f948 	bl	800426c <log_1>
		return NULL;
 800dfdc:	e7e8      	b.n	800dfb0 <l2cap_create_le_sig_pdu+0x2c>
 800dfde:	bf00      	nop
 800dfe0:	200008d0 	.word	0x200008d0
 800dfe4:	0801d718 	.word	0x0801d718
 800dfe8:	0801d6d0 	.word	0x0801d6d0
 800dfec:	08020d20 	.word	0x08020d20

0800dff0 <l2cap_recv>:
{
 800dff0:	b570      	push	{r4, r5, r6, lr}
 800dff2:	b082      	sub	sp, #8
	if (buf->len < sizeof(*hdr)) {
 800dff4:	898b      	ldrh	r3, [r1, #12]
 800dff6:	2b03      	cmp	r3, #3
 800dff8:	d917      	bls.n	800e02a <l2cap_recv+0x3a>
 800dffa:	4606      	mov	r6, r0
 800dffc:	460c      	mov	r4, r1
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
 800dffe:	2104      	movs	r1, #4
 800e000:	f104 0008 	add.w	r0, r4, #8
 800e004:	f00d f84f 	bl	801b0a6 <net_buf_simple_pull_mem>
 800e008:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
 800e00a:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
 800e00c:	89a1      	ldrh	r1, [r4, #12]
 800e00e:	4291      	cmp	r1, r2
 800e010:	d11f      	bne.n	800e052 <l2cap_recv+0x62>
	if (!hdr->ident) {
 800e012:	7843      	ldrb	r3, [r0, #1]
 800e014:	b37b      	cbz	r3, 800e076 <l2cap_recv+0x86>
	switch (hdr->code) {
 800e016:	7801      	ldrb	r1, [r0, #0]
 800e018:	2901      	cmp	r1, #1
 800e01a:	d017      	beq.n	800e04c <l2cap_recv+0x5c>
 800e01c:	2913      	cmp	r1, #19
 800e01e:	d13c      	bne.n	800e09a <l2cap_recv+0xaa>
		le_conn_param_rsp(l2cap, buf);
 800e020:	4621      	mov	r1, r4
 800e022:	4630      	mov	r0, r6
 800e024:	f7ff fec2 	bl	800ddac <le_conn_param_rsp>
		break;
 800e028:	e010      	b.n	800e04c <l2cap_recv+0x5c>
		BT_ERR("Too small L2CAP signaling PDU");
 800e02a:	f04f 0100 	mov.w	r1, #0
 800e02e:	2301      	movs	r3, #1
 800e030:	f363 0102 	bfi	r1, r3, #0, #3
 800e034:	f36f 01c5 	bfc	r1, #3, #3
 800e038:	4b24      	ldr	r3, [pc, #144]	; (800e0cc <l2cap_recv+0xdc>)
 800e03a:	4a25      	ldr	r2, [pc, #148]	; (800e0d0 <l2cap_recv+0xe0>)
 800e03c:	1a9b      	subs	r3, r3, r2
 800e03e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800e042:	f363 118f 	bfi	r1, r3, #6, #10
 800e046:	4823      	ldr	r0, [pc, #140]	; (800e0d4 <l2cap_recv+0xe4>)
 800e048:	f7f6 fa80 	bl	800454c <log_0>
}
 800e04c:	2000      	movs	r0, #0
 800e04e:	b002      	add	sp, #8
 800e050:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
 800e052:	f04f 0300 	mov.w	r3, #0
 800e056:	2001      	movs	r0, #1
 800e058:	f360 0302 	bfi	r3, r0, #0, #3
 800e05c:	f36f 03c5 	bfc	r3, #3, #3
 800e060:	481a      	ldr	r0, [pc, #104]	; (800e0cc <l2cap_recv+0xdc>)
 800e062:	4c1b      	ldr	r4, [pc, #108]	; (800e0d0 <l2cap_recv+0xe0>)
 800e064:	1b00      	subs	r0, r0, r4
 800e066:	f3c0 00c9 	ubfx	r0, r0, #3, #10
 800e06a:	f360 138f 	bfi	r3, r0, #6, #10
 800e06e:	481a      	ldr	r0, [pc, #104]	; (800e0d8 <l2cap_recv+0xe8>)
 800e070:	f7f6 f97c 	bl	800436c <log_2>
		return 0;
 800e074:	e7ea      	b.n	800e04c <l2cap_recv+0x5c>
		BT_ERR("Invalid ident value in L2CAP PDU");
 800e076:	f04f 0100 	mov.w	r1, #0
 800e07a:	2301      	movs	r3, #1
 800e07c:	f363 0102 	bfi	r1, r3, #0, #3
 800e080:	f36f 01c5 	bfc	r1, #3, #3
 800e084:	4b11      	ldr	r3, [pc, #68]	; (800e0cc <l2cap_recv+0xdc>)
 800e086:	4a12      	ldr	r2, [pc, #72]	; (800e0d0 <l2cap_recv+0xe0>)
 800e088:	1a9b      	subs	r3, r3, r2
 800e08a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800e08e:	f363 118f 	bfi	r1, r3, #6, #10
 800e092:	4812      	ldr	r0, [pc, #72]	; (800e0dc <l2cap_recv+0xec>)
 800e094:	f7f6 fa5a 	bl	800454c <log_0>
		return 0;
 800e098:	e7d8      	b.n	800e04c <l2cap_recv+0x5c>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
 800e09a:	f04f 0200 	mov.w	r2, #0
 800e09e:	2302      	movs	r3, #2
 800e0a0:	f363 0202 	bfi	r2, r3, #0, #3
 800e0a4:	f36f 02c5 	bfc	r2, #3, #3
 800e0a8:	4b08      	ldr	r3, [pc, #32]	; (800e0cc <l2cap_recv+0xdc>)
 800e0aa:	4809      	ldr	r0, [pc, #36]	; (800e0d0 <l2cap_recv+0xe0>)
 800e0ac:	1a1b      	subs	r3, r3, r0
 800e0ae:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800e0b2:	f363 128f 	bfi	r2, r3, #6, #10
 800e0b6:	480a      	ldr	r0, [pc, #40]	; (800e0e0 <l2cap_recv+0xf0>)
 800e0b8:	f7f6 f8d8 	bl	800426c <log_1>
		l2cap_send_reject(chan->conn, hdr->ident,
 800e0bc:	7869      	ldrb	r1, [r5, #1]
 800e0be:	2200      	movs	r2, #0
 800e0c0:	9200      	str	r2, [sp, #0]
 800e0c2:	4613      	mov	r3, r2
 800e0c4:	6830      	ldr	r0, [r6, #0]
 800e0c6:	f00a feee 	bl	8018ea6 <l2cap_send_reject>
		break;
 800e0ca:	e7bf      	b.n	800e04c <l2cap_recv+0x5c>
 800e0cc:	0801d718 	.word	0x0801d718
 800e0d0:	0801d6d0 	.word	0x0801d6d0
 800e0d4:	08020d48 	.word	0x08020d48
 800e0d8:	08020d68 	.word	0x08020d68
 800e0dc:	08020d8c 	.word	0x08020d8c
 800e0e0:	08020db0 	.word	0x08020db0

0800e0e4 <bt_l2cap_recv>:
{
 800e0e4:	b570      	push	{r4, r5, r6, lr}
 800e0e6:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
 800e0e8:	898b      	ldrh	r3, [r1, #12]
 800e0ea:	2b03      	cmp	r3, #3
 800e0ec:	d90f      	bls.n	800e10e <bt_l2cap_recv+0x2a>
 800e0ee:	4605      	mov	r5, r0
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
 800e0f0:	2104      	movs	r1, #4
 800e0f2:	f104 0008 	add.w	r0, r4, #8
 800e0f6:	f00c ffd6 	bl	801b0a6 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
 800e0fa:	8846      	ldrh	r6, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
 800e0fc:	4631      	mov	r1, r6
 800e0fe:	4628      	mov	r0, r5
 800e100:	f00a ff0c 	bl	8018f1c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
 800e104:	b1c0      	cbz	r0, 800e138 <bt_l2cap_recv+0x54>
	l2cap_chan_recv(chan, buf);
 800e106:	4621      	mov	r1, r4
 800e108:	f00a fe17 	bl	8018d3a <l2cap_chan_recv>
}
 800e10c:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Too small L2CAP PDU received");
 800e10e:	f04f 0100 	mov.w	r1, #0
 800e112:	2301      	movs	r3, #1
 800e114:	f363 0102 	bfi	r1, r3, #0, #3
 800e118:	f36f 01c5 	bfc	r1, #3, #3
 800e11c:	4b11      	ldr	r3, [pc, #68]	; (800e164 <bt_l2cap_recv+0x80>)
 800e11e:	4a12      	ldr	r2, [pc, #72]	; (800e168 <bt_l2cap_recv+0x84>)
 800e120:	1a9b      	subs	r3, r3, r2
 800e122:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800e126:	f363 118f 	bfi	r1, r3, #6, #10
 800e12a:	4810      	ldr	r0, [pc, #64]	; (800e16c <bt_l2cap_recv+0x88>)
 800e12c:	f7f6 fa0e 	bl	800454c <log_0>
		net_buf_unref(buf);
 800e130:	4620      	mov	r0, r4
 800e132:	f00c ff46 	bl	801afc2 <net_buf_unref>
		return;
 800e136:	e7e9      	b.n	800e10c <bt_l2cap_recv+0x28>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
 800e138:	f04f 0200 	mov.w	r2, #0
 800e13c:	2302      	movs	r3, #2
 800e13e:	f363 0202 	bfi	r2, r3, #0, #3
 800e142:	f36f 02c5 	bfc	r2, #3, #3
 800e146:	4b07      	ldr	r3, [pc, #28]	; (800e164 <bt_l2cap_recv+0x80>)
 800e148:	4907      	ldr	r1, [pc, #28]	; (800e168 <bt_l2cap_recv+0x84>)
 800e14a:	1a5b      	subs	r3, r3, r1
 800e14c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800e150:	f363 128f 	bfi	r2, r3, #6, #10
 800e154:	4631      	mov	r1, r6
 800e156:	4806      	ldr	r0, [pc, #24]	; (800e170 <bt_l2cap_recv+0x8c>)
 800e158:	f7f6 f888 	bl	800426c <log_1>
		net_buf_unref(buf);
 800e15c:	4620      	mov	r0, r4
 800e15e:	f00c ff30 	bl	801afc2 <net_buf_unref>
		return;
 800e162:	e7d3      	b.n	800e10c <bt_l2cap_recv+0x28>
 800e164:	0801d718 	.word	0x0801d718
 800e168:	0801d6d0 	.word	0x0801d6d0
 800e16c:	08020dd0 	.word	0x08020dd0
 800e170:	08020df0 	.word	0x08020df0

0800e174 <att_cfm_sent>:
		return NULL;
	}
}

static void att_cfm_sent(struct bt_conn *conn, void *user_data)
{
 800e174:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
 800e176:	4b03      	ldr	r3, [pc, #12]	; (800e184 <att_cfm_sent+0x10>)
 800e178:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
 800e17c:	f00a ff0a 	bl	8018f94 <att_sent>
}
 800e180:	bd08      	pop	{r3, pc}
 800e182:	bf00      	nop
 800e184:	080191d5 	.word	0x080191d5

0800e188 <att_rsp_sent>:

static void att_rsp_sent(struct bt_conn *conn, void *user_data)
{
 800e188:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
 800e18a:	4b03      	ldr	r3, [pc, #12]	; (800e198 <att_rsp_sent+0x10>)
 800e18c:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
 800e190:	f00a ff00 	bl	8018f94 <att_sent>
}
 800e194:	bd08      	pop	{r3, pc}
 800e196:	bf00      	nop
 800e198:	080191f1 	.word	0x080191f1

0800e19c <att_req_sent>:

static void att_req_sent(struct bt_conn *conn, void *user_data)
{
 800e19c:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
 800e19e:	4b03      	ldr	r3, [pc, #12]	; (800e1ac <att_req_sent+0x10>)
 800e1a0:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
 800e1a4:	f00a fef6 	bl	8018f94 <att_sent>
}
 800e1a8:	bd08      	pop	{r3, pc}
 800e1aa:	bf00      	nop
 800e1ac:	0800e531 	.word	0x0800e531

0800e1b0 <att_cb>:

static bt_conn_tx_cb_t att_cb(bt_att_chan_sent_t cb)
{
	if (cb == chan_rsp_sent) {
 800e1b0:	4b08      	ldr	r3, [pc, #32]	; (800e1d4 <att_cb+0x24>)
 800e1b2:	4298      	cmp	r0, r3
 800e1b4:	d009      	beq.n	800e1ca <att_cb+0x1a>
		return att_rsp_sent;
	} else if (cb == chan_cfm_sent) {
 800e1b6:	4b08      	ldr	r3, [pc, #32]	; (800e1d8 <att_cb+0x28>)
 800e1b8:	4298      	cmp	r0, r3
 800e1ba:	d008      	beq.n	800e1ce <att_cb+0x1e>
		return att_cfm_sent;
	} else if (cb == chan_req_sent) {
 800e1bc:	4b07      	ldr	r3, [pc, #28]	; (800e1dc <att_cb+0x2c>)
 800e1be:	4298      	cmp	r0, r3
 800e1c0:	d001      	beq.n	800e1c6 <att_cb+0x16>
		return att_req_sent;
	} else {
		return att_sent;
 800e1c2:	4807      	ldr	r0, [pc, #28]	; (800e1e0 <att_cb+0x30>)
	}
}
 800e1c4:	4770      	bx	lr
		return att_req_sent;
 800e1c6:	4807      	ldr	r0, [pc, #28]	; (800e1e4 <att_cb+0x34>)
 800e1c8:	4770      	bx	lr
		return att_rsp_sent;
 800e1ca:	4807      	ldr	r0, [pc, #28]	; (800e1e8 <att_cb+0x38>)
 800e1cc:	4770      	bx	lr
		return att_cfm_sent;
 800e1ce:	4807      	ldr	r0, [pc, #28]	; (800e1ec <att_cb+0x3c>)
 800e1d0:	4770      	bx	lr
 800e1d2:	bf00      	nop
 800e1d4:	080191f1 	.word	0x080191f1
 800e1d8:	080191d5 	.word	0x080191d5
 800e1dc:	0800e531 	.word	0x0800e531
 800e1e0:	08018f95 	.word	0x08018f95
 800e1e4:	0800e19d 	.word	0x0800e19d
 800e1e8:	0800e189 	.word	0x0800e189
 800e1ec:	0800e175 	.word	0x0800e175

0800e1f0 <chan_cb>:
{
 800e1f0:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
 800e1f2:	6883      	ldr	r3, [r0, #8]
 800e1f4:	7818      	ldrb	r0, [r3, #0]
 800e1f6:	f00a ff17 	bl	8019028 <att_op_get_type>
 800e1fa:	3801      	subs	r0, #1
 800e1fc:	2804      	cmp	r0, #4
 800e1fe:	d808      	bhi.n	800e212 <chan_cb+0x22>
 800e200:	e8df f000 	tbb	[pc, r0]
 800e204:	09070305 	.word	0x09070305
 800e208:	05          	.byte	0x05
 800e209:	00          	.byte	0x00
 800e20a:	4804      	ldr	r0, [pc, #16]	; (800e21c <chan_cb+0x2c>)
 800e20c:	e000      	b.n	800e210 <chan_cb+0x20>
		return chan_req_sent;
 800e20e:	4804      	ldr	r0, [pc, #16]	; (800e220 <chan_cb+0x30>)
}
 800e210:	bd08      	pop	{r3, pc}
		return NULL;
 800e212:	2000      	movs	r0, #0
 800e214:	e7fc      	b.n	800e210 <chan_cb+0x20>
		return chan_cfm_sent;
 800e216:	4803      	ldr	r0, [pc, #12]	; (800e224 <chan_cb+0x34>)
 800e218:	e7fa      	b.n	800e210 <chan_cb+0x20>
 800e21a:	bf00      	nop
 800e21c:	080191f1 	.word	0x080191f1
 800e220:	0800e531 	.word	0x0800e531
 800e224:	080191d5 	.word	0x080191d5

0800e228 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
 800e228:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
 800e22a:	7b43      	ldrb	r3, [r0, #13]
 800e22c:	2b07      	cmp	r3, #7
 800e22e:	d111      	bne.n	800e254 <att_get+0x2c>
		BT_WARN("Not connected");
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
 800e230:	2104      	movs	r1, #4
 800e232:	f00a fe73 	bl	8018f1c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
 800e236:	4604      	mov	r4, r0
 800e238:	b1f8      	cbz	r0, 800e27a <att_get+0x52>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800e23a:	f3bf 8f5b 	dmb	ish
 800e23e:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
 800e242:	f3bf 8f5b 	dmb	ish
		BT_ERR("Unable to find ATT channel");
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
 800e246:	f013 0f04 	tst.w	r3, #4
 800e24a:	d128      	bne.n	800e29e <att_get+0x76>
		BT_WARN("ATT channel flagged as disconnected");
		return NULL;
	}

	return att_chan->att;
 800e24c:	f850 4c08 	ldr.w	r4, [r0, #-8]
}
 800e250:	4620      	mov	r0, r4
 800e252:	bd10      	pop	{r4, pc}
		BT_WARN("Not connected");
 800e254:	f04f 0100 	mov.w	r1, #0
 800e258:	2302      	movs	r3, #2
 800e25a:	f363 0102 	bfi	r1, r3, #0, #3
 800e25e:	f36f 01c5 	bfc	r1, #3, #3
 800e262:	4b18      	ldr	r3, [pc, #96]	; (800e2c4 <att_get+0x9c>)
 800e264:	4a18      	ldr	r2, [pc, #96]	; (800e2c8 <att_get+0xa0>)
 800e266:	1a9b      	subs	r3, r3, r2
 800e268:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800e26c:	f363 118f 	bfi	r1, r3, #6, #10
 800e270:	4816      	ldr	r0, [pc, #88]	; (800e2cc <att_get+0xa4>)
 800e272:	f7f6 f96b 	bl	800454c <log_0>
		return NULL;
 800e276:	2400      	movs	r4, #0
 800e278:	e7ea      	b.n	800e250 <att_get+0x28>
		BT_ERR("Unable to find ATT channel");
 800e27a:	f04f 0100 	mov.w	r1, #0
 800e27e:	2301      	movs	r3, #1
 800e280:	f363 0102 	bfi	r1, r3, #0, #3
 800e284:	f36f 01c5 	bfc	r1, #3, #3
 800e288:	4b0e      	ldr	r3, [pc, #56]	; (800e2c4 <att_get+0x9c>)
 800e28a:	4a0f      	ldr	r2, [pc, #60]	; (800e2c8 <att_get+0xa0>)
 800e28c:	1a9b      	subs	r3, r3, r2
 800e28e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800e292:	f363 118f 	bfi	r1, r3, #6, #10
 800e296:	480e      	ldr	r0, [pc, #56]	; (800e2d0 <att_get+0xa8>)
 800e298:	f7f6 f958 	bl	800454c <log_0>
		return NULL;
 800e29c:	e7d8      	b.n	800e250 <att_get+0x28>
		BT_WARN("ATT channel flagged as disconnected");
 800e29e:	f04f 0100 	mov.w	r1, #0
 800e2a2:	2302      	movs	r3, #2
 800e2a4:	f363 0102 	bfi	r1, r3, #0, #3
 800e2a8:	f36f 01c5 	bfc	r1, #3, #3
 800e2ac:	4b05      	ldr	r3, [pc, #20]	; (800e2c4 <att_get+0x9c>)
 800e2ae:	4a06      	ldr	r2, [pc, #24]	; (800e2c8 <att_get+0xa0>)
 800e2b0:	1a9b      	subs	r3, r3, r2
 800e2b2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800e2b6:	f363 118f 	bfi	r1, r3, #6, #10
 800e2ba:	4806      	ldr	r0, [pc, #24]	; (800e2d4 <att_get+0xac>)
 800e2bc:	f7f6 f946 	bl	800454c <log_0>
		return NULL;
 800e2c0:	2400      	movs	r4, #0
 800e2c2:	e7c5      	b.n	800e250 <att_get+0x28>
 800e2c4:	0801d6d8 	.word	0x0801d6d8
 800e2c8:	0801d6d0 	.word	0x0801d6d0
 800e2cc:	08020e54 	.word	0x08020e54
 800e2d0:	08020e64 	.word	0x08020e64
 800e2d4:	08020e80 	.word	0x08020e80

0800e2d8 <att_chan_new>:

	k_mem_slab_free(&chan_slab, (void **)&chan);
}

static struct bt_att_chan *att_chan_new(struct bt_att *att, atomic_val_t flags)
{
 800e2d8:	b570      	push	{r4, r5, r6, lr}
 800e2da:	b082      	sub	sp, #8
 800e2dc:	4605      	mov	r5, r0
 800e2de:	460e      	mov	r6, r1
	return list->head;
 800e2e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
	#endif /* CONFIG_BT_SMP */
		.released = bt_att_released,
	};
	struct bt_att_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
 800e2e2:	b10b      	cbz	r3, 800e2e8 <att_chan_new+0x10>
 800e2e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e2e8:	9301      	str	r3, [sp, #4]
	int quota = 0;
 800e2ea:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
 800e2ec:	e015      	b.n	800e31a <att_chan_new+0x42>
		if (chan->att == att) {
			quota++;
 800e2ee:	3101      	adds	r1, #1
 800e2f0:	e018      	b.n	800e324 <att_chan_new+0x4c>
		}

		if (quota == ATT_CHAN_MAX) {
			BT_ERR("Maximum number of channels reached: %d", quota);
 800e2f2:	f04f 0200 	mov.w	r2, #0
 800e2f6:	2301      	movs	r3, #1
 800e2f8:	f363 0202 	bfi	r2, r3, #0, #3
 800e2fc:	f36f 02c5 	bfc	r2, #3, #3
 800e300:	4b2e      	ldr	r3, [pc, #184]	; (800e3bc <att_chan_new+0xe4>)
 800e302:	482f      	ldr	r0, [pc, #188]	; (800e3c0 <att_chan_new+0xe8>)
 800e304:	1a1b      	subs	r3, r3, r0
 800e306:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800e30a:	f363 128f 	bfi	r2, r3, #6, #10
 800e30e:	482d      	ldr	r0, [pc, #180]	; (800e3c4 <att_chan_new+0xec>)
 800e310:	f7f5 ffac 	bl	800426c <log_1>
			return NULL;
 800e314:	2400      	movs	r4, #0
 800e316:	e03a      	b.n	800e38e <att_chan_new+0xb6>
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
 800e318:	9301      	str	r3, [sp, #4]
 800e31a:	9c01      	ldr	r4, [sp, #4]
 800e31c:	b174      	cbz	r4, 800e33c <att_chan_new+0x64>
		if (chan->att == att) {
 800e31e:	6823      	ldr	r3, [r4, #0]
 800e320:	42ab      	cmp	r3, r5
 800e322:	d0e4      	beq.n	800e2ee <att_chan_new+0x16>
		if (quota == ATT_CHAN_MAX) {
 800e324:	2901      	cmp	r1, #1
 800e326:	d0e4      	beq.n	800e2f2 <att_chan_new+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
 800e328:	f514 7396 	adds.w	r3, r4, #300	; 0x12c
 800e32c:	d0f4      	beq.n	800e318 <att_chan_new+0x40>
	return node->next;
 800e32e:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
 800e332:	2b00      	cmp	r3, #0
 800e334:	d0f0      	beq.n	800e318 <att_chan_new+0x40>
 800e336:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e33a:	e7ed      	b.n	800e318 <att_chan_new+0x40>
		}
	}

	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
 800e33c:	2200      	movs	r2, #0
 800e33e:	2300      	movs	r3, #0
 800e340:	a901      	add	r1, sp, #4
 800e342:	4821      	ldr	r0, [pc, #132]	; (800e3c8 <att_chan_new+0xf0>)
 800e344:	f005 fb20 	bl	8013988 <k_mem_slab_alloc>
 800e348:	bb20      	cbnz	r0, 800e394 <att_chan_new+0xbc>
		BT_ERR("No available ATT channel for conn %p", att->conn);
		return NULL;
	}

	(void)memset(chan, 0, sizeof(*chan));
 800e34a:	f44f 7298 	mov.w	r2, #304	; 0x130
 800e34e:	2100      	movs	r1, #0
 800e350:	9801      	ldr	r0, [sp, #4]
 800e352:	f009 fdb8 	bl	8017ec6 <memset>
	chan->chan.chan.ops = &ops;
 800e356:	9801      	ldr	r0, [sp, #4]
 800e358:	4b1c      	ldr	r3, [pc, #112]	; (800e3cc <att_chan_new+0xf4>)
 800e35a:	60c3      	str	r3, [r0, #12]
	k_fifo_init(&chan->tx_queue);
 800e35c:	30c8      	adds	r0, #200	; 0xc8
	z_impl_k_queue_init(queue);
 800e35e:	f00e fb79 	bl	801ca54 <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
 800e362:	9801      	ldr	r0, [sp, #4]
 800e364:	f500 7088 	add.w	r0, r0, #272	; 0x110
	return z_impl_k_sem_init(sem, initial_count, limit);
 800e368:	2203      	movs	r2, #3
 800e36a:	4611      	mov	r1, r2
 800e36c:	f00e fd1e 	bl	801cdac <z_impl_k_sem_init>
	atomic_set(chan->flags, flags);
 800e370:	9b01      	ldr	r3, [sp, #4]
 800e372:	33c0      	adds	r3, #192	; 0xc0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 800e374:	f3bf 8f5b 	dmb	ish
 800e378:	e853 2f00 	ldrex	r2, [r3]
 800e37c:	e843 6100 	strex	r1, r6, [r3]
 800e380:	2900      	cmp	r1, #0
 800e382:	d1f9      	bne.n	800e378 <att_chan_new+0xa0>
 800e384:	f3bf 8f5b 	dmb	ish
	chan->att = att;
 800e388:	9b01      	ldr	r3, [sp, #4]
 800e38a:	601d      	str	r5, [r3, #0]

	return chan;
 800e38c:	9c01      	ldr	r4, [sp, #4]
}
 800e38e:	4620      	mov	r0, r4
 800e390:	b002      	add	sp, #8
 800e392:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("No available ATT channel for conn %p", att->conn);
 800e394:	f04f 0200 	mov.w	r2, #0
 800e398:	2301      	movs	r3, #1
 800e39a:	f363 0202 	bfi	r2, r3, #0, #3
 800e39e:	f36f 02c5 	bfc	r2, #3, #3
 800e3a2:	4b06      	ldr	r3, [pc, #24]	; (800e3bc <att_chan_new+0xe4>)
 800e3a4:	4906      	ldr	r1, [pc, #24]	; (800e3c0 <att_chan_new+0xe8>)
 800e3a6:	1a5b      	subs	r3, r3, r1
 800e3a8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800e3ac:	f363 128f 	bfi	r2, r3, #6, #10
 800e3b0:	6829      	ldr	r1, [r5, #0]
 800e3b2:	4807      	ldr	r0, [pc, #28]	; (800e3d0 <att_chan_new+0xf8>)
 800e3b4:	f7f5 ff5a 	bl	800426c <log_1>
		return NULL;
 800e3b8:	e7e9      	b.n	800e38e <att_chan_new+0xb6>
 800e3ba:	bf00      	nop
 800e3bc:	0801d6d8 	.word	0x0801d6d8
 800e3c0:	0801d6d0 	.word	0x0801d6d0
 800e3c4:	08020ea4 	.word	0x08020ea4
 800e3c8:	2000070c 	.word	0x2000070c
 800e3cc:	200004bc 	.word	0x200004bc
 800e3d0:	08020ecc 	.word	0x08020ecc

0800e3d4 <bt_att_accept>:

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
 800e3d4:	b570      	push	{r4, r5, r6, lr}
 800e3d6:	b082      	sub	sp, #8
 800e3d8:	4606      	mov	r6, r0
 800e3da:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
 800e3dc:	2200      	movs	r2, #0
 800e3de:	2300      	movs	r3, #0
 800e3e0:	a901      	add	r1, sp, #4
 800e3e2:	4819      	ldr	r0, [pc, #100]	; (800e448 <bt_att_accept+0x74>)
 800e3e4:	f005 fad0 	bl	8013988 <k_mem_slab_alloc>
 800e3e8:	b9b0      	cbnz	r0, 800e418 <bt_att_accept+0x44>
 800e3ea:	4605      	mov	r5, r0
		BT_ERR("No available ATT context for conn %p", conn);
		return -ENOMEM;
	}

	(void)memset(att, 0, sizeof(*att));
 800e3ec:	222c      	movs	r2, #44	; 0x2c
 800e3ee:	2100      	movs	r1, #0
 800e3f0:	9801      	ldr	r0, [sp, #4]
 800e3f2:	f009 fd68 	bl	8017ec6 <memset>
	att->conn = conn;
 800e3f6:	9b01      	ldr	r3, [sp, #4]
 800e3f8:	601e      	str	r6, [r3, #0]
	sys_slist_init(&att->reqs);
 800e3fa:	9801      	ldr	r0, [sp, #4]
	list->head = NULL;
 800e3fc:	2100      	movs	r1, #0
 800e3fe:	6041      	str	r1, [r0, #4]
	list->tail = NULL;
 800e400:	6081      	str	r1, [r0, #8]
	list->head = NULL;
 800e402:	6241      	str	r1, [r0, #36]	; 0x24
	list->tail = NULL;
 800e404:	6281      	str	r1, [r0, #40]	; 0x28
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
 800e406:	f7ff ff67 	bl	800e2d8 <att_chan_new>
	if (!chan) {
 800e40a:	4603      	mov	r3, r0
 800e40c:	b1c8      	cbz	r0, 800e442 <bt_att_accept+0x6e>
		return -ENOMEM;
	}

	*ch = &chan->chan.chan;
 800e40e:	3308      	adds	r3, #8
 800e410:	6023      	str	r3, [r4, #0]

	return 0;
}
 800e412:	4628      	mov	r0, r5
 800e414:	b002      	add	sp, #8
 800e416:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("No available ATT context for conn %p", conn);
 800e418:	f04f 0200 	mov.w	r2, #0
 800e41c:	2301      	movs	r3, #1
 800e41e:	f363 0202 	bfi	r2, r3, #0, #3
 800e422:	f36f 02c5 	bfc	r2, #3, #3
 800e426:	4b09      	ldr	r3, [pc, #36]	; (800e44c <bt_att_accept+0x78>)
 800e428:	4909      	ldr	r1, [pc, #36]	; (800e450 <bt_att_accept+0x7c>)
 800e42a:	1a5b      	subs	r3, r3, r1
 800e42c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800e430:	f363 128f 	bfi	r2, r3, #6, #10
 800e434:	4631      	mov	r1, r6
 800e436:	4807      	ldr	r0, [pc, #28]	; (800e454 <bt_att_accept+0x80>)
 800e438:	f7f5 ff18 	bl	800426c <log_1>
		return -ENOMEM;
 800e43c:	f06f 050b 	mvn.w	r5, #11
 800e440:	e7e7      	b.n	800e412 <bt_att_accept+0x3e>
		return -ENOMEM;
 800e442:	f06f 050b 	mvn.w	r5, #11
 800e446:	e7e4      	b.n	800e412 <bt_att_accept+0x3e>
 800e448:	200006f0 	.word	0x200006f0
 800e44c:	0801d6d8 	.word	0x0801d6d8
 800e450:	0801d6d0 	.word	0x0801d6d0
 800e454:	08020ef4 	.word	0x08020ef4

0800e458 <bt_att_released>:
{
 800e458:	b500      	push	{lr}
 800e45a:	b083      	sub	sp, #12
	struct bt_att_chan *chan = ATT_CHAN(ch);
 800e45c:	3808      	subs	r0, #8
 800e45e:	9001      	str	r0, [sp, #4]
	k_mem_slab_free(&chan_slab, (void **)&chan);
 800e460:	a901      	add	r1, sp, #4
 800e462:	4803      	ldr	r0, [pc, #12]	; (800e470 <bt_att_released+0x18>)
 800e464:	f005 fac6 	bl	80139f4 <k_mem_slab_free>
}
 800e468:	b003      	add	sp, #12
 800e46a:	f85d fb04 	ldr.w	pc, [sp], #4
 800e46e:	bf00      	nop
 800e470:	2000070c 	.word	0x2000070c

0800e474 <chan_send>:
{
 800e474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e478:	b083      	sub	sp, #12
 800e47a:	4605      	mov	r5, r0
 800e47c:	460c      	mov	r4, r1
 800e47e:	4616      	mov	r6, r2
	hdr = (void *)buf->data;
 800e480:	688b      	ldr	r3, [r1, #8]
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
 800e482:	781b      	ldrb	r3, [r3, #0]
 800e484:	2bd2      	cmp	r3, #210	; 0xd2
 800e486:	d028      	beq.n	800e4da <chan_send+0x66>
	state->offset = net_buf_simple_headroom(buf);
 800e488:	f104 0008 	add.w	r0, r4, #8
 800e48c:	f00c fe1b 	bl	801b0c6 <net_buf_simple_headroom>
 800e490:	b287      	uxth	r7, r0
	state->len = buf->len;
 800e492:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	chan->sent = cb ? cb : chan_cb(buf);
 800e496:	2e00      	cmp	r6, #0
 800e498:	d03b      	beq.n	800e512 <chan_send+0x9e>
 800e49a:	f8c5 6128 	str.w	r6, [r5, #296]	; 0x128
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
 800e49e:	682b      	ldr	r3, [r5, #0]
 800e4a0:	f8d3 9000 	ldr.w	r9, [r3]
 800e4a4:	4620      	mov	r0, r4
 800e4a6:	f00c fdb2 	bl	801b00e <net_buf_ref>
 800e4aa:	4606      	mov	r6, r0
 800e4ac:	f8d5 0128 	ldr.w	r0, [r5, #296]	; 0x128
 800e4b0:	f7ff fe7e 	bl	800e1b0 <att_cb>
 800e4b4:	4603      	mov	r3, r0
				&chan->chan.chan);
 800e4b6:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
 800e4b8:	9500      	str	r5, [sp, #0]
 800e4ba:	4632      	mov	r2, r6
 800e4bc:	2104      	movs	r1, #4
 800e4be:	4648      	mov	r0, r9
 800e4c0:	f00a fcdc 	bl	8018e7c <bt_l2cap_send_cb>
	if (!err) {
 800e4c4:	4681      	mov	r9, r0
 800e4c6:	b348      	cbz	r0, 800e51c <chan_send+0xa8>
	buf->data = buf->__buf + state->offset;
 800e4c8:	6920      	ldr	r0, [r4, #16]
 800e4ca:	4438      	add	r0, r7
 800e4cc:	60a0      	str	r0, [r4, #8]
	buf->len = state->len;
 800e4ce:	f8a4 800c 	strh.w	r8, [r4, #12]
}
 800e4d2:	4648      	mov	r0, r9
 800e4d4:	b003      	add	sp, #12
 800e4d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = bt_smp_sign(chan->att->conn, buf);
 800e4da:	6803      	ldr	r3, [r0, #0]
 800e4dc:	6818      	ldr	r0, [r3, #0]
 800e4de:	f00c fc4b 	bl	801ad78 <bt_smp_sign>
		if (err) {
 800e4e2:	4681      	mov	r9, r0
 800e4e4:	2800      	cmp	r0, #0
 800e4e6:	d0cf      	beq.n	800e488 <chan_send+0x14>
			BT_ERR("Error signing data");
 800e4e8:	f04f 0100 	mov.w	r1, #0
 800e4ec:	2301      	movs	r3, #1
 800e4ee:	f363 0102 	bfi	r1, r3, #0, #3
 800e4f2:	f36f 01c5 	bfc	r1, #3, #3
 800e4f6:	4b0b      	ldr	r3, [pc, #44]	; (800e524 <chan_send+0xb0>)
 800e4f8:	4a0b      	ldr	r2, [pc, #44]	; (800e528 <chan_send+0xb4>)
 800e4fa:	1a9b      	subs	r3, r3, r2
 800e4fc:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800e500:	f363 118f 	bfi	r1, r3, #6, #10
 800e504:	4809      	ldr	r0, [pc, #36]	; (800e52c <chan_send+0xb8>)
 800e506:	f7f6 f821 	bl	800454c <log_0>
			net_buf_unref(buf);
 800e50a:	4620      	mov	r0, r4
 800e50c:	f00c fd59 	bl	801afc2 <net_buf_unref>
			return err;
 800e510:	e7df      	b.n	800e4d2 <chan_send+0x5e>
	chan->sent = cb ? cb : chan_cb(buf);
 800e512:	4620      	mov	r0, r4
 800e514:	f7ff fe6c 	bl	800e1f0 <chan_cb>
 800e518:	4606      	mov	r6, r0
 800e51a:	e7be      	b.n	800e49a <chan_send+0x26>
		net_buf_unref(buf);
 800e51c:	4620      	mov	r0, r4
 800e51e:	f00c fd50 	bl	801afc2 <net_buf_unref>
		return 0;
 800e522:	e7d6      	b.n	800e4d2 <chan_send+0x5e>
 800e524:	0801d6d8 	.word	0x0801d6d8
 800e528:	0801d6d0 	.word	0x0801d6d0
 800e52c:	08020f1c 	.word	0x08020f1c

0800e530 <chan_req_sent>:
{
 800e530:	b508      	push	{r3, lr}
	if (chan->req) {
 800e532:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
 800e536:	b133      	cbz	r3, 800e546 <chan_req_sent+0x16>
 800e538:	4a03      	ldr	r2, [pc, #12]	; (800e548 <chan_req_sent+0x18>)
 800e53a:	2300      	movs	r3, #0
 800e53c:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
 800e540:	4802      	ldr	r0, [pc, #8]	; (800e54c <chan_req_sent+0x1c>)
 800e542:	f006 f889 	bl	8014658 <k_delayed_work_submit_to_queue>
}
 800e546:	bd08      	pop	{r3, pc}
 800e548:	000493e0 	.word	0x000493e0
 800e54c:	20001408 	.word	0x20001408

0800e550 <read_group_cb>:
{
 800e550:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e552:	b085      	sub	sp, #20
 800e554:	4605      	mov	r5, r0
 800e556:	460e      	mov	r6, r1
 800e558:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
 800e55a:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
 800e55c:	2300      	movs	r3, #0
 800e55e:	f88d 3008 	strb.w	r3, [sp, #8]
 800e562:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e566:	f8ad 300a 	strh.w	r3, [sp, #10]
 800e56a:	a902      	add	r1, sp, #8
 800e56c:	6800      	ldr	r0, [r0, #0]
 800e56e:	f009 fd4b 	bl	8018008 <bt_uuid_cmp>
 800e572:	b158      	cbz	r0, 800e58c <read_group_cb+0x3c>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
 800e574:	2300      	movs	r3, #0
 800e576:	f88d 300c 	strb.w	r3, [sp, #12]
 800e57a:	f642 0301 	movw	r3, #10241	; 0x2801
 800e57e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e582:	a903      	add	r1, sp, #12
 800e584:	6828      	ldr	r0, [r5, #0]
 800e586:	f009 fd3f 	bl	8018008 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
 800e58a:	bb30      	cbnz	r0, 800e5da <read_group_cb+0x8a>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
 800e58c:	6861      	ldr	r1, [r4, #4]
 800e58e:	6828      	ldr	r0, [r5, #0]
 800e590:	f009 fd3a 	bl	8018008 <bt_uuid_cmp>
 800e594:	bb48      	cbnz	r0, 800e5ea <read_group_cb+0x9a>
	if (data->rsp->len &&
 800e596:	68e3      	ldr	r3, [r4, #12]
 800e598:	781a      	ldrb	r2, [r3, #0]
 800e59a:	b132      	cbz	r2, 800e5aa <read_group_cb+0x5a>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
 800e59c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800e5a0:	68a1      	ldr	r1, [r4, #8]
 800e5a2:	8989      	ldrh	r1, [r1, #12]
 800e5a4:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
 800e5a6:	4293      	cmp	r3, r2
 800e5a8:	db24      	blt.n	800e5f4 <read_group_cb+0xa4>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
 800e5aa:	68a0      	ldr	r0, [r4, #8]
 800e5ac:	2104      	movs	r1, #4
 800e5ae:	3008      	adds	r0, #8
 800e5b0:	f00c fd51 	bl	801b056 <net_buf_simple_add>
 800e5b4:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
 800e5b6:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
 800e5b8:	6923      	ldr	r3, [r4, #16]
 800e5ba:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
 800e5bc:	9401      	str	r4, [sp, #4]
 800e5be:	4b10      	ldr	r3, [pc, #64]	; (800e600 <read_group_cb+0xb0>)
 800e5c0:	9300      	str	r3, [sp, #0]
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	68a2      	ldr	r2, [r4, #8]
 800e5c6:	4629      	mov	r1, r5
 800e5c8:	4638      	mov	r0, r7
 800e5ca:	f00a ff3e 	bl	801944a <att_chan_read>
	if (read < 0) {
 800e5ce:	2800      	cmp	r0, #0
 800e5d0:	db12      	blt.n	800e5f8 <read_group_cb+0xa8>
	if (!data->group) {
 800e5d2:	6923      	ldr	r3, [r4, #16]
 800e5d4:	b193      	cbz	r3, 800e5fc <read_group_cb+0xac>
	return BT_GATT_ITER_CONTINUE;
 800e5d6:	2001      	movs	r0, #1
 800e5d8:	e00a      	b.n	800e5f0 <read_group_cb+0xa0>
		if (data->group &&
 800e5da:	6923      	ldr	r3, [r4, #16]
 800e5dc:	b11b      	cbz	r3, 800e5e6 <read_group_cb+0x96>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
 800e5de:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
 800e5e0:	42b2      	cmp	r2, r6
 800e5e2:	d200      	bcs.n	800e5e6 <read_group_cb+0x96>
			data->group->end_handle = sys_cpu_to_le16(handle);
 800e5e4:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
 800e5e6:	2001      	movs	r0, #1
 800e5e8:	e002      	b.n	800e5f0 <read_group_cb+0xa0>
		data->group = NULL;
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
 800e5ee:	2001      	movs	r0, #1
}
 800e5f0:	b005      	add	sp, #20
 800e5f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ITER_STOP;
 800e5f4:	2000      	movs	r0, #0
 800e5f6:	e7fb      	b.n	800e5f0 <read_group_cb+0xa0>
		return BT_GATT_ITER_STOP;
 800e5f8:	2000      	movs	r0, #0
 800e5fa:	e7f9      	b.n	800e5f0 <read_group_cb+0xa0>
		return BT_GATT_ITER_STOP;
 800e5fc:	2000      	movs	r0, #0
 800e5fe:	e7f7      	b.n	800e5f0 <read_group_cb+0xa0>
 800e600:	08018ffb 	.word	0x08018ffb

0800e604 <read_type_cb>:
{
 800e604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e608:	b083      	sub	sp, #12
 800e60a:	4606      	mov	r6, r0
 800e60c:	4688      	mov	r8, r1
 800e60e:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
 800e610:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
 800e612:	68bd      	ldr	r5, [r7, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
 800e614:	6851      	ldr	r1, [r2, #4]
 800e616:	6800      	ldr	r0, [r0, #0]
 800e618:	f009 fcf6 	bl	8018008 <bt_uuid_cmp>
 800e61c:	b120      	cbz	r0, 800e628 <read_type_cb+0x24>
		return BT_GATT_ITER_CONTINUE;
 800e61e:	2501      	movs	r5, #1
}
 800e620:	4628      	mov	r0, r5
 800e622:	b003      	add	sp, #12
 800e624:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
 800e628:	2215      	movs	r2, #21
 800e62a:	4631      	mov	r1, r6
 800e62c:	4628      	mov	r0, r5
 800e62e:	f00b fd6f 	bl	801a110 <bt_gatt_check_perm>
 800e632:	4605      	mov	r5, r0
 800e634:	7520      	strb	r0, [r4, #20]
	if (data->err) {
 800e636:	b130      	cbz	r0, 800e646 <read_type_cb+0x42>
		if (data->rsp->len) {
 800e638:	68e3      	ldr	r3, [r4, #12]
 800e63a:	781b      	ldrb	r3, [r3, #0]
 800e63c:	b10b      	cbz	r3, 800e642 <read_type_cb+0x3e>
			data->err = 0x00;
 800e63e:	2300      	movs	r3, #0
 800e640:	7523      	strb	r3, [r4, #20]
		return BT_GATT_ITER_STOP;
 800e642:	2500      	movs	r5, #0
 800e644:	e7ec      	b.n	800e620 <read_type_cb+0x1c>
	data->err = 0x00;
 800e646:	f04f 0900 	mov.w	r9, #0
 800e64a:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(net_buf_frag_last(data->buf),
 800e64e:	68a0      	ldr	r0, [r4, #8]
 800e650:	f00c fce1 	bl	801b016 <net_buf_frag_last>
 800e654:	2102      	movs	r1, #2
 800e656:	3008      	adds	r0, #8
 800e658:	f00c fcfd 	bl	801b056 <net_buf_simple_add>
 800e65c:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
 800e65e:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
 800e662:	9401      	str	r4, [sp, #4]
 800e664:	4b11      	ldr	r3, [pc, #68]	; (800e6ac <read_type_cb+0xa8>)
 800e666:	9300      	str	r3, [sp, #0]
 800e668:	464b      	mov	r3, r9
 800e66a:	68a2      	ldr	r2, [r4, #8]
 800e66c:	4631      	mov	r1, r6
 800e66e:	4638      	mov	r0, r7
 800e670:	f00a feeb 	bl	801944a <att_chan_read>
	if (read < 0) {
 800e674:	2800      	cmp	r0, #0
 800e676:	db07      	blt.n	800e688 <read_type_cb+0x84>
	if (!data->item) {
 800e678:	6923      	ldr	r3, [r4, #16]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d0d0      	beq.n	800e620 <read_type_cb+0x1c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
 800e67e:	f8b7 505e 	ldrh.w	r5, [r7, #94]	; 0x5e
 800e682:	68a3      	ldr	r3, [r4, #8]
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
 800e684:	2200      	movs	r2, #0

	while (buf) {
 800e686:	e006      	b.n	800e696 <read_type_cb+0x92>
		data->err = err_to_att(read);
 800e688:	f00a fc9a 	bl	8018fc0 <err_to_att>
 800e68c:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
 800e68e:	e7c7      	b.n	800e620 <read_type_cb+0x1c>
		bytes += buf->len;
 800e690:	8999      	ldrh	r1, [r3, #12]
 800e692:	440a      	add	r2, r1
		buf = buf->frags;
 800e694:	681b      	ldr	r3, [r3, #0]
	while (buf) {
 800e696:	2b00      	cmp	r3, #0
 800e698:	d1fa      	bne.n	800e690 <read_type_cb+0x8c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
 800e69a:	1aaa      	subs	r2, r5, r2
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
 800e69c:	68e3      	ldr	r3, [r4, #12]
 800e69e:	781d      	ldrb	r5, [r3, #0]
 800e6a0:	42aa      	cmp	r2, r5
 800e6a2:	bf94      	ite	ls
 800e6a4:	2500      	movls	r5, #0
 800e6a6:	2501      	movhi	r5, #1
 800e6a8:	e7ba      	b.n	800e620 <read_type_cb+0x1c>
 800e6aa:	bf00      	nop
 800e6ac:	08018fd1 	.word	0x08018fd1

0800e6b0 <find_type_cb>:
{
 800e6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6b4:	b093      	sub	sp, #76	; 0x4c
 800e6b6:	4606      	mov	r6, r0
 800e6b8:	460f      	mov	r7, r1
 800e6ba:	4615      	mov	r5, r2
	struct bt_att_chan *chan = data->chan;
 800e6bc:	f8d2 8000 	ldr.w	r8, [r2]
	struct bt_conn *conn = chan->chan.chan.conn;
 800e6c0:	f8d8 9008 	ldr.w	r9, [r8, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 800e6ca:	f642 0301 	movw	r3, #10241	; 0x2801
 800e6ce:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800e6d2:	a910      	add	r1, sp, #64	; 0x40
 800e6d4:	6800      	ldr	r0, [r0, #0]
 800e6d6:	f009 fc97 	bl	8018008 <bt_uuid_cmp>
 800e6da:	b928      	cbnz	r0, 800e6e8 <find_type_cb+0x38>
	data->group = NULL;
 800e6dc:	2300      	movs	r3, #0
 800e6de:	60ab      	str	r3, [r5, #8]
	return BT_GATT_ITER_CONTINUE;
 800e6e0:	2001      	movs	r0, #1
}
 800e6e2:	b013      	add	sp, #76	; 0x4c
 800e6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 800e6ee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e6f2:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 800e6f6:	a911      	add	r1, sp, #68	; 0x44
 800e6f8:	6830      	ldr	r0, [r6, #0]
 800e6fa:	f009 fc85 	bl	8018008 <bt_uuid_cmp>
 800e6fe:	b928      	cbnz	r0, 800e70c <find_type_cb+0x5c>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
 800e700:	f8b8 105e 	ldrh.w	r1, [r8, #94]	; 0x5e
 800e704:	6868      	ldr	r0, [r5, #4]
 800e706:	4603      	mov	r3, r0
	size_t bytes = 0;
 800e708:	2400      	movs	r4, #0
	while (buf) {
 800e70a:	e00a      	b.n	800e722 <find_type_cb+0x72>
		if (data->group &&
 800e70c:	68ab      	ldr	r3, [r5, #8]
 800e70e:	b11b      	cbz	r3, 800e718 <find_type_cb+0x68>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
 800e710:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
 800e712:	42ba      	cmp	r2, r7
 800e714:	d200      	bcs.n	800e718 <find_type_cb+0x68>
			data->group->end_handle = sys_cpu_to_le16(handle);
 800e716:	805f      	strh	r7, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
 800e718:	2001      	movs	r0, #1
 800e71a:	e7e2      	b.n	800e6e2 <find_type_cb+0x32>
		bytes += buf->len;
 800e71c:	899a      	ldrh	r2, [r3, #12]
 800e71e:	4414      	add	r4, r2
		buf = buf->frags;
 800e720:	681b      	ldr	r3, [r3, #0]
	while (buf) {
 800e722:	2b00      	cmp	r3, #0
 800e724:	d1fa      	bne.n	800e71c <find_type_cb+0x6c>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
 800e726:	1b0c      	subs	r4, r1, r4
 800e728:	2c03      	cmp	r4, #3
 800e72a:	d801      	bhi.n	800e730 <find_type_cb+0x80>
		return BT_GATT_ITER_STOP;
 800e72c:	2000      	movs	r0, #0
 800e72e:	e7d8      	b.n	800e6e2 <find_type_cb+0x32>
	frag = net_buf_frag_last(data->buf);
 800e730:	f00c fc71 	bl	801b016 <net_buf_frag_last>
 800e734:	4604      	mov	r4, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
 800e736:	f8b8 a05e 	ldrh.w	sl, [r8, #94]	; 0x5e
 800e73a:	686b      	ldr	r3, [r5, #4]
	size_t bytes = 0;
 800e73c:	2200      	movs	r2, #0
	while (buf) {
 800e73e:	b11b      	cbz	r3, 800e748 <find_type_cb+0x98>
		bytes += buf->len;
 800e740:	8999      	ldrh	r1, [r3, #12]
 800e742:	440a      	add	r2, r1
		buf = buf->frags;
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	e7fa      	b.n	800e73e <find_type_cb+0x8e>
 800e748:	ebaa 0a02 	sub.w	sl, sl, r2
 800e74c:	f104 0b08 	add.w	fp, r4, #8
 800e750:	4658      	mov	r0, fp
 800e752:	f00c fcbc 	bl	801b0ce <net_buf_simple_tailroom>
 800e756:	4582      	cmp	sl, r0
 800e758:	d22b      	bcs.n	800e7b2 <find_type_cb+0x102>
 800e75a:	f8b8 005e 	ldrh.w	r0, [r8, #94]	; 0x5e
 800e75e:	686b      	ldr	r3, [r5, #4]
	size_t bytes = 0;
 800e760:	2200      	movs	r2, #0
	while (buf) {
 800e762:	e002      	b.n	800e76a <find_type_cb+0xba>
		bytes += buf->len;
 800e764:	8999      	ldrh	r1, [r3, #12]
 800e766:	440a      	add	r2, r1
		buf = buf->frags;
 800e768:	681b      	ldr	r3, [r3, #0]
	while (buf) {
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d1fa      	bne.n	800e764 <find_type_cb+0xb4>
 800e76e:	1a80      	subs	r0, r0, r2
	if (!len) {
 800e770:	b318      	cbz	r0, 800e7ba <find_type_cb+0x10a>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
 800e772:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800e776:	2300      	movs	r3, #0
 800e778:	9300      	str	r3, [sp, #0]
 800e77a:	2310      	movs	r3, #16
 800e77c:	aa0c      	add	r2, sp, #48	; 0x30
 800e77e:	4631      	mov	r1, r6
 800e780:	4648      	mov	r0, r9
 800e782:	47c0      	blx	r8
	if (read < 0) {
 800e784:	1e06      	subs	r6, r0, #0
 800e786:	dba9      	blt.n	800e6dc <find_type_cb+0x2c>
	if (read != data->value_len) {
 800e788:	7c2a      	ldrb	r2, [r5, #16]
 800e78a:	42b2      	cmp	r2, r6
 800e78c:	d04b      	beq.n	800e826 <find_type_cb+0x176>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
 800e78e:	68e9      	ldr	r1, [r5, #12]
 800e790:	a807      	add	r0, sp, #28
 800e792:	f009 fc57 	bl	8018044 <bt_uuid_create>
 800e796:	b300      	cbz	r0, 800e7da <find_type_cb+0x12a>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
 800e798:	b2f2      	uxtb	r2, r6
 800e79a:	a90c      	add	r1, sp, #48	; 0x30
 800e79c:	a802      	add	r0, sp, #8
 800e79e:	f009 fc51 	bl	8018044 <bt_uuid_create>
 800e7a2:	b368      	cbz	r0, 800e800 <find_type_cb+0x150>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
 800e7a4:	a902      	add	r1, sp, #8
 800e7a6:	a807      	add	r0, sp, #28
 800e7a8:	f009 fc2e 	bl	8018008 <bt_uuid_cmp>
 800e7ac:	2800      	cmp	r0, #0
 800e7ae:	d042      	beq.n	800e836 <find_type_cb+0x186>
 800e7b0:	e794      	b.n	800e6dc <find_type_cb+0x2c>
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
 800e7b2:	4658      	mov	r0, fp
 800e7b4:	f00c fc8b 	bl	801b0ce <net_buf_simple_tailroom>
 800e7b8:	e7da      	b.n	800e770 <find_type_cb+0xc0>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
 800e7ba:	686b      	ldr	r3, [r5, #4]
 800e7bc:	7998      	ldrb	r0, [r3, #6]
 800e7be:	f003 fe57 	bl	8012470 <net_buf_pool_get>
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	f00c fbc9 	bl	801af5c <net_buf_alloc_fixed>
		if (!frag) {
 800e7ca:	4604      	mov	r4, r0
 800e7cc:	2800      	cmp	r0, #0
 800e7ce:	d088      	beq.n	800e6e2 <find_type_cb+0x32>
		net_buf_frag_add(data->buf, frag);
 800e7d0:	4601      	mov	r1, r0
 800e7d2:	6868      	ldr	r0, [r5, #4]
 800e7d4:	f00c fc30 	bl	801b038 <net_buf_frag_add>
 800e7d8:	e7cb      	b.n	800e772 <find_type_cb+0xc2>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
 800e7da:	f04f 0200 	mov.w	r2, #0
 800e7de:	2302      	movs	r3, #2
 800e7e0:	f363 0202 	bfi	r2, r3, #0, #3
 800e7e4:	f36f 02c5 	bfc	r2, #3, #3
 800e7e8:	4b19      	ldr	r3, [pc, #100]	; (800e850 <find_type_cb+0x1a0>)
 800e7ea:	491a      	ldr	r1, [pc, #104]	; (800e854 <find_type_cb+0x1a4>)
 800e7ec:	1a5b      	subs	r3, r3, r1
 800e7ee:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800e7f2:	f363 128f 	bfi	r2, r3, #6, #10
 800e7f6:	7c29      	ldrb	r1, [r5, #16]
 800e7f8:	4817      	ldr	r0, [pc, #92]	; (800e858 <find_type_cb+0x1a8>)
 800e7fa:	f7f5 fd37 	bl	800426c <log_1>
			goto skip;
 800e7fe:	e76d      	b.n	800e6dc <find_type_cb+0x2c>
			BT_WARN("Unable to create UUID: size %d", read);
 800e800:	f04f 0200 	mov.w	r2, #0
 800e804:	2302      	movs	r3, #2
 800e806:	f363 0202 	bfi	r2, r3, #0, #3
 800e80a:	f36f 02c5 	bfc	r2, #3, #3
 800e80e:	4b10      	ldr	r3, [pc, #64]	; (800e850 <find_type_cb+0x1a0>)
 800e810:	4910      	ldr	r1, [pc, #64]	; (800e854 <find_type_cb+0x1a4>)
 800e812:	1a5b      	subs	r3, r3, r1
 800e814:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800e818:	f363 128f 	bfi	r2, r3, #6, #10
 800e81c:	4631      	mov	r1, r6
 800e81e:	480f      	ldr	r0, [pc, #60]	; (800e85c <find_type_cb+0x1ac>)
 800e820:	f7f5 fd24 	bl	800426c <log_1>
			goto skip;
 800e824:	e75a      	b.n	800e6dc <find_type_cb+0x2c>
	} else if (memcmp(data->value, uuid, read)) {
 800e826:	4632      	mov	r2, r6
 800e828:	a90c      	add	r1, sp, #48	; 0x30
 800e82a:	68e8      	ldr	r0, [r5, #12]
 800e82c:	f009 fb0e 	bl	8017e4c <memcmp>
 800e830:	2800      	cmp	r0, #0
 800e832:	f47f af53 	bne.w	800e6dc <find_type_cb+0x2c>
	data->err = 0x00;
 800e836:	2300      	movs	r3, #0
 800e838:	746b      	strb	r3, [r5, #17]
	data->group = net_buf_add(frag, sizeof(*data->group));
 800e83a:	2104      	movs	r1, #4
 800e83c:	f104 0008 	add.w	r0, r4, #8
 800e840:	f00c fc09 	bl	801b056 <net_buf_simple_add>
 800e844:	60a8      	str	r0, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
 800e846:	8007      	strh	r7, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
 800e848:	68ab      	ldr	r3, [r5, #8]
 800e84a:	805f      	strh	r7, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
 800e84c:	2001      	movs	r0, #1
 800e84e:	e748      	b.n	800e6e2 <find_type_cb+0x32>
 800e850:	0801d6d8 	.word	0x0801d6d8
 800e854:	0801d6d0 	.word	0x0801d6d0
 800e858:	08020f30 	.word	0x08020f30
 800e85c:	08020f50 	.word	0x08020f50

0800e860 <bt_att_connected>:
{
 800e860:	b538      	push	{r3, r4, r5, lr}
 800e862:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = att_get_fixed_chan(chan->conn);
 800e864:	4605      	mov	r5, r0
 800e866:	f855 0908 	ldr.w	r0, [r5], #-8
 800e86a:	f00a ff20 	bl	80196ae <att_get_fixed_chan>
	att_chan_attach(att, att_chan);
 800e86e:	4629      	mov	r1, r5
 800e870:	6800      	ldr	r0, [r0, #0]
 800e872:	f00a fc5a 	bl	801912a <att_chan_attach>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800e876:	f3bf 8f5b 	dmb	ish
 800e87a:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 800e87e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
 800e882:	f013 0f08 	tst.w	r3, #8
 800e886:	d104      	bne.n	800e892 <bt_att_connected+0x32>
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
 800e888:	2317      	movs	r3, #23
 800e88a:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
 800e88e:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
 800e892:	4903      	ldr	r1, [pc, #12]	; (800e8a0 <bt_att_connected+0x40>)
 800e894:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
 800e898:	f00e fb46 	bl	801cf28 <k_delayed_work_init>
}
 800e89c:	bd38      	pop	{r3, r4, r5, pc}
 800e89e:	bf00      	nop
 800e8a0:	0800f1ed 	.word	0x0800f1ed

0800e8a4 <bt_att_chan_create_pdu>:
{
 800e8a4:	b538      	push	{r3, r4, r5, lr}
 800e8a6:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
 800e8a8:	3201      	adds	r2, #1
 800e8aa:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 800e8ae:	428a      	cmp	r2, r1
 800e8b0:	d810      	bhi.n	800e8d4 <bt_att_chan_create_pdu+0x30>
	switch (att_op_get_type(op)) {
 800e8b2:	4628      	mov	r0, r5
 800e8b4:	f00a fbb8 	bl	8019028 <att_op_get_type>
 800e8b8:	2802      	cmp	r0, #2
 800e8ba:	d01e      	beq.n	800e8fa <bt_att_chan_create_pdu+0x56>
 800e8bc:	2804      	cmp	r0, #4
 800e8be:	d01c      	beq.n	800e8fa <bt_att_chan_create_pdu+0x56>
		buf = bt_l2cap_create_pdu(NULL, 0);
 800e8c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e8c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e8c8:	2100      	movs	r1, #0
 800e8ca:	4608      	mov	r0, r1
 800e8cc:	f00a fad1 	bl	8018e72 <bt_l2cap_create_pdu_timeout>
 800e8d0:	4604      	mov	r4, r0
 800e8d2:	e019      	b.n	800e908 <bt_att_chan_create_pdu+0x64>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
 800e8d4:	f04f 0300 	mov.w	r3, #0
 800e8d8:	2002      	movs	r0, #2
 800e8da:	f360 0302 	bfi	r3, r0, #0, #3
 800e8de:	f36f 03c5 	bfc	r3, #3, #3
 800e8e2:	4817      	ldr	r0, [pc, #92]	; (800e940 <bt_att_chan_create_pdu+0x9c>)
 800e8e4:	4c17      	ldr	r4, [pc, #92]	; (800e944 <bt_att_chan_create_pdu+0xa0>)
 800e8e6:	1b00      	subs	r0, r0, r4
 800e8e8:	f3c0 00c9 	ubfx	r0, r0, #3, #10
 800e8ec:	f360 138f 	bfi	r3, r0, #6, #10
 800e8f0:	4815      	ldr	r0, [pc, #84]	; (800e948 <bt_att_chan_create_pdu+0xa4>)
 800e8f2:	f7f5 fd3b 	bl	800436c <log_2>
		return NULL;
 800e8f6:	2400      	movs	r4, #0
 800e8f8:	e00d      	b.n	800e916 <bt_att_chan_create_pdu+0x72>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
 800e8fa:	4a14      	ldr	r2, [pc, #80]	; (800e94c <bt_att_chan_create_pdu+0xa8>)
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	2100      	movs	r1, #0
 800e900:	4608      	mov	r0, r1
 800e902:	f00a fab6 	bl	8018e72 <bt_l2cap_create_pdu_timeout>
 800e906:	4604      	mov	r4, r0
	if (!buf) {
 800e908:	b13c      	cbz	r4, 800e91a <bt_att_chan_create_pdu+0x76>
	hdr = net_buf_add(buf, sizeof(*hdr));
 800e90a:	2101      	movs	r1, #1
 800e90c:	f104 0008 	add.w	r0, r4, #8
 800e910:	f00c fba1 	bl	801b056 <net_buf_simple_add>
	hdr->code = op;
 800e914:	7005      	strb	r5, [r0, #0]
}
 800e916:	4620      	mov	r0, r4
 800e918:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
 800e91a:	f04f 0200 	mov.w	r2, #0
 800e91e:	2301      	movs	r3, #1
 800e920:	f363 0202 	bfi	r2, r3, #0, #3
 800e924:	f36f 02c5 	bfc	r2, #3, #3
 800e928:	4b05      	ldr	r3, [pc, #20]	; (800e940 <bt_att_chan_create_pdu+0x9c>)
 800e92a:	4906      	ldr	r1, [pc, #24]	; (800e944 <bt_att_chan_create_pdu+0xa0>)
 800e92c:	1a5b      	subs	r3, r3, r1
 800e92e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800e932:	f363 128f 	bfi	r2, r3, #6, #10
 800e936:	4629      	mov	r1, r5
 800e938:	4805      	ldr	r0, [pc, #20]	; (800e950 <bt_att_chan_create_pdu+0xac>)
 800e93a:	f7f5 fc97 	bl	800426c <log_1>
		return NULL;
 800e93e:	e7ea      	b.n	800e916 <bt_att_chan_create_pdu+0x72>
 800e940:	0801d6d8 	.word	0x0801d6d8
 800e944:	0801d6d0 	.word	0x0801d6d0
 800e948:	08020f70 	.word	0x08020f70
 800e94c:	000493e0 	.word	0x000493e0
 800e950:	08020d20 	.word	0x08020d20

0800e954 <send_err_rsp>:
	if (!req) {
 800e954:	b901      	cbnz	r1, 800e958 <send_err_rsp+0x4>
 800e956:	4770      	bx	lr
{
 800e958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e95c:	4606      	mov	r6, r0
 800e95e:	4615      	mov	r5, r2
 800e960:	461c      	mov	r4, r3
 800e962:	460f      	mov	r7, r1
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
 800e964:	2204      	movs	r2, #4
 800e966:	2101      	movs	r1, #1
 800e968:	f7ff ff9c 	bl	800e8a4 <bt_att_chan_create_pdu>
	if (!buf) {
 800e96c:	4680      	mov	r8, r0
 800e96e:	b160      	cbz	r0, 800e98a <send_err_rsp+0x36>
	rsp = net_buf_add(buf, sizeof(*rsp));
 800e970:	2104      	movs	r1, #4
 800e972:	3008      	adds	r0, #8
 800e974:	f00c fb6f 	bl	801b056 <net_buf_simple_add>
	rsp->request = req;
 800e978:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
 800e97a:	f8a0 5001 	strh.w	r5, [r0, #1]
	rsp->error = err;
 800e97e:	70c4      	strb	r4, [r0, #3]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
 800e980:	4a03      	ldr	r2, [pc, #12]	; (800e990 <send_err_rsp+0x3c>)
 800e982:	4641      	mov	r1, r8
 800e984:	4630      	mov	r0, r6
 800e986:	f00a fd53 	bl	8019430 <bt_att_chan_send_rsp>
}
 800e98a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e98e:	bf00      	nop
 800e990:	080191f1 	.word	0x080191f1

0800e994 <bt_att_recv>:
{
 800e994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
 800e998:	898b      	ldrh	r3, [r1, #12]
 800e99a:	b1a3      	cbz	r3, 800e9c6 <bt_att_recv+0x32>
 800e99c:	4607      	mov	r7, r0
 800e99e:	460e      	mov	r6, r1
 800e9a0:	f1a0 0808 	sub.w	r8, r0, #8
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
 800e9a4:	2101      	movs	r1, #1
 800e9a6:	f106 0008 	add.w	r0, r6, #8
 800e9aa:	f00c fb7c 	bl	801b0a6 <net_buf_simple_pull_mem>
 800e9ae:	4605      	mov	r5, r0
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	2b0c      	cmp	r3, #12
 800e9b4:	d81d      	bhi.n	800e9f2 <bt_att_recv+0x5e>
		if (hdr->code == handlers[i].op) {
 800e9b6:	782c      	ldrb	r4, [r5, #0]
 800e9b8:	4a59      	ldr	r2, [pc, #356]	; (800eb20 <bt_att_recv+0x18c>)
 800e9ba:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800e9be:	4294      	cmp	r4, r2
 800e9c0:	d013      	beq.n	800e9ea <bt_att_recv+0x56>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
 800e9c2:	3301      	adds	r3, #1
 800e9c4:	e7f5      	b.n	800e9b2 <bt_att_recv+0x1e>
		BT_ERR("Too small ATT PDU received");
 800e9c6:	f04f 0100 	mov.w	r1, #0
 800e9ca:	2301      	movs	r3, #1
 800e9cc:	f363 0102 	bfi	r1, r3, #0, #3
 800e9d0:	f36f 01c5 	bfc	r1, #3, #3
 800e9d4:	4b53      	ldr	r3, [pc, #332]	; (800eb24 <bt_att_recv+0x190>)
 800e9d6:	4a54      	ldr	r2, [pc, #336]	; (800eb28 <bt_att_recv+0x194>)
 800e9d8:	1a9b      	subs	r3, r3, r2
 800e9da:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800e9de:	f363 118f 	bfi	r1, r3, #6, #10
 800e9e2:	4852      	ldr	r0, [pc, #328]	; (800eb2c <bt_att_recv+0x198>)
 800e9e4:	f7f5 fdb2 	bl	800454c <log_0>
		return 0;
 800e9e8:	e016      	b.n	800ea18 <bt_att_recv+0x84>
			handler = &handlers[i];
 800e9ea:	4c4d      	ldr	r4, [pc, #308]	; (800eb20 <bt_att_recv+0x18c>)
 800e9ec:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
			break;
 800e9f0:	e000      	b.n	800e9f4 <bt_att_recv+0x60>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
 800e9f2:	2400      	movs	r4, #0
	if (!handler) {
 800e9f4:	b19c      	cbz	r4, 800ea1e <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
 800e9f6:	78a3      	ldrb	r3, [r4, #2]
 800e9f8:	2b01      	cmp	r3, #1
 800e9fa:	d02f      	beq.n	800ea5c <bt_att_recv+0xc8>
		} else if (handler->type == ATT_INDICATION &&
 800e9fc:	78a3      	ldrb	r3, [r4, #2]
 800e9fe:	2b05      	cmp	r3, #5
 800ea00:	d04f      	beq.n	800eaa2 <bt_att_recv+0x10e>
	if (buf->len < handler->expect_len) {
 800ea02:	89b1      	ldrh	r1, [r6, #12]
 800ea04:	7863      	ldrb	r3, [r4, #1]
 800ea06:	4299      	cmp	r1, r3
 800ea08:	d36d      	bcc.n	800eae6 <bt_att_recv+0x152>
		err = handler->func(att_chan, buf);
 800ea0a:	6863      	ldr	r3, [r4, #4]
 800ea0c:	4631      	mov	r1, r6
 800ea0e:	4640      	mov	r0, r8
 800ea10:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
 800ea12:	78a3      	ldrb	r3, [r4, #2]
 800ea14:	2b01      	cmp	r3, #1
 800ea16:	d07a      	beq.n	800eb0e <bt_att_recv+0x17a>
}
 800ea18:	2000      	movs	r0, #0
 800ea1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
 800ea1e:	f04f 0200 	mov.w	r2, #0
 800ea22:	2302      	movs	r3, #2
 800ea24:	f363 0202 	bfi	r2, r3, #0, #3
 800ea28:	f36f 02c5 	bfc	r2, #3, #3
 800ea2c:	4b3d      	ldr	r3, [pc, #244]	; (800eb24 <bt_att_recv+0x190>)
 800ea2e:	493e      	ldr	r1, [pc, #248]	; (800eb28 <bt_att_recv+0x194>)
 800ea30:	1a5b      	subs	r3, r3, r1
 800ea32:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800ea36:	f363 128f 	bfi	r2, r3, #6, #10
 800ea3a:	7829      	ldrb	r1, [r5, #0]
 800ea3c:	483c      	ldr	r0, [pc, #240]	; (800eb30 <bt_att_recv+0x19c>)
 800ea3e:	f7f5 fc15 	bl	800426c <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
 800ea42:	782c      	ldrb	r4, [r5, #0]
 800ea44:	4620      	mov	r0, r4
 800ea46:	f00a faef 	bl	8019028 <att_op_get_type>
 800ea4a:	2800      	cmp	r0, #0
 800ea4c:	d0e4      	beq.n	800ea18 <bt_att_recv+0x84>
			send_err_rsp(att_chan, hdr->code, 0,
 800ea4e:	2306      	movs	r3, #6
 800ea50:	2200      	movs	r2, #0
 800ea52:	4621      	mov	r1, r4
 800ea54:	4640      	mov	r0, r8
 800ea56:	f7ff ff7d 	bl	800e954 <send_err_rsp>
		return 0;
 800ea5a:	e7dd      	b.n	800ea18 <bt_att_recv+0x84>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
 800ea5c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800ea60:	f3bf 8f5b 	dmb	ish
 800ea64:	e853 2f00 	ldrex	r2, [r3]
 800ea68:	f042 0101 	orr.w	r1, r2, #1
 800ea6c:	e843 1000 	strex	r0, r1, [r3]
 800ea70:	2800      	cmp	r0, #0
 800ea72:	d1f7      	bne.n	800ea64 <bt_att_recv+0xd0>
 800ea74:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
 800ea78:	f012 0f01 	tst.w	r2, #1
 800ea7c:	d0be      	beq.n	800e9fc <bt_att_recv+0x68>
			BT_WARN("Ignoring unexpected request");
 800ea7e:	f04f 0100 	mov.w	r1, #0
 800ea82:	2302      	movs	r3, #2
 800ea84:	f363 0102 	bfi	r1, r3, #0, #3
 800ea88:	f36f 01c5 	bfc	r1, #3, #3
 800ea8c:	4b25      	ldr	r3, [pc, #148]	; (800eb24 <bt_att_recv+0x190>)
 800ea8e:	4a26      	ldr	r2, [pc, #152]	; (800eb28 <bt_att_recv+0x194>)
 800ea90:	1a9b      	subs	r3, r3, r2
 800ea92:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800ea96:	f363 118f 	bfi	r1, r3, #6, #10
 800ea9a:	4826      	ldr	r0, [pc, #152]	; (800eb34 <bt_att_recv+0x1a0>)
 800ea9c:	f7f5 fd56 	bl	800454c <log_0>
			return 0;
 800eaa0:	e7ba      	b.n	800ea18 <bt_att_recv+0x84>
			   atomic_test_and_set_bit(att_chan->flags,
 800eaa2:	37b8      	adds	r7, #184	; 0xb8
 800eaa4:	f3bf 8f5b 	dmb	ish
 800eaa8:	e857 3f00 	ldrex	r3, [r7]
 800eaac:	f043 0202 	orr.w	r2, r3, #2
 800eab0:	e847 2100 	strex	r1, r2, [r7]
 800eab4:	2900      	cmp	r1, #0
 800eab6:	d1f7      	bne.n	800eaa8 <bt_att_recv+0x114>
 800eab8:	f3bf 8f5b 	dmb	ish
		} else if (handler->type == ATT_INDICATION &&
 800eabc:	f013 0f02 	tst.w	r3, #2
 800eac0:	d09f      	beq.n	800ea02 <bt_att_recv+0x6e>
			BT_WARN("Ignoring unexpected indication");
 800eac2:	f04f 0100 	mov.w	r1, #0
 800eac6:	2302      	movs	r3, #2
 800eac8:	f363 0102 	bfi	r1, r3, #0, #3
 800eacc:	f36f 01c5 	bfc	r1, #3, #3
 800ead0:	4b14      	ldr	r3, [pc, #80]	; (800eb24 <bt_att_recv+0x190>)
 800ead2:	4a15      	ldr	r2, [pc, #84]	; (800eb28 <bt_att_recv+0x194>)
 800ead4:	1a9b      	subs	r3, r3, r2
 800ead6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800eada:	f363 118f 	bfi	r1, r3, #6, #10
 800eade:	4816      	ldr	r0, [pc, #88]	; (800eb38 <bt_att_recv+0x1a4>)
 800eae0:	f7f5 fd34 	bl	800454c <log_0>
			return 0;
 800eae4:	e798      	b.n	800ea18 <bt_att_recv+0x84>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
 800eae6:	f04f 0300 	mov.w	r3, #0
 800eaea:	2201      	movs	r2, #1
 800eaec:	f362 0302 	bfi	r3, r2, #0, #3
 800eaf0:	f36f 03c5 	bfc	r3, #3, #3
 800eaf4:	4a0b      	ldr	r2, [pc, #44]	; (800eb24 <bt_att_recv+0x190>)
 800eaf6:	480c      	ldr	r0, [pc, #48]	; (800eb28 <bt_att_recv+0x194>)
 800eaf8:	1a12      	subs	r2, r2, r0
 800eafa:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 800eafe:	f362 138f 	bfi	r3, r2, #6, #10
 800eb02:	782a      	ldrb	r2, [r5, #0]
 800eb04:	480d      	ldr	r0, [pc, #52]	; (800eb3c <bt_att_recv+0x1a8>)
 800eb06:	f7f5 fc31 	bl	800436c <log_2>
		err = BT_ATT_ERR_INVALID_PDU;
 800eb0a:	2004      	movs	r0, #4
 800eb0c:	e781      	b.n	800ea12 <bt_att_recv+0x7e>
	if (handler->type == ATT_REQUEST && err) {
 800eb0e:	2800      	cmp	r0, #0
 800eb10:	d082      	beq.n	800ea18 <bt_att_recv+0x84>
		send_err_rsp(att_chan, hdr->code, 0, err);
 800eb12:	4603      	mov	r3, r0
 800eb14:	2200      	movs	r2, #0
 800eb16:	7829      	ldrb	r1, [r5, #0]
 800eb18:	4640      	mov	r0, r8
 800eb1a:	f7ff ff1b 	bl	800e954 <send_err_rsp>
 800eb1e:	e77b      	b.n	800ea18 <bt_att_recv+0x84>
 800eb20:	08021074 	.word	0x08021074
 800eb24:	0801d6d8 	.word	0x0801d6d8
 800eb28:	0801d6d0 	.word	0x0801d6d0
 800eb2c:	08020f98 	.word	0x08020f98
 800eb30:	08020fb4 	.word	0x08020fb4
 800eb34:	08020fd0 	.word	0x08020fd0
 800eb38:	08020fec 	.word	0x08020fec
 800eb3c:	0802100c 	.word	0x0802100c

0800eb40 <att_write_rsp>:
{
 800eb40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb44:	b08a      	sub	sp, #40	; 0x28
 800eb46:	4604      	mov	r4, r0
 800eb48:	4617      	mov	r7, r2
 800eb4a:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
 800eb4c:	6803      	ldr	r3, [r0, #0]
 800eb4e:	4688      	mov	r8, r1
 800eb50:	3900      	subs	r1, #0
 800eb52:	bf18      	it	ne
 800eb54:	2101      	movne	r1, #1
 800eb56:	6818      	ldr	r0, [r3, #0]
 800eb58:	f00b fb0b 	bl	801a172 <bt_gatt_change_aware>
 800eb5c:	2800      	cmp	r0, #0
 800eb5e:	d04f      	beq.n	800ec00 <att_write_rsp+0xc0>
	if (!handle) {
 800eb60:	b925      	cbnz	r5, 800eb6c <att_write_rsp+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
 800eb62:	2601      	movs	r6, #1
}
 800eb64:	4630      	mov	r0, r6
 800eb66:	b00a      	add	sp, #40	; 0x28
 800eb68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(&data, 0, sizeof(data));
 800eb6c:	2218      	movs	r2, #24
 800eb6e:	2100      	movs	r1, #0
 800eb70:	a804      	add	r0, sp, #16
 800eb72:	f009 f9a8 	bl	8017ec6 <memset>
	if (rsp) {
 800eb76:	b13f      	cbz	r7, 800eb88 <att_write_rsp+0x48>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
 800eb78:	2200      	movs	r2, #0
 800eb7a:	4639      	mov	r1, r7
 800eb7c:	4620      	mov	r0, r4
 800eb7e:	f7ff fe91 	bl	800e8a4 <bt_att_chan_create_pdu>
 800eb82:	9005      	str	r0, [sp, #20]
		if (!data.buf) {
 800eb84:	2800      	cmp	r0, #0
 800eb86:	d03d      	beq.n	800ec04 <att_write_rsp+0xc4>
	data.conn = chan->att->conn;
 800eb88:	6823      	ldr	r3, [r4, #0]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	9304      	str	r3, [sp, #16]
	data.req = req;
 800eb8e:	f88d 8018 	strb.w	r8, [sp, #24]
	data.offset = offset;
 800eb92:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800eb96:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	data.value = value;
 800eb9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eb9c:	9307      	str	r3, [sp, #28]
	data.len = len;
 800eb9e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800eba2:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
 800eba6:	2301      	movs	r3, #1
 800eba8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
 800ebac:	ab04      	add	r3, sp, #16
 800ebae:	9302      	str	r3, [sp, #8]
 800ebb0:	4b15      	ldr	r3, [pc, #84]	; (800ec08 <att_write_rsp+0xc8>)
 800ebb2:	9301      	str	r3, [sp, #4]
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	9200      	str	r2, [sp, #0]
 800ebb8:	4613      	mov	r3, r2
 800ebba:	4629      	mov	r1, r5
 800ebbc:	4628      	mov	r0, r5
 800ebbe:	f001 faeb 	bl	8010198 <bt_gatt_foreach_attr_type>
	if (data.err) {
 800ebc2:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
 800ebc6:	b93e      	cbnz	r6, 800ebd8 <att_write_rsp+0x98>
	if (data.buf) {
 800ebc8:	9905      	ldr	r1, [sp, #20]
 800ebca:	2900      	cmp	r1, #0
 800ebcc:	d0ca      	beq.n	800eb64 <att_write_rsp+0x24>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
 800ebce:	4a0f      	ldr	r2, [pc, #60]	; (800ec0c <att_write_rsp+0xcc>)
 800ebd0:	4620      	mov	r0, r4
 800ebd2:	f00a fc2d 	bl	8019430 <bt_att_chan_send_rsp>
 800ebd6:	e7c5      	b.n	800eb64 <att_write_rsp+0x24>
		if (rsp) {
 800ebd8:	b927      	cbnz	r7, 800ebe4 <att_write_rsp+0xa4>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
 800ebda:	f1b8 0f18 	cmp.w	r8, #24
 800ebde:	d00c      	beq.n	800ebfa <att_write_rsp+0xba>
 800ebe0:	2600      	movs	r6, #0
 800ebe2:	e7bf      	b.n	800eb64 <att_write_rsp+0x24>
			net_buf_unref(data.buf);
 800ebe4:	9805      	ldr	r0, [sp, #20]
 800ebe6:	f00c f9ec 	bl	801afc2 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
 800ebea:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800ebee:	462a      	mov	r2, r5
 800ebf0:	4641      	mov	r1, r8
 800ebf2:	4620      	mov	r0, r4
 800ebf4:	f7ff feae 	bl	800e954 <send_err_rsp>
 800ebf8:	e7ef      	b.n	800ebda <att_write_rsp+0x9a>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
 800ebfa:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
 800ebfe:	e7b1      	b.n	800eb64 <att_write_rsp+0x24>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
 800ec00:	2612      	movs	r6, #18
 800ec02:	e7af      	b.n	800eb64 <att_write_rsp+0x24>
			return BT_ATT_ERR_UNLIKELY;
 800ec04:	260e      	movs	r6, #14
 800ec06:	e7ad      	b.n	800eb64 <att_write_rsp+0x24>
 800ec08:	080193db 	.word	0x080193db
 800ec0c:	080191f1 	.word	0x080191f1

0800ec10 <bt_att_create_pdu>:
{
 800ec10:	b570      	push	{r4, r5, r6, lr}
 800ec12:	460e      	mov	r6, r1
 800ec14:	4615      	mov	r5, r2
	att = att_get(conn);
 800ec16:	f7ff fb07 	bl	800e228 <att_get>
	if (!att) {
 800ec1a:	4604      	mov	r4, r0
 800ec1c:	b360      	cbz	r0, 800ec78 <bt_att_create_pdu+0x68>
	return list->head;
 800ec1e:	6a44      	ldr	r4, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
 800ec20:	b15c      	cbz	r4, 800ec3a <bt_att_create_pdu+0x2a>
 800ec22:	f5b4 7496 	subs.w	r4, r4, #300	; 0x12c
 800ec26:	d00a      	beq.n	800ec3e <bt_att_create_pdu+0x2e>
Z_GENLIST_PEEK_NEXT(slist, snode)
 800ec28:	f514 7096 	adds.w	r0, r4, #300	; 0x12c
 800ec2c:	d00c      	beq.n	800ec48 <bt_att_create_pdu+0x38>
	return node->next;
 800ec2e:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 800ec32:	b148      	cbz	r0, 800ec48 <bt_att_create_pdu+0x38>
 800ec34:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800ec38:	e006      	b.n	800ec48 <bt_att_create_pdu+0x38>
 800ec3a:	4620      	mov	r0, r4
 800ec3c:	e004      	b.n	800ec48 <bt_att_create_pdu+0x38>
 800ec3e:	4620      	mov	r0, r4
 800ec40:	e002      	b.n	800ec48 <bt_att_create_pdu+0x38>
 800ec42:	4603      	mov	r3, r0
 800ec44:	4604      	mov	r4, r0
 800ec46:	4618      	mov	r0, r3
 800ec48:	b1c4      	cbz	r4, 800ec7c <bt_att_create_pdu+0x6c>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
 800ec4a:	1c6b      	adds	r3, r5, #1
 800ec4c:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 800ec50:	4293      	cmp	r3, r2
 800ec52:	d90b      	bls.n	800ec6c <bt_att_create_pdu+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
 800ec54:	2800      	cmp	r0, #0
 800ec56:	d0f4      	beq.n	800ec42 <bt_att_create_pdu+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
 800ec58:	f510 7396 	adds.w	r3, r0, #300	; 0x12c
 800ec5c:	d0f2      	beq.n	800ec44 <bt_att_create_pdu+0x34>
	return node->next;
 800ec5e:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d0ee      	beq.n	800ec44 <bt_att_create_pdu+0x34>
 800ec66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ec6a:	e7eb      	b.n	800ec44 <bt_att_create_pdu+0x34>
		return bt_att_chan_create_pdu(chan, op, len);
 800ec6c:	462a      	mov	r2, r5
 800ec6e:	4631      	mov	r1, r6
 800ec70:	4620      	mov	r0, r4
 800ec72:	f7ff fe17 	bl	800e8a4 <bt_att_chan_create_pdu>
 800ec76:	4604      	mov	r4, r0
}
 800ec78:	4620      	mov	r0, r4
 800ec7a:	bd70      	pop	{r4, r5, r6, pc}
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
 800ec7c:	f04f 0200 	mov.w	r2, #0
 800ec80:	2302      	movs	r3, #2
 800ec82:	f363 0202 	bfi	r2, r3, #0, #3
 800ec86:	f36f 02c5 	bfc	r2, #3, #3
 800ec8a:	4b06      	ldr	r3, [pc, #24]	; (800eca4 <bt_att_create_pdu+0x94>)
 800ec8c:	4906      	ldr	r1, [pc, #24]	; (800eca8 <bt_att_create_pdu+0x98>)
 800ec8e:	1a5b      	subs	r3, r3, r1
 800ec90:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800ec94:	f363 128f 	bfi	r2, r3, #6, #10
 800ec98:	1c69      	adds	r1, r5, #1
 800ec9a:	4804      	ldr	r0, [pc, #16]	; (800ecac <bt_att_create_pdu+0x9c>)
 800ec9c:	f7f5 fae6 	bl	800426c <log_1>
	return NULL;
 800eca0:	e7ea      	b.n	800ec78 <bt_att_create_pdu+0x68>
 800eca2:	bf00      	nop
 800eca4:	0801d6d8 	.word	0x0801d6d8
 800eca8:	0801d6d0 	.word	0x0801d6d0
 800ecac:	0802102c 	.word	0x0802102c

0800ecb0 <att_read_group_rsp>:
{
 800ecb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecb4:	b08a      	sub	sp, #40	; 0x28
 800ecb6:	4604      	mov	r4, r0
 800ecb8:	460f      	mov	r7, r1
 800ecba:	4615      	mov	r5, r2
 800ecbc:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
 800ecbe:	f8d0 8008 	ldr.w	r8, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
 800ecc2:	2214      	movs	r2, #20
 800ecc4:	2100      	movs	r1, #0
 800ecc6:	eb0d 0002 	add.w	r0, sp, r2
 800ecca:	f009 f8fc 	bl	8017ec6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
 800ecce:	2201      	movs	r2, #1
 800ecd0:	2111      	movs	r1, #17
 800ecd2:	4640      	mov	r0, r8
 800ecd4:	f7ff ff9c 	bl	800ec10 <bt_att_create_pdu>
 800ecd8:	9007      	str	r0, [sp, #28]
	if (!data.buf) {
 800ecda:	b350      	cbz	r0, 800ed32 <att_read_group_rsp+0x82>
	data.chan = chan;
 800ecdc:	9405      	str	r4, [sp, #20]
	data.uuid = uuid;
 800ecde:	9706      	str	r7, [sp, #24]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
 800ece0:	2101      	movs	r1, #1
 800ece2:	3008      	adds	r0, #8
 800ece4:	f00c f9b7 	bl	801b056 <net_buf_simple_add>
 800ece8:	9008      	str	r0, [sp, #32]
	data.rsp->len = 0U;
 800ecea:	2200      	movs	r2, #0
 800ecec:	7002      	strb	r2, [r0, #0]
	data.group = NULL;
 800ecee:	9209      	str	r2, [sp, #36]	; 0x24
 800ecf0:	ab05      	add	r3, sp, #20
 800ecf2:	9302      	str	r3, [sp, #8]
 800ecf4:	4b10      	ldr	r3, [pc, #64]	; (800ed38 <att_read_group_rsp+0x88>)
 800ecf6:	9301      	str	r3, [sp, #4]
 800ecf8:	9200      	str	r2, [sp, #0]
 800ecfa:	4613      	mov	r3, r2
 800ecfc:	4631      	mov	r1, r6
 800ecfe:	4628      	mov	r0, r5
 800ed00:	f001 fa4a 	bl	8010198 <bt_gatt_foreach_attr_type>
	if (!data.rsp->len) {
 800ed04:	9b08      	ldr	r3, [sp, #32]
 800ed06:	781e      	ldrb	r6, [r3, #0]
 800ed08:	b14e      	cbz	r6, 800ed1e <att_read_group_rsp+0x6e>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
 800ed0a:	4a0c      	ldr	r2, [pc, #48]	; (800ed3c <att_read_group_rsp+0x8c>)
 800ed0c:	9907      	ldr	r1, [sp, #28]
 800ed0e:	4620      	mov	r0, r4
 800ed10:	f00a fb8e 	bl	8019430 <bt_att_chan_send_rsp>
	return 0;
 800ed14:	2600      	movs	r6, #0
}
 800ed16:	4630      	mov	r0, r6
 800ed18:	b00a      	add	sp, #40	; 0x28
 800ed1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
 800ed1e:	9807      	ldr	r0, [sp, #28]
 800ed20:	f00c f94f 	bl	801afc2 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
 800ed24:	230a      	movs	r3, #10
 800ed26:	462a      	mov	r2, r5
 800ed28:	2110      	movs	r1, #16
 800ed2a:	4620      	mov	r0, r4
 800ed2c:	f7ff fe12 	bl	800e954 <send_err_rsp>
		return 0;
 800ed30:	e7f1      	b.n	800ed16 <att_read_group_rsp+0x66>
		return BT_ATT_ERR_UNLIKELY;
 800ed32:	260e      	movs	r6, #14
 800ed34:	e7ef      	b.n	800ed16 <att_read_group_rsp+0x66>
 800ed36:	bf00      	nop
 800ed38:	0800e551 	.word	0x0800e551
 800ed3c:	080191f1 	.word	0x080191f1

0800ed40 <att_read_mult_req>:
{
 800ed40:	b570      	push	{r4, r5, r6, lr}
 800ed42:	b08a      	sub	sp, #40	; 0x28
 800ed44:	4606      	mov	r6, r0
 800ed46:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
 800ed48:	6884      	ldr	r4, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
 800ed4a:	2214      	movs	r2, #20
 800ed4c:	2100      	movs	r1, #0
 800ed4e:	eb0d 0002 	add.w	r0, sp, r2
 800ed52:	f009 f8b8 	bl	8017ec6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
 800ed56:	2200      	movs	r2, #0
 800ed58:	210f      	movs	r1, #15
 800ed5a:	4620      	mov	r0, r4
 800ed5c:	f7ff ff58 	bl	800ec10 <bt_att_create_pdu>
 800ed60:	9007      	str	r0, [sp, #28]
	if (!data.buf) {
 800ed62:	b368      	cbz	r0, 800edc0 <att_read_mult_req+0x80>
	data.chan = chan;
 800ed64:	9605      	str	r6, [sp, #20]
	while (buf->len >= sizeof(uint16_t)) {
 800ed66:	89ab      	ldrh	r3, [r5, #12]
 800ed68:	2b01      	cmp	r3, #1
 800ed6a:	d921      	bls.n	800edb0 <att_read_mult_req+0x70>
		handle = net_buf_pull_le16(buf);
 800ed6c:	f105 0008 	add.w	r0, r5, #8
 800ed70:	f00c f9a1 	bl	801b0b6 <net_buf_simple_pull_le16>
 800ed74:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
 800ed76:	2301      	movs	r3, #1
 800ed78:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800ed7c:	ab05      	add	r3, sp, #20
 800ed7e:	9302      	str	r3, [sp, #8]
 800ed80:	4b10      	ldr	r3, [pc, #64]	; (800edc4 <att_read_mult_req+0x84>)
 800ed82:	9301      	str	r3, [sp, #4]
 800ed84:	2200      	movs	r2, #0
 800ed86:	9200      	str	r2, [sp, #0]
 800ed88:	4613      	mov	r3, r2
 800ed8a:	4601      	mov	r1, r0
 800ed8c:	f001 fa04 	bl	8010198 <bt_gatt_foreach_attr_type>
		if (data.err) {
 800ed90:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d0e6      	beq.n	800ed66 <att_read_mult_req+0x26>
			net_buf_unref(data.buf);
 800ed98:	9807      	ldr	r0, [sp, #28]
 800ed9a:	f00c f912 	bl	801afc2 <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_REQ, handle,
 800ed9e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800eda2:	4622      	mov	r2, r4
 800eda4:	210e      	movs	r1, #14
 800eda6:	4630      	mov	r0, r6
 800eda8:	f7ff fdd4 	bl	800e954 <send_err_rsp>
			return 0;
 800edac:	2000      	movs	r0, #0
 800edae:	e005      	b.n	800edbc <att_read_mult_req+0x7c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
 800edb0:	4a05      	ldr	r2, [pc, #20]	; (800edc8 <att_read_mult_req+0x88>)
 800edb2:	9907      	ldr	r1, [sp, #28]
 800edb4:	4630      	mov	r0, r6
 800edb6:	f00a fb3b 	bl	8019430 <bt_att_chan_send_rsp>
	return 0;
 800edba:	2000      	movs	r0, #0
}
 800edbc:	b00a      	add	sp, #40	; 0x28
 800edbe:	bd70      	pop	{r4, r5, r6, pc}
		return BT_ATT_ERR_UNLIKELY;
 800edc0:	200e      	movs	r0, #14
 800edc2:	e7fb      	b.n	800edbc <att_read_mult_req+0x7c>
 800edc4:	080195a1 	.word	0x080195a1
 800edc8:	080191f1 	.word	0x080191f1

0800edcc <att_read_rsp>:
{
 800edcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edd0:	b08a      	sub	sp, #40	; 0x28
 800edd2:	4604      	mov	r4, r0
 800edd4:	4688      	mov	r8, r1
 800edd6:	4616      	mov	r6, r2
 800edd8:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
 800edda:	6887      	ldr	r7, [r0, #8]
	if (!bt_gatt_change_aware(conn, true)) {
 800eddc:	2101      	movs	r1, #1
 800edde:	4638      	mov	r0, r7
 800ede0:	f00b f9c7 	bl	801a172 <bt_gatt_change_aware>
 800ede4:	2800      	cmp	r0, #0
 800ede6:	d03a      	beq.n	800ee5e <att_read_rsp+0x92>
	if (!handle) {
 800ede8:	b925      	cbnz	r5, 800edf4 <att_read_rsp+0x28>
		return BT_ATT_ERR_INVALID_HANDLE;
 800edea:	2601      	movs	r6, #1
}
 800edec:	4630      	mov	r0, r6
 800edee:	b00a      	add	sp, #40	; 0x28
 800edf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(&data, 0, sizeof(data));
 800edf4:	2214      	movs	r2, #20
 800edf6:	2100      	movs	r1, #0
 800edf8:	eb0d 0002 	add.w	r0, sp, r2
 800edfc:	f009 f863 	bl	8017ec6 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
 800ee00:	2200      	movs	r2, #0
 800ee02:	4631      	mov	r1, r6
 800ee04:	4638      	mov	r0, r7
 800ee06:	f7ff ff03 	bl	800ec10 <bt_att_create_pdu>
 800ee0a:	9007      	str	r0, [sp, #28]
	if (!data.buf) {
 800ee0c:	b348      	cbz	r0, 800ee62 <att_read_rsp+0x96>
	data.chan = chan;
 800ee0e:	9405      	str	r4, [sp, #20]
	data.offset = offset;
 800ee10:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800ee14:	f8ad 3018 	strh.w	r3, [sp, #24]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
 800ee18:	2301      	movs	r3, #1
 800ee1a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800ee1e:	ab05      	add	r3, sp, #20
 800ee20:	9302      	str	r3, [sp, #8]
 800ee22:	4b11      	ldr	r3, [pc, #68]	; (800ee68 <att_read_rsp+0x9c>)
 800ee24:	9301      	str	r3, [sp, #4]
 800ee26:	2200      	movs	r2, #0
 800ee28:	9200      	str	r2, [sp, #0]
 800ee2a:	4613      	mov	r3, r2
 800ee2c:	4629      	mov	r1, r5
 800ee2e:	4628      	mov	r0, r5
 800ee30:	f001 f9b2 	bl	8010198 <bt_gatt_foreach_attr_type>
	if (data.err) {
 800ee34:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
 800ee38:	b92e      	cbnz	r6, 800ee46 <att_read_rsp+0x7a>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
 800ee3a:	4a0c      	ldr	r2, [pc, #48]	; (800ee6c <att_read_rsp+0xa0>)
 800ee3c:	9907      	ldr	r1, [sp, #28]
 800ee3e:	4620      	mov	r0, r4
 800ee40:	f00a faf6 	bl	8019430 <bt_att_chan_send_rsp>
	return 0;
 800ee44:	e7d2      	b.n	800edec <att_read_rsp+0x20>
		net_buf_unref(data.buf);
 800ee46:	9807      	ldr	r0, [sp, #28]
 800ee48:	f00c f8bb 	bl	801afc2 <net_buf_unref>
		send_err_rsp(chan, op, handle, data.err);
 800ee4c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800ee50:	462a      	mov	r2, r5
 800ee52:	4641      	mov	r1, r8
 800ee54:	4620      	mov	r0, r4
 800ee56:	f7ff fd7d 	bl	800e954 <send_err_rsp>
		return 0;
 800ee5a:	2600      	movs	r6, #0
 800ee5c:	e7c6      	b.n	800edec <att_read_rsp+0x20>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
 800ee5e:	2612      	movs	r6, #18
 800ee60:	e7c4      	b.n	800edec <att_read_rsp+0x20>
		return BT_ATT_ERR_UNLIKELY;
 800ee62:	260e      	movs	r6, #14
 800ee64:	e7c2      	b.n	800edec <att_read_rsp+0x20>
 800ee66:	bf00      	nop
 800ee68:	080195a1 	.word	0x080195a1
 800ee6c:	080191f1 	.word	0x080191f1

0800ee70 <att_read_type_rsp>:
{
 800ee70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee74:	b08a      	sub	sp, #40	; 0x28
 800ee76:	4604      	mov	r4, r0
 800ee78:	460f      	mov	r7, r1
 800ee7a:	4615      	mov	r5, r2
 800ee7c:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
 800ee7e:	f8d0 8008 	ldr.w	r8, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
 800ee82:	2218      	movs	r2, #24
 800ee84:	2100      	movs	r1, #0
 800ee86:	a804      	add	r0, sp, #16
 800ee88:	f009 f81d 	bl	8017ec6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
 800ee8c:	2201      	movs	r2, #1
 800ee8e:	2109      	movs	r1, #9
 800ee90:	4640      	mov	r0, r8
 800ee92:	f7ff febd 	bl	800ec10 <bt_att_create_pdu>
 800ee96:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
 800ee98:	b368      	cbz	r0, 800eef6 <att_read_type_rsp+0x86>
	data.chan = chan;
 800ee9a:	9404      	str	r4, [sp, #16]
	data.uuid = uuid;
 800ee9c:	9705      	str	r7, [sp, #20]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
 800ee9e:	2101      	movs	r1, #1
 800eea0:	3008      	adds	r0, #8
 800eea2:	f00c f8d8 	bl	801b056 <net_buf_simple_add>
 800eea6:	9007      	str	r0, [sp, #28]
	data.rsp->len = 0U;
 800eea8:	2200      	movs	r2, #0
 800eeaa:	7002      	strb	r2, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
 800eeac:	230a      	movs	r3, #10
 800eeae:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800eeb2:	ab04      	add	r3, sp, #16
 800eeb4:	9302      	str	r3, [sp, #8]
 800eeb6:	4b11      	ldr	r3, [pc, #68]	; (800eefc <att_read_type_rsp+0x8c>)
 800eeb8:	9301      	str	r3, [sp, #4]
 800eeba:	9200      	str	r2, [sp, #0]
 800eebc:	4613      	mov	r3, r2
 800eebe:	4631      	mov	r1, r6
 800eec0:	4628      	mov	r0, r5
 800eec2:	f001 f969 	bl	8010198 <bt_gatt_foreach_attr_type>
	if (data.err) {
 800eec6:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
 800eeca:	b946      	cbnz	r6, 800eede <att_read_type_rsp+0x6e>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
 800eecc:	4a0c      	ldr	r2, [pc, #48]	; (800ef00 <att_read_type_rsp+0x90>)
 800eece:	9906      	ldr	r1, [sp, #24]
 800eed0:	4620      	mov	r0, r4
 800eed2:	f00a faad 	bl	8019430 <bt_att_chan_send_rsp>
}
 800eed6:	4630      	mov	r0, r6
 800eed8:	b00a      	add	sp, #40	; 0x28
 800eeda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
 800eede:	9806      	ldr	r0, [sp, #24]
 800eee0:	f00c f86f 	bl	801afc2 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, start_handle,
 800eee4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800eee8:	462a      	mov	r2, r5
 800eeea:	2108      	movs	r1, #8
 800eeec:	4620      	mov	r0, r4
 800eeee:	f7ff fd31 	bl	800e954 <send_err_rsp>
		return 0;
 800eef2:	2600      	movs	r6, #0
 800eef4:	e7ef      	b.n	800eed6 <att_read_type_rsp+0x66>
		return BT_ATT_ERR_UNLIKELY;
 800eef6:	260e      	movs	r6, #14
 800eef8:	e7ed      	b.n	800eed6 <att_read_type_rsp+0x66>
 800eefa:	bf00      	nop
 800eefc:	0800e605 	.word	0x0800e605
 800ef00:	080191f1 	.word	0x080191f1

0800ef04 <att_find_type_rsp>:
{
 800ef04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef08:	b08a      	sub	sp, #40	; 0x28
 800ef0a:	4604      	mov	r4, r0
 800ef0c:	460d      	mov	r5, r1
 800ef0e:	4616      	mov	r6, r2
 800ef10:	461f      	mov	r7, r3
	struct bt_conn *conn = chan->chan.chan.conn;
 800ef12:	f8d0 8008 	ldr.w	r8, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
 800ef16:	2214      	movs	r2, #20
 800ef18:	2100      	movs	r1, #0
 800ef1a:	eb0d 0002 	add.w	r0, sp, r2
 800ef1e:	f008 ffd2 	bl	8017ec6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
 800ef22:	2200      	movs	r2, #0
 800ef24:	2107      	movs	r1, #7
 800ef26:	4640      	mov	r0, r8
 800ef28:	f7ff fe72 	bl	800ec10 <bt_att_create_pdu>
 800ef2c:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
 800ef2e:	b360      	cbz	r0, 800ef8a <att_find_type_rsp+0x86>
	data.chan = chan;
 800ef30:	9405      	str	r4, [sp, #20]
	data.group = NULL;
 800ef32:	2200      	movs	r2, #0
 800ef34:	9207      	str	r2, [sp, #28]
	data.value = value;
 800ef36:	9708      	str	r7, [sp, #32]
	data.value_len = value_len;
 800ef38:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800ef3c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
 800ef40:	230a      	movs	r3, #10
 800ef42:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 800ef46:	ab05      	add	r3, sp, #20
 800ef48:	9302      	str	r3, [sp, #8]
 800ef4a:	4b11      	ldr	r3, [pc, #68]	; (800ef90 <att_find_type_rsp+0x8c>)
 800ef4c:	9301      	str	r3, [sp, #4]
 800ef4e:	9200      	str	r2, [sp, #0]
 800ef50:	4613      	mov	r3, r2
 800ef52:	4631      	mov	r1, r6
 800ef54:	4628      	mov	r0, r5
 800ef56:	f001 f91f 	bl	8010198 <bt_gatt_foreach_attr_type>
	if (data.err) {
 800ef5a:	f89d 6025 	ldrb.w	r6, [sp, #37]	; 0x25
 800ef5e:	b946      	cbnz	r6, 800ef72 <att_find_type_rsp+0x6e>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
 800ef60:	4a0c      	ldr	r2, [pc, #48]	; (800ef94 <att_find_type_rsp+0x90>)
 800ef62:	9906      	ldr	r1, [sp, #24]
 800ef64:	4620      	mov	r0, r4
 800ef66:	f00a fa63 	bl	8019430 <bt_att_chan_send_rsp>
}
 800ef6a:	4630      	mov	r0, r6
 800ef6c:	b00a      	add	sp, #40	; 0x28
 800ef6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
 800ef72:	9806      	ldr	r0, [sp, #24]
 800ef74:	f00c f825 	bl	801afc2 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
 800ef78:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800ef7c:	462a      	mov	r2, r5
 800ef7e:	2106      	movs	r1, #6
 800ef80:	4620      	mov	r0, r4
 800ef82:	f7ff fce7 	bl	800e954 <send_err_rsp>
		return 0;
 800ef86:	2600      	movs	r6, #0
 800ef88:	e7ef      	b.n	800ef6a <att_find_type_rsp+0x66>
		return BT_ATT_ERR_UNLIKELY;
 800ef8a:	260e      	movs	r6, #14
 800ef8c:	e7ed      	b.n	800ef6a <att_find_type_rsp+0x66>
 800ef8e:	bf00      	nop
 800ef90:	0800e6b1 	.word	0x0800e6b1
 800ef94:	080191f1 	.word	0x080191f1

0800ef98 <att_find_info_rsp>:
{
 800ef98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef9a:	b089      	sub	sp, #36	; 0x24
 800ef9c:	4604      	mov	r4, r0
 800ef9e:	460f      	mov	r7, r1
 800efa0:	4616      	mov	r6, r2
	struct bt_conn *conn = chan->chan.chan.conn;
 800efa2:	6885      	ldr	r5, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
 800efa4:	2210      	movs	r2, #16
 800efa6:	2100      	movs	r1, #0
 800efa8:	eb0d 0002 	add.w	r0, sp, r2
 800efac:	f008 ff8b 	bl	8017ec6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
 800efb0:	2200      	movs	r2, #0
 800efb2:	2105      	movs	r1, #5
 800efb4:	4628      	mov	r0, r5
 800efb6:	f7ff fe2b 	bl	800ec10 <bt_att_create_pdu>
 800efba:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
 800efbc:	b300      	cbz	r0, 800f000 <att_find_info_rsp+0x68>
	data.chan = chan;
 800efbe:	9404      	str	r4, [sp, #16]
 800efc0:	ab04      	add	r3, sp, #16
 800efc2:	9302      	str	r3, [sp, #8]
 800efc4:	4b0f      	ldr	r3, [pc, #60]	; (800f004 <att_find_info_rsp+0x6c>)
 800efc6:	9301      	str	r3, [sp, #4]
 800efc8:	2200      	movs	r2, #0
 800efca:	9200      	str	r2, [sp, #0]
 800efcc:	4613      	mov	r3, r2
 800efce:	4631      	mov	r1, r6
 800efd0:	4638      	mov	r0, r7
 800efd2:	f001 f8e1 	bl	8010198 <bt_gatt_foreach_attr_type>
	if (!data.rsp) {
 800efd6:	9b06      	ldr	r3, [sp, #24]
 800efd8:	b13b      	cbz	r3, 800efea <att_find_info_rsp+0x52>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
 800efda:	4a0b      	ldr	r2, [pc, #44]	; (800f008 <att_find_info_rsp+0x70>)
 800efdc:	9905      	ldr	r1, [sp, #20]
 800efde:	4620      	mov	r0, r4
 800efe0:	f00a fa26 	bl	8019430 <bt_att_chan_send_rsp>
	return 0;
 800efe4:	2000      	movs	r0, #0
}
 800efe6:	b009      	add	sp, #36	; 0x24
 800efe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(data.buf);
 800efea:	9805      	ldr	r0, [sp, #20]
 800efec:	f00b ffe9 	bl	801afc2 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, start_handle,
 800eff0:	230a      	movs	r3, #10
 800eff2:	463a      	mov	r2, r7
 800eff4:	2104      	movs	r1, #4
 800eff6:	4620      	mov	r0, r4
 800eff8:	f7ff fcac 	bl	800e954 <send_err_rsp>
		return 0;
 800effc:	2000      	movs	r0, #0
 800effe:	e7f2      	b.n	800efe6 <att_find_info_rsp+0x4e>
		return BT_ATT_ERR_UNLIKELY;
 800f000:	200e      	movs	r0, #14
 800f002:	e7f0      	b.n	800efe6 <att_find_info_rsp+0x4e>
 800f004:	080195f7 	.word	0x080195f7
 800f008:	080191f1 	.word	0x080191f1

0800f00c <att_mtu_req>:
{
 800f00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f00e:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
 800f010:	6803      	ldr	r3, [r0, #0]
 800f012:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800f014:	f3bf 8f5b 	dmb	ish
 800f018:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 800f01c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
 800f020:	f013 0f08 	tst.w	r3, #8
 800f024:	d11f      	bne.n	800f066 <att_mtu_req+0x5a>
	req = (void *)buf->data;
 800f026:	688b      	ldr	r3, [r1, #8]
	mtu_client = sys_le16_to_cpu(req->mtu);
 800f028:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
 800f02a:	2e16      	cmp	r6, #22
 800f02c:	d91d      	bls.n	800f06a <att_mtu_req+0x5e>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
 800f02e:	2202      	movs	r2, #2
 800f030:	2103      	movs	r1, #3
 800f032:	f7ff fded 	bl	800ec10 <bt_att_create_pdu>
	if (!pdu) {
 800f036:	4607      	mov	r7, r0
 800f038:	b1c8      	cbz	r0, 800f06e <att_mtu_req+0x62>
	rsp = net_buf_add(pdu, sizeof(*rsp));
 800f03a:	2102      	movs	r1, #2
 800f03c:	3008      	adds	r0, #8
 800f03e:	f00c f80a 	bl	801b056 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
 800f042:	2500      	movs	r5, #0
 800f044:	2341      	movs	r3, #65	; 0x41
 800f046:	7003      	strb	r3, [r0, #0]
 800f048:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
 800f04a:	4a0a      	ldr	r2, [pc, #40]	; (800f074 <att_mtu_req+0x68>)
 800f04c:	4639      	mov	r1, r7
 800f04e:	4620      	mov	r0, r4
 800f050:	f00a f9ee 	bl	8019430 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
 800f054:	2e41      	cmp	r6, #65	; 0x41
 800f056:	bf28      	it	cs
 800f058:	2641      	movcs	r6, #65	; 0x41
 800f05a:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
 800f05e:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
	return 0;
 800f062:	4628      	mov	r0, r5
}
 800f064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
 800f066:	2006      	movs	r0, #6
 800f068:	e7fc      	b.n	800f064 <att_mtu_req+0x58>
		return BT_ATT_ERR_INVALID_PDU;
 800f06a:	2004      	movs	r0, #4
 800f06c:	e7fa      	b.n	800f064 <att_mtu_req+0x58>
		return BT_ATT_ERR_UNLIKELY;
 800f06e:	200e      	movs	r0, #14
 800f070:	e7f8      	b.n	800f064 <att_mtu_req+0x58>
 800f072:	bf00      	nop
 800f074:	080191f1 	.word	0x080191f1

0800f078 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
 800f078:	b500      	push	{lr}
 800f07a:	b083      	sub	sp, #12
 800f07c:	4602      	mov	r2, r0
 800f07e:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;
 800f080:	2100      	movs	r1, #0
 800f082:	9101      	str	r1, [sp, #4]

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
 800f084:	a901      	add	r1, sp, #4
 800f086:	4807      	ldr	r0, [pc, #28]	; (800f0a4 <bt_att_req_alloc+0x2c>)
 800f088:	f004 fc7e 	bl	8013988 <k_mem_slab_alloc>
 800f08c:	b940      	cbnz	r0, 800f0a0 <bt_att_req_alloc+0x28>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
 800f08e:	221c      	movs	r2, #28
 800f090:	2100      	movs	r1, #0
 800f092:	9801      	ldr	r0, [sp, #4]
 800f094:	f008 ff17 	bl	8017ec6 <memset>

	return req;
 800f098:	9801      	ldr	r0, [sp, #4]
}
 800f09a:	b003      	add	sp, #12
 800f09c:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
 800f0a0:	2000      	movs	r0, #0
 800f0a2:	e7fa      	b.n	800f09a <bt_att_req_alloc+0x22>
 800f0a4:	20000728 	.word	0x20000728

0800f0a8 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
 800f0a8:	b500      	push	{lr}
 800f0aa:	b083      	sub	sp, #12
 800f0ac:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
 800f0ae:	a901      	add	r1, sp, #4
 800f0b0:	4802      	ldr	r0, [pc, #8]	; (800f0bc <bt_att_req_free+0x14>)
 800f0b2:	f004 fc9f 	bl	80139f4 <k_mem_slab_free>
}
 800f0b6:	b003      	add	sp, #12
 800f0b8:	f85d fb04 	ldr.w	pc, [sp], #4
 800f0bc:	20000728 	.word	0x20000728

0800f0c0 <att_handle_rsp>:
{
 800f0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0c4:	b082      	sub	sp, #8
 800f0c6:	4604      	mov	r4, r0
 800f0c8:	460e      	mov	r6, r1
 800f0ca:	4617      	mov	r7, r2
 800f0cc:	461d      	mov	r5, r3
	k_delayed_work_cancel(&chan->timeout_work);
 800f0ce:	30e0      	adds	r0, #224	; 0xe0
 800f0d0:	f00d ff32 	bl	801cf38 <k_delayed_work_cancel>
	if (!chan->req) {
 800f0d4:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800f0d8:	b363      	cbz	r3, 800f134 <att_handle_rsp+0x74>
	if (chan->req == &cancel) {
 800f0da:	4a23      	ldr	r2, [pc, #140]	; (800f168 <att_handle_rsp+0xa8>)
 800f0dc:	4293      	cmp	r3, r2
 800f0de:	d03d      	beq.n	800f15c <att_handle_rsp+0x9c>
	if (chan->req->buf) {
 800f0e0:	6918      	ldr	r0, [r3, #16]
 800f0e2:	b128      	cbz	r0, 800f0f0 <att_handle_rsp+0x30>
		net_buf_unref(chan->req->buf);
 800f0e4:	f00b ff6d 	bl	801afc2 <net_buf_unref>
		chan->req->buf = NULL;
 800f0e8:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	611a      	str	r2, [r3, #16]
	func = chan->req->func;
 800f0f0:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800f0f4:	f8d3 8004 	ldr.w	r8, [r3, #4]
	chan->req->func = NULL;
 800f0f8:	f04f 0900 	mov.w	r9, #0
 800f0fc:	f8c3 9004 	str.w	r9, [r3, #4]
	params = chan->req->user_data;
 800f100:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 800f104:	f8d0 a018 	ldr.w	sl, [r0, #24]
	att_req_destroy(chan->req);
 800f108:	f00a fc06 	bl	8019918 <att_req_destroy>
	chan->req = NULL;
 800f10c:	f8c4 90c4 	str.w	r9, [r4, #196]	; 0xc4
	att_process(chan->att);
 800f110:	6820      	ldr	r0, [r4, #0]
 800f112:	f00a f8c0 	bl	8019296 <att_process>
	if (func) {
 800f116:	f1b8 0f00 	cmp.w	r8, #0
 800f11a:	d007      	beq.n	800f12c <att_handle_rsp+0x6c>
		func(chan->att->conn, err, pdu, len, params);
 800f11c:	6823      	ldr	r3, [r4, #0]
 800f11e:	6818      	ldr	r0, [r3, #0]
 800f120:	f8cd a000 	str.w	sl, [sp]
 800f124:	463b      	mov	r3, r7
 800f126:	4632      	mov	r2, r6
 800f128:	4629      	mov	r1, r5
 800f12a:	47c0      	blx	r8
}
 800f12c:	2000      	movs	r0, #0
 800f12e:	b002      	add	sp, #8
 800f130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		BT_WARN("No pending ATT request");
 800f134:	f04f 0100 	mov.w	r1, #0
 800f138:	2302      	movs	r3, #2
 800f13a:	f363 0102 	bfi	r1, r3, #0, #3
 800f13e:	f36f 01c5 	bfc	r1, #3, #3
 800f142:	4b0a      	ldr	r3, [pc, #40]	; (800f16c <att_handle_rsp+0xac>)
 800f144:	4a0a      	ldr	r2, [pc, #40]	; (800f170 <att_handle_rsp+0xb0>)
 800f146:	1a9b      	subs	r3, r3, r2
 800f148:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800f14c:	f363 118f 	bfi	r1, r3, #6, #10
 800f150:	4808      	ldr	r0, [pc, #32]	; (800f174 <att_handle_rsp+0xb4>)
 800f152:	f7f5 f9fb 	bl	800454c <log_0>
	bt_att_func_t func = NULL;
 800f156:	f04f 0800 	mov.w	r8, #0
		goto process;
 800f15a:	e7d9      	b.n	800f110 <att_handle_rsp+0x50>
		chan->req = NULL;
 800f15c:	2300      	movs	r3, #0
 800f15e:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	bt_att_func_t func = NULL;
 800f162:	4698      	mov	r8, r3
		goto process;
 800f164:	e7d4      	b.n	800f110 <att_handle_rsp+0x50>
 800f166:	bf00      	nop
 800f168:	200020c0 	.word	0x200020c0
 800f16c:	0801d6d8 	.word	0x0801d6d8
 800f170:	0801d6d0 	.word	0x0801d6d0
 800f174:	08021048 	.word	0x08021048

0800f178 <att_reset>:
{
 800f178:	b570      	push	{r4, r5, r6, lr}
 800f17a:	b084      	sub	sp, #16
 800f17c:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
 800f17e:	2200      	movs	r2, #0
 800f180:	2300      	movs	r3, #0
 800f182:	9803      	ldr	r0, [sp, #12]
 800f184:	300c      	adds	r0, #12
 800f186:	f00b fef0 	bl	801af6a <net_buf_get>
 800f18a:	4603      	mov	r3, r0
 800f18c:	b118      	cbz	r0, 800f196 <att_reset+0x1e>
		net_buf_unref(buf);
 800f18e:	4618      	mov	r0, r3
 800f190:	f00b ff17 	bl	801afc2 <net_buf_unref>
 800f194:	e7f3      	b.n	800f17e <att_reset+0x6>
	att->conn = NULL;
 800f196:	9b03      	ldr	r3, [sp, #12]
 800f198:	2200      	movs	r2, #0
 800f19a:	601a      	str	r2, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
 800f19c:	9b03      	ldr	r3, [sp, #12]
	return list->head;
 800f19e:	685d      	ldr	r5, [r3, #4]
 800f1a0:	b11d      	cbz	r5, 800f1aa <att_reset+0x32>
 800f1a2:	462c      	mov	r4, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
 800f1a4:	b135      	cbz	r5, 800f1b4 <att_reset+0x3c>
	return node->next;
 800f1a6:	682c      	ldr	r4, [r5, #0]
 800f1a8:	e004      	b.n	800f1b4 <att_reset+0x3c>
 800f1aa:	462c      	mov	r4, r5
 800f1ac:	e002      	b.n	800f1b4 <att_reset+0x3c>
 800f1ae:	4623      	mov	r3, r4
 800f1b0:	4625      	mov	r5, r4
 800f1b2:	461c      	mov	r4, r3
 800f1b4:	b195      	cbz	r5, 800f1dc <att_reset+0x64>
		if (req->func) {
 800f1b6:	686e      	ldr	r6, [r5, #4]
 800f1b8:	b136      	cbz	r6, 800f1c8 <att_reset+0x50>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
 800f1ba:	69ab      	ldr	r3, [r5, #24]
 800f1bc:	9300      	str	r3, [sp, #0]
 800f1be:	2300      	movs	r3, #0
 800f1c0:	461a      	mov	r2, r3
 800f1c2:	210e      	movs	r1, #14
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	47b0      	blx	r6
		att_req_destroy(req);
 800f1c8:	4628      	mov	r0, r5
 800f1ca:	f00a fba5 	bl	8019918 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
 800f1ce:	2c00      	cmp	r4, #0
 800f1d0:	d0ed      	beq.n	800f1ae <att_reset+0x36>
 800f1d2:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 800f1d4:	2c00      	cmp	r4, #0
 800f1d6:	d0eb      	beq.n	800f1b0 <att_reset+0x38>
	return node->next;
 800f1d8:	6823      	ldr	r3, [r4, #0]
 800f1da:	e7e9      	b.n	800f1b0 <att_reset+0x38>
	k_mem_slab_free(&att_slab, (void **)&att);
 800f1dc:	a903      	add	r1, sp, #12
 800f1de:	4802      	ldr	r0, [pc, #8]	; (800f1e8 <att_reset+0x70>)
 800f1e0:	f004 fc08 	bl	80139f4 <k_mem_slab_free>
}
 800f1e4:	b004      	add	sp, #16
 800f1e6:	bd70      	pop	{r4, r5, r6, pc}
 800f1e8:	200006f0 	.word	0x200006f0

0800f1ec <att_timeout>:
{
 800f1ec:	b570      	push	{r4, r5, r6, lr}
 800f1ee:	4604      	mov	r4, r0
	struct bt_att_chan *chan = CONTAINER_OF(work, struct bt_att_chan,
 800f1f0:	f1a0 06e0 	sub.w	r6, r0, #224	; 0xe0
	struct bt_att *att = chan->att;
 800f1f4:	f850 5ce0 	ldr.w	r5, [r0, #-224]
	BT_ERR("ATT Timeout");
 800f1f8:	f04f 0100 	mov.w	r1, #0
 800f1fc:	2301      	movs	r3, #1
 800f1fe:	f363 0102 	bfi	r1, r3, #0, #3
 800f202:	f36f 01c5 	bfc	r1, #3, #3
 800f206:	4b0d      	ldr	r3, [pc, #52]	; (800f23c <att_timeout+0x50>)
 800f208:	4a0d      	ldr	r2, [pc, #52]	; (800f240 <att_timeout+0x54>)
 800f20a:	1a9b      	subs	r3, r3, r2
 800f20c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800f210:	f363 118f 	bfi	r1, r3, #6, #10
 800f214:	480b      	ldr	r0, [pc, #44]	; (800f244 <att_timeout+0x58>)
 800f216:	f7f5 f999 	bl	800454c <log_0>
	att_chan_detach(chan);
 800f21a:	4630      	mov	r0, r6
 800f21c:	f00a fbbc 	bl	8019998 <att_chan_detach>
	return list->head;
 800f220:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (!sys_slist_is_empty(&att->chans)) {
 800f222:	b103      	cbz	r3, 800f226 <att_timeout+0x3a>
}
 800f224:	bd70      	pop	{r4, r5, r6, pc}
	att_reset(att);
 800f226:	4628      	mov	r0, r5
 800f228:	f7ff ffa6 	bl	800f178 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
 800f22c:	f854 0cd8 	ldr.w	r0, [r4, #-216]
 800f230:	f001 fb96 	bl	8010960 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
 800f234:	2300      	movs	r3, #0
 800f236:	f844 3cd8 	str.w	r3, [r4, #-216]
 800f23a:	e7f3      	b.n	800f224 <att_timeout+0x38>
 800f23c:	0801d6d8 	.word	0x0801d6d8
 800f240:	0801d6d0 	.word	0x0801d6d0
 800f244:	08021060 	.word	0x08021060

0800f248 <db_hash_store>:

	return BT_GATT_ITER_CONTINUE;
}

static void db_hash_store(void)
{
 800f248:	b508      	push	{r3, lr}
	int err;

	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
 800f24a:	2210      	movs	r2, #16
 800f24c:	490c      	ldr	r1, [pc, #48]	; (800f280 <db_hash_store+0x38>)
 800f24e:	480d      	ldr	r0, [pc, #52]	; (800f284 <db_hash_store+0x3c>)
 800f250:	f7f7 f840 	bl	80062d4 <settings_save_one>
	if (err) {
 800f254:	b900      	cbnz	r0, 800f258 <db_hash_store+0x10>
		BT_ERR("Failed to save Database Hash (err %d)", err);
	}

	BT_DBG("Database Hash stored");
}
 800f256:	bd08      	pop	{r3, pc}
 800f258:	4601      	mov	r1, r0
		BT_ERR("Failed to save Database Hash (err %d)", err);
 800f25a:	f04f 0200 	mov.w	r2, #0
 800f25e:	2301      	movs	r3, #1
 800f260:	f363 0202 	bfi	r2, r3, #0, #3
 800f264:	f36f 02c5 	bfc	r2, #3, #3
 800f268:	4b07      	ldr	r3, [pc, #28]	; (800f288 <db_hash_store+0x40>)
 800f26a:	4808      	ldr	r0, [pc, #32]	; (800f28c <db_hash_store+0x44>)
 800f26c:	1a1b      	subs	r3, r3, r0
 800f26e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800f272:	f363 128f 	bfi	r2, r3, #6, #10
 800f276:	4806      	ldr	r0, [pc, #24]	; (800f290 <db_hash_store+0x48>)
 800f278:	f7f4 fff8 	bl	800426c <log_1>
}
 800f27c:	e7eb      	b.n	800f256 <db_hash_store+0xe>
 800f27e:	bf00      	nop
 800f280:	200020fc 	.word	0x200020fc
 800f284:	080210dc 	.word	0x080210dc
 800f288:	0801d700 	.word	0x0801d700
 800f28c:	0801d6d0 	.word	0x0801d6d0
 800f290:	080210e4 	.word	0x080210e4

0800f294 <db_hash_set>:

static uint8_t stored_hash[16];

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
 800f294:	b510      	push	{r4, lr}
 800f296:	4614      	mov	r4, r2
	ssize_t len;

	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
 800f298:	2210      	movs	r2, #16
 800f29a:	490d      	ldr	r1, [pc, #52]	; (800f2d0 <db_hash_set+0x3c>)
 800f29c:	4618      	mov	r0, r3
 800f29e:	47a0      	blx	r4
	if (len < 0) {
 800f2a0:	1e04      	subs	r4, r0, #0
 800f2a2:	db02      	blt.n	800f2aa <db_hash_set+0x16>
		return len;
	}

	BT_HEXDUMP_DBG(stored_hash, sizeof(stored_hash), "Stored Hash: ");

	return 0;
 800f2a4:	2400      	movs	r4, #0
}
 800f2a6:	4620      	mov	r0, r4
 800f2a8:	bd10      	pop	{r4, pc}
		BT_ERR("Failed to decode value (err %zd)", len);
 800f2aa:	f04f 0200 	mov.w	r2, #0
 800f2ae:	2301      	movs	r3, #1
 800f2b0:	f363 0202 	bfi	r2, r3, #0, #3
 800f2b4:	f36f 02c5 	bfc	r2, #3, #3
 800f2b8:	4b06      	ldr	r3, [pc, #24]	; (800f2d4 <db_hash_set+0x40>)
 800f2ba:	4907      	ldr	r1, [pc, #28]	; (800f2d8 <db_hash_set+0x44>)
 800f2bc:	1a5b      	subs	r3, r3, r1
 800f2be:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800f2c2:	f363 128f 	bfi	r2, r3, #6, #10
 800f2c6:	4621      	mov	r1, r4
 800f2c8:	4804      	ldr	r0, [pc, #16]	; (800f2dc <db_hash_set+0x48>)
 800f2ca:	f7f4 ffcf 	bl	800426c <log_1>
		return len;
 800f2ce:	e7ea      	b.n	800f2a6 <db_hash_set+0x12>
 800f2d0:	2000213c 	.word	0x2000213c
 800f2d4:	0801d700 	.word	0x0801d700
 800f2d8:	0801d6d0 	.word	0x0801d6d0
 800f2dc:	0802110c 	.word	0x0802110c

0800f2e0 <find_cf_cfg>:
{
 800f2e0:	b570      	push	{r4, r5, r6, lr}
 800f2e2:	b082      	sub	sp, #8
 800f2e4:	4606      	mov	r6, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
 800f2e6:	2400      	movs	r4, #0
 800f2e8:	e00b      	b.n	800f302 <find_cf_cfg+0x22>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
 800f2ea:	4628      	mov	r0, r5
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	9300      	str	r3, [sp, #0]
 800f2f0:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
 800f2f4:	2207      	movs	r2, #7
 800f2f6:	4669      	mov	r1, sp
 800f2f8:	3001      	adds	r0, #1
 800f2fa:	f008 fda7 	bl	8017e4c <memcmp>
 800f2fe:	b1a0      	cbz	r0, 800f32a <find_cf_cfg+0x4a>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
 800f300:	3401      	adds	r4, #1
 800f302:	2c01      	cmp	r4, #1
 800f304:	dc10      	bgt.n	800f328 <find_cf_cfg+0x48>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
 800f306:	4d0a      	ldr	r5, [pc, #40]	; (800f330 <find_cf_cfg+0x50>)
 800f308:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (!conn) {
 800f30c:	2e00      	cmp	r6, #0
 800f30e:	d0ec      	beq.n	800f2ea <find_cf_cfg+0xa>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
 800f310:	4907      	ldr	r1, [pc, #28]	; (800f330 <find_cf_cfg+0x50>)
 800f312:	0123      	lsls	r3, r4, #4
 800f314:	eb01 1204 	add.w	r2, r1, r4, lsl #4
 800f318:	3201      	adds	r2, #1
 800f31a:	5cc9      	ldrb	r1, [r1, r3]
 800f31c:	4630      	mov	r0, r6
 800f31e:	f009 fbcf 	bl	8018ac0 <bt_conn_is_peer_addr_le>
 800f322:	2800      	cmp	r0, #0
 800f324:	d0ec      	beq.n	800f300 <find_cf_cfg+0x20>
 800f326:	e000      	b.n	800f32a <find_cf_cfg+0x4a>
	return NULL;
 800f328:	2500      	movs	r5, #0
}
 800f32a:	4628      	mov	r0, r5
 800f32c:	b002      	add	sp, #8
 800f32e:	bd70      	pop	{r4, r5, r6, pc}
 800f330:	200020dc 	.word	0x200020dc

0800f334 <find_sc_cfg>:
{
 800f334:	b570      	push	{r4, r5, r6, lr}
 800f336:	4605      	mov	r5, r0
 800f338:	460e      	mov	r6, r1
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
 800f33a:	2400      	movs	r4, #0
 800f33c:	e000      	b.n	800f340 <find_sc_cfg+0xc>
 800f33e:	3401      	adds	r4, #1
 800f340:	2c01      	cmp	r4, #1
 800f342:	d817      	bhi.n	800f374 <find_sc_cfg+0x40>
		if (id == sc_cfg[i].id &&
 800f344:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800f348:	4a0b      	ldr	r2, [pc, #44]	; (800f378 <find_sc_cfg+0x44>)
 800f34a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800f34e:	429d      	cmp	r5, r3
 800f350:	d1f5      	bne.n	800f33e <find_sc_cfg+0xa>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
 800f352:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 800f356:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800f35a:	2207      	movs	r2, #7
 800f35c:	4631      	mov	r1, r6
 800f35e:	3001      	adds	r0, #1
 800f360:	f008 fd74 	bl	8017e4c <memcmp>
		if (id == sc_cfg[i].id &&
 800f364:	2800      	cmp	r0, #0
 800f366:	d1ea      	bne.n	800f33e <find_sc_cfg+0xa>
			return &sc_cfg[i];
 800f368:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800f36c:	4802      	ldr	r0, [pc, #8]	; (800f378 <find_sc_cfg+0x44>)
 800f36e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800f372:	e000      	b.n	800f376 <find_sc_cfg+0x42>
	return NULL;
 800f374:	2000      	movs	r0, #0
}
 800f376:	bd70      	pop	{r4, r5, r6, pc}
 800f378:	20002110 	.word	0x20002110

0800f37c <ccc_save>:
{
 800f37c:	b538      	push	{r3, r4, r5, lr}
 800f37e:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
 800f380:	6882      	ldr	r2, [r0, #8]
 800f382:	4b0d      	ldr	r3, [pc, #52]	; (800f3b8 <ccc_save+0x3c>)
 800f384:	429a      	cmp	r2, r3
 800f386:	d001      	beq.n	800f38c <ccc_save+0x10>
}
 800f388:	2001      	movs	r0, #1
 800f38a:	bd38      	pop	{r3, r4, r5, pc}
 800f38c:	460d      	mov	r5, r1
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
 800f38e:	7922      	ldrb	r2, [r4, #4]
 800f390:	6821      	ldr	r1, [r4, #0]
 800f392:	68c0      	ldr	r0, [r0, #12]
 800f394:	f00a fcf5 	bl	8019d82 <ccc_find_cfg>
	if (!cfg) {
 800f398:	2800      	cmp	r0, #0
 800f39a:	d0f5      	beq.n	800f388 <ccc_save+0xc>
	save->store[save->count].handle = handle;
 800f39c:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 800f3a0:	1c9a      	adds	r2, r3, #2
 800f3a2:	f824 5022 	strh.w	r5, [r4, r2, lsl #2]
	save->store[save->count].value = cfg->value;
 800f3a6:	8901      	ldrh	r1, [r0, #8]
 800f3a8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f3ac:	8051      	strh	r1, [r2, #2]
	save->count++;
 800f3ae:	3301      	adds	r3, #1
 800f3b0:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	return BT_GATT_ITER_CONTINUE;
 800f3b4:	e7e8      	b.n	800f388 <ccc_save+0xc>
 800f3b6:	bf00      	nop
 800f3b8:	0800f3f9 	.word	0x0800f3f9

0800f3bc <find_cf_cfg_by_addr>:
{
 800f3bc:	b570      	push	{r4, r5, r6, lr}
 800f3be:	4605      	mov	r5, r0
 800f3c0:	460e      	mov	r6, r1
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
 800f3c2:	2400      	movs	r4, #0
 800f3c4:	e000      	b.n	800f3c8 <find_cf_cfg_by_addr+0xc>
 800f3c6:	3401      	adds	r4, #1
 800f3c8:	2c01      	cmp	r4, #1
 800f3ca:	dc11      	bgt.n	800f3f0 <find_cf_cfg_by_addr+0x34>
			if (id == cf_cfg[i].id &&
 800f3cc:	0123      	lsls	r3, r4, #4
 800f3ce:	4a09      	ldr	r2, [pc, #36]	; (800f3f4 <find_cf_cfg_by_addr+0x38>)
 800f3d0:	5cd3      	ldrb	r3, [r2, r3]
 800f3d2:	42ab      	cmp	r3, r5
 800f3d4:	d1f7      	bne.n	800f3c6 <find_cf_cfg_by_addr+0xa>
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
 800f3d6:	eb02 1104 	add.w	r1, r2, r4, lsl #4
 800f3da:	2207      	movs	r2, #7
 800f3dc:	3101      	adds	r1, #1
 800f3de:	4630      	mov	r0, r6
 800f3e0:	f008 fd34 	bl	8017e4c <memcmp>
			if (id == cf_cfg[i].id &&
 800f3e4:	2800      	cmp	r0, #0
 800f3e6:	d1ee      	bne.n	800f3c6 <find_cf_cfg_by_addr+0xa>
				return &cf_cfg[i];
 800f3e8:	4802      	ldr	r0, [pc, #8]	; (800f3f4 <find_cf_cfg_by_addr+0x38>)
 800f3ea:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800f3ee:	e000      	b.n	800f3f2 <find_cf_cfg_by_addr+0x36>
	return NULL;
 800f3f0:	2000      	movs	r0, #0
}
 800f3f2:	bd70      	pop	{r4, r5, r6, pc}
 800f3f4:	200020dc 	.word	0x200020dc

0800f3f8 <bt_gatt_attr_write_ccc>:
{
 800f3f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3fc:	461c      	mov	r4, r3
 800f3fe:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
 800f402:	68cf      	ldr	r7, [r1, #12]
	if (offset) {
 800f404:	2b00      	cmp	r3, #0
 800f406:	d158      	bne.n	800f4ba <bt_gatt_attr_write_ccc+0xc2>
 800f408:	4681      	mov	r9, r0
 800f40a:	460e      	mov	r6, r1
	if (!len || len > sizeof(uint16_t)) {
 800f40c:	1e63      	subs	r3, r4, #1
 800f40e:	b29b      	uxth	r3, r3
 800f410:	2b01      	cmp	r3, #1
 800f412:	d855      	bhi.n	800f4c0 <bt_gatt_attr_write_ccc+0xc8>
	if (len < sizeof(uint16_t)) {
 800f414:	2c01      	cmp	r4, #1
 800f416:	d91d      	bls.n	800f454 <bt_gatt_attr_write_ccc+0x5c>
 800f418:	7853      	ldrb	r3, [r2, #1]
 800f41a:	7815      	ldrb	r5, [r2, #0]
 800f41c:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
 800f420:	4639      	mov	r1, r7
 800f422:	4648      	mov	r0, r9
 800f424:	f00a fc81 	bl	8019d2a <find_ccc_cfg>
	if (!cfg) {
 800f428:	4680      	mov	r8, r0
 800f42a:	b1a8      	cbz	r0, 800f458 <bt_gatt_attr_write_ccc+0x60>
	if (ccc->cfg_write) {
 800f42c:	693b      	ldr	r3, [r7, #16]
 800f42e:	b143      	cbz	r3, 800f442 <bt_gatt_attr_write_ccc+0x4a>
		ssize_t write = ccc->cfg_write(conn, attr, value);
 800f430:	462a      	mov	r2, r5
 800f432:	4631      	mov	r1, r6
 800f434:	4648      	mov	r0, r9
 800f436:	4798      	blx	r3
		if (write < 0) {
 800f438:	2800      	cmp	r0, #0
 800f43a:	db09      	blt.n	800f450 <bt_gatt_attr_write_ccc+0x58>
		if (write != sizeof(value) && write != 1) {
 800f43c:	3801      	subs	r0, #1
 800f43e:	2801      	cmp	r0, #1
 800f440:	d841      	bhi.n	800f4c6 <bt_gatt_attr_write_ccc+0xce>
	cfg->value = value;
 800f442:	f8a8 5008 	strh.w	r5, [r8, #8]
	if (cfg->value != ccc->value) {
 800f446:	897b      	ldrh	r3, [r7, #10]
 800f448:	429d      	cmp	r5, r3
 800f44a:	d12d      	bne.n	800f4a8 <bt_gatt_attr_write_ccc+0xb0>
	if (!value) {
 800f44c:	b38d      	cbz	r5, 800f4b2 <bt_gatt_attr_write_ccc+0xba>
	return len;
 800f44e:	4620      	mov	r0, r4
}
 800f450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		value = *(uint8_t *)buf;
 800f454:	7815      	ldrb	r5, [r2, #0]
 800f456:	e7e3      	b.n	800f420 <bt_gatt_attr_write_ccc+0x28>
		if (!value) {
 800f458:	b90d      	cbnz	r5, 800f45e <bt_gatt_attr_write_ccc+0x66>
			return len;
 800f45a:	4620      	mov	r0, r4
 800f45c:	e7f8      	b.n	800f450 <bt_gatt_attr_write_ccc+0x58>
		cfg = find_ccc_cfg(NULL, ccc);
 800f45e:	4639      	mov	r1, r7
 800f460:	2000      	movs	r0, #0
 800f462:	f00a fc62 	bl	8019d2a <find_ccc_cfg>
		if (!cfg) {
 800f466:	4680      	mov	r8, r0
 800f468:	b150      	cbz	r0, 800f480 <bt_gatt_attr_write_ccc+0x88>
	memcpy(dst, src, sizeof(*dst));
 800f46a:	2207      	movs	r2, #7
 800f46c:	f109 0188 	add.w	r1, r9, #136	; 0x88
 800f470:	3001      	adds	r0, #1
 800f472:	f008 fd03 	bl	8017e7c <memcpy>
		cfg->id = conn->id;
 800f476:	f899 3008 	ldrb.w	r3, [r9, #8]
 800f47a:	f888 3000 	strb.w	r3, [r8]
 800f47e:	e7d5      	b.n	800f42c <bt_gatt_attr_write_ccc+0x34>
			BT_WARN("No space to store CCC cfg");
 800f480:	f04f 0100 	mov.w	r1, #0
 800f484:	2302      	movs	r3, #2
 800f486:	f363 0102 	bfi	r1, r3, #0, #3
 800f48a:	f36f 01c5 	bfc	r1, #3, #3
 800f48e:	4b0f      	ldr	r3, [pc, #60]	; (800f4cc <bt_gatt_attr_write_ccc+0xd4>)
 800f490:	4a0f      	ldr	r2, [pc, #60]	; (800f4d0 <bt_gatt_attr_write_ccc+0xd8>)
 800f492:	1a9b      	subs	r3, r3, r2
 800f494:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800f498:	f363 118f 	bfi	r1, r3, #6, #10
 800f49c:	480d      	ldr	r0, [pc, #52]	; (800f4d4 <bt_gatt_attr_write_ccc+0xdc>)
 800f49e:	f7f5 f855 	bl	800454c <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
 800f4a2:	f06f 0010 	mvn.w	r0, #16
 800f4a6:	e7d3      	b.n	800f450 <bt_gatt_attr_write_ccc+0x58>
		gatt_ccc_changed(attr, ccc);
 800f4a8:	4639      	mov	r1, r7
 800f4aa:	4630      	mov	r0, r6
 800f4ac:	f00a fba8 	bl	8019c00 <gatt_ccc_changed>
 800f4b0:	e7cc      	b.n	800f44c <bt_gatt_attr_write_ccc+0x54>
		clear_ccc_cfg(cfg);
 800f4b2:	4640      	mov	r0, r8
 800f4b4:	f00a fc85 	bl	8019dc2 <clear_ccc_cfg>
 800f4b8:	e7c9      	b.n	800f44e <bt_gatt_attr_write_ccc+0x56>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
 800f4ba:	f06f 0006 	mvn.w	r0, #6
 800f4be:	e7c7      	b.n	800f450 <bt_gatt_attr_write_ccc+0x58>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
 800f4c0:	f06f 000c 	mvn.w	r0, #12
 800f4c4:	e7c4      	b.n	800f450 <bt_gatt_attr_write_ccc+0x58>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
 800f4c6:	f06f 000d 	mvn.w	r0, #13
 800f4ca:	e7c1      	b.n	800f450 <bt_gatt_attr_write_ccc+0x58>
 800f4cc:	0801d700 	.word	0x0801d700
 800f4d0:	0801d6d0 	.word	0x0801d6d0
 800f4d4:	08021130 	.word	0x08021130

0800f4d8 <cf_write>:
{
 800f4d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4dc:	461d      	mov	r5, r3
 800f4de:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
 800f4e2:	2b01      	cmp	r3, #1
 800f4e4:	d840      	bhi.n	800f568 <cf_write+0x90>
 800f4e6:	4606      	mov	r6, r0
 800f4e8:	4690      	mov	r8, r2
	if (offset + len > sizeof(cfg->data)) {
 800f4ea:	462f      	mov	r7, r5
 800f4ec:	442b      	add	r3, r5
 800f4ee:	2b01      	cmp	r3, #1
 800f4f0:	d83d      	bhi.n	800f56e <cf_write+0x96>
	cfg = find_cf_cfg(conn);
 800f4f2:	f7ff fef5 	bl	800f2e0 <find_cf_cfg>
	if (!cfg) {
 800f4f6:	4604      	mov	r4, r0
 800f4f8:	b1f0      	cbz	r0, 800f538 <cf_write+0x60>
	if (!cfg) {
 800f4fa:	b30c      	cbz	r4, 800f540 <cf_write+0x68>
	if (!cf_set_value(cfg, value, len)) {
 800f4fc:	462a      	mov	r2, r5
 800f4fe:	4641      	mov	r1, r8
 800f500:	4620      	mov	r0, r4
 800f502:	f00a fb48 	bl	8019b96 <cf_set_value>
 800f506:	b3a8      	cbz	r0, 800f574 <cf_write+0x9c>
 800f508:	2207      	movs	r2, #7
 800f50a:	f106 0188 	add.w	r1, r6, #136	; 0x88
 800f50e:	1c60      	adds	r0, r4, #1
 800f510:	f008 fcb4 	bl	8017e7c <memcpy>
	cfg->id = conn->id;
 800f514:	7a33      	ldrb	r3, [r6, #8]
 800f516:	f804 3b0c 	strb.w	r3, [r4], #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800f51a:	f3bf 8f5b 	dmb	ish
 800f51e:	e854 3f00 	ldrex	r3, [r4]
 800f522:	f043 0301 	orr.w	r3, r3, #1
 800f526:	e844 3200 	strex	r2, r3, [r4]
 800f52a:	2a00      	cmp	r2, #0
 800f52c:	d1f7      	bne.n	800f51e <cf_write+0x46>
 800f52e:	f3bf 8f5b 	dmb	ish
}
 800f532:	4638      	mov	r0, r7
 800f534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_cf_cfg(NULL);
 800f538:	f7ff fed2 	bl	800f2e0 <find_cf_cfg>
 800f53c:	4604      	mov	r4, r0
 800f53e:	e7dc      	b.n	800f4fa <cf_write+0x22>
		BT_WARN("No space to store Client Supported Features");
 800f540:	f04f 0100 	mov.w	r1, #0
 800f544:	2302      	movs	r3, #2
 800f546:	f363 0102 	bfi	r1, r3, #0, #3
 800f54a:	f36f 01c5 	bfc	r1, #3, #3
 800f54e:	4b0b      	ldr	r3, [pc, #44]	; (800f57c <cf_write+0xa4>)
 800f550:	4a0b      	ldr	r2, [pc, #44]	; (800f580 <cf_write+0xa8>)
 800f552:	1a9b      	subs	r3, r3, r2
 800f554:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800f558:	f363 118f 	bfi	r1, r3, #6, #10
 800f55c:	4809      	ldr	r0, [pc, #36]	; (800f584 <cf_write+0xac>)
 800f55e:	f7f4 fff5 	bl	800454c <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
 800f562:	f06f 0710 	mvn.w	r7, #16
 800f566:	e7e4      	b.n	800f532 <cf_write+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
 800f568:	f06f 0706 	mvn.w	r7, #6
 800f56c:	e7e1      	b.n	800f532 <cf_write+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
 800f56e:	f06f 070c 	mvn.w	r7, #12
 800f572:	e7de      	b.n	800f532 <cf_write+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
 800f574:	f06f 0712 	mvn.w	r7, #18
 800f578:	e7db      	b.n	800f532 <cf_write+0x5a>
 800f57a:	bf00      	nop
 800f57c:	0801d700 	.word	0x0801d700
 800f580:	0801d6d0 	.word	0x0801d6d0
 800f584:	0802114c 	.word	0x0802114c

0800f588 <sc_store>:
{
 800f588:	b530      	push	{r4, r5, lr}
 800f58a:	b08d      	sub	sp, #52	; 0x34
 800f58c:	4604      	mov	r4, r0
	if (cfg->id) {
 800f58e:	7802      	ldrb	r2, [r0, #0]
 800f590:	b1aa      	cbz	r2, 800f5be <sc_store+0x36>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
 800f592:	ad02      	add	r5, sp, #8
 800f594:	2104      	movs	r1, #4
 800f596:	4628      	mov	r0, r5
 800f598:	f7f3 fca2 	bl	8002ee0 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
 800f59c:	9500      	str	r5, [sp, #0]
 800f59e:	1c63      	adds	r3, r4, #1
 800f5a0:	4a14      	ldr	r2, [pc, #80]	; (800f5f4 <sc_store+0x6c>)
 800f5a2:	2124      	movs	r1, #36	; 0x24
 800f5a4:	a803      	add	r0, sp, #12
 800f5a6:	f7fa fa57 	bl	8009a58 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
 800f5aa:	2204      	movs	r2, #4
 800f5ac:	f104 0108 	add.w	r1, r4, #8
 800f5b0:	a803      	add	r0, sp, #12
 800f5b2:	f7f6 fe8f 	bl	80062d4 <settings_save_one>
	if (err) {
 800f5b6:	4601      	mov	r1, r0
 800f5b8:	b950      	cbnz	r0, 800f5d0 <sc_store+0x48>
}
 800f5ba:	b00d      	add	sp, #52	; 0x34
 800f5bc:	bd30      	pop	{r4, r5, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
 800f5be:	2300      	movs	r3, #0
 800f5c0:	9300      	str	r3, [sp, #0]
 800f5c2:	1c43      	adds	r3, r0, #1
 800f5c4:	4a0b      	ldr	r2, [pc, #44]	; (800f5f4 <sc_store+0x6c>)
 800f5c6:	2124      	movs	r1, #36	; 0x24
 800f5c8:	a803      	add	r0, sp, #12
 800f5ca:	f7fa fa45 	bl	8009a58 <bt_settings_encode_key>
 800f5ce:	e7ec      	b.n	800f5aa <sc_store+0x22>
		BT_ERR("failed to store SC (err %d)", err);
 800f5d0:	f04f 0200 	mov.w	r2, #0
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	f363 0202 	bfi	r2, r3, #0, #3
 800f5da:	f36f 02c5 	bfc	r2, #3, #3
 800f5de:	4b06      	ldr	r3, [pc, #24]	; (800f5f8 <sc_store+0x70>)
 800f5e0:	4806      	ldr	r0, [pc, #24]	; (800f5fc <sc_store+0x74>)
 800f5e2:	1a1b      	subs	r3, r3, r0
 800f5e4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800f5e8:	f363 128f 	bfi	r2, r3, #6, #10
 800f5ec:	4804      	ldr	r0, [pc, #16]	; (800f600 <sc_store+0x78>)
 800f5ee:	f7f4 fe3d 	bl	800426c <log_1>
		return;
 800f5f2:	e7e2      	b.n	800f5ba <sc_store+0x32>
 800f5f4:	08021178 	.word	0x08021178
 800f5f8:	0801d700 	.word	0x0801d700
 800f5fc:	0801d6d0 	.word	0x0801d6d0
 800f600:	0802117c 	.word	0x0802117c

0800f604 <sc_save>:
{
 800f604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f608:	b082      	sub	sp, #8
 800f60a:	4607      	mov	r7, r0
 800f60c:	4688      	mov	r8, r1
 800f60e:	4616      	mov	r6, r2
 800f610:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
 800f612:	f7ff fe8f 	bl	800f334 <find_sc_cfg>
	if (!cfg) {
 800f616:	4604      	mov	r4, r0
 800f618:	b1a8      	cbz	r0, 800f646 <sc_save+0x42>
	if (!(cfg->data.start || cfg->data.end)) {
 800f61a:	8923      	ldrh	r3, [r4, #8]
 800f61c:	b90b      	cbnz	r3, 800f622 <sc_save+0x1e>
 800f61e:	8963      	ldrh	r3, [r4, #10]
 800f620:	b393      	cbz	r3, 800f688 <sc_save+0x84>
	modified = update_range(&cfg->data.start, &cfg->data.end, start, end);
 800f622:	462b      	mov	r3, r5
 800f624:	4632      	mov	r2, r6
 800f626:	f104 010a 	add.w	r1, r4, #10
 800f62a:	f104 0008 	add.w	r0, r4, #8
 800f62e:	f00a fa9d 	bl	8019b6c <update_range>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
 800f632:	b128      	cbz	r0, 800f640 <sc_save+0x3c>
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
 800f634:	4621      	mov	r1, r4
 800f636:	f811 0b01 	ldrb.w	r0, [r1], #1
 800f63a:	f009 f80d 	bl	8018658 <bt_addr_le_is_bonded>
 800f63e:	bb30      	cbnz	r0, 800f68e <sc_save+0x8a>
}
 800f640:	b002      	add	sp, #8
 800f642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
 800f646:	9000      	str	r0, [sp, #0]
 800f648:	f8cd 0003 	str.w	r0, [sp, #3]
 800f64c:	4669      	mov	r1, sp
 800f64e:	f7ff fe71 	bl	800f334 <find_sc_cfg>
		if (!cfg) {
 800f652:	4604      	mov	r4, r0
 800f654:	b130      	cbz	r0, 800f664 <sc_save+0x60>
		cfg->id = id;
 800f656:	f800 7b01 	strb.w	r7, [r0], #1
 800f65a:	2207      	movs	r2, #7
 800f65c:	4641      	mov	r1, r8
 800f65e:	f008 fc0d 	bl	8017e7c <memcpy>
 800f662:	e7da      	b.n	800f61a <sc_save+0x16>
			BT_ERR("unable to save SC: no cfg left");
 800f664:	f04f 0100 	mov.w	r1, #0
 800f668:	2301      	movs	r3, #1
 800f66a:	f363 0102 	bfi	r1, r3, #0, #3
 800f66e:	f36f 01c5 	bfc	r1, #3, #3
 800f672:	4b09      	ldr	r3, [pc, #36]	; (800f698 <sc_save+0x94>)
 800f674:	4a09      	ldr	r2, [pc, #36]	; (800f69c <sc_save+0x98>)
 800f676:	1a9b      	subs	r3, r3, r2
 800f678:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800f67c:	f363 118f 	bfi	r1, r3, #6, #10
 800f680:	4807      	ldr	r0, [pc, #28]	; (800f6a0 <sc_save+0x9c>)
 800f682:	f7f4 ff63 	bl	800454c <log_0>
			return;
 800f686:	e7db      	b.n	800f640 <sc_save+0x3c>
		cfg->data.start = start;
 800f688:	8126      	strh	r6, [r4, #8]
		cfg->data.end = end;
 800f68a:	8165      	strh	r5, [r4, #10]
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
 800f68c:	e7d2      	b.n	800f634 <sc_save+0x30>
		sc_store(cfg);
 800f68e:	4620      	mov	r0, r4
 800f690:	f7ff ff7a 	bl	800f588 <sc_store>
 800f694:	e7d4      	b.n	800f640 <sc_save+0x3c>
 800f696:	bf00      	nop
 800f698:	0801d700 	.word	0x0801d700
 800f69c:	0801d6d0 	.word	0x0801d6d0
 800f6a0:	08021198 	.word	0x08021198

0800f6a4 <bt_gatt_store_cf>:
{
 800f6a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6a6:	b08d      	sub	sp, #52	; 0x34
 800f6a8:	4604      	mov	r4, r0
	cfg = find_cf_cfg(conn);
 800f6aa:	f7ff fe19 	bl	800f2e0 <find_cf_cfg>
	if (!cfg) {
 800f6ae:	4605      	mov	r5, r0
 800f6b0:	b348      	cbz	r0, 800f706 <bt_gatt_store_cf+0x62>
		str = (char *)cfg->data;
 800f6b2:	f100 0608 	add.w	r6, r0, #8
		if (conn->id) {
 800f6b6:	7a22      	ldrb	r2, [r4, #8]
 800f6b8:	b9b2      	cbnz	r2, 800f6e8 <bt_gatt_store_cf+0x44>
		len = sizeof(cfg->data);
 800f6ba:	2701      	movs	r7, #1
	if (!cfg || !conn->id) {
 800f6bc:	b10d      	cbz	r5, 800f6c2 <bt_gatt_store_cf+0x1e>
 800f6be:	7a23      	ldrb	r3, [r4, #8]
 800f6c0:	b943      	cbnz	r3, 800f6d4 <bt_gatt_store_cf+0x30>
		bt_settings_encode_key(key, sizeof(key), "cf",
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	9300      	str	r3, [sp, #0]
 800f6c6:	f104 0388 	add.w	r3, r4, #136	; 0x88
 800f6ca:	4a1a      	ldr	r2, [pc, #104]	; (800f734 <bt_gatt_store_cf+0x90>)
 800f6cc:	2124      	movs	r1, #36	; 0x24
 800f6ce:	a803      	add	r0, sp, #12
 800f6d0:	f7fa f9c2 	bl	8009a58 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
 800f6d4:	463a      	mov	r2, r7
 800f6d6:	4631      	mov	r1, r6
 800f6d8:	a803      	add	r0, sp, #12
 800f6da:	f7f6 fdfb 	bl	80062d4 <settings_save_one>
	if (err) {
 800f6de:	4604      	mov	r4, r0
 800f6e0:	b9a0      	cbnz	r0, 800f70c <bt_gatt_store_cf+0x68>
}
 800f6e2:	4620      	mov	r0, r4
 800f6e4:	b00d      	add	sp, #52	; 0x34
 800f6e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			u8_to_dec(id_str, sizeof(id_str), conn->id);
 800f6e8:	af02      	add	r7, sp, #8
 800f6ea:	2104      	movs	r1, #4
 800f6ec:	4638      	mov	r0, r7
 800f6ee:	f7f3 fbf7 	bl	8002ee0 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
 800f6f2:	9700      	str	r7, [sp, #0]
 800f6f4:	f104 0388 	add.w	r3, r4, #136	; 0x88
 800f6f8:	4a0e      	ldr	r2, [pc, #56]	; (800f734 <bt_gatt_store_cf+0x90>)
 800f6fa:	2124      	movs	r1, #36	; 0x24
 800f6fc:	a803      	add	r0, sp, #12
 800f6fe:	f7fa f9ab 	bl	8009a58 <bt_settings_encode_key>
		len = sizeof(cfg->data);
 800f702:	2701      	movs	r7, #1
 800f704:	e7da      	b.n	800f6bc <bt_gatt_store_cf+0x18>
		str = NULL;
 800f706:	4606      	mov	r6, r0
		len = 0;
 800f708:	2700      	movs	r7, #0
 800f70a:	e7d7      	b.n	800f6bc <bt_gatt_store_cf+0x18>
		BT_ERR("Failed to store Client Features (err %d)", err);
 800f70c:	f04f 0200 	mov.w	r2, #0
 800f710:	2301      	movs	r3, #1
 800f712:	f363 0202 	bfi	r2, r3, #0, #3
 800f716:	f36f 02c5 	bfc	r2, #3, #3
 800f71a:	4b07      	ldr	r3, [pc, #28]	; (800f738 <bt_gatt_store_cf+0x94>)
 800f71c:	4907      	ldr	r1, [pc, #28]	; (800f73c <bt_gatt_store_cf+0x98>)
 800f71e:	1a5b      	subs	r3, r3, r1
 800f720:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800f724:	f363 128f 	bfi	r2, r3, #6, #10
 800f728:	4601      	mov	r1, r0
 800f72a:	4805      	ldr	r0, [pc, #20]	; (800f740 <bt_gatt_store_cf+0x9c>)
 800f72c:	f7f4 fd9e 	bl	800426c <log_1>
		return err;
 800f730:	e7d7      	b.n	800f6e2 <bt_gatt_store_cf+0x3e>
 800f732:	bf00      	nop
 800f734:	080211b8 	.word	0x080211b8
 800f738:	0801d700 	.word	0x0801d700
 800f73c:	0801d6d0 	.word	0x0801d6d0
 800f740:	080211bc 	.word	0x080211bc

0800f744 <bt_gatt_clear_sc>:
{
 800f744:	b530      	push	{r4, r5, lr}
 800f746:	b08d      	sub	sp, #52	; 0x34
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
 800f748:	f7ff fdf4 	bl	800f334 <find_sc_cfg>
	if (!cfg) {
 800f74c:	b1b0      	cbz	r0, 800f77c <bt_gatt_clear_sc+0x38>
 800f74e:	4604      	mov	r4, r0
		if (cfg->id) {
 800f750:	7802      	ldrb	r2, [r0, #0]
 800f752:	b1b2      	cbz	r2, 800f782 <bt_gatt_clear_sc+0x3e>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
 800f754:	ad02      	add	r5, sp, #8
 800f756:	2104      	movs	r1, #4
 800f758:	4628      	mov	r0, r5
 800f75a:	f7f3 fbc1 	bl	8002ee0 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
 800f75e:	9500      	str	r5, [sp, #0]
 800f760:	1c63      	adds	r3, r4, #1
 800f762:	4a15      	ldr	r2, [pc, #84]	; (800f7b8 <bt_gatt_clear_sc+0x74>)
 800f764:	2124      	movs	r1, #36	; 0x24
 800f766:	a803      	add	r0, sp, #12
 800f768:	f7fa f976 	bl	8009a58 <bt_settings_encode_key>
		err = settings_delete(key);
 800f76c:	a803      	add	r0, sp, #12
 800f76e:	f007 fbc6 	bl	8016efe <settings_delete>
		if (err) {
 800f772:	4601      	mov	r1, r0
 800f774:	b970      	cbnz	r0, 800f794 <bt_gatt_clear_sc+0x50>
	clear_sc_cfg(cfg);
 800f776:	4620      	mov	r0, r4
 800f778:	f00a fb4a 	bl	8019e10 <clear_sc_cfg>
}
 800f77c:	2000      	movs	r0, #0
 800f77e:	b00d      	add	sp, #52	; 0x34
 800f780:	bd30      	pop	{r4, r5, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
 800f782:	2300      	movs	r3, #0
 800f784:	9300      	str	r3, [sp, #0]
 800f786:	1c43      	adds	r3, r0, #1
 800f788:	4a0b      	ldr	r2, [pc, #44]	; (800f7b8 <bt_gatt_clear_sc+0x74>)
 800f78a:	2124      	movs	r1, #36	; 0x24
 800f78c:	a803      	add	r0, sp, #12
 800f78e:	f7fa f963 	bl	8009a58 <bt_settings_encode_key>
 800f792:	e7eb      	b.n	800f76c <bt_gatt_clear_sc+0x28>
			BT_ERR("failed to delete SC (err %d)", err);
 800f794:	f04f 0200 	mov.w	r2, #0
 800f798:	2301      	movs	r3, #1
 800f79a:	f363 0202 	bfi	r2, r3, #0, #3
 800f79e:	f36f 02c5 	bfc	r2, #3, #3
 800f7a2:	4b06      	ldr	r3, [pc, #24]	; (800f7bc <bt_gatt_clear_sc+0x78>)
 800f7a4:	4806      	ldr	r0, [pc, #24]	; (800f7c0 <bt_gatt_clear_sc+0x7c>)
 800f7a6:	1a1b      	subs	r3, r3, r0
 800f7a8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800f7ac:	f363 128f 	bfi	r2, r3, #6, #10
 800f7b0:	4804      	ldr	r0, [pc, #16]	; (800f7c4 <bt_gatt_clear_sc+0x80>)
 800f7b2:	f7f4 fd5b 	bl	800426c <log_1>
 800f7b6:	e7de      	b.n	800f776 <bt_gatt_clear_sc+0x32>
 800f7b8:	08021178 	.word	0x08021178
 800f7bc:	0801d700 	.word	0x0801d700
 800f7c0:	0801d6d0 	.word	0x0801d6d0
 800f7c4:	080211e8 	.word	0x080211e8

0800f7c8 <sc_clear>:
{
 800f7c8:	b538      	push	{r3, r4, r5, lr}
 800f7ca:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
 800f7cc:	f100 0588 	add.w	r5, r0, #136	; 0x88
 800f7d0:	4629      	mov	r1, r5
 800f7d2:	7a00      	ldrb	r0, [r0, #8]
 800f7d4:	f008 ff40 	bl	8018658 <bt_addr_le_is_bonded>
 800f7d8:	b1c0      	cbz	r0, 800f80c <sc_clear+0x44>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
 800f7da:	4629      	mov	r1, r5
 800f7dc:	7a20      	ldrb	r0, [r4, #8]
 800f7de:	f7ff ffb1 	bl	800f744 <bt_gatt_clear_sc>
		if (err) {
 800f7e2:	4601      	mov	r1, r0
 800f7e4:	b900      	cbnz	r0, 800f7e8 <sc_clear+0x20>
}
 800f7e6:	bd38      	pop	{r3, r4, r5, pc}
			BT_ERR("Failed to clear SC %d", err);
 800f7e8:	f04f 0200 	mov.w	r2, #0
 800f7ec:	2301      	movs	r3, #1
 800f7ee:	f363 0202 	bfi	r2, r3, #0, #3
 800f7f2:	f36f 02c5 	bfc	r2, #3, #3
 800f7f6:	4b0a      	ldr	r3, [pc, #40]	; (800f820 <sc_clear+0x58>)
 800f7f8:	480a      	ldr	r0, [pc, #40]	; (800f824 <sc_clear+0x5c>)
 800f7fa:	1a1b      	subs	r3, r3, r0
 800f7fc:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800f800:	f363 128f 	bfi	r2, r3, #6, #10
 800f804:	4808      	ldr	r0, [pc, #32]	; (800f828 <sc_clear+0x60>)
 800f806:	f7f4 fd31 	bl	800426c <log_1>
 800f80a:	e7ec      	b.n	800f7e6 <sc_clear+0x1e>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
 800f80c:	4629      	mov	r1, r5
 800f80e:	7a20      	ldrb	r0, [r4, #8]
 800f810:	f7ff fd90 	bl	800f334 <find_sc_cfg>
		if (cfg) {
 800f814:	2800      	cmp	r0, #0
 800f816:	d0e6      	beq.n	800f7e6 <sc_clear+0x1e>
			clear_sc_cfg(cfg);
 800f818:	f00a fafa 	bl	8019e10 <clear_sc_cfg>
}
 800f81c:	e7e3      	b.n	800f7e6 <sc_clear+0x1e>
 800f81e:	bf00      	nop
 800f820:	0801d700 	.word	0x0801d700
 800f824:	0801d6d0 	.word	0x0801d6d0
 800f828:	08021208 	.word	0x08021208

0800f82c <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
 800f82c:	b508      	push	{r3, lr}
 800f82e:	4613      	mov	r3, r2
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
 800f830:	6881      	ldr	r1, [r0, #8]
 800f832:	4a08      	ldr	r2, [pc, #32]	; (800f854 <remove_peer_from_attr+0x28>)
 800f834:	4291      	cmp	r1, r2
 800f836:	d001      	beq.n	800f83c <remove_peer_from_attr+0x10>
	if (cfg) {
		memset(cfg, 0, sizeof(*cfg));
	}

	return BT_GATT_ITER_CONTINUE;
}
 800f838:	2001      	movs	r0, #1
 800f83a:	bd08      	pop	{r3, pc}
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
 800f83c:	791a      	ldrb	r2, [r3, #4]
 800f83e:	6819      	ldr	r1, [r3, #0]
 800f840:	68c0      	ldr	r0, [r0, #12]
 800f842:	f00a fa9e 	bl	8019d82 <ccc_find_cfg>
	if (cfg) {
 800f846:	2800      	cmp	r0, #0
 800f848:	d0f6      	beq.n	800f838 <remove_peer_from_attr+0xc>
		memset(cfg, 0, sizeof(*cfg));
 800f84a:	220a      	movs	r2, #10
 800f84c:	2100      	movs	r1, #0
 800f84e:	f008 fb3a 	bl	8017ec6 <memset>
 800f852:	e7f1      	b.n	800f838 <remove_peer_from_attr+0xc>
 800f854:	0800f3f9 	.word	0x0800f3f9

0800f858 <sc_indicate_rsp>:
{
 800f858:	b510      	push	{r4, lr}
 800f85a:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800f85c:	4b1a      	ldr	r3, [pc, #104]	; (800f8c8 <sc_indicate_rsp+0x70>)
 800f85e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800f862:	f3bf 8f5b 	dmb	ish
 800f866:	e852 1f00 	ldrex	r1, [r2]
 800f86a:	f021 0102 	bic.w	r1, r1, #2
 800f86e:	e842 1000 	strex	r0, r1, [r2]
 800f872:	2800      	cmp	r0, #0
 800f874:	d1f7      	bne.n	800f866 <sc_indicate_rsp+0xe>
 800f876:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800f87a:	f3bf 8f5b 	dmb	ish
 800f87e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f880:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
 800f884:	f013 0f01 	tst.w	r3, #1
 800f888:	d116      	bne.n	800f8b8 <sc_indicate_rsp+0x60>
	cfg = find_cf_cfg(conn);
 800f88a:	4620      	mov	r0, r4
 800f88c:	f7ff fd28 	bl	800f2e0 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
 800f890:	4603      	mov	r3, r0
 800f892:	b180      	cbz	r0, 800f8b6 <sc_indicate_rsp+0x5e>
 800f894:	7a02      	ldrb	r2, [r0, #8]
 800f896:	f012 0f01 	tst.w	r2, #1
 800f89a:	d00c      	beq.n	800f8b6 <sc_indicate_rsp+0x5e>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
 800f89c:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800f89e:	f3bf 8f5b 	dmb	ish
 800f8a2:	e853 2f00 	ldrex	r2, [r3]
 800f8a6:	f042 0201 	orr.w	r2, r2, #1
 800f8aa:	e843 2100 	strex	r1, r2, [r3]
 800f8ae:	2900      	cmp	r1, #0
 800f8b0:	d1f7      	bne.n	800f8a2 <sc_indicate_rsp+0x4a>
 800f8b2:	f3bf 8f5b 	dmb	ish
}
 800f8b6:	bd10      	pop	{r4, pc}
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	4903      	ldr	r1, [pc, #12]	; (800f8cc <sc_indicate_rsp+0x74>)
 800f8be:	4804      	ldr	r0, [pc, #16]	; (800f8d0 <sc_indicate_rsp+0x78>)
 800f8c0:	f004 feca 	bl	8014658 <k_delayed_work_submit_to_queue>
 800f8c4:	e7e1      	b.n	800f88a <sc_indicate_rsp+0x32>
 800f8c6:	bf00      	nop
 800f8c8:	20001070 	.word	0x20001070
 800f8cc:	20001088 	.word	0x20001088
 800f8d0:	20001408 	.word	0x20001408

0800f8d4 <sc_commit>:
{
 800f8d4:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800f8d6:	4b10      	ldr	r3, [pc, #64]	; (800f918 <sc_commit+0x44>)
 800f8d8:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800f8dc:	f3bf 8f5b 	dmb	ish
 800f8e0:	e852 1f00 	ldrex	r1, [r2]
 800f8e4:	f021 0102 	bic.w	r1, r1, #2
 800f8e8:	e842 1000 	strex	r0, r1, [r2]
 800f8ec:	2800      	cmp	r0, #0
 800f8ee:	d1f7      	bne.n	800f8e0 <sc_commit+0xc>
 800f8f0:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800f8f4:	f3bf 8f5b 	dmb	ish
 800f8f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f8fa:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
 800f8fe:	f013 0f01 	tst.w	r3, #1
 800f902:	d101      	bne.n	800f908 <sc_commit+0x34>
}
 800f904:	2000      	movs	r0, #0
 800f906:	bd08      	pop	{r3, pc}
 800f908:	2264      	movs	r2, #100	; 0x64
 800f90a:	2300      	movs	r3, #0
 800f90c:	4903      	ldr	r1, [pc, #12]	; (800f91c <sc_commit+0x48>)
 800f90e:	4804      	ldr	r0, [pc, #16]	; (800f920 <sc_commit+0x4c>)
 800f910:	f004 fea2 	bl	8014658 <k_delayed_work_submit_to_queue>
 800f914:	e7f6      	b.n	800f904 <sc_commit+0x30>
 800f916:	bf00      	nop
 800f918:	20001070 	.word	0x20001070
 800f91c:	20001088 	.word	0x20001088
 800f920:	20001408 	.word	0x20001408

0800f924 <sc_indicate>:
{
 800f924:	b510      	push	{r4, lr}
 800f926:	4602      	mov	r2, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800f928:	4c17      	ldr	r4, [pc, #92]	; (800f988 <sc_indicate+0x64>)
 800f92a:	f3bf 8f5b 	dmb	ish
 800f92e:	e854 3f00 	ldrex	r3, [r4]
 800f932:	f043 0001 	orr.w	r0, r3, #1
 800f936:	e844 0c00 	strex	ip, r0, [r4]
 800f93a:	f1bc 0f00 	cmp.w	ip, #0
 800f93e:	d1f6      	bne.n	800f92e <sc_indicate+0xa>
 800f940:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
 800f944:	f013 0f01 	tst.w	r3, #1
 800f948:	d10d      	bne.n	800f966 <sc_indicate+0x42>
		gatt_sc.start = start;
 800f94a:	f1a4 0348 	sub.w	r3, r4, #72	; 0x48
 800f94e:	829a      	strh	r2, [r3, #20]
		gatt_sc.end = end;
 800f950:	82d9      	strh	r1, [r3, #22]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800f952:	f3bf 8f5b 	dmb	ish
 800f956:	4b0d      	ldr	r3, [pc, #52]	; (800f98c <sc_indicate+0x68>)
 800f958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f95a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
 800f95e:	f013 0f02 	tst.w	r3, #2
 800f962:	d00a      	beq.n	800f97a <sc_indicate+0x56>
}
 800f964:	bd10      	pop	{r4, pc}
	if (!update_range(&gatt_sc.start, &gatt_sc.end, start, end)) {
 800f966:	4809      	ldr	r0, [pc, #36]	; (800f98c <sc_indicate+0x68>)
 800f968:	460b      	mov	r3, r1
 800f96a:	f100 0116 	add.w	r1, r0, #22
 800f96e:	3014      	adds	r0, #20
 800f970:	f00a f8fc 	bl	8019b6c <update_range>
 800f974:	2800      	cmp	r0, #0
 800f976:	d1ec      	bne.n	800f952 <sc_indicate+0x2e>
 800f978:	e7f4      	b.n	800f964 <sc_indicate+0x40>
 800f97a:	2264      	movs	r2, #100	; 0x64
 800f97c:	2300      	movs	r3, #0
 800f97e:	4904      	ldr	r1, [pc, #16]	; (800f990 <sc_indicate+0x6c>)
 800f980:	4804      	ldr	r0, [pc, #16]	; (800f994 <sc_indicate+0x70>)
 800f982:	f004 fe69 	bl	8014658 <k_delayed_work_submit_to_queue>
 800f986:	e7ed      	b.n	800f964 <sc_indicate+0x40>
 800f988:	200010b8 	.word	0x200010b8
 800f98c:	20001070 	.word	0x20001070
 800f990:	20001088 	.word	0x20001088
 800f994:	20001408 	.word	0x20001408

0800f998 <disconnected_cb>:
{
 800f998:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
 800f99c:	6881      	ldr	r1, [r0, #8]
 800f99e:	4b2d      	ldr	r3, [pc, #180]	; (800fa54 <disconnected_cb+0xbc>)
 800f9a0:	4299      	cmp	r1, r3
 800f9a2:	d002      	beq.n	800f9aa <disconnected_cb+0x12>
}
 800f9a4:	2001      	movs	r0, #1
 800f9a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9aa:	4604      	mov	r4, r0
 800f9ac:	4616      	mov	r6, r2
	ccc = attr->user_data;
 800f9ae:	68c7      	ldr	r7, [r0, #12]
	if (!ccc->value) {
 800f9b0:	897b      	ldrh	r3, [r7, #10]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d0f6      	beq.n	800f9a4 <disconnected_cb+0xc>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
 800f9b6:	2500      	movs	r5, #0
	value_used = false;
 800f9b8:	46aa      	mov	sl, r5
 800f9ba:	e021      	b.n	800fa00 <disconnected_cb+0x68>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
 800f9bc:	eb05 0885 	add.w	r8, r5, r5, lsl #2
 800f9c0:	eb07 0848 	add.w	r8, r7, r8, lsl #1
		if (!cfg->value) {
 800f9c4:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800f9c8:	b1cb      	cbz	r3, 800f9fe <disconnected_cb+0x66>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
 800f9ca:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800f9ce:	f108 0901 	add.w	r9, r8, #1
 800f9d2:	464a      	mov	r2, r9
 800f9d4:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
 800f9d8:	4630      	mov	r0, r6
 800f9da:	f009 f871 	bl	8018ac0 <bt_conn_is_peer_addr_le>
 800f9de:	bb00      	cbnz	r0, 800fa22 <disconnected_cb+0x8a>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
 800f9e0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800f9e4:	4649      	mov	r1, r9
 800f9e6:	f817 0013 	ldrb.w	r0, [r7, r3, lsl #1]
 800f9ea:	f7fd fe23 	bl	800d634 <bt_conn_lookup_addr_le>
			if (tmp) {
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	b128      	cbz	r0, 800f9fe <disconnected_cb+0x66>
				if (tmp->state == BT_CONN_CONNECTED) {
 800f9f2:	7b42      	ldrb	r2, [r0, #13]
 800f9f4:	2a07      	cmp	r2, #7
 800f9f6:	d011      	beq.n	800fa1c <disconnected_cb+0x84>
				bt_conn_unref(tmp);
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	f009 f8bb 	bl	8018b74 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
 800f9fe:	3501      	adds	r5, #1
 800fa00:	2d00      	cmp	r5, #0
 800fa02:	d0db      	beq.n	800f9bc <disconnected_cb+0x24>
	if (!value_used) {
 800fa04:	f1ba 0f00 	cmp.w	sl, #0
 800fa08:	d1cc      	bne.n	800f9a4 <disconnected_cb+0xc>
		ccc->value = 0U;
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	817b      	strh	r3, [r7, #10]
		if (ccc->cfg_changed) {
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d0c7      	beq.n	800f9a4 <disconnected_cb+0xc>
			ccc->cfg_changed(attr, ccc->value);
 800fa14:	2100      	movs	r1, #0
 800fa16:	4620      	mov	r0, r4
 800fa18:	4798      	blx	r3
 800fa1a:	e7c3      	b.n	800f9a4 <disconnected_cb+0xc>
					value_used = true;
 800fa1c:	f04f 0a01 	mov.w	sl, #1
 800fa20:	e7ea      	b.n	800f9f8 <disconnected_cb+0x60>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
 800fa22:	f106 0b88 	add.w	fp, r6, #136	; 0x88
 800fa26:	4659      	mov	r1, fp
 800fa28:	7a30      	ldrb	r0, [r6, #8]
 800fa2a:	f008 fe15 	bl	8018658 <bt_addr_le_is_bonded>
 800fa2e:	b950      	cbnz	r0, 800fa46 <disconnected_cb+0xae>
				if (ccc == &sc_ccc) {
 800fa30:	4b09      	ldr	r3, [pc, #36]	; (800fa58 <disconnected_cb+0xc0>)
 800fa32:	429f      	cmp	r7, r3
 800fa34:	d003      	beq.n	800fa3e <disconnected_cb+0xa6>
				clear_ccc_cfg(cfg);
 800fa36:	4640      	mov	r0, r8
 800fa38:	f00a f9c3 	bl	8019dc2 <clear_ccc_cfg>
 800fa3c:	e7df      	b.n	800f9fe <disconnected_cb+0x66>
					sc_clear(conn);
 800fa3e:	4630      	mov	r0, r6
 800fa40:	f7ff fec2 	bl	800f7c8 <sc_clear>
 800fa44:	e7f7      	b.n	800fa36 <disconnected_cb+0x9e>
 800fa46:	2207      	movs	r2, #7
 800fa48:	4659      	mov	r1, fp
 800fa4a:	4648      	mov	r0, r9
 800fa4c:	f008 fa16 	bl	8017e7c <memcpy>
}
 800fa50:	e7d5      	b.n	800f9fe <disconnected_cb+0x66>
 800fa52:	bf00      	nop
 800fa54:	0800f3f9 	.word	0x0800f3f9
 800fa58:	20000568 	.word	0x20000568

0800fa5c <gatt_send>:
{
 800fa5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa60:	4607      	mov	r7, r0
 800fa62:	460d      	mov	r5, r1
	if (params) {
 800fa64:	b1f3      	cbz	r3, 800faa4 <gatt_send+0x48>
 800fa66:	4616      	mov	r6, r2
 800fa68:	4698      	mov	r8, r3
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
 800fa6a:	481b      	ldr	r0, [pc, #108]	; (800fad8 <gatt_send+0x7c>)
 800fa6c:	2100      	movs	r1, #0
 800fa6e:	f7ff fb03 	bl	800f078 <bt_att_req_alloc>
		if (!req) {
 800fa72:	4604      	mov	r4, r0
 800fa74:	b178      	cbz	r0, 800fa96 <gatt_send+0x3a>
		req->buf = buf;
 800fa76:	6105      	str	r5, [r0, #16]
		req->func = func;
 800fa78:	6046      	str	r6, [r0, #4]
		req->destroy = destroy;
 800fa7a:	9b06      	ldr	r3, [sp, #24]
 800fa7c:	6083      	str	r3, [r0, #8]
		req->user_data = params;
 800fa7e:	f8c0 8018 	str.w	r8, [r0, #24]
		err = bt_att_req_send(conn, req);
 800fa82:	4601      	mov	r1, r0
 800fa84:	4638      	mov	r0, r7
 800fa86:	f00a f82c 	bl	8019ae2 <bt_att_req_send>
		if (err) {
 800fa8a:	4605      	mov	r5, r0
 800fa8c:	b930      	cbnz	r0, 800fa9c <gatt_send+0x40>
	if (err) {
 800fa8e:	b97d      	cbnz	r5, 800fab0 <gatt_send+0x54>
}
 800fa90:	4628      	mov	r0, r5
 800fa92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -ENOMEM;
 800fa96:	f06f 050b 	mvn.w	r5, #11
 800fa9a:	e7f9      	b.n	800fa90 <gatt_send+0x34>
			bt_att_req_free(req);
 800fa9c:	4620      	mov	r0, r4
 800fa9e:	f7ff fb03 	bl	800f0a8 <bt_att_req_free>
 800faa2:	e7f4      	b.n	800fa8e <gatt_send+0x32>
		err = bt_att_send(conn, buf, NULL, NULL);
 800faa4:	2300      	movs	r3, #0
 800faa6:	461a      	mov	r2, r3
 800faa8:	f009 ffca 	bl	8019a40 <bt_att_send>
 800faac:	4605      	mov	r5, r0
 800faae:	e7ee      	b.n	800fa8e <gatt_send+0x32>
		BT_ERR("Error sending ATT PDU: %d", err);
 800fab0:	f04f 0200 	mov.w	r2, #0
 800fab4:	2301      	movs	r3, #1
 800fab6:	f363 0202 	bfi	r2, r3, #0, #3
 800faba:	f36f 02c5 	bfc	r2, #3, #3
 800fabe:	4b07      	ldr	r3, [pc, #28]	; (800fadc <gatt_send+0x80>)
 800fac0:	4907      	ldr	r1, [pc, #28]	; (800fae0 <gatt_send+0x84>)
 800fac2:	1a5b      	subs	r3, r3, r1
 800fac4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800fac8:	f363 128f 	bfi	r2, r3, #6, #10
 800facc:	4629      	mov	r1, r5
 800face:	4805      	ldr	r0, [pc, #20]	; (800fae4 <gatt_send+0x88>)
 800fad0:	f7f4 fbcc 	bl	800426c <log_1>
 800fad4:	e7dc      	b.n	800fa90 <gatt_send+0x34>
 800fad6:	bf00      	nop
 800fad8:	000493e0 	.word	0x000493e0
 800fadc:	0801d700 	.word	0x0801d700
 800fae0:	0801d6d0 	.word	0x0801d6d0
 800fae4:	08021220 	.word	0x08021220

0800fae8 <gatt_indicate>:
{
 800fae8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800faec:	b083      	sub	sp, #12
 800faee:	4607      	mov	r7, r0
 800faf0:	4688      	mov	r8, r1
 800faf2:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
 800faf4:	8a12      	ldrh	r2, [r2, #16]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
 800faf6:	3202      	adds	r2, #2
 800faf8:	211d      	movs	r1, #29
 800fafa:	f7ff f889 	bl	800ec10 <bt_att_create_pdu>
	if (!buf) {
 800fafe:	b1f8      	cbz	r0, 800fb40 <gatt_indicate+0x58>
 800fb00:	4681      	mov	r9, r0
	ind = net_buf_add(buf, sizeof(*ind));
 800fb02:	f100 0608 	add.w	r6, r0, #8
 800fb06:	2102      	movs	r1, #2
 800fb08:	4630      	mov	r0, r6
 800fb0a:	f00b faa4 	bl	801b056 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
 800fb0e:	4605      	mov	r5, r0
 800fb10:	f825 8b02 	strh.w	r8, [r5], #2
	net_buf_add(buf, params->len);
 800fb14:	8a21      	ldrh	r1, [r4, #16]
 800fb16:	4630      	mov	r0, r6
 800fb18:	f00b fa9d 	bl	801b056 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
 800fb1c:	8a22      	ldrh	r2, [r4, #16]
 800fb1e:	68e1      	ldr	r1, [r4, #12]
 800fb20:	4628      	mov	r0, r5
 800fb22:	f008 f9ab 	bl	8017e7c <memcpy>
	if (!params->func) {
 800fb26:	68a3      	ldr	r3, [r4, #8]
 800fb28:	b1f3      	cbz	r3, 800fb68 <gatt_indicate+0x80>
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	9300      	str	r3, [sp, #0]
 800fb2e:	4623      	mov	r3, r4
 800fb30:	4a11      	ldr	r2, [pc, #68]	; (800fb78 <gatt_indicate+0x90>)
 800fb32:	4649      	mov	r1, r9
 800fb34:	4638      	mov	r0, r7
 800fb36:	f7ff ff91 	bl	800fa5c <gatt_send>
}
 800fb3a:	b003      	add	sp, #12
 800fb3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_WARN("No buffer available to send indication");
 800fb40:	f04f 0100 	mov.w	r1, #0
 800fb44:	2302      	movs	r3, #2
 800fb46:	f363 0102 	bfi	r1, r3, #0, #3
 800fb4a:	f36f 01c5 	bfc	r1, #3, #3
 800fb4e:	4b0b      	ldr	r3, [pc, #44]	; (800fb7c <gatt_indicate+0x94>)
 800fb50:	4a0b      	ldr	r2, [pc, #44]	; (800fb80 <gatt_indicate+0x98>)
 800fb52:	1a9b      	subs	r3, r3, r2
 800fb54:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800fb58:	f363 118f 	bfi	r1, r3, #6, #10
 800fb5c:	4809      	ldr	r0, [pc, #36]	; (800fb84 <gatt_indicate+0x9c>)
 800fb5e:	f7f4 fcf5 	bl	800454c <log_0>
		return -ENOMEM;
 800fb62:	f06f 000b 	mvn.w	r0, #11
 800fb66:	e7e8      	b.n	800fb3a <gatt_indicate+0x52>
		return gatt_send(conn, buf, NULL, NULL, NULL);
 800fb68:	2200      	movs	r2, #0
 800fb6a:	9200      	str	r2, [sp, #0]
 800fb6c:	4613      	mov	r3, r2
 800fb6e:	4649      	mov	r1, r9
 800fb70:	4638      	mov	r0, r7
 800fb72:	f7ff ff73 	bl	800fa5c <gatt_send>
 800fb76:	e7e0      	b.n	800fb3a <gatt_indicate+0x52>
 800fb78:	08019c31 	.word	0x08019c31
 800fb7c:	0801d700 	.word	0x0801d700
 800fb80:	0801d6d0 	.word	0x0801d6d0
 800fb84:	0802123c 	.word	0x0802123c

0800fb88 <gatt_notify>:
{
 800fb88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb8c:	4606      	mov	r6, r0
 800fb8e:	460f      	mov	r7, r1
 800fb90:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
 800fb92:	8992      	ldrh	r2, [r2, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
 800fb94:	3202      	adds	r2, #2
 800fb96:	211b      	movs	r1, #27
 800fb98:	f7ff f83a 	bl	800ec10 <bt_att_create_pdu>
	if (!buf) {
 800fb9c:	b1d0      	cbz	r0, 800fbd4 <gatt_notify+0x4c>
 800fb9e:	4680      	mov	r8, r0
	nfy = net_buf_add(buf, sizeof(*nfy));
 800fba0:	f100 0908 	add.w	r9, r0, #8
 800fba4:	2102      	movs	r1, #2
 800fba6:	4648      	mov	r0, r9
 800fba8:	f00b fa55 	bl	801b056 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
 800fbac:	4605      	mov	r5, r0
 800fbae:	f825 7b02 	strh.w	r7, [r5], #2
	net_buf_add(buf, params->len);
 800fbb2:	89a1      	ldrh	r1, [r4, #12]
 800fbb4:	4648      	mov	r0, r9
 800fbb6:	f00b fa4e 	bl	801b056 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
 800fbba:	89a2      	ldrh	r2, [r4, #12]
 800fbbc:	68a1      	ldr	r1, [r4, #8]
 800fbbe:	4628      	mov	r0, r5
 800fbc0:	f008 f95c 	bl	8017e7c <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
 800fbc4:	6963      	ldr	r3, [r4, #20]
 800fbc6:	6922      	ldr	r2, [r4, #16]
 800fbc8:	4641      	mov	r1, r8
 800fbca:	4630      	mov	r0, r6
 800fbcc:	f009 ff38 	bl	8019a40 <bt_att_send>
}
 800fbd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		BT_WARN("No buffer available to send notification");
 800fbd4:	f04f 0100 	mov.w	r1, #0
 800fbd8:	2302      	movs	r3, #2
 800fbda:	f363 0102 	bfi	r1, r3, #0, #3
 800fbde:	f36f 01c5 	bfc	r1, #3, #3
 800fbe2:	4b06      	ldr	r3, [pc, #24]	; (800fbfc <gatt_notify+0x74>)
 800fbe4:	4a06      	ldr	r2, [pc, #24]	; (800fc00 <gatt_notify+0x78>)
 800fbe6:	1a9b      	subs	r3, r3, r2
 800fbe8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800fbec:	f363 118f 	bfi	r1, r3, #6, #10
 800fbf0:	4804      	ldr	r0, [pc, #16]	; (800fc04 <gatt_notify+0x7c>)
 800fbf2:	f7f4 fcab 	bl	800454c <log_0>
		return -ENOMEM;
 800fbf6:	f06f 000b 	mvn.w	r0, #11
 800fbfa:	e7e9      	b.n	800fbd0 <gatt_notify+0x48>
 800fbfc:	0801d700 	.word	0x0801d700
 800fc00:	0801d6d0 	.word	0x0801d6d0
 800fc04:	08021264 	.word	0x08021264

0800fc08 <notify_cb>:
{
 800fc08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fc0c:	b083      	sub	sp, #12
 800fc0e:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
 800fc10:	6882      	ldr	r2, [r0, #8]
 800fc12:	4b41      	ldr	r3, [pc, #260]	; (800fd18 <notify_cb+0x110>)
 800fc14:	429a      	cmp	r2, r3
 800fc16:	d003      	beq.n	800fc20 <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
 800fc18:	2001      	movs	r0, #1
}
 800fc1a:	b003      	add	sp, #12
 800fc1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc20:	4607      	mov	r7, r0
	ccc = attr->user_data;
 800fc22:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
 800fc24:	4b3d      	ldr	r3, [pc, #244]	; (800fd1c <notify_cb+0x114>)
 800fc26:	429e      	cmp	r6, r3
 800fc28:	d031      	beq.n	800fc8e <notify_cb+0x86>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
 800fc2a:	2400      	movs	r4, #0
 800fc2c:	e046      	b.n	800fcbc <notify_cb+0xb4>
				sc = (struct sc_data *)data->ind_params->data;
 800fc2e:	692b      	ldr	r3, [r5, #16]
 800fc30:	68da      	ldr	r2, [r3, #12]
				sc_save(cfg->id, &cfg->peer,
 800fc32:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 800fc36:	8853      	ldrh	r3, [r2, #2]
 800fc38:	8812      	ldrh	r2, [r2, #0]
 800fc3a:	4641      	mov	r1, r8
 800fc3c:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 800fd20 <notify_cb+0x118>
 800fc40:	f81c 0020 	ldrb.w	r0, [ip, r0, lsl #2]
 800fc44:	f7ff fcde 	bl	800f604 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
 800fc48:	3401      	adds	r4, #1
 800fc4a:	2c01      	cmp	r4, #1
 800fc4c:	d8ed      	bhi.n	800fc2a <notify_cb+0x22>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
 800fc4e:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 800fc52:	4b33      	ldr	r3, [pc, #204]	; (800fd20 <notify_cb+0x118>)
 800fc54:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 800fc58:	f108 0801 	add.w	r8, r8, #1
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	9300      	str	r3, [sp, #0]
 800fc60:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
 800fc64:	2207      	movs	r2, #7
 800fc66:	4669      	mov	r1, sp
 800fc68:	4640      	mov	r0, r8
 800fc6a:	f008 f8ef 	bl	8017e4c <memcmp>
 800fc6e:	2800      	cmp	r0, #0
 800fc70:	d0ea      	beq.n	800fc48 <notify_cb+0x40>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
 800fc72:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800fc76:	2207      	movs	r2, #7
 800fc78:	4641      	mov	r1, r8
 800fc7a:	4829      	ldr	r0, [pc, #164]	; (800fd20 <notify_cb+0x118>)
 800fc7c:	f810 0023 	ldrb.w	r0, [r0, r3, lsl #2]
 800fc80:	f7fd fd06 	bl	800d690 <bt_conn_lookup_state_le>
			if (!conn) {
 800fc84:	2800      	cmp	r0, #0
 800fc86:	d0d2      	beq.n	800fc2e <notify_cb+0x26>
			bt_conn_unref(conn);
 800fc88:	f008 ff74 	bl	8018b74 <bt_conn_unref>
 800fc8c:	e7dc      	b.n	800fc48 <notify_cb+0x40>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
 800fc8e:	2400      	movs	r4, #0
 800fc90:	e7db      	b.n	800fc4a <notify_cb+0x42>
			bt_conn_unref(conn);
 800fc92:	f008 ff6f 	bl	8018b74 <bt_conn_unref>
			continue;
 800fc96:	e010      	b.n	800fcba <notify_cb+0xb2>
		if (data->type == BT_GATT_CCC_INDICATE) {
 800fc98:	89ab      	ldrh	r3, [r5, #12]
 800fc9a:	2b02      	cmp	r3, #2
 800fc9c:	d031      	beq.n	800fd02 <notify_cb+0xfa>
			err = gatt_notify(conn, data->handle, data->nfy_params);
 800fc9e:	692a      	ldr	r2, [r5, #16]
 800fca0:	88a9      	ldrh	r1, [r5, #4]
 800fca2:	4640      	mov	r0, r8
 800fca4:	f7ff ff70 	bl	800fb88 <gatt_notify>
 800fca8:	4681      	mov	r9, r0
		bt_conn_unref(conn);
 800fcaa:	4640      	mov	r0, r8
 800fcac:	f008 ff62 	bl	8018b74 <bt_conn_unref>
		if (err < 0) {
 800fcb0:	f1b9 0f00 	cmp.w	r9, #0
 800fcb4:	db2e      	blt.n	800fd14 <notify_cb+0x10c>
		data->err = 0;
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	60ab      	str	r3, [r5, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
 800fcba:	3401      	adds	r4, #1
 800fcbc:	bb44      	cbnz	r4, 800fd10 <notify_cb+0x108>
		if (cfg->value != data->type) {
 800fcbe:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800fcc2:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800fcc6:	891a      	ldrh	r2, [r3, #8]
 800fcc8:	89ab      	ldrh	r3, [r5, #12]
 800fcca:	429a      	cmp	r2, r3
 800fccc:	d1f5      	bne.n	800fcba <notify_cb+0xb2>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
 800fcce:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800fcd2:	eb06 0143 	add.w	r1, r6, r3, lsl #1
 800fcd6:	3101      	adds	r1, #1
 800fcd8:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
 800fcdc:	f7fd fcaa 	bl	800d634 <bt_conn_lookup_addr_le>
		if (!conn) {
 800fce0:	4680      	mov	r8, r0
 800fce2:	2800      	cmp	r0, #0
 800fce4:	d0e9      	beq.n	800fcba <notify_cb+0xb2>
		if (conn->state != BT_CONN_CONNECTED) {
 800fce6:	7b43      	ldrb	r3, [r0, #13]
 800fce8:	2b07      	cmp	r3, #7
 800fcea:	d1d2      	bne.n	800fc92 <notify_cb+0x8a>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
 800fcec:	6973      	ldr	r3, [r6, #20]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d0d2      	beq.n	800fc98 <notify_cb+0x90>
 800fcf2:	4639      	mov	r1, r7
 800fcf4:	4798      	blx	r3
 800fcf6:	2800      	cmp	r0, #0
 800fcf8:	d1ce      	bne.n	800fc98 <notify_cb+0x90>
			bt_conn_unref(conn);
 800fcfa:	4640      	mov	r0, r8
 800fcfc:	f008 ff3a 	bl	8018b74 <bt_conn_unref>
			continue;
 800fd00:	e7db      	b.n	800fcba <notify_cb+0xb2>
			err = gatt_indicate(conn, data->handle,
 800fd02:	692a      	ldr	r2, [r5, #16]
 800fd04:	88a9      	ldrh	r1, [r5, #4]
 800fd06:	4640      	mov	r0, r8
 800fd08:	f7ff feee 	bl	800fae8 <gatt_indicate>
 800fd0c:	4681      	mov	r9, r0
 800fd0e:	e7cc      	b.n	800fcaa <notify_cb+0xa2>
	return BT_GATT_ITER_CONTINUE;
 800fd10:	2001      	movs	r0, #1
 800fd12:	e782      	b.n	800fc1a <notify_cb+0x12>
			return BT_GATT_ITER_STOP;
 800fd14:	2000      	movs	r0, #0
 800fd16:	e780      	b.n	800fc1a <notify_cb+0x12>
 800fd18:	0800f3f9 	.word	0x0800f3f9
 800fd1c:	20000568 	.word	0x20000568
 800fd20:	20002110 	.word	0x20002110

0800fd24 <ccc_set_direct>:
{
 800fd24:	b570      	push	{r4, r5, r6, lr}
 800fd26:	b082      	sub	sp, #8
 800fd28:	460c      	mov	r4, r1
 800fd2a:	4615      	mov	r5, r2
 800fd2c:	461e      	mov	r6, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
 800fd2e:	aa01      	add	r2, sp, #4
 800fd30:	4910      	ldr	r1, [pc, #64]	; (800fd74 <ccc_set_direct+0x50>)
 800fd32:	9806      	ldr	r0, [sp, #24]
 800fd34:	f007 f8e9 	bl	8016f0a <settings_name_steq>
 800fd38:	b138      	cbz	r0, 800fd4a <ccc_set_direct+0x26>
		return ccc_set(name, len, read_cb, cb_arg);
 800fd3a:	4633      	mov	r3, r6
 800fd3c:	462a      	mov	r2, r5
 800fd3e:	4621      	mov	r1, r4
 800fd40:	9801      	ldr	r0, [sp, #4]
 800fd42:	f009 ff80 	bl	8019c46 <ccc_set>
}
 800fd46:	b002      	add	sp, #8
 800fd48:	bd70      	pop	{r4, r5, r6, pc}
			BT_ERR("Invalid key");
 800fd4a:	f04f 0100 	mov.w	r1, #0
 800fd4e:	2301      	movs	r3, #1
 800fd50:	f363 0102 	bfi	r1, r3, #0, #3
 800fd54:	f36f 01c5 	bfc	r1, #3, #3
 800fd58:	4b07      	ldr	r3, [pc, #28]	; (800fd78 <ccc_set_direct+0x54>)
 800fd5a:	4a08      	ldr	r2, [pc, #32]	; (800fd7c <ccc_set_direct+0x58>)
 800fd5c:	1a9b      	subs	r3, r3, r2
 800fd5e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800fd62:	f363 118f 	bfi	r1, r3, #6, #10
 800fd66:	4806      	ldr	r0, [pc, #24]	; (800fd80 <ccc_set_direct+0x5c>)
 800fd68:	f7f4 fbf0 	bl	800454c <log_0>
			return -EINVAL;
 800fd6c:	f06f 0015 	mvn.w	r0, #21
 800fd70:	e7e9      	b.n	800fd46 <ccc_set_direct+0x22>
 800fd72:	bf00      	nop
 800fd74:	08021290 	.word	0x08021290
 800fd78:	0801d700 	.word	0x0801d700
 800fd7c:	0801d6d0 	.word	0x0801d6d0
 800fd80:	08021298 	.word	0x08021298

0800fd84 <sc_set>:
{
 800fd84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fd88:	b087      	sub	sp, #28
	if (!name) {
 800fd8a:	b348      	cbz	r0, 800fde0 <sc_set+0x5c>
 800fd8c:	460c      	mov	r4, r1
 800fd8e:	4615      	mov	r5, r2
 800fd90:	461e      	mov	r6, r3
 800fd92:	4607      	mov	r7, r0
	err = bt_settings_decode_key(name, &addr);
 800fd94:	a902      	add	r1, sp, #8
 800fd96:	f008 f8fa 	bl	8017f8e <bt_settings_decode_key>
	if (err) {
 800fd9a:	4680      	mov	r8, r0
 800fd9c:	2800      	cmp	r0, #0
 800fd9e:	d133      	bne.n	800fe08 <sc_set+0x84>
	settings_name_next(name, &next);
 800fda0:	a901      	add	r1, sp, #4
 800fda2:	4638      	mov	r0, r7
 800fda4:	f007 f8dc 	bl	8016f60 <settings_name_next>
	if (!next) {
 800fda8:	9801      	ldr	r0, [sp, #4]
 800fdaa:	2800      	cmp	r0, #0
 800fdac:	d045      	beq.n	800fe3a <sc_set+0xb6>
		id = strtol(next, NULL, 10);
 800fdae:	220a      	movs	r2, #10
 800fdb0:	2100      	movs	r1, #0
 800fdb2:	f007 fee7 	bl	8017b84 <strtol>
 800fdb6:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
 800fdb8:	a902      	add	r1, sp, #8
 800fdba:	4638      	mov	r0, r7
 800fdbc:	f7ff faba 	bl	800f334 <find_sc_cfg>
	if (!cfg && len_rd) {
 800fdc0:	4681      	mov	r9, r0
 800fdc2:	2800      	cmp	r0, #0
 800fdc4:	d03b      	beq.n	800fe3e <sc_set+0xba>
	if (len_rd) {
 800fdc6:	2c00      	cmp	r4, #0
 800fdc8:	d072      	beq.n	800feb0 <sc_set+0x12c>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
 800fdca:	2204      	movs	r2, #4
 800fdcc:	f109 0108 	add.w	r1, r9, #8
 800fdd0:	4630      	mov	r0, r6
 800fdd2:	47a8      	blx	r5
		if (len < 0) {
 800fdd4:	1e04      	subs	r4, r0, #0
 800fdd6:	db57      	blt.n	800fe88 <sc_set+0x104>
}
 800fdd8:	4640      	mov	r0, r8
 800fdda:	b007      	add	sp, #28
 800fddc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_ERR("Insufficient number of arguments");
 800fde0:	f04f 0100 	mov.w	r1, #0
 800fde4:	2301      	movs	r3, #1
 800fde6:	f363 0102 	bfi	r1, r3, #0, #3
 800fdea:	f36f 01c5 	bfc	r1, #3, #3
 800fdee:	4b35      	ldr	r3, [pc, #212]	; (800fec4 <sc_set+0x140>)
 800fdf0:	4a35      	ldr	r2, [pc, #212]	; (800fec8 <sc_set+0x144>)
 800fdf2:	1a9b      	subs	r3, r3, r2
 800fdf4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800fdf8:	f363 118f 	bfi	r1, r3, #6, #10
 800fdfc:	4833      	ldr	r0, [pc, #204]	; (800fecc <sc_set+0x148>)
 800fdfe:	f7f4 fba5 	bl	800454c <log_0>
		return -EINVAL;
 800fe02:	f06f 0815 	mvn.w	r8, #21
 800fe06:	e7e7      	b.n	800fdd8 <sc_set+0x54>
		BT_ERR("Unable to decode address %s", log_strdup(name));
 800fe08:	f04f 0400 	mov.w	r4, #0
 800fe0c:	2301      	movs	r3, #1
 800fe0e:	f363 0402 	bfi	r4, r3, #0, #3
 800fe12:	f36f 04c5 	bfc	r4, #3, #3
 800fe16:	4b2b      	ldr	r3, [pc, #172]	; (800fec4 <sc_set+0x140>)
 800fe18:	4a2b      	ldr	r2, [pc, #172]	; (800fec8 <sc_set+0x144>)
 800fe1a:	1a9b      	subs	r3, r3, r2
 800fe1c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800fe20:	f363 148f 	bfi	r4, r3, #6, #10
 800fe24:	4638      	mov	r0, r7
 800fe26:	f7f4 f851 	bl	8003ecc <log_strdup>
 800fe2a:	4601      	mov	r1, r0
 800fe2c:	4622      	mov	r2, r4
 800fe2e:	4828      	ldr	r0, [pc, #160]	; (800fed0 <sc_set+0x14c>)
 800fe30:	f7f4 fa1c 	bl	800426c <log_1>
		return -EINVAL;
 800fe34:	f06f 0815 	mvn.w	r8, #21
 800fe38:	e7ce      	b.n	800fdd8 <sc_set+0x54>
		id = BT_ID_DEFAULT;
 800fe3a:	2700      	movs	r7, #0
 800fe3c:	e7bc      	b.n	800fdb8 <sc_set+0x34>
	if (!cfg && len_rd) {
 800fe3e:	2c00      	cmp	r4, #0
 800fe40:	d0c1      	beq.n	800fdc6 <sc_set+0x42>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
 800fe42:	9004      	str	r0, [sp, #16]
 800fe44:	f8cd 0013 	str.w	r0, [sp, #19]
 800fe48:	a904      	add	r1, sp, #16
 800fe4a:	f7ff fa73 	bl	800f334 <find_sc_cfg>
		if (!cfg) {
 800fe4e:	4681      	mov	r9, r0
 800fe50:	b130      	cbz	r0, 800fe60 <sc_set+0xdc>
		cfg->id = id;
 800fe52:	f800 7b01 	strb.w	r7, [r0], #1
	memcpy(dst, src, sizeof(*dst));
 800fe56:	2207      	movs	r2, #7
 800fe58:	a902      	add	r1, sp, #8
 800fe5a:	f008 f80f 	bl	8017e7c <memcpy>
 800fe5e:	e7b2      	b.n	800fdc6 <sc_set+0x42>
			BT_ERR("Unable to restore SC: no cfg left");
 800fe60:	f04f 0100 	mov.w	r1, #0
 800fe64:	2301      	movs	r3, #1
 800fe66:	f363 0102 	bfi	r1, r3, #0, #3
 800fe6a:	f36f 01c5 	bfc	r1, #3, #3
 800fe6e:	4b15      	ldr	r3, [pc, #84]	; (800fec4 <sc_set+0x140>)
 800fe70:	4a15      	ldr	r2, [pc, #84]	; (800fec8 <sc_set+0x144>)
 800fe72:	1a9b      	subs	r3, r3, r2
 800fe74:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800fe78:	f363 118f 	bfi	r1, r3, #6, #10
 800fe7c:	4815      	ldr	r0, [pc, #84]	; (800fed4 <sc_set+0x150>)
 800fe7e:	f7f4 fb65 	bl	800454c <log_0>
			return -ENOMEM;
 800fe82:	f06f 080b 	mvn.w	r8, #11
 800fe86:	e7a7      	b.n	800fdd8 <sc_set+0x54>
			BT_ERR("Failed to decode value (err %zd)", len);
 800fe88:	f04f 0200 	mov.w	r2, #0
 800fe8c:	2301      	movs	r3, #1
 800fe8e:	f363 0202 	bfi	r2, r3, #0, #3
 800fe92:	f36f 02c5 	bfc	r2, #3, #3
 800fe96:	4b0b      	ldr	r3, [pc, #44]	; (800fec4 <sc_set+0x140>)
 800fe98:	490b      	ldr	r1, [pc, #44]	; (800fec8 <sc_set+0x144>)
 800fe9a:	1a5b      	subs	r3, r3, r1
 800fe9c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800fea0:	f363 128f 	bfi	r2, r3, #6, #10
 800fea4:	4621      	mov	r1, r4
 800fea6:	480c      	ldr	r0, [pc, #48]	; (800fed8 <sc_set+0x154>)
 800fea8:	f7f4 f9e0 	bl	800426c <log_1>
			return len;
 800feac:	46a0      	mov	r8, r4
 800feae:	e793      	b.n	800fdd8 <sc_set+0x54>
	} else if (cfg) {
 800feb0:	f1b9 0f00 	cmp.w	r9, #0
 800feb4:	d090      	beq.n	800fdd8 <sc_set+0x54>
		memset(cfg, 0, sizeof(*cfg));
 800feb6:	220c      	movs	r2, #12
 800feb8:	2100      	movs	r1, #0
 800feba:	4648      	mov	r0, r9
 800febc:	f008 f803 	bl	8017ec6 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
 800fec0:	e78a      	b.n	800fdd8 <sc_set+0x54>
 800fec2:	bf00      	nop
 800fec4:	0801d700 	.word	0x0801d700
 800fec8:	0801d6d0 	.word	0x0801d6d0
 800fecc:	0801fee8 	.word	0x0801fee8
 800fed0:	080212a4 	.word	0x080212a4
 800fed4:	080212c0 	.word	0x080212c0
 800fed8:	0802110c 	.word	0x0802110c

0800fedc <cf_set>:
{
 800fedc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fee0:	b085      	sub	sp, #20
	if (!name) {
 800fee2:	b348      	cbz	r0, 800ff38 <cf_set+0x5c>
 800fee4:	460c      	mov	r4, r1
 800fee6:	4615      	mov	r5, r2
 800fee8:	461e      	mov	r6, r3
 800feea:	4607      	mov	r7, r0
	err = bt_settings_decode_key(name, &addr);
 800feec:	a902      	add	r1, sp, #8
 800feee:	f008 f84e 	bl	8017f8e <bt_settings_decode_key>
	if (err) {
 800fef2:	4680      	mov	r8, r0
 800fef4:	2800      	cmp	r0, #0
 800fef6:	d133      	bne.n	800ff60 <cf_set+0x84>
	settings_name_next(name, &next);
 800fef8:	a901      	add	r1, sp, #4
 800fefa:	4638      	mov	r0, r7
 800fefc:	f007 f830 	bl	8016f60 <settings_name_next>
	if (!next) {
 800ff00:	9801      	ldr	r0, [sp, #4]
 800ff02:	2800      	cmp	r0, #0
 800ff04:	d045      	beq.n	800ff92 <cf_set+0xb6>
		id = strtol(next, NULL, 10);
 800ff06:	220a      	movs	r2, #10
 800ff08:	2100      	movs	r1, #0
 800ff0a:	f007 fe3b 	bl	8017b84 <strtol>
 800ff0e:	b2c7      	uxtb	r7, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
 800ff10:	a902      	add	r1, sp, #8
 800ff12:	4638      	mov	r0, r7
 800ff14:	f7ff fa52 	bl	800f3bc <find_cf_cfg_by_addr>
	if (!cfg) {
 800ff18:	4681      	mov	r9, r0
 800ff1a:	2800      	cmp	r0, #0
 800ff1c:	d03b      	beq.n	800ff96 <cf_set+0xba>
	if (len_rd) {
 800ff1e:	2c00      	cmp	r4, #0
 800ff20:	d06c      	beq.n	800fffc <cf_set+0x120>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
 800ff22:	2201      	movs	r2, #1
 800ff24:	f109 0108 	add.w	r1, r9, #8
 800ff28:	4630      	mov	r0, r6
 800ff2a:	47a8      	blx	r5
		if (len < 0) {
 800ff2c:	1e04      	subs	r4, r0, #0
 800ff2e:	db51      	blt.n	800ffd4 <cf_set+0xf8>
}
 800ff30:	4640      	mov	r0, r8
 800ff32:	b005      	add	sp, #20
 800ff34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_ERR("Insufficient number of arguments");
 800ff38:	f04f 0100 	mov.w	r1, #0
 800ff3c:	2301      	movs	r3, #1
 800ff3e:	f363 0102 	bfi	r1, r3, #0, #3
 800ff42:	f36f 01c5 	bfc	r1, #3, #3
 800ff46:	4b2f      	ldr	r3, [pc, #188]	; (8010004 <cf_set+0x128>)
 800ff48:	4a2f      	ldr	r2, [pc, #188]	; (8010008 <cf_set+0x12c>)
 800ff4a:	1a9b      	subs	r3, r3, r2
 800ff4c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800ff50:	f363 118f 	bfi	r1, r3, #6, #10
 800ff54:	482d      	ldr	r0, [pc, #180]	; (801000c <cf_set+0x130>)
 800ff56:	f7f4 faf9 	bl	800454c <log_0>
		return -EINVAL;
 800ff5a:	f06f 0815 	mvn.w	r8, #21
 800ff5e:	e7e7      	b.n	800ff30 <cf_set+0x54>
		BT_ERR("Unable to decode address %s", log_strdup(name));
 800ff60:	f04f 0400 	mov.w	r4, #0
 800ff64:	2301      	movs	r3, #1
 800ff66:	f363 0402 	bfi	r4, r3, #0, #3
 800ff6a:	f36f 04c5 	bfc	r4, #3, #3
 800ff6e:	4b25      	ldr	r3, [pc, #148]	; (8010004 <cf_set+0x128>)
 800ff70:	4a25      	ldr	r2, [pc, #148]	; (8010008 <cf_set+0x12c>)
 800ff72:	1a9b      	subs	r3, r3, r2
 800ff74:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800ff78:	f363 148f 	bfi	r4, r3, #6, #10
 800ff7c:	4638      	mov	r0, r7
 800ff7e:	f7f3 ffa5 	bl	8003ecc <log_strdup>
 800ff82:	4601      	mov	r1, r0
 800ff84:	4622      	mov	r2, r4
 800ff86:	4822      	ldr	r0, [pc, #136]	; (8010010 <cf_set+0x134>)
 800ff88:	f7f4 f970 	bl	800426c <log_1>
		return -EINVAL;
 800ff8c:	f06f 0815 	mvn.w	r8, #21
 800ff90:	e7ce      	b.n	800ff30 <cf_set+0x54>
		id = BT_ID_DEFAULT;
 800ff92:	2700      	movs	r7, #0
 800ff94:	e7bc      	b.n	800ff10 <cf_set+0x34>
		cfg = find_cf_cfg(NULL);
 800ff96:	f7ff f9a3 	bl	800f2e0 <find_cf_cfg>
		if (!cfg) {
 800ff9a:	4681      	mov	r9, r0
 800ff9c:	b130      	cbz	r0, 800ffac <cf_set+0xd0>
		cfg->id = id;
 800ff9e:	f800 7b01 	strb.w	r7, [r0], #1
 800ffa2:	2207      	movs	r2, #7
 800ffa4:	a902      	add	r1, sp, #8
 800ffa6:	f007 ff69 	bl	8017e7c <memcpy>
}
 800ffaa:	e7b8      	b.n	800ff1e <cf_set+0x42>
			BT_ERR("Unable to restore CF: no cfg left");
 800ffac:	f04f 0100 	mov.w	r1, #0
 800ffb0:	2301      	movs	r3, #1
 800ffb2:	f363 0102 	bfi	r1, r3, #0, #3
 800ffb6:	f36f 01c5 	bfc	r1, #3, #3
 800ffba:	4b12      	ldr	r3, [pc, #72]	; (8010004 <cf_set+0x128>)
 800ffbc:	4a12      	ldr	r2, [pc, #72]	; (8010008 <cf_set+0x12c>)
 800ffbe:	1a9b      	subs	r3, r3, r2
 800ffc0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800ffc4:	f363 118f 	bfi	r1, r3, #6, #10
 800ffc8:	4812      	ldr	r0, [pc, #72]	; (8010014 <cf_set+0x138>)
 800ffca:	f7f4 fabf 	bl	800454c <log_0>
			return -ENOMEM;
 800ffce:	f06f 080b 	mvn.w	r8, #11
 800ffd2:	e7ad      	b.n	800ff30 <cf_set+0x54>
			BT_ERR("Failed to decode value (err %zd)", len);
 800ffd4:	f04f 0200 	mov.w	r2, #0
 800ffd8:	2301      	movs	r3, #1
 800ffda:	f363 0202 	bfi	r2, r3, #0, #3
 800ffde:	f36f 02c5 	bfc	r2, #3, #3
 800ffe2:	4b08      	ldr	r3, [pc, #32]	; (8010004 <cf_set+0x128>)
 800ffe4:	4908      	ldr	r1, [pc, #32]	; (8010008 <cf_set+0x12c>)
 800ffe6:	1a5b      	subs	r3, r3, r1
 800ffe8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800ffec:	f363 128f 	bfi	r2, r3, #6, #10
 800fff0:	4621      	mov	r1, r4
 800fff2:	4809      	ldr	r0, [pc, #36]	; (8010018 <cf_set+0x13c>)
 800fff4:	f7f4 f93a 	bl	800426c <log_1>
			return len;
 800fff8:	46a0      	mov	r8, r4
 800fffa:	e799      	b.n	800ff30 <cf_set+0x54>
		clear_cf_cfg(cfg);
 800fffc:	4648      	mov	r0, r9
 800fffe:	f009 ff52 	bl	8019ea6 <clear_cf_cfg>
 8010002:	e795      	b.n	800ff30 <cf_set+0x54>
 8010004:	0801d700 	.word	0x0801d700
 8010008:	0801d6d0 	.word	0x0801d6d0
 801000c:	0801fee8 	.word	0x0801fee8
 8010010:	080212a4 	.word	0x080212a4
 8010014:	080212e4 	.word	0x080212e4
 8010018:	0802110c 	.word	0x0802110c

0801001c <bt_gatt_clear_cf>:

	return 0;
}

static int bt_gatt_clear_cf(uint8_t id, const bt_addr_le_t *addr)
{
 801001c:	b570      	push	{r4, r5, r6, lr}
 801001e:	b08c      	sub	sp, #48	; 0x30
 8010020:	4604      	mov	r4, r0
 8010022:	460d      	mov	r5, r1
	struct gatt_cf_cfg *cfg;

	cfg = find_cf_cfg_by_addr(id, addr);
 8010024:	f7ff f9ca 	bl	800f3bc <find_cf_cfg_by_addr>
	if (cfg) {
 8010028:	b108      	cbz	r0, 801002e <bt_gatt_clear_cf+0x12>
		clear_cf_cfg(cfg);
 801002a:	f009 ff3c 	bl	8019ea6 <clear_cf_cfg>
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		char key[BT_SETTINGS_KEY_MAX];

		if (id) {
 801002e:	b18c      	cbz	r4, 8010054 <bt_gatt_clear_cf+0x38>
			char id_str[4];

			u8_to_dec(id_str, sizeof(id_str), id);
 8010030:	ae02      	add	r6, sp, #8
 8010032:	4622      	mov	r2, r4
 8010034:	2104      	movs	r1, #4
 8010036:	4630      	mov	r0, r6
 8010038:	f7f2 ff52 	bl	8002ee0 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
 801003c:	9600      	str	r6, [sp, #0]
 801003e:	462b      	mov	r3, r5
 8010040:	4a09      	ldr	r2, [pc, #36]	; (8010068 <bt_gatt_clear_cf+0x4c>)
 8010042:	2124      	movs	r1, #36	; 0x24
 8010044:	a803      	add	r0, sp, #12
 8010046:	f7f9 fd07 	bl	8009a58 <bt_settings_encode_key>
		} else {
			bt_settings_encode_key(key, sizeof(key), "cf",
					       addr, NULL);
		}

		return settings_delete(key);
 801004a:	a803      	add	r0, sp, #12
 801004c:	f006 ff57 	bl	8016efe <settings_delete>
	}

	return 0;

}
 8010050:	b00c      	add	sp, #48	; 0x30
 8010052:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "cf",
 8010054:	2300      	movs	r3, #0
 8010056:	9300      	str	r3, [sp, #0]
 8010058:	462b      	mov	r3, r5
 801005a:	4a03      	ldr	r2, [pc, #12]	; (8010068 <bt_gatt_clear_cf+0x4c>)
 801005c:	2124      	movs	r1, #36	; 0x24
 801005e:	a803      	add	r0, sp, #12
 8010060:	f7f9 fcfa 	bl	8009a58 <bt_settings_encode_key>
 8010064:	e7f1      	b.n	801004a <bt_gatt_clear_cf+0x2e>
 8010066:	bf00      	nop
 8010068:	080211b8 	.word	0x080211b8

0801006c <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 801006c:	4b1d      	ldr	r3, [pc, #116]	; (80100e4 <bt_gatt_init+0x78>)
 801006e:	2201      	movs	r2, #1
 8010070:	f3bf 8f5b 	dmb	ish
 8010074:	e853 1f00 	ldrex	r1, [r3]
 8010078:	2900      	cmp	r1, #0
 801007a:	d103      	bne.n	8010084 <bt_gatt_init+0x18>
 801007c:	e843 2000 	strex	r0, r2, [r3]
 8010080:	2800      	cmp	r0, #0
 8010082:	d1f7      	bne.n	8010074 <bt_gatt_init+0x8>
 8010084:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
 8010088:	d102      	bne.n	8010090 <bt_gatt_init+0x24>
{
 801008a:	b510      	push	{r4, lr}
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
 801008c:	4b16      	ldr	r3, [pc, #88]	; (80100e8 <bt_gatt_init+0x7c>)
 801008e:	e006      	b.n	801009e <bt_gatt_init+0x32>
 8010090:	4770      	bx	lr
		last_static_handle += svc->attr_count;
 8010092:	685a      	ldr	r2, [r3, #4]
 8010094:	4915      	ldr	r1, [pc, #84]	; (80100ec <bt_gatt_init+0x80>)
 8010096:	8808      	ldrh	r0, [r1, #0]
 8010098:	4402      	add	r2, r0
 801009a:	800a      	strh	r2, [r1, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
 801009c:	3308      	adds	r3, #8
 801009e:	4a14      	ldr	r2, [pc, #80]	; (80100f0 <bt_gatt_init+0x84>)
 80100a0:	4293      	cmp	r3, r2
 80100a2:	d3f6      	bcc.n	8010092 <bt_gatt_init+0x26>
	k_delayed_work_init(&db_hash_work, db_hash_process);
 80100a4:	4c13      	ldr	r4, [pc, #76]	; (80100f4 <bt_gatt_init+0x88>)
 80100a6:	4914      	ldr	r1, [pc, #80]	; (80100f8 <bt_gatt_init+0x8c>)
 80100a8:	4620      	mov	r0, r4
 80100aa:	f00c ff3d 	bl	801cf28 <k_delayed_work_init>
 80100ae:	2264      	movs	r2, #100	; 0x64
 80100b0:	2300      	movs	r3, #0
 80100b2:	4621      	mov	r1, r4
 80100b4:	4811      	ldr	r0, [pc, #68]	; (80100fc <bt_gatt_init+0x90>)
 80100b6:	f004 facf 	bl	8014658 <k_delayed_work_submit_to_queue>
		k_delayed_work_init(&gatt_sc.work, sc_process);
 80100ba:	4c11      	ldr	r4, [pc, #68]	; (8010100 <bt_gatt_init+0x94>)
 80100bc:	4911      	ldr	r1, [pc, #68]	; (8010104 <bt_gatt_init+0x98>)
 80100be:	f104 0018 	add.w	r0, r4, #24
 80100c2:	f00c ff31 	bl	801cf28 <k_delayed_work_init>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 80100c6:	3448      	adds	r4, #72	; 0x48
 80100c8:	f3bf 8f5b 	dmb	ish
 80100cc:	e854 3f00 	ldrex	r3, [r4]
 80100d0:	f043 0302 	orr.w	r3, r3, #2
 80100d4:	e844 3200 	strex	r2, r3, [r4]
 80100d8:	2a00      	cmp	r2, #0
 80100da:	d1f7      	bne.n	80100cc <bt_gatt_init+0x60>
 80100dc:	f3bf 8f5b 	dmb	ish
}
 80100e0:	bd10      	pop	{r4, pc}
 80100e2:	bf00      	nop
 80100e4:	2000210c 	.word	0x2000210c
 80100e8:	0801d628 	.word	0x0801d628
 80100ec:	200034f0 	.word	0x200034f0
 80100f0:	0801d658 	.word	0x0801d658
 80100f4:	20001040 	.word	0x20001040
 80100f8:	0801a107 	.word	0x0801a107
 80100fc:	20001408 	.word	0x20001408
 8010100:	20001070 	.word	0x20001070
 8010104:	080105ad 	.word	0x080105ad

08010108 <bt_gatt_attr_get_handle>:
	if (!attr) {
 8010108:	b328      	cbz	r0, 8010156 <bt_gatt_attr_get_handle+0x4e>
{
 801010a:	b4f0      	push	{r4, r5, r6, r7}
 801010c:	4606      	mov	r6, r0
	if (attr->handle) {
 801010e:	8a00      	ldrh	r0, [r0, #16]
 8010110:	bb20      	cbnz	r0, 801015c <bt_gatt_attr_get_handle+0x54>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
 8010112:	4d13      	ldr	r5, [pc, #76]	; (8010160 <bt_gatt_attr_get_handle+0x58>)
	uint16_t handle = 1;
 8010114:	2201      	movs	r2, #1
 8010116:	e003      	b.n	8010120 <bt_gatt_attr_get_handle+0x18>
			handle += static_svc->attr_count;
 8010118:	686b      	ldr	r3, [r5, #4]
 801011a:	441a      	add	r2, r3
 801011c:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
 801011e:	3508      	adds	r5, #8
 8010120:	4b10      	ldr	r3, [pc, #64]	; (8010164 <bt_gatt_attr_get_handle+0x5c>)
 8010122:	429d      	cmp	r5, r3
 8010124:	d21a      	bcs.n	801015c <bt_gatt_attr_get_handle+0x54>
		if ((attr < &static_svc->attrs[0]) ||
 8010126:	682c      	ldr	r4, [r5, #0]
 8010128:	42b4      	cmp	r4, r6
 801012a:	d8f5      	bhi.n	8010118 <bt_gatt_attr_get_handle+0x10>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
 801012c:	686f      	ldr	r7, [r5, #4]
 801012e:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 8010132:	009b      	lsls	r3, r3, #2
 8010134:	3b14      	subs	r3, #20
 8010136:	4423      	add	r3, r4
		if ((attr < &static_svc->attrs[0]) ||
 8010138:	42b3      	cmp	r3, r6
 801013a:	d3ed      	bcc.n	8010118 <bt_gatt_attr_get_handle+0x10>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
 801013c:	2300      	movs	r3, #0
 801013e:	429f      	cmp	r7, r3
 8010140:	d9ed      	bls.n	801011e <bt_gatt_attr_get_handle+0x16>
			if (attr == &static_svc->attrs[i]) {
 8010142:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8010146:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801014a:	42b1      	cmp	r1, r6
 801014c:	d005      	beq.n	801015a <bt_gatt_attr_get_handle+0x52>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
 801014e:	3301      	adds	r3, #1
 8010150:	3201      	adds	r2, #1
 8010152:	b292      	uxth	r2, r2
 8010154:	e7f3      	b.n	801013e <bt_gatt_attr_get_handle+0x36>
		return 0;
 8010156:	2000      	movs	r0, #0
}
 8010158:	4770      	bx	lr
				return handle;
 801015a:	4610      	mov	r0, r2
}
 801015c:	bcf0      	pop	{r4, r5, r6, r7}
 801015e:	4770      	bx	lr
 8010160:	0801d628 	.word	0x0801d628
 8010164:	0801d658 	.word	0x0801d658

08010168 <bt_gatt_attr_value_handle>:
	if ((attr != NULL)
 8010168:	b188      	cbz	r0, 801018e <bt_gatt_attr_value_handle+0x26>
{
 801016a:	b508      	push	{r3, lr}
 801016c:	4603      	mov	r3, r0
	    && (attr->read == bt_gatt_attr_read_chrc)) {
 801016e:	6841      	ldr	r1, [r0, #4]
 8010170:	4a08      	ldr	r2, [pc, #32]	; (8010194 <bt_gatt_attr_value_handle+0x2c>)
 8010172:	4291      	cmp	r1, r2
 8010174:	d001      	beq.n	801017a <bt_gatt_attr_value_handle+0x12>
	uint16_t handle = 0;
 8010176:	2000      	movs	r0, #0
}
 8010178:	bd08      	pop	{r3, pc}
		struct bt_gatt_chrc *chrc = attr->user_data;
 801017a:	68c2      	ldr	r2, [r0, #12]
		handle = chrc->value_handle;
 801017c:	8890      	ldrh	r0, [r2, #4]
		if (handle == 0) {
 801017e:	2800      	cmp	r0, #0
 8010180:	d1fa      	bne.n	8010178 <bt_gatt_attr_value_handle+0x10>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
 8010182:	4618      	mov	r0, r3
 8010184:	f7ff ffc0 	bl	8010108 <bt_gatt_attr_get_handle>
 8010188:	3001      	adds	r0, #1
 801018a:	b280      	uxth	r0, r0
 801018c:	e7f4      	b.n	8010178 <bt_gatt_attr_value_handle+0x10>
	uint16_t handle = 0;
 801018e:	2000      	movs	r0, #0
}
 8010190:	4770      	bx	lr
 8010192:	bf00      	nop
 8010194:	0801a0a5 	.word	0x0801a0a5

08010198 <bt_gatt_foreach_attr_type>:
{
 8010198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801019c:	b089      	sub	sp, #36	; 0x24
 801019e:	4607      	mov	r7, r0
 80101a0:	468a      	mov	sl, r1
 80101a2:	4690      	mov	r8, r2
 80101a4:	4699      	mov	r9, r3
 80101a6:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
	if (!num_matches) {
 80101aa:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80101ae:	b91b      	cbnz	r3, 80101b8 <bt_gatt_foreach_attr_type+0x20>
		num_matches = UINT16_MAX;
 80101b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80101b4:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
	if (start_handle <= last_static_handle) {
 80101b8:	4b19      	ldr	r3, [pc, #100]	; (8010220 <bt_gatt_foreach_attr_type+0x88>)
 80101ba:	881b      	ldrh	r3, [r3, #0]
 80101bc:	42bb      	cmp	r3, r7
 80101be:	d22c      	bcs.n	801021a <bt_gatt_foreach_attr_type+0x82>
}
 80101c0:	b009      	add	sp, #36	; 0x24
 80101c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				handle += static_svc->attr_count;
 80101c6:	b294      	uxth	r4, r2
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
 80101c8:	3608      	adds	r6, #8
 80101ca:	4b16      	ldr	r3, [pc, #88]	; (8010224 <bt_gatt_foreach_attr_type+0x8c>)
 80101cc:	429e      	cmp	r6, r3
 80101ce:	d2f7      	bcs.n	80101c0 <bt_gatt_foreach_attr_type+0x28>
			if (handle + static_svc->attr_count < start_handle) {
 80101d0:	6873      	ldr	r3, [r6, #4]
 80101d2:	18e2      	adds	r2, r4, r3
 80101d4:	42ba      	cmp	r2, r7
 80101d6:	d3f6      	bcc.n	80101c6 <bt_gatt_foreach_attr_type+0x2e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
 80101d8:	2500      	movs	r5, #0
 80101da:	9707      	str	r7, [sp, #28]
 80101dc:	6873      	ldr	r3, [r6, #4]
 80101de:	42ab      	cmp	r3, r5
 80101e0:	d919      	bls.n	8010216 <bt_gatt_foreach_attr_type+0x7e>
				if (gatt_foreach_iter(&static_svc->attrs[i],
 80101e2:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 80101e6:	f8cd b010 	str.w	fp, [sp, #16]
 80101ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80101ec:	9303      	str	r3, [sp, #12]
 80101ee:	ab12      	add	r3, sp, #72	; 0x48
 80101f0:	9302      	str	r3, [sp, #8]
 80101f2:	f8cd 9004 	str.w	r9, [sp, #4]
 80101f6:	f8cd 8000 	str.w	r8, [sp]
 80101fa:	4653      	mov	r3, sl
 80101fc:	9a07      	ldr	r2, [sp, #28]
 80101fe:	4621      	mov	r1, r4
 8010200:	6837      	ldr	r7, [r6, #0]
 8010202:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8010206:	f009 fe23 	bl	8019e50 <gatt_foreach_iter>
 801020a:	2800      	cmp	r0, #0
 801020c:	d0d8      	beq.n	80101c0 <bt_gatt_foreach_attr_type+0x28>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
 801020e:	3501      	adds	r5, #1
 8010210:	3401      	adds	r4, #1
 8010212:	b2a4      	uxth	r4, r4
 8010214:	e7e2      	b.n	80101dc <bt_gatt_foreach_attr_type+0x44>
 8010216:	9f07      	ldr	r7, [sp, #28]
 8010218:	e7d6      	b.n	80101c8 <bt_gatt_foreach_attr_type+0x30>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
 801021a:	4e03      	ldr	r6, [pc, #12]	; (8010228 <bt_gatt_foreach_attr_type+0x90>)
		uint16_t handle = 1;
 801021c:	2401      	movs	r4, #1
 801021e:	e7d4      	b.n	80101ca <bt_gatt_foreach_attr_type+0x32>
 8010220:	200034f0 	.word	0x200034f0
 8010224:	0801d658 	.word	0x0801d658
 8010228:	0801d628 	.word	0x0801d628

0801022c <db_hash_gen>:
{
 801022c:	b570      	push	{r4, r5, r6, lr}
 801022e:	b0cc      	sub	sp, #304	; 0x130
 8010230:	4606      	mov	r6, r0
	uint8_t key[16] = {};
 8010232:	2300      	movs	r3, #0
 8010234:	9348      	str	r3, [sp, #288]	; 0x120
 8010236:	9349      	str	r3, [sp, #292]	; 0x124
 8010238:	934a      	str	r3, [sp, #296]	; 0x128
 801023a:	934b      	str	r3, [sp, #300]	; 0x12c
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
 801023c:	aa1c      	add	r2, sp, #112	; 0x70
 801023e:	a948      	add	r1, sp, #288	; 0x120
 8010240:	a804      	add	r0, sp, #16
 8010242:	f007 f934 	bl	80174ae <tc_cmac_setup>
 8010246:	b190      	cbz	r0, 801026e <db_hash_gen+0x42>
 8010248:	ac04      	add	r4, sp, #16
 801024a:	9402      	str	r4, [sp, #8]
 801024c:	4b22      	ldr	r3, [pc, #136]	; (80102d8 <db_hash_gen+0xac>)
 801024e:	9301      	str	r3, [sp, #4]
 8010250:	2200      	movs	r2, #0
 8010252:	9200      	str	r2, [sp, #0]
 8010254:	4613      	mov	r3, r2
 8010256:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801025a:	2001      	movs	r0, #1
 801025c:	f7ff ff9c 	bl	8010198 <bt_gatt_foreach_attr_type>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
 8010260:	4621      	mov	r1, r4
 8010262:	481e      	ldr	r0, [pc, #120]	; (80102dc <db_hash_gen+0xb0>)
 8010264:	f007 f9be 	bl	80175e4 <tc_cmac_final>
 8010268:	b198      	cbz	r0, 8010292 <db_hash_gen+0x66>
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
 801026a:	2300      	movs	r3, #0
 801026c:	e02b      	b.n	80102c6 <db_hash_gen+0x9a>
		BT_ERR("Unable to setup AES CMAC");
 801026e:	f04f 0100 	mov.w	r1, #0
 8010272:	2301      	movs	r3, #1
 8010274:	f363 0102 	bfi	r1, r3, #0, #3
 8010278:	f36f 01c5 	bfc	r1, #3, #3
 801027c:	4b18      	ldr	r3, [pc, #96]	; (80102e0 <db_hash_gen+0xb4>)
 801027e:	4a19      	ldr	r2, [pc, #100]	; (80102e4 <db_hash_gen+0xb8>)
 8010280:	1a9b      	subs	r3, r3, r2
 8010282:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8010286:	f363 118f 	bfi	r1, r3, #6, #10
 801028a:	4817      	ldr	r0, [pc, #92]	; (80102e8 <db_hash_gen+0xbc>)
 801028c:	f7f4 f95e 	bl	800454c <log_0>
		return;
 8010290:	e01c      	b.n	80102cc <db_hash_gen+0xa0>
		BT_ERR("Unable to calculate hash");
 8010292:	f04f 0100 	mov.w	r1, #0
 8010296:	2301      	movs	r3, #1
 8010298:	f363 0102 	bfi	r1, r3, #0, #3
 801029c:	f36f 01c5 	bfc	r1, #3, #3
 80102a0:	4b0f      	ldr	r3, [pc, #60]	; (80102e0 <db_hash_gen+0xb4>)
 80102a2:	4a10      	ldr	r2, [pc, #64]	; (80102e4 <db_hash_gen+0xb8>)
 80102a4:	1a9b      	subs	r3, r3, r2
 80102a6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80102aa:	f363 118f 	bfi	r1, r3, #6, #10
 80102ae:	480f      	ldr	r0, [pc, #60]	; (80102ec <db_hash_gen+0xc0>)
 80102b0:	f7f4 f94c 	bl	800454c <log_0>
		return;
 80102b4:	e00a      	b.n	80102cc <db_hash_gen+0xa0>
		uint8_t tmp = ((uint8_t *)buf)[i];
 80102b6:	4a09      	ldr	r2, [pc, #36]	; (80102dc <db_hash_gen+0xb0>)
 80102b8:	5cd4      	ldrb	r4, [r2, r3]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
 80102ba:	f1c3 010f 	rsb	r1, r3, #15
 80102be:	5c55      	ldrb	r5, [r2, r1]
 80102c0:	54d5      	strb	r5, [r2, r3]
		((uint8_t *)buf)[length - 1 - i] = tmp;
 80102c2:	5454      	strb	r4, [r2, r1]
	for (i = 0; i < (length/2); i++) {
 80102c4:	3301      	adds	r3, #1
 80102c6:	2b07      	cmp	r3, #7
 80102c8:	d9f5      	bls.n	80102b6 <db_hash_gen+0x8a>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
 80102ca:	b90e      	cbnz	r6, 80102d0 <db_hash_gen+0xa4>
}
 80102cc:	b04c      	add	sp, #304	; 0x130
 80102ce:	bd70      	pop	{r4, r5, r6, pc}
		db_hash_store();
 80102d0:	f7fe ffba 	bl	800f248 <db_hash_store>
 80102d4:	e7fa      	b.n	80102cc <db_hash_gen+0xa0>
 80102d6:	bf00      	nop
 80102d8:	08019c4b 	.word	0x08019c4b
 80102dc:	200020fc 	.word	0x200020fc
 80102e0:	0801d700 	.word	0x0801d700
 80102e4:	0801d6d0 	.word	0x0801d6d0
 80102e8:	08021308 	.word	0x08021308
 80102ec:	08021324 	.word	0x08021324

080102f0 <db_hash_commit>:
{
 80102f0:	b510      	push	{r4, lr}
	err = k_delayed_work_cancel(&db_hash_work);
 80102f2:	4814      	ldr	r0, [pc, #80]	; (8010344 <db_hash_commit+0x54>)
 80102f4:	f00c fe20 	bl	801cf38 <k_delayed_work_cancel>
	if (!err) {
 80102f8:	b168      	cbz	r0, 8010316 <db_hash_commit+0x26>
	if (!memcmp(stored_hash, db_hash, sizeof(stored_hash))) {
 80102fa:	2210      	movs	r2, #16
 80102fc:	4912      	ldr	r1, [pc, #72]	; (8010348 <db_hash_commit+0x58>)
 80102fe:	4813      	ldr	r0, [pc, #76]	; (801034c <db_hash_commit+0x5c>)
 8010300:	f007 fda4 	bl	8017e4c <memcmp>
 8010304:	b150      	cbz	r0, 801031c <db_hash_commit+0x2c>
	sc_indicate(0x0001, 0xffff);
 8010306:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801030a:	2001      	movs	r0, #1
 801030c:	f7ff fb0a 	bl	800f924 <sc_indicate>
	db_hash_store();
 8010310:	f7fe ff9a 	bl	800f248 <db_hash_store>
	return 0;
 8010314:	e014      	b.n	8010340 <db_hash_commit+0x50>
		db_hash_gen(false);
 8010316:	f7ff ff89 	bl	801022c <db_hash_gen>
 801031a:	e7ee      	b.n	80102fa <db_hash_commit+0xa>
		k_delayed_work_cancel(&gatt_sc.work);
 801031c:	4c0c      	ldr	r4, [pc, #48]	; (8010350 <db_hash_commit+0x60>)
 801031e:	f104 0018 	add.w	r0, r4, #24
 8010322:	f00c fe09 	bl	801cf38 <k_delayed_work_cancel>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8010326:	3448      	adds	r4, #72	; 0x48
 8010328:	f3bf 8f5b 	dmb	ish
 801032c:	e854 3f00 	ldrex	r3, [r4]
 8010330:	f023 0301 	bic.w	r3, r3, #1
 8010334:	e844 3200 	strex	r2, r3, [r4]
 8010338:	2a00      	cmp	r2, #0
 801033a:	d1f7      	bne.n	801032c <db_hash_commit+0x3c>
 801033c:	f3bf 8f5b 	dmb	ish
}
 8010340:	2000      	movs	r0, #0
 8010342:	bd10      	pop	{r4, pc}
 8010344:	20001040 	.word	0x20001040
 8010348:	200020fc 	.word	0x200020fc
 801034c:	2000213c 	.word	0x2000213c
 8010350:	20001070 	.word	0x20001070

08010354 <bt_gatt_clear_ccc>:
{
 8010354:	b570      	push	{r4, r5, r6, lr}
 8010356:	b090      	sub	sp, #64	; 0x40
 8010358:	4604      	mov	r4, r0
 801035a:	460d      	mov	r5, r1
	struct addr_with_id addr_with_id = {
 801035c:	910e      	str	r1, [sp, #56]	; 0x38
 801035e:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
 8010362:	ab0e      	add	r3, sp, #56	; 0x38
 8010364:	9302      	str	r3, [sp, #8]
 8010366:	4b13      	ldr	r3, [pc, #76]	; (80103b4 <bt_gatt_clear_ccc+0x60>)
 8010368:	9301      	str	r3, [sp, #4]
 801036a:	2200      	movs	r2, #0
 801036c:	9200      	str	r2, [sp, #0]
 801036e:	4613      	mov	r3, r2
 8010370:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010374:	2001      	movs	r0, #1
 8010376:	f7ff ff0f 	bl	8010198 <bt_gatt_foreach_attr_type>
		if (id) {
 801037a:	b18c      	cbz	r4, 80103a0 <bt_gatt_clear_ccc+0x4c>
			u8_to_dec(id_str, sizeof(id_str), id);
 801037c:	ae04      	add	r6, sp, #16
 801037e:	4622      	mov	r2, r4
 8010380:	2104      	movs	r1, #4
 8010382:	4630      	mov	r0, r6
 8010384:	f7f2 fdac 	bl	8002ee0 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
 8010388:	9600      	str	r6, [sp, #0]
 801038a:	462b      	mov	r3, r5
 801038c:	4a0a      	ldr	r2, [pc, #40]	; (80103b8 <bt_gatt_clear_ccc+0x64>)
 801038e:	2124      	movs	r1, #36	; 0x24
 8010390:	a805      	add	r0, sp, #20
 8010392:	f7f9 fb61 	bl	8009a58 <bt_settings_encode_key>
		return settings_delete(key);
 8010396:	a805      	add	r0, sp, #20
 8010398:	f006 fdb1 	bl	8016efe <settings_delete>
}
 801039c:	b010      	add	sp, #64	; 0x40
 801039e:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
 80103a0:	2300      	movs	r3, #0
 80103a2:	9300      	str	r3, [sp, #0]
 80103a4:	462b      	mov	r3, r5
 80103a6:	4a04      	ldr	r2, [pc, #16]	; (80103b8 <bt_gatt_clear_ccc+0x64>)
 80103a8:	2124      	movs	r1, #36	; 0x24
 80103aa:	a805      	add	r0, sp, #20
 80103ac:	f7f9 fb54 	bl	8009a58 <bt_settings_encode_key>
 80103b0:	e7f1      	b.n	8010396 <bt_gatt_clear_ccc+0x42>
 80103b2:	bf00      	nop
 80103b4:	0800f82d 	.word	0x0800f82d
 80103b8:	08021340 	.word	0x08021340

080103bc <gatt_find_by_uuid>:
{
 80103bc:	b510      	push	{r4, lr}
 80103be:	b084      	sub	sp, #16
 80103c0:	4604      	mov	r4, r0
 80103c2:	460a      	mov	r2, r1
	found->attr = NULL;
 80103c4:	2300      	movs	r3, #0
 80103c6:	6003      	str	r3, [r0, #0]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
 80103c8:	9002      	str	r0, [sp, #8]
 80103ca:	4907      	ldr	r1, [pc, #28]	; (80103e8 <gatt_find_by_uuid+0x2c>)
 80103cc:	9101      	str	r1, [sp, #4]
 80103ce:	2101      	movs	r1, #1
 80103d0:	9100      	str	r1, [sp, #0]
 80103d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80103d6:	8880      	ldrh	r0, [r0, #4]
 80103d8:	f7ff fede 	bl	8010198 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
 80103dc:	6820      	ldr	r0, [r4, #0]
}
 80103de:	3800      	subs	r0, #0
 80103e0:	bf18      	it	ne
 80103e2:	2001      	movne	r0, #1
 80103e4:	b004      	add	sp, #16
 80103e6:	bd10      	pop	{r4, pc}
 80103e8:	08019c3f 	.word	0x08019c3f

080103ec <bt_gatt_notify_cb>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80103ec:	f3bf 8f5b 	dmb	ish
 80103f0:	4b34      	ldr	r3, [pc, #208]	; (80104c4 <bt_gatt_notify_cb+0xd8>)
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
 80103f8:	f013 0f02 	tst.w	r3, #2
 80103fc:	d055      	beq.n	80104aa <bt_gatt_notify_cb+0xbe>
{
 80103fe:	b530      	push	{r4, r5, lr}
 8010400:	b08d      	sub	sp, #52	; 0x34
 8010402:	4604      	mov	r4, r0
 8010404:	460d      	mov	r5, r1
	data.attr = params->attr;
 8010406:	6848      	ldr	r0, [r1, #4]
 8010408:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
 801040a:	b114      	cbz	r4, 8010412 <bt_gatt_notify_cb+0x26>
 801040c:	7b63      	ldrb	r3, [r4, #13]
 801040e:	2b07      	cmp	r3, #7
 8010410:	d14e      	bne.n	80104b0 <bt_gatt_notify_cb+0xc4>
	data.handle = bt_gatt_attr_get_handle(data.attr);
 8010412:	f7ff fe79 	bl	8010108 <bt_gatt_attr_get_handle>
 8010416:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
 801041a:	2800      	cmp	r0, #0
 801041c:	d04b      	beq.n	80104b6 <bt_gatt_notify_cb+0xca>
	if (params->uuid) {
 801041e:	6829      	ldr	r1, [r5, #0]
 8010420:	b121      	cbz	r1, 801042c <bt_gatt_notify_cb+0x40>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
 8010422:	a805      	add	r0, sp, #20
 8010424:	f7ff ffca 	bl	80103bc <gatt_find_by_uuid>
 8010428:	2800      	cmp	r0, #0
 801042a:	d047      	beq.n	80104bc <bt_gatt_notify_cb+0xd0>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
 801042c:	9b05      	ldr	r3, [sp, #20]
 801042e:	6818      	ldr	r0, [r3, #0]
 8010430:	2300      	movs	r3, #0
 8010432:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8010436:	f642 0303 	movw	r3, #10243	; 0x2803
 801043a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801043e:	a90b      	add	r1, sp, #44	; 0x2c
 8010440:	f007 fde2 	bl	8018008 <bt_uuid_cmp>
 8010444:	b948      	cbnz	r0, 801045a <bt_gatt_notify_cb+0x6e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
 8010446:	9805      	ldr	r0, [sp, #20]
 8010448:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
 801044a:	799b      	ldrb	r3, [r3, #6]
 801044c:	f013 0f10 	tst.w	r3, #16
 8010450:	d00c      	beq.n	801046c <bt_gatt_notify_cb+0x80>
		data.handle = bt_gatt_attr_value_handle(data.attr);
 8010452:	f7ff fe89 	bl	8010168 <bt_gatt_attr_value_handle>
 8010456:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
 801045a:	b154      	cbz	r4, 8010472 <bt_gatt_notify_cb+0x86>
		return gatt_notify(conn, data.handle, params);
 801045c:	462a      	mov	r2, r5
 801045e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8010462:	4620      	mov	r0, r4
 8010464:	f7ff fb90 	bl	800fb88 <gatt_notify>
}
 8010468:	b00d      	add	sp, #52	; 0x34
 801046a:	bd30      	pop	{r4, r5, pc}
			return -EINVAL;
 801046c:	f06f 0015 	mvn.w	r0, #21
 8010470:	e7fa      	b.n	8010468 <bt_gatt_notify_cb+0x7c>
	data.err = -ENOTCONN;
 8010472:	f06f 0338 	mvn.w	r3, #56	; 0x38
 8010476:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
 8010478:	2201      	movs	r2, #1
 801047a:	f8ad 2020 	strh.w	r2, [sp, #32]
	data.nfy_params = params;
 801047e:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
 8010480:	2300      	movs	r3, #0
 8010482:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8010486:	f642 1102 	movw	r1, #10498	; 0x2902
 801048a:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
 801048e:	a905      	add	r1, sp, #20
 8010490:	9102      	str	r1, [sp, #8]
 8010492:	490d      	ldr	r1, [pc, #52]	; (80104c8 <bt_gatt_notify_cb+0xdc>)
 8010494:	9101      	str	r1, [sp, #4]
 8010496:	9200      	str	r2, [sp, #0]
 8010498:	aa0a      	add	r2, sp, #40	; 0x28
 801049a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801049e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 80104a2:	f7ff fe79 	bl	8010198 <bt_gatt_foreach_attr_type>
	return data.err;
 80104a6:	9807      	ldr	r0, [sp, #28]
 80104a8:	e7de      	b.n	8010468 <bt_gatt_notify_cb+0x7c>
		return -EAGAIN;
 80104aa:	f06f 000a 	mvn.w	r0, #10
}
 80104ae:	4770      	bx	lr
		return -ENOTCONN;
 80104b0:	f06f 0038 	mvn.w	r0, #56	; 0x38
 80104b4:	e7d8      	b.n	8010468 <bt_gatt_notify_cb+0x7c>
		return -ENOENT;
 80104b6:	f06f 0001 	mvn.w	r0, #1
 80104ba:	e7d5      	b.n	8010468 <bt_gatt_notify_cb+0x7c>
			return -ENOENT;
 80104bc:	f06f 0001 	mvn.w	r0, #1
 80104c0:	e7d2      	b.n	8010468 <bt_gatt_notify_cb+0x7c>
 80104c2:	bf00      	nop
 80104c4:	20000094 	.word	0x20000094
 80104c8:	0800fc09 	.word	0x0800fc09

080104cc <bt_gatt_indicate>:
 80104cc:	f3bf 8f5b 	dmb	ish
 80104d0:	4b34      	ldr	r3, [pc, #208]	; (80105a4 <bt_gatt_indicate+0xd8>)
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
 80104d8:	f013 0f02 	tst.w	r3, #2
 80104dc:	d056      	beq.n	801058c <bt_gatt_indicate+0xc0>
{
 80104de:	b530      	push	{r4, r5, lr}
 80104e0:	b08d      	sub	sp, #52	; 0x34
 80104e2:	4604      	mov	r4, r0
 80104e4:	460d      	mov	r5, r1
	data.attr = params->attr;
 80104e6:	6848      	ldr	r0, [r1, #4]
 80104e8:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
 80104ea:	b114      	cbz	r4, 80104f2 <bt_gatt_indicate+0x26>
 80104ec:	7b63      	ldrb	r3, [r4, #13]
 80104ee:	2b07      	cmp	r3, #7
 80104f0:	d14f      	bne.n	8010592 <bt_gatt_indicate+0xc6>
	data.handle = bt_gatt_attr_get_handle(data.attr);
 80104f2:	f7ff fe09 	bl	8010108 <bt_gatt_attr_get_handle>
 80104f6:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
 80104fa:	2800      	cmp	r0, #0
 80104fc:	d04c      	beq.n	8010598 <bt_gatt_indicate+0xcc>
	if (params->uuid) {
 80104fe:	6829      	ldr	r1, [r5, #0]
 8010500:	b121      	cbz	r1, 801050c <bt_gatt_indicate+0x40>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
 8010502:	a805      	add	r0, sp, #20
 8010504:	f7ff ff5a 	bl	80103bc <gatt_find_by_uuid>
 8010508:	2800      	cmp	r0, #0
 801050a:	d048      	beq.n	801059e <bt_gatt_indicate+0xd2>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
 801050c:	9b05      	ldr	r3, [sp, #20]
 801050e:	6818      	ldr	r0, [r3, #0]
 8010510:	2300      	movs	r3, #0
 8010512:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8010516:	f642 0303 	movw	r3, #10243	; 0x2803
 801051a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801051e:	a90b      	add	r1, sp, #44	; 0x2c
 8010520:	f007 fd72 	bl	8018008 <bt_uuid_cmp>
 8010524:	b948      	cbnz	r0, 801053a <bt_gatt_indicate+0x6e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
 8010526:	9805      	ldr	r0, [sp, #20]
 8010528:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
 801052a:	799b      	ldrb	r3, [r3, #6]
 801052c:	f013 0f20 	tst.w	r3, #32
 8010530:	d00c      	beq.n	801054c <bt_gatt_indicate+0x80>
		data.handle = bt_gatt_attr_value_handle(data.attr);
 8010532:	f7ff fe19 	bl	8010168 <bt_gatt_attr_value_handle>
 8010536:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
 801053a:	b154      	cbz	r4, 8010552 <bt_gatt_indicate+0x86>
		return gatt_indicate(conn, data.handle, params);
 801053c:	462a      	mov	r2, r5
 801053e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8010542:	4620      	mov	r0, r4
 8010544:	f7ff fad0 	bl	800fae8 <gatt_indicate>
}
 8010548:	b00d      	add	sp, #52	; 0x34
 801054a:	bd30      	pop	{r4, r5, pc}
			return -EINVAL;
 801054c:	f06f 0015 	mvn.w	r0, #21
 8010550:	e7fa      	b.n	8010548 <bt_gatt_indicate+0x7c>
	data.err = -ENOTCONN;
 8010552:	f06f 0338 	mvn.w	r3, #56	; 0x38
 8010556:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
 8010558:	2302      	movs	r3, #2
 801055a:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.ind_params = params;
 801055e:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
 8010560:	2300      	movs	r3, #0
 8010562:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8010566:	f642 1202 	movw	r2, #10498	; 0x2902
 801056a:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801056e:	aa05      	add	r2, sp, #20
 8010570:	9202      	str	r2, [sp, #8]
 8010572:	4a0d      	ldr	r2, [pc, #52]	; (80105a8 <bt_gatt_indicate+0xdc>)
 8010574:	9201      	str	r2, [sp, #4]
 8010576:	2201      	movs	r2, #1
 8010578:	9200      	str	r2, [sp, #0]
 801057a:	aa0a      	add	r2, sp, #40	; 0x28
 801057c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010580:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8010584:	f7ff fe08 	bl	8010198 <bt_gatt_foreach_attr_type>
	return data.err;
 8010588:	9807      	ldr	r0, [sp, #28]
 801058a:	e7dd      	b.n	8010548 <bt_gatt_indicate+0x7c>
		return -EAGAIN;
 801058c:	f06f 000a 	mvn.w	r0, #10
}
 8010590:	4770      	bx	lr
		return -ENOTCONN;
 8010592:	f06f 0038 	mvn.w	r0, #56	; 0x38
 8010596:	e7d7      	b.n	8010548 <bt_gatt_indicate+0x7c>
		return -ENOENT;
 8010598:	f06f 0001 	mvn.w	r0, #1
 801059c:	e7d4      	b.n	8010548 <bt_gatt_indicate+0x7c>
			return -ENOENT;
 801059e:	f06f 0001 	mvn.w	r0, #1
 80105a2:	e7d1      	b.n	8010548 <bt_gatt_indicate+0x7c>
 80105a4:	20000094 	.word	0x20000094
 80105a8:	0800fc09 	.word	0x0800fc09

080105ac <sc_process>:
{
 80105ac:	b510      	push	{r4, lr}
 80105ae:	b082      	sub	sp, #8
 80105b0:	4603      	mov	r3, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
 80105b2:	f830 2c04 	ldrh.w	r2, [r0, #-4]
 80105b6:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
 80105ba:	f830 2c02 	ldrh.w	r2, [r0, #-2]
 80105be:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
 80105c2:	f1a0 0118 	sub.w	r1, r0, #24
 80105c6:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 80105ca:	f3bf 8f5b 	dmb	ish
 80105ce:	e854 2f00 	ldrex	r2, [r4]
 80105d2:	f022 0201 	bic.w	r2, r2, #1
 80105d6:	e844 2000 	strex	r0, r2, [r4]
 80105da:	2800      	cmp	r0, #0
 80105dc:	d1f7      	bne.n	80105ce <sc_process+0x22>
 80105de:	f3bf 8f5b 	dmb	ish
	sc->start = 0U;
 80105e2:	2000      	movs	r0, #0
 80105e4:	f823 0c04 	strh.w	r0, [r3, #-4]
	sc->end = 0U;
 80105e8:	f823 0c02 	strh.w	r0, [r3, #-2]
	sc->params.attr = &_1_gatt_svc.attrs[2];
 80105ec:	4a0e      	ldr	r2, [pc, #56]	; (8010628 <sc_process+0x7c>)
 80105ee:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
 80105f2:	4a0e      	ldr	r2, [pc, #56]	; (801062c <sc_process+0x80>)
 80105f4:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
 80105f8:	aa01      	add	r2, sp, #4
 80105fa:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
 80105fe:	2204      	movs	r2, #4
 8010600:	f823 2c08 	strh.w	r2, [r3, #-8]
	if (bt_gatt_indicate(NULL, &sc->params)) {
 8010604:	f7ff ff62 	bl	80104cc <bt_gatt_indicate>
 8010608:	b108      	cbz	r0, 801060e <sc_process+0x62>
}
 801060a:	b002      	add	sp, #8
 801060c:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 801060e:	f3bf 8f5b 	dmb	ish
 8010612:	e854 3f00 	ldrex	r3, [r4]
 8010616:	f043 0302 	orr.w	r3, r3, #2
 801061a:	e844 3200 	strex	r2, r3, [r4]
 801061e:	2a00      	cmp	r2, #0
 8010620:	d1f7      	bne.n	8010612 <sc_process+0x66>
 8010622:	f3bf 8f5b 	dmb	ish
 8010626:	e7f0      	b.n	801060a <sc_process+0x5e>
 8010628:	080213d8 	.word	0x080213d8
 801062c:	0800f859 	.word	0x0800f859

08010630 <sc_restore>:
{
 8010630:	b530      	push	{r4, r5, lr}
 8010632:	b083      	sub	sp, #12
 8010634:	4604      	mov	r4, r0
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
 8010636:	f100 0188 	add.w	r1, r0, #136	; 0x88
 801063a:	7a00      	ldrb	r0, [r0, #8]
 801063c:	f7fe fe7a 	bl	800f334 <find_sc_cfg>
	if (!cfg) {
 8010640:	b308      	cbz	r0, 8010686 <sc_restore+0x56>
 8010642:	4605      	mov	r5, r0
	if (!(cfg->data.start || cfg->data.end)) {
 8010644:	8903      	ldrh	r3, [r0, #8]
 8010646:	b90b      	cbnz	r3, 801064c <sc_restore+0x1c>
 8010648:	8942      	ldrh	r2, [r0, #10]
 801064a:	b1e2      	cbz	r2, 8010686 <sc_restore+0x56>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
 801064c:	f8ad 3004 	strh.w	r3, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
 8010650:	896b      	ldrh	r3, [r5, #10]
 8010652:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
 8010656:	4620      	mov	r0, r4
 8010658:	f7fd fb56 	bl	800dd08 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
 801065c:	4914      	ldr	r1, [pc, #80]	; (80106b0 <sc_restore+0x80>)
 801065e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8010662:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010666:	4a13      	ldr	r2, [pc, #76]	; (80106b4 <sc_restore+0x84>)
 8010668:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
 801066a:	4a13      	ldr	r2, [pc, #76]	; (80106b8 <sc_restore+0x88>)
 801066c:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
 801066e:	aa01      	add	r2, sp, #4
 8010670:	60da      	str	r2, [r3, #12]
	sc_restore_params[index].len = sizeof(sc_range);
 8010672:	2204      	movs	r2, #4
 8010674:	821a      	strh	r2, [r3, #16]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
 8010676:	4619      	mov	r1, r3
 8010678:	4620      	mov	r0, r4
 801067a:	f7ff ff27 	bl	80104cc <bt_gatt_indicate>
 801067e:	b920      	cbnz	r0, 801068a <sc_restore+0x5a>
	sc_reset(cfg);
 8010680:	4628      	mov	r0, r5
 8010682:	f009 fbda 	bl	8019e3a <sc_reset>
}
 8010686:	b003      	add	sp, #12
 8010688:	bd30      	pop	{r4, r5, pc}
		BT_ERR("SC restore indication failed");
 801068a:	f04f 0100 	mov.w	r1, #0
 801068e:	2301      	movs	r3, #1
 8010690:	f363 0102 	bfi	r1, r3, #0, #3
 8010694:	f36f 01c5 	bfc	r1, #3, #3
 8010698:	4b08      	ldr	r3, [pc, #32]	; (80106bc <sc_restore+0x8c>)
 801069a:	4a09      	ldr	r2, [pc, #36]	; (80106c0 <sc_restore+0x90>)
 801069c:	1a9b      	subs	r3, r3, r2
 801069e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80106a2:	f363 118f 	bfi	r1, r3, #6, #10
 80106a6:	4807      	ldr	r0, [pc, #28]	; (80106c4 <sc_restore+0x94>)
 80106a8:	f7f3 ff50 	bl	800454c <log_0>
 80106ac:	e7e8      	b.n	8010680 <sc_restore+0x50>
 80106ae:	bf00      	nop
 80106b0:	20002128 	.word	0x20002128
 80106b4:	080213d8 	.word	0x080213d8
 80106b8:	08019de3 	.word	0x08019de3
 80106bc:	0801d700 	.word	0x0801d700
 80106c0:	0801d6d0 	.word	0x0801d6d0
 80106c4:	08021344 	.word	0x08021344

080106c8 <update_ccc>:
{
 80106c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106cc:	4615      	mov	r5, r2
	struct bt_conn *conn = data->conn;
 80106ce:	6817      	ldr	r7, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
 80106d0:	6882      	ldr	r2, [r0, #8]
 80106d2:	4b2b      	ldr	r3, [pc, #172]	; (8010780 <update_ccc+0xb8>)
 80106d4:	429a      	cmp	r2, r3
 80106d6:	d002      	beq.n	80106de <update_ccc+0x16>
}
 80106d8:	2001      	movs	r0, #1
 80106da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106de:	4604      	mov	r4, r0
	ccc = attr->user_data;
 80106e0:	f8d0 900c 	ldr.w	r9, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
 80106e4:	2600      	movs	r6, #0
 80106e6:	2e00      	cmp	r6, #0
 80106e8:	d1f6      	bne.n	80106d8 <update_ccc+0x10>
		if (!cfg->value ||
 80106ea:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 80106ee:	eb09 0343 	add.w	r3, r9, r3, lsl #1
 80106f2:	891b      	ldrh	r3, [r3, #8]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d040      	beq.n	801077a <update_ccc+0xb2>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
 80106f8:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 80106fc:	eb09 0243 	add.w	r2, r9, r3, lsl #1
 8010700:	3201      	adds	r2, #1
 8010702:	f819 1013 	ldrb.w	r1, [r9, r3, lsl #1]
 8010706:	4638      	mov	r0, r7
 8010708:	f008 f9da 	bl	8018ac0 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
 801070c:	b3a8      	cbz	r0, 801077a <update_ccc+0xb2>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
 801070e:	222a      	movs	r2, #42	; 0x2a
 8010710:	4621      	mov	r1, r4
 8010712:	4638      	mov	r0, r7
 8010714:	f009 fcfc 	bl	801a110 <bt_gatt_check_perm>
		if (err) {
 8010718:	b150      	cbz	r0, 8010730 <update_ccc+0x68>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
 801071a:	2803      	cmp	r0, #3
 801071c:	d013      	beq.n	8010746 <update_ccc+0x7e>
			if (err == BT_ATT_ERR_AUTHENTICATION) {
 801071e:	2805      	cmp	r0, #5
 8010720:	d023      	beq.n	801076a <update_ccc+0xa2>
			sec = BT_SECURITY_L2;
 8010722:	f04f 0a02 	mov.w	sl, #2
			    bt_conn_get_security(conn) < sec) {
 8010726:	4638      	mov	r0, r7
 8010728:	f008 f972 	bl	8018a10 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
 801072c:	4582      	cmp	sl, r0
 801072e:	d81f      	bhi.n	8010770 <update_ccc+0xa8>
		gatt_ccc_changed(attr, ccc);
 8010730:	4649      	mov	r1, r9
 8010732:	4620      	mov	r0, r4
 8010734:	f009 fa64 	bl	8019c00 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
 8010738:	4b12      	ldr	r3, [pc, #72]	; (8010784 <update_ccc+0xbc>)
 801073a:	4599      	cmp	r9, r3
 801073c:	d1cc      	bne.n	80106d8 <update_ccc+0x10>
			sc_restore(conn);
 801073e:	4638      	mov	r0, r7
 8010740:	f7ff ff76 	bl	8010630 <sc_restore>
 8010744:	e7c8      	b.n	80106d8 <update_ccc+0x10>
				BT_WARN("CCC %p not writable", attr);
 8010746:	2302      	movs	r3, #2
 8010748:	f363 0802 	bfi	r8, r3, #0, #3
 801074c:	f36f 08c5 	bfc	r8, #3, #3
 8010750:	4b0d      	ldr	r3, [pc, #52]	; (8010788 <update_ccc+0xc0>)
 8010752:	4a0e      	ldr	r2, [pc, #56]	; (801078c <update_ccc+0xc4>)
 8010754:	1a9b      	subs	r3, r3, r2
 8010756:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 801075a:	f363 188f 	bfi	r8, r3, #6, #10
 801075e:	4642      	mov	r2, r8
 8010760:	4621      	mov	r1, r4
 8010762:	480b      	ldr	r0, [pc, #44]	; (8010790 <update_ccc+0xc8>)
 8010764:	f7f3 fd82 	bl	800426c <log_1>
				continue;
 8010768:	e007      	b.n	801077a <update_ccc+0xb2>
				sec = BT_SECURITY_L3;
 801076a:	f04f 0a03 	mov.w	sl, #3
 801076e:	e7da      	b.n	8010726 <update_ccc+0x5e>
				if (data->sec < sec) {
 8010770:	792b      	ldrb	r3, [r5, #4]
 8010772:	459a      	cmp	sl, r3
 8010774:	d901      	bls.n	801077a <update_ccc+0xb2>
					data->sec = sec;
 8010776:	f885 a004 	strb.w	sl, [r5, #4]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
 801077a:	3601      	adds	r6, #1
 801077c:	e7b3      	b.n	80106e6 <update_ccc+0x1e>
 801077e:	bf00      	nop
 8010780:	0800f3f9 	.word	0x0800f3f9
 8010784:	20000568 	.word	0x20000568
 8010788:	0801d700 	.word	0x0801d700
 801078c:	0801d6d0 	.word	0x0801d6d0
 8010790:	08021364 	.word	0x08021364

08010794 <bt_gatt_connected>:
{
 8010794:	b570      	push	{r4, r5, r6, lr}
 8010796:	b090      	sub	sp, #64	; 0x40
 8010798:	4604      	mov	r4, r0
	data.conn = conn;
 801079a:	900e      	str	r0, [sp, #56]	; 0x38
	data.sec = BT_SECURITY_L1;
 801079c:	2301      	movs	r3, #1
 801079e:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
 80107a2:	f100 0588 	add.w	r5, r0, #136	; 0x88
 80107a6:	4629      	mov	r1, r5
 80107a8:	7a00      	ldrb	r0, [r0, #8]
 80107aa:	f007 ff55 	bl	8018658 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
 80107ae:	b190      	cbz	r0, 80107d6 <bt_gatt_connected+0x42>
		if (conn->id) {
 80107b0:	7a22      	ldrb	r2, [r4, #8]
 80107b2:	b32a      	cbz	r2, 8010800 <bt_gatt_connected+0x6c>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
 80107b4:	ae04      	add	r6, sp, #16
 80107b6:	2104      	movs	r1, #4
 80107b8:	4630      	mov	r0, r6
 80107ba:	f7f2 fb91 	bl	8002ee0 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
 80107be:	9600      	str	r6, [sp, #0]
 80107c0:	462b      	mov	r3, r5
 80107c2:	4a16      	ldr	r2, [pc, #88]	; (801081c <bt_gatt_connected+0x88>)
 80107c4:	2124      	movs	r1, #36	; 0x24
 80107c6:	a805      	add	r0, sp, #20
 80107c8:	f7f9 f946 	bl	8009a58 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
 80107cc:	aa05      	add	r2, sp, #20
 80107ce:	4914      	ldr	r1, [pc, #80]	; (8010820 <bt_gatt_connected+0x8c>)
 80107d0:	4610      	mov	r0, r2
 80107d2:	f7f5 fde5 	bl	80063a0 <settings_load_subtree_direct>
 80107d6:	ab0e      	add	r3, sp, #56	; 0x38
 80107d8:	9302      	str	r3, [sp, #8]
 80107da:	4b12      	ldr	r3, [pc, #72]	; (8010824 <bt_gatt_connected+0x90>)
 80107dc:	9301      	str	r3, [sp, #4]
 80107de:	2200      	movs	r2, #0
 80107e0:	9200      	str	r2, [sp, #0]
 80107e2:	4613      	mov	r3, r2
 80107e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80107e8:	2001      	movs	r0, #1
 80107ea:	f7ff fcd5 	bl	8010198 <bt_gatt_foreach_attr_type>
	    bt_conn_get_security(conn) < data.sec) {
 80107ee:	4620      	mov	r0, r4
 80107f0:	f008 f90e 	bl	8018a10 <bt_conn_get_security>
 80107f4:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
	if (IS_ENABLED(CONFIG_BT_SMP) &&
 80107f8:	4288      	cmp	r0, r1
 80107fa:	d30a      	bcc.n	8010812 <bt_gatt_connected+0x7e>
}
 80107fc:	b010      	add	sp, #64	; 0x40
 80107fe:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
 8010800:	2300      	movs	r3, #0
 8010802:	9300      	str	r3, [sp, #0]
 8010804:	462b      	mov	r3, r5
 8010806:	4a05      	ldr	r2, [pc, #20]	; (801081c <bt_gatt_connected+0x88>)
 8010808:	2124      	movs	r1, #36	; 0x24
 801080a:	a805      	add	r0, sp, #20
 801080c:	f7f9 f924 	bl	8009a58 <bt_settings_encode_key>
 8010810:	e7dc      	b.n	80107cc <bt_gatt_connected+0x38>
		bt_conn_set_security(conn, data.sec);
 8010812:	4620      	mov	r0, r4
 8010814:	f008 f8c4 	bl	80189a0 <bt_conn_set_security>
}
 8010818:	e7f0      	b.n	80107fc <bt_gatt_connected+0x68>
 801081a:	bf00      	nop
 801081c:	08021340 	.word	0x08021340
 8010820:	0800fd25 	.word	0x0800fd25
 8010824:	080106c9 	.word	0x080106c9

08010828 <bt_gatt_encrypt_change>:
{
 8010828:	b500      	push	{lr}
 801082a:	b087      	sub	sp, #28
	data.conn = conn;
 801082c:	9004      	str	r0, [sp, #16]
	data.sec = BT_SECURITY_L1;
 801082e:	2001      	movs	r0, #1
 8010830:	f88d 0014 	strb.w	r0, [sp, #20]
 8010834:	ab04      	add	r3, sp, #16
 8010836:	9302      	str	r3, [sp, #8]
 8010838:	4b05      	ldr	r3, [pc, #20]	; (8010850 <bt_gatt_encrypt_change+0x28>)
 801083a:	9301      	str	r3, [sp, #4]
 801083c:	2200      	movs	r2, #0
 801083e:	9200      	str	r2, [sp, #0]
 8010840:	4613      	mov	r3, r2
 8010842:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010846:	f7ff fca7 	bl	8010198 <bt_gatt_foreach_attr_type>
}
 801084a:	b007      	add	sp, #28
 801084c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010850:	080106c9 	.word	0x080106c9

08010854 <db_hash_read>:
{
 8010854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010856:	b085      	sub	sp, #20
 8010858:	4604      	mov	r4, r0
 801085a:	460d      	mov	r5, r1
 801085c:	4616      	mov	r6, r2
 801085e:	461f      	mov	r7, r3
	err = k_delayed_work_cancel(&db_hash_work);
 8010860:	480d      	ldr	r0, [pc, #52]	; (8010898 <db_hash_read+0x44>)
 8010862:	f00c fb69 	bl	801cf38 <k_delayed_work_cancel>
	if (!err) {
 8010866:	b190      	cbz	r0, 801088e <db_hash_read+0x3a>
	bt_gatt_change_aware(conn, true);
 8010868:	2101      	movs	r1, #1
 801086a:	4620      	mov	r0, r4
 801086c:	f009 fc81 	bl	801a172 <bt_gatt_change_aware>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
 8010870:	2310      	movs	r3, #16
 8010872:	9302      	str	r3, [sp, #8]
 8010874:	4b09      	ldr	r3, [pc, #36]	; (801089c <db_hash_read+0x48>)
 8010876:	9301      	str	r3, [sp, #4]
 8010878:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801087c:	9300      	str	r3, [sp, #0]
 801087e:	463b      	mov	r3, r7
 8010880:	4632      	mov	r2, r6
 8010882:	4629      	mov	r1, r5
 8010884:	4620      	mov	r0, r4
 8010886:	f009 fb51 	bl	8019f2c <bt_gatt_attr_read>
}
 801088a:	b005      	add	sp, #20
 801088c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		db_hash_gen(true);
 801088e:	2001      	movs	r0, #1
 8010890:	f7ff fccc 	bl	801022c <db_hash_gen>
 8010894:	e7e8      	b.n	8010868 <db_hash_read+0x14>
 8010896:	bf00      	nop
 8010898:	20001040 	.word	0x20001040
 801089c:	200020fc 	.word	0x200020fc

080108a0 <bt_gatt_store_ccc>:
{
 80108a0:	b570      	push	{r4, r5, r6, lr}
 80108a2:	b0c2      	sub	sp, #264	; 0x108
 80108a4:	4604      	mov	r4, r0
 80108a6:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
 80108a8:	910f      	str	r1, [sp, #60]	; 0x3c
	save.addr_with_id.id = id;
 80108aa:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
	save.count = 0;
 80108ae:	2200      	movs	r2, #0
 80108b0:	9241      	str	r2, [sp, #260]	; 0x104
 80108b2:	ab0f      	add	r3, sp, #60	; 0x3c
 80108b4:	9302      	str	r3, [sp, #8]
 80108b6:	4b25      	ldr	r3, [pc, #148]	; (801094c <bt_gatt_store_ccc+0xac>)
 80108b8:	9301      	str	r3, [sp, #4]
 80108ba:	9200      	str	r2, [sp, #0]
 80108bc:	4613      	mov	r3, r2
 80108be:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80108c2:	2001      	movs	r0, #1
 80108c4:	f7ff fc68 	bl	8010198 <bt_gatt_foreach_attr_type>
	if (id) {
 80108c8:	b18c      	cbz	r4, 80108ee <bt_gatt_store_ccc+0x4e>
		u8_to_dec(id_str, sizeof(id_str), id);
 80108ca:	ae05      	add	r6, sp, #20
 80108cc:	4622      	mov	r2, r4
 80108ce:	2104      	movs	r1, #4
 80108d0:	4630      	mov	r0, r6
 80108d2:	f7f2 fb05 	bl	8002ee0 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
 80108d6:	9600      	str	r6, [sp, #0]
 80108d8:	462b      	mov	r3, r5
 80108da:	4a1d      	ldr	r2, [pc, #116]	; (8010950 <bt_gatt_store_ccc+0xb0>)
 80108dc:	2124      	movs	r1, #36	; 0x24
 80108de:	a806      	add	r0, sp, #24
 80108e0:	f7f9 f8ba 	bl	8009a58 <bt_settings_encode_key>
	if (save.count) {
 80108e4:	9c41      	ldr	r4, [sp, #260]	; 0x104
 80108e6:	b15c      	cbz	r4, 8010900 <bt_gatt_store_ccc+0x60>
		len = save.count * sizeof(*save.store);
 80108e8:	00a4      	lsls	r4, r4, #2
		str = (char *)save.store;
 80108ea:	a911      	add	r1, sp, #68	; 0x44
 80108ec:	e009      	b.n	8010902 <bt_gatt_store_ccc+0x62>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
 80108ee:	2300      	movs	r3, #0
 80108f0:	9300      	str	r3, [sp, #0]
 80108f2:	462b      	mov	r3, r5
 80108f4:	4a16      	ldr	r2, [pc, #88]	; (8010950 <bt_gatt_store_ccc+0xb0>)
 80108f6:	2124      	movs	r1, #36	; 0x24
 80108f8:	a806      	add	r0, sp, #24
 80108fa:	f7f9 f8ad 	bl	8009a58 <bt_settings_encode_key>
 80108fe:	e7f1      	b.n	80108e4 <bt_gatt_store_ccc+0x44>
		str = NULL;
 8010900:	2100      	movs	r1, #0
	err = settings_save_one(key, str, len);
 8010902:	4622      	mov	r2, r4
 8010904:	a806      	add	r0, sp, #24
 8010906:	f7f5 fce5 	bl	80062d4 <settings_save_one>
	if (err) {
 801090a:	4605      	mov	r5, r0
 801090c:	b918      	cbnz	r0, 8010916 <bt_gatt_store_ccc+0x76>
	if (len) {
 801090e:	b9d4      	cbnz	r4, 8010946 <bt_gatt_store_ccc+0xa6>
}
 8010910:	4628      	mov	r0, r5
 8010912:	b042      	add	sp, #264	; 0x108
 8010914:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Failed to store CCCs (err %d)", err);
 8010916:	f04f 0200 	mov.w	r2, #0
 801091a:	2301      	movs	r3, #1
 801091c:	f363 0202 	bfi	r2, r3, #0, #3
 8010920:	f36f 02c5 	bfc	r2, #3, #3
 8010924:	4b0b      	ldr	r3, [pc, #44]	; (8010954 <bt_gatt_store_ccc+0xb4>)
 8010926:	490c      	ldr	r1, [pc, #48]	; (8010958 <bt_gatt_store_ccc+0xb8>)
 8010928:	1a5b      	subs	r3, r3, r1
 801092a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 801092e:	f363 128f 	bfi	r2, r3, #6, #10
 8010932:	4601      	mov	r1, r0
 8010934:	4809      	ldr	r0, [pc, #36]	; (801095c <bt_gatt_store_ccc+0xbc>)
 8010936:	f7f3 fc99 	bl	800426c <log_1>
		return err;
 801093a:	e7e9      	b.n	8010910 <bt_gatt_store_ccc+0x70>
		for (size_t i = 0; i < save.count; i++) {
 801093c:	3301      	adds	r3, #1
 801093e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010940:	429a      	cmp	r2, r3
 8010942:	d8fb      	bhi.n	801093c <bt_gatt_store_ccc+0x9c>
 8010944:	e7e4      	b.n	8010910 <bt_gatt_store_ccc+0x70>
 8010946:	2300      	movs	r3, #0
 8010948:	e7f9      	b.n	801093e <bt_gatt_store_ccc+0x9e>
 801094a:	bf00      	nop
 801094c:	0800f37d 	.word	0x0800f37d
 8010950:	08021340 	.word	0x08021340
 8010954:	0801d700 	.word	0x0801d700
 8010958:	0801d6d0 	.word	0x0801d6d0
 801095c:	08021378 	.word	0x08021378

08010960 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
 8010960:	b530      	push	{r4, r5, lr}
 8010962:	b087      	sub	sp, #28
 8010964:	4604      	mov	r4, r0
 8010966:	9002      	str	r0, [sp, #8]
 8010968:	4b19      	ldr	r3, [pc, #100]	; (80109d0 <bt_gatt_disconnected+0x70>)
 801096a:	9301      	str	r3, [sp, #4]
 801096c:	2200      	movs	r2, #0
 801096e:	9200      	str	r2, [sp, #0]
 8010970:	4613      	mov	r3, r2
 8010972:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010976:	2001      	movs	r0, #1
 8010978:	f7ff fc0e 	bl	8010198 <bt_gatt_foreach_attr_type>
		k_delayed_work_cancel(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
 801097c:	f104 0588 	add.w	r5, r4, #136	; 0x88
 8010980:	4629      	mov	r1, r5
 8010982:	7a20      	ldrb	r0, [r4, #8]
 8010984:	f007 fe68 	bl	8018658 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
 8010988:	b948      	cbnz	r0, 801099e <bt_gatt_disconnected+0x3e>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
 801098a:	4629      	mov	r1, r5
 801098c:	7a20      	ldrb	r0, [r4, #8]
 801098e:	f007 fe63 	bl	8018658 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
 8010992:	b960      	cbnz	r0, 80109ae <bt_gatt_disconnected+0x4e>
#if defined(CONFIG_BT_GATT_CLIENT)
	remove_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
 8010994:	4620      	mov	r0, r4
 8010996:	f009 faa5 	bl	8019ee4 <remove_cf_cfg>
#endif
}
 801099a:	b007      	add	sp, #28
 801099c:	bd30      	pop	{r4, r5, pc}
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
 801099e:	4629      	mov	r1, r5
 80109a0:	7a20      	ldrb	r0, [r4, #8]
 80109a2:	f7ff ff7d 	bl	80108a0 <bt_gatt_store_ccc>
		bt_gatt_store_cf(conn);
 80109a6:	4620      	mov	r0, r4
 80109a8:	f7fe fe7c 	bl	800f6a4 <bt_gatt_store_cf>
 80109ac:	e7ed      	b.n	801098a <bt_gatt_disconnected+0x2a>
		struct addr_with_id addr_with_id = {
 80109ae:	9504      	str	r5, [sp, #16]
			.id = conn->id,
 80109b0:	7a23      	ldrb	r3, [r4, #8]
		struct addr_with_id addr_with_id = {
 80109b2:	f88d 3014 	strb.w	r3, [sp, #20]
 80109b6:	ab04      	add	r3, sp, #16
 80109b8:	9302      	str	r3, [sp, #8]
 80109ba:	4b06      	ldr	r3, [pc, #24]	; (80109d4 <bt_gatt_disconnected+0x74>)
 80109bc:	9301      	str	r3, [sp, #4]
 80109be:	2200      	movs	r2, #0
 80109c0:	9200      	str	r2, [sp, #0]
 80109c2:	4613      	mov	r3, r2
 80109c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80109c8:	2001      	movs	r0, #1
 80109ca:	f7ff fbe5 	bl	8010198 <bt_gatt_foreach_attr_type>
 80109ce:	e7e1      	b.n	8010994 <bt_gatt_disconnected+0x34>
 80109d0:	0800f999 	.word	0x0800f999
 80109d4:	0800f82d 	.word	0x0800f82d

080109d8 <le_sc_supported>:
	 */
	if (IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		return false;
	}

	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
 80109d8:	4b04      	ldr	r3, [pc, #16]	; (80109ec <le_sc_supported+0x14>)
 80109da:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
 80109de:	f000 0006 	and.w	r0, r0, #6
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}
 80109e2:	2806      	cmp	r0, #6
 80109e4:	bf14      	ite	ne
 80109e6:	2000      	movne	r0, #0
 80109e8:	2001      	moveq	r0, #1
 80109ea:	4770      	bx	lr
 80109ec:	20000000 	.word	0x20000000

080109f0 <get_io_capa>:

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
 80109f0:	4b11      	ldr	r3, [pc, #68]	; (8010a38 <get_io_capa+0x48>)
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	b1bb      	cbz	r3, 8010a26 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
 80109f6:	685a      	ldr	r2, [r3, #4]
 80109f8:	b132      	cbz	r2, 8010a08 <get_io_capa+0x18>
 80109fa:	6899      	ldr	r1, [r3, #8]
 80109fc:	b121      	cbz	r1, 8010a08 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
 80109fe:	68d9      	ldr	r1, [r3, #12]
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
 8010a00:	b999      	cbnz	r1, 8010a2a <get_io_capa+0x3a>
	    (bt_auth->passkey_confirm || !sc_supported)) {
 8010a02:	490e      	ldr	r1, [pc, #56]	; (8010a3c <get_io_capa+0x4c>)
 8010a04:	7809      	ldrb	r1, [r1, #0]
 8010a06:	b191      	cbz	r1, 8010a2e <get_io_capa+0x3e>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
 8010a08:	490c      	ldr	r1, [pc, #48]	; (8010a3c <get_io_capa+0x4c>)
 8010a0a:	7809      	ldrb	r1, [r1, #0]
 8010a0c:	b121      	cbz	r1, 8010a18 <get_io_capa+0x28>
 8010a0e:	b11a      	cbz	r2, 8010a18 <get_io_capa+0x28>
	    bt_auth->passkey_confirm) {
 8010a10:	68d9      	ldr	r1, [r3, #12]
	if (sc_supported && bt_auth->passkey_display &&
 8010a12:	b109      	cbz	r1, 8010a18 <get_io_capa+0x28>
		return BT_SMP_IO_DISPLAY_YESNO;
 8010a14:	2001      	movs	r0, #1
 8010a16:	4770      	bx	lr
	}

	if (bt_auth->passkey_entry) {
 8010a18:	689b      	ldr	r3, [r3, #8]
 8010a1a:	b953      	cbnz	r3, 8010a32 <get_io_capa+0x42>
		} else {
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
 8010a1c:	b10a      	cbz	r2, 8010a22 <get_io_capa+0x32>
		return BT_SMP_IO_DISPLAY_ONLY;
 8010a1e:	2000      	movs	r0, #0
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
	}
}
 8010a20:	4770      	bx	lr
		return BT_SMP_IO_NO_INPUT_OUTPUT;
 8010a22:	2003      	movs	r0, #3
 8010a24:	4770      	bx	lr
 8010a26:	2003      	movs	r0, #3
 8010a28:	4770      	bx	lr
		return BT_SMP_IO_KEYBOARD_DISPLAY;
 8010a2a:	2004      	movs	r0, #4
 8010a2c:	4770      	bx	lr
 8010a2e:	2004      	movs	r0, #4
 8010a30:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
 8010a32:	2002      	movs	r0, #2
 8010a34:	4770      	bx	lr
 8010a36:	bf00      	nop
 8010a38:	20002088 	.word	0x20002088
 8010a3c:	200034ff 	.word	0x200034ff

08010a40 <get_pair_method>:

	return true;
}

static uint8_t get_pair_method(struct bt_smp *smp, uint8_t remote_io)
{
 8010a40:	b510      	push	{r4, lr}
 8010a42:	460c      	mov	r4, r1
	struct bt_smp_pairing *req, *rsp;

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
 8010a44:	f890 30c4 	ldrb.w	r3, [r0, #196]	; 0xc4
 8010a48:	f890 20cb 	ldrb.w	r2, [r0, #203]	; 0xcb
 8010a4c:	ea03 0102 	and.w	r1, r3, r2
 8010a50:	f011 0f08 	tst.w	r1, #8
 8010a54:	d007      	beq.n	8010a66 <get_pair_method+0x26>
		/* if one side has OOB data use OOB */
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
 8010a56:	f890 10c3 	ldrb.w	r1, [r0, #195]	; 0xc3
 8010a5a:	f890 00ca 	ldrb.w	r0, [r0, #202]	; 0xca
 8010a5e:	4301      	orrs	r1, r0
 8010a60:	f011 0f01 	tst.w	r1, #1
 8010a64:	d10e      	bne.n	8010a84 <get_pair_method+0x44>
			return LE_SC_OOB;
		}
	}

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
 8010a66:	2c04      	cmp	r4, #4
 8010a68:	d80e      	bhi.n	8010a88 <get_pair_method+0x48>
		return JUST_WORKS;
	}

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
 8010a6a:	ea43 0002 	orr.w	r0, r3, r2
 8010a6e:	f010 0004 	ands.w	r0, r0, #4
 8010a72:	d006      	beq.n	8010a82 <get_pair_method+0x42>
		return JUST_WORKS;
	}

	return gen_method_sc[remote_io][get_io_capa()];
 8010a74:	f7ff ffbc 	bl	80109f0 <get_io_capa>
 8010a78:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8010a7c:	4903      	ldr	r1, [pc, #12]	; (8010a8c <get_pair_method+0x4c>)
 8010a7e:	440c      	add	r4, r1
 8010a80:	5c20      	ldrb	r0, [r4, r0]
#else
	return JUST_WORKS;
#endif
}
 8010a82:	bd10      	pop	{r4, pc}
			return LE_SC_OOB;
 8010a84:	2005      	movs	r0, #5
 8010a86:	e7fc      	b.n	8010a82 <get_pair_method+0x42>
		return JUST_WORKS;
 8010a88:	2000      	movs	r0, #0
 8010a8a:	e7fa      	b.n	8010a82 <get_pair_method+0x42>
 8010a8c:	0802168c 	.word	0x0802168c

08010a90 <smp_pairing_accept_query>:

static uint8_t smp_pairing_accept_query(struct bt_conn *conn,
				    struct bt_smp_pairing *pairing)
{
#if defined(CONFIG_BT_SMP_APP_PAIRING_ACCEPT)
	if (bt_auth && bt_auth->pairing_accept) {
 8010a90:	4b12      	ldr	r3, [pc, #72]	; (8010adc <smp_pairing_accept_query+0x4c>)
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	b1eb      	cbz	r3, 8010ad2 <smp_pairing_accept_query+0x42>
 8010a96:	681a      	ldr	r2, [r3, #0]
 8010a98:	b1ea      	cbz	r2, 8010ad6 <smp_pairing_accept_query+0x46>
{
 8010a9a:	b500      	push	{lr}
 8010a9c:	b083      	sub	sp, #12
		const struct bt_conn_pairing_feat feat = {
			.io_capability = pairing->io_capability,
 8010a9e:	780a      	ldrb	r2, [r1, #0]
		const struct bt_conn_pairing_feat feat = {
 8010aa0:	f88d 2000 	strb.w	r2, [sp]
			.oob_data_flag = pairing->oob_flag,
 8010aa4:	784a      	ldrb	r2, [r1, #1]
		const struct bt_conn_pairing_feat feat = {
 8010aa6:	f88d 2001 	strb.w	r2, [sp, #1]
			.auth_req = pairing->auth_req,
 8010aaa:	788a      	ldrb	r2, [r1, #2]
		const struct bt_conn_pairing_feat feat = {
 8010aac:	f88d 2002 	strb.w	r2, [sp, #2]
			.max_enc_key_size = pairing->max_key_size,
 8010ab0:	78ca      	ldrb	r2, [r1, #3]
		const struct bt_conn_pairing_feat feat = {
 8010ab2:	f88d 2003 	strb.w	r2, [sp, #3]
			.init_key_dist = pairing->init_key_dist,
 8010ab6:	790a      	ldrb	r2, [r1, #4]
		const struct bt_conn_pairing_feat feat = {
 8010ab8:	f88d 2004 	strb.w	r2, [sp, #4]
			.resp_key_dist = pairing->resp_key_dist
 8010abc:	794a      	ldrb	r2, [r1, #5]
		const struct bt_conn_pairing_feat feat = {
 8010abe:	f88d 2005 	strb.w	r2, [sp, #5]
		};

		return smp_err_get(bt_auth->pairing_accept(conn, &feat));
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	4669      	mov	r1, sp
 8010ac6:	4798      	blx	r3
 8010ac8:	f009 fbcf 	bl	801a26a <smp_err_get>
	}
#endif /* CONFIG_BT_SMP_APP_PAIRING_ACCEPT */
	return 0;
}
 8010acc:	b003      	add	sp, #12
 8010ace:	f85d fb04 	ldr.w	pc, [sp], #4
	return 0;
 8010ad2:	2000      	movs	r0, #0
 8010ad4:	4770      	bx	lr
 8010ad6:	2000      	movs	r0, #0
}
 8010ad8:	4770      	bx	lr
 8010ada:	bf00      	nop
 8010adc:	20002088 	.word	0x20002088

08010ae0 <get_auth>:
{
	oobd_present = enable;
}

static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
{
 8010ae0:	b510      	push	{r4, lr}
	if (sc_supported) {
 8010ae2:	4b0d      	ldr	r3, [pc, #52]	; (8010b18 <get_auth+0x38>)
 8010ae4:	781b      	ldrb	r3, [r3, #0]
 8010ae6:	b16b      	cbz	r3, 8010b04 <get_auth+0x24>
		auth &= BT_SMP_AUTH_MASK_SC;
 8010ae8:	f001 040f 	and.w	r4, r1, #15
	} else {
		auth &= BT_SMP_AUTH_MASK;
	}

	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
 8010aec:	f7ff ff80 	bl	80109f0 <get_io_capa>
 8010af0:	2803      	cmp	r0, #3
 8010af2:	d00a      	beq.n	8010b0a <get_auth+0x2a>
	    (!IS_ENABLED(CONFIG_BT_SMP_ENFORCE_MITM) &&
	    (conn->required_sec_level < BT_SECURITY_L3))) {
		auth &= ~(BT_SMP_AUTH_MITM);
	} else {
		auth |= BT_SMP_AUTH_MITM;
 8010af4:	f044 0004 	orr.w	r0, r4, #4
	}

	if (bondable) {
 8010af8:	4b08      	ldr	r3, [pc, #32]	; (8010b1c <get_auth+0x3c>)
 8010afa:	781b      	ldrb	r3, [r3, #0]
 8010afc:	b143      	cbz	r3, 8010b10 <get_auth+0x30>
		auth |= BT_SMP_AUTH_BONDING;
 8010afe:	f040 0001 	orr.w	r0, r0, #1
	} else {
		auth &= ~BT_SMP_AUTH_BONDING;
	}

	return auth;
}
 8010b02:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
 8010b04:	f001 0407 	and.w	r4, r1, #7
 8010b08:	e7f0      	b.n	8010aec <get_auth+0xc>
		auth &= ~(BT_SMP_AUTH_MITM);
 8010b0a:	f004 000b 	and.w	r0, r4, #11
 8010b0e:	e7f3      	b.n	8010af8 <get_auth+0x18>
		auth &= ~BT_SMP_AUTH_BONDING;
 8010b10:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 8010b14:	e7f5      	b.n	8010b02 <get_auth+0x22>
 8010b16:	bf00      	nop
 8010b18:	200034ff 	.word	0x200034ff
 8010b1c:	200005a4 	.word	0x200005a4

08010b20 <sec_level_reachable>:

static bool sec_level_reachable(struct bt_conn *conn)
{
 8010b20:	b508      	push	{r3, lr}
	switch (conn->required_sec_level) {
 8010b22:	7a83      	ldrb	r3, [r0, #10]
 8010b24:	2b03      	cmp	r3, #3
 8010b26:	d015      	beq.n	8010b54 <sec_level_reachable+0x34>
 8010b28:	d807      	bhi.n	8010b3a <sec_level_reachable+0x1a>
 8010b2a:	3b01      	subs	r3, #1
 8010b2c:	b2db      	uxtb	r3, r3
 8010b2e:	2b01      	cmp	r3, #1
 8010b30:	d801      	bhi.n	8010b36 <sec_level_reachable+0x16>
 8010b32:	2001      	movs	r0, #1
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
	default:
		return false;
	}
}
 8010b34:	bd08      	pop	{r3, pc}
		return false;
 8010b36:	2000      	movs	r0, #0
 8010b38:	e7fc      	b.n	8010b34 <sec_level_reachable+0x14>
	switch (conn->required_sec_level) {
 8010b3a:	2b04      	cmp	r3, #4
 8010b3c:	d108      	bne.n	8010b50 <sec_level_reachable+0x30>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
 8010b3e:	f7ff ff57 	bl	80109f0 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
 8010b42:	2803      	cmp	r0, #3
 8010b44:	d017      	beq.n	8010b76 <sec_level_reachable+0x56>
 8010b46:	4b12      	ldr	r3, [pc, #72]	; (8010b90 <sec_level_reachable+0x70>)
 8010b48:	781b      	ldrb	r3, [r3, #0]
 8010b4a:	b9f3      	cbnz	r3, 8010b8a <sec_level_reachable+0x6a>
 8010b4c:	2000      	movs	r0, #0
 8010b4e:	e7f1      	b.n	8010b34 <sec_level_reachable+0x14>
		return false;
 8010b50:	2000      	movs	r0, #0
 8010b52:	e7ef      	b.n	8010b34 <sec_level_reachable+0x14>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
 8010b54:	f7ff ff4c 	bl	80109f0 <get_io_capa>
 8010b58:	2803      	cmp	r0, #3
 8010b5a:	d001      	beq.n	8010b60 <sec_level_reachable+0x40>
 8010b5c:	2001      	movs	r0, #1
 8010b5e:	e7e9      	b.n	8010b34 <sec_level_reachable+0x14>
		       (bt_auth && bt_auth->oob_data_request);
 8010b60:	4b0c      	ldr	r3, [pc, #48]	; (8010b94 <sec_level_reachable+0x74>)
 8010b62:	681b      	ldr	r3, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
 8010b64:	b12b      	cbz	r3, 8010b72 <sec_level_reachable+0x52>
		       (bt_auth && bt_auth->oob_data_request);
 8010b66:	691b      	ldr	r3, [r3, #16]
 8010b68:	b10b      	cbz	r3, 8010b6e <sec_level_reachable+0x4e>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
 8010b6a:	2001      	movs	r0, #1
 8010b6c:	e7e2      	b.n	8010b34 <sec_level_reachable+0x14>
 8010b6e:	2000      	movs	r0, #0
 8010b70:	e7e0      	b.n	8010b34 <sec_level_reachable+0x14>
 8010b72:	2000      	movs	r0, #0
 8010b74:	e7de      	b.n	8010b34 <sec_level_reachable+0x14>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
 8010b76:	4b07      	ldr	r3, [pc, #28]	; (8010b94 <sec_level_reachable+0x74>)
 8010b78:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
 8010b7a:	b123      	cbz	r3, 8010b86 <sec_level_reachable+0x66>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
 8010b7c:	691b      	ldr	r3, [r3, #16]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d1e1      	bne.n	8010b46 <sec_level_reachable+0x26>
 8010b82:	2000      	movs	r0, #0
 8010b84:	e7d6      	b.n	8010b34 <sec_level_reachable+0x14>
 8010b86:	2000      	movs	r0, #0
 8010b88:	e7d4      	b.n	8010b34 <sec_level_reachable+0x14>
 8010b8a:	2001      	movs	r0, #1
 8010b8c:	e7d2      	b.n	8010b34 <sec_level_reachable+0x14>
 8010b8e:	bf00      	nop
 8010b90:	200034ff 	.word	0x200034ff
 8010b94:	20002088 	.word	0x20002088

08010b98 <smp_chan_get>:

static struct bt_smp *smp_chan_get(struct bt_conn *conn)
{
 8010b98:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
 8010b9a:	2106      	movs	r1, #6
 8010b9c:	f008 f9be 	bl	8018f1c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
 8010ba0:	4604      	mov	r4, r0
 8010ba2:	b108      	cbz	r0, 8010ba8 <smp_chan_get+0x10>
		BT_ERR("Unable to find SMP channel");
		return NULL;
	}

	return CONTAINER_OF(chan, struct bt_smp, chan);
}
 8010ba4:	4620      	mov	r0, r4
 8010ba6:	bd10      	pop	{r4, pc}
		BT_ERR("Unable to find SMP channel");
 8010ba8:	f04f 0100 	mov.w	r1, #0
 8010bac:	2301      	movs	r3, #1
 8010bae:	f363 0102 	bfi	r1, r3, #0, #3
 8010bb2:	f36f 01c5 	bfc	r1, #3, #3
 8010bb6:	4b05      	ldr	r3, [pc, #20]	; (8010bcc <smp_chan_get+0x34>)
 8010bb8:	4a05      	ldr	r2, [pc, #20]	; (8010bd0 <smp_chan_get+0x38>)
 8010bba:	1a9b      	subs	r3, r3, r2
 8010bbc:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8010bc0:	f363 118f 	bfi	r1, r3, #6, #10
 8010bc4:	4803      	ldr	r0, [pc, #12]	; (8010bd4 <smp_chan_get+0x3c>)
 8010bc6:	f7f3 fcc1 	bl	800454c <log_0>
		return NULL;
 8010bca:	e7eb      	b.n	8010ba4 <smp_chan_get+0xc>
 8010bcc:	0801d730 	.word	0x0801d730
 8010bd0:	0801d6d0 	.word	0x0801d6d0
 8010bd4:	080214dc 	.word	0x080214dc

08010bd8 <smp_create_pdu>:
{
 8010bd8:	b570      	push	{r4, r5, r6, lr}
 8010bda:	460d      	mov	r5, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
 8010bdc:	f100 06bc 	add.w	r6, r0, #188	; 0xbc
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8010be0:	f3bf 8f5b 	dmb	ish
 8010be4:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8010be8:	f3bf 8f5b 	dmb	ish
 8010bec:	f013 0f10 	tst.w	r3, #16
 8010bf0:	d00e      	beq.n	8010c10 <smp_create_pdu+0x38>
		timeout = K_NO_WAIT;
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
 8010bf6:	2100      	movs	r1, #0
 8010bf8:	4608      	mov	r0, r1
 8010bfa:	f008 f93a 	bl	8018e72 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
 8010bfe:	4604      	mov	r4, r0
 8010c00:	b148      	cbz	r0, 8010c16 <smp_create_pdu+0x3e>
	hdr = net_buf_add(buf, sizeof(*hdr));
 8010c02:	2101      	movs	r1, #1
 8010c04:	3008      	adds	r0, #8
 8010c06:	f00a fa26 	bl	801b056 <net_buf_simple_add>
	hdr->code = op;
 8010c0a:	7005      	strb	r5, [r0, #0]
}
 8010c0c:	4620      	mov	r0, r4
 8010c0e:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
 8010c10:	4a07      	ldr	r2, [pc, #28]	; (8010c30 <smp_create_pdu+0x58>)
 8010c12:	2300      	movs	r3, #0
 8010c14:	e7ef      	b.n	8010bf6 <smp_create_pdu+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8010c16:	f3bf 8f5b 	dmb	ish
 8010c1a:	e856 3f00 	ldrex	r3, [r6]
 8010c1e:	f043 0310 	orr.w	r3, r3, #16
 8010c22:	e846 3200 	strex	r2, r3, [r6]
 8010c26:	2a00      	cmp	r2, #0
 8010c28:	d1f7      	bne.n	8010c1a <smp_create_pdu+0x42>
 8010c2a:	f3bf 8f5b 	dmb	ish
		return NULL;
 8010c2e:	e7ed      	b.n	8010c0c <smp_create_pdu+0x34>
 8010c30:	000493e0 	.word	0x000493e0

08010c34 <sc_smp_check_confirm>:
#endif /* CONFIG_BT_PERIPHERAL */
	}
}

static uint8_t sc_smp_check_confirm(struct bt_smp *smp)
{
 8010c34:	b510      	push	{r4, lr}
 8010c36:	b086      	sub	sp, #24
 8010c38:	4604      	mov	r4, r0
	uint8_t cfm[16];
	uint8_t r;

	switch (smp->method) {
 8010c3a:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
 8010c3e:	2b05      	cmp	r3, #5
 8010c40:	d826      	bhi.n	8010c90 <sc_smp_check_confirm+0x5c>
 8010c42:	e8df f003 	tbb	[pc, r3]
 8010c46:	0510      	.short	0x0510
 8010c48:	03251005 	.word	0x03251005
 8010c4c:	2000      	movs	r0, #0
 8010c4e:	e01d      	b.n	8010c8c <sc_smp_check_confirm+0x58>
		 * bit of Z is set equal to one and the least
		 * significant bit is made up from one bit of the
		 * passkey e.g. if the passkey bit is 1, then Z = 0x81
		 * and if the passkey bit is 0, then Z = 0x80.
		 */
		r = (smp->passkey >> smp->passkey_round) & 0x01;
 8010c50:	f8d0 3190 	ldr.w	r3, [r0, #400]	; 0x190
 8010c54:	f890 2194 	ldrb.w	r2, [r0, #404]	; 0x194
 8010c58:	40d3      	lsrs	r3, r2
 8010c5a:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
 8010c5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010c62:	b2db      	uxtb	r3, r3
		break;
 8010c64:	e000      	b.n	8010c68 <sc_smp_check_confirm+0x34>
	switch (smp->method) {
 8010c66:	2300      	movs	r3, #0
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}

	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
 8010c68:	aa02      	add	r2, sp, #8
 8010c6a:	9200      	str	r2, [sp, #0]
 8010c6c:	f104 02ef 	add.w	r2, r4, #239	; 0xef
 8010c70:	490a      	ldr	r1, [pc, #40]	; (8010c9c <sc_smp_check_confirm+0x68>)
 8010c72:	6809      	ldr	r1, [r1, #0]
 8010c74:	f204 100f 	addw	r0, r4, #271	; 0x10f
 8010c78:	f009 fbdc 	bl	801a434 <smp_f4>
 8010c7c:	b950      	cbnz	r0, 8010c94 <sc_smp_check_confirm+0x60>
	}

	BT_DBG("pcnf %s", bt_hex(smp->pcnf, 16));
	BT_DBG("cfm %s", bt_hex(cfm, 16));

	if (memcmp(smp->pcnf, cfm, 16)) {
 8010c7e:	2210      	movs	r2, #16
 8010c80:	a902      	add	r1, sp, #8
 8010c82:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
 8010c86:	f007 f8e1 	bl	8017e4c <memcmp>
 8010c8a:	b928      	cbnz	r0, 8010c98 <sc_smp_check_confirm+0x64>
		return BT_SMP_ERR_CONFIRM_FAILED;
	}

	return 0;
}
 8010c8c:	b006      	add	sp, #24
 8010c8e:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
 8010c90:	2008      	movs	r0, #8
 8010c92:	e7fb      	b.n	8010c8c <sc_smp_check_confirm+0x58>
		return BT_SMP_ERR_UNSPECIFIED;
 8010c94:	2008      	movs	r0, #8
 8010c96:	e7f9      	b.n	8010c8c <sc_smp_check_confirm+0x58>
		return BT_SMP_ERR_CONFIRM_FAILED;
 8010c98:	2004      	movs	r0, #4
 8010c9a:	e7f7      	b.n	8010c8c <sc_smp_check_confirm+0x58>
 8010c9c:	2000214c 	.word	0x2000214c

08010ca0 <smp_f5>:
{
 8010ca0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ca4:	b09b      	sub	sp, #108	; 0x6c
 8010ca6:	4604      	mov	r4, r0
 8010ca8:	460f      	mov	r7, r1
 8010caa:	4616      	mov	r6, r2
 8010cac:	461d      	mov	r5, r3
 8010cae:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 8010cb2:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
	uint8_t m[53] = { 0x00, /* counter */
 8010cb6:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8010cba:	f8df e124 	ldr.w	lr, [pc, #292]	; 8010de0 <smp_f5+0x140>
 8010cbe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010cc2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010cc6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010cca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010cce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010cd2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010cd6:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010cda:	f84c 0b04 	str.w	r0, [ip], #4
 8010cde:	f88c 1000 	strb.w	r1, [ip]
	psrc += length - 1;
 8010ce2:	f104 001f 	add.w	r0, r4, #31
	uint8_t *pdst = (uint8_t *)dst;
 8010ce6:	466b      	mov	r3, sp
	for (; length > 0; length--) {
 8010ce8:	2220      	movs	r2, #32
 8010cea:	b12a      	cbz	r2, 8010cf8 <smp_f5+0x58>
		*pdst++ = *psrc--;
 8010cec:	f810 1901 	ldrb.w	r1, [r0], #-1
 8010cf0:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
 8010cf4:	3a01      	subs	r2, #1
 8010cf6:	e7f8      	b.n	8010cea <smp_f5+0x4a>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
 8010cf8:	ab08      	add	r3, sp, #32
 8010cfa:	2220      	movs	r2, #32
 8010cfc:	4669      	mov	r1, sp
 8010cfe:	4837      	ldr	r0, [pc, #220]	; (8010ddc <smp_f5+0x13c>)
 8010d00:	f009 fb76 	bl	801a3f0 <bt_smp_aes_cmac>
	if (err) {
 8010d04:	4684      	mov	ip, r0
 8010d06:	2800      	cmp	r0, #0
 8010d08:	d164      	bne.n	8010dd4 <smp_f5+0x134>
	psrc += length - 1;
 8010d0a:	370f      	adds	r7, #15
	uint8_t *pdst = (uint8_t *)dst;
 8010d0c:	f10d 0335 	add.w	r3, sp, #53	; 0x35
	for (; length > 0; length--) {
 8010d10:	2210      	movs	r2, #16
 8010d12:	e004      	b.n	8010d1e <smp_f5+0x7e>
		*pdst++ = *psrc--;
 8010d14:	f817 1901 	ldrb.w	r1, [r7], #-1
 8010d18:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
 8010d1c:	3a01      	subs	r2, #1
 8010d1e:	2a00      	cmp	r2, #0
 8010d20:	d1f8      	bne.n	8010d14 <smp_f5+0x74>
	psrc += length - 1;
 8010d22:	360f      	adds	r6, #15
	uint8_t *pdst = (uint8_t *)dst;
 8010d24:	f10d 0345 	add.w	r3, sp, #69	; 0x45
	for (; length > 0; length--) {
 8010d28:	2210      	movs	r2, #16
 8010d2a:	b12a      	cbz	r2, 8010d38 <smp_f5+0x98>
		*pdst++ = *psrc--;
 8010d2c:	f816 1901 	ldrb.w	r1, [r6], #-1
 8010d30:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
 8010d34:	3a01      	subs	r2, #1
 8010d36:	e7f8      	b.n	8010d2a <smp_f5+0x8a>
	m[37] = a1->type;
 8010d38:	f815 3b06 	ldrb.w	r3, [r5], #6
 8010d3c:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	uint8_t *pdst = (uint8_t *)dst;
 8010d40:	f10d 0356 	add.w	r3, sp, #86	; 0x56
	for (; length > 0; length--) {
 8010d44:	2206      	movs	r2, #6
 8010d46:	b12a      	cbz	r2, 8010d54 <smp_f5+0xb4>
		*pdst++ = *psrc--;
 8010d48:	f815 1901 	ldrb.w	r1, [r5], #-1
 8010d4c:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
 8010d50:	3a01      	subs	r2, #1
 8010d52:	e7f8      	b.n	8010d46 <smp_f5+0xa6>
	m[44] = a2->type;
 8010d54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010d56:	f813 2b06 	ldrb.w	r2, [r3], #6
 8010d5a:	f88d 205c 	strb.w	r2, [sp, #92]	; 0x5c
	uint8_t *pdst = (uint8_t *)dst;
 8010d5e:	f10d 025d 	add.w	r2, sp, #93	; 0x5d
	for (; length > 0; length--) {
 8010d62:	2406      	movs	r4, #6
 8010d64:	e004      	b.n	8010d70 <smp_f5+0xd0>
		*pdst++ = *psrc--;
 8010d66:	f813 1901 	ldrb.w	r1, [r3], #-1
 8010d6a:	f802 1b01 	strb.w	r1, [r2], #1
	for (; length > 0; length--) {
 8010d6e:	3c01      	subs	r4, #1
 8010d70:	2c00      	cmp	r4, #0
 8010d72:	d1f8      	bne.n	8010d66 <smp_f5+0xc6>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
 8010d74:	4643      	mov	r3, r8
 8010d76:	2235      	movs	r2, #53	; 0x35
 8010d78:	a90c      	add	r1, sp, #48	; 0x30
 8010d7a:	a808      	add	r0, sp, #32
 8010d7c:	f009 fb38 	bl	801a3f0 <bt_smp_aes_cmac>
	if (err) {
 8010d80:	4684      	mov	ip, r0
 8010d82:	bb38      	cbnz	r0, 8010dd4 <smp_f5+0x134>
	for (i = 0; i < (length/2); i++) {
 8010d84:	4623      	mov	r3, r4
 8010d86:	e00a      	b.n	8010d9e <smp_f5+0xfe>
		uint8_t tmp = ((uint8_t *)buf)[i];
 8010d88:	f818 1003 	ldrb.w	r1, [r8, r3]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
 8010d8c:	f1c3 020f 	rsb	r2, r3, #15
 8010d90:	f818 0002 	ldrb.w	r0, [r8, r2]
 8010d94:	f808 0003 	strb.w	r0, [r8, r3]
		((uint8_t *)buf)[length - 1 - i] = tmp;
 8010d98:	f808 1002 	strb.w	r1, [r8, r2]
	for (i = 0; i < (length/2); i++) {
 8010d9c:	3301      	adds	r3, #1
 8010d9e:	2b07      	cmp	r3, #7
 8010da0:	d9f2      	bls.n	8010d88 <smp_f5+0xe8>
	m[0] = 0x01;
 8010da2:	2301      	movs	r3, #1
 8010da4:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
 8010da8:	464b      	mov	r3, r9
 8010daa:	2235      	movs	r2, #53	; 0x35
 8010dac:	a90c      	add	r1, sp, #48	; 0x30
 8010dae:	a808      	add	r0, sp, #32
 8010db0:	f009 fb1e 	bl	801a3f0 <bt_smp_aes_cmac>
	if (err) {
 8010db4:	4684      	mov	ip, r0
 8010db6:	b968      	cbnz	r0, 8010dd4 <smp_f5+0x134>
 8010db8:	2c07      	cmp	r4, #7
 8010dba:	d80b      	bhi.n	8010dd4 <smp_f5+0x134>
		uint8_t tmp = ((uint8_t *)buf)[i];
 8010dbc:	f819 2004 	ldrb.w	r2, [r9, r4]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
 8010dc0:	f1c4 030f 	rsb	r3, r4, #15
 8010dc4:	f819 1003 	ldrb.w	r1, [r9, r3]
 8010dc8:	f809 1004 	strb.w	r1, [r9, r4]
		((uint8_t *)buf)[length - 1 - i] = tmp;
 8010dcc:	f809 2003 	strb.w	r2, [r9, r3]
	for (i = 0; i < (length/2); i++) {
 8010dd0:	3401      	adds	r4, #1
 8010dd2:	e7f1      	b.n	8010db8 <smp_f5+0x118>
}
 8010dd4:	4660      	mov	r0, ip
 8010dd6:	b01b      	add	sp, #108	; 0x6c
 8010dd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ddc:	08021738 	.word	0x08021738
 8010de0:	0801d84c 	.word	0x0801d84c

08010de4 <smp_g2>:
{
 8010de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010de6:	b099      	sub	sp, #100	; 0x64
 8010de8:	9c1e      	ldr	r4, [sp, #120]	; 0x78
	psrc += length - 1;
 8010dea:	301f      	adds	r0, #31
	uint8_t *pdst = (uint8_t *)dst;
 8010dec:	ad04      	add	r5, sp, #16
	for (; length > 0; length--) {
 8010dee:	2620      	movs	r6, #32
 8010df0:	b12e      	cbz	r6, 8010dfe <smp_g2+0x1a>
		*pdst++ = *psrc--;
 8010df2:	f810 7901 	ldrb.w	r7, [r0], #-1
 8010df6:	f805 7b01 	strb.w	r7, [r5], #1
	for (; length > 0; length--) {
 8010dfa:	3e01      	subs	r6, #1
 8010dfc:	e7f8      	b.n	8010df0 <smp_g2+0xc>
	psrc += length - 1;
 8010dfe:	311f      	adds	r1, #31
	uint8_t *pdst = (uint8_t *)dst;
 8010e00:	a80c      	add	r0, sp, #48	; 0x30
	for (; length > 0; length--) {
 8010e02:	2520      	movs	r5, #32
 8010e04:	b12d      	cbz	r5, 8010e12 <smp_g2+0x2e>
		*pdst++ = *psrc--;
 8010e06:	f811 6901 	ldrb.w	r6, [r1], #-1
 8010e0a:	f800 6b01 	strb.w	r6, [r0], #1
	for (; length > 0; length--) {
 8010e0e:	3d01      	subs	r5, #1
 8010e10:	e7f8      	b.n	8010e04 <smp_g2+0x20>
	psrc += length - 1;
 8010e12:	330f      	adds	r3, #15
	uint8_t *pdst = (uint8_t *)dst;
 8010e14:	a914      	add	r1, sp, #80	; 0x50
	for (; length > 0; length--) {
 8010e16:	2010      	movs	r0, #16
 8010e18:	b128      	cbz	r0, 8010e26 <smp_g2+0x42>
		*pdst++ = *psrc--;
 8010e1a:	f813 5901 	ldrb.w	r5, [r3], #-1
 8010e1e:	f801 5b01 	strb.w	r5, [r1], #1
	for (; length > 0; length--) {
 8010e22:	3801      	subs	r0, #1
 8010e24:	e7f8      	b.n	8010e18 <smp_g2+0x34>
	psrc += length - 1;
 8010e26:	320f      	adds	r2, #15
	uint8_t *pdst = (uint8_t *)dst;
 8010e28:	466b      	mov	r3, sp
	for (; length > 0; length--) {
 8010e2a:	2110      	movs	r1, #16
 8010e2c:	e004      	b.n	8010e38 <smp_g2+0x54>
		*pdst++ = *psrc--;
 8010e2e:	f812 0901 	ldrb.w	r0, [r2], #-1
 8010e32:	f803 0b01 	strb.w	r0, [r3], #1
	for (; length > 0; length--) {
 8010e36:	3901      	subs	r1, #1
 8010e38:	2900      	cmp	r1, #0
 8010e3a:	d1f8      	bne.n	8010e2e <smp_g2+0x4a>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
 8010e3c:	466b      	mov	r3, sp
 8010e3e:	2250      	movs	r2, #80	; 0x50
 8010e40:	a904      	add	r1, sp, #16
 8010e42:	4668      	mov	r0, sp
 8010e44:	f009 fad4 	bl	801a3f0 <bt_smp_aes_cmac>
	if (err) {
 8010e48:	4605      	mov	r5, r0
 8010e4a:	b110      	cbz	r0, 8010e52 <smp_g2+0x6e>
}
 8010e4c:	4628      	mov	r0, r5
 8010e4e:	b019      	add	sp, #100	; 0x64
 8010e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(passkey, xs + 12, 4);
 8010e52:	2204      	movs	r2, #4
 8010e54:	a903      	add	r1, sp, #12
 8010e56:	4620      	mov	r0, r4
 8010e58:	f007 f810 	bl	8017e7c <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
 8010e5c:	6822      	ldr	r2, [r4, #0]
 8010e5e:	0a13      	lsrs	r3, r2, #8
 8010e60:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010e64:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8010e68:	0211      	lsls	r1, r2, #8
 8010e6a:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8010e6e:	430b      	orrs	r3, r1
 8010e70:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010e74:	4a04      	ldr	r2, [pc, #16]	; (8010e88 <smp_g2+0xa4>)
 8010e76:	fba2 1203 	umull	r1, r2, r2, r3
 8010e7a:	0c92      	lsrs	r2, r2, #18
 8010e7c:	4903      	ldr	r1, [pc, #12]	; (8010e8c <smp_g2+0xa8>)
 8010e7e:	fb01 3212 	mls	r2, r1, r2, r3
 8010e82:	6022      	str	r2, [r4, #0]
	return 0;
 8010e84:	e7e2      	b.n	8010e4c <smp_g2+0x68>
 8010e86:	bf00      	nop
 8010e88:	431bde83 	.word	0x431bde83
 8010e8c:	000f4240 	.word	0x000f4240

08010e90 <smp_send>:
{
 8010e90:	b510      	push	{r4, lr}
 8010e92:	b082      	sub	sp, #8
 8010e94:	4604      	mov	r4, r0
 8010e96:	4613      	mov	r3, r2
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
 8010e98:	2200      	movs	r2, #0
 8010e9a:	9200      	str	r2, [sp, #0]
 8010e9c:	460a      	mov	r2, r1
 8010e9e:	2106      	movs	r1, #6
 8010ea0:	6800      	ldr	r0, [r0, #0]
 8010ea2:	f007 ffeb 	bl	8018e7c <bt_l2cap_send_cb>
 8010ea6:	4a04      	ldr	r2, [pc, #16]	; (8010eb8 <smp_send+0x28>)
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	f504 71d4 	add.w	r1, r4, #424	; 0x1a8
 8010eae:	4803      	ldr	r0, [pc, #12]	; (8010ebc <smp_send+0x2c>)
 8010eb0:	f003 fbd2 	bl	8014658 <k_delayed_work_submit_to_queue>
}
 8010eb4:	b002      	add	sp, #8
 8010eb6:	bd10      	pop	{r4, pc}
 8010eb8:	000493e0 	.word	0x000493e0
 8010ebc:	20001408 	.word	0x20001408

08010ec0 <smp_send_pairing_confirm>:
{
 8010ec0:	b570      	push	{r4, r5, r6, lr}
 8010ec2:	b082      	sub	sp, #8
 8010ec4:	4605      	mov	r5, r0
	switch (smp->method) {
 8010ec6:	f890 40c0 	ldrb.w	r4, [r0, #192]	; 0xc0
 8010eca:	2c02      	cmp	r4, #2
 8010ecc:	d804      	bhi.n	8010ed8 <smp_send_pairing_confirm+0x18>
 8010ece:	b263      	sxtb	r3, r4
 8010ed0:	b933      	cbnz	r3, 8010ee0 <smp_send_pairing_confirm+0x20>
 8010ed2:	b18c      	cbz	r4, 8010ef8 <smp_send_pairing_confirm+0x38>
 8010ed4:	2008      	movs	r0, #8
 8010ed6:	e039      	b.n	8010f4c <smp_send_pairing_confirm+0x8c>
 8010ed8:	2c03      	cmp	r4, #3
 8010eda:	d00c      	beq.n	8010ef6 <smp_send_pairing_confirm+0x36>
 8010edc:	2008      	movs	r0, #8
 8010ede:	e035      	b.n	8010f4c <smp_send_pairing_confirm+0x8c>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
 8010ee0:	f8d0 4190 	ldr.w	r4, [r0, #400]	; 0x190
 8010ee4:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
 8010ee8:	40dc      	lsrs	r4, r3
 8010eea:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
 8010eee:	f064 047f 	orn	r4, r4, #127	; 0x7f
 8010ef2:	b2e4      	uxtb	r4, r4
		break;
 8010ef4:	e000      	b.n	8010ef8 <smp_send_pairing_confirm+0x38>
	switch (smp->method) {
 8010ef6:	2400      	movs	r4, #0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
 8010ef8:	2210      	movs	r2, #16
 8010efa:	2103      	movs	r1, #3
 8010efc:	4628      	mov	r0, r5
 8010efe:	f7ff fe6b 	bl	8010bd8 <smp_create_pdu>
	if (!buf) {
 8010f02:	4606      	mov	r6, r0
 8010f04:	b348      	cbz	r0, 8010f5a <smp_send_pairing_confirm+0x9a>
	req = net_buf_add(buf, sizeof(*req));
 8010f06:	2110      	movs	r1, #16
 8010f08:	3008      	adds	r0, #8
 8010f0a:	f00a f8a4 	bl	801b056 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
 8010f0e:	9000      	str	r0, [sp, #0]
 8010f10:	4623      	mov	r3, r4
 8010f12:	f105 02df 	add.w	r2, r5, #223	; 0xdf
 8010f16:	f205 110f 	addw	r1, r5, #271	; 0x10f
 8010f1a:	4811      	ldr	r0, [pc, #68]	; (8010f60 <smp_send_pairing_confirm+0xa0>)
 8010f1c:	6800      	ldr	r0, [r0, #0]
 8010f1e:	f009 fa89 	bl	801a434 <smp_f4>
 8010f22:	b9a8      	cbnz	r0, 8010f50 <smp_send_pairing_confirm+0x90>
	smp_send(smp, buf, NULL, NULL);
 8010f24:	2300      	movs	r3, #0
 8010f26:	461a      	mov	r2, r3
 8010f28:	4631      	mov	r1, r6
 8010f2a:	4628      	mov	r0, r5
 8010f2c:	f7ff ffb0 	bl	8010e90 <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
 8010f30:	35bc      	adds	r5, #188	; 0xbc
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8010f32:	f3bf 8f5b 	dmb	ish
 8010f36:	e855 3f00 	ldrex	r3, [r5]
 8010f3a:	f023 0301 	bic.w	r3, r3, #1
 8010f3e:	e845 3200 	strex	r2, r3, [r5]
 8010f42:	2a00      	cmp	r2, #0
 8010f44:	d1f7      	bne.n	8010f36 <smp_send_pairing_confirm+0x76>
 8010f46:	f3bf 8f5b 	dmb	ish
	return 0;
 8010f4a:	2000      	movs	r0, #0
}
 8010f4c:	b002      	add	sp, #8
 8010f4e:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
 8010f50:	4630      	mov	r0, r6
 8010f52:	f00a f836 	bl	801afc2 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
 8010f56:	2008      	movs	r0, #8
 8010f58:	e7f8      	b.n	8010f4c <smp_send_pairing_confirm+0x8c>
		return BT_SMP_ERR_UNSPECIFIED;
 8010f5a:	2008      	movs	r0, #8
 8010f5c:	e7f6      	b.n	8010f4c <smp_send_pairing_confirm+0x8c>
 8010f5e:	bf00      	nop
 8010f60:	2000214c 	.word	0x2000214c

08010f64 <sc_send_public_key>:
{
 8010f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f66:	4604      	mov	r4, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
 8010f68:	2240      	movs	r2, #64	; 0x40
 8010f6a:	210c      	movs	r1, #12
 8010f6c:	f7ff fe34 	bl	8010bd8 <smp_create_pdu>
	if (!req_buf) {
 8010f70:	b1c0      	cbz	r0, 8010fa4 <sc_send_public_key+0x40>
 8010f72:	4606      	mov	r6, r0
	req = net_buf_add(req_buf, sizeof(*req));
 8010f74:	2140      	movs	r1, #64	; 0x40
 8010f76:	3008      	adds	r0, #8
 8010f78:	f00a f86d 	bl	801b056 <net_buf_simple_add>
 8010f7c:	4605      	mov	r5, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
 8010f7e:	4f0a      	ldr	r7, [pc, #40]	; (8010fa8 <sc_send_public_key+0x44>)
 8010f80:	2220      	movs	r2, #32
 8010f82:	6839      	ldr	r1, [r7, #0]
 8010f84:	f006 ff7a 	bl	8017e7c <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
 8010f88:	6839      	ldr	r1, [r7, #0]
 8010f8a:	2220      	movs	r2, #32
 8010f8c:	4411      	add	r1, r2
 8010f8e:	18a8      	adds	r0, r5, r2
 8010f90:	f006 ff74 	bl	8017e7c <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
 8010f94:	2300      	movs	r3, #0
 8010f96:	461a      	mov	r2, r3
 8010f98:	4631      	mov	r1, r6
 8010f9a:	4620      	mov	r0, r4
 8010f9c:	f7ff ff78 	bl	8010e90 <smp_send>
	return 0;
 8010fa0:	2000      	movs	r0, #0
}
 8010fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
 8010fa4:	2008      	movs	r0, #8
 8010fa6:	e7fc      	b.n	8010fa2 <sc_send_public_key+0x3e>
 8010fa8:	2000214c 	.word	0x2000214c

08010fac <smp_pairing_complete>:
{
 8010fac:	b570      	push	{r4, r5, r6, lr}
 8010fae:	4604      	mov	r4, r0
	if (!status) {
 8010fb0:	b389      	cbz	r1, 8011016 <smp_pairing_complete+0x6a>
 8010fb2:	460d      	mov	r5, r1
		uint8_t auth_err = auth_err_get(status);
 8010fb4:	4608      	mov	r0, r1
 8010fb6:	f009 f93e 	bl	801a236 <auth_err_get>
 8010fba:	4606      	mov	r6, r0
		if (smp->chan.chan.conn->le.keys &&
 8010fbc:	6823      	ldr	r3, [r4, #0]
 8010fbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010fc2:	b19b      	cbz	r3, 8010fec <smp_pairing_complete+0x40>
		    (!smp->chan.chan.conn->le.keys->enc_size ||
 8010fc4:	7b1b      	ldrb	r3, [r3, #12]
		if (smp->chan.chan.conn->le.keys &&
 8010fc6:	b143      	cbz	r3, 8010fda <smp_pairing_complete+0x2e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8010fc8:	f3bf 8f5b 	dmb	ish
 8010fcc:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8010fd0:	f3bf 8f5b 	dmb	ish
		    (!smp->chan.chan.conn->le.keys->enc_size ||
 8010fd4:	f013 0f04 	tst.w	r3, #4
 8010fd8:	d008      	beq.n	8010fec <smp_pairing_complete+0x40>
			bt_keys_clear(smp->chan.chan.conn->le.keys);
 8010fda:	6823      	ldr	r3, [r4, #0]
 8010fdc:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8010fe0:	f001 f8f2 	bl	80121c8 <bt_keys_clear>
			smp->chan.chan.conn->le.keys = NULL;
 8010fe4:	6823      	ldr	r3, [r4, #0]
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8010fec:	f3bf 8f5b 	dmb	ish
 8010ff0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8010ff4:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
 8010ff8:	f013 0f04 	tst.w	r3, #4
 8010ffc:	d027      	beq.n	801104e <smp_pairing_complete+0xa2>
		if (bt_auth && bt_auth->pairing_failed) {
 8010ffe:	4b17      	ldr	r3, [pc, #92]	; (801105c <smp_pairing_complete+0xb0>)
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	b123      	cbz	r3, 801100e <smp_pairing_complete+0x62>
 8011004:	6a1b      	ldr	r3, [r3, #32]
 8011006:	b113      	cbz	r3, 801100e <smp_pairing_complete+0x62>
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
 8011008:	4631      	mov	r1, r6
 801100a:	6820      	ldr	r0, [r4, #0]
 801100c:	4798      	blx	r3
	smp_reset(smp);
 801100e:	4620      	mov	r0, r4
 8011010:	f009 f9bb 	bl	801a38a <smp_reset>
}
 8011014:	bd70      	pop	{r4, r5, r6, pc}
 8011016:	f3bf 8f5b 	dmb	ish
 801101a:	f8d0 50bc 	ldr.w	r5, [r0, #188]	; 0xbc
 801101e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
 8011022:	f415 5f80 	tst.w	r5, #4096	; 0x1000
 8011026:	f3c5 3500 	ubfx	r5, r5, #12, #1
		if (bond_flag) {
 801102a:	d10a      	bne.n	8011042 <smp_pairing_complete+0x96>
		if (bt_auth && bt_auth->pairing_complete) {
 801102c:	4b0b      	ldr	r3, [pc, #44]	; (801105c <smp_pairing_complete+0xb0>)
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d0ec      	beq.n	801100e <smp_pairing_complete+0x62>
 8011034:	69db      	ldr	r3, [r3, #28]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d0e9      	beq.n	801100e <smp_pairing_complete+0x62>
			bt_auth->pairing_complete(smp->chan.chan.conn,
 801103a:	4629      	mov	r1, r5
 801103c:	6820      	ldr	r0, [r4, #0]
 801103e:	4798      	blx	r3
 8011040:	e7e5      	b.n	801100e <smp_pairing_complete+0x62>
			bt_keys_store(smp->chan.chan.conn->le.keys);
 8011042:	6803      	ldr	r3, [r0, #0]
 8011044:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8011048:	f001 f9c6 	bl	80123d8 <bt_keys_store>
 801104c:	e7ee      	b.n	801102c <smp_pairing_complete+0x80>
			bt_conn_security_changed(smp->chan.chan.conn, status,
 801104e:	4632      	mov	r2, r6
 8011050:	4629      	mov	r1, r5
 8011052:	6820      	ldr	r0, [r4, #0]
 8011054:	f7fc f950 	bl	800d2f8 <bt_conn_security_changed>
 8011058:	e7d1      	b.n	8010ffe <smp_pairing_complete+0x52>
 801105a:	bf00      	nop
 801105c:	20002088 	.word	0x20002088

08011060 <bt_smp_dhkey_ready>:
{
 8011060:	b510      	push	{r4, lr}
 8011062:	4601      	mov	r1, r0
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
 8011064:	2300      	movs	r3, #0
 8011066:	2b00      	cmp	r3, #0
 8011068:	dd2e      	ble.n	80110c8 <bt_smp_dhkey_ready+0x68>
	struct bt_smp *smp = NULL;
 801106a:	2400      	movs	r4, #0
	if (!smp) {
 801106c:	2c00      	cmp	r4, #0
 801106e:	d05d      	beq.n	801112c <bt_smp_dhkey_ready+0xcc>
	if (!dhkey) {
 8011070:	2900      	cmp	r1, #0
 8011072:	d04a      	beq.n	801110a <bt_smp_dhkey_ready+0xaa>
	memcpy(smp->dhkey, dhkey, 32);
 8011074:	2220      	movs	r2, #32
 8011076:	f204 104f 	addw	r0, r4, #335	; 0x14f
 801107a:	f006 feff 	bl	8017e7c <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
 801107e:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8011082:	f3bf 8f5b 	dmb	ish
 8011086:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
 801108a:	f3bf 8f5b 	dmb	ish
 801108e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8011092:	d13f      	bne.n	8011114 <bt_smp_dhkey_ready+0xb4>
 8011094:	f3bf 8f5b 	dmb	ish
 8011098:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
 801109c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
 80110a0:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80110a4:	d143      	bne.n	801112e <bt_smp_dhkey_ready+0xce>
 80110a6:	f3bf 8f5b 	dmb	ish
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
 80110b0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80110b4:	d03a      	beq.n	801112c <bt_smp_dhkey_ready+0xcc>
		err = compute_and_check_and_send_slave_dhcheck(smp);
 80110b6:	4620      	mov	r0, r4
 80110b8:	f009 fae0 	bl	801a67c <compute_and_check_and_send_slave_dhcheck>
		if (err) {
 80110bc:	4601      	mov	r1, r0
 80110be:	b3a8      	cbz	r0, 801112c <bt_smp_dhkey_ready+0xcc>
			smp_error(smp, err);
 80110c0:	4620      	mov	r0, r4
 80110c2:	f009 fbf6 	bl	801a8b2 <smp_error>
 80110c6:	e031      	b.n	801112c <bt_smp_dhkey_ready+0xcc>
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
 80110c8:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80110cc:	fb02 f203 	mul.w	r2, r2, r3
 80110d0:	f102 04b8 	add.w	r4, r2, #184	; 0xb8
 80110d4:	4a1c      	ldr	r2, [pc, #112]	; (8011148 <bt_smp_dhkey_ready+0xe8>)
 80110d6:	4422      	add	r2, r4
 80110d8:	3204      	adds	r2, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 80110da:	f3bf 8f5b 	dmb	ish
 80110de:	e852 0f00 	ldrex	r0, [r2]
 80110e2:	f020 0480 	bic.w	r4, r0, #128	; 0x80
 80110e6:	e842 4c00 	strex	ip, r4, [r2]
 80110ea:	f1bc 0f00 	cmp.w	ip, #0
 80110ee:	d1f6      	bne.n	80110de <bt_smp_dhkey_ready+0x7e>
 80110f0:	f3bf 8f5b 	dmb	ish
 80110f4:	f010 0f80 	tst.w	r0, #128	; 0x80
 80110f8:	d101      	bne.n	80110fe <bt_smp_dhkey_ready+0x9e>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
 80110fa:	3301      	adds	r3, #1
 80110fc:	e7b3      	b.n	8011066 <bt_smp_dhkey_ready+0x6>
			smp = &bt_smp_pool[i];
 80110fe:	4c12      	ldr	r4, [pc, #72]	; (8011148 <bt_smp_dhkey_ready+0xe8>)
 8011100:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8011104:	fb02 4403 	mla	r4, r2, r3, r4
			break;
 8011108:	e7b0      	b.n	801106c <bt_smp_dhkey_ready+0xc>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
 801110a:	210b      	movs	r1, #11
 801110c:	4620      	mov	r0, r4
 801110e:	f009 fbd0 	bl	801a8b2 <smp_error>
		return;
 8011112:	e00b      	b.n	801112c <bt_smp_dhkey_ready+0xcc>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8011114:	f3bf 8f5b 	dmb	ish
 8011118:	e853 2f00 	ldrex	r2, [r3]
 801111c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011120:	e843 2100 	strex	r1, r2, [r3]
 8011124:	2900      	cmp	r1, #0
 8011126:	d1f7      	bne.n	8011118 <bt_smp_dhkey_ready+0xb8>
 8011128:	f3bf 8f5b 	dmb	ish
}
 801112c:	bd10      	pop	{r4, pc}
 801112e:	f3bf 8f5b 	dmb	ish
 8011132:	e853 2f00 	ldrex	r2, [r3]
 8011136:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801113a:	e843 2100 	strex	r1, r2, [r3]
 801113e:	2900      	cmp	r1, #0
 8011140:	d1f7      	bne.n	8011132 <bt_smp_dhkey_ready+0xd2>
 8011142:	f3bf 8f5b 	dmb	ish
		return;
 8011146:	e7f1      	b.n	801112c <bt_smp_dhkey_ready+0xcc>
 8011148:	200010c0 	.word	0x200010c0

0801114c <smp_timeout>:
{
 801114c:	b538      	push	{r3, r4, r5, lr}
 801114e:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
 8011150:	f5a0 75d4 	sub.w	r5, r0, #424	; 0x1a8
	BT_ERR("SMP Timeout");
 8011154:	f04f 0100 	mov.w	r1, #0
 8011158:	2301      	movs	r3, #1
 801115a:	f363 0102 	bfi	r1, r3, #0, #3
 801115e:	f36f 01c5 	bfc	r1, #3, #3
 8011162:	4b0e      	ldr	r3, [pc, #56]	; (801119c <smp_timeout+0x50>)
 8011164:	4a0e      	ldr	r2, [pc, #56]	; (80111a0 <smp_timeout+0x54>)
 8011166:	1a9b      	subs	r3, r3, r2
 8011168:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 801116c:	f363 118f 	bfi	r1, r3, #6, #10
 8011170:	480c      	ldr	r0, [pc, #48]	; (80111a4 <smp_timeout+0x58>)
 8011172:	f7f3 f9eb 	bl	800454c <log_0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
 8011176:	2108      	movs	r1, #8
 8011178:	4628      	mov	r0, r5
 801117a:	f7ff ff17 	bl	8010fac <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
 801117e:	3cec      	subs	r4, #236	; 0xec
 8011180:	f3bf 8f5b 	dmb	ish
 8011184:	e854 3f00 	ldrex	r3, [r4]
 8011188:	f043 0310 	orr.w	r3, r3, #16
 801118c:	e844 3200 	strex	r2, r3, [r4]
 8011190:	2a00      	cmp	r2, #0
 8011192:	d1f7      	bne.n	8011184 <smp_timeout+0x38>
 8011194:	f3bf 8f5b 	dmb	ish
}
 8011198:	bd38      	pop	{r3, r4, r5, pc}
 801119a:	bf00      	nop
 801119c:	0801d730 	.word	0x0801d730
 80111a0:	0801d6d0 	.word	0x0801d6d0
 80111a4:	080214f8 	.word	0x080214f8

080111a8 <display_passkey>:
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
	return 0;
}

static uint8_t display_passkey(struct bt_smp *smp)
{
 80111a8:	b510      	push	{r4, lr}
 80111aa:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		smp->passkey = fixed_passkey;
	} else {
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
 80111ac:	2104      	movs	r1, #4
 80111ae:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 80111b2:	f7fb fefd 	bl	800cfb0 <bt_rand>
 80111b6:	bb48      	cbnz	r0, 801120c <display_passkey+0x64>
			return BT_SMP_ERR_UNSPECIFIED;
		}

		smp->passkey %= 1000000;
 80111b8:	f8d4 2190 	ldr.w	r2, [r4, #400]	; 0x190
 80111bc:	4b14      	ldr	r3, [pc, #80]	; (8011210 <display_passkey+0x68>)
 80111be:	fba3 1302 	umull	r1, r3, r3, r2
 80111c2:	0c9b      	lsrs	r3, r3, #18
 80111c4:	4913      	ldr	r1, [pc, #76]	; (8011214 <display_passkey+0x6c>)
 80111c6:	fb01 2313 	mls	r3, r1, r3, r2
 80111ca:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
	}

	smp->passkey_round = 0U;
 80111ce:	2300      	movs	r3, #0
 80111d0:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194

	if (bt_auth && bt_auth->passkey_display) {
 80111d4:	4b10      	ldr	r3, [pc, #64]	; (8011218 <display_passkey+0x70>)
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	b1b3      	cbz	r3, 8011208 <display_passkey+0x60>
 80111da:	685b      	ldr	r3, [r3, #4]
 80111dc:	b1a3      	cbz	r3, 8011208 <display_passkey+0x60>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
 80111de:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
 80111e2:	f3bf 8f5b 	dmb	ish
 80111e6:	e853 2f00 	ldrex	r2, [r3]
 80111ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80111ee:	e843 2100 	strex	r1, r2, [r3]
 80111f2:	2900      	cmp	r1, #0
 80111f4:	d1f7      	bne.n	80111e6 <display_passkey+0x3e>
 80111f6:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
 80111fa:	4b07      	ldr	r3, [pc, #28]	; (8011218 <display_passkey+0x70>)
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	685b      	ldr	r3, [r3, #4]
 8011200:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
 8011204:	6820      	ldr	r0, [r4, #0]
 8011206:	4798      	blx	r3
	}

	smp->passkey = sys_cpu_to_le32(smp->passkey);

	return 0;
 8011208:	2000      	movs	r0, #0
}
 801120a:	bd10      	pop	{r4, pc}
			return BT_SMP_ERR_UNSPECIFIED;
 801120c:	2008      	movs	r0, #8
 801120e:	e7fc      	b.n	801120a <display_passkey+0x62>
 8011210:	431bde83 	.word	0x431bde83
 8011214:	000f4240 	.word	0x000f4240
 8011218:	20002088 	.word	0x20002088

0801121c <smp_pairing_random>:
{
 801121c:	b570      	push	{r4, r5, r6, lr}
 801121e:	b084      	sub	sp, #16
 8011220:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
 8011222:	f100 05ef 	add.w	r5, r0, #239	; 0xef
 8011226:	2210      	movs	r2, #16
 8011228:	6889      	ldr	r1, [r1, #8]
 801122a:	4628      	mov	r0, r5
 801122c:	f006 fe26 	bl	8017e7c <memcpy>
	switch (smp->method) {
 8011230:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 8011234:	2b05      	cmp	r3, #5
 8011236:	f200 80bc 	bhi.w	80113b2 <smp_pairing_random+0x196>
 801123a:	e8df f003 	tbb	[pc, r3]
 801123e:	4825      	.short	0x4825
 8011240:	8dba0348 	.word	0x8dba0348
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
 8011244:	ab03      	add	r3, sp, #12
 8011246:	9300      	str	r3, [sp, #0]
 8011248:	f104 03df 	add.w	r3, r4, #223	; 0xdf
 801124c:	462a      	mov	r2, r5
 801124e:	495e      	ldr	r1, [pc, #376]	; (80113c8 <smp_pairing_random+0x1ac>)
 8011250:	6809      	ldr	r1, [r1, #0]
 8011252:	f204 100f 	addw	r0, r4, #271	; 0x10f
 8011256:	f7ff fdc5 	bl	8010de4 <smp_g2>
 801125a:	2800      	cmp	r0, #0
 801125c:	f040 80ab 	bne.w	80113b6 <smp_pairing_random+0x19a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
 8011260:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
 8011264:	f3bf 8f5b 	dmb	ish
 8011268:	e853 2f00 	ldrex	r2, [r3]
 801126c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011270:	e843 2100 	strex	r1, r2, [r3]
 8011274:	2900      	cmp	r1, #0
 8011276:	d1f7      	bne.n	8011268 <smp_pairing_random+0x4c>
 8011278:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
 801127c:	4b53      	ldr	r3, [pc, #332]	; (80113cc <smp_pairing_random+0x1b0>)
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	68db      	ldr	r3, [r3, #12]
 8011282:	9903      	ldr	r1, [sp, #12]
 8011284:	6820      	ldr	r0, [r4, #0]
 8011286:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
 8011288:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
 801128c:	f3bf 8f5b 	dmb	ish
 8011290:	e853 2f00 	ldrex	r2, [r3]
 8011294:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011298:	e843 2100 	strex	r1, r2, [r3]
 801129c:	2900      	cmp	r1, #0
 801129e:	d1f7      	bne.n	8011290 <smp_pairing_random+0x74>
 80112a0:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
 80112a4:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
 80112a8:	f3bf 8f5b 	dmb	ish
 80112ac:	e853 2f00 	ldrex	r2, [r3]
 80112b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80112b4:	e843 2100 	strex	r1, r2, [r3]
 80112b8:	2900      	cmp	r1, #0
 80112ba:	d1f7      	bne.n	80112ac <smp_pairing_random+0x90>
 80112bc:	f3bf 8f5b 	dmb	ish
	return smp_send_pairing_random(smp);
 80112c0:	4620      	mov	r0, r4
 80112c2:	f009 fac0 	bl	801a846 <smp_send_pairing_random>
 80112c6:	4605      	mov	r5, r0
}
 80112c8:	4628      	mov	r0, r5
 80112ca:	b004      	add	sp, #16
 80112cc:	bd70      	pop	{r4, r5, r6, pc}
		err = sc_smp_check_confirm(smp);
 80112ce:	4620      	mov	r0, r4
 80112d0:	f7ff fcb0 	bl	8010c34 <sc_smp_check_confirm>
		if (err) {
 80112d4:	4605      	mov	r5, r0
 80112d6:	2800      	cmp	r0, #0
 80112d8:	d1f6      	bne.n	80112c8 <smp_pairing_random+0xac>
		atomic_set_bit(&smp->allowed_cmds,
 80112da:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
 80112de:	f3bf 8f5b 	dmb	ish
 80112e2:	e856 3f00 	ldrex	r3, [r6]
 80112e6:	f043 0308 	orr.w	r3, r3, #8
 80112ea:	e846 3200 	strex	r2, r3, [r6]
 80112ee:	2a00      	cmp	r2, #0
 80112f0:	d1f7      	bne.n	80112e2 <smp_pairing_random+0xc6>
 80112f2:	f3bf 8f5b 	dmb	ish
		err = smp_send_pairing_random(smp);
 80112f6:	4620      	mov	r0, r4
 80112f8:	f009 faa5 	bl	801a846 <smp_send_pairing_random>
		if (err) {
 80112fc:	4605      	mov	r5, r0
 80112fe:	2800      	cmp	r0, #0
 8011300:	d1e2      	bne.n	80112c8 <smp_pairing_random+0xac>
		smp->passkey_round++;
 8011302:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
 8011306:	3301      	adds	r3, #1
 8011308:	b2db      	uxtb	r3, r3
 801130a:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194
		if (smp->passkey_round == 20U) {
 801130e:	2b14      	cmp	r3, #20
 8011310:	d008      	beq.n	8011324 <smp_pairing_random+0x108>
		if (bt_rand(smp->prnd, 16)) {
 8011312:	2110      	movs	r1, #16
 8011314:	f104 00df 	add.w	r0, r4, #223	; 0xdf
 8011318:	f7fb fe4a 	bl	800cfb0 <bt_rand>
 801131c:	2800      	cmp	r0, #0
 801131e:	d0d3      	beq.n	80112c8 <smp_pairing_random+0xac>
			return BT_SMP_ERR_UNSPECIFIED;
 8011320:	2508      	movs	r5, #8
 8011322:	e7d1      	b.n	80112c8 <smp_pairing_random+0xac>
 8011324:	f3bf 8f5b 	dmb	ish
 8011328:	e856 3f00 	ldrex	r3, [r6]
 801132c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011330:	e846 3200 	strex	r2, r3, [r6]
 8011334:	2a00      	cmp	r2, #0
 8011336:	d1f7      	bne.n	8011328 <smp_pairing_random+0x10c>
 8011338:	f3bf 8f5b 	dmb	ish
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
 801133c:	34bc      	adds	r4, #188	; 0xbc
 801133e:	f3bf 8f5b 	dmb	ish
 8011342:	e854 3f00 	ldrex	r3, [r4]
 8011346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801134a:	e844 3200 	strex	r2, r3, [r4]
 801134e:	2a00      	cmp	r2, #0
 8011350:	d1f7      	bne.n	8011342 <smp_pairing_random+0x126>
 8011352:	f3bf 8f5b 	dmb	ish
			return 0;
 8011356:	e7b7      	b.n	80112c8 <smp_pairing_random+0xac>
		if (bt_rand(smp->prnd, 16)) {
 8011358:	2110      	movs	r1, #16
 801135a:	f104 00df 	add.w	r0, r4, #223	; 0xdf
 801135e:	f7fb fe27 	bl	800cfb0 <bt_rand>
 8011362:	bb50      	cbnz	r0, 80113ba <smp_pairing_random+0x19e>
		if (bt_auth && bt_auth->oob_data_request) {
 8011364:	4b19      	ldr	r3, [pc, #100]	; (80113cc <smp_pairing_random+0x1b0>)
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	b34b      	cbz	r3, 80113be <smp_pairing_random+0x1a2>
 801136a:	691b      	ldr	r3, [r3, #16]
 801136c:	b34b      	cbz	r3, 80113c2 <smp_pairing_random+0x1a6>
			struct bt_conn_oob_info info = {
 801136e:	4b18      	ldr	r3, [pc, #96]	; (80113d0 <smp_pairing_random+0x1b4>)
 8011370:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8011372:	f8ad 3008 	strh.w	r3, [sp, #8]
			le_sc_oob_config_set(smp, &info);
 8011376:	a902      	add	r1, sp, #8
 8011378:	4620      	mov	r0, r4
 801137a:	f008 ffa2 	bl	801a2c2 <le_sc_oob_config_set>
			smp->oobd_local = NULL;
 801137e:	2500      	movs	r5, #0
 8011380:	f8c4 5198 	str.w	r5, [r4, #408]	; 0x198
			smp->oobd_remote = NULL;
 8011384:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
 8011388:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
 801138c:	f3bf 8f5b 	dmb	ish
 8011390:	e853 2f00 	ldrex	r2, [r3]
 8011394:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011398:	e843 2100 	strex	r1, r2, [r3]
 801139c:	2900      	cmp	r1, #0
 801139e:	d1f7      	bne.n	8011390 <smp_pairing_random+0x174>
 80113a0:	f3bf 8f5b 	dmb	ish
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
 80113a4:	4b09      	ldr	r3, [pc, #36]	; (80113cc <smp_pairing_random+0x1b0>)
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	691b      	ldr	r3, [r3, #16]
 80113aa:	a902      	add	r1, sp, #8
 80113ac:	6820      	ldr	r0, [r4, #0]
 80113ae:	4798      	blx	r3
			return 0;
 80113b0:	e78a      	b.n	80112c8 <smp_pairing_random+0xac>
	switch (smp->method) {
 80113b2:	2508      	movs	r5, #8
 80113b4:	e788      	b.n	80112c8 <smp_pairing_random+0xac>
			return BT_SMP_ERR_UNSPECIFIED;
 80113b6:	2508      	movs	r5, #8
 80113b8:	e786      	b.n	80112c8 <smp_pairing_random+0xac>
			return BT_SMP_ERR_UNSPECIFIED;
 80113ba:	2508      	movs	r5, #8
 80113bc:	e784      	b.n	80112c8 <smp_pairing_random+0xac>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
 80113be:	2502      	movs	r5, #2
 80113c0:	e782      	b.n	80112c8 <smp_pairing_random+0xac>
 80113c2:	2502      	movs	r5, #2
 80113c4:	e780      	b.n	80112c8 <smp_pairing_random+0xac>
 80113c6:	bf00      	nop
 80113c8:	2000214c 	.word	0x2000214c
 80113cc:	20002088 	.word	0x20002088
 80113d0:	0801d84c 	.word	0x0801d84c

080113d4 <smp_init>:
{
 80113d4:	b538      	push	{r3, r4, r5, lr}
 80113d6:	4604      	mov	r4, r0
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
 80113d8:	22f0      	movs	r2, #240	; 0xf0
 80113da:	2100      	movs	r1, #0
 80113dc:	30b8      	adds	r0, #184	; 0xb8
 80113de:	f006 fd72 	bl	8017ec6 <memset>
	if (bt_rand(smp->prnd, 16)) {
 80113e2:	2110      	movs	r1, #16
 80113e4:	f104 00df 	add.w	r0, r4, #223	; 0xdf
 80113e8:	f7fb fde2 	bl	800cfb0 <bt_rand>
 80113ec:	b998      	cbnz	r0, 8011416 <smp_init+0x42>
 80113ee:	4605      	mov	r5, r0
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
 80113f0:	34b8      	adds	r4, #184	; 0xb8
 80113f2:	f3bf 8f5b 	dmb	ish
 80113f6:	e854 3f00 	ldrex	r3, [r4]
 80113fa:	f043 0320 	orr.w	r3, r3, #32
 80113fe:	e844 3200 	strex	r2, r3, [r4]
 8011402:	2a00      	cmp	r2, #0
 8011404:	d1f7      	bne.n	80113f6 <smp_init+0x22>
 8011406:	f3bf 8f5b 	dmb	ish
	sc_public_key = bt_pub_key_get();
 801140a:	f7fb fceb 	bl	800cde4 <bt_pub_key_get>
 801140e:	4b03      	ldr	r3, [pc, #12]	; (801141c <smp_init+0x48>)
 8011410:	6018      	str	r0, [r3, #0]
}
 8011412:	4628      	mov	r0, r5
 8011414:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
 8011416:	2508      	movs	r5, #8
 8011418:	e7fb      	b.n	8011412 <smp_init+0x3e>
 801141a:	bf00      	nop
 801141c:	2000214c 	.word	0x2000214c

08011420 <smp_pairing_req>:
{
 8011420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
 8011424:	6806      	ldr	r6, [r0, #0]
	struct bt_smp_pairing *req = (void *)buf->data;
 8011426:	688d      	ldr	r5, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
 8011428:	78eb      	ldrb	r3, [r5, #3]
 801142a:	3b07      	subs	r3, #7
 801142c:	b2db      	uxtb	r3, r3
 801142e:	2b09      	cmp	r3, #9
 8011430:	f200 8109 	bhi.w	8011646 <smp_pairing_req+0x226>
 8011434:	4604      	mov	r4, r0
	if (!conn->le.keys) {
 8011436:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
 801143a:	2b00      	cmp	r3, #0
 801143c:	f000 80dd 	beq.w	80115fa <smp_pairing_req+0x1da>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
 8011440:	f104 08bc 	add.w	r8, r4, #188	; 0xbc
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8011444:	f3bf 8f5b 	dmb	ish
 8011448:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 801144c:	f3bf 8f5b 	dmb	ish
 8011450:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8011454:	d105      	bne.n	8011462 <smp_pairing_req+0x42>
		int ret = smp_init(smp);
 8011456:	4620      	mov	r0, r4
 8011458:	f7ff ffbc 	bl	80113d4 <smp_init>
		if (ret) {
 801145c:	2800      	cmp	r0, #0
 801145e:	f040 80d8 	bne.w	8011612 <smp_pairing_req+0x1f2>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
 8011462:	2301      	movs	r3, #1
 8011464:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	memcpy(smp->preq + 1, req, sizeof(*req));
 8011468:	2206      	movs	r2, #6
 801146a:	4629      	mov	r1, r5
 801146c:	f104 00c2 	add.w	r0, r4, #194	; 0xc2
 8011470:	f006 fd04 	bl	8017e7c <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
 8011474:	2302      	movs	r3, #2
 8011476:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	rsp->auth_req = get_auth(conn, req->auth_req);
 801147a:	78a9      	ldrb	r1, [r5, #2]
 801147c:	4630      	mov	r0, r6
 801147e:	f7ff fb2f 	bl	8010ae0 <get_auth>
 8011482:	4607      	mov	r7, r0
 8011484:	f884 00cb 	strb.w	r0, [r4, #203]	; 0xcb
	rsp->io_capability = get_io_capa();
 8011488:	f7ff fab2 	bl	80109f0 <get_io_capa>
 801148c:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
 8011490:	4b71      	ldr	r3, [pc, #452]	; (8011658 <smp_pairing_req+0x238>)
 8011492:	781b      	ldrb	r3, [r3, #0]
 8011494:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
 8011498:	2310      	movs	r3, #16
 801149a:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
 801149e:	792b      	ldrb	r3, [r5, #4]
 80114a0:	f003 0303 	and.w	r3, r3, #3
 80114a4:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
 80114a8:	796b      	ldrb	r3, [r5, #5]
 80114aa:	f003 0301 	and.w	r3, r3, #1
 80114ae:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
 80114b2:	f017 0f08 	tst.w	r7, #8
 80114b6:	d018      	beq.n	80114ea <smp_pairing_req+0xca>
	    (req->auth_req & BT_SMP_AUTH_SC)) {
 80114b8:	78ab      	ldrb	r3, [r5, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
 80114ba:	f013 0f08 	tst.w	r3, #8
 80114be:	d014      	beq.n	80114ea <smp_pairing_req+0xca>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 80114c0:	f3bf 8f5b 	dmb	ish
 80114c4:	e858 3f00 	ldrex	r3, [r8]
 80114c8:	f043 0320 	orr.w	r3, r3, #32
 80114cc:	e848 3200 	strex	r2, r3, [r8]
 80114d0:	2a00      	cmp	r2, #0
 80114d2:	d1f7      	bne.n	80114c4 <smp_pairing_req+0xa4>
 80114d4:	f3bf 8f5b 	dmb	ish
		rsp->init_key_dist &= RECV_KEYS_SC;
 80114d8:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
 80114dc:	f003 0302 	and.w	r3, r3, #2
 80114e0:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
		rsp->resp_key_dist &= SEND_KEYS_SC;
 80114e4:	2300      	movs	r3, #0
 80114e6:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
 80114ea:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
 80114ee:	f013 0f20 	tst.w	r3, #32
 80114f2:	d00f      	beq.n	8011514 <smp_pairing_req+0xf4>
	    (req->auth_req & BT_SMP_AUTH_CT2)) {
 80114f4:	78ab      	ldrb	r3, [r5, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
 80114f6:	f013 0f20 	tst.w	r3, #32
 80114fa:	d00b      	beq.n	8011514 <smp_pairing_req+0xf4>
 80114fc:	f3bf 8f5b 	dmb	ish
 8011500:	e858 3f00 	ldrex	r3, [r8]
 8011504:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011508:	e848 3200 	strex	r2, r3, [r8]
 801150c:	2a00      	cmp	r2, #0
 801150e:	d1f7      	bne.n	8011500 <smp_pairing_req+0xe0>
 8011510:	f3bf 8f5b 	dmb	ish
	smp->local_dist = rsp->resp_key_dist;
 8011514:	f894 30ce 	ldrb.w	r3, [r4, #206]	; 0xce
 8011518:	f884 31a0 	strb.w	r3, [r4, #416]	; 0x1a0
	smp->remote_dist = rsp->init_key_dist;
 801151c:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
 8011520:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
 8011524:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
 8011528:	f013 0f01 	tst.w	r3, #1
 801152c:	d00f      	beq.n	801154e <smp_pairing_req+0x12e>
	    (req->auth_req & BT_SMP_AUTH_BONDING)) {
 801152e:	78ab      	ldrb	r3, [r5, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
 8011530:	f013 0f01 	tst.w	r3, #1
 8011534:	d00b      	beq.n	801154e <smp_pairing_req+0x12e>
 8011536:	f3bf 8f5b 	dmb	ish
 801153a:	e858 3f00 	ldrex	r3, [r8]
 801153e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011542:	e848 3200 	strex	r2, r3, [r8]
 8011546:	2a00      	cmp	r2, #0
 8011548:	d1f7      	bne.n	801153a <smp_pairing_req+0x11a>
 801154a:	f3bf 8f5b 	dmb	ish
 801154e:	f3bf 8f5b 	dmb	ish
 8011552:	e858 3f00 	ldrex	r3, [r8]
 8011556:	f043 0308 	orr.w	r3, r3, #8
 801155a:	e848 3200 	strex	r2, r3, [r8]
 801155e:	2a00      	cmp	r2, #0
 8011560:	d1f7      	bne.n	8011552 <smp_pairing_req+0x132>
 8011562:	f3bf 8f5b 	dmb	ish
	smp->method = get_pair_method(smp, req->io_capability);
 8011566:	7829      	ldrb	r1, [r5, #0]
 8011568:	4620      	mov	r0, r4
 801156a:	f7ff fa69 	bl	8010a40 <get_pair_method>
 801156e:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	if (!update_keys_check(smp)) {
 8011572:	4620      	mov	r0, r4
 8011574:	f009 f9f7 	bl	801a966 <update_keys_check>
 8011578:	2800      	cmp	r0, #0
 801157a:	d066      	beq.n	801164a <smp_pairing_req+0x22a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 801157c:	f3bf 8f5b 	dmb	ish
 8011580:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8011584:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
 8011588:	f013 0f20 	tst.w	r3, #32
 801158c:	d05f      	beq.n	801164e <smp_pairing_req+0x22e>
	     conn->required_sec_level == BT_SECURITY_L4) &&
 801158e:	7ab3      	ldrb	r3, [r6, #10]
	if ((IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) ||
 8011590:	2b04      	cmp	r3, #4
 8011592:	d040      	beq.n	8011616 <smp_pairing_req+0x1f6>
	if ((IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) ||
 8011594:	2b04      	cmp	r3, #4
 8011596:	d104      	bne.n	80115a2 <smp_pairing_req+0x182>
	       get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
 8011598:	4620      	mov	r0, r4
 801159a:	f008 fe79 	bl	801a290 <get_encryption_key_size>
	     conn->required_sec_level == BT_SECURITY_L4) &&
 801159e:	2810      	cmp	r0, #16
 80115a0:	d157      	bne.n	8011652 <smp_pairing_req+0x232>
		err = smp_pairing_accept_query(smp->chan.chan.conn, req);
 80115a2:	4629      	mov	r1, r5
 80115a4:	6820      	ldr	r0, [r4, #0]
 80115a6:	f7ff fa73 	bl	8010a90 <smp_pairing_accept_query>
		if (err) {
 80115aa:	4605      	mov	r5, r0
 80115ac:	bb10      	cbnz	r0, 80115f4 <smp_pairing_req+0x1d4>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
 80115ae:	f894 50c0 	ldrb.w	r5, [r4, #192]	; 0xc0
 80115b2:	b96d      	cbnz	r5, 80115d0 <smp_pairing_req+0x1b0>
 80115b4:	f3bf 8f5b 	dmb	ish
 80115b8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 80115bc:	f3bf 8f5b 	dmb	ish
 80115c0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80115c4:	d104      	bne.n	80115d0 <smp_pairing_req+0x1b0>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
 80115c6:	4b25      	ldr	r3, [pc, #148]	; (801165c <smp_pairing_req+0x23c>)
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	b10b      	cbz	r3, 80115d0 <smp_pairing_req+0x1b0>
	    bt_auth && bt_auth->pairing_confirm) {
 80115cc:	699b      	ldr	r3, [r3, #24]
 80115ce:	bb43      	cbnz	r3, 8011622 <smp_pairing_req+0x202>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
 80115d0:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 80115d4:	f3bf 8f5b 	dmb	ish
 80115d8:	e853 2f00 	ldrex	r2, [r3]
 80115dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80115e0:	e843 2100 	strex	r1, r2, [r3]
 80115e4:	2900      	cmp	r1, #0
 80115e6:	d1f7      	bne.n	80115d8 <smp_pairing_req+0x1b8>
 80115e8:	f3bf 8f5b 	dmb	ish
	return send_pairing_rsp(smp);
 80115ec:	4620      	mov	r0, r4
 80115ee:	f009 f945 	bl	801a87c <send_pairing_rsp>
 80115f2:	4605      	mov	r5, r0
}
 80115f4:	4628      	mov	r0, r5
 80115f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
 80115fa:	f106 0188 	add.w	r1, r6, #136	; 0x88
 80115fe:	7a30      	ldrb	r0, [r6, #8]
 8011600:	f000 fcba 	bl	8011f78 <bt_keys_get_addr>
 8011604:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
		if (!conn->le.keys) {
 8011608:	2800      	cmp	r0, #0
 801160a:	f47f af19 	bne.w	8011440 <smp_pairing_req+0x20>
			return BT_SMP_ERR_UNSPECIFIED;
 801160e:	2508      	movs	r5, #8
 8011610:	e7f0      	b.n	80115f4 <smp_pairing_req+0x1d4>
			return ret;
 8011612:	b2c5      	uxtb	r5, r0
 8011614:	e7ee      	b.n	80115f4 <smp_pairing_req+0x1d4>
		smp->method == JUST_WORKS) {
 8011616:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
	     conn->required_sec_level == BT_SECURITY_L4) &&
 801161a:	2a00      	cmp	r2, #0
 801161c:	d1ba      	bne.n	8011594 <smp_pairing_req+0x174>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
 801161e:	2503      	movs	r5, #3
 8011620:	e7e8      	b.n	80115f4 <smp_pairing_req+0x1d4>
 8011622:	f3bf 8f5b 	dmb	ish
 8011626:	e858 3f00 	ldrex	r3, [r8]
 801162a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801162e:	e848 3200 	strex	r2, r3, [r8]
 8011632:	2a00      	cmp	r2, #0
 8011634:	d1f7      	bne.n	8011626 <smp_pairing_req+0x206>
 8011636:	f3bf 8f5b 	dmb	ish
		bt_auth->pairing_confirm(smp->chan.chan.conn);
 801163a:	4b08      	ldr	r3, [pc, #32]	; (801165c <smp_pairing_req+0x23c>)
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	699b      	ldr	r3, [r3, #24]
 8011640:	6820      	ldr	r0, [r4, #0]
 8011642:	4798      	blx	r3
		return 0;
 8011644:	e7d6      	b.n	80115f4 <smp_pairing_req+0x1d4>
		return BT_SMP_ERR_ENC_KEY_SIZE;
 8011646:	2506      	movs	r5, #6
 8011648:	e7d4      	b.n	80115f4 <smp_pairing_req+0x1d4>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
 801164a:	2503      	movs	r5, #3
 801164c:	e7d2      	b.n	80115f4 <smp_pairing_req+0x1d4>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
 801164e:	2503      	movs	r5, #3
 8011650:	e7d0      	b.n	80115f4 <smp_pairing_req+0x1d4>
		return BT_SMP_ERR_ENC_KEY_SIZE;
 8011652:	2506      	movs	r5, #6
 8011654:	e7ce      	b.n	80115f4 <smp_pairing_req+0x1d4>
 8011656:	bf00      	nop
 8011658:	200034fe 	.word	0x200034fe
 801165c:	20002088 	.word	0x20002088

08011660 <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
 8011660:	b510      	push	{r4, lr}
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
 8011662:	2300      	movs	r3, #0
 8011664:	2b00      	cmp	r3, #0
 8011666:	dd14      	ble.n	8011692 <bt_smp_accept+0x32>
		*chan = &smp->chan.chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
 8011668:	f04f 0200 	mov.w	r2, #0
 801166c:	2301      	movs	r3, #1
 801166e:	f363 0202 	bfi	r2, r3, #0, #3
 8011672:	f36f 02c5 	bfc	r2, #3, #3
 8011676:	4b10      	ldr	r3, [pc, #64]	; (80116b8 <bt_smp_accept+0x58>)
 8011678:	4910      	ldr	r1, [pc, #64]	; (80116bc <bt_smp_accept+0x5c>)
 801167a:	1a5b      	subs	r3, r3, r1
 801167c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8011680:	f363 128f 	bfi	r2, r3, #6, #10
 8011684:	4601      	mov	r1, r0
 8011686:	480e      	ldr	r0, [pc, #56]	; (80116c0 <bt_smp_accept+0x60>)
 8011688:	f7f2 fdf0 	bl	800426c <log_1>

	return -ENOMEM;
 801168c:	f06f 000b 	mvn.w	r0, #11
}
 8011690:	bd10      	pop	{r4, pc}
		if (smp->chan.chan.conn) {
 8011692:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8011696:	fb02 f203 	mul.w	r2, r2, r3
 801169a:	4c0a      	ldr	r4, [pc, #40]	; (80116c4 <bt_smp_accept+0x64>)
 801169c:	58a2      	ldr	r2, [r4, r2]
 801169e:	b10a      	cbz	r2, 80116a4 <bt_smp_accept+0x44>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
 80116a0:	3301      	adds	r3, #1
 80116a2:	e7df      	b.n	8011664 <bt_smp_accept+0x4>
		smp->chan.chan.ops = &ops;
 80116a4:	4a07      	ldr	r2, [pc, #28]	; (80116c4 <bt_smp_accept+0x64>)
 80116a6:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 80116aa:	fb00 2303 	mla	r3, r0, r3, r2
 80116ae:	4a06      	ldr	r2, [pc, #24]	; (80116c8 <bt_smp_accept+0x68>)
 80116b0:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan.chan;
 80116b2:	600b      	str	r3, [r1, #0]
		return 0;
 80116b4:	2000      	movs	r0, #0
 80116b6:	e7eb      	b.n	8011690 <bt_smp_accept+0x30>
 80116b8:	0801d730 	.word	0x0801d730
 80116bc:	0801d6d0 	.word	0x0801d6d0
 80116c0:	08021504 	.word	0x08021504
 80116c4:	200010c0 	.word	0x200010c0
 80116c8:	08021718 	.word	0x08021718

080116cc <smp_pairing_failed>:
{
 80116cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116ce:	4605      	mov	r5, r0
	struct bt_conn *conn = smp->chan.chan.conn;
 80116d0:	4604      	mov	r4, r0
 80116d2:	f854 7bbc 	ldr.w	r7, [r4], #188
	struct bt_smp_pairing_fail *req = (void *)buf->data;
 80116d6:	688e      	ldr	r6, [r1, #8]
	BT_ERR("reason 0x%x", req->reason);
 80116d8:	f04f 0200 	mov.w	r2, #0
 80116dc:	2301      	movs	r3, #1
 80116de:	f363 0202 	bfi	r2, r3, #0, #3
 80116e2:	f36f 02c5 	bfc	r2, #3, #3
 80116e6:	4b1b      	ldr	r3, [pc, #108]	; (8011754 <smp_pairing_failed+0x88>)
 80116e8:	491b      	ldr	r1, [pc, #108]	; (8011758 <smp_pairing_failed+0x8c>)
 80116ea:	1a5b      	subs	r3, r3, r1
 80116ec:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80116f0:	f363 128f 	bfi	r2, r3, #6, #10
 80116f4:	7831      	ldrb	r1, [r6, #0]
 80116f6:	4819      	ldr	r0, [pc, #100]	; (801175c <smp_pairing_failed+0x90>)
 80116f8:	f7f2 fdb8 	bl	800426c <log_1>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 80116fc:	f3bf 8f5b 	dmb	ish
 8011700:	e854 3f00 	ldrex	r3, [r4]
 8011704:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8011708:	e844 2100 	strex	r1, r2, [r4]
 801170c:	2900      	cmp	r1, #0
 801170e:	d1f7      	bne.n	8011700 <smp_pairing_failed+0x34>
 8011710:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
 8011714:	f413 7f00 	tst.w	r3, #512	; 0x200
 8011718:	d007      	beq.n	801172a <smp_pairing_failed+0x5e>
		if (bt_auth && bt_auth->cancel) {
 801171a:	4b11      	ldr	r3, [pc, #68]	; (8011760 <smp_pairing_failed+0x94>)
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	b19b      	cbz	r3, 8011748 <smp_pairing_failed+0x7c>
 8011720:	695b      	ldr	r3, [r3, #20]
 8011722:	b18b      	cbz	r3, 8011748 <smp_pairing_failed+0x7c>
			bt_auth->cancel(conn);
 8011724:	4638      	mov	r0, r7
 8011726:	4798      	blx	r3
 8011728:	e00e      	b.n	8011748 <smp_pairing_failed+0x7c>
 801172a:	f3bf 8f5b 	dmb	ish
 801172e:	e854 3f00 	ldrex	r3, [r4]
 8011732:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8011736:	e844 2100 	strex	r1, r2, [r4]
 801173a:	2900      	cmp	r1, #0
 801173c:	d1f7      	bne.n	801172e <smp_pairing_failed+0x62>
 801173e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
 8011742:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8011746:	d1e8      	bne.n	801171a <smp_pairing_failed+0x4e>
	smp_pairing_complete(smp, req->reason);
 8011748:	7831      	ldrb	r1, [r6, #0]
 801174a:	4628      	mov	r0, r5
 801174c:	f7ff fc2e 	bl	8010fac <smp_pairing_complete>
}
 8011750:	2000      	movs	r0, #0
 8011752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011754:	0801d730 	.word	0x0801d730
 8011758:	0801d6d0 	.word	0x0801d6d0
 801175c:	0802152c 	.word	0x0802152c
 8011760:	20002088 	.word	0x20002088

08011764 <bt_smp_distribute_keys>:
	struct bt_conn *conn = smp->chan.chan.conn;
 8011764:	6800      	ldr	r0, [r0, #0]
	struct bt_keys *keys = conn->le.keys;
 8011766:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
	if (!keys) {
 801176a:	b10b      	cbz	r3, 8011770 <bt_smp_distribute_keys+0xc>
	return 0;
 801176c:	2000      	movs	r0, #0
}
 801176e:	4770      	bx	lr
{
 8011770:	b510      	push	{r4, lr}
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
 8011772:	f04f 0400 	mov.w	r4, #0
 8011776:	2301      	movs	r3, #1
 8011778:	f363 0402 	bfi	r4, r3, #0, #3
 801177c:	f36f 04c5 	bfc	r4, #3, #3
 8011780:	4b09      	ldr	r3, [pc, #36]	; (80117a8 <bt_smp_distribute_keys+0x44>)
 8011782:	4a0a      	ldr	r2, [pc, #40]	; (80117ac <bt_smp_distribute_keys+0x48>)
 8011784:	1a9b      	subs	r3, r3, r2
 8011786:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 801178a:	f363 148f 	bfi	r4, r3, #6, #10
 801178e:	3088      	adds	r0, #136	; 0x88
 8011790:	f7f8 f83e 	bl	8009810 <bt_addr_le_str_real>
 8011794:	f7f2 fb9a 	bl	8003ecc <log_strdup>
 8011798:	4601      	mov	r1, r0
 801179a:	4622      	mov	r2, r4
 801179c:	4804      	ldr	r0, [pc, #16]	; (80117b0 <bt_smp_distribute_keys+0x4c>)
 801179e:	f7f2 fd65 	bl	800426c <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
 80117a2:	2008      	movs	r0, #8
}
 80117a4:	bd10      	pop	{r4, pc}
 80117a6:	bf00      	nop
 80117a8:	0801d730 	.word	0x0801d730
 80117ac:	0801d6d0 	.word	0x0801d6d0
 80117b0:	08021538 	.word	0x08021538

080117b4 <bt_smp_recv>:
{
 80117b4:	b570      	push	{r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
 80117b6:	898b      	ldrh	r3, [r1, #12]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d045      	beq.n	8011848 <bt_smp_recv+0x94>
 80117bc:	4605      	mov	r5, r0
 80117be:	460c      	mov	r4, r1
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
 80117c0:	2101      	movs	r1, #1
 80117c2:	f104 0008 	add.w	r0, r4, #8
 80117c6:	f009 fc6e 	bl	801b0a6 <net_buf_simple_pull_mem>
 80117ca:	4606      	mov	r6, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80117cc:	f3bf 8f5b 	dmb	ish
 80117d0:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
 80117d4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
 80117d8:	f013 0f10 	tst.w	r3, #16
 80117dc:	d147      	bne.n	801186e <bt_smp_recv+0xba>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
 80117de:	7801      	ldrb	r1, [r0, #0]
 80117e0:	290d      	cmp	r1, #13
 80117e2:	d857      	bhi.n	8011894 <bt_smp_recv+0xe0>
 80117e4:	4b4e      	ldr	r3, [pc, #312]	; (8011920 <bt_smp_recv+0x16c>)
 80117e6:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d052      	beq.n	8011894 <bt_smp_recv+0xe0>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
 80117ee:	f105 03b8 	add.w	r3, r5, #184	; 0xb8
	atomic_val_t mask = ATOMIC_MASK(bit);
 80117f2:	f001 001f 	and.w	r0, r1, #31
 80117f6:	2201      	movs	r2, #1
 80117f8:	4082      	lsls	r2, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 80117fa:	0949      	lsrs	r1, r1, #5
 80117fc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8011800:	43d0      	mvns	r0, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8011802:	f3bf 8f5b 	dmb	ish
 8011806:	e851 3f00 	ldrex	r3, [r1]
 801180a:	ea03 0c00 	and.w	ip, r3, r0
 801180e:	e841 ce00 	strex	lr, ip, [r1]
 8011812:	f1be 0f00 	cmp.w	lr, #0
 8011816:	d1f6      	bne.n	8011806 <bt_smp_recv+0x52>
 8011818:	f3bf 8f5b 	dmb	ish
 801181c:	421a      	tst	r2, r3
 801181e:	d04f      	beq.n	80118c0 <bt_smp_recv+0x10c>
	if (buf->len != handlers[hdr->code].expect_len) {
 8011820:	89a1      	ldrh	r1, [r4, #12]
 8011822:	7832      	ldrb	r2, [r6, #0]
 8011824:	4b3e      	ldr	r3, [pc, #248]	; (8011920 <bt_smp_recv+0x16c>)
 8011826:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801182a:	791b      	ldrb	r3, [r3, #4]
 801182c:	4299      	cmp	r1, r3
 801182e:	d161      	bne.n	80118f4 <bt_smp_recv+0x140>
	err = handlers[hdr->code].func(smp, buf);
 8011830:	4b3b      	ldr	r3, [pc, #236]	; (8011920 <bt_smp_recv+0x16c>)
 8011832:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8011836:	4621      	mov	r1, r4
 8011838:	4628      	mov	r0, r5
 801183a:	4798      	blx	r3
	if (err) {
 801183c:	4601      	mov	r1, r0
 801183e:	b1a0      	cbz	r0, 801186a <bt_smp_recv+0xb6>
		smp_error(smp, err);
 8011840:	4628      	mov	r0, r5
 8011842:	f009 f836 	bl	801a8b2 <smp_error>
 8011846:	e010      	b.n	801186a <bt_smp_recv+0xb6>
		BT_ERR("Too small SMP PDU received");
 8011848:	f04f 0100 	mov.w	r1, #0
 801184c:	2301      	movs	r3, #1
 801184e:	f363 0102 	bfi	r1, r3, #0, #3
 8011852:	f36f 01c5 	bfc	r1, #3, #3
 8011856:	4b33      	ldr	r3, [pc, #204]	; (8011924 <bt_smp_recv+0x170>)
 8011858:	4a33      	ldr	r2, [pc, #204]	; (8011928 <bt_smp_recv+0x174>)
 801185a:	1a9b      	subs	r3, r3, r2
 801185c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8011860:	f363 118f 	bfi	r1, r3, #6, #10
 8011864:	4831      	ldr	r0, [pc, #196]	; (801192c <bt_smp_recv+0x178>)
 8011866:	f7f2 fe71 	bl	800454c <log_0>
}
 801186a:	2000      	movs	r0, #0
 801186c:	bd70      	pop	{r4, r5, r6, pc}
		BT_WARN("SMP command (code 0x%02x) received after timeout",
 801186e:	f04f 0200 	mov.w	r2, #0
 8011872:	2302      	movs	r3, #2
 8011874:	f363 0202 	bfi	r2, r3, #0, #3
 8011878:	f36f 02c5 	bfc	r2, #3, #3
 801187c:	4b29      	ldr	r3, [pc, #164]	; (8011924 <bt_smp_recv+0x170>)
 801187e:	492a      	ldr	r1, [pc, #168]	; (8011928 <bt_smp_recv+0x174>)
 8011880:	1a5b      	subs	r3, r3, r1
 8011882:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8011886:	f363 128f 	bfi	r2, r3, #6, #10
 801188a:	7801      	ldrb	r1, [r0, #0]
 801188c:	4828      	ldr	r0, [pc, #160]	; (8011930 <bt_smp_recv+0x17c>)
 801188e:	f7f2 fced 	bl	800426c <log_1>
		return 0;
 8011892:	e7ea      	b.n	801186a <bt_smp_recv+0xb6>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
 8011894:	f04f 0200 	mov.w	r2, #0
 8011898:	2302      	movs	r3, #2
 801189a:	f363 0202 	bfi	r2, r3, #0, #3
 801189e:	f36f 02c5 	bfc	r2, #3, #3
 80118a2:	4b20      	ldr	r3, [pc, #128]	; (8011924 <bt_smp_recv+0x170>)
 80118a4:	4820      	ldr	r0, [pc, #128]	; (8011928 <bt_smp_recv+0x174>)
 80118a6:	1a1b      	subs	r3, r3, r0
 80118a8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80118ac:	f363 128f 	bfi	r2, r3, #6, #10
 80118b0:	4820      	ldr	r0, [pc, #128]	; (8011934 <bt_smp_recv+0x180>)
 80118b2:	f7f2 fcdb 	bl	800426c <log_1>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
 80118b6:	2107      	movs	r1, #7
 80118b8:	4628      	mov	r0, r5
 80118ba:	f008 fffa 	bl	801a8b2 <smp_error>
		return 0;
 80118be:	e7d4      	b.n	801186a <bt_smp_recv+0xb6>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
 80118c0:	f04f 0200 	mov.w	r2, #0
 80118c4:	2302      	movs	r3, #2
 80118c6:	f363 0202 	bfi	r2, r3, #0, #3
 80118ca:	f36f 02c5 	bfc	r2, #3, #3
 80118ce:	4b15      	ldr	r3, [pc, #84]	; (8011924 <bt_smp_recv+0x170>)
 80118d0:	4915      	ldr	r1, [pc, #84]	; (8011928 <bt_smp_recv+0x174>)
 80118d2:	1a5b      	subs	r3, r3, r1
 80118d4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80118d8:	f363 128f 	bfi	r2, r3, #6, #10
 80118dc:	7831      	ldrb	r1, [r6, #0]
 80118de:	4816      	ldr	r0, [pc, #88]	; (8011938 <bt_smp_recv+0x184>)
 80118e0:	f7f2 fcc4 	bl	800426c <log_1>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
 80118e4:	7833      	ldrb	r3, [r6, #0]
 80118e6:	2b05      	cmp	r3, #5
 80118e8:	d0bf      	beq.n	801186a <bt_smp_recv+0xb6>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
 80118ea:	2108      	movs	r1, #8
 80118ec:	4628      	mov	r0, r5
 80118ee:	f008 ffe0 	bl	801a8b2 <smp_error>
		return 0;
 80118f2:	e7ba      	b.n	801186a <bt_smp_recv+0xb6>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
 80118f4:	f04f 0300 	mov.w	r3, #0
 80118f8:	2001      	movs	r0, #1
 80118fa:	f360 0302 	bfi	r3, r0, #0, #3
 80118fe:	f36f 03c5 	bfc	r3, #3, #3
 8011902:	4808      	ldr	r0, [pc, #32]	; (8011924 <bt_smp_recv+0x170>)
 8011904:	4c08      	ldr	r4, [pc, #32]	; (8011928 <bt_smp_recv+0x174>)
 8011906:	1b00      	subs	r0, r0, r4
 8011908:	f3c0 00c9 	ubfx	r0, r0, #3, #10
 801190c:	f360 138f 	bfi	r3, r0, #6, #10
 8011910:	480a      	ldr	r0, [pc, #40]	; (801193c <bt_smp_recv+0x188>)
 8011912:	f7f2 fd2b 	bl	800436c <log_2>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
 8011916:	210a      	movs	r1, #10
 8011918:	4628      	mov	r0, r5
 801191a:	f008 ffca 	bl	801a8b2 <smp_error>
		return 0;
 801191e:	e7a4      	b.n	801186a <bt_smp_recv+0xb6>
 8011920:	080216a8 	.word	0x080216a8
 8011924:	0801d730 	.word	0x0801d730
 8011928:	0801d6d0 	.word	0x0801d6d0
 801192c:	08021550 	.word	0x08021550
 8011930:	0802156c 	.word	0x0802156c
 8011934:	080215a0 	.word	0x080215a0
 8011938:	080215bc 	.word	0x080215bc
 801193c:	0802100c 	.word	0x0802100c

08011940 <generate_dhkey>:
{
 8011940:	b510      	push	{r4, lr}
 8011942:	4604      	mov	r4, r0
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
 8011944:	490a      	ldr	r1, [pc, #40]	; (8011970 <generate_dhkey+0x30>)
 8011946:	f200 100f 	addw	r0, r0, #271	; 0x10f
 801194a:	f7fb fa5d 	bl	800ce08 <bt_dh_key_gen>
 801194e:	b968      	cbnz	r0, 801196c <generate_dhkey+0x2c>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
 8011950:	34bc      	adds	r4, #188	; 0xbc
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8011952:	f3bf 8f5b 	dmb	ish
 8011956:	e854 3f00 	ldrex	r3, [r4]
 801195a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801195e:	e844 3200 	strex	r2, r3, [r4]
 8011962:	2a00      	cmp	r2, #0
 8011964:	d1f7      	bne.n	8011956 <generate_dhkey+0x16>
 8011966:	f3bf 8f5b 	dmb	ish
}
 801196a:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
 801196c:	2008      	movs	r0, #8
 801196e:	e7fc      	b.n	801196a <generate_dhkey+0x2a>
 8011970:	08011061 	.word	0x08011061

08011974 <smp_public_key_slave>:
{
 8011974:	b510      	push	{r4, lr}
 8011976:	4604      	mov	r4, r0
	err = sc_send_public_key(smp);
 8011978:	f7ff faf4 	bl	8010f64 <sc_send_public_key>
	if (err) {
 801197c:	4603      	mov	r3, r0
 801197e:	2800      	cmp	r0, #0
 8011980:	d155      	bne.n	8011a2e <smp_public_key_slave+0xba>
	switch (smp->method) {
 8011982:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 8011986:	2b05      	cmp	r3, #5
 8011988:	d862      	bhi.n	8011a50 <smp_public_key_slave+0xdc>
 801198a:	e8df f003 	tbb	[pc, r3]
 801198e:	2b03      	.short	0x2b03
 8011990:	52610317 	.word	0x52610317
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
 8011994:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
 8011998:	f3bf 8f5b 	dmb	ish
 801199c:	e853 2f00 	ldrex	r2, [r3]
 80119a0:	f042 0210 	orr.w	r2, r2, #16
 80119a4:	e843 2100 	strex	r1, r2, [r3]
 80119a8:	2900      	cmp	r1, #0
 80119aa:	d1f7      	bne.n	801199c <smp_public_key_slave+0x28>
 80119ac:	f3bf 8f5b 	dmb	ish
		err = smp_send_pairing_confirm(smp);
 80119b0:	4620      	mov	r0, r4
 80119b2:	f7ff fa85 	bl	8010ec0 <smp_send_pairing_confirm>
		if (err) {
 80119b6:	4603      	mov	r3, r0
 80119b8:	b3a8      	cbz	r0, 8011a26 <smp_public_key_slave+0xb2>
 80119ba:	e038      	b.n	8011a2e <smp_public_key_slave+0xba>
		err = display_passkey(smp);
 80119bc:	4620      	mov	r0, r4
 80119be:	f7ff fbf3 	bl	80111a8 <display_passkey>
		if (err) {
 80119c2:	4603      	mov	r3, r0
 80119c4:	bb98      	cbnz	r0, 8011a2e <smp_public_key_slave+0xba>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
 80119c6:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
 80119ca:	f3bf 8f5b 	dmb	ish
 80119ce:	e853 2f00 	ldrex	r2, [r3]
 80119d2:	f042 0208 	orr.w	r2, r2, #8
 80119d6:	e843 2100 	strex	r1, r2, [r3]
 80119da:	2900      	cmp	r1, #0
 80119dc:	d1f7      	bne.n	80119ce <smp_public_key_slave+0x5a>
 80119de:	f3bf 8f5b 	dmb	ish
}
 80119e2:	e020      	b.n	8011a26 <smp_public_key_slave+0xb2>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
 80119e4:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 80119e8:	f3bf 8f5b 	dmb	ish
 80119ec:	e853 2f00 	ldrex	r2, [r3]
 80119f0:	f042 0208 	orr.w	r2, r2, #8
 80119f4:	e843 2100 	strex	r1, r2, [r3]
 80119f8:	2900      	cmp	r1, #0
 80119fa:	d1f7      	bne.n	80119ec <smp_public_key_slave+0x78>
 80119fc:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
 8011a00:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
 8011a04:	f3bf 8f5b 	dmb	ish
 8011a08:	e853 2f00 	ldrex	r2, [r3]
 8011a0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011a10:	e843 2100 	strex	r1, r2, [r3]
 8011a14:	2900      	cmp	r1, #0
 8011a16:	d1f7      	bne.n	8011a08 <smp_public_key_slave+0x94>
 8011a18:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_entry(smp->chan.chan.conn);
 8011a1c:	4b0d      	ldr	r3, [pc, #52]	; (8011a54 <smp_public_key_slave+0xe0>)
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	689b      	ldr	r3, [r3, #8]
 8011a22:	6820      	ldr	r0, [r4, #0]
 8011a24:	4798      	blx	r3
	return generate_dhkey(smp);
 8011a26:	4620      	mov	r0, r4
 8011a28:	f7ff ff8a 	bl	8011940 <generate_dhkey>
 8011a2c:	4603      	mov	r3, r0
}
 8011a2e:	4618      	mov	r0, r3
 8011a30:	bd10      	pop	{r4, pc}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
 8011a32:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
 8011a36:	f3bf 8f5b 	dmb	ish
 8011a3a:	e853 2f00 	ldrex	r2, [r3]
 8011a3e:	f042 0210 	orr.w	r2, r2, #16
 8011a42:	e843 2100 	strex	r1, r2, [r3]
 8011a46:	2900      	cmp	r1, #0
 8011a48:	d1f7      	bne.n	8011a3a <smp_public_key_slave+0xc6>
 8011a4a:	f3bf 8f5b 	dmb	ish
}
 8011a4e:	e7ea      	b.n	8011a26 <smp_public_key_slave+0xb2>
	switch (smp->method) {
 8011a50:	2308      	movs	r3, #8
 8011a52:	e7ec      	b.n	8011a2e <smp_public_key_slave+0xba>
 8011a54:	20002088 	.word	0x20002088

08011a58 <smp_public_key>:
{
 8011a58:	b570      	push	{r4, r5, r6, lr}
 8011a5a:	4604      	mov	r4, r0
	struct bt_smp_public_key *req = (void *)buf->data;
 8011a5c:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
 8011a5e:	f200 150f 	addw	r5, r0, #271	; 0x10f
 8011a62:	2220      	movs	r2, #32
 8011a64:	4631      	mov	r1, r6
 8011a66:	4628      	mov	r0, r5
 8011a68:	f006 fa08 	bl	8017e7c <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
 8011a6c:	2220      	movs	r2, #32
 8011a6e:	18b1      	adds	r1, r6, r2
 8011a70:	f204 102f 	addw	r0, r4, #303	; 0x12f
 8011a74:	f006 fa02 	bl	8017e7c <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
 8011a78:	2240      	movs	r2, #64	; 0x40
 8011a7a:	4920      	ldr	r1, [pc, #128]	; (8011afc <smp_public_key+0xa4>)
 8011a7c:	4628      	mov	r0, r5
 8011a7e:	f006 f9e5 	bl	8017e4c <memcmp>
 8011a82:	bb10      	cbnz	r0, 8011aca <smp_public_key+0x72>
		BT_INFO("Remote is using Debug Public key");
 8011a84:	f04f 0100 	mov.w	r1, #0
 8011a88:	2303      	movs	r3, #3
 8011a8a:	f363 0102 	bfi	r1, r3, #0, #3
 8011a8e:	f36f 01c5 	bfc	r1, #3, #3
 8011a92:	4b1b      	ldr	r3, [pc, #108]	; (8011b00 <smp_public_key+0xa8>)
 8011a94:	4a1b      	ldr	r2, [pc, #108]	; (8011b04 <smp_public_key+0xac>)
 8011a96:	1a9b      	subs	r3, r3, r2
 8011a98:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8011a9c:	f363 118f 	bfi	r1, r3, #6, #10
 8011aa0:	4819      	ldr	r0, [pc, #100]	; (8011b08 <smp_public_key+0xb0>)
 8011aa2:	f7f2 fd53 	bl	800454c <log_0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
 8011aa6:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8011aaa:	f3bf 8f5b 	dmb	ish
 8011aae:	e853 2f00 	ldrex	r2, [r3]
 8011ab2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011ab6:	e843 2100 	strex	r1, r2, [r3]
 8011aba:	2900      	cmp	r1, #0
 8011abc:	d1f7      	bne.n	8011aae <smp_public_key+0x56>
 8011abe:	f3bf 8f5b 	dmb	ish
		if (!update_debug_keys_check(smp)) {
 8011ac2:	4620      	mov	r0, r4
 8011ac4:	f008 ff2f 	bl	801a926 <update_debug_keys_check>
 8011ac8:	b1a8      	cbz	r0, 8011af6 <smp_public_key+0x9e>
	if (!sc_public_key) {
 8011aca:	4b10      	ldr	r3, [pc, #64]	; (8011b0c <smp_public_key+0xb4>)
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	b11b      	cbz	r3, 8011ad8 <smp_public_key+0x80>
	err = smp_public_key_slave(smp);
 8011ad0:	4620      	mov	r0, r4
 8011ad2:	f7ff ff4f 	bl	8011974 <smp_public_key_slave>
}
 8011ad6:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
 8011ad8:	34bc      	adds	r4, #188	; 0xbc
 8011ada:	f3bf 8f5b 	dmb	ish
 8011ade:	e854 3f00 	ldrex	r3, [r4]
 8011ae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ae6:	e844 3200 	strex	r2, r3, [r4]
 8011aea:	2a00      	cmp	r2, #0
 8011aec:	d1f7      	bne.n	8011ade <smp_public_key+0x86>
 8011aee:	f3bf 8f5b 	dmb	ish
		return 0;
 8011af2:	2000      	movs	r0, #0
 8011af4:	e7ef      	b.n	8011ad6 <smp_public_key+0x7e>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
 8011af6:	2003      	movs	r0, #3
 8011af8:	e7ed      	b.n	8011ad6 <smp_public_key+0x7e>
 8011afa:	bf00      	nop
 8011afc:	08021748 	.word	0x08021748
 8011b00:	0801d730 	.word	0x0801d730
 8011b04:	0801d6d0 	.word	0x0801d6d0
 8011b08:	080215d8 	.word	0x080215d8
 8011b0c:	2000214c 	.word	0x2000214c

08011b10 <smp_ident_info>:
{
 8011b10:	b570      	push	{r4, r5, r6, lr}
 8011b12:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8011b14:	f3bf 8f5b 	dmb	ish
 8011b18:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8011b1c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
 8011b20:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8011b24:	d00e      	beq.n	8011b44 <smp_ident_info+0x34>
		struct bt_smp_ident_info *req = (void *)buf->data;
 8011b26:	688e      	ldr	r6, [r1, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
 8011b28:	6803      	ldr	r3, [r0, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
 8011b2a:	f103 0588 	add.w	r5, r3, #136	; 0x88
 8011b2e:	462a      	mov	r2, r5
 8011b30:	7a19      	ldrb	r1, [r3, #8]
 8011b32:	2002      	movs	r0, #2
 8011b34:	f009 f935 	bl	801ada2 <bt_keys_get_type>
		if (!keys) {
 8011b38:	b198      	cbz	r0, 8011b62 <smp_ident_info+0x52>
		memcpy(keys->irk.val, req->irk, 16);
 8011b3a:	2210      	movs	r2, #16
 8011b3c:	4631      	mov	r1, r6
 8011b3e:	302a      	adds	r0, #42	; 0x2a
 8011b40:	f006 f99c 	bl	8017e7c <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
 8011b44:	34b8      	adds	r4, #184	; 0xb8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8011b46:	f3bf 8f5b 	dmb	ish
 8011b4a:	e854 3f00 	ldrex	r3, [r4]
 8011b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011b52:	e844 3200 	strex	r2, r3, [r4]
 8011b56:	2a00      	cmp	r2, #0
 8011b58:	d1f7      	bne.n	8011b4a <smp_ident_info+0x3a>
 8011b5a:	f3bf 8f5b 	dmb	ish
	return 0;
 8011b5e:	2000      	movs	r0, #0
}
 8011b60:	bd70      	pop	{r4, r5, r6, pc}
			BT_ERR("Unable to get keys for %s",
 8011b62:	f04f 0400 	mov.w	r4, #0
 8011b66:	2301      	movs	r3, #1
 8011b68:	f363 0402 	bfi	r4, r3, #0, #3
 8011b6c:	f36f 04c5 	bfc	r4, #3, #3
 8011b70:	4b09      	ldr	r3, [pc, #36]	; (8011b98 <smp_ident_info+0x88>)
 8011b72:	4a0a      	ldr	r2, [pc, #40]	; (8011b9c <smp_ident_info+0x8c>)
 8011b74:	1a9b      	subs	r3, r3, r2
 8011b76:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8011b7a:	f363 148f 	bfi	r4, r3, #6, #10
 8011b7e:	4628      	mov	r0, r5
 8011b80:	f7f7 fe46 	bl	8009810 <bt_addr_le_str_real>
 8011b84:	f7f2 f9a2 	bl	8003ecc <log_strdup>
 8011b88:	4601      	mov	r1, r0
 8011b8a:	4622      	mov	r2, r4
 8011b8c:	4804      	ldr	r0, [pc, #16]	; (8011ba0 <smp_ident_info+0x90>)
 8011b8e:	f7f2 fb6d 	bl	800426c <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
 8011b92:	2008      	movs	r0, #8
 8011b94:	e7e4      	b.n	8011b60 <smp_ident_info+0x50>
 8011b96:	bf00      	nop
 8011b98:	0801d730 	.word	0x0801d730
 8011b9c:	0801d6d0 	.word	0x0801d6d0
 8011ba0:	080215fc 	.word	0x080215fc

08011ba4 <smp_ident_addr_info>:
{
 8011ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ba8:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
 8011baa:	6806      	ldr	r6, [r0, #0]
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
 8011bac:	688d      	ldr	r5, [r1, #8]
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
 8011bae:	782b      	ldrb	r3, [r5, #0]
 8011bb0:	b123      	cbz	r3, 8011bbc <smp_ident_addr_info+0x18>
		return true;
	}

	return BT_ADDR_IS_STATIC(&addr->a);
 8011bb2:	79ab      	ldrb	r3, [r5, #6]
 8011bb4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	if (!bt_addr_le_is_identity(&req->addr)) {
 8011bb8:	2bc0      	cmp	r3, #192	; 0xc0
 8011bba:	d127      	bne.n	8011c0c <smp_ident_addr_info+0x68>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8011bbc:	f3bf 8f5b 	dmb	ish
 8011bc0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8011bc4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
 8011bc8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8011bcc:	d14c      	bne.n	8011c68 <smp_ident_addr_info+0xc4>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
 8011bce:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
 8011bd2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8011bd6:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
 8011bda:	f013 0f04 	tst.w	r3, #4
 8011bde:	d00d      	beq.n	8011bfc <smp_ident_addr_info+0x58>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
 8011be0:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8011be4:	f3bf 8f5b 	dmb	ish
 8011be8:	e853 2f00 	ldrex	r2, [r3]
 8011bec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011bf0:	e843 2100 	strex	r1, r2, [r3]
 8011bf4:	2900      	cmp	r1, #0
 8011bf6:	d1f7      	bne.n	8011be8 <smp_ident_addr_info+0x44>
 8011bf8:	f3bf 8f5b 	dmb	ish
	if (!smp->local_dist && !smp->remote_dist) {
 8011bfc:	f8b4 31a0 	ldrh.w	r3, [r4, #416]	; 0x1a0
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	f000 8085 	beq.w	8011d10 <smp_ident_addr_info+0x16c>
	return 0;
 8011c06:	2000      	movs	r0, #0
}
 8011c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
 8011c0c:	f04f 0801 	mov.w	r8, #1
 8011c10:	f04f 0700 	mov.w	r7, #0
 8011c14:	f368 0702 	bfi	r7, r8, #0, #3
 8011c18:	f36f 07c5 	bfc	r7, #3, #3
 8011c1c:	4c3f      	ldr	r4, [pc, #252]	; (8011d1c <smp_ident_addr_info+0x178>)
 8011c1e:	4b40      	ldr	r3, [pc, #256]	; (8011d20 <smp_ident_addr_info+0x17c>)
 8011c20:	1ae4      	subs	r4, r4, r3
 8011c22:	f3c4 04c9 	ubfx	r4, r4, #3, #10
 8011c26:	f364 178f 	bfi	r7, r4, #6, #10
 8011c2a:	4628      	mov	r0, r5
 8011c2c:	f7f7 fdf0 	bl	8009810 <bt_addr_le_str_real>
 8011c30:	f7f2 f94c 	bl	8003ecc <log_strdup>
 8011c34:	4601      	mov	r1, r0
 8011c36:	463a      	mov	r2, r7
 8011c38:	483a      	ldr	r0, [pc, #232]	; (8011d24 <smp_ident_addr_info+0x180>)
 8011c3a:	f7f2 fb17 	bl	800426c <log_1>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
 8011c3e:	f04f 0500 	mov.w	r5, #0
 8011c42:	f368 0502 	bfi	r5, r8, #0, #3
 8011c46:	f36f 05c5 	bfc	r5, #3, #3
 8011c4a:	f364 158f 	bfi	r5, r4, #6, #10
 8011c4e:	f106 0088 	add.w	r0, r6, #136	; 0x88
 8011c52:	f7f7 fddd 	bl	8009810 <bt_addr_le_str_real>
 8011c56:	f7f2 f939 	bl	8003ecc <log_strdup>
 8011c5a:	4601      	mov	r1, r0
 8011c5c:	462a      	mov	r2, r5
 8011c5e:	4832      	ldr	r0, [pc, #200]	; (8011d28 <smp_ident_addr_info+0x184>)
 8011c60:	f7f2 fb04 	bl	800426c <log_1>
		return BT_SMP_ERR_INVALID_PARAMS;
 8011c64:	200a      	movs	r0, #10
 8011c66:	e7cf      	b.n	8011c08 <smp_ident_addr_info+0x64>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
 8011c68:	f106 0888 	add.w	r8, r6, #136	; 0x88
 8011c6c:	4642      	mov	r2, r8
 8011c6e:	7a31      	ldrb	r1, [r6, #8]
 8011c70:	2002      	movs	r0, #2
 8011c72:	f009 f896 	bl	801ada2 <bt_keys_get_type>
		if (!keys) {
 8011c76:	4607      	mov	r7, r0
 8011c78:	b178      	cbz	r0, 8011c9a <smp_ident_addr_info+0xf6>
		if (conn->role == BT_HCI_ROLE_MASTER) {
 8011c7a:	78f3      	ldrb	r3, [r6, #3]
 8011c7c:	bb3b      	cbnz	r3, 8011cce <smp_ident_addr_info+0x12a>
			dst = &conn->le.resp_addr;
 8011c7e:	f106 0196 	add.w	r1, r6, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
 8011c82:	780b      	ldrb	r3, [r1, #0]
 8011c84:	2b01      	cmp	r3, #1
 8011c86:	d104      	bne.n	8011c92 <smp_ident_addr_info+0xee>
	return BT_ADDR_IS_RPA(&addr->a);
 8011c88:	798b      	ldrb	r3, [r1, #6]
 8011c8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
		if (bt_addr_le_is_rpa(dst)) {
 8011c8e:	2b40      	cmp	r3, #64	; 0x40
 8011c90:	d020      	beq.n	8011cd4 <smp_ident_addr_info+0x130>
		bt_id_add(keys);
 8011c92:	4638      	mov	r0, r7
 8011c94:	f7f9 fd56 	bl	800b744 <bt_id_add>
 8011c98:	e799      	b.n	8011bce <smp_ident_addr_info+0x2a>
			BT_ERR("Unable to get keys for %s",
 8011c9a:	f04f 0400 	mov.w	r4, #0
 8011c9e:	2301      	movs	r3, #1
 8011ca0:	f363 0402 	bfi	r4, r3, #0, #3
 8011ca4:	f36f 04c5 	bfc	r4, #3, #3
 8011ca8:	4b1c      	ldr	r3, [pc, #112]	; (8011d1c <smp_ident_addr_info+0x178>)
 8011caa:	4a1d      	ldr	r2, [pc, #116]	; (8011d20 <smp_ident_addr_info+0x17c>)
 8011cac:	1a9b      	subs	r3, r3, r2
 8011cae:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8011cb2:	f363 148f 	bfi	r4, r3, #6, #10
 8011cb6:	4640      	mov	r0, r8
 8011cb8:	f7f7 fdaa 	bl	8009810 <bt_addr_le_str_real>
 8011cbc:	f7f2 f906 	bl	8003ecc <log_strdup>
 8011cc0:	4601      	mov	r1, r0
 8011cc2:	4622      	mov	r2, r4
 8011cc4:	4819      	ldr	r0, [pc, #100]	; (8011d2c <smp_ident_addr_info+0x188>)
 8011cc6:	f7f2 fad1 	bl	800426c <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
 8011cca:	2008      	movs	r0, #8
 8011ccc:	e79c      	b.n	8011c08 <smp_ident_addr_info+0x64>
			dst = &conn->le.init_addr;
 8011cce:	f106 018f 	add.w	r1, r6, #143	; 0x8f
 8011cd2:	e7d6      	b.n	8011c82 <smp_ident_addr_info+0xde>
	memcpy(dst, src, sizeof(*dst));
 8011cd4:	2206      	movs	r2, #6
 8011cd6:	3101      	adds	r1, #1
 8011cd8:	f107 003a 	add.w	r0, r7, #58	; 0x3a
 8011cdc:	f006 f8ce 	bl	8017e7c <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
 8011ce0:	f896 3088 	ldrb.w	r3, [r6, #136]	; 0x88
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d0d4      	beq.n	8011c92 <smp_ident_addr_info+0xee>
	return BT_ADDR_IS_STATIC(&addr->a);
 8011ce8:	f896 308e 	ldrb.w	r3, [r6, #142]	; 0x8e
 8011cec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
 8011cf0:	2bc0      	cmp	r3, #192	; 0xc0
 8011cf2:	d0ce      	beq.n	8011c92 <smp_ident_addr_info+0xee>
	memcpy(dst, src, sizeof(*dst));
 8011cf4:	2207      	movs	r2, #7
 8011cf6:	4629      	mov	r1, r5
 8011cf8:	1c78      	adds	r0, r7, #1
 8011cfa:	f006 f8bf 	bl	8017e7c <memcpy>
 8011cfe:	2207      	movs	r2, #7
 8011d00:	4629      	mov	r1, r5
 8011d02:	4640      	mov	r0, r8
 8011d04:	f006 f8ba 	bl	8017e7c <memcpy>
				bt_conn_identity_resolved(conn);
 8011d08:	4630      	mov	r0, r6
 8011d0a:	f7fb fadb 	bl	800d2c4 <bt_conn_identity_resolved>
 8011d0e:	e7c0      	b.n	8011c92 <smp_ident_addr_info+0xee>
		smp_pairing_complete(smp, 0);
 8011d10:	2100      	movs	r1, #0
 8011d12:	4620      	mov	r0, r4
 8011d14:	f7ff f94a 	bl	8010fac <smp_pairing_complete>
	return 0;
 8011d18:	2000      	movs	r0, #0
 8011d1a:	e775      	b.n	8011c08 <smp_ident_addr_info+0x64>
 8011d1c:	0801d730 	.word	0x0801d730
 8011d20:	0801d6d0 	.word	0x0801d6d0
 8011d24:	08021618 	.word	0x08021618
 8011d28:	0802162c 	.word	0x0802162c
 8011d2c:	080215fc 	.word	0x080215fc

08011d30 <bt_smp_connected>:
{
 8011d30:	b510      	push	{r4, lr}
 8011d32:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
 8011d34:	4904      	ldr	r1, [pc, #16]	; (8011d48 <bt_smp_connected+0x18>)
 8011d36:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
 8011d3a:	f00b f8f5 	bl	801cf28 <k_delayed_work_init>
	smp_reset(smp);
 8011d3e:	4620      	mov	r0, r4
 8011d40:	f008 fb23 	bl	801a38a <smp_reset>
}
 8011d44:	bd10      	pop	{r4, pc}
 8011d46:	bf00      	nop
 8011d48:	0801114d 	.word	0x0801114d

08011d4c <bt_smp_pkey_ready>:
{
 8011d4c:	b538      	push	{r3, r4, r5, lr}
	sc_public_key = pkey;
 8011d4e:	4b1b      	ldr	r3, [pc, #108]	; (8011dbc <bt_smp_pkey_ready+0x70>)
 8011d50:	6018      	str	r0, [r3, #0]
	if (!pkey) {
 8011d52:	b988      	cbnz	r0, 8011d78 <bt_smp_pkey_ready+0x2c>
		BT_WARN("Public key not available");
 8011d54:	f04f 0100 	mov.w	r1, #0
 8011d58:	2302      	movs	r3, #2
 8011d5a:	f363 0102 	bfi	r1, r3, #0, #3
 8011d5e:	f36f 01c5 	bfc	r1, #3, #3
 8011d62:	4b17      	ldr	r3, [pc, #92]	; (8011dc0 <bt_smp_pkey_ready+0x74>)
 8011d64:	4a17      	ldr	r2, [pc, #92]	; (8011dc4 <bt_smp_pkey_ready+0x78>)
 8011d66:	1a9b      	subs	r3, r3, r2
 8011d68:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8011d6c:	f363 118f 	bfi	r1, r3, #6, #10
 8011d70:	4815      	ldr	r0, [pc, #84]	; (8011dc8 <bt_smp_pkey_ready+0x7c>)
 8011d72:	f7f2 fbeb 	bl	800454c <log_0>
}
 8011d76:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
 8011d78:	4814      	ldr	r0, [pc, #80]	; (8011dcc <bt_smp_pkey_ready+0x80>)
 8011d7a:	f002 fb59 	bl	8014430 <z_impl_k_sem_give>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
 8011d7e:	2400      	movs	r4, #0
 8011d80:	2c00      	cmp	r4, #0
 8011d82:	dcf8      	bgt.n	8011d76 <bt_smp_pkey_ready+0x2a>
		struct bt_smp *smp = &bt_smp_pool[i];
 8011d84:	4a12      	ldr	r2, [pc, #72]	; (8011dd0 <bt_smp_pkey_ready+0x84>)
 8011d86:	f44f 73ec 	mov.w	r3, #472	; 0x1d8
 8011d8a:	fb03 f304 	mul.w	r3, r3, r4
 8011d8e:	18d5      	adds	r5, r2, r3
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
 8011d90:	33b8      	adds	r3, #184	; 0xb8
 8011d92:	4413      	add	r3, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8011d94:	f3bf 8f5b 	dmb	ish
 8011d98:	685b      	ldr	r3, [r3, #4]
 8011d9a:	f3bf 8f5b 	dmb	ish
 8011d9e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8011da2:	d004      	beq.n	8011dae <bt_smp_pkey_ready+0x62>
		err = smp_public_key_slave(smp);
 8011da4:	4628      	mov	r0, r5
 8011da6:	f7ff fde5 	bl	8011974 <smp_public_key_slave>
		if (err) {
 8011daa:	4601      	mov	r1, r0
 8011dac:	b908      	cbnz	r0, 8011db2 <bt_smp_pkey_ready+0x66>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
 8011dae:	3401      	adds	r4, #1
 8011db0:	e7e6      	b.n	8011d80 <bt_smp_pkey_ready+0x34>
			smp_error(smp, err);
 8011db2:	4628      	mov	r0, r5
 8011db4:	f008 fd7d 	bl	801a8b2 <smp_error>
 8011db8:	e7f9      	b.n	8011dae <bt_smp_pkey_ready+0x62>
 8011dba:	bf00      	nop
 8011dbc:	2000214c 	.word	0x2000214c
 8011dc0:	0801d730 	.word	0x0801d730
 8011dc4:	0801d6d0 	.word	0x0801d6d0
 8011dc8:	08021634 	.word	0x08021634
 8011dcc:	20000850 	.word	0x20000850
 8011dd0:	200010c0 	.word	0x200010c0

08011dd4 <bt_smp_update_keys>:
{
 8011dd4:	b570      	push	{r4, r5, r6, lr}
 8011dd6:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
 8011dd8:	f7fe fede 	bl	8010b98 <smp_chan_get>
	if (!smp) {
 8011ddc:	2800      	cmp	r0, #0
 8011dde:	d06f      	beq.n	8011ec0 <bt_smp_update_keys+0xec>
 8011de0:	4605      	mov	r5, r0
 8011de2:	f3bf 8f5b 	dmb	ish
 8011de6:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8011dea:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
 8011dee:	f013 0f08 	tst.w	r3, #8
 8011df2:	d065      	beq.n	8011ec0 <bt_smp_update_keys+0xec>
	if (conn->le.keys) {
 8011df4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8011df8:	b108      	cbz	r0, 8011dfe <bt_smp_update_keys+0x2a>
		bt_keys_clear(conn->le.keys);
 8011dfa:	f000 f9e5 	bl	80121c8 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
 8011dfe:	f104 0688 	add.w	r6, r4, #136	; 0x88
 8011e02:	4631      	mov	r1, r6
 8011e04:	7a20      	ldrb	r0, [r4, #8]
 8011e06:	f000 f8b7 	bl	8011f78 <bt_keys_get_addr>
 8011e0a:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
 8011e0e:	b1d8      	cbz	r0, 8011e48 <bt_smp_update_keys+0x74>
 8011e10:	f3bf 8f5b 	dmb	ish
 8011e14:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
 8011e18:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
 8011e1c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8011e20:	d005      	beq.n	8011e2e <bt_smp_update_keys+0x5a>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
 8011e22:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 8011e26:	7b53      	ldrb	r3, [r2, #13]
 8011e28:	f043 0302 	orr.w	r3, r3, #2
 8011e2c:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
 8011e2e:	f895 30c0 	ldrb.w	r3, [r5, #192]	; 0xc0
 8011e32:	2b03      	cmp	r3, #3
 8011e34:	d825      	bhi.n	8011e82 <bt_smp_update_keys+0xae>
 8011e36:	b25b      	sxtb	r3, r3
 8011e38:	bb3b      	cbnz	r3, 8011e8a <bt_smp_update_keys+0xb6>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
 8011e3a:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 8011e3e:	7b53      	ldrb	r3, [r2, #13]
 8011e40:	f023 0301 	bic.w	r3, r3, #1
 8011e44:	7353      	strb	r3, [r2, #13]
		break;
 8011e46:	e026      	b.n	8011e96 <bt_smp_update_keys+0xc2>
		BT_ERR("Unable to get keys for %s",
 8011e48:	f04f 0400 	mov.w	r4, #0
 8011e4c:	2301      	movs	r3, #1
 8011e4e:	f363 0402 	bfi	r4, r3, #0, #3
 8011e52:	f36f 04c5 	bfc	r4, #3, #3
 8011e56:	4b30      	ldr	r3, [pc, #192]	; (8011f18 <bt_smp_update_keys+0x144>)
 8011e58:	4a30      	ldr	r2, [pc, #192]	; (8011f1c <bt_smp_update_keys+0x148>)
 8011e5a:	1a9b      	subs	r3, r3, r2
 8011e5c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8011e60:	f363 148f 	bfi	r4, r3, #6, #10
 8011e64:	4630      	mov	r0, r6
 8011e66:	f7f7 fcd3 	bl	8009810 <bt_addr_le_str_real>
 8011e6a:	f7f2 f82f 	bl	8003ecc <log_strdup>
 8011e6e:	4601      	mov	r1, r0
 8011e70:	4622      	mov	r2, r4
 8011e72:	482b      	ldr	r0, [pc, #172]	; (8011f20 <bt_smp_update_keys+0x14c>)
 8011e74:	f7f2 f9fa 	bl	800426c <log_1>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
 8011e78:	2108      	movs	r1, #8
 8011e7a:	4628      	mov	r0, r5
 8011e7c:	f008 fd19 	bl	801a8b2 <smp_error>
		return;
 8011e80:	e01e      	b.n	8011ec0 <bt_smp_update_keys+0xec>
	switch (smp->method) {
 8011e82:	3b05      	subs	r3, #5
 8011e84:	b2db      	uxtb	r3, r3
 8011e86:	2b01      	cmp	r3, #1
 8011e88:	d8d7      	bhi.n	8011e3a <bt_smp_update_keys+0x66>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
 8011e8a:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 8011e8e:	7b53      	ldrb	r3, [r2, #13]
 8011e90:	f043 0301 	orr.w	r3, r3, #1
 8011e94:	7353      	strb	r3, [r2, #13]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
 8011e96:	f8d4 60b4 	ldr.w	r6, [r4, #180]	; 0xb4
 8011e9a:	4628      	mov	r0, r5
 8011e9c:	f008 f9f8 	bl	801a290 <get_encryption_key_size>
 8011ea0:	7330      	strb	r0, [r6, #12]
 8011ea2:	f3bf 8f5b 	dmb	ish
 8011ea6:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
 8011eaa:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
 8011eae:	f013 0f20 	tst.w	r3, #32
 8011eb2:	d106      	bne.n	8011ec2 <bt_smp_update_keys+0xee>
		conn->le.keys->flags &= ~BT_KEYS_SC;
 8011eb4:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 8011eb8:	7b53      	ldrb	r3, [r2, #13]
 8011eba:	f023 0310 	bic.w	r3, r3, #16
 8011ebe:	7353      	strb	r3, [r2, #13]
}
 8011ec0:	bd70      	pop	{r4, r5, r6, pc}
		conn->le.keys->flags |= BT_KEYS_SC;
 8011ec2:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 8011ec6:	7b53      	ldrb	r3, [r2, #13]
 8011ec8:	f043 0310 	orr.w	r3, r3, #16
 8011ecc:	7353      	strb	r3, [r2, #13]
 8011ece:	f3bf 8f5b 	dmb	ish
 8011ed2:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
 8011ed6:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
 8011eda:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8011ede:	d0ef      	beq.n	8011ec0 <bt_smp_update_keys+0xec>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
 8011ee0:	2120      	movs	r1, #32
 8011ee2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8011ee6:	f008 ff58 	bl	801ad9a <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
 8011eea:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8011eee:	2210      	movs	r2, #16
 8011ef0:	f105 01ff 	add.w	r1, r5, #255	; 0xff
 8011ef4:	301a      	adds	r0, #26
 8011ef6:	f005 ffc1 	bl	8017e7c <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
 8011efa:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8011efe:	2208      	movs	r2, #8
 8011f00:	2100      	movs	r1, #0
 8011f02:	3010      	adds	r0, #16
 8011f04:	f005 ffdf 	bl	8017ec6 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
 8011f08:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8011f0c:	2202      	movs	r2, #2
 8011f0e:	2100      	movs	r1, #0
 8011f10:	3018      	adds	r0, #24
 8011f12:	f005 ffd8 	bl	8017ec6 <memset>
 8011f16:	e7d3      	b.n	8011ec0 <bt_smp_update_keys+0xec>
 8011f18:	0801d730 	.word	0x0801d730
 8011f1c:	0801d6d0 	.word	0x0801d6d0
 8011f20:	080215fc 	.word	0x080215fc

08011f24 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
 8011f24:	b508      	push	{r3, lr}
	static struct bt_pub_key_cb pub_key_cb = {
		.func           = bt_smp_pkey_ready,
	};

	sc_supported = le_sc_supported();
 8011f26:	f7fe fd57 	bl	80109d8 <le_sc_supported>
 8011f2a:	4b0e      	ldr	r3, [pc, #56]	; (8011f64 <bt_smp_init+0x40>)
 8011f2c:	7018      	strb	r0, [r3, #0]
	if (IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) && !sc_supported) {
 8011f2e:	b120      	cbz	r0, 8011f3a <bt_smp_init+0x16>
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
 8011f30:	480d      	ldr	r0, [pc, #52]	; (8011f68 <bt_smp_init+0x44>)
 8011f32:	f7fa fedf 	bl	800ccf4 <bt_pub_key_gen>
	}

	return smp_self_test();
 8011f36:	2000      	movs	r0, #0
}
 8011f38:	bd08      	pop	{r3, pc}
		BT_ERR("SC Pair Only Mode selected but LE SC not supported");
 8011f3a:	f04f 0100 	mov.w	r1, #0
 8011f3e:	2301      	movs	r3, #1
 8011f40:	f363 0102 	bfi	r1, r3, #0, #3
 8011f44:	f36f 01c5 	bfc	r1, #3, #3
 8011f48:	4b08      	ldr	r3, [pc, #32]	; (8011f6c <bt_smp_init+0x48>)
 8011f4a:	4a09      	ldr	r2, [pc, #36]	; (8011f70 <bt_smp_init+0x4c>)
 8011f4c:	1a9b      	subs	r3, r3, r2
 8011f4e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8011f52:	f363 118f 	bfi	r1, r3, #6, #10
 8011f56:	4807      	ldr	r0, [pc, #28]	; (8011f74 <bt_smp_init+0x50>)
 8011f58:	f7f2 faf8 	bl	800454c <log_0>
		return -ENOENT;
 8011f5c:	f06f 0001 	mvn.w	r0, #1
 8011f60:	e7ea      	b.n	8011f38 <bt_smp_init+0x14>
 8011f62:	bf00      	nop
 8011f64:	200034ff 	.word	0x200034ff
 8011f68:	20000580 	.word	0x20000580
 8011f6c:	0801d730 	.word	0x0801d730
 8011f70:	0801d6d0 	.word	0x0801d6d0
 8011f74:	08021650 	.word	0x08021650

08011f78 <bt_keys_get_addr>:
static uint32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
 8011f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f7c:	b082      	sub	sp, #8
 8011f7e:	4605      	mov	r5, r0
 8011f80:	4688      	mov	r8, r1
	struct bt_keys *keys;
	int i;
	size_t first_free_slot = ARRAY_SIZE(key_pool);
 8011f82:	2601      	movs	r6, #1

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
 8011f84:	2400      	movs	r4, #0
 8011f86:	2c00      	cmp	r4, #0
 8011f88:	dd05      	ble.n	8011f96 <bt_keys_get_addr+0x1e>
			first_free_slot = oldest - &key_pool[0];
		}
	}

#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
 8011f8a:	b346      	cbz	r6, 8011fde <bt_keys_get_addr+0x66>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
 8011f8c:	2700      	movs	r7, #0
}
 8011f8e:	4638      	mov	r0, r7
 8011f90:	b002      	add	sp, #8
 8011f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		keys = &key_pool[i];
 8011f96:	4a17      	ldr	r2, [pc, #92]	; (8011ff4 <bt_keys_get_addr+0x7c>)
 8011f98:	01a3      	lsls	r3, r4, #6
 8011f9a:	eb02 1784 	add.w	r7, r2, r4, lsl #6
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
 8011f9e:	5cd3      	ldrb	r3, [r2, r3]
 8011fa0:	42ab      	cmp	r3, r5
 8011fa2:	d003      	beq.n	8011fac <bt_keys_get_addr+0x34>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
 8011fa4:	2e01      	cmp	r6, #1
 8011fa6:	d00a      	beq.n	8011fbe <bt_keys_get_addr+0x46>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
 8011fa8:	3401      	adds	r4, #1
 8011faa:	e7ec      	b.n	8011f86 <bt_keys_get_addr+0xe>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
 8011fac:	4638      	mov	r0, r7
	return memcmp(a, b, sizeof(*a));
 8011fae:	2207      	movs	r2, #7
 8011fb0:	4641      	mov	r1, r8
 8011fb2:	3001      	adds	r0, #1
 8011fb4:	f005 ff4a 	bl	8017e4c <memcmp>
 8011fb8:	2800      	cmp	r0, #0
 8011fba:	d1f3      	bne.n	8011fa4 <bt_keys_get_addr+0x2c>
 8011fbc:	e7e7      	b.n	8011f8e <bt_keys_get_addr+0x16>
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
 8011fbe:	480d      	ldr	r0, [pc, #52]	; (8011ff4 <bt_keys_get_addr+0x7c>)
 8011fc0:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	9300      	str	r3, [sp, #0]
 8011fc8:	f8cd 3003 	str.w	r3, [sp, #3]
 8011fcc:	2207      	movs	r2, #7
 8011fce:	4669      	mov	r1, sp
 8011fd0:	3001      	adds	r0, #1
 8011fd2:	f005 ff3b 	bl	8017e4c <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
 8011fd6:	2800      	cmp	r0, #0
 8011fd8:	d1e6      	bne.n	8011fa8 <bt_keys_get_addr+0x30>
			first_free_slot = i;
 8011fda:	4626      	mov	r6, r4
 8011fdc:	e7e4      	b.n	8011fa8 <bt_keys_get_addr+0x30>
		keys = &key_pool[first_free_slot];
 8011fde:	4b05      	ldr	r3, [pc, #20]	; (8011ff4 <bt_keys_get_addr+0x7c>)
 8011fe0:	01b2      	lsls	r2, r6, #6
 8011fe2:	eb03 1786 	add.w	r7, r3, r6, lsl #6
		keys->id = id;
 8011fe6:	549d      	strb	r5, [r3, r2]
	memcpy(dst, src, sizeof(*dst));
 8011fe8:	2207      	movs	r2, #7
 8011fea:	4641      	mov	r1, r8
 8011fec:	1c78      	adds	r0, r7, #1
 8011fee:	f005 ff45 	bl	8017e7c <memcpy>
		return keys;
 8011ff2:	e7cc      	b.n	8011f8e <bt_keys_get_addr+0x16>
 8011ff4:	20002150 	.word	0x20002150

08011ff8 <bt_foreach_bond>:

void bt_foreach_bond(uint8_t id, void (*func)(const struct bt_bond_info *info,
					   void *user_data),
		     void *user_data)
{
 8011ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ffa:	b083      	sub	sp, #12
 8011ffc:	4607      	mov	r7, r0
 8011ffe:	460e      	mov	r6, r1
 8012000:	4615      	mov	r5, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
 8012002:	2400      	movs	r4, #0
 8012004:	e00a      	b.n	801201c <bt_foreach_bond+0x24>
		struct bt_keys *keys = &key_pool[i];

		if (keys->keys && keys->id == id) {
 8012006:	4b0d      	ldr	r3, [pc, #52]	; (801203c <bt_foreach_bond+0x44>)
 8012008:	eb03 1384 	add.w	r3, r3, r4, lsl #6
 801200c:	89db      	ldrh	r3, [r3, #14]
 801200e:	b123      	cbz	r3, 801201a <bt_foreach_bond+0x22>
 8012010:	01a3      	lsls	r3, r4, #6
 8012012:	4a0a      	ldr	r2, [pc, #40]	; (801203c <bt_foreach_bond+0x44>)
 8012014:	5cd3      	ldrb	r3, [r2, r3]
 8012016:	42bb      	cmp	r3, r7
 8012018:	d004      	beq.n	8012024 <bt_foreach_bond+0x2c>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
 801201a:	3401      	adds	r4, #1
 801201c:	2c00      	cmp	r4, #0
 801201e:	ddf2      	ble.n	8012006 <bt_foreach_bond+0xe>

			bt_addr_le_copy(&info.addr, &keys->addr);
			func(&info, user_data);
		}
	}
}
 8012020:	b003      	add	sp, #12
 8012022:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_addr_le_copy(&info.addr, &keys->addr);
 8012024:	eb02 1184 	add.w	r1, r2, r4, lsl #6
 8012028:	2207      	movs	r2, #7
 801202a:	3101      	adds	r1, #1
 801202c:	4668      	mov	r0, sp
 801202e:	f005 ff25 	bl	8017e7c <memcpy>
			func(&info, user_data);
 8012032:	4629      	mov	r1, r5
 8012034:	4668      	mov	r0, sp
 8012036:	47b0      	blx	r6
 8012038:	e7ef      	b.n	801201a <bt_foreach_bond+0x22>
 801203a:	bf00      	nop
 801203c:	20002150 	.word	0x20002150

08012040 <bt_keys_foreach>:

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
 8012040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012042:	4605      	mov	r5, r0
 8012044:	460f      	mov	r7, r1
 8012046:	4616      	mov	r6, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
 8012048:	2400      	movs	r4, #0
 801204a:	2c00      	cmp	r4, #0
 801204c:	dd00      	ble.n	8012050 <bt_keys_foreach+0x10>
		if ((key_pool[i].keys & type)) {
			func(&key_pool[i], data);
		}
	}
}
 801204e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((key_pool[i].keys & type)) {
 8012050:	4b06      	ldr	r3, [pc, #24]	; (801206c <bt_keys_foreach+0x2c>)
 8012052:	eb03 1384 	add.w	r3, r3, r4, lsl #6
 8012056:	89db      	ldrh	r3, [r3, #14]
 8012058:	422b      	tst	r3, r5
 801205a:	d004      	beq.n	8012066 <bt_keys_foreach+0x26>
			func(&key_pool[i], data);
 801205c:	4631      	mov	r1, r6
 801205e:	4803      	ldr	r0, [pc, #12]	; (801206c <bt_keys_foreach+0x2c>)
 8012060:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8012064:	47b8      	blx	r7
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
 8012066:	3401      	adds	r4, #1
 8012068:	e7ef      	b.n	801204a <bt_keys_foreach+0xa>
 801206a:	bf00      	nop
 801206c:	20002150 	.word	0x20002150

08012070 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
 8012070:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
 8012072:	2200      	movs	r2, #0
 8012074:	4902      	ldr	r1, [pc, #8]	; (8012080 <keys_commit+0x10>)
 8012076:	2002      	movs	r0, #2
 8012078:	f7ff ffe2 	bl	8012040 <bt_keys_foreach>
	}

	return 0;
}
 801207c:	2000      	movs	r0, #0
 801207e:	bd08      	pop	{r3, pc}
 8012080:	0801ad93 	.word	0x0801ad93

08012084 <bt_keys_find>:
{
 8012084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012086:	4607      	mov	r7, r0
 8012088:	460e      	mov	r6, r1
 801208a:	4615      	mov	r5, r2
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
 801208c:	2400      	movs	r4, #0
 801208e:	2c00      	cmp	r4, #0
 8012090:	dd01      	ble.n	8012096 <bt_keys_find+0x12>
	return NULL;
 8012092:	2000      	movs	r0, #0
}
 8012094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
 8012096:	4b0d      	ldr	r3, [pc, #52]	; (80120cc <bt_keys_find+0x48>)
 8012098:	eb03 1384 	add.w	r3, r3, r4, lsl #6
 801209c:	89db      	ldrh	r3, [r3, #14]
 801209e:	421f      	tst	r7, r3
 80120a0:	d004      	beq.n	80120ac <bt_keys_find+0x28>
 80120a2:	01a3      	lsls	r3, r4, #6
 80120a4:	4a09      	ldr	r2, [pc, #36]	; (80120cc <bt_keys_find+0x48>)
 80120a6:	5cd3      	ldrb	r3, [r2, r3]
 80120a8:	429e      	cmp	r6, r3
 80120aa:	d001      	beq.n	80120b0 <bt_keys_find+0x2c>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
 80120ac:	3401      	adds	r4, #1
 80120ae:	e7ee      	b.n	801208e <bt_keys_find+0xa>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
 80120b0:	eb02 1084 	add.w	r0, r2, r4, lsl #6
	return memcmp(a, b, sizeof(*a));
 80120b4:	2207      	movs	r2, #7
 80120b6:	4629      	mov	r1, r5
 80120b8:	3001      	adds	r0, #1
 80120ba:	f005 fec7 	bl	8017e4c <memcmp>
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
 80120be:	2800      	cmp	r0, #0
 80120c0:	d1f4      	bne.n	80120ac <bt_keys_find+0x28>
			return &key_pool[i];
 80120c2:	4802      	ldr	r0, [pc, #8]	; (80120cc <bt_keys_find+0x48>)
 80120c4:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 80120c8:	e7e4      	b.n	8012094 <bt_keys_find+0x10>
 80120ca:	bf00      	nop
 80120cc:	20002150 	.word	0x20002150

080120d0 <bt_keys_find_irk>:
{
 80120d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
 80120d2:	780b      	ldrb	r3, [r1, #0]
 80120d4:	2b01      	cmp	r3, #1
 80120d6:	d154      	bne.n	8012182 <bt_keys_find_irk+0xb2>
 80120d8:	4606      	mov	r6, r0
 80120da:	460d      	mov	r5, r1
	return BT_ADDR_IS_RPA(&addr->a);
 80120dc:	798b      	ldrb	r3, [r1, #6]
 80120de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	if (!bt_addr_le_is_rpa(addr)) {
 80120e2:	2b40      	cmp	r3, #64	; 0x40
 80120e4:	d101      	bne.n	80120ea <bt_keys_find_irk+0x1a>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
 80120e6:	2400      	movs	r4, #0
 80120e8:	e002      	b.n	80120f0 <bt_keys_find_irk+0x20>
		return NULL;
 80120ea:	2000      	movs	r0, #0
 80120ec:	e04a      	b.n	8012184 <bt_keys_find_irk+0xb4>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
 80120ee:	3401      	adds	r4, #1
 80120f0:	2c00      	cmp	r4, #0
 80120f2:	dc1b      	bgt.n	801212c <bt_keys_find_irk+0x5c>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
 80120f4:	4b24      	ldr	r3, [pc, #144]	; (8012188 <bt_keys_find_irk+0xb8>)
 80120f6:	eb03 1384 	add.w	r3, r3, r4, lsl #6
 80120fa:	89db      	ldrh	r3, [r3, #14]
 80120fc:	f013 0f02 	tst.w	r3, #2
 8012100:	d0f5      	beq.n	80120ee <bt_keys_find_irk+0x1e>
		if (key_pool[i].id == id &&
 8012102:	01a3      	lsls	r3, r4, #6
 8012104:	4a20      	ldr	r2, [pc, #128]	; (8012188 <bt_keys_find_irk+0xb8>)
 8012106:	5cd3      	ldrb	r3, [r2, r3]
 8012108:	42b3      	cmp	r3, r6
 801210a:	d1f0      	bne.n	80120ee <bt_keys_find_irk+0x1e>
		    !bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
 801210c:	01a1      	lsls	r1, r4, #6
 801210e:	f101 0338 	add.w	r3, r1, #56	; 0x38
 8012112:	4611      	mov	r1, r2
 8012114:	4419      	add	r1, r3
	return memcmp(a, b, sizeof(*a));
 8012116:	2206      	movs	r2, #6
 8012118:	3102      	adds	r1, #2
 801211a:	1c68      	adds	r0, r5, #1
 801211c:	f005 fe96 	bl	8017e4c <memcmp>
		if (key_pool[i].id == id &&
 8012120:	2800      	cmp	r0, #0
 8012122:	d1e4      	bne.n	80120ee <bt_keys_find_irk+0x1e>
			return &key_pool[i];
 8012124:	4818      	ldr	r0, [pc, #96]	; (8012188 <bt_keys_find_irk+0xb8>)
 8012126:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 801212a:	e02b      	b.n	8012184 <bt_keys_find_irk+0xb4>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
 801212c:	2400      	movs	r4, #0
 801212e:	2c00      	cmp	r4, #0
 8012130:	dd01      	ble.n	8012136 <bt_keys_find_irk+0x66>
	return NULL;
 8012132:	2000      	movs	r0, #0
 8012134:	e026      	b.n	8012184 <bt_keys_find_irk+0xb4>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
 8012136:	4b14      	ldr	r3, [pc, #80]	; (8012188 <bt_keys_find_irk+0xb8>)
 8012138:	eb03 1384 	add.w	r3, r3, r4, lsl #6
 801213c:	89db      	ldrh	r3, [r3, #14]
 801213e:	f013 0f02 	tst.w	r3, #2
 8012142:	d004      	beq.n	801214e <bt_keys_find_irk+0x7e>
		if (key_pool[i].id != id) {
 8012144:	01a3      	lsls	r3, r4, #6
 8012146:	4a10      	ldr	r2, [pc, #64]	; (8012188 <bt_keys_find_irk+0xb8>)
 8012148:	5cd3      	ldrb	r3, [r2, r3]
 801214a:	42b3      	cmp	r3, r6
 801214c:	d001      	beq.n	8012152 <bt_keys_find_irk+0x82>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
 801214e:	3401      	adds	r4, #1
 8012150:	e7ed      	b.n	801212e <bt_keys_find_irk+0x5e>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
 8012152:	01a0      	lsls	r0, r4, #6
 8012154:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8012158:	4610      	mov	r0, r2
 801215a:	4418      	add	r0, r3
 801215c:	1c6f      	adds	r7, r5, #1
 801215e:	4639      	mov	r1, r7
 8012160:	3002      	adds	r0, #2
 8012162:	f005 ff00 	bl	8017f66 <bt_rpa_irk_matches>
 8012166:	2800      	cmp	r0, #0
 8012168:	d0f1      	beq.n	801214e <bt_keys_find_irk+0x7e>
			bt_addr_copy(&key_pool[i].irk.rpa, &addr->a);
 801216a:	4d07      	ldr	r5, [pc, #28]	; (8012188 <bt_keys_find_irk+0xb8>)
 801216c:	01a4      	lsls	r4, r4, #6
 801216e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8012172:	4428      	add	r0, r5
	memcpy(dst, src, sizeof(*dst));
 8012174:	2206      	movs	r2, #6
 8012176:	4639      	mov	r1, r7
 8012178:	3002      	adds	r0, #2
 801217a:	f005 fe7f 	bl	8017e7c <memcpy>
			return &key_pool[i];
 801217e:	1928      	adds	r0, r5, r4
 8012180:	e000      	b.n	8012184 <bt_keys_find_irk+0xb4>
		return NULL;
 8012182:	2000      	movs	r0, #0
}
 8012184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012186:	bf00      	nop
 8012188:	20002150 	.word	0x20002150

0801218c <bt_keys_find_addr>:
{
 801218c:	b570      	push	{r4, r5, r6, lr}
 801218e:	4606      	mov	r6, r0
 8012190:	460d      	mov	r5, r1
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
 8012192:	2400      	movs	r4, #0
 8012194:	2c00      	cmp	r4, #0
 8012196:	dd01      	ble.n	801219c <bt_keys_find_addr+0x10>
	return NULL;
 8012198:	2000      	movs	r0, #0
}
 801219a:	bd70      	pop	{r4, r5, r6, pc}
		if (key_pool[i].id == id &&
 801219c:	01a3      	lsls	r3, r4, #6
 801219e:	4a09      	ldr	r2, [pc, #36]	; (80121c4 <bt_keys_find_addr+0x38>)
 80121a0:	5cd3      	ldrb	r3, [r2, r3]
 80121a2:	429e      	cmp	r6, r3
 80121a4:	d001      	beq.n	80121aa <bt_keys_find_addr+0x1e>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
 80121a6:	3401      	adds	r4, #1
 80121a8:	e7f4      	b.n	8012194 <bt_keys_find_addr+0x8>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
 80121aa:	eb02 1084 	add.w	r0, r2, r4, lsl #6
	return memcmp(a, b, sizeof(*a));
 80121ae:	2207      	movs	r2, #7
 80121b0:	4629      	mov	r1, r5
 80121b2:	3001      	adds	r0, #1
 80121b4:	f005 fe4a 	bl	8017e4c <memcmp>
		if (key_pool[i].id == id &&
 80121b8:	2800      	cmp	r0, #0
 80121ba:	d1f4      	bne.n	80121a6 <bt_keys_find_addr+0x1a>
			return &key_pool[i];
 80121bc:	4801      	ldr	r0, [pc, #4]	; (80121c4 <bt_keys_find_addr+0x38>)
 80121be:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 80121c2:	e7ea      	b.n	801219a <bt_keys_find_addr+0xe>
 80121c4:	20002150 	.word	0x20002150

080121c8 <bt_keys_clear>:
{
 80121c8:	b530      	push	{r4, r5, lr}
 80121ca:	b08d      	sub	sp, #52	; 0x34
 80121cc:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
 80121ce:	7a03      	ldrb	r3, [r0, #8]
 80121d0:	f013 0f04 	tst.w	r3, #4
 80121d4:	d117      	bne.n	8012206 <bt_keys_clear+0x3e>
		if (keys->id) {
 80121d6:	7822      	ldrb	r2, [r4, #0]
 80121d8:	b1c2      	cbz	r2, 801220c <bt_keys_clear+0x44>
			u8_to_dec(id, sizeof(id), keys->id);
 80121da:	ad02      	add	r5, sp, #8
 80121dc:	2104      	movs	r1, #4
 80121de:	4628      	mov	r0, r5
 80121e0:	f7f0 fe7e 	bl	8002ee0 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
 80121e4:	9500      	str	r5, [sp, #0]
 80121e6:	1c63      	adds	r3, r4, #1
 80121e8:	4a0d      	ldr	r2, [pc, #52]	; (8012220 <bt_keys_clear+0x58>)
 80121ea:	2124      	movs	r1, #36	; 0x24
 80121ec:	a803      	add	r0, sp, #12
 80121ee:	f7f7 fc33 	bl	8009a58 <bt_settings_encode_key>
		settings_delete(key);
 80121f2:	a803      	add	r0, sp, #12
 80121f4:	f004 fe83 	bl	8016efe <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
 80121f8:	2240      	movs	r2, #64	; 0x40
 80121fa:	2100      	movs	r1, #0
 80121fc:	4620      	mov	r0, r4
 80121fe:	f005 fe62 	bl	8017ec6 <memset>
}
 8012202:	b00d      	add	sp, #52	; 0x34
 8012204:	bd30      	pop	{r4, r5, pc}
		bt_id_del(keys);
 8012206:	f7f9 fb77 	bl	800b8f8 <bt_id_del>
 801220a:	e7e4      	b.n	80121d6 <bt_keys_clear+0xe>
			bt_settings_encode_key(key, sizeof(key), "keys",
 801220c:	2300      	movs	r3, #0
 801220e:	9300      	str	r3, [sp, #0]
 8012210:	1c63      	adds	r3, r4, #1
 8012212:	4a03      	ldr	r2, [pc, #12]	; (8012220 <bt_keys_clear+0x58>)
 8012214:	2124      	movs	r1, #36	; 0x24
 8012216:	a803      	add	r0, sp, #12
 8012218:	f7f7 fc1e 	bl	8009a58 <bt_settings_encode_key>
 801221c:	e7e9      	b.n	80121f2 <bt_keys_clear+0x2a>
 801221e:	bf00      	nop
 8012220:	08021788 	.word	0x08021788

08012224 <keys_set>:
{
 8012224:	b570      	push	{r4, r5, r6, lr}
 8012226:	b090      	sub	sp, #64	; 0x40
	if (!name) {
 8012228:	b368      	cbz	r0, 8012286 <keys_set+0x62>
 801222a:	4614      	mov	r4, r2
 801222c:	4605      	mov	r5, r0
	len = read_cb(cb_arg, val, sizeof(val));
 801222e:	2234      	movs	r2, #52	; 0x34
 8012230:	a901      	add	r1, sp, #4
 8012232:	4618      	mov	r0, r3
 8012234:	47a0      	blx	r4
	if (len < 0) {
 8012236:	1e04      	subs	r4, r0, #0
 8012238:	db39      	blt.n	80122ae <keys_set+0x8a>
	err = bt_settings_decode_key(name, &addr);
 801223a:	a90e      	add	r1, sp, #56	; 0x38
 801223c:	4628      	mov	r0, r5
 801223e:	f005 fea6 	bl	8017f8e <bt_settings_decode_key>
	if (err) {
 8012242:	4606      	mov	r6, r0
 8012244:	2800      	cmp	r0, #0
 8012246:	d147      	bne.n	80122d8 <keys_set+0xb4>
	settings_name_next(name, &next);
 8012248:	4669      	mov	r1, sp
 801224a:	4628      	mov	r0, r5
 801224c:	f004 fe88 	bl	8016f60 <settings_name_next>
	if (!next) {
 8012250:	9800      	ldr	r0, [sp, #0]
 8012252:	2800      	cmp	r0, #0
 8012254:	d055      	beq.n	8012302 <keys_set+0xde>
		id = strtol(next, NULL, 10);
 8012256:	220a      	movs	r2, #10
 8012258:	2100      	movs	r1, #0
 801225a:	f005 fc93 	bl	8017b84 <strtol>
 801225e:	b2c0      	uxtb	r0, r0
	if (!len) {
 8012260:	2c00      	cmp	r4, #0
 8012262:	d050      	beq.n	8012306 <keys_set+0xe2>
	keys = bt_keys_get_addr(id, &addr);
 8012264:	a90e      	add	r1, sp, #56	; 0x38
 8012266:	f7ff fe87 	bl	8011f78 <bt_keys_get_addr>
	if (!keys) {
 801226a:	4605      	mov	r5, r0
 801226c:	2800      	cmp	r0, #0
 801226e:	d06f      	beq.n	8012350 <keys_set+0x12c>
	if (len != BT_KEYS_STORAGE_LEN) {
 8012270:	2c34      	cmp	r4, #52	; 0x34
 8012272:	f040 8088 	bne.w	8012386 <keys_set+0x162>
		memcpy(keys->storage_start, val, len);
 8012276:	4622      	mov	r2, r4
 8012278:	a901      	add	r1, sp, #4
 801227a:	300c      	adds	r0, #12
 801227c:	f005 fdfe 	bl	8017e7c <memcpy>
}
 8012280:	4630      	mov	r0, r6
 8012282:	b010      	add	sp, #64	; 0x40
 8012284:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Insufficient number of arguments");
 8012286:	f04f 0100 	mov.w	r1, #0
 801228a:	2301      	movs	r3, #1
 801228c:	f363 0102 	bfi	r1, r3, #0, #3
 8012290:	f36f 01c5 	bfc	r1, #3, #3
 8012294:	4b48      	ldr	r3, [pc, #288]	; (80123b8 <keys_set+0x194>)
 8012296:	4a49      	ldr	r2, [pc, #292]	; (80123bc <keys_set+0x198>)
 8012298:	1a9b      	subs	r3, r3, r2
 801229a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 801229e:	f363 118f 	bfi	r1, r3, #6, #10
 80122a2:	4847      	ldr	r0, [pc, #284]	; (80123c0 <keys_set+0x19c>)
 80122a4:	f7f2 f952 	bl	800454c <log_0>
		return -EINVAL;
 80122a8:	f06f 0615 	mvn.w	r6, #21
 80122ac:	e7e8      	b.n	8012280 <keys_set+0x5c>
		BT_ERR("Failed to read value (err %zd)", len);
 80122ae:	f04f 0200 	mov.w	r2, #0
 80122b2:	2301      	movs	r3, #1
 80122b4:	f363 0202 	bfi	r2, r3, #0, #3
 80122b8:	f36f 02c5 	bfc	r2, #3, #3
 80122bc:	4b3e      	ldr	r3, [pc, #248]	; (80123b8 <keys_set+0x194>)
 80122be:	493f      	ldr	r1, [pc, #252]	; (80123bc <keys_set+0x198>)
 80122c0:	1a5b      	subs	r3, r3, r1
 80122c2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80122c6:	f363 128f 	bfi	r2, r3, #6, #10
 80122ca:	4621      	mov	r1, r4
 80122cc:	483d      	ldr	r0, [pc, #244]	; (80123c4 <keys_set+0x1a0>)
 80122ce:	f7f1 ffcd 	bl	800426c <log_1>
		return -EINVAL;
 80122d2:	f06f 0615 	mvn.w	r6, #21
 80122d6:	e7d3      	b.n	8012280 <keys_set+0x5c>
		BT_ERR("Unable to decode address %s", name);
 80122d8:	f04f 0200 	mov.w	r2, #0
 80122dc:	2301      	movs	r3, #1
 80122de:	f363 0202 	bfi	r2, r3, #0, #3
 80122e2:	f36f 02c5 	bfc	r2, #3, #3
 80122e6:	4b34      	ldr	r3, [pc, #208]	; (80123b8 <keys_set+0x194>)
 80122e8:	4934      	ldr	r1, [pc, #208]	; (80123bc <keys_set+0x198>)
 80122ea:	1a5b      	subs	r3, r3, r1
 80122ec:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80122f0:	f363 128f 	bfi	r2, r3, #6, #10
 80122f4:	4629      	mov	r1, r5
 80122f6:	4834      	ldr	r0, [pc, #208]	; (80123c8 <keys_set+0x1a4>)
 80122f8:	f7f1 ffb8 	bl	800426c <log_1>
		return -EINVAL;
 80122fc:	f06f 0615 	mvn.w	r6, #21
 8012300:	e7be      	b.n	8012280 <keys_set+0x5c>
		id = BT_ID_DEFAULT;
 8012302:	2000      	movs	r0, #0
 8012304:	e7ac      	b.n	8012260 <keys_set+0x3c>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
 8012306:	aa0e      	add	r2, sp, #56	; 0x38
 8012308:	4601      	mov	r1, r0
 801230a:	203f      	movs	r0, #63	; 0x3f
 801230c:	f7ff feba 	bl	8012084 <bt_keys_find>
		if (keys) {
 8012310:	b128      	cbz	r0, 801231e <keys_set+0xfa>
			(void)memset(keys, 0, sizeof(*keys));
 8012312:	2240      	movs	r2, #64	; 0x40
 8012314:	2100      	movs	r1, #0
 8012316:	f005 fdd6 	bl	8017ec6 <memset>
		return 0;
 801231a:	4626      	mov	r6, r4
 801231c:	e7b0      	b.n	8012280 <keys_set+0x5c>
			BT_WARN("Unable to find deleted keys for %s",
 801231e:	f04f 0500 	mov.w	r5, #0
 8012322:	2302      	movs	r3, #2
 8012324:	f363 0502 	bfi	r5, r3, #0, #3
 8012328:	f36f 05c5 	bfc	r5, #3, #3
 801232c:	4b22      	ldr	r3, [pc, #136]	; (80123b8 <keys_set+0x194>)
 801232e:	4a23      	ldr	r2, [pc, #140]	; (80123bc <keys_set+0x198>)
 8012330:	1a9b      	subs	r3, r3, r2
 8012332:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8012336:	f363 158f 	bfi	r5, r3, #6, #10
 801233a:	a80e      	add	r0, sp, #56	; 0x38
 801233c:	f7f7 fa68 	bl	8009810 <bt_addr_le_str_real>
 8012340:	f7f1 fdc4 	bl	8003ecc <log_strdup>
 8012344:	4601      	mov	r1, r0
 8012346:	462a      	mov	r2, r5
 8012348:	4820      	ldr	r0, [pc, #128]	; (80123cc <keys_set+0x1a8>)
 801234a:	f7f1 ff8f 	bl	800426c <log_1>
 801234e:	e7e4      	b.n	801231a <keys_set+0xf6>
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
 8012350:	f04f 0400 	mov.w	r4, #0
 8012354:	2301      	movs	r3, #1
 8012356:	f363 0402 	bfi	r4, r3, #0, #3
 801235a:	f36f 04c5 	bfc	r4, #3, #3
 801235e:	4b16      	ldr	r3, [pc, #88]	; (80123b8 <keys_set+0x194>)
 8012360:	4a16      	ldr	r2, [pc, #88]	; (80123bc <keys_set+0x198>)
 8012362:	1a9b      	subs	r3, r3, r2
 8012364:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8012368:	f363 148f 	bfi	r4, r3, #6, #10
 801236c:	a80e      	add	r0, sp, #56	; 0x38
 801236e:	f7f7 fa4f 	bl	8009810 <bt_addr_le_str_real>
 8012372:	f7f1 fdab 	bl	8003ecc <log_strdup>
 8012376:	4601      	mov	r1, r0
 8012378:	4622      	mov	r2, r4
 801237a:	4815      	ldr	r0, [pc, #84]	; (80123d0 <keys_set+0x1ac>)
 801237c:	f7f1 ff76 	bl	800426c <log_1>
		return -ENOMEM;
 8012380:	f06f 060b 	mvn.w	r6, #11
 8012384:	e77c      	b.n	8012280 <keys_set+0x5c>
			BT_ERR("Invalid key length %zd != %zu", len,
 8012386:	f04f 0300 	mov.w	r3, #0
 801238a:	2201      	movs	r2, #1
 801238c:	f362 0302 	bfi	r3, r2, #0, #3
 8012390:	f36f 03c5 	bfc	r3, #3, #3
 8012394:	4a08      	ldr	r2, [pc, #32]	; (80123b8 <keys_set+0x194>)
 8012396:	4909      	ldr	r1, [pc, #36]	; (80123bc <keys_set+0x198>)
 8012398:	1a52      	subs	r2, r2, r1
 801239a:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 801239e:	f362 138f 	bfi	r3, r2, #6, #10
 80123a2:	2234      	movs	r2, #52	; 0x34
 80123a4:	4621      	mov	r1, r4
 80123a6:	480b      	ldr	r0, [pc, #44]	; (80123d4 <keys_set+0x1b0>)
 80123a8:	f7f1 ffe0 	bl	800436c <log_2>
			bt_keys_clear(keys);
 80123ac:	4628      	mov	r0, r5
 80123ae:	f7ff ff0b 	bl	80121c8 <bt_keys_clear>
			return -EINVAL;
 80123b2:	f06f 0615 	mvn.w	r6, #21
 80123b6:	e763      	b.n	8012280 <keys_set+0x5c>
 80123b8:	0801d710 	.word	0x0801d710
 80123bc:	0801d6d0 	.word	0x0801d6d0
 80123c0:	0801fee8 	.word	0x0801fee8
 80123c4:	08021790 	.word	0x08021790
 80123c8:	080212a4 	.word	0x080212a4
 80123cc:	080217b0 	.word	0x080217b0
 80123d0:	080217d4 	.word	0x080217d4
 80123d4:	080217f4 	.word	0x080217f4

080123d8 <bt_keys_store>:
{
 80123d8:	b530      	push	{r4, r5, lr}
 80123da:	b08d      	sub	sp, #52	; 0x34
 80123dc:	4604      	mov	r4, r0
	if (keys->id) {
 80123de:	7802      	ldrb	r2, [r0, #0]
 80123e0:	b1b2      	cbz	r2, 8012410 <bt_keys_store+0x38>
		u8_to_dec(id, sizeof(id), keys->id);
 80123e2:	ad02      	add	r5, sp, #8
 80123e4:	2104      	movs	r1, #4
 80123e6:	4628      	mov	r0, r5
 80123e8:	f7f0 fd7a 	bl	8002ee0 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
 80123ec:	9500      	str	r5, [sp, #0]
 80123ee:	1c63      	adds	r3, r4, #1
 80123f0:	4a15      	ldr	r2, [pc, #84]	; (8012448 <bt_keys_store+0x70>)
 80123f2:	2124      	movs	r1, #36	; 0x24
 80123f4:	a803      	add	r0, sp, #12
 80123f6:	f7f7 fb2f 	bl	8009a58 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
 80123fa:	2234      	movs	r2, #52	; 0x34
 80123fc:	f104 010c 	add.w	r1, r4, #12
 8012400:	a803      	add	r0, sp, #12
 8012402:	f7f3 ff67 	bl	80062d4 <settings_save_one>
	if (err) {
 8012406:	4604      	mov	r4, r0
 8012408:	b958      	cbnz	r0, 8012422 <bt_keys_store+0x4a>
}
 801240a:	4620      	mov	r0, r4
 801240c:	b00d      	add	sp, #52	; 0x34
 801240e:	bd30      	pop	{r4, r5, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
 8012410:	2300      	movs	r3, #0
 8012412:	9300      	str	r3, [sp, #0]
 8012414:	1c43      	adds	r3, r0, #1
 8012416:	4a0c      	ldr	r2, [pc, #48]	; (8012448 <bt_keys_store+0x70>)
 8012418:	2124      	movs	r1, #36	; 0x24
 801241a:	a803      	add	r0, sp, #12
 801241c:	f7f7 fb1c 	bl	8009a58 <bt_settings_encode_key>
 8012420:	e7eb      	b.n	80123fa <bt_keys_store+0x22>
		BT_ERR("Failed to save keys (err %d)", err);
 8012422:	f04f 0200 	mov.w	r2, #0
 8012426:	2301      	movs	r3, #1
 8012428:	f363 0202 	bfi	r2, r3, #0, #3
 801242c:	f36f 02c5 	bfc	r2, #3, #3
 8012430:	4b06      	ldr	r3, [pc, #24]	; (801244c <bt_keys_store+0x74>)
 8012432:	4907      	ldr	r1, [pc, #28]	; (8012450 <bt_keys_store+0x78>)
 8012434:	1a5b      	subs	r3, r3, r1
 8012436:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 801243a:	f363 128f 	bfi	r2, r3, #6, #10
 801243e:	4601      	mov	r1, r0
 8012440:	4804      	ldr	r0, [pc, #16]	; (8012454 <bt_keys_store+0x7c>)
 8012442:	f7f1 ff13 	bl	800426c <log_1>
		return err;
 8012446:	e7e0      	b.n	801240a <bt_keys_store+0x32>
 8012448:	08021788 	.word	0x08021788
 801244c:	0801d710 	.word	0x0801d710
 8012450:	0801d6d0 	.word	0x0801d6d0
 8012454:	08021814 	.word	0x08021814

08012458 <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
 8012458:	4b03      	ldr	r3, [pc, #12]	; (8012468 <pool_id+0x10>)
 801245a:	1ac0      	subs	r0, r0, r3
 801245c:	10c0      	asrs	r0, r0, #3
}
 801245e:	4b03      	ldr	r3, [pc, #12]	; (801246c <pool_id+0x14>)
 8012460:	fb03 f000 	mul.w	r0, r3, r0
 8012464:	4770      	bx	lr
 8012466:	bf00      	nop
 8012468:	20000880 	.word	0x20000880
 801246c:	cccccccd 	.word	0xcccccccd

08012470 <net_buf_pool_get>:
	return &_net_buf_pool_list[id];
 8012470:	eb00 0080 	add.w	r0, r0, r0, lsl #2
}
 8012474:	4b01      	ldr	r3, [pc, #4]	; (801247c <net_buf_pool_get+0xc>)
 8012476:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801247a:	4770      	bx	lr
 801247c:	20000880 	.word	0x20000880

08012480 <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
 8012480:	b510      	push	{r4, lr}
 8012482:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 8012484:	7980      	ldrb	r0, [r0, #6]
 8012486:	f7ff fff3 	bl	8012470 <net_buf_pool_get>

	return buf - pool->__bufs;
 801248a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801248c:	1a24      	subs	r4, r4, r0
 801248e:	10e4      	asrs	r4, r4, #3
}
 8012490:	4801      	ldr	r0, [pc, #4]	; (8012498 <net_buf_id+0x18>)
 8012492:	fb00 f004 	mul.w	r0, r0, r4
 8012496:	bd10      	pop	{r4, pc}
 8012498:	aaaaaaab 	.word	0xaaaaaaab

0801249c <hid_do_status_cb>:
#endif

static void hid_do_status_cb(struct hid_device_info *dev_data,
			     enum usb_dc_status_code status,
			     const uint8_t *param)
{
 801249c:	b510      	push	{r4, lr}
 801249e:	4604      	mov	r4, r0
	switch (status) {
 80124a0:	290a      	cmp	r1, #10
 80124a2:	f200 80a6 	bhi.w	80125f2 <hid_do_status_cb+0x156>
 80124a6:	e8df f001 	tbb	[pc, r1]
 80124aa:	1806      	.short	0x1806
 80124ac:	68533f2d 	.word	0x68533f2d
 80124b0:	a4a4a47c 	.word	0xa4a4a47c
 80124b4:	17          	.byte	0x17
 80124b5:	00          	.byte	0x00
	case USB_DC_ERROR:
		LOG_INF("Device error");
 80124b6:	f04f 0100 	mov.w	r1, #0
 80124ba:	2303      	movs	r3, #3
 80124bc:	f363 0102 	bfi	r1, r3, #0, #3
 80124c0:	f36f 01c5 	bfc	r1, #3, #3
 80124c4:	4b54      	ldr	r3, [pc, #336]	; (8012618 <hid_do_status_cb+0x17c>)
 80124c6:	4a55      	ldr	r2, [pc, #340]	; (801261c <hid_do_status_cb+0x180>)
 80124c8:	1a9b      	subs	r3, r3, r2
 80124ca:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80124ce:	f363 118f 	bfi	r1, r3, #6, #10
 80124d2:	4853      	ldr	r0, [pc, #332]	; (8012620 <hid_do_status_cb+0x184>)
 80124d4:	f7f2 f83a 	bl	800454c <log_0>
	default:
		LOG_INF("Unknown event");
		break;
	}

}
 80124d8:	bd10      	pop	{r4, pc}
		LOG_INF("Device reset detected");
 80124da:	f04f 0100 	mov.w	r1, #0
 80124de:	2303      	movs	r3, #3
 80124e0:	f363 0102 	bfi	r1, r3, #0, #3
 80124e4:	f36f 01c5 	bfc	r1, #3, #3
 80124e8:	4b4b      	ldr	r3, [pc, #300]	; (8012618 <hid_do_status_cb+0x17c>)
 80124ea:	4a4c      	ldr	r2, [pc, #304]	; (801261c <hid_do_status_cb+0x180>)
 80124ec:	1a9b      	subs	r3, r3, r2
 80124ee:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80124f2:	f363 118f 	bfi	r1, r3, #6, #10
 80124f6:	484b      	ldr	r0, [pc, #300]	; (8012624 <hid_do_status_cb+0x188>)
 80124f8:	f7f2 f828 	bl	800454c <log_0>
		dev_data->configured = false;
 80124fc:	2300      	movs	r3, #0
 80124fe:	7323      	strb	r3, [r4, #12]
		dev_data->suspended = false;
 8012500:	7363      	strb	r3, [r4, #13]
		break;
 8012502:	e7e9      	b.n	80124d8 <hid_do_status_cb+0x3c>
		LOG_INF("Device connected");
 8012504:	f04f 0100 	mov.w	r1, #0
 8012508:	2303      	movs	r3, #3
 801250a:	f363 0102 	bfi	r1, r3, #0, #3
 801250e:	f36f 01c5 	bfc	r1, #3, #3
 8012512:	4b41      	ldr	r3, [pc, #260]	; (8012618 <hid_do_status_cb+0x17c>)
 8012514:	4a41      	ldr	r2, [pc, #260]	; (801261c <hid_do_status_cb+0x180>)
 8012516:	1a9b      	subs	r3, r3, r2
 8012518:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 801251c:	f363 118f 	bfi	r1, r3, #6, #10
 8012520:	4841      	ldr	r0, [pc, #260]	; (8012628 <hid_do_status_cb+0x18c>)
 8012522:	f7f2 f813 	bl	800454c <log_0>
 8012526:	e7d7      	b.n	80124d8 <hid_do_status_cb+0x3c>
		LOG_INF("Device configured");
 8012528:	f04f 0100 	mov.w	r1, #0
 801252c:	2303      	movs	r3, #3
 801252e:	f363 0102 	bfi	r1, r3, #0, #3
 8012532:	f36f 01c5 	bfc	r1, #3, #3
 8012536:	4b38      	ldr	r3, [pc, #224]	; (8012618 <hid_do_status_cb+0x17c>)
 8012538:	4a38      	ldr	r2, [pc, #224]	; (801261c <hid_do_status_cb+0x180>)
 801253a:	1a9b      	subs	r3, r3, r2
 801253c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8012540:	f363 118f 	bfi	r1, r3, #6, #10
 8012544:	4839      	ldr	r0, [pc, #228]	; (801262c <hid_do_status_cb+0x190>)
 8012546:	f7f2 f801 	bl	800454c <log_0>
		dev_data->configured = true;
 801254a:	2301      	movs	r3, #1
 801254c:	7323      	strb	r3, [r4, #12]
		break;
 801254e:	e7c3      	b.n	80124d8 <hid_do_status_cb+0x3c>
		LOG_INF("Device disconnected");
 8012550:	f04f 0100 	mov.w	r1, #0
 8012554:	2303      	movs	r3, #3
 8012556:	f363 0102 	bfi	r1, r3, #0, #3
 801255a:	f36f 01c5 	bfc	r1, #3, #3
 801255e:	4b2e      	ldr	r3, [pc, #184]	; (8012618 <hid_do_status_cb+0x17c>)
 8012560:	4a2e      	ldr	r2, [pc, #184]	; (801261c <hid_do_status_cb+0x180>)
 8012562:	1a9b      	subs	r3, r3, r2
 8012564:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8012568:	f363 118f 	bfi	r1, r3, #6, #10
 801256c:	4830      	ldr	r0, [pc, #192]	; (8012630 <hid_do_status_cb+0x194>)
 801256e:	f7f1 ffed 	bl	800454c <log_0>
		dev_data->configured = false;
 8012572:	2300      	movs	r3, #0
 8012574:	7323      	strb	r3, [r4, #12]
		dev_data->suspended = false;
 8012576:	7363      	strb	r3, [r4, #13]
		break;
 8012578:	e7ae      	b.n	80124d8 <hid_do_status_cb+0x3c>
		LOG_INF("Device suspended");
 801257a:	f04f 0100 	mov.w	r1, #0
 801257e:	2303      	movs	r3, #3
 8012580:	f363 0102 	bfi	r1, r3, #0, #3
 8012584:	f36f 01c5 	bfc	r1, #3, #3
 8012588:	4b23      	ldr	r3, [pc, #140]	; (8012618 <hid_do_status_cb+0x17c>)
 801258a:	4a24      	ldr	r2, [pc, #144]	; (801261c <hid_do_status_cb+0x180>)
 801258c:	1a9b      	subs	r3, r3, r2
 801258e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8012592:	f363 118f 	bfi	r1, r3, #6, #10
 8012596:	4827      	ldr	r0, [pc, #156]	; (8012634 <hid_do_status_cb+0x198>)
 8012598:	f7f1 ffd8 	bl	800454c <log_0>
		dev_data->suspended = true;
 801259c:	2301      	movs	r3, #1
 801259e:	7363      	strb	r3, [r4, #13]
		break;
 80125a0:	e79a      	b.n	80124d8 <hid_do_status_cb+0x3c>
		LOG_INF("Device resumed");
 80125a2:	f04f 0100 	mov.w	r1, #0
 80125a6:	2303      	movs	r3, #3
 80125a8:	f363 0102 	bfi	r1, r3, #0, #3
 80125ac:	f36f 01c5 	bfc	r1, #3, #3
 80125b0:	4b19      	ldr	r3, [pc, #100]	; (8012618 <hid_do_status_cb+0x17c>)
 80125b2:	4a1a      	ldr	r2, [pc, #104]	; (801261c <hid_do_status_cb+0x180>)
 80125b4:	1a9b      	subs	r3, r3, r2
 80125b6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80125ba:	f363 118f 	bfi	r1, r3, #6, #10
 80125be:	481e      	ldr	r0, [pc, #120]	; (8012638 <hid_do_status_cb+0x19c>)
 80125c0:	f7f1 ffc4 	bl	800454c <log_0>
		if (dev_data->suspended) {
 80125c4:	7b63      	ldrb	r3, [r4, #13]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d086      	beq.n	80124d8 <hid_do_status_cb+0x3c>
			LOG_INF("from suspend");
 80125ca:	f04f 0100 	mov.w	r1, #0
 80125ce:	2303      	movs	r3, #3
 80125d0:	f363 0102 	bfi	r1, r3, #0, #3
 80125d4:	f36f 01c5 	bfc	r1, #3, #3
 80125d8:	4b0f      	ldr	r3, [pc, #60]	; (8012618 <hid_do_status_cb+0x17c>)
 80125da:	4a10      	ldr	r2, [pc, #64]	; (801261c <hid_do_status_cb+0x180>)
 80125dc:	1a9b      	subs	r3, r3, r2
 80125de:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80125e2:	f363 118f 	bfi	r1, r3, #6, #10
 80125e6:	4815      	ldr	r0, [pc, #84]	; (801263c <hid_do_status_cb+0x1a0>)
 80125e8:	f7f1 ffb0 	bl	800454c <log_0>
			dev_data->suspended = false;
 80125ec:	2300      	movs	r3, #0
 80125ee:	7363      	strb	r3, [r4, #13]
 80125f0:	e772      	b.n	80124d8 <hid_do_status_cb+0x3c>
		LOG_INF("Unknown event");
 80125f2:	f04f 0100 	mov.w	r1, #0
 80125f6:	2303      	movs	r3, #3
 80125f8:	f363 0102 	bfi	r1, r3, #0, #3
 80125fc:	f36f 01c5 	bfc	r1, #3, #3
 8012600:	4b05      	ldr	r3, [pc, #20]	; (8012618 <hid_do_status_cb+0x17c>)
 8012602:	4a06      	ldr	r2, [pc, #24]	; (801261c <hid_do_status_cb+0x180>)
 8012604:	1a9b      	subs	r3, r3, r2
 8012606:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 801260a:	f363 118f 	bfi	r1, r3, #6, #10
 801260e:	480c      	ldr	r0, [pc, #48]	; (8012640 <hid_do_status_cb+0x1a4>)
 8012610:	f7f1 ff9c 	bl	800454c <log_0>
}
 8012614:	e760      	b.n	80124d8 <hid_do_status_cb+0x3c>
 8012616:	bf00      	nop
 8012618:	0801d790 	.word	0x0801d790
 801261c:	0801d6d0 	.word	0x0801d6d0
 8012620:	08021858 	.word	0x08021858
 8012624:	08021868 	.word	0x08021868
 8012628:	08021880 	.word	0x08021880
 801262c:	08021894 	.word	0x08021894
 8012630:	080218a8 	.word	0x080218a8
 8012634:	080218bc 	.word	0x080218bc
 8012638:	080218d0 	.word	0x080218d0
 801263c:	080218e0 	.word	0x080218e0
 8012640:	080218f0 	.word	0x080218f0

08012644 <hid_int_in>:

	return -EINVAL;
}

static void hid_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
 8012644:	b538      	push	{r3, r4, r5, lr}
 8012646:	4604      	mov	r4, r0
 8012648:	460d      	mov	r5, r1
	struct hid_device_info *dev_data;
	struct usb_dev_data *common;

	common = usb_get_dev_data_by_ep(&usb_hid_devlist, ep);
 801264a:	4601      	mov	r1, r0
 801264c:	4810      	ldr	r0, [pc, #64]	; (8012690 <hid_int_in+0x4c>)
 801264e:	f004 fbd2 	bl	8016df6 <usb_get_dev_data_by_ep>
	if (common == NULL) {
 8012652:	b148      	cbz	r0, 8012668 <hid_int_in+0x24>
		return;
	}

	dev_data = CONTAINER_OF(common, struct hid_device_info, common);

	if (ep_status != USB_DC_EP_DATA_IN || dev_data->ops == NULL ||
 8012654:	2d02      	cmp	r5, #2
 8012656:	d106      	bne.n	8012666 <hid_int_in+0x22>
 8012658:	f850 2c08 	ldr.w	r2, [r0, #-8]
 801265c:	b11a      	cbz	r2, 8012666 <hid_int_in+0x22>
	    dev_data->ops->int_in_ready == NULL) {
 801265e:	6a12      	ldr	r2, [r2, #32]
	if (ep_status != USB_DC_EP_DATA_IN || dev_data->ops == NULL ||
 8012660:	b10a      	cbz	r2, 8012666 <hid_int_in+0x22>
		return;
	}

	dev_data->ops->int_in_ready(common->dev);
 8012662:	6800      	ldr	r0, [r0, #0]
 8012664:	4790      	blx	r2
}
 8012666:	bd38      	pop	{r3, r4, r5, pc}
		LOG_WRN("Device data not found for endpoint %u", ep);
 8012668:	f04f 0200 	mov.w	r2, #0
 801266c:	2302      	movs	r3, #2
 801266e:	f363 0202 	bfi	r2, r3, #0, #3
 8012672:	f36f 02c5 	bfc	r2, #3, #3
 8012676:	4b07      	ldr	r3, [pc, #28]	; (8012694 <hid_int_in+0x50>)
 8012678:	4907      	ldr	r1, [pc, #28]	; (8012698 <hid_int_in+0x54>)
 801267a:	1a5b      	subs	r3, r3, r1
 801267c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8012680:	f363 128f 	bfi	r2, r3, #6, #10
 8012684:	4621      	mov	r1, r4
 8012686:	4805      	ldr	r0, [pc, #20]	; (801269c <hid_int_in+0x58>)
 8012688:	f7f1 fdf0 	bl	800426c <log_1>
		return;
 801268c:	e7eb      	b.n	8012666 <hid_int_in+0x22>
 801268e:	bf00      	nop
 8012690:	200021a8 	.word	0x200021a8
 8012694:	0801d790 	.word	0x0801d790
 8012698:	0801d6d0 	.word	0x0801d6d0
 801269c:	08021900 	.word	0x08021900

080126a0 <hid_custom_handle_req>:
{
 80126a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126a4:	4616      	mov	r6, r2
	if (REQTYPE_GET_DIR(setup->bmRequestType) == REQTYPE_DIR_TO_HOST &&
 80126a6:	7803      	ldrb	r3, [r0, #0]
 80126a8:	09da      	lsrs	r2, r3, #7
 80126aa:	d05d      	beq.n	8012768 <hid_custom_handle_req+0xc8>
 80126ac:	460d      	mov	r5, r1
 80126ae:	f003 031f 	and.w	r3, r3, #31
 80126b2:	2b01      	cmp	r3, #1
 80126b4:	d15b      	bne.n	801276e <hid_custom_handle_req+0xce>
					setup->bRequest == REQ_GET_DESCRIPTOR) {
 80126b6:	7843      	ldrb	r3, [r0, #1]
					REQTYPE_RECIP_INTERFACE &&
 80126b8:	2b06      	cmp	r3, #6
 80126ba:	d15b      	bne.n	8012774 <hid_custom_handle_req+0xd4>
		uint8_t value = (uint8_t)(setup->wValue >> 8);
 80126bc:	8844      	ldrh	r4, [r0, #2]
 80126be:	0a24      	lsrs	r4, r4, #8
		uint8_t iface_num = (uint8_t)setup->wIndex;
 80126c0:	f890 8004 	ldrb.w	r8, [r0, #4]
		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
 80126c4:	4641      	mov	r1, r8
 80126c6:	482d      	ldr	r0, [pc, #180]	; (801277c <hid_custom_handle_req+0xdc>)
 80126c8:	f004 fb81 	bl	8016dce <usb_get_dev_data_by_iface>
		if (common == NULL) {
 80126cc:	4607      	mov	r7, r0
 80126ce:	b130      	cbz	r0, 80126de <hid_custom_handle_req+0x3e>
		switch (value) {
 80126d0:	2c21      	cmp	r4, #33	; 0x21
 80126d2:	d019      	beq.n	8012708 <hid_custom_handle_req+0x68>
 80126d4:	2c22      	cmp	r4, #34	; 0x22
 80126d6:	d025      	beq.n	8012724 <hid_custom_handle_req+0x84>
 80126d8:	f06f 0022 	mvn.w	r0, #34	; 0x22
 80126dc:	e020      	b.n	8012720 <hid_custom_handle_req+0x80>
			LOG_WRN("Device data not found for interface %u",
 80126de:	f04f 0200 	mov.w	r2, #0
 80126e2:	2302      	movs	r3, #2
 80126e4:	f363 0202 	bfi	r2, r3, #0, #3
 80126e8:	f36f 02c5 	bfc	r2, #3, #3
 80126ec:	4b24      	ldr	r3, [pc, #144]	; (8012780 <hid_custom_handle_req+0xe0>)
 80126ee:	4925      	ldr	r1, [pc, #148]	; (8012784 <hid_custom_handle_req+0xe4>)
 80126f0:	1a5b      	subs	r3, r3, r1
 80126f2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80126f6:	f363 128f 	bfi	r2, r3, #6, #10
 80126fa:	4641      	mov	r1, r8
 80126fc:	4822      	ldr	r0, [pc, #136]	; (8012788 <hid_custom_handle_req+0xe8>)
 80126fe:	f7f1 fdb5 	bl	800426c <log_1>
			return -EINVAL;
 8012702:	f06f 0015 	mvn.w	r0, #21
 8012706:	e00b      	b.n	8012720 <hid_custom_handle_req+0x80>
			cfg = common->dev->config;
 8012708:	6803      	ldr	r3, [r0, #0]
 801270a:	685b      	ldr	r3, [r3, #4]
			*len = MIN(*len, hid_desc->if0_hid.bLength);
 801270c:	685b      	ldr	r3, [r3, #4]
 801270e:	f813 2f09 	ldrb.w	r2, [r3, #9]!
 8012712:	6829      	ldr	r1, [r5, #0]
 8012714:	428a      	cmp	r2, r1
 8012716:	bfa8      	it	ge
 8012718:	460a      	movge	r2, r1
 801271a:	602a      	str	r2, [r5, #0]
			*data = (uint8_t *)&hid_desc->if0_hid;
 801271c:	6033      	str	r3, [r6, #0]
		return 0;
 801271e:	2000      	movs	r0, #0
}
 8012720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (*len != dev_data->report_size) {
 8012724:	6829      	ldr	r1, [r5, #0]
 8012726:	f850 3c0c 	ldr.w	r3, [r0, #-12]
 801272a:	4299      	cmp	r1, r3
 801272c:	d103      	bne.n	8012736 <hid_custom_handle_req+0x96>
			*data = (uint8_t *)dev_data->report_desc;
 801272e:	f857 3c10 	ldr.w	r3, [r7, #-16]
 8012732:	6033      	str	r3, [r6, #0]
			break;
 8012734:	e7f3      	b.n	801271e <hid_custom_handle_req+0x7e>
				LOG_WRN("len %d doesn't match "
 8012736:	f04f 0200 	mov.w	r2, #0
 801273a:	2302      	movs	r3, #2
 801273c:	f363 0202 	bfi	r2, r3, #0, #3
 8012740:	f36f 02c5 	bfc	r2, #3, #3
 8012744:	4b0e      	ldr	r3, [pc, #56]	; (8012780 <hid_custom_handle_req+0xe0>)
 8012746:	480f      	ldr	r0, [pc, #60]	; (8012784 <hid_custom_handle_req+0xe4>)
 8012748:	1a1b      	subs	r3, r3, r0
 801274a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 801274e:	f363 128f 	bfi	r2, r3, #6, #10
 8012752:	480e      	ldr	r0, [pc, #56]	; (801278c <hid_custom_handle_req+0xec>)
 8012754:	f7f1 fd8a 	bl	800426c <log_1>
				*len = MIN(*len, dev_data->report_size);
 8012758:	f857 3c0c 	ldr.w	r3, [r7, #-12]
 801275c:	682a      	ldr	r2, [r5, #0]
 801275e:	4293      	cmp	r3, r2
 8012760:	bf28      	it	cs
 8012762:	4613      	movcs	r3, r2
 8012764:	602b      	str	r3, [r5, #0]
 8012766:	e7e2      	b.n	801272e <hid_custom_handle_req+0x8e>
	return -EINVAL;
 8012768:	f06f 0015 	mvn.w	r0, #21
 801276c:	e7d8      	b.n	8012720 <hid_custom_handle_req+0x80>
 801276e:	f06f 0015 	mvn.w	r0, #21
 8012772:	e7d5      	b.n	8012720 <hid_custom_handle_req+0x80>
 8012774:	f06f 0015 	mvn.w	r0, #21
 8012778:	e7d2      	b.n	8012720 <hid_custom_handle_req+0x80>
 801277a:	bf00      	nop
 801277c:	200021a8 	.word	0x200021a8
 8012780:	0801d790 	.word	0x0801d790
 8012784:	0801d6d0 	.word	0x0801d6d0
 8012788:	08021928 	.word	0x08021928
 801278c:	08021950 	.word	0x08021950

08012790 <hid_class_handle_req>:
{
 8012790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012794:	4604      	mov	r4, r0
 8012796:	460d      	mov	r5, r1
 8012798:	4617      	mov	r7, r2
	common = usb_get_dev_data_by_iface(&usb_hid_devlist,
 801279a:	7901      	ldrb	r1, [r0, #4]
 801279c:	4866      	ldr	r0, [pc, #408]	; (8012938 <hid_class_handle_req+0x1a8>)
 801279e:	f004 fb16 	bl	8016dce <usb_get_dev_data_by_iface>
	if (common == NULL) {
 80127a2:	b310      	cbz	r0, 80127ea <hid_class_handle_req+0x5a>
 80127a4:	4603      	mov	r3, r0
	dev_data = CONTAINER_OF(common, struct hid_device_info, common);
 80127a6:	4606      	mov	r6, r0
	dev = common->dev;
 80127a8:	f856 0910 	ldr.w	r0, [r6], #-16
	if (REQTYPE_GET_DIR(setup->bmRequestType) == REQTYPE_DIR_TO_HOST) {
 80127ac:	7822      	ldrb	r2, [r4, #0]
 80127ae:	09d2      	lsrs	r2, r2, #7
 80127b0:	d06c      	beq.n	801288c <hid_class_handle_req+0xfc>
		switch (setup->bRequest) {
 80127b2:	7861      	ldrb	r1, [r4, #1]
 80127b4:	2902      	cmp	r1, #2
 80127b6:	d02d      	beq.n	8012814 <hid_class_handle_req+0x84>
 80127b8:	2903      	cmp	r1, #3
 80127ba:	d053      	beq.n	8012864 <hid_class_handle_req+0xd4>
 80127bc:	2901      	cmp	r1, #1
 80127be:	d03d      	beq.n	801283c <hid_class_handle_req+0xac>
			LOG_ERR("Unhandled request 0x%02x", setup->bRequest);
 80127c0:	f04f 0200 	mov.w	r2, #0
 80127c4:	2301      	movs	r3, #1
 80127c6:	f363 0202 	bfi	r2, r3, #0, #3
 80127ca:	f36f 02c5 	bfc	r2, #3, #3
 80127ce:	4b5b      	ldr	r3, [pc, #364]	; (801293c <hid_class_handle_req+0x1ac>)
 80127d0:	485b      	ldr	r0, [pc, #364]	; (8012940 <hid_class_handle_req+0x1b0>)
 80127d2:	1a1b      	subs	r3, r3, r0
 80127d4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80127d8:	f363 128f 	bfi	r2, r3, #6, #10
 80127dc:	4859      	ldr	r0, [pc, #356]	; (8012944 <hid_class_handle_req+0x1b4>)
 80127de:	f7f1 fd45 	bl	800426c <log_1>
	return -ENOTSUP;
 80127e2:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 80127e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_WRN("Device data not found for interface %u",
 80127ea:	f04f 0200 	mov.w	r2, #0
 80127ee:	2302      	movs	r3, #2
 80127f0:	f363 0202 	bfi	r2, r3, #0, #3
 80127f4:	f36f 02c5 	bfc	r2, #3, #3
 80127f8:	4b50      	ldr	r3, [pc, #320]	; (801293c <hid_class_handle_req+0x1ac>)
 80127fa:	4951      	ldr	r1, [pc, #324]	; (8012940 <hid_class_handle_req+0x1b0>)
 80127fc:	1a5b      	subs	r3, r3, r1
 80127fe:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8012802:	f363 128f 	bfi	r2, r3, #6, #10
 8012806:	88a1      	ldrh	r1, [r4, #4]
 8012808:	484f      	ldr	r0, [pc, #316]	; (8012948 <hid_class_handle_req+0x1b8>)
 801280a:	f7f1 fd2f 	bl	800426c <log_1>
		return -ENODEV;
 801280e:	f06f 0012 	mvn.w	r0, #18
 8012812:	e7e8      	b.n	80127e6 <hid_class_handle_req+0x56>
			if (dev_data->ops && dev_data->ops->get_idle) {
 8012814:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8012818:	b14b      	cbz	r3, 801282e <hid_class_handle_req+0x9e>
 801281a:	f8d3 8004 	ldr.w	r8, [r3, #4]
 801281e:	f1b8 0f00 	cmp.w	r8, #0
 8012822:	d004      	beq.n	801282e <hid_class_handle_req+0x9e>
				return dev_data->ops->get_idle(dev, setup, len,
 8012824:	463b      	mov	r3, r7
 8012826:	462a      	mov	r2, r5
 8012828:	4621      	mov	r1, r4
 801282a:	47c0      	blx	r8
 801282c:	e7db      	b.n	80127e6 <hid_class_handle_req+0x56>
				return hid_on_get_idle(dev_data, setup, len,
 801282e:	463b      	mov	r3, r7
 8012830:	462a      	mov	r2, r5
 8012832:	4621      	mov	r1, r4
 8012834:	4630      	mov	r0, r6
 8012836:	f008 fc53 	bl	801b0e0 <hid_on_get_idle>
 801283a:	e7d4      	b.n	80127e6 <hid_class_handle_req+0x56>
			if (dev_data->ops && dev_data->ops->get_report) {
 801283c:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8012840:	b14b      	cbz	r3, 8012856 <hid_class_handle_req+0xc6>
 8012842:	f8d3 8000 	ldr.w	r8, [r3]
 8012846:	f1b8 0f00 	cmp.w	r8, #0
 801284a:	d004      	beq.n	8012856 <hid_class_handle_req+0xc6>
				return dev_data->ops->get_report(dev, setup,
 801284c:	463b      	mov	r3, r7
 801284e:	462a      	mov	r2, r5
 8012850:	4621      	mov	r1, r4
 8012852:	47c0      	blx	r8
 8012854:	e7c7      	b.n	80127e6 <hid_class_handle_req+0x56>
				return hid_on_get_report(dev_data, setup, len,
 8012856:	463b      	mov	r3, r7
 8012858:	462a      	mov	r2, r5
 801285a:	4621      	mov	r1, r4
 801285c:	4630      	mov	r0, r6
 801285e:	f008 fc42 	bl	801b0e6 <hid_on_get_report>
 8012862:	e7c0      	b.n	80127e6 <hid_class_handle_req+0x56>
			if (dev_data->ops && dev_data->ops->get_protocol) {
 8012864:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8012868:	b14b      	cbz	r3, 801287e <hid_class_handle_req+0xee>
 801286a:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801286e:	f1b8 0f00 	cmp.w	r8, #0
 8012872:	d004      	beq.n	801287e <hid_class_handle_req+0xee>
				return dev_data->ops->get_protocol(dev, setup,
 8012874:	463b      	mov	r3, r7
 8012876:	462a      	mov	r2, r5
 8012878:	4621      	mov	r1, r4
 801287a:	47c0      	blx	r8
 801287c:	e7b3      	b.n	80127e6 <hid_class_handle_req+0x56>
				return hid_on_get_protocol(dev_data, setup, len,
 801287e:	463b      	mov	r3, r7
 8012880:	462a      	mov	r2, r5
 8012882:	4621      	mov	r1, r4
 8012884:	4630      	mov	r0, r6
 8012886:	f008 fc31 	bl	801b0ec <hid_on_get_protocol>
 801288a:	e7ac      	b.n	80127e6 <hid_class_handle_req+0x56>
		switch (setup->bRequest) {
 801288c:	7861      	ldrb	r1, [r4, #1]
 801288e:	290a      	cmp	r1, #10
 8012890:	d017      	beq.n	80128c2 <hid_class_handle_req+0x132>
 8012892:	290b      	cmp	r1, #11
 8012894:	d03d      	beq.n	8012912 <hid_class_handle_req+0x182>
 8012896:	2909      	cmp	r1, #9
 8012898:	d027      	beq.n	80128ea <hid_class_handle_req+0x15a>
			LOG_ERR("Unhandled request 0x%02x", setup->bRequest);
 801289a:	f04f 0200 	mov.w	r2, #0
 801289e:	2301      	movs	r3, #1
 80128a0:	f363 0202 	bfi	r2, r3, #0, #3
 80128a4:	f36f 02c5 	bfc	r2, #3, #3
 80128a8:	4b24      	ldr	r3, [pc, #144]	; (801293c <hid_class_handle_req+0x1ac>)
 80128aa:	4825      	ldr	r0, [pc, #148]	; (8012940 <hid_class_handle_req+0x1b0>)
 80128ac:	1a1b      	subs	r3, r3, r0
 80128ae:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80128b2:	f363 128f 	bfi	r2, r3, #6, #10
 80128b6:	4823      	ldr	r0, [pc, #140]	; (8012944 <hid_class_handle_req+0x1b4>)
 80128b8:	f7f1 fcd8 	bl	800426c <log_1>
	return -ENOTSUP;
 80128bc:	f06f 0022 	mvn.w	r0, #34	; 0x22
 80128c0:	e791      	b.n	80127e6 <hid_class_handle_req+0x56>
			if (dev_data->ops && dev_data->ops->set_idle) {
 80128c2:	f853 3c08 	ldr.w	r3, [r3, #-8]
 80128c6:	b14b      	cbz	r3, 80128dc <hid_class_handle_req+0x14c>
 80128c8:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80128cc:	f1b8 0f00 	cmp.w	r8, #0
 80128d0:	d004      	beq.n	80128dc <hid_class_handle_req+0x14c>
				return dev_data->ops->set_idle(dev, setup, len,
 80128d2:	463b      	mov	r3, r7
 80128d4:	462a      	mov	r2, r5
 80128d6:	4621      	mov	r1, r4
 80128d8:	47c0      	blx	r8
 80128da:	e784      	b.n	80127e6 <hid_class_handle_req+0x56>
				return hid_on_set_idle(dev_data, setup, len,
 80128dc:	463b      	mov	r3, r7
 80128de:	462a      	mov	r2, r5
 80128e0:	4621      	mov	r1, r4
 80128e2:	4630      	mov	r0, r6
 80128e4:	f008 fc05 	bl	801b0f2 <hid_on_set_idle>
 80128e8:	e77d      	b.n	80127e6 <hid_class_handle_req+0x56>
			if (dev_data->ops && dev_data->ops->set_report) {
 80128ea:	f853 3c08 	ldr.w	r3, [r3, #-8]
 80128ee:	b14b      	cbz	r3, 8012904 <hid_class_handle_req+0x174>
 80128f0:	f8d3 800c 	ldr.w	r8, [r3, #12]
 80128f4:	f1b8 0f00 	cmp.w	r8, #0
 80128f8:	d004      	beq.n	8012904 <hid_class_handle_req+0x174>
				return dev_data->ops->set_report(dev, setup,
 80128fa:	463b      	mov	r3, r7
 80128fc:	462a      	mov	r2, r5
 80128fe:	4621      	mov	r1, r4
 8012900:	47c0      	blx	r8
 8012902:	e770      	b.n	80127e6 <hid_class_handle_req+0x56>
				return hid_on_set_report(dev_data, setup, len,
 8012904:	463b      	mov	r3, r7
 8012906:	462a      	mov	r2, r5
 8012908:	4621      	mov	r1, r4
 801290a:	4630      	mov	r0, r6
 801290c:	f008 fbf4 	bl	801b0f8 <hid_on_set_report>
 8012910:	e769      	b.n	80127e6 <hid_class_handle_req+0x56>
			if (dev_data->ops && dev_data->ops->set_protocol) {
 8012912:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8012916:	b14b      	cbz	r3, 801292c <hid_class_handle_req+0x19c>
 8012918:	f8d3 8014 	ldr.w	r8, [r3, #20]
 801291c:	f1b8 0f00 	cmp.w	r8, #0
 8012920:	d004      	beq.n	801292c <hid_class_handle_req+0x19c>
				return dev_data->ops->set_protocol(dev, setup,
 8012922:	463b      	mov	r3, r7
 8012924:	462a      	mov	r2, r5
 8012926:	4621      	mov	r1, r4
 8012928:	47c0      	blx	r8
 801292a:	e75c      	b.n	80127e6 <hid_class_handle_req+0x56>
				return hid_on_set_protocol(dev, dev_data,
 801292c:	4622      	mov	r2, r4
 801292e:	4631      	mov	r1, r6
 8012930:	f008 fbe5 	bl	801b0fe <hid_on_set_protocol>
 8012934:	e757      	b.n	80127e6 <hid_class_handle_req+0x56>
 8012936:	bf00      	nop
 8012938:	200021a8 	.word	0x200021a8
 801293c:	0801d790 	.word	0x0801d790
 8012940:	0801d6d0 	.word	0x0801d6d0
 8012944:	0802197c 	.word	0x0802197c
 8012948:	08021928 	.word	0x08021928

0801294c <hid_status_cb>:
{
 801294c:	b570      	push	{r4, r5, r6, lr}
 801294e:	4604      	mov	r4, r0
 8012950:	460d      	mov	r5, r1
 8012952:	4616      	mov	r6, r2
	common = usb_get_dev_data_by_cfg(&usb_hid_devlist, cfg);
 8012954:	4601      	mov	r1, r0
 8012956:	480e      	ldr	r0, [pc, #56]	; (8012990 <hid_status_cb+0x44>)
 8012958:	f004 fa27 	bl	8016daa <usb_get_dev_data_by_cfg>
	if (common == NULL) {
 801295c:	b128      	cbz	r0, 801296a <hid_status_cb+0x1e>
	hid_do_status_cb(dev_data, status, param);
 801295e:	4632      	mov	r2, r6
 8012960:	4629      	mov	r1, r5
 8012962:	3810      	subs	r0, #16
 8012964:	f7ff fd9a 	bl	801249c <hid_do_status_cb>
}
 8012968:	bd70      	pop	{r4, r5, r6, pc}
		LOG_WRN("Device data not found for cfg %p", cfg);
 801296a:	f04f 0200 	mov.w	r2, #0
 801296e:	2302      	movs	r3, #2
 8012970:	f363 0202 	bfi	r2, r3, #0, #3
 8012974:	f36f 02c5 	bfc	r2, #3, #3
 8012978:	4b06      	ldr	r3, [pc, #24]	; (8012994 <hid_status_cb+0x48>)
 801297a:	4907      	ldr	r1, [pc, #28]	; (8012998 <hid_status_cb+0x4c>)
 801297c:	1a5b      	subs	r3, r3, r1
 801297e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8012982:	f363 128f 	bfi	r2, r3, #6, #10
 8012986:	4621      	mov	r1, r4
 8012988:	4804      	ldr	r0, [pc, #16]	; (801299c <hid_status_cb+0x50>)
 801298a:	f7f1 fc6f 	bl	800426c <log_1>
		return;
 801298e:	e7eb      	b.n	8012968 <hid_status_cb+0x1c>
 8012990:	200021a8 	.word	0x200021a8
 8012994:	0801d790 	.word	0x0801d790
 8012998:	0801d6d0 	.word	0x0801d6d0
 801299c:	08021998 	.word	0x08021998

080129a0 <usb_hid_register_device>:
	return 0;
}

void usb_hid_register_device(const struct device *dev, const uint8_t *desc,
			     size_t size, const struct hid_ops *ops)
{
 80129a0:	b410      	push	{r4}
	struct hid_device_info *dev_data = dev->data;
 80129a2:	68c4      	ldr	r4, [r0, #12]

	dev_data->report_desc = desc;
 80129a4:	6021      	str	r1, [r4, #0]
	dev_data->report_size = size;
 80129a6:	6062      	str	r2, [r4, #4]

	dev_data->ops = ops;
 80129a8:	60a3      	str	r3, [r4, #8]
	dev_data->common.dev = dev;
 80129aa:	6120      	str	r0, [r4, #16]

	sys_slist_append(&usb_hid_devlist, &dev_data->common.node);
 80129ac:	f104 0314 	add.w	r3, r4, #20
	parent->next = child;
 80129b0:	2200      	movs	r2, #0
 80129b2:	6162      	str	r2, [r4, #20]
	return list->tail;
 80129b4:	4a06      	ldr	r2, [pc, #24]	; (80129d0 <usb_hid_register_device+0x30>)
 80129b6:	6852      	ldr	r2, [r2, #4]
Z_GENLIST_APPEND(slist, snode)
 80129b8:	b12a      	cbz	r2, 80129c6 <usb_hid_register_device+0x26>
	parent->next = child;
 80129ba:	6013      	str	r3, [r2, #0]
	list->tail = node;
 80129bc:	4a04      	ldr	r2, [pc, #16]	; (80129d0 <usb_hid_register_device+0x30>)
 80129be:	6053      	str	r3, [r2, #4]

	LOG_DBG("Added dev_data %p dev %p to devlist %p", dev_data, dev,
		&usb_hid_devlist);
}
 80129c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80129c4:	4770      	bx	lr
 80129c6:	4a02      	ldr	r2, [pc, #8]	; (80129d0 <usb_hid_register_device+0x30>)
 80129c8:	6053      	str	r3, [r2, #4]
	list->head = node;
 80129ca:	6013      	str	r3, [r2, #0]
}
 80129cc:	e7f8      	b.n	80129c0 <usb_hid_register_device+0x20>
 80129ce:	bf00      	nop
 80129d0:	200021a8 	.word	0x200021a8

080129d4 <hid_int_ep_write>:

int hid_int_ep_write(const struct device *dev, const uint8_t *data, uint32_t data_len,
		     uint32_t *bytes_ret)
{
 80129d4:	b538      	push	{r3, r4, r5, lr}
	const struct usb_cfg_data *cfg = dev->config;
 80129d6:	6845      	ldr	r5, [r0, #4]
	struct hid_device_info *hid_dev_data = dev->data;
 80129d8:	68c0      	ldr	r0, [r0, #12]

	if (hid_dev_data->configured && !hid_dev_data->suspended) {
 80129da:	7b04      	ldrb	r4, [r0, #12]
 80129dc:	b134      	cbz	r4, 80129ec <hid_int_ep_write+0x18>
 80129de:	7b40      	ldrb	r0, [r0, #13]
 80129e0:	b920      	cbnz	r0, 80129ec <hid_int_ep_write+0x18>
		return usb_write(cfg->endpoint[HID_INT_IN_EP_IDX].ep_addr, data,
 80129e2:	6a28      	ldr	r0, [r5, #32]
 80129e4:	7900      	ldrb	r0, [r0, #4]
 80129e6:	f7f2 ff7b 	bl	80058e0 <usb_write>
	} else {
		LOG_WRN("Device is not configured");
		return -EAGAIN;
	}

}
 80129ea:	bd38      	pop	{r3, r4, r5, pc}
		LOG_WRN("Device is not configured");
 80129ec:	f04f 0100 	mov.w	r1, #0
 80129f0:	2302      	movs	r3, #2
 80129f2:	f363 0102 	bfi	r1, r3, #0, #3
 80129f6:	f36f 01c5 	bfc	r1, #3, #3
 80129fa:	4b06      	ldr	r3, [pc, #24]	; (8012a14 <hid_int_ep_write+0x40>)
 80129fc:	4a06      	ldr	r2, [pc, #24]	; (8012a18 <hid_int_ep_write+0x44>)
 80129fe:	1a9b      	subs	r3, r3, r2
 8012a00:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8012a04:	f363 118f 	bfi	r1, r3, #6, #10
 8012a08:	4804      	ldr	r0, [pc, #16]	; (8012a1c <hid_int_ep_write+0x48>)
 8012a0a:	f7f1 fd9f 	bl	800454c <log_0>
		return -EAGAIN;
 8012a0e:	f06f 000a 	mvn.w	r0, #10
 8012a12:	e7ea      	b.n	80129ea <hid_int_ep_write+0x16>
 8012a14:	0801d790 	.word	0x0801d790
 8012a18:	0801d6d0 	.word	0x0801d6d0
 8012a1c:	080219bc 	.word	0x080219bc

08012a20 <gpio_stm32_set_exti_source>:
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
#endif
}

static void gpio_stm32_set_exti_source(int port, int pin)
{
 8012a20:	b410      	push	{r4}
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8012a22:	424a      	negs	r2, r1
 8012a24:	f001 0303 	and.w	r3, r1, #3
 8012a28:	f002 0203 	and.w	r2, r2, #3
 8012a2c:	bf58      	it	pl
 8012a2e:	4253      	negpl	r3, r2
 8012a30:	3304      	adds	r3, #4
 8012a32:	009a      	lsls	r2, r3, #2
 8012a34:	230f      	movs	r3, #15
 8012a36:	4093      	lsls	r3, r2
 8012a38:	460a      	mov	r2, r1
 8012a3a:	2900      	cmp	r1, #0
 8012a3c:	db18      	blt.n	8012a70 <gpio_stm32_set_exti_source+0x50>
 8012a3e:	ea43 03a2 	orr.w	r3, r3, r2, asr #2
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8012a42:	b2dc      	uxtb	r4, r3
 8012a44:	1ca1      	adds	r1, r4, #2
 8012a46:	4a0c      	ldr	r2, [pc, #48]	; (8012a78 <gpio_stm32_set_exti_source+0x58>)
 8012a48:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8012a4c:	0c1a      	lsrs	r2, r3, #16
 8012a4e:	ea21 4313 	bic.w	r3, r1, r3, lsr #16
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012a52:	fa92 f2a2 	rbit	r2, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8012a56:	b16a      	cbz	r2, 8012a74 <gpio_stm32_set_exti_source+0x54>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8012a58:	fab2 f282 	clz	r2, r2
 8012a5c:	fa00 f202 	lsl.w	r2, r0, r2
 8012a60:	431a      	orrs	r2, r3
 8012a62:	3402      	adds	r4, #2
 8012a64:	4b04      	ldr	r3, [pc, #16]	; (8012a78 <gpio_stm32_set_exti_source+0x58>)
 8012a66:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	LL_EXTI_SetEXTISource(port, line);
#else
	LL_SYSCFG_SetEXTISource(port, line);
#endif
	z_stm32_hsem_unlock(CFG_HW_EXTI_SEMID);
}
 8012a6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a6e:	4770      	bx	lr
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8012a70:	1cca      	adds	r2, r1, #3
 8012a72:	e7e4      	b.n	8012a3e <gpio_stm32_set_exti_source+0x1e>
    return 32U;
 8012a74:	2220      	movs	r2, #32
 8012a76:	e7f1      	b.n	8012a5c <gpio_stm32_set_exti_source+0x3c>
 8012a78:	40010000 	.word	0x40010000

08012a7c <gpio_stm32_get_exti_source>:
 8012a7c:	4242      	negs	r2, r0
 8012a7e:	f000 0303 	and.w	r3, r0, #3
 8012a82:	f002 0203 	and.w	r2, r2, #3
 8012a86:	bf58      	it	pl
 8012a88:	4253      	negpl	r3, r2
 8012a8a:	3304      	adds	r3, #4
 8012a8c:	009a      	lsls	r2, r3, #2
 8012a8e:	230f      	movs	r3, #15
 8012a90:	4093      	lsls	r3, r2
 8012a92:	4602      	mov	r2, r0
 8012a94:	2800      	cmp	r0, #0
 8012a96:	db10      	blt.n	8012aba <gpio_stm32_get_exti_source+0x3e>
 8012a98:	ea43 00a2 	orr.w	r0, r3, r2, asr #2
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U)) >> POSITION_VAL(Line >> 16U));
 8012a9c:	b2c3      	uxtb	r3, r0
 8012a9e:	3302      	adds	r3, #2
 8012aa0:	4a08      	ldr	r2, [pc, #32]	; (8012ac4 <gpio_stm32_get_exti_source+0x48>)
 8012aa2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8012aa6:	0c03      	lsrs	r3, r0, #16
 8012aa8:	ea02 4010 	and.w	r0, r2, r0, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012aac:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8012ab0:	b12b      	cbz	r3, 8012abe <gpio_stm32_get_exti_source+0x42>
  return __builtin_clz(value);
 8012ab2:	fab3 f383 	clz	r3, r3
		port = STM32_PORTH;
	}
#endif

	return port;
}
 8012ab6:	40d8      	lsrs	r0, r3
 8012ab8:	4770      	bx	lr
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8012aba:	1cc2      	adds	r2, r0, #3
 8012abc:	e7ec      	b.n	8012a98 <gpio_stm32_get_exti_source+0x1c>
    return 32U;
 8012abe:	2320      	movs	r3, #32
 8012ac0:	e7f9      	b.n	8012ab6 <gpio_stm32_get_exti_source+0x3a>
 8012ac2:	bf00      	nop
 8012ac4:	40010000 	.word	0x40010000

08012ac8 <gpio_stm32_enable_int>:

/**
 * @brief Enable EXTI of the specific line
 */
static int gpio_stm32_enable_int(int port, int pin)
{
 8012ac8:	b570      	push	{r4, r5, r6, lr}
 8012aca:	b082      	sub	sp, #8
 8012acc:	4604      	mov	r4, r0
 8012ace:	460d      	mov	r5, r1
 8012ad0:	480a      	ldr	r0, [pc, #40]	; (8012afc <gpio_stm32_enable_int+0x34>)
 8012ad2:	f000 fd43 	bl	801355c <z_impl_device_get_binding>
 8012ad6:	4603      	mov	r3, r0
	defined(CONFIG_SOC_SERIES_STM32H7X) || \
	defined(CONFIG_SOC_SERIES_STM32L1X) || \
	defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32G4X)
	const struct device *clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);
	struct stm32_pclken pclken = {
 8012ad8:	4909      	ldr	r1, [pc, #36]	; (8012b00 <gpio_stm32_enable_int+0x38>)
 8012ada:	466a      	mov	r2, sp
 8012adc:	c903      	ldmia	r1, {r0, r1}
 8012ade:	e882 0003 	stmia.w	r2, {r0, r1}
	const struct clock_control_driver_api *api =
 8012ae2:	6899      	ldr	r1, [r3, #8]
	return api->on(dev, sys);
 8012ae4:	680e      	ldr	r6, [r1, #0]
 8012ae6:	4611      	mov	r1, r2
 8012ae8:	4618      	mov	r0, r3
 8012aea:	47b0      	blx	r6
	};
	/* Enable SYSCFG clock */
	clock_control_on(clk, (clock_control_subsys_t *) &pclken);
#endif

	gpio_stm32_set_exti_source(port, pin);
 8012aec:	4629      	mov	r1, r5
 8012aee:	4620      	mov	r0, r4
 8012af0:	f7ff ff96 	bl	8012a20 <gpio_stm32_set_exti_source>

	return 0;
}
 8012af4:	2000      	movs	r0, #0
 8012af6:	b002      	add	sp, #8
 8012af8:	bd70      	pop	{r4, r5, r6, pc}
 8012afa:	bf00      	nop
 8012afc:	0801f3b0 	.word	0x0801f3b0
 8012b00:	0801d888 	.word	0x0801d888

08012b04 <gpio_stm32_pin_interrupt_configure>:

static int gpio_stm32_pin_interrupt_configure(const struct device *dev,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
 8012b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b06:	460c      	mov	r4, r1
 8012b08:	4611      	mov	r1, r2
	const struct gpio_stm32_config *cfg = dev->config;
 8012b0a:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 8012b0c:	68c2      	ldr	r2, [r0, #12]
	int edge = 0;
	int err = 0;

	if (mode == GPIO_INT_MODE_DISABLED) {
 8012b0e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8012b12:	d01f      	beq.n	8012b54 <gpio_stm32_pin_interrupt_configure+0x50>
 8012b14:	461d      	mov	r5, r3
		/* else: No irq source configured for pin. Nothing to disable */
		goto exit;
	}

	/* Level trigger interrupts not supported */
	if (mode == GPIO_INT_MODE_LEVEL) {
 8012b16:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8012b1a:	d034      	beq.n	8012b86 <gpio_stm32_pin_interrupt_configure+0x82>
		err = -ENOTSUP;
		goto exit;
	}

	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 8012b1c:	491d      	ldr	r1, [pc, #116]	; (8012b94 <gpio_stm32_pin_interrupt_configure+0x90>)
 8012b1e:	4620      	mov	r0, r4
 8012b20:	f7f3 ff22 	bl	8006968 <stm32_exti_set_callback>
 8012b24:	4606      	mov	r6, r0
 8012b26:	bb88      	cbnz	r0, 8012b8c <gpio_stm32_pin_interrupt_configure+0x88>
		err = -EBUSY;
		goto exit;
	}

	gpio_stm32_enable_int(cfg->port, pin);
 8012b28:	4621      	mov	r1, r4
 8012b2a:	68b8      	ldr	r0, [r7, #8]
 8012b2c:	f7ff ffcc 	bl	8012ac8 <gpio_stm32_enable_int>

	switch (trig) {
 8012b30:	f5b5 2f80 	cmp.w	r5, #262144	; 0x40000
 8012b34:	d023      	beq.n	8012b7e <gpio_stm32_pin_interrupt_configure+0x7a>
 8012b36:	f5b5 2fc0 	cmp.w	r5, #393216	; 0x60000
 8012b3a:	d022      	beq.n	8012b82 <gpio_stm32_pin_interrupt_configure+0x7e>
 8012b3c:	f5b5 3f00 	cmp.w	r5, #131072	; 0x20000
 8012b40:	d01b      	beq.n	8012b7a <gpio_stm32_pin_interrupt_configure+0x76>
 8012b42:	4631      	mov	r1, r6
	case GPIO_INT_TRIG_BOTH:
		edge = STM32_EXTI_TRIG_BOTH;
		break;
	}

	stm32_exti_trigger(pin, edge);
 8012b44:	4620      	mov	r0, r4
 8012b46:	f7f3 fed7 	bl	80068f8 <stm32_exti_trigger>

	stm32_exti_enable(pin);
 8012b4a:	4620      	mov	r0, r4
 8012b4c:	f7f3 feb8 	bl	80068c0 <stm32_exti_enable>

exit:
	return err;
}
 8012b50:	4630      	mov	r0, r6
 8012b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8012b54:	4620      	mov	r0, r4
 8012b56:	f7ff ff91 	bl	8012a7c <gpio_stm32_get_exti_source>
 8012b5a:	68bb      	ldr	r3, [r7, #8]
 8012b5c:	4298      	cmp	r0, r3
 8012b5e:	d001      	beq.n	8012b64 <gpio_stm32_pin_interrupt_configure+0x60>
	int err = 0;
 8012b60:	2600      	movs	r6, #0
		goto exit;
 8012b62:	e7f5      	b.n	8012b50 <gpio_stm32_pin_interrupt_configure+0x4c>
			stm32_exti_disable(pin);
 8012b64:	4620      	mov	r0, r4
 8012b66:	f7f3 febb 	bl	80068e0 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8012b6a:	4620      	mov	r0, r4
 8012b6c:	f7f3 ff0e 	bl	800698c <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 8012b70:	2100      	movs	r1, #0
 8012b72:	4620      	mov	r0, r4
 8012b74:	f7f3 fec0 	bl	80068f8 <stm32_exti_trigger>
 8012b78:	e7f2      	b.n	8012b60 <gpio_stm32_pin_interrupt_configure+0x5c>
		edge = STM32_EXTI_TRIG_FALLING;
 8012b7a:	2102      	movs	r1, #2
 8012b7c:	e7e2      	b.n	8012b44 <gpio_stm32_pin_interrupt_configure+0x40>
		edge = STM32_EXTI_TRIG_RISING;
 8012b7e:	2101      	movs	r1, #1
 8012b80:	e7e0      	b.n	8012b44 <gpio_stm32_pin_interrupt_configure+0x40>
		edge = STM32_EXTI_TRIG_BOTH;
 8012b82:	2103      	movs	r1, #3
 8012b84:	e7de      	b.n	8012b44 <gpio_stm32_pin_interrupt_configure+0x40>
		err = -ENOTSUP;
 8012b86:	f06f 0622 	mvn.w	r6, #34	; 0x22
 8012b8a:	e7e1      	b.n	8012b50 <gpio_stm32_pin_interrupt_configure+0x4c>
		err = -EBUSY;
 8012b8c:	f06f 060f 	mvn.w	r6, #15
	return err;
 8012b90:	e7de      	b.n	8012b50 <gpio_stm32_pin_interrupt_configure+0x4c>
 8012b92:	bf00      	nop
 8012b94:	0801b127 	.word	0x0801b127

08012b98 <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *device)
{
 8012b98:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = device->config;
 8012b9a:	6844      	ldr	r4, [r0, #4]
	struct gpio_stm32_data *data = device->data;
 8012b9c:	68c3      	ldr	r3, [r0, #12]

	data->dev = device;
 8012b9e:	6058      	str	r0, [r3, #4]
 8012ba0:	4806      	ldr	r0, [pc, #24]	; (8012bbc <gpio_stm32_init+0x24>)
 8012ba2:	f000 fcdb 	bl	801355c <z_impl_device_get_binding>
	const struct clock_control_driver_api *api =
 8012ba6:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	f104 010c 	add.w	r1, r4, #12
 8012bae:	4798      	blx	r3

	/* enable clock for subsystem */
	const struct device *clk =
		device_get_binding(STM32_CLOCK_CONTROL_NAME);

	if (clock_control_on(clk,
 8012bb0:	b900      	cbnz	r0, 8012bb4 <gpio_stm32_init+0x1c>
		z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);
	}
#endif  /* PWR_CR2_IOSV */

	return 0;
}
 8012bb2:	bd10      	pop	{r4, pc}
		return -EIO;
 8012bb4:	f06f 0004 	mvn.w	r0, #4
 8012bb8:	e7fb      	b.n	8012bb2 <gpio_stm32_init+0x1a>
 8012bba:	bf00      	nop
 8012bbc:	0801f3b0 	.word	0x0801f3b0

08012bc0 <UTILS_PLL_IsBusy>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8012bc0:	4b04      	ldr	r3, [pc, #16]	; (8012bd4 <UTILS_PLL_IsBusy+0x14>)
 8012bc2:	681b      	ldr	r3, [r3, #0]
static ErrorStatus UTILS_PLL_IsBusy(void)
{
  ErrorStatus status = SUCCESS;

  /* Check if PLL is busy*/
  if (LL_RCC_PLL_IsReady() != 0U)
 8012bc4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8012bc8:	d101      	bne.n	8012bce <UTILS_PLL_IsBusy+0xe>
  ErrorStatus status = SUCCESS;
 8012bca:	2000      	movs	r0, #0
 8012bcc:	4770      	bx	lr
  {
    /* PLL configuration cannot be modified */
    status = ERROR;
 8012bce:	2001      	movs	r0, #1
  }

  return status;
}
 8012bd0:	4770      	bx	lr
 8012bd2:	bf00      	nop
 8012bd4:	40021000 	.word	0x40021000

08012bd8 <LL_SetSystemCoreClock>:
  SystemCoreClock = HCLKFrequency;
 8012bd8:	4b01      	ldr	r3, [pc, #4]	; (8012be0 <LL_SetSystemCoreClock+0x8>)
 8012bda:	6018      	str	r0, [r3, #0]
}
 8012bdc:	4770      	bx	lr
 8012bde:	bf00      	nop
 8012be0:	20000590 	.word	0x20000590

08012be4 <LL_SetFlashLatency>:
  if (Frequency == 0U)
 8012be4:	b1c8      	cbz	r0, 8012c1a <LL_SetFlashLatency+0x36>
    if (Frequency > UTILS_LATENCY2_FREQ)
 8012be6:	4a0e      	ldr	r2, [pc, #56]	; (8012c20 <LL_SetFlashLatency+0x3c>)
 8012be8:	4290      	cmp	r0, r2
 8012bea:	d804      	bhi.n	8012bf6 <LL_SetFlashLatency+0x12>
      if (Frequency > UTILS_LATENCY1_FREQ)
 8012bec:	4a0d      	ldr	r2, [pc, #52]	; (8012c24 <LL_SetFlashLatency+0x40>)
 8012bee:	4290      	cmp	r0, r2
 8012bf0:	d80f      	bhi.n	8012c12 <LL_SetFlashLatency+0x2e>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8012bf2:	2100      	movs	r1, #0
 8012bf4:	e000      	b.n	8012bf8 <LL_SetFlashLatency+0x14>
      latency = LL_FLASH_LATENCY_2;
 8012bf6:	2102      	movs	r1, #2
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8012bf8:	4a0b      	ldr	r2, [pc, #44]	; (8012c28 <LL_SetFlashLatency+0x44>)
 8012bfa:	6813      	ldr	r3, [r2, #0]
 8012bfc:	f023 0307 	bic.w	r3, r3, #7
 8012c00:	430b      	orrs	r3, r1
 8012c02:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8012c04:	6813      	ldr	r3, [r2, #0]
 8012c06:	f003 0307 	and.w	r3, r3, #7
    if (LL_FLASH_GetLatency() != latency)
 8012c0a:	4299      	cmp	r1, r3
 8012c0c:	d003      	beq.n	8012c16 <LL_SetFlashLatency+0x32>
      status = ERROR;
 8012c0e:	2001      	movs	r0, #1
}
 8012c10:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_1;
 8012c12:	2101      	movs	r1, #1
 8012c14:	e7f0      	b.n	8012bf8 <LL_SetFlashLatency+0x14>
  ErrorStatus status = SUCCESS;
 8012c16:	2000      	movs	r0, #0
 8012c18:	4770      	bx	lr
    status = ERROR;
 8012c1a:	2001      	movs	r0, #1
 8012c1c:	4770      	bx	lr
 8012c1e:	bf00      	nop
 8012c20:	02dc6c00 	.word	0x02dc6c00
 8012c24:	016e3600 	.word	0x016e3600
 8012c28:	40022000 	.word	0x40022000

08012c2c <UTILS_EnablePLLAndSwitchSystem>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: No problem to switch system to PLL
  *          - ERROR: Problem to switch system to PLL
  */
static ErrorStatus UTILS_EnablePLLAndSwitchSystem(uint32_t SYSCLK_Frequency, LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
{
 8012c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c2e:	4604      	mov	r4, r0
 8012c30:	460d      	mov	r5, r1
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate current SYSCLK frequency */
  sysclk_frequency_current = (SystemCoreClock << AHBPrescTable[LL_RCC_GetAHBPrescaler() >> RCC_POSITION_HPRE]);
 8012c32:	4b2e      	ldr	r3, [pc, #184]	; (8012cec <UTILS_EnablePLLAndSwitchSystem+0xc0>)
 8012c34:	681e      	ldr	r6, [r3, #0]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8012c36:	4b2e      	ldr	r3, [pc, #184]	; (8012cf0 <UTILS_EnablePLLAndSwitchSystem+0xc4>)
 8012c38:	685a      	ldr	r2, [r3, #4]
 8012c3a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012c3e:	23f0      	movs	r3, #240	; 0xf0
 8012c40:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d038      	beq.n	8012cba <UTILS_EnablePLLAndSwitchSystem+0x8e>
  return __builtin_clz(value);
 8012c48:	fab3 f383 	clz	r3, r3
 8012c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8012c50:	4a28      	ldr	r2, [pc, #160]	; (8012cf4 <UTILS_EnablePLLAndSwitchSystem+0xc8>)
 8012c52:	5cd3      	ldrb	r3, [r2, r3]
 8012c54:	409e      	lsls	r6, r3

  /* Increasing the number of wait states because of higher CPU frequency */
  if (sysclk_frequency_current < SYSCLK_Frequency)
 8012c56:	42a6      	cmp	r6, r4
 8012c58:	d331      	bcc.n	8012cbe <UTILS_EnablePLLAndSwitchSystem+0x92>
  ErrorStatus status = SUCCESS;
 8012c5a:	2700      	movs	r7, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8012c5c:	4a24      	ldr	r2, [pc, #144]	; (8012cf0 <UTILS_EnablePLLAndSwitchSystem+0xc4>)
 8012c5e:	6813      	ldr	r3, [r2, #0]
 8012c60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012c64:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8012c66:	4b22      	ldr	r3, [pc, #136]	; (8012cf0 <UTILS_EnablePLLAndSwitchSystem+0xc4>)
 8012c68:	681b      	ldr	r3, [r3, #0]
  /* Update system clock configuration */
  if (status == SUCCESS)
  {
    /* Enable PLL */
    LL_RCC_PLL_Enable();
    while (LL_RCC_PLL_IsReady() != 1U)
 8012c6a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8012c6e:	d0fa      	beq.n	8012c66 <UTILS_EnablePLLAndSwitchSystem+0x3a>
    {
      /* Wait for PLL ready */
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
 8012c70:	682b      	ldr	r3, [r5, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8012c72:	4a1f      	ldr	r2, [pc, #124]	; (8012cf0 <UTILS_EnablePLLAndSwitchSystem+0xc4>)
 8012c74:	6851      	ldr	r1, [r2, #4]
 8012c76:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8012c7a:	430b      	orrs	r3, r1
 8012c7c:	6053      	str	r3, [r2, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8012c7e:	6853      	ldr	r3, [r2, #4]
 8012c80:	f023 0303 	bic.w	r3, r3, #3
 8012c84:	f043 0302 	orr.w	r3, r3, #2
 8012c88:	6053      	str	r3, [r2, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8012c8a:	4b19      	ldr	r3, [pc, #100]	; (8012cf0 <UTILS_EnablePLLAndSwitchSystem+0xc4>)
 8012c8c:	685b      	ldr	r3, [r3, #4]
 8012c8e:	f003 030c 	and.w	r3, r3, #12
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8012c92:	2b08      	cmp	r3, #8
 8012c94:	d1f9      	bne.n	8012c8a <UTILS_EnablePLLAndSwitchSystem+0x5e>
    {
      /* Wait for system clock switch to PLL */
    }

    /* Set APB1 & APB2 prescaler*/
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
 8012c96:	686a      	ldr	r2, [r5, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8012c98:	4b15      	ldr	r3, [pc, #84]	; (8012cf0 <UTILS_EnablePLLAndSwitchSystem+0xc4>)
 8012c9a:	6859      	ldr	r1, [r3, #4]
 8012c9c:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8012ca0:	430a      	orrs	r2, r1
 8012ca2:	605a      	str	r2, [r3, #4]
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
 8012ca4:	68aa      	ldr	r2, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8012ca6:	6859      	ldr	r1, [r3, #4]
 8012ca8:	f421 5160 	bic.w	r1, r1, #14336	; 0x3800
 8012cac:	430a      	orrs	r2, r1
 8012cae:	605a      	str	r2, [r3, #4]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (sysclk_frequency_current > SYSCLK_Frequency)
 8012cb0:	42a6      	cmp	r6, r4
 8012cb2:	d80b      	bhi.n	8012ccc <UTILS_EnablePLLAndSwitchSystem+0xa0>
    /* Set FLASH latency to lowest latency */
    status = LL_SetFlashLatency(SYSCLK_Frequency);
  }

  /* Update SystemCoreClock variable */
  if (status == SUCCESS)
 8012cb4:	b17f      	cbz	r7, 8012cd6 <UTILS_EnablePLLAndSwitchSystem+0xaa>
  {
    LL_SetSystemCoreClock(__LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider));
  }

  return status;
}
 8012cb6:	4638      	mov	r0, r7
 8012cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return 32U;
 8012cba:	2320      	movs	r3, #32
 8012cbc:	e7c6      	b.n	8012c4c <UTILS_EnablePLLAndSwitchSystem+0x20>
    status = LL_SetFlashLatency(SYSCLK_Frequency);
 8012cbe:	4620      	mov	r0, r4
 8012cc0:	f7ff ff90 	bl	8012be4 <LL_SetFlashLatency>
  if (status == SUCCESS)
 8012cc4:	4607      	mov	r7, r0
 8012cc6:	2800      	cmp	r0, #0
 8012cc8:	d1f2      	bne.n	8012cb0 <UTILS_EnablePLLAndSwitchSystem+0x84>
 8012cca:	e7c7      	b.n	8012c5c <UTILS_EnablePLLAndSwitchSystem+0x30>
    status = LL_SetFlashLatency(SYSCLK_Frequency);
 8012ccc:	4620      	mov	r0, r4
 8012cce:	f7ff ff89 	bl	8012be4 <LL_SetFlashLatency>
 8012cd2:	4607      	mov	r7, r0
 8012cd4:	e7ee      	b.n	8012cb4 <UTILS_EnablePLLAndSwitchSystem+0x88>
    LL_SetSystemCoreClock(__LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider));
 8012cd6:	682b      	ldr	r3, [r5, #0]
 8012cd8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8012cdc:	4a05      	ldr	r2, [pc, #20]	; (8012cf4 <UTILS_EnablePLLAndSwitchSystem+0xc8>)
 8012cde:	5cd0      	ldrb	r0, [r2, r3]
 8012ce0:	fa24 f000 	lsr.w	r0, r4, r0
 8012ce4:	f7ff ff78 	bl	8012bd8 <LL_SetSystemCoreClock>
 8012ce8:	e7e5      	b.n	8012cb6 <UTILS_EnablePLLAndSwitchSystem+0x8a>
 8012cea:	bf00      	nop
 8012cec:	20000590 	.word	0x20000590
 8012cf0:	40021000 	.word	0x40021000
 8012cf4:	08021abc 	.word	0x08021abc

08012cf8 <LL_PLL_ConfigSystemClock_HSE>:
{
 8012cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cfa:	4606      	mov	r6, r0
 8012cfc:	460f      	mov	r7, r1
 8012cfe:	4614      	mov	r4, r2
 8012d00:	461d      	mov	r5, r3
  if (UTILS_PLL_IsBusy() == SUCCESS)
 8012d02:	f7ff ff5d 	bl	8012bc0 <UTILS_PLL_IsBusy>
 8012d06:	2800      	cmp	r0, #0
 8012d08:	d134      	bne.n	8012d74 <LL_PLL_ConfigSystemClock_HSE+0x7c>
    pllfreq = UTILS_GetPLLOutputFrequency(HSEFrequency, UTILS_PLLInitStruct);
 8012d0a:	4621      	mov	r1, r4
 8012d0c:	4630      	mov	r0, r6
 8012d0e:	f009 fcf8 	bl	801c702 <UTILS_GetPLLOutputFrequency>
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8012d12:	4b19      	ldr	r3, [pc, #100]	; (8012d78 <LL_PLL_ConfigSystemClock_HSE+0x80>)
 8012d14:	681b      	ldr	r3, [r3, #0]
    if (LL_RCC_HSE_IsReady() != 1U)
 8012d16:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8012d1a:	d110      	bne.n	8012d3e <LL_PLL_ConfigSystemClock_HSE+0x46>
      if (HSEBypass == LL_UTILS_HSEBYPASS_ON)
 8012d1c:	2f01      	cmp	r7, #1
 8012d1e:	d023      	beq.n	8012d68 <LL_PLL_ConfigSystemClock_HSE+0x70>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8012d20:	4a15      	ldr	r2, [pc, #84]	; (8012d78 <LL_PLL_ConfigSystemClock_HSE+0x80>)
 8012d22:	6813      	ldr	r3, [r2, #0]
 8012d24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012d28:	6013      	str	r3, [r2, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8012d2a:	4a13      	ldr	r2, [pc, #76]	; (8012d78 <LL_PLL_ConfigSystemClock_HSE+0x80>)
 8012d2c:	6813      	ldr	r3, [r2, #0]
 8012d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012d32:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8012d34:	4910      	ldr	r1, [pc, #64]	; (8012d78 <LL_PLL_ConfigSystemClock_HSE+0x80>)
 8012d36:	6809      	ldr	r1, [r1, #0]
      while (LL_RCC_HSE_IsReady() != 1U)
 8012d38:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8012d3c:	d0fa      	beq.n	8012d34 <LL_PLL_ConfigSystemClock_HSE+0x3c>
    LL_RCC_PLL_ConfigDomain_SYS((RCC_CFGR_PLLSRC_HSE_PREDIV | UTILS_PLLInitStruct->Prediv), UTILS_PLLInitStruct->PLLMul);
 8012d3e:	6863      	ldr	r3, [r4, #4]
 8012d40:	6824      	ldr	r4, [r4, #0]
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 8012d42:	490d      	ldr	r1, [pc, #52]	; (8012d78 <LL_PLL_ConfigSystemClock_HSE+0x80>)
 8012d44:	684a      	ldr	r2, [r1, #4]
 8012d46:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8012d4a:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8012d4e:	4322      	orrs	r2, r4
 8012d50:	604a      	str	r2, [r1, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 8012d52:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8012d54:	f022 020f 	bic.w	r2, r2, #15
 8012d58:	f003 030f 	and.w	r3, r3, #15
 8012d5c:	4313      	orrs	r3, r2
 8012d5e:	62cb      	str	r3, [r1, #44]	; 0x2c
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8012d60:	4629      	mov	r1, r5
 8012d62:	f7ff ff63 	bl	8012c2c <UTILS_EnablePLLAndSwitchSystem>
}
 8012d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8012d68:	4a03      	ldr	r2, [pc, #12]	; (8012d78 <LL_PLL_ConfigSystemClock_HSE+0x80>)
 8012d6a:	6813      	ldr	r3, [r2, #0]
 8012d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012d70:	6013      	str	r3, [r2, #0]
}
 8012d72:	e7da      	b.n	8012d2a <LL_PLL_ConfigSystemClock_HSE+0x32>
    status = ERROR;
 8012d74:	2001      	movs	r0, #1
 8012d76:	e7f6      	b.n	8012d66 <LL_PLL_ConfigSystemClock_HSE+0x6e>
 8012d78:	40021000 	.word	0x40021000

08012d7c <kscan_gpio_configure_0>:
    };                                                                                             \
    DEVICE_AND_API_INIT(kscan_gpio_##n, DT_INST_LABEL(n), kscan_gpio_init_##n,                     \
                        &kscan_gpio_data_##n, &kscan_gpio_config_##n, APPLICATION,                 \
                        CONFIG_APPLICATION_INIT_PRIORITY, &gpio_driver_api_##n);

DT_INST_FOREACH_STATUS_OKAY(GPIO_INST_INIT)
 8012d7c:	b508      	push	{r3, lr}
 8012d7e:	68c3      	ldr	r3, [r0, #12]
 8012d80:	b1a9      	cbz	r1, 8012dae <kscan_gpio_configure_0+0x32>
 8012d82:	6019      	str	r1, [r3, #0]
 8012d84:	f04f 0300 	mov.w	r3, #0
 8012d88:	2204      	movs	r2, #4
 8012d8a:	f362 0302 	bfi	r3, r2, #0, #3
 8012d8e:	f36f 03c5 	bfc	r3, #3, #3
 8012d92:	4a08      	ldr	r2, [pc, #32]	; (8012db4 <kscan_gpio_configure_0+0x38>)
 8012d94:	4908      	ldr	r1, [pc, #32]	; (8012db8 <kscan_gpio_configure_0+0x3c>)
 8012d96:	1a52      	subs	r2, r2, r1
 8012d98:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8012d9c:	f362 138f 	bfi	r3, r2, #6, #10
 8012da0:	2200      	movs	r2, #0
 8012da2:	4906      	ldr	r1, [pc, #24]	; (8012dbc <kscan_gpio_configure_0+0x40>)
 8012da4:	4806      	ldr	r0, [pc, #24]	; (8012dc0 <kscan_gpio_configure_0+0x44>)
 8012da6:	f7f1 fae1 	bl	800436c <log_2>
 8012daa:	2000      	movs	r0, #0
 8012dac:	bd08      	pop	{r3, pc}
 8012dae:	f06f 0015 	mvn.w	r0, #21
 8012db2:	e7fb      	b.n	8012dac <kscan_gpio_configure_0+0x30>
 8012db4:	0801d7a0 	.word	0x0801d7a0
 8012db8:	0801d6d0 	.word	0x0801d6d0
 8012dbc:	08021c84 	.word	0x08021c84
 8012dc0:	08021acc 	.word	0x08021acc

08012dc4 <kscan_gpio_config_interrupts>:
                                        gpio_flags_t flags) {
 8012dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012dc8:	4681      	mov	r9, r0
 8012dca:	4688      	mov	r8, r1
 8012dcc:	4617      	mov	r7, r2
 8012dce:	461e      	mov	r6, r3
    for (int i = 0; i < len; i++) {
 8012dd0:	2400      	movs	r4, #0
 8012dd2:	e009      	b.n	8012de8 <kscan_gpio_config_interrupts+0x24>
 8012dd4:	4632      	mov	r2, r6
	}

	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));

	return api->pin_interrupt_configure(port, pin, mode, trig);
 8012dd6:	699d      	ldr	r5, [r3, #24]
 8012dd8:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
 8012ddc:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
 8012de0:	47a8      	blx	r5
        if (err) {
 8012de2:	4605      	mov	r5, r0
 8012de4:	b9c0      	cbnz	r0, 8012e18 <kscan_gpio_config_interrupts+0x54>
    for (int i = 0; i < len; i++) {
 8012de6:	3401      	adds	r4, #1
 8012de8:	42bc      	cmp	r4, r7
 8012dea:	d227      	bcs.n	8012e3c <kscan_gpio_config_interrupts+0x78>
        const struct device *dev = devices[i];
 8012dec:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
        const struct kscan_gpio_item_config *cfg = &configs[i];
 8012df0:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8012df4:	eb08 0585 	add.w	r5, r8, r5, lsl #2
        int err = gpio_pin_interrupt_configure(dev, cfg->pin, flags);
 8012df8:	7929      	ldrb	r1, [r5, #4]
	const struct gpio_driver_api *api =
 8012dfa:	6883      	ldr	r3, [r0, #8]
	const struct gpio_driver_data *const data =
 8012dfc:	68c2      	ldr	r2, [r0, #12]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 8012dfe:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8012e02:	d0e7      	beq.n	8012dd4 <kscan_gpio_config_interrupts+0x10>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 8012e04:	6815      	ldr	r5, [r2, #0]
 8012e06:	2201      	movs	r2, #1
 8012e08:	408a      	lsls	r2, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 8012e0a:	4215      	tst	r5, r2
 8012e0c:	d002      	beq.n	8012e14 <kscan_gpio_config_interrupts+0x50>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
 8012e0e:	f486 22c0 	eor.w	r2, r6, #393216	; 0x60000
 8012e12:	e7e0      	b.n	8012dd6 <kscan_gpio_config_interrupts+0x12>
 8012e14:	4632      	mov	r2, r6
 8012e16:	e7de      	b.n	8012dd6 <kscan_gpio_config_interrupts+0x12>
            LOG_ERR("Unable to enable matrix GPIO interrupt");
 8012e18:	f04f 0100 	mov.w	r1, #0
 8012e1c:	2301      	movs	r3, #1
 8012e1e:	f363 0102 	bfi	r1, r3, #0, #3
 8012e22:	f36f 01c5 	bfc	r1, #3, #3
 8012e26:	4b07      	ldr	r3, [pc, #28]	; (8012e44 <kscan_gpio_config_interrupts+0x80>)
 8012e28:	4a07      	ldr	r2, [pc, #28]	; (8012e48 <kscan_gpio_config_interrupts+0x84>)
 8012e2a:	1a9b      	subs	r3, r3, r2
 8012e2c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8012e30:	f363 118f 	bfi	r1, r3, #6, #10
 8012e34:	4805      	ldr	r0, [pc, #20]	; (8012e4c <kscan_gpio_config_interrupts+0x88>)
 8012e36:	f7f1 fb89 	bl	800454c <log_0>
            return err;
 8012e3a:	e000      	b.n	8012e3e <kscan_gpio_config_interrupts+0x7a>
    return 0;
 8012e3c:	2500      	movs	r5, #0
}
 8012e3e:	4628      	mov	r0, r5
 8012e40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e44:	0801d7a0 	.word	0x0801d7a0
 8012e48:	0801d6d0 	.word	0x0801d6d0
 8012e4c:	08021ae4 	.word	0x08021ae4

08012e50 <kscan_gpio_irq_callback_handler_0>:
DT_INST_FOREACH_STATUS_OKAY(GPIO_INST_INIT)
 8012e50:	b510      	push	{r4, lr}
 8012e52:	460c      	mov	r4, r1
 8012e54:	68c8      	ldr	r0, [r1, #12]
 8012e56:	f009 fc8a 	bl	801c76e <kscan_gpio_disable_interrupts_0>
 8012e5a:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8012e5e:	f00a f86b 	bl	801cf38 <k_delayed_work_cancel>
 8012e62:	2232      	movs	r2, #50	; 0x32
 8012e64:	2300      	movs	r3, #0
 8012e66:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8012e6a:	4802      	ldr	r0, [pc, #8]	; (8012e74 <kscan_gpio_irq_callback_handler_0+0x24>)
 8012e6c:	f001 fbf4 	bl	8014658 <k_delayed_work_submit_to_queue>
 8012e70:	bd10      	pop	{r4, pc}
 8012e72:	bf00      	nop
 8012e74:	20001408 	.word	0x20001408

08012e78 <kscan_gpio_set_output_state_0>:
 8012e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012e7c:	b083      	sub	sp, #12
 8012e7e:	4606      	mov	r6, r0
 8012e80:	460f      	mov	r7, r1
 8012e82:	2400      	movs	r4, #0
 8012e84:	e00b      	b.n	8012e9e <kscan_gpio_set_output_state_0+0x26>
 8012e86:	463b      	mov	r3, r7

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (value != 0)	{
 8012e88:	b31b      	cbz	r3, 8012ed2 <kscan_gpio_set_output_state_0+0x5a>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8012e8a:	2301      	movs	r3, #1
 8012e8c:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 8012e90:	f8d9 3008 	ldr.w	r3, [r9, #8]
	return api->port_set_bits_raw(port, pins);
 8012e94:	68db      	ldr	r3, [r3, #12]
 8012e96:	4648      	mov	r0, r9
 8012e98:	4798      	blx	r3
 8012e9a:	bb18      	cbnz	r0, 8012ee4 <kscan_gpio_set_output_state_0+0x6c>
 8012e9c:	3401      	adds	r4, #1
 8012e9e:	2c05      	cmp	r4, #5
 8012ea0:	dc35      	bgt.n	8012f0e <kscan_gpio_set_output_state_0+0x96>
 8012ea2:	4630      	mov	r0, r6
 8012ea4:	f009 fc47 	bl	801c736 <kscan_gpio_output_devices_0>
 8012ea8:	f850 9024 	ldr.w	r9, [r0, r4, lsl #2]
 8012eac:	4630      	mov	r0, r6
 8012eae:	f009 fc45 	bl	801c73c <kscan_gpio_output_configs_0>
 8012eb2:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8012eb6:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8012eba:	7929      	ldrb	r1, [r5, #4]
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
			       int value)
{
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
 8012ebc:	f8d9 300c 	ldr.w	r3, [r9, #12]

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8012ec0:	681a      	ldr	r2, [r3, #0]
 8012ec2:	2301      	movs	r3, #1
 8012ec4:	408b      	lsls	r3, r1
 8012ec6:	421a      	tst	r2, r3
 8012ec8:	d0dd      	beq.n	8012e86 <kscan_gpio_set_output_state_0+0xe>
		value = (value != 0) ? 0 : 1;
 8012eca:	fab7 f387 	clz	r3, r7
 8012ece:	095b      	lsrs	r3, r3, #5
 8012ed0:	e7da      	b.n	8012e88 <kscan_gpio_set_output_state_0+0x10>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8012ed2:	2301      	movs	r3, #1
 8012ed4:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 8012ed8:	f8d9 3008 	ldr.w	r3, [r9, #8]
	return api->port_clear_bits_raw(port, pins);
 8012edc:	691b      	ldr	r3, [r3, #16]
 8012ede:	4648      	mov	r0, r9
 8012ee0:	4798      	blx	r3
 8012ee2:	e7da      	b.n	8012e9a <kscan_gpio_set_output_state_0+0x22>
 8012ee4:	2204      	movs	r2, #4
 8012ee6:	f362 0802 	bfi	r8, r2, #0, #3
 8012eea:	f36f 08c5 	bfc	r8, #3, #3
 8012eee:	4a09      	ldr	r2, [pc, #36]	; (8012f14 <kscan_gpio_set_output_state_0+0x9c>)
 8012ef0:	4909      	ldr	r1, [pc, #36]	; (8012f18 <kscan_gpio_set_output_state_0+0xa0>)
 8012ef2:	1a52      	subs	r2, r2, r1
 8012ef4:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8012ef8:	f362 188f 	bfi	r8, r2, #6, #10
 8012efc:	792a      	ldrb	r2, [r5, #4]
 8012efe:	f8ad 8000 	strh.w	r8, [sp]
 8012f02:	4603      	mov	r3, r0
 8012f04:	4905      	ldr	r1, [pc, #20]	; (8012f1c <kscan_gpio_set_output_state_0+0xa4>)
 8012f06:	4806      	ldr	r0, [pc, #24]	; (8012f20 <kscan_gpio_set_output_state_0+0xa8>)
 8012f08:	f7f1 f8e4 	bl	80040d4 <log_3>
 8012f0c:	e7c6      	b.n	8012e9c <kscan_gpio_set_output_state_0+0x24>
 8012f0e:	b003      	add	sp, #12
 8012f10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f14:	0801d7a0 	.word	0x0801d7a0
 8012f18:	0801d6d0 	.word	0x0801d6d0
 8012f1c:	08021c50 	.word	0x08021c50
 8012f20:	08021b0c 	.word	0x08021b0c

08012f24 <kscan_gpio_read_0>:
 8012f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f28:	b089      	sub	sp, #36	; 0x24
 8012f2a:	4606      	mov	r6, r0
 8012f2c:	f8d0 b00c 	ldr.w	fp, [r0, #12]
 8012f30:	2100      	movs	r1, #0
 8012f32:	f7ff ffa1 	bl	8012e78 <kscan_gpio_set_output_state_0>
 8012f36:	f04f 0800 	mov.w	r8, #0
 8012f3a:	f8cd b008 	str.w	fp, [sp, #8]
 8012f3e:	f8ad 700e 	strh.w	r7, [sp, #14]
 8012f42:	e056      	b.n	8012ff2 <kscan_gpio_read_0+0xce>
		value = (value != 0) ? 0 : 1;
 8012f44:	2300      	movs	r3, #0
 8012f46:	e06e      	b.n	8013026 <kscan_gpio_read_0+0x102>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8012f48:	2301      	movs	r3, #1
 8012f4a:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 8012f4e:	f8d9 3008 	ldr.w	r3, [r9, #8]
	return api->port_clear_bits_raw(port, pins);
 8012f52:	691b      	ldr	r3, [r3, #16]
 8012f54:	4648      	mov	r0, r9
 8012f56:	4798      	blx	r3
 8012f58:	e06f      	b.n	801303a <kscan_gpio_read_0+0x116>
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	bfd4      	ite	le
 8012f5e:	2300      	movle	r3, #0
 8012f60:	2301      	movgt	r3, #1
 8012f62:	4642      	mov	r2, r8
 8012f64:	4639      	mov	r1, r7
 8012f66:	4875      	ldr	r0, [pc, #468]	; (801313c <kscan_gpio_read_0+0x218>)
 8012f68:	f009 fbeb 	bl	801c742 <kscan_gpio_set_matrix_state_0>
 8012f6c:	3401      	adds	r4, #1
 8012f6e:	2c03      	cmp	r4, #3
 8012f70:	dc28      	bgt.n	8012fc4 <kscan_gpio_read_0+0xa0>
 8012f72:	4630      	mov	r0, r6
 8012f74:	f009 fbda 	bl	801c72c <kscan_gpio_input_devices_0>
 8012f78:	4627      	mov	r7, r4
 8012f7a:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 8012f7e:	4630      	mov	r0, r6
 8012f80:	f009 fbd7 	bl	801c732 <kscan_gpio_input_configs_0>
 8012f84:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8012f88:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8012f8c:	f890 a004 	ldrb.w	sl, [r0, #4]
	const struct gpio_driver_data *const data =
 8012f90:	f8d5 b00c 	ldr.w	fp, [r5, #12]
	const struct gpio_driver_api *api =
 8012f94:	68ab      	ldr	r3, [r5, #8]
	return api->port_get_raw(port, value);
 8012f96:	685b      	ldr	r3, [r3, #4]
 8012f98:	a904      	add	r1, sp, #16
 8012f9a:	4628      	mov	r0, r5
 8012f9c:	4798      	blx	r3
	if (ret == 0) {
 8012f9e:	4603      	mov	r3, r0
 8012fa0:	b920      	cbnz	r0, 8012fac <kscan_gpio_read_0+0x88>
		*value ^= data->invert;
 8012fa2:	f8db 1000 	ldr.w	r1, [fp]
 8012fa6:	9a04      	ldr	r2, [sp, #16]
 8012fa8:	404a      	eors	r2, r1
 8012faa:	9204      	str	r2, [sp, #16]
	if (ret == 0) {
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d1d4      	bne.n	8012f5a <kscan_gpio_read_0+0x36>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 8012fb0:	2301      	movs	r3, #1
 8012fb2:	fa03 fa0a 	lsl.w	sl, r3, sl
 8012fb6:	9b04      	ldr	r3, [sp, #16]
 8012fb8:	ea1a 0f03 	tst.w	sl, r3
 8012fbc:	bf14      	ite	ne
 8012fbe:	2301      	movne	r3, #1
 8012fc0:	2300      	moveq	r3, #0
 8012fc2:	e7ca      	b.n	8012f5a <kscan_gpio_read_0+0x36>
 8012fc4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012fc8:	9b00      	ldr	r3, [sp, #0]
 8012fca:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
 8012fcc:	f8d9 300c 	ldr.w	r3, [r9, #12]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8012fd0:	681a      	ldr	r2, [r3, #0]
 8012fd2:	2301      	movs	r3, #1
 8012fd4:	408b      	lsls	r3, r1
 8012fd6:	421a      	tst	r2, r3
 8012fd8:	d134      	bne.n	8013044 <kscan_gpio_read_0+0x120>
 8012fda:	2300      	movs	r3, #0
	if (value != 0)	{
 8012fdc:	b3a3      	cbz	r3, 8013048 <kscan_gpio_read_0+0x124>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8012fde:	2301      	movs	r3, #1
 8012fe0:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 8012fe4:	f8d9 3008 	ldr.w	r3, [r9, #8]
	return api->port_set_bits_raw(port, pins);
 8012fe8:	68db      	ldr	r3, [r3, #12]
 8012fea:	4648      	mov	r0, r9
 8012fec:	4798      	blx	r3
 8012fee:	f108 0801 	add.w	r8, r8, #1
 8012ff2:	f1b8 0f05 	cmp.w	r8, #5
 8012ff6:	dc30      	bgt.n	801305a <kscan_gpio_read_0+0x136>
 8012ff8:	4630      	mov	r0, r6
 8012ffa:	f009 fb9c 	bl	801c736 <kscan_gpio_output_devices_0>
 8012ffe:	4645      	mov	r5, r8
 8013000:	f850 9028 	ldr.w	r9, [r0, r8, lsl #2]
 8013004:	4630      	mov	r0, r6
 8013006:	f009 fb99 	bl	801c73c <kscan_gpio_output_configs_0>
 801300a:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801300e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8013012:	9300      	str	r3, [sp, #0]
 8013014:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
 8013016:	f8d9 300c 	ldr.w	r3, [r9, #12]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 801301a:	681a      	ldr	r2, [r3, #0]
 801301c:	2301      	movs	r3, #1
 801301e:	408b      	lsls	r3, r1
 8013020:	421a      	tst	r2, r3
 8013022:	d18f      	bne.n	8012f44 <kscan_gpio_read_0+0x20>
 8013024:	2301      	movs	r3, #1
	if (value != 0)	{
 8013026:	2b00      	cmp	r3, #0
 8013028:	d08e      	beq.n	8012f48 <kscan_gpio_read_0+0x24>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 801302a:	2301      	movs	r3, #1
 801302c:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 8013030:	f8d9 3008 	ldr.w	r3, [r9, #8]
	return api->port_set_bits_raw(port, pins);
 8013034:	68db      	ldr	r3, [r3, #12]
 8013036:	4648      	mov	r0, r9
 8013038:	4798      	blx	r3
 801303a:	2400      	movs	r4, #0
 801303c:	f8cd 8004 	str.w	r8, [sp, #4]
 8013040:	46a8      	mov	r8, r5
	return ret;
 8013042:	e794      	b.n	8012f6e <kscan_gpio_read_0+0x4a>
		value = (value != 0) ? 0 : 1;
 8013044:	2301      	movs	r3, #1
 8013046:	e7c9      	b.n	8012fdc <kscan_gpio_read_0+0xb8>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8013048:	2301      	movs	r3, #1
 801304a:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 801304e:	f8d9 3008 	ldr.w	r3, [r9, #8]
	return api->port_clear_bits_raw(port, pins);
 8013052:	691b      	ldr	r3, [r3, #16]
 8013054:	4648      	mov	r0, r9
 8013056:	4798      	blx	r3
 8013058:	e7c9      	b.n	8012fee <kscan_gpio_read_0+0xca>
 801305a:	f8dd b008 	ldr.w	fp, [sp, #8]
 801305e:	f8bd 700e 	ldrh.w	r7, [sp, #14]
 8013062:	2101      	movs	r1, #1
 8013064:	4630      	mov	r0, r6
 8013066:	f7ff ff07 	bl	8012e78 <kscan_gpio_set_output_state_0>
 801306a:	f04f 0800 	mov.w	r8, #0
 801306e:	46c2      	mov	sl, r8
 8013070:	4645      	mov	r5, r8
 8013072:	46b0      	mov	r8, r6
 8013074:	e047      	b.n	8013106 <kscan_gpio_read_0+0x1e2>
 8013076:	2701      	movs	r7, #1
 8013078:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 801307c:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 8013080:	4423      	add	r3, r4
 8013082:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013086:	42b3      	cmp	r3, r6
 8013088:	d028      	beq.n	80130dc <kscan_gpio_read_0+0x1b8>
 801308a:	2304      	movs	r3, #4
 801308c:	f363 0902 	bfi	r9, r3, #0, #3
 8013090:	f36f 09c5 	bfc	r9, #3, #3
 8013094:	4b2a      	ldr	r3, [pc, #168]	; (8013140 <kscan_gpio_read_0+0x21c>)
 8013096:	4a2b      	ldr	r2, [pc, #172]	; (8013144 <kscan_gpio_read_0+0x220>)
 8013098:	1a9b      	subs	r3, r3, r2
 801309a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 801309e:	f363 198f 	bfi	r9, r3, #6, #10
 80130a2:	4b29      	ldr	r3, [pc, #164]	; (8013148 <kscan_gpio_read_0+0x224>)
 80130a4:	9304      	str	r3, [sp, #16]
 80130a6:	9500      	str	r5, [sp, #0]
 80130a8:	9505      	str	r5, [sp, #20]
 80130aa:	46a2      	mov	sl, r4
 80130ac:	9406      	str	r4, [sp, #24]
 80130ae:	b32e      	cbz	r6, 80130fc <kscan_gpio_read_0+0x1d8>
 80130b0:	4b26      	ldr	r3, [pc, #152]	; (801314c <kscan_gpio_read_0+0x228>)
 80130b2:	9307      	str	r3, [sp, #28]
 80130b4:	464b      	mov	r3, r9
 80130b6:	2204      	movs	r2, #4
 80130b8:	a904      	add	r1, sp, #16
 80130ba:	4825      	ldr	r0, [pc, #148]	; (8013150 <kscan_gpio_read_0+0x22c>)
 80130bc:	f7f1 f9da 	bl	8004474 <log_n>
 80130c0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80130c4:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 80130c8:	4423      	add	r3, r4
 80130ca:	f883 6038 	strb.w	r6, [r3, #56]	; 0x38
 80130ce:	4633      	mov	r3, r6
 80130d0:	4652      	mov	r2, sl
 80130d2:	9900      	ldr	r1, [sp, #0]
 80130d4:	4640      	mov	r0, r8
 80130d6:	f8db 6000 	ldr.w	r6, [fp]
 80130da:	47b0      	blx	r6
 80130dc:	3401      	adds	r4, #1
 80130de:	2c05      	cmp	r4, #5
 80130e0:	dc0e      	bgt.n	8013100 <kscan_gpio_read_0+0x1dc>
 80130e2:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80130e6:	4a15      	ldr	r2, [pc, #84]	; (801313c <kscan_gpio_read_0+0x218>)
 80130e8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80130ec:	5d1e      	ldrb	r6, [r3, r4]
 80130ee:	2f00      	cmp	r7, #0
 80130f0:	d1c1      	bne.n	8013076 <kscan_gpio_read_0+0x152>
 80130f2:	b10e      	cbz	r6, 80130f8 <kscan_gpio_read_0+0x1d4>
 80130f4:	2701      	movs	r7, #1
 80130f6:	e7bf      	b.n	8013078 <kscan_gpio_read_0+0x154>
 80130f8:	2700      	movs	r7, #0
 80130fa:	e7bd      	b.n	8013078 <kscan_gpio_read_0+0x154>
 80130fc:	4b15      	ldr	r3, [pc, #84]	; (8013154 <kscan_gpio_read_0+0x230>)
 80130fe:	e7d8      	b.n	80130b2 <kscan_gpio_read_0+0x18e>
 8013100:	46ba      	mov	sl, r7
 8013102:	464f      	mov	r7, r9
 8013104:	3501      	adds	r5, #1
 8013106:	2d03      	cmp	r5, #3
 8013108:	dc03      	bgt.n	8013112 <kscan_gpio_read_0+0x1ee>
 801310a:	2400      	movs	r4, #0
 801310c:	46b9      	mov	r9, r7
 801310e:	4657      	mov	r7, sl
 8013110:	e7e5      	b.n	80130de <kscan_gpio_read_0+0x1ba>
 8013112:	4654      	mov	r4, sl
 8013114:	b174      	cbz	r4, 8013134 <kscan_gpio_read_0+0x210>
 8013116:	f10b 0408 	add.w	r4, fp, #8
 801311a:	4620      	mov	r0, r4
 801311c:	f009 ff0c 	bl	801cf38 <k_delayed_work_cancel>
 8013120:	2232      	movs	r2, #50	; 0x32
 8013122:	2300      	movs	r3, #0
 8013124:	4621      	mov	r1, r4
 8013126:	480c      	ldr	r0, [pc, #48]	; (8013158 <kscan_gpio_read_0+0x234>)
 8013128:	f001 fa96 	bl	8014658 <k_delayed_work_submit_to_queue>
 801312c:	2000      	movs	r0, #0
 801312e:	b009      	add	sp, #36	; 0x24
 8013130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013134:	4640      	mov	r0, r8
 8013136:	f009 fb0a 	bl	801c74e <kscan_gpio_enable_interrupts_0>
 801313a:	e7f7      	b.n	801312c <kscan_gpio_read_0+0x208>
 801313c:	20002260 	.word	0x20002260
 8013140:	0801d7a0 	.word	0x0801d7a0
 8013144:	0801d6d0 	.word	0x0801d6d0
 8013148:	08021c70 	.word	0x08021c70
 801314c:	08021008 	.word	0x08021008
 8013150:	08021b34 	.word	0x08021b34
 8013154:	08021b30 	.word	0x08021b30
 8013158:	20001408 	.word	0x20001408

0801315c <kscan_gpio_init_0>:
 801315c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013160:	b089      	sub	sp, #36	; 0x24
 8013162:	4683      	mov	fp, r0
 8013164:	68c3      	ldr	r3, [r0, #12]
 8013166:	9306      	str	r3, [sp, #24]
 8013168:	f009 fae0 	bl	801c72c <kscan_gpio_input_devices_0>
 801316c:	9004      	str	r0, [sp, #16]
 801316e:	f04f 0800 	mov.w	r8, #0
 8013172:	f8cd b00c 	str.w	fp, [sp, #12]
 8013176:	e062      	b.n	801323e <kscan_gpio_init_0+0xe2>
 8013178:	f04f 0100 	mov.w	r1, #0
 801317c:	2301      	movs	r3, #1
 801317e:	f363 0102 	bfi	r1, r3, #0, #3
 8013182:	f36f 01c5 	bfc	r1, #3, #3
 8013186:	4bc1      	ldr	r3, [pc, #772]	; (801348c <kscan_gpio_init_0+0x330>)
 8013188:	4ac1      	ldr	r2, [pc, #772]	; (8013490 <kscan_gpio_init_0+0x334>)
 801318a:	1a9b      	subs	r3, r3, r2
 801318c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8013190:	f363 118f 	bfi	r1, r3, #6, #10
 8013194:	48bf      	ldr	r0, [pc, #764]	; (8013494 <kscan_gpio_init_0+0x338>)
 8013196:	f7f1 f9d9 	bl	800454c <log_0>
 801319a:	f06f 0315 	mvn.w	r3, #21
 801319e:	461c      	mov	r4, r3
 80131a0:	e194      	b.n	80134cc <kscan_gpio_init_0+0x370>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 80131a2:	2201      	movs	r2, #1
 80131a4:	9902      	ldr	r1, [sp, #8]
 80131a6:	fa02 f101 	lsl.w	r1, r2, r1
 80131aa:	f8db 2000 	ldr.w	r2, [fp]
 80131ae:	ea22 0201 	bic.w	r2, r2, r1
 80131b2:	f8cb 2000 	str.w	r2, [fp]
 80131b6:	e088      	b.n	80132ca <kscan_gpio_init_0+0x16e>
	return api->pin_interrupt_configure(port, pin, mode, trig);
 80131b8:	699e      	ldr	r6, [r3, #24]
 80131ba:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
 80131be:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
 80131c2:	9902      	ldr	r1, [sp, #8]
 80131c4:	4620      	mov	r0, r4
 80131c6:	47b0      	blx	r6
 80131c8:	4603      	mov	r3, r0
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	f040 8098 	bne.w	8013300 <kscan_gpio_init_0+0x1a4>
 80131d0:	2304      	movs	r3, #4
 80131d2:	f363 0902 	bfi	r9, r3, #0, #3
 80131d6:	f36f 09c5 	bfc	r9, #3, #3
 80131da:	4bac      	ldr	r3, [pc, #688]	; (801348c <kscan_gpio_init_0+0x330>)
 80131dc:	4aac      	ldr	r2, [pc, #688]	; (8013490 <kscan_gpio_init_0+0x334>)
 80131de:	1a9b      	subs	r3, r3, r2
 80131e0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80131e4:	f363 198f 	bfi	r9, r3, #6, #10
 80131e8:	f89a 2004 	ldrb.w	r2, [sl, #4]
 80131ec:	59eb      	ldr	r3, [r5, r7]
 80131ee:	f8ad 9000 	strh.w	r9, [sp]
 80131f2:	49a9      	ldr	r1, [pc, #676]	; (8013498 <kscan_gpio_init_0+0x33c>)
 80131f4:	48a9      	ldr	r0, [pc, #676]	; (801349c <kscan_gpio_init_0+0x340>)
 80131f6:	f7f0 ff6d 	bl	80040d4 <log_3>
 80131fa:	9b06      	ldr	r3, [sp, #24]
 80131fc:	f103 0208 	add.w	r2, r3, #8
 8013200:	49a7      	ldr	r1, [pc, #668]	; (80134a0 <kscan_gpio_init_0+0x344>)
 8013202:	eb08 0088 	add.w	r0, r8, r8, lsl #2
 8013206:	eb01 0380 	add.w	r3, r1, r0, lsl #2
 801320a:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
 801320e:	9a03      	ldr	r2, [sp, #12]
 8013210:	611a      	str	r2, [r3, #16]
 8013212:	1d19      	adds	r1, r3, #4
 8013214:	f89a 0004 	ldrb.w	r0, [sl, #4]
 8013218:	2201      	movs	r2, #1
 801321a:	4082      	lsls	r2, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
 801321c:	48a1      	ldr	r0, [pc, #644]	; (80134a4 <kscan_gpio_init_0+0x348>)
 801321e:	6098      	str	r0, [r3, #8]
	callback->pin_mask = pin_mask;
 8013220:	60da      	str	r2, [r3, #12]
 8013222:	9b04      	ldr	r3, [sp, #16]
 8013224:	9a05      	ldr	r2, [sp, #20]
 8013226:	5898      	ldr	r0, [r3, r2]
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
 8013228:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
 801322a:	69db      	ldr	r3, [r3, #28]
 801322c:	2b00      	cmp	r3, #0
 801322e:	f000 8091 	beq.w	8013354 <kscan_gpio_init_0+0x1f8>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
 8013232:	2201      	movs	r2, #1
 8013234:	4798      	blx	r3
 8013236:	2800      	cmp	r0, #0
 8013238:	d179      	bne.n	801332e <kscan_gpio_init_0+0x1d2>
 801323a:	f108 0801 	add.w	r8, r8, #1
 801323e:	f1b8 0f03 	cmp.w	r8, #3
 8013242:	f300 808b 	bgt.w	801335c <kscan_gpio_init_0+0x200>
 8013246:	9803      	ldr	r0, [sp, #12]
 8013248:	f009 fa73 	bl	801c732 <kscan_gpio_input_configs_0>
 801324c:	4605      	mov	r5, r0
 801324e:	eb08 0a48 	add.w	sl, r8, r8, lsl #1
 8013252:	ea4f 078a 	mov.w	r7, sl, lsl #2
 8013256:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 801325a:	59c0      	ldr	r0, [r0, r7]
 801325c:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8013260:	9305      	str	r3, [sp, #20]
 8013262:	f000 f97b 	bl	801355c <z_impl_device_get_binding>
 8013266:	4604      	mov	r4, r0
 8013268:	9b04      	ldr	r3, [sp, #16]
 801326a:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801326e:	2800      	cmp	r0, #0
 8013270:	d082      	beq.n	8013178 <kscan_gpio_init_0+0x1c>
 8013272:	f89a 3004 	ldrb.w	r3, [sl, #4]
 8013276:	9302      	str	r3, [sp, #8]
 8013278:	f8da 3008 	ldr.w	r3, [sl, #8]
 801327c:	f443 7680 	orr.w	r6, r3, #256	; 0x100
	const struct gpio_driver_api *api =
 8013280:	6882      	ldr	r2, [r0, #8]
 8013282:	9207      	str	r2, [sp, #28]
	struct gpio_driver_data *data =
 8013284:	f8d0 b00c 	ldr.w	fp, [r0, #12]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 8013288:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 801328c:	d007      	beq.n	801329e <kscan_gpio_init_0+0x142>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 801328e:	f416 6f40 	tst.w	r6, #3072	; 0xc00
 8013292:	d004      	beq.n	801329e <kscan_gpio_init_0+0x142>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8013294:	f016 0f01 	tst.w	r6, #1
 8013298:	d001      	beq.n	801329e <kscan_gpio_init_0+0x142>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
 801329a:	f486 56e0 	eor.w	r6, r6, #7168	; 0x1c00
	const struct gpio_driver_api *api =
 801329e:	68a3      	ldr	r3, [r4, #8]
	return api->pin_configure(port, pin, flags);
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	4632      	mov	r2, r6
 80132a4:	9902      	ldr	r1, [sp, #8]
 80132a6:	4620      	mov	r0, r4
 80132a8:	4798      	blx	r3
	if (ret != 0) {
 80132aa:	4603      	mov	r3, r0
 80132ac:	2800      	cmp	r0, #0
 80132ae:	d18c      	bne.n	80131ca <kscan_gpio_init_0+0x6e>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 80132b0:	f016 0f01 	tst.w	r6, #1
 80132b4:	f43f af75 	beq.w	80131a2 <kscan_gpio_init_0+0x46>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80132b8:	2201      	movs	r2, #1
 80132ba:	9902      	ldr	r1, [sp, #8]
 80132bc:	fa02 f101 	lsl.w	r1, r2, r1
 80132c0:	f8db 2000 	ldr.w	r2, [fp]
 80132c4:	430a      	orrs	r2, r1
 80132c6:	f8cb 2000 	str.w	r2, [fp]
	if (((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U)
 80132ca:	f416 4fc0 	tst.w	r6, #24576	; 0x6000
 80132ce:	f43f af7c 	beq.w	80131ca <kscan_gpio_init_0+0x6e>
	    && (api->pin_interrupt_configure != NULL)) {
 80132d2:	9a07      	ldr	r2, [sp, #28]
 80132d4:	6992      	ldr	r2, [r2, #24]
 80132d6:	2a00      	cmp	r2, #0
 80132d8:	f43f af77 	beq.w	80131ca <kscan_gpio_init_0+0x6e>
		flags &= ~GPIO_INT_DEBOUNCE;
 80132dc:	f426 2200 	bic.w	r2, r6, #524288	; 0x80000
	const struct gpio_driver_api *api =
 80132e0:	68a3      	ldr	r3, [r4, #8]
	const struct gpio_driver_data *const data =
 80132e2:	68e1      	ldr	r1, [r4, #12]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 80132e4:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 80132e8:	f43f af66 	beq.w	80131b8 <kscan_gpio_init_0+0x5c>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 80132ec:	6808      	ldr	r0, [r1, #0]
 80132ee:	2101      	movs	r1, #1
 80132f0:	9e02      	ldr	r6, [sp, #8]
 80132f2:	40b1      	lsls	r1, r6
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 80132f4:	4208      	tst	r0, r1
 80132f6:	f43f af5f 	beq.w	80131b8 <kscan_gpio_init_0+0x5c>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
 80132fa:	f482 22c0 	eor.w	r2, r2, #393216	; 0x60000
 80132fe:	e75b      	b.n	80131b8 <kscan_gpio_init_0+0x5c>
 8013300:	461c      	mov	r4, r3
 8013302:	f04f 0300 	mov.w	r3, #0
 8013306:	2201      	movs	r2, #1
 8013308:	f362 0302 	bfi	r3, r2, #0, #3
 801330c:	f36f 03c5 	bfc	r3, #3, #3
 8013310:	4a5e      	ldr	r2, [pc, #376]	; (801348c <kscan_gpio_init_0+0x330>)
 8013312:	495f      	ldr	r1, [pc, #380]	; (8013490 <kscan_gpio_init_0+0x334>)
 8013314:	1a52      	subs	r2, r2, r1
 8013316:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 801331a:	f362 138f 	bfi	r3, r2, #6, #10
 801331e:	f8da 2000 	ldr.w	r2, [sl]
 8013322:	f89a 1004 	ldrb.w	r1, [sl, #4]
 8013326:	4860      	ldr	r0, [pc, #384]	; (80134a8 <kscan_gpio_init_0+0x34c>)
 8013328:	f7f1 f820 	bl	800436c <log_2>
 801332c:	e0ce      	b.n	80134cc <kscan_gpio_init_0+0x370>
 801332e:	4604      	mov	r4, r0
 8013330:	f04f 0100 	mov.w	r1, #0
 8013334:	2301      	movs	r3, #1
 8013336:	f363 0102 	bfi	r1, r3, #0, #3
 801333a:	f36f 01c5 	bfc	r1, #3, #3
 801333e:	4b53      	ldr	r3, [pc, #332]	; (801348c <kscan_gpio_init_0+0x330>)
 8013340:	4a53      	ldr	r2, [pc, #332]	; (8013490 <kscan_gpio_init_0+0x334>)
 8013342:	1a9b      	subs	r3, r3, r2
 8013344:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8013348:	f363 118f 	bfi	r1, r3, #6, #10
 801334c:	4857      	ldr	r0, [pc, #348]	; (80134ac <kscan_gpio_init_0+0x350>)
 801334e:	f7f1 f8fd 	bl	800454c <log_0>
 8013352:	e0bb      	b.n	80134cc <kscan_gpio_init_0+0x370>
		return -ENOTSUP;
 8013354:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8013358:	461c      	mov	r4, r3
 801335a:	e7e9      	b.n	8013330 <kscan_gpio_init_0+0x1d4>
 801335c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8013360:	4658      	mov	r0, fp
 8013362:	f009 f9e8 	bl	801c736 <kscan_gpio_output_devices_0>
 8013366:	9002      	str	r0, [sp, #8]
 8013368:	2600      	movs	r6, #0
 801336a:	e02a      	b.n	80133c2 <kscan_gpio_init_0+0x266>
 801336c:	f04f 0100 	mov.w	r1, #0
 8013370:	2301      	movs	r3, #1
 8013372:	f363 0102 	bfi	r1, r3, #0, #3
 8013376:	f36f 01c5 	bfc	r1, #3, #3
 801337a:	4b44      	ldr	r3, [pc, #272]	; (801348c <kscan_gpio_init_0+0x330>)
 801337c:	4a44      	ldr	r2, [pc, #272]	; (8013490 <kscan_gpio_init_0+0x334>)
 801337e:	1a9b      	subs	r3, r3, r2
 8013380:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8013384:	f363 118f 	bfi	r1, r3, #6, #10
 8013388:	4849      	ldr	r0, [pc, #292]	; (80134b0 <kscan_gpio_init_0+0x354>)
 801338a:	f7f1 f8df 	bl	800454c <log_0>
 801338e:	f06f 0315 	mvn.w	r3, #21
 8013392:	461c      	mov	r4, r3
 8013394:	e09a      	b.n	80134cc <kscan_gpio_init_0+0x370>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8013396:	2201      	movs	r2, #1
 8013398:	fa02 f108 	lsl.w	r1, r2, r8
 801339c:	f8d9 2000 	ldr.w	r2, [r9]
 80133a0:	ea22 0201 	bic.w	r2, r2, r1
 80133a4:	f8c9 2000 	str.w	r2, [r9]
 80133a8:	e043      	b.n	8013432 <kscan_gpio_init_0+0x2d6>
	return api->pin_interrupt_configure(port, pin, mode, trig);
 80133aa:	699d      	ldr	r5, [r3, #24]
 80133ac:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
 80133b0:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
 80133b4:	4641      	mov	r1, r8
 80133b6:	4620      	mov	r0, r4
 80133b8:	47a8      	blx	r5
 80133ba:	4603      	mov	r3, r0
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d14f      	bne.n	8013460 <kscan_gpio_init_0+0x304>
 80133c0:	3601      	adds	r6, #1
 80133c2:	2e05      	cmp	r6, #5
 80133c4:	dc78      	bgt.n	80134b8 <kscan_gpio_init_0+0x35c>
 80133c6:	4658      	mov	r0, fp
 80133c8:	f009 f9b8 	bl	801c73c <kscan_gpio_output_configs_0>
 80133cc:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80133d0:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80133d4:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80133d8:	f000 f8c0 	bl	801355c <z_impl_device_get_binding>
 80133dc:	4604      	mov	r4, r0
 80133de:	9b02      	ldr	r3, [sp, #8]
 80133e0:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80133e4:	2800      	cmp	r0, #0
 80133e6:	d0c1      	beq.n	801336c <kscan_gpio_init_0+0x210>
 80133e8:	f897 8004 	ldrb.w	r8, [r7, #4]
 80133ec:	68bd      	ldr	r5, [r7, #8]
 80133ee:	f445 55d0 	orr.w	r5, r5, #6656	; 0x1a00
	const struct gpio_driver_api *api =
 80133f2:	f8d0 a008 	ldr.w	sl, [r0, #8]
	struct gpio_driver_data *data =
 80133f6:	f8d0 900c 	ldr.w	r9, [r0, #12]
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 80133fa:	f415 6f40 	tst.w	r5, #3072	; 0xc00
 80133fe:	d004      	beq.n	801340a <kscan_gpio_init_0+0x2ae>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8013400:	f015 0f01 	tst.w	r5, #1
 8013404:	d001      	beq.n	801340a <kscan_gpio_init_0+0x2ae>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
 8013406:	f485 55e0 	eor.w	r5, r5, #7168	; 0x1c00
	const struct gpio_driver_api *api =
 801340a:	68a3      	ldr	r3, [r4, #8]
	return api->pin_configure(port, pin, flags);
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	462a      	mov	r2, r5
 8013410:	4641      	mov	r1, r8
 8013412:	4620      	mov	r0, r4
 8013414:	4798      	blx	r3
	if (ret != 0) {
 8013416:	4603      	mov	r3, r0
 8013418:	2800      	cmp	r0, #0
 801341a:	d1cf      	bne.n	80133bc <kscan_gpio_init_0+0x260>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 801341c:	f015 0f01 	tst.w	r5, #1
 8013420:	d0b9      	beq.n	8013396 <kscan_gpio_init_0+0x23a>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8013422:	2201      	movs	r2, #1
 8013424:	fa02 f108 	lsl.w	r1, r2, r8
 8013428:	f8d9 2000 	ldr.w	r2, [r9]
 801342c:	430a      	orrs	r2, r1
 801342e:	f8c9 2000 	str.w	r2, [r9]
	if (((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U)
 8013432:	f415 4fc0 	tst.w	r5, #24576	; 0x6000
 8013436:	d0c1      	beq.n	80133bc <kscan_gpio_init_0+0x260>
	    && (api->pin_interrupt_configure != NULL)) {
 8013438:	f8da 2018 	ldr.w	r2, [sl, #24]
 801343c:	2a00      	cmp	r2, #0
 801343e:	d0bd      	beq.n	80133bc <kscan_gpio_init_0+0x260>
		flags &= ~GPIO_INT_DEBOUNCE;
 8013440:	f425 2200 	bic.w	r2, r5, #524288	; 0x80000
	const struct gpio_driver_api *api =
 8013444:	68a3      	ldr	r3, [r4, #8]
	const struct gpio_driver_data *const data =
 8013446:	68e1      	ldr	r1, [r4, #12]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 8013448:	f415 4f00 	tst.w	r5, #32768	; 0x8000
 801344c:	d0ad      	beq.n	80133aa <kscan_gpio_init_0+0x24e>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 801344e:	6808      	ldr	r0, [r1, #0]
 8013450:	2101      	movs	r1, #1
 8013452:	fa01 f108 	lsl.w	r1, r1, r8
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 8013456:	4208      	tst	r0, r1
 8013458:	d0a7      	beq.n	80133aa <kscan_gpio_init_0+0x24e>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
 801345a:	f482 22c0 	eor.w	r2, r2, #393216	; 0x60000
 801345e:	e7a4      	b.n	80133aa <kscan_gpio_init_0+0x24e>
 8013460:	461c      	mov	r4, r3
 8013462:	f04f 0300 	mov.w	r3, #0
 8013466:	2201      	movs	r2, #1
 8013468:	f362 0302 	bfi	r3, r2, #0, #3
 801346c:	f36f 03c5 	bfc	r3, #3, #3
 8013470:	4a06      	ldr	r2, [pc, #24]	; (801348c <kscan_gpio_init_0+0x330>)
 8013472:	4907      	ldr	r1, [pc, #28]	; (8013490 <kscan_gpio_init_0+0x334>)
 8013474:	1a52      	subs	r2, r2, r1
 8013476:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 801347a:	f362 138f 	bfi	r3, r2, #6, #10
 801347e:	683a      	ldr	r2, [r7, #0]
 8013480:	7939      	ldrb	r1, [r7, #4]
 8013482:	480c      	ldr	r0, [pc, #48]	; (80134b4 <kscan_gpio_init_0+0x358>)
 8013484:	f7f0 ff72 	bl	800436c <log_2>
 8013488:	e020      	b.n	80134cc <kscan_gpio_init_0+0x370>
 801348a:	bf00      	nop
 801348c:	0801d7a0 	.word	0x0801d7a0
 8013490:	0801d6d0 	.word	0x0801d6d0
 8013494:	08021b58 	.word	0x08021b58
 8013498:	08021c9c 	.word	0x08021c9c
 801349c:	08021ba8 	.word	0x08021ba8
 80134a0:	20002210 	.word	0x20002210
 80134a4:	08012e51 	.word	0x08012e51
 80134a8:	08021b7c 	.word	0x08021b7c
 80134ac:	08021bd0 	.word	0x08021bd0
 80134b0:	08021c00 	.word	0x08021c00
 80134b4:	08021c24 	.word	0x08021c24
 80134b8:	9b06      	ldr	r3, [sp, #24]
 80134ba:	f8c3 b078 	str.w	fp, [r3, #120]	; 0x78
 80134be:	4905      	ldr	r1, [pc, #20]	; (80134d4 <kscan_gpio_init_0+0x378>)
 80134c0:	f103 0008 	add.w	r0, r3, #8
 80134c4:	f009 fd30 	bl	801cf28 <k_delayed_work_init>
 80134c8:	2300      	movs	r3, #0
 80134ca:	461c      	mov	r4, r3
 80134cc:	4620      	mov	r0, r4
 80134ce:	b009      	add	sp, #36	; 0x24
 80134d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134d4:	0801c7ab 	.word	0x0801c7ab

080134d8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
 80134d8:	b570      	push	{r4, r5, r6, lr}
 80134da:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 80134dc:	4b11      	ldr	r3, [pc, #68]	; (8013524 <z_sys_init_run_level+0x4c>)
 80134de:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 80134e2:	e000      	b.n	80134e6 <z_sys_init_run_level+0xe>
 80134e4:	3508      	adds	r5, #8
 80134e6:	1c73      	adds	r3, r6, #1
 80134e8:	4a0e      	ldr	r2, [pc, #56]	; (8013524 <z_sys_init_run_level+0x4c>)
 80134ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80134ee:	42ab      	cmp	r3, r5
 80134f0:	d917      	bls.n	8013522 <z_sys_init_run_level+0x4a>
		const struct device *dev = entry->dev;
 80134f2:	686c      	ldr	r4, [r5, #4]

		if (dev != NULL) {
			z_object_init(dev);
		}

		if ((entry->init(dev) != 0) && (dev != NULL)) {
 80134f4:	682b      	ldr	r3, [r5, #0]
 80134f6:	4620      	mov	r0, r4
 80134f8:	4798      	blx	r3
 80134fa:	2800      	cmp	r0, #0
 80134fc:	d0f2      	beq.n	80134e4 <z_sys_init_run_level+0xc>
 80134fe:	2c00      	cmp	r4, #0
 8013500:	d0f0      	beq.n	80134e4 <z_sys_init_run_level+0xc>
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
 8013502:	4909      	ldr	r1, [pc, #36]	; (8013528 <z_sys_init_run_level+0x50>)
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
 8013504:	4b09      	ldr	r3, [pc, #36]	; (801352c <z_sys_init_run_level+0x54>)
 8013506:	1ae4      	subs	r4, r4, r3
 8013508:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
 801350a:	0960      	lsrs	r0, r4, #5
 801350c:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
 8013510:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
 8013514:	2201      	movs	r2, #1
 8013516:	fa02 f404 	lsl.w	r4, r2, r4
 801351a:	431c      	orrs	r4, r3
 801351c:	f841 4020 	str.w	r4, [r1, r0, lsl #2]
}
 8013520:	e7e0      	b.n	80134e4 <z_sys_init_run_level+0xc>
		}
	}
}
 8013522:	bd70      	pop	{r4, r5, r6, pc}
 8013524:	08021d34 	.word	0x08021d34
 8013528:	20000678 	.word	0x20000678
 801352c:	200005a8 	.word	0x200005a8

08013530 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
 8013530:	4b08      	ldr	r3, [pc, #32]	; (8013554 <z_device_ready+0x24>)
 8013532:	1ac0      	subs	r0, r0, r3
 8013534:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
 8013536:	0942      	lsrs	r2, r0, #5
 8013538:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
 801353c:	4b06      	ldr	r3, [pc, #24]	; (8013558 <z_device_ready+0x28>)
 801353e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
 8013542:	2301      	movs	r3, #1
 8013544:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
 8013548:	4202      	tst	r2, r0
}
 801354a:	bf0c      	ite	eq
 801354c:	4618      	moveq	r0, r3
 801354e:	2000      	movne	r0, #0
 8013550:	4770      	bx	lr
 8013552:	bf00      	nop
 8013554:	200005a8 	.word	0x200005a8
 8013558:	20000678 	.word	0x20000678

0801355c <z_impl_device_get_binding>:
{
 801355c:	b538      	push	{r3, r4, r5, lr}
 801355e:	4605      	mov	r5, r0
	for (dev = __device_start; dev != __device_end; dev++) {
 8013560:	4c11      	ldr	r4, [pc, #68]	; (80135a8 <z_impl_device_get_binding+0x4c>)
 8013562:	e000      	b.n	8013566 <z_impl_device_get_binding+0xa>
 8013564:	3410      	adds	r4, #16
 8013566:	4b11      	ldr	r3, [pc, #68]	; (80135ac <z_impl_device_get_binding+0x50>)
 8013568:	429c      	cmp	r4, r3
 801356a:	d008      	beq.n	801357e <z_impl_device_get_binding+0x22>
		if (z_device_ready(dev) && (dev->name == name)) {
 801356c:	4620      	mov	r0, r4
 801356e:	f7ff ffdf 	bl	8013530 <z_device_ready>
 8013572:	2800      	cmp	r0, #0
 8013574:	d0f6      	beq.n	8013564 <z_impl_device_get_binding+0x8>
 8013576:	6823      	ldr	r3, [r4, #0]
 8013578:	42ab      	cmp	r3, r5
 801357a:	d1f3      	bne.n	8013564 <z_impl_device_get_binding+0x8>
 801357c:	e012      	b.n	80135a4 <z_impl_device_get_binding+0x48>
	for (dev = __device_start; dev != __device_end; dev++) {
 801357e:	4c0a      	ldr	r4, [pc, #40]	; (80135a8 <z_impl_device_get_binding+0x4c>)
 8013580:	e000      	b.n	8013584 <z_impl_device_get_binding+0x28>
 8013582:	3410      	adds	r4, #16
 8013584:	4b09      	ldr	r3, [pc, #36]	; (80135ac <z_impl_device_get_binding+0x50>)
 8013586:	429c      	cmp	r4, r3
 8013588:	d00b      	beq.n	80135a2 <z_impl_device_get_binding+0x46>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 801358a:	4620      	mov	r0, r4
 801358c:	f7ff ffd0 	bl	8013530 <z_device_ready>
 8013590:	2800      	cmp	r0, #0
 8013592:	d0f6      	beq.n	8013582 <z_impl_device_get_binding+0x26>
 8013594:	6821      	ldr	r1, [r4, #0]
 8013596:	4628      	mov	r0, r5
 8013598:	f004 fc32 	bl	8017e00 <strcmp>
 801359c:	2800      	cmp	r0, #0
 801359e:	d1f0      	bne.n	8013582 <z_impl_device_get_binding+0x26>
 80135a0:	e000      	b.n	80135a4 <z_impl_device_get_binding+0x48>
	return NULL;
 80135a2:	2400      	movs	r4, #0
}
 80135a4:	4620      	mov	r0, r4
 80135a6:	bd38      	pop	{r3, r4, r5, pc}
 80135a8:	200005a8 	.word	0x200005a8
 80135ac:	20000678 	.word	0x20000678

080135b0 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
 80135b0:	4b01      	ldr	r3, [pc, #4]	; (80135b8 <z_impl_z_errno+0x8>)
 80135b2:	6898      	ldr	r0, [r3, #8]
}
 80135b4:	3064      	adds	r0, #100	; 0x64
 80135b6:	4770      	bx	lr
 80135b8:	20002278 	.word	0x20002278

080135bc <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
 80135bc:	2804      	cmp	r0, #4
 80135be:	d80c      	bhi.n	80135da <reason_to_str+0x1e>
 80135c0:	e8df f000 	tbb	[pc, r0]
 80135c4:	07050d03 	.word	0x07050d03
 80135c8:	09          	.byte	0x09
 80135c9:	00          	.byte	0x00
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
 80135ca:	4806      	ldr	r0, [pc, #24]	; (80135e4 <reason_to_str+0x28>)
 80135cc:	4770      	bx	lr
		return "Stack overflow";
 80135ce:	4806      	ldr	r0, [pc, #24]	; (80135e8 <reason_to_str+0x2c>)
 80135d0:	4770      	bx	lr
		return "Kernel oops";
 80135d2:	4806      	ldr	r0, [pc, #24]	; (80135ec <reason_to_str+0x30>)
 80135d4:	4770      	bx	lr
		return "Kernel panic";
 80135d6:	4806      	ldr	r0, [pc, #24]	; (80135f0 <reason_to_str+0x34>)
 80135d8:	4770      	bx	lr
	default:
		return "Unknown error";
 80135da:	4806      	ldr	r0, [pc, #24]	; (80135f4 <reason_to_str+0x38>)
 80135dc:	4770      	bx	lr
		return "Unhandled interrupt";
 80135de:	4806      	ldr	r0, [pc, #24]	; (80135f8 <reason_to_str+0x3c>)
	}
}
 80135e0:	4770      	bx	lr
 80135e2:	bf00      	nop
 80135e4:	08021d9c 	.word	0x08021d9c
 80135e8:	08021d70 	.word	0x08021d70
 80135ec:	08021d80 	.word	0x08021d80
 80135f0:	08021d8c 	.word	0x08021d8c
 80135f4:	08021d4c 	.word	0x08021d4c
 80135f8:	08021d5c 	.word	0x08021d5c

080135fc <thread_name_get>:
{
 80135fc:	b508      	push	{r3, lr}
	const char *thread_name = k_thread_name_get(thread);
 80135fe:	f009 fbf6 	bl	801cdee <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
 8013602:	b120      	cbz	r0, 801360e <thread_name_get+0x12>
 8013604:	4603      	mov	r3, r0
 8013606:	7802      	ldrb	r2, [r0, #0]
 8013608:	b11a      	cbz	r2, 8013612 <thread_name_get+0x16>
}
 801360a:	4618      	mov	r0, r3
 801360c:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
 801360e:	4b02      	ldr	r3, [pc, #8]	; (8013618 <thread_name_get+0x1c>)
 8013610:	e7fb      	b.n	801360a <thread_name_get+0xe>
 8013612:	4b01      	ldr	r3, [pc, #4]	; (8013618 <thread_name_get+0x1c>)
	return thread_name;
 8013614:	e7f9      	b.n	801360a <thread_name_get+0xe>
 8013616:	bf00      	nop
 8013618:	08020084 	.word	0x08020084

0801361c <k_sys_fatal_error_handler>:
{
 801361c:	b510      	push	{r4, lr}
 801361e:	4604      	mov	r4, r0
	z_impl_log_panic();
 8013620:	f7f0 fde0 	bl	80041e4 <z_impl_log_panic>
	LOG_ERR("Halting system");
 8013624:	f04f 0100 	mov.w	r1, #0
 8013628:	2301      	movs	r3, #1
 801362a:	f363 0102 	bfi	r1, r3, #0, #3
 801362e:	f36f 01c5 	bfc	r1, #3, #3
 8013632:	4b06      	ldr	r3, [pc, #24]	; (801364c <k_sys_fatal_error_handler+0x30>)
 8013634:	4a06      	ldr	r2, [pc, #24]	; (8013650 <k_sys_fatal_error_handler+0x34>)
 8013636:	1a9b      	subs	r3, r3, r2
 8013638:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 801363c:	f363 118f 	bfi	r1, r3, #6, #10
 8013640:	4804      	ldr	r0, [pc, #16]	; (8013654 <k_sys_fatal_error_handler+0x38>)
 8013642:	f7f0 ff83 	bl	800454c <log_0>
	arch_system_halt(reason);
 8013646:	4620      	mov	r0, r4
 8013648:	f009 f8b4 	bl	801c7b4 <arch_system_halt>
 801364c:	0801d760 	.word	0x0801d760
 8013650:	0801d6d0 	.word	0x0801d6d0
 8013654:	08021dac 	.word	0x08021dac

08013658 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8013658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801365c:	b082      	sub	sp, #8
 801365e:	4605      	mov	r5, r0
 8013660:	460e      	mov	r6, r1
	__asm__ volatile(
 8013662:	f04f 0310 	mov.w	r3, #16
 8013666:	f3ef 8711 	mrs	r7, BASEPRI
 801366a:	f383 8811 	msr	BASEPRI, r3
 801366e:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
 8013672:	f000 fed7 	bl	8014424 <z_impl_k_current_get>
 8013676:	4604      	mov	r4, r0
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 8013678:	f04f 0800 	mov.w	r8, #0
 801367c:	2301      	movs	r3, #1
 801367e:	f363 0802 	bfi	r8, r3, #0, #3
 8013682:	f36f 08c5 	bfc	r8, #3, #3
 8013686:	4b28      	ldr	r3, [pc, #160]	; (8013728 <z_fatal_error+0xd0>)
 8013688:	4a28      	ldr	r2, [pc, #160]	; (801372c <z_fatal_error+0xd4>)
 801368a:	1a9b      	subs	r3, r3, r2
 801368c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8013690:	f363 188f 	bfi	r8, r3, #6, #10
 8013694:	4628      	mov	r0, r5
 8013696:	f7ff ff91 	bl	80135bc <reason_to_str>
 801369a:	4602      	mov	r2, r0
 801369c:	f8ad 8000 	strh.w	r8, [sp]
 80136a0:	2300      	movs	r3, #0
 80136a2:	4629      	mov	r1, r5
 80136a4:	4822      	ldr	r0, [pc, #136]	; (8013730 <z_fatal_error+0xd8>)
 80136a6:	f7f0 fd15 	bl	80040d4 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 80136aa:	b11e      	cbz	r6, 80136b4 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 80136ac:	69f3      	ldr	r3, [r6, #28]
 80136ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80136b2:	bb33      	cbnz	r3, 8013702 <z_fatal_error+0xaa>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 80136b4:	f04f 0800 	mov.w	r8, #0
 80136b8:	2301      	movs	r3, #1
 80136ba:	f363 0802 	bfi	r8, r3, #0, #3
 80136be:	f36f 08c5 	bfc	r8, #3, #3
 80136c2:	4b19      	ldr	r3, [pc, #100]	; (8013728 <z_fatal_error+0xd0>)
 80136c4:	4a19      	ldr	r2, [pc, #100]	; (801372c <z_fatal_error+0xd4>)
 80136c6:	1a9b      	subs	r3, r3, r2
 80136c8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80136cc:	f363 188f 	bfi	r8, r3, #6, #10
 80136d0:	4620      	mov	r0, r4
 80136d2:	f7ff ff93 	bl	80135fc <thread_name_get>
 80136d6:	f7f0 fbf9 	bl	8003ecc <log_strdup>
 80136da:	4602      	mov	r2, r0
 80136dc:	4643      	mov	r3, r8
 80136de:	4621      	mov	r1, r4
 80136e0:	4814      	ldr	r0, [pc, #80]	; (8013734 <z_fatal_error+0xdc>)
 80136e2:	f7f0 fe43 	bl	800436c <log_2>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 80136e6:	4631      	mov	r1, r6
 80136e8:	4628      	mov	r0, r5
 80136ea:	f7ff ff97 	bl	801361c <k_sys_fatal_error_handler>
	__asm__ volatile(
 80136ee:	f387 8811 	msr	BASEPRI, r7
 80136f2:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 80136f6:	4620      	mov	r0, r4
 80136f8:	f7f6 f80c 	bl	8009714 <z_impl_k_thread_abort>
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
 80136fc:	b002      	add	sp, #8
 80136fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Fault during interrupt handling\n");
 8013702:	f04f 0100 	mov.w	r1, #0
 8013706:	2301      	movs	r3, #1
 8013708:	f363 0102 	bfi	r1, r3, #0, #3
 801370c:	f36f 01c5 	bfc	r1, #3, #3
 8013710:	4b05      	ldr	r3, [pc, #20]	; (8013728 <z_fatal_error+0xd0>)
 8013712:	4a06      	ldr	r2, [pc, #24]	; (801372c <z_fatal_error+0xd4>)
 8013714:	1a9b      	subs	r3, r3, r2
 8013716:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 801371a:	f363 118f 	bfi	r1, r3, #6, #10
 801371e:	4806      	ldr	r0, [pc, #24]	; (8013738 <z_fatal_error+0xe0>)
 8013720:	f7f0 ff14 	bl	800454c <log_0>
 8013724:	e7c6      	b.n	80136b4 <z_fatal_error+0x5c>
 8013726:	bf00      	nop
 8013728:	0801d760 	.word	0x0801d760
 801372c:	0801d6d0 	.word	0x0801d6d0
 8013730:	08021dbc 	.word	0x08021dbc
 8013734:	08021e08 	.word	0x08021e08
 8013738:	08021de4 	.word	0x08021de4

0801373c <init_idle_thread>:

/* LCOV_EXCL_STOP */

#if defined(CONFIG_MULTITHREADING)
static void init_idle_thread(int i)
{
 801373c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801373e:	b087      	sub	sp, #28
	struct k_thread *thread = &z_idle_threads[i];
 8013740:	4e0f      	ldr	r6, [pc, #60]	; (8013780 <init_idle_thread+0x44>)
 8013742:	ebc0 1500 	rsb	r5, r0, r0, lsl #4
 8013746:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
	k_thread_stack_t *stack = z_idle_stacks[i];
 801374a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
 801374e:	2300      	movs	r3, #0
 8013750:	9305      	str	r3, [sp, #20]
 8013752:	2201      	movs	r2, #1
 8013754:	9204      	str	r2, [sp, #16]
 8013756:	220f      	movs	r2, #15
 8013758:	9203      	str	r2, [sp, #12]
 801375a:	9302      	str	r3, [sp, #8]
 801375c:	9301      	str	r3, [sp, #4]
 801375e:	9300      	str	r3, [sp, #0]
 8013760:	4b08      	ldr	r3, [pc, #32]	; (8013784 <init_idle_thread+0x48>)
 8013762:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8013766:	4908      	ldr	r1, [pc, #32]	; (8013788 <init_idle_thread+0x4c>)
 8013768:	eb01 1180 	add.w	r1, r1, r0, lsl #6
 801376c:	4628      	mov	r0, r5
 801376e:	f000 fedb 	bl	8014528 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8013772:	7b6b      	ldrb	r3, [r5, #13]
 8013774:	f023 0304 	bic.w	r3, r3, #4
 8013778:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
 801377a:	b007      	add	sp, #28
 801377c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801377e:	bf00      	nop
 8013780:	20001318 	.word	0x20001318
 8013784:	0801d261 	.word	0x0801d261
 8013788:	20004c68 	.word	0x20004c68

0801378c <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
#ifdef CONFIG_MULTITHREADING
static char *prepare_multithreading(void)
{
 801378c:	b570      	push	{r4, r5, r6, lr}
 801378e:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
 8013790:	f000 fdde 	bl	8014350 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
 8013794:	4d1d      	ldr	r5, [pc, #116]	; (801380c <prepare_multithreading+0x80>)
 8013796:	4b1e      	ldr	r3, [pc, #120]	; (8013810 <prepare_multithreading+0x84>)
 8013798:	621d      	str	r5, [r3, #32]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 801379a:	4b1e      	ldr	r3, [pc, #120]	; (8013814 <prepare_multithreading+0x88>)
 801379c:	9305      	str	r3, [sp, #20]
 801379e:	2301      	movs	r3, #1
 80137a0:	9304      	str	r3, [sp, #16]
 80137a2:	2400      	movs	r4, #0
 80137a4:	9403      	str	r4, [sp, #12]
 80137a6:	9402      	str	r4, [sp, #8]
 80137a8:	9401      	str	r4, [sp, #4]
 80137aa:	9400      	str	r4, [sp, #0]
 80137ac:	4b1a      	ldr	r3, [pc, #104]	; (8013818 <prepare_multithreading+0x8c>)
 80137ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80137b2:	491a      	ldr	r1, [pc, #104]	; (801381c <prepare_multithreading+0x90>)
 80137b4:	4628      	mov	r0, r5
 80137b6:	f000 feb7 	bl	8014528 <z_setup_new_thread>
 80137ba:	4606      	mov	r6, r0
 80137bc:	7b6b      	ldrb	r3, [r5, #13]
 80137be:	f023 0304 	bic.w	r3, r3, #4
 80137c2:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
 80137c4:	4628      	mov	r0, r5
 80137c6:	f009 fa15 	bl	801cbf4 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
 80137ca:	2c00      	cmp	r4, #0
 80137cc:	dd07      	ble.n	80137de <prepare_multithreading+0x52>
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 80137ce:	4b10      	ldr	r3, [pc, #64]	; (8013810 <prepare_multithreading+0x84>)
 80137d0:	f103 0218 	add.w	r2, r3, #24
 80137d4:	619a      	str	r2, [r3, #24]
	list->tail = (sys_dnode_t *)list;
 80137d6:	61da      	str	r2, [r3, #28]
	}

	initialize_timeouts();

	return stack_ptr;
}
 80137d8:	4630      	mov	r0, r6
 80137da:	b006      	add	sp, #24
 80137dc:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
 80137de:	4620      	mov	r0, r4
 80137e0:	f7ff ffac 	bl	801373c <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 80137e4:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 80137e8:	4a0d      	ldr	r2, [pc, #52]	; (8013820 <prepare_multithreading+0x94>)
 80137ea:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80137ee:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 80137f2:	4b07      	ldr	r3, [pc, #28]	; (8013810 <prepare_multithreading+0x84>)
 80137f4:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80137f8:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
 80137fa:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
 80137fc:	4a09      	ldr	r2, [pc, #36]	; (8013824 <prepare_multithreading+0x98>)
 80137fe:	eb02 22c4 	add.w	r2, r2, r4, lsl #11
 8013802:	f502 6200 	add.w	r2, r2, #2048	; 0x800
		_kernel.cpus[i].irq_stack =
 8013806:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
 8013808:	3401      	adds	r4, #1
 801380a:	e7de      	b.n	80137ca <prepare_multithreading+0x3e>
 801380c:	20001390 	.word	0x20001390
 8013810:	20002278 	.word	0x20002278
 8013814:	08021e20 	.word	0x08021e20
 8013818:	08013889 	.word	0x08013889
 801381c:	20004868 	.word	0x20004868
 8013820:	20001318 	.word	0x20001318
 8013824:	20004da8 	.word	0x20004da8

08013828 <switch_to_main_thread>:

static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
 8013828:	b508      	push	{r3, lr}
 801382a:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 801382c:	4a01      	ldr	r2, [pc, #4]	; (8013834 <switch_to_main_thread+0xc>)
 801382e:	4802      	ldr	r0, [pc, #8]	; (8013838 <switch_to_main_thread+0x10>)
 8013830:	f7f5 fae2 	bl	8008df8 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8013834:	08013889 	.word	0x08013889
 8013838:	20001390 	.word	0x20001390

0801383c <z_bss_zero>:
{
 801383c:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 801383e:	4803      	ldr	r0, [pc, #12]	; (801384c <z_bss_zero+0x10>)
 8013840:	4a03      	ldr	r2, [pc, #12]	; (8013850 <z_bss_zero+0x14>)
 8013842:	1a12      	subs	r2, r2, r0
 8013844:	2100      	movs	r1, #0
 8013846:	f004 fb3e 	bl	8017ec6 <memset>
}
 801384a:	bd08      	pop	{r3, pc}
 801384c:	20000a70 	.word	0x20000a70
 8013850:	20003504 	.word	0x20003504

08013854 <z_data_copy>:
{
 8013854:	b508      	push	{r3, lr}
		 __data_ram_end - __data_ram_start);
 8013856:	4806      	ldr	r0, [pc, #24]	; (8013870 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
 8013858:	4a06      	ldr	r2, [pc, #24]	; (8013874 <z_data_copy+0x20>)
 801385a:	1a12      	subs	r2, r2, r0
 801385c:	4906      	ldr	r1, [pc, #24]	; (8013878 <z_data_copy+0x24>)
 801385e:	f004 fb0d 	bl	8017e7c <memcpy>
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
 8013862:	4a06      	ldr	r2, [pc, #24]	; (801387c <z_data_copy+0x28>)
 8013864:	4906      	ldr	r1, [pc, #24]	; (8013880 <z_data_copy+0x2c>)
 8013866:	4807      	ldr	r0, [pc, #28]	; (8013884 <z_data_copy+0x30>)
 8013868:	f004 fb08 	bl	8017e7c <memcpy>
}
 801386c:	bd08      	pop	{r3, pc}
 801386e:	bf00      	nop
 8013870:	20000000 	.word	0x20000000
 8013874:	20000a70 	.word	0x20000a70
 8013878:	08021ecc 	.word	0x08021ecc
 801387c:	00000000 	.word	0x00000000
 8013880:	08021ecc 	.word	0x08021ecc
 8013884:	20000000 	.word	0x20000000

08013888 <bg_thread_main>:
{
 8013888:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 801388a:	4b0c      	ldr	r3, [pc, #48]	; (80138bc <bg_thread_main+0x34>)
 801388c:	2201      	movs	r2, #1
 801388e:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8013890:	2002      	movs	r0, #2
 8013892:	f7ff fe21 	bl	80134d8 <z_sys_init_run_level>
	printk("*** Booting Zephyr OS version %s %s ***\n",
 8013896:	4a0a      	ldr	r2, [pc, #40]	; (80138c0 <bg_thread_main+0x38>)
 8013898:	490a      	ldr	r1, [pc, #40]	; (80138c4 <bg_thread_main+0x3c>)
 801389a:	480b      	ldr	r0, [pc, #44]	; (80138c8 <bg_thread_main+0x40>)
 801389c:	f001 fea1 	bl	80155e2 <printk>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 80138a0:	2003      	movs	r0, #3
 80138a2:	f7ff fe19 	bl	80134d8 <z_sys_init_run_level>
	z_init_static_threads();
 80138a6:	f000 fe6f 	bl	8014588 <z_init_static_threads>
	main();
 80138aa:	f7ef fae3 	bl	8002e74 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 80138ae:	4a07      	ldr	r2, [pc, #28]	; (80138cc <bg_thread_main+0x44>)
 80138b0:	7b13      	ldrb	r3, [r2, #12]
 80138b2:	f023 0301 	bic.w	r3, r3, #1
 80138b6:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 80138b8:	bd08      	pop	{r3, pc}
 80138ba:	bf00      	nop
 80138bc:	20003500 	.word	0x20003500
 80138c0:	0801ec88 	.word	0x0801ec88
 80138c4:	08021e28 	.word	0x08021e28
 80138c8:	08021e30 	.word	0x08021e30
 80138cc:	20001390 	.word	0x20001390

080138d0 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
 80138d0:	b500      	push	{lr}
 80138d2:	b09f      	sub	sp, #124	; 0x7c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
 80138d4:	f7f0 fa40 	bl	8003d58 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 80138d8:	4b16      	ldr	r3, [pc, #88]	; (8013934 <z_cstart+0x64>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80138da:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 80138de:	4c16      	ldr	r4, [pc, #88]	; (8013938 <z_cstart+0x68>)
 80138e0:	6963      	ldr	r3, [r4, #20]
 80138e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80138e6:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80138e8:	23f0      	movs	r3, #240	; 0xf0
 80138ea:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 80138ee:	2500      	movs	r5, #0
 80138f0:	77e5      	strb	r5, [r4, #31]
 80138f2:	7625      	strb	r5, [r4, #24]
 80138f4:	7665      	strb	r5, [r4, #25]
 80138f6:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 80138f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80138fa:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80138fe:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8013900:	f7f5 fed8 	bl	80096b4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8013904:	f7f5 fa90 	bl	8008e28 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8013908:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801390c:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 801390e:	62e3      	str	r3, [r4, #44]	; 0x2c
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
 8013910:	2401      	movs	r4, #1
 8013912:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
 8013916:	f88d 400c 	strb.w	r4, [sp, #12]
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
 801391a:	4b08      	ldr	r3, [pc, #32]	; (801393c <z_cstart+0x6c>)
 801391c:	f8c3 d008 	str.w	sp, [r3, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8013920:	4628      	mov	r0, r5
 8013922:	f7ff fdd9 	bl	80134d8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 8013926:	4620      	mov	r0, r4
 8013928:	f7ff fdd6 	bl	80134d8 <z_sys_init_run_level>
	__stack_chk_guard = stack_guard;
	__stack_chk_guard <<= 8;
#endif	/* CONFIG_STACK_CANARIES */

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
 801392c:	f7ff ff2e 	bl	801378c <prepare_multithreading>
 8013930:	f7ff ff7a 	bl	8013828 <switch_to_main_thread>
 8013934:	200055a8 	.word	0x200055a8
 8013938:	e000ed00 	.word	0xe000ed00
 801393c:	20002278 	.word	0x20002278

08013940 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
 8013940:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
 8013942:	4c06      	ldr	r4, [pc, #24]	; (801395c <statics_init+0x1c>)
 8013944:	4b06      	ldr	r3, [pc, #24]	; (8013960 <statics_init+0x20>)
 8013946:	429c      	cmp	r4, r3
 8013948:	d206      	bcs.n	8013958 <statics_init+0x18>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 801394a:	68a2      	ldr	r2, [r4, #8]
 801394c:	6861      	ldr	r1, [r4, #4]
 801394e:	4620      	mov	r0, r4
 8013950:	f008 ff39 	bl	801c7c6 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
 8013954:	3414      	adds	r4, #20
 8013956:	e7f5      	b.n	8013944 <statics_init+0x4>
	}
	return 0;
}
 8013958:	2000      	movs	r0, #0
 801395a:	bd10      	pop	{r4, pc}
 801395c:	20000744 	.word	0x20000744
 8013960:	20000758 	.word	0x20000758

08013964 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
 8013964:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 8013966:	4c06      	ldr	r4, [pc, #24]	; (8013980 <init_mem_slab_module+0x1c>)
	int rc = 0;
 8013968:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 801396a:	4b06      	ldr	r3, [pc, #24]	; (8013984 <init_mem_slab_module+0x20>)
 801396c:	429c      	cmp	r4, r3
 801396e:	d206      	bcs.n	801397e <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
 8013970:	4620      	mov	r0, r4
 8013972:	f008 ffae 	bl	801c8d2 <create_free_list>
		if (rc < 0) {
 8013976:	2800      	cmp	r0, #0
 8013978:	db01      	blt.n	801397e <init_mem_slab_module+0x1a>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 801397a:	341c      	adds	r4, #28
 801397c:	e7f5      	b.n	801396a <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
 801397e:	bd10      	pop	{r4, pc}
 8013980:	200006f0 	.word	0x200006f0
 8013984:	20000744 	.word	0x20000744

08013988 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
 8013988:	b5d0      	push	{r4, r6, r7, lr}
 801398a:	b082      	sub	sp, #8
 801398c:	460c      	mov	r4, r1
 801398e:	461f      	mov	r7, r3
	__asm__ volatile(
 8013990:	f04f 0310 	mov.w	r3, #16
 8013994:	f3ef 8111 	mrs	r1, BASEPRI
 8013998:	f383 8811 	msr	BASEPRI, r3
 801399c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
 80139a0:	6943      	ldr	r3, [r0, #20]
 80139a2:	b16b      	cbz	r3, 80139c0 <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
 80139a4:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
 80139a6:	6943      	ldr	r3, [r0, #20]
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	6143      	str	r3, [r0, #20]
		slab->num_used++;
 80139ac:	6983      	ldr	r3, [r0, #24]
 80139ae:	3301      	adds	r3, #1
 80139b0:	6183      	str	r3, [r0, #24]
		result = 0;
 80139b2:	2000      	movs	r0, #0
	__asm__ volatile(
 80139b4:	f381 8811 	msr	BASEPRI, r1
 80139b8:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	return result;
}
 80139bc:	b002      	add	sp, #8
 80139be:	bdd0      	pop	{r4, r6, r7, pc}
 80139c0:	4616      	mov	r6, r2
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 80139c2:	ea56 0307 	orrs.w	r3, r6, r7
 80139c6:	d104      	bne.n	80139d2 <k_mem_slab_alloc+0x4a>
		*mem = NULL;
 80139c8:	2300      	movs	r3, #0
 80139ca:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
 80139cc:	f06f 000b 	mvn.w	r0, #11
 80139d0:	e7f0      	b.n	80139b4 <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
 80139d2:	e9cd 6700 	strd	r6, r7, [sp]
 80139d6:	4602      	mov	r2, r0
 80139d8:	4804      	ldr	r0, [pc, #16]	; (80139ec <k_mem_slab_alloc+0x64>)
 80139da:	f000 fc4d 	bl	8014278 <z_pend_curr>
		if (result == 0) {
 80139de:	2800      	cmp	r0, #0
 80139e0:	d1ec      	bne.n	80139bc <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
 80139e2:	4b03      	ldr	r3, [pc, #12]	; (80139f0 <k_mem_slab_alloc+0x68>)
 80139e4:	689b      	ldr	r3, [r3, #8]
 80139e6:	695b      	ldr	r3, [r3, #20]
 80139e8:	6023      	str	r3, [r4, #0]
		return result;
 80139ea:	e7e7      	b.n	80139bc <k_mem_slab_alloc+0x34>
 80139ec:	20002278 	.word	0x20002278
 80139f0:	20002278 	.word	0x20002278

080139f4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
 80139f4:	b570      	push	{r4, r5, r6, lr}
 80139f6:	4604      	mov	r4, r0
 80139f8:	460d      	mov	r5, r1
	__asm__ volatile(
 80139fa:	f04f 0310 	mov.w	r3, #16
 80139fe:	f3ef 8611 	mrs	r6, BASEPRI
 8013a02:	f383 8811 	msr	BASEPRI, r3
 8013a06:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
 8013a0a:	f009 f983 	bl	801cd14 <z_unpend_first_thread>

	if (pending_thread != NULL) {
 8013a0e:	b150      	cbz	r0, 8013a26 <k_mem_slab_free+0x32>
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
 8013a10:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8013a12:	2100      	movs	r1, #0
 8013a14:	6701      	str	r1, [r0, #112]	; 0x70
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 8013a16:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
 8013a18:	f009 f8ec 	bl	801cbf4 <z_ready_thread>
		z_reschedule(&lock, key);
 8013a1c:	4631      	mov	r1, r6
 8013a1e:	4808      	ldr	r0, [pc, #32]	; (8013a40 <k_mem_slab_free+0x4c>)
 8013a20:	f000 fa1e 	bl	8013e60 <z_reschedule>
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
 8013a24:	bd70      	pop	{r4, r5, r6, pc}
		**(char ***)mem = slab->free_list;
 8013a26:	682b      	ldr	r3, [r5, #0]
 8013a28:	6962      	ldr	r2, [r4, #20]
 8013a2a:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
 8013a2c:	682b      	ldr	r3, [r5, #0]
 8013a2e:	6163      	str	r3, [r4, #20]
		slab->num_used--;
 8013a30:	69a3      	ldr	r3, [r4, #24]
 8013a32:	3b01      	subs	r3, #1
 8013a34:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
 8013a36:	f386 8811 	msr	BASEPRI, r6
 8013a3a:	f3bf 8f6f 	isb	sy
}
 8013a3e:	e7f1      	b.n	8013a24 <k_mem_slab_free+0x30>
 8013a40:	20002278 	.word	0x20002278

08013a44 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
 8013a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a48:	b082      	sub	sp, #8
 8013a4a:	4604      	mov	r4, r0
 8013a4c:	460d      	mov	r5, r1
 8013a4e:	4610      	mov	r0, r2
 8013a50:	4619      	mov	r1, r3

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
 8013a52:	f104 0708 	add.w	r7, r4, #8
	__asm__ volatile(
 8013a56:	f04f 0310 	mov.w	r3, #16
 8013a5a:	f3ef 8611 	mrs	r6, BASEPRI
 8013a5e:	f383 8811 	msr	BASEPRI, r3
 8013a62:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs < msgq->max_msgs) {
 8013a66:	6a22      	ldr	r2, [r4, #32]
 8013a68:	68e3      	ldr	r3, [r4, #12]
 8013a6a:	429a      	cmp	r2, r3
 8013a6c:	d30b      	bcc.n	8013a86 <z_impl_k_msgq_put+0x42>
				msgq->write_ptr = msgq->buffer_start;
			}
			msgq->used_msgs++;
		}
		result = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8013a6e:	ea50 0301 	orrs.w	r3, r0, r1
 8013a72:	d132      	bne.n	8013ada <z_impl_k_msgq_put+0x96>
		/* don't wait for message space to become available */
		result = -ENOMSG;
 8013a74:	f06f 004f 	mvn.w	r0, #79	; 0x4f
	__asm__ volatile(
 8013a78:	f386 8811 	msr	BASEPRI, r6
 8013a7c:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 8013a80:	b002      	add	sp, #8
 8013a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 8013a86:	4620      	mov	r0, r4
 8013a88:	f009 f944 	bl	801cd14 <z_unpend_first_thread>
		if (pending_thread != NULL) {
 8013a8c:	4680      	mov	r8, r0
 8013a8e:	b180      	cbz	r0, 8013ab2 <z_impl_k_msgq_put+0x6e>
			(void)memcpy(pending_thread->base.swap_data, data,
 8013a90:	68a2      	ldr	r2, [r4, #8]
 8013a92:	4629      	mov	r1, r5
 8013a94:	6940      	ldr	r0, [r0, #20]
 8013a96:	f004 f9f1 	bl	8017e7c <memcpy>
 8013a9a:	2400      	movs	r4, #0
 8013a9c:	f8c8 4070 	str.w	r4, [r8, #112]	; 0x70
			z_ready_thread(pending_thread);
 8013aa0:	4640      	mov	r0, r8
 8013aa2:	f009 f8a7 	bl	801cbf4 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
 8013aa6:	4631      	mov	r1, r6
 8013aa8:	4638      	mov	r0, r7
 8013aaa:	f000 f9d9 	bl	8013e60 <z_reschedule>
			return 0;
 8013aae:	4620      	mov	r0, r4
 8013ab0:	e7e6      	b.n	8013a80 <z_impl_k_msgq_put+0x3c>
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
 8013ab2:	68a2      	ldr	r2, [r4, #8]
 8013ab4:	4629      	mov	r1, r5
 8013ab6:	69e0      	ldr	r0, [r4, #28]
 8013ab8:	f004 f9e0 	bl	8017e7c <memcpy>
			msgq->write_ptr += msgq->msg_size;
 8013abc:	68a2      	ldr	r2, [r4, #8]
 8013abe:	69e3      	ldr	r3, [r4, #28]
 8013ac0:	4413      	add	r3, r2
 8013ac2:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
 8013ac4:	6962      	ldr	r2, [r4, #20]
 8013ac6:	4293      	cmp	r3, r2
 8013ac8:	d004      	beq.n	8013ad4 <z_impl_k_msgq_put+0x90>
			msgq->used_msgs++;
 8013aca:	6a23      	ldr	r3, [r4, #32]
 8013acc:	3301      	adds	r3, #1
 8013ace:	6223      	str	r3, [r4, #32]
		result = 0;
 8013ad0:	2000      	movs	r0, #0
 8013ad2:	e7d1      	b.n	8013a78 <z_impl_k_msgq_put+0x34>
				msgq->write_ptr = msgq->buffer_start;
 8013ad4:	6923      	ldr	r3, [r4, #16]
 8013ad6:	61e3      	str	r3, [r4, #28]
 8013ad8:	e7f7      	b.n	8013aca <z_impl_k_msgq_put+0x86>
		_current->base.swap_data = (void *) data;
 8013ada:	4b05      	ldr	r3, [pc, #20]	; (8013af0 <z_impl_k_msgq_put+0xac>)
 8013adc:	689b      	ldr	r3, [r3, #8]
 8013ade:	615d      	str	r5, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 8013ae0:	e9cd 0100 	strd	r0, r1, [sp]
 8013ae4:	4622      	mov	r2, r4
 8013ae6:	4631      	mov	r1, r6
 8013ae8:	4638      	mov	r0, r7
 8013aea:	f000 fbc5 	bl	8014278 <z_pend_curr>
 8013aee:	e7c7      	b.n	8013a80 <z_impl_k_msgq_put+0x3c>
 8013af0:	20002278 	.word	0x20002278

08013af4 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
 8013af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013af8:	b082      	sub	sp, #8
 8013afa:	4604      	mov	r4, r0
 8013afc:	4608      	mov	r0, r1
 8013afe:	461f      	mov	r7, r3

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
 8013b00:	f104 0808 	add.w	r8, r4, #8
	__asm__ volatile(
 8013b04:	f04f 0310 	mov.w	r3, #16
 8013b08:	f3ef 8511 	mrs	r5, BASEPRI
 8013b0c:	f383 8811 	msr	BASEPRI, r3
 8013b10:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs > 0) {
 8013b14:	6a23      	ldr	r3, [r4, #32]
 8013b16:	b963      	cbnz	r3, 8013b32 <z_impl_k_msgq_get+0x3e>
 8013b18:	4616      	mov	r6, r2
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
			return 0;
		}
		result = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8013b1a:	ea56 0307 	orrs.w	r3, r6, r7
 8013b1e:	d13d      	bne.n	8013b9c <z_impl_k_msgq_get+0xa8>
		/* don't wait for a message to become available */
		result = -ENOMSG;
 8013b20:	f06f 004f 	mvn.w	r0, #79	; 0x4f
	__asm__ volatile(
 8013b24:	f385 8811 	msr	BASEPRI, r5
 8013b28:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 8013b2c:	b002      	add	sp, #8
 8013b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
 8013b32:	68a2      	ldr	r2, [r4, #8]
 8013b34:	69a1      	ldr	r1, [r4, #24]
 8013b36:	f004 f9a1 	bl	8017e7c <memcpy>
		msgq->read_ptr += msgq->msg_size;
 8013b3a:	68a2      	ldr	r2, [r4, #8]
 8013b3c:	69a3      	ldr	r3, [r4, #24]
 8013b3e:	4413      	add	r3, r2
 8013b40:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
 8013b42:	6962      	ldr	r2, [r4, #20]
 8013b44:	4293      	cmp	r3, r2
 8013b46:	d009      	beq.n	8013b5c <z_impl_k_msgq_get+0x68>
		msgq->used_msgs--;
 8013b48:	6a23      	ldr	r3, [r4, #32]
 8013b4a:	3b01      	subs	r3, #1
 8013b4c:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 8013b4e:	4620      	mov	r0, r4
 8013b50:	f009 f8e0 	bl	801cd14 <z_unpend_first_thread>
		if (pending_thread != NULL) {
 8013b54:	4606      	mov	r6, r0
 8013b56:	b920      	cbnz	r0, 8013b62 <z_impl_k_msgq_get+0x6e>
		result = 0;
 8013b58:	2000      	movs	r0, #0
 8013b5a:	e7e3      	b.n	8013b24 <z_impl_k_msgq_get+0x30>
			msgq->read_ptr = msgq->buffer_start;
 8013b5c:	6923      	ldr	r3, [r4, #16]
 8013b5e:	61a3      	str	r3, [r4, #24]
 8013b60:	e7f2      	b.n	8013b48 <z_impl_k_msgq_get+0x54>
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
 8013b62:	68a2      	ldr	r2, [r4, #8]
 8013b64:	6941      	ldr	r1, [r0, #20]
 8013b66:	69e0      	ldr	r0, [r4, #28]
 8013b68:	f004 f988 	bl	8017e7c <memcpy>
			msgq->write_ptr += msgq->msg_size;
 8013b6c:	68a2      	ldr	r2, [r4, #8]
 8013b6e:	69e3      	ldr	r3, [r4, #28]
 8013b70:	4413      	add	r3, r2
 8013b72:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
 8013b74:	6962      	ldr	r2, [r4, #20]
 8013b76:	4293      	cmp	r3, r2
 8013b78:	d00d      	beq.n	8013b96 <z_impl_k_msgq_get+0xa2>
			msgq->used_msgs++;
 8013b7a:	6a23      	ldr	r3, [r4, #32]
 8013b7c:	3301      	adds	r3, #1
 8013b7e:	6223      	str	r3, [r4, #32]
 8013b80:	2400      	movs	r4, #0
 8013b82:	6734      	str	r4, [r6, #112]	; 0x70
			z_ready_thread(pending_thread);
 8013b84:	4630      	mov	r0, r6
 8013b86:	f009 f835 	bl	801cbf4 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
 8013b8a:	4629      	mov	r1, r5
 8013b8c:	4640      	mov	r0, r8
 8013b8e:	f000 f967 	bl	8013e60 <z_reschedule>
			return 0;
 8013b92:	4620      	mov	r0, r4
 8013b94:	e7ca      	b.n	8013b2c <z_impl_k_msgq_get+0x38>
				msgq->write_ptr = msgq->buffer_start;
 8013b96:	6923      	ldr	r3, [r4, #16]
 8013b98:	61e3      	str	r3, [r4, #28]
 8013b9a:	e7ee      	b.n	8013b7a <z_impl_k_msgq_get+0x86>
		_current->base.swap_data = data;
 8013b9c:	4b05      	ldr	r3, [pc, #20]	; (8013bb4 <z_impl_k_msgq_get+0xc0>)
 8013b9e:	689b      	ldr	r3, [r3, #8]
 8013ba0:	6159      	str	r1, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 8013ba2:	e9cd 6700 	strd	r6, r7, [sp]
 8013ba6:	4622      	mov	r2, r4
 8013ba8:	4629      	mov	r1, r5
 8013baa:	4640      	mov	r0, r8
 8013bac:	f000 fb64 	bl	8014278 <z_pend_curr>
 8013bb0:	e7bc      	b.n	8013b2c <z_impl_k_msgq_get+0x38>
 8013bb2:	bf00      	nop
 8013bb4:	20002278 	.word	0x20002278

08013bb8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 8013bb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013bbc:	b083      	sub	sp, #12
 8013bbe:	4604      	mov	r4, r0
 8013bc0:	461d      	mov	r5, r3
	__asm__ volatile(
 8013bc2:	f04f 0310 	mov.w	r3, #16
 8013bc6:	f3ef 8711 	mrs	r7, BASEPRI
 8013bca:	f383 8811 	msr	BASEPRI, r3
 8013bce:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 8013bd2:	68c1      	ldr	r1, [r0, #12]
 8013bd4:	b999      	cbnz	r1, 8013bfe <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
 8013bd6:	2900      	cmp	r1, #0
 8013bd8:	d14f      	bne.n	8013c7a <z_impl_k_mutex_lock+0xc2>
 8013bda:	4b3a      	ldr	r3, [pc, #232]	; (8013cc4 <z_impl_k_mutex_lock+0x10c>)
 8013bdc:	689b      	ldr	r3, [r3, #8]
 8013bde:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 8013be2:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
 8013be4:	3101      	adds	r1, #1
 8013be6:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
 8013be8:	4b36      	ldr	r3, [pc, #216]	; (8013cc4 <z_impl_k_mutex_lock+0x10c>)
 8013bea:	689b      	ldr	r3, [r3, #8]
 8013bec:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 8013bee:	f387 8811 	msr	BASEPRI, r7
 8013bf2:	f3bf 8f6f 	isb	sy
			mutex->owner_orig_prio);

		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
 8013bf6:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
 8013bf8:	b003      	add	sp, #12
 8013bfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013bfe:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 8013c00:	6882      	ldr	r2, [r0, #8]
 8013c02:	4b30      	ldr	r3, [pc, #192]	; (8013cc4 <z_impl_k_mutex_lock+0x10c>)
 8013c04:	689b      	ldr	r3, [r3, #8]
 8013c06:	429a      	cmp	r2, r3
 8013c08:	d0e5      	beq.n	8013bd6 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 8013c0a:	ea55 0106 	orrs.w	r1, r5, r6
 8013c0e:	bf0c      	ite	eq
 8013c10:	f04f 0801 	moveq.w	r8, #1
 8013c14:	f04f 0800 	movne.w	r8, #0
 8013c18:	d031      	beq.n	8013c7e <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
 8013c1a:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
 8013c1e:	4649      	mov	r1, r9
 8013c20:	f993 000e 	ldrsb.w	r0, [r3, #14]
 8013c24:	f008 fe7a 	bl	801c91c <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 8013c28:	4581      	cmp	r9, r0
 8013c2a:	dc2f      	bgt.n	8013c8c <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
 8013c2c:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 8013c30:	9600      	str	r6, [sp, #0]
 8013c32:	9501      	str	r5, [sp, #4]
 8013c34:	4622      	mov	r2, r4
 8013c36:	4639      	mov	r1, r7
 8013c38:	4823      	ldr	r0, [pc, #140]	; (8013cc8 <z_impl_k_mutex_lock+0x110>)
 8013c3a:	f000 fb1d 	bl	8014278 <z_pend_curr>
	if (got_mutex == 0) {
 8013c3e:	2800      	cmp	r0, #0
 8013c40:	d0da      	beq.n	8013bf8 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
 8013c42:	f04f 0310 	mov.w	r3, #16
 8013c46:	f3ef 8511 	mrs	r5, BASEPRI
 8013c4a:	f383 8811 	msr	BASEPRI, r3
 8013c4e:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 8013c52:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8013c54:	429c      	cmp	r4, r3
 8013c56:	d01f      	beq.n	8013c98 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 8013c58:	b1f3      	cbz	r3, 8013c98 <z_impl_k_mutex_lock+0xe0>
 8013c5a:	6921      	ldr	r1, [r4, #16]
 8013c5c:	f993 000e 	ldrsb.w	r0, [r3, #14]
 8013c60:	f008 fe5c 	bl	801c91c <new_prio_for_inheritance>
 8013c64:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 8013c66:	4620      	mov	r0, r4
 8013c68:	f008 fe61 	bl	801c92e <adjust_owner_prio>
 8013c6c:	b9b0      	cbnz	r0, 8013c9c <z_impl_k_mutex_lock+0xe4>
 8013c6e:	f1b9 0f00 	cmp.w	r9, #0
 8013c72:	d015      	beq.n	8013ca0 <z_impl_k_mutex_lock+0xe8>
 8013c74:	f04f 0801 	mov.w	r8, #1
 8013c78:	e012      	b.n	8013ca0 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
 8013c7a:	6923      	ldr	r3, [r4, #16]
 8013c7c:	e7b1      	b.n	8013be2 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
 8013c7e:	f387 8811 	msr	BASEPRI, r7
 8013c82:	f3bf 8f6f 	isb	sy
		return -EBUSY;
 8013c86:	f06f 000f 	mvn.w	r0, #15
 8013c8a:	e7b5      	b.n	8013bf8 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
 8013c8c:	4601      	mov	r1, r0
 8013c8e:	4620      	mov	r0, r4
 8013c90:	f008 fe4d 	bl	801c92e <adjust_owner_prio>
 8013c94:	4681      	mov	r9, r0
 8013c96:	e7cb      	b.n	8013c30 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 8013c98:	6921      	ldr	r1, [r4, #16]
 8013c9a:	e7e4      	b.n	8013c66 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 8013c9c:	f04f 0801 	mov.w	r8, #1
	if (resched) {
 8013ca0:	f1b8 0f00 	cmp.w	r8, #0
 8013ca4:	d106      	bne.n	8013cb4 <z_impl_k_mutex_lock+0xfc>
 8013ca6:	f385 8811 	msr	BASEPRI, r5
 8013caa:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
 8013cae:	f06f 000a 	mvn.w	r0, #10
 8013cb2:	e7a1      	b.n	8013bf8 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
 8013cb4:	4629      	mov	r1, r5
 8013cb6:	4804      	ldr	r0, [pc, #16]	; (8013cc8 <z_impl_k_mutex_lock+0x110>)
 8013cb8:	f000 f8d2 	bl	8013e60 <z_reschedule>
	return -EAGAIN;
 8013cbc:	f06f 000a 	mvn.w	r0, #10
 8013cc0:	e79a      	b.n	8013bf8 <z_impl_k_mutex_lock+0x40>
 8013cc2:	bf00      	nop
 8013cc4:	20002278 	.word	0x20002278
 8013cc8:	20002278 	.word	0x20002278

08013ccc <z_impl_k_mutex_unlock>:
{
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
 8013ccc:	6882      	ldr	r2, [r0, #8]
 8013cce:	2a00      	cmp	r2, #0
 8013cd0:	d034      	beq.n	8013d3c <z_impl_k_mutex_unlock+0x70>
{
 8013cd2:	b538      	push	{r3, r4, r5, lr}
 8013cd4:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 8013cd6:	4b1c      	ldr	r3, [pc, #112]	; (8013d48 <z_impl_k_mutex_unlock+0x7c>)
 8013cd8:	689b      	ldr	r3, [r3, #8]
 8013cda:	429a      	cmp	r2, r3
 8013cdc:	d131      	bne.n	8013d42 <z_impl_k_mutex_unlock+0x76>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
 8013cde:	7bda      	ldrb	r2, [r3, #15]
 8013ce0:	3a01      	subs	r2, #1
 8013ce2:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
 8013ce4:	68c3      	ldr	r3, [r0, #12]
 8013ce6:	2b01      	cmp	r3, #1
 8013ce8:	d005      	beq.n	8013cf6 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
 8013cea:	3b01      	subs	r3, #1
 8013cec:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
 8013cee:	f000 f92b 	bl	8013f48 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
 8013cf2:	2000      	movs	r0, #0
}
 8013cf4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 8013cf6:	f04f 0310 	mov.w	r3, #16
 8013cfa:	f3ef 8511 	mrs	r5, BASEPRI
 8013cfe:	f383 8811 	msr	BASEPRI, r3
 8013d02:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 8013d06:	6901      	ldr	r1, [r0, #16]
 8013d08:	f008 fe11 	bl	801c92e <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 8013d0c:	4620      	mov	r0, r4
 8013d0e:	f009 f801 	bl	801cd14 <z_unpend_first_thread>
	mutex->owner = new_owner;
 8013d12:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 8013d14:	b158      	cbz	r0, 8013d2e <z_impl_k_mutex_unlock+0x62>
		mutex->owner_orig_prio = new_owner->base.prio;
 8013d16:	f990 300e 	ldrsb.w	r3, [r0, #14]
 8013d1a:	6123      	str	r3, [r4, #16]
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	6703      	str	r3, [r0, #112]	; 0x70
		z_ready_thread(new_owner);
 8013d20:	f008 ff68 	bl	801cbf4 <z_ready_thread>
		z_reschedule(&lock, key);
 8013d24:	4629      	mov	r1, r5
 8013d26:	4809      	ldr	r0, [pc, #36]	; (8013d4c <z_impl_k_mutex_unlock+0x80>)
 8013d28:	f000 f89a 	bl	8013e60 <z_reschedule>
 8013d2c:	e7df      	b.n	8013cee <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
 8013d2e:	2300      	movs	r3, #0
 8013d30:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
 8013d32:	f385 8811 	msr	BASEPRI, r5
 8013d36:	f3bf 8f6f 	isb	sy
 8013d3a:	e7d8      	b.n	8013cee <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
 8013d3c:	f06f 0015 	mvn.w	r0, #21
}
 8013d40:	4770      	bx	lr
		return -EPERM;
 8013d42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013d46:	e7d5      	b.n	8013cf4 <z_impl_k_mutex_unlock+0x28>
 8013d48:	20002278 	.word	0x20002278
 8013d4c:	20002278 	.word	0x20002278

08013d50 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
 8013d50:	b5d0      	push	{r4, r6, r7, lr}
 8013d52:	b082      	sub	sp, #8
 8013d54:	4601      	mov	r1, r0
 8013d56:	4616      	mov	r6, r2
 8013d58:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
 8013d5a:	4602      	mov	r2, r0
	__asm__ volatile(
 8013d5c:	f04f 0310 	mov.w	r3, #16
 8013d60:	f3ef 8411 	mrs	r4, BASEPRI
 8013d64:	f383 8811 	msr	BASEPRI, r3
 8013d68:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
 8013d6c:	f852 0b08 	ldr.w	r0, [r2], #8
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
 8013d70:	b188      	cbz	r0, 8013d96 <z_impl_k_queue_get+0x46>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 8013d72:	6803      	ldr	r3, [r0, #0]
 8013d74:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
 8013d78:	600b      	str	r3, [r1, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
 8013d7a:	684a      	ldr	r2, [r1, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
 8013d7c:	4290      	cmp	r0, r2
 8013d7e:	d008      	beq.n	8013d92 <z_impl_k_queue_get+0x42>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
 8013d80:	2101      	movs	r1, #1
 8013d82:	f008 fe58 	bl	801ca36 <z_queue_node_peek>
	__asm__ volatile(
 8013d86:	f384 8811 	msr	BASEPRI, r4
 8013d8a:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
 8013d8e:	b002      	add	sp, #8
 8013d90:	bdd0      	pop	{r4, r6, r7, pc}
	list->tail = node;
 8013d92:	604b      	str	r3, [r1, #4]
}
 8013d94:	e7f4      	b.n	8013d80 <z_impl_k_queue_get+0x30>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8013d96:	ea56 0307 	orrs.w	r3, r6, r7
 8013d9a:	d00a      	beq.n	8013db2 <z_impl_k_queue_get+0x62>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
 8013d9c:	e9cd 6700 	strd	r6, r7, [sp]
 8013da0:	4621      	mov	r1, r4
 8013da2:	4610      	mov	r0, r2
 8013da4:	f000 fa68 	bl	8014278 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
 8013da8:	b948      	cbnz	r0, 8013dbe <z_impl_k_queue_get+0x6e>
 8013daa:	4b06      	ldr	r3, [pc, #24]	; (8013dc4 <z_impl_k_queue_get+0x74>)
 8013dac:	689b      	ldr	r3, [r3, #8]
 8013dae:	6958      	ldr	r0, [r3, #20]
 8013db0:	e7ed      	b.n	8013d8e <z_impl_k_queue_get+0x3e>
 8013db2:	f384 8811 	msr	BASEPRI, r4
 8013db6:	f3bf 8f6f 	isb	sy
		return NULL;
 8013dba:	2000      	movs	r0, #0
 8013dbc:	e7e7      	b.n	8013d8e <z_impl_k_queue_get+0x3e>
	return (ret != 0) ? NULL : _current->base.swap_data;
 8013dbe:	2000      	movs	r0, #0
 8013dc0:	e7e5      	b.n	8013d8e <z_impl_k_queue_get+0x3e>
 8013dc2:	bf00      	nop
 8013dc4:	20002278 	.word	0x20002278

08013dc8 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
 8013dc8:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8013dca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013dce:	bf08      	it	eq
 8013dd0:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8013dd4:	d100      	bne.n	8013dd8 <add_thread_timeout+0x10>
#ifdef CONFIG_LEGACY_TIMEOUT_API
		timeout = _TICK_ALIGN + k_ms_to_ticks_ceil32(timeout);
#endif
		z_add_thread_timeout(thread, timeout);
	}
}
 8013dd6:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, k_timeout_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
 8013dd8:	4902      	ldr	r1, [pc, #8]	; (8013de4 <add_thread_timeout+0x1c>)
 8013dda:	3018      	adds	r0, #24
 8013ddc:	f000 fcdc 	bl	8014798 <z_add_timeout>
 8013de0:	e7f9      	b.n	8013dd6 <add_thread_timeout+0xe>
 8013de2:	bf00      	nop
 8013de4:	0801cc21 	.word	0x0801cc21

08013de8 <z_reset_time_slice>:
{
 8013de8:	b508      	push	{r3, lr}
	if (slice_time != 0) {
 8013dea:	4b08      	ldr	r3, [pc, #32]	; (8013e0c <z_reset_time_slice+0x24>)
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	b903      	cbnz	r3, 8013df2 <z_reset_time_slice+0xa>
}
 8013df0:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
 8013df2:	f7f4 fa2f 	bl	8008254 <z_clock_elapsed>
 8013df6:	4603      	mov	r3, r0
 8013df8:	4a04      	ldr	r2, [pc, #16]	; (8013e0c <z_reset_time_slice+0x24>)
 8013dfa:	6810      	ldr	r0, [r2, #0]
 8013dfc:	4403      	add	r3, r0
 8013dfe:	4a04      	ldr	r2, [pc, #16]	; (8013e10 <z_reset_time_slice+0x28>)
 8013e00:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
 8013e02:	2100      	movs	r1, #0
 8013e04:	f009 f8f9 	bl	801cffa <z_set_timeout_expiry>
}
 8013e08:	e7f2      	b.n	8013df0 <z_reset_time_slice+0x8>
 8013e0a:	bf00      	nop
 8013e0c:	200022ac 	.word	0x200022ac
 8013e10:	20002278 	.word	0x20002278

08013e14 <k_sched_time_slice_set>:
{
 8013e14:	b570      	push	{r4, r5, r6, lr}
 8013e16:	4604      	mov	r4, r0
 8013e18:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
 8013e1a:	2300      	movs	r3, #0
	__asm__ volatile(
 8013e1c:	f04f 0210 	mov.w	r2, #16
 8013e20:	f3ef 8511 	mrs	r5, BASEPRI
 8013e24:	f382 8811 	msr	BASEPRI, r2
 8013e28:	f3bf 8f6f 	isb	sy
 8013e2c:	b98b      	cbnz	r3, 8013e52 <k_sched_time_slice_set+0x3e>
		_current_cpu->slice_ticks = 0;
 8013e2e:	4b09      	ldr	r3, [pc, #36]	; (8013e54 <k_sched_time_slice_set+0x40>)
 8013e30:	2200      	movs	r2, #0
 8013e32:	611a      	str	r2, [r3, #16]
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
 8013e34:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8013e38:	005b      	lsls	r3, r3, #1
		slice_time = k_ms_to_ticks_ceil32(slice);
 8013e3a:	4a07      	ldr	r2, [pc, #28]	; (8013e58 <k_sched_time_slice_set+0x44>)
 8013e3c:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
 8013e3e:	4b07      	ldr	r3, [pc, #28]	; (8013e5c <k_sched_time_slice_set+0x48>)
 8013e40:	601e      	str	r6, [r3, #0]
		z_reset_time_slice();
 8013e42:	f7ff ffd1 	bl	8013de8 <z_reset_time_slice>
	__asm__ volatile(
 8013e46:	f385 8811 	msr	BASEPRI, r5
 8013e4a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8013e4e:	2301      	movs	r3, #1
 8013e50:	e7ec      	b.n	8013e2c <k_sched_time_slice_set+0x18>
}
 8013e52:	bd70      	pop	{r4, r5, r6, pc}
 8013e54:	20002278 	.word	0x20002278
 8013e58:	200022ac 	.word	0x200022ac
 8013e5c:	200022a8 	.word	0x200022a8

08013e60 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8013e60:	4608      	mov	r0, r1
 8013e62:	b981      	cbnz	r1, 8013e86 <z_reschedule+0x26>
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
 8013e64:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013e66:	f3ef 8305 	mrs	r3, IPSR
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8013e6a:	b93b      	cbnz	r3, 8013e7c <z_reschedule+0x1c>
	return _kernel.ready_q.cache;
 8013e6c:	4b08      	ldr	r3, [pc, #32]	; (8013e90 <z_reschedule+0x30>)
 8013e6e:	6a1a      	ldr	r2, [r3, #32]
	return new_thread != _current;
 8013e70:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
 8013e72:	429a      	cmp	r2, r3
 8013e74:	d002      	beq.n	8013e7c <z_reschedule+0x1c>
	ret = arch_swap(key);
 8013e76:	f7f4 ff17 	bl	8008ca8 <arch_swap>
		z_swap(lock, key);
 8013e7a:	e003      	b.n	8013e84 <z_reschedule+0x24>
 8013e7c:	f380 8811 	msr	BASEPRI, r0
 8013e80:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
 8013e84:	bd08      	pop	{r3, pc}
 8013e86:	f381 8811 	msr	BASEPRI, r1
 8013e8a:	f3bf 8f6f 	isb	sy
 8013e8e:	4770      	bx	lr
 8013e90:	20002278 	.word	0x20002278

08013e94 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
 8013e94:	2300      	movs	r3, #0
	__asm__ volatile(
 8013e96:	f04f 0210 	mov.w	r2, #16
 8013e9a:	f3ef 8111 	mrs	r1, BASEPRI
 8013e9e:	f382 8811 	msr	BASEPRI, r2
 8013ea2:	f3bf 8f6f 	isb	sy
 8013ea6:	b953      	cbnz	r3, 8013ebe <k_sched_lock+0x2a>
	--_current->base.sched_locked;
 8013ea8:	4b05      	ldr	r3, [pc, #20]	; (8013ec0 <k_sched_lock+0x2c>)
 8013eaa:	689a      	ldr	r2, [r3, #8]
 8013eac:	7bd3      	ldrb	r3, [r2, #15]
 8013eae:	3b01      	subs	r3, #1
 8013eb0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 8013eb2:	f381 8811 	msr	BASEPRI, r1
 8013eb6:	f3bf 8f6f 	isb	sy
 8013eba:	2301      	movs	r3, #1
 8013ebc:	e7f3      	b.n	8013ea6 <k_sched_lock+0x12>
		z_sched_lock();
	}
}
 8013ebe:	4770      	bx	lr
 8013ec0:	20002278 	.word	0x20002278

08013ec4 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
 8013ec4:	4b0a      	ldr	r3, [pc, #40]	; (8013ef0 <z_priq_dumb_remove+0x2c>)
 8013ec6:	4283      	cmp	r3, r0
 8013ec8:	d008      	beq.n	8013edc <z_priq_dumb_remove+0x18>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
 8013eca:	684a      	ldr	r2, [r1, #4]
 8013ecc:	680b      	ldr	r3, [r1, #0]
 8013ece:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 8013ed0:	684a      	ldr	r2, [r1, #4]
 8013ed2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8013ed4:	2300      	movs	r3, #0
 8013ed6:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
 8013ed8:	604b      	str	r3, [r1, #4]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
 8013eda:	4770      	bx	lr
	if (pq == &_kernel.ready_q.runq && thread == _current &&
 8013edc:	3b24      	subs	r3, #36	; 0x24
 8013ede:	689b      	ldr	r3, [r3, #8]
 8013ee0:	428b      	cmp	r3, r1
 8013ee2:	d1f2      	bne.n	8013eca <z_priq_dumb_remove+0x6>
	uint8_t state = thread->base.thread_state;
 8013ee4:	7b4b      	ldrb	r3, [r1, #13]
 8013ee6:	f013 0f1f 	tst.w	r3, #31
 8013eea:	d0ee      	beq.n	8013eca <z_priq_dumb_remove+0x6>
 8013eec:	e7f5      	b.n	8013eda <z_priq_dumb_remove+0x16>
 8013eee:	bf00      	nop
 8013ef0:	2000229c 	.word	0x2000229c

08013ef4 <update_cache>:
{
 8013ef4:	b570      	push	{r4, r5, r6, lr}
 8013ef6:	4605      	mov	r5, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
 8013ef8:	4e12      	ldr	r6, [pc, #72]	; (8013f44 <update_cache+0x50>)
 8013efa:	f106 0024 	add.w	r0, r6, #36	; 0x24
 8013efe:	f008 fe72 	bl	801cbe6 <z_priq_dumb_best>
 8013f02:	4604      	mov	r4, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
 8013f04:	68b3      	ldr	r3, [r6, #8]
 8013f06:	7b5a      	ldrb	r2, [r3, #13]
 8013f08:	f012 0f20 	tst.w	r2, #32
 8013f0c:	d002      	beq.n	8013f14 <update_cache+0x20>
		_current->base.thread_state |= _THREAD_DEAD;
 8013f0e:	f042 0208 	orr.w	r2, r2, #8
 8013f12:	735a      	strb	r2, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
 8013f14:	b164      	cbz	r4, 8013f30 <update_cache+0x3c>
	if (preempt_ok != 0) {
 8013f16:	b975      	cbnz	r5, 8013f36 <update_cache+0x42>
 8013f18:	7b5a      	ldrb	r2, [r3, #13]
	if (z_is_thread_prevented_from_running(_current)) {
 8013f1a:	f012 0f1f 	tst.w	r2, #31
 8013f1e:	d10a      	bne.n	8013f36 <update_cache+0x42>
	return node->next != NULL;
 8013f20:	69a2      	ldr	r2, [r4, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 8013f22:	b942      	cbnz	r2, 8013f36 <update_cache+0x42>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 8013f24:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
 8013f26:	2a7f      	cmp	r2, #127	; 0x7f
 8013f28:	d905      	bls.n	8013f36 <update_cache+0x42>
		_kernel.ready_q.cache = _current;
 8013f2a:	4a06      	ldr	r2, [pc, #24]	; (8013f44 <update_cache+0x50>)
 8013f2c:	6213      	str	r3, [r2, #32]
 8013f2e:	e008      	b.n	8013f42 <update_cache+0x4e>
	return thread ? thread : _current_cpu->idle_thread;
 8013f30:	4a04      	ldr	r2, [pc, #16]	; (8013f44 <update_cache+0x50>)
 8013f32:	68d4      	ldr	r4, [r2, #12]
 8013f34:	e7ef      	b.n	8013f16 <update_cache+0x22>
		if (thread != _current) {
 8013f36:	42a3      	cmp	r3, r4
 8013f38:	d001      	beq.n	8013f3e <update_cache+0x4a>
			z_reset_time_slice();
 8013f3a:	f7ff ff55 	bl	8013de8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 8013f3e:	4b01      	ldr	r3, [pc, #4]	; (8013f44 <update_cache+0x50>)
 8013f40:	621c      	str	r4, [r3, #32]
}
 8013f42:	bd70      	pop	{r4, r5, r6, pc}
 8013f44:	20002278 	.word	0x20002278

08013f48 <k_sched_unlock>:
{
 8013f48:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
 8013f4a:	2300      	movs	r3, #0
	__asm__ volatile(
 8013f4c:	f04f 0210 	mov.w	r2, #16
 8013f50:	f3ef 8411 	mrs	r4, BASEPRI
 8013f54:	f382 8811 	msr	BASEPRI, r2
 8013f58:	f3bf 8f6f 	isb	sy
 8013f5c:	b96b      	cbnz	r3, 8013f7a <k_sched_unlock+0x32>
		++_current->base.sched_locked;
 8013f5e:	4b0c      	ldr	r3, [pc, #48]	; (8013f90 <k_sched_unlock+0x48>)
 8013f60:	689a      	ldr	r2, [r3, #8]
 8013f62:	7bd3      	ldrb	r3, [r2, #15]
 8013f64:	3301      	adds	r3, #1
 8013f66:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 8013f68:	2000      	movs	r0, #0
 8013f6a:	f7ff ffc3 	bl	8013ef4 <update_cache>
	__asm__ volatile(
 8013f6e:	f384 8811 	msr	BASEPRI, r4
 8013f72:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8013f76:	2301      	movs	r3, #1
 8013f78:	e7f0      	b.n	8013f5c <k_sched_unlock+0x14>
	__asm__ volatile(
 8013f7a:	f04f 0310 	mov.w	r3, #16
 8013f7e:	f3ef 8011 	mrs	r0, BASEPRI
 8013f82:	f383 8811 	msr	BASEPRI, r3
 8013f86:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8013f8a:	f008 fdfb 	bl	801cb84 <z_reschedule_irqlock>
}
 8013f8e:	bd10      	pop	{r4, pc}
 8013f90:	20002278 	.word	0x20002278

08013f94 <ready_thread>:
{
 8013f94:	b538      	push	{r3, r4, r5, lr}
 8013f96:	4605      	mov	r5, r0
	uint8_t state = thread->base.thread_state;
 8013f98:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8013f9a:	f013 0f1f 	tst.w	r3, #31
 8013f9e:	d105      	bne.n	8013fac <ready_thread+0x18>
 8013fa0:	6983      	ldr	r3, [r0, #24]
 8013fa2:	b10b      	cbz	r3, 8013fa8 <ready_thread+0x14>
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	e002      	b.n	8013fae <ready_thread+0x1a>
 8013fa8:	2301      	movs	r3, #1
 8013faa:	e000      	b.n	8013fae <ready_thread+0x1a>
 8013fac:	2300      	movs	r3, #0
	if (z_is_thread_ready(thread)) {
 8013fae:	b30b      	cbz	r3, 8013ff4 <ready_thread+0x60>
	return list->head == list;
 8013fb0:	4b15      	ldr	r3, [pc, #84]	; (8014008 <ready_thread+0x74>)
 8013fb2:	f853 4f24 	ldr.w	r4, [r3, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8013fb6:	429c      	cmp	r4, r3
 8013fb8:	d024      	beq.n	8014004 <ready_thread+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8013fba:	b164      	cbz	r4, 8013fd6 <ready_thread+0x42>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
 8013fbc:	4621      	mov	r1, r4
 8013fbe:	4628      	mov	r0, r5
 8013fc0:	f008 fda0 	bl	801cb04 <z_is_t1_higher_prio_than_t2>
 8013fc4:	b9b8      	cbnz	r0, 8013ff6 <ready_thread+0x62>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8013fc6:	b134      	cbz	r4, 8013fd6 <ready_thread+0x42>
	return (node == list->tail) ? NULL : node->next;
 8013fc8:	4b0f      	ldr	r3, [pc, #60]	; (8014008 <ready_thread+0x74>)
 8013fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013fcc:	429c      	cmp	r4, r3
 8013fce:	d002      	beq.n	8013fd6 <ready_thread+0x42>
 8013fd0:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8013fd2:	2c00      	cmp	r4, #0
 8013fd4:	d1f1      	bne.n	8013fba <ready_thread+0x26>
	node->next = list;
 8013fd6:	4b0c      	ldr	r3, [pc, #48]	; (8014008 <ready_thread+0x74>)
 8013fd8:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8013fdc:	602a      	str	r2, [r5, #0]
	node->prev = list->tail;
 8013fde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013fe0:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
 8013fe2:	6015      	str	r5, [r2, #0]
	list->tail = node;
 8013fe4:	629d      	str	r5, [r3, #40]	; 0x28
	thread->base.thread_state |= states;
 8013fe6:	7b6b      	ldrb	r3, [r5, #13]
 8013fe8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013fec:	736b      	strb	r3, [r5, #13]
		update_cache(0);
 8013fee:	2000      	movs	r0, #0
 8013ff0:	f7ff ff80 	bl	8013ef4 <update_cache>
}
 8013ff4:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = successor->prev;
 8013ff6:	6863      	ldr	r3, [r4, #4]
 8013ff8:	606b      	str	r3, [r5, #4]
	node->next = successor;
 8013ffa:	602c      	str	r4, [r5, #0]
	successor->prev->next = node;
 8013ffc:	6863      	ldr	r3, [r4, #4]
 8013ffe:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 8014000:	6065      	str	r5, [r4, #4]
}
 8014002:	e7f0      	b.n	8013fe6 <ready_thread+0x52>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8014004:	2400      	movs	r4, #0
 8014006:	e7d8      	b.n	8013fba <ready_thread+0x26>
 8014008:	20002278 	.word	0x20002278

0801400c <z_sched_start>:
{
 801400c:	b510      	push	{r4, lr}
 801400e:	f04f 0310 	mov.w	r3, #16
 8014012:	f3ef 8411 	mrs	r4, BASEPRI
 8014016:	f383 8811 	msr	BASEPRI, r3
 801401a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 801401e:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
 8014020:	f013 0f04 	tst.w	r3, #4
 8014024:	d104      	bne.n	8014030 <z_sched_start+0x24>
	__asm__ volatile(
 8014026:	f384 8811 	msr	BASEPRI, r4
 801402a:	f3bf 8f6f 	isb	sy
}
 801402e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8014030:	f023 0304 	bic.w	r3, r3, #4
 8014034:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
 8014036:	f7ff ffad 	bl	8013f94 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 801403a:	4621      	mov	r1, r4
 801403c:	4801      	ldr	r0, [pc, #4]	; (8014044 <z_sched_start+0x38>)
 801403e:	f7ff ff0f 	bl	8013e60 <z_reschedule>
 8014042:	e7f4      	b.n	801402e <z_sched_start+0x22>
 8014044:	200022a8 	.word	0x200022a8

08014048 <move_thread_to_end_of_prio_q>:
{
 8014048:	b538      	push	{r3, r4, r5, lr}
 801404a:	4605      	mov	r5, r0
	if (z_is_thread_queued(thread)) {
 801404c:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8014050:	2b00      	cmp	r3, #0
 8014052:	db27      	blt.n	80140a4 <move_thread_to_end_of_prio_q+0x5c>
	return list->head == list;
 8014054:	4b1a      	ldr	r3, [pc, #104]	; (80140c0 <move_thread_to_end_of_prio_q+0x78>)
 8014056:	f853 4f24 	ldr.w	r4, [r3, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 801405a:	429c      	cmp	r4, r3
 801405c:	d02e      	beq.n	80140bc <move_thread_to_end_of_prio_q+0x74>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 801405e:	b164      	cbz	r4, 801407a <move_thread_to_end_of_prio_q+0x32>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
 8014060:	4621      	mov	r1, r4
 8014062:	4628      	mov	r0, r5
 8014064:	f008 fd4e 	bl	801cb04 <z_is_t1_higher_prio_than_t2>
 8014068:	bb08      	cbnz	r0, 80140ae <move_thread_to_end_of_prio_q+0x66>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 801406a:	b134      	cbz	r4, 801407a <move_thread_to_end_of_prio_q+0x32>
	return (node == list->tail) ? NULL : node->next;
 801406c:	4b14      	ldr	r3, [pc, #80]	; (80140c0 <move_thread_to_end_of_prio_q+0x78>)
 801406e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014070:	429c      	cmp	r4, r3
 8014072:	d002      	beq.n	801407a <move_thread_to_end_of_prio_q+0x32>
 8014074:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8014076:	2c00      	cmp	r4, #0
 8014078:	d1f1      	bne.n	801405e <move_thread_to_end_of_prio_q+0x16>
	node->next = list;
 801407a:	4b11      	ldr	r3, [pc, #68]	; (80140c0 <move_thread_to_end_of_prio_q+0x78>)
 801407c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8014080:	602a      	str	r2, [r5, #0]
	node->prev = list->tail;
 8014082:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014084:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
 8014086:	6015      	str	r5, [r2, #0]
	list->tail = node;
 8014088:	629d      	str	r5, [r3, #40]	; 0x28
	thread->base.thread_state |= states;
 801408a:	7b6b      	ldrb	r3, [r5, #13]
 801408c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014090:	736b      	strb	r3, [r5, #13]
	update_cache(thread == _current);
 8014092:	4b0b      	ldr	r3, [pc, #44]	; (80140c0 <move_thread_to_end_of_prio_q+0x78>)
 8014094:	6898      	ldr	r0, [r3, #8]
 8014096:	42a8      	cmp	r0, r5
 8014098:	bf14      	ite	ne
 801409a:	2000      	movne	r0, #0
 801409c:	2001      	moveq	r0, #1
 801409e:	f7ff ff29 	bl	8013ef4 <update_cache>
}
 80140a2:	bd38      	pop	{r3, r4, r5, pc}
		_priq_run_remove(&_kernel.ready_q.runq, thread);
 80140a4:	4601      	mov	r1, r0
 80140a6:	4807      	ldr	r0, [pc, #28]	; (80140c4 <move_thread_to_end_of_prio_q+0x7c>)
 80140a8:	f7ff ff0c 	bl	8013ec4 <z_priq_dumb_remove>
 80140ac:	e7d2      	b.n	8014054 <move_thread_to_end_of_prio_q+0xc>
	node->prev = successor->prev;
 80140ae:	6863      	ldr	r3, [r4, #4]
 80140b0:	606b      	str	r3, [r5, #4]
	node->next = successor;
 80140b2:	602c      	str	r4, [r5, #0]
	successor->prev->next = node;
 80140b4:	6863      	ldr	r3, [r4, #4]
 80140b6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 80140b8:	6065      	str	r5, [r4, #4]
}
 80140ba:	e7e6      	b.n	801408a <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80140bc:	2400      	movs	r4, #0
 80140be:	e7ce      	b.n	801405e <move_thread_to_end_of_prio_q+0x16>
 80140c0:	20002278 	.word	0x20002278
 80140c4:	2000229c 	.word	0x2000229c

080140c8 <z_time_slice>:
{
 80140c8:	b510      	push	{r4, lr}
	__asm__ volatile(
 80140ca:	f04f 0310 	mov.w	r3, #16
 80140ce:	f3ef 8411 	mrs	r4, BASEPRI
 80140d2:	f383 8811 	msr	BASEPRI, r3
 80140d6:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 80140da:	4b1c      	ldr	r3, [pc, #112]	; (801414c <z_time_slice+0x84>)
 80140dc:	689b      	ldr	r3, [r3, #8]
 80140de:	4a1c      	ldr	r2, [pc, #112]	; (8014150 <z_time_slice+0x88>)
 80140e0:	6812      	ldr	r2, [r2, #0]
 80140e2:	4293      	cmp	r3, r2
 80140e4:	d01d      	beq.n	8014122 <z_time_slice+0x5a>
	pending_current = NULL;
 80140e6:	4a1a      	ldr	r2, [pc, #104]	; (8014150 <z_time_slice+0x88>)
 80140e8:	2100      	movs	r1, #0
 80140ea:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
 80140ec:	4a19      	ldr	r2, [pc, #100]	; (8014154 <z_time_slice+0x8c>)
 80140ee:	6812      	ldr	r2, [r2, #0]
 80140f0:	b322      	cbz	r2, 801413c <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 80140f2:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
 80140f4:	2a7f      	cmp	r2, #127	; 0x7f
 80140f6:	d821      	bhi.n	801413c <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
 80140f8:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
 80140fa:	f012 0f1f 	tst.w	r2, #31
 80140fe:	d11d      	bne.n	801413c <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 8014100:	f993 100e 	ldrsb.w	r1, [r3, #14]
 8014104:	4a14      	ldr	r2, [pc, #80]	; (8014158 <z_time_slice+0x90>)
 8014106:	6812      	ldr	r2, [r2, #0]
 8014108:	4291      	cmp	r1, r2
 801410a:	db17      	blt.n	801413c <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
 801410c:	4a13      	ldr	r2, [pc, #76]	; (801415c <z_time_slice+0x94>)
 801410e:	4293      	cmp	r3, r2
 8014110:	d014      	beq.n	801413c <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
 8014112:	4a0e      	ldr	r2, [pc, #56]	; (801414c <z_time_slice+0x84>)
 8014114:	6912      	ldr	r2, [r2, #16]
 8014116:	4282      	cmp	r2, r0
 8014118:	dd0a      	ble.n	8014130 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
 801411a:	1a10      	subs	r0, r2, r0
 801411c:	4b0b      	ldr	r3, [pc, #44]	; (801414c <z_time_slice+0x84>)
 801411e:	6118      	str	r0, [r3, #16]
 8014120:	e00f      	b.n	8014142 <z_time_slice+0x7a>
		z_reset_time_slice();
 8014122:	f7ff fe61 	bl	8013de8 <z_reset_time_slice>
	__asm__ volatile(
 8014126:	f384 8811 	msr	BASEPRI, r4
 801412a:	f3bf 8f6f 	isb	sy
		return;
 801412e:	e00c      	b.n	801414a <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
 8014130:	4618      	mov	r0, r3
 8014132:	f7ff ff89 	bl	8014048 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
 8014136:	f7ff fe57 	bl	8013de8 <z_reset_time_slice>
 801413a:	e002      	b.n	8014142 <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
 801413c:	4b03      	ldr	r3, [pc, #12]	; (801414c <z_time_slice+0x84>)
 801413e:	2200      	movs	r2, #0
 8014140:	611a      	str	r2, [r3, #16]
 8014142:	f384 8811 	msr	BASEPRI, r4
 8014146:	f3bf 8f6f 	isb	sy
}
 801414a:	bd10      	pop	{r4, pc}
 801414c:	20002278 	.word	0x20002278
 8014150:	200022a4 	.word	0x200022a4
 8014154:	200022ac 	.word	0x200022ac
 8014158:	200022a8 	.word	0x200022a8
 801415c:	20001318 	.word	0x20001318

08014160 <z_thread_single_abort>:
{
 8014160:	b570      	push	{r4, r5, r6, lr}
 8014162:	4605      	mov	r5, r0
	if (thread->fn_abort != NULL) {
 8014164:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8014166:	b103      	cbz	r3, 801416a <z_thread_single_abort+0xa>
		thread->fn_abort();
 8014168:	4798      	blx	r3
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 801416a:	f105 0018 	add.w	r0, r5, #24
 801416e:	f008 ff10 	bl	801cf92 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
 8014172:	2300      	movs	r3, #0
	__asm__ volatile(
 8014174:	f04f 0210 	mov.w	r2, #16
 8014178:	f3ef 8611 	mrs	r6, BASEPRI
 801417c:	f382 8811 	msr	BASEPRI, r2
 8014180:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 8014184:	e01f      	b.n	80141c6 <z_thread_single_abort+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8014186:	2201      	movs	r2, #1
 8014188:	e027      	b.n	80141da <z_thread_single_abort+0x7a>
				_priq_run_remove(&_kernel.ready_q.runq,
 801418a:	4629      	mov	r1, r5
 801418c:	482a      	ldr	r0, [pc, #168]	; (8014238 <z_thread_single_abort+0xd8>)
 801418e:	f7ff fe99 	bl	8013ec4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 8014192:	7b6b      	ldrb	r3, [r5, #13]
 8014194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014198:	736b      	strb	r3, [r5, #13]
}
 801419a:	e024      	b.n	80141e6 <z_thread_single_abort+0x86>
			if (z_is_thread_pending(thread)) {
 801419c:	f013 0f02 	tst.w	r3, #2
 80141a0:	d029      	beq.n	80141f6 <z_thread_single_abort+0x96>
				_priq_wait_remove(&pended_on(thread)->waitq,
 80141a2:	4628      	mov	r0, r5
 80141a4:	f008 fcac 	bl	801cb00 <pended_on>
 80141a8:	4629      	mov	r1, r5
 80141aa:	f7ff fe8b 	bl	8013ec4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 80141ae:	7b6b      	ldrb	r3, [r5, #13]
 80141b0:	f023 0302 	bic.w	r3, r3, #2
 80141b4:	736b      	strb	r3, [r5, #13]
				thread->base.pended_on = NULL;
 80141b6:	2300      	movs	r3, #0
 80141b8:	60ab      	str	r3, [r5, #8]
 80141ba:	e01c      	b.n	80141f6 <z_thread_single_abort+0x96>
	__asm__ volatile(
 80141bc:	f386 8811 	msr	BASEPRI, r6
 80141c0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 80141c4:	2301      	movs	r3, #1
 80141c6:	461a      	mov	r2, r3
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d134      	bne.n	8014236 <z_thread_single_abort+0xd6>
	uint8_t state = thread->base.thread_state;
 80141cc:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 80141ce:	f013 0f1f 	tst.w	r3, #31
 80141d2:	d102      	bne.n	80141da <z_thread_single_abort+0x7a>
	return node->next != NULL;
 80141d4:	69a9      	ldr	r1, [r5, #24]
 80141d6:	2900      	cmp	r1, #0
 80141d8:	d0d5      	beq.n	8014186 <z_thread_single_abort+0x26>
		if (z_is_thread_ready(thread)) {
 80141da:	f012 0f01 	tst.w	r2, #1
 80141de:	d0dd      	beq.n	801419c <z_thread_single_abort+0x3c>
			if (z_is_thread_queued(thread)) {
 80141e0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80141e4:	d1d1      	bne.n	801418a <z_thread_single_abort+0x2a>
			update_cache(thread == _current);
 80141e6:	4b15      	ldr	r3, [pc, #84]	; (801423c <z_thread_single_abort+0xdc>)
 80141e8:	6898      	ldr	r0, [r3, #8]
 80141ea:	42a8      	cmp	r0, r5
 80141ec:	bf14      	ite	ne
 80141ee:	2000      	movne	r0, #0
 80141f0:	2001      	moveq	r0, #1
 80141f2:	f7ff fe7f 	bl	8013ef4 <update_cache>
		thread->base.thread_state |= mask;
 80141f6:	7b6b      	ldrb	r3, [r5, #13]
 80141f8:	f043 0308 	orr.w	r3, r3, #8
 80141fc:	736b      	strb	r3, [r5, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 80141fe:	f105 0330 	add.w	r3, r5, #48	; 0x30
	return list->head == list;
 8014202:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8014204:	42a3      	cmp	r3, r4
 8014206:	d0d9      	beq.n	80141bc <z_thread_single_abort+0x5c>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
 8014208:	2c00      	cmp	r4, #0
 801420a:	d0d7      	beq.n	80141bc <z_thread_single_abort+0x5c>
 801420c:	f104 0018 	add.w	r0, r4, #24
 8014210:	f008 febf 	bl	801cf92 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
 8014214:	4620      	mov	r0, r4
 8014216:	f008 fc73 	bl	801cb00 <pended_on>
 801421a:	4621      	mov	r1, r4
 801421c:	f7ff fe52 	bl	8013ec4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8014220:	7b63      	ldrb	r3, [r4, #13]
 8014222:	f023 0302 	bic.w	r3, r3, #2
 8014226:	7363      	strb	r3, [r4, #13]
			waiter->base.pended_on = NULL;
 8014228:	2300      	movs	r3, #0
 801422a:	60a3      	str	r3, [r4, #8]
 801422c:	6723      	str	r3, [r4, #112]	; 0x70
			ready_thread(waiter);
 801422e:	4620      	mov	r0, r4
 8014230:	f7ff feb0 	bl	8013f94 <ready_thread>
 8014234:	e7e3      	b.n	80141fe <z_thread_single_abort+0x9e>
}
 8014236:	bd70      	pop	{r4, r5, r6, pc}
 8014238:	2000229c 	.word	0x2000229c
 801423c:	20002278 	.word	0x20002278

08014240 <unready_thread>:
{
 8014240:	b510      	push	{r4, lr}
 8014242:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
 8014244:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8014248:	2b00      	cmp	r3, #0
 801424a:	db08      	blt.n	801425e <unready_thread+0x1e>
	update_cache(thread == _current);
 801424c:	4b08      	ldr	r3, [pc, #32]	; (8014270 <unready_thread+0x30>)
 801424e:	6898      	ldr	r0, [r3, #8]
 8014250:	42a0      	cmp	r0, r4
 8014252:	bf14      	ite	ne
 8014254:	2000      	movne	r0, #0
 8014256:	2001      	moveq	r0, #1
 8014258:	f7ff fe4c 	bl	8013ef4 <update_cache>
}
 801425c:	bd10      	pop	{r4, pc}
		_priq_run_remove(&_kernel.ready_q.runq, thread);
 801425e:	4601      	mov	r1, r0
 8014260:	4804      	ldr	r0, [pc, #16]	; (8014274 <unready_thread+0x34>)
 8014262:	f7ff fe2f 	bl	8013ec4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 8014266:	7b63      	ldrb	r3, [r4, #13]
 8014268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801426c:	7363      	strb	r3, [r4, #13]
}
 801426e:	e7ed      	b.n	801424c <unready_thread+0xc>
 8014270:	20002278 	.word	0x20002278
 8014274:	2000229c 	.word	0x2000229c

08014278 <z_pend_curr>:
{
 8014278:	b510      	push	{r4, lr}
 801427a:	460c      	mov	r4, r1
 801427c:	4611      	mov	r1, r2
	pending_current = _current;
 801427e:	4b06      	ldr	r3, [pc, #24]	; (8014298 <z_pend_curr+0x20>)
 8014280:	6898      	ldr	r0, [r3, #8]
 8014282:	4b06      	ldr	r3, [pc, #24]	; (801429c <z_pend_curr+0x24>)
 8014284:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
 8014286:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801428a:	f008 fd22 	bl	801ccd2 <pend>
 801428e:	4620      	mov	r0, r4
 8014290:	f7f4 fd0a 	bl	8008ca8 <arch_swap>
}
 8014294:	bd10      	pop	{r4, pc}
 8014296:	bf00      	nop
 8014298:	20002278 	.word	0x20002278
 801429c:	200022a4 	.word	0x200022a4

080142a0 <z_set_prio>:
{
 80142a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80142a4:	4604      	mov	r4, r0
 80142a6:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
 80142a8:	2300      	movs	r3, #0
	__asm__ volatile(
 80142aa:	f04f 0210 	mov.w	r2, #16
 80142ae:	f3ef 8611 	mrs	r6, BASEPRI
 80142b2:	f382 8811 	msr	BASEPRI, r2
 80142b6:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
 80142ba:	4698      	mov	r8, r3
 80142bc:	e008      	b.n	80142d0 <z_set_prio+0x30>
		if (need_sched) {
 80142be:	f012 0801 	ands.w	r8, r2, #1
 80142c2:	d111      	bne.n	80142e8 <z_set_prio+0x48>
			thread->base.prio = prio;
 80142c4:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
 80142c6:	f386 8811 	msr	BASEPRI, r6
 80142ca:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 80142ce:	2301      	movs	r3, #1
 80142d0:	461a      	mov	r2, r3
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d136      	bne.n	8014344 <z_set_prio+0xa4>
	uint8_t state = thread->base.thread_state;
 80142d6:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 80142d8:	f013 0f1f 	tst.w	r3, #31
 80142dc:	d1ef      	bne.n	80142be <z_set_prio+0x1e>
	return node->next != NULL;
 80142de:	69a3      	ldr	r3, [r4, #24]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d1ec      	bne.n	80142be <z_set_prio+0x1e>
 80142e4:	2201      	movs	r2, #1
 80142e6:	e7ea      	b.n	80142be <z_set_prio+0x1e>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
 80142e8:	4d18      	ldr	r5, [pc, #96]	; (801434c <z_set_prio+0xac>)
 80142ea:	f105 0924 	add.w	r9, r5, #36	; 0x24
 80142ee:	4621      	mov	r1, r4
 80142f0:	4648      	mov	r0, r9
 80142f2:	f7ff fde7 	bl	8013ec4 <z_priq_dumb_remove>
				thread->base.prio = prio;
 80142f6:	73a7      	strb	r7, [r4, #14]
	return list->head == list;
 80142f8:	6a6d      	ldr	r5, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80142fa:	454d      	cmp	r5, r9
 80142fc:	d020      	beq.n	8014340 <z_set_prio+0xa0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80142fe:	b165      	cbz	r5, 801431a <z_set_prio+0x7a>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
 8014300:	4629      	mov	r1, r5
 8014302:	4620      	mov	r0, r4
 8014304:	f008 fbfe 	bl	801cb04 <z_is_t1_higher_prio_than_t2>
 8014308:	b998      	cbnz	r0, 8014332 <z_set_prio+0x92>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 801430a:	b135      	cbz	r5, 801431a <z_set_prio+0x7a>
	return (node == list->tail) ? NULL : node->next;
 801430c:	4b0f      	ldr	r3, [pc, #60]	; (801434c <z_set_prio+0xac>)
 801430e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014310:	429d      	cmp	r5, r3
 8014312:	d002      	beq.n	801431a <z_set_prio+0x7a>
 8014314:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8014316:	2d00      	cmp	r5, #0
 8014318:	d1f1      	bne.n	80142fe <z_set_prio+0x5e>
	node->next = list;
 801431a:	4b0c      	ldr	r3, [pc, #48]	; (801434c <z_set_prio+0xac>)
 801431c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8014320:	6022      	str	r2, [r4, #0]
	node->prev = list->tail;
 8014322:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014324:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
 8014326:	6014      	str	r4, [r2, #0]
	list->tail = node;
 8014328:	629c      	str	r4, [r3, #40]	; 0x28
			update_cache(1);
 801432a:	2001      	movs	r0, #1
 801432c:	f7ff fde2 	bl	8013ef4 <update_cache>
 8014330:	e7c9      	b.n	80142c6 <z_set_prio+0x26>
	node->prev = successor->prev;
 8014332:	686b      	ldr	r3, [r5, #4]
 8014334:	6063      	str	r3, [r4, #4]
	node->next = successor;
 8014336:	6025      	str	r5, [r4, #0]
	successor->prev->next = node;
 8014338:	686b      	ldr	r3, [r5, #4]
 801433a:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 801433c:	606c      	str	r4, [r5, #4]
}
 801433e:	e7f4      	b.n	801432a <z_set_prio+0x8a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8014340:	2500      	movs	r5, #0
 8014342:	e7dc      	b.n	80142fe <z_set_prio+0x5e>
}
 8014344:	4640      	mov	r0, r8
 8014346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801434a:	bf00      	nop
 801434c:	20002278 	.word	0x20002278

08014350 <z_sched_init>:

	return need_sched;
}

void z_sched_init(void)
{
 8014350:	b508      	push	{r3, lr}
	list->head = (sys_dnode_t *)list;
 8014352:	4b05      	ldr	r3, [pc, #20]	; (8014368 <z_sched_init+0x18>)
 8014354:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8014358:	625a      	str	r2, [r3, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
 801435a:	629a      	str	r2, [r3, #40]	; 0x28
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 801435c:	2100      	movs	r1, #0
 801435e:	4608      	mov	r0, r1
 8014360:	f7ff fd58 	bl	8013e14 <k_sched_time_slice_set>
		CONFIG_TIMESLICE_PRIORITY);
#endif
}
 8014364:	bd08      	pop	{r3, pc}
 8014366:	bf00      	nop
 8014368:	20002278 	.word	0x20002278

0801436c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
 801436c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT(!arch_is_in_isr(), "");

	if (!z_is_idle_thread_object(_current)) {
 801436e:	4b2b      	ldr	r3, [pc, #172]	; (801441c <z_impl_k_yield+0xb0>)
 8014370:	689a      	ldr	r2, [r3, #8]
 8014372:	4b2b      	ldr	r3, [pc, #172]	; (8014420 <z_impl_k_yield+0xb4>)
 8014374:	429a      	cmp	r2, r3
 8014376:	d046      	beq.n	8014406 <z_impl_k_yield+0x9a>
		LOCKED(&sched_spinlock) {
 8014378:	2300      	movs	r3, #0
	__asm__ volatile(
 801437a:	f04f 0210 	mov.w	r2, #16
 801437e:	f3ef 8611 	mrs	r6, BASEPRI
 8014382:	f382 8811 	msr	BASEPRI, r2
 8014386:	f3bf 8f6f 	isb	sy
 801438a:	e01e      	b.n	80143ca <z_impl_k_yield+0x5e>
	node->prev = successor->prev;
 801438c:	6863      	ldr	r3, [r4, #4]
 801438e:	606b      	str	r3, [r5, #4]
	node->next = successor;
 8014390:	602c      	str	r4, [r5, #0]
	successor->prev->next = node;
 8014392:	6863      	ldr	r3, [r4, #4]
 8014394:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 8014396:	6065      	str	r5, [r4, #4]
}
 8014398:	e009      	b.n	80143ae <z_impl_k_yield+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 801439a:	2400      	movs	r4, #0
 801439c:	e021      	b.n	80143e2 <z_impl_k_yield+0x76>
	node->next = list;
 801439e:	4b1f      	ldr	r3, [pc, #124]	; (801441c <z_impl_k_yield+0xb0>)
 80143a0:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80143a4:	602a      	str	r2, [r5, #0]
	node->prev = list->tail;
 80143a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80143a8:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
 80143aa:	6015      	str	r5, [r2, #0]
	list->tail = node;
 80143ac:	629d      	str	r5, [r3, #40]	; 0x28
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
			z_mark_thread_as_queued(_current);
 80143ae:	4b1b      	ldr	r3, [pc, #108]	; (801441c <z_impl_k_yield+0xb0>)
 80143b0:	689a      	ldr	r2, [r3, #8]
	thread->base.thread_state |= states;
 80143b2:	7b53      	ldrb	r3, [r2, #13]
 80143b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80143b8:	7353      	strb	r3, [r2, #13]
			update_cache(1);
 80143ba:	2001      	movs	r0, #1
 80143bc:	f7ff fd9a 	bl	8013ef4 <update_cache>
	__asm__ volatile(
 80143c0:	f386 8811 	msr	BASEPRI, r6
 80143c4:	f3bf 8f6f 	isb	sy
		LOCKED(&sched_spinlock) {
 80143c8:	2301      	movs	r3, #1
 80143ca:	b9e3      	cbnz	r3, 8014406 <z_impl_k_yield+0x9a>
				_priq_run_remove(&_kernel.ready_q.runq,
 80143cc:	4c13      	ldr	r4, [pc, #76]	; (801441c <z_impl_k_yield+0xb0>)
 80143ce:	f104 0724 	add.w	r7, r4, #36	; 0x24
 80143d2:	68a1      	ldr	r1, [r4, #8]
 80143d4:	4638      	mov	r0, r7
 80143d6:	f7ff fd75 	bl	8013ec4 <z_priq_dumb_remove>
			_priq_run_add(&_kernel.ready_q.runq, _current);
 80143da:	68a5      	ldr	r5, [r4, #8]
	return list->head == list;
 80143dc:	6a64      	ldr	r4, [r4, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80143de:	42bc      	cmp	r4, r7
 80143e0:	d0db      	beq.n	801439a <z_impl_k_yield+0x2e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80143e2:	2c00      	cmp	r4, #0
 80143e4:	d0db      	beq.n	801439e <z_impl_k_yield+0x32>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
 80143e6:	4621      	mov	r1, r4
 80143e8:	4628      	mov	r0, r5
 80143ea:	f008 fb8b 	bl	801cb04 <z_is_t1_higher_prio_than_t2>
 80143ee:	2800      	cmp	r0, #0
 80143f0:	d1cc      	bne.n	801438c <z_impl_k_yield+0x20>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80143f2:	2c00      	cmp	r4, #0
 80143f4:	d0d3      	beq.n	801439e <z_impl_k_yield+0x32>
	return (node == list->tail) ? NULL : node->next;
 80143f6:	4b09      	ldr	r3, [pc, #36]	; (801441c <z_impl_k_yield+0xb0>)
 80143f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80143fa:	429c      	cmp	r4, r3
 80143fc:	d0cf      	beq.n	801439e <z_impl_k_yield+0x32>
 80143fe:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8014400:	2c00      	cmp	r4, #0
 8014402:	d1ee      	bne.n	80143e2 <z_impl_k_yield+0x76>
 8014404:	e7cb      	b.n	801439e <z_impl_k_yield+0x32>
	__asm__ volatile(
 8014406:	f04f 0310 	mov.w	r3, #16
 801440a:	f3ef 8011 	mrs	r0, BASEPRI
 801440e:	f383 8811 	msr	BASEPRI, r3
 8014412:	f3bf 8f6f 	isb	sy
 8014416:	f7f4 fc47 	bl	8008ca8 <arch_swap>
		}
	}
	z_swap_unlocked();
}
 801441a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801441c:	20002278 	.word	0x20002278
 8014420:	20001318 	.word	0x20001318

08014424 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 8014424:	4b01      	ldr	r3, [pc, #4]	; (801442c <z_impl_k_current_get+0x8>)
 8014426:	6898      	ldr	r0, [r3, #8]
 8014428:	4770      	bx	lr
 801442a:	bf00      	nop
 801442c:	20002278 	.word	0x20002278

08014430 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 8014430:	b538      	push	{r3, r4, r5, lr}
 8014432:	4604      	mov	r4, r0
 8014434:	f04f 0310 	mov.w	r3, #16
 8014438:	f3ef 8511 	mrs	r5, BASEPRI
 801443c:	f383 8811 	msr	BASEPRI, r3
 8014440:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
 8014444:	f008 fc66 	bl	801cd14 <z_unpend_first_thread>

	if (thread != NULL) {
 8014448:	b140      	cbz	r0, 801445c <z_impl_k_sem_give+0x2c>
 801444a:	2200      	movs	r2, #0
 801444c:	6702      	str	r2, [r0, #112]	; 0x70
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 801444e:	f008 fbd1 	bl	801cbf4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 8014452:	4629      	mov	r1, r5
 8014454:	4809      	ldr	r0, [pc, #36]	; (801447c <z_impl_k_sem_give+0x4c>)
 8014456:	f7ff fd03 	bl	8013e60 <z_reschedule>
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
 801445a:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 801445c:	68a3      	ldr	r3, [r4, #8]
 801445e:	68e2      	ldr	r2, [r4, #12]
 8014460:	4293      	cmp	r3, r2
 8014462:	d008      	beq.n	8014476 <z_impl_k_sem_give+0x46>
 8014464:	2201      	movs	r2, #1
 8014466:	4413      	add	r3, r2
 8014468:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 801446a:	2102      	movs	r1, #2
 801446c:	f104 0010 	add.w	r0, r4, #16
 8014470:	f008 feb3 	bl	801d1da <z_handle_obj_poll_events>
}
 8014474:	e7ed      	b.n	8014452 <z_impl_k_sem_give+0x22>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 8014476:	2200      	movs	r2, #0
 8014478:	e7f5      	b.n	8014466 <z_impl_k_sem_give+0x36>
 801447a:	bf00      	nop
 801447c:	200022b0 	.word	0x200022b0

08014480 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 8014480:	b530      	push	{r4, r5, lr}
 8014482:	b083      	sub	sp, #12
 8014484:	461d      	mov	r5, r3
 8014486:	f04f 0310 	mov.w	r3, #16
 801448a:	f3ef 8111 	mrs	r1, BASEPRI
 801448e:	f383 8811 	msr	BASEPRI, r3
 8014492:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
 8014496:	6883      	ldr	r3, [r0, #8]
 8014498:	b143      	cbz	r3, 80144ac <z_impl_k_sem_take+0x2c>
		sem->count--;
 801449a:	3b01      	subs	r3, #1
 801449c:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
 801449e:	f381 8811 	msr	BASEPRI, r1
 80144a2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 80144a6:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
 80144a8:	b003      	add	sp, #12
 80144aa:	bd30      	pop	{r4, r5, pc}
 80144ac:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 80144ae:	ea54 0305 	orrs.w	r3, r4, r5
 80144b2:	d006      	beq.n	80144c2 <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 80144b4:	e9cd 4500 	strd	r4, r5, [sp]
 80144b8:	4602      	mov	r2, r0
 80144ba:	4805      	ldr	r0, [pc, #20]	; (80144d0 <z_impl_k_sem_take+0x50>)
 80144bc:	f7ff fedc 	bl	8014278 <z_pend_curr>
	return ret;
 80144c0:	e7f2      	b.n	80144a8 <z_impl_k_sem_take+0x28>
 80144c2:	f381 8811 	msr	BASEPRI, r1
 80144c6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 80144ca:	f06f 000f 	mvn.w	r0, #15
 80144ce:	e7eb      	b.n	80144a8 <z_impl_k_sem_take+0x28>
 80144d0:	200022b0 	.word	0x200022b0

080144d4 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
 80144d4:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
 80144d6:	4c08      	ldr	r4, [pc, #32]	; (80144f8 <k_sys_work_q_init+0x24>)
 80144d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80144dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80144e0:	4906      	ldr	r1, [pc, #24]	; (80144fc <k_sys_work_q_init+0x28>)
 80144e2:	4620      	mov	r0, r4
 80144e4:	f000 f892 	bl	801460c <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
 80144e8:	4905      	ldr	r1, [pc, #20]	; (8014500 <k_sys_work_q_init+0x2c>)
 80144ea:	f104 0018 	add.w	r0, r4, #24
 80144ee:	f008 fc7b 	bl	801cde8 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
 80144f2:	2000      	movs	r0, #0
 80144f4:	bd10      	pop	{r4, pc}
 80144f6:	bf00      	nop
 80144f8:	20001408 	.word	0x20001408
 80144fc:	200055a8 	.word	0x200055a8
 8014500:	08021e60 	.word	0x08021e60

08014504 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
 8014504:	b538      	push	{r3, r4, r5, lr}
 8014506:	4614      	mov	r4, r2
 8014508:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 801450a:	ea54 0305 	orrs.w	r3, r4, r5
 801450e:	d102      	bne.n	8014516 <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
 8014510:	f008 fc6f 	bl	801cdf2 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
 8014514:	bd38      	pop	{r3, r4, r5, pc}
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
 8014516:	462b      	mov	r3, r5
 8014518:	4902      	ldr	r1, [pc, #8]	; (8014524 <schedule_new_thread+0x20>)
 801451a:	3018      	adds	r0, #24
 801451c:	f000 f93c 	bl	8014798 <z_add_timeout>
 8014520:	e7f8      	b.n	8014514 <schedule_new_thread+0x10>
 8014522:	bf00      	nop
 8014524:	0801cc21 	.word	0x0801cc21

08014528 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8014528:	b5f0      	push	{r4, r5, r6, r7, lr}
 801452a:	b085      	sub	sp, #20
 801452c:	4604      	mov	r4, r0
 801452e:	460e      	mov	r6, r1
 8014530:	4615      	mov	r5, r2
 8014532:	461f      	mov	r7, r3
	sys_dlist_init(&w->waitq);
 8014534:	f100 0330 	add.w	r3, r0, #48	; 0x30
	list->head = (sys_dnode_t *)list;
 8014538:	6303      	str	r3, [r0, #48]	; 0x30
	list->tail = (sys_dnode_t *)list;
 801453a:	6343      	str	r3, [r0, #52]	; 0x34
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->base.join_waiters);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
 801453c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801453e:	2204      	movs	r2, #4
 8014540:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014542:	f008 fc5a 	bl	801cdfa <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
 8014546:	462a      	mov	r2, r5
 8014548:	4631      	mov	r1, r6
 801454a:	4620      	mov	r0, r4
 801454c:	f008 fc41 	bl	801cdd2 <setup_thread_stack>
 8014550:	4605      	mov	r5, r0

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8014552:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014554:	9302      	str	r3, [sp, #8]
 8014556:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014558:	9301      	str	r3, [sp, #4]
 801455a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801455c:	9300      	str	r3, [sp, #0]
 801455e:	463b      	mov	r3, r7
 8014560:	4602      	mov	r2, r0
 8014562:	4631      	mov	r1, r6
 8014564:	4620      	mov	r0, r4
 8014566:	f7f4 fc27 	bl	8008db8 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
 801456a:	2300      	movs	r3, #0
 801456c:	65e3      	str	r3, [r4, #92]	; 0x5c
	new_thread->fn_abort = NULL;
 801456e:	6623      	str	r3, [r4, #96]	; 0x60
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
 8014570:	4b04      	ldr	r3, [pc, #16]	; (8014584 <z_setup_new_thread+0x5c>)
 8014572:	689b      	ldr	r3, [r3, #8]
 8014574:	b123      	cbz	r3, 8014580 <z_setup_new_thread+0x58>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
 8014576:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014578:	66a3      	str	r3, [r4, #104]	; 0x68
	sys_trace_thread_create(new_thread);

	return stack_ptr;
}
 801457a:	4628      	mov	r0, r5
 801457c:	b005      	add	sp, #20
 801457e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		new_thread->resource_pool = NULL;
 8014580:	66a3      	str	r3, [r4, #104]	; 0x68
		return stack_ptr;
 8014582:	e7fa      	b.n	801457a <z_setup_new_thread+0x52>
 8014584:	20002278 	.word	0x20002278

08014588 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
 8014588:	b5d0      	push	{r4, r6, r7, lr}
 801458a:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
 801458c:	4c1d      	ldr	r4, [pc, #116]	; (8014604 <z_init_static_threads+0x7c>)
 801458e:	4b1e      	ldr	r3, [pc, #120]	; (8014608 <z_init_static_threads+0x80>)
 8014590:	429c      	cmp	r4, r3
 8014592:	d215      	bcs.n	80145c0 <z_init_static_threads+0x38>
		z_setup_new_thread(
 8014594:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014596:	9305      	str	r3, [sp, #20]
 8014598:	6a23      	ldr	r3, [r4, #32]
 801459a:	9304      	str	r3, [sp, #16]
 801459c:	69e3      	ldr	r3, [r4, #28]
 801459e:	9303      	str	r3, [sp, #12]
 80145a0:	69a3      	ldr	r3, [r4, #24]
 80145a2:	9302      	str	r3, [sp, #8]
 80145a4:	6963      	ldr	r3, [r4, #20]
 80145a6:	9301      	str	r3, [sp, #4]
 80145a8:	6923      	ldr	r3, [r4, #16]
 80145aa:	9300      	str	r3, [sp, #0]
 80145ac:	68e3      	ldr	r3, [r4, #12]
 80145ae:	68a2      	ldr	r2, [r4, #8]
 80145b0:	6861      	ldr	r1, [r4, #4]
 80145b2:	6820      	ldr	r0, [r4, #0]
 80145b4:	f7ff ffb8 	bl	8014528 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
 80145b8:	6823      	ldr	r3, [r4, #0]
 80145ba:	65dc      	str	r4, [r3, #92]	; 0x5c
	_FOREACH_STATIC_THREAD(thread_data) {
 80145bc:	3430      	adds	r4, #48	; 0x30
 80145be:	e7e6      	b.n	801458e <z_init_static_threads+0x6>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
 80145c0:	f7ff fc68 	bl	8013e94 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 80145c4:	4c0f      	ldr	r4, [pc, #60]	; (8014604 <z_init_static_threads+0x7c>)
 80145c6:	e010      	b.n	80145ea <z_init_static_threads+0x62>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
					    K_MSEC(thread_data->init_delay));
 80145c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80145cc:	17df      	asrs	r7, r3, #31
		} else {
			return t * (to_hz / from_hz);
 80145ce:	00ba      	lsls	r2, r7, #2
 80145d0:	0099      	lsls	r1, r3, #2
 80145d2:	ea42 7093 	orr.w	r0, r2, r3, lsr #30
 80145d6:	18c9      	adds	r1, r1, r3
 80145d8:	eb47 0000 	adc.w	r0, r7, r0
 80145dc:	184a      	adds	r2, r1, r1
 80145de:	eb40 0300 	adc.w	r3, r0, r0
			schedule_new_thread(thread_data->init_thread,
 80145e2:	6820      	ldr	r0, [r4, #0]
 80145e4:	f7ff ff8e 	bl	8014504 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
 80145e8:	3430      	adds	r4, #48	; 0x30
 80145ea:	4b07      	ldr	r3, [pc, #28]	; (8014608 <z_init_static_threads+0x80>)
 80145ec:	429c      	cmp	r4, r3
 80145ee:	d204      	bcs.n	80145fa <z_init_static_threads+0x72>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 80145f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80145f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80145f6:	d0f7      	beq.n	80145e8 <z_init_static_threads+0x60>
 80145f8:	e7e6      	b.n	80145c8 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
 80145fa:	f7ff fca5 	bl	8013f48 <k_sched_unlock>
}
 80145fe:	b006      	add	sp, #24
 8014600:	bdd0      	pop	{r4, r6, r7, pc}
 8014602:	bf00      	nop
 8014604:	2000067c 	.word	0x2000067c
 8014608:	2000067c 	.word	0x2000067c

0801460c <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
 801460c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014610:	b088      	sub	sp, #32
 8014612:	4604      	mov	r4, r0
 8014614:	460d      	mov	r5, r1
 8014616:	4616      	mov	r6, r2
 8014618:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
 801461a:	f008 fa1b 	bl	801ca54 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
 801461e:	f104 0818 	add.w	r8, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8014622:	2200      	movs	r2, #0
 8014624:	2300      	movs	r3, #0
 8014626:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801462a:	9204      	str	r2, [sp, #16]
 801462c:	9703      	str	r7, [sp, #12]
 801462e:	9202      	str	r2, [sp, #8]
 8014630:	9201      	str	r2, [sp, #4]
 8014632:	9400      	str	r4, [sp, #0]
 8014634:	4b06      	ldr	r3, [pc, #24]	; (8014650 <k_work_q_start+0x44>)
 8014636:	4632      	mov	r2, r6
 8014638:	4629      	mov	r1, r5
 801463a:	4640      	mov	r0, r8
 801463c:	f008 fbe5 	bl	801ce0a <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
 8014640:	4904      	ldr	r1, [pc, #16]	; (8014654 <k_work_q_start+0x48>)
 8014642:	4640      	mov	r0, r8
 8014644:	f008 fbd0 	bl	801cde8 <z_impl_k_thread_name_set>
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
 8014648:	b008      	add	sp, #32
 801464a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801464e:	bf00      	nop
 8014650:	0801562f 	.word	0x0801562f
 8014654:	08021e6c 	.word	0x08021e6c

08014658 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
 8014658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801465c:	4605      	mov	r5, r0
 801465e:	460c      	mov	r4, r1
 8014660:	4616      	mov	r6, r2
 8014662:	461f      	mov	r7, r3
	__asm__ volatile(
 8014664:	f04f 0310 	mov.w	r3, #16
 8014668:	f3ef 8911 	mrs	r9, BASEPRI
 801466c:	f383 8811 	msr	BASEPRI, r3
 8014670:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
 8014674:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8014676:	b123      	cbz	r3, 8014682 <k_delayed_work_submit_to_queue+0x2a>
 8014678:	4283      	cmp	r3, r0
 801467a:	d002      	beq.n	8014682 <k_delayed_work_submit_to_queue+0x2a>
		err = -EADDRINUSE;
 801467c:	f06f 082f 	mvn.w	r8, #47	; 0x2f
 8014680:	e00e      	b.n	80146a0 <k_delayed_work_submit_to_queue+0x48>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
 8014682:	42ab      	cmp	r3, r5
 8014684:	d013      	beq.n	80146ae <k_delayed_work_submit_to_queue+0x56>
	int err = 0;
 8014686:	f04f 0800 	mov.w	r8, #0
			goto done;
		}
	}

	/* Attach workqueue so the timeout callback can submit it */
	work->work_q = work_q;
 801468a:	62a5      	str	r5, [r4, #40]	; 0x28

	/* Submit work directly if no delay.  Note that this is a
	 * blocking operation, so release the lock first.
	 */
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 801468c:	ea56 0307 	orrs.w	r3, r6, r7
 8014690:	d01a      	beq.n	80146c8 <k_delayed_work_submit_to_queue+0x70>
#ifdef CONFIG_LEGACY_TIMEOUT_API
	delay = _TICK_ALIGN + k_ms_to_ticks_ceil32(delay);
#endif

	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);
 8014692:	4632      	mov	r2, r6
 8014694:	463b      	mov	r3, r7
 8014696:	491b      	ldr	r1, [pc, #108]	; (8014704 <k_delayed_work_submit_to_queue+0xac>)
 8014698:	f104 0010 	add.w	r0, r4, #16
 801469c:	f000 f87c 	bl	8014798 <z_add_timeout>
	__asm__ volatile(
 80146a0:	f389 8811 	msr	BASEPRI, r9
 80146a4:	f3bf 8f6f 	isb	sy

done:
	k_spin_unlock(&lock, key);
	return err;
}
 80146a8:	4640      	mov	r0, r8
 80146aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err = work_cancel(work);
 80146ae:	4620      	mov	r0, r4
 80146b0:	f008 fbcd 	bl	801ce4e <work_cancel>
 80146b4:	4680      	mov	r8, r0
		if (err == -EALREADY) {
 80146b6:	f110 0f45 	cmn.w	r0, #69	; 0x45
 80146ba:	d002      	beq.n	80146c2 <k_delayed_work_submit_to_queue+0x6a>
		} else if (err < 0) {
 80146bc:	2800      	cmp	r0, #0
 80146be:	dae4      	bge.n	801468a <k_delayed_work_submit_to_queue+0x32>
 80146c0:	e7ee      	b.n	80146a0 <k_delayed_work_submit_to_queue+0x48>
			err = 0;
 80146c2:	f04f 0800 	mov.w	r8, #0
 80146c6:	e7e0      	b.n	801468a <k_delayed_work_submit_to_queue+0x32>
 80146c8:	f389 8811 	msr	BASEPRI, r9
 80146cc:	f3bf 8f6f 	isb	sy
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 80146d0:	f104 0308 	add.w	r3, r4, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 80146d4:	f3bf 8f5b 	dmb	ish
 80146d8:	e853 2f00 	ldrex	r2, [r3]
 80146dc:	f042 0101 	orr.w	r1, r2, #1
 80146e0:	e843 1000 	strex	r0, r1, [r3]
 80146e4:	2800      	cmp	r0, #0
 80146e6:	d1f7      	bne.n	80146d8 <k_delayed_work_submit_to_queue+0x80>
 80146e8:	f3bf 8f5b 	dmb	ish
 80146ec:	f012 0f01 	tst.w	r2, #1
 80146f0:	d002      	beq.n	80146f8 <k_delayed_work_submit_to_queue+0xa0>
		return 0;
 80146f2:	f04f 0800 	mov.w	r8, #0
}
 80146f6:	e7d7      	b.n	80146a8 <k_delayed_work_submit_to_queue+0x50>
		k_queue_append(&work_q->queue, work);
 80146f8:	4621      	mov	r1, r4
 80146fa:	4628      	mov	r0, r5
 80146fc:	f008 f9b6 	bl	801ca6c <k_queue_append>
 8014700:	e7f7      	b.n	80146f2 <k_delayed_work_submit_to_queue+0x9a>
 8014702:	bf00      	nop
 8014704:	0801cef5 	.word	0x0801cef5

08014708 <first>:
	return list->head == list;
 8014708:	4b03      	ldr	r3, [pc, #12]	; (8014718 <first+0x10>)
 801470a:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 801470c:	4298      	cmp	r0, r3
 801470e:	d000      	beq.n	8014712 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
 8014710:	4770      	bx	lr
 8014712:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
 8014714:	e7fc      	b.n	8014710 <first+0x8>
 8014716:	bf00      	nop
 8014718:	20000594 	.word	0x20000594

0801471c <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 801471c:	b130      	cbz	r0, 801472c <next+0x10>
	return (node == list->tail) ? NULL : node->next;
 801471e:	4a04      	ldr	r2, [pc, #16]	; (8014730 <next+0x14>)
 8014720:	6852      	ldr	r2, [r2, #4]
 8014722:	4290      	cmp	r0, r2
 8014724:	d001      	beq.n	801472a <next+0xe>
 8014726:	6800      	ldr	r0, [r0, #0]
 8014728:	4770      	bx	lr
 801472a:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
 801472c:	4770      	bx	lr
 801472e:	bf00      	nop
 8014730:	20000594 	.word	0x20000594

08014734 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
 8014734:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
 8014736:	4b04      	ldr	r3, [pc, #16]	; (8014748 <elapsed+0x14>)
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	b10b      	cbz	r3, 8014740 <elapsed+0xc>
 801473c:	2000      	movs	r0, #0
}
 801473e:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
 8014740:	f7f3 fd88 	bl	8008254 <z_clock_elapsed>
 8014744:	e7fb      	b.n	801473e <elapsed+0xa>
 8014746:	bf00      	nop
 8014748:	200022b0 	.word	0x200022b0

0801474c <next_timeout>:

static int32_t next_timeout(void)
{
 801474c:	b510      	push	{r4, lr}
	struct _timeout *to = first();
 801474e:	f7ff ffdb 	bl	8014708 <first>
 8014752:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
 8014754:	f7ff ffee 	bl	8014734 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
 8014758:	b184      	cbz	r4, 801477c <next_timeout+0x30>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
 801475a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801475e:	1a12      	subs	r2, r2, r0
 8014760:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
 8014764:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8014768:	f173 0100 	sbcs.w	r1, r3, #0
 801476c:	da09      	bge.n	8014782 <next_timeout+0x36>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
 801476e:	4610      	mov	r0, r2
 8014770:	2a00      	cmp	r2, #0
 8014772:	f173 0300 	sbcs.w	r3, r3, #0
 8014776:	da06      	bge.n	8014786 <next_timeout+0x3a>
 8014778:	2000      	movs	r0, #0
 801477a:	e004      	b.n	8014786 <next_timeout+0x3a>
	int32_t ret = to == NULL ? MAX_WAIT
 801477c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8014780:	e001      	b.n	8014786 <next_timeout+0x3a>
 8014782:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8014786:	4b03      	ldr	r3, [pc, #12]	; (8014794 <next_timeout+0x48>)
 8014788:	691b      	ldr	r3, [r3, #16]
 801478a:	b113      	cbz	r3, 8014792 <next_timeout+0x46>
 801478c:	4283      	cmp	r3, r0
 801478e:	da00      	bge.n	8014792 <next_timeout+0x46>
		ret = _current_cpu->slice_ticks;
 8014790:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
 8014792:	bd10      	pop	{r4, pc}
 8014794:	20002278 	.word	0x20002278

08014798 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
 8014798:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801479c:	4680      	mov	r8, r0
 801479e:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80147a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80147a4:	bf08      	it	eq
 80147a6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 80147aa:	d07e      	beq.n	80148aa <z_add_timeout+0x112>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
 80147ac:	1c54      	adds	r4, r2, #1
 80147ae:	f143 0500 	adc.w	r5, r3, #0

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
 80147b2:	f06f 0301 	mvn.w	r3, #1
 80147b6:	1b1e      	subs	r6, r3, r4
 80147b8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80147bc:	eb6a 0705 	sbc.w	r7, sl, r5
 80147c0:	2e00      	cmp	r6, #0
 80147c2:	f177 0300 	sbcs.w	r3, r7, #0
 80147c6:	da11      	bge.n	80147ec <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 80147c8:	f8c8 9008 	str.w	r9, [r8, #8]
	ticks = MAX(1, ticks);
 80147cc:	4626      	mov	r6, r4
 80147ce:	462f      	mov	r7, r5
 80147d0:	2c01      	cmp	r4, #1
 80147d2:	f175 0300 	sbcs.w	r3, r5, #0
 80147d6:	db1b      	blt.n	8014810 <z_add_timeout+0x78>

	LOCKED(&timeout_lock) {
 80147d8:	2300      	movs	r3, #0
	__asm__ volatile(
 80147da:	f04f 0210 	mov.w	r2, #16
 80147de:	f3ef 8911 	mrs	r9, BASEPRI
 80147e2:	f382 8811 	msr	BASEPRI, r2
 80147e6:	f3bf 8f6f 	isb	sy
 80147ea:	e02e      	b.n	801484a <z_add_timeout+0xb2>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
 80147ec:	f7ff ffa2 	bl	8014734 <elapsed>
 80147f0:	4b2f      	ldr	r3, [pc, #188]	; (80148b0 <z_add_timeout+0x118>)
 80147f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147f6:	1812      	adds	r2, r2, r0
 80147f8:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 80147fc:	4619      	mov	r1, r3
 80147fe:	18a2      	adds	r2, r4, r2
 8014800:	eb45 0101 	adc.w	r1, r5, r1
 8014804:	f06f 0301 	mvn.w	r3, #1
 8014808:	1a9c      	subs	r4, r3, r2
 801480a:	eb6a 0501 	sbc.w	r5, sl, r1
 801480e:	e7db      	b.n	80147c8 <z_add_timeout+0x30>
	ticks = MAX(1, ticks);
 8014810:	2601      	movs	r6, #1
 8014812:	2700      	movs	r7, #0
 8014814:	e7e0      	b.n	80147d8 <z_add_timeout+0x40>
		struct _timeout *t;

		to->dticks = ticks + elapsed();
		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
 8014816:	ebb4 020a 	subs.w	r2, r4, sl
 801481a:	eb65 030b 	sbc.w	r3, r5, fp
 801481e:	6102      	str	r2, [r0, #16]
 8014820:	6143      	str	r3, [r0, #20]
	node->prev = successor->prev;
 8014822:	6843      	ldr	r3, [r0, #4]
 8014824:	f8c8 3004 	str.w	r3, [r8, #4]
	node->next = successor;
 8014828:	f8c8 0000 	str.w	r0, [r8]
	successor->prev->next = node;
 801482c:	6843      	ldr	r3, [r0, #4]
 801482e:	f8c3 8000 	str.w	r8, [r3]
	successor->prev = node;
 8014832:	f8c0 8004 	str.w	r8, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
 8014836:	b338      	cbz	r0, 8014888 <z_add_timeout+0xf0>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8014838:	f7ff ff66 	bl	8014708 <first>
 801483c:	4580      	cmp	r8, r0
 801483e:	d02e      	beq.n	801489e <z_add_timeout+0x106>
	__asm__ volatile(
 8014840:	f389 8811 	msr	BASEPRI, r9
 8014844:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 8014848:	2301      	movs	r3, #1
 801484a:	bb73      	cbnz	r3, 80148aa <z_add_timeout+0x112>
		to->dticks = ticks + elapsed();
 801484c:	f7ff ff72 	bl	8014734 <elapsed>
 8014850:	1832      	adds	r2, r6, r0
 8014852:	eb47 73e0 	adc.w	r3, r7, r0, asr #31
 8014856:	e9c8 2304 	strd	r2, r3, [r8, #16]
		for (t = first(); t != NULL; t = next(t)) {
 801485a:	f7ff ff55 	bl	8014708 <first>
 801485e:	2800      	cmp	r0, #0
 8014860:	d0e9      	beq.n	8014836 <z_add_timeout+0x9e>
			if (t->dticks > to->dticks) {
 8014862:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8014866:	e9d8 ab04 	ldrd	sl, fp, [r8, #16]
 801486a:	45a2      	cmp	sl, r4
 801486c:	eb7b 0305 	sbcs.w	r3, fp, r5
 8014870:	dbd1      	blt.n	8014816 <z_add_timeout+0x7e>
			to->dticks -= t->dticks;
 8014872:	ebba 0204 	subs.w	r2, sl, r4
 8014876:	eb6b 0305 	sbc.w	r3, fp, r5
 801487a:	f8c8 2010 	str.w	r2, [r8, #16]
 801487e:	f8c8 3014 	str.w	r3, [r8, #20]
		for (t = first(); t != NULL; t = next(t)) {
 8014882:	f7ff ff4b 	bl	801471c <next>
 8014886:	e7ea      	b.n	801485e <z_add_timeout+0xc6>
	node->next = list;
 8014888:	4b0a      	ldr	r3, [pc, #40]	; (80148b4 <z_add_timeout+0x11c>)
 801488a:	f8c8 3000 	str.w	r3, [r8]
	node->prev = list->tail;
 801488e:	685a      	ldr	r2, [r3, #4]
 8014890:	f8c8 2004 	str.w	r2, [r8, #4]
	list->tail->next = node;
 8014894:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
 8014898:	f8c3 8004 	str.w	r8, [r3, #4]
}
 801489c:	e7cc      	b.n	8014838 <z_add_timeout+0xa0>
			z_clock_set_timeout(next_timeout(), false);
 801489e:	f7ff ff55 	bl	801474c <next_timeout>
 80148a2:	2100      	movs	r1, #0
 80148a4:	f7f3 fc5e 	bl	8008164 <z_clock_set_timeout>
 80148a8:	e7ca      	b.n	8014840 <z_add_timeout+0xa8>
		}
	}
}
 80148aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148ae:	bf00      	nop
 80148b0:	20001498 	.word	0x20001498
 80148b4:	20000594 	.word	0x20000594

080148b8 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
 80148b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148ba:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 80148bc:	f7ff fc04 	bl	80140c8 <z_time_slice>
	__asm__ volatile(
 80148c0:	f04f 0310 	mov.w	r3, #16
 80148c4:	f3ef 8511 	mrs	r5, BASEPRI
 80148c8:	f383 8811 	msr	BASEPRI, r3
 80148cc:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 80148d0:	4b28      	ldr	r3, [pc, #160]	; (8014974 <z_clock_announce+0xbc>)
 80148d2:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
 80148d4:	f7ff ff18 	bl	8014708 <first>
 80148d8:	4604      	mov	r4, r0
 80148da:	b350      	cbz	r0, 8014932 <z_clock_announce+0x7a>
 80148dc:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
 80148e0:	4b24      	ldr	r3, [pc, #144]	; (8014974 <z_clock_announce+0xbc>)
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	17d9      	asrs	r1, r3, #31
 80148e6:	42b3      	cmp	r3, r6
 80148e8:	eb71 0207 	sbcs.w	r2, r1, r7
 80148ec:	db21      	blt.n	8014932 <z_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 80148ee:	4a22      	ldr	r2, [pc, #136]	; (8014978 <z_clock_announce+0xc0>)
 80148f0:	e9d2 0100 	ldrd	r0, r1, [r2]
 80148f4:	1980      	adds	r0, r0, r6
 80148f6:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
 80148fa:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
 80148fe:	1b9b      	subs	r3, r3, r6
 8014900:	4a1c      	ldr	r2, [pc, #112]	; (8014974 <z_clock_announce+0xbc>)
 8014902:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
 8014904:	2200      	movs	r2, #0
 8014906:	2300      	movs	r3, #0
 8014908:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
 801490c:	4620      	mov	r0, r4
 801490e:	f008 fb28 	bl	801cf62 <remove_timeout>
	__asm__ volatile(
 8014912:	f385 8811 	msr	BASEPRI, r5
 8014916:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
 801491a:	68a3      	ldr	r3, [r4, #8]
 801491c:	4620      	mov	r0, r4
 801491e:	4798      	blx	r3
	__asm__ volatile(
 8014920:	f04f 0310 	mov.w	r3, #16
 8014924:	f3ef 8511 	mrs	r5, BASEPRI
 8014928:	f383 8811 	msr	BASEPRI, r3
 801492c:	f3bf 8f6f 	isb	sy
 8014930:	e7d0      	b.n	80148d4 <z_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
 8014932:	b144      	cbz	r4, 8014946 <z_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
 8014934:	4b0f      	ldr	r3, [pc, #60]	; (8014974 <z_clock_announce+0xbc>)
 8014936:	6819      	ldr	r1, [r3, #0]
 8014938:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801493c:	1a52      	subs	r2, r2, r1
 801493e:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 8014942:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
 8014946:	480c      	ldr	r0, [pc, #48]	; (8014978 <z_clock_announce+0xc0>)
 8014948:	490a      	ldr	r1, [pc, #40]	; (8014974 <z_clock_announce+0xbc>)
 801494a:	680c      	ldr	r4, [r1, #0]
 801494c:	e9d0 2300 	ldrd	r2, r3, [r0]
 8014950:	1912      	adds	r2, r2, r4
 8014952:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
 8014956:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
 801495a:	2400      	movs	r4, #0
 801495c:	600c      	str	r4, [r1, #0]

	z_clock_set_timeout(next_timeout(), false);
 801495e:	f7ff fef5 	bl	801474c <next_timeout>
 8014962:	4621      	mov	r1, r4
 8014964:	f7f3 fbfe 	bl	8008164 <z_clock_set_timeout>
	__asm__ volatile(
 8014968:	f385 8811 	msr	BASEPRI, r5
 801496c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 8014970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014972:	bf00      	nop
 8014974:	200022b0 	.word	0x200022b0
 8014978:	20001498 	.word	0x20001498

0801497c <z_tick_get>:

int64_t z_tick_get(void)
{
 801497c:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
 801497e:	2100      	movs	r1, #0
	__asm__ volatile(
 8014980:	f04f 0310 	mov.w	r3, #16
 8014984:	f3ef 8411 	mrs	r4, BASEPRI
 8014988:	f383 8811 	msr	BASEPRI, r3
 801498c:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
 8014990:	2200      	movs	r2, #0
 8014992:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
 8014994:	b969      	cbnz	r1, 80149b2 <z_tick_get+0x36>
		t = curr_tick + z_clock_elapsed();
 8014996:	f7f3 fc5d 	bl	8008254 <z_clock_elapsed>
 801499a:	4b07      	ldr	r3, [pc, #28]	; (80149b8 <z_tick_get+0x3c>)
 801499c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149a0:	1812      	adds	r2, r2, r0
 80149a2:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
 80149a6:	f384 8811 	msr	BASEPRI, r4
 80149aa:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 80149ae:	2101      	movs	r1, #1
 80149b0:	e7f0      	b.n	8014994 <z_tick_get+0x18>
	}
	return t;
}
 80149b2:	4610      	mov	r0, r2
 80149b4:	4619      	mov	r1, r3
 80149b6:	bd10      	pop	{r4, pc}
 80149b8:	20001498 	.word	0x20001498

080149bc <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 80149bc:	b510      	push	{r4, lr}
 80149be:	4604      	mov	r4, r0

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 80149c0:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 80149c4:	ea52 0103 	orrs.w	r1, r2, r3
 80149c8:	d005      	beq.n	80149d6 <z_timer_expiration_handler+0x1a>
 80149ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80149ce:	bf08      	it	eq
 80149d0:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 80149d4:	d115      	bne.n	8014a02 <z_timer_expiration_handler+0x46>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
 80149d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80149d8:	3301      	adds	r3, #1
 80149da:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 80149dc:	6a23      	ldr	r3, [r4, #32]
 80149de:	b10b      	cbz	r3, 80149e4 <z_timer_expiration_handler+0x28>
		timer->expiry_fn(timer);
 80149e0:	4620      	mov	r0, r4
 80149e2:	4798      	blx	r3
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 80149e4:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
 80149e8:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80149ea:	42a3      	cmp	r3, r4
 80149ec:	d008      	beq.n	8014a00 <z_timer_expiration_handler+0x44>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 80149ee:	b13c      	cbz	r4, 8014a00 <z_timer_expiration_handler+0x44>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
 80149f0:	4620      	mov	r0, r4
 80149f2:	f008 f8a8 	bl	801cb46 <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
 80149f6:	4620      	mov	r0, r4
 80149f8:	f008 f8fc 	bl	801cbf4 <z_ready_thread>
 80149fc:	2300      	movs	r3, #0
 80149fe:	6723      	str	r3, [r4, #112]	; 0x70

	arch_thread_return_value_set(thread, 0);
}
 8014a00:	bd10      	pop	{r4, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8014a02:	4902      	ldr	r1, [pc, #8]	; (8014a0c <z_timer_expiration_handler+0x50>)
 8014a04:	f7ff fec8 	bl	8014798 <z_add_timeout>
 8014a08:	e7e5      	b.n	80149d6 <z_timer_expiration_handler+0x1a>
 8014a0a:	bf00      	nop
 8014a0c:	080149bd 	.word	0x080149bd

08014a10 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 8014a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a14:	b087      	sub	sp, #28
 8014a16:	4614      	mov	r4, r2
 8014a18:	461d      	mov	r5, r3
 8014a1a:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 8014a1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014a22:	bf08      	it	eq
 8014a24:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8014a28:	d02f      	beq.n	8014a8a <z_impl_k_timer_start+0x7a>
 8014a2a:	4606      	mov	r6, r0
 8014a2c:	4613      	mov	r3, r2
 8014a2e:	462a      	mov	r2, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
 8014a30:	ea58 0109 	orrs.w	r1, r8, r9
 8014a34:	d00f      	beq.n	8014a56 <z_impl_k_timer_start+0x46>
 8014a36:	f06f 0001 	mvn.w	r0, #1
 8014a3a:	ebb0 0008 	subs.w	r0, r0, r8
 8014a3e:	9000      	str	r0, [sp, #0]
 8014a40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8014a44:	eb61 0009 	sbc.w	r0, r1, r9
 8014a48:	9001      	str	r0, [sp, #4]
 8014a4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014a4e:	2800      	cmp	r0, #0
 8014a50:	f171 0100 	sbcs.w	r1, r1, #0
 8014a54:	db1c      	blt.n	8014a90 <z_impl_k_timer_start+0x80>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 8014a56:	f06f 0101 	mvn.w	r1, #1
 8014a5a:	ebb1 0a03 	subs.w	sl, r1, r3
 8014a5e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8014a62:	eb61 0b02 	sbc.w	fp, r1, r2
 8014a66:	f1ba 0f00 	cmp.w	sl, #0
 8014a6a:	f17b 0100 	sbcs.w	r1, fp, #0
 8014a6e:	db23      	blt.n	8014ab8 <z_impl_k_timer_start+0xa8>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
 8014a70:	4630      	mov	r0, r6
 8014a72:	f008 fa8e 	bl	801cf92 <z_abort_timeout>
	timer->period = period;
 8014a76:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
	timer->status = 0U;
 8014a7a:	2300      	movs	r3, #0
 8014a7c:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8014a7e:	4622      	mov	r2, r4
 8014a80:	462b      	mov	r3, r5
 8014a82:	4917      	ldr	r1, [pc, #92]	; (8014ae0 <z_impl_k_timer_start+0xd0>)
 8014a84:	4630      	mov	r0, r6
 8014a86:	f7ff fe87 	bl	8014798 <z_add_timeout>
		     duration);
}
 8014a8a:	b007      	add	sp, #28
 8014a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		period.ticks = MAX(period.ticks - 1, 1);
 8014a90:	f118 31ff 	adds.w	r1, r8, #4294967295	; 0xffffffff
 8014a94:	9104      	str	r1, [sp, #16]
 8014a96:	f149 31ff 	adc.w	r1, r9, #4294967295	; 0xffffffff
 8014a9a:	9105      	str	r1, [sp, #20]
 8014a9c:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
 8014aa0:	4638      	mov	r0, r7
 8014aa2:	4641      	mov	r1, r8
 8014aa4:	2f01      	cmp	r7, #1
 8014aa6:	f178 0700 	sbcs.w	r7, r8, #0
 8014aaa:	db02      	blt.n	8014ab2 <z_impl_k_timer_start+0xa2>
 8014aac:	4680      	mov	r8, r0
 8014aae:	4689      	mov	r9, r1
 8014ab0:	e7d1      	b.n	8014a56 <z_impl_k_timer_start+0x46>
 8014ab2:	2001      	movs	r0, #1
 8014ab4:	2100      	movs	r1, #0
 8014ab6:	e7f9      	b.n	8014aac <z_impl_k_timer_start+0x9c>
		duration.ticks = MAX(duration.ticks - 1, 0);
 8014ab8:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8014abc:	9302      	str	r3, [sp, #8]
 8014abe:	f142 33ff 	adc.w	r3, r2, #4294967295	; 0xffffffff
 8014ac2:	9303      	str	r3, [sp, #12]
 8014ac4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014ac8:	4602      	mov	r2, r0
 8014aca:	460b      	mov	r3, r1
 8014acc:	2800      	cmp	r0, #0
 8014ace:	f171 0100 	sbcs.w	r1, r1, #0
 8014ad2:	db02      	blt.n	8014ada <z_impl_k_timer_start+0xca>
 8014ad4:	4614      	mov	r4, r2
 8014ad6:	461d      	mov	r5, r3
 8014ad8:	e7ca      	b.n	8014a70 <z_impl_k_timer_start+0x60>
 8014ada:	2200      	movs	r2, #0
 8014adc:	4613      	mov	r3, r2
 8014ade:	e7f9      	b.n	8014ad4 <z_impl_k_timer_start+0xc4>
 8014ae0:	080149bd 	.word	0x080149bd

08014ae4 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
 8014ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ae8:	b08f      	sub	sp, #60	; 0x3c
 8014aea:	4605      	mov	r5, r0
 8014aec:	9106      	str	r1, [sp, #24]
 8014aee:	4690      	mov	r8, r2
 8014af0:	4699      	mov	r9, r3
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
 8014af2:	2301      	movs	r3, #1
 8014af4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
				  .thread     = _current,
 8014af8:	4b9d      	ldr	r3, [pc, #628]	; (8014d70 <z_impl_k_poll+0x28c>)
 8014afa:	689b      	ldr	r3, [r3, #8]
	struct _poller poller = { .is_polling = true,
 8014afc:	930c      	str	r3, [sp, #48]	; 0x30
 8014afe:	4b9d      	ldr	r3, [pc, #628]	; (8014d74 <z_impl_k_poll+0x290>)
 8014b00:	930d      	str	r3, [sp, #52]	; 0x34

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, &poller,
 8014b02:	ea59 0302 	orrs.w	r3, r9, r2
 8014b06:	bf0c      	ite	eq
 8014b08:	2301      	moveq	r3, #1
 8014b0a:	2300      	movne	r3, #0
 8014b0c:	9303      	str	r3, [sp, #12]
	for (int ii = 0; ii < num_events; ii++) {
 8014b0e:	2700      	movs	r7, #0
	int events_registered = 0;
 8014b10:	463e      	mov	r6, r7
 8014b12:	e9cd 8904 	strd	r8, r9, [sp, #16]
	for (int ii = 0; ii < num_events; ii++) {
 8014b16:	e01e      	b.n	8014b56 <z_impl_k_poll+0x72>
		if (k_sem_count_get(event->sem) > 0) {
 8014b18:	6923      	ldr	r3, [r4, #16]
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
 8014b1a:	689b      	ldr	r3, [r3, #8]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d036      	beq.n	8014b8e <z_impl_k_poll+0xaa>
			*state = K_POLL_STATE_SEM_AVAILABLE;
 8014b20:	2302      	movs	r3, #2
 8014b22:	9302      	str	r3, [sp, #8]
			return true;
 8014b24:	2301      	movs	r3, #1
 8014b26:	e032      	b.n	8014b8e <z_impl_k_poll+0xaa>
		if (!k_queue_is_empty(event->queue)) {
 8014b28:	6923      	ldr	r3, [r4, #16]
	return list->head;
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	b37b      	cbz	r3, 8014b8e <z_impl_k_poll+0xaa>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
 8014b2e:	2304      	movs	r3, #4
 8014b30:	9302      	str	r3, [sp, #8]
			return true;
 8014b32:	2301      	movs	r3, #1
 8014b34:	e02b      	b.n	8014b8e <z_impl_k_poll+0xaa>
		if (event->signal->signaled != 0U) {
 8014b36:	6923      	ldr	r3, [r4, #16]
 8014b38:	689b      	ldr	r3, [r3, #8]
 8014b3a:	b343      	cbz	r3, 8014b8e <z_impl_k_poll+0xaa>
			*state = K_POLL_STATE_SIGNALED;
 8014b3c:	2301      	movs	r3, #1
 8014b3e:	9302      	str	r3, [sp, #8]
 8014b40:	e025      	b.n	8014b8e <z_impl_k_poll+0xaa>
		} else if (!just_check && poller->is_polling) {
 8014b42:	9b03      	ldr	r3, [sp, #12]
 8014b44:	b913      	cbnz	r3, 8014b4c <z_impl_k_poll+0x68>
 8014b46:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8014b4a:	bb7b      	cbnz	r3, 8014bac <z_impl_k_poll+0xc8>
 8014b4c:	f38a 8811 	msr	BASEPRI, sl
 8014b50:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
 8014b54:	3701      	adds	r7, #1
 8014b56:	9b06      	ldr	r3, [sp, #24]
 8014b58:	42bb      	cmp	r3, r7
 8014b5a:	f340 8135 	ble.w	8014dc8 <z_impl_k_poll+0x2e4>
	__asm__ volatile(
 8014b5e:	f04f 0310 	mov.w	r3, #16
 8014b62:	f3ef 8a11 	mrs	sl, BASEPRI
 8014b66:	f383 8811 	msr	BASEPRI, r3
 8014b6a:	f3bf 8f6f 	isb	sy
		if (is_condition_met(&events[ii], &state)) {
 8014b6e:	eb07 0487 	add.w	r4, r7, r7, lsl #2
 8014b72:	ea4f 0984 	mov.w	r9, r4, lsl #2
 8014b76:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	switch (event->type) {
 8014b7a:	7b63      	ldrb	r3, [r4, #13]
 8014b7c:	f003 030f 	and.w	r3, r3, #15
 8014b80:	2b02      	cmp	r3, #2
 8014b82:	d0c9      	beq.n	8014b18 <z_impl_k_poll+0x34>
 8014b84:	2b04      	cmp	r3, #4
 8014b86:	d0cf      	beq.n	8014b28 <z_impl_k_poll+0x44>
 8014b88:	2b01      	cmp	r3, #1
 8014b8a:	d0d4      	beq.n	8014b36 <z_impl_k_poll+0x52>
 8014b8c:	2300      	movs	r3, #0
		if (is_condition_met(&events[ii], &state)) {
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d0d7      	beq.n	8014b42 <z_impl_k_poll+0x5e>
	event->poller = NULL;
 8014b92:	2100      	movs	r1, #0
 8014b94:	60a1      	str	r1, [r4, #8]
	event->state |= state;
 8014b96:	68e3      	ldr	r3, [r4, #12]
 8014b98:	f3c3 3204 	ubfx	r2, r3, #12, #5
 8014b9c:	9802      	ldr	r0, [sp, #8]
 8014b9e:	4302      	orrs	r2, r0
 8014ba0:	f362 3310 	bfi	r3, r2, #12, #5
 8014ba4:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
 8014ba6:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8014baa:	e7cf      	b.n	8014b4c <z_impl_k_poll+0x68>
	switch (event->type) {
 8014bac:	7b63      	ldrb	r3, [r4, #13]
 8014bae:	f003 030f 	and.w	r3, r3, #15
 8014bb2:	2b02      	cmp	r3, #2
 8014bb4:	d008      	beq.n	8014bc8 <z_impl_k_poll+0xe4>
 8014bb6:	2b04      	cmp	r3, #4
 8014bb8:	d05d      	beq.n	8014c76 <z_impl_k_poll+0x192>
 8014bba:	2b01      	cmp	r3, #1
 8014bbc:	f000 80b2 	beq.w	8014d24 <z_impl_k_poll+0x240>
	event->poller = poller;
 8014bc0:	ab0b      	add	r3, sp, #44	; 0x2c
 8014bc2:	60a3      	str	r3, [r4, #8]
				events_registered += 1;
 8014bc4:	3601      	adds	r6, #1
 8014bc6:	e7c1      	b.n	8014b4c <z_impl_k_poll+0x68>
		add_event(&event->sem->poll_events, event, poller);
 8014bc8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014bcc:	f10b 0210 	add.w	r2, fp, #16
 8014bd0:	9207      	str	r2, [sp, #28]
	return list->head == list;
 8014bd2:	f8db 3010 	ldr.w	r3, [fp, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 8014bd6:	429a      	cmp	r2, r3
 8014bd8:	d023      	beq.n	8014c22 <z_impl_k_poll+0x13e>
 8014bda:	f8db 3014 	ldr.w	r3, [fp, #20]
	if ((pending == NULL) ||
 8014bde:	b303      	cbz	r3, 8014c22 <z_impl_k_poll+0x13e>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
 8014be0:	689b      	ldr	r3, [r3, #8]
 8014be2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014be4:	6858      	ldr	r0, [r3, #4]
 8014be6:	f007 ff8d 	bl	801cb04 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
 8014bea:	b9d0      	cbnz	r0, 8014c22 <z_impl_k_poll+0x13e>
	return list->head == list;
 8014bec:	f8db b010 	ldr.w	fp, [fp, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8014bf0:	9b07      	ldr	r3, [sp, #28]
 8014bf2:	455b      	cmp	r3, fp
 8014bf4:	d02a      	beq.n	8014c4c <z_impl_k_poll+0x168>
 8014bf6:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8014bfa:	465b      	mov	r3, fp
 8014bfc:	46a3      	mov	fp, r4
 8014bfe:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8014c00:	b364      	cbz	r4, 8014c5c <z_impl_k_poll+0x178>
						pending->poller->thread)) {
 8014c02:	68a3      	ldr	r3, [r4, #8]
		if (z_is_t1_higher_prio_than_t2(poller->thread,
 8014c04:	6859      	ldr	r1, [r3, #4]
 8014c06:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014c08:	f007 ff7c 	bl	801cb04 <z_is_t1_higher_prio_than_t2>
 8014c0c:	b988      	cbnz	r0, 8014c32 <z_impl_k_poll+0x14e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8014c0e:	b33c      	cbz	r4, 8014c60 <z_impl_k_poll+0x17c>
	return (node == list->tail) ? NULL : node->next;
 8014c10:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014c14:	429c      	cmp	r4, r3
 8014c16:	d02c      	beq.n	8014c72 <z_impl_k_poll+0x18e>
 8014c18:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8014c1a:	2c00      	cmp	r4, #0
 8014c1c:	d1f0      	bne.n	8014c00 <z_impl_k_poll+0x11c>
 8014c1e:	465c      	mov	r4, fp
 8014c20:	e01f      	b.n	8014c62 <z_impl_k_poll+0x17e>
	node->next = list;
 8014c22:	9a07      	ldr	r2, [sp, #28]
 8014c24:	f845 2009 	str.w	r2, [r5, r9]
	node->prev = list->tail;
 8014c28:	6853      	ldr	r3, [r2, #4]
 8014c2a:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
 8014c2c:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8014c2e:	6054      	str	r4, [r2, #4]
		return;
 8014c30:	e7c6      	b.n	8014bc0 <z_impl_k_poll+0xdc>
 8014c32:	4623      	mov	r3, r4
 8014c34:	465c      	mov	r4, fp
 8014c36:	469b      	mov	fp, r3
	node->prev = successor->prev;
 8014c38:	685b      	ldr	r3, [r3, #4]
 8014c3a:	6063      	str	r3, [r4, #4]
	node->next = successor;
 8014c3c:	f845 b009 	str.w	fp, [r5, r9]
	successor->prev->next = node;
 8014c40:	f8db 3004 	ldr.w	r3, [fp, #4]
 8014c44:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8014c46:	f8cb 4004 	str.w	r4, [fp, #4]
			return;
 8014c4a:	e7b9      	b.n	8014bc0 <z_impl_k_poll+0xdc>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8014c4c:	f04f 0b00 	mov.w	fp, #0
 8014c50:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8014c54:	465b      	mov	r3, fp
 8014c56:	46a3      	mov	fp, r4
 8014c58:	461c      	mov	r4, r3
 8014c5a:	e7d1      	b.n	8014c00 <z_impl_k_poll+0x11c>
 8014c5c:	465c      	mov	r4, fp
 8014c5e:	e000      	b.n	8014c62 <z_impl_k_poll+0x17e>
 8014c60:	465c      	mov	r4, fp
	node->next = list;
 8014c62:	9a07      	ldr	r2, [sp, #28]
 8014c64:	f845 2009 	str.w	r2, [r5, r9]
	node->prev = list->tail;
 8014c68:	6853      	ldr	r3, [r2, #4]
 8014c6a:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
 8014c6c:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8014c6e:	6054      	str	r4, [r2, #4]
}
 8014c70:	e7a6      	b.n	8014bc0 <z_impl_k_poll+0xdc>
 8014c72:	465c      	mov	r4, fp
 8014c74:	e7f5      	b.n	8014c62 <z_impl_k_poll+0x17e>
		add_event(&event->queue->poll_events, event, poller);
 8014c76:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014c7a:	f10b 0210 	add.w	r2, fp, #16
 8014c7e:	9207      	str	r2, [sp, #28]
	return list->head == list;
 8014c80:	f8db 3010 	ldr.w	r3, [fp, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 8014c84:	429a      	cmp	r2, r3
 8014c86:	d023      	beq.n	8014cd0 <z_impl_k_poll+0x1ec>
 8014c88:	f8db 3014 	ldr.w	r3, [fp, #20]
	if ((pending == NULL) ||
 8014c8c:	b303      	cbz	r3, 8014cd0 <z_impl_k_poll+0x1ec>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
 8014c8e:	689b      	ldr	r3, [r3, #8]
 8014c90:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014c92:	6858      	ldr	r0, [r3, #4]
 8014c94:	f007 ff36 	bl	801cb04 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
 8014c98:	b9d0      	cbnz	r0, 8014cd0 <z_impl_k_poll+0x1ec>
	return list->head == list;
 8014c9a:	f8db b010 	ldr.w	fp, [fp, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8014c9e:	9b07      	ldr	r3, [sp, #28]
 8014ca0:	455b      	cmp	r3, fp
 8014ca2:	d02a      	beq.n	8014cfa <z_impl_k_poll+0x216>
 8014ca4:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8014ca8:	465b      	mov	r3, fp
 8014caa:	46a3      	mov	fp, r4
 8014cac:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8014cae:	b364      	cbz	r4, 8014d0a <z_impl_k_poll+0x226>
						pending->poller->thread)) {
 8014cb0:	68a3      	ldr	r3, [r4, #8]
		if (z_is_t1_higher_prio_than_t2(poller->thread,
 8014cb2:	6859      	ldr	r1, [r3, #4]
 8014cb4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014cb6:	f007 ff25 	bl	801cb04 <z_is_t1_higher_prio_than_t2>
 8014cba:	b988      	cbnz	r0, 8014ce0 <z_impl_k_poll+0x1fc>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8014cbc:	b33c      	cbz	r4, 8014d0e <z_impl_k_poll+0x22a>
	return (node == list->tail) ? NULL : node->next;
 8014cbe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014cc2:	429c      	cmp	r4, r3
 8014cc4:	d02c      	beq.n	8014d20 <z_impl_k_poll+0x23c>
 8014cc6:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8014cc8:	2c00      	cmp	r4, #0
 8014cca:	d1f0      	bne.n	8014cae <z_impl_k_poll+0x1ca>
 8014ccc:	465c      	mov	r4, fp
 8014cce:	e01f      	b.n	8014d10 <z_impl_k_poll+0x22c>
	node->next = list;
 8014cd0:	9a07      	ldr	r2, [sp, #28]
 8014cd2:	f845 2009 	str.w	r2, [r5, r9]
	node->prev = list->tail;
 8014cd6:	6853      	ldr	r3, [r2, #4]
 8014cd8:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
 8014cda:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8014cdc:	6054      	str	r4, [r2, #4]
		return;
 8014cde:	e76f      	b.n	8014bc0 <z_impl_k_poll+0xdc>
 8014ce0:	4623      	mov	r3, r4
 8014ce2:	465c      	mov	r4, fp
 8014ce4:	469b      	mov	fp, r3
	node->prev = successor->prev;
 8014ce6:	685b      	ldr	r3, [r3, #4]
 8014ce8:	6063      	str	r3, [r4, #4]
	node->next = successor;
 8014cea:	f845 b009 	str.w	fp, [r5, r9]
	successor->prev->next = node;
 8014cee:	f8db 3004 	ldr.w	r3, [fp, #4]
 8014cf2:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8014cf4:	f8cb 4004 	str.w	r4, [fp, #4]
			return;
 8014cf8:	e762      	b.n	8014bc0 <z_impl_k_poll+0xdc>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8014cfa:	f04f 0b00 	mov.w	fp, #0
 8014cfe:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8014d02:	465b      	mov	r3, fp
 8014d04:	46a3      	mov	fp, r4
 8014d06:	461c      	mov	r4, r3
 8014d08:	e7d1      	b.n	8014cae <z_impl_k_poll+0x1ca>
 8014d0a:	465c      	mov	r4, fp
 8014d0c:	e000      	b.n	8014d10 <z_impl_k_poll+0x22c>
 8014d0e:	465c      	mov	r4, fp
	node->next = list;
 8014d10:	9a07      	ldr	r2, [sp, #28]
 8014d12:	f845 2009 	str.w	r2, [r5, r9]
	node->prev = list->tail;
 8014d16:	6853      	ldr	r3, [r2, #4]
 8014d18:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
 8014d1a:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8014d1c:	6054      	str	r4, [r2, #4]
}
 8014d1e:	e74f      	b.n	8014bc0 <z_impl_k_poll+0xdc>
 8014d20:	465c      	mov	r4, fp
 8014d22:	e7f5      	b.n	8014d10 <z_impl_k_poll+0x22c>
		add_event(&event->signal->poll_events, event, poller);
 8014d24:	f8d4 b010 	ldr.w	fp, [r4, #16]
	return list->head == list;
 8014d28:	f8db 3000 	ldr.w	r3, [fp]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 8014d2c:	459b      	cmp	fp, r3
 8014d2e:	d023      	beq.n	8014d78 <z_impl_k_poll+0x294>
 8014d30:	f8db 3004 	ldr.w	r3, [fp, #4]
	if ((pending == NULL) ||
 8014d34:	b303      	cbz	r3, 8014d78 <z_impl_k_poll+0x294>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
 8014d36:	689b      	ldr	r3, [r3, #8]
 8014d38:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014d3a:	6858      	ldr	r0, [r3, #4]
 8014d3c:	f007 fee2 	bl	801cb04 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
 8014d40:	b9d0      	cbnz	r0, 8014d78 <z_impl_k_poll+0x294>
	return list->head == list;
 8014d42:	f8db 3000 	ldr.w	r3, [fp]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8014d46:	459b      	cmp	fp, r3
 8014d48:	d02c      	beq.n	8014da4 <z_impl_k_poll+0x2c0>
 8014d4a:	46a0      	mov	r8, r4
 8014d4c:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8014d4e:	b36c      	cbz	r4, 8014dac <z_impl_k_poll+0x2c8>
						pending->poller->thread)) {
 8014d50:	68a3      	ldr	r3, [r4, #8]
		if (z_is_t1_higher_prio_than_t2(poller->thread,
 8014d52:	6859      	ldr	r1, [r3, #4]
 8014d54:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014d56:	f007 fed5 	bl	801cb04 <z_is_t1_higher_prio_than_t2>
 8014d5a:	b9b0      	cbnz	r0, 8014d8a <z_impl_k_poll+0x2a6>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8014d5c:	b344      	cbz	r4, 8014db0 <z_impl_k_poll+0x2cc>
	return (node == list->tail) ? NULL : node->next;
 8014d5e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8014d62:	429c      	cmp	r4, r3
 8014d64:	d02e      	beq.n	8014dc4 <z_impl_k_poll+0x2e0>
 8014d66:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8014d68:	2c00      	cmp	r4, #0
 8014d6a:	d1f0      	bne.n	8014d4e <z_impl_k_poll+0x26a>
 8014d6c:	4644      	mov	r4, r8
 8014d6e:	e020      	b.n	8014db2 <z_impl_k_poll+0x2ce>
 8014d70:	20002278 	.word	0x20002278
 8014d74:	0801d145 	.word	0x0801d145
	node->next = list;
 8014d78:	f845 b009 	str.w	fp, [r5, r9]
	node->prev = list->tail;
 8014d7c:	f8db 3004 	ldr.w	r3, [fp, #4]
 8014d80:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
 8014d82:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8014d84:	f8cb 4004 	str.w	r4, [fp, #4]
		return;
 8014d88:	e71a      	b.n	8014bc0 <z_impl_k_poll+0xdc>
 8014d8a:	4622      	mov	r2, r4
 8014d8c:	4644      	mov	r4, r8
	node->prev = successor->prev;
 8014d8e:	6853      	ldr	r3, [r2, #4]
 8014d90:	f8c8 3004 	str.w	r3, [r8, #4]
	node->next = successor;
 8014d94:	f845 2009 	str.w	r2, [r5, r9]
	successor->prev->next = node;
 8014d98:	6853      	ldr	r3, [r2, #4]
 8014d9a:	f8c3 8000 	str.w	r8, [r3]
	successor->prev = node;
 8014d9e:	f8c2 8004 	str.w	r8, [r2, #4]
			return;
 8014da2:	e70d      	b.n	8014bc0 <z_impl_k_poll+0xdc>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8014da4:	2300      	movs	r3, #0
 8014da6:	46a0      	mov	r8, r4
 8014da8:	461c      	mov	r4, r3
 8014daa:	e7d0      	b.n	8014d4e <z_impl_k_poll+0x26a>
 8014dac:	4644      	mov	r4, r8
 8014dae:	e000      	b.n	8014db2 <z_impl_k_poll+0x2ce>
 8014db0:	4644      	mov	r4, r8
	node->next = list;
 8014db2:	f845 b009 	str.w	fp, [r5, r9]
	node->prev = list->tail;
 8014db6:	f8db 3004 	ldr.w	r3, [fp, #4]
 8014dba:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
 8014dbc:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8014dbe:	f8cb 4004 	str.w	r4, [fp, #4]
}
 8014dc2:	e6fd      	b.n	8014bc0 <z_impl_k_poll+0xdc>
 8014dc4:	4644      	mov	r4, r8
 8014dc6:	e7f4      	b.n	8014db2 <z_impl_k_poll+0x2ce>
 8014dc8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8014dcc:	f04f 0310 	mov.w	r3, #16
 8014dd0:	f3ef 8111 	mrs	r1, BASEPRI
 8014dd4:	f383 8811 	msr	BASEPRI, r3
 8014dd8:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
 8014ddc:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8014de0:	b1bb      	cbz	r3, 8014e12 <z_impl_k_poll+0x32e>
		clear_event_registrations(events, events_registered, key);
		k_spin_unlock(&lock, key);
		return 0;
	}

	poller.is_polling = false;
 8014de2:	2300      	movs	r3, #0
 8014de4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8014de8:	ea58 0309 	orrs.w	r3, r8, r9
 8014dec:	d045      	beq.n	8014e7a <z_impl_k_poll+0x396>
		k_spin_unlock(&lock, key);
		return -EAGAIN;
	}

	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
 8014dee:	aa09      	add	r2, sp, #36	; 0x24
 8014df0:	9209      	str	r2, [sp, #36]	; 0x24
 8014df2:	920a      	str	r2, [sp, #40]	; 0x28

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
 8014df4:	e9cd 8900 	strd	r8, r9, [sp]
 8014df8:	483e      	ldr	r0, [pc, #248]	; (8014ef4 <z_impl_k_poll+0x410>)
 8014dfa:	f7ff fa3d 	bl	8014278 <z_pend_curr>
 8014dfe:	f04f 0310 	mov.w	r3, #16
 8014e02:	f3ef 8711 	mrs	r7, BASEPRI
 8014e06:	f383 8811 	msr	BASEPRI, r3
 8014e0a:	f3bf 8f6f 	isb	sy
 8014e0e:	4639      	mov	r1, r7
	while (num_events--) {
 8014e10:	e049      	b.n	8014ea6 <z_impl_k_poll+0x3c2>
		clear_event_registrations(events, events_registered, key);
 8014e12:	460c      	mov	r4, r1
	while (num_events--) {
 8014e14:	e00e      	b.n	8014e34 <z_impl_k_poll+0x350>
	switch (event->type) {
 8014e16:	b240      	sxtb	r0, r0
 8014e18:	b9f0      	cbnz	r0, 8014e58 <z_impl_k_poll+0x374>
	__asm__ volatile(
 8014e1a:	f384 8811 	msr	BASEPRI, r4
 8014e1e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 8014e22:	f04f 0310 	mov.w	r3, #16
 8014e26:	f3ef 8411 	mrs	r4, BASEPRI
 8014e2a:	f383 8811 	msr	BASEPRI, r3
 8014e2e:	f3bf 8f6f 	isb	sy
	while (num_events--) {
 8014e32:	463e      	mov	r6, r7
 8014e34:	1e77      	subs	r7, r6, #1
 8014e36:	b1d6      	cbz	r6, 8014e6e <z_impl_k_poll+0x38a>
		clear_event_registration(&events[num_events]);
 8014e38:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 8014e3c:	009e      	lsls	r6, r3, #2
 8014e3e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
 8014e42:	2200      	movs	r2, #0
 8014e44:	609a      	str	r2, [r3, #8]
	switch (event->type) {
 8014e46:	7b5a      	ldrb	r2, [r3, #13]
 8014e48:	f3c2 0003 	ubfx	r0, r2, #0, #4
 8014e4c:	f002 020f 	and.w	r2, r2, #15
 8014e50:	2a02      	cmp	r2, #2
 8014e52:	d9e0      	bls.n	8014e16 <z_impl_k_poll+0x332>
 8014e54:	2a04      	cmp	r2, #4
 8014e56:	d1e0      	bne.n	8014e1a <z_impl_k_poll+0x336>
	return node->next != NULL;
 8014e58:	59aa      	ldr	r2, [r5, r6]
	if (remove && sys_dnode_is_linked(&event->_node)) {
 8014e5a:	2a00      	cmp	r2, #0
 8014e5c:	d0dd      	beq.n	8014e1a <z_impl_k_poll+0x336>
	node->prev->next = node->next;
 8014e5e:	6858      	ldr	r0, [r3, #4]
 8014e60:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
 8014e62:	6858      	ldr	r0, [r3, #4]
 8014e64:	6050      	str	r0, [r2, #4]
	node->next = NULL;
 8014e66:	2200      	movs	r2, #0
 8014e68:	51aa      	str	r2, [r5, r6]
	node->prev = NULL;
 8014e6a:	605a      	str	r2, [r3, #4]
	sys_dnode_init(node);
}
 8014e6c:	e7d5      	b.n	8014e1a <z_impl_k_poll+0x336>
	__asm__ volatile(
 8014e6e:	f381 8811 	msr	BASEPRI, r1
 8014e72:	f3bf 8f6f 	isb	sy
		return 0;
 8014e76:	4630      	mov	r0, r6
 8014e78:	e039      	b.n	8014eee <z_impl_k_poll+0x40a>
 8014e7a:	f381 8811 	msr	BASEPRI, r1
 8014e7e:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
 8014e82:	f06f 000a 	mvn.w	r0, #10
 8014e86:	e032      	b.n	8014eee <z_impl_k_poll+0x40a>
	switch (event->type) {
 8014e88:	b276      	sxtb	r6, r6
 8014e8a:	b9fe      	cbnz	r6, 8014ecc <z_impl_k_poll+0x3e8>
 8014e8c:	f381 8811 	msr	BASEPRI, r1
 8014e90:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 8014e94:	f04f 0310 	mov.w	r3, #16
 8014e98:	f3ef 8111 	mrs	r1, BASEPRI
 8014e9c:	f383 8811 	msr	BASEPRI, r3
 8014ea0:	f3bf 8f6f 	isb	sy
	while (num_events--) {
 8014ea4:	4626      	mov	r6, r4
 8014ea6:	1e74      	subs	r4, r6, #1
 8014ea8:	b1ee      	cbz	r6, 8014ee6 <z_impl_k_poll+0x402>
		clear_event_registration(&events[num_events]);
 8014eaa:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8014eae:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8014eb2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
 8014eb6:	2200      	movs	r2, #0
 8014eb8:	609a      	str	r2, [r3, #8]
	switch (event->type) {
 8014eba:	7b5a      	ldrb	r2, [r3, #13]
 8014ebc:	f3c2 0603 	ubfx	r6, r2, #0, #4
 8014ec0:	f002 020f 	and.w	r2, r2, #15
 8014ec4:	2a02      	cmp	r2, #2
 8014ec6:	d9df      	bls.n	8014e88 <z_impl_k_poll+0x3a4>
 8014ec8:	2a04      	cmp	r2, #4
 8014eca:	d1df      	bne.n	8014e8c <z_impl_k_poll+0x3a8>
	return node->next != NULL;
 8014ecc:	f855 200c 	ldr.w	r2, [r5, ip]
	if (remove && sys_dnode_is_linked(&event->_node)) {
 8014ed0:	2a00      	cmp	r2, #0
 8014ed2:	d0db      	beq.n	8014e8c <z_impl_k_poll+0x3a8>
	node->prev->next = node->next;
 8014ed4:	685e      	ldr	r6, [r3, #4]
 8014ed6:	6032      	str	r2, [r6, #0]
	node->next->prev = node->prev;
 8014ed8:	685e      	ldr	r6, [r3, #4]
 8014eda:	6056      	str	r6, [r2, #4]
	node->next = NULL;
 8014edc:	2200      	movs	r2, #0
 8014ede:	f845 200c 	str.w	r2, [r5, ip]
	node->prev = NULL;
 8014ee2:	605a      	str	r2, [r3, #4]
}
 8014ee4:	e7d2      	b.n	8014e8c <z_impl_k_poll+0x3a8>
	__asm__ volatile(
 8014ee6:	f387 8811 	msr	BASEPRI, r7
 8014eea:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
 8014eee:	b00f      	add	sp, #60	; 0x3c
 8014ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ef4:	200022b4 	.word	0x200022b4

08014ef8 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
 8014ef8:	b538      	push	{r3, r4, r5, lr}
 8014efa:	4603      	mov	r3, r0
	__asm__ volatile(
 8014efc:	f04f 0210 	mov.w	r2, #16
 8014f00:	f3ef 8511 	mrs	r5, BASEPRI
 8014f04:	f382 8811 	msr	BASEPRI, r2
 8014f08:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
 8014f0c:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
 8014f0e:	2201      	movs	r2, #1
 8014f10:	6082      	str	r2, [r0, #8]
	return list->head == list;
 8014f12:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
 8014f14:	4283      	cmp	r3, r0
 8014f16:	d012      	beq.n	8014f3e <z_impl_k_poll_signal_raise+0x46>
	node->prev->next = node->next;
 8014f18:	6842      	ldr	r2, [r0, #4]
 8014f1a:	6803      	ldr	r3, [r0, #0]
 8014f1c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 8014f1e:	6842      	ldr	r2, [r0, #4]
 8014f20:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8014f22:	2300      	movs	r3, #0
 8014f24:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 8014f26:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
 8014f28:	b148      	cbz	r0, 8014f3e <z_impl_k_poll_signal_raise+0x46>
		k_spin_unlock(&lock, key);
		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 8014f2a:	2101      	movs	r1, #1
 8014f2c:	f008 f8ef 	bl	801d10e <signal_poll_event>
 8014f30:	4604      	mov	r4, r0

	z_reschedule(&lock, key);
 8014f32:	4629      	mov	r1, r5
 8014f34:	4805      	ldr	r0, [pc, #20]	; (8014f4c <z_impl_k_poll_signal_raise+0x54>)
 8014f36:	f7fe ff93 	bl	8013e60 <z_reschedule>
	return rc;
}
 8014f3a:	4620      	mov	r0, r4
 8014f3c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 8014f3e:	f385 8811 	msr	BASEPRI, r5
 8014f42:	f3bf 8f6f 	isb	sy
		return 0;
 8014f46:	2400      	movs	r4, #0
 8014f48:	e7f7      	b.n	8014f3a <z_impl_k_poll_signal_raise+0x42>
 8014f4a:	bf00      	nop
 8014f4c:	200022b4 	.word	0x200022b4

08014f50 <k_malloc>:
K_MEM_POOL_DEFINE(_heap_mem_pool, CONFIG_HEAP_MEM_POOL_MIN_SIZE,
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
 8014f50:	b508      	push	{r3, lr}
 8014f52:	4601      	mov	r1, r0
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
 8014f54:	4801      	ldr	r0, [pc, #4]	; (8014f5c <k_malloc+0xc>)
 8014f56:	f008 f951 	bl	801d1fc <k_mem_pool_malloc>
}
 8014f5a:	bd08      	pop	{r3, pc}
 8014f5c:	2000059c 	.word	0x2000059c

08014f60 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
 8014f60:	b510      	push	{r4, lr}
 8014f62:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
 8014f64:	f007 ff3a 	bl	801cddc <k_is_in_isr>
 8014f68:	b938      	cbnz	r0, 8014f7a <z_thread_malloc+0x1a>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
 8014f6a:	4b05      	ldr	r3, [pc, #20]	; (8014f80 <z_thread_malloc+0x20>)
 8014f6c:	689b      	ldr	r3, [r3, #8]
 8014f6e:	6e98      	ldr	r0, [r3, #104]	; 0x68
	}

	if (pool) {
 8014f70:	b110      	cbz	r0, 8014f78 <z_thread_malloc+0x18>
		ret = k_mem_pool_malloc(pool, size);
 8014f72:	4621      	mov	r1, r4
 8014f74:	f008 f942 	bl	801d1fc <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
 8014f78:	bd10      	pop	{r4, pc}
		pool = _HEAP_MEM_POOL;
 8014f7a:	4802      	ldr	r0, [pc, #8]	; (8014f84 <z_thread_malloc+0x24>)
 8014f7c:	e7f8      	b.n	8014f70 <z_thread_malloc+0x10>
 8014f7e:	bf00      	nop
 8014f80:	20002278 	.word	0x20002278
 8014f84:	2000059c 	.word	0x2000059c

08014f88 <zmk_hid_register_mods>:
int zmk_hid_register_mods(zmk_mod_flags_t modifiers) {
 8014f88:	b538      	push	{r3, r4, r5, lr}
 8014f8a:	4605      	mov	r5, r0
    for (zmk_mod_t i = 0; i < 8; i++) {
 8014f8c:	2400      	movs	r4, #0
 8014f8e:	e004      	b.n	8014f9a <zmk_hid_register_mods+0x12>
            zmk_hid_register_mod(i);
 8014f90:	4620      	mov	r0, r4
 8014f92:	f7eb fbad 	bl	80006f0 <zmk_hid_register_mod>
    for (zmk_mod_t i = 0; i < 8; i++) {
 8014f96:	3401      	adds	r4, #1
 8014f98:	b2e4      	uxtb	r4, r4
 8014f9a:	2c07      	cmp	r4, #7
 8014f9c:	d805      	bhi.n	8014faa <zmk_hid_register_mods+0x22>
        if (modifiers & (1 << i)) {
 8014f9e:	fa45 f304 	asr.w	r3, r5, r4
 8014fa2:	f013 0f01 	tst.w	r3, #1
 8014fa6:	d0f6      	beq.n	8014f96 <zmk_hid_register_mods+0xe>
 8014fa8:	e7f2      	b.n	8014f90 <zmk_hid_register_mods+0x8>
}
 8014faa:	2000      	movs	r0, #0
 8014fac:	bd38      	pop	{r3, r4, r5, pc}

08014fae <zmk_hid_unregister_mods>:
int zmk_hid_unregister_mods(zmk_mod_flags_t modifiers) {
 8014fae:	b538      	push	{r3, r4, r5, lr}
 8014fb0:	4605      	mov	r5, r0
    for (zmk_mod_t i = 0; i < 8; i++) {
 8014fb2:	2400      	movs	r4, #0
 8014fb4:	e004      	b.n	8014fc0 <zmk_hid_unregister_mods+0x12>
            zmk_hid_unregister_mod(i);
 8014fb6:	4620      	mov	r0, r4
 8014fb8:	f7eb fbe2 	bl	8000780 <zmk_hid_unregister_mod>
    for (zmk_mod_t i = 0; i < 8; i++) {
 8014fbc:	3401      	adds	r4, #1
 8014fbe:	b2e4      	uxtb	r4, r4
 8014fc0:	2c07      	cmp	r4, #7
 8014fc2:	d805      	bhi.n	8014fd0 <zmk_hid_unregister_mods+0x22>
        if (modifiers & (1 << i)) {
 8014fc4:	fa45 f304 	asr.w	r3, r5, r4
 8014fc8:	f013 0f01 	tst.w	r3, #1
 8014fcc:	d0f6      	beq.n	8014fbc <zmk_hid_unregister_mods+0xe>
 8014fce:	e7f2      	b.n	8014fb6 <zmk_hid_unregister_mods+0x8>
}
 8014fd0:	2000      	movs	r0, #0
 8014fd2:	bd38      	pop	{r3, r4, r5, pc}

08014fd4 <zmk_event_manager_raise>:

int zmk_event_manager_raise(zmk_event_t *event) { return zmk_event_manager_handle_from(event, 0); }
 8014fd4:	b508      	push	{r3, lr}
 8014fd6:	2100      	movs	r1, #0
 8014fd8:	f7eb fd28 	bl	8000a2c <zmk_event_manager_handle_from>
 8014fdc:	bd08      	pop	{r3, pc}

08014fde <behavior_bt_init>:

static int behavior_bt_init(const struct device *dev) { return 0; };
 8014fde:	2000      	movs	r0, #0
 8014fe0:	4770      	bx	lr

08014fe2 <on_keymap_binding_released>:

static int on_keymap_binding_released(struct zmk_behavior_binding *binding,
                                      struct zmk_behavior_binding_event event) {
 8014fe2:	b082      	sub	sp, #8
 8014fe4:	e88d 000c 	stmia.w	sp, {r2, r3}
    return ZMK_BEHAVIOR_OPAQUE;
}
 8014fe8:	2000      	movs	r0, #0
 8014fea:	b002      	add	sp, #8
 8014fec:	4770      	bx	lr

08014fee <raise_profile_changed_event_callback>:
static void raise_profile_changed_event_callback(struct k_work *work) {
 8014fee:	b508      	push	{r3, lr}
    raise_profile_changed_event();
 8014ff0:	f7eb fe28 	bl	8000c44 <raise_profile_changed_event>
}
 8014ff4:	bd08      	pop	{r3, pc}

08014ff6 <zmk_ble_active_profile_is_connected>:
bool zmk_ble_active_profile_is_connected() {
 8014ff6:	b510      	push	{r4, lr}
 8014ff8:	b082      	sub	sp, #8
    bt_addr_le_t *addr = zmk_ble_active_profile_addr();
 8014ffa:	f7ec fa99 	bl	8001530 <zmk_ble_active_profile_addr>
 8014ffe:	4604      	mov	r4, r0
    if (!bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
 8015000:	2300      	movs	r3, #0
 8015002:	9300      	str	r3, [sp, #0]
 8015004:	f8cd 3003 	str.w	r3, [sp, #3]
 8015008:	2207      	movs	r2, #7
 801500a:	4669      	mov	r1, sp
 801500c:	f002 ff1e 	bl	8017e4c <memcmp>
 8015010:	b910      	cbnz	r0, 8015018 <zmk_ble_active_profile_is_connected+0x22>
        return false;
 8015012:	2000      	movs	r0, #0
}
 8015014:	b002      	add	sp, #8
 8015016:	bd10      	pop	{r4, pc}
    } else if ((conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr)) == NULL) {
 8015018:	4621      	mov	r1, r4
 801501a:	2000      	movs	r0, #0
 801501c:	f7f8 fb0a 	bl	800d634 <bt_conn_lookup_addr_le>
 8015020:	2800      	cmp	r0, #0
 8015022:	d0f6      	beq.n	8015012 <zmk_ble_active_profile_is_connected+0x1c>
    bt_conn_unref(conn);
 8015024:	f003 fda6 	bl	8018b74 <bt_conn_unref>
    return true;
 8015028:	2001      	movs	r0, #1
 801502a:	e7f3      	b.n	8015014 <zmk_ble_active_profile_is_connected+0x1e>

0801502c <update_advertising_callback>:
static void update_advertising_callback(struct k_work *work) { update_advertising(); }
 801502c:	b508      	push	{r3, lr}
 801502e:	f7ec fa8d 	bl	800154c <update_advertising>
 8015032:	bd08      	pop	{r3, pc}

08015034 <split_svc_num_of_positions>:
                                          void *buf, uint16_t len, uint16_t offset) {
 8015034:	b530      	push	{r4, r5, lr}
 8015036:	b085      	sub	sp, #20
    return bt_gatt_attr_read(conn, attrs, buf, len, offset, attrs->user_data, sizeof(uint8_t));
 8015038:	68cc      	ldr	r4, [r1, #12]
 801503a:	2501      	movs	r5, #1
 801503c:	9502      	str	r5, [sp, #8]
 801503e:	9401      	str	r4, [sp, #4]
 8015040:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8015044:	9400      	str	r4, [sp, #0]
 8015046:	f004 ff71 	bl	8019f2c <bt_gatt_attr_read>
}
 801504a:	b005      	add	sp, #20
 801504c:	bd30      	pop	{r4, r5, pc}

0801504e <raise_usb_status_changed_event>:
static void raise_usb_status_changed_event() {
 801504e:	b508      	push	{r3, lr}
    ZMK_EVENT_RAISE(new_zmk_usb_conn_state_changed(
 8015050:	f7ed fa20 	bl	8002494 <zmk_usb_get_conn_state>
 8015054:	f7eb fdb4 	bl	8000bc0 <new_zmk_usb_conn_state_changed>
 8015058:	f7ff ffbc 	bl	8014fd4 <zmk_event_manager_raise>
}
 801505c:	bd08      	pop	{r3, pc}

0801505e <input_ccc_changed>:
}
 801505e:	4770      	bx	lr

08015060 <write_ctrl_point>:
                                const void *buf, uint16_t len, uint16_t offset, uint8_t flags) {
 8015060:	b538      	push	{r3, r4, r5, lr}
 8015062:	4608      	mov	r0, r1
 8015064:	4611      	mov	r1, r2
 8015066:	461a      	mov	r2, r3
 8015068:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    uint8_t *value = attr->user_data;
 801506c:	68c0      	ldr	r0, [r0, #12]
    if (offset + len > sizeof(ctrl_point)) {
 801506e:	189d      	adds	r5, r3, r2
 8015070:	2d01      	cmp	r5, #1
 8015072:	d805      	bhi.n	8015080 <write_ctrl_point+0x20>
 8015074:	4614      	mov	r4, r2
    memcpy(value + offset, buf, len);
 8015076:	4418      	add	r0, r3
 8015078:	f002 ff00 	bl	8017e7c <memcpy>
}
 801507c:	4620      	mov	r0, r4
 801507e:	bd38      	pop	{r3, r4, r5, pc}
        return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
 8015080:	f06f 0406 	mvn.w	r4, #6
 8015084:	e7fa      	b.n	801507c <write_ctrl_point+0x1c>

08015086 <read_hids_consumer_input_report>:
                                               uint16_t len, uint16_t offset) {
 8015086:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015088:	b085      	sub	sp, #20
 801508a:	4604      	mov	r4, r0
 801508c:	460d      	mov	r5, r1
 801508e:	4616      	mov	r6, r2
 8015090:	461f      	mov	r7, r3
    struct zmk_hid_consumer_report_body *report_body = &zmk_hid_get_consumer_report()->body;
 8015092:	f7eb fcc7 	bl	8000a24 <zmk_hid_get_consumer_report>
 8015096:	3001      	adds	r0, #1
    return bt_gatt_attr_read(conn, attr, buf, len, offset, report_body,
 8015098:	230c      	movs	r3, #12
 801509a:	9302      	str	r3, [sp, #8]
 801509c:	9001      	str	r0, [sp, #4]
 801509e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80150a2:	9300      	str	r3, [sp, #0]
 80150a4:	463b      	mov	r3, r7
 80150a6:	4632      	mov	r2, r6
 80150a8:	4629      	mov	r1, r5
 80150aa:	4620      	mov	r0, r4
 80150ac:	f004 ff3e 	bl	8019f2c <bt_gatt_attr_read>
}
 80150b0:	b005      	add	sp, #20
 80150b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080150b4 <read_hids_report_ref>:
                                    void *buf, uint16_t len, uint16_t offset) {
 80150b4:	b530      	push	{r4, r5, lr}
 80150b6:	b085      	sub	sp, #20
    return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
 80150b8:	68cc      	ldr	r4, [r1, #12]
 80150ba:	2502      	movs	r5, #2
 80150bc:	9502      	str	r5, [sp, #8]
 80150be:	9401      	str	r4, [sp, #4]
 80150c0:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80150c4:	9400      	str	r4, [sp, #0]
 80150c6:	f004 ff31 	bl	8019f2c <bt_gatt_attr_read>
}
 80150ca:	b005      	add	sp, #20
 80150cc:	bd30      	pop	{r4, r5, pc}

080150ce <read_hids_info>:
                              uint16_t len, uint16_t offset) {
 80150ce:	b530      	push	{r4, r5, lr}
 80150d0:	b085      	sub	sp, #20
    return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
 80150d2:	68cc      	ldr	r4, [r1, #12]
 80150d4:	2504      	movs	r5, #4
 80150d6:	9502      	str	r5, [sp, #8]
 80150d8:	9401      	str	r4, [sp, #4]
 80150da:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80150de:	9400      	str	r4, [sp, #0]
 80150e0:	f004 ff24 	bl	8019f2c <bt_gatt_attr_read>
}
 80150e4:	b005      	add	sp, #20
 80150e6:	bd30      	pop	{r4, r5, pc}

080150e8 <read_hids_input_report>:
                                      void *buf, uint16_t len, uint16_t offset) {
 80150e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80150ea:	b085      	sub	sp, #20
 80150ec:	4604      	mov	r4, r0
 80150ee:	460d      	mov	r5, r1
 80150f0:	4616      	mov	r6, r2
 80150f2:	461f      	mov	r7, r3
    struct zmk_hid_keyboard_report_body *report_body = &zmk_hid_get_keyboard_report()->body;
 80150f4:	f7eb fc92 	bl	8000a1c <zmk_hid_get_keyboard_report>
 80150f8:	3001      	adds	r0, #1
    return bt_gatt_attr_read(conn, attr, buf, len, offset, report_body,
 80150fa:	2308      	movs	r3, #8
 80150fc:	9302      	str	r3, [sp, #8]
 80150fe:	9001      	str	r0, [sp, #4]
 8015100:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8015104:	9300      	str	r3, [sp, #0]
 8015106:	463b      	mov	r3, r7
 8015108:	4632      	mov	r2, r6
 801510a:	4629      	mov	r1, r5
 801510c:	4620      	mov	r0, r4
 801510e:	f004 ff0d 	bl	8019f2c <bt_gatt_attr_read>
}
 8015112:	b005      	add	sp, #20
 8015114:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015116 <is_ble_ready>:
static bool is_ble_ready() {
 8015116:	b508      	push	{r3, lr}
    return zmk_ble_active_profile_is_connected();
 8015118:	f7ff ff6d 	bl	8014ff6 <zmk_ble_active_profile_is_connected>
}
 801511c:	bd08      	pop	{r3, pc}

0801511e <is_usb_ready>:
static bool is_usb_ready() {
 801511e:	b508      	push	{r3, lr}

enum usb_dc_status_code zmk_usb_get_status();
enum zmk_usb_conn_state zmk_usb_get_conn_state();

static inline bool zmk_usb_is_powered() { return zmk_usb_get_conn_state() != ZMK_USB_CONN_NONE; }
static inline bool zmk_usb_is_hid_ready() { return zmk_usb_get_conn_state() == ZMK_USB_CONN_HID; }
 8015120:	f7ed f9b8 	bl	8002494 <zmk_usb_get_conn_state>
}
 8015124:	2802      	cmp	r0, #2
 8015126:	bf14      	ite	ne
 8015128:	2000      	movne	r0, #0
 801512a:	2001      	moveq	r0, #1
 801512c:	bd08      	pop	{r3, pc}

0801512e <disconnect_current_endpoint>:
static void disconnect_current_endpoint() {
 801512e:	b508      	push	{r3, lr}
    zmk_hid_keyboard_clear();
 8015130:	f7eb fc30 	bl	8000994 <zmk_hid_keyboard_clear>
    zmk_hid_consumer_clear();
 8015134:	f7eb fc68 	bl	8000a08 <zmk_hid_consumer_clear>
    zmk_endpoints_send_report(HID_USAGE_KEY);
 8015138:	2007      	movs	r0, #7
 801513a:	f7ed fcf3 	bl	8002b24 <zmk_endpoints_send_report>
    zmk_endpoints_send_report(HID_USAGE_CONSUMER);
 801513e:	200c      	movs	r0, #12
 8015140:	f7ed fcf0 	bl	8002b24 <zmk_endpoints_send_report>
}
 8015144:	bd08      	pop	{r3, pc}

08015146 <endpoint_listener>:

static int endpoint_listener(const zmk_event_t *eh) {
 8015146:	b508      	push	{r3, lr}
    update_current_endpoint();
 8015148:	f7ed fd2a 	bl	8002ba0 <update_current_endpoint>
    return 0;
}
 801514c:	2000      	movs	r0, #0
 801514e:	bd08      	pop	{r3, pc}

08015150 <hid_listener>:

int hid_listener(const zmk_event_t *eh) {
 8015150:	b508      	push	{r3, lr}
    const struct zmk_keycode_state_changed *ev = as_zmk_keycode_state_changed(eh);
 8015152:	f7eb fd09 	bl	8000b68 <as_zmk_keycode_state_changed>
    if (ev) {
 8015156:	b118      	cbz	r0, 8015160 <hid_listener+0x10>
        if (ev->state) {
 8015158:	7a82      	ldrb	r2, [r0, #10]
 801515a:	b11a      	cbz	r2, 8015164 <hid_listener+0x14>
            hid_listener_keycode_pressed(ev);
 801515c:	f7ed fdb2 	bl	8002cc4 <hid_listener_keycode_pressed>
        } else {
            hid_listener_keycode_released(ev);
        }
    }
    return 0;
}
 8015160:	2000      	movs	r0, #0
 8015162:	bd08      	pop	{r3, pc}
            hid_listener_keycode_released(ev);
 8015164:	f7ed fe1a 	bl	8002d9c <hid_listener_keycode_released>
 8015168:	e7fa      	b.n	8015160 <hid_listener+0x10>

0801516a <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
 801516a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801516e:	b2db      	uxtb	r3, r3
 8015170:	2b09      	cmp	r3, #9
 8015172:	d802      	bhi.n	801517a <char2hex+0x10>
		*x = c - '0';
 8015174:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
 8015176:	2000      	movs	r0, #0
 8015178:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
 801517a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801517e:	b2db      	uxtb	r3, r3
 8015180:	2b05      	cmp	r3, #5
 8015182:	d803      	bhi.n	801518c <char2hex+0x22>
		*x = c - 'a' + 10;
 8015184:	3857      	subs	r0, #87	; 0x57
 8015186:	7008      	strb	r0, [r1, #0]
	return 0;
 8015188:	2000      	movs	r0, #0
 801518a:	4770      	bx	lr
	} else if (c >= 'A' && c <= 'F') {
 801518c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015190:	b2db      	uxtb	r3, r3
 8015192:	2b05      	cmp	r3, #5
 8015194:	d803      	bhi.n	801519e <char2hex+0x34>
		*x = c - 'A' + 10;
 8015196:	3837      	subs	r0, #55	; 0x37
 8015198:	7008      	strb	r0, [r1, #0]
	return 0;
 801519a:	2000      	movs	r0, #0
 801519c:	4770      	bx	lr
		return -EINVAL;
 801519e:	f06f 0015 	mvn.w	r0, #21
}
 80151a2:	4770      	bx	lr

080151a4 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
 80151a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80151a8:	b083      	sub	sp, #12
 80151aa:	4616      	mov	r6, r2
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
 80151ac:	f001 0201 	and.w	r2, r1, #1
 80151b0:	eb02 0851 	add.w	r8, r2, r1, lsr #1
 80151b4:	4598      	cmp	r8, r3
 80151b6:	d832      	bhi.n	801521e <hex2bin+0x7a>
 80151b8:	4607      	mov	r7, r0
 80151ba:	ea4f 0951 	mov.w	r9, r1, lsr #1
		return 0;
	}

	/* if hexlen is uneven, insert leading zero nibble */
	if (hexlen % 2) {
 80151be:	b90a      	cbnz	r2, 80151c4 <hex2bin+0x20>
		hex++;
		buf++;
	}

	/* regular hex conversion */
	for (size_t i = 0; i < hexlen / 2; i++) {
 80151c0:	2400      	movs	r4, #0
 80151c2:	e012      	b.n	80151ea <hex2bin+0x46>
		if (char2hex(hex[0], &dec) < 0) {
 80151c4:	f10d 0107 	add.w	r1, sp, #7
 80151c8:	7800      	ldrb	r0, [r0, #0]
 80151ca:	f7ff ffce 	bl	801516a <char2hex>
 80151ce:	2800      	cmp	r0, #0
 80151d0:	db2b      	blt.n	801522a <hex2bin+0x86>
		buf[0] = dec;
 80151d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80151d6:	f806 3b01 	strb.w	r3, [r6], #1
		hex++;
 80151da:	3701      	adds	r7, #1
		buf++;
 80151dc:	e7f0      	b.n	80151c0 <hex2bin+0x1c>
		buf[i] = dec << 4;

		if (char2hex(hex[2 * i + 1], &dec) < 0) {
			return 0;
		}
		buf[i] += dec;
 80151de:	5d33      	ldrb	r3, [r6, r4]
 80151e0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80151e4:	4413      	add	r3, r2
 80151e6:	5533      	strb	r3, [r6, r4]
	for (size_t i = 0; i < hexlen / 2; i++) {
 80151e8:	3401      	adds	r4, #1
 80151ea:	45a1      	cmp	r9, r4
 80151ec:	d919      	bls.n	8015222 <hex2bin+0x7e>
		if (char2hex(hex[2 * i], &dec) < 0) {
 80151ee:	0065      	lsls	r5, r4, #1
 80151f0:	f10d 0107 	add.w	r1, sp, #7
 80151f4:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
 80151f8:	f7ff ffb7 	bl	801516a <char2hex>
 80151fc:	2800      	cmp	r0, #0
 80151fe:	db17      	blt.n	8015230 <hex2bin+0x8c>
		buf[i] = dec << 4;
 8015200:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015204:	011b      	lsls	r3, r3, #4
 8015206:	5533      	strb	r3, [r6, r4]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
 8015208:	3501      	adds	r5, #1
 801520a:	f10d 0107 	add.w	r1, sp, #7
 801520e:	5d78      	ldrb	r0, [r7, r5]
 8015210:	f7ff ffab 	bl	801516a <char2hex>
 8015214:	2800      	cmp	r0, #0
 8015216:	dae2      	bge.n	80151de <hex2bin+0x3a>
			return 0;
 8015218:	f04f 0800 	mov.w	r8, #0
 801521c:	e001      	b.n	8015222 <hex2bin+0x7e>
		return 0;
 801521e:	f04f 0800 	mov.w	r8, #0
	}

	return hexlen / 2 + hexlen % 2;
}
 8015222:	4640      	mov	r0, r8
 8015224:	b003      	add	sp, #12
 8015226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			return 0;
 801522a:	f04f 0800 	mov.w	r8, #0
 801522e:	e7f8      	b.n	8015222 <hex2bin+0x7e>
			return 0;
 8015230:	f04f 0800 	mov.w	r8, #0
 8015234:	e7f5      	b.n	8015222 <hex2bin+0x7e>

08015236 <arch_printk_char_out>:
}
 8015236:	2000      	movs	r0, #0
 8015238:	4770      	bx	lr

0801523a <print_hex>:
{
 801523a:	b570      	push	{r4, r5, r6, lr}
 801523c:	b084      	sub	sp, #16
 801523e:	f89d 4020 	ldrb.w	r4, [sp, #32]
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
 8015242:	1ee5      	subs	r5, r4, #3
 8015244:	bf18      	it	ne
 8015246:	2501      	movne	r5, #1
 8015248:	2c01      	cmp	r4, #1
 801524a:	d00a      	beq.n	8015262 <print_hex+0x28>
 801524c:	2420      	movs	r4, #32
 801524e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8015250:	9603      	str	r6, [sp, #12]
 8015252:	9402      	str	r4, [sp, #8]
 8015254:	9501      	str	r5, [sp, #4]
 8015256:	2410      	movs	r4, #16
 8015258:	9400      	str	r4, [sp, #0]
 801525a:	f7ed fe69 	bl	8002f30 <print_digits>
}
 801525e:	b004      	add	sp, #16
 8015260:	bd70      	pop	{r4, r5, r6, pc}
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
 8015262:	2430      	movs	r4, #48	; 0x30
 8015264:	e7f3      	b.n	801524e <print_hex+0x14>

08015266 <print_dec>:
{
 8015266:	b570      	push	{r4, r5, r6, lr}
 8015268:	b084      	sub	sp, #16
 801526a:	f89d 4020 	ldrb.w	r4, [sp, #32]
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
 801526e:	1ee5      	subs	r5, r4, #3
 8015270:	bf18      	it	ne
 8015272:	2501      	movne	r5, #1
 8015274:	2c01      	cmp	r4, #1
 8015276:	d00a      	beq.n	801528e <print_dec+0x28>
 8015278:	2420      	movs	r4, #32
 801527a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801527c:	9603      	str	r6, [sp, #12]
 801527e:	9402      	str	r4, [sp, #8]
 8015280:	9501      	str	r5, [sp, #4]
 8015282:	240a      	movs	r4, #10
 8015284:	9400      	str	r4, [sp, #0]
 8015286:	f7ed fe53 	bl	8002f30 <print_digits>
}
 801528a:	b004      	add	sp, #16
 801528c:	bd70      	pop	{r4, r5, r6, pc}
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
 801528e:	2430      	movs	r4, #48	; 0x30
 8015290:	e7f3      	b.n	801527a <print_dec+0x14>

08015292 <ok64>:
}
 8015292:	2001      	movs	r0, #1
 8015294:	4770      	bx	lr

08015296 <negative>:
}
 8015296:	0fc8      	lsrs	r0, r1, #31
 8015298:	4770      	bx	lr

0801529a <str_out>:
{
 801529a:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 801529c:	680c      	ldr	r4, [r1, #0]
 801529e:	b154      	cbz	r4, 80152b6 <str_out+0x1c>
 80152a0:	688a      	ldr	r2, [r1, #8]
 80152a2:	684b      	ldr	r3, [r1, #4]
 80152a4:	429a      	cmp	r2, r3
 80152a6:	da06      	bge.n	80152b6 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
 80152a8:	3b01      	subs	r3, #1
 80152aa:	429a      	cmp	r2, r3
 80152ac:	d009      	beq.n	80152c2 <str_out+0x28>
		ctx->str[ctx->count++] = c;
 80152ae:	1c53      	adds	r3, r2, #1
 80152b0:	608b      	str	r3, [r1, #8]
 80152b2:	54a0      	strb	r0, [r4, r2]
 80152b4:	e002      	b.n	80152bc <str_out+0x22>
		ctx->count++;
 80152b6:	688b      	ldr	r3, [r1, #8]
 80152b8:	3301      	adds	r3, #1
 80152ba:	608b      	str	r3, [r1, #8]
}
 80152bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80152c0:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
 80152c2:	1c53      	adds	r3, r2, #1
 80152c4:	608b      	str	r3, [r1, #8]
 80152c6:	2300      	movs	r3, #0
 80152c8:	54a3      	strb	r3, [r4, r2]
 80152ca:	e7f7      	b.n	80152bc <str_out+0x22>

080152cc <z_vprintk>:
{
 80152cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152d0:	b087      	sub	sp, #28
 80152d2:	4606      	mov	r6, r0
 80152d4:	460d      	mov	r5, r1
 80152d6:	4614      	mov	r4, r2
 80152d8:	9305      	str	r3, [sp, #20]
	char length_mod = 0;
 80152da:	2700      	movs	r7, #0
	int min_width = -1;
 80152dc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
 80152e0:	46bb      	mov	fp, r7
	int might_format = 0; /* 1 if encountered a '%' */
 80152e2:	46b8      	mov	r8, r7
	while (*fmt) {
 80152e4:	e002      	b.n	80152ec <z_vprintk+0x20>
				out((int)*fmt, ctx);
 80152e6:	4629      	mov	r1, r5
 80152e8:	47b0      	blx	r6
		++fmt;
 80152ea:	3401      	adds	r4, #1
	while (*fmt) {
 80152ec:	7820      	ldrb	r0, [r4, #0]
 80152ee:	2800      	cmp	r0, #0
 80152f0:	f000 8174 	beq.w	80155dc <z_vprintk+0x310>
		if (!might_format) {
 80152f4:	f1b8 0f00 	cmp.w	r8, #0
 80152f8:	d108      	bne.n	801530c <z_vprintk+0x40>
			if (*fmt != '%') {
 80152fa:	2825      	cmp	r0, #37	; 0x25
 80152fc:	d1f3      	bne.n	80152e6 <z_vprintk+0x1a>
				length_mod = 0;
 80152fe:	2700      	movs	r7, #0
				min_width = -1;
 8015300:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				padding = PAD_NONE;
 8015304:	46bb      	mov	fp, r7
				might_format = 1;
 8015306:	f04f 0801 	mov.w	r8, #1
 801530a:	e7ee      	b.n	80152ea <z_vprintk+0x1e>
			switch (*fmt) {
 801530c:	4602      	mov	r2, r0
 801530e:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 8015312:	2b55      	cmp	r3, #85	; 0x55
 8015314:	f200 8150 	bhi.w	80155b8 <z_vprintk+0x2ec>
 8015318:	e8df f013 	tbh	[pc, r3, lsl #1]
 801531c:	014e0148 	.word	0x014e0148
 8015320:	014e014e 	.word	0x014e014e
 8015324:	014e014e 	.word	0x014e014e
 8015328:	014e014e 	.word	0x014e014e
 801532c:	014e0157 	.word	0x014e0157
 8015330:	0056014e 	.word	0x0056014e
 8015334:	005d005d 	.word	0x005d005d
 8015338:	005d005d 	.word	0x005d005d
 801533c:	005d005d 	.word	0x005d005d
 8015340:	005d005d 	.word	0x005d005d
 8015344:	014e005d 	.word	0x014e005d
 8015348:	014e014e 	.word	0x014e014e
 801534c:	014e014e 	.word	0x014e014e
 8015350:	014e014e 	.word	0x014e014e
 8015354:	014e014e 	.word	0x014e014e
 8015358:	014e014e 	.word	0x014e014e
 801535c:	014e014e 	.word	0x014e014e
 8015360:	014e014e 	.word	0x014e014e
 8015364:	014e014e 	.word	0x014e014e
 8015368:	014e014e 	.word	0x014e014e
 801536c:	014e014e 	.word	0x014e014e
 8015370:	014e014e 	.word	0x014e014e
 8015374:	014e014e 	.word	0x014e014e
 8015378:	014e014e 	.word	0x014e014e
 801537c:	014e014e 	.word	0x014e014e
 8015380:	00ed014e 	.word	0x00ed014e
 8015384:	014e014e 	.word	0x014e014e
 8015388:	014e014e 	.word	0x014e014e
 801538c:	014e014e 	.word	0x014e014e
 8015390:	014e014e 	.word	0x014e014e
 8015394:	014e014e 	.word	0x014e014e
 8015398:	0087013f 	.word	0x0087013f
 801539c:	014e014e 	.word	0x014e014e
 80153a0:	0070014e 	.word	0x0070014e
 80153a4:	014e0087 	.word	0x014e0087
 80153a8:	0070014e 	.word	0x0070014e
 80153ac:	014e014e 	.word	0x014e014e
 80153b0:	00e3014e 	.word	0x00e3014e
 80153b4:	014e014e 	.word	0x014e014e
 80153b8:	014e011a 	.word	0x014e011a
 80153bc:	014e0087 	.word	0x014e0087
 80153c0:	00ed014e 	.word	0x00ed014e
 80153c4:	0070014e 	.word	0x0070014e
				if (min_width < 0 && padding == PAD_NONE) {
 80153c8:	f1ba 0f00 	cmp.w	sl, #0
 80153cc:	da03      	bge.n	80153d6 <z_vprintk+0x10a>
 80153ce:	f1bb 0f00 	cmp.w	fp, #0
 80153d2:	f000 80fd 	beq.w	80155d0 <z_vprintk+0x304>
				if (min_width < 0) {
 80153d6:	f1ba 0f00 	cmp.w	sl, #0
 80153da:	db0c      	blt.n	80153f6 <z_vprintk+0x12a>
					min_width = 10 * min_width + *fmt - '0';
 80153dc:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
 80153e0:	eb02 0a4a 	add.w	sl, r2, sl, lsl #1
 80153e4:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
				if (padding == PAD_NONE) {
 80153e8:	f1bb 0f00 	cmp.w	fp, #0
 80153ec:	f47f af7d 	bne.w	80152ea <z_vprintk+0x1e>
					padding = PAD_SPACE_BEFORE;
 80153f0:	f04f 0b02 	mov.w	fp, #2
				goto still_might_format;
 80153f4:	e779      	b.n	80152ea <z_vprintk+0x1e>
					min_width = *fmt - '0';
 80153f6:	f1a2 0a30 	sub.w	sl, r2, #48	; 0x30
 80153fa:	e7f5      	b.n	80153e8 <z_vprintk+0x11c>
				if (*fmt == 'h' && length_mod == 'h') {
 80153fc:	2868      	cmp	r0, #104	; 0x68
 80153fe:	d00b      	beq.n	8015418 <z_vprintk+0x14c>
				} else if (*fmt == 'l' && length_mod == 'l') {
 8015400:	286c      	cmp	r0, #108	; 0x6c
 8015402:	d00e      	beq.n	8015422 <z_vprintk+0x156>
				} else if (length_mod == 0) {
 8015404:	b15f      	cbz	r7, 801541e <z_vprintk+0x152>
					out((int)'%', ctx);
 8015406:	4629      	mov	r1, r5
 8015408:	2025      	movs	r0, #37	; 0x25
 801540a:	47b0      	blx	r6
					out((int)*fmt, ctx);
 801540c:	4629      	mov	r1, r5
 801540e:	7820      	ldrb	r0, [r4, #0]
 8015410:	47b0      	blx	r6
			might_format = 0;
 8015412:	f04f 0800 	mov.w	r8, #0
					break;
 8015416:	e768      	b.n	80152ea <z_vprintk+0x1e>
				if (*fmt == 'h' && length_mod == 'h') {
 8015418:	2f68      	cmp	r7, #104	; 0x68
 801541a:	d1f1      	bne.n	8015400 <z_vprintk+0x134>
					length_mod = 'H';
 801541c:	2048      	movs	r0, #72	; 0x48
				goto still_might_format;
 801541e:	4607      	mov	r7, r0
 8015420:	e763      	b.n	80152ea <z_vprintk+0x1e>
				} else if (*fmt == 'l' && length_mod == 'l') {
 8015422:	2f6c      	cmp	r7, #108	; 0x6c
 8015424:	d1ee      	bne.n	8015404 <z_vprintk+0x138>
					length_mod = 'L';
 8015426:	204c      	movs	r0, #76	; 0x4c
 8015428:	e7f9      	b.n	801541e <z_vprintk+0x152>
				if (length_mod == 'z') {
 801542a:	2f7a      	cmp	r7, #122	; 0x7a
 801542c:	d00d      	beq.n	801544a <z_vprintk+0x17e>
				} else if (length_mod == 'l') {
 801542e:	2f6c      	cmp	r7, #108	; 0x6c
 8015430:	d030      	beq.n	8015494 <z_vprintk+0x1c8>
				} else if (length_mod == 'L') {
 8015432:	2f4c      	cmp	r7, #76	; 0x4c
 8015434:	d036      	beq.n	80154a4 <z_vprintk+0x1d8>
				} else if (*fmt == 'u') {
 8015436:	2875      	cmp	r0, #117	; 0x75
 8015438:	d04b      	beq.n	80154d2 <z_vprintk+0x206>
					d = va_arg(ap, int);
 801543a:	9b05      	ldr	r3, [sp, #20]
 801543c:	1d1a      	adds	r2, r3, #4
 801543e:	9205      	str	r2, [sp, #20]
 8015440:	681b      	ldr	r3, [r3, #0]
 8015442:	4698      	mov	r8, r3
 8015444:	ea4f 79e3 	mov.w	r9, r3, asr #31
 8015448:	e006      	b.n	8015458 <z_vprintk+0x18c>
					d = va_arg(ap, ssize_t);
 801544a:	9b05      	ldr	r3, [sp, #20]
 801544c:	1d1a      	adds	r2, r3, #4
 801544e:	9205      	str	r2, [sp, #20]
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	4698      	mov	r8, r3
 8015454:	ea4f 79e3 	mov.w	r9, r3, asr #31
				if (*fmt != 'u' && negative(d)) {
 8015458:	7823      	ldrb	r3, [r4, #0]
 801545a:	2b75      	cmp	r3, #117	; 0x75
 801545c:	d00d      	beq.n	801547a <z_vprintk+0x1ae>
 801545e:	4640      	mov	r0, r8
 8015460:	4649      	mov	r1, r9
 8015462:	f7ff ff18 	bl	8015296 <negative>
 8015466:	b140      	cbz	r0, 801547a <z_vprintk+0x1ae>
					out((int)'-', ctx);
 8015468:	4629      	mov	r1, r5
 801546a:	202d      	movs	r0, #45	; 0x2d
 801546c:	47b0      	blx	r6
					d = -d;
 801546e:	f1d8 0800 	rsbs	r8, r8, #0
 8015472:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
					min_width--;
 8015476:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				print_dec(out, ctx, d, padding, min_width);
 801547a:	f8cd a004 	str.w	sl, [sp, #4]
 801547e:	f8cd b000 	str.w	fp, [sp]
 8015482:	4642      	mov	r2, r8
 8015484:	464b      	mov	r3, r9
 8015486:	4629      	mov	r1, r5
 8015488:	4630      	mov	r0, r6
 801548a:	f7ff feec 	bl	8015266 <print_dec>
			might_format = 0;
 801548e:	f04f 0800 	mov.w	r8, #0
				break;
 8015492:	e72a      	b.n	80152ea <z_vprintk+0x1e>
					d = va_arg(ap, long);
 8015494:	9b05      	ldr	r3, [sp, #20]
 8015496:	1d1a      	adds	r2, r3, #4
 8015498:	9205      	str	r2, [sp, #20]
 801549a:	681b      	ldr	r3, [r3, #0]
 801549c:	4698      	mov	r8, r3
 801549e:	ea4f 79e3 	mov.w	r9, r3, asr #31
 80154a2:	e7d9      	b.n	8015458 <z_vprintk+0x18c>
					long long lld = va_arg(ap, long long);
 80154a4:	9b05      	ldr	r3, [sp, #20]
 80154a6:	3307      	adds	r3, #7
 80154a8:	f023 0307 	bic.w	r3, r3, #7
 80154ac:	f103 0208 	add.w	r2, r3, #8
 80154b0:	9205      	str	r2, [sp, #20]
 80154b2:	681a      	ldr	r2, [r3, #0]
 80154b4:	685b      	ldr	r3, [r3, #4]
					if (!ok64(out, ctx, lld)) {
 80154b6:	9203      	str	r2, [sp, #12]
 80154b8:	9304      	str	r3, [sp, #16]
 80154ba:	4629      	mov	r1, r5
 80154bc:	4630      	mov	r0, r6
 80154be:	f7ff fee8 	bl	8015292 <ok64>
 80154c2:	2800      	cmp	r0, #0
 80154c4:	f000 8087 	beq.w	80155d6 <z_vprintk+0x30a>
					d = (printk_val_t) lld;
 80154c8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80154cc:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80154d0:	e7c2      	b.n	8015458 <z_vprintk+0x18c>
					d = va_arg(ap, unsigned int);
 80154d2:	9b05      	ldr	r3, [sp, #20]
 80154d4:	1d1a      	adds	r2, r3, #4
 80154d6:	9205      	str	r2, [sp, #20]
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	4698      	mov	r8, r3
 80154dc:	f04f 0900 	mov.w	r9, #0
 80154e0:	e7ba      	b.n	8015458 <z_vprintk+0x18c>
				out('0', ctx);
 80154e2:	4629      	mov	r1, r5
 80154e4:	2030      	movs	r0, #48	; 0x30
 80154e6:	47b0      	blx	r6
				out('x', ctx);
 80154e8:	4629      	mov	r1, r5
 80154ea:	2078      	movs	r0, #120	; 0x78
 80154ec:	47b0      	blx	r6
				min_width = sizeof(void *) * 2;
 80154ee:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
 80154f2:	f04f 0b01 	mov.w	fp, #1
				if (*fmt == 'p') {
 80154f6:	7823      	ldrb	r3, [r4, #0]
 80154f8:	2b70      	cmp	r3, #112	; 0x70
 80154fa:	d009      	beq.n	8015510 <z_vprintk+0x244>
				} else if (length_mod == 'l') {
 80154fc:	2f6c      	cmp	r7, #108	; 0x6c
 80154fe:	d017      	beq.n	8015530 <z_vprintk+0x264>
				} else if (length_mod == 'L') {
 8015500:	2f4c      	cmp	r7, #76	; 0x4c
 8015502:	d01b      	beq.n	801553c <z_vprintk+0x270>
					x = va_arg(ap, unsigned int);
 8015504:	9b05      	ldr	r3, [sp, #20]
 8015506:	1d1a      	adds	r2, r3, #4
 8015508:	9205      	str	r2, [sp, #20]
 801550a:	681a      	ldr	r2, [r3, #0]
 801550c:	2300      	movs	r3, #0
 801550e:	e004      	b.n	801551a <z_vprintk+0x24e>
					x = (uintptr_t)va_arg(ap, void *);
 8015510:	9b05      	ldr	r3, [sp, #20]
 8015512:	1d1a      	adds	r2, r3, #4
 8015514:	9205      	str	r2, [sp, #20]
 8015516:	681a      	ldr	r2, [r3, #0]
 8015518:	2300      	movs	r3, #0
				print_hex(out, ctx, x, padding, min_width);
 801551a:	f8cd a004 	str.w	sl, [sp, #4]
 801551e:	f8cd b000 	str.w	fp, [sp]
 8015522:	4629      	mov	r1, r5
 8015524:	4630      	mov	r0, r6
 8015526:	f7ff fe88 	bl	801523a <print_hex>
			might_format = 0;
 801552a:	f04f 0800 	mov.w	r8, #0
				break;
 801552e:	e6dc      	b.n	80152ea <z_vprintk+0x1e>
					x = va_arg(ap, unsigned long);
 8015530:	9b05      	ldr	r3, [sp, #20]
 8015532:	1d1a      	adds	r2, r3, #4
 8015534:	9205      	str	r2, [sp, #20]
 8015536:	681a      	ldr	r2, [r3, #0]
 8015538:	2300      	movs	r3, #0
 801553a:	e7ee      	b.n	801551a <z_vprintk+0x24e>
					x = va_arg(ap, unsigned long long);
 801553c:	9b05      	ldr	r3, [sp, #20]
 801553e:	3307      	adds	r3, #7
 8015540:	f023 0307 	bic.w	r3, r3, #7
 8015544:	f103 0208 	add.w	r2, r3, #8
 8015548:	9205      	str	r2, [sp, #20]
 801554a:	681a      	ldr	r2, [r3, #0]
 801554c:	685b      	ldr	r3, [r3, #4]
 801554e:	e7e4      	b.n	801551a <z_vprintk+0x24e>
				char *s = va_arg(ap, char *);
 8015550:	9b05      	ldr	r3, [sp, #20]
 8015552:	1d1a      	adds	r2, r3, #4
 8015554:	9205      	str	r2, [sp, #20]
 8015556:	f8d3 9000 	ldr.w	r9, [r3]
 801555a:	46c8      	mov	r8, r9
				while (*s) {
 801555c:	e003      	b.n	8015566 <z_vprintk+0x29a>
					out((int)(*s++), ctx);
 801555e:	f108 0801 	add.w	r8, r8, #1
 8015562:	4629      	mov	r1, r5
 8015564:	47b0      	blx	r6
				while (*s) {
 8015566:	f898 0000 	ldrb.w	r0, [r8]
 801556a:	2800      	cmp	r0, #0
 801556c:	d1f7      	bne.n	801555e <z_vprintk+0x292>
				if (padding == PAD_SPACE_AFTER) {
 801556e:	f1bb 0f03 	cmp.w	fp, #3
 8015572:	d002      	beq.n	801557a <z_vprintk+0x2ae>
			might_format = 0;
 8015574:	f04f 0800 	mov.w	r8, #0
 8015578:	e6b7      	b.n	80152ea <z_vprintk+0x1e>
					int remaining = min_width - (s - start);
 801557a:	eba8 0309 	sub.w	r3, r8, r9
 801557e:	ebaa 0303 	sub.w	r3, sl, r3
					while (remaining-- > 0) {
 8015582:	e003      	b.n	801558c <z_vprintk+0x2c0>
						out(' ', ctx);
 8015584:	4629      	mov	r1, r5
 8015586:	2020      	movs	r0, #32
 8015588:	47b0      	blx	r6
					while (remaining-- > 0) {
 801558a:	4643      	mov	r3, r8
 801558c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8015590:	2b00      	cmp	r3, #0
 8015592:	dcf7      	bgt.n	8015584 <z_vprintk+0x2b8>
			might_format = 0;
 8015594:	f04f 0800 	mov.w	r8, #0
 8015598:	e6a7      	b.n	80152ea <z_vprintk+0x1e>
				int c = va_arg(ap, int);
 801559a:	9b05      	ldr	r3, [sp, #20]
 801559c:	1d1a      	adds	r2, r3, #4
 801559e:	9205      	str	r2, [sp, #20]
				out(c, ctx);
 80155a0:	4629      	mov	r1, r5
 80155a2:	6818      	ldr	r0, [r3, #0]
 80155a4:	47b0      	blx	r6
			might_format = 0;
 80155a6:	f04f 0800 	mov.w	r8, #0
				break;
 80155aa:	e69e      	b.n	80152ea <z_vprintk+0x1e>
				out((int)'%', ctx);
 80155ac:	4629      	mov	r1, r5
 80155ae:	2025      	movs	r0, #37	; 0x25
 80155b0:	47b0      	blx	r6
			might_format = 0;
 80155b2:	f04f 0800 	mov.w	r8, #0
				break;
 80155b6:	e698      	b.n	80152ea <z_vprintk+0x1e>
				out((int)'%', ctx);
 80155b8:	4629      	mov	r1, r5
 80155ba:	2025      	movs	r0, #37	; 0x25
 80155bc:	47b0      	blx	r6
				out((int)*fmt, ctx);
 80155be:	4629      	mov	r1, r5
 80155c0:	7820      	ldrb	r0, [r4, #0]
 80155c2:	47b0      	blx	r6
			might_format = 0;
 80155c4:	f04f 0800 	mov.w	r8, #0
				break;
 80155c8:	e68f      	b.n	80152ea <z_vprintk+0x1e>
			switch (*fmt) {
 80155ca:	f04f 0b03 	mov.w	fp, #3
 80155ce:	e68c      	b.n	80152ea <z_vprintk+0x1e>
					padding = PAD_ZERO_BEFORE;
 80155d0:	f04f 0b01 	mov.w	fp, #1
 80155d4:	e689      	b.n	80152ea <z_vprintk+0x1e>
			might_format = 0;
 80155d6:	f04f 0800 	mov.w	r8, #0
 80155da:	e686      	b.n	80152ea <z_vprintk+0x1e>
}
 80155dc:	b007      	add	sp, #28
 80155de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080155e2 <printk>:
{
 80155e2:	b40f      	push	{r0, r1, r2, r3}
 80155e4:	b500      	push	{lr}
 80155e6:	b083      	sub	sp, #12
 80155e8:	a904      	add	r1, sp, #16
 80155ea:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 80155ee:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
 80155f0:	f7ed fd1a 	bl	8003028 <vprintk>
}
 80155f4:	b003      	add	sp, #12
 80155f6:	f85d eb04 	ldr.w	lr, [sp], #4
 80155fa:	b004      	add	sp, #16
 80155fc:	4770      	bx	lr

080155fe <snprintk>:
{
 80155fe:	b40c      	push	{r2, r3}
 8015600:	b500      	push	{lr}
 8015602:	b083      	sub	sp, #12
 8015604:	ab04      	add	r3, sp, #16
 8015606:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
 801560a:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
 801560c:	f7ed fd1c 	bl	8003048 <vsnprintk>
}
 8015610:	b003      	add	sp, #12
 8015612:	f85d eb04 	ldr.w	lr, [sp], #4
 8015616:	b002      	add	sp, #8
 8015618:	4770      	bx	lr

0801561a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 801561a:	b508      	push	{r3, lr}
 801561c:	4604      	mov	r4, r0
 801561e:	4608      	mov	r0, r1
 8015620:	4611      	mov	r1, r2
	entry(p1, p2, p3);
 8015622:	461a      	mov	r2, r3
 8015624:	47a0      	blx	r4
	return z_impl_k_current_get();
 8015626:	f7fe fefd 	bl	8014424 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
 801562a:	f7f4 f873 	bl	8009714 <z_impl_k_thread_abort>

0801562e <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
 801562e:	b538      	push	{r3, r4, r5, lr}
 8015630:	4604      	mov	r4, r0
	struct k_work_q *work_q = work_q_ptr;
 8015632:	e001      	b.n	8015638 <z_work_q_main+0xa>
	z_impl_k_yield();
 8015634:	f7fe fe9a 	bl	801436c <z_impl_k_yield>
	return z_impl_k_queue_get(queue, timeout);
 8015638:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801563c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015640:	4620      	mov	r0, r4
 8015642:	f7fe fb85 	bl	8013d50 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
 8015646:	4603      	mov	r3, r0
 8015648:	2800      	cmp	r0, #0
 801564a:	d0f5      	beq.n	8015638 <z_work_q_main+0xa>
			continue;
		}

		handler = work->handler;
 801564c:	6845      	ldr	r5, [r0, #4]
		__ASSERT(handler != NULL, "handler must be provided");

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
 801564e:	f100 0208 	add.w	r2, r0, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8015652:	f3bf 8f5b 	dmb	ish
 8015656:	e852 1f00 	ldrex	r1, [r2]
 801565a:	f021 0001 	bic.w	r0, r1, #1
 801565e:	e842 0c00 	strex	ip, r0, [r2]
 8015662:	f1bc 0f00 	cmp.w	ip, #0
 8015666:	d1f6      	bne.n	8015656 <z_work_q_main+0x28>
 8015668:	f3bf 8f5b 	dmb	ish
 801566c:	f011 0f01 	tst.w	r1, #1
 8015670:	d0e0      	beq.n	8015634 <z_work_q_main+0x6>
					      K_WORK_STATE_PENDING)) {
			handler(work);
 8015672:	4618      	mov	r0, r3
 8015674:	47a8      	blx	r5
 8015676:	e7dd      	b.n	8015634 <z_work_q_main+0x6>

08015678 <chunk_mem>:
#include "heap.h"

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
 8015678:	00c9      	lsls	r1, r1, #3
	return big_heap_chunks(bytes / CHUNK_UNIT);
}

static inline bool big_heap(struct z_heap *h)
{
	return big_heap_chunks(h->len);
 801567a:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
 801567c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015680:	d303      	bcc.n	801568a <chunk_mem+0x12>
 8015682:	2308      	movs	r3, #8
 8015684:	4419      	add	r1, r3

	CHECK(!(((size_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
 8015686:	4408      	add	r0, r1
 8015688:	4770      	bx	lr
 801568a:	2304      	movs	r3, #4
 801568c:	e7fa      	b.n	8015684 <chunk_mem+0xc>

0801568e <free_list_remove_bidx>:

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
 801568e:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
 8015690:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	return big_heap_chunks(h->len);
 8015694:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 8015696:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 801569a:	d317      	bcc.n	80156cc <free_list_remove_bidx+0x3e>
		return ((uint32_t *)cmem)[f];
 801569c:	68eb      	ldr	r3, [r5, #12]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
 801569e:	4299      	cmp	r1, r3
 80156a0:	d016      	beq.n	80156d0 <free_list_remove_bidx+0x42>
	if (big_heap(h)) {
 80156a2:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80156a6:	d320      	bcc.n	80156ea <free_list_remove_bidx+0x5c>
		return ((uint32_t *)cmem)[f];
 80156a8:	68a9      	ldr	r1, [r5, #8]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
 80156aa:	3204      	adds	r2, #4
 80156ac:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	void *cmem = &buf[c];
 80156b0:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
 80156b4:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80156b8:	d319      	bcc.n	80156ee <free_list_remove_bidx+0x60>
		((uint32_t *)cmem)[f] = val;
 80156ba:	60d3      	str	r3, [r2, #12]
	void *cmem = &buf[c];
 80156bc:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
	return big_heap_chunks(h->len);
 80156c0:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
 80156c2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80156c6:	d314      	bcc.n	80156f2 <free_list_remove_bidx+0x64>
		((uint32_t *)cmem)[f] = val;
 80156c8:	6099      	str	r1, [r3, #8]
 80156ca:	e00c      	b.n	80156e6 <free_list_remove_bidx+0x58>
		return ((uint16_t *)cmem)[f];
 80156cc:	88eb      	ldrh	r3, [r5, #6]
 80156ce:	e7e6      	b.n	801569e <free_list_remove_bidx+0x10>
		h->avail_buckets &= ~(1 << bidx);
 80156d0:	2301      	movs	r3, #1
 80156d2:	fa03 f102 	lsl.w	r1, r3, r2
 80156d6:	68c3      	ldr	r3, [r0, #12]
 80156d8:	ea23 0301 	bic.w	r3, r3, r1
 80156dc:	60c3      	str	r3, [r0, #12]
		b->next = 0;
 80156de:	3204      	adds	r2, #4
 80156e0:	2300      	movs	r3, #0
 80156e2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
 80156e6:	bc30      	pop	{r4, r5}
 80156e8:	4770      	bx	lr
 80156ea:	88a9      	ldrh	r1, [r5, #4]
 80156ec:	e7dd      	b.n	80156aa <free_list_remove_bidx+0x1c>
		((uint16_t *)cmem)[f] = val;
 80156ee:	80d3      	strh	r3, [r2, #6]
 80156f0:	e7e4      	b.n	80156bc <free_list_remove_bidx+0x2e>
 80156f2:	8099      	strh	r1, [r3, #4]
 80156f4:	e7f7      	b.n	80156e6 <free_list_remove_bidx+0x58>

080156f6 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
 80156f6:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0) {
 80156f8:	1d13      	adds	r3, r2, #4
 80156fa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80156fe:	b9d3      	cbnz	r3, 8015736 <free_list_add_bidx+0x40>
		CHECK((h->avail_buckets & (1 << bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << bidx);
 8015700:	2301      	movs	r3, #1
 8015702:	fa03 f402 	lsl.w	r4, r3, r2
 8015706:	68c3      	ldr	r3, [r0, #12]
 8015708:	4323      	orrs	r3, r4
 801570a:	60c3      	str	r3, [r0, #12]
		b->next = c;
 801570c:	3204      	adds	r2, #4
 801570e:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
 8015712:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->len);
 8015716:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
 8015718:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 801571c:	d307      	bcc.n	801572e <free_list_add_bidx+0x38>
		((uint32_t *)cmem)[f] = val;
 801571e:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->len);
 8015720:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
 8015722:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8015726:	d304      	bcc.n	8015732 <free_list_add_bidx+0x3c>
		((uint32_t *)cmem)[f] = val;
 8015728:	60d9      	str	r1, [r3, #12]
		set_prev_free_chunk(h, c, first);
		set_next_free_chunk(h, c, second);
		set_next_free_chunk(h, first, c);
		set_prev_free_chunk(h, second, c);
	}
}
 801572a:	bc70      	pop	{r4, r5, r6}
 801572c:	4770      	bx	lr
		((uint16_t *)cmem)[f] = val;
 801572e:	8099      	strh	r1, [r3, #4]
 8015730:	e7f6      	b.n	8015720 <free_list_add_bidx+0x2a>
 8015732:	80d9      	strh	r1, [r3, #6]
 8015734:	e7f9      	b.n	801572a <free_list_add_bidx+0x34>
	void *cmem = &buf[c];
 8015736:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
	return big_heap_chunks(h->len);
 801573a:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
 801573c:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8015740:	d318      	bcc.n	8015774 <free_list_add_bidx+0x7e>
		return ((uint32_t *)cmem)[f];
 8015742:	68a2      	ldr	r2, [r4, #8]
	void *cmem = &buf[c];
 8015744:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	if (big_heap(h)) {
 8015748:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 801574c:	d314      	bcc.n	8015778 <free_list_add_bidx+0x82>
		((uint32_t *)cmem)[f] = val;
 801574e:	60aa      	str	r2, [r5, #8]
	return big_heap_chunks(h->len);
 8015750:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
 8015752:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8015756:	d311      	bcc.n	801577c <free_list_add_bidx+0x86>
		((uint32_t *)cmem)[f] = val;
 8015758:	60eb      	str	r3, [r5, #12]
	void *cmem = &buf[c];
 801575a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->len);
 801575e:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
 8015760:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015764:	d30c      	bcc.n	8015780 <free_list_add_bidx+0x8a>
		((uint32_t *)cmem)[f] = val;
 8015766:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->len);
 8015768:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
 801576a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801576e:	d309      	bcc.n	8015784 <free_list_add_bidx+0x8e>
		((uint32_t *)cmem)[f] = val;
 8015770:	60a1      	str	r1, [r4, #8]
 8015772:	e7da      	b.n	801572a <free_list_add_bidx+0x34>
		return ((uint16_t *)cmem)[f];
 8015774:	88a2      	ldrh	r2, [r4, #4]
 8015776:	e7e5      	b.n	8015744 <free_list_add_bidx+0x4e>
		((uint16_t *)cmem)[f] = val;
 8015778:	80aa      	strh	r2, [r5, #4]
 801577a:	e7e9      	b.n	8015750 <free_list_add_bidx+0x5a>
 801577c:	80eb      	strh	r3, [r5, #6]
 801577e:	e7ec      	b.n	801575a <free_list_add_bidx+0x64>
 8015780:	80d1      	strh	r1, [r2, #6]
 8015782:	e7f1      	b.n	8015768 <free_list_add_bidx+0x72>
 8015784:	80a1      	strh	r1, [r4, #4]
 8015786:	e7d0      	b.n	801572a <free_list_add_bidx+0x34>

08015788 <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
 8015788:	b470      	push	{r4, r5, r6}
	void *cmem = &buf[c];
 801578a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	return big_heap_chunks(h->len);
 801578e:	6885      	ldr	r5, [r0, #8]
	if (big_heap(h)) {
 8015790:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 8015794:	d325      	bcc.n	80157e2 <split_chunks+0x5a>
		return ((uint32_t *)cmem)[f];
 8015796:	6866      	ldr	r6, [r4, #4]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	size_t sz0 = chunk_size(h, lc);
	size_t lsz = rc - lc;
 8015798:	1a53      	subs	r3, r2, r1
	size_t rsz = sz0 - lsz;
 801579a:	1a89      	subs	r1, r1, r2
 801579c:	eb01 0156 	add.w	r1, r1, r6, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 80157a0:	005e      	lsls	r6, r3, #1
	if (big_heap(h)) {
 80157a2:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 80157a6:	d31e      	bcc.n	80157e6 <split_chunks+0x5e>
		((uint32_t *)cmem)[f] = val;
 80157a8:	6066      	str	r6, [r4, #4]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 80157aa:	004d      	lsls	r5, r1, #1
	void *cmem = &buf[c];
 80157ac:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
	return big_heap_chunks(h->len);
 80157b0:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
 80157b2:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 80157b6:	d318      	bcc.n	80157ea <split_chunks+0x62>
		((uint32_t *)cmem)[f] = val;
 80157b8:	6065      	str	r5, [r4, #4]
	return big_heap_chunks(h->len);
 80157ba:	6885      	ldr	r5, [r0, #8]
	if (big_heap(h)) {
 80157bc:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 80157c0:	d315      	bcc.n	80157ee <split_chunks+0x66>
		((uint32_t *)cmem)[f] = val;
 80157c2:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
	return big_heap_chunks(h->len);
 80157c6:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
 80157c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80157cc:	d312      	bcc.n	80157f4 <split_chunks+0x6c>
		return ((uint32_t *)cmem)[f];
 80157ce:	6864      	ldr	r4, [r4, #4]
	return c + chunk_size(h, c);
 80157d0:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
 80157d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80157d8:	d30e      	bcc.n	80157f8 <split_chunks+0x70>
		((uint32_t *)cmem)[f] = val;
 80157da:	f840 1032 	str.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
 80157de:	bc70      	pop	{r4, r5, r6}
 80157e0:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
 80157e2:	8866      	ldrh	r6, [r4, #2]
 80157e4:	e7d8      	b.n	8015798 <split_chunks+0x10>
		((uint16_t *)cmem)[f] = val;
 80157e6:	8066      	strh	r6, [r4, #2]
 80157e8:	e7df      	b.n	80157aa <split_chunks+0x22>
 80157ea:	8065      	strh	r5, [r4, #2]
 80157ec:	e7e5      	b.n	80157ba <split_chunks+0x32>
 80157ee:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
 80157f2:	e7e8      	b.n	80157c6 <split_chunks+0x3e>
		return ((uint16_t *)cmem)[f];
 80157f4:	8864      	ldrh	r4, [r4, #2]
 80157f6:	e7eb      	b.n	80157d0 <split_chunks+0x48>
		((uint16_t *)cmem)[f] = val;
 80157f8:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]
 80157fc:	e7ef      	b.n	80157de <split_chunks+0x56>

080157fe <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
 80157fe:	b470      	push	{r4, r5, r6}
	void *cmem = &buf[c];
 8015800:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	return big_heap_chunks(h->len);
 8015804:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 8015806:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 801580a:	d31c      	bcc.n	8015846 <merge_chunks+0x48>
		return ((uint32_t *)cmem)[f];
 801580c:	684b      	ldr	r3, [r1, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 801580e:	085b      	lsrs	r3, r3, #1
	void *cmem = &buf[c];
 8015810:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
	if (big_heap(h)) {
 8015814:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8015818:	d317      	bcc.n	801584a <merge_chunks+0x4c>
		return ((uint32_t *)cmem)[f];
 801581a:	686e      	ldr	r6, [r5, #4]
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
 801581c:	eb03 0356 	add.w	r3, r3, r6, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 8015820:	005e      	lsls	r6, r3, #1
	if (big_heap(h)) {
 8015822:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8015826:	d312      	bcc.n	801584e <merge_chunks+0x50>
		((uint32_t *)cmem)[f] = val;
 8015828:	604e      	str	r6, [r1, #4]
	return big_heap_chunks(h->len);
 801582a:	6881      	ldr	r1, [r0, #8]
	if (big_heap(h)) {
 801582c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8015830:	d30f      	bcc.n	8015852 <merge_chunks+0x54>
		return ((uint32_t *)cmem)[f];
 8015832:	686c      	ldr	r4, [r5, #4]
	return c + chunk_size(h, c);
 8015834:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
 8015838:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 801583c:	d30b      	bcc.n	8015856 <merge_chunks+0x58>
		((uint32_t *)cmem)[f] = val;
 801583e:	f840 3032 	str.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
 8015842:	bc70      	pop	{r4, r5, r6}
 8015844:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
 8015846:	884b      	ldrh	r3, [r1, #2]
 8015848:	e7e1      	b.n	801580e <merge_chunks+0x10>
 801584a:	886e      	ldrh	r6, [r5, #2]
 801584c:	e7e6      	b.n	801581c <merge_chunks+0x1e>
		((uint16_t *)cmem)[f] = val;
 801584e:	804e      	strh	r6, [r1, #2]
 8015850:	e7eb      	b.n	801582a <merge_chunks+0x2c>
		return ((uint16_t *)cmem)[f];
 8015852:	886c      	ldrh	r4, [r5, #2]
 8015854:	e7ee      	b.n	8015834 <merge_chunks+0x36>
		((uint16_t *)cmem)[f] = val;
 8015856:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
 801585a:	e7f2      	b.n	8015842 <merge_chunks+0x44>

0801585c <mem_to_chunkid>:
	return big_heap_chunks(h->len);
 801585c:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) ? 8 : 4;
 801585e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015862:	d305      	bcc.n	8015870 <mem_to_chunkid+0x14>
 8015864:	2308      	movs	r3, #8
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 8015866:	1ac9      	subs	r1, r1, r3
 8015868:	1a08      	subs	r0, r1, r0
 801586a:	d403      	bmi.n	8015874 <mem_to_chunkid+0x18>
}
 801586c:	10c0      	asrs	r0, r0, #3
 801586e:	4770      	bx	lr
 8015870:	2304      	movs	r3, #4
 8015872:	e7f8      	b.n	8015866 <mem_to_chunkid+0xa>
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 8015874:	3007      	adds	r0, #7
 8015876:	e7f9      	b.n	801586c <mem_to_chunkid+0x10>

08015878 <free_list_remove>:
{
 8015878:	b508      	push	{r3, lr}
	return big_heap_chunks(h->len);
 801587a:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1;
 801587c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015880:	d307      	bcc.n	8015892 <free_list_remove+0x1a>
	void *cmem = &buf[c];
 8015882:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
 8015886:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 8015888:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1;
 801588a:	2a01      	cmp	r2, #1
 801588c:	d002      	beq.n	8015894 <free_list_remove+0x1c>
 801588e:	2200      	movs	r2, #0
 8015890:	e000      	b.n	8015894 <free_list_remove+0x1c>
 8015892:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
 8015894:	b9a2      	cbnz	r2, 80158c0 <free_list_remove+0x48>
	void *cmem = &buf[c];
 8015896:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
 801589a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801589e:	d310      	bcc.n	80158c2 <free_list_remove+0x4a>
		return ((uint32_t *)cmem)[f];
 80158a0:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 80158a2:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
 80158a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80158a8:	d30d      	bcc.n	80158c6 <free_list_remove+0x4e>
 80158aa:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline size_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
 80158ac:	3308      	adds	r3, #8
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
 80158ae:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
 80158b2:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
 80158b4:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
 80158b8:	f1c2 021f 	rsb	r2, r2, #31
 80158bc:	f7ff fee7 	bl	801568e <free_list_remove_bidx>
}
 80158c0:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
 80158c2:	8852      	ldrh	r2, [r2, #2]
 80158c4:	e7ed      	b.n	80158a2 <free_list_remove+0x2a>
	return big_heap(h) ? 8 : 4;
 80158c6:	2304      	movs	r3, #4
 80158c8:	e7f0      	b.n	80158ac <free_list_remove+0x34>

080158ca <free_list_add>:
{
 80158ca:	b508      	push	{r3, lr}
	return big_heap_chunks(h->len);
 80158cc:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1;
 80158ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80158d2:	d307      	bcc.n	80158e4 <free_list_add+0x1a>
	void *cmem = &buf[c];
 80158d4:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
 80158d8:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 80158da:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1;
 80158dc:	2a01      	cmp	r2, #1
 80158de:	d002      	beq.n	80158e6 <free_list_add+0x1c>
 80158e0:	2200      	movs	r2, #0
 80158e2:	e000      	b.n	80158e6 <free_list_add+0x1c>
 80158e4:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
 80158e6:	b9a2      	cbnz	r2, 8015912 <free_list_add+0x48>
	void *cmem = &buf[c];
 80158e8:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
 80158ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80158f0:	d310      	bcc.n	8015914 <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
 80158f2:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 80158f4:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
 80158f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80158fa:	d30d      	bcc.n	8015918 <free_list_add+0x4e>
 80158fc:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
 80158fe:	3308      	adds	r3, #8
	size_t usable_sz = sz - min_chunk_size(h) + 1;
 8015900:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
 8015904:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
 8015906:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
 801590a:	f1c2 021f 	rsb	r2, r2, #31
 801590e:	f7ff fef2 	bl	80156f6 <free_list_add_bidx>
}
 8015912:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
 8015914:	8852      	ldrh	r2, [r2, #2]
 8015916:	e7ed      	b.n	80158f4 <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
 8015918:	2304      	movs	r3, #4
 801591a:	e7f0      	b.n	80158fe <free_list_add+0x34>

0801591c <free_chunk>:
{
 801591c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801591e:	4604      	mov	r4, r0
 8015920:	460d      	mov	r5, r1
	void *cmem = &buf[c];
 8015922:	00ce      	lsls	r6, r1, #3
 8015924:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
	return big_heap_chunks(h->len);
 8015928:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
 801592a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801592e:	d31f      	bcc.n	8015970 <free_chunk+0x54>
		return ((uint32_t *)cmem)[f];
 8015930:	6879      	ldr	r1, [r7, #4]
	return c + chunk_size(h, c);
 8015932:	eb05 0151 	add.w	r1, r5, r1, lsr #1
	void *cmem = &buf[c];
 8015936:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
 801593a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801593e:	d319      	bcc.n	8015974 <free_chunk+0x58>
		return ((uint32_t *)cmem)[f];
 8015940:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, right_chunk(h, c))) {
 8015942:	f013 0f01 	tst.w	r3, #1
 8015946:	d017      	beq.n	8015978 <free_chunk+0x5c>
	return big_heap_chunks(h->len);
 8015948:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
 801594a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801594e:	d324      	bcc.n	801599a <free_chunk+0x7e>
		return ((uint32_t *)cmem)[f];
 8015950:	59a1      	ldr	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
 8015952:	1a69      	subs	r1, r5, r1
	void *cmem = &buf[c];
 8015954:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
 8015958:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801595c:	d31f      	bcc.n	801599e <free_chunk+0x82>
		return ((uint32_t *)cmem)[f];
 801595e:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, left_chunk(h, c))) {
 8015960:	f013 0f01 	tst.w	r3, #1
 8015964:	d01d      	beq.n	80159a2 <free_chunk+0x86>
	free_list_add(h, c);
 8015966:	4629      	mov	r1, r5
 8015968:	4620      	mov	r0, r4
 801596a:	f7ff ffae 	bl	80158ca <free_list_add>
}
 801596e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ((uint16_t *)cmem)[f];
 8015970:	8879      	ldrh	r1, [r7, #2]
 8015972:	e7de      	b.n	8015932 <free_chunk+0x16>
 8015974:	8853      	ldrh	r3, [r2, #2]
 8015976:	e7e4      	b.n	8015942 <free_chunk+0x26>
		free_list_remove(h, right_chunk(h, c));
 8015978:	4620      	mov	r0, r4
 801597a:	f7ff ff7d 	bl	8015878 <free_list_remove>
	return big_heap_chunks(h->len);
 801597e:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
 8015980:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015984:	d307      	bcc.n	8015996 <free_chunk+0x7a>
		return ((uint32_t *)cmem)[f];
 8015986:	687a      	ldr	r2, [r7, #4]
		merge_chunks(h, c, right_chunk(h, c));
 8015988:	eb05 0252 	add.w	r2, r5, r2, lsr #1
 801598c:	4629      	mov	r1, r5
 801598e:	4620      	mov	r0, r4
 8015990:	f7ff ff35 	bl	80157fe <merge_chunks>
 8015994:	e7d8      	b.n	8015948 <free_chunk+0x2c>
		return ((uint16_t *)cmem)[f];
 8015996:	887a      	ldrh	r2, [r7, #2]
 8015998:	e7f6      	b.n	8015988 <free_chunk+0x6c>
 801599a:	5ba1      	ldrh	r1, [r4, r6]
 801599c:	e7d9      	b.n	8015952 <free_chunk+0x36>
 801599e:	8853      	ldrh	r3, [r2, #2]
 80159a0:	e7de      	b.n	8015960 <free_chunk+0x44>
		free_list_remove(h, left_chunk(h, c));
 80159a2:	4620      	mov	r0, r4
 80159a4:	f7ff ff68 	bl	8015878 <free_list_remove>
	return big_heap_chunks(h->len);
 80159a8:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
 80159aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80159ae:	d30c      	bcc.n	80159ca <free_chunk+0xae>
		return ((uint32_t *)cmem)[f];
 80159b0:	59a1      	ldr	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
 80159b2:	462a      	mov	r2, r5
 80159b4:	1a69      	subs	r1, r5, r1
 80159b6:	4620      	mov	r0, r4
 80159b8:	f7ff ff21 	bl	80157fe <merge_chunks>
	return big_heap_chunks(h->len);
 80159bc:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
 80159be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80159c2:	d304      	bcc.n	80159ce <free_chunk+0xb2>
		return ((uint32_t *)cmem)[f];
 80159c4:	59a3      	ldr	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
 80159c6:	1aed      	subs	r5, r5, r3
 80159c8:	e7cd      	b.n	8015966 <free_chunk+0x4a>
		return ((uint16_t *)cmem)[f];
 80159ca:	5ba1      	ldrh	r1, [r4, r6]
 80159cc:	e7f1      	b.n	80159b2 <free_chunk+0x96>
 80159ce:	5ba3      	ldrh	r3, [r4, r6]
 80159d0:	e7f9      	b.n	80159c6 <free_chunk+0xaa>

080159d2 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, size_t sz)
{
 80159d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return big_heap_chunks(h->len);
 80159d4:	6886      	ldr	r6, [r0, #8]
	return big_heap(h) ? 8 : 4;
 80159d6:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 80159da:	d319      	bcc.n	8015a10 <alloc_chunk+0x3e>
 80159dc:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
 80159de:	3308      	adds	r3, #8
	size_t usable_sz = sz - min_chunk_size(h) + 1;
 80159e0:	eba1 04d3 	sub.w	r4, r1, r3, lsr #3
 80159e4:	3401      	adds	r4, #1
	return 31 - __builtin_clz(usable_sz);
 80159e6:	fab4 f484 	clz	r4, r4
 80159ea:	f1c4 021f 	rsb	r2, r4, #31
	size_t usable_sz = sz - min_chunk_size(h) + 1;
 80159ee:	eba6 03d3 	sub.w	r3, r6, r3, lsr #3
 80159f2:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
 80159f4:	fab3 f383 	clz	r3, r3
 80159f8:	f1c3 031f 	rsb	r3, r3, #31
	int bi = bucket_idx(h, sz);
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
 80159fc:	4293      	cmp	r3, r2
 80159fe:	db3f      	blt.n	8015a80 <alloc_chunk+0xae>
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
 8015a00:	1d13      	adds	r3, r2, #4
 8015a02:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8015a06:	f1bc 0f00 	cmp.w	ip, #0
 8015a0a:	d024      	beq.n	8015a56 <alloc_chunk+0x84>
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
 8015a0c:	2303      	movs	r3, #3
 8015a0e:	e010      	b.n	8015a32 <alloc_chunk+0x60>
	return big_heap(h) ? 8 : 4;
 8015a10:	2304      	movs	r3, #4
 8015a12:	e7e4      	b.n	80159de <alloc_chunk+0xc>
		return ((uint16_t *)cmem)[f];
 8015a14:	f8b7 e002 	ldrh.w	lr, [r7, #2]
 8015a18:	e015      	b.n	8015a46 <alloc_chunk+0x74>
		do {
			chunkid_t c = b->next;
			if (chunk_size(h, c) >= sz) {
				free_list_remove_bidx(h, c, bi);
 8015a1a:	4629      	mov	r1, r5
 8015a1c:	f7ff fe37 	bl	801568e <free_list_remove_bidx>
				return c;
 8015a20:	e021      	b.n	8015a66 <alloc_chunk+0x94>
 8015a22:	88fd      	ldrh	r5, [r7, #6]
			}
			b->next = next_free_chunk(h, c);
 8015a24:	1d17      	adds	r7, r2, #4
 8015a26:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
 8015a2a:	3b01      	subs	r3, #1
 8015a2c:	d013      	beq.n	8015a56 <alloc_chunk+0x84>
 8015a2e:	45ac      	cmp	ip, r5
 8015a30:	d011      	beq.n	8015a56 <alloc_chunk+0x84>
			chunkid_t c = b->next;
 8015a32:	1d15      	adds	r5, r2, #4
 8015a34:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
	void *cmem = &buf[c];
 8015a38:	eb00 07c5 	add.w	r7, r0, r5, lsl #3
	if (big_heap(h)) {
 8015a3c:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8015a40:	d3e8      	bcc.n	8015a14 <alloc_chunk+0x42>
		return ((uint32_t *)cmem)[f];
 8015a42:	f8d7 e004 	ldr.w	lr, [r7, #4]
			if (chunk_size(h, c) >= sz) {
 8015a46:	ebb1 0f5e 	cmp.w	r1, lr, lsr #1
 8015a4a:	d9e6      	bls.n	8015a1a <alloc_chunk+0x48>
	if (big_heap(h)) {
 8015a4c:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8015a50:	d3e7      	bcc.n	8015a22 <alloc_chunk+0x50>
		return ((uint32_t *)cmem)[f];
 8015a52:	68fd      	ldr	r5, [r7, #12]
 8015a54:	e7e6      	b.n	8015a24 <alloc_chunk+0x52>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
 8015a56:	68c5      	ldr	r5, [r0, #12]
 8015a58:	f1c4 0320 	rsb	r3, r4, #32
 8015a5c:	2401      	movs	r4, #1
 8015a5e:	409c      	lsls	r4, r3
 8015a60:	4264      	negs	r4, r4

	if ((bmask & h->avail_buckets) != 0) {
 8015a62:	4025      	ands	r5, r4
 8015a64:	d101      	bne.n	8015a6a <alloc_chunk+0x98>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
 8015a66:	4628      	mov	r0, r5
 8015a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
 8015a6a:	fa95 f2a5 	rbit	r2, r5
 8015a6e:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
 8015a72:	1d13      	adds	r3, r2, #4
 8015a74:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
 8015a78:	4629      	mov	r1, r5
 8015a7a:	f7ff fe08 	bl	801568e <free_list_remove_bidx>
		return c;
 8015a7e:	e7f2      	b.n	8015a66 <alloc_chunk+0x94>
		return 0;
 8015a80:	2500      	movs	r5, #0
 8015a82:	e7f0      	b.n	8015a66 <alloc_chunk+0x94>

08015a84 <sys_heap_free>:
	if (mem == NULL) {
 8015a84:	b1c1      	cbz	r1, 8015ab8 <sys_heap_free+0x34>
{
 8015a86:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
 8015a88:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
 8015a8a:	4620      	mov	r0, r4
 8015a8c:	f7ff fee6 	bl	801585c <mem_to_chunkid>
 8015a90:	4601      	mov	r1, r0
	void *cmem = &buf[c];
 8015a92:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
	return big_heap_chunks(h->len);
 8015a96:	68a2      	ldr	r2, [r4, #8]
	if (big_heap(h)) {
 8015a98:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8015a9c:	d307      	bcc.n	8015aae <sys_heap_free+0x2a>
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
 8015a9e:	685a      	ldr	r2, [r3, #4]
 8015aa0:	f022 0201 	bic.w	r2, r2, #1
 8015aa4:	605a      	str	r2, [r3, #4]
	free_chunk(h, c);
 8015aa6:	4620      	mov	r0, r4
 8015aa8:	f7ff ff38 	bl	801591c <free_chunk>
}
 8015aac:	bd10      	pop	{r4, pc}
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
 8015aae:	885a      	ldrh	r2, [r3, #2]
 8015ab0:	f022 0201 	bic.w	r2, r2, #1
 8015ab4:	805a      	strh	r2, [r3, #2]
 8015ab6:	e7f6      	b.n	8015aa6 <sys_heap_free+0x22>
 8015ab8:	4770      	bx	lr

08015aba <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
	if (bytes == 0) {
 8015aba:	2900      	cmp	r1, #0
 8015abc:	d03b      	beq.n	8015b36 <sys_heap_alloc+0x7c>
{
 8015abe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ac0:	460c      	mov	r4, r1
		return NULL;
	}

	struct z_heap *h = heap->heap;
 8015ac2:	6805      	ldr	r5, [r0, #0]
	return big_heap_chunks(h->len);
 8015ac4:	68ab      	ldr	r3, [r5, #8]
	return big_heap(h) ? 8 : 4;
 8015ac6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015aca:	d320      	bcc.n	8015b0e <sys_heap_alloc+0x54>
 8015acc:	2308      	movs	r3, #8
	return chunksz(chunk_header_bytes(h) + bytes);
 8015ace:	441c      	add	r4, r3
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
 8015ad0:	3407      	adds	r4, #7
 8015ad2:	08e4      	lsrs	r4, r4, #3
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
 8015ad4:	4621      	mov	r1, r4
 8015ad6:	4628      	mov	r0, r5
 8015ad8:	f7ff ff7b 	bl	80159d2 <alloc_chunk>
	if (c == 0) {
 8015adc:	4607      	mov	r7, r0
 8015ade:	b360      	cbz	r0, 8015b3a <sys_heap_alloc+0x80>
	void *cmem = &buf[c];
 8015ae0:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	return big_heap_chunks(h->len);
 8015ae4:	68ab      	ldr	r3, [r5, #8]
	if (big_heap(h)) {
 8015ae6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015aea:	d312      	bcc.n	8015b12 <sys_heap_alloc+0x58>
		return ((uint32_t *)cmem)[f];
 8015aec:	6873      	ldr	r3, [r6, #4]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
 8015aee:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
 8015af2:	d310      	bcc.n	8015b16 <sys_heap_alloc+0x5c>
	return big_heap_chunks(h->len);
 8015af4:	68ab      	ldr	r3, [r5, #8]
	if (big_heap(h)) {
 8015af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015afa:	d317      	bcc.n	8015b2c <sys_heap_alloc+0x72>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
 8015afc:	6873      	ldr	r3, [r6, #4]
 8015afe:	f043 0301 	orr.w	r3, r3, #1
 8015b02:	6073      	str	r3, [r6, #4]
		split_chunks(h, c, c + chunk_sz);
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
 8015b04:	4639      	mov	r1, r7
 8015b06:	4628      	mov	r0, r5
 8015b08:	f7ff fdb6 	bl	8015678 <chunk_mem>
}
 8015b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return big_heap(h) ? 8 : 4;
 8015b0e:	2304      	movs	r3, #4
 8015b10:	e7dd      	b.n	8015ace <sys_heap_alloc+0x14>
		return ((uint16_t *)cmem)[f];
 8015b12:	8873      	ldrh	r3, [r6, #2]
 8015b14:	e7eb      	b.n	8015aee <sys_heap_alloc+0x34>
		split_chunks(h, c, c + chunk_sz);
 8015b16:	443c      	add	r4, r7
 8015b18:	4622      	mov	r2, r4
 8015b1a:	4639      	mov	r1, r7
 8015b1c:	4628      	mov	r0, r5
 8015b1e:	f7ff fe33 	bl	8015788 <split_chunks>
		free_list_add(h, c + chunk_sz);
 8015b22:	4621      	mov	r1, r4
 8015b24:	4628      	mov	r0, r5
 8015b26:	f7ff fed0 	bl	80158ca <free_list_add>
 8015b2a:	e7e3      	b.n	8015af4 <sys_heap_alloc+0x3a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
 8015b2c:	8873      	ldrh	r3, [r6, #2]
 8015b2e:	f043 0301 	orr.w	r3, r3, #1
 8015b32:	8073      	strh	r3, [r6, #2]
 8015b34:	e7e6      	b.n	8015b04 <sys_heap_alloc+0x4a>
		return NULL;
 8015b36:	2000      	movs	r0, #0
}
 8015b38:	4770      	bx	lr
		return NULL;
 8015b3a:	2000      	movs	r0, #0
 8015b3c:	e7e6      	b.n	8015b0c <sys_heap_alloc+0x52>

08015b3e <sys_heap_init>:
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
 8015b3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b40:	4603      	mov	r3, r0
	return big_heap_bytes(size) ? 8 : 4;
 8015b42:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8015b46:	d32e      	bcc.n	8015ba6 <sys_heap_init+0x68>
 8015b48:	2508      	movs	r5, #8
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
 8015b4a:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8015b4c:	1dc8      	adds	r0, r1, #7
 8015b4e:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8015b52:	440d      	add	r5, r1
 8015b54:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
 8015b58:	1a2d      	subs	r5, r5, r0
 8015b5a:	08ef      	lsrs	r7, r5, #3

	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
 8015b5c:	4606      	mov	r6, r0
	heap->heap = h;
 8015b5e:	6018      	str	r0, [r3, #0]
	h->chunk0_hdr_area = 0;
 8015b60:	2200      	movs	r2, #0
 8015b62:	2300      	movs	r3, #0
 8015b64:	e9c0 2300 	strd	r2, r3, [r0]
	h->len = buf_sz;
 8015b68:	6087      	str	r7, [r0, #8]
	h->avail_buckets = 0;
 8015b6a:	2300      	movs	r3, #0
 8015b6c:	60c3      	str	r3, [r0, #12]
	return big_heap(h) ? 8 : 4;
 8015b6e:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
 8015b72:	d31a      	bcc.n	8015baa <sys_heap_init+0x6c>
 8015b74:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
 8015b76:	3308      	adds	r3, #8
	size_t usable_sz = sz - min_chunk_size(h) + 1;
 8015b78:	eba7 03d3 	sub.w	r3, r7, r3, lsr #3
 8015b7c:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
 8015b7e:	fab3 f383 	clz	r3, r3

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
 8015b82:	f1c3 0c20 	rsb	ip, r3, #32
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
 8015b86:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8015b8a:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
 8015b8c:	f103 0e07 	add.w	lr, r3, #7
 8015b90:	ea4f 01de 	mov.w	r1, lr, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
 8015b94:	2300      	movs	r3, #0
 8015b96:	4563      	cmp	r3, ip
 8015b98:	da09      	bge.n	8015bae <sys_heap_init+0x70>
		h->buckets[i].next = 0;
 8015b9a:	1d1a      	adds	r2, r3, #4
 8015b9c:	2400      	movs	r4, #0
 8015b9e:	f846 4022 	str.w	r4, [r6, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
 8015ba2:	3301      	adds	r3, #1
 8015ba4:	e7f7      	b.n	8015b96 <sys_heap_init+0x58>
	return big_heap_bytes(size) ? 8 : 4;
 8015ba6:	2504      	movs	r5, #4
 8015ba8:	e7cf      	b.n	8015b4a <sys_heap_init+0xc>
	return big_heap(h) ? 8 : 4;
 8015baa:	2304      	movs	r3, #4
 8015bac:	e7e3      	b.n	8015b76 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 8015bae:	004b      	lsls	r3, r1, #1
	if (big_heap(h)) {
 8015bb0:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
 8015bb4:	d32e      	bcc.n	8015c14 <sys_heap_init+0xd6>
		((uint32_t *)cmem)[f] = val;
 8015bb6:	6043      	str	r3, [r0, #4]
	if (big_heap(h)) {
 8015bb8:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
 8015bbc:	d32c      	bcc.n	8015c18 <sys_heap_init+0xda>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
 8015bbe:	6843      	ldr	r3, [r0, #4]
 8015bc0:	f043 0301 	orr.w	r3, r3, #1
 8015bc4:	6043      	str	r3, [r0, #4]
	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
 8015bc6:	1a7a      	subs	r2, r7, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 8015bc8:	0056      	lsls	r6, r2, #1
	void *cmem = &buf[c];
 8015bca:	f02e 0307 	bic.w	r3, lr, #7
 8015bce:	18c4      	adds	r4, r0, r3
	if (big_heap(h)) {
 8015bd0:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
 8015bd4:	d325      	bcc.n	8015c22 <sys_heap_init+0xe4>
		((uint32_t *)cmem)[f] = val;
 8015bd6:	6066      	str	r6, [r4, #4]
	return big_heap_chunks(h->len);
 8015bd8:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 8015bda:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8015bde:	d322      	bcc.n	8015c26 <sys_heap_init+0xe8>
		((uint32_t *)cmem)[f] = val;
 8015be0:	50c1      	str	r1, [r0, r3]
	void *cmem = &buf[c];
 8015be2:	f025 0307 	bic.w	r3, r5, #7
 8015be6:	4405      	add	r5, r0
	return big_heap_chunks(h->len);
 8015be8:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 8015bea:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8015bee:	d31c      	bcc.n	8015c2a <sys_heap_init+0xec>
		((uint32_t *)cmem)[f] = val;
 8015bf0:	2400      	movs	r4, #0
 8015bf2:	606c      	str	r4, [r5, #4]
	return big_heap_chunks(h->len);
 8015bf4:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 8015bf6:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8015bfa:	d319      	bcc.n	8015c30 <sys_heap_init+0xf2>
		((uint32_t *)cmem)[f] = val;
 8015bfc:	50c2      	str	r2, [r0, r3]
	return big_heap_chunks(h->len);
 8015bfe:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
 8015c00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015c04:	d316      	bcc.n	8015c34 <sys_heap_init+0xf6>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
 8015c06:	686b      	ldr	r3, [r5, #4]
 8015c08:	f043 0301 	orr.w	r3, r3, #1
 8015c0c:	606b      	str	r3, [r5, #4]
	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);

	free_list_add(h, chunk0_size);
 8015c0e:	f7ff fe5c 	bl	80158ca <free_list_add>
}
 8015c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
 8015c14:	8043      	strh	r3, [r0, #2]
 8015c16:	e7cf      	b.n	8015bb8 <sys_heap_init+0x7a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
 8015c18:	8843      	ldrh	r3, [r0, #2]
 8015c1a:	f043 0301 	orr.w	r3, r3, #1
 8015c1e:	8043      	strh	r3, [r0, #2]
 8015c20:	e7d1      	b.n	8015bc6 <sys_heap_init+0x88>
		((uint16_t *)cmem)[f] = val;
 8015c22:	8066      	strh	r6, [r4, #2]
 8015c24:	e7d8      	b.n	8015bd8 <sys_heap_init+0x9a>
 8015c26:	52c1      	strh	r1, [r0, r3]
 8015c28:	e7db      	b.n	8015be2 <sys_heap_init+0xa4>
 8015c2a:	2400      	movs	r4, #0
 8015c2c:	806c      	strh	r4, [r5, #2]
 8015c2e:	e7e1      	b.n	8015bf4 <sys_heap_init+0xb6>
 8015c30:	52c2      	strh	r2, [r0, r3]
 8015c32:	e7e4      	b.n	8015bfe <sys_heap_init+0xc0>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
 8015c34:	886b      	ldrh	r3, [r5, #2]
 8015c36:	f043 0301 	orr.w	r3, r3, #1
 8015c3a:	806b      	strh	r3, [r5, #2]
 8015c3c:	e7e7      	b.n	8015c0e <sys_heap_init+0xd0>

08015c3e <_uc>:
{
 8015c3e:	e004      	b.n	8015c4a <_uc+0xc>
			*buf += 'A' - 'a';
 8015c40:	3a20      	subs	r2, #32
 8015c42:	7002      	strb	r2, [r0, #0]
	} while (*buf++);
 8015c44:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015c48:	b133      	cbz	r3, 8015c58 <_uc+0x1a>
		if (*buf >= 'a' && *buf <= 'z') {
 8015c4a:	7802      	ldrb	r2, [r0, #0]
 8015c4c:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 8015c50:	b2db      	uxtb	r3, r3
 8015c52:	2b19      	cmp	r3, #25
 8015c54:	d8f6      	bhi.n	8015c44 <_uc+0x6>
 8015c56:	e7f3      	b.n	8015c40 <_uc+0x2>
}
 8015c58:	4770      	bx	lr

08015c5a <_to_x>:
{
 8015c5a:	b4f0      	push	{r4, r5, r6, r7}
 8015c5c:	4606      	mov	r6, r0
 8015c5e:	4604      	mov	r4, r0
 8015c60:	e008      	b.n	8015c74 <_to_x+0x1a>
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
 8015c62:	2300      	movs	r3, #0
 8015c64:	4625      	mov	r5, r4
 8015c66:	4403      	add	r3, r0
 8015c68:	3330      	adds	r3, #48	; 0x30
 8015c6a:	f805 3b01 	strb.w	r3, [r5], #1
	} while (n);
 8015c6e:	4297      	cmp	r7, r2
 8015c70:	d30a      	bcc.n	8015c88 <_to_x+0x2e>
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
 8015c72:	462c      	mov	r4, r5
		unsigned int d = n % base;
 8015c74:	fbb1 f3f2 	udiv	r3, r1, r2
 8015c78:	fb02 1013 	mls	r0, r2, r3, r1
		n /= base;
 8015c7c:	460f      	mov	r7, r1
 8015c7e:	4619      	mov	r1, r3
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
 8015c80:	2809      	cmp	r0, #9
 8015c82:	d9ee      	bls.n	8015c62 <_to_x+0x8>
 8015c84:	2327      	movs	r3, #39	; 0x27
 8015c86:	e7ed      	b.n	8015c64 <_to_x+0xa>
	*buf = 0;
 8015c88:	2300      	movs	r3, #0
 8015c8a:	702b      	strb	r3, [r5, #0]
	len = buf - start;
 8015c8c:	1ba8      	subs	r0, r5, r6
	for (buf--; buf > start; buf--, start++) {
 8015c8e:	e005      	b.n	8015c9c <_to_x+0x42>
		char tmp = *buf;
 8015c90:	7823      	ldrb	r3, [r4, #0]
		*buf = *start;
 8015c92:	7832      	ldrb	r2, [r6, #0]
 8015c94:	f804 2901 	strb.w	r2, [r4], #-1
		*start = tmp;
 8015c98:	f806 3b01 	strb.w	r3, [r6], #1
	for (buf--; buf > start; buf--, start++) {
 8015c9c:	42b4      	cmp	r4, r6
 8015c9e:	d8f7      	bhi.n	8015c90 <_to_x+0x36>
}
 8015ca0:	bcf0      	pop	{r4, r5, r6, r7}
 8015ca2:	4770      	bx	lr

08015ca4 <_to_hex>:
{
 8015ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ca6:	4605      	mov	r5, r0
 8015ca8:	461f      	mov	r7, r3
	if (alt_form) {
 8015caa:	b17a      	cbz	r2, 8015ccc <_to_hex+0x28>
		*buf++ = '0';
 8015cac:	4604      	mov	r4, r0
 8015cae:	2330      	movs	r3, #48	; 0x30
 8015cb0:	f804 3b02 	strb.w	r3, [r4], #2
		*buf++ = 'x';
 8015cb4:	2378      	movs	r3, #120	; 0x78
 8015cb6:	7043      	strb	r3, [r0, #1]
	len = _to_x(buf, value, 16);
 8015cb8:	2210      	movs	r2, #16
 8015cba:	4620      	mov	r0, r4
 8015cbc:	f7ff ffcd 	bl	8015c5a <_to_x>
 8015cc0:	4606      	mov	r6, r0
	if (prefix == 'X') {
 8015cc2:	2f58      	cmp	r7, #88	; 0x58
 8015cc4:	d004      	beq.n	8015cd0 <_to_hex+0x2c>
	return len + (buf - buf0);
 8015cc6:	1b64      	subs	r4, r4, r5
}
 8015cc8:	19a0      	adds	r0, r4, r6
 8015cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ccc:	4604      	mov	r4, r0
 8015cce:	e7f3      	b.n	8015cb8 <_to_hex+0x14>
		_uc(buf0);
 8015cd0:	4628      	mov	r0, r5
 8015cd2:	f7ff ffb4 	bl	8015c3e <_uc>
 8015cd6:	e7f6      	b.n	8015cc6 <_to_hex+0x22>

08015cd8 <_to_octal>:
{
 8015cd8:	4603      	mov	r3, r0
	if (alt_form) {
 8015cda:	b11a      	cbz	r2, 8015ce4 <_to_octal+0xc>
		*buf++ = '0';
 8015cdc:	2230      	movs	r2, #48	; 0x30
 8015cde:	f800 2b01 	strb.w	r2, [r0], #1
		if (!value) {
 8015ce2:	b131      	cbz	r1, 8015cf2 <_to_octal+0x1a>
{
 8015ce4:	b510      	push	{r4, lr}
	return (buf - buf0) + _to_x(buf, value, 8);
 8015ce6:	1ac4      	subs	r4, r0, r3
 8015ce8:	2208      	movs	r2, #8
 8015cea:	f7ff ffb6 	bl	8015c5a <_to_x>
 8015cee:	4420      	add	r0, r4
}
 8015cf0:	bd10      	pop	{r4, pc}
			*buf++ = 0;
 8015cf2:	2200      	movs	r2, #0
 8015cf4:	705a      	strb	r2, [r3, #1]
			return 1;
 8015cf6:	2001      	movs	r0, #1
}
 8015cf8:	4770      	bx	lr

08015cfa <_to_udec>:
{
 8015cfa:	b508      	push	{r3, lr}
	return _to_x(buf, value, 10);
 8015cfc:	220a      	movs	r2, #10
 8015cfe:	f7ff ffac 	bl	8015c5a <_to_x>
}
 8015d02:	bd08      	pop	{r3, pc}

08015d04 <_to_dec>:
{
 8015d04:	b538      	push	{r3, r4, r5, lr}
 8015d06:	4605      	mov	r5, r0
	if (value < 0) {
 8015d08:	2900      	cmp	r1, #0
 8015d0a:	db05      	blt.n	8015d18 <_to_dec+0x14>
	} else if (fplus) {
 8015d0c:	b17a      	cbz	r2, 8015d2e <_to_dec+0x2a>
		*buf++ = '+';
 8015d0e:	4604      	mov	r4, r0
 8015d10:	232b      	movs	r3, #43	; 0x2b
 8015d12:	f804 3b01 	strb.w	r3, [r4], #1
 8015d16:	e004      	b.n	8015d22 <_to_dec+0x1e>
		*buf++ = '-';
 8015d18:	4604      	mov	r4, r0
 8015d1a:	232d      	movs	r3, #45	; 0x2d
 8015d1c:	f804 3b01 	strb.w	r3, [r4], #1
		value = -value;
 8015d20:	4249      	negs	r1, r1
	return (buf + _to_udec(buf, value)) - start;
 8015d22:	4620      	mov	r0, r4
 8015d24:	f7ff ffe9 	bl	8015cfa <_to_udec>
 8015d28:	4420      	add	r0, r4
}
 8015d2a:	1b40      	subs	r0, r0, r5
 8015d2c:	bd38      	pop	{r3, r4, r5, pc}
	} else if (fspace) {
 8015d2e:	b123      	cbz	r3, 8015d3a <_to_dec+0x36>
		*buf++ = ' ';
 8015d30:	4604      	mov	r4, r0
 8015d32:	2320      	movs	r3, #32
 8015d34:	f804 3b01 	strb.w	r3, [r4], #1
 8015d38:	e7f3      	b.n	8015d22 <_to_dec+0x1e>
 8015d3a:	4604      	mov	r4, r0
 8015d3c:	e7f1      	b.n	8015d22 <_to_dec+0x1e>

08015d3e <_rlrshift>:
{
 8015d3e:	b470      	push	{r4, r5, r6}
	*v = (*v & 1) + (*v >> 1);
 8015d40:	6806      	ldr	r6, [r0, #0]
 8015d42:	6845      	ldr	r5, [r0, #4]
 8015d44:	2300      	movs	r3, #0
 8015d46:	4619      	mov	r1, r3
 8015d48:	f006 0301 	and.w	r3, r6, #1
 8015d4c:	0872      	lsrs	r2, r6, #1
 8015d4e:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8015d52:	086c      	lsrs	r4, r5, #1
 8015d54:	189b      	adds	r3, r3, r2
 8015d56:	eb44 0101 	adc.w	r1, r4, r1
 8015d5a:	6003      	str	r3, [r0, #0]
 8015d5c:	6041      	str	r1, [r0, #4]
}
 8015d5e:	bc70      	pop	{r4, r5, r6}
 8015d60:	4770      	bx	lr

08015d62 <_get_digit>:
	if (*digit_count > 0) {
 8015d62:	680b      	ldr	r3, [r1, #0]
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	dd16      	ble.n	8015d96 <_get_digit+0x34>
{
 8015d68:	b430      	push	{r4, r5}
 8015d6a:	4604      	mov	r4, r0
		*digit_count -= 1;
 8015d6c:	3b01      	subs	r3, #1
 8015d6e:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
 8015d70:	6801      	ldr	r1, [r0, #0]
 8015d72:	6840      	ldr	r0, [r0, #4]
 8015d74:	0085      	lsls	r5, r0, #2
 8015d76:	008b      	lsls	r3, r1, #2
 8015d78:	ea45 7291 	orr.w	r2, r5, r1, lsr #30
 8015d7c:	185b      	adds	r3, r3, r1
 8015d7e:	eb40 0202 	adc.w	r2, r0, r2
 8015d82:	18db      	adds	r3, r3, r3
 8015d84:	4152      	adcs	r2, r2
		rval = ((*fr >> 60) & 0xF) + '0';
 8015d86:	0f10      	lsrs	r0, r2, #28
 8015d88:	3030      	adds	r0, #48	; 0x30
		*fr &= 0x0FFFFFFFFFFFFFFFull;
 8015d8a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8015d8e:	6023      	str	r3, [r4, #0]
 8015d90:	6062      	str	r2, [r4, #4]
}
 8015d92:	bc30      	pop	{r4, r5}
 8015d94:	4770      	bx	lr
		rval = '0';
 8015d96:	2030      	movs	r0, #48	; 0x30
}
 8015d98:	4770      	bx	lr

08015d9a <_atoi>:
{
 8015d9a:	b410      	push	{r4}
 8015d9c:	4604      	mov	r4, r0
	const char *p = *sptr - 1;
 8015d9e:	6802      	ldr	r2, [r0, #0]
 8015da0:	3a01      	subs	r2, #1
	int i = 0;
 8015da2:	2000      	movs	r0, #0
	while (isdigit((int)*p)) {
 8015da4:	7813      	ldrb	r3, [r2, #0]
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 8015da6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8015daa:	2909      	cmp	r1, #9
 8015dac:	d806      	bhi.n	8015dbc <_atoi+0x22>
		i = 10 * i + *p++ - '0';
 8015dae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8015db2:	3201      	adds	r2, #1
 8015db4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8015db8:	3830      	subs	r0, #48	; 0x30
 8015dba:	e7f3      	b.n	8015da4 <_atoi+0xa>
	*sptr = p;
 8015dbc:	6022      	str	r2, [r4, #0]
}
 8015dbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015dc2:	4770      	bx	lr

08015dc4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 8015dc4:	4770      	bx	lr

08015dc6 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
 8015dc6:	2300      	movs	r3, #0
 8015dc8:	6043      	str	r3, [r0, #4]
	list->head = NULL;
 8015dca:	6003      	str	r3, [r0, #0]
}
 8015dcc:	4770      	bx	lr

08015dce <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
 8015dce:	6803      	ldr	r3, [r0, #0]
 8015dd0:	b12b      	cbz	r3, 8015dde <log_list_add_tail+0x10>
		list->head = msg;
	} else {
		list->tail->next = msg;
 8015dd2:	6843      	ldr	r3, [r0, #4]
 8015dd4:	6019      	str	r1, [r3, #0]
	}

	list->tail = msg;
 8015dd6:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
 8015dd8:	2300      	movs	r3, #0
 8015dda:	600b      	str	r3, [r1, #0]
}
 8015ddc:	4770      	bx	lr
		list->head = msg;
 8015dde:	6001      	str	r1, [r0, #0]
 8015de0:	e7f9      	b.n	8015dd6 <log_list_add_tail+0x8>

08015de2 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
 8015de2:	6800      	ldr	r0, [r0, #0]
 8015de4:	4770      	bx	lr

08015de6 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
 8015de6:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
 8015de8:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
 8015dea:	b108      	cbz	r0, 8015df0 <log_list_head_get+0xa>
		list->head = list->head->next;
 8015dec:	6802      	ldr	r2, [r0, #0]
 8015dee:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
 8015df0:	4770      	bx	lr

08015df2 <dummy_timestamp>:
}
 8015df2:	2000      	movs	r0, #0
 8015df4:	4770      	bx	lr

08015df6 <msg_filter_check>:
}
 8015df6:	2001      	movs	r0, #1
 8015df8:	4770      	bx	lr

08015dfa <k_uptime_get_32>:
{
 8015dfa:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8015dfc:	f007 f926 	bl	801d04c <z_impl_k_uptime_ticks>
			return t / (from_hz / to_hz);
 8015e00:	220a      	movs	r2, #10
 8015e02:	2300      	movs	r3, #0
 8015e04:	f7ea f9c0 	bl	8000188 <__aeabi_uldivmod>
}
 8015e08:	bd08      	pop	{r3, pc}

08015e0a <z_log_get_s_mask>:
{
 8015e0a:	b470      	push	{r4, r5, r6}
 8015e0c:	4603      	mov	r3, r0
	uint32_t mask = 0;
 8015e0e:	2000      	movs	r0, #0
	uint32_t arg = 0;
 8015e10:	4605      	mov	r5, r0
	bool arm = false;
 8015e12:	4604      	mov	r4, r0
	while ((curr = *str++) && arg < nargs) {
 8015e14:	e001      	b.n	8015e1a <z_log_get_s_mask+0x10>
			arm = !arm;
 8015e16:	f084 0401 	eor.w	r4, r4, #1
	while ((curr = *str++) && arg < nargs) {
 8015e1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015e1e:	b19a      	cbz	r2, 8015e48 <z_log_get_s_mask+0x3e>
 8015e20:	428d      	cmp	r5, r1
 8015e22:	d211      	bcs.n	8015e48 <z_log_get_s_mask+0x3e>
		if (curr == '%') {
 8015e24:	2a25      	cmp	r2, #37	; 0x25
 8015e26:	d0f6      	beq.n	8015e16 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
 8015e28:	2c00      	cmp	r4, #0
 8015e2a:	d0f6      	beq.n	8015e1a <z_log_get_s_mask+0x10>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
 8015e2c:	f042 0620 	orr.w	r6, r2, #32
 8015e30:	3e61      	subs	r6, #97	; 0x61
 8015e32:	2e19      	cmp	r6, #25
 8015e34:	d8f1      	bhi.n	8015e1a <z_log_get_s_mask+0x10>
			if (curr == 's') {
 8015e36:	2a73      	cmp	r2, #115	; 0x73
 8015e38:	d002      	beq.n	8015e40 <z_log_get_s_mask+0x36>
			arg++;
 8015e3a:	3501      	adds	r5, #1
			arm = false;
 8015e3c:	2400      	movs	r4, #0
 8015e3e:	e7ec      	b.n	8015e1a <z_log_get_s_mask+0x10>
				mask |= BIT(arg);
 8015e40:	2201      	movs	r2, #1
 8015e42:	40aa      	lsls	r2, r5
 8015e44:	4310      	orrs	r0, r2
 8015e46:	e7f8      	b.n	8015e3a <z_log_get_s_mask+0x30>
}
 8015e48:	bc70      	pop	{r4, r5, r6}
 8015e4a:	4770      	bx	lr

08015e4c <block_on_alloc>:
}
 8015e4c:	2000      	movs	r0, #0
 8015e4e:	4770      	bx	lr

08015e50 <cont_arg_get>:

static log_arg_t cont_arg_get(struct log_msg *msg, uint32_t arg_idx)
{
	struct log_msg_cont *cont;

	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
 8015e50:	2901      	cmp	r1, #1
 8015e52:	d906      	bls.n	8015e62 <cont_arg_get+0x12>
		return msg->payload.ext.data.args[arg_idx];
	}


	cont = msg->payload.ext.next;
 8015e54:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
 8015e56:	3902      	subs	r1, #2

	while (arg_idx >= ARGS_CONT_MSG) {
 8015e58:	2906      	cmp	r1, #6
 8015e5a:	d907      	bls.n	8015e6c <cont_arg_get+0x1c>
		arg_idx -= ARGS_CONT_MSG;
 8015e5c:	3907      	subs	r1, #7
		cont = cont->next;
 8015e5e:	681b      	ldr	r3, [r3, #0]
 8015e60:	e7fa      	b.n	8015e58 <cont_arg_get+0x8>
		return msg->payload.ext.data.args[arg_idx];
 8015e62:	3104      	adds	r1, #4
 8015e64:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015e68:	6888      	ldr	r0, [r1, #8]
 8015e6a:	4770      	bx	lr
	}

	return cont->payload.args[arg_idx];
 8015e6c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8015e70:	6848      	ldr	r0, [r1, #4]
}
 8015e72:	4770      	bx	lr

08015e74 <copy_args_to_msg>:

	return msg;
}

static void copy_args_to_msg(struct  log_msg *msg, log_arg_t *args, uint32_t nargs)
{
 8015e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e78:	460d      	mov	r5, r1
 8015e7a:	4614      	mov	r4, r2
	struct log_msg_cont *cont = msg->payload.ext.next;
 8015e7c:	6946      	ldr	r6, [r0, #20]

	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
 8015e7e:	2a03      	cmp	r2, #3
 8015e80:	d917      	bls.n	8015eb2 <copy_args_to_msg+0x3e>
		(void)memcpy(msg->payload.ext.data.args, args,
 8015e82:	2208      	movs	r2, #8
 8015e84:	3018      	adds	r0, #24
 8015e86:	f001 fff9 	bl	8017e7c <memcpy>
		       LOG_MSG_NARGS_HEAD_CHUNK * sizeof(log_arg_t));
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
 8015e8a:	3c02      	subs	r4, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
 8015e8c:	3508      	adds	r5, #8
		(void)memcpy(msg->payload.single.args, args,
			     nargs * sizeof(log_arg_t));
		nargs  = 0U;
	}

	while (nargs != 0U) {
 8015e8e:	b1b4      	cbz	r4, 8015ebe <copy_args_to_msg+0x4a>
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
 8015e90:	46a0      	mov	r8, r4
 8015e92:	2c07      	cmp	r4, #7
 8015e94:	bf28      	it	cs
 8015e96:	f04f 0807 	movcs.w	r8, #7

		(void)memcpy(cont->payload.args, args,
 8015e9a:	ea4f 0788 	mov.w	r7, r8, lsl #2
 8015e9e:	463a      	mov	r2, r7
 8015ea0:	4629      	mov	r1, r5
 8015ea2:	1d30      	adds	r0, r6, #4
 8015ea4:	f001 ffea 	bl	8017e7c <memcpy>
			     cpy_args * sizeof(log_arg_t));
		nargs -= cpy_args;
 8015ea8:	eba4 0408 	sub.w	r4, r4, r8
		args += cpy_args;
 8015eac:	443d      	add	r5, r7
		cont = cont->next;
 8015eae:	6836      	ldr	r6, [r6, #0]
 8015eb0:	e7ed      	b.n	8015e8e <copy_args_to_msg+0x1a>
		(void)memcpy(msg->payload.single.args, args,
 8015eb2:	0092      	lsls	r2, r2, #2
 8015eb4:	3014      	adds	r0, #20
 8015eb6:	f001 ffe1 	bl	8017e7c <memcpy>
		nargs  = 0U;
 8015eba:	2400      	movs	r4, #0
 8015ebc:	e7e7      	b.n	8015e8e <copy_args_to_msg+0x1a>
	}
}
 8015ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015ec2 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
 8015ec2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ec6:	4688      	mov	r8, r1
 8015ec8:	461c      	mov	r4, r3
 8015eca:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
 8015ece:	8901      	ldrh	r1, [r0, #8]
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
 8015ed0:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8015ed4:	d21f      	bcs.n	8015f16 <log_msg_hexdump_data_op+0x54>
 8015ed6:	088b      	lsrs	r3, r1, #2
		*length = 0;
		return;
	}

	if ((offset + *length) > available_len) {
 8015ed8:	6811      	ldr	r1, [r2, #0]
 8015eda:	4421      	add	r1, r4
 8015edc:	4299      	cmp	r1, r3
 8015ede:	d901      	bls.n	8015ee4 <log_msg_hexdump_data_op+0x22>
		*length = available_len - offset;
 8015ee0:	1b19      	subs	r1, r3, r4
 8015ee2:	6011      	str	r1, [r2, #0]
	}

	req_len = *length;
 8015ee4:	6817      	ldr	r7, [r2, #0]

	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
 8015ee6:	2b0c      	cmp	r3, #12
 8015ee8:	d919      	bls.n	8015f1e <log_msg_hexdump_data_op+0x5c>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
		head_data = msg->payload.ext.data.bytes;
 8015eea:	f100 0c18 	add.w	ip, r0, #24
		cont = msg->payload.ext.next;
 8015eee:	6946      	ldr	r6, [r0, #20]
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
 8015ef0:	2308      	movs	r3, #8
		head_data = msg->payload.single.bytes;
		chunk_len = available_len;

	}

	if (offset < chunk_len) {
 8015ef2:	42a3      	cmp	r3, r4
 8015ef4:	d91e      	bls.n	8015f34 <log_msg_hexdump_data_op+0x72>
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
 8015ef6:	42bb      	cmp	r3, r7
 8015ef8:	bf28      	it	cs
 8015efa:	463b      	movcs	r3, r7
 8015efc:	461d      	mov	r5, r3

		if (put_op) {
 8015efe:	f1b9 0f00 	cmp.w	r9, #0
 8015f02:	d010      	beq.n	8015f26 <log_msg_hexdump_data_op+0x64>
			(void)memcpy(&head_data[offset], data, cpy_len);
 8015f04:	461a      	mov	r2, r3
 8015f06:	4641      	mov	r1, r8
 8015f08:	eb0c 0004 	add.w	r0, ip, r4
 8015f0c:	f001 ffb6 	bl	8017e7c <memcpy>
		} else {
			(void)memcpy(data, &head_data[offset], cpy_len);
		}

		req_len -= cpy_len;
 8015f10:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
 8015f12:	44a8      	add	r8, r5
 8015f14:	e021      	b.n	8015f5a <log_msg_hexdump_data_op+0x98>
		*length = 0;
 8015f16:	2300      	movs	r3, #0
 8015f18:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
 8015f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		head_data = msg->payload.single.bytes;
 8015f1e:	f100 0c14 	add.w	ip, r0, #20
	struct log_msg_cont *cont = NULL;
 8015f22:	2600      	movs	r6, #0
 8015f24:	e7e5      	b.n	8015ef2 <log_msg_hexdump_data_op+0x30>
			(void)memcpy(data, &head_data[offset], cpy_len);
 8015f26:	461a      	mov	r2, r3
 8015f28:	eb0c 0104 	add.w	r1, ip, r4
 8015f2c:	4640      	mov	r0, r8
 8015f2e:	f001 ffa5 	bl	8017e7c <memcpy>
 8015f32:	e7ed      	b.n	8015f10 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
 8015f34:	1ae4      	subs	r4, r4, r3
		if (cont == NULL) {
 8015f36:	b91e      	cbnz	r6, 8015f40 <log_msg_hexdump_data_op+0x7e>
			cont = msg->payload.ext.next;
 8015f38:	6946      	ldr	r6, [r0, #20]
 8015f3a:	e001      	b.n	8015f40 <log_msg_hexdump_data_op+0x7e>
			cont = cont->next;
 8015f3c:	6836      	ldr	r6, [r6, #0]
			offset -= chunk_len;
 8015f3e:	3c1c      	subs	r4, #28
		while (offset >= chunk_len) {
 8015f40:	2c1b      	cmp	r4, #27
 8015f42:	d8fb      	bhi.n	8015f3c <log_msg_hexdump_data_op+0x7a>
 8015f44:	e009      	b.n	8015f5a <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
 8015f46:	1931      	adds	r1, r6, r4
 8015f48:	462a      	mov	r2, r5
 8015f4a:	3104      	adds	r1, #4
 8015f4c:	4640      	mov	r0, r8
 8015f4e:	f001 ff95 	bl	8017e7c <memcpy>
		cont = cont->next;
 8015f52:	6836      	ldr	r6, [r6, #0]
		req_len -= cpy_len;
 8015f54:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
 8015f56:	44a8      	add	r8, r5
		offset = 0;
 8015f58:	2400      	movs	r4, #0
	while ((req_len > 0) && (cont != NULL)) {
 8015f5a:	2f00      	cmp	r7, #0
 8015f5c:	d0dd      	beq.n	8015f1a <log_msg_hexdump_data_op+0x58>
 8015f5e:	2e00      	cmp	r6, #0
 8015f60:	d0db      	beq.n	8015f1a <log_msg_hexdump_data_op+0x58>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
 8015f62:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
 8015f66:	42bd      	cmp	r5, r7
 8015f68:	bf28      	it	cs
 8015f6a:	463d      	movcs	r5, r7
		if (put_op) {
 8015f6c:	f1b9 0f00 	cmp.w	r9, #0
 8015f70:	d0e9      	beq.n	8015f46 <log_msg_hexdump_data_op+0x84>
			(void)memcpy(&cont->payload.bytes[offset],
 8015f72:	1930      	adds	r0, r6, r4
 8015f74:	462a      	mov	r2, r5
 8015f76:	4641      	mov	r1, r8
 8015f78:	3004      	adds	r0, #4
 8015f7a:	f001 ff7f 	bl	8017e7c <memcpy>
 8015f7e:	e7e8      	b.n	8015f52 <log_msg_hexdump_data_op+0x90>

08015f80 <log_msg_get>:
	atomic_inc(&msg->hdr.ref_cnt);
 8015f80:	3004      	adds	r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8015f82:	f3bf 8f5b 	dmb	ish
 8015f86:	e850 3f00 	ldrex	r3, [r0]
 8015f8a:	3301      	adds	r3, #1
 8015f8c:	e840 3200 	strex	r2, r3, [r0]
 8015f90:	2a00      	cmp	r2, #0
 8015f92:	d1f8      	bne.n	8015f86 <log_msg_get+0x6>
 8015f94:	f3bf 8f5b 	dmb	ish
}
 8015f98:	4770      	bx	lr

08015f9a <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
 8015f9a:	7a40      	ldrb	r0, [r0, #9]
}
 8015f9c:	0900      	lsrs	r0, r0, #4
 8015f9e:	4770      	bx	lr

08015fa0 <log_msg_arg_get>:
{
 8015fa0:	b508      	push	{r3, lr}
	if (arg_idx >= msg->hdr.params.std.nargs) {
 8015fa2:	7a43      	ldrb	r3, [r0, #9]
 8015fa4:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
 8015fa8:	d20a      	bcs.n	8015fc0 <log_msg_arg_get+0x20>
 8015faa:	091a      	lsrs	r2, r3, #4
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
 8015fac:	2a03      	cmp	r2, #3
 8015fae:	d804      	bhi.n	8015fba <log_msg_arg_get+0x1a>
		arg = msg->payload.single.args[arg_idx];
 8015fb0:	3104      	adds	r1, #4
 8015fb2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8015fb6:	6840      	ldr	r0, [r0, #4]
 8015fb8:	e003      	b.n	8015fc2 <log_msg_arg_get+0x22>
		arg = cont_arg_get(msg, arg_idx);
 8015fba:	f7ff ff49 	bl	8015e50 <cont_arg_get>
 8015fbe:	e000      	b.n	8015fc2 <log_msg_arg_get+0x22>
		return 0;
 8015fc0:	2000      	movs	r0, #0
}
 8015fc2:	bd08      	pop	{r3, pc}

08015fc4 <log_msg_str_get>:
}
 8015fc4:	6900      	ldr	r0, [r0, #16]
 8015fc6:	4770      	bx	lr

08015fc8 <log_msg_put>:
{
 8015fc8:	b508      	push	{r3, lr}
	atomic_dec(&msg->hdr.ref_cnt);
 8015fca:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8015fcc:	f3bf 8f5b 	dmb	ish
 8015fd0:	e853 2f00 	ldrex	r2, [r3]
 8015fd4:	3a01      	subs	r2, #1
 8015fd6:	e843 2100 	strex	r1, r2, [r3]
 8015fda:	2900      	cmp	r1, #0
 8015fdc:	d1f8      	bne.n	8015fd0 <log_msg_put+0x8>
 8015fde:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
 8015fe2:	6843      	ldr	r3, [r0, #4]
 8015fe4:	b103      	cbz	r3, 8015fe8 <log_msg_put+0x20>
}
 8015fe6:	bd08      	pop	{r3, pc}
		msg_free(msg);
 8015fe8:	f7ee fb94 	bl	8004714 <msg_free>
}
 8015fec:	e7fb      	b.n	8015fe6 <log_msg_put+0x1e>

08015fee <msg_alloc>:
{
 8015fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ff0:	4605      	mov	r5, r0
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 8015ff2:	f7ee fb73 	bl	80046dc <log_msg_chunk_alloc>
	if (msg != NULL) {
 8015ff6:	4607      	mov	r7, r0
 8015ff8:	b140      	cbz	r0, 801600c <msg_alloc+0x1e>
		msg->hdr.ref_cnt = 1;
 8015ffa:	2301      	movs	r3, #1
 8015ffc:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 8015ffe:	2200      	movs	r2, #0
 8016000:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
 8016002:	f04f 0300 	mov.w	r3, #0
 8016006:	f362 0300 	bfi	r3, r2, #0, #1
 801600a:	7203      	strb	r3, [r0, #8]
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
 801600c:	b1f7      	cbz	r7, 801604c <msg_alloc+0x5e>
 801600e:	2d03      	cmp	r5, #3
 8016010:	d91c      	bls.n	801604c <msg_alloc+0x5e>
	msg->hdr.params.std.nargs = 0U;
 8016012:	7a7b      	ldrb	r3, [r7, #9]
 8016014:	f36f 1307 	bfc	r3, #4, #4
 8016018:	727b      	strb	r3, [r7, #9]
	msg->hdr.params.generic.ext = 1;
 801601a:	7a3b      	ldrb	r3, [r7, #8]
 801601c:	f043 0302 	orr.w	r3, r3, #2
 8016020:	723b      	strb	r3, [r7, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
 8016022:	3d02      	subs	r5, #2
	next = &msg->payload.ext.next;
 8016024:	f107 0614 	add.w	r6, r7, #20
	*next = NULL;
 8016028:	2300      	movs	r3, #0
 801602a:	617b      	str	r3, [r7, #20]
	while (n > 0) {
 801602c:	2d00      	cmp	r5, #0
 801602e:	dd0d      	ble.n	801604c <msg_alloc+0x5e>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
 8016030:	f7ee fb54 	bl	80046dc <log_msg_chunk_alloc>
		if (cont == NULL) {
 8016034:	4604      	mov	r4, r0
 8016036:	b128      	cbz	r0, 8016044 <msg_alloc+0x56>
		*next = cont;
 8016038:	6030      	str	r0, [r6, #0]
		cont->next = NULL;
 801603a:	2300      	movs	r3, #0
 801603c:	6003      	str	r3, [r0, #0]
		next = &cont->next;
 801603e:	4606      	mov	r6, r0
		n -= ARGS_CONT_MSG;
 8016040:	3d07      	subs	r5, #7
 8016042:	e7f3      	b.n	801602c <msg_alloc+0x3e>
			msg_free(msg);
 8016044:	4638      	mov	r0, r7
 8016046:	f7ee fb65 	bl	8004714 <msg_free>
			return NULL;
 801604a:	4627      	mov	r7, r4
}
 801604c:	4638      	mov	r0, r7
 801604e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016050 <log_msg_create_n>:
{
 8016050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016052:	4607      	mov	r7, r0
 8016054:	460e      	mov	r6, r1
 8016056:	4614      	mov	r4, r2
	msg = msg_alloc(nargs);
 8016058:	4610      	mov	r0, r2
 801605a:	f7ff ffc8 	bl	8015fee <msg_alloc>
	if (msg != NULL) {
 801605e:	4605      	mov	r5, r0
 8016060:	b140      	cbz	r0, 8016074 <log_msg_create_n+0x24>
		msg->str = str;
 8016062:	6107      	str	r7, [r0, #16]
		msg->hdr.params.std.nargs = nargs;
 8016064:	7a43      	ldrb	r3, [r0, #9]
 8016066:	f364 1307 	bfi	r3, r4, #4, #4
 801606a:	7243      	strb	r3, [r0, #9]
		copy_args_to_msg(msg, args, nargs);
 801606c:	4622      	mov	r2, r4
 801606e:	4631      	mov	r1, r6
 8016070:	f7ff ff00 	bl	8015e74 <copy_args_to_msg>
}
 8016074:	4628      	mov	r0, r5
 8016076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016078 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
 8016078:	b510      	push	{r4, lr}
 801607a:	b082      	sub	sp, #8
	log_msg_hexdump_data_op(msg, data, length, offset, false);
 801607c:	2400      	movs	r4, #0
 801607e:	9400      	str	r4, [sp, #0]
 8016080:	f7ff ff1f 	bl	8015ec2 <log_msg_hexdump_data_op>
}
 8016084:	b002      	add	sp, #8
 8016086:	bd10      	pop	{r4, pc}

08016088 <buffer_write>:
{
 8016088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801608a:	4607      	mov	r7, r0
 801608c:	460d      	mov	r5, r1
 801608e:	4614      	mov	r4, r2
 8016090:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
 8016092:	4632      	mov	r2, r6
 8016094:	4621      	mov	r1, r4
 8016096:	4628      	mov	r0, r5
 8016098:	47b8      	blx	r7
		buf += processed;
 801609a:	4405      	add	r5, r0
	} while (len != 0);
 801609c:	1a24      	subs	r4, r4, r0
 801609e:	d1f8      	bne.n	8016092 <buffer_write+0xa>
}
 80160a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080160a2 <color_prefix>:
{
 80160a2:	b508      	push	{r3, lr}
 80160a4:	4613      	mov	r3, r2
	color_print(log_output, color, true, level);
 80160a6:	2201      	movs	r2, #1
 80160a8:	f7ee fbce 	bl	8004848 <color_print>
}
 80160ac:	bd08      	pop	{r3, pc}

080160ae <color_postfix>:
{
 80160ae:	b508      	push	{r3, lr}
 80160b0:	4613      	mov	r3, r2
	color_print(log_output, color, false, level);
 80160b2:	2200      	movs	r2, #0
 80160b4:	f7ee fbc8 	bl	8004848 <color_print>
}
 80160b8:	bd08      	pop	{r3, pc}

080160ba <postfix_print>:
{
 80160ba:	b538      	push	{r3, r4, r5, lr}
 80160bc:	4605      	mov	r5, r0
 80160be:	460c      	mov	r4, r1
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
 80160c0:	f001 0101 	and.w	r1, r1, #1
 80160c4:	f7ff fff3 	bl	80160ae <color_postfix>
	newline_print(log_output, flags);
 80160c8:	4621      	mov	r1, r4
 80160ca:	4628      	mov	r0, r5
 80160cc:	f7ee fbd2 	bl	8004874 <newline_print>
}
 80160d0:	bd38      	pop	{r3, r4, r5, pc}

080160d2 <prefix_print>:
{
 80160d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80160d6:	b083      	sub	sp, #12
 80160d8:	4604      	mov	r4, r0
 80160da:	4615      	mov	r5, r2
 80160dc:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 80160e0:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 80160e4:	f3c1 08c0 	ubfx	r8, r1, #3, #1
	if (stamp) {
 80160e8:	f011 0702 	ands.w	r7, r1, #2
 80160ec:	d113      	bne.n	8016116 <prefix_print+0x44>
		color_prefix(log_output, colors_on, level);
 80160ee:	4632      	mov	r2, r6
 80160f0:	4649      	mov	r1, r9
 80160f2:	4620      	mov	r0, r4
 80160f4:	f7ff ffd5 	bl	80160a2 <color_prefix>
	length += ids_print(log_output, level_on, func_on,
 80160f8:	9601      	str	r6, [sp, #4]
 80160fa:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80160fe:	9300      	str	r3, [sp, #0]
 8016100:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8016104:	462a      	mov	r2, r5
 8016106:	4641      	mov	r1, r8
 8016108:	4620      	mov	r0, r4
 801610a:	f7ee fc25 	bl	8004958 <ids_print>
}
 801610e:	4438      	add	r0, r7
 8016110:	b003      	add	sp, #12
 8016112:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		length += timestamp_print(log_output, flags, timestamp);
 8016116:	461a      	mov	r2, r3
 8016118:	f7ee fb50 	bl	80047bc <timestamp_print>
 801611c:	4607      	mov	r7, r0
 801611e:	e7e6      	b.n	80160ee <prefix_print+0x1c>

08016120 <std_print>:
{
 8016120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016124:	b08e      	sub	sp, #56	; 0x38
 8016126:	af0e      	add	r7, sp, #56	; 0x38
 8016128:	4606      	mov	r6, r0
 801612a:	4689      	mov	r9, r1
	const char *str = log_msg_str_get(msg);
 801612c:	f7ff ff4a 	bl	8015fc4 <log_msg_str_get>
 8016130:	4682      	mov	sl, r0
	uint32_t nargs = log_msg_nargs_get(msg);
 8016132:	4630      	mov	r0, r6
 8016134:	f7ff ff31 	bl	8015f9a <log_msg_nargs_get>
 8016138:	4680      	mov	r8, r0
	uint32_t *args = alloca(sizeof(uint32_t)*nargs);
 801613a:	0083      	lsls	r3, r0, #2
 801613c:	3307      	adds	r3, #7
 801613e:	f023 0307 	bic.w	r3, r3, #7
 8016142:	ebad 0d03 	sub.w	sp, sp, r3
 8016146:	ad0e      	add	r5, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
 8016148:	2400      	movs	r4, #0
 801614a:	4544      	cmp	r4, r8
 801614c:	d207      	bcs.n	801615e <std_print+0x3e>
		args[i] = log_msg_arg_get(msg, i);
 801614e:	4621      	mov	r1, r4
 8016150:	4630      	mov	r0, r6
 8016152:	f7ff ff25 	bl	8015fa0 <log_msg_arg_get>
 8016156:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (i = 0; i < nargs; i++) {
 801615a:	3401      	adds	r4, #1
 801615c:	e7f5      	b.n	801614a <std_print+0x2a>
	switch (log_msg_nargs_get(msg)) {
 801615e:	4630      	mov	r0, r6
 8016160:	f7ff ff1b 	bl	8015f9a <log_msg_nargs_get>
 8016164:	280f      	cmp	r0, #15
 8016166:	d815      	bhi.n	8016194 <std_print+0x74>
 8016168:	e8df f010 	tbh	[pc, r0, lsl #1]
 801616c:	00170010 	.word	0x00170010
 8016170:	0024001d 	.word	0x0024001d
 8016174:	0038002d 	.word	0x0038002d
 8016178:	00540045 	.word	0x00540045
 801617c:	00780065 	.word	0x00780065
 8016180:	00a4008d 	.word	0x00a4008d
 8016184:	00d800bd 	.word	0x00d800bd
 8016188:	011400f5 	.word	0x011400f5
		print_formatted(log_output, str);
 801618c:	4651      	mov	r1, sl
 801618e:	4648      	mov	r0, r9
 8016190:	f7ee fb00 	bl	8004794 <print_formatted>
}
 8016194:	46bd      	mov	sp, r7
 8016196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
 801619a:	682a      	ldr	r2, [r5, #0]
 801619c:	4651      	mov	r1, sl
 801619e:	4648      	mov	r0, r9
 80161a0:	f7ee faf8 	bl	8004794 <print_formatted>
		break;
 80161a4:	e7f6      	b.n	8016194 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1]);
 80161a6:	686b      	ldr	r3, [r5, #4]
 80161a8:	682a      	ldr	r2, [r5, #0]
 80161aa:	4651      	mov	r1, sl
 80161ac:	4648      	mov	r0, r9
 80161ae:	f7ee faf1 	bl	8004794 <print_formatted>
		break;
 80161b2:	e7ef      	b.n	8016194 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2]);
 80161b4:	686b      	ldr	r3, [r5, #4]
 80161b6:	682a      	ldr	r2, [r5, #0]
 80161b8:	68a9      	ldr	r1, [r5, #8]
 80161ba:	9100      	str	r1, [sp, #0]
 80161bc:	4651      	mov	r1, sl
 80161be:	4648      	mov	r0, r9
 80161c0:	f7ee fae8 	bl	8004794 <print_formatted>
		break;
 80161c4:	e7e6      	b.n	8016194 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
 80161c6:	686b      	ldr	r3, [r5, #4]
 80161c8:	682a      	ldr	r2, [r5, #0]
 80161ca:	68e9      	ldr	r1, [r5, #12]
 80161cc:	9101      	str	r1, [sp, #4]
 80161ce:	68a9      	ldr	r1, [r5, #8]
 80161d0:	9100      	str	r1, [sp, #0]
 80161d2:	4651      	mov	r1, sl
 80161d4:	4648      	mov	r0, r9
 80161d6:	f7ee fadd 	bl	8004794 <print_formatted>
		break;
 80161da:	e7db      	b.n	8016194 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
 80161dc:	686b      	ldr	r3, [r5, #4]
 80161de:	682a      	ldr	r2, [r5, #0]
 80161e0:	6929      	ldr	r1, [r5, #16]
 80161e2:	9102      	str	r1, [sp, #8]
 80161e4:	68e9      	ldr	r1, [r5, #12]
 80161e6:	9101      	str	r1, [sp, #4]
 80161e8:	68a9      	ldr	r1, [r5, #8]
 80161ea:	9100      	str	r1, [sp, #0]
 80161ec:	4651      	mov	r1, sl
 80161ee:	4648      	mov	r0, r9
 80161f0:	f7ee fad0 	bl	8004794 <print_formatted>
		break;
 80161f4:	e7ce      	b.n	8016194 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
 80161f6:	686b      	ldr	r3, [r5, #4]
 80161f8:	682a      	ldr	r2, [r5, #0]
 80161fa:	6969      	ldr	r1, [r5, #20]
 80161fc:	9103      	str	r1, [sp, #12]
 80161fe:	6929      	ldr	r1, [r5, #16]
 8016200:	9102      	str	r1, [sp, #8]
 8016202:	68e9      	ldr	r1, [r5, #12]
 8016204:	9101      	str	r1, [sp, #4]
 8016206:	68a9      	ldr	r1, [r5, #8]
 8016208:	9100      	str	r1, [sp, #0]
 801620a:	4651      	mov	r1, sl
 801620c:	4648      	mov	r0, r9
 801620e:	f7ee fac1 	bl	8004794 <print_formatted>
		break;
 8016212:	e7bf      	b.n	8016194 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
 8016214:	686b      	ldr	r3, [r5, #4]
 8016216:	682a      	ldr	r2, [r5, #0]
 8016218:	69a9      	ldr	r1, [r5, #24]
 801621a:	9104      	str	r1, [sp, #16]
 801621c:	6969      	ldr	r1, [r5, #20]
 801621e:	9103      	str	r1, [sp, #12]
 8016220:	6929      	ldr	r1, [r5, #16]
 8016222:	9102      	str	r1, [sp, #8]
 8016224:	68e9      	ldr	r1, [r5, #12]
 8016226:	9101      	str	r1, [sp, #4]
 8016228:	68a9      	ldr	r1, [r5, #8]
 801622a:	9100      	str	r1, [sp, #0]
 801622c:	4651      	mov	r1, sl
 801622e:	4648      	mov	r0, r9
 8016230:	f7ee fab0 	bl	8004794 <print_formatted>
		break;
 8016234:	e7ae      	b.n	8016194 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
 8016236:	686b      	ldr	r3, [r5, #4]
 8016238:	682a      	ldr	r2, [r5, #0]
 801623a:	69e9      	ldr	r1, [r5, #28]
 801623c:	9105      	str	r1, [sp, #20]
 801623e:	69a9      	ldr	r1, [r5, #24]
 8016240:	9104      	str	r1, [sp, #16]
 8016242:	6969      	ldr	r1, [r5, #20]
 8016244:	9103      	str	r1, [sp, #12]
 8016246:	6929      	ldr	r1, [r5, #16]
 8016248:	9102      	str	r1, [sp, #8]
 801624a:	68e9      	ldr	r1, [r5, #12]
 801624c:	9101      	str	r1, [sp, #4]
 801624e:	68a9      	ldr	r1, [r5, #8]
 8016250:	9100      	str	r1, [sp, #0]
 8016252:	4651      	mov	r1, sl
 8016254:	4648      	mov	r0, r9
 8016256:	f7ee fa9d 	bl	8004794 <print_formatted>
		break;
 801625a:	e79b      	b.n	8016194 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
 801625c:	686b      	ldr	r3, [r5, #4]
 801625e:	682a      	ldr	r2, [r5, #0]
 8016260:	6a29      	ldr	r1, [r5, #32]
 8016262:	9106      	str	r1, [sp, #24]
 8016264:	69e9      	ldr	r1, [r5, #28]
 8016266:	9105      	str	r1, [sp, #20]
 8016268:	69a9      	ldr	r1, [r5, #24]
 801626a:	9104      	str	r1, [sp, #16]
 801626c:	6969      	ldr	r1, [r5, #20]
 801626e:	9103      	str	r1, [sp, #12]
 8016270:	6929      	ldr	r1, [r5, #16]
 8016272:	9102      	str	r1, [sp, #8]
 8016274:	68e9      	ldr	r1, [r5, #12]
 8016276:	9101      	str	r1, [sp, #4]
 8016278:	68a9      	ldr	r1, [r5, #8]
 801627a:	9100      	str	r1, [sp, #0]
 801627c:	4651      	mov	r1, sl
 801627e:	4648      	mov	r0, r9
 8016280:	f7ee fa88 	bl	8004794 <print_formatted>
		break;
 8016284:	e786      	b.n	8016194 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
 8016286:	686b      	ldr	r3, [r5, #4]
 8016288:	682a      	ldr	r2, [r5, #0]
 801628a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 801628c:	9107      	str	r1, [sp, #28]
 801628e:	6a29      	ldr	r1, [r5, #32]
 8016290:	9106      	str	r1, [sp, #24]
 8016292:	69e9      	ldr	r1, [r5, #28]
 8016294:	9105      	str	r1, [sp, #20]
 8016296:	69a9      	ldr	r1, [r5, #24]
 8016298:	9104      	str	r1, [sp, #16]
 801629a:	6969      	ldr	r1, [r5, #20]
 801629c:	9103      	str	r1, [sp, #12]
 801629e:	6929      	ldr	r1, [r5, #16]
 80162a0:	9102      	str	r1, [sp, #8]
 80162a2:	68e9      	ldr	r1, [r5, #12]
 80162a4:	9101      	str	r1, [sp, #4]
 80162a6:	68a9      	ldr	r1, [r5, #8]
 80162a8:	9100      	str	r1, [sp, #0]
 80162aa:	4651      	mov	r1, sl
 80162ac:	4648      	mov	r0, r9
 80162ae:	f7ee fa71 	bl	8004794 <print_formatted>
		break;
 80162b2:	e76f      	b.n	8016194 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
 80162b4:	686b      	ldr	r3, [r5, #4]
 80162b6:	682a      	ldr	r2, [r5, #0]
 80162b8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80162ba:	9108      	str	r1, [sp, #32]
 80162bc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80162be:	9107      	str	r1, [sp, #28]
 80162c0:	6a29      	ldr	r1, [r5, #32]
 80162c2:	9106      	str	r1, [sp, #24]
 80162c4:	69e9      	ldr	r1, [r5, #28]
 80162c6:	9105      	str	r1, [sp, #20]
 80162c8:	69a9      	ldr	r1, [r5, #24]
 80162ca:	9104      	str	r1, [sp, #16]
 80162cc:	6969      	ldr	r1, [r5, #20]
 80162ce:	9103      	str	r1, [sp, #12]
 80162d0:	6929      	ldr	r1, [r5, #16]
 80162d2:	9102      	str	r1, [sp, #8]
 80162d4:	68e9      	ldr	r1, [r5, #12]
 80162d6:	9101      	str	r1, [sp, #4]
 80162d8:	68a9      	ldr	r1, [r5, #8]
 80162da:	9100      	str	r1, [sp, #0]
 80162dc:	4651      	mov	r1, sl
 80162de:	4648      	mov	r0, r9
 80162e0:	f7ee fa58 	bl	8004794 <print_formatted>
		break;
 80162e4:	e756      	b.n	8016194 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
 80162e6:	686b      	ldr	r3, [r5, #4]
 80162e8:	682a      	ldr	r2, [r5, #0]
 80162ea:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80162ec:	9109      	str	r1, [sp, #36]	; 0x24
 80162ee:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80162f0:	9108      	str	r1, [sp, #32]
 80162f2:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80162f4:	9107      	str	r1, [sp, #28]
 80162f6:	6a29      	ldr	r1, [r5, #32]
 80162f8:	9106      	str	r1, [sp, #24]
 80162fa:	69e9      	ldr	r1, [r5, #28]
 80162fc:	9105      	str	r1, [sp, #20]
 80162fe:	69a9      	ldr	r1, [r5, #24]
 8016300:	9104      	str	r1, [sp, #16]
 8016302:	6969      	ldr	r1, [r5, #20]
 8016304:	9103      	str	r1, [sp, #12]
 8016306:	6929      	ldr	r1, [r5, #16]
 8016308:	9102      	str	r1, [sp, #8]
 801630a:	68e9      	ldr	r1, [r5, #12]
 801630c:	9101      	str	r1, [sp, #4]
 801630e:	68a9      	ldr	r1, [r5, #8]
 8016310:	9100      	str	r1, [sp, #0]
 8016312:	4651      	mov	r1, sl
 8016314:	4648      	mov	r0, r9
 8016316:	f7ee fa3d 	bl	8004794 <print_formatted>
		break;
 801631a:	e73b      	b.n	8016194 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
 801631c:	686b      	ldr	r3, [r5, #4]
 801631e:	682a      	ldr	r2, [r5, #0]
 8016320:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8016322:	910a      	str	r1, [sp, #40]	; 0x28
 8016324:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8016326:	9109      	str	r1, [sp, #36]	; 0x24
 8016328:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 801632a:	9108      	str	r1, [sp, #32]
 801632c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 801632e:	9107      	str	r1, [sp, #28]
 8016330:	6a29      	ldr	r1, [r5, #32]
 8016332:	9106      	str	r1, [sp, #24]
 8016334:	69e9      	ldr	r1, [r5, #28]
 8016336:	9105      	str	r1, [sp, #20]
 8016338:	69a9      	ldr	r1, [r5, #24]
 801633a:	9104      	str	r1, [sp, #16]
 801633c:	6969      	ldr	r1, [r5, #20]
 801633e:	9103      	str	r1, [sp, #12]
 8016340:	6929      	ldr	r1, [r5, #16]
 8016342:	9102      	str	r1, [sp, #8]
 8016344:	68e9      	ldr	r1, [r5, #12]
 8016346:	9101      	str	r1, [sp, #4]
 8016348:	68a9      	ldr	r1, [r5, #8]
 801634a:	9100      	str	r1, [sp, #0]
 801634c:	4651      	mov	r1, sl
 801634e:	4648      	mov	r0, r9
 8016350:	f7ee fa20 	bl	8004794 <print_formatted>
		break;
 8016354:	e71e      	b.n	8016194 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
 8016356:	686b      	ldr	r3, [r5, #4]
 8016358:	682a      	ldr	r2, [r5, #0]
 801635a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 801635c:	910b      	str	r1, [sp, #44]	; 0x2c
 801635e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8016360:	910a      	str	r1, [sp, #40]	; 0x28
 8016362:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8016364:	9109      	str	r1, [sp, #36]	; 0x24
 8016366:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8016368:	9108      	str	r1, [sp, #32]
 801636a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 801636c:	9107      	str	r1, [sp, #28]
 801636e:	6a29      	ldr	r1, [r5, #32]
 8016370:	9106      	str	r1, [sp, #24]
 8016372:	69e9      	ldr	r1, [r5, #28]
 8016374:	9105      	str	r1, [sp, #20]
 8016376:	69a9      	ldr	r1, [r5, #24]
 8016378:	9104      	str	r1, [sp, #16]
 801637a:	6969      	ldr	r1, [r5, #20]
 801637c:	9103      	str	r1, [sp, #12]
 801637e:	6929      	ldr	r1, [r5, #16]
 8016380:	9102      	str	r1, [sp, #8]
 8016382:	68e9      	ldr	r1, [r5, #12]
 8016384:	9101      	str	r1, [sp, #4]
 8016386:	68a9      	ldr	r1, [r5, #8]
 8016388:	9100      	str	r1, [sp, #0]
 801638a:	4651      	mov	r1, sl
 801638c:	4648      	mov	r0, r9
 801638e:	f7ee fa01 	bl	8004794 <print_formatted>
		break;
 8016392:	e6ff      	b.n	8016194 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
 8016394:	686b      	ldr	r3, [r5, #4]
 8016396:	682a      	ldr	r2, [r5, #0]
 8016398:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 801639a:	910c      	str	r1, [sp, #48]	; 0x30
 801639c:	6b69      	ldr	r1, [r5, #52]	; 0x34
 801639e:	910b      	str	r1, [sp, #44]	; 0x2c
 80163a0:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80163a2:	910a      	str	r1, [sp, #40]	; 0x28
 80163a4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80163a6:	9109      	str	r1, [sp, #36]	; 0x24
 80163a8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80163aa:	9108      	str	r1, [sp, #32]
 80163ac:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80163ae:	9107      	str	r1, [sp, #28]
 80163b0:	6a29      	ldr	r1, [r5, #32]
 80163b2:	9106      	str	r1, [sp, #24]
 80163b4:	69e9      	ldr	r1, [r5, #28]
 80163b6:	9105      	str	r1, [sp, #20]
 80163b8:	69a9      	ldr	r1, [r5, #24]
 80163ba:	9104      	str	r1, [sp, #16]
 80163bc:	6969      	ldr	r1, [r5, #20]
 80163be:	9103      	str	r1, [sp, #12]
 80163c0:	6929      	ldr	r1, [r5, #16]
 80163c2:	9102      	str	r1, [sp, #8]
 80163c4:	68e9      	ldr	r1, [r5, #12]
 80163c6:	9101      	str	r1, [sp, #4]
 80163c8:	68a9      	ldr	r1, [r5, #8]
 80163ca:	9100      	str	r1, [sp, #0]
 80163cc:	4651      	mov	r1, sl
 80163ce:	4648      	mov	r0, r9
 80163d0:	f7ee f9e0 	bl	8004794 <print_formatted>
}
 80163d4:	e6de      	b.n	8016194 <std_print+0x74>

080163d6 <log_output_flush>:
{
 80163d6:	b510      	push	{r4, lr}
 80163d8:	4604      	mov	r4, r0
		     log_output->control_block->offset,
 80163da:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
 80163dc:	6853      	ldr	r3, [r2, #4]
 80163de:	6812      	ldr	r2, [r2, #0]
 80163e0:	6881      	ldr	r1, [r0, #8]
 80163e2:	6800      	ldr	r0, [r0, #0]
 80163e4:	f7ff fe50 	bl	8016088 <buffer_write>
	log_output->control_block->offset = 0;
 80163e8:	6863      	ldr	r3, [r4, #4]
 80163ea:	2200      	movs	r2, #0
 80163ec:	601a      	str	r2, [r3, #0]
}
 80163ee:	bd10      	pop	{r4, pc}

080163f0 <out_func>:
{
 80163f0:	b538      	push	{r3, r4, r5, lr}
 80163f2:	4605      	mov	r5, r0
 80163f4:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
 80163f6:	684b      	ldr	r3, [r1, #4]
 80163f8:	681a      	ldr	r2, [r3, #0]
 80163fa:	68cb      	ldr	r3, [r1, #12]
 80163fc:	429a      	cmp	r2, r3
 80163fe:	d00f      	beq.n	8016420 <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
 8016400:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8016402:	f3bf 8f5b 	dmb	ish
 8016406:	e853 2f00 	ldrex	r2, [r3]
 801640a:	1c51      	adds	r1, r2, #1
 801640c:	e843 1000 	strex	r0, r1, [r3]
 8016410:	2800      	cmp	r0, #0
 8016412:	d1f8      	bne.n	8016406 <out_func+0x16>
 8016414:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
 8016418:	68a3      	ldr	r3, [r4, #8]
 801641a:	549d      	strb	r5, [r3, r2]
}
 801641c:	2000      	movs	r0, #0
 801641e:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
 8016420:	4608      	mov	r0, r1
 8016422:	f7ff ffd8 	bl	80163d6 <log_output_flush>
 8016426:	e7eb      	b.n	8016400 <out_func+0x10>

08016428 <log_output_msg_process>:
{
 8016428:	b5f0      	push	{r4, r5, r6, r7, lr}
 801642a:	b085      	sub	sp, #20
 801642c:	4606      	mov	r6, r0
 801642e:	460c      	mov	r4, r1
 8016430:	4617      	mov	r7, r2
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 8016432:	7a0b      	ldrb	r3, [r1, #8]
 8016434:	f083 0301 	eor.w	r3, r3, #1
 8016438:	f003 0201 	and.w	r2, r3, #1
	return msg->hdr.timestamp;
 801643c:	68cb      	ldr	r3, [r1, #12]
	return msg->hdr.ids.level;
 801643e:	7a89      	ldrb	r1, [r1, #10]
	return msg->hdr.ids.domain_id;
 8016440:	f3c1 0cc2 	ubfx	ip, r1, #3, #3
	return msg->hdr.ids.source_id;
 8016444:	8960      	ldrh	r0, [r4, #10]
			0 : prefix_print(log_output, flags, std_msg, timestamp,
 8016446:	f011 0507 	ands.w	r5, r1, #7
 801644a:	d10f      	bne.n	801646c <log_output_msg_process+0x44>
 801644c:	2200      	movs	r2, #0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 801644e:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg)) {
 8016450:	f013 0f01 	tst.w	r3, #1
 8016454:	d015      	beq.n	8016482 <log_output_msg_process+0x5a>
	} else if (raw_string) {
 8016456:	b9cd      	cbnz	r5, 801648c <log_output_msg_process+0x64>
		raw_string_print(msg, log_output);
 8016458:	4631      	mov	r1, r6
 801645a:	4620      	mov	r0, r4
 801645c:	f7ee fad4 	bl	8004a08 <raw_string_print>
	if (!raw_string) {
 8016460:	b9d5      	cbnz	r5, 8016498 <log_output_msg_process+0x70>
	log_output_flush(log_output);
 8016462:	4630      	mov	r0, r6
 8016464:	f7ff ffb7 	bl	80163d6 <log_output_flush>
}
 8016468:	b005      	add	sp, #20
 801646a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801646c:	0980      	lsrs	r0, r0, #6
			0 : prefix_print(log_output, flags, std_msg, timestamp,
 801646e:	9002      	str	r0, [sp, #8]
 8016470:	f8cd c004 	str.w	ip, [sp, #4]
 8016474:	9500      	str	r5, [sp, #0]
 8016476:	4639      	mov	r1, r7
 8016478:	4630      	mov	r0, r6
 801647a:	f7ff fe2a 	bl	80160d2 <prefix_print>
 801647e:	4602      	mov	r2, r0
 8016480:	e7e5      	b.n	801644e <log_output_msg_process+0x26>
		std_print(msg, log_output);
 8016482:	4631      	mov	r1, r6
 8016484:	4620      	mov	r0, r4
 8016486:	f7ff fe4b 	bl	8016120 <std_print>
 801648a:	e7e9      	b.n	8016460 <log_output_msg_process+0x38>
		hexdump_print(msg, log_output, prefix_offset, flags);
 801648c:	463b      	mov	r3, r7
 801648e:	4631      	mov	r1, r6
 8016490:	4620      	mov	r0, r4
 8016492:	f7ee fa8f 	bl	80049b4 <hexdump_print>
 8016496:	e7e3      	b.n	8016460 <log_output_msg_process+0x38>
		postfix_print(log_output, flags, level);
 8016498:	462a      	mov	r2, r5
 801649a:	4639      	mov	r1, r7
 801649c:	4630      	mov	r0, r6
 801649e:	f7ff fe0c 	bl	80160ba <postfix_print>
 80164a2:	e7de      	b.n	8016462 <log_output_msg_process+0x3a>

080164a4 <read_str>:
{
 80164a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164a8:	b084      	sub	sp, #16
 80164aa:	4605      	mov	r5, r0
 80164ac:	460c      	mov	r4, r1
 80164ae:	4616      	mov	r6, r2
 80164b0:	461f      	mov	r7, r3
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
 80164b2:	f8d1 800c 	ldr.w	r8, [r1, #12]
				 strlen(attr->user_data));
 80164b6:	4640      	mov	r0, r8
 80164b8:	f001 fc9a 	bl	8017df0 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
 80164bc:	b280      	uxth	r0, r0
 80164be:	9002      	str	r0, [sp, #8]
 80164c0:	f8cd 8004 	str.w	r8, [sp, #4]
 80164c4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80164c8:	9300      	str	r3, [sp, #0]
 80164ca:	463b      	mov	r3, r7
 80164cc:	4632      	mov	r2, r6
 80164ce:	4621      	mov	r1, r4
 80164d0:	4628      	mov	r0, r5
 80164d2:	f003 fd2b 	bl	8019f2c <bt_gatt_attr_read>
}
 80164d6:	b004      	add	sp, #16
 80164d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080164dc <bas_init>:
}
 80164dc:	2000      	movs	r0, #0
 80164de:	4770      	bx	lr

080164e0 <nvs_flash_rd>:
{
 80164e0:	b570      	push	{r4, r5, r6, lr}
	offset = fs->offset;
 80164e2:	6805      	ldr	r5, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
 80164e4:	8984      	ldrh	r4, [r0, #12]
 80164e6:	0c0e      	lsrs	r6, r1, #16
 80164e8:	fb06 5404 	mla	r4, r6, r4, r5
	offset += addr & ADDR_OFFS_MASK;
 80164ec:	fa14 f181 	uxtah	r1, r4, r1
	rc = flash_read(fs->flash_device, offset, data, len);
 80164f0:	6a80      	ldr	r0, [r0, #40]	; 0x28
	const struct flash_driver_api *api =
 80164f2:	6884      	ldr	r4, [r0, #8]
	return api->read(dev, offset, data, len);
 80164f4:	6824      	ldr	r4, [r4, #0]
 80164f6:	47a0      	blx	r4
}
 80164f8:	bd70      	pop	{r4, r5, r6, pc}

080164fa <nvs_flash_ate_rd>:
{
 80164fa:	b508      	push	{r3, lr}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
 80164fc:	2308      	movs	r3, #8
 80164fe:	f7ff ffef 	bl	80164e0 <nvs_flash_rd>
}
 8016502:	bd08      	pop	{r3, pc}

08016504 <nvs_ate_cmp_const>:
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
 8016504:	2300      	movs	r3, #0
 8016506:	e000      	b.n	801650a <nvs_ate_cmp_const+0x6>
 8016508:	3301      	adds	r3, #1
 801650a:	2b07      	cmp	r3, #7
 801650c:	d804      	bhi.n	8016518 <nvs_ate_cmp_const+0x14>
		if (data8[i] != value) {
 801650e:	5cc2      	ldrb	r2, [r0, r3]
 8016510:	428a      	cmp	r2, r1
 8016512:	d0f9      	beq.n	8016508 <nvs_ate_cmp_const+0x4>
			return 1;
 8016514:	2001      	movs	r0, #1
}
 8016516:	4770      	bx	lr
	return 0;
 8016518:	2000      	movs	r0, #0
 801651a:	4770      	bx	lr

0801651c <nvs_sector_advance>:
	*addr += (1 << ADDR_SECT_SHIFT);
 801651c:	680b      	ldr	r3, [r1, #0]
 801651e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8016522:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
 8016524:	89c2      	ldrh	r2, [r0, #14]
 8016526:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
 801652a:	d000      	beq.n	801652e <nvs_sector_advance+0x12>
}
 801652c:	4770      	bx	lr
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
 801652e:	eba3 4302 	sub.w	r3, r3, r2, lsl #16
 8016532:	600b      	str	r3, [r1, #0]
}
 8016534:	e7fa      	b.n	801652c <nvs_sector_advance+0x10>

08016536 <nvs_flash_block_cmp>:
{
 8016536:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801653a:	b089      	sub	sp, #36	; 0x24
 801653c:	4681      	mov	r9, r0
 801653e:	460e      	mov	r6, r1
 8016540:	4617      	mov	r7, r2
 8016542:	461d      	mov	r5, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
 8016544:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8016546:	681b      	ldr	r3, [r3, #0]
 8016548:	f1c3 0800 	rsb	r8, r3, #0
	block_size =
 801654c:	f008 0820 	and.w	r8, r8, #32
	while (len) {
 8016550:	e002      	b.n	8016558 <nvs_flash_block_cmp+0x22>
		len -= bytes_to_cmp;
 8016552:	1b2d      	subs	r5, r5, r4
		addr += bytes_to_cmp;
 8016554:	4426      	add	r6, r4
		data8 += bytes_to_cmp;
 8016556:	4427      	add	r7, r4
	while (len) {
 8016558:	b1a5      	cbz	r5, 8016584 <nvs_flash_block_cmp+0x4e>
		bytes_to_cmp = MIN(block_size, len);
 801655a:	462c      	mov	r4, r5
 801655c:	4545      	cmp	r5, r8
 801655e:	bf28      	it	cs
 8016560:	4644      	movcs	r4, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
 8016562:	4623      	mov	r3, r4
 8016564:	466a      	mov	r2, sp
 8016566:	4631      	mov	r1, r6
 8016568:	4648      	mov	r0, r9
 801656a:	f7ff ffb9 	bl	80164e0 <nvs_flash_rd>
		if (rc) {
 801656e:	4603      	mov	r3, r0
 8016570:	b948      	cbnz	r0, 8016586 <nvs_flash_block_cmp+0x50>
		rc = memcmp(data8, buf, bytes_to_cmp);
 8016572:	4622      	mov	r2, r4
 8016574:	4669      	mov	r1, sp
 8016576:	4638      	mov	r0, r7
 8016578:	f001 fc68 	bl	8017e4c <memcmp>
		if (rc) {
 801657c:	2800      	cmp	r0, #0
 801657e:	d0e8      	beq.n	8016552 <nvs_flash_block_cmp+0x1c>
			return 1;
 8016580:	2301      	movs	r3, #1
 8016582:	e000      	b.n	8016586 <nvs_flash_block_cmp+0x50>
	return 0;
 8016584:	2300      	movs	r3, #0
}
 8016586:	4618      	mov	r0, r3
 8016588:	b009      	add	sp, #36	; 0x24
 801658a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801658e <nvs_flash_cmp_const>:
{
 801658e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016592:	b088      	sub	sp, #32
 8016594:	4680      	mov	r8, r0
 8016596:	460e      	mov	r6, r1
 8016598:	4611      	mov	r1, r2
 801659a:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
 801659c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801659e:	681f      	ldr	r7, [r3, #0]
 80165a0:	427f      	negs	r7, r7
	block_size =
 80165a2:	f007 0720 	and.w	r7, r7, #32
	(void)memset(cmp, value, block_size);
 80165a6:	463a      	mov	r2, r7
 80165a8:	4668      	mov	r0, sp
 80165aa:	f001 fc8c 	bl	8017ec6 <memset>
	while (len) {
 80165ae:	b174      	cbz	r4, 80165ce <nvs_flash_cmp_const+0x40>
		bytes_to_cmp = MIN(block_size, len);
 80165b0:	4625      	mov	r5, r4
 80165b2:	42bc      	cmp	r4, r7
 80165b4:	bf28      	it	cs
 80165b6:	463d      	movcs	r5, r7
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
 80165b8:	462b      	mov	r3, r5
 80165ba:	466a      	mov	r2, sp
 80165bc:	4631      	mov	r1, r6
 80165be:	4640      	mov	r0, r8
 80165c0:	f7ff ffb9 	bl	8016536 <nvs_flash_block_cmp>
		if (rc) {
 80165c4:	4603      	mov	r3, r0
 80165c6:	b918      	cbnz	r0, 80165d0 <nvs_flash_cmp_const+0x42>
		len -= bytes_to_cmp;
 80165c8:	1b64      	subs	r4, r4, r5
		addr += bytes_to_cmp;
 80165ca:	442e      	add	r6, r5
 80165cc:	e7ef      	b.n	80165ae <nvs_flash_cmp_const+0x20>
	return 0;
 80165ce:	2300      	movs	r3, #0
}
 80165d0:	4618      	mov	r0, r3
 80165d2:	b008      	add	sp, #32
 80165d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080165d8 <nvs_flash_erase_sector>:
{
 80165d8:	b570      	push	{r4, r5, r6, lr}
 80165da:	4604      	mov	r4, r0
	addr &= ADDR_SECT_MASK;
 80165dc:	0c0d      	lsrs	r5, r1, #16
 80165de:	042d      	lsls	r5, r5, #16
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
 80165e0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80165e2:	8983      	ldrh	r3, [r0, #12]
 80165e4:	7912      	ldrb	r2, [r2, #4]
 80165e6:	4629      	mov	r1, r5
 80165e8:	f7ff ffd1 	bl	801658e <nvs_flash_cmp_const>
	if (rc <= 0) {
 80165ec:	1e06      	subs	r6, r0, #0
 80165ee:	dd18      	ble.n	8016622 <nvs_flash_erase_sector+0x4a>
	offset = fs->offset;
 80165f0:	6823      	ldr	r3, [r4, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
 80165f2:	89a1      	ldrh	r1, [r4, #12]
 80165f4:	0c2d      	lsrs	r5, r5, #16
 80165f6:	fb05 3501 	mla	r5, r5, r1, r3
	rc = flash_write_protection_set(fs->flash_device, 0);
 80165fa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	const struct flash_driver_api *api =
 80165fc:	6883      	ldr	r3, [r0, #8]
	return api->write_protection(dev, enable);
 80165fe:	68db      	ldr	r3, [r3, #12]
 8016600:	2100      	movs	r1, #0
 8016602:	4798      	blx	r3
	if (rc) {
 8016604:	4606      	mov	r6, r0
 8016606:	b960      	cbnz	r0, 8016622 <nvs_flash_erase_sector+0x4a>
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
 8016608:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801660a:	89a2      	ldrh	r2, [r4, #12]
	const struct flash_driver_api *api =
 801660c:	6883      	ldr	r3, [r0, #8]
	return api->erase(dev, offset, size);
 801660e:	689b      	ldr	r3, [r3, #8]
 8016610:	4629      	mov	r1, r5
 8016612:	4798      	blx	r3
	if (rc) {
 8016614:	4606      	mov	r6, r0
 8016616:	b920      	cbnz	r0, 8016622 <nvs_flash_erase_sector+0x4a>
	(void) flash_write_protection_set(fs->flash_device, 1);
 8016618:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	const struct flash_driver_api *api =
 801661a:	6883      	ldr	r3, [r0, #8]
	return api->write_protection(dev, enable);
 801661c:	68db      	ldr	r3, [r3, #12]
 801661e:	2101      	movs	r1, #1
 8016620:	4798      	blx	r3
}
 8016622:	4630      	mov	r0, r6
 8016624:	bd70      	pop	{r4, r5, r6, pc}

08016626 <nvs_ate_crc8_check>:
{
 8016626:	b510      	push	{r4, lr}
 8016628:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
 801662a:	2207      	movs	r2, #7
 801662c:	4601      	mov	r1, r0
 801662e:	20ff      	movs	r0, #255	; 0xff
 8016630:	f7ec fc3e 	bl	8002eb0 <crc8_ccitt>
	if (crc8 == entry->crc8) {
 8016634:	79e3      	ldrb	r3, [r4, #7]
 8016636:	4283      	cmp	r3, r0
 8016638:	d001      	beq.n	801663e <nvs_ate_crc8_check+0x18>
	return 1;
 801663a:	2001      	movs	r0, #1
}
 801663c:	bd10      	pop	{r4, pc}
		return 0;
 801663e:	2000      	movs	r0, #0
 8016640:	e7fc      	b.n	801663c <nvs_ate_crc8_check+0x16>

08016642 <nvs_recover_last_ate>:
{
 8016642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016646:	b082      	sub	sp, #8
 8016648:	4606      	mov	r6, r0
 801664a:	4688      	mov	r8, r1
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
 801664c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801664e:	681f      	ldr	r7, [r3, #0]
 8016650:	b2fb      	uxtb	r3, r7
	if (write_block_size <= 1U) {
 8016652:	2b01      	cmp	r3, #1
 8016654:	d90b      	bls.n	801666e <nvs_recover_last_ate+0x2c>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
 8016656:	461f      	mov	r7, r3
 8016658:	3307      	adds	r3, #7
 801665a:	427f      	negs	r7, r7
 801665c:	401f      	ands	r7, r3
	*addr -= ate_size;
 801665e:	f8d8 4000 	ldr.w	r4, [r8]
 8016662:	1be4      	subs	r4, r4, r7
 8016664:	f8c8 4000 	str.w	r4, [r8]
	data_end_addr = *addr & ADDR_SECT_MASK;
 8016668:	0c25      	lsrs	r5, r4, #16
 801666a:	042d      	lsls	r5, r5, #16
	while (ate_end_addr > data_end_addr) {
 801666c:	e002      	b.n	8016674 <nvs_recover_last_ate+0x32>
		return len;
 801666e:	2708      	movs	r7, #8
 8016670:	e7f5      	b.n	801665e <nvs_recover_last_ate+0x1c>
		ate_end_addr -= ate_size;
 8016672:	1be4      	subs	r4, r4, r7
	while (ate_end_addr > data_end_addr) {
 8016674:	42ac      	cmp	r4, r5
 8016676:	d916      	bls.n	80166a6 <nvs_recover_last_ate+0x64>
		rc = nvs_flash_ate_rd(fs, ate_end_addr, &end_ate);
 8016678:	466a      	mov	r2, sp
 801667a:	4621      	mov	r1, r4
 801667c:	4630      	mov	r0, r6
 801667e:	f7ff ff3c 	bl	80164fa <nvs_flash_ate_rd>
		if (rc) {
 8016682:	4603      	mov	r3, r0
 8016684:	b980      	cbnz	r0, 80166a8 <nvs_recover_last_ate+0x66>
		if (!nvs_ate_crc8_check(&end_ate)) {
 8016686:	4668      	mov	r0, sp
 8016688:	f7ff ffcd 	bl	8016626 <nvs_ate_crc8_check>
 801668c:	2800      	cmp	r0, #0
 801668e:	d1f0      	bne.n	8016672 <nvs_recover_last_ate+0x30>
			data_end_addr &= ADDR_SECT_MASK;
 8016690:	0c2d      	lsrs	r5, r5, #16
 8016692:	042d      	lsls	r5, r5, #16
			data_end_addr += end_ate.offset + end_ate.len;
 8016694:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016698:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801669c:	4413      	add	r3, r2
 801669e:	441d      	add	r5, r3
			*addr = ate_end_addr;
 80166a0:	f8c8 4000 	str.w	r4, [r8]
 80166a4:	e7e5      	b.n	8016672 <nvs_recover_last_ate+0x30>
	return 0;
 80166a6:	2300      	movs	r3, #0
}
 80166a8:	4618      	mov	r0, r3
 80166aa:	b002      	add	sp, #8
 80166ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080166b0 <nvs_prev_ate>:
{
 80166b0:	b570      	push	{r4, r5, r6, lr}
 80166b2:	b082      	sub	sp, #8
 80166b4:	4604      	mov	r4, r0
 80166b6:	460d      	mov	r5, r1
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
 80166b8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	b2d9      	uxtb	r1, r3
	if (write_block_size <= 1U) {
 80166be:	2901      	cmp	r1, #1
 80166c0:	d926      	bls.n	8016710 <nvs_prev_ate+0x60>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
 80166c2:	1dce      	adds	r6, r1, #7
 80166c4:	424b      	negs	r3, r1
 80166c6:	401e      	ands	r6, r3
	rc = nvs_flash_ate_rd(fs, *addr, ate);
 80166c8:	6829      	ldr	r1, [r5, #0]
 80166ca:	4620      	mov	r0, r4
 80166cc:	f7ff ff15 	bl	80164fa <nvs_flash_ate_rd>
	if (rc) {
 80166d0:	b9e0      	cbnz	r0, 801670c <nvs_prev_ate+0x5c>
	*addr += ate_size;
 80166d2:	682a      	ldr	r2, [r5, #0]
 80166d4:	4432      	add	r2, r6
 80166d6:	602a      	str	r2, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
 80166d8:	b291      	uxth	r1, r2
 80166da:	89a3      	ldrh	r3, [r4, #12]
 80166dc:	1b9b      	subs	r3, r3, r6
 80166de:	4299      	cmp	r1, r3
 80166e0:	d114      	bne.n	801670c <nvs_prev_ate+0x5c>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
 80166e2:	0c13      	lsrs	r3, r2, #16
 80166e4:	d116      	bne.n	8016714 <nvs_prev_ate+0x64>
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
 80166e6:	89e3      	ldrh	r3, [r4, #14]
 80166e8:	3b01      	subs	r3, #1
 80166ea:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 80166ee:	602a      	str	r2, [r5, #0]
	rc = nvs_flash_ate_rd(fs, *addr, &close_ate);
 80166f0:	466a      	mov	r2, sp
 80166f2:	6829      	ldr	r1, [r5, #0]
 80166f4:	4620      	mov	r0, r4
 80166f6:	f7ff ff00 	bl	80164fa <nvs_flash_ate_rd>
	if (rc) {
 80166fa:	b938      	cbnz	r0, 801670c <nvs_prev_ate+0x5c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
 80166fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80166fe:	7919      	ldrb	r1, [r3, #4]
 8016700:	4668      	mov	r0, sp
 8016702:	f7ff feff 	bl	8016504 <nvs_ate_cmp_const>
	if (!rc) {
 8016706:	b948      	cbnz	r0, 801671c <nvs_prev_ate+0x6c>
		*addr = fs->ate_wra;
 8016708:	6863      	ldr	r3, [r4, #4]
 801670a:	602b      	str	r3, [r5, #0]
}
 801670c:	b002      	add	sp, #8
 801670e:	bd70      	pop	{r4, r5, r6, pc}
		return len;
 8016710:	2608      	movs	r6, #8
 8016712:	e7d9      	b.n	80166c8 <nvs_prev_ate+0x18>
		*addr -= (1 << ADDR_SECT_SHIFT);
 8016714:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8016718:	602a      	str	r2, [r5, #0]
 801671a:	e7e9      	b.n	80166f0 <nvs_prev_ate+0x40>
	if (!nvs_ate_crc8_check(&close_ate)) {
 801671c:	4668      	mov	r0, sp
 801671e:	f7ff ff82 	bl	8016626 <nvs_ate_crc8_check>
 8016722:	b950      	cbnz	r0, 801673a <nvs_prev_ate+0x8a>
		if (close_ate.offset < (fs->sector_size - ate_size) &&
 8016724:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8016728:	89a3      	ldrh	r3, [r4, #12]
 801672a:	1b9b      	subs	r3, r3, r6
 801672c:	429a      	cmp	r2, r3
 801672e:	d204      	bcs.n	801673a <nvs_prev_ate+0x8a>
		    !(close_ate.offset % ate_size)) {
 8016730:	fbb2 f3f6 	udiv	r3, r2, r6
 8016734:	fb06 2313 	mls	r3, r6, r3, r2
		if (close_ate.offset < (fs->sector_size - ate_size) &&
 8016738:	b123      	cbz	r3, 8016744 <nvs_prev_ate+0x94>
	return nvs_recover_last_ate(fs, addr);
 801673a:	4629      	mov	r1, r5
 801673c:	4620      	mov	r0, r4
 801673e:	f7ff ff80 	bl	8016642 <nvs_recover_last_ate>
 8016742:	e7e3      	b.n	801670c <nvs_prev_ate+0x5c>
			(*addr) &= ADDR_SECT_MASK;
 8016744:	886a      	ldrh	r2, [r5, #2]
			(*addr) += close_ate.offset;
 8016746:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801674a:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 801674e:	602b      	str	r3, [r5, #0]
			return 0;
 8016750:	e7dc      	b.n	801670c <nvs_prev_ate+0x5c>

08016752 <nvs_ate_crc8_update>:
{
 8016752:	b510      	push	{r4, lr}
 8016754:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
 8016756:	2207      	movs	r2, #7
 8016758:	4601      	mov	r1, r0
 801675a:	20ff      	movs	r0, #255	; 0xff
 801675c:	f7ec fba8 	bl	8002eb0 <crc8_ccitt>
	entry->crc8 = crc8;
 8016760:	71e0      	strb	r0, [r4, #7]
}
 8016762:	bd10      	pop	{r4, pc}

08016764 <nvs_flash_al_wrt>:
{
 8016764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016768:	b088      	sub	sp, #32
	if (!len) {
 801676a:	2b00      	cmp	r3, #0
 801676c:	d047      	beq.n	80167fe <nvs_flash_al_wrt+0x9a>
 801676e:	4604      	mov	r4, r0
 8016770:	4616      	mov	r6, r2
 8016772:	461f      	mov	r7, r3
	offset = fs->offset;
 8016774:	6803      	ldr	r3, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
 8016776:	8985      	ldrh	r5, [r0, #12]
 8016778:	0c0a      	lsrs	r2, r1, #16
 801677a:	fb02 3505 	mla	r5, r2, r5, r3
	offset += addr & ADDR_OFFS_MASK;
 801677e:	fa15 f581 	uxtah	r5, r5, r1
 8016782:	46aa      	mov	sl, r5
	rc = flash_write_protection_set(fs->flash_device, 0);
 8016784:	6a80      	ldr	r0, [r0, #40]	; 0x28
	const struct flash_driver_api *api =
 8016786:	6883      	ldr	r3, [r0, #8]
	return api->write_protection(dev, enable);
 8016788:	68db      	ldr	r3, [r3, #12]
 801678a:	2100      	movs	r1, #0
 801678c:	4798      	blx	r3
	if (rc) {
 801678e:	4681      	mov	r9, r0
 8016790:	b9d0      	cbnz	r0, 80167c8 <nvs_flash_al_wrt+0x64>
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
 8016792:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	425b      	negs	r3, r3
	if (blen > 0) {
 8016798:	ea13 0807 	ands.w	r8, r3, r7
 801679c:	d00e      	beq.n	80167bc <nvs_flash_al_wrt+0x58>
		rc = flash_write(fs->flash_device, offset, data8, blen);
 801679e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	const struct flash_driver_api *api =
 80167a0:	6883      	ldr	r3, [r0, #8]
	return api->write(dev, offset, data, len);
 80167a2:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80167a6:	4643      	mov	r3, r8
 80167a8:	4632      	mov	r2, r6
 80167aa:	4629      	mov	r1, r5
 80167ac:	47c8      	blx	r9
		if (rc) {
 80167ae:	4681      	mov	r9, r0
 80167b0:	b928      	cbnz	r0, 80167be <nvs_flash_al_wrt+0x5a>
		len -= blen;
 80167b2:	eba7 0708 	sub.w	r7, r7, r8
		offset += blen;
 80167b6:	eb05 0a08 	add.w	sl, r5, r8
		data8 += blen;
 80167ba:	4446      	add	r6, r8
	if (len) {
 80167bc:	b947      	cbnz	r7, 80167d0 <nvs_flash_al_wrt+0x6c>
	(void) flash_write_protection_set(fs->flash_device, 1);
 80167be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	const struct flash_driver_api *api =
 80167c0:	6883      	ldr	r3, [r0, #8]
	return api->write_protection(dev, enable);
 80167c2:	68db      	ldr	r3, [r3, #12]
 80167c4:	2101      	movs	r1, #1
 80167c6:	4798      	blx	r3
}
 80167c8:	4648      	mov	r0, r9
 80167ca:	b008      	add	sp, #32
 80167cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		memcpy(buf, data8, len);
 80167d0:	463a      	mov	r2, r7
 80167d2:	4631      	mov	r1, r6
 80167d4:	4668      	mov	r0, sp
 80167d6:	f001 fb51 	bl	8017e7c <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
 80167da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			fs->flash_parameters->write_block_size - len);
 80167dc:	681a      	ldr	r2, [r3, #0]
		(void)memset(buf + len, fs->flash_parameters->erase_value,
 80167de:	1bd2      	subs	r2, r2, r7
 80167e0:	7919      	ldrb	r1, [r3, #4]
 80167e2:	eb0d 0007 	add.w	r0, sp, r7
 80167e6:	f001 fb6e 	bl	8017ec6 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
 80167ea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
				 fs->flash_parameters->write_block_size);
 80167ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		rc = flash_write(fs->flash_device, offset, buf,
 80167ee:	681b      	ldr	r3, [r3, #0]
	const struct flash_driver_api *api =
 80167f0:	6882      	ldr	r2, [r0, #8]
	return api->write(dev, offset, data, len);
 80167f2:	6855      	ldr	r5, [r2, #4]
 80167f4:	466a      	mov	r2, sp
 80167f6:	4651      	mov	r1, sl
 80167f8:	47a8      	blx	r5
 80167fa:	4681      	mov	r9, r0
end:
 80167fc:	e7df      	b.n	80167be <nvs_flash_al_wrt+0x5a>
		return 0;
 80167fe:	f04f 0900 	mov.w	r9, #0
 8016802:	e7e1      	b.n	80167c8 <nvs_flash_al_wrt+0x64>

08016804 <nvs_flash_data_wrt>:
{
 8016804:	b538      	push	{r3, r4, r5, lr}
 8016806:	4605      	mov	r5, r0
 8016808:	4614      	mov	r4, r2
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
 801680a:	4613      	mov	r3, r2
 801680c:	460a      	mov	r2, r1
 801680e:	6881      	ldr	r1, [r0, #8]
 8016810:	f7ff ffa8 	bl	8016764 <nvs_flash_al_wrt>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
 8016814:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8016816:	681a      	ldr	r2, [r3, #0]
 8016818:	b2d3      	uxtb	r3, r2
	if (write_block_size <= 1U) {
 801681a:	2b01      	cmp	r3, #1
 801681c:	d903      	bls.n	8016826 <nvs_flash_data_wrt+0x22>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
 801681e:	441c      	add	r4, r3
 8016820:	3c01      	subs	r4, #1
 8016822:	425a      	negs	r2, r3
 8016824:	4014      	ands	r4, r2
	fs->data_wra += nvs_al_size(fs, len);
 8016826:	68aa      	ldr	r2, [r5, #8]
 8016828:	4422      	add	r2, r4
 801682a:	60aa      	str	r2, [r5, #8]
}
 801682c:	bd38      	pop	{r3, r4, r5, pc}

0801682e <nvs_flash_block_move>:
{
 801682e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016832:	b088      	sub	sp, #32
 8016834:	4607      	mov	r7, r0
 8016836:	460e      	mov	r6, r1
 8016838:	4615      	mov	r5, r2
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
 801683a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	f1c3 0800 	rsb	r8, r3, #0
	block_size =
 8016842:	f008 0820 	and.w	r8, r8, #32
	while (len) {
 8016846:	e001      	b.n	801684c <nvs_flash_block_move+0x1e>
		len -= bytes_to_copy;
 8016848:	1b2d      	subs	r5, r5, r4
		addr += bytes_to_copy;
 801684a:	4426      	add	r6, r4
	while (len) {
 801684c:	b1a5      	cbz	r5, 8016878 <nvs_flash_block_move+0x4a>
		bytes_to_copy = MIN(block_size, len);
 801684e:	462c      	mov	r4, r5
 8016850:	4545      	cmp	r5, r8
 8016852:	bf28      	it	cs
 8016854:	4644      	movcs	r4, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
 8016856:	4623      	mov	r3, r4
 8016858:	466a      	mov	r2, sp
 801685a:	4631      	mov	r1, r6
 801685c:	4638      	mov	r0, r7
 801685e:	f7ff fe3f 	bl	80164e0 <nvs_flash_rd>
		if (rc) {
 8016862:	4603      	mov	r3, r0
 8016864:	b948      	cbnz	r0, 801687a <nvs_flash_block_move+0x4c>
		rc = nvs_flash_data_wrt(fs, buf, bytes_to_copy);
 8016866:	4622      	mov	r2, r4
 8016868:	4669      	mov	r1, sp
 801686a:	4638      	mov	r0, r7
 801686c:	f7ff ffca 	bl	8016804 <nvs_flash_data_wrt>
		if (rc) {
 8016870:	4603      	mov	r3, r0
 8016872:	2800      	cmp	r0, #0
 8016874:	d0e8      	beq.n	8016848 <nvs_flash_block_move+0x1a>
 8016876:	e000      	b.n	801687a <nvs_flash_block_move+0x4c>
	return 0;
 8016878:	2300      	movs	r3, #0
}
 801687a:	4618      	mov	r0, r3
 801687c:	b008      	add	sp, #32
 801687e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016882 <nvs_flash_ate_wrt>:
{
 8016882:	b510      	push	{r4, lr}
 8016884:	4604      	mov	r4, r0
 8016886:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
 8016888:	2308      	movs	r3, #8
 801688a:	6841      	ldr	r1, [r0, #4]
 801688c:	f7ff ff6a 	bl	8016764 <nvs_flash_al_wrt>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
 8016890:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
 8016896:	2a01      	cmp	r2, #1
 8016898:	d907      	bls.n	80168aa <nvs_flash_ate_wrt+0x28>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
 801689a:	4613      	mov	r3, r2
 801689c:	3207      	adds	r2, #7
 801689e:	425b      	negs	r3, r3
 80168a0:	4013      	ands	r3, r2
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
 80168a2:	6862      	ldr	r2, [r4, #4]
 80168a4:	1ad2      	subs	r2, r2, r3
 80168a6:	6062      	str	r2, [r4, #4]
}
 80168a8:	bd10      	pop	{r4, pc}
		return len;
 80168aa:	2308      	movs	r3, #8
 80168ac:	e7f9      	b.n	80168a2 <nvs_flash_ate_wrt+0x20>

080168ae <nvs_gc>:
{
 80168ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80168b0:	b08b      	sub	sp, #44	; 0x2c
 80168b2:	4604      	mov	r4, r0
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
 80168b4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
 80168ba:	2a01      	cmp	r2, #1
 80168bc:	d922      	bls.n	8016904 <nvs_gc+0x56>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
 80168be:	1dd7      	adds	r7, r2, #7
 80168c0:	4253      	negs	r3, r2
 80168c2:	401f      	ands	r7, r3
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
 80168c4:	88e3      	ldrh	r3, [r4, #6]
 80168c6:	041b      	lsls	r3, r3, #16
 80168c8:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
 80168ca:	a903      	add	r1, sp, #12
 80168cc:	4620      	mov	r0, r4
 80168ce:	f7ff fe25 	bl	801651c <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
 80168d2:	89a1      	ldrh	r1, [r4, #12]
 80168d4:	9b03      	ldr	r3, [sp, #12]
 80168d6:	4419      	add	r1, r3
 80168d8:	1bc9      	subs	r1, r1, r7
 80168da:	9102      	str	r1, [sp, #8]
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
 80168dc:	aa08      	add	r2, sp, #32
 80168de:	4620      	mov	r0, r4
 80168e0:	f7ff fe0b 	bl	80164fa <nvs_flash_ate_rd>
	if (rc < 0) {
 80168e4:	1e03      	subs	r3, r0, #0
 80168e6:	db0a      	blt.n	80168fe <nvs_gc+0x50>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
 80168e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80168ea:	7919      	ldrb	r1, [r3, #4]
 80168ec:	a808      	add	r0, sp, #32
 80168ee:	f7ff fe09 	bl	8016504 <nvs_ate_cmp_const>
	if (!rc) {
 80168f2:	b948      	cbnz	r0, 8016908 <nvs_gc+0x5a>
		rc = nvs_flash_erase_sector(fs, sec_addr);
 80168f4:	9903      	ldr	r1, [sp, #12]
 80168f6:	4620      	mov	r0, r4
 80168f8:	f7ff fe6e 	bl	80165d8 <nvs_flash_erase_sector>
 80168fc:	4603      	mov	r3, r0
}
 80168fe:	4618      	mov	r0, r3
 8016900:	b00b      	add	sp, #44	; 0x2c
 8016902:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return len;
 8016904:	2708      	movs	r7, #8
 8016906:	e7dd      	b.n	80168c4 <nvs_gc+0x16>
	stop_addr = gc_addr - ate_size;
 8016908:	9b02      	ldr	r3, [sp, #8]
 801690a:	1bdf      	subs	r7, r3, r7
	if (!nvs_ate_crc8_check(&close_ate)) {
 801690c:	a808      	add	r0, sp, #32
 801690e:	f7ff fe8a 	bl	8016626 <nvs_ate_crc8_check>
 8016912:	b938      	cbnz	r0, 8016924 <nvs_gc+0x76>
		gc_addr &= ADDR_SECT_MASK;
 8016914:	f8bd 200a 	ldrh.w	r2, [sp, #10]
		gc_addr += close_ate.offset;
 8016918:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801691c:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8016920:	9302      	str	r3, [sp, #8]
 8016922:	e022      	b.n	801696a <nvs_gc+0xbc>
		rc = nvs_recover_last_ate(fs, &gc_addr);
 8016924:	a902      	add	r1, sp, #8
 8016926:	4620      	mov	r0, r4
 8016928:	f7ff fe8b 	bl	8016642 <nvs_recover_last_ate>
		if (rc) {
 801692c:	4603      	mov	r3, r0
 801692e:	b1e0      	cbz	r0, 801696a <nvs_gc+0xbc>
 8016930:	e7e5      	b.n	80168fe <nvs_gc+0x50>
		} while (wlk_addr != fs->ate_wra);
 8016932:	6862      	ldr	r2, [r4, #4]
 8016934:	9b01      	ldr	r3, [sp, #4]
 8016936:	429a      	cmp	r2, r3
 8016938:	d013      	beq.n	8016962 <nvs_gc+0xb4>
			wlk_prev_addr = wlk_addr;
 801693a:	9d01      	ldr	r5, [sp, #4]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
 801693c:	aa04      	add	r2, sp, #16
 801693e:	a901      	add	r1, sp, #4
 8016940:	4620      	mov	r0, r4
 8016942:	f7ff feb5 	bl	80166b0 <nvs_prev_ate>
			if (rc) {
 8016946:	4603      	mov	r3, r0
 8016948:	2800      	cmp	r0, #0
 801694a:	d1d8      	bne.n	80168fe <nvs_gc+0x50>
			if ((wlk_ate.id == gc_ate.id) &&
 801694c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8016950:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8016954:	429a      	cmp	r2, r3
 8016956:	d1ec      	bne.n	8016932 <nvs_gc+0x84>
			    (!nvs_ate_crc8_check(&wlk_ate))) {
 8016958:	a804      	add	r0, sp, #16
 801695a:	f7ff fe64 	bl	8016626 <nvs_ate_crc8_check>
			if ((wlk_ate.id == gc_ate.id) &&
 801695e:	2800      	cmp	r0, #0
 8016960:	d1e7      	bne.n	8016932 <nvs_gc+0x84>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
 8016962:	42b5      	cmp	r5, r6
 8016964:	d012      	beq.n	801698c <nvs_gc+0xde>
	} while (gc_prev_addr != stop_addr);
 8016966:	42be      	cmp	r6, r7
 8016968:	d030      	beq.n	80169cc <nvs_gc+0x11e>
		gc_prev_addr = gc_addr;
 801696a:	9e02      	ldr	r6, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
 801696c:	aa06      	add	r2, sp, #24
 801696e:	a902      	add	r1, sp, #8
 8016970:	4620      	mov	r0, r4
 8016972:	f7ff fe9d 	bl	80166b0 <nvs_prev_ate>
		if (rc) {
 8016976:	4603      	mov	r3, r0
 8016978:	2800      	cmp	r0, #0
 801697a:	d1c0      	bne.n	80168fe <nvs_gc+0x50>
		if (nvs_ate_crc8_check(&gc_ate)) {
 801697c:	a806      	add	r0, sp, #24
 801697e:	f7ff fe52 	bl	8016626 <nvs_ate_crc8_check>
 8016982:	2800      	cmp	r0, #0
 8016984:	d1ef      	bne.n	8016966 <nvs_gc+0xb8>
		wlk_addr = fs->ate_wra;
 8016986:	6863      	ldr	r3, [r4, #4]
 8016988:	9301      	str	r3, [sp, #4]
 801698a:	e7d6      	b.n	801693a <nvs_gc+0x8c>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
 801698c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8016990:	2b00      	cmp	r3, #0
 8016992:	d0e8      	beq.n	8016966 <nvs_gc+0xb8>
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
 8016994:	0c33      	lsrs	r3, r6, #16
 8016996:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
 8016998:	f8bd 501a 	ldrh.w	r5, [sp, #26]
 801699c:	441d      	add	r5, r3
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
 801699e:	8923      	ldrh	r3, [r4, #8]
 80169a0:	f8ad 301a 	strh.w	r3, [sp, #26]
			nvs_ate_crc8_update(&gc_ate);
 80169a4:	a806      	add	r0, sp, #24
 80169a6:	f7ff fed4 	bl	8016752 <nvs_ate_crc8_update>
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
 80169aa:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80169ae:	4629      	mov	r1, r5
 80169b0:	4620      	mov	r0, r4
 80169b2:	f7ff ff3c 	bl	801682e <nvs_flash_block_move>
			if (rc) {
 80169b6:	4603      	mov	r3, r0
 80169b8:	2800      	cmp	r0, #0
 80169ba:	d1a0      	bne.n	80168fe <nvs_gc+0x50>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
 80169bc:	a906      	add	r1, sp, #24
 80169be:	4620      	mov	r0, r4
 80169c0:	f7ff ff5f 	bl	8016882 <nvs_flash_ate_wrt>
			if (rc) {
 80169c4:	4603      	mov	r3, r0
 80169c6:	2800      	cmp	r0, #0
 80169c8:	d0cd      	beq.n	8016966 <nvs_gc+0xb8>
 80169ca:	e798      	b.n	80168fe <nvs_gc+0x50>
	rc = nvs_flash_erase_sector(fs, sec_addr);
 80169cc:	9903      	ldr	r1, [sp, #12]
 80169ce:	4620      	mov	r0, r4
 80169d0:	f7ff fe02 	bl	80165d8 <nvs_flash_erase_sector>
 80169d4:	4603      	mov	r3, r0
	if (rc) {
 80169d6:	e792      	b.n	80168fe <nvs_gc+0x50>

080169d8 <nvs_flash_wrt_entry>:
{
 80169d8:	b570      	push	{r4, r5, r6, lr}
 80169da:	b082      	sub	sp, #8
 80169dc:	4604      	mov	r4, r0
 80169de:	4616      	mov	r6, r2
 80169e0:	461d      	mov	r5, r3
	entry.id = id;
 80169e2:	f8ad 1000 	strh.w	r1, [sp]
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
 80169e6:	8903      	ldrh	r3, [r0, #8]
 80169e8:	f8ad 3002 	strh.w	r3, [sp, #2]
	entry.len = (uint16_t)len;
 80169ec:	f8ad 5004 	strh.w	r5, [sp, #4]
	entry.part = 0xff;
 80169f0:	23ff      	movs	r3, #255	; 0xff
 80169f2:	f88d 3006 	strb.w	r3, [sp, #6]
	nvs_ate_crc8_update(&entry);
 80169f6:	4668      	mov	r0, sp
 80169f8:	f7ff feab 	bl	8016752 <nvs_ate_crc8_update>
	rc = nvs_flash_data_wrt(fs, data, len);
 80169fc:	462a      	mov	r2, r5
 80169fe:	4631      	mov	r1, r6
 8016a00:	4620      	mov	r0, r4
 8016a02:	f7ff feff 	bl	8016804 <nvs_flash_data_wrt>
	if (rc) {
 8016a06:	b108      	cbz	r0, 8016a0c <nvs_flash_wrt_entry+0x34>
}
 8016a08:	b002      	add	sp, #8
 8016a0a:	bd70      	pop	{r4, r5, r6, pc}
	rc = nvs_flash_ate_wrt(fs, &entry);
 8016a0c:	4669      	mov	r1, sp
 8016a0e:	4620      	mov	r0, r4
 8016a10:	f7ff ff37 	bl	8016882 <nvs_flash_ate_wrt>
	if (rc) {
 8016a14:	e7f8      	b.n	8016a08 <nvs_flash_wrt_entry+0x30>

08016a16 <nvs_sector_close>:
{
 8016a16:	b530      	push	{r4, r5, lr}
 8016a18:	b083      	sub	sp, #12
 8016a1a:	4604      	mov	r4, r0
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
 8016a1c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
 8016a22:	2a01      	cmp	r2, #1
 8016a24:	d925      	bls.n	8016a72 <nvs_sector_close+0x5c>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
 8016a26:	4613      	mov	r3, r2
 8016a28:	3207      	adds	r2, #7
 8016a2a:	425b      	negs	r3, r3
 8016a2c:	401a      	ands	r2, r3
	close_ate.id = 0xFFFF;
 8016a2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016a32:	f8ad 3000 	strh.w	r3, [sp]
	close_ate.len = 0U;
 8016a36:	2500      	movs	r5, #0
 8016a38:	f8ad 5004 	strh.w	r5, [sp, #4]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
 8016a3c:	6863      	ldr	r3, [r4, #4]
 8016a3e:	1899      	adds	r1, r3, r2
 8016a40:	f8ad 1002 	strh.w	r1, [sp, #2]
	fs->ate_wra &= ADDR_SECT_MASK;
 8016a44:	0c1b      	lsrs	r3, r3, #16
 8016a46:	041b      	lsls	r3, r3, #16
	fs->ate_wra += (fs->sector_size - ate_size);
 8016a48:	89a1      	ldrh	r1, [r4, #12]
 8016a4a:	1a8a      	subs	r2, r1, r2
 8016a4c:	4413      	add	r3, r2
 8016a4e:	6063      	str	r3, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
 8016a50:	4668      	mov	r0, sp
 8016a52:	f7ff fe7e 	bl	8016752 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
 8016a56:	4669      	mov	r1, sp
 8016a58:	4620      	mov	r0, r4
 8016a5a:	f7ff ff12 	bl	8016882 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
 8016a5e:	1d21      	adds	r1, r4, #4
 8016a60:	4620      	mov	r0, r4
 8016a62:	f7ff fd5b 	bl	801651c <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
 8016a66:	88e3      	ldrh	r3, [r4, #6]
 8016a68:	041b      	lsls	r3, r3, #16
 8016a6a:	60a3      	str	r3, [r4, #8]
}
 8016a6c:	4628      	mov	r0, r5
 8016a6e:	b003      	add	sp, #12
 8016a70:	bd30      	pop	{r4, r5, pc}
		return len;
 8016a72:	2208      	movs	r2, #8
 8016a74:	e7db      	b.n	8016a2e <nvs_sector_close+0x18>

08016a76 <nvs_startup>:
{
 8016a76:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016a7a:	b085      	sub	sp, #20
 8016a7c:	4604      	mov	r4, r0
	uint32_t addr = 0U;
 8016a7e:	2300      	movs	r3, #0
 8016a80:	9301      	str	r3, [sp, #4]
	uint8_t erase_value = fs->flash_parameters->erase_value;
 8016a82:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8016a84:	791e      	ldrb	r6, [r3, #4]
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
 8016a86:	f100 0914 	add.w	r9, r0, #20
	return z_impl_k_mutex_lock(mutex, timeout);
 8016a8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016a8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016a92:	4648      	mov	r0, r9
 8016a94:	f7fd f890 	bl	8013bb8 <z_impl_k_mutex_lock>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
 8016a98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
 8016a9e:	2a01      	cmp	r2, #1
 8016aa0:	d906      	bls.n	8016ab0 <nvs_startup+0x3a>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
 8016aa2:	1dd7      	adds	r7, r2, #7
 8016aa4:	4253      	negs	r3, r2
 8016aa6:	401f      	ands	r7, r3
	uint16_t i, closed_sectors = 0;
 8016aa8:	f04f 0800 	mov.w	r8, #0
	for (i = 0; i < fs->sector_count; i++) {
 8016aac:	4645      	mov	r5, r8
 8016aae:	e003      	b.n	8016ab8 <nvs_startup+0x42>
		return len;
 8016ab0:	2708      	movs	r7, #8
 8016ab2:	e7f9      	b.n	8016aa8 <nvs_startup+0x32>
	for (i = 0; i < fs->sector_count; i++) {
 8016ab4:	3501      	adds	r5, #1
 8016ab6:	b2ad      	uxth	r5, r5
 8016ab8:	89e3      	ldrh	r3, [r4, #14]
 8016aba:	42ab      	cmp	r3, r5
 8016abc:	d91c      	bls.n	8016af8 <nvs_startup+0x82>
		       (uint16_t)(fs->sector_size - ate_size);
 8016abe:	89a1      	ldrh	r1, [r4, #12]
 8016ac0:	1bc9      	subs	r1, r1, r7
 8016ac2:	b289      	uxth	r1, r1
		addr = (i << ADDR_SECT_SHIFT) +
 8016ac4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8016ac8:	9101      	str	r1, [sp, #4]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
 8016aca:	2308      	movs	r3, #8
 8016acc:	4632      	mov	r2, r6
 8016ace:	4620      	mov	r0, r4
 8016ad0:	f7ff fd5d 	bl	801658e <nvs_flash_cmp_const>
		if (rc) {
 8016ad4:	2800      	cmp	r0, #0
 8016ad6:	d0ed      	beq.n	8016ab4 <nvs_startup+0x3e>
			closed_sectors++;
 8016ad8:	f108 0801 	add.w	r8, r8, #1
 8016adc:	fa1f f888 	uxth.w	r8, r8
			nvs_sector_advance(fs, &addr);
 8016ae0:	a901      	add	r1, sp, #4
 8016ae2:	4620      	mov	r0, r4
 8016ae4:	f7ff fd1a 	bl	801651c <nvs_sector_advance>
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
 8016ae8:	2308      	movs	r3, #8
 8016aea:	4632      	mov	r2, r6
 8016aec:	9901      	ldr	r1, [sp, #4]
 8016aee:	4620      	mov	r0, r4
 8016af0:	f7ff fd4d 	bl	801658e <nvs_flash_cmp_const>
			if (!rc) {
 8016af4:	2800      	cmp	r0, #0
 8016af6:	d1dd      	bne.n	8016ab4 <nvs_startup+0x3e>
	if (closed_sectors == fs->sector_count) {
 8016af8:	89e3      	ldrh	r3, [r4, #14]
 8016afa:	4543      	cmp	r3, r8
 8016afc:	f000 808b 	beq.w	8016c16 <nvs_startup+0x1a0>
	if (i == fs->sector_count) {
 8016b00:	42ab      	cmp	r3, r5
 8016b02:	d006      	beq.n	8016b12 <nvs_startup+0x9c>
	fs->ate_wra = addr - ate_size;
 8016b04:	9b01      	ldr	r3, [sp, #4]
 8016b06:	1bda      	subs	r2, r3, r7
 8016b08:	6062      	str	r2, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
 8016b0a:	0c1b      	lsrs	r3, r3, #16
 8016b0c:	041b      	lsls	r3, r3, #16
 8016b0e:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
 8016b10:	e010      	b.n	8016b34 <nvs_startup+0xbe>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
 8016b12:	2308      	movs	r3, #8
 8016b14:	4632      	mov	r2, r6
 8016b16:	9901      	ldr	r1, [sp, #4]
 8016b18:	1bc9      	subs	r1, r1, r7
 8016b1a:	4620      	mov	r0, r4
 8016b1c:	f7ff fd37 	bl	801658e <nvs_flash_cmp_const>
		if (!rc) {
 8016b20:	2800      	cmp	r0, #0
 8016b22:	d1ef      	bne.n	8016b04 <nvs_startup+0x8e>
			nvs_sector_advance(fs, &addr);
 8016b24:	a901      	add	r1, sp, #4
 8016b26:	4620      	mov	r0, r4
 8016b28:	f7ff fcf8 	bl	801651c <nvs_sector_advance>
 8016b2c:	e7ea      	b.n	8016b04 <nvs_startup+0x8e>
		fs->ate_wra -= ate_size;
 8016b2e:	6863      	ldr	r3, [r4, #4]
 8016b30:	1bdb      	subs	r3, r3, r7
 8016b32:	6063      	str	r3, [r4, #4]
	while (fs->ate_wra >= fs->data_wra) {
 8016b34:	6861      	ldr	r1, [r4, #4]
 8016b36:	68a3      	ldr	r3, [r4, #8]
 8016b38:	4299      	cmp	r1, r3
 8016b3a:	d32d      	bcc.n	8016b98 <nvs_startup+0x122>
		rc = nvs_flash_ate_rd(fs, fs->ate_wra, &last_ate);
 8016b3c:	aa02      	add	r2, sp, #8
 8016b3e:	4620      	mov	r0, r4
 8016b40:	f7ff fcdb 	bl	80164fa <nvs_flash_ate_rd>
		if (rc) {
 8016b44:	4605      	mov	r5, r0
 8016b46:	2800      	cmp	r0, #0
 8016b48:	d148      	bne.n	8016bdc <nvs_startup+0x166>
		rc = nvs_ate_cmp_const(&last_ate, erase_value);
 8016b4a:	4631      	mov	r1, r6
 8016b4c:	a802      	add	r0, sp, #8
 8016b4e:	f7ff fcd9 	bl	8016504 <nvs_ate_cmp_const>
		if (!rc) {
 8016b52:	b308      	cbz	r0, 8016b98 <nvs_startup+0x122>
		if (!nvs_ate_crc8_check(&last_ate)) {
 8016b54:	a802      	add	r0, sp, #8
 8016b56:	f7ff fd66 	bl	8016626 <nvs_ate_crc8_check>
 8016b5a:	2800      	cmp	r0, #0
 8016b5c:	d1e7      	bne.n	8016b2e <nvs_startup+0xb8>
			fs->data_wra = addr & ADDR_SECT_MASK;
 8016b5e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
			fs->data_wra += last_ate.offset;
 8016b62:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8016b66:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8016b6a:	60a3      	str	r3, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
 8016b6c:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 8016b70:	4601      	mov	r1, r0
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
 8016b72:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8016b74:	6812      	ldr	r2, [r2, #0]
 8016b76:	b2d5      	uxtb	r5, r2
	if (write_block_size <= 1U) {
 8016b78:	2d01      	cmp	r5, #1
 8016b7a:	d903      	bls.n	8016b84 <nvs_startup+0x10e>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
 8016b7c:	1941      	adds	r1, r0, r5
 8016b7e:	3901      	subs	r1, #1
 8016b80:	426a      	negs	r2, r5
 8016b82:	4011      	ands	r1, r2
			fs->data_wra += nvs_al_size(fs, last_ate.len);
 8016b84:	440b      	add	r3, r1
 8016b86:	60a3      	str	r3, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
 8016b88:	6862      	ldr	r2, [r4, #4]
 8016b8a:	4293      	cmp	r3, r2
 8016b8c:	d1cf      	bne.n	8016b2e <nvs_startup+0xb8>
 8016b8e:	2800      	cmp	r0, #0
 8016b90:	d0cd      	beq.n	8016b2e <nvs_startup+0xb8>
				rc = -ESPIPE;
 8016b92:	f06f 051c 	mvn.w	r5, #28
 8016b96:	e021      	b.n	8016bdc <nvs_startup+0x166>
	while (fs->ate_wra > fs->data_wra) {
 8016b98:	6863      	ldr	r3, [r4, #4]
 8016b9a:	68a1      	ldr	r1, [r4, #8]
 8016b9c:	428b      	cmp	r3, r1
 8016b9e:	d90d      	bls.n	8016bbc <nvs_startup+0x146>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
 8016ba0:	1a5b      	subs	r3, r3, r1
 8016ba2:	4632      	mov	r2, r6
 8016ba4:	4620      	mov	r0, r4
 8016ba6:	f7ff fcf2 	bl	801658e <nvs_flash_cmp_const>
		if (rc < 0) {
 8016baa:	1e05      	subs	r5, r0, #0
 8016bac:	db16      	blt.n	8016bdc <nvs_startup+0x166>
		if (!rc) {
 8016bae:	b12d      	cbz	r5, 8016bbc <nvs_startup+0x146>
		fs->data_wra += fs->flash_parameters->write_block_size;
 8016bb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8016bb2:	681a      	ldr	r2, [r3, #0]
 8016bb4:	68a3      	ldr	r3, [r4, #8]
 8016bb6:	4413      	add	r3, r2
 8016bb8:	60a3      	str	r3, [r4, #8]
 8016bba:	e7ed      	b.n	8016b98 <nvs_startup+0x122>
	addr = fs->ate_wra & ADDR_SECT_MASK;
 8016bbc:	88e3      	ldrh	r3, [r4, #6]
 8016bbe:	041b      	lsls	r3, r3, #16
 8016bc0:	9301      	str	r3, [sp, #4]
	nvs_sector_advance(fs, &addr);
 8016bc2:	a901      	add	r1, sp, #4
 8016bc4:	4620      	mov	r0, r4
 8016bc6:	f7ff fca9 	bl	801651c <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
 8016bca:	89a3      	ldrh	r3, [r4, #12]
 8016bcc:	4632      	mov	r2, r6
 8016bce:	9901      	ldr	r1, [sp, #4]
 8016bd0:	4620      	mov	r0, r4
 8016bd2:	f7ff fcdc 	bl	801658e <nvs_flash_cmp_const>
	if (rc < 0) {
 8016bd6:	1e05      	subs	r5, r0, #0
 8016bd8:	db00      	blt.n	8016bdc <nvs_startup+0x166>
	if (rc) {
 8016bda:	b935      	cbnz	r5, 8016bea <nvs_startup+0x174>
	return z_impl_k_mutex_unlock(mutex);
 8016bdc:	4648      	mov	r0, r9
 8016bde:	f7fd f875 	bl	8013ccc <z_impl_k_mutex_unlock>
}
 8016be2:	4628      	mov	r0, r5
 8016be4:	b005      	add	sp, #20
 8016be6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
 8016bea:	6861      	ldr	r1, [r4, #4]
 8016bec:	4620      	mov	r0, r4
 8016bee:	f7ff fcf3 	bl	80165d8 <nvs_flash_erase_sector>
		if (rc) {
 8016bf2:	4605      	mov	r5, r0
 8016bf4:	2800      	cmp	r0, #0
 8016bf6:	d1f1      	bne.n	8016bdc <nvs_startup+0x166>
		fs->ate_wra &= ADDR_SECT_MASK;
 8016bf8:	88e2      	ldrh	r2, [r4, #6]
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
 8016bfa:	89a3      	ldrh	r3, [r4, #12]
 8016bfc:	eba3 0347 	sub.w	r3, r3, r7, lsl #1
 8016c00:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8016c04:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
 8016c06:	0c1b      	lsrs	r3, r3, #16
 8016c08:	041b      	lsls	r3, r3, #16
 8016c0a:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
 8016c0c:	4620      	mov	r0, r4
 8016c0e:	f7ff fe4e 	bl	80168ae <nvs_gc>
 8016c12:	4605      	mov	r5, r0
end:
 8016c14:	e7e2      	b.n	8016bdc <nvs_startup+0x166>
		rc = -EDEADLK;
 8016c16:	f06f 0520 	mvn.w	r5, #32
 8016c1a:	e7df      	b.n	8016bdc <nvs_startup+0x166>

08016c1c <nvs_delete>:
{
 8016c1c:	b508      	push	{r3, lr}
	return nvs_write(fs, id, NULL, 0);
 8016c1e:	2300      	movs	r3, #0
 8016c20:	461a      	mov	r2, r3
 8016c22:	f7ee f905 	bl	8004e30 <nvs_write>
}
 8016c26:	bd08      	pop	{r3, pc}

08016c28 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
 8016c28:	b510      	push	{r4, lr}
 8016c2a:	b082      	sub	sp, #8
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
 8016c2c:	2400      	movs	r4, #0
 8016c2e:	9400      	str	r4, [sp, #0]
 8016c30:	f7ee f9c8 	bl	8004fc4 <nvs_read_hist>
	return rc;
}
 8016c34:	b002      	add	sp, #8
 8016c36:	bd10      	pop	{r4, pc}

08016c38 <usb_vbus_set>:
}
 8016c38:	2000      	movs	r0, #0
 8016c3a:	4770      	bx	lr

08016c3c <usb_eps_reconfigure>:
{
 8016c3c:	b508      	push	{r3, lr}
	if (cur_alt_setting != alt_setting) {
 8016c3e:	4291      	cmp	r1, r2
 8016c40:	d002      	beq.n	8016c48 <usb_eps_reconfigure+0xc>
		ret = reset_endpoint(ep_desc);
 8016c42:	f7ee fca1 	bl	8005588 <reset_endpoint>
}
 8016c46:	bd08      	pop	{r3, pc}
		ret = set_endpoint(ep_desc);
 8016c48:	f7ee fba8 	bl	800539c <set_endpoint>
 8016c4c:	e7fb      	b.n	8016c46 <usb_eps_reconfigure+0xa>

08016c4e <usb_handle_std_interface_req>:
{
 8016c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c52:	4606      	mov	r6, r0
 8016c54:	460d      	mov	r5, r1
	uint8_t *data = *data_buf;
 8016c56:	6817      	ldr	r7, [r2, #0]
	if (!is_device_configured() ||
 8016c58:	f7ee fa82 	bl	8005160 <is_device_configured>
 8016c5c:	4604      	mov	r4, r0
 8016c5e:	b910      	cbnz	r0, 8016c66 <usb_handle_std_interface_req+0x18>
}
 8016c60:	4620      	mov	r0, r4
 8016c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
 8016c66:	f896 8004 	ldrb.w	r8, [r6, #4]
 8016c6a:	4640      	mov	r0, r8
 8016c6c:	f7ee fa82 	bl	8005174 <is_interface_valid>
	if (!is_device_configured() ||
 8016c70:	4604      	mov	r4, r0
 8016c72:	2800      	cmp	r0, #0
 8016c74:	d0f4      	beq.n	8016c60 <usb_handle_std_interface_req+0x12>
	switch (setup->bRequest) {
 8016c76:	7873      	ldrb	r3, [r6, #1]
 8016c78:	2b0a      	cmp	r3, #10
 8016c7a:	d009      	beq.n	8016c90 <usb_handle_std_interface_req+0x42>
 8016c7c:	2b0b      	cmp	r3, #11
 8016c7e:	d00c      	beq.n	8016c9a <usb_handle_std_interface_req+0x4c>
 8016c80:	b10b      	cbz	r3, 8016c86 <usb_handle_std_interface_req+0x38>
 8016c82:	2400      	movs	r4, #0
 8016c84:	e7ec      	b.n	8016c60 <usb_handle_std_interface_req+0x12>
		data[0] = 0U;
 8016c86:	703b      	strb	r3, [r7, #0]
		data[1] = 0U;
 8016c88:	707b      	strb	r3, [r7, #1]
		*len = 2;
 8016c8a:	2302      	movs	r3, #2
 8016c8c:	602b      	str	r3, [r5, #0]
		break;
 8016c8e:	e7e7      	b.n	8016c60 <usb_handle_std_interface_req+0x12>
		data[0] = 0U;
 8016c90:	2300      	movs	r3, #0
 8016c92:	703b      	strb	r3, [r7, #0]
		*len = 1;
 8016c94:	2301      	movs	r3, #1
 8016c96:	602b      	str	r3, [r5, #0]
		break;
 8016c98:	e7e2      	b.n	8016c60 <usb_handle_std_interface_req+0x12>
		usb_set_interface(setup->wIndex, setup->wValue);
 8016c9a:	78b1      	ldrb	r1, [r6, #2]
 8016c9c:	4640      	mov	r0, r8
 8016c9e:	f7ee fcb1 	bl	8005604 <usb_set_interface>
		*len = 0;
 8016ca2:	2300      	movs	r3, #0
 8016ca4:	602b      	str	r3, [r5, #0]
		break;
 8016ca6:	e7db      	b.n	8016c60 <usb_handle_std_interface_req+0x12>

08016ca8 <disable_interface_ep>:
{
 8016ca8:	b508      	push	{r3, lr}
	return usb_dc_ep_disable(ep_data->ep_addr);
 8016caa:	7900      	ldrb	r0, [r0, #4]
 8016cac:	f7f0 fa36 	bl	800711c <usb_dc_ep_disable>
}
 8016cb0:	bd08      	pop	{r3, pc}

08016cb2 <usb_wakeup_request>:
}
 8016cb2:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8016cb6:	4770      	bx	lr

08016cb8 <ascii7_to_utf16le>:
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
 8016cb8:	f810 2b02 	ldrb.w	r2, [r0], #2
 8016cbc:	1ed3      	subs	r3, r2, #3
	int ascii_idx_max = USB_BSTRING_ASCII_IDX_MAX(str_descr->bLength);
 8016cbe:	0852      	lsrs	r2, r2, #1
 8016cc0:	3a02      	subs	r2, #2
	for (int i = idx_max; i >= 0; i -= 2) {
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	db0c      	blt.n	8016ce0 <ascii7_to_utf16le+0x28>
{
 8016cc6:	b410      	push	{r4}
		buf[i] = 0U;
 8016cc8:	2100      	movs	r1, #0
 8016cca:	54c1      	strb	r1, [r0, r3]
		buf[i - 1] = buf[ascii_idx_max--];
 8016ccc:	1e59      	subs	r1, r3, #1
 8016cce:	5c84      	ldrb	r4, [r0, r2]
 8016cd0:	5444      	strb	r4, [r0, r1]
	for (int i = idx_max; i >= 0; i -= 2) {
 8016cd2:	3b02      	subs	r3, #2
		buf[i - 1] = buf[ascii_idx_max--];
 8016cd4:	3a01      	subs	r2, #1
	for (int i = idx_max; i >= 0; i -= 2) {
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	daf6      	bge.n	8016cc8 <ascii7_to_utf16le+0x10>
}
 8016cda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016cde:	4770      	bx	lr
 8016ce0:	4770      	bx	lr

08016ce2 <usb_validate_ep_cfg_data>:
{
 8016ce2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ce6:	b083      	sub	sp, #12
 8016ce8:	4605      	mov	r5, r0
 8016cea:	4689      	mov	r9, r1
 8016cec:	4690      	mov	r8, r2
	for (int i = 0; i < cfg_data->num_endpoints; i++) {
 8016cee:	2700      	movs	r7, #0
 8016cf0:	e04a      	b.n	8016d88 <usb_validate_ep_cfg_data+0xa6>
				if ((*requested_ep & (1 << (idx + 16)))) {
 8016cf2:	f8d8 2000 	ldr.w	r2, [r8]
 8016cf6:	f104 0110 	add.w	r1, r4, #16
 8016cfa:	2301      	movs	r3, #1
 8016cfc:	408b      	lsls	r3, r1
 8016cfe:	421a      	tst	r2, r3
 8016d00:	d108      	bne.n	8016d14 <usb_validate_ep_cfg_data+0x32>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
 8016d02:	f064 037f 	orn	r3, r4, #127	; 0x7f
 8016d06:	f88d 3000 	strb.w	r3, [sp]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
 8016d0a:	4668      	mov	r0, sp
 8016d0c:	f7f0 f8e8 	bl	8006ee0 <usb_dc_ep_check_cap>
 8016d10:	4603      	mov	r3, r0
 8016d12:	b1d0      	cbz	r0, 8016d4a <usb_validate_ep_cfg_data+0x68>
		for (uint8_t idx = 1; idx < 16; idx++) {
 8016d14:	3401      	adds	r4, #1
 8016d16:	b2e4      	uxtb	r4, r4
 8016d18:	2c0f      	cmp	r4, #15
 8016d1a:	d834      	bhi.n	8016d86 <usb_validate_ep_cfg_data+0xa4>
			ep_cfg.ep_type = (ep_descr->bmAttributes &
 8016d1c:	78eb      	ldrb	r3, [r5, #3]
 8016d1e:	f003 0303 	and.w	r3, r3, #3
 8016d22:	f88d 3004 	strb.w	r3, [sp, #4]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
 8016d26:	88ab      	ldrh	r3, [r5, #4]
 8016d28:	f8ad 3002 	strh.w	r3, [sp, #2]
			ep_cfg.ep_addr = ep_descr->bEndpointAddress;
 8016d2c:	78ab      	ldrb	r3, [r5, #2]
 8016d2e:	f88d 3000 	strb.w	r3, [sp]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
 8016d32:	f013 0f80 	tst.w	r3, #128	; 0x80
 8016d36:	d1dc      	bne.n	8016cf2 <usb_validate_ep_cfg_data+0x10>
				if ((*requested_ep & (1 << (idx)))) {
 8016d38:	f8d8 2000 	ldr.w	r2, [r8]
 8016d3c:	2301      	movs	r3, #1
 8016d3e:	40a3      	lsls	r3, r4
 8016d40:	421a      	tst	r2, r3
 8016d42:	d1e7      	bne.n	8016d14 <usb_validate_ep_cfg_data+0x32>
				ep_cfg.ep_addr = idx;
 8016d44:	f88d 4000 	strb.w	r4, [sp]
 8016d48:	e7df      	b.n	8016d0a <usb_validate_ep_cfg_data+0x28>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
 8016d4a:	f89d 2000 	ldrb.w	r2, [sp]
 8016d4e:	70aa      	strb	r2, [r5, #2]
				ep_data[i].ep_addr = ep_cfg.ep_addr;
 8016d50:	7132      	strb	r2, [r6, #4]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
 8016d52:	f012 0f80 	tst.w	r2, #128	; 0x80
 8016d56:	d10b      	bne.n	8016d70 <usb_validate_ep_cfg_data+0x8e>
					*requested_ep |= (1 << idx);
 8016d58:	2201      	movs	r2, #1
 8016d5a:	fa02 f404 	lsl.w	r4, r2, r4
 8016d5e:	f8d8 2000 	ldr.w	r2, [r8]
 8016d62:	4322      	orrs	r2, r4
 8016d64:	f8c8 2000 	str.w	r2, [r8]
}
 8016d68:	4618      	mov	r0, r3
 8016d6a:	b003      	add	sp, #12
 8016d6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					*requested_ep |= (1 << (idx + 16));
 8016d70:	f104 0110 	add.w	r1, r4, #16
 8016d74:	2201      	movs	r2, #1
 8016d76:	fa02 f101 	lsl.w	r1, r2, r1
 8016d7a:	f8d8 2000 	ldr.w	r2, [r8]
 8016d7e:	430a      	orrs	r2, r1
 8016d80:	f8c8 2000 	str.w	r2, [r8]
 8016d84:	e7f0      	b.n	8016d68 <usb_validate_ep_cfg_data+0x86>
	for (int i = 0; i < cfg_data->num_endpoints; i++) {
 8016d86:	3701      	adds	r7, #1
 8016d88:	f899 301c 	ldrb.w	r3, [r9, #28]
 8016d8c:	429f      	cmp	r7, r3
 8016d8e:	da09      	bge.n	8016da4 <usb_validate_ep_cfg_data+0xc2>
		struct usb_ep_cfg_data *ep_data = cfg_data->endpoint;
 8016d90:	f8d9 6020 	ldr.w	r6, [r9, #32]
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
 8016d94:	78aa      	ldrb	r2, [r5, #2]
 8016d96:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 8016d9a:	7933      	ldrb	r3, [r6, #4]
 8016d9c:	429a      	cmp	r2, r3
 8016d9e:	d1f2      	bne.n	8016d86 <usb_validate_ep_cfg_data+0xa4>
		for (uint8_t idx = 1; idx < 16; idx++) {
 8016da0:	2401      	movs	r4, #1
 8016da2:	e7b9      	b.n	8016d18 <usb_validate_ep_cfg_data+0x36>
	return -1;
 8016da4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016da8:	e7de      	b.n	8016d68 <usb_validate_ep_cfg_data+0x86>

08016daa <usb_get_dev_data_by_cfg>:
	return list->head;
 8016daa:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
 8016dac:	b110      	cbz	r0, 8016db4 <usb_get_dev_data_by_cfg+0xa>
 8016dae:	3804      	subs	r0, #4
 8016db0:	e000      	b.n	8016db4 <usb_get_dev_data_by_cfg+0xa>
 8016db2:	3804      	subs	r0, #4
 8016db4:	b140      	cbz	r0, 8016dc8 <usb_get_dev_data_by_cfg+0x1e>
		const struct device *dev = dev_data->dev;
 8016db6:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg_cur = dev->config;
 8016db8:	685b      	ldr	r3, [r3, #4]

		if (cfg_cur == cfg) {
 8016dba:	428b      	cmp	r3, r1
 8016dbc:	d004      	beq.n	8016dc8 <usb_get_dev_data_by_cfg+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
 8016dbe:	1d03      	adds	r3, r0, #4
 8016dc0:	d003      	beq.n	8016dca <usb_get_dev_data_by_cfg+0x20>
	return node->next;
 8016dc2:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
 8016dc4:	2800      	cmp	r0, #0
 8016dc6:	d1f4      	bne.n	8016db2 <usb_get_dev_data_by_cfg+0x8>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
 8016dc8:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
 8016dca:	4618      	mov	r0, r3
 8016dcc:	e7f2      	b.n	8016db4 <usb_get_dev_data_by_cfg+0xa>

08016dce <usb_get_dev_data_by_iface>:
	return list->head;
 8016dce:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
 8016dd0:	b110      	cbz	r0, 8016dd8 <usb_get_dev_data_by_iface+0xa>
 8016dd2:	3804      	subs	r0, #4
 8016dd4:	e000      	b.n	8016dd8 <usb_get_dev_data_by_iface+0xa>
 8016dd6:	3804      	subs	r0, #4
 8016dd8:	b150      	cbz	r0, 8016df0 <usb_get_dev_data_by_iface+0x22>
		const struct device *dev = dev_data->dev;
 8016dda:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg = dev->config;
 8016ddc:	685b      	ldr	r3, [r3, #4]
		const struct usb_if_descriptor *if_desc =
 8016dde:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
 8016de0:	789b      	ldrb	r3, [r3, #2]
 8016de2:	428b      	cmp	r3, r1
 8016de4:	d004      	beq.n	8016df0 <usb_get_dev_data_by_iface+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
 8016de6:	1d03      	adds	r3, r0, #4
 8016de8:	d003      	beq.n	8016df2 <usb_get_dev_data_by_iface+0x24>
	return node->next;
 8016dea:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
 8016dec:	2800      	cmp	r0, #0
 8016dee:	d1f2      	bne.n	8016dd6 <usb_get_dev_data_by_iface+0x8>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
 8016df0:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
 8016df2:	4618      	mov	r0, r3
 8016df4:	e7f0      	b.n	8016dd8 <usb_get_dev_data_by_iface+0xa>

08016df6 <usb_get_dev_data_by_ep>:
	return list->head;
 8016df6:	6800      	ldr	r0, [r0, #0]

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
 8016df8:	b100      	cbz	r0, 8016dfc <usb_get_dev_data_by_ep+0x6>
 8016dfa:	3804      	subs	r0, #4
 8016dfc:	b1d0      	cbz	r0, 8016e34 <usb_get_dev_data_by_ep+0x3e>
{
 8016dfe:	b430      	push	{r4, r5}
 8016e00:	e005      	b.n	8016e0e <usb_get_dev_data_by_ep+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
 8016e02:	1d03      	adds	r3, r0, #4
 8016e04:	d012      	beq.n	8016e2c <usb_get_dev_data_by_ep+0x36>
	return node->next;
 8016e06:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
 8016e08:	b190      	cbz	r0, 8016e30 <usb_get_dev_data_by_ep+0x3a>
 8016e0a:	3804      	subs	r0, #4
 8016e0c:	b180      	cbz	r0, 8016e30 <usb_get_dev_data_by_ep+0x3a>
		const struct device *dev = dev_data->dev;
 8016e0e:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg = dev->config;
 8016e10:	685c      	ldr	r4, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
 8016e12:	6a25      	ldr	r5, [r4, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
 8016e14:	2300      	movs	r3, #0
 8016e16:	7f22      	ldrb	r2, [r4, #28]
 8016e18:	429a      	cmp	r2, r3
 8016e1a:	d9f2      	bls.n	8016e02 <usb_get_dev_data_by_ep+0xc>
			if (ep_data[i].ep_addr == ep) {
 8016e1c:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8016e20:	7912      	ldrb	r2, [r2, #4]
 8016e22:	428a      	cmp	r2, r1
 8016e24:	d004      	beq.n	8016e30 <usb_get_dev_data_by_ep+0x3a>
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
 8016e26:	3301      	adds	r3, #1
 8016e28:	b2db      	uxtb	r3, r3
 8016e2a:	e7f4      	b.n	8016e16 <usb_get_dev_data_by_ep+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
 8016e2c:	4618      	mov	r0, r3
 8016e2e:	e7ed      	b.n	8016e0c <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
 8016e30:	bc30      	pop	{r4, r5}
 8016e32:	4770      	bx	lr
 8016e34:	4770      	bx	lr

08016e36 <should_bail>:
	if (info->start_offset < data->area_off) {
 8016e36:	6800      	ldr	r0, [r0, #0]
 8016e38:	684b      	ldr	r3, [r1, #4]
 8016e3a:	4298      	cmp	r0, r3
 8016e3c:	d30c      	bcc.n	8016e58 <should_bail+0x22>
{
 8016e3e:	b410      	push	{r4}
	} else if (info->start_offset >= data->area_off + data->area_len) {
 8016e40:	688c      	ldr	r4, [r1, #8]
 8016e42:	4423      	add	r3, r4
 8016e44:	4298      	cmp	r0, r3
 8016e46:	d20a      	bcs.n	8016e5e <should_bail+0x28>
	} else if (data->ret_idx >= data->ret_len) {
 8016e48:	6908      	ldr	r0, [r1, #16]
 8016e4a:	694b      	ldr	r3, [r1, #20]
 8016e4c:	4298      	cmp	r0, r3
 8016e4e:	d20a      	bcs.n	8016e66 <should_bail+0x30>
	return false;
 8016e50:	2000      	movs	r0, #0
}
 8016e52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016e56:	4770      	bx	lr
		*bail_value = true;
 8016e58:	2001      	movs	r0, #1
 8016e5a:	7010      	strb	r0, [r2, #0]
}
 8016e5c:	4770      	bx	lr
		*bail_value = false;
 8016e5e:	2300      	movs	r3, #0
 8016e60:	7013      	strb	r3, [r2, #0]
		return true;
 8016e62:	2001      	movs	r0, #1
 8016e64:	e7f5      	b.n	8016e52 <should_bail+0x1c>
		data->status = -ENOMEM;
 8016e66:	f06f 030b 	mvn.w	r3, #11
 8016e6a:	618b      	str	r3, [r1, #24]
		*bail_value = false;
 8016e6c:	2300      	movs	r3, #0
 8016e6e:	7013      	strb	r3, [r2, #0]
		return true;
 8016e70:	2001      	movs	r0, #1
 8016e72:	e7ee      	b.n	8016e52 <should_bail+0x1c>

08016e74 <get_sectors_cb>:
{
 8016e74:	b570      	push	{r4, r5, r6, lr}
 8016e76:	b082      	sub	sp, #8
 8016e78:	4605      	mov	r5, r0
 8016e7a:	460c      	mov	r4, r1
	struct flash_sector *ret = data->ret;
 8016e7c:	68ce      	ldr	r6, [r1, #12]
	if (should_bail(info, data, &bail)) {
 8016e7e:	f10d 0207 	add.w	r2, sp, #7
 8016e82:	f7ff ffd8 	bl	8016e36 <should_bail>
 8016e86:	b980      	cbnz	r0, 8016eaa <get_sectors_cb+0x36>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
 8016e88:	682b      	ldr	r3, [r5, #0]
 8016e8a:	6861      	ldr	r1, [r4, #4]
 8016e8c:	6922      	ldr	r2, [r4, #16]
 8016e8e:	1a5b      	subs	r3, r3, r1
 8016e90:	f846 3032 	str.w	r3, [r6, r2, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
 8016e94:	6923      	ldr	r3, [r4, #16]
 8016e96:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
 8016e9a:	686b      	ldr	r3, [r5, #4]
 8016e9c:	6073      	str	r3, [r6, #4]
	data->ret_idx++;
 8016e9e:	6923      	ldr	r3, [r4, #16]
 8016ea0:	3301      	adds	r3, #1
 8016ea2:	6123      	str	r3, [r4, #16]
	return true;
 8016ea4:	2001      	movs	r0, #1
}
 8016ea6:	b002      	add	sp, #8
 8016ea8:	bd70      	pop	{r4, r5, r6, pc}
		return bail;
 8016eaa:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8016eae:	e7fa      	b.n	8016ea6 <get_sectors_cb+0x32>

08016eb0 <flash_area_layout>:
{
 8016eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016eb2:	460d      	mov	r5, r1
 8016eb4:	4617      	mov	r7, r2
 8016eb6:	461e      	mov	r6, r3
 8016eb8:	9c06      	ldr	r4, [sp, #24]
	cb_data->area_idx = idx;
 8016eba:	6020      	str	r0, [r4, #0]
	fa = get_flash_area_from_id(idx);
 8016ebc:	f7ef f9d0 	bl	8006260 <get_flash_area_from_id>
	if (fa == NULL) {
 8016ec0:	b1b8      	cbz	r0, 8016ef2 <flash_area_layout+0x42>
	cb_data->area_off = fa->fa_off;
 8016ec2:	6843      	ldr	r3, [r0, #4]
 8016ec4:	6063      	str	r3, [r4, #4]
	cb_data->area_len = fa->fa_size;
 8016ec6:	6883      	ldr	r3, [r0, #8]
 8016ec8:	60a3      	str	r3, [r4, #8]
	cb_data->ret = ret;
 8016eca:	60e7      	str	r7, [r4, #12]
	cb_data->ret_idx = 0U;
 8016ecc:	2200      	movs	r2, #0
 8016ece:	6122      	str	r2, [r4, #16]
	cb_data->ret_len = *cnt;
 8016ed0:	682b      	ldr	r3, [r5, #0]
 8016ed2:	6163      	str	r3, [r4, #20]
	cb_data->status = 0;
 8016ed4:	61a2      	str	r2, [r4, #24]
	flash_dev = device_get_binding(fa->fa_dev_name);
 8016ed6:	68c0      	ldr	r0, [r0, #12]
 8016ed8:	f7fc fb40 	bl	801355c <z_impl_device_get_binding>
	if (flash_dev == NULL) {
 8016edc:	b160      	cbz	r0, 8016ef8 <flash_area_layout+0x48>
	flash_page_foreach(flash_dev, cb, cb_data);
 8016ede:	4622      	mov	r2, r4
 8016ee0:	4631      	mov	r1, r6
 8016ee2:	f004 fae7 	bl	801b4b4 <flash_page_foreach>
	if (cb_data->status == 0) {
 8016ee6:	69a3      	ldr	r3, [r4, #24]
 8016ee8:	b90b      	cbnz	r3, 8016eee <flash_area_layout+0x3e>
		*cnt = cb_data->ret_idx;
 8016eea:	6923      	ldr	r3, [r4, #16]
 8016eec:	602b      	str	r3, [r5, #0]
	return cb_data->status;
 8016eee:	69a0      	ldr	r0, [r4, #24]
}
 8016ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
 8016ef2:	f06f 0015 	mvn.w	r0, #21
 8016ef6:	e7fb      	b.n	8016ef0 <flash_area_layout+0x40>
		return -ENODEV;
 8016ef8:	f06f 0012 	mvn.w	r0, #18
 8016efc:	e7f8      	b.n	8016ef0 <flash_area_layout+0x40>

08016efe <settings_delete>:
{
 8016efe:	b508      	push	{r3, lr}
	return settings_save_one(name, NULL, 0);
 8016f00:	2200      	movs	r2, #0
 8016f02:	4611      	mov	r1, r2
 8016f04:	f7ef f9e6 	bl	80062d4 <settings_save_one>
}
 8016f08:	bd08      	pop	{r3, pc}

08016f0a <settings_name_steq>:
{
 8016f0a:	b410      	push	{r4}
	if (next) {
 8016f0c:	4614      	mov	r4, r2
 8016f0e:	b10a      	cbz	r2, 8016f14 <settings_name_steq+0xa>
		*next = NULL;
 8016f10:	2300      	movs	r3, #0
 8016f12:	6013      	str	r3, [r2, #0]
	if ((!name) || (!key)) {
 8016f14:	b1d0      	cbz	r0, 8016f4c <settings_name_steq+0x42>
 8016f16:	b919      	cbnz	r1, 8016f20 <settings_name_steq+0x16>
		return 0;
 8016f18:	2000      	movs	r0, #0
 8016f1a:	e01a      	b.n	8016f52 <settings_name_steq+0x48>
		key++;
 8016f1c:	3101      	adds	r1, #1
		name++;
 8016f1e:	3001      	adds	r0, #1
	while ((*key != '\0') && (*key == *name) &&
 8016f20:	780a      	ldrb	r2, [r1, #0]
 8016f22:	b12a      	cbz	r2, 8016f30 <settings_name_steq+0x26>
 8016f24:	7803      	ldrb	r3, [r0, #0]
 8016f26:	429a      	cmp	r2, r3
 8016f28:	d102      	bne.n	8016f30 <settings_name_steq+0x26>
 8016f2a:	b10b      	cbz	r3, 8016f30 <settings_name_steq+0x26>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
 8016f2c:	2b3d      	cmp	r3, #61	; 0x3d
 8016f2e:	d1f5      	bne.n	8016f1c <settings_name_steq+0x12>
	if (*key != '\0') {
 8016f30:	b972      	cbnz	r2, 8016f50 <settings_name_steq+0x46>
	if (*name == SETTINGS_NAME_SEPARATOR) {
 8016f32:	7803      	ldrb	r3, [r0, #0]
 8016f34:	2b2f      	cmp	r3, #47	; 0x2f
 8016f36:	d004      	beq.n	8016f42 <settings_name_steq+0x38>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
 8016f38:	2b3d      	cmp	r3, #61	; 0x3d
 8016f3a:	d00d      	beq.n	8016f58 <settings_name_steq+0x4e>
 8016f3c:	b173      	cbz	r3, 8016f5c <settings_name_steq+0x52>
	return 0;
 8016f3e:	2000      	movs	r0, #0
 8016f40:	e007      	b.n	8016f52 <settings_name_steq+0x48>
		if (next) {
 8016f42:	b10c      	cbz	r4, 8016f48 <settings_name_steq+0x3e>
			*next = name + 1;
 8016f44:	3001      	adds	r0, #1
 8016f46:	6020      	str	r0, [r4, #0]
		return 1;
 8016f48:	2001      	movs	r0, #1
 8016f4a:	e002      	b.n	8016f52 <settings_name_steq+0x48>
		return 0;
 8016f4c:	2000      	movs	r0, #0
 8016f4e:	e000      	b.n	8016f52 <settings_name_steq+0x48>
		return 0;
 8016f50:	2000      	movs	r0, #0
}
 8016f52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016f56:	4770      	bx	lr
		return 1;
 8016f58:	2001      	movs	r0, #1
 8016f5a:	e7fa      	b.n	8016f52 <settings_name_steq+0x48>
 8016f5c:	2001      	movs	r0, #1
 8016f5e:	e7f8      	b.n	8016f52 <settings_name_steq+0x48>

08016f60 <settings_name_next>:
{
 8016f60:	b410      	push	{r4}
 8016f62:	4602      	mov	r2, r0
	if (next) {
 8016f64:	460c      	mov	r4, r1
 8016f66:	b109      	cbz	r1, 8016f6c <settings_name_next+0xc>
		*next = NULL;
 8016f68:	2300      	movs	r3, #0
 8016f6a:	600b      	str	r3, [r1, #0]
	if (!name) {
 8016f6c:	b19a      	cbz	r2, 8016f96 <settings_name_next+0x36>
	int rc = 0;
 8016f6e:	2000      	movs	r0, #0
 8016f70:	e001      	b.n	8016f76 <settings_name_next+0x16>
		rc++;
 8016f72:	3001      	adds	r0, #1
		name++;
 8016f74:	3201      	adds	r2, #1
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
 8016f76:	7813      	ldrb	r3, [r2, #0]
 8016f78:	b11b      	cbz	r3, 8016f82 <settings_name_next+0x22>
 8016f7a:	2b3d      	cmp	r3, #61	; 0x3d
 8016f7c:	d001      	beq.n	8016f82 <settings_name_next+0x22>
 8016f7e:	2b2f      	cmp	r3, #47	; 0x2f
 8016f80:	d1f7      	bne.n	8016f72 <settings_name_next+0x12>
	if (*name == SETTINGS_NAME_SEPARATOR) {
 8016f82:	2b2f      	cmp	r3, #47	; 0x2f
 8016f84:	d002      	beq.n	8016f8c <settings_name_next+0x2c>
}
 8016f86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016f8a:	4770      	bx	lr
		if (next) {
 8016f8c:	2c00      	cmp	r4, #0
 8016f8e:	d0fa      	beq.n	8016f86 <settings_name_next+0x26>
			*next = name + 1;
 8016f90:	3201      	adds	r2, #1
 8016f92:	6022      	str	r2, [r4, #0]
		return rc;
 8016f94:	e7f7      	b.n	8016f86 <settings_name_next+0x26>
		return 0;
 8016f96:	2000      	movs	r0, #0
 8016f98:	e7f5      	b.n	8016f86 <settings_name_next+0x26>

08016f9a <settings_nvs_read_fn>:
{
 8016f9a:	b510      	push	{r4, lr}
 8016f9c:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
 8016f9e:	4613      	mov	r3, r2
 8016fa0:	460a      	mov	r2, r1
 8016fa2:	8881      	ldrh	r1, [r0, #4]
 8016fa4:	6800      	ldr	r0, [r0, #0]
 8016fa6:	f7ff fe3f 	bl	8016c28 <nvs_read>
 8016faa:	4603      	mov	r3, r0
	if (rc > (ssize_t)len) {
 8016fac:	4620      	mov	r0, r4
 8016fae:	429c      	cmp	r4, r3
 8016fb0:	db00      	blt.n	8016fb4 <settings_nvs_read_fn+0x1a>
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
 8016fb2:	4618      	mov	r0, r3
}
 8016fb4:	bd10      	pop	{r4, pc}

08016fb6 <settings_nvs_save>:
{
 8016fb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fba:	b097      	sub	sp, #92	; 0x5c
 8016fbc:	9300      	str	r3, [sp, #0]
	if (!name) {
 8016fbe:	2900      	cmp	r1, #0
 8016fc0:	f000 808f 	beq.w	80170e2 <settings_nvs_save+0x12c>
 8016fc4:	4606      	mov	r6, r0
 8016fc6:	4692      	mov	sl, r2
 8016fc8:	468b      	mov	fp, r1
	delete = ((value == NULL) || (val_len == 0));
 8016fca:	b13a      	cbz	r2, 8016fdc <settings_nvs_save+0x26>
 8016fcc:	b943      	cbnz	r3, 8016fe0 <settings_nvs_save+0x2a>
 8016fce:	2701      	movs	r7, #1
	name_id = cf->last_name_id + 1;
 8016fd0:	f9b6 5038 	ldrsh.w	r5, [r6, #56]	; 0x38
 8016fd4:	3501      	adds	r5, #1
 8016fd6:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
 8016fd8:	9501      	str	r5, [sp, #4]
 8016fda:	e007      	b.n	8016fec <settings_nvs_save+0x36>
	delete = ((value == NULL) || (val_len == 0));
 8016fdc:	2701      	movs	r7, #1
 8016fde:	e7f7      	b.n	8016fd0 <settings_nvs_save+0x1a>
 8016fe0:	2700      	movs	r7, #0
 8016fe2:	e7f5      	b.n	8016fd0 <settings_nvs_save+0x1a>
			if (rc == -ENOENT) {
 8016fe4:	f110 0f02 	cmn.w	r0, #2
 8016fe8:	d03e      	beq.n	8017068 <settings_nvs_save+0xb2>
	delete = ((value == NULL) || (val_len == 0));
 8016fea:	4625      	mov	r5, r4
		name_id--;
 8016fec:	1e6c      	subs	r4, r5, #1
 8016fee:	b2a4      	uxth	r4, r4
		if (name_id == NVS_NAMECNT_ID) {
 8016ff0:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8016ff4:	d05a      	beq.n	80170ac <settings_nvs_save+0xf6>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
 8016ff6:	f106 0908 	add.w	r9, r6, #8
 8016ffa:	234a      	movs	r3, #74	; 0x4a
 8016ffc:	aa03      	add	r2, sp, #12
 8016ffe:	4621      	mov	r1, r4
 8017000:	4648      	mov	r0, r9
 8017002:	f7ff fe11 	bl	8016c28 <nvs_read>
		if (rc < 0) {
 8017006:	2800      	cmp	r0, #0
 8017008:	dbec      	blt.n	8016fe4 <settings_nvs_save+0x2e>
		rdname[rc] = '\0';
 801700a:	ab16      	add	r3, sp, #88	; 0x58
 801700c:	4418      	add	r0, r3
 801700e:	2300      	movs	r3, #0
 8017010:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
 8017014:	a903      	add	r1, sp, #12
 8017016:	4658      	mov	r0, fp
 8017018:	f000 fef2 	bl	8017e00 <strcmp>
 801701c:	4680      	mov	r8, r0
 801701e:	2800      	cmp	r0, #0
 8017020:	d1e3      	bne.n	8016fea <settings_nvs_save+0x34>
		if ((delete) && (name_id == cf->last_name_id)) {
 8017022:	b117      	cbz	r7, 801702a <settings_nvs_save+0x74>
 8017024:	8f33      	ldrh	r3, [r6, #56]	; 0x38
 8017026:	42a3      	cmp	r3, r4
 8017028:	d020      	beq.n	801706c <settings_nvs_save+0xb6>
		if (delete) {
 801702a:	bb6f      	cbnz	r7, 8017088 <settings_nvs_save+0xd2>
		write_name = false;
 801702c:	463d      	mov	r5, r7
	if (delete) {
 801702e:	2f00      	cmp	r7, #0
 8017030:	d15a      	bne.n	80170e8 <settings_nvs_save+0x132>
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
 8017032:	f5b4 4f40 	cmp.w	r4, #49152	; 0xc000
 8017036:	d05a      	beq.n	80170ee <settings_nvs_save+0x138>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
 8017038:	f106 0708 	add.w	r7, r6, #8
 801703c:	f504 4180 	add.w	r1, r4, #16384	; 0x4000
 8017040:	9b00      	ldr	r3, [sp, #0]
 8017042:	4652      	mov	r2, sl
 8017044:	b289      	uxth	r1, r1
 8017046:	4638      	mov	r0, r7
 8017048:	f7ed fef2 	bl	8004e30 <nvs_write>
 801704c:	4680      	mov	r8, r0
	if (write_name) {
 801704e:	bb85      	cbnz	r5, 80170b2 <settings_nvs_save+0xfc>
	if (write_name_id > cf->last_name_id) {
 8017050:	8f33      	ldrh	r3, [r6, #56]	; 0x38
 8017052:	42a3      	cmp	r3, r4
 8017054:	d33a      	bcc.n	80170cc <settings_nvs_save+0x116>
	if (rc < 0) {
 8017056:	f1b8 0f00 	cmp.w	r8, #0
 801705a:	db01      	blt.n	8017060 <settings_nvs_save+0xaa>
	return 0;
 801705c:	f04f 0800 	mov.w	r8, #0
}
 8017060:	4640      	mov	r0, r8
 8017062:	b017      	add	sp, #92	; 0x5c
 8017064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				write_name_id = name_id;
 8017068:	9401      	str	r4, [sp, #4]
			continue;
 801706a:	e7be      	b.n	8016fea <settings_nvs_save+0x34>
			cf->last_name_id--;
 801706c:	3b01      	subs	r3, #1
 801706e:	4632      	mov	r2, r6
 8017070:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
 8017074:	2302      	movs	r3, #2
 8017076:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801707a:	4648      	mov	r0, r9
 801707c:	f7ed fed8 	bl	8004e30 <nvs_write>
			if (rc < 0) {
 8017080:	2800      	cmp	r0, #0
 8017082:	dad2      	bge.n	801702a <settings_nvs_save+0x74>
				return rc;
 8017084:	4680      	mov	r8, r0
 8017086:	e7eb      	b.n	8017060 <settings_nvs_save+0xaa>
			rc = nvs_delete(&cf->cf_nvs, name_id);
 8017088:	4621      	mov	r1, r4
 801708a:	4648      	mov	r0, r9
 801708c:	f7ff fdc6 	bl	8016c1c <nvs_delete>
			if (rc >= 0) {
 8017090:	2800      	cmp	r0, #0
 8017092:	da03      	bge.n	801709c <settings_nvs_save+0xe6>
			if (rc < 0) {
 8017094:	2800      	cmp	r0, #0
 8017096:	dae3      	bge.n	8017060 <settings_nvs_save+0xaa>
				return rc;
 8017098:	4680      	mov	r8, r0
 801709a:	e7e1      	b.n	8017060 <settings_nvs_save+0xaa>
				rc = nvs_delete(&cf->cf_nvs, name_id +
 801709c:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
 80170a0:	313f      	adds	r1, #63	; 0x3f
 80170a2:	b289      	uxth	r1, r1
 80170a4:	4648      	mov	r0, r9
 80170a6:	f7ff fdb9 	bl	8016c1c <nvs_delete>
 80170aa:	e7f3      	b.n	8017094 <settings_nvs_save+0xde>
 80170ac:	9c01      	ldr	r4, [sp, #4]
	write_name = true;
 80170ae:	2501      	movs	r5, #1
 80170b0:	e7bd      	b.n	801702e <settings_nvs_save+0x78>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
 80170b2:	4658      	mov	r0, fp
 80170b4:	f000 fe9c 	bl	8017df0 <strlen>
 80170b8:	4603      	mov	r3, r0
 80170ba:	465a      	mov	r2, fp
 80170bc:	4621      	mov	r1, r4
 80170be:	4638      	mov	r0, r7
 80170c0:	f7ed feb6 	bl	8004e30 <nvs_write>
		if (rc < 0) {
 80170c4:	f1b0 0800 	subs.w	r8, r0, #0
 80170c8:	dac2      	bge.n	8017050 <settings_nvs_save+0x9a>
 80170ca:	e7c9      	b.n	8017060 <settings_nvs_save+0xaa>
		cf->last_name_id = write_name_id;
 80170cc:	4632      	mov	r2, r6
 80170ce:	f822 4f38 	strh.w	r4, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
 80170d2:	2302      	movs	r3, #2
 80170d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80170d8:	4638      	mov	r0, r7
 80170da:	f7ed fea9 	bl	8004e30 <nvs_write>
 80170de:	4680      	mov	r8, r0
 80170e0:	e7b9      	b.n	8017056 <settings_nvs_save+0xa0>
		return -EINVAL;
 80170e2:	f06f 0815 	mvn.w	r8, #21
 80170e6:	e7bb      	b.n	8017060 <settings_nvs_save+0xaa>
		return 0;
 80170e8:	f04f 0800 	mov.w	r8, #0
 80170ec:	e7b8      	b.n	8017060 <settings_nvs_save+0xaa>
		return -ENOMEM;
 80170ee:	f06f 080b 	mvn.w	r8, #11
 80170f2:	e7b5      	b.n	8017060 <settings_nvs_save+0xaa>

080170f4 <settings_nvs_backend_init>:
{
 80170f4:	b570      	push	{r4, r5, r6, lr}
 80170f6:	b082      	sub	sp, #8
 80170f8:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
 80170fa:	f100 0508 	add.w	r5, r0, #8
 80170fe:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8017100:	4628      	mov	r0, r5
 8017102:	f7ed fd9d 	bl	8004c40 <nvs_init>
	if (rc) {
 8017106:	4606      	mov	r6, r0
 8017108:	b110      	cbz	r0, 8017110 <settings_nvs_backend_init+0x1c>
}
 801710a:	4630      	mov	r0, r6
 801710c:	b002      	add	sp, #8
 801710e:	bd70      	pop	{r4, r5, r6, pc}
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
 8017110:	2302      	movs	r3, #2
 8017112:	f10d 0206 	add.w	r2, sp, #6
 8017116:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801711a:	4628      	mov	r0, r5
 801711c:	f7ff fd84 	bl	8016c28 <nvs_read>
	if (rc < 0) {
 8017120:	2800      	cmp	r0, #0
 8017122:	db03      	blt.n	801712c <settings_nvs_backend_init+0x38>
		cf->last_name_id = last_name_id;
 8017124:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017128:	8723      	strh	r3, [r4, #56]	; 0x38
 801712a:	e7ee      	b.n	801710a <settings_nvs_backend_init+0x16>
		cf->last_name_id = NVS_NAMECNT_ID;
 801712c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017130:	8723      	strh	r3, [r4, #56]	; 0x38
 8017132:	e7ea      	b.n	801710a <settings_nvs_backend_init+0x16>

08017134 <__stm32_exti_isr_0>:
{
 8017134:	b508      	push	{r3, lr}
 8017136:	4602      	mov	r2, r0
	__stm32_exti_isr(0, 1, arg);
 8017138:	2101      	movs	r1, #1
 801713a:	2000      	movs	r0, #0
 801713c:	f7ef fba0 	bl	8006880 <__stm32_exti_isr>
}
 8017140:	bd08      	pop	{r3, pc}

08017142 <__stm32_exti_isr_1>:
{
 8017142:	b508      	push	{r3, lr}
 8017144:	4602      	mov	r2, r0
	__stm32_exti_isr(1, 2, arg);
 8017146:	2102      	movs	r1, #2
 8017148:	2001      	movs	r0, #1
 801714a:	f7ef fb99 	bl	8006880 <__stm32_exti_isr>
}
 801714e:	bd08      	pop	{r3, pc}

08017150 <__stm32_exti_isr_2>:
{
 8017150:	b508      	push	{r3, lr}
 8017152:	4602      	mov	r2, r0
	__stm32_exti_isr(2, 3, arg);
 8017154:	2103      	movs	r1, #3
 8017156:	2002      	movs	r0, #2
 8017158:	f7ef fb92 	bl	8006880 <__stm32_exti_isr>
}
 801715c:	bd08      	pop	{r3, pc}

0801715e <__stm32_exti_isr_3>:
{
 801715e:	b508      	push	{r3, lr}
 8017160:	4602      	mov	r2, r0
	__stm32_exti_isr(3, 4, arg);
 8017162:	2104      	movs	r1, #4
 8017164:	2003      	movs	r0, #3
 8017166:	f7ef fb8b 	bl	8006880 <__stm32_exti_isr>
}
 801716a:	bd08      	pop	{r3, pc}

0801716c <__stm32_exti_isr_4>:
{
 801716c:	b508      	push	{r3, lr}
 801716e:	4602      	mov	r2, r0
	__stm32_exti_isr(4, 5, arg);
 8017170:	2105      	movs	r1, #5
 8017172:	2004      	movs	r0, #4
 8017174:	f7ef fb84 	bl	8006880 <__stm32_exti_isr>
}
 8017178:	bd08      	pop	{r3, pc}

0801717a <__stm32_exti_isr_9_5>:
{
 801717a:	b508      	push	{r3, lr}
 801717c:	4602      	mov	r2, r0
	__stm32_exti_isr(5, 10, arg);
 801717e:	210a      	movs	r1, #10
 8017180:	2005      	movs	r0, #5
 8017182:	f7ef fb7d 	bl	8006880 <__stm32_exti_isr>
}
 8017186:	bd08      	pop	{r3, pc}

08017188 <__stm32_exti_isr_15_10>:
{
 8017188:	b508      	push	{r3, lr}
 801718a:	4602      	mov	r2, r0
	__stm32_exti_isr(10, 16, arg);
 801718c:	2110      	movs	r1, #16
 801718e:	200a      	movs	r0, #10
 8017190:	f7ef fb76 	bl	8006880 <__stm32_exti_isr>
}
 8017194:	bd08      	pop	{r3, pc}

08017196 <__stm32_exti_connect_irqs>:

/**
 * @brief connect all interrupts
 */
static void __stm32_exti_connect_irqs(const struct device *dev)
{
 8017196:	b508      	push	{r3, lr}
	defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32L5X) || \
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X)
	IRQ_CONNECT(EXTI0_IRQn,
 8017198:	2200      	movs	r2, #0
 801719a:	4611      	mov	r1, r2
 801719c:	2006      	movs	r0, #6
 801719e:	f7f1 fdf5 	bl	8008d8c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 80171a2:	2200      	movs	r2, #0
 80171a4:	4611      	mov	r1, r2
 80171a6:	2007      	movs	r0, #7
 80171a8:	f7f1 fdf0 	bl	8008d8c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI1_IRQ_PRI,
		__stm32_exti_isr_1, DEVICE_GET(exti_stm32),
		0);
#ifdef CONFIG_SOC_SERIES_STM32F3X
	IRQ_CONNECT(EXTI2_TSC_IRQn,
 80171ac:	2200      	movs	r2, #0
 80171ae:	4611      	mov	r1, r2
 80171b0:	2008      	movs	r0, #8
 80171b2:	f7f1 fdeb 	bl	8008d8c <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 80171b6:	2200      	movs	r2, #0
 80171b8:	4611      	mov	r1, r2
 80171ba:	2009      	movs	r0, #9
 80171bc:	f7f1 fde6 	bl	8008d8c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 80171c0:	2200      	movs	r2, #0
 80171c2:	4611      	mov	r1, r2
 80171c4:	200a      	movs	r0, #10
 80171c6:	f7f1 fde1 	bl	8008d8c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI4_IRQ_PRI,
		__stm32_exti_isr_4, DEVICE_GET(exti_stm32),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 80171ca:	2200      	movs	r2, #0
 80171cc:	4611      	mov	r1, r2
 80171ce:	2017      	movs	r0, #23
 80171d0:	f7f1 fddc 	bl	8008d8c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 80171d4:	2200      	movs	r2, #0
 80171d6:	4611      	mov	r1, r2
 80171d8:	2028      	movs	r0, #40	; 0x28
 80171da:	f7f1 fdd7 	bl	8008d8c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_LPTIM1_IRQ_PRI,
		__stm32_exti_isr_23, DEVICE_GET(exti_stm32),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F7X */
#endif
}
 80171de:	bd08      	pop	{r3, pc}

080171e0 <stm32_exti_init>:
{
 80171e0:	b508      	push	{r3, lr}
	__stm32_exti_connect_irqs(dev);
 80171e2:	f7ff ffd8 	bl	8017196 <__stm32_exti_connect_irqs>
}
 80171e6:	2000      	movs	r0, #0
 80171e8:	bd08      	pop	{r3, pc}

080171ea <config_bus_clk_init>:
	clk_init->AHBCLKDivider = ahb_prescaler(
 80171ea:	2300      	movs	r3, #0
 80171ec:	6003      	str	r3, [r0, #0]
	clk_init->APB1CLKDivider = apb1_prescaler(
 80171ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80171f2:	6042      	str	r2, [r0, #4]
	clk_init->APB2CLKDivider = apb2_prescaler(
 80171f4:	6083      	str	r3, [r0, #8]
}
 80171f6:	4770      	bx	lr

080171f8 <get_bus_clock>:
}
 80171f8:	fbb0 f0f1 	udiv	r0, r0, r1
 80171fc:	4770      	bx	lr

080171fe <config_pll_init>:
	pllinit->PLLMul = ((CONFIG_CLOCK_STM32_PLL_MULTIPLIER - 2)
 80171fe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8017202:	6003      	str	r3, [r0, #0]
	pllinit->Prediv = CONFIG_CLOCK_STM32_PLL_PREDIV - 1;
 8017204:	2300      	movs	r3, #0
 8017206:	6043      	str	r3, [r0, #4]
}
 8017208:	4770      	bx	lr

0801720a <LL_RCC_MSI_Disable>:
 * @brief Function kept for driver genericity
 */
void LL_RCC_MSI_Disable(void)
{
	/* Do nothing */
}
 801720a:	4770      	bx	lr

0801720c <stm32_pin_configure>:
{
 801720c:	b510      	push	{r4, lr}
 801720e:	4613      	mov	r3, r2
	uint32_t offset = STM32_PORT(pin) * GPIO_REG_SIZE;
 8017210:	1104      	asrs	r4, r0, #4
 8017212:	02a4      	lsls	r4, r4, #10
	return gpio_stm32_configure((uint32_t *)port_base,
 8017214:	460a      	mov	r2, r1
 8017216:	f000 010f 	and.w	r1, r0, #15
 801721a:	f104 4090 	add.w	r0, r4, #1207959552	; 0x48000000
 801721e:	f004 f82d 	bl	801b27c <gpio_stm32_configure>
}
 8017222:	bd10      	pop	{r4, pc}

08017224 <z_pinmux_stm32_set>:
{
 8017224:	b538      	push	{r3, r4, r5, lr}
 8017226:	4604      	mov	r4, r0
 8017228:	460d      	mov	r5, r1
	if (enable_port(STM32_PORT(pin), clk)) {
 801722a:	4611      	mov	r1, r2
 801722c:	0900      	lsrs	r0, r0, #4
 801722e:	f7ef fc89 	bl	8006b44 <enable_port>
 8017232:	b930      	cbnz	r0, 8017242 <z_pinmux_stm32_set+0x1e>
	return stm32_pin_configure(pin, func, func & STM32_AFR_MASK);
 8017234:	f005 020f 	and.w	r2, r5, #15
 8017238:	4629      	mov	r1, r5
 801723a:	4620      	mov	r0, r4
 801723c:	f7ff ffe6 	bl	801720c <stm32_pin_configure>
}
 8017240:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
 8017242:	f06f 0004 	mvn.w	r0, #4
 8017246:	e7fb      	b.n	8017240 <z_pinmux_stm32_set+0x1c>

08017248 <usb_dc_ep_set_callback>:
{
 8017248:	b510      	push	{r4, lr}
 801724a:	460c      	mov	r4, r1
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 801724c:	f7ef fcb2 	bl	8006bb4 <usb_dc_stm32_get_ep_state>
	if (!ep_state) {
 8017250:	b110      	cbz	r0, 8017258 <usb_dc_ep_set_callback+0x10>
	ep_state->cb = cb;
 8017252:	6084      	str	r4, [r0, #8]
	return 0;
 8017254:	2000      	movs	r0, #0
}
 8017256:	bd10      	pop	{r4, pc}
		return -EINVAL;
 8017258:	f06f 0015 	mvn.w	r0, #21
 801725c:	e7fb      	b.n	8017256 <usb_dc_ep_set_callback+0xe>

0801725e <usb_dc_ep_is_stalled>:
{
 801725e:	b510      	push	{r4, lr}
 8017260:	460c      	mov	r4, r1
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 8017262:	f7ef fca7 	bl	8006bb4 <usb_dc_stm32_get_ep_state>
	if (!ep_state || !stalled) {
 8017266:	b120      	cbz	r0, 8017272 <usb_dc_ep_is_stalled+0x14>
 8017268:	b134      	cbz	r4, 8017278 <usb_dc_ep_is_stalled+0x1a>
	*stalled = ep_state->ep_stalled;
 801726a:	7943      	ldrb	r3, [r0, #5]
 801726c:	7023      	strb	r3, [r4, #0]
	return 0;
 801726e:	2000      	movs	r0, #0
}
 8017270:	bd10      	pop	{r4, pc}
		return -EINVAL;
 8017272:	f06f 0015 	mvn.w	r0, #21
 8017276:	e7fb      	b.n	8017270 <usb_dc_ep_is_stalled+0x12>
 8017278:	f06f 0015 	mvn.w	r0, #21
 801727c:	e7f8      	b.n	8017270 <usb_dc_ep_is_stalled+0x12>

0801727e <usb_dc_ep_read>:
{
 801727e:	b510      	push	{r4, lr}
 8017280:	4604      	mov	r4, r0
	if (usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes) != 0) {
 8017282:	f7f0 f811 	bl	80072a8 <usb_dc_ep_read_wait>
 8017286:	b920      	cbnz	r0, 8017292 <usb_dc_ep_read+0x14>
	if (usb_dc_ep_read_continue(ep) != 0) {
 8017288:	4620      	mov	r0, r4
 801728a:	f7f0 f889 	bl	80073a0 <usb_dc_ep_read_continue>
 801728e:	b918      	cbnz	r0, 8017298 <usb_dc_ep_read+0x1a>
}
 8017290:	bd10      	pop	{r4, pc}
		return -EINVAL;
 8017292:	f06f 0015 	mvn.w	r0, #21
 8017296:	e7fb      	b.n	8017290 <usb_dc_ep_read+0x12>
		return -EINVAL;
 8017298:	f06f 0015 	mvn.w	r0, #21
 801729c:	e7f8      	b.n	8017290 <usb_dc_ep_read+0x12>

0801729e <usb_dc_ep_mps>:
{
 801729e:	b508      	push	{r3, lr}
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 80172a0:	f7ef fc88 	bl	8006bb4 <usb_dc_stm32_get_ep_state>
	if (!ep_state) {
 80172a4:	b108      	cbz	r0, 80172aa <usb_dc_ep_mps+0xc>
	return ep_state->ep_mps;
 80172a6:	8800      	ldrh	r0, [r0, #0]
}
 80172a8:	bd08      	pop	{r3, pc}
		return -EINVAL;
 80172aa:	f06f 0015 	mvn.w	r0, #21
 80172ae:	e7fb      	b.n	80172a8 <usb_dc_ep_mps+0xa>

080172b0 <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80172b0:	b538      	push	{r3, r4, r5, lr}
	uint8_t ep_idx = USB_EP_GET_IDX(epnum);
 80172b2:	f001 057f 	and.w	r5, r1, #127	; 0x7f
	uint8_t ep = ep_idx | USB_EP_DIR_OUT;
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 80172b6:	4628      	mov	r0, r5
 80172b8:	f7ef fc7c 	bl	8006bb4 <usb_dc_stm32_get_ep_state>
 80172bc:	4604      	mov	r4, r0
		HAL_PCD_EP_GetRxCount(&usb_dc_stm32_state.pcd, epnum));

	/* Transaction complete, data is now stored in the buffer and ready
	 * for the upper stack (usb_dc_ep_read to retrieve).
	 */
	usb_dc_ep_get_read_count(ep, &ep_state->read_count);
 80172be:	f100 010c 	add.w	r1, r0, #12
 80172c2:	4628      	mov	r0, r5
 80172c4:	f7ef fde2 	bl	8006e8c <usb_dc_ep_get_read_count>
	ep_state->read_offset = 0U;
 80172c8:	2300      	movs	r3, #0
 80172ca:	6123      	str	r3, [r4, #16]

	if (ep_state->cb) {
 80172cc:	68a3      	ldr	r3, [r4, #8]
 80172ce:	b113      	cbz	r3, 80172d6 <HAL_PCD_DataOutStageCallback+0x26>
		ep_state->cb(ep, USB_DC_EP_DATA_OUT);
 80172d0:	2101      	movs	r1, #1
 80172d2:	4628      	mov	r0, r5
 80172d4:	4798      	blx	r3
	}
}
 80172d6:	bd38      	pop	{r3, r4, r5, pc}

080172d8 <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80172d8:	b538      	push	{r3, r4, r5, lr}
	uint8_t ep_idx = USB_EP_GET_IDX(epnum);
	uint8_t ep = ep_idx | USB_EP_DIR_IN;
 80172da:	f041 0580 	orr.w	r5, r1, #128	; 0x80
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 80172de:	4628      	mov	r0, r5
 80172e0:	f7ef fc68 	bl	8006bb4 <usb_dc_stm32_get_ep_state>
 80172e4:	4604      	mov	r4, r0

	LOG_DBG("epnum 0x%02x", epnum);

	__ASSERT(ep_state, "No corresponding ep_state for ep");

	k_sem_give(&ep_state->write_sem);
 80172e6:	3014      	adds	r0, #20
	z_impl_k_sem_give(sem);
 80172e8:	f7fd f8a2 	bl	8014430 <z_impl_k_sem_give>

	if (ep_state->cb) {
 80172ec:	68a3      	ldr	r3, [r4, #8]
 80172ee:	b113      	cbz	r3, 80172f6 <HAL_PCD_DataInStageCallback+0x1e>
		ep_state->cb(ep, USB_DC_EP_DATA_IN);
 80172f0:	2102      	movs	r1, #2
 80172f2:	4628      	mov	r0, r5
 80172f4:	4798      	blx	r3
	}
}
 80172f6:	bd38      	pop	{r3, r4, r5, pc}

080172f8 <flash_stm32_check_status>:
	if (FLASH_STM32_REGS(dev)->SR & error) {
 80172f8:	68c3      	ldr	r3, [r0, #12]
 80172fa:	681b      	ldr	r3, [r3, #0]
 80172fc:	68db      	ldr	r3, [r3, #12]
 80172fe:	f013 0f14 	tst.w	r3, #20
 8017302:	d101      	bne.n	8017308 <flash_stm32_check_status+0x10>
	return 0;
 8017304:	2000      	movs	r0, #0
 8017306:	4770      	bx	lr
		return -EIO;
 8017308:	f06f 0004 	mvn.w	r0, #4
}
 801730c:	4770      	bx	lr

0801730e <get_page>:
	return offset / FLASH_PAGE_SIZE;
 801730e:	2800      	cmp	r0, #0
 8017310:	db01      	blt.n	8017316 <get_page+0x8>
}
 8017312:	12c0      	asrs	r0, r0, #11
 8017314:	4770      	bx	lr
	return offset / FLASH_PAGE_SIZE;
 8017316:	f200 70ff 	addw	r0, r0, #2047	; 0x7ff
 801731a:	e7fa      	b.n	8017312 <get_page+0x4>

0801731c <is_flash_locked>:
	return !!(regs->CR & FLASH_CR_LOCK);
 801731c:	6900      	ldr	r0, [r0, #16]
}
 801731e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8017322:	4770      	bx	lr

08017324 <write_enable>:
	regs->CR |= FLASH_CR_PG;
 8017324:	6903      	ldr	r3, [r0, #16]
 8017326:	f043 0301 	orr.w	r3, r3, #1
 801732a:	6103      	str	r3, [r0, #16]
}
 801732c:	4770      	bx	lr

0801732e <write_disable>:
	regs->CR &= (~FLASH_CR_PG);
 801732e:	6903      	ldr	r3, [r0, #16]
 8017330:	f023 0301 	bic.w	r3, r3, #1
 8017334:	6103      	str	r3, [r0, #16]
}
 8017336:	4770      	bx	lr

08017338 <erase_page_begin>:
	regs->CR |= FLASH_CR_PER;
 8017338:	6903      	ldr	r3, [r0, #16]
 801733a:	f043 0302 	orr.w	r3, r3, #2
 801733e:	6103      	str	r3, [r0, #16]
	regs->AR = CONFIG_FLASH_BASE_ADDRESS + page * FLASH_PAGE_SIZE;
 8017340:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 8017344:	02c9      	lsls	r1, r1, #11
 8017346:	6141      	str	r1, [r0, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8017348:	f3bf 8f4f 	dsb	sy
	regs->CR |= FLASH_CR_STRT;
 801734c:	6903      	ldr	r3, [r0, #16]
 801734e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017352:	6103      	str	r3, [r0, #16]
}
 8017354:	4770      	bx	lr

08017356 <erase_page_end>:
	regs->CR &= ~FLASH_CR_PER;
 8017356:	6903      	ldr	r3, [r0, #16]
 8017358:	f023 0302 	bic.w	r3, r3, #2
 801735c:	6103      	str	r3, [r0, #16]
}
 801735e:	4770      	bx	lr

08017360 <flash_stm32_valid_range>:
{
 8017360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017362:	b085      	sub	sp, #20
 8017364:	4606      	mov	r6, r0
 8017366:	460c      	mov	r4, r1
 8017368:	4615      	mov	r5, r2
	return (!write || (offset % 2 == 0 && len % 2 == 0U)) &&
 801736a:	b12b      	cbz	r3, 8017378 <flash_stm32_valid_range+0x18>
 801736c:	f011 0f01 	tst.w	r1, #1
 8017370:	d119      	bne.n	80173a6 <flash_stm32_valid_range+0x46>
 8017372:	f012 0f01 	tst.w	r2, #1
 8017376:	d119      	bne.n	80173ac <flash_stm32_valid_range+0x4c>
 8017378:	aa01      	add	r2, sp, #4
 801737a:	4621      	mov	r1, r4
 801737c:	4630      	mov	r0, r6
 801737e:	f004 f893 	bl	801b4a8 <z_impl_flash_get_page_info_by_offs>
					    off_t offset,
					    uint32_t len)
{
	struct flash_pages_info info;

	return !(flash_get_page_info_by_offs(dev, offset, &info) ||
 8017382:	4607      	mov	r7, r0
 8017384:	b128      	cbz	r0, 8017392 <flash_stm32_valid_range+0x32>
 8017386:	2700      	movs	r7, #0
 8017388:	f017 0f01 	tst.w	r7, #1
 801738c:	d010      	beq.n	80173b0 <flash_stm32_valid_range+0x50>
 801738e:	2001      	movs	r0, #1
 8017390:	e00a      	b.n	80173a8 <flash_stm32_valid_range+0x48>
		 flash_get_page_info_by_offs(dev, offset + len - 1, &info));
 8017392:	1961      	adds	r1, r4, r5
 8017394:	3901      	subs	r1, #1
 8017396:	aa01      	add	r2, sp, #4
 8017398:	4630      	mov	r0, r6
 801739a:	f004 f885 	bl	801b4a8 <z_impl_flash_get_page_info_by_offs>
	return !(flash_get_page_info_by_offs(dev, offset, &info) ||
 801739e:	2800      	cmp	r0, #0
 80173a0:	d1f2      	bne.n	8017388 <flash_stm32_valid_range+0x28>
 80173a2:	2701      	movs	r7, #1
 80173a4:	e7f0      	b.n	8017388 <flash_stm32_valid_range+0x28>
 80173a6:	2000      	movs	r0, #0
}
 80173a8:	b005      	add	sp, #20
 80173aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (!write || (offset % 2 == 0 && len % 2 == 0U)) &&
 80173ac:	2000      	movs	r0, #0
 80173ae:	e7fb      	b.n	80173a8 <flash_stm32_valid_range+0x48>
 80173b0:	2000      	movs	r0, #0
 80173b2:	e7f9      	b.n	80173a8 <flash_stm32_valid_range+0x48>

080173b4 <flash_stm32_write_range>:
{
 80173b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173b8:	4680      	mov	r8, r0
 80173ba:	460f      	mov	r7, r1
 80173bc:	4616      	mov	r6, r2
 80173be:	461d      	mov	r5, r3
	int i, rc = 0;
 80173c0:	2000      	movs	r0, #0
	for (i = 0; i < len / sizeof(flash_prg_t); i++) {
 80173c2:	4604      	mov	r4, r0
 80173c4:	ebb4 0f55 	cmp.w	r4, r5, lsr #1
 80173c8:	d20a      	bcs.n	80173e0 <flash_stm32_write_range+0x2c>
		rc = write_value(dev, offset + i * sizeof(flash_prg_t),
 80173ca:	f836 2014 	ldrh.w	r2, [r6, r4, lsl #1]
 80173ce:	eb07 0144 	add.w	r1, r7, r4, lsl #1
 80173d2:	4640      	mov	r0, r8
 80173d4:	f7f0 fa1e 	bl	8007814 <write_value>
		if (rc < 0) {
 80173d8:	2800      	cmp	r0, #0
 80173da:	db01      	blt.n	80173e0 <flash_stm32_write_range+0x2c>
	for (i = 0; i < len / sizeof(flash_prg_t); i++) {
 80173dc:	3401      	adds	r4, #1
 80173de:	e7f1      	b.n	80173c4 <flash_stm32_write_range+0x10>
}
 80173e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080173e4 <h4_discard>:
	return uart_fifo_read(uart, buf, MIN(len, sizeof(buf)));
 80173e4:	460a      	mov	r2, r1
 80173e6:	2921      	cmp	r1, #33	; 0x21
 80173e8:	bf28      	it	cs
 80173ea:	2221      	movcs	r2, #33	; 0x21
	const struct uart_driver_api *api =
 80173ec:	6883      	ldr	r3, [r0, #8]
	if (api->fifo_read) {
 80173ee:	699b      	ldr	r3, [r3, #24]
 80173f0:	b133      	cbz	r3, 8017400 <h4_discard+0x1c>
{
 80173f2:	b500      	push	{lr}
 80173f4:	b08b      	sub	sp, #44	; 0x2c
		return api->fifo_read(dev, rx_data, size);
 80173f6:	a901      	add	r1, sp, #4
 80173f8:	4798      	blx	r3
}
 80173fa:	b00b      	add	sp, #44	; 0x2c
 80173fc:	f85d fb04 	ldr.w	pc, [sp], #4
	return 0;
 8017400:	2000      	movs	r0, #0
 8017402:	4770      	bx	lr

08017404 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
 8017404:	428b      	cmp	r3, r1
 8017406:	d901      	bls.n	801740c <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
 8017408:	2000      	movs	r0, #0
	}
}
 801740a:	4770      	bx	lr
{
 801740c:	b538      	push	{r3, r4, r5, lr}
 801740e:	4615      	mov	r5, r2
 8017410:	461c      	mov	r4, r3
		(void)memcpy(to, from, from_len);
 8017412:	461a      	mov	r2, r3
 8017414:	4629      	mov	r1, r5
 8017416:	f000 fd31 	bl	8017e7c <memcpy>
		return from_len;
 801741a:	4620      	mov	r0, r4
}
 801741c:	bd38      	pop	{r3, r4, r5, pc}

0801741e <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
 801741e:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
 8017420:	f000 fd51 	bl	8017ec6 <memset>
}
 8017424:	bd08      	pop	{r3, pc}

08017426 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
 8017426:	09c3      	lsrs	r3, r0, #7
 8017428:	005a      	lsls	r2, r3, #1
 801742a:	4413      	add	r3, r2
 801742c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8017430:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
 8017434:	b2c0      	uxtb	r0, r0
 8017436:	4770      	bx	lr

08017438 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
 8017438:	b410      	push	{r4}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
 801743a:	460b      	mov	r3, r1

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
 801743c:	f913 2b0f 	ldrsb.w	r2, [r3], #15
 8017440:	2a00      	cmp	r2, #0
 8017442:	db03      	blt.n	801744c <gf_double+0x14>
 8017444:	2400      	movs	r4, #0

	out += (TC_AES_BLOCK_SIZE - 1);
 8017446:	f100 020f 	add.w	r2, r0, #15
 801744a:	e004      	b.n	8017456 <gf_double+0x1e>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
 801744c:	2487      	movs	r4, #135	; 0x87
 801744e:	e7fa      	b.n	8017446 <gf_double+0xe>
	for (;;) {
		*out-- = (*x << 1) ^ carry;
		if (x == in) {
			break;
		}
		carry = *x-- >> 7;
 8017450:	f813 0901 	ldrb.w	r0, [r3], #-1
 8017454:	09c4      	lsrs	r4, r0, #7
		*out-- = (*x << 1) ^ carry;
 8017456:	7818      	ldrb	r0, [r3, #0]
 8017458:	ea84 0040 	eor.w	r0, r4, r0, lsl #1
 801745c:	f802 0901 	strb.w	r0, [r2], #-1
		if (x == in) {
 8017460:	428b      	cmp	r3, r1
 8017462:	d1f5      	bne.n	8017450 <gf_double+0x18>
	}
}
 8017464:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017468:	4770      	bx	lr

0801746a <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
 801746a:	b130      	cbz	r0, 801747a <tc_cmac_erase+0x10>
{
 801746c:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
 801746e:	2258      	movs	r2, #88	; 0x58
 8017470:	2100      	movs	r1, #0
 8017472:	f7ff ffd4 	bl	801741e <_set>

	return TC_CRYPTO_SUCCESS;
 8017476:	2001      	movs	r0, #1
}
 8017478:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
 801747a:	2000      	movs	r0, #0
}
 801747c:	4770      	bx	lr

0801747e <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
 801747e:	b1a0      	cbz	r0, 80174aa <tc_cmac_init+0x2c>
{
 8017480:	b510      	push	{r4, lr}
 8017482:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
 8017484:	2210      	movs	r2, #16
 8017486:	2100      	movs	r1, #0
 8017488:	f7ff ffc9 	bl	801741e <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
 801748c:	2210      	movs	r2, #16
 801748e:	2100      	movs	r1, #0
 8017490:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8017494:	f7ff ffc3 	bl	801741e <_set>
	s->leftover_offset = 0;
 8017498:	2300      	movs	r3, #0
 801749a:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
 801749c:	2200      	movs	r2, #0
 801749e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80174a2:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
 80174a6:	2001      	movs	r0, #1
}
 80174a8:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
 80174aa:	2000      	movs	r0, #0
}
 80174ac:	4770      	bx	lr

080174ae <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
 80174ae:	b338      	cbz	r0, 8017500 <tc_cmac_setup+0x52>
{
 80174b0:	b570      	push	{r4, r5, r6, lr}
 80174b2:	460d      	mov	r5, r1
 80174b4:	4616      	mov	r6, r2
 80174b6:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
 80174b8:	b321      	cbz	r1, 8017504 <tc_cmac_setup+0x56>
	_set(s, 0, sizeof(*s));
 80174ba:	2258      	movs	r2, #88	; 0x58
 80174bc:	2100      	movs	r1, #0
 80174be:	f7ff ffae 	bl	801741e <_set>
	s->sched = sched;
 80174c2:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
 80174c4:	4629      	mov	r1, r5
 80174c6:	4630      	mov	r0, r6
 80174c8:	f7f0 fee4 	bl	8008294 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
 80174cc:	2210      	movs	r2, #16
 80174ce:	2100      	movs	r1, #0
 80174d0:	4620      	mov	r0, r4
 80174d2:	f7ff ffa4 	bl	801741e <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
 80174d6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80174d8:	4621      	mov	r1, r4
 80174da:	4620      	mov	r0, r4
 80174dc:	f7f0 ff38 	bl	8008350 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
 80174e0:	f104 0510 	add.w	r5, r4, #16
 80174e4:	4621      	mov	r1, r4
 80174e6:	4628      	mov	r0, r5
 80174e8:	f7ff ffa6 	bl	8017438 <gf_double>
	gf_double (s->K2, s->K1);
 80174ec:	4629      	mov	r1, r5
 80174ee:	f104 0020 	add.w	r0, r4, #32
 80174f2:	f7ff ffa1 	bl	8017438 <gf_double>
	tc_cmac_init(s);
 80174f6:	4620      	mov	r0, r4
 80174f8:	f7ff ffc1 	bl	801747e <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
 80174fc:	2001      	movs	r0, #1
}
 80174fe:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
 8017500:	2000      	movs	r0, #0
}
 8017502:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 8017504:	2000      	movs	r0, #0
 8017506:	e7fa      	b.n	80174fe <tc_cmac_setup+0x50>

08017508 <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
 8017508:	2800      	cmp	r0, #0
 801750a:	d062      	beq.n	80175d2 <tc_cmac_update+0xca>
{
 801750c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017510:	460e      	mov	r6, r1
 8017512:	4617      	mov	r7, r2
 8017514:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
 8017516:	2a00      	cmp	r2, #0
 8017518:	d05d      	beq.n	80175d6 <tc_cmac_update+0xce>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
 801751a:	2900      	cmp	r1, #0
 801751c:	d05e      	beq.n	80175dc <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
 801751e:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
 8017522:	ea50 0301 	orrs.w	r3, r0, r1
 8017526:	d05b      	beq.n	80175e0 <tc_cmac_update+0xd8>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
 8017528:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
 801752c:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
 8017530:	6522      	str	r2, [r4, #80]	; 0x50
 8017532:	6563      	str	r3, [r4, #84]	; 0x54

	if (s->leftover_offset > 0) {
 8017534:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8017536:	b3a5      	cbz	r5, 80175a2 <tc_cmac_update+0x9a>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
 8017538:	f1c5 0810 	rsb	r8, r5, #16

		if (data_length < remaining_space) {
 801753c:	4547      	cmp	r7, r8
 801753e:	d30d      	bcc.n	801755c <tc_cmac_update+0x54>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
 8017540:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8017544:	4643      	mov	r3, r8
 8017546:	4632      	mov	r2, r6
 8017548:	4641      	mov	r1, r8
 801754a:	4420      	add	r0, r4
 801754c:	f7ff ff5a 	bl	8017404 <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
 8017550:	3d10      	subs	r5, #16
 8017552:	442f      	add	r7, r5
		data += remaining_space;
 8017554:	4446      	add	r6, r8
		s->leftover_offset = 0;
 8017556:	2300      	movs	r3, #0
 8017558:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
 801755a:	e013      	b.n	8017584 <tc_cmac_update+0x7c>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
 801755c:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8017560:	463b      	mov	r3, r7
 8017562:	4632      	mov	r2, r6
 8017564:	4639      	mov	r1, r7
 8017566:	4420      	add	r0, r4
 8017568:	f7ff ff4c 	bl	8017404 <_copy>
			s->leftover_offset += data_length;
 801756c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801756e:	443b      	add	r3, r7
 8017570:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
 8017572:	2001      	movs	r0, #1
 8017574:	e030      	b.n	80175d8 <tc_cmac_update+0xd0>
			s->iv[i] ^= s->leftover[i];
 8017576:	18e2      	adds	r2, r4, r3
 8017578:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 801757c:	5ce1      	ldrb	r1, [r4, r3]
 801757e:	404a      	eors	r2, r1
 8017580:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
 8017582:	3301      	adds	r3, #1
 8017584:	2b0f      	cmp	r3, #15
 8017586:	d9f6      	bls.n	8017576 <tc_cmac_update+0x6e>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
 8017588:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 801758a:	4621      	mov	r1, r4
 801758c:	4620      	mov	r0, r4
 801758e:	f7f0 fedf 	bl	8008350 <tc_aes_encrypt>
 8017592:	e006      	b.n	80175a2 <tc_cmac_update+0x9a>
	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
 8017594:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8017596:	4621      	mov	r1, r4
 8017598:	4620      	mov	r0, r4
 801759a:	f7f0 fed9 	bl	8008350 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
 801759e:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
 80175a0:	3f10      	subs	r7, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
 80175a2:	2f10      	cmp	r7, #16
 80175a4:	d908      	bls.n	80175b8 <tc_cmac_update+0xb0>
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
 80175a6:	2300      	movs	r3, #0
 80175a8:	2b0f      	cmp	r3, #15
 80175aa:	d8f3      	bhi.n	8017594 <tc_cmac_update+0x8c>
			s->iv[i] ^= data[i];
 80175ac:	5cf0      	ldrb	r0, [r6, r3]
 80175ae:	5ce5      	ldrb	r5, [r4, r3]
 80175b0:	4068      	eors	r0, r5
 80175b2:	54e0      	strb	r0, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
 80175b4:	3301      	adds	r3, #1
 80175b6:	e7f7      	b.n	80175a8 <tc_cmac_update+0xa0>
	}

	if (data_length > 0) {
 80175b8:	b90f      	cbnz	r7, 80175be <tc_cmac_update+0xb6>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
 80175ba:	2001      	movs	r0, #1
 80175bc:	e00c      	b.n	80175d8 <tc_cmac_update+0xd0>
		_copy(s->leftover, data_length, data, data_length);
 80175be:	463b      	mov	r3, r7
 80175c0:	4632      	mov	r2, r6
 80175c2:	4639      	mov	r1, r7
 80175c4:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80175c8:	f7ff ff1c 	bl	8017404 <_copy>
		s->leftover_offset = data_length;
 80175cc:	6467      	str	r7, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
 80175ce:	2001      	movs	r0, #1
 80175d0:	e002      	b.n	80175d8 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
 80175d2:	2000      	movs	r0, #0
}
 80175d4:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
 80175d6:	2001      	movs	r0, #1
}
 80175d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
 80175dc:	2000      	movs	r0, #0
 80175de:	e7fb      	b.n	80175d8 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
 80175e0:	2000      	movs	r0, #0
 80175e2:	e7f9      	b.n	80175d8 <tc_cmac_update+0xd0>

080175e4 <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
 80175e4:	b370      	cbz	r0, 8017644 <tc_cmac_final+0x60>
{
 80175e6:	b538      	push	{r3, r4, r5, lr}
 80175e8:	460c      	mov	r4, r1
 80175ea:	4605      	mov	r5, r0
	if (tag == (uint8_t *) 0 ||
 80175ec:	b361      	cbz	r1, 8017648 <tc_cmac_final+0x64>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
 80175ee:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 80175f0:	2a10      	cmp	r2, #16
 80175f2:	d10d      	bne.n	8017610 <tc_cmac_final+0x2c>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
 80175f4:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
 80175f6:	2300      	movs	r3, #0
 80175f8:	2b0f      	cmp	r3, #15
 80175fa:	d819      	bhi.n	8017630 <tc_cmac_final+0x4c>
		s->iv[i] ^= s->leftover[i] ^ k[i];
 80175fc:	18e2      	adds	r2, r4, r3
 80175fe:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8017602:	5cc8      	ldrb	r0, [r1, r3]
 8017604:	4050      	eors	r0, r2
 8017606:	5ce2      	ldrb	r2, [r4, r3]
 8017608:	4042      	eors	r2, r0
 801760a:	54e2      	strb	r2, [r4, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
 801760c:	3301      	adds	r3, #1
 801760e:	e7f3      	b.n	80175f8 <tc_cmac_final+0x14>
		_set(&s->leftover[s->leftover_offset], 0, remaining);
 8017610:	f102 0030 	add.w	r0, r2, #48	; 0x30
 8017614:	f1c2 0210 	rsb	r2, r2, #16
 8017618:	2100      	movs	r1, #0
 801761a:	4420      	add	r0, r4
 801761c:	f7ff feff 	bl	801741e <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
 8017620:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017622:	4423      	add	r3, r4
 8017624:	2280      	movs	r2, #128	; 0x80
 8017626:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
 801762a:	f104 0120 	add.w	r1, r4, #32
 801762e:	e7e2      	b.n	80175f6 <tc_cmac_final+0x12>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
 8017630:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8017632:	4621      	mov	r1, r4
 8017634:	4628      	mov	r0, r5
 8017636:	f7f0 fe8b 	bl	8008350 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
 801763a:	4620      	mov	r0, r4
 801763c:	f7ff ff15 	bl	801746a <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
 8017640:	2001      	movs	r0, #1
}
 8017642:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
 8017644:	2000      	movs	r0, #0
}
 8017646:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 8017648:	2000      	movs	r0, #0
 801764a:	e7fa      	b.n	8017642 <tc_cmac_final+0x5e>

0801764c <tc_sha256_update>:
	if (s == (TCSha256State_t) 0 ||
 801764c:	b328      	cbz	r0, 801769a <tc_sha256_update+0x4e>
{
 801764e:	b570      	push	{r4, r5, r6, lr}
 8017650:	460c      	mov	r4, r1
 8017652:	4605      	mov	r5, r0
	if (s == (TCSha256State_t) 0 ||
 8017654:	b319      	cbz	r1, 801769e <tc_sha256_update+0x52>
	} else if (datalen == 0) {
 8017656:	b98a      	cbnz	r2, 801767c <tc_sha256_update+0x30>
		return TC_CRYPTO_SUCCESS;
 8017658:	2001      	movs	r0, #1
 801765a:	e01d      	b.n	8017698 <tc_sha256_update+0x4c>
			compress(s->iv, s->leftover);
 801765c:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8017660:	4628      	mov	r0, r5
 8017662:	f7f1 fa1b 	bl	8008a9c <compress>
			s->leftover_offset = 0;
 8017666:	2300      	movs	r3, #0
 8017668:	66ab      	str	r3, [r5, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
 801766a:	6a2b      	ldr	r3, [r5, #32]
 801766c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801766e:	f513 7300 	adds.w	r3, r3, #512	; 0x200
 8017672:	f142 0200 	adc.w	r2, r2, #0
 8017676:	622b      	str	r3, [r5, #32]
 8017678:	626a      	str	r2, [r5, #36]	; 0x24
{
 801767a:	4632      	mov	r2, r6
	while (datalen-- > 0) {
 801767c:	1e56      	subs	r6, r2, #1
 801767e:	b152      	cbz	r2, 8017696 <tc_sha256_update+0x4a>
		s->leftover[s->leftover_offset++] = *(data++);
 8017680:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8017682:	1c5a      	adds	r2, r3, #1
 8017684:	66aa      	str	r2, [r5, #104]	; 0x68
 8017686:	f814 1b01 	ldrb.w	r1, [r4], #1
 801768a:	442b      	add	r3, r5
 801768c:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
 8017690:	2a3f      	cmp	r2, #63	; 0x3f
 8017692:	d9f2      	bls.n	801767a <tc_sha256_update+0x2e>
 8017694:	e7e2      	b.n	801765c <tc_sha256_update+0x10>
	return TC_CRYPTO_SUCCESS;
 8017696:	2001      	movs	r0, #1
}
 8017698:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
 801769a:	2000      	movs	r0, #0
}
 801769c:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 801769e:	2000      	movs	r0, #0
 80176a0:	e7fa      	b.n	8017698 <tc_sha256_update+0x4c>

080176a2 <tc_sha256_final>:
	if (digest == (uint8_t *) 0 ||
 80176a2:	2800      	cmp	r0, #0
 80176a4:	d065      	beq.n	8017772 <tc_sha256_final+0xd0>
{
 80176a6:	b570      	push	{r4, r5, r6, lr}
 80176a8:	460d      	mov	r5, r1
 80176aa:	4604      	mov	r4, r0
	if (digest == (uint8_t *) 0 ||
 80176ac:	2900      	cmp	r1, #0
 80176ae:	d062      	beq.n	8017776 <tc_sha256_final+0xd4>
	s->bits_hashed += (s->leftover_offset << 3);
 80176b0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80176b2:	00c8      	lsls	r0, r1, #3
 80176b4:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
 80176b8:	1812      	adds	r2, r2, r0
 80176ba:	f143 0300 	adc.w	r3, r3, #0
 80176be:	e9c5 2308 	strd	r2, r3, [r5, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
 80176c2:	1c48      	adds	r0, r1, #1
 80176c4:	66a8      	str	r0, [r5, #104]	; 0x68
 80176c6:	4429      	add	r1, r5
 80176c8:	2380      	movs	r3, #128	; 0x80
 80176ca:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
 80176ce:	2838      	cmp	r0, #56	; 0x38
 80176d0:	d82a      	bhi.n	8017728 <tc_sha256_final+0x86>
	_set(s->leftover + s->leftover_offset, 0x00,
 80176d2:	f105 0628 	add.w	r6, r5, #40	; 0x28
 80176d6:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 80176d8:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 80176dc:	2100      	movs	r1, #0
 80176de:	4430      	add	r0, r6
 80176e0:	f7ff fe9d 	bl	801741e <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
 80176e4:	6a2a      	ldr	r2, [r5, #32]
 80176e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80176e8:	f885 2067 	strb.w	r2, [r5, #103]	; 0x67
	s->leftover[sizeof(s->leftover) - 2] = (uint8_t)(s->bits_hashed >> 8);
 80176ec:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80176f0:	f885 1066 	strb.w	r1, [r5, #102]	; 0x66
	s->leftover[sizeof(s->leftover) - 3] = (uint8_t)(s->bits_hashed >> 16);
 80176f4:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80176f8:	f885 1065 	strb.w	r1, [r5, #101]	; 0x65
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
 80176fc:	0e12      	lsrs	r2, r2, #24
 80176fe:	f885 2064 	strb.w	r2, [r5, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
 8017702:	f885 3063 	strb.w	r3, [r5, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
 8017706:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801770a:	f885 2062 	strb.w	r2, [r5, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
 801770e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8017712:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
 8017716:	0e1b      	lsrs	r3, r3, #24
 8017718:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	compress(s->iv, s->leftover);
 801771c:	4631      	mov	r1, r6
 801771e:	4628      	mov	r0, r5
 8017720:	f7f1 f9bc 	bl	8008a9c <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
 8017724:	2200      	movs	r2, #0
 8017726:	e01b      	b.n	8017760 <tc_sha256_final+0xbe>
		_set(s->leftover + s->leftover_offset, 0x00,
 8017728:	f105 0628 	add.w	r6, r5, #40	; 0x28
 801772c:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 8017730:	2100      	movs	r1, #0
 8017732:	4430      	add	r0, r6
 8017734:	f7ff fe73 	bl	801741e <_set>
		compress(s->iv, s->leftover);
 8017738:	4631      	mov	r1, r6
 801773a:	4628      	mov	r0, r5
 801773c:	f7f1 f9ae 	bl	8008a9c <compress>
		s->leftover_offset = 0;
 8017740:	2300      	movs	r3, #0
 8017742:	66ab      	str	r3, [r5, #104]	; 0x68
 8017744:	e7c5      	b.n	80176d2 <tc_sha256_final+0x30>
		unsigned int t = *((unsigned int *) &s->iv[i]);
 8017746:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
		*digest++ = (uint8_t)(t >> 24);
 801774a:	0e19      	lsrs	r1, r3, #24
 801774c:	7021      	strb	r1, [r4, #0]
		*digest++ = (uint8_t)(t >> 16);
 801774e:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8017752:	7061      	strb	r1, [r4, #1]
		*digest++ = (uint8_t)(t >> 8);
 8017754:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8017758:	70a1      	strb	r1, [r4, #2]
		*digest++ = (uint8_t)(t);
 801775a:	70e3      	strb	r3, [r4, #3]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
 801775c:	3201      	adds	r2, #1
		*digest++ = (uint8_t)(t);
 801775e:	3404      	adds	r4, #4
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
 8017760:	2a07      	cmp	r2, #7
 8017762:	d9f0      	bls.n	8017746 <tc_sha256_final+0xa4>
	_set(s, 0, sizeof(*s));
 8017764:	2270      	movs	r2, #112	; 0x70
 8017766:	2100      	movs	r1, #0
 8017768:	4628      	mov	r0, r5
 801776a:	f7ff fe58 	bl	801741e <_set>
	return TC_CRYPTO_SUCCESS;
 801776e:	2001      	movs	r0, #1
}
 8017770:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
 8017772:	2000      	movs	r0, #0
}
 8017774:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 8017776:	2000      	movs	r0, #0
 8017778:	e7fa      	b.n	8017770 <tc_sha256_final+0xce>

0801777a <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
 801777a:	b430      	push	{r4, r5}
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
 801777c:	2300      	movs	r3, #0
 801777e:	4293      	cmp	r3, r2
 8017780:	d212      	bcs.n	80177a8 <rekey+0x2e>
		key[i] = inner_pad ^ new_key[i];
 8017782:	5ccc      	ldrb	r4, [r1, r3]
 8017784:	f084 0436 	eor.w	r4, r4, #54	; 0x36
 8017788:	54c4      	strb	r4, [r0, r3]
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
 801778a:	5ccc      	ldrb	r4, [r1, r3]
 801778c:	f103 0540 	add.w	r5, r3, #64	; 0x40
 8017790:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
 8017794:	5544      	strb	r4, [r0, r5]
	for (i = 0; i < key_size; ++i) {
 8017796:	3301      	adds	r3, #1
 8017798:	e7f1      	b.n	801777e <rekey+0x4>
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
 801779a:	2236      	movs	r2, #54	; 0x36
 801779c:	54c2      	strb	r2, [r0, r3]
 801779e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80177a2:	215c      	movs	r1, #92	; 0x5c
 80177a4:	5481      	strb	r1, [r0, r2]
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
 80177a6:	3301      	adds	r3, #1
 80177a8:	2b3f      	cmp	r3, #63	; 0x3f
 80177aa:	d9f6      	bls.n	801779a <rekey+0x20>
	}
}
 80177ac:	bc30      	pop	{r4, r5}
 80177ae:	4770      	bx	lr

080177b0 <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
 80177b0:	b388      	cbz	r0, 8017816 <tc_hmac_set_key+0x66>
{
 80177b2:	b570      	push	{r4, r5, r6, lr}
 80177b4:	b0cc      	sub	sp, #304	; 0x130
 80177b6:	460d      	mov	r5, r1
 80177b8:	4614      	mov	r4, r2
 80177ba:	4606      	mov	r6, r0
	if (ctx == (TCHmacState_t) 0 ||
 80177bc:	b369      	cbz	r1, 801781a <tc_hmac_set_key+0x6a>
	    key == (const uint8_t *) 0 ||
 80177be:	b372      	cbz	r2, 801781e <tc_hmac_set_key+0x6e>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
 80177c0:	2a40      	cmp	r2, #64	; 0x40
 80177c2:	d813      	bhi.n	80177ec <tc_hmac_set_key+0x3c>
		 * certain timing attacks. Without these dummy calls,
		 * adversaries would be able to learn whether the key_size is
		 * greater than TC_SHA256_BLOCK_SIZE by measuring the time
		 * consumed in this process.
		 */
		(void)tc_sha256_init(&dummy_state.hash_state);
 80177c4:	4668      	mov	r0, sp
 80177c6:	f7f1 fa41 	bl	8008c4c <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
 80177ca:	4622      	mov	r2, r4
 80177cc:	a93c      	add	r1, sp, #240	; 0xf0
 80177ce:	4668      	mov	r0, sp
 80177d0:	f7ff ff3c 	bl	801764c <tc_sha256_update>
				       dummy_key,
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
 80177d4:	4669      	mov	r1, sp
 80177d6:	a824      	add	r0, sp, #144	; 0x90
 80177d8:	f7ff ff63 	bl	80176a2 <tc_sha256_final>
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
 80177dc:	4622      	mov	r2, r4
 80177de:	4629      	mov	r1, r5
 80177e0:	f106 0070 	add.w	r0, r6, #112	; 0x70
 80177e4:	f7ff ffc9 	bl	801777a <rekey>
		rekey(ctx->key,
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
 80177e8:	2001      	movs	r0, #1
 80177ea:	e019      	b.n	8017820 <tc_hmac_set_key+0x70>
		(void)tc_sha256_init(&ctx->hash_state);
 80177ec:	f7f1 fa2e 	bl	8008c4c <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
 80177f0:	4622      	mov	r2, r4
 80177f2:	4629      	mov	r1, r5
 80177f4:	4630      	mov	r0, r6
 80177f6:	f7ff ff29 	bl	801764c <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
 80177fa:	f106 0490 	add.w	r4, r6, #144	; 0x90
 80177fe:	4631      	mov	r1, r6
 8017800:	4620      	mov	r0, r4
 8017802:	f7ff ff4e 	bl	80176a2 <tc_sha256_final>
		rekey(ctx->key,
 8017806:	2220      	movs	r2, #32
 8017808:	4621      	mov	r1, r4
 801780a:	f106 0070 	add.w	r0, r6, #112	; 0x70
 801780e:	f7ff ffb4 	bl	801777a <rekey>
	return TC_CRYPTO_SUCCESS;
 8017812:	2001      	movs	r0, #1
 8017814:	e004      	b.n	8017820 <tc_hmac_set_key+0x70>
		return TC_CRYPTO_FAIL;
 8017816:	2000      	movs	r0, #0
}
 8017818:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 801781a:	2000      	movs	r0, #0
 801781c:	e000      	b.n	8017820 <tc_hmac_set_key+0x70>
 801781e:	2000      	movs	r0, #0
}
 8017820:	b04c      	add	sp, #304	; 0x130
 8017822:	bd70      	pop	{r4, r5, r6, pc}

08017824 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
 8017824:	b158      	cbz	r0, 801783e <tc_hmac_init+0x1a>
{
 8017826:	b510      	push	{r4, lr}
 8017828:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
 801782a:	f7f1 fa0f 	bl	8008c4c <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
 801782e:	2240      	movs	r2, #64	; 0x40
 8017830:	f104 0170 	add.w	r1, r4, #112	; 0x70
 8017834:	4620      	mov	r0, r4
 8017836:	f7ff ff09 	bl	801764c <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
 801783a:	2001      	movs	r0, #1
}
 801783c:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
 801783e:	2000      	movs	r0, #0
}
 8017840:	4770      	bx	lr

08017842 <tc_hmac_update>:
		   const void *data,
		   unsigned int data_length)
{

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
 8017842:	b120      	cbz	r0, 801784e <tc_hmac_update+0xc>
{
 8017844:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
 8017846:	f7ff ff01 	bl	801764c <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
 801784a:	2001      	movs	r0, #1
}
 801784c:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
 801784e:	2000      	movs	r0, #0
}
 8017850:	4770      	bx	lr

08017852 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
 8017852:	b308      	cbz	r0, 8017898 <tc_hmac_final+0x46>
{
 8017854:	b538      	push	{r3, r4, r5, lr}
 8017856:	4614      	mov	r4, r2
 8017858:	4605      	mov	r5, r0
	if (tag == (uint8_t *) 0 ||
 801785a:	2920      	cmp	r1, #32
 801785c:	d11e      	bne.n	801789c <tc_hmac_final+0x4a>
	    taglen != TC_SHA256_DIGEST_SIZE ||
 801785e:	b1fa      	cbz	r2, 80178a0 <tc_hmac_final+0x4e>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
 8017860:	4611      	mov	r1, r2
 8017862:	f7ff ff1e 	bl	80176a2 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
 8017866:	4620      	mov	r0, r4
 8017868:	f7f1 f9f0 	bl	8008c4c <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
 801786c:	2240      	movs	r2, #64	; 0x40
 801786e:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
 8017872:	4620      	mov	r0, r4
 8017874:	f7ff feea 	bl	801764c <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
 8017878:	2220      	movs	r2, #32
 801787a:	4629      	mov	r1, r5
 801787c:	4620      	mov	r0, r4
 801787e:	f7ff fee5 	bl	801764c <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
 8017882:	4621      	mov	r1, r4
 8017884:	4628      	mov	r0, r5
 8017886:	f7ff ff0c 	bl	80176a2 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
 801788a:	22f0      	movs	r2, #240	; 0xf0
 801788c:	2100      	movs	r1, #0
 801788e:	4620      	mov	r0, r4
 8017890:	f7ff fdc5 	bl	801741e <_set>

	return TC_CRYPTO_SUCCESS;
 8017894:	2001      	movs	r0, #1
 8017896:	e002      	b.n	801789e <tc_hmac_final+0x4c>
		return TC_CRYPTO_FAIL;
 8017898:	2000      	movs	r0, #0
}
 801789a:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 801789c:	2000      	movs	r0, #0
}
 801789e:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
 80178a0:	2000      	movs	r0, #0
 80178a2:	e7fc      	b.n	801789e <tc_hmac_final+0x4c>

080178a4 <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
 80178a4:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 80178a8:	b082      	sub	sp, #8
 80178aa:	4604      	mov	r4, r0
 80178ac:	460d      	mov	r5, r1
 80178ae:	4691      	mov	r9, r2
 80178b0:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
 80178b2:	2300      	movs	r3, #0
 80178b4:	f88d 3007 	strb.w	r3, [sp, #7]
	const uint8_t separator1 = 0x01;
 80178b8:	f04f 0b01 	mov.w	fp, #1
 80178bc:	f88d b006 	strb.w	fp, [sp, #6]

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 80178c0:	f100 08f0 	add.w	r8, r0, #240	; 0xf0
 80178c4:	2220      	movs	r2, #32
 80178c6:	4641      	mov	r1, r8
 80178c8:	f7ff ff72 	bl	80177b0 <tc_hmac_set_key>

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
 80178cc:	4620      	mov	r0, r4
 80178ce:	f7ff ffa9 	bl	8017824 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 80178d2:	f504 7688 	add.w	r6, r4, #272	; 0x110
 80178d6:	2220      	movs	r2, #32
 80178d8:	4631      	mov	r1, r6
 80178da:	4620      	mov	r0, r4
 80178dc:	f7ff ffb1 	bl	8017842 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
 80178e0:	465a      	mov	r2, fp
 80178e2:	f10d 0107 	add.w	r1, sp, #7
 80178e6:	4620      	mov	r0, r4
 80178e8:	f7ff ffab 	bl	8017842 <tc_hmac_update>

	if (data && datalen)
 80178ec:	b115      	cbz	r5, 80178f4 <update+0x50>
 80178ee:	f1b9 0f00 	cmp.w	r9, #0
 80178f2:	d120      	bne.n	8017936 <update+0x92>
		(void)tc_hmac_update(&prng->h, data, datalen);
	if (additional_data && additional_datalen)
 80178f4:	b10f      	cbz	r7, 80178fa <update+0x56>
 80178f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80178f8:	bb1b      	cbnz	r3, 8017942 <update+0x9e>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
 80178fa:	4622      	mov	r2, r4
 80178fc:	2120      	movs	r1, #32
 80178fe:	4640      	mov	r0, r8
 8017900:	f7ff ffa7 	bl	8017852 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 8017904:	2220      	movs	r2, #32
 8017906:	4641      	mov	r1, r8
 8017908:	4620      	mov	r0, r4
 801790a:	f7ff ff51 	bl	80177b0 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
 801790e:	4620      	mov	r0, r4
 8017910:	f7ff ff88 	bl	8017824 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8017914:	2220      	movs	r2, #32
 8017916:	4631      	mov	r1, r6
 8017918:	4620      	mov	r0, r4
 801791a:	f7ff ff92 	bl	8017842 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
 801791e:	4622      	mov	r2, r4
 8017920:	2120      	movs	r1, #32
 8017922:	4630      	mov	r0, r6
 8017924:	f7ff ff95 	bl	8017852 <tc_hmac_final>

	if (data == 0 || datalen == 0)
 8017928:	b115      	cbz	r5, 8017930 <update+0x8c>
 801792a:	f1b9 0f00 	cmp.w	r9, #0
 801792e:	d10e      	bne.n	801794e <update+0xaa>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
}
 8017930:	b002      	add	sp, #8
 8017932:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		(void)tc_hmac_update(&prng->h, data, datalen);
 8017936:	464a      	mov	r2, r9
 8017938:	4629      	mov	r1, r5
 801793a:	4620      	mov	r0, r4
 801793c:	f7ff ff81 	bl	8017842 <tc_hmac_update>
 8017940:	e7d8      	b.n	80178f4 <update+0x50>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
 8017942:	461a      	mov	r2, r3
 8017944:	4639      	mov	r1, r7
 8017946:	4620      	mov	r0, r4
 8017948:	f7ff ff7b 	bl	8017842 <tc_hmac_update>
 801794c:	e7d5      	b.n	80178fa <update+0x56>
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 801794e:	2220      	movs	r2, #32
 8017950:	4641      	mov	r1, r8
 8017952:	4620      	mov	r0, r4
 8017954:	f7ff ff2c 	bl	80177b0 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
 8017958:	4620      	mov	r0, r4
 801795a:	f7ff ff63 	bl	8017824 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 801795e:	2220      	movs	r2, #32
 8017960:	4631      	mov	r1, r6
 8017962:	4620      	mov	r0, r4
 8017964:	f7ff ff6d 	bl	8017842 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
 8017968:	2201      	movs	r2, #1
 801796a:	f10d 0106 	add.w	r1, sp, #6
 801796e:	4620      	mov	r0, r4
 8017970:	f7ff ff67 	bl	8017842 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
 8017974:	464a      	mov	r2, r9
 8017976:	4629      	mov	r1, r5
 8017978:	4620      	mov	r0, r4
 801797a:	f7ff ff62 	bl	8017842 <tc_hmac_update>
	if (additional_data && additional_datalen)
 801797e:	b10f      	cbz	r7, 8017984 <update+0xe0>
 8017980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017982:	b9bb      	cbnz	r3, 80179b4 <update+0x110>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
 8017984:	4622      	mov	r2, r4
 8017986:	2120      	movs	r1, #32
 8017988:	4640      	mov	r0, r8
 801798a:	f7ff ff62 	bl	8017852 <tc_hmac_final>
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 801798e:	2220      	movs	r2, #32
 8017990:	4641      	mov	r1, r8
 8017992:	4620      	mov	r0, r4
 8017994:	f7ff ff0c 	bl	80177b0 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
 8017998:	4620      	mov	r0, r4
 801799a:	f7ff ff43 	bl	8017824 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 801799e:	2220      	movs	r2, #32
 80179a0:	4631      	mov	r1, r6
 80179a2:	4620      	mov	r0, r4
 80179a4:	f7ff ff4d 	bl	8017842 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
 80179a8:	4622      	mov	r2, r4
 80179aa:	2120      	movs	r1, #32
 80179ac:	4630      	mov	r0, r6
 80179ae:	f7ff ff50 	bl	8017852 <tc_hmac_final>
 80179b2:	e7bd      	b.n	8017930 <update+0x8c>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
 80179b4:	461a      	mov	r2, r3
 80179b6:	4639      	mov	r1, r7
 80179b8:	4620      	mov	r0, r4
 80179ba:	f7ff ff42 	bl	8017842 <tc_hmac_update>
 80179be:	e7e1      	b.n	8017984 <update+0xe0>

080179c0 <tc_hmac_prng_init>:
		      const uint8_t *personalization,
		      unsigned int plen)
{

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
 80179c0:	b1e8      	cbz	r0, 80179fe <tc_hmac_prng_init+0x3e>
{
 80179c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80179c4:	b083      	sub	sp, #12
 80179c6:	460c      	mov	r4, r1
 80179c8:	4615      	mov	r5, r2
 80179ca:	4606      	mov	r6, r0
	    personalization == (uint8_t *) 0 ||
 80179cc:	b1c9      	cbz	r1, 8017a02 <tc_hmac_prng_init+0x42>
	    plen > MAX_PLEN) {
		return TC_CRYPTO_FAIL;
	}

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
 80179ce:	2220      	movs	r2, #32
 80179d0:	2100      	movs	r1, #0
 80179d2:	30f0      	adds	r0, #240	; 0xf0
 80179d4:	f7ff fd23 	bl	801741e <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
 80179d8:	2220      	movs	r2, #32
 80179da:	2101      	movs	r1, #1
 80179dc:	f506 7088 	add.w	r0, r6, #272	; 0x110
 80179e0:	f7ff fd1d 	bl	801741e <_set>

	update(prng, personalization, plen, 0, 0);
 80179e4:	2700      	movs	r7, #0
 80179e6:	9700      	str	r7, [sp, #0]
 80179e8:	463b      	mov	r3, r7
 80179ea:	462a      	mov	r2, r5
 80179ec:	4621      	mov	r1, r4
 80179ee:	4630      	mov	r0, r6
 80179f0:	f7ff ff58 	bl	80178a4 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;
 80179f4:	f8c6 7130 	str.w	r7, [r6, #304]	; 0x130

	return TC_CRYPTO_SUCCESS;
 80179f8:	2001      	movs	r0, #1
}
 80179fa:	b003      	add	sp, #12
 80179fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
 80179fe:	2000      	movs	r0, #0
}
 8017a00:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 8017a02:	2000      	movs	r0, #0
 8017a04:	e7f9      	b.n	80179fa <tc_hmac_prng_init+0x3a>

08017a06 <tc_hmac_prng_reseed>:
			const uint8_t *additional_input,
			unsigned int additionallen)
{

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
 8017a06:	b1d0      	cbz	r0, 8017a3e <tc_hmac_prng_reseed+0x38>
{
 8017a08:	b510      	push	{r4, lr}
 8017a0a:	b082      	sub	sp, #8
 8017a0c:	4604      	mov	r4, r0
	if (prng == (TCHmacPrng_t) 0 ||
 8017a0e:	b1c1      	cbz	r1, 8017a42 <tc_hmac_prng_reseed+0x3c>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
 8017a10:	2a1f      	cmp	r2, #31
 8017a12:	d918      	bls.n	8017a46 <tc_hmac_prng_reseed+0x40>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
 8017a14:	b173      	cbz	r3, 8017a34 <tc_hmac_prng_reseed+0x2e>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
 8017a16:	9804      	ldr	r0, [sp, #16]
 8017a18:	b908      	cbnz	r0, 8017a1e <tc_hmac_prng_reseed+0x18>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
 8017a1a:	2000      	movs	r0, #0
 8017a1c:	e008      	b.n	8017a30 <tc_hmac_prng_reseed+0x2a>
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
 8017a1e:	9000      	str	r0, [sp, #0]
 8017a20:	4620      	mov	r0, r4
 8017a22:	f7ff ff3f 	bl	80178a4 <update>
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
 8017a26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017a2a:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130

	return TC_CRYPTO_SUCCESS;
 8017a2e:	2001      	movs	r0, #1
}
 8017a30:	b002      	add	sp, #8
 8017a32:	bd10      	pop	{r4, pc}
		update(prng, seed, seedlen, 0, 0);
 8017a34:	2300      	movs	r3, #0
 8017a36:	9300      	str	r3, [sp, #0]
 8017a38:	f7ff ff34 	bl	80178a4 <update>
 8017a3c:	e7f3      	b.n	8017a26 <tc_hmac_prng_reseed+0x20>
		return TC_CRYPTO_FAIL;
 8017a3e:	2000      	movs	r0, #0
}
 8017a40:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 8017a42:	2000      	movs	r0, #0
 8017a44:	e7f4      	b.n	8017a30 <tc_hmac_prng_reseed+0x2a>
 8017a46:	2000      	movs	r0, #0
 8017a48:	e7f2      	b.n	8017a30 <tc_hmac_prng_reseed+0x2a>

08017a4a <tc_hmac_prng_generate>:
int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
 8017a4a:	2800      	cmp	r0, #0
 8017a4c:	d045      	beq.n	8017ada <tc_hmac_prng_generate+0x90>
{
 8017a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a52:	b082      	sub	sp, #8
 8017a54:	460f      	mov	r7, r1
 8017a56:	4614      	mov	r4, r2
 8017a58:	4680      	mov	r8, r0
	if (out == (uint8_t *) 0 ||
 8017a5a:	2a00      	cmp	r2, #0
 8017a5c:	d03f      	beq.n	8017ade <tc_hmac_prng_generate+0x94>
	    prng == (TCHmacPrng_t) 0 ||
 8017a5e:	2900      	cmp	r1, #0
 8017a60:	d03f      	beq.n	8017ae2 <tc_hmac_prng_generate+0x98>
	    outlen == 0 ||
 8017a62:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 8017a66:	d840      	bhi.n	8017aea <tc_hmac_prng_generate+0xa0>
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
 8017a68:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d03e      	beq.n	8017aee <tc_hmac_prng_generate+0xa4>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
 8017a70:	3b01      	subs	r3, #1
 8017a72:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
 8017a76:	e025      	b.n	8017ac4 <tc_hmac_prng_generate+0x7a>
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 8017a78:	2220      	movs	r2, #32
 8017a7a:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
 8017a7e:	4620      	mov	r0, r4
 8017a80:	f7ff fe96 	bl	80177b0 <tc_hmac_set_key>

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
 8017a84:	4620      	mov	r0, r4
 8017a86:	f7ff fecd 	bl	8017824 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8017a8a:	f504 7588 	add.w	r5, r4, #272	; 0x110
 8017a8e:	2220      	movs	r2, #32
 8017a90:	4629      	mov	r1, r5
 8017a92:	4620      	mov	r0, r4
 8017a94:	f7ff fed5 	bl	8017842 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
 8017a98:	4622      	mov	r2, r4
 8017a9a:	2120      	movs	r1, #32
 8017a9c:	4628      	mov	r0, r5
 8017a9e:	f7ff fed8 	bl	8017852 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
 8017aa2:	463e      	mov	r6, r7
 8017aa4:	2f20      	cmp	r7, #32
 8017aa6:	bf28      	it	cs
 8017aa8:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
 8017aaa:	4633      	mov	r3, r6
 8017aac:	462a      	mov	r2, r5
 8017aae:	4631      	mov	r1, r6
 8017ab0:	4640      	mov	r0, r8
 8017ab2:	f7ff fca7 	bl	8017404 <_copy>

		out += bufferlen;
 8017ab6:	44b0      	add	r8, r6
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
 8017ab8:	4639      	mov	r1, r7
 8017aba:	2f20      	cmp	r7, #32
 8017abc:	bf38      	it	cc
 8017abe:	2120      	movcc	r1, #32
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
 8017ac0:	f1a1 0720 	sub.w	r7, r1, #32
	while (outlen != 0) {
 8017ac4:	2f00      	cmp	r7, #0
 8017ac6:	d1d7      	bne.n	8017a78 <tc_hmac_prng_generate+0x2e>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
 8017ac8:	2100      	movs	r1, #0
 8017aca:	9100      	str	r1, [sp, #0]
 8017acc:	460b      	mov	r3, r1
 8017ace:	460a      	mov	r2, r1
 8017ad0:	4620      	mov	r0, r4
 8017ad2:	f7ff fee7 	bl	80178a4 <update>

	return TC_CRYPTO_SUCCESS;
 8017ad6:	2001      	movs	r0, #1
 8017ad8:	e004      	b.n	8017ae4 <tc_hmac_prng_generate+0x9a>
		return TC_CRYPTO_FAIL;
 8017ada:	2000      	movs	r0, #0
}
 8017adc:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 8017ade:	2000      	movs	r0, #0
 8017ae0:	e000      	b.n	8017ae4 <tc_hmac_prng_generate+0x9a>
 8017ae2:	2000      	movs	r0, #0
}
 8017ae4:	b002      	add	sp, #8
 8017ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
 8017aea:	2000      	movs	r0, #0
 8017aec:	e7fa      	b.n	8017ae4 <tc_hmac_prng_generate+0x9a>
		return TC_HMAC_PRNG_RESEED_REQ;
 8017aee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017af2:	e7f7      	b.n	8017ae4 <tc_hmac_prng_generate+0x9a>

08017af4 <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
 8017af4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 8017af6:	2100      	movs	r1, #0
 8017af8:	2001      	movs	r0, #1
 8017afa:	f000 f805 	bl	8017b08 <z_arm_fatal_error>
}
 8017afe:	bd08      	pop	{r3, pc}

08017b00 <z_arm_prepare_switch_to_main>:
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 8017b00:	2300      	movs	r3, #0
 8017b02:	eee1 3a10 	vmsr	fpscr, r3
}
 8017b06:	4770      	bx	lr

08017b08 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8017b08:	b538      	push	{r3, r4, r5, lr}
 8017b0a:	4604      	mov	r4, r0

	if (esf != NULL) {
 8017b0c:	460d      	mov	r5, r1
 8017b0e:	b111      	cbz	r1, 8017b16 <z_arm_fatal_error+0xe>
		esf_dump(esf);
 8017b10:	4608      	mov	r0, r1
 8017b12:	f7f1 f99d 	bl	8008e50 <esf_dump>
	}
	z_fatal_error(reason, esf);
 8017b16:	4629      	mov	r1, r5
 8017b18:	4620      	mov	r0, r4
 8017b1a:	f7fb fd9d 	bl	8013658 <z_fatal_error>
}
 8017b1e:	bd38      	pop	{r3, r4, r5, pc}

08017b20 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 8017b20:	b508      	push	{r3, lr}
 8017b22:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 8017b24:	6800      	ldr	r0, [r0, #0]
 8017b26:	f7ff ffef 	bl	8017b08 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
 8017b2a:	bd08      	pop	{r3, pc}

08017b2c <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
 8017b2c:	b508      	push	{r3, lr}
	handler();
 8017b2e:	f7f1 f9df 	bl	8008ef0 <z_SysNmiOnReset>
	z_arm_int_exit();
 8017b32:	f7f1 fdc7 	bl	80096c4 <z_arm_exc_exit>
}
 8017b36:	bd08      	pop	{r3, pc}

08017b38 <memory_fault_recoverable>:
}
 8017b38:	2000      	movs	r0, #0
 8017b3a:	4770      	bx	lr

08017b3c <fault_handle>:
{
 8017b3c:	b508      	push	{r3, lr}
	*recoverable = false;
 8017b3e:	2300      	movs	r3, #0
 8017b40:	7013      	strb	r3, [r2, #0]
	switch (fault) {
 8017b42:	1ecb      	subs	r3, r1, #3
 8017b44:	2b09      	cmp	r3, #9
 8017b46:	d819      	bhi.n	8017b7c <fault_handle+0x40>
 8017b48:	e8df f003 	tbb	[pc, r3]
 8017b4c:	110d0905 	.word	0x110d0905
 8017b50:	18181818 	.word	0x18181818
 8017b54:	1418      	.short	0x1418
		reason = hard_fault(esf, recoverable);
 8017b56:	4611      	mov	r1, r2
 8017b58:	f7f1 fcb2 	bl	80094c0 <hard_fault>
}
 8017b5c:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
 8017b5e:	2100      	movs	r1, #0
 8017b60:	f7f1 fb08 	bl	8009174 <mem_manage_fault>
		break;
 8017b64:	e7fa      	b.n	8017b5c <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
 8017b66:	2100      	movs	r1, #0
 8017b68:	f7f1 fbca 	bl	8009300 <bus_fault>
		break;
 8017b6c:	e7f6      	b.n	8017b5c <fault_handle+0x20>
		reason = usage_fault(esf);
 8017b6e:	f7f1 fa2d 	bl	8008fcc <usage_fault>
		break;
 8017b72:	e7f3      	b.n	8017b5c <fault_handle+0x20>
		debug_monitor(esf);
 8017b74:	f7f1 fae4 	bl	8009140 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8017b78:	2000      	movs	r0, #0
		break;
 8017b7a:	e7ef      	b.n	8017b5c <fault_handle+0x20>
		reserved_exception(esf, fault);
 8017b7c:	f7f1 fd14 	bl	80095a8 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8017b80:	2000      	movs	r0, #0
	return reason;
 8017b82:	e7eb      	b.n	8017b5c <fault_handle+0x20>

08017b84 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
 8017b84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b88:	4606      	mov	r6, r0
 8017b8a:	460f      	mov	r7, r1
	register const char *s = nptr;
 8017b8c:	4604      	mov	r4, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
 8017b8e:	4620      	mov	r0, r4
 8017b90:	3401      	adds	r4, #1
 8017b92:	7801      	ldrb	r1, [r0, #0]
 8017b94:	460b      	mov	r3, r1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
 8017b96:	2920      	cmp	r1, #32
 8017b98:	d0f9      	beq.n	8017b8e <strtol+0xa>
 8017b9a:	3909      	subs	r1, #9
 8017b9c:	2904      	cmp	r1, #4
 8017b9e:	d9f6      	bls.n	8017b8e <strtol+0xa>
	} while (isspace(c));
	if (c == '-') {
 8017ba0:	2b2d      	cmp	r3, #45	; 0x2d
 8017ba2:	d019      	beq.n	8017bd8 <strtol+0x54>
		neg = 1;
		c = *s++;
	} else if (c == '+') {
 8017ba4:	2b2b      	cmp	r3, #43	; 0x2b
 8017ba6:	d01c      	beq.n	8017be2 <strtol+0x5e>
	register int neg = 0, any, cutlim;
 8017ba8:	f04f 0e00 	mov.w	lr, #0
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
 8017bac:	b10a      	cbz	r2, 8017bb2 <strtol+0x2e>
 8017bae:	2a10      	cmp	r2, #16
 8017bb0:	d101      	bne.n	8017bb6 <strtol+0x32>
 8017bb2:	2b30      	cmp	r3, #48	; 0x30
 8017bb4:	d01a      	beq.n	8017bec <strtol+0x68>
		c = s[1];
		s += 2;
		base = 16;
	}

	if (base == 0) {
 8017bb6:	b912      	cbnz	r2, 8017bbe <strtol+0x3a>
		base = c == '0' ? 8 : 10;
 8017bb8:	2b30      	cmp	r3, #48	; 0x30
 8017bba:	d020      	beq.n	8017bfe <strtol+0x7a>
 8017bbc:	220a      	movs	r2, #10
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
 8017bbe:	f1be 0f00 	cmp.w	lr, #0
 8017bc2:	d01e      	beq.n	8017c02 <strtol+0x7e>
 8017bc4:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
 8017bc8:	4694      	mov	ip, r2
 8017bca:	fbb8 f1f2 	udiv	r1, r8, r2
 8017bce:	fb02 8911 	mls	r9, r2, r1, r8
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
 8017bd2:	2500      	movs	r5, #0
 8017bd4:	4628      	mov	r0, r5
 8017bd6:	e034      	b.n	8017c42 <strtol+0xbe>
		c = *s++;
 8017bd8:	7823      	ldrb	r3, [r4, #0]
 8017bda:	1c84      	adds	r4, r0, #2
		neg = 1;
 8017bdc:	f04f 0e01 	mov.w	lr, #1
 8017be0:	e7e4      	b.n	8017bac <strtol+0x28>
		c = *s++;
 8017be2:	7823      	ldrb	r3, [r4, #0]
 8017be4:	1c84      	adds	r4, r0, #2
	register int neg = 0, any, cutlim;
 8017be6:	f04f 0e00 	mov.w	lr, #0
 8017bea:	e7df      	b.n	8017bac <strtol+0x28>
	    c == '0' && (*s == 'x' || *s == 'X')) {
 8017bec:	7821      	ldrb	r1, [r4, #0]
 8017bee:	2978      	cmp	r1, #120	; 0x78
 8017bf0:	d001      	beq.n	8017bf6 <strtol+0x72>
 8017bf2:	2958      	cmp	r1, #88	; 0x58
 8017bf4:	d1df      	bne.n	8017bb6 <strtol+0x32>
		c = s[1];
 8017bf6:	7863      	ldrb	r3, [r4, #1]
		s += 2;
 8017bf8:	3402      	adds	r4, #2
		base = 16;
 8017bfa:	2210      	movs	r2, #16
 8017bfc:	e7db      	b.n	8017bb6 <strtol+0x32>
		base = c == '0' ? 8 : 10;
 8017bfe:	2208      	movs	r2, #8
 8017c00:	e7dd      	b.n	8017bbe <strtol+0x3a>
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
 8017c02:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 8017c06:	e7df      	b.n	8017bc8 <strtol+0x44>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
 8017c08:	f043 0b20 	orr.w	fp, r3, #32
 8017c0c:	f1ab 0b61 	sub.w	fp, fp, #97	; 0x61
		if (isdigit(c)) {
			c -= '0';
		} else if (isalpha(c)) {
 8017c10:	f1bb 0f19 	cmp.w	fp, #25
 8017c14:	d829      	bhi.n	8017c6a <strtol+0xe6>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 8017c16:	f1a3 0a41 	sub.w	sl, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
 8017c1a:	f1ba 0f19 	cmp.w	sl, #25
 8017c1e:	d804      	bhi.n	8017c2a <strtol+0xa6>
 8017c20:	f04f 0a37 	mov.w	sl, #55	; 0x37
 8017c24:	eba3 030a 	sub.w	r3, r3, sl
 8017c28:	e011      	b.n	8017c4e <strtol+0xca>
 8017c2a:	f04f 0a57 	mov.w	sl, #87	; 0x57
 8017c2e:	e7f9      	b.n	8017c24 <strtol+0xa0>
			break;
		}
		if (c >= base) {
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
 8017c30:	454b      	cmp	r3, r9
 8017c32:	dd13      	ble.n	8017c5c <strtol+0xd8>
			any = -1;
 8017c34:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8017c38:	e001      	b.n	8017c3e <strtol+0xba>
 8017c3a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	for (acc = 0, any = 0;; c = *s++) {
 8017c3e:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 8017c42:	f1a3 0b30 	sub.w	fp, r3, #48	; 0x30
		if (isdigit(c)) {
 8017c46:	f1bb 0f09 	cmp.w	fp, #9
 8017c4a:	d8dd      	bhi.n	8017c08 <strtol+0x84>
			c -= '0';
 8017c4c:	465b      	mov	r3, fp
		if (c >= base) {
 8017c4e:	429a      	cmp	r2, r3
 8017c50:	dd0b      	ble.n	8017c6a <strtol+0xe6>
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
 8017c52:	2d00      	cmp	r5, #0
 8017c54:	dbf1      	blt.n	8017c3a <strtol+0xb6>
 8017c56:	4288      	cmp	r0, r1
 8017c58:	d804      	bhi.n	8017c64 <strtol+0xe0>
 8017c5a:	d0e9      	beq.n	8017c30 <strtol+0xac>
		} else {
			any = 1;
			acc *= base;
			acc += c;
 8017c5c:	fb00 300c 	mla	r0, r0, ip, r3
			any = 1;
 8017c60:	2501      	movs	r5, #1
 8017c62:	e7ec      	b.n	8017c3e <strtol+0xba>
			any = -1;
 8017c64:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8017c68:	e7e9      	b.n	8017c3e <strtol+0xba>
		}
	}

	if (any < 0) {
 8017c6a:	2d00      	cmp	r5, #0
 8017c6c:	db09      	blt.n	8017c82 <strtol+0xfe>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
	} else if (neg) {
 8017c6e:	f1be 0f00 	cmp.w	lr, #0
 8017c72:	d000      	beq.n	8017c76 <strtol+0xf2>
		acc = -acc;
 8017c74:	4240      	negs	r0, r0
	}

	if (endptr != NULL) {
 8017c76:	b117      	cbz	r7, 8017c7e <strtol+0xfa>
		*endptr = (char *)(any ? s - 1 : nptr);
 8017c78:	b105      	cbz	r5, 8017c7c <strtol+0xf8>
 8017c7a:	1e66      	subs	r6, r4, #1
 8017c7c:	603e      	str	r6, [r7, #0]
	}
	return acc;
}
 8017c7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
 8017c82:	f7fb fc95 	bl	80135b0 <z_impl_z_errno>
		errno = ERANGE;
 8017c86:	2326      	movs	r3, #38	; 0x26
 8017c88:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
 8017c8a:	4640      	mov	r0, r8
 8017c8c:	e7f3      	b.n	8017c76 <strtol+0xf2>

08017c8e <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
 8017c8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c92:	4607      	mov	r7, r0
 8017c94:	4688      	mov	r8, r1
	register const char *s = nptr;
 8017c96:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
 8017c98:	4620      	mov	r0, r4
 8017c9a:	3401      	adds	r4, #1
 8017c9c:	7801      	ldrb	r1, [r0, #0]
 8017c9e:	460b      	mov	r3, r1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
 8017ca0:	2920      	cmp	r1, #32
 8017ca2:	d0f9      	beq.n	8017c98 <strtoul+0xa>
 8017ca4:	3909      	subs	r1, #9
 8017ca6:	2904      	cmp	r1, #4
 8017ca8:	d9f6      	bls.n	8017c98 <strtoul+0xa>
	} while (isspace(c));
	if (c == '-') {
 8017caa:	2b2d      	cmp	r3, #45	; 0x2d
 8017cac:	d018      	beq.n	8017ce0 <strtoul+0x52>
		neg = 1;
		c = *s++;
	} else if (c == '+') {
 8017cae:	2b2b      	cmp	r3, #43	; 0x2b
 8017cb0:	d01b      	beq.n	8017cea <strtoul+0x5c>
	register int neg = 0, any, cutlim;
 8017cb2:	f04f 0900 	mov.w	r9, #0
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
 8017cb6:	b10a      	cbz	r2, 8017cbc <strtoul+0x2e>
 8017cb8:	2a10      	cmp	r2, #16
 8017cba:	d101      	bne.n	8017cc0 <strtoul+0x32>
 8017cbc:	2b30      	cmp	r3, #48	; 0x30
 8017cbe:	d019      	beq.n	8017cf4 <strtoul+0x66>
		c = s[1];
		s += 2;
		base = 16;
	}

	if (base == 0) {
 8017cc0:	b912      	cbnz	r2, 8017cc8 <strtoul+0x3a>
		base = c == '0' ? 8 : 10;
 8017cc2:	2b30      	cmp	r3, #48	; 0x30
 8017cc4:	d01f      	beq.n	8017d06 <strtoul+0x78>
 8017cc6:	220a      	movs	r2, #10
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
 8017cc8:	4696      	mov	lr, r2
 8017cca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8017cce:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
 8017cd2:	fb02 fc01 	mul.w	ip, r2, r1
 8017cd6:	ea6f 0c0c 	mvn.w	ip, ip
	for (acc = 0, any = 0;; c = *s++) {
 8017cda:	2600      	movs	r6, #0
 8017cdc:	4630      	mov	r0, r6
 8017cde:	e02d      	b.n	8017d3c <strtoul+0xae>
		c = *s++;
 8017ce0:	7823      	ldrb	r3, [r4, #0]
 8017ce2:	1c84      	adds	r4, r0, #2
		neg = 1;
 8017ce4:	f04f 0901 	mov.w	r9, #1
 8017ce8:	e7e5      	b.n	8017cb6 <strtoul+0x28>
		c = *s++;
 8017cea:	7823      	ldrb	r3, [r4, #0]
 8017cec:	1c84      	adds	r4, r0, #2
	register int neg = 0, any, cutlim;
 8017cee:	f04f 0900 	mov.w	r9, #0
 8017cf2:	e7e0      	b.n	8017cb6 <strtoul+0x28>
	    c == '0' && (*s == 'x' || *s == 'X')) {
 8017cf4:	7821      	ldrb	r1, [r4, #0]
 8017cf6:	2978      	cmp	r1, #120	; 0x78
 8017cf8:	d001      	beq.n	8017cfe <strtoul+0x70>
 8017cfa:	2958      	cmp	r1, #88	; 0x58
 8017cfc:	d1e0      	bne.n	8017cc0 <strtoul+0x32>
		c = s[1];
 8017cfe:	7863      	ldrb	r3, [r4, #1]
		s += 2;
 8017d00:	3402      	adds	r4, #2
		base = 16;
 8017d02:	2210      	movs	r2, #16
 8017d04:	e7dc      	b.n	8017cc0 <strtoul+0x32>
		base = c == '0' ? 8 : 10;
 8017d06:	2208      	movs	r2, #8
 8017d08:	e7de      	b.n	8017cc8 <strtoul+0x3a>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
 8017d0a:	f043 0a20 	orr.w	sl, r3, #32
 8017d0e:	f1aa 0a61 	sub.w	sl, sl, #97	; 0x61
		if (isdigit(c)) {
			c -= '0';
		} else if (isalpha(c)) {
 8017d12:	f1ba 0f19 	cmp.w	sl, #25
 8017d16:	d825      	bhi.n	8017d64 <strtoul+0xd6>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 8017d18:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
 8017d1c:	2d19      	cmp	r5, #25
 8017d1e:	d802      	bhi.n	8017d26 <strtoul+0x98>
 8017d20:	2537      	movs	r5, #55	; 0x37
 8017d22:	1b5b      	subs	r3, r3, r5
 8017d24:	e010      	b.n	8017d48 <strtoul+0xba>
 8017d26:	2557      	movs	r5, #87	; 0x57
 8017d28:	e7fb      	b.n	8017d22 <strtoul+0x94>
			break;
		}
		if (c >= base) {
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
 8017d2a:	4563      	cmp	r3, ip
 8017d2c:	dd13      	ble.n	8017d56 <strtoul+0xc8>
			any = -1;
 8017d2e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8017d32:	e001      	b.n	8017d38 <strtoul+0xaa>
 8017d34:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (acc = 0, any = 0;; c = *s++) {
 8017d38:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 8017d3c:	f1a3 0a30 	sub.w	sl, r3, #48	; 0x30
		if (isdigit(c)) {
 8017d40:	f1ba 0f09 	cmp.w	sl, #9
 8017d44:	d8e1      	bhi.n	8017d0a <strtoul+0x7c>
			c -= '0';
 8017d46:	4653      	mov	r3, sl
		if (c >= base) {
 8017d48:	429a      	cmp	r2, r3
 8017d4a:	dd0b      	ble.n	8017d64 <strtoul+0xd6>
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
 8017d4c:	2e00      	cmp	r6, #0
 8017d4e:	dbf1      	blt.n	8017d34 <strtoul+0xa6>
 8017d50:	4288      	cmp	r0, r1
 8017d52:	d804      	bhi.n	8017d5e <strtoul+0xd0>
 8017d54:	d0e9      	beq.n	8017d2a <strtoul+0x9c>
		} else {
			any = 1;
			acc *= base;
			acc += c;
 8017d56:	fb00 300e 	mla	r0, r0, lr, r3
			any = 1;
 8017d5a:	2601      	movs	r6, #1
 8017d5c:	e7ec      	b.n	8017d38 <strtoul+0xaa>
			any = -1;
 8017d5e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8017d62:	e7e9      	b.n	8017d38 <strtoul+0xaa>
		}
	}
	if (any < 0) {
 8017d64:	2e00      	cmp	r6, #0
 8017d66:	db0c      	blt.n	8017d82 <strtoul+0xf4>
		acc = ULONG_MAX;
		errno = ERANGE;
	} else if (neg) {
 8017d68:	f1b9 0f00 	cmp.w	r9, #0
 8017d6c:	d000      	beq.n	8017d70 <strtoul+0xe2>
		acc = -acc;
 8017d6e:	4240      	negs	r0, r0
	}
	if (endptr != NULL) {
 8017d70:	f1b8 0f00 	cmp.w	r8, #0
 8017d74:	d003      	beq.n	8017d7e <strtoul+0xf0>
		*endptr = (char *)(any ? s - 1 : nptr);
 8017d76:	b106      	cbz	r6, 8017d7a <strtoul+0xec>
 8017d78:	1e67      	subs	r7, r4, #1
 8017d7a:	f8c8 7000 	str.w	r7, [r8]
	}
	return acc;
}
 8017d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d82:	f7fb fc15 	bl	80135b0 <z_impl_z_errno>
		errno = ERANGE;
 8017d86:	2326      	movs	r3, #38	; 0x26
 8017d88:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
 8017d8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017d8e:	e7ef      	b.n	8017d70 <strtoul+0xe2>

08017d90 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
 8017d90:	4602      	mov	r2, r0
 8017d92:	780b      	ldrb	r3, [r1, #0]
 8017d94:	b11b      	cbz	r3, 8017d9e <strcpy+0xe>
		*d = *s;
 8017d96:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
 8017d9a:	3101      	adds	r1, #1
 8017d9c:	e7f9      	b.n	8017d92 <strcpy+0x2>
	}

	*d = '\0';
 8017d9e:	7013      	strb	r3, [r2, #0]

	return dest;
}
 8017da0:	4770      	bx	lr

08017da2 <strncpy>:

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
 8017da2:	4603      	mov	r3, r0
 8017da4:	b1aa      	cbz	r2, 8017dd2 <strncpy+0x30>
{
 8017da6:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
 8017da8:	780c      	ldrb	r4, [r1, #0]
 8017daa:	b12c      	cbz	r4, 8017db8 <strncpy+0x16>
		*d = *s;
 8017dac:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
 8017db0:	3101      	adds	r1, #1
		d++;
		n--;
 8017db2:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
 8017db4:	2a00      	cmp	r2, #0
 8017db6:	d1f7      	bne.n	8017da8 <strncpy+0x6>
	}

	while (n > 0) {
 8017db8:	b122      	cbz	r2, 8017dc4 <strncpy+0x22>
		*d = '\0';
 8017dba:	2100      	movs	r1, #0
 8017dbc:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
 8017dc0:	3a01      	subs	r2, #1
 8017dc2:	e7f9      	b.n	8017db8 <strncpy+0x16>
	}

	return dest;
}
 8017dc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017dc8:	4770      	bx	lr
		*d = '\0';
 8017dca:	2100      	movs	r1, #0
 8017dcc:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8017dd0:	3a01      	subs	r2, #1
	while (n > 0) {
 8017dd2:	2a00      	cmp	r2, #0
 8017dd4:	d1f9      	bne.n	8017dca <strncpy+0x28>
 8017dd6:	4770      	bx	lr

08017dd8 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
 8017dd8:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
 8017dda:	7803      	ldrb	r3, [r0, #0]
 8017ddc:	428b      	cmp	r3, r1
 8017dde:	d002      	beq.n	8017de6 <strchr+0xe>
 8017de0:	b10b      	cbz	r3, 8017de6 <strchr+0xe>
		s++;
 8017de2:	3001      	adds	r0, #1
 8017de4:	e7f9      	b.n	8017dda <strchr+0x2>
	}

	return (*s == tmp) ? (char *) s : NULL;
 8017de6:	428b      	cmp	r3, r1
 8017de8:	d100      	bne.n	8017dec <strchr+0x14>
}
 8017dea:	4770      	bx	lr
	return (*s == tmp) ? (char *) s : NULL;
 8017dec:	2000      	movs	r0, #0
 8017dee:	e7fc      	b.n	8017dea <strchr+0x12>

08017df0 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 8017df0:	4603      	mov	r3, r0
	size_t n = 0;
 8017df2:	2000      	movs	r0, #0

	while (*s != '\0') {
 8017df4:	781a      	ldrb	r2, [r3, #0]
 8017df6:	b112      	cbz	r2, 8017dfe <strlen+0xe>
		s++;
 8017df8:	3301      	adds	r3, #1
		n++;
 8017dfa:	3001      	adds	r0, #1
 8017dfc:	e7fa      	b.n	8017df4 <strlen+0x4>
	}

	return n;
}
 8017dfe:	4770      	bx	lr

08017e00 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
 8017e00:	7803      	ldrb	r3, [r0, #0]
 8017e02:	780a      	ldrb	r2, [r1, #0]
 8017e04:	4293      	cmp	r3, r2
 8017e06:	d103      	bne.n	8017e10 <strcmp+0x10>
 8017e08:	b113      	cbz	r3, 8017e10 <strcmp+0x10>
		s1++;
 8017e0a:	3001      	adds	r0, #1
		s2++;
 8017e0c:	3101      	adds	r1, #1
 8017e0e:	e7f7      	b.n	8017e00 <strcmp>
	}

	return *s1 - *s2;
}
 8017e10:	1a98      	subs	r0, r3, r2
 8017e12:	4770      	bx	lr

08017e14 <strncmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
 8017e14:	b19a      	cbz	r2, 8017e3e <strncmp+0x2a>
{
 8017e16:	b410      	push	{r4}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
 8017e18:	7803      	ldrb	r3, [r0, #0]
 8017e1a:	780c      	ldrb	r4, [r1, #0]
 8017e1c:	42a3      	cmp	r3, r4
 8017e1e:	d105      	bne.n	8017e2c <strncmp+0x18>
 8017e20:	b123      	cbz	r3, 8017e2c <strncmp+0x18>
		s1++;
 8017e22:	3001      	adds	r0, #1
		s2++;
 8017e24:	3101      	adds	r1, #1
		n--;
 8017e26:	3a01      	subs	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
 8017e28:	2a00      	cmp	r2, #0
 8017e2a:	d1f5      	bne.n	8017e18 <strncmp+0x4>
	}

	return (n == 0) ? 0 : (*s1 - *s2);
 8017e2c:	b12a      	cbz	r2, 8017e3a <strncmp+0x26>
 8017e2e:	7800      	ldrb	r0, [r0, #0]
 8017e30:	780b      	ldrb	r3, [r1, #0]
 8017e32:	1ac0      	subs	r0, r0, r3
}
 8017e34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e38:	4770      	bx	lr
	return (n == 0) ? 0 : (*s1 - *s2);
 8017e3a:	2000      	movs	r0, #0
 8017e3c:	e7fa      	b.n	8017e34 <strncmp+0x20>
 8017e3e:	b11a      	cbz	r2, 8017e48 <strncmp+0x34>
 8017e40:	7800      	ldrb	r0, [r0, #0]
 8017e42:	780b      	ldrb	r3, [r1, #0]
 8017e44:	1ac0      	subs	r0, r0, r3
 8017e46:	4770      	bx	lr
 8017e48:	2000      	movs	r0, #0
}
 8017e4a:	4770      	bx	lr

08017e4c <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
 8017e4c:	b182      	cbz	r2, 8017e70 <memcmp+0x24>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
 8017e4e:	1e53      	subs	r3, r2, #1
 8017e50:	d010      	beq.n	8017e74 <memcmp+0x28>
{
 8017e52:	b410      	push	{r4}
	while ((--n > 0) && (*c1 == *c2)) {
 8017e54:	7804      	ldrb	r4, [r0, #0]
 8017e56:	780a      	ldrb	r2, [r1, #0]
 8017e58:	4294      	cmp	r4, r2
 8017e5a:	d103      	bne.n	8017e64 <memcmp+0x18>
		c1++;
 8017e5c:	3001      	adds	r0, #1
		c2++;
 8017e5e:	3101      	adds	r1, #1
	while ((--n > 0) && (*c1 == *c2)) {
 8017e60:	3b01      	subs	r3, #1
 8017e62:	d1f7      	bne.n	8017e54 <memcmp+0x8>
	}

	return *c1 - *c2;
 8017e64:	7800      	ldrb	r0, [r0, #0]
 8017e66:	780b      	ldrb	r3, [r1, #0]
 8017e68:	1ac0      	subs	r0, r0, r3
}
 8017e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e6e:	4770      	bx	lr
		return 0;
 8017e70:	2000      	movs	r0, #0
 8017e72:	4770      	bx	lr
	return *c1 - *c2;
 8017e74:	7800      	ldrb	r0, [r0, #0]
 8017e76:	780b      	ldrb	r3, [r1, #0]
 8017e78:	1ac0      	subs	r0, r0, r3
}
 8017e7a:	4770      	bx	lr

08017e7c <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
 8017e7c:	b410      	push	{r4}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
 8017e7e:	ea80 0301 	eor.w	r3, r0, r1
 8017e82:	f013 0f03 	tst.w	r3, #3
 8017e86:	d001      	beq.n	8017e8c <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
 8017e88:	4603      	mov	r3, r0
 8017e8a:	e017      	b.n	8017ebc <memcpy+0x40>
 8017e8c:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
 8017e8e:	f013 0f03 	tst.w	r3, #3
 8017e92:	d00b      	beq.n	8017eac <memcpy+0x30>
			if (n == 0) {
 8017e94:	b1a2      	cbz	r2, 8017ec0 <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
 8017e96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017e9a:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
 8017e9e:	3a01      	subs	r2, #1
 8017ea0:	e7f5      	b.n	8017e8e <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
 8017ea2:	f851 4b04 	ldr.w	r4, [r1], #4
 8017ea6:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
 8017eaa:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
 8017eac:	2a03      	cmp	r2, #3
 8017eae:	d8f8      	bhi.n	8017ea2 <memcpy+0x26>
 8017eb0:	e004      	b.n	8017ebc <memcpy+0x40>
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
 8017eb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017eb6:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
 8017eba:	3a01      	subs	r2, #1
	while (n > 0) {
 8017ebc:	2a00      	cmp	r2, #0
 8017ebe:	d1f8      	bne.n	8017eb2 <memcpy+0x36>
	}

	return d;
}
 8017ec0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017ec4:	4770      	bx	lr

08017ec6 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
 8017ec6:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
 8017ec8:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
 8017eca:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
 8017ecc:	f013 0f03 	tst.w	r3, #3
 8017ed0:	d004      	beq.n	8017edc <memset+0x16>
		if (n == 0) {
 8017ed2:	b19a      	cbz	r2, 8017efc <memset+0x36>
			return buf;
		}
		*(d_byte++) = c_byte;
 8017ed4:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
 8017ed8:	3a01      	subs	r2, #1
 8017eda:	e7f7      	b.n	8017ecc <memset+0x6>
	};

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
 8017edc:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
 8017ede:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
 8017ee2:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
 8017ee6:	2a03      	cmp	r2, #3
 8017ee8:	d906      	bls.n	8017ef8 <memset+0x32>
		*(d_word++) = c_word;
 8017eea:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
 8017eee:	3a04      	subs	r2, #4
 8017ef0:	e7f9      	b.n	8017ee6 <memset+0x20>
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
		*(d_byte++) = c_byte;
 8017ef2:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
 8017ef6:	3a01      	subs	r2, #1
	while (n > 0) {
 8017ef8:	2a00      	cmp	r2, #0
 8017efa:	d1fa      	bne.n	8017ef2 <memset+0x2c>
	}

	return buf;
}
 8017efc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017f00:	4770      	bx	lr

08017f02 <_stdout_hook_default>:
}
 8017f02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017f06:	4770      	bx	lr

08017f08 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
 8017f08:	684b      	ldr	r3, [r1, #4]
 8017f0a:	2b01      	cmp	r3, #1
 8017f0c:	dd07      	ble.n	8017f1e <sprintf_out+0x16>
		*(p->ptr) = c;
 8017f0e:	680b      	ldr	r3, [r1, #0]
 8017f10:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
 8017f12:	680b      	ldr	r3, [r1, #0]
 8017f14:	3301      	adds	r3, #1
 8017f16:	600b      	str	r3, [r1, #0]
		p->len -= 1;
 8017f18:	684b      	ldr	r3, [r1, #4]
 8017f1a:	3b01      	subs	r3, #1
 8017f1c:	604b      	str	r3, [r1, #4]
}
 8017f1e:	2000      	movs	r0, #0
 8017f20:	4770      	bx	lr

08017f22 <internal_encrypt_le>:
}
#endif /* defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY) */

static int internal_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
			       uint8_t enc_data[16])
{
 8017f22:	b508      	push	{r3, lr}
#if defined(CONFIG_BT_CTLR) && defined(CONFIG_BT_HOST_CRYPTO) && \
    defined(CONFIG_BT_CTLR_LE_ENC)
	ecb_encrypt(key, plaintext, enc_data, NULL);
	return 0;
#else
	return bt_encrypt_le(key, plaintext, enc_data);
 8017f24:	f000 fc4a 	bl	80187bc <bt_encrypt_le>
#endif
}
 8017f28:	bd08      	pop	{r3, pc}

08017f2a <ah>:

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
 8017f2a:	b530      	push	{r4, r5, lr}
 8017f2c:	b085      	sub	sp, #20
 8017f2e:	4604      	mov	r4, r0
 8017f30:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
 8017f32:	2203      	movs	r2, #3
 8017f34:	4668      	mov	r0, sp
 8017f36:	f7ff ffa1 	bl	8017e7c <memcpy>
	(void)memset(res + 3, 0, 13);
 8017f3a:	220d      	movs	r2, #13
 8017f3c:	2100      	movs	r1, #0
 8017f3e:	f10d 0003 	add.w	r0, sp, #3
 8017f42:	f7ff ffc0 	bl	8017ec6 <memset>

	err = internal_encrypt_le(irk, res, res);
 8017f46:	466a      	mov	r2, sp
 8017f48:	4669      	mov	r1, sp
 8017f4a:	4620      	mov	r0, r4
 8017f4c:	f7ff ffe9 	bl	8017f22 <internal_encrypt_le>
	if (err) {
 8017f50:	4604      	mov	r4, r0
 8017f52:	b110      	cbz	r0, 8017f5a <ah+0x30>
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
 8017f54:	4620      	mov	r0, r4
 8017f56:	b005      	add	sp, #20
 8017f58:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
 8017f5a:	2203      	movs	r2, #3
 8017f5c:	4669      	mov	r1, sp
 8017f5e:	4628      	mov	r0, r5
 8017f60:	f7ff ff8c 	bl	8017e7c <memcpy>
	return 0;
 8017f64:	e7f6      	b.n	8017f54 <ah+0x2a>

08017f66 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
 8017f66:	b510      	push	{r4, lr}
 8017f68:	b082      	sub	sp, #8
 8017f6a:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
 8017f6c:	aa01      	add	r2, sp, #4
 8017f6e:	3103      	adds	r1, #3
 8017f70:	f7ff ffdb 	bl	8017f2a <ah>
	if (err) {
 8017f74:	b110      	cbz	r0, 8017f7c <bt_rpa_irk_matches+0x16>
		return false;
 8017f76:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
 8017f78:	b002      	add	sp, #8
 8017f7a:	bd10      	pop	{r4, pc}
	return !memcmp(addr->val, hash, 3);
 8017f7c:	2203      	movs	r2, #3
 8017f7e:	a901      	add	r1, sp, #4
 8017f80:	4620      	mov	r0, r4
 8017f82:	f7ff ff63 	bl	8017e4c <memcmp>
 8017f86:	fab0 f080 	clz	r0, r0
 8017f8a:	0940      	lsrs	r0, r0, #5
 8017f8c:	e7f4      	b.n	8017f78 <bt_rpa_irk_matches+0x12>

08017f8e <bt_settings_decode_key>:
{
 8017f8e:	b570      	push	{r4, r5, r6, lr}
 8017f90:	4605      	mov	r5, r0
 8017f92:	460e      	mov	r6, r1
	if (settings_name_next(key, NULL) != 13) {
 8017f94:	2100      	movs	r1, #0
 8017f96:	f7fe ffe3 	bl	8016f60 <settings_name_next>
 8017f9a:	280d      	cmp	r0, #13
 8017f9c:	d11b      	bne.n	8017fd6 <bt_settings_decode_key+0x48>
	if (key[12] == '0') {
 8017f9e:	7b2b      	ldrb	r3, [r5, #12]
 8017fa0:	2b30      	cmp	r3, #48	; 0x30
 8017fa2:	d013      	beq.n	8017fcc <bt_settings_decode_key+0x3e>
	} else if (key[12] == '1') {
 8017fa4:	2b31      	cmp	r3, #49	; 0x31
 8017fa6:	d119      	bne.n	8017fdc <bt_settings_decode_key+0x4e>
		addr->type = BT_ADDR_LE_RANDOM;
 8017fa8:	2301      	movs	r3, #1
 8017faa:	7033      	strb	r3, [r6, #0]
{
 8017fac:	2400      	movs	r4, #0
	for (uint8_t i = 0; i < 6; i++) {
 8017fae:	2c05      	cmp	r4, #5
 8017fb0:	d80f      	bhi.n	8017fd2 <bt_settings_decode_key+0x44>
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
 8017fb2:	f1c4 0205 	rsb	r2, r4, #5
 8017fb6:	4432      	add	r2, r6
 8017fb8:	2301      	movs	r3, #1
 8017fba:	441a      	add	r2, r3
 8017fbc:	2102      	movs	r1, #2
 8017fbe:	eb05 0044 	add.w	r0, r5, r4, lsl #1
 8017fc2:	f7fd f8ef 	bl	80151a4 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
 8017fc6:	3401      	adds	r4, #1
 8017fc8:	b2e4      	uxtb	r4, r4
 8017fca:	e7f0      	b.n	8017fae <bt_settings_decode_key+0x20>
		addr->type = BT_ADDR_LE_PUBLIC;
 8017fcc:	2300      	movs	r3, #0
 8017fce:	7033      	strb	r3, [r6, #0]
 8017fd0:	e7ec      	b.n	8017fac <bt_settings_decode_key+0x1e>
	return 0;
 8017fd2:	2000      	movs	r0, #0
}
 8017fd4:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
 8017fd6:	f06f 0015 	mvn.w	r0, #21
 8017fda:	e7fb      	b.n	8017fd4 <bt_settings_decode_key+0x46>
		return -EINVAL;
 8017fdc:	f06f 0015 	mvn.w	r0, #21
 8017fe0:	e7f8      	b.n	8017fd4 <bt_settings_decode_key+0x46>

08017fe2 <uuid128_cmp>:

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
 8017fe2:	b510      	push	{r4, lr}
 8017fe4:	b08a      	sub	sp, #40	; 0x28
 8017fe6:	460c      	mov	r4, r1
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
 8017fe8:	a905      	add	r1, sp, #20
 8017fea:	f7f1 fdf9 	bl	8009be0 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
 8017fee:	4669      	mov	r1, sp
 8017ff0:	4620      	mov	r0, r4
 8017ff2:	f7f1 fdf5 	bl	8009be0 <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
 8017ff6:	2210      	movs	r2, #16
 8017ff8:	f10d 0101 	add.w	r1, sp, #1
 8017ffc:	f10d 0015 	add.w	r0, sp, #21
 8018000:	f7ff ff24 	bl	8017e4c <memcmp>
}
 8018004:	b00a      	add	sp, #40	; 0x28
 8018006:	bd10      	pop	{r4, pc}

08018008 <bt_uuid_cmp>:

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
 8018008:	b508      	push	{r3, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
 801800a:	7803      	ldrb	r3, [r0, #0]
 801800c:	780a      	ldrb	r2, [r1, #0]
 801800e:	4293      	cmp	r3, r2
 8018010:	d107      	bne.n	8018022 <bt_uuid_cmp+0x1a>
		return uuid128_cmp(u1, u2);
	}

	switch (u1->type) {
 8018012:	2b01      	cmp	r3, #1
 8018014:	d00c      	beq.n	8018030 <bt_uuid_cmp+0x28>
 8018016:	2b02      	cmp	r3, #2
 8018018:	d00e      	beq.n	8018038 <bt_uuid_cmp+0x30>
 801801a:	b12b      	cbz	r3, 8018028 <bt_uuid_cmp+0x20>
 801801c:	f06f 0015 	mvn.w	r0, #21
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
 8018020:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
 8018022:	f7ff ffde 	bl	8017fe2 <uuid128_cmp>
 8018026:	e7fb      	b.n	8018020 <bt_uuid_cmp+0x18>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
 8018028:	8840      	ldrh	r0, [r0, #2]
 801802a:	884b      	ldrh	r3, [r1, #2]
 801802c:	1ac0      	subs	r0, r0, r3
 801802e:	e7f7      	b.n	8018020 <bt_uuid_cmp+0x18>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
 8018030:	6840      	ldr	r0, [r0, #4]
 8018032:	684b      	ldr	r3, [r1, #4]
 8018034:	1ac0      	subs	r0, r0, r3
 8018036:	e7f3      	b.n	8018020 <bt_uuid_cmp+0x18>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
 8018038:	2210      	movs	r2, #16
 801803a:	3101      	adds	r1, #1
 801803c:	3001      	adds	r0, #1
 801803e:	f7ff ff05 	bl	8017e4c <memcmp>
 8018042:	e7ed      	b.n	8018020 <bt_uuid_cmp+0x18>

08018044 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
 8018044:	b538      	push	{r3, r4, r5, lr}
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
 8018046:	2a04      	cmp	r2, #4
 8018048:	d00e      	beq.n	8018068 <bt_uuid_create+0x24>
 801804a:	2a10      	cmp	r2, #16
 801804c:	d01b      	beq.n	8018086 <bt_uuid_create+0x42>
 801804e:	2a02      	cmp	r2, #2
 8018050:	d001      	beq.n	8018056 <bt_uuid_create+0x12>
 8018052:	2000      	movs	r0, #0
		break;
	default:
		return false;
	}
	return true;
}
 8018054:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_16;
 8018056:	2300      	movs	r3, #0
 8018058:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
 801805a:	784a      	ldrb	r2, [r1, #1]
 801805c:	780b      	ldrb	r3, [r1, #0]
 801805e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
 8018062:	8043      	strh	r3, [r0, #2]
	return true;
 8018064:	2001      	movs	r0, #1
		break;
 8018066:	e7f5      	b.n	8018054 <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_32;
 8018068:	2301      	movs	r3, #1
 801806a:	7003      	strb	r3, [r0, #0]
 801806c:	78cc      	ldrb	r4, [r1, #3]
 801806e:	788a      	ldrb	r2, [r1, #2]
 8018070:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
 8018074:	784d      	ldrb	r5, [r1, #1]
 8018076:	780a      	ldrb	r2, [r1, #0]
 8018078:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
 801807c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
 8018080:	6042      	str	r2, [r0, #4]
	return true;
 8018082:	4618      	mov	r0, r3
		break;
 8018084:	e7e6      	b.n	8018054 <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_128;
 8018086:	2302      	movs	r3, #2
 8018088:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
 801808c:	2210      	movs	r2, #16
 801808e:	f7ff fef5 	bl	8017e7c <memcpy>
	return true;
 8018092:	2001      	movs	r0, #1
		break;
 8018094:	e7de      	b.n	8018054 <bt_uuid_create+0x10>

08018096 <bt_le_adv_random_addr_check>:
}
 8018096:	2001      	movs	r0, #1
 8018098:	4770      	bx	lr

0801809a <get_phy>:
	switch (hci_phy) {
 801809a:	2802      	cmp	r0, #2
 801809c:	d004      	beq.n	80180a8 <get_phy+0xe>
 801809e:	2803      	cmp	r0, #3
 80180a0:	d004      	beq.n	80180ac <get_phy+0x12>
 80180a2:	2801      	cmp	r0, #1
 80180a4:	d001      	beq.n	80180aa <get_phy+0x10>
		return 0;
 80180a6:	2000      	movs	r0, #0
}
 80180a8:	4770      	bx	lr
 80180aa:	4770      	bx	lr
		return BT_GAP_LE_PHY_CODED;
 80180ac:	2004      	movs	r0, #4
 80180ae:	4770      	bx	lr

080180b0 <hci_vendor_event>:
}
 80180b0:	4770      	bx	lr

080180b2 <get_filter_policy>:
}
 80180b2:	2000      	movs	r0, #0
 80180b4:	4770      	bx	lr

080180b6 <adv_id_check_connectable_func>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80180b6:	f3bf 8f5b 	dmb	ish
 80180ba:	6943      	ldr	r3, [r0, #20]
 80180bc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
 80180c0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80180c4:	d100      	bne.n	80180c8 <adv_id_check_connectable_func+0x12>
}
 80180c6:	4770      	bx	lr
 80180c8:	f3bf 8f5b 	dmb	ish
 80180cc:	6943      	ldr	r3, [r0, #20]
 80180ce:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
 80180d2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80180d6:	d0f6      	beq.n	80180c6 <adv_id_check_connectable_func+0x10>
	    check_data->id != adv->id) {
 80180d8:	780a      	ldrb	r2, [r1, #0]
 80180da:	7803      	ldrb	r3, [r0, #0]
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
 80180dc:	429a      	cmp	r2, r3
 80180de:	d0f2      	beq.n	80180c6 <adv_id_check_connectable_func+0x10>
		check_data->adv_enabled = true;
 80180e0:	2301      	movs	r3, #1
 80180e2:	704b      	strb	r3, [r1, #1]
}
 80180e4:	e7ef      	b.n	80180c6 <adv_id_check_connectable_func+0x10>

080180e6 <valid_adv_param>:
{
 80180e6:	b508      	push	{r3, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
 80180e8:	6843      	ldr	r3, [r0, #4]
 80180ea:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80180ee:	d107      	bne.n	8018100 <valid_adv_param+0x1a>
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
 80180f0:	6902      	ldr	r2, [r0, #16]
 80180f2:	b112      	cbz	r2, 80180fa <valid_adv_param+0x14>
 80180f4:	f013 0f01 	tst.w	r3, #1
 80180f8:	d004      	beq.n	8018104 <valid_adv_param+0x1e>
	return valid_adv_ext_param(param);
 80180fa:	f7f1 ff1f 	bl	8009f3c <valid_adv_ext_param>
}
 80180fe:	bd08      	pop	{r3, pc}
		return false;
 8018100:	2000      	movs	r0, #0
 8018102:	e7fc      	b.n	80180fe <valid_adv_param+0x18>
		return false;
 8018104:	2000      	movs	r0, #0
 8018106:	e7fa      	b.n	80180fe <valid_adv_param+0x18>

08018108 <unpair_remote>:
{
 8018108:	b508      	push	{r3, lr}
 801810a:	460b      	mov	r3, r1
	unpair(*id, &info->addr);
 801810c:	4601      	mov	r1, r0
 801810e:	7818      	ldrb	r0, [r3, #0]
 8018110:	f7f1 ff94 	bl	800a03c <unpair>
}
 8018114:	bd08      	pop	{r3, pc}

08018116 <cmd_state_set_init>:
	state->target = target;
 8018116:	6001      	str	r1, [r0, #0]
	state->bit = bit;
 8018118:	6042      	str	r2, [r0, #4]
	state->val = val;
 801811a:	7203      	strb	r3, [r0, #8]
}
 801811c:	4770      	bx	lr

0801811e <set_le_adv_enable>:
{
 801811e:	b508      	push	{r3, lr}
	return set_le_adv_enable_legacy(adv, enable);
 8018120:	f7f3 f8da 	bl	800b2d8 <set_le_adv_enable_legacy>
}
 8018124:	bd08      	pop	{r3, pc}

08018126 <adv_unpause_enabled>:
{
 8018126:	b508      	push	{r3, lr}
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
 8018128:	f100 0314 	add.w	r3, r0, #20
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 801812c:	f3bf 8f5b 	dmb	ish
 8018130:	e853 2f00 	ldrex	r2, [r3]
 8018134:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8018138:	e843 1c00 	strex	ip, r1, [r3]
 801813c:	f1bc 0f00 	cmp.w	ip, #0
 8018140:	d1f6      	bne.n	8018130 <adv_unpause_enabled+0xa>
 8018142:	f3bf 8f5b 	dmb	ish
 8018146:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 801814a:	d100      	bne.n	801814e <adv_unpause_enabled+0x28>
}
 801814c:	bd08      	pop	{r3, pc}
		set_le_adv_enable(adv, true);
 801814e:	2101      	movs	r1, #1
 8018150:	f7ff ffe5 	bl	801811e <set_le_adv_enable>
}
 8018154:	e7fa      	b.n	801814c <adv_unpause_enabled+0x26>

08018156 <adv_pause_enabled>:
{
 8018156:	b508      	push	{r3, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8018158:	f3bf 8f5b 	dmb	ish
 801815c:	6943      	ldr	r3, [r0, #20]
 801815e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
 8018162:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018166:	d010      	beq.n	801818a <adv_pause_enabled+0x34>
 8018168:	f100 0214 	add.w	r2, r0, #20
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 801816c:	f3bf 8f5b 	dmb	ish
 8018170:	e852 3f00 	ldrex	r3, [r2]
 8018174:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018178:	e842 3100 	strex	r1, r3, [r2]
 801817c:	2900      	cmp	r1, #0
 801817e:	d1f7      	bne.n	8018170 <adv_pause_enabled+0x1a>
 8018180:	f3bf 8f5b 	dmb	ish
		set_le_adv_enable(adv, false);
 8018184:	2100      	movs	r1, #0
 8018186:	f7ff ffca 	bl	801811e <set_le_adv_enable>
}
 801818a:	bd08      	pop	{r3, pc}

0801818c <hci_id_add>:
{
 801818c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801818e:	460e      	mov	r6, r1
 8018190:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
 8018192:	2127      	movs	r1, #39	; 0x27
 8018194:	f242 0027 	movw	r0, #8231	; 0x2027
 8018198:	f7f2 fd72 	bl	800ac80 <bt_hci_cmd_create>
	if (!buf) {
 801819c:	b1d8      	cbz	r0, 80181d6 <hci_id_add+0x4a>
 801819e:	4607      	mov	r7, r0
	cp = net_buf_add(buf, sizeof(*cp));
 80181a0:	2127      	movs	r1, #39	; 0x27
 80181a2:	3008      	adds	r0, #8
 80181a4:	f002 ff57 	bl	801b056 <net_buf_simple_add>
 80181a8:	4604      	mov	r4, r0
	memcpy(dst, src, sizeof(*dst));
 80181aa:	2207      	movs	r2, #7
 80181ac:	4631      	mov	r1, r6
 80181ae:	f7ff fe65 	bl	8017e7c <memcpy>
	memcpy(cp->peer_irk, peer_irk, 16);
 80181b2:	2210      	movs	r2, #16
 80181b4:	4629      	mov	r1, r5
 80181b6:	1de0      	adds	r0, r4, #7
 80181b8:	f7ff fe60 	bl	8017e7c <memcpy>
	(void)memset(cp->local_irk, 0, 16);
 80181bc:	2210      	movs	r2, #16
 80181be:	2100      	movs	r1, #0
 80181c0:	f104 0017 	add.w	r0, r4, #23
 80181c4:	f7ff fe7f 	bl	8017ec6 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
 80181c8:	2200      	movs	r2, #0
 80181ca:	4639      	mov	r1, r7
 80181cc:	f242 0027 	movw	r0, #8231	; 0x2027
 80181d0:	f7f2 fd92 	bl	800acf8 <bt_hci_cmd_send_sync>
}
 80181d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
 80181d6:	f06f 0036 	mvn.w	r0, #54	; 0x36
 80181da:	e7fb      	b.n	80181d4 <hci_id_add+0x48>

080181dc <keys_add_id>:
{
 80181dc:	b508      	push	{r3, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
 80181de:	7a03      	ldrb	r3, [r0, #8]
 80181e0:	f013 0f04 	tst.w	r3, #4
 80181e4:	d100      	bne.n	80181e8 <keys_add_id+0xc>
}
 80181e6:	bd08      	pop	{r3, pc}
 80181e8:	4601      	mov	r1, r0
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
 80181ea:	4602      	mov	r2, r0
 80181ec:	f812 0b2a 	ldrb.w	r0, [r2], #42
 80181f0:	3101      	adds	r1, #1
 80181f2:	f7ff ffcb 	bl	801818c <hci_id_add>
}
 80181f6:	e7f6      	b.n	80181e6 <keys_add_id+0xa>

080181f8 <addr_res_enable>:
{
 80181f8:	b538      	push	{r3, r4, r5, lr}
 80181fa:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
 80181fc:	2101      	movs	r1, #1
 80181fe:	f242 002d 	movw	r0, #8237	; 0x202d
 8018202:	f7f2 fd3d 	bl	800ac80 <bt_hci_cmd_create>
	if (!buf) {
 8018206:	b158      	cbz	r0, 8018220 <addr_res_enable+0x28>
 8018208:	4605      	mov	r5, r0
	net_buf_add_u8(buf, enable);
 801820a:	4621      	mov	r1, r4
 801820c:	3008      	adds	r0, #8
 801820e:	f002 ff33 	bl	801b078 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
 8018212:	2200      	movs	r2, #0
 8018214:	4629      	mov	r1, r5
 8018216:	f242 002d 	movw	r0, #8237	; 0x202d
 801821a:	f7f2 fd6d 	bl	800acf8 <bt_hci_cmd_send_sync>
}
 801821e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
 8018220:	f06f 0036 	mvn.w	r0, #54	; 0x36
 8018224:	e7fb      	b.n	801821e <addr_res_enable+0x26>

08018226 <hci_id_del>:
{
 8018226:	b538      	push	{r3, r4, r5, lr}
 8018228:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
 801822a:	2107      	movs	r1, #7
 801822c:	f242 0028 	movw	r0, #8232	; 0x2028
 8018230:	f7f2 fd26 	bl	800ac80 <bt_hci_cmd_create>
	if (!buf) {
 8018234:	b178      	cbz	r0, 8018256 <hci_id_del+0x30>
 8018236:	4605      	mov	r5, r0
	cp = net_buf_add(buf, sizeof(*cp));
 8018238:	2107      	movs	r1, #7
 801823a:	3008      	adds	r0, #8
 801823c:	f002 ff0b 	bl	801b056 <net_buf_simple_add>
 8018240:	2207      	movs	r2, #7
 8018242:	4621      	mov	r1, r4
 8018244:	f7ff fe1a 	bl	8017e7c <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
 8018248:	2200      	movs	r2, #0
 801824a:	4629      	mov	r1, r5
 801824c:	f242 0028 	movw	r0, #8232	; 0x2028
 8018250:	f7f2 fd52 	bl	800acf8 <bt_hci_cmd_send_sync>
}
 8018254:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
 8018256:	f06f 0036 	mvn.w	r0, #54	; 0x36
 801825a:	e7fb      	b.n	8018254 <hci_id_del+0x2e>

0801825c <hci_set_ad>:
{
 801825c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018260:	b082      	sub	sp, #8
 8018262:	4607      	mov	r7, r0
 8018264:	460d      	mov	r5, r1
 8018266:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
 8018268:	2120      	movs	r1, #32
 801826a:	f7f2 fd09 	bl	800ac80 <bt_hci_cmd_create>
	if (!buf) {
 801826e:	b300      	cbz	r0, 80182b2 <hci_set_ad+0x56>
 8018270:	4680      	mov	r8, r0
	set_data = net_buf_add(buf, sizeof(*set_data));
 8018272:	2120      	movs	r1, #32
 8018274:	3008      	adds	r0, #8
 8018276:	f002 feee 	bl	801b056 <net_buf_simple_add>
 801827a:	4604      	mov	r4, r0
	(void)memset(set_data, 0, sizeof(*set_data));
 801827c:	2220      	movs	r2, #32
 801827e:	2100      	movs	r1, #0
 8018280:	f7ff fe21 	bl	8017ec6 <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
 8018284:	9400      	str	r4, [sp, #0]
 8018286:	4633      	mov	r3, r6
 8018288:	462a      	mov	r2, r5
 801828a:	211f      	movs	r1, #31
 801828c:	1c60      	adds	r0, r4, #1
 801828e:	f7f1 fd87 	bl	8009da0 <set_data_add>
	if (err) {
 8018292:	4604      	mov	r4, r0
 8018294:	b948      	cbnz	r0, 80182aa <hci_set_ad+0x4e>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
 8018296:	2200      	movs	r2, #0
 8018298:	4641      	mov	r1, r8
 801829a:	4638      	mov	r0, r7
 801829c:	f7f2 fd2c 	bl	800acf8 <bt_hci_cmd_send_sync>
 80182a0:	4604      	mov	r4, r0
}
 80182a2:	4620      	mov	r0, r4
 80182a4:	b002      	add	sp, #8
 80182a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
 80182aa:	4640      	mov	r0, r8
 80182ac:	f002 fe89 	bl	801afc2 <net_buf_unref>
		return err;
 80182b0:	e7f7      	b.n	80182a2 <hci_set_ad+0x46>
		return -ENOBUFS;
 80182b2:	f06f 0436 	mvn.w	r4, #54	; 0x36
 80182b6:	e7f4      	b.n	80182a2 <hci_set_ad+0x46>

080182b8 <set_ad>:
{
 80182b8:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
 80182ba:	f242 0008 	movw	r0, #8200	; 0x2008
 80182be:	f7ff ffcd 	bl	801825c <hci_set_ad>
}
 80182c2:	bd08      	pop	{r3, pc}

080182c4 <set_sd>:
{
 80182c4:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
 80182c6:	f242 0009 	movw	r0, #8201	; 0x2009
 80182ca:	f7ff ffc7 	bl	801825c <hci_set_ad>
}
 80182ce:	bd08      	pop	{r3, pc}

080182d0 <set_adv_random_address>:
{
 80182d0:	b508      	push	{r3, lr}
		return set_random_address(addr);
 80182d2:	4608      	mov	r0, r1
 80182d4:	f7f3 f8c6 	bl	800b464 <set_random_address>
}
 80182d8:	bd08      	pop	{r3, pc}

080182da <le_adv_set_private_addr>:
{
 80182da:	b510      	push	{r4, lr}
 80182dc:	b082      	sub	sp, #8
 80182de:	4604      	mov	r4, r0
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
 80182e0:	2106      	movs	r1, #6
 80182e2:	4668      	mov	r0, sp
 80182e4:	f7f4 fe64 	bl	800cfb0 <bt_rand>
	if (err) {
 80182e8:	b108      	cbz	r0, 80182ee <le_adv_set_private_addr+0x14>
}
 80182ea:	b002      	add	sp, #8
 80182ec:	bd10      	pop	{r4, pc}
	nrpa.val[5] &= 0x3f;
 80182ee:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80182f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80182f6:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_adv_random_address(adv, &nrpa);
 80182fa:	4669      	mov	r1, sp
 80182fc:	4620      	mov	r0, r4
 80182fe:	f7ff ffe7 	bl	80182d0 <set_adv_random_address>
 8018302:	e7f2      	b.n	80182ea <le_adv_set_private_addr+0x10>

08018304 <bt_lookup_id_addr>:
{
 8018304:	b510      	push	{r4, lr}
 8018306:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
 8018308:	f7f9 fee2 	bl	80120d0 <bt_keys_find_irk>
		if (keys) {
 801830c:	b108      	cbz	r0, 8018312 <bt_lookup_id_addr+0xe>
			return &keys->addr;
 801830e:	3001      	adds	r0, #1
}
 8018310:	bd10      	pop	{r4, pc}
	return addr;
 8018312:	4620      	mov	r0, r4
 8018314:	e7fc      	b.n	8018310 <bt_lookup_id_addr+0xc>

08018316 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
 8018316:	8802      	ldrh	r2, [r0, #0]
 8018318:	8843      	ldrh	r3, [r0, #2]
 801831a:	429a      	cmp	r2, r3
 801831c:	d81a      	bhi.n	8018354 <bt_le_conn_params_valid+0x3e>
 801831e:	2a05      	cmp	r2, #5
 8018320:	d91a      	bls.n	8018358 <bt_le_conn_params_valid+0x42>
	    param->interval_min < 6 || param->interval_max > 3200) {
 8018322:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8018326:	d819      	bhi.n	801835c <bt_le_conn_params_valid+0x46>
	if (param->latency > 499) {
 8018328:	8881      	ldrh	r1, [r0, #4]
 801832a:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 801832e:	d217      	bcs.n	8018360 <bt_le_conn_params_valid+0x4a>
{
 8018330:	b410      	push	{r4}
	if (param->timeout < 10 || param->timeout > 3200 ||
 8018332:	88c0      	ldrh	r0, [r0, #6]
 8018334:	f1a0 020a 	sub.w	r2, r0, #10
 8018338:	b292      	uxth	r2, r2
 801833a:	f640 4476 	movw	r4, #3190	; 0xc76
 801833e:	42a2      	cmp	r2, r4
 8018340:	d810      	bhi.n	8018364 <bt_le_conn_params_valid+0x4e>
	     ((1U + param->latency) * param->interval_max))) {
 8018342:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
 8018346:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
 801834a:	d20d      	bcs.n	8018368 <bt_le_conn_params_valid+0x52>
	return true;
 801834c:	2001      	movs	r0, #1
}
 801834e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018352:	4770      	bx	lr
		return false;
 8018354:	2000      	movs	r0, #0
 8018356:	4770      	bx	lr
 8018358:	2000      	movs	r0, #0
 801835a:	4770      	bx	lr
 801835c:	2000      	movs	r0, #0
 801835e:	4770      	bx	lr
		return false;
 8018360:	2000      	movs	r0, #0
}
 8018362:	4770      	bx	lr
		return false;
 8018364:	2000      	movs	r0, #0
 8018366:	e7f2      	b.n	801834e <bt_le_conn_params_valid+0x38>
 8018368:	2000      	movs	r0, #0
 801836a:	e7f0      	b.n	801834e <bt_le_conn_params_valid+0x38>

0801836c <bt_security_err_get>:
	switch (hci_err) {
 801836c:	2829      	cmp	r0, #41	; 0x29
 801836e:	d81e      	bhi.n	80183ae <bt_security_err_get+0x42>
 8018370:	e8df f000 	tbb	[pc, r0]
 8018374:	1d1d1d20 	.word	0x1d1d1d20
 8018378:	1d151f1d 	.word	0x1d151f1d
 801837c:	1d1d1d1d 	.word	0x1d1d1d1d
 8018380:	1d1d1d1d 	.word	0x1d1d1d1d
 8018384:	1d1b1d1d 	.word	0x1d1b1d1d
 8018388:	1d1d1d1d 	.word	0x1d1d1d1d
 801838c:	1d1d1d19 	.word	0x1d1d1d19
 8018390:	1d1d1d1d 	.word	0x1d1d1d1d
 8018394:	1d1d1d1d 	.word	0x1d1d1d1d
 8018398:	1d1d1d1d 	.word	0x1d1d1d1d
 801839c:	171d      	.short	0x171d
		return BT_SECURITY_ERR_PIN_OR_KEY_MISSING;
 801839e:	2002      	movs	r0, #2
 80183a0:	4770      	bx	lr
		return BT_SECURITY_ERR_PAIR_NOT_SUPPORTED;
 80183a2:	2005      	movs	r0, #5
 80183a4:	4770      	bx	lr
		return BT_SECURITY_ERR_PAIR_NOT_ALLOWED;
 80183a6:	2006      	movs	r0, #6
 80183a8:	4770      	bx	lr
		return BT_SECURITY_ERR_INVALID_PARAM;
 80183aa:	2007      	movs	r0, #7
 80183ac:	4770      	bx	lr
		return BT_SECURITY_ERR_UNSPECIFIED;
 80183ae:	2008      	movs	r0, #8
 80183b0:	4770      	bx	lr
		return BT_SECURITY_ERR_AUTH_FAIL;
 80183b2:	2001      	movs	r0, #1
}
 80183b4:	4770      	bx	lr

080183b6 <pending_id_update>:
{
 80183b6:	b508      	push	{r3, lr}
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
 80183b8:	7a03      	ldrb	r3, [r0, #8]
 80183ba:	f013 0f01 	tst.w	r3, #1
 80183be:	d103      	bne.n	80183c8 <pending_id_update+0x12>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
 80183c0:	f013 0f02 	tst.w	r3, #2
 80183c4:	d106      	bne.n	80183d4 <pending_id_update+0x1e>
}
 80183c6:	bd08      	pop	{r3, pc}
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
 80183c8:	f023 0301 	bic.w	r3, r3, #1
 80183cc:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
 80183ce:	f7f3 f9b9 	bl	800b744 <bt_id_add>
		return;
 80183d2:	e7f8      	b.n	80183c6 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
 80183d4:	f023 0302 	bic.w	r3, r3, #2
 80183d8:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
 80183da:	f7f3 fa8d 	bl	800b8f8 <bt_id_del>
		return;
 80183de:	e7f2      	b.n	80183c6 <pending_id_update+0x10>

080183e0 <bt_addr_le_create_static>:
{
 80183e0:	b510      	push	{r4, lr}
 80183e2:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
 80183e4:	2301      	movs	r3, #1
 80183e6:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
 80183ea:	2106      	movs	r1, #6
 80183ec:	f7f4 fde0 	bl	800cfb0 <bt_rand>
	if (err) {
 80183f0:	b918      	cbnz	r0, 80183fa <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
 80183f2:	79a3      	ldrb	r3, [r4, #6]
 80183f4:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80183f8:	71a3      	strb	r3, [r4, #6]
}
 80183fa:	bd10      	pop	{r4, pc}

080183fc <bt_hci_disconnect>:
{
 80183fc:	b570      	push	{r4, r5, r6, lr}
 80183fe:	4605      	mov	r5, r0
 8018400:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
 8018402:	2103      	movs	r1, #3
 8018404:	f240 4006 	movw	r0, #1030	; 0x406
 8018408:	f7f2 fc3a 	bl	800ac80 <bt_hci_cmd_create>
	if (!buf) {
 801840c:	b160      	cbz	r0, 8018428 <bt_hci_disconnect+0x2c>
 801840e:	4606      	mov	r6, r0
	disconn = net_buf_add(buf, sizeof(*disconn));
 8018410:	2103      	movs	r1, #3
 8018412:	3008      	adds	r0, #8
 8018414:	f002 fe1f 	bl	801b056 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
 8018418:	8005      	strh	r5, [r0, #0]
	disconn->reason = reason;
 801841a:	7084      	strb	r4, [r0, #2]
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
 801841c:	4631      	mov	r1, r6
 801841e:	f240 4006 	movw	r0, #1030	; 0x406
 8018422:	f7f3 fb47 	bl	800bab4 <bt_hci_cmd_send>
}
 8018426:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
 8018428:	f06f 0036 	mvn.w	r0, #54	; 0x36
 801842c:	e7fb      	b.n	8018426 <bt_hci_disconnect+0x2a>

0801842e <bt_le_set_data_len>:
{
 801842e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018430:	4606      	mov	r6, r0
 8018432:	460f      	mov	r7, r1
 8018434:	4614      	mov	r4, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
 8018436:	2106      	movs	r1, #6
 8018438:	f242 0022 	movw	r0, #8226	; 0x2022
 801843c:	f7f2 fc20 	bl	800ac80 <bt_hci_cmd_create>
	if (!buf) {
 8018440:	b170      	cbz	r0, 8018460 <bt_le_set_data_len+0x32>
 8018442:	4605      	mov	r5, r0
	cp = net_buf_add(buf, sizeof(*cp));
 8018444:	2106      	movs	r1, #6
 8018446:	3008      	adds	r0, #8
 8018448:	f002 fe05 	bl	801b056 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
 801844c:	8833      	ldrh	r3, [r6, #0]
 801844e:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
 8018450:	8047      	strh	r7, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
 8018452:	8084      	strh	r4, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
 8018454:	4629      	mov	r1, r5
 8018456:	f242 0022 	movw	r0, #8226	; 0x2022
 801845a:	f7f3 fb2b 	bl	800bab4 <bt_hci_cmd_send>
}
 801845e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
 8018460:	f06f 0036 	mvn.w	r0, #54	; 0x36
 8018464:	e7fb      	b.n	801845e <bt_le_set_data_len+0x30>

08018466 <bt_le_set_phy>:
{
 8018466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801846a:	4607      	mov	r7, r0
 801846c:	460e      	mov	r6, r1
 801846e:	4615      	mov	r5, r2
 8018470:	461c      	mov	r4, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
 8018472:	2107      	movs	r1, #7
 8018474:	f242 0032 	movw	r0, #8242	; 0x2032
 8018478:	f7f2 fc02 	bl	800ac80 <bt_hci_cmd_create>
	if (!buf) {
 801847c:	b1a0      	cbz	r0, 80184a8 <bt_le_set_phy+0x42>
 801847e:	4680      	mov	r8, r0
	cp = net_buf_add(buf, sizeof(*cp));
 8018480:	2107      	movs	r1, #7
 8018482:	3008      	adds	r0, #8
 8018484:	f002 fde7 	bl	801b056 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
 8018488:	883b      	ldrh	r3, [r7, #0]
 801848a:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
 801848c:	7086      	strb	r6, [r0, #2]
	cp->tx_phys = pref_tx_phy;
 801848e:	70c5      	strb	r5, [r0, #3]
	cp->rx_phys = pref_rx_phy;
 8018490:	7104      	strb	r4, [r0, #4]
	cp->phy_opts = phy_opts;
 8018492:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8018496:	f8a0 3005 	strh.w	r3, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
 801849a:	4641      	mov	r1, r8
 801849c:	f242 0032 	movw	r0, #8242	; 0x2032
 80184a0:	f7f3 fb08 	bl	800bab4 <bt_hci_cmd_send>
}
 80184a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
 80184a8:	f06f 0036 	mvn.w	r0, #54	; 0x36
 80184ac:	e7fa      	b.n	80184a4 <bt_le_set_phy+0x3e>

080184ae <le_conn_param_req_reply>:
{
 80184ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184b0:	4606      	mov	r6, r0
 80184b2:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
 80184b4:	210e      	movs	r1, #14
 80184b6:	f242 0020 	movw	r0, #8224	; 0x2020
 80184ba:	f7f2 fbe1 	bl	800ac80 <bt_hci_cmd_create>
	if (!buf) {
 80184be:	b1c0      	cbz	r0, 80184f2 <le_conn_param_req_reply+0x44>
 80184c0:	4607      	mov	r7, r0
	cp = net_buf_add(buf, sizeof(*cp));
 80184c2:	210e      	movs	r1, #14
 80184c4:	3008      	adds	r0, #8
 80184c6:	f002 fdc6 	bl	801b056 <net_buf_simple_add>
 80184ca:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
 80184cc:	220e      	movs	r2, #14
 80184ce:	2100      	movs	r1, #0
 80184d0:	f7ff fcf9 	bl	8017ec6 <memset>
	cp->handle = sys_cpu_to_le16(handle);
 80184d4:	8026      	strh	r6, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
 80184d6:	882b      	ldrh	r3, [r5, #0]
 80184d8:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
 80184da:	886b      	ldrh	r3, [r5, #2]
 80184dc:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
 80184de:	88ab      	ldrh	r3, [r5, #4]
 80184e0:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
 80184e2:	88eb      	ldrh	r3, [r5, #6]
 80184e4:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
 80184e6:	4639      	mov	r1, r7
 80184e8:	f242 0020 	movw	r0, #8224	; 0x2020
 80184ec:	f7f3 fae2 	bl	800bab4 <bt_hci_cmd_send>
}
 80184f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
 80184f2:	f06f 0036 	mvn.w	r0, #54	; 0x36
 80184f6:	e7fb      	b.n	80184f0 <le_conn_param_req_reply+0x42>

080184f8 <hci_le_read_remote_features>:
{
 80184f8:	b538      	push	{r3, r4, r5, lr}
 80184fa:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
 80184fc:	2102      	movs	r1, #2
 80184fe:	f242 0016 	movw	r0, #8214	; 0x2016
 8018502:	f7f2 fbbd 	bl	800ac80 <bt_hci_cmd_create>
	if (!buf) {
 8018506:	b168      	cbz	r0, 8018524 <hci_le_read_remote_features+0x2c>
 8018508:	4605      	mov	r5, r0
	cp = net_buf_add(buf, sizeof(*cp));
 801850a:	2102      	movs	r1, #2
 801850c:	3008      	adds	r0, #8
 801850e:	f002 fda2 	bl	801b056 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
 8018512:	8823      	ldrh	r3, [r4, #0]
 8018514:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
 8018516:	4629      	mov	r1, r5
 8018518:	f242 0016 	movw	r0, #8214	; 0x2016
 801851c:	f7f3 faca 	bl	800bab4 <bt_hci_cmd_send>
	return 0;
 8018520:	2000      	movs	r0, #0
}
 8018522:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
 8018524:	f06f 0036 	mvn.w	r0, #54	; 0x36
 8018528:	e7fb      	b.n	8018522 <hci_le_read_remote_features+0x2a>

0801852a <le_adv_update>:
{
 801852a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801852e:	b089      	sub	sp, #36	; 0x24
 8018530:	4607      	mov	r7, r0
 8018532:	460d      	mov	r5, r1
 8018534:	4616      	mov	r6, r2
 8018536:	461c      	mov	r4, r3
 8018538:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 801853c:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 8018540:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
 8018544:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
	struct bt_ad d[2] = {};
 8018548:	2300      	movs	r3, #0
 801854a:	9304      	str	r3, [sp, #16]
 801854c:	9305      	str	r3, [sp, #20]
 801854e:	9306      	str	r3, [sp, #24]
 8018550:	9307      	str	r3, [sp, #28]
	if (use_name) {
 8018552:	f1b9 0f00 	cmp.w	r9, #0
 8018556:	d02c      	beq.n	80185b2 <le_adv_update+0x88>
		const char *name = bt_get_name();
 8018558:	f7f4 f80e 	bl	800c578 <bt_get_name>
 801855c:	9001      	str	r0, [sp, #4]
		if ((ad && ad_has_name(ad, ad_len)) ||
 801855e:	b17d      	cbz	r5, 8018580 <le_adv_update+0x56>
	for (i = 0; i < ad_len; i++) {
 8018560:	2200      	movs	r2, #0
 8018562:	e000      	b.n	8018566 <le_adv_update+0x3c>
 8018564:	3201      	adds	r2, #1
 8018566:	4296      	cmp	r6, r2
 8018568:	d907      	bls.n	801857a <le_adv_update+0x50>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
 801856a:	f815 3032 	ldrb.w	r3, [r5, r2, lsl #3]
 801856e:	3b08      	subs	r3, #8
 8018570:	b2db      	uxtb	r3, r3
 8018572:	2b01      	cmp	r3, #1
 8018574:	d8f6      	bhi.n	8018564 <le_adv_update+0x3a>
			return true;
 8018576:	464b      	mov	r3, r9
 8018578:	e000      	b.n	801857c <le_adv_update+0x52>
	return false;
 801857a:	2300      	movs	r3, #0
		if ((ad && ad_has_name(ad, ad_len)) ||
 801857c:	2b00      	cmp	r3, #0
 801857e:	d15f      	bne.n	8018640 <le_adv_update+0x116>
 8018580:	b16c      	cbz	r4, 801859e <le_adv_update+0x74>
	for (i = 0; i < ad_len; i++) {
 8018582:	2200      	movs	r2, #0
 8018584:	4590      	cmp	r8, r2
 8018586:	d907      	bls.n	8018598 <le_adv_update+0x6e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
 8018588:	f814 3032 	ldrb.w	r3, [r4, r2, lsl #3]
 801858c:	3b08      	subs	r3, #8
 801858e:	b2db      	uxtb	r3, r3
 8018590:	2b01      	cmp	r3, #1
 8018592:	d922      	bls.n	80185da <le_adv_update+0xb0>
	for (i = 0; i < ad_len; i++) {
 8018594:	3201      	adds	r2, #1
 8018596:	e7f5      	b.n	8018584 <le_adv_update+0x5a>
	return false;
 8018598:	2300      	movs	r3, #0
		    (sd && ad_has_name(sd, sd_len))) {
 801859a:	2b00      	cmp	r3, #0
 801859c:	d153      	bne.n	8018646 <le_adv_update+0x11c>
		data = (struct bt_data)BT_DATA(
 801859e:	9801      	ldr	r0, [sp, #4]
 80185a0:	f7ff fc26 	bl	8017df0 <strlen>
 80185a4:	2309      	movs	r3, #9
 80185a6:	f88d 3008 	strb.w	r3, [sp, #8]
 80185aa:	f88d 0009 	strb.w	r0, [sp, #9]
 80185ae:	9b01      	ldr	r3, [sp, #4]
 80185b0:	9303      	str	r3, [sp, #12]
	if (!(ext_adv && scannable)) {
 80185b2:	f1bb 0f00 	cmp.w	fp, #0
 80185b6:	d002      	beq.n	80185be <le_adv_update+0x94>
 80185b8:	f1ba 0f00 	cmp.w	sl, #0
 80185bc:	d116      	bne.n	80185ec <le_adv_update+0xc2>
		d[0].data = ad;
 80185be:	9504      	str	r5, [sp, #16]
		d[0].len = ad_len;
 80185c0:	9605      	str	r6, [sp, #20]
		if (use_name && !scannable) {
 80185c2:	f1b9 0f00 	cmp.w	r9, #0
 80185c6:	d00a      	beq.n	80185de <le_adv_update+0xb4>
 80185c8:	f1ba 0f00 	cmp.w	sl, #0
 80185cc:	d134      	bne.n	8018638 <le_adv_update+0x10e>
			d[1].data = &data;
 80185ce:	ab02      	add	r3, sp, #8
 80185d0:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
 80185d2:	2301      	movs	r3, #1
 80185d4:	9307      	str	r3, [sp, #28]
			d_len = 2;
 80185d6:	2202      	movs	r2, #2
 80185d8:	e002      	b.n	80185e0 <le_adv_update+0xb6>
			return true;
 80185da:	464b      	mov	r3, r9
 80185dc:	e7dd      	b.n	801859a <le_adv_update+0x70>
		d_len = 1;
 80185de:	2201      	movs	r2, #1
		err = set_ad(adv, d, d_len);
 80185e0:	a904      	add	r1, sp, #16
 80185e2:	4638      	mov	r0, r7
 80185e4:	f7ff fe68 	bl	80182b8 <set_ad>
		if (err) {
 80185e8:	4603      	mov	r3, r0
 80185ea:	bb08      	cbnz	r0, 8018630 <le_adv_update+0x106>
	if (scannable) {
 80185ec:	f1ba 0f00 	cmp.w	sl, #0
 80185f0:	d010      	beq.n	8018614 <le_adv_update+0xea>
		d[0].data = sd;
 80185f2:	9404      	str	r4, [sp, #16]
		d[0].len = sd_len;
 80185f4:	f8cd 8014 	str.w	r8, [sp, #20]
		if (use_name) {
 80185f8:	f1b9 0f00 	cmp.w	r9, #0
 80185fc:	d01e      	beq.n	801863c <le_adv_update+0x112>
			d[1].data = &data;
 80185fe:	ab02      	add	r3, sp, #8
 8018600:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
 8018602:	2301      	movs	r3, #1
 8018604:	9307      	str	r3, [sp, #28]
			d_len = 2;
 8018606:	2202      	movs	r2, #2
		err = set_sd(adv, d, d_len);
 8018608:	a904      	add	r1, sp, #16
 801860a:	4638      	mov	r0, r7
 801860c:	f7ff fe5a 	bl	80182c4 <set_sd>
		if (err) {
 8018610:	4603      	mov	r3, r0
 8018612:	b968      	cbnz	r0, 8018630 <le_adv_update+0x106>
	atomic_set_bit(adv->flags, BT_ADV_DATA_SET);
 8018614:	3714      	adds	r7, #20
 8018616:	f3bf 8f5b 	dmb	ish
 801861a:	e857 3f00 	ldrex	r3, [r7]
 801861e:	f043 0304 	orr.w	r3, r3, #4
 8018622:	e847 3200 	strex	r2, r3, [r7]
 8018626:	2a00      	cmp	r2, #0
 8018628:	d1f7      	bne.n	801861a <le_adv_update+0xf0>
 801862a:	f3bf 8f5b 	dmb	ish
	return 0;
 801862e:	2300      	movs	r3, #0
}
 8018630:	4618      	mov	r0, r3
 8018632:	b009      	add	sp, #36	; 0x24
 8018634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		d_len = 1;
 8018638:	2201      	movs	r2, #1
 801863a:	e7d1      	b.n	80185e0 <le_adv_update+0xb6>
		d_len = 1;
 801863c:	2201      	movs	r2, #1
 801863e:	e7e3      	b.n	8018608 <le_adv_update+0xde>
			return -EINVAL;
 8018640:	f06f 0315 	mvn.w	r3, #21
 8018644:	e7f4      	b.n	8018630 <le_adv_update+0x106>
 8018646:	f06f 0315 	mvn.w	r3, #21
 801864a:	e7f1      	b.n	8018630 <le_adv_update+0x106>

0801864c <bt_setup_random_id_addr>:
{
 801864c:	b508      	push	{r3, lr}
	return bt_id_create(NULL, NULL);
 801864e:	2100      	movs	r1, #0
 8018650:	4608      	mov	r0, r1
 8018652:	f7f3 ff95 	bl	800c580 <bt_id_create>
}
 8018656:	bd08      	pop	{r3, pc}

08018658 <bt_addr_le_is_bonded>:
{
 8018658:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
 801865a:	f7f9 fd97 	bl	801218c <bt_keys_find_addr>
		return keys && keys->keys;
 801865e:	b118      	cbz	r0, 8018668 <bt_addr_le_is_bonded+0x10>
 8018660:	89c3      	ldrh	r3, [r0, #14]
 8018662:	b91b      	cbnz	r3, 801866c <bt_addr_le_is_bonded+0x14>
 8018664:	2000      	movs	r0, #0
}
 8018666:	bd08      	pop	{r3, pc}
		return keys && keys->keys;
 8018668:	2000      	movs	r0, #0
 801866a:	e7fc      	b.n	8018666 <bt_addr_le_is_bonded+0xe>
 801866c:	2001      	movs	r0, #1
 801866e:	e7fa      	b.n	8018666 <bt_addr_le_is_bonded+0xe>

08018670 <bt_le_adv_start>:
{
 8018670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018672:	b083      	sub	sp, #12
 8018674:	4607      	mov	r7, r0
 8018676:	460e      	mov	r6, r1
 8018678:	4614      	mov	r4, r2
 801867a:	461d      	mov	r5, r3
	struct bt_le_ext_adv *adv = adv_new_legacy();
 801867c:	f7f1 faea 	bl	8009c54 <adv_new_legacy>
	if (!adv) {
 8018680:	b148      	cbz	r0, 8018696 <bt_le_adv_start+0x26>
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
 8018682:	9b08      	ldr	r3, [sp, #32]
 8018684:	9301      	str	r3, [sp, #4]
 8018686:	9500      	str	r5, [sp, #0]
 8018688:	4623      	mov	r3, r4
 801868a:	4632      	mov	r2, r6
 801868c:	4639      	mov	r1, r7
 801868e:	f7f3 ffdb 	bl	800c648 <bt_le_adv_start_legacy>
}
 8018692:	b003      	add	sp, #12
 8018694:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOMEM;
 8018696:	f06f 000b 	mvn.w	r0, #11
 801869a:	e7fa      	b.n	8018692 <bt_le_adv_start+0x22>

0801869c <bt_le_adv_resume>:
{
 801869c:	b530      	push	{r4, r5, lr}
 801869e:	b083      	sub	sp, #12
	struct bt_le_ext_adv *adv = bt_adv_lookup_legacy();
 80186a0:	f7f2 ff64 	bl	800b56c <bt_adv_lookup_legacy>
	if (!adv) {
 80186a4:	b150      	cbz	r0, 80186bc <bt_le_adv_resume+0x20>
 80186a6:	4604      	mov	r4, r0
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
 80186a8:	f100 0514 	add.w	r5, r0, #20
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80186ac:	f3bf 8f5b 	dmb	ish
 80186b0:	6943      	ldr	r3, [r0, #20]
 80186b2:	f3bf 8f5b 	dmb	ish
 80186b6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80186ba:	d101      	bne.n	80186c0 <bt_le_adv_resume+0x24>
}
 80186bc:	b003      	add	sp, #12
 80186be:	bd30      	pop	{r4, r5, pc}
 80186c0:	f3bf 8f5b 	dmb	ish
 80186c4:	6943      	ldr	r3, [r0, #20]
 80186c6:	f3bf 8f5b 	dmb	ish
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
 80186ca:	f013 0f40 	tst.w	r3, #64	; 0x40
 80186ce:	d1f5      	bne.n	80186bc <bt_le_adv_resume+0x20>
 80186d0:	f3bf 8f5b 	dmb	ish
 80186d4:	6943      	ldr	r3, [r0, #20]
 80186d6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
 80186da:	f413 7f80 	tst.w	r3, #256	; 0x100
 80186de:	d0ed      	beq.n	80186bc <bt_le_adv_resume+0x20>
	err = le_adv_start_add_conn(adv, &conn);
 80186e0:	a901      	add	r1, sp, #4
 80186e2:	f7f2 f8c1 	bl	800a868 <le_adv_start_add_conn>
	if (err) {
 80186e6:	2800      	cmp	r0, #0
 80186e8:	d1e8      	bne.n	80186bc <bt_le_adv_resume+0x20>
	err = set_le_adv_enable(adv, true);
 80186ea:	2101      	movs	r1, #1
 80186ec:	4620      	mov	r0, r4
 80186ee:	f7ff fd16 	bl	801811e <set_le_adv_enable>
	if (err) {
 80186f2:	b908      	cbnz	r0, 80186f8 <bt_le_adv_resume+0x5c>
	bool persist_paused = false;
 80186f4:	2400      	movs	r4, #0
 80186f6:	e011      	b.n	801871c <bt_le_adv_resume+0x80>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
 80186f8:	2100      	movs	r1, #0
 80186fa:	9801      	ldr	r0, [sp, #4]
 80186fc:	f7f5 f85e 	bl	800d7bc <bt_conn_set_state>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8018700:	f3bf 8f5b 	dmb	ish
 8018704:	e855 4f00 	ldrex	r4, [r5]
 8018708:	f424 5380 	bic.w	r3, r4, #4096	; 0x1000
 801870c:	e845 3200 	strex	r2, r3, [r5]
 8018710:	2a00      	cmp	r2, #0
 8018712:	d1f7      	bne.n	8018704 <bt_le_adv_resume+0x68>
 8018714:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
 8018718:	f3c4 3400 	ubfx	r4, r4, #12, #1
	bt_conn_unref(conn);
 801871c:	9801      	ldr	r0, [sp, #4]
 801871e:	f000 fa29 	bl	8018b74 <bt_conn_unref>
	if (persist_paused) {
 8018722:	2c00      	cmp	r4, #0
 8018724:	d0ca      	beq.n	80186bc <bt_le_adv_resume+0x20>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8018726:	f3bf 8f5b 	dmb	ish
 801872a:	e855 3f00 	ldrex	r3, [r5]
 801872e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8018732:	e845 3200 	strex	r2, r3, [r5]
 8018736:	2a00      	cmp	r2, #0
 8018738:	d1f7      	bne.n	801872a <bt_le_adv_resume+0x8e>
 801873a:	f3bf 8f5b 	dmb	ish
}
 801873e:	e7bd      	b.n	80186bc <bt_le_adv_resume+0x20>

08018740 <le_enh_conn_complete>:
{
 8018740:	b508      	push	{r3, lr}
	enh_conn_complete((void *)buf->data);
 8018742:	6880      	ldr	r0, [r0, #8]
 8018744:	f7f4 f98e 	bl	800ca64 <enh_conn_complete>
}
 8018748:	bd08      	pop	{r3, pc}

0801874a <le_legacy_conn_complete>:
{
 801874a:	b510      	push	{r4, lr}
 801874c:	b08c      	sub	sp, #48	; 0x30
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
 801874e:	6881      	ldr	r1, [r0, #8]
	enh.status         = evt->status;
 8018750:	780b      	ldrb	r3, [r1, #0]
 8018752:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
 8018756:	f8b1 3001 	ldrh.w	r3, [r1, #1]
 801875a:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
 801875e:	78cb      	ldrb	r3, [r1, #3]
 8018760:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
 8018764:	f8b1 300b 	ldrh.w	r3, [r1, #11]
 8018768:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
 801876c:	f8b1 300d 	ldrh.w	r3, [r1, #13]
 8018770:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
 8018774:	f8b1 300f 	ldrh.w	r3, [r1, #15]
 8018778:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
 801877c:	7c4b      	ldrb	r3, [r1, #17]
 801877e:	f88d 301d 	strb.w	r3, [sp, #29]
 8018782:	2207      	movs	r2, #7
 8018784:	3104      	adds	r1, #4
 8018786:	a801      	add	r0, sp, #4
 8018788:	f7ff fb78 	bl	8017e7c <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
 801878c:	2400      	movs	r4, #0
 801878e:	940a      	str	r4, [sp, #40]	; 0x28
 8018790:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
	memcpy(dst, src, sizeof(*dst));
 8018794:	2206      	movs	r2, #6
 8018796:	a90a      	add	r1, sp, #40	; 0x28
 8018798:	f10d 000b 	add.w	r0, sp, #11
 801879c:	f7ff fb6e 	bl	8017e7c <memcpy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
 80187a0:	9408      	str	r4, [sp, #32]
 80187a2:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
 80187a6:	2206      	movs	r2, #6
 80187a8:	a908      	add	r1, sp, #32
 80187aa:	f10d 0011 	add.w	r0, sp, #17
 80187ae:	f7ff fb65 	bl	8017e7c <memcpy>
	enh_conn_complete(&enh);
 80187b2:	4668      	mov	r0, sp
 80187b4:	f7f4 f956 	bl	800ca64 <enh_conn_complete>
}
 80187b8:	b00c      	add	sp, #48	; 0x30
 80187ba:	bd10      	pop	{r4, pc}

080187bc <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
 80187bc:	b530      	push	{r4, r5, lr}
 80187be:	b0b1      	sub	sp, #196	; 0xc4
 80187c0:	460c      	mov	r4, r1
 80187c2:	4615      	mov	r5, r2
	psrc += length - 1;
 80187c4:	300f      	adds	r0, #15
	uint8_t *pdst = (uint8_t *)dst;
 80187c6:	466b      	mov	r3, sp
	for (; length > 0; length--) {
 80187c8:	2210      	movs	r2, #16
 80187ca:	b12a      	cbz	r2, 80187d8 <bt_encrypt_le+0x1c>
		*pdst++ = *psrc--;
 80187cc:	f810 1901 	ldrb.w	r1, [r0], #-1
 80187d0:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
 80187d4:	3a01      	subs	r2, #1
 80187d6:	e7f8      	b.n	80187ca <bt_encrypt_le+0xe>
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	sys_memcpy_swap(tmp, key, 16);

	if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
 80187d8:	4669      	mov	r1, sp
 80187da:	a804      	add	r0, sp, #16
 80187dc:	f7ef fd5a 	bl	8008294 <tc_aes128_set_encrypt_key>
 80187e0:	b1f0      	cbz	r0, 8018820 <bt_encrypt_le+0x64>
	psrc += length - 1;
 80187e2:	f104 010f 	add.w	r1, r4, #15
	uint8_t *pdst = (uint8_t *)dst;
 80187e6:	466b      	mov	r3, sp
	for (; length > 0; length--) {
 80187e8:	2410      	movs	r4, #16
 80187ea:	e004      	b.n	80187f6 <bt_encrypt_le+0x3a>
		*pdst++ = *psrc--;
 80187ec:	f811 2901 	ldrb.w	r2, [r1], #-1
 80187f0:	f803 2b01 	strb.w	r2, [r3], #1
	for (; length > 0; length--) {
 80187f4:	3c01      	subs	r4, #1
 80187f6:	2c00      	cmp	r4, #0
 80187f8:	d1f8      	bne.n	80187ec <bt_encrypt_le+0x30>
		return -EINVAL;
	}

	sys_memcpy_swap(tmp, plaintext, 16);

	if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
 80187fa:	aa04      	add	r2, sp, #16
 80187fc:	4669      	mov	r1, sp
 80187fe:	4628      	mov	r0, r5
 8018800:	f7ef fda6 	bl	8008350 <tc_aes_encrypt>
 8018804:	b178      	cbz	r0, 8018826 <bt_encrypt_le+0x6a>
	for (i = 0; i < (length/2); i++) {
 8018806:	2c07      	cmp	r4, #7
 8018808:	d807      	bhi.n	801881a <bt_encrypt_le+0x5e>
		uint8_t tmp = ((uint8_t *)buf)[i];
 801880a:	5d2a      	ldrb	r2, [r5, r4]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
 801880c:	f1c4 030f 	rsb	r3, r4, #15
 8018810:	5ce9      	ldrb	r1, [r5, r3]
 8018812:	5529      	strb	r1, [r5, r4]
		((uint8_t *)buf)[length - 1 - i] = tmp;
 8018814:	54ea      	strb	r2, [r5, r3]
	for (i = 0; i < (length/2); i++) {
 8018816:	3401      	adds	r4, #1
 8018818:	e7f5      	b.n	8018806 <bt_encrypt_le+0x4a>

	sys_mem_swap(enc_data, 16);

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
 801881a:	2000      	movs	r0, #0
}
 801881c:	b031      	add	sp, #196	; 0xc4
 801881e:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
 8018820:	f06f 0015 	mvn.w	r0, #21
 8018824:	e7fa      	b.n	801881c <bt_encrypt_le+0x60>
		return -EINVAL;
 8018826:	f06f 0015 	mvn.w	r0, #21
 801882a:	e7f7      	b.n	801881c <bt_encrypt_le+0x60>

0801882c <reset_pairing>:
	conn->required_sec_level = conn->sec_level;
 801882c:	7a43      	ldrb	r3, [r0, #9]
 801882e:	7283      	strb	r3, [r0, #10]
}
 8018830:	4770      	bx	lr

08018832 <start_security>:
{
 8018832:	b508      	push	{r3, lr}
		return bt_smp_start_security(conn);
 8018834:	f002 faa3 	bl	801ad7e <bt_smp_start_security>
}
 8018838:	bd08      	pop	{r3, pc}

0801883a <tx_notify>:
{
 801883a:	b570      	push	{r4, r5, r6, lr}
 801883c:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
 801883e:	e010      	b.n	8018862 <tx_notify+0x28>
 8018840:	f383 8811 	msr	BASEPRI, r3
 8018844:	f3bf 8f6f 	isb	sy
}
 8018848:	bd70      	pop	{r4, r5, r6, pc}
	list->tail = node;
 801884a:	6262      	str	r2, [r4, #36]	; 0x24
 801884c:	f383 8811 	msr	BASEPRI, r3
 8018850:	f3bf 8f6f 	isb	sy
		cb = tx->cb;
 8018854:	6845      	ldr	r5, [r0, #4]
		user_data = tx->user_data;
 8018856:	6886      	ldr	r6, [r0, #8]
		tx_free(tx);
 8018858:	f7f4 fbda 	bl	800d010 <tx_free>
		cb(conn, user_data);
 801885c:	4631      	mov	r1, r6
 801885e:	4620      	mov	r0, r4
 8018860:	47a8      	blx	r5
	__asm__ volatile(
 8018862:	f04f 0210 	mov.w	r2, #16
 8018866:	f3ef 8311 	mrs	r3, BASEPRI
 801886a:	f382 8811 	msr	BASEPRI, r2
 801886e:	f3bf 8f6f 	isb	sy
	return list->head;
 8018872:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
 8018874:	2800      	cmp	r0, #0
 8018876:	d0e3      	beq.n	8018840 <tx_notify+0x6>
	return node->next;
 8018878:	6802      	ldr	r2, [r0, #0]
	list->head = node;
 801887a:	6222      	str	r2, [r4, #32]
	return list->tail;
 801887c:	6a61      	ldr	r1, [r4, #36]	; 0x24
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 801887e:	4281      	cmp	r1, r0
 8018880:	d1e4      	bne.n	801884c <tx_notify+0x12>
 8018882:	e7e2      	b.n	801884a <tx_notify+0x10>

08018884 <tx_complete_work>:
{
 8018884:	b508      	push	{r3, lr}
	tx_notify(conn);
 8018886:	3828      	subs	r0, #40	; 0x28
 8018888:	f7ff ffd7 	bl	801883a <tx_notify>
}
 801888c:	bd08      	pop	{r3, pc}

0801888e <send_acl>:
{
 801888e:	b570      	push	{r4, r5, r6, lr}
 8018890:	4605      	mov	r5, r0
 8018892:	460c      	mov	r4, r1
	switch (flags) {
 8018894:	2a03      	cmp	r2, #3
 8018896:	d819      	bhi.n	80188cc <send_acl+0x3e>
 8018898:	e8df f002 	tbb	[pc, r2]
 801889c:	16021602 	.word	0x16021602
		flags = BT_ACL_CONT;
 80188a0:	2600      	movs	r6, #0
	hdr = net_buf_push(buf, sizeof(*hdr));
 80188a2:	2104      	movs	r1, #4
 80188a4:	f104 0008 	add.w	r0, r4, #8
 80188a8:	f002 fbed 	bl	801b086 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
 80188ac:	f9b5 3000 	ldrsh.w	r3, [r5]
 80188b0:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
 80188b4:	8003      	strh	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
 80188b6:	89a3      	ldrh	r3, [r4, #12]
 80188b8:	3b04      	subs	r3, #4
 80188ba:	8043      	strh	r3, [r0, #2]
 80188bc:	2302      	movs	r3, #2
 80188be:	7523      	strb	r3, [r4, #20]
	return bt_send(buf);
 80188c0:	4620      	mov	r0, r4
 80188c2:	f7f3 f8ed 	bl	800baa0 <bt_send>
}
 80188c6:	bd70      	pop	{r4, r5, r6, pc}
		flags = BT_ACL_CONT;
 80188c8:	2601      	movs	r6, #1
 80188ca:	e7ea      	b.n	80188a2 <send_acl+0x14>
 80188cc:	f06f 0015 	mvn.w	r0, #21
 80188d0:	e7f9      	b.n	80188c6 <send_acl+0x38>

080188d2 <process_unack_tx>:
{
 80188d2:	b510      	push	{r4, lr}
 80188d4:	4604      	mov	r4, r0
 80188d6:	e028      	b.n	801892a <process_unack_tx+0x58>
			conn->pending_no_cb--;
 80188d8:	3b01      	subs	r3, #1
 80188da:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
 80188dc:	f382 8811 	msr	BASEPRI, r2
 80188e0:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
 80188e4:	4620      	mov	r0, r4
 80188e6:	f7f4 fbcf 	bl	800d088 <bt_conn_get_pkts>
 80188ea:	f7fb fda1 	bl	8014430 <z_impl_k_sem_give>
			continue;
 80188ee:	e01c      	b.n	801892a <process_unack_tx+0x58>
	list->tail = node;
 80188f0:	61a3      	str	r3, [r4, #24]
 80188f2:	f382 8811 	msr	BASEPRI, r2
 80188f6:	f3bf 8f6f 	isb	sy
		if (!node) {
 80188fa:	b350      	cbz	r0, 8018952 <process_unack_tx+0x80>
	__asm__ volatile(
 80188fc:	f04f 0210 	mov.w	r2, #16
 8018900:	f3ef 8311 	mrs	r3, BASEPRI
 8018904:	f382 8811 	msr	BASEPRI, r2
 8018908:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
 801890c:	68c2      	ldr	r2, [r0, #12]
 801890e:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
 8018910:	2200      	movs	r2, #0
 8018912:	60c2      	str	r2, [r0, #12]
	__asm__ volatile(
 8018914:	f383 8811 	msr	BASEPRI, r3
 8018918:	f3bf 8f6f 	isb	sy
		tx_free(tx);
 801891c:	f7f4 fb78 	bl	800d010 <tx_free>
		k_sem_give(bt_conn_get_pkts(conn));
 8018920:	4620      	mov	r0, r4
 8018922:	f7f4 fbb1 	bl	800d088 <bt_conn_get_pkts>
 8018926:	f7fb fd83 	bl	8014430 <z_impl_k_sem_give>
	__asm__ volatile(
 801892a:	f04f 0310 	mov.w	r3, #16
 801892e:	f3ef 8211 	mrs	r2, BASEPRI
 8018932:	f383 8811 	msr	BASEPRI, r3
 8018936:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
 801893a:	69e3      	ldr	r3, [r4, #28]
 801893c:	2b00      	cmp	r3, #0
 801893e:	d1cb      	bne.n	80188d8 <process_unack_tx+0x6>
	return list->head;
 8018940:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
 8018942:	2800      	cmp	r0, #0
 8018944:	d0d5      	beq.n	80188f2 <process_unack_tx+0x20>
	return node->next;
 8018946:	6803      	ldr	r3, [r0, #0]
	list->head = node;
 8018948:	6163      	str	r3, [r4, #20]
	return list->tail;
 801894a:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 801894c:	4288      	cmp	r0, r1
 801894e:	d1d0      	bne.n	80188f2 <process_unack_tx+0x20>
 8018950:	e7ce      	b.n	80188f0 <process_unack_tx+0x1e>
}
 8018952:	bd10      	pop	{r4, pc}

08018954 <bt_conn_new>:
{
 8018954:	b510      	push	{r4, lr}
	for (i = 0; i < size; i++) {
 8018956:	2300      	movs	r3, #0
 8018958:	428b      	cmp	r3, r1
 801895a:	d20b      	bcs.n	8018974 <bt_conn_new+0x20>
		if (!atomic_get(&conns[i].ref)) {
 801895c:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8018960:	eb00 1484 	add.w	r4, r0, r4, lsl #6
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8018964:	f3bf 8f5b 	dmb	ish
 8018968:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801896a:	f3bf 8f5b 	dmb	ish
 801896e:	b112      	cbz	r2, 8018976 <bt_conn_new+0x22>
	for (i = 0; i < size; i++) {
 8018970:	3301      	adds	r3, #1
 8018972:	e7f1      	b.n	8018958 <bt_conn_new+0x4>
	struct bt_conn *conn = NULL;
 8018974:	2400      	movs	r4, #0
	if (!conn) {
 8018976:	b18c      	cbz	r4, 801899c <bt_conn_new+0x48>
	(void)memset(conn, 0, sizeof(*conn));
 8018978:	22c0      	movs	r2, #192	; 0xc0
 801897a:	2100      	movs	r1, #0
 801897c:	4620      	mov	r0, r4
 801897e:	f7ff faa2 	bl	8017ec6 <memset>
	atomic_set(&conn->ref, 1);
 8018982:	f104 0354 	add.w	r3, r4, #84	; 0x54
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8018986:	2201      	movs	r2, #1
 8018988:	f3bf 8f5b 	dmb	ish
 801898c:	e853 1f00 	ldrex	r1, [r3]
 8018990:	e843 2000 	strex	r0, r2, [r3]
 8018994:	2800      	cmp	r0, #0
 8018996:	d1f9      	bne.n	801898c <bt_conn_new+0x38>
 8018998:	f3bf 8f5b 	dmb	ish
}
 801899c:	4620      	mov	r0, r4
 801899e:	bd10      	pop	{r4, pc}

080189a0 <bt_conn_set_security>:
	if (conn->state != BT_CONN_CONNECTED) {
 80189a0:	7b43      	ldrb	r3, [r0, #13]
 80189a2:	2b07      	cmp	r3, #7
 80189a4:	d12f      	bne.n	8018a06 <bt_conn_set_security+0x66>
{
 80189a6:	b510      	push	{r4, lr}
 80189a8:	4604      	mov	r4, r0
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
 80189aa:	7a43      	ldrb	r3, [r0, #9]
 80189ac:	428b      	cmp	r3, r1
 80189ae:	d22d      	bcs.n	8018a0c <bt_conn_set_security+0x6c>
 80189b0:	7a83      	ldrb	r3, [r0, #10]
 80189b2:	428b      	cmp	r3, r1
 80189b4:	d301      	bcc.n	80189ba <bt_conn_set_security+0x1a>
		return 0;
 80189b6:	2000      	movs	r0, #0
 80189b8:	e029      	b.n	8018a0e <bt_conn_set_security+0x6e>
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
 80189ba:	1d03      	adds	r3, r0, #4
	if (val) {
 80189bc:	09ca      	lsrs	r2, r1, #7
 80189be:	d015      	beq.n	80189ec <bt_conn_set_security+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 80189c0:	f3bf 8f5b 	dmb	ish
 80189c4:	e853 2f00 	ldrex	r2, [r3]
 80189c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80189cc:	e843 2000 	strex	r0, r2, [r3]
 80189d0:	2800      	cmp	r0, #0
 80189d2:	d1f7      	bne.n	80189c4 <bt_conn_set_security+0x24>
 80189d4:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
 80189d8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80189dc:	72a1      	strb	r1, [r4, #10]
	err = start_security(conn);
 80189de:	4620      	mov	r0, r4
 80189e0:	f7ff ff27 	bl	8018832 <start_security>
	if (err) {
 80189e4:	b198      	cbz	r0, 8018a0e <bt_conn_set_security+0x6e>
		conn->required_sec_level = conn->sec_level;
 80189e6:	7a63      	ldrb	r3, [r4, #9]
 80189e8:	72a3      	strb	r3, [r4, #10]
 80189ea:	e010      	b.n	8018a0e <bt_conn_set_security+0x6e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 80189ec:	f3bf 8f5b 	dmb	ish
 80189f0:	e853 2f00 	ldrex	r2, [r3]
 80189f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80189f8:	e843 2000 	strex	r0, r2, [r3]
 80189fc:	2800      	cmp	r0, #0
 80189fe:	d1f7      	bne.n	80189f0 <bt_conn_set_security+0x50>
 8018a00:	f3bf 8f5b 	dmb	ish
 8018a04:	e7e8      	b.n	80189d8 <bt_conn_set_security+0x38>
		return -ENOTCONN;
 8018a06:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
 8018a0a:	4770      	bx	lr
		return 0;
 8018a0c:	2000      	movs	r0, #0
}
 8018a0e:	bd10      	pop	{r4, pc}

08018a10 <bt_conn_get_security>:
}
 8018a10:	7a40      	ldrb	r0, [r0, #9]
 8018a12:	4770      	bx	lr

08018a14 <bt_conn_reset_rx_state>:
{
 8018a14:	b510      	push	{r4, lr}
 8018a16:	4604      	mov	r4, r0
	if (!conn->rx) {
 8018a18:	6900      	ldr	r0, [r0, #16]
 8018a1a:	b118      	cbz	r0, 8018a24 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
 8018a1c:	f002 fad1 	bl	801afc2 <net_buf_unref>
	conn->rx = NULL;
 8018a20:	2300      	movs	r3, #0
 8018a22:	6123      	str	r3, [r4, #16]
}
 8018a24:	bd10      	pop	{r4, pc}

08018a26 <conn_prepare_events>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8018a26:	f3bf 8f5b 	dmb	ish
 8018a2a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8018a2c:	f3bf 8f5b 	dmb	ish
	if (!atomic_get(&conn->ref)) {
 8018a30:	b33b      	cbz	r3, 8018a82 <conn_prepare_events+0x5c>
{
 8018a32:	b510      	push	{r4, lr}
 8018a34:	460c      	mov	r4, r1
	if (conn->state == BT_CONN_DISCONNECTED &&
 8018a36:	7b43      	ldrb	r3, [r0, #13]
 8018a38:	b983      	cbnz	r3, 8018a5c <conn_prepare_events+0x36>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
 8018a3a:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8018a3c:	f3bf 8f5b 	dmb	ish
 8018a40:	e853 2f00 	ldrex	r2, [r3]
 8018a44:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 8018a48:	e843 1c00 	strex	ip, r1, [r3]
 8018a4c:	f1bc 0f00 	cmp.w	ip, #0
 8018a50:	d1f6      	bne.n	8018a40 <conn_prepare_events+0x1a>
 8018a52:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
 8018a56:	f012 0f40 	tst.w	r2, #64	; 0x40
 8018a5a:	d10d      	bne.n	8018a78 <conn_prepare_events+0x52>
	if (conn->state != BT_CONN_CONNECTED) {
 8018a5c:	7b43      	ldrb	r3, [r0, #13]
 8018a5e:	2b07      	cmp	r3, #7
 8018a60:	d112      	bne.n	8018a88 <conn_prepare_events+0x62>
	k_poll_event_init(&events[0],
 8018a62:	f100 0334 	add.w	r3, r0, #52	; 0x34
 8018a66:	2200      	movs	r2, #0
 8018a68:	2104      	movs	r1, #4
 8018a6a:	4620      	mov	r0, r4
 8018a6c:	f004 fb9e 	bl	801d1ac <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
 8018a70:	2301      	movs	r3, #1
 8018a72:	7323      	strb	r3, [r4, #12]
	return 0;
 8018a74:	2000      	movs	r0, #0
}
 8018a76:	bd10      	pop	{r4, pc}
		conn_cleanup(conn);
 8018a78:	f7f4 fc60 	bl	800d33c <conn_cleanup>
		return -ENOTCONN;
 8018a7c:	f06f 0038 	mvn.w	r0, #56	; 0x38
 8018a80:	e7f9      	b.n	8018a76 <conn_prepare_events+0x50>
		return -ENOTCONN;
 8018a82:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
 8018a86:	4770      	bx	lr
		return -ENOTCONN;
 8018a88:	f06f 0038 	mvn.w	r0, #56	; 0x38
 8018a8c:	e7f3      	b.n	8018a76 <conn_prepare_events+0x50>

08018a8e <bt_conn_add_le>:
{
 8018a8e:	b570      	push	{r4, r5, r6, lr}
 8018a90:	4606      	mov	r6, r0
 8018a92:	460d      	mov	r5, r1
	struct bt_conn *conn = acl_conn_new();
 8018a94:	f7f4 fbfe 	bl	800d294 <acl_conn_new>
	if (!conn) {
 8018a98:	4604      	mov	r4, r0
 8018a9a:	b178      	cbz	r0, 8018abc <bt_conn_add_le+0x2e>
	conn->id = id;
 8018a9c:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
 8018a9e:	2207      	movs	r2, #7
 8018aa0:	4629      	mov	r1, r5
 8018aa2:	3088      	adds	r0, #136	; 0x88
 8018aa4:	f7ff f9ea 	bl	8017e7c <memcpy>
	conn->sec_level = BT_SECURITY_L1;
 8018aa8:	2301      	movs	r3, #1
 8018aaa:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
 8018aac:	72a3      	strb	r3, [r4, #10]
	conn->type = BT_CONN_TYPE_LE;
 8018aae:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
 8018ab0:	2318      	movs	r3, #24
 8018ab2:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
 8018ab6:	2328      	movs	r3, #40	; 0x28
 8018ab8:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
}
 8018abc:	4620      	mov	r0, r4
 8018abe:	bd70      	pop	{r4, r5, r6, pc}

08018ac0 <bt_conn_is_peer_addr_le>:
{
 8018ac0:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
 8018ac2:	7a03      	ldrb	r3, [r0, #8]
 8018ac4:	428b      	cmp	r3, r1
 8018ac6:	d001      	beq.n	8018acc <bt_conn_is_peer_addr_le+0xc>
		return false;
 8018ac8:	2000      	movs	r0, #0
}
 8018aca:	bd38      	pop	{r3, r4, r5, pc}
 8018acc:	4604      	mov	r4, r0
 8018ace:	4615      	mov	r5, r2
	return memcmp(a, b, sizeof(*a));
 8018ad0:	2207      	movs	r2, #7
 8018ad2:	f100 0188 	add.w	r1, r0, #136	; 0x88
 8018ad6:	4628      	mov	r0, r5
 8018ad8:	f7ff f9b8 	bl	8017e4c <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
 8018adc:	b1a8      	cbz	r0, 8018b0a <bt_conn_is_peer_addr_le+0x4a>
	if (conn->role == BT_HCI_ROLE_MASTER) {
 8018ade:	78e3      	ldrb	r3, [r4, #3]
 8018ae0:	b14b      	cbz	r3, 8018af6 <bt_conn_is_peer_addr_le+0x36>
 8018ae2:	2207      	movs	r2, #7
 8018ae4:	f104 018f 	add.w	r1, r4, #143	; 0x8f
 8018ae8:	4628      	mov	r0, r5
 8018aea:	f7ff f9af 	bl	8017e4c <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
 8018aee:	fab0 f080 	clz	r0, r0
 8018af2:	0940      	lsrs	r0, r0, #5
 8018af4:	e7e9      	b.n	8018aca <bt_conn_is_peer_addr_le+0xa>
 8018af6:	2207      	movs	r2, #7
 8018af8:	f104 0196 	add.w	r1, r4, #150	; 0x96
 8018afc:	4628      	mov	r0, r5
 8018afe:	f7ff f9a5 	bl	8017e4c <memcmp>
		return bt_addr_le_cmp(peer, &conn->le.resp_addr) == 0;
 8018b02:	fab0 f080 	clz	r0, r0
 8018b06:	0940      	lsrs	r0, r0, #5
 8018b08:	e7df      	b.n	8018aca <bt_conn_is_peer_addr_le+0xa>
		return true;
 8018b0a:	2001      	movs	r0, #1
 8018b0c:	e7dd      	b.n	8018aca <bt_conn_is_peer_addr_le+0xa>

08018b0e <bt_conn_ref>:
	atomic_val_t old = atomic_inc(&conn->ref);
 8018b0e:	f100 0354 	add.w	r3, r0, #84	; 0x54
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8018b12:	f3bf 8f5b 	dmb	ish
 8018b16:	e853 2f00 	ldrex	r2, [r3]
 8018b1a:	3201      	adds	r2, #1
 8018b1c:	e843 2100 	strex	r1, r2, [r3]
 8018b20:	2900      	cmp	r1, #0
 8018b22:	d1f8      	bne.n	8018b16 <bt_conn_ref+0x8>
 8018b24:	f3bf 8f5b 	dmb	ish
}
 8018b28:	4770      	bx	lr

08018b2a <conn_lookup_handle>:
{
 8018b2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b2c:	4605      	mov	r5, r0
	for (i = 0; i < size; i++) {
 8018b2e:	2400      	movs	r4, #0
 8018b30:	e000      	b.n	8018b34 <conn_lookup_handle+0xa>
 8018b32:	3401      	adds	r4, #1
 8018b34:	428c      	cmp	r4, r1
 8018b36:	d21b      	bcs.n	8018b70 <conn_lookup_handle+0x46>
		if (!atomic_get(&conns[i].ref)) {
 8018b38:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8018b3c:	0187      	lsls	r7, r0, #6
 8018b3e:	eb05 1080 	add.w	r0, r5, r0, lsl #6
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8018b42:	f3bf 8f5b 	dmb	ish
 8018b46:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8018b48:	f3bf 8f5b 	dmb	ish
 8018b4c:	2b00      	cmp	r3, #0
 8018b4e:	d0f0      	beq.n	8018b32 <conn_lookup_handle+0x8>
 8018b50:	7b43      	ldrb	r3, [r0, #13]
 8018b52:	2b01      	cmp	r3, #1
 8018b54:	d006      	beq.n	8018b64 <conn_lookup_handle+0x3a>
 8018b56:	b25e      	sxtb	r6, r3
 8018b58:	2e00      	cmp	r6, #0
 8018b5a:	d0ea      	beq.n	8018b32 <conn_lookup_handle+0x8>
 8018b5c:	3b07      	subs	r3, #7
 8018b5e:	b2db      	uxtb	r3, r3
 8018b60:	2b01      	cmp	r3, #1
 8018b62:	d8e6      	bhi.n	8018b32 <conn_lookup_handle+0x8>
		if (conns[i].handle == handle) {
 8018b64:	5beb      	ldrh	r3, [r5, r7]
 8018b66:	4293      	cmp	r3, r2
 8018b68:	d1e3      	bne.n	8018b32 <conn_lookup_handle+0x8>
			return bt_conn_ref(&conns[i]);
 8018b6a:	f7ff ffd0 	bl	8018b0e <bt_conn_ref>
 8018b6e:	e000      	b.n	8018b72 <conn_lookup_handle+0x48>
	return NULL;
 8018b70:	2000      	movs	r0, #0
}
 8018b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018b74 <bt_conn_unref>:
{
 8018b74:	b508      	push	{r3, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
 8018b76:	f100 0354 	add.w	r3, r0, #84	; 0x54
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8018b7a:	f3bf 8f5b 	dmb	ish
 8018b7e:	e853 2f00 	ldrex	r2, [r3]
 8018b82:	3a01      	subs	r2, #1
 8018b84:	e843 2100 	strex	r1, r2, [r3]
 8018b88:	2900      	cmp	r1, #0
 8018b8a:	d1f8      	bne.n	8018b7e <bt_conn_unref+0xa>
 8018b8c:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8018b90:	f3bf 8f5b 	dmb	ish
 8018b94:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8018b96:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
 8018b9a:	b103      	cbz	r3, 8018b9e <bt_conn_unref+0x2a>
}
 8018b9c:	bd08      	pop	{r3, pc}
		bt_le_adv_resume();
 8018b9e:	f7ff fd7d 	bl	801869c <bt_le_adv_resume>
}
 8018ba2:	e7fb      	b.n	8018b9c <bt_conn_unref+0x28>

08018ba4 <conn_update_timeout>:
	if (conn->state == BT_CONN_DISCONNECTED) {
 8018ba4:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
 8018ba8:	b123      	cbz	r3, 8018bb4 <conn_update_timeout+0x10>
	if (conn->type != BT_CONN_TYPE_LE) {
 8018baa:	f810 3c56 	ldrb.w	r3, [r0, #-86]
 8018bae:	2b01      	cmp	r3, #1
 8018bb0:	d00d      	beq.n	8018bce <conn_update_timeout+0x2a>
 8018bb2:	4770      	bx	lr
{
 8018bb4:	b510      	push	{r4, lr}
 8018bb6:	f1a0 0458 	sub.w	r4, r0, #88	; 0x58
		bt_l2cap_disconnected(conn);
 8018bba:	4620      	mov	r0, r4
 8018bbc:	f000 f913 	bl	8018de6 <bt_l2cap_disconnected>
		notify_disconnected(conn);
 8018bc0:	4620      	mov	r0, r4
 8018bc2:	f7f4 fa13 	bl	800cfec <notify_disconnected>
		bt_conn_unref(conn);
 8018bc6:	4620      	mov	r0, r4
 8018bc8:	f7ff ffd4 	bl	8018b74 <bt_conn_unref>
}
 8018bcc:	bd10      	pop	{r4, pc}
	atomic_set_bit(conn->flags, BT_CONN_SLAVE_PARAM_UPDATE);
 8018bce:	3854      	subs	r0, #84	; 0x54
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8018bd0:	f3bf 8f5b 	dmb	ish
 8018bd4:	e850 3f00 	ldrex	r3, [r0]
 8018bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8018bdc:	e840 3200 	strex	r2, r3, [r0]
 8018be0:	2a00      	cmp	r2, #0
 8018be2:	d1f7      	bne.n	8018bd4 <conn_update_timeout+0x30>
 8018be4:	f3bf 8f5b 	dmb	ish
}
 8018be8:	4770      	bx	lr

08018bea <conn_disconnect>:
{
 8018bea:	b538      	push	{r3, r4, r5, lr}
 8018bec:	4604      	mov	r4, r0
	err = bt_hci_disconnect(conn->handle, reason);
 8018bee:	8800      	ldrh	r0, [r0, #0]
 8018bf0:	f7ff fc04 	bl	80183fc <bt_hci_disconnect>
	if (err) {
 8018bf4:	4605      	mov	r5, r0
 8018bf6:	b108      	cbz	r0, 8018bfc <conn_disconnect+0x12>
}
 8018bf8:	4628      	mov	r0, r5
 8018bfa:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
 8018bfc:	2108      	movs	r1, #8
 8018bfe:	4620      	mov	r0, r4
 8018c00:	f7f4 fddc 	bl	800d7bc <bt_conn_set_state>
	return 0;
 8018c04:	e7f8      	b.n	8018bf8 <conn_disconnect+0xe>

08018c06 <bt_conn_get_dst>:
}
 8018c06:	3088      	adds	r0, #136	; 0x88
 8018c08:	4770      	bx	lr

08018c0a <bt_conn_le_phy_update>:
{
 8018c0a:	b510      	push	{r4, lr}
 8018c0c:	b082      	sub	sp, #8
 8018c0e:	460b      	mov	r3, r1
	if ((param->options & BT_CONN_LE_PHY_OPT_CODED_S2) &&
 8018c10:	880a      	ldrh	r2, [r1, #0]
 8018c12:	f002 0103 	and.w	r1, r2, #3
 8018c16:	2903      	cmp	r1, #3
 8018c18:	d007      	beq.n	8018c2a <bt_conn_le_phy_update+0x20>
	} else if (param->options & BT_CONN_LE_PHY_OPT_CODED_S2) {
 8018c1a:	f012 0f01 	tst.w	r2, #1
 8018c1e:	d111      	bne.n	8018c44 <bt_conn_le_phy_update+0x3a>
	} else if (param->options & BT_CONN_LE_PHY_OPT_CODED_S8) {
 8018c20:	f012 0f02 	tst.w	r2, #2
 8018c24:	d010      	beq.n	8018c48 <bt_conn_le_phy_update+0x3e>
		phy_opts = BT_HCI_LE_PHY_CODED_S8;
 8018c26:	2402      	movs	r4, #2
 8018c28:	e000      	b.n	8018c2c <bt_conn_le_phy_update+0x22>
		phy_opts = BT_HCI_LE_PHY_CODED_ANY;
 8018c2a:	2400      	movs	r4, #0
	if (param->pref_tx_phy == BT_GAP_LE_PHY_NONE) {
 8018c2c:	789a      	ldrb	r2, [r3, #2]
 8018c2e:	b16a      	cbz	r2, 8018c4c <bt_conn_le_phy_update+0x42>
	all_phys = 0U;
 8018c30:	2100      	movs	r1, #0
	if (param->pref_rx_phy == BT_GAP_LE_PHY_NONE) {
 8018c32:	78db      	ldrb	r3, [r3, #3]
 8018c34:	b90b      	cbnz	r3, 8018c3a <bt_conn_le_phy_update+0x30>
		all_phys |= BT_HCI_LE_PHY_RX_ANY;
 8018c36:	f041 0102 	orr.w	r1, r1, #2
	return bt_le_set_phy(conn, all_phys, param->pref_tx_phy,
 8018c3a:	9400      	str	r4, [sp, #0]
 8018c3c:	f7ff fc13 	bl	8018466 <bt_le_set_phy>
}
 8018c40:	b002      	add	sp, #8
 8018c42:	bd10      	pop	{r4, pc}
		phy_opts = BT_HCI_LE_PHY_CODED_S2;
 8018c44:	2401      	movs	r4, #1
 8018c46:	e7f1      	b.n	8018c2c <bt_conn_le_phy_update+0x22>
		phy_opts = BT_HCI_LE_PHY_CODED_ANY;
 8018c48:	2400      	movs	r4, #0
 8018c4a:	e7ef      	b.n	8018c2c <bt_conn_le_phy_update+0x22>
		all_phys |= BT_HCI_LE_PHY_TX_ANY;
 8018c4c:	2101      	movs	r1, #1
 8018c4e:	e7f0      	b.n	8018c32 <bt_conn_le_phy_update+0x28>

08018c50 <bt_conn_le_conn_update>:
{
 8018c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c52:	4606      	mov	r6, r0
 8018c54:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
 8018c56:	210e      	movs	r1, #14
 8018c58:	f242 0013 	movw	r0, #8211	; 0x2013
 8018c5c:	f7f2 f810 	bl	800ac80 <bt_hci_cmd_create>
	if (!buf) {
 8018c60:	b1d0      	cbz	r0, 8018c98 <bt_conn_le_conn_update+0x48>
 8018c62:	4607      	mov	r7, r0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
 8018c64:	210e      	movs	r1, #14
 8018c66:	3008      	adds	r0, #8
 8018c68:	f002 f9f5 	bl	801b056 <net_buf_simple_add>
 8018c6c:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
 8018c6e:	220e      	movs	r2, #14
 8018c70:	2100      	movs	r1, #0
 8018c72:	f7ff f928 	bl	8017ec6 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
 8018c76:	8833      	ldrh	r3, [r6, #0]
 8018c78:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
 8018c7a:	882b      	ldrh	r3, [r5, #0]
 8018c7c:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
 8018c7e:	886b      	ldrh	r3, [r5, #2]
 8018c80:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
 8018c82:	88ab      	ldrh	r3, [r5, #4]
 8018c84:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
 8018c86:	88eb      	ldrh	r3, [r5, #6]
 8018c88:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
 8018c8a:	2200      	movs	r2, #0
 8018c8c:	4639      	mov	r1, r7
 8018c8e:	f242 0013 	movw	r0, #8211	; 0x2013
 8018c92:	f7f2 f831 	bl	800acf8 <bt_hci_cmd_send_sync>
}
 8018c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
 8018c98:	f06f 0036 	mvn.w	r0, #54	; 0x36
 8018c9c:	e7fb      	b.n	8018c96 <bt_conn_le_conn_update+0x46>

08018c9e <bt_conn_le_param_update>:
{
 8018c9e:	4603      	mov	r3, r0
	if (conn->le.interval >= param->interval_min &&
 8018ca0:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
 8018ca4:	8808      	ldrh	r0, [r1, #0]
 8018ca6:	4282      	cmp	r2, r0
 8018ca8:	d307      	bcc.n	8018cba <bt_conn_le_param_update+0x1c>
	    conn->le.interval <= param->interval_max &&
 8018caa:	8848      	ldrh	r0, [r1, #2]
	if (conn->le.interval >= param->interval_min &&
 8018cac:	4282      	cmp	r2, r0
 8018cae:	d804      	bhi.n	8018cba <bt_conn_le_param_update+0x1c>
	    conn->le.latency == param->latency &&
 8018cb0:	f8b3 00a4 	ldrh.w	r0, [r3, #164]	; 0xa4
 8018cb4:	888a      	ldrh	r2, [r1, #4]
	    conn->le.interval <= param->interval_max &&
 8018cb6:	4290      	cmp	r0, r2
 8018cb8:	d024      	beq.n	8018d04 <bt_conn_le_param_update+0x66>
{
 8018cba:	b510      	push	{r4, lr}
		if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_UPDATE)) {
 8018cbc:	1d1c      	adds	r4, r3, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8018cbe:	f3bf 8f5b 	dmb	ish
 8018cc2:	685a      	ldr	r2, [r3, #4]
 8018cc4:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
 8018cc8:	f3c2 2000 	ubfx	r0, r2, #8, #1
 8018ccc:	f412 7f80 	tst.w	r2, #256	; 0x100
 8018cd0:	d12d      	bne.n	8018d2e <bt_conn_le_param_update+0x90>
		conn->le.interval_min = param->interval_min;
 8018cd2:	880a      	ldrh	r2, [r1, #0]
 8018cd4:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		conn->le.interval_max = param->interval_max;
 8018cd8:	884a      	ldrh	r2, [r1, #2]
 8018cda:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
		conn->le.pending_latency = param->latency;
 8018cde:	888a      	ldrh	r2, [r1, #4]
 8018ce0:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		conn->le.pending_timeout = param->timeout;
 8018ce4:	88ca      	ldrh	r2, [r1, #6]
 8018ce6:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8018cea:	f3bf 8f5b 	dmb	ish
 8018cee:	e854 3f00 	ldrex	r3, [r4]
 8018cf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8018cf6:	e844 3200 	strex	r2, r3, [r4]
 8018cfa:	2a00      	cmp	r2, #0
 8018cfc:	d1f7      	bne.n	8018cee <bt_conn_le_param_update+0x50>
 8018cfe:	f3bf 8f5b 	dmb	ish
}
 8018d02:	bd10      	pop	{r4, pc}
	    conn->le.timeout == param->timeout) {
 8018d04:	f8b3 00a6 	ldrh.w	r0, [r3, #166]	; 0xa6
 8018d08:	88ca      	ldrh	r2, [r1, #6]
	    conn->le.latency == param->latency &&
 8018d0a:	4290      	cmp	r0, r2
 8018d0c:	d1d5      	bne.n	8018cba <bt_conn_le_param_update+0x1c>
		atomic_clear_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET);
 8018d0e:	3304      	adds	r3, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8018d10:	f3bf 8f5b 	dmb	ish
 8018d14:	e853 2f00 	ldrex	r2, [r3]
 8018d18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8018d1c:	e843 2100 	strex	r1, r2, [r3]
 8018d20:	2900      	cmp	r1, #0
 8018d22:	d1f7      	bne.n	8018d14 <bt_conn_le_param_update+0x76>
 8018d24:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
 8018d28:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
 8018d2c:	4770      	bx	lr
			return send_conn_le_param_update(conn, param);
 8018d2e:	4618      	mov	r0, r3
 8018d30:	f7f4 feaa 	bl	800da88 <send_conn_le_param_update>
 8018d34:	e7e5      	b.n	8018d02 <bt_conn_le_param_update+0x64>

08018d36 <l2cap_connected>:
}
 8018d36:	4770      	bx	lr

08018d38 <l2cap_disconnected>:
}
 8018d38:	4770      	bx	lr

08018d3a <l2cap_chan_recv>:
{
 8018d3a:	b510      	push	{r4, lr}
 8018d3c:	460c      	mov	r4, r1
	chan->ops->recv(chan, buf);
 8018d3e:	6843      	ldr	r3, [r0, #4]
 8018d40:	691b      	ldr	r3, [r3, #16]
 8018d42:	4798      	blx	r3
	net_buf_unref(buf);
 8018d44:	4620      	mov	r0, r4
 8018d46:	f002 f93c 	bl	801afc2 <net_buf_unref>
}
 8018d4a:	bd10      	pop	{r4, pc}

08018d4c <bt_l2cap_chan_remove>:
	return list->head;
 8018d4c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 8018d4e:	b103      	cbz	r3, 8018d52 <bt_l2cap_chan_remove+0x6>
 8018d50:	3b08      	subs	r3, #8
 8018d52:	2200      	movs	r2, #0
 8018d54:	e017      	b.n	8018d86 <bt_l2cap_chan_remove+0x3a>
{
 8018d56:	b410      	push	{r4}
			sys_slist_remove(&conn->channels, prev, &chan->node);
 8018d58:	f103 0108 	add.w	r1, r3, #8
Z_GENLIST_REMOVE(slist, snode)
 8018d5c:	b14a      	cbz	r2, 8018d72 <bt_l2cap_chan_remove+0x26>
	return node->next;
 8018d5e:	689c      	ldr	r4, [r3, #8]
	parent->next = child;
 8018d60:	6014      	str	r4, [r2, #0]
	return list->tail;
 8018d62:	6d04      	ldr	r4, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
 8018d64:	42a1      	cmp	r1, r4
 8018d66:	d00b      	beq.n	8018d80 <bt_l2cap_chan_remove+0x34>
	parent->next = child;
 8018d68:	2200      	movs	r2, #0
 8018d6a:	609a      	str	r2, [r3, #8]
}
 8018d6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018d70:	4770      	bx	lr
	return node->next;
 8018d72:	689a      	ldr	r2, [r3, #8]
	list->head = node;
 8018d74:	64c2      	str	r2, [r0, #76]	; 0x4c
	return list->tail;
 8018d76:	6d04      	ldr	r4, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
 8018d78:	42a1      	cmp	r1, r4
 8018d7a:	d1f5      	bne.n	8018d68 <bt_l2cap_chan_remove+0x1c>
	list->tail = node;
 8018d7c:	6502      	str	r2, [r0, #80]	; 0x50
}
 8018d7e:	e7f3      	b.n	8018d68 <bt_l2cap_chan_remove+0x1c>
	list->tail = node;
 8018d80:	6502      	str	r2, [r0, #80]	; 0x50
}
 8018d82:	e7f1      	b.n	8018d68 <bt_l2cap_chan_remove+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 8018d84:	4613      	mov	r3, r2
 8018d86:	b14b      	cbz	r3, 8018d9c <bt_l2cap_chan_remove+0x50>
		if (chan == ch) {
 8018d88:	428b      	cmp	r3, r1
 8018d8a:	d0e4      	beq.n	8018d56 <bt_l2cap_chan_remove+0xa>
Z_GENLIST_PEEK_NEXT(slist, snode)
 8018d8c:	f113 0208 	adds.w	r2, r3, #8
 8018d90:	d0f8      	beq.n	8018d84 <bt_l2cap_chan_remove+0x38>
	return node->next;
 8018d92:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	d0f6      	beq.n	8018d86 <bt_l2cap_chan_remove+0x3a>
 8018d98:	3b08      	subs	r3, #8
 8018d9a:	e7f4      	b.n	8018d86 <bt_l2cap_chan_remove+0x3a>
 8018d9c:	4770      	bx	lr

08018d9e <bt_l2cap_chan_del>:
{
 8018d9e:	b538      	push	{r3, r4, r5, lr}
 8018da0:	4604      	mov	r4, r0
	const struct bt_l2cap_chan_ops *ops = chan->ops;
 8018da2:	6845      	ldr	r5, [r0, #4]
	if (!chan->conn) {
 8018da4:	6803      	ldr	r3, [r0, #0]
 8018da6:	b123      	cbz	r3, 8018db2 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
 8018da8:	686b      	ldr	r3, [r5, #4]
 8018daa:	b103      	cbz	r3, 8018dae <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
 8018dac:	4798      	blx	r3
	chan->conn = NULL;
 8018dae:	2300      	movs	r3, #0
 8018db0:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
 8018db2:	68e3      	ldr	r3, [r4, #12]
 8018db4:	b10b      	cbz	r3, 8018dba <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
 8018db6:	4620      	mov	r0, r4
 8018db8:	4798      	blx	r3
	if (ops->released) {
 8018dba:	69eb      	ldr	r3, [r5, #28]
 8018dbc:	b10b      	cbz	r3, 8018dc2 <bt_l2cap_chan_del+0x24>
		ops->released(chan);
 8018dbe:	4620      	mov	r0, r4
 8018dc0:	4798      	blx	r3
}
 8018dc2:	bd38      	pop	{r3, r4, r5, pc}

08018dc4 <bt_l2cap_chan_add>:
{
 8018dc4:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
 8018dc6:	f101 0308 	add.w	r3, r1, #8
	parent->next = child;
 8018dca:	2400      	movs	r4, #0
 8018dcc:	608c      	str	r4, [r1, #8]
	return list->tail;
 8018dce:	6d04      	ldr	r4, [r0, #80]	; 0x50
Z_GENLIST_APPEND(slist, snode)
 8018dd0:	b134      	cbz	r4, 8018de0 <bt_l2cap_chan_add+0x1c>
	parent->next = child;
 8018dd2:	6023      	str	r3, [r4, #0]
	list->tail = node;
 8018dd4:	6503      	str	r3, [r0, #80]	; 0x50
	chan->conn = conn;
 8018dd6:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
 8018dd8:	60ca      	str	r2, [r1, #12]
}
 8018dda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018dde:	4770      	bx	lr
 8018de0:	6503      	str	r3, [r0, #80]	; 0x50
	list->head = node;
 8018de2:	64c3      	str	r3, [r0, #76]	; 0x4c
}
 8018de4:	e7f7      	b.n	8018dd6 <bt_l2cap_chan_add+0x12>

08018de6 <bt_l2cap_disconnected>:
{
 8018de6:	b510      	push	{r4, lr}
	return list->head;
 8018de8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
 8018dea:	b140      	cbz	r0, 8018dfe <bt_l2cap_disconnected+0x18>
 8018dec:	3808      	subs	r0, #8
 8018dee:	d008      	beq.n	8018e02 <bt_l2cap_disconnected+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
 8018df0:	f110 0408 	adds.w	r4, r0, #8
 8018df4:	d00a      	beq.n	8018e0c <bt_l2cap_disconnected+0x26>
	return node->next;
 8018df6:	6884      	ldr	r4, [r0, #8]
 8018df8:	b144      	cbz	r4, 8018e0c <bt_l2cap_disconnected+0x26>
 8018dfa:	3c08      	subs	r4, #8
 8018dfc:	e006      	b.n	8018e0c <bt_l2cap_disconnected+0x26>
 8018dfe:	4604      	mov	r4, r0
 8018e00:	e004      	b.n	8018e0c <bt_l2cap_disconnected+0x26>
 8018e02:	4604      	mov	r4, r0
 8018e04:	e002      	b.n	8018e0c <bt_l2cap_disconnected+0x26>
 8018e06:	4623      	mov	r3, r4
 8018e08:	4620      	mov	r0, r4
 8018e0a:	461c      	mov	r4, r3
 8018e0c:	b158      	cbz	r0, 8018e26 <bt_l2cap_disconnected+0x40>
		bt_l2cap_chan_del(chan);
 8018e0e:	f7ff ffc6 	bl	8018d9e <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
 8018e12:	2c00      	cmp	r4, #0
 8018e14:	d0f7      	beq.n	8018e06 <bt_l2cap_disconnected+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
 8018e16:	f114 0308 	adds.w	r3, r4, #8
 8018e1a:	d0f5      	beq.n	8018e08 <bt_l2cap_disconnected+0x22>
	return node->next;
 8018e1c:	68a3      	ldr	r3, [r4, #8]
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d0f2      	beq.n	8018e08 <bt_l2cap_disconnected+0x22>
 8018e22:	3b08      	subs	r3, #8
 8018e24:	e7f0      	b.n	8018e08 <bt_l2cap_disconnected+0x22>
}
 8018e26:	bd10      	pop	{r4, pc}

08018e28 <bt_l2cap_security_changed>:
{
 8018e28:	b538      	push	{r3, r4, r5, lr}
 8018e2a:	460d      	mov	r5, r1
	return list->head;
 8018e2c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
 8018e2e:	b140      	cbz	r0, 8018e42 <bt_l2cap_security_changed+0x1a>
 8018e30:	3808      	subs	r0, #8
 8018e32:	d008      	beq.n	8018e46 <bt_l2cap_security_changed+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
 8018e34:	f110 0408 	adds.w	r4, r0, #8
 8018e38:	d00a      	beq.n	8018e50 <bt_l2cap_security_changed+0x28>
	return node->next;
 8018e3a:	6884      	ldr	r4, [r0, #8]
 8018e3c:	b144      	cbz	r4, 8018e50 <bt_l2cap_security_changed+0x28>
 8018e3e:	3c08      	subs	r4, #8
 8018e40:	e006      	b.n	8018e50 <bt_l2cap_security_changed+0x28>
 8018e42:	4604      	mov	r4, r0
 8018e44:	e004      	b.n	8018e50 <bt_l2cap_security_changed+0x28>
 8018e46:	4604      	mov	r4, r0
 8018e48:	e002      	b.n	8018e50 <bt_l2cap_security_changed+0x28>
 8018e4a:	4623      	mov	r3, r4
 8018e4c:	4620      	mov	r0, r4
 8018e4e:	461c      	mov	r4, r3
 8018e50:	b170      	cbz	r0, 8018e70 <bt_l2cap_security_changed+0x48>
		if (chan->ops->encrypt_change) {
 8018e52:	6843      	ldr	r3, [r0, #4]
 8018e54:	689b      	ldr	r3, [r3, #8]
 8018e56:	b10b      	cbz	r3, 8018e5c <bt_l2cap_security_changed+0x34>
			chan->ops->encrypt_change(chan, hci_status);
 8018e58:	4629      	mov	r1, r5
 8018e5a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
 8018e5c:	2c00      	cmp	r4, #0
 8018e5e:	d0f4      	beq.n	8018e4a <bt_l2cap_security_changed+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
 8018e60:	f114 0308 	adds.w	r3, r4, #8
 8018e64:	d0f2      	beq.n	8018e4c <bt_l2cap_security_changed+0x24>
	return node->next;
 8018e66:	68a3      	ldr	r3, [r4, #8]
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	d0ef      	beq.n	8018e4c <bt_l2cap_security_changed+0x24>
 8018e6c:	3b08      	subs	r3, #8
 8018e6e:	e7ed      	b.n	8018e4c <bt_l2cap_security_changed+0x24>
}
 8018e70:	bd38      	pop	{r3, r4, r5, pc}

08018e72 <bt_l2cap_create_pdu_timeout>:
{
 8018e72:	b508      	push	{r3, lr}
	return bt_conn_create_pdu_timeout(pool,
 8018e74:	3104      	adds	r1, #4
 8018e76:	f7f4 fe3b 	bl	800daf0 <bt_conn_create_pdu_timeout>
}
 8018e7a:	bd08      	pop	{r3, pc}

08018e7c <bt_l2cap_send_cb>:
{
 8018e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e7e:	4605      	mov	r5, r0
 8018e80:	460f      	mov	r7, r1
 8018e82:	4614      	mov	r4, r2
 8018e84:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
 8018e86:	2104      	movs	r1, #4
 8018e88:	f102 0008 	add.w	r0, r2, #8
 8018e8c:	f002 f8fb 	bl	801b086 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
 8018e90:	89a3      	ldrh	r3, [r4, #12]
 8018e92:	3b04      	subs	r3, #4
 8018e94:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
 8018e96:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
 8018e98:	9b06      	ldr	r3, [sp, #24]
 8018e9a:	4632      	mov	r2, r6
 8018e9c:	4621      	mov	r1, r4
 8018e9e:	4628      	mov	r0, r5
 8018ea0:	f7f4 fb28 	bl	800d4f4 <bt_conn_send_cb>
}
 8018ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018ea6 <l2cap_send_reject>:
{
 8018ea6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018eaa:	b083      	sub	sp, #12
 8018eac:	4606      	mov	r6, r0
 8018eae:	4690      	mov	r8, r2
 8018eb0:	461c      	mov	r4, r3
 8018eb2:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
 8018eb6:	1cbb      	adds	r3, r7, #2
 8018eb8:	460a      	mov	r2, r1
 8018eba:	2101      	movs	r1, #1
 8018ebc:	2000      	movs	r0, #0
 8018ebe:	f7f5 f861 	bl	800df84 <l2cap_create_le_sig_pdu>
	if (!buf) {
 8018ec2:	b1a8      	cbz	r0, 8018ef0 <l2cap_send_reject+0x4a>
 8018ec4:	4605      	mov	r5, r0
	rej = net_buf_add(buf, sizeof(*rej));
 8018ec6:	f100 0908 	add.w	r9, r0, #8
 8018eca:	2102      	movs	r1, #2
 8018ecc:	4648      	mov	r0, r9
 8018ece:	f002 f8c2 	bl	801b056 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
 8018ed2:	f8a0 8000 	strh.w	r8, [r0]
	if (data) {
 8018ed6:	b124      	cbz	r4, 8018ee2 <l2cap_send_reject+0x3c>
		net_buf_add_mem(buf, data, data_len);
 8018ed8:	463a      	mov	r2, r7
 8018eda:	4621      	mov	r1, r4
 8018edc:	4648      	mov	r0, r9
 8018ede:	f002 f8c0 	bl	801b062 <net_buf_simple_add_mem>
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
 8018ee2:	2300      	movs	r3, #0
 8018ee4:	9300      	str	r3, [sp, #0]
 8018ee6:	462a      	mov	r2, r5
 8018ee8:	2105      	movs	r1, #5
 8018eea:	4630      	mov	r0, r6
 8018eec:	f7ff ffc6 	bl	8018e7c <bt_l2cap_send_cb>
}
 8018ef0:	b003      	add	sp, #12
 8018ef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08018ef6 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
 8018ef6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 8018ef8:	b110      	cbz	r0, 8018f00 <bt_l2cap_le_lookup_tx_cid+0xa>
 8018efa:	3808      	subs	r0, #8
 8018efc:	e000      	b.n	8018f00 <bt_l2cap_le_lookup_tx_cid+0xa>
 8018efe:	3808      	subs	r0, #8
 8018f00:	b148      	cbz	r0, 8018f16 <bt_l2cap_le_lookup_tx_cid+0x20>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
 8018f02:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
 8018f06:	428b      	cmp	r3, r1
 8018f08:	d005      	beq.n	8018f16 <bt_l2cap_le_lookup_tx_cid+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
 8018f0a:	f110 0308 	adds.w	r3, r0, #8
 8018f0e:	d003      	beq.n	8018f18 <bt_l2cap_le_lookup_tx_cid+0x22>
	return node->next;
 8018f10:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 8018f12:	2800      	cmp	r0, #0
 8018f14:	d1f3      	bne.n	8018efe <bt_l2cap_le_lookup_tx_cid+0x8>
}
 8018f16:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 8018f18:	4618      	mov	r0, r3
 8018f1a:	e7f1      	b.n	8018f00 <bt_l2cap_le_lookup_tx_cid+0xa>

08018f1c <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
 8018f1c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 8018f1e:	b110      	cbz	r0, 8018f26 <bt_l2cap_le_lookup_rx_cid+0xa>
 8018f20:	3808      	subs	r0, #8
 8018f22:	e000      	b.n	8018f26 <bt_l2cap_le_lookup_rx_cid+0xa>
 8018f24:	3808      	subs	r0, #8
 8018f26:	b148      	cbz	r0, 8018f3c <bt_l2cap_le_lookup_rx_cid+0x20>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
 8018f28:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
 8018f2c:	428b      	cmp	r3, r1
 8018f2e:	d005      	beq.n	8018f3c <bt_l2cap_le_lookup_rx_cid+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
 8018f30:	f110 0308 	adds.w	r3, r0, #8
 8018f34:	d003      	beq.n	8018f3e <bt_l2cap_le_lookup_rx_cid+0x22>
	return node->next;
 8018f36:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 8018f38:	2800      	cmp	r0, #0
 8018f3a:	d1f3      	bne.n	8018f24 <bt_l2cap_le_lookup_rx_cid+0x8>
}
 8018f3c:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 8018f3e:	4618      	mov	r0, r3
 8018f40:	e7f1      	b.n	8018f26 <bt_l2cap_le_lookup_rx_cid+0xa>

08018f42 <bt_l2cap_update_conn_param>:
{
 8018f42:	b570      	push	{r4, r5, r6, lr}
 8018f44:	b082      	sub	sp, #8
 8018f46:	4605      	mov	r5, r0
 8018f48:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
 8018f4a:	f7f4 ff21 	bl	800dd90 <get_ident>
 8018f4e:	4602      	mov	r2, r0
 8018f50:	2308      	movs	r3, #8
 8018f52:	2112      	movs	r1, #18
 8018f54:	2000      	movs	r0, #0
 8018f56:	f7f5 f815 	bl	800df84 <l2cap_create_le_sig_pdu>
	if (!buf) {
 8018f5a:	b1b8      	cbz	r0, 8018f8c <bt_l2cap_update_conn_param+0x4a>
 8018f5c:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
 8018f5e:	2108      	movs	r1, #8
 8018f60:	4408      	add	r0, r1
 8018f62:	f002 f878 	bl	801b056 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
 8018f66:	8823      	ldrh	r3, [r4, #0]
 8018f68:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
 8018f6a:	8863      	ldrh	r3, [r4, #2]
 8018f6c:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
 8018f6e:	88a3      	ldrh	r3, [r4, #4]
 8018f70:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
 8018f72:	88e3      	ldrh	r3, [r4, #6]
 8018f74:	80c3      	strh	r3, [r0, #6]
 8018f76:	2400      	movs	r4, #0
 8018f78:	9400      	str	r4, [sp, #0]
 8018f7a:	4623      	mov	r3, r4
 8018f7c:	4632      	mov	r2, r6
 8018f7e:	2105      	movs	r1, #5
 8018f80:	4628      	mov	r0, r5
 8018f82:	f7ff ff7b 	bl	8018e7c <bt_l2cap_send_cb>
	return 0;
 8018f86:	4620      	mov	r0, r4
}
 8018f88:	b002      	add	sp, #8
 8018f8a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
 8018f8c:	f06f 000b 	mvn.w	r0, #11
 8018f90:	e7fa      	b.n	8018f88 <bt_l2cap_update_conn_param+0x46>

08018f92 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
 8018f92:	4770      	bx	lr

08018f94 <att_sent>:
{
 8018f94:	b508      	push	{r3, lr}
	if (chan->ops->sent) {
 8018f96:	684b      	ldr	r3, [r1, #4]
 8018f98:	695b      	ldr	r3, [r3, #20]
 8018f9a:	b10b      	cbz	r3, 8018fa0 <att_sent+0xc>
 8018f9c:	4608      	mov	r0, r1
		chan->ops->sent(chan);
 8018f9e:	4798      	blx	r3
}
 8018fa0:	bd08      	pop	{r3, pc}

08018fa2 <range_is_valid>:
	if (!start || !end) {
 8018fa2:	b120      	cbz	r0, 8018fae <range_is_valid+0xc>
 8018fa4:	b119      	cbz	r1, 8018fae <range_is_valid+0xc>
	if (start > end) {
 8018fa6:	4288      	cmp	r0, r1
 8018fa8:	d806      	bhi.n	8018fb8 <range_is_valid+0x16>
	return true;
 8018faa:	2001      	movs	r0, #1
}
 8018fac:	4770      	bx	lr
		if (err) {
 8018fae:	b10a      	cbz	r2, 8018fb4 <range_is_valid+0x12>
			*err = 0U;
 8018fb0:	2300      	movs	r3, #0
 8018fb2:	8013      	strh	r3, [r2, #0]
		return false;
 8018fb4:	2000      	movs	r0, #0
 8018fb6:	4770      	bx	lr
		if (err) {
 8018fb8:	b102      	cbz	r2, 8018fbc <range_is_valid+0x1a>
			*err = start;
 8018fba:	8010      	strh	r0, [r2, #0]
		return false;
 8018fbc:	2000      	movs	r0, #0
 8018fbe:	4770      	bx	lr

08018fc0 <err_to_att>:
	if (err < 0 && err >= -0xff) {
 8018fc0:	f110 0fff 	cmn.w	r0, #255	; 0xff
 8018fc4:	d201      	bcs.n	8018fca <err_to_att+0xa>
	return BT_ATT_ERR_UNLIKELY;
 8018fc6:	200e      	movs	r0, #14
}
 8018fc8:	4770      	bx	lr
		return -err;
 8018fca:	4240      	negs	r0, r0
 8018fcc:	b2c0      	uxtb	r0, r0
 8018fce:	4770      	bx	lr

08018fd0 <attr_read_type_cb>:
{
 8018fd0:	b410      	push	{r4}
	if (!data->rsp->len) {
 8018fd2:	68d4      	ldr	r4, [r2, #12]
 8018fd4:	7823      	ldrb	r3, [r4, #0]
 8018fd6:	b92b      	cbnz	r3, 8018fe4 <attr_read_type_cb+0x14>
		data->rsp->len = read + sizeof(*data->item);
 8018fd8:	3102      	adds	r1, #2
 8018fda:	7021      	strb	r1, [r4, #0]
	return true;
 8018fdc:	2001      	movs	r0, #1
}
 8018fde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018fe2:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->item)) {
 8018fe4:	3102      	adds	r1, #2
 8018fe6:	428b      	cmp	r3, r1
 8018fe8:	d005      	beq.n	8018ff6 <attr_read_type_cb+0x26>
		frag->len -= sizeof(*data->item);
 8018fea:	8983      	ldrh	r3, [r0, #12]
 8018fec:	3b02      	subs	r3, #2
 8018fee:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
 8018ff0:	2000      	movs	r0, #0
 8018ff2:	6110      	str	r0, [r2, #16]
		return false;
 8018ff4:	e7f3      	b.n	8018fde <attr_read_type_cb+0xe>
	return true;
 8018ff6:	2001      	movs	r0, #1
 8018ff8:	e7f1      	b.n	8018fde <attr_read_type_cb+0xe>

08018ffa <attr_read_group_cb>:
	if (!data->rsp->len) {
 8018ffa:	68d0      	ldr	r0, [r2, #12]
 8018ffc:	7803      	ldrb	r3, [r0, #0]
 8018ffe:	b91b      	cbnz	r3, 8019008 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
 8019000:	3104      	adds	r1, #4
 8019002:	7001      	strb	r1, [r0, #0]
	return true;
 8019004:	2001      	movs	r0, #1
 8019006:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
 8019008:	3104      	adds	r1, #4
 801900a:	428b      	cmp	r3, r1
 801900c:	d006      	beq.n	801901c <attr_read_group_cb+0x22>
		data->buf->len -= sizeof(*data->group);
 801900e:	6891      	ldr	r1, [r2, #8]
 8019010:	898b      	ldrh	r3, [r1, #12]
 8019012:	3b04      	subs	r3, #4
 8019014:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
 8019016:	2000      	movs	r0, #0
 8019018:	6110      	str	r0, [r2, #16]
		return false;
 801901a:	4770      	bx	lr
	return true;
 801901c:	2001      	movs	r0, #1
}
 801901e:	4770      	bx	lr

08019020 <att_prepare_write_req>:
}
 8019020:	2006      	movs	r0, #6
 8019022:	4770      	bx	lr

08019024 <att_exec_write_req>:
}
 8019024:	2006      	movs	r0, #6
 8019026:	4770      	bx	lr

08019028 <att_op_get_type>:
	switch (op) {
 8019028:	1e43      	subs	r3, r0, #1
 801902a:	2bd1      	cmp	r3, #209	; 0xd1
 801902c:	d874      	bhi.n	8019118 <att_op_get_type+0xf0>
 801902e:	e8df f003 	tbb	[pc, r3]
 8019032:	696d      	.short	0x696d
 8019034:	696d696d 	.word	0x696d696d
 8019038:	696d696d 	.word	0x696d696d
 801903c:	696d696d 	.word	0x696d696d
 8019040:	696d696d 	.word	0x696d696d
 8019044:	6973736d 	.word	0x6973736d
 8019048:	736d696d 	.word	0x736d696d
 801904c:	7871736f 	.word	0x7871736f
 8019050:	73737373 	.word	0x73737373
 8019054:	73737373 	.word	0x73737373
 8019058:	73737373 	.word	0x73737373
 801905c:	73737373 	.word	0x73737373
 8019060:	73737373 	.word	0x73737373
 8019064:	73737373 	.word	0x73737373
 8019068:	73737373 	.word	0x73737373
 801906c:	73737373 	.word	0x73737373
 8019070:	73737373 	.word	0x73737373
 8019074:	73737373 	.word	0x73737373
 8019078:	73737373 	.word	0x73737373
 801907c:	73737373 	.word	0x73737373
 8019080:	6b737373 	.word	0x6b737373
 8019084:	73737373 	.word	0x73737373
 8019088:	73737373 	.word	0x73737373
 801908c:	73737373 	.word	0x73737373
 8019090:	73737373 	.word	0x73737373
 8019094:	73737373 	.word	0x73737373
 8019098:	73737373 	.word	0x73737373
 801909c:	73737373 	.word	0x73737373
 80190a0:	73737373 	.word	0x73737373
 80190a4:	73737373 	.word	0x73737373
 80190a8:	73737373 	.word	0x73737373
 80190ac:	73737373 	.word	0x73737373
 80190b0:	73737373 	.word	0x73737373
 80190b4:	73737373 	.word	0x73737373
 80190b8:	73737373 	.word	0x73737373
 80190bc:	73737373 	.word	0x73737373
 80190c0:	73737373 	.word	0x73737373
 80190c4:	73737373 	.word	0x73737373
 80190c8:	73737373 	.word	0x73737373
 80190cc:	73737373 	.word	0x73737373
 80190d0:	73737373 	.word	0x73737373
 80190d4:	73737373 	.word	0x73737373
 80190d8:	73737373 	.word	0x73737373
 80190dc:	73737373 	.word	0x73737373
 80190e0:	73737373 	.word	0x73737373
 80190e4:	73737373 	.word	0x73737373
 80190e8:	73737373 	.word	0x73737373
 80190ec:	73737373 	.word	0x73737373
 80190f0:	73737373 	.word	0x73737373
 80190f4:	73737373 	.word	0x73737373
 80190f8:	73737373 	.word	0x73737373
 80190fc:	73737373 	.word	0x73737373
 8019100:	6b737373 	.word	0x6b737373
{
 8019104:	2001      	movs	r0, #1
 8019106:	4770      	bx	lr
		return ATT_COMMAND;
 8019108:	2000      	movs	r0, #0
 801910a:	4770      	bx	lr
		return ATT_RESPONSE;
 801910c:	2002      	movs	r0, #2
 801910e:	4770      	bx	lr
		return ATT_NOTIFICATION;
 8019110:	2003      	movs	r0, #3
 8019112:	4770      	bx	lr
		return ATT_INDICATION;
 8019114:	2005      	movs	r0, #5
 8019116:	4770      	bx	lr
	if (op & ATT_CMD_MASK) {
 8019118:	f010 0f40 	tst.w	r0, #64	; 0x40
 801911c:	d103      	bne.n	8019126 <att_op_get_type+0xfe>
	return ATT_UNKNOWN;
 801911e:	2006      	movs	r0, #6
 8019120:	4770      	bx	lr
		return ATT_CONFIRMATION;
 8019122:	2004      	movs	r0, #4
 8019124:	4770      	bx	lr
		return ATT_COMMAND;
 8019126:	2000      	movs	r0, #0
}
 8019128:	4770      	bx	lr

0801912a <att_chan_attach>:
{
 801912a:	b538      	push	{r3, r4, r5, lr}
 801912c:	4604      	mov	r4, r0
 801912e:	460d      	mov	r5, r1
	return list->head;
 8019130:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sys_slist_is_empty(&att->chans)) {
 8019132:	b143      	cbz	r3, 8019146 <att_chan_attach+0x1c>
	sys_slist_prepend(&att->chans, &chan->node);
 8019134:	f505 7396 	add.w	r3, r5, #300	; 0x12c
 8019138:	6a62      	ldr	r2, [r4, #36]	; 0x24
	parent->next = child;
 801913a:	f8c5 212c 	str.w	r2, [r5, #300]	; 0x12c
	list->head = node;
 801913e:	6263      	str	r3, [r4, #36]	; 0x24
	return list->tail;
 8019140:	6aa2      	ldr	r2, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
 8019142:	b122      	cbz	r2, 801914e <att_chan_attach+0x24>
}
 8019144:	bd38      	pop	{r3, r4, r5, pc}
		k_fifo_init(&att->tx_queue);
 8019146:	300c      	adds	r0, #12
	z_impl_k_queue_init(queue);
 8019148:	f003 fc84 	bl	801ca54 <z_impl_k_queue_init>
}
 801914c:	e7f2      	b.n	8019134 <att_chan_attach+0xa>
	list->tail = node;
 801914e:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8019150:	e7f8      	b.n	8019144 <att_chan_attach+0x1a>

08019152 <chan_req_send>:
{
 8019152:	b570      	push	{r4, r5, r6, lr}
 8019154:	4606      	mov	r6, r0
 8019156:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
 8019158:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 801915c:	692b      	ldr	r3, [r5, #16]
	size_t bytes = 0;
 801915e:	2200      	movs	r2, #0
	while (buf) {
 8019160:	b11b      	cbz	r3, 801916a <chan_req_send+0x18>
		bytes += buf->len;
 8019162:	899c      	ldrh	r4, [r3, #12]
 8019164:	4422      	add	r2, r4
		buf = buf->frags;
 8019166:	681b      	ldr	r3, [r3, #0]
 8019168:	e7fa      	b.n	8019160 <chan_req_send+0xe>
 801916a:	4291      	cmp	r1, r2
 801916c:	d319      	bcc.n	80191a2 <chan_req_send+0x50>
	chan->req = req;
 801916e:	f8c6 50c4 	str.w	r5, [r6, #196]	; 0xc4
	net_buf_simple_save(&req->buf->b, &req->state);
 8019172:	692c      	ldr	r4, [r5, #16]
	state->offset = net_buf_simple_headroom(buf);
 8019174:	f104 0008 	add.w	r0, r4, #8
 8019178:	f001 ffa5 	bl	801b0c6 <net_buf_simple_headroom>
 801917c:	81a8      	strh	r0, [r5, #12]
	state->len = buf->len;
 801917e:	89a3      	ldrh	r3, [r4, #12]
 8019180:	81eb      	strh	r3, [r5, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
 8019182:	6928      	ldr	r0, [r5, #16]
 8019184:	f001 ff43 	bl	801b00e <net_buf_ref>
 8019188:	4601      	mov	r1, r0
 801918a:	2200      	movs	r2, #0
 801918c:	4630      	mov	r0, r6
 801918e:	f7f5 f971 	bl	800e474 <chan_send>
	if (err) {
 8019192:	4604      	mov	r4, r0
 8019194:	b908      	cbnz	r0, 801919a <chan_req_send+0x48>
}
 8019196:	4620      	mov	r0, r4
 8019198:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(req->buf);
 801919a:	6928      	ldr	r0, [r5, #16]
 801919c:	f001 ff11 	bl	801afc2 <net_buf_unref>
 80191a0:	e7f9      	b.n	8019196 <chan_req_send+0x44>
		return -EMSGSIZE;
 80191a2:	f06f 0423 	mvn.w	r4, #35	; 0x23
 80191a6:	e7f6      	b.n	8019196 <chan_req_send+0x44>

080191a8 <bt_att_chan_send>:
{
 80191a8:	b570      	push	{r4, r5, r6, lr}
 80191aa:	4604      	mov	r4, r0
 80191ac:	460d      	mov	r5, r1
	if (!cb) {
 80191ae:	4616      	mov	r6, r2
 80191b0:	b12a      	cbz	r2, 80191be <bt_att_chan_send+0x16>
	return chan_send(chan, buf, cb);
 80191b2:	4632      	mov	r2, r6
 80191b4:	4629      	mov	r1, r5
 80191b6:	4620      	mov	r0, r4
 80191b8:	f7f5 f95c 	bl	800e474 <chan_send>
}
 80191bc:	bd70      	pop	{r4, r5, r6, pc}
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
 80191be:	f500 7088 	add.w	r0, r0, #272	; 0x110
	return z_impl_k_sem_take(sem, timeout);
 80191c2:	2200      	movs	r2, #0
 80191c4:	2300      	movs	r3, #0
 80191c6:	f7fb f95b 	bl	8014480 <z_impl_k_sem_take>
 80191ca:	2800      	cmp	r0, #0
 80191cc:	daf1      	bge.n	80191b2 <bt_att_chan_send+0xa>
			return -EAGAIN;
 80191ce:	f06f 000a 	mvn.w	r0, #10
 80191d2:	e7f3      	b.n	80191bc <bt_att_chan_send+0x14>

080191d4 <chan_cfm_sent>:
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
 80191d4:	30c0      	adds	r0, #192	; 0xc0
 80191d6:	f3bf 8f5b 	dmb	ish
 80191da:	e850 3f00 	ldrex	r3, [r0]
 80191de:	f023 0302 	bic.w	r3, r3, #2
 80191e2:	e840 3200 	strex	r2, r3, [r0]
 80191e6:	2a00      	cmp	r2, #0
 80191e8:	d1f7      	bne.n	80191da <chan_cfm_sent+0x6>
 80191ea:	f3bf 8f5b 	dmb	ish
}
 80191ee:	4770      	bx	lr

080191f0 <chan_rsp_sent>:
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
 80191f0:	30c0      	adds	r0, #192	; 0xc0
 80191f2:	f3bf 8f5b 	dmb	ish
 80191f6:	e850 3f00 	ldrex	r3, [r0]
 80191fa:	f023 0301 	bic.w	r3, r3, #1
 80191fe:	e840 3200 	strex	r2, r3, [r0]
 8019202:	2a00      	cmp	r2, #0
 8019204:	d1f7      	bne.n	80191f6 <chan_rsp_sent+0x6>
 8019206:	f3bf 8f5b 	dmb	ish
}
 801920a:	4770      	bx	lr

0801920c <bt_att_chan_req_send>:
{
 801920c:	b570      	push	{r4, r5, r6, lr}
 801920e:	4604      	mov	r4, r0
 8019210:	460d      	mov	r5, r1
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
 8019212:	f500 7688 	add.w	r6, r0, #272	; 0x110
 8019216:	2200      	movs	r2, #0
 8019218:	2300      	movs	r3, #0
 801921a:	4630      	mov	r0, r6
 801921c:	f7fb f930 	bl	8014480 <z_impl_k_sem_take>
 8019220:	2800      	cmp	r0, #0
 8019222:	db07      	blt.n	8019234 <bt_att_chan_req_send+0x28>
	err = chan_req_send(chan, req);
 8019224:	4629      	mov	r1, r5
 8019226:	4620      	mov	r0, r4
 8019228:	f7ff ff93 	bl	8019152 <chan_req_send>
	if (err < 0) {
 801922c:	1e04      	subs	r4, r0, #0
 801922e:	db04      	blt.n	801923a <bt_att_chan_req_send+0x2e>
}
 8019230:	4620      	mov	r0, r4
 8019232:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
 8019234:	f06f 040a 	mvn.w	r4, #10
 8019238:	e7fa      	b.n	8019230 <bt_att_chan_req_send+0x24>
	z_impl_k_sem_give(sem);
 801923a:	4630      	mov	r0, r6
 801923c:	f7fb f8f8 	bl	8014430 <z_impl_k_sem_give>
}
 8019240:	e7f6      	b.n	8019230 <bt_att_chan_req_send+0x24>

08019242 <bt_att_status>:
{
 8019242:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8019244:	f3bf 8f5b 	dmb	ish
 8019248:	680b      	ldr	r3, [r1, #0]
 801924a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
 801924e:	f013 0f01 	tst.w	r3, #1
 8019252:	d004      	beq.n	801925e <bt_att_status+0x1c>
 8019254:	4604      	mov	r4, r0
 8019256:	3808      	subs	r0, #8
	if (chan->req) {
 8019258:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 801925c:	b103      	cbz	r3, 8019260 <bt_att_status+0x1e>
}
 801925e:	bd38      	pop	{r3, r4, r5, pc}
	node = sys_slist_get(&chan->att->reqs);
 8019260:	f854 3c08 	ldr.w	r3, [r4, #-8]
	return list->head;
 8019264:	685d      	ldr	r5, [r3, #4]
Z_GENLIST_GET(slist, snode)
 8019266:	2d00      	cmp	r5, #0
 8019268:	d0f9      	beq.n	801925e <bt_att_status+0x1c>
	return node->next;
 801926a:	682a      	ldr	r2, [r5, #0]
	list->head = node;
 801926c:	605a      	str	r2, [r3, #4]
	return list->tail;
 801926e:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 8019270:	428d      	cmp	r5, r1
 8019272:	d00e      	beq.n	8019292 <bt_att_status+0x50>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
 8019274:	4629      	mov	r1, r5
 8019276:	f7ff ffc9 	bl	801920c <bt_att_chan_req_send>
 801927a:	2800      	cmp	r0, #0
 801927c:	daef      	bge.n	801925e <bt_att_status+0x1c>
	sys_slist_prepend(&chan->att->reqs, node);
 801927e:	f854 3c08 	ldr.w	r3, [r4, #-8]
	return list->head;
 8019282:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
 8019284:	602a      	str	r2, [r5, #0]
	list->head = node;
 8019286:	605d      	str	r5, [r3, #4]
	return list->tail;
 8019288:	689a      	ldr	r2, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 801928a:	2a00      	cmp	r2, #0
 801928c:	d1e7      	bne.n	801925e <bt_att_status+0x1c>
	list->tail = node;
 801928e:	609d      	str	r5, [r3, #8]
}
 8019290:	e7e5      	b.n	801925e <bt_att_status+0x1c>
	list->tail = node;
 8019292:	609a      	str	r2, [r3, #8]
}
 8019294:	e7ee      	b.n	8019274 <bt_att_status+0x32>

08019296 <att_process>:
{
 8019296:	b570      	push	{r4, r5, r6, lr}
	return list->head;
 8019298:	6846      	ldr	r6, [r0, #4]
Z_GENLIST_GET(slist, snode)
 801929a:	2e00      	cmp	r6, #0
 801929c:	d038      	beq.n	8019310 <att_process+0x7a>
 801929e:	4605      	mov	r5, r0
	return node->next;
 80192a0:	6833      	ldr	r3, [r6, #0]
	list->head = node;
 80192a2:	6043      	str	r3, [r0, #4]
	return list->tail;
 80192a4:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 80192a6:	42b2      	cmp	r2, r6
 80192a8:	d00d      	beq.n	80192c6 <att_process+0x30>
	return list->head;
 80192aa:	6a68      	ldr	r0, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
 80192ac:	b198      	cbz	r0, 80192d6 <att_process+0x40>
 80192ae:	f5b0 7096 	subs.w	r0, r0, #300	; 0x12c
 80192b2:	d012      	beq.n	80192da <att_process+0x44>
Z_GENLIST_PEEK_NEXT(slist, snode)
 80192b4:	f510 7496 	adds.w	r4, r0, #300	; 0x12c
 80192b8:	d014      	beq.n	80192e4 <att_process+0x4e>
	return node->next;
 80192ba:	f8d0 412c 	ldr.w	r4, [r0, #300]	; 0x12c
 80192be:	b18c      	cbz	r4, 80192e4 <att_process+0x4e>
 80192c0:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
 80192c4:	e00e      	b.n	80192e4 <att_process+0x4e>
	list->tail = node;
 80192c6:	6083      	str	r3, [r0, #8]
}
 80192c8:	e7ef      	b.n	80192aa <att_process+0x14>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
 80192ca:	4631      	mov	r1, r6
 80192cc:	f7ff ff9e 	bl	801920c <bt_att_chan_req_send>
 80192d0:	2800      	cmp	r0, #0
 80192d2:	db0c      	blt.n	80192ee <att_process+0x58>
 80192d4:	e01c      	b.n	8019310 <att_process+0x7a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
 80192d6:	4604      	mov	r4, r0
 80192d8:	e004      	b.n	80192e4 <att_process+0x4e>
 80192da:	4604      	mov	r4, r0
 80192dc:	e002      	b.n	80192e4 <att_process+0x4e>
 80192de:	4623      	mov	r3, r4
 80192e0:	4620      	mov	r0, r4
 80192e2:	461c      	mov	r4, r3
 80192e4:	b178      	cbz	r0, 8019306 <att_process+0x70>
		if (!chan->req) {
 80192e6:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d0ed      	beq.n	80192ca <att_process+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
 80192ee:	2c00      	cmp	r4, #0
 80192f0:	d0f5      	beq.n	80192de <att_process+0x48>
Z_GENLIST_PEEK_NEXT(slist, snode)
 80192f2:	f514 7396 	adds.w	r3, r4, #300	; 0x12c
 80192f6:	d0f3      	beq.n	80192e0 <att_process+0x4a>
	return node->next;
 80192f8:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 80192fc:	2b00      	cmp	r3, #0
 80192fe:	d0ef      	beq.n	80192e0 <att_process+0x4a>
 8019300:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8019304:	e7ec      	b.n	80192e0 <att_process+0x4a>
	return list->head;
 8019306:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
 8019308:	6033      	str	r3, [r6, #0]
	list->head = node;
 801930a:	606e      	str	r6, [r5, #4]
	return list->tail;
 801930c:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
 801930e:	b103      	cbz	r3, 8019312 <att_process+0x7c>
}
 8019310:	bd70      	pop	{r4, r5, r6, pc}
	list->tail = node;
 8019312:	60ae      	str	r6, [r5, #8]
}
 8019314:	e7fc      	b.n	8019310 <att_process+0x7a>

08019316 <process_queue>:
{
 8019316:	b570      	push	{r4, r5, r6, lr}
 8019318:	4605      	mov	r5, r0
 801931a:	460c      	mov	r4, r1
	buf = net_buf_get(queue, K_NO_WAIT);
 801931c:	2200      	movs	r2, #0
 801931e:	2300      	movs	r3, #0
 8019320:	4608      	mov	r0, r1
 8019322:	f001 fe22 	bl	801af6a <net_buf_get>
	if (buf) {
 8019326:	b170      	cbz	r0, 8019346 <process_queue+0x30>
 8019328:	4606      	mov	r6, r0
		err = chan_send(chan, buf, NULL);
 801932a:	2200      	movs	r2, #0
 801932c:	4601      	mov	r1, r0
 801932e:	4628      	mov	r0, r5
 8019330:	f7f5 f8a0 	bl	800e474 <chan_send>
		if (err) {
 8019334:	4605      	mov	r5, r0
 8019336:	b908      	cbnz	r0, 801933c <process_queue+0x26>
}
 8019338:	4628      	mov	r0, r5
 801933a:	bd70      	pop	{r4, r5, r6, pc}
			k_queue_prepend(&queue->_queue, buf);
 801933c:	4631      	mov	r1, r6
 801933e:	4620      	mov	r0, r4
 8019340:	f003 fb9b 	bl	801ca7a <k_queue_prepend>
			return err;
 8019344:	e7f8      	b.n	8019338 <process_queue+0x22>
	return -ENOENT;
 8019346:	f06f 0501 	mvn.w	r5, #1
 801934a:	e7f5      	b.n	8019338 <process_queue+0x22>

0801934c <bt_att_sent>:
{
 801934c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801934e:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
 8019350:	f1a0 0508 	sub.w	r5, r0, #8
	struct bt_att *att = chan->att;
 8019354:	f850 6c08 	ldr.w	r6, [r0, #-8]
	if (chan->sent) {
 8019358:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
 801935c:	b10b      	cbz	r3, 8019362 <bt_att_sent+0x16>
		chan->sent(chan);
 801935e:	4628      	mov	r0, r5
 8019360:	4798      	blx	r3
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
 8019362:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8019366:	f3bf 8f5b 	dmb	ish
 801936a:	e853 2f00 	ldrex	r2, [r3]
 801936e:	f022 0210 	bic.w	r2, r2, #16
 8019372:	e843 2100 	strex	r1, r2, [r3]
 8019376:	2900      	cmp	r1, #0
 8019378:	d1f7      	bne.n	801936a <bt_att_sent+0x1e>
 801937a:	f3bf 8f5b 	dmb	ish
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
 801937e:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8019382:	b133      	cbz	r3, 8019392 <bt_att_sent+0x46>
	err = process_queue(chan, &chan->tx_queue);
 8019384:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
 8019388:	4628      	mov	r0, r5
 801938a:	f7ff ffc4 	bl	8019316 <process_queue>
	if (!err) {
 801938e:	b9c0      	cbnz	r0, 80193c2 <bt_att_sent+0x76>
}
 8019390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return list->head;
 8019392:	6877      	ldr	r7, [r6, #4]
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
 8019394:	2f00      	cmp	r7, #0
 8019396:	d0f5      	beq.n	8019384 <bt_att_sent+0x38>
	return node->next;
 8019398:	683b      	ldr	r3, [r7, #0]
	list->head = node;
 801939a:	6073      	str	r3, [r6, #4]
	return list->tail;
 801939c:	68b2      	ldr	r2, [r6, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 801939e:	4297      	cmp	r7, r2
 80193a0:	d00d      	beq.n	80193be <bt_att_sent+0x72>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
 80193a2:	4639      	mov	r1, r7
 80193a4:	4628      	mov	r0, r5
 80193a6:	f7ff fed4 	bl	8019152 <chan_req_send>
 80193aa:	2800      	cmp	r0, #0
 80193ac:	daf0      	bge.n	8019390 <bt_att_sent+0x44>
	return list->head;
 80193ae:	6873      	ldr	r3, [r6, #4]
	parent->next = child;
 80193b0:	603b      	str	r3, [r7, #0]
	list->head = node;
 80193b2:	6077      	str	r7, [r6, #4]
	return list->tail;
 80193b4:	68b3      	ldr	r3, [r6, #8]
Z_GENLIST_PREPEND(slist, snode)
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	d1e4      	bne.n	8019384 <bt_att_sent+0x38>
	list->tail = node;
 80193ba:	60b7      	str	r7, [r6, #8]
}
 80193bc:	e7e2      	b.n	8019384 <bt_att_sent+0x38>
	list->tail = node;
 80193be:	60b3      	str	r3, [r6, #8]
}
 80193c0:	e7ef      	b.n	80193a2 <bt_att_sent+0x56>
	err = process_queue(chan, &att->tx_queue);
 80193c2:	f106 010c 	add.w	r1, r6, #12
 80193c6:	4628      	mov	r0, r5
 80193c8:	f7ff ffa5 	bl	8019316 <process_queue>
	if (!err) {
 80193cc:	2800      	cmp	r0, #0
 80193ce:	d0df      	beq.n	8019390 <bt_att_sent+0x44>
	k_sem_give(&chan->tx_sem);
 80193d0:	f504 7084 	add.w	r0, r4, #264	; 0x108
	z_impl_k_sem_give(sem);
 80193d4:	f7fb f82c 	bl	8014430 <z_impl_k_sem_give>
}
 80193d8:	e7da      	b.n	8019390 <bt_att_sent+0x44>

080193da <write_cb>:
{
 80193da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80193dc:	b083      	sub	sp, #12
 80193de:	4606      	mov	r6, r0
 80193e0:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
 80193e2:	222a      	movs	r2, #42	; 0x2a
 80193e4:	4601      	mov	r1, r0
 80193e6:	6820      	ldr	r0, [r4, #0]
 80193e8:	f000 fe92 	bl	801a110 <bt_gatt_check_perm>
 80193ec:	7520      	strb	r0, [r4, #20]
	if (data->err) {
 80193ee:	b9e8      	cbnz	r0, 801942c <write_cb+0x52>
 80193f0:	4605      	mov	r5, r0
	if (!data->req) {
 80193f2:	7a23      	ldrb	r3, [r4, #8]
 80193f4:	b1a3      	cbz	r3, 8019420 <write_cb+0x46>
	uint8_t flags = 0U;
 80193f6:	4603      	mov	r3, r0
	write = attr->write(data->conn, attr, data->value, data->len,
 80193f8:	68b7      	ldr	r7, [r6, #8]
 80193fa:	9301      	str	r3, [sp, #4]
 80193fc:	8a63      	ldrh	r3, [r4, #18]
 80193fe:	9300      	str	r3, [sp, #0]
 8019400:	8a23      	ldrh	r3, [r4, #16]
 8019402:	68e2      	ldr	r2, [r4, #12]
 8019404:	4631      	mov	r1, r6
 8019406:	6820      	ldr	r0, [r4, #0]
 8019408:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
 801940a:	2800      	cmp	r0, #0
 801940c:	db02      	blt.n	8019414 <write_cb+0x3a>
 801940e:	8a23      	ldrh	r3, [r4, #16]
 8019410:	4298      	cmp	r0, r3
 8019412:	d007      	beq.n	8019424 <write_cb+0x4a>
		data->err = err_to_att(write);
 8019414:	f7ff fdd4 	bl	8018fc0 <err_to_att>
 8019418:	7520      	strb	r0, [r4, #20]
}
 801941a:	4628      	mov	r0, r5
 801941c:	b003      	add	sp, #12
 801941e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flags |= BT_GATT_WRITE_FLAG_CMD;
 8019420:	2302      	movs	r3, #2
 8019422:	e7e9      	b.n	80193f8 <write_cb+0x1e>
	data->err = 0U;
 8019424:	2300      	movs	r3, #0
 8019426:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
 8019428:	2501      	movs	r5, #1
 801942a:	e7f6      	b.n	801941a <write_cb+0x40>
		return BT_GATT_ITER_STOP;
 801942c:	2500      	movs	r5, #0
 801942e:	e7f4      	b.n	801941a <write_cb+0x40>

08019430 <bt_att_chan_send_rsp>:
{
 8019430:	b538      	push	{r3, r4, r5, lr}
 8019432:	4604      	mov	r4, r0
 8019434:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
 8019436:	f7ff feb7 	bl	80191a8 <bt_att_chan_send>
	if (err) {
 801943a:	b900      	cbnz	r0, 801943e <bt_att_chan_send_rsp+0xe>
}
 801943c:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_put(&chan->tx_queue, buf);
 801943e:	4629      	mov	r1, r5
 8019440:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
 8019444:	f001 fdb0 	bl	801afa8 <net_buf_put>
}
 8019448:	e7f8      	b.n	801943c <bt_att_chan_send_rsp+0xc>

0801944a <att_chan_read>:
{
 801944a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801944e:	b085      	sub	sp, #20
 8019450:	4680      	mov	r8, r0
 8019452:	4689      	mov	r9, r1
 8019454:	9202      	str	r2, [sp, #8]
 8019456:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
 8019458:	6881      	ldr	r1, [r0, #8]
 801945a:	9103      	str	r1, [sp, #12]
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
 801945c:	f8b0 005e 	ldrh.w	r0, [r0, #94]	; 0x5e
	while (buf) {
 8019460:	4613      	mov	r3, r2
	size_t bytes = 0;
 8019462:	2200      	movs	r2, #0
	while (buf) {
 8019464:	b11b      	cbz	r3, 801946e <att_chan_read+0x24>
		bytes += buf->len;
 8019466:	8999      	ldrh	r1, [r3, #12]
 8019468:	440a      	add	r2, r1
		buf = buf->frags;
 801946a:	681b      	ldr	r3, [r3, #0]
 801946c:	e7fa      	b.n	8019464 <att_chan_read+0x1a>
 801946e:	4290      	cmp	r0, r2
 8019470:	d804      	bhi.n	801947c <att_chan_read+0x32>
		return 0;
 8019472:	2400      	movs	r4, #0
}
 8019474:	4620      	mov	r0, r4
 8019476:	b005      	add	sp, #20
 8019478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(buf);
 801947c:	9802      	ldr	r0, [sp, #8]
 801947e:	f001 fdca 	bl	801b016 <net_buf_frag_last>
 8019482:	4607      	mov	r7, r0
	size_t len, total = 0;
 8019484:	f04f 0a00 	mov.w	sl, #0
 8019488:	e083      	b.n	8019592 <att_chan_read+0x148>
		bytes += buf->len;
 801948a:	8999      	ldrh	r1, [r3, #12]
 801948c:	440a      	add	r2, r1
		buf = buf->frags;
 801948e:	681b      	ldr	r3, [r3, #0]
	while (buf) {
 8019490:	2b00      	cmp	r3, #0
 8019492:	d1fa      	bne.n	801948a <att_chan_read+0x40>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
 8019494:	1aa4      	subs	r4, r4, r2
 8019496:	f107 0608 	add.w	r6, r7, #8
 801949a:	4630      	mov	r0, r6
 801949c:	f001 fe17 	bl	801b0ce <net_buf_simple_tailroom>
 80194a0:	4284      	cmp	r4, r0
 80194a2:	d32c      	bcc.n	80194fe <att_chan_read+0xb4>
 80194a4:	4630      	mov	r0, r6
 80194a6:	f001 fe12 	bl	801b0ce <net_buf_simple_tailroom>
 80194aa:	4606      	mov	r6, r0
		if (!len) {
 80194ac:	2e00      	cmp	r6, #0
 80194ae:	d032      	beq.n	8019516 <att_chan_read+0xcc>
		read = attr->read(conn, attr, frag->data + frag->len, len,
 80194b0:	f8d9 4004 	ldr.w	r4, [r9, #4]
 80194b4:	68b9      	ldr	r1, [r7, #8]
 80194b6:	89ba      	ldrh	r2, [r7, #12]
 80194b8:	9500      	str	r5, [sp, #0]
 80194ba:	b2b3      	uxth	r3, r6
 80194bc:	440a      	add	r2, r1
 80194be:	4649      	mov	r1, r9
 80194c0:	9803      	ldr	r0, [sp, #12]
 80194c2:	47a0      	blx	r4
		if (read < 0) {
 80194c4:	1e04      	subs	r4, r0, #0
 80194c6:	db5a      	blt.n	801957e <att_chan_read+0x134>
		if (cb && !cb(frag, read, user_data)) {
 80194c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80194ca:	b12b      	cbz	r3, 80194d8 <att_chan_read+0x8e>
 80194cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80194ce:	4621      	mov	r1, r4
 80194d0:	4638      	mov	r0, r7
 80194d2:	4798      	blx	r3
 80194d4:	2800      	cmp	r0, #0
 80194d6:	d061      	beq.n	801959c <att_chan_read+0x152>
		net_buf_add(frag, read);
 80194d8:	46a3      	mov	fp, r4
 80194da:	4621      	mov	r1, r4
 80194dc:	f107 0008 	add.w	r0, r7, #8
 80194e0:	f001 fdb9 	bl	801b056 <net_buf_simple_add>
		total += read;
 80194e4:	44a2      	add	sl, r4
		offset += read;
 80194e6:	4425      	add	r5, r4
 80194e8:	b2ad      	uxth	r5, r5
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
 80194ea:	f8b8 005e 	ldrh.w	r0, [r8, #94]	; 0x5e
 80194ee:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
 80194f0:	2200      	movs	r2, #0
	while (buf) {
 80194f2:	2b00      	cmp	r3, #0
 80194f4:	d049      	beq.n	801958a <att_chan_read+0x140>
		bytes += buf->len;
 80194f6:	8999      	ldrh	r1, [r3, #12]
 80194f8:	440a      	add	r2, r1
		buf = buf->frags;
 80194fa:	681b      	ldr	r3, [r3, #0]
 80194fc:	e7f9      	b.n	80194f2 <att_chan_read+0xa8>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
 80194fe:	f8b8 605e 	ldrh.w	r6, [r8, #94]	; 0x5e
	while (buf) {
 8019502:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
 8019504:	2200      	movs	r2, #0
	while (buf) {
 8019506:	e002      	b.n	801950e <att_chan_read+0xc4>
		bytes += buf->len;
 8019508:	8999      	ldrh	r1, [r3, #12]
 801950a:	440a      	add	r2, r1
		buf = buf->frags;
 801950c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
 801950e:	2b00      	cmp	r3, #0
 8019510:	d1fa      	bne.n	8019508 <att_chan_read+0xbe>
 8019512:	1ab6      	subs	r6, r6, r2
 8019514:	e7ca      	b.n	80194ac <att_chan_read+0x62>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
 8019516:	9b02      	ldr	r3, [sp, #8]
 8019518:	7998      	ldrb	r0, [r3, #6]
 801951a:	f7f8 ffa9 	bl	8012470 <net_buf_pool_get>
 801951e:	2200      	movs	r2, #0
 8019520:	2300      	movs	r3, #0
 8019522:	f001 fd1b 	bl	801af5c <net_buf_alloc_fixed>
			if (!frag) {
 8019526:	4607      	mov	r7, r0
 8019528:	b150      	cbz	r0, 8019540 <att_chan_read+0xf6>
			net_buf_frag_add(buf, frag);
 801952a:	4601      	mov	r1, r0
 801952c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8019530:	4658      	mov	r0, fp
 8019532:	f001 fd81 	bl	801b038 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
 8019536:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
	size_t bytes = 0;
 801953a:	4632      	mov	r2, r6
	while (buf) {
 801953c:	465b      	mov	r3, fp
 801953e:	e004      	b.n	801954a <att_chan_read+0x100>
				return total;
 8019540:	4654      	mov	r4, sl
 8019542:	e797      	b.n	8019474 <att_chan_read+0x2a>
		bytes += buf->len;
 8019544:	8999      	ldrh	r1, [r3, #12]
 8019546:	440a      	add	r2, r1
		buf = buf->frags;
 8019548:	681b      	ldr	r3, [r3, #0]
	while (buf) {
 801954a:	2b00      	cmp	r3, #0
 801954c:	d1fa      	bne.n	8019544 <att_chan_read+0xfa>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
 801954e:	1aa4      	subs	r4, r4, r2
 8019550:	f107 0b08 	add.w	fp, r7, #8
 8019554:	4658      	mov	r0, fp
 8019556:	f001 fdba 	bl	801b0ce <net_buf_simple_tailroom>
 801955a:	4284      	cmp	r4, r0
 801955c:	d304      	bcc.n	8019568 <att_chan_read+0x11e>
 801955e:	4658      	mov	r0, fp
 8019560:	f001 fdb5 	bl	801b0ce <net_buf_simple_tailroom>
 8019564:	4606      	mov	r6, r0
 8019566:	e7a3      	b.n	80194b0 <att_chan_read+0x66>
 8019568:	f8b8 105e 	ldrh.w	r1, [r8, #94]	; 0x5e
 801956c:	9b02      	ldr	r3, [sp, #8]
 801956e:	e002      	b.n	8019576 <att_chan_read+0x12c>
		bytes += buf->len;
 8019570:	899a      	ldrh	r2, [r3, #12]
 8019572:	4416      	add	r6, r2
		buf = buf->frags;
 8019574:	681b      	ldr	r3, [r3, #0]
	while (buf) {
 8019576:	2b00      	cmp	r3, #0
 8019578:	d1fa      	bne.n	8019570 <att_chan_read+0x126>
 801957a:	1b8e      	subs	r6, r1, r6
 801957c:	e798      	b.n	80194b0 <att_chan_read+0x66>
			if (total) {
 801957e:	f1ba 0f00 	cmp.w	sl, #0
 8019582:	f43f af77 	beq.w	8019474 <att_chan_read+0x2a>
				return total;
 8019586:	4654      	mov	r4, sl
 8019588:	e774      	b.n	8019474 <att_chan_read+0x2a>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
 801958a:	4290      	cmp	r0, r2
 801958c:	d906      	bls.n	801959c <att_chan_read+0x152>
 801958e:	45b3      	cmp	fp, r6
 8019590:	d104      	bne.n	801959c <att_chan_read+0x152>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
 8019592:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
 8019596:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
 8019598:	2200      	movs	r2, #0
	while (buf) {
 801959a:	e779      	b.n	8019490 <att_chan_read+0x46>
	return total;
 801959c:	4654      	mov	r4, sl
 801959e:	e769      	b.n	8019474 <att_chan_read+0x2a>

080195a0 <read_cb>:
{
 80195a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80195a2:	b083      	sub	sp, #12
 80195a4:	4606      	mov	r6, r0
 80195a6:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
 80195a8:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
 80195aa:	68bd      	ldr	r5, [r7, #8]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
 80195ac:	6890      	ldr	r0, [r2, #8]
 80195ae:	2100      	movs	r1, #0
 80195b0:	3008      	adds	r0, #8
 80195b2:	f001 fd50 	bl	801b056 <net_buf_simple_add>
 80195b6:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
 80195b8:	2300      	movs	r3, #0
 80195ba:	7423      	strb	r3, [r4, #16]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
 80195bc:	2215      	movs	r2, #21
 80195be:	4631      	mov	r1, r6
 80195c0:	4628      	mov	r0, r5
 80195c2:	f000 fda5 	bl	801a110 <bt_gatt_check_perm>
 80195c6:	7420      	strb	r0, [r4, #16]
	if (data->err) {
 80195c8:	b118      	cbz	r0, 80195d2 <read_cb+0x32>
		return BT_GATT_ITER_STOP;
 80195ca:	2500      	movs	r5, #0
}
 80195cc:	4628      	mov	r0, r5
 80195ce:	b003      	add	sp, #12
 80195d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80195d2:	4605      	mov	r5, r0
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
 80195d4:	2300      	movs	r3, #0
 80195d6:	9301      	str	r3, [sp, #4]
 80195d8:	9300      	str	r3, [sp, #0]
 80195da:	88a3      	ldrh	r3, [r4, #4]
 80195dc:	68a2      	ldr	r2, [r4, #8]
 80195de:	4631      	mov	r1, r6
 80195e0:	4638      	mov	r0, r7
 80195e2:	f7ff ff32 	bl	801944a <att_chan_read>
	if (ret < 0) {
 80195e6:	2800      	cmp	r0, #0
 80195e8:	db01      	blt.n	80195ee <read_cb+0x4e>
	return BT_GATT_ITER_CONTINUE;
 80195ea:	2501      	movs	r5, #1
 80195ec:	e7ee      	b.n	80195cc <read_cb+0x2c>
		data->err = err_to_att(ret);
 80195ee:	f7ff fce7 	bl	8018fc0 <err_to_att>
 80195f2:	7420      	strb	r0, [r4, #16]
		return BT_GATT_ITER_STOP;
 80195f4:	e7ea      	b.n	80195cc <read_cb+0x2c>

080195f6 <find_info_cb>:
{
 80195f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80195fa:	4606      	mov	r6, r0
 80195fc:	460f      	mov	r7, r1
 80195fe:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
 8019600:	f8d2 8000 	ldr.w	r8, [r2]
	if (!data->rsp) {
 8019604:	6893      	ldr	r3, [r2, #8]
 8019606:	b14b      	cbz	r3, 801961c <find_info_cb+0x26>
	switch (data->rsp->format) {
 8019608:	68a3      	ldr	r3, [r4, #8]
 801960a:	781d      	ldrb	r5, [r3, #0]
 801960c:	2d01      	cmp	r5, #1
 801960e:	d013      	beq.n	8019638 <find_info_cb+0x42>
 8019610:	2d02      	cmp	r5, #2
 8019612:	d02d      	beq.n	8019670 <find_info_cb+0x7a>
 8019614:	2500      	movs	r5, #0
}
 8019616:	4628      	mov	r0, r5
 8019618:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
 801961c:	6850      	ldr	r0, [r2, #4]
 801961e:	2101      	movs	r1, #1
 8019620:	3008      	adds	r0, #8
 8019622:	f001 fd18 	bl	801b056 <net_buf_simple_add>
 8019626:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
 8019628:	6833      	ldr	r3, [r6, #0]
 801962a:	781b      	ldrb	r3, [r3, #0]
 801962c:	b913      	cbnz	r3, 8019634 <find_info_cb+0x3e>
 801962e:	2301      	movs	r3, #1
 8019630:	7003      	strb	r3, [r0, #0]
 8019632:	e7e9      	b.n	8019608 <find_info_cb+0x12>
 8019634:	2302      	movs	r3, #2
 8019636:	e7fb      	b.n	8019630 <find_info_cb+0x3a>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
 8019638:	6833      	ldr	r3, [r6, #0]
 801963a:	f893 9000 	ldrb.w	r9, [r3]
 801963e:	f1b9 0f00 	cmp.w	r9, #0
 8019642:	d001      	beq.n	8019648 <find_info_cb+0x52>
			return BT_GATT_ITER_STOP;
 8019644:	2500      	movs	r5, #0
 8019646:	e7e6      	b.n	8019616 <find_info_cb+0x20>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
 8019648:	6860      	ldr	r0, [r4, #4]
 801964a:	2104      	movs	r1, #4
 801964c:	3008      	adds	r0, #8
 801964e:	f001 fd02 	bl	801b056 <net_buf_simple_add>
 8019652:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
 8019654:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
 8019656:	6832      	ldr	r2, [r6, #0]
 8019658:	68e3      	ldr	r3, [r4, #12]
 801965a:	8852      	ldrh	r2, [r2, #2]
 801965c:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
 801965e:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
 8019662:	6862      	ldr	r2, [r4, #4]
 8019664:	8992      	ldrh	r2, [r2, #12]
 8019666:	1a9b      	subs	r3, r3, r2
 8019668:	2b04      	cmp	r3, #4
 801966a:	d8d4      	bhi.n	8019616 <find_info_cb+0x20>
	return BT_GATT_ITER_STOP;
 801966c:	464d      	mov	r5, r9
 801966e:	e7d2      	b.n	8019616 <find_info_cb+0x20>
		if (attr->uuid->type != BT_UUID_TYPE_128) {
 8019670:	6833      	ldr	r3, [r6, #0]
 8019672:	781b      	ldrb	r3, [r3, #0]
 8019674:	2b02      	cmp	r3, #2
 8019676:	d001      	beq.n	801967c <find_info_cb+0x86>
			return BT_GATT_ITER_STOP;
 8019678:	2500      	movs	r5, #0
 801967a:	e7cc      	b.n	8019616 <find_info_cb+0x20>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
 801967c:	6860      	ldr	r0, [r4, #4]
 801967e:	2112      	movs	r1, #18
 8019680:	3008      	adds	r0, #8
 8019682:	f001 fce8 	bl	801b056 <net_buf_simple_add>
 8019686:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
 8019688:	8007      	strh	r7, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
 801968a:	68e0      	ldr	r0, [r4, #12]
 801968c:	6831      	ldr	r1, [r6, #0]
 801968e:	2210      	movs	r2, #16
 8019690:	3101      	adds	r1, #1
 8019692:	3002      	adds	r0, #2
 8019694:	f7fe fbf2 	bl	8017e7c <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
 8019698:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
 801969c:	6862      	ldr	r2, [r4, #4]
 801969e:	8992      	ldrh	r2, [r2, #12]
 80196a0:	1a9b      	subs	r3, r3, r2
 80196a2:	2b12      	cmp	r3, #18
 80196a4:	d801      	bhi.n	80196aa <find_info_cb+0xb4>
	return BT_GATT_ITER_STOP;
 80196a6:	2500      	movs	r5, #0
 80196a8:	e7b5      	b.n	8019616 <find_info_cb+0x20>
			return BT_GATT_ITER_CONTINUE;
 80196aa:	2501      	movs	r5, #1
 80196ac:	e7b3      	b.n	8019616 <find_info_cb+0x20>

080196ae <att_get_fixed_chan>:
{
 80196ae:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
 80196b0:	2104      	movs	r1, #4
 80196b2:	f7ff fc20 	bl	8018ef6 <bt_l2cap_le_lookup_tx_cid>
}
 80196b6:	3808      	subs	r0, #8
 80196b8:	bd08      	pop	{r3, pc}

080196ba <att_write_cmd>:
{
 80196ba:	b530      	push	{r4, r5, lr}
 80196bc:	b085      	sub	sp, #20
 80196be:	4605      	mov	r5, r0
 80196c0:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
 80196c2:	f101 0008 	add.w	r0, r1, #8
 80196c6:	f001 fcf6 	bl	801b0b6 <net_buf_simple_pull_le16>
 80196ca:	4603      	mov	r3, r0
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
 80196cc:	68a2      	ldr	r2, [r4, #8]
 80196ce:	89a1      	ldrh	r1, [r4, #12]
 80196d0:	9102      	str	r1, [sp, #8]
 80196d2:	9201      	str	r2, [sp, #4]
 80196d4:	2100      	movs	r1, #0
 80196d6:	9100      	str	r1, [sp, #0]
 80196d8:	460a      	mov	r2, r1
 80196da:	4628      	mov	r0, r5
 80196dc:	f7f5 fa30 	bl	800eb40 <att_write_rsp>
}
 80196e0:	b005      	add	sp, #20
 80196e2:	bd30      	pop	{r4, r5, pc}

080196e4 <att_write_req>:
{
 80196e4:	b530      	push	{r4, r5, lr}
 80196e6:	b085      	sub	sp, #20
 80196e8:	4605      	mov	r5, r0
 80196ea:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
 80196ec:	f101 0008 	add.w	r0, r1, #8
 80196f0:	f001 fce1 	bl	801b0b6 <net_buf_simple_pull_le16>
 80196f4:	4603      	mov	r3, r0
			     handle, 0, buf->data, buf->len);
 80196f6:	68a2      	ldr	r2, [r4, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
 80196f8:	89a1      	ldrh	r1, [r4, #12]
 80196fa:	9102      	str	r1, [sp, #8]
 80196fc:	9201      	str	r2, [sp, #4]
 80196fe:	2200      	movs	r2, #0
 8019700:	9200      	str	r2, [sp, #0]
 8019702:	2213      	movs	r2, #19
 8019704:	2112      	movs	r1, #18
 8019706:	4628      	mov	r0, r5
 8019708:	f7f5 fa1a 	bl	800eb40 <att_write_rsp>
}
 801970c:	b005      	add	sp, #20
 801970e:	bd30      	pop	{r4, r5, pc}

08019710 <att_read_group_req>:
{
 8019710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019712:	b089      	sub	sp, #36	; 0x24
 8019714:	4605      	mov	r5, r0
 8019716:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
 8019718:	7b0c      	ldrb	r4, [r1, #12]
 801971a:	3c04      	subs	r4, #4
 801971c:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
 801971e:	2c02      	cmp	r4, #2
 8019720:	d001      	beq.n	8019726 <att_read_group_req+0x16>
 8019722:	2c10      	cmp	r4, #16
 8019724:	d142      	bne.n	80197ac <att_read_group_req+0x9c>
	req = net_buf_pull_mem(buf, sizeof(*req));
 8019726:	2104      	movs	r1, #4
 8019728:	3008      	adds	r0, #8
 801972a:	f001 fcbc 	bl	801b0a6 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
 801972e:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
 8019730:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
 8019732:	4622      	mov	r2, r4
 8019734:	1d01      	adds	r1, r0, #4
 8019736:	a801      	add	r0, sp, #4
 8019738:	f7fe fc84 	bl	8018044 <bt_uuid_create>
 801973c:	b3c8      	cbz	r0, 80197b2 <att_read_group_req+0xa2>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
 801973e:	f10d 0216 	add.w	r2, sp, #22
 8019742:	4639      	mov	r1, r7
 8019744:	4630      	mov	r0, r6
 8019746:	f7ff fc2c 	bl	8018fa2 <range_is_valid>
 801974a:	b1f0      	cbz	r0, 801978a <att_read_group_req+0x7a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
 801974c:	2300      	movs	r3, #0
 801974e:	f88d 3018 	strb.w	r3, [sp, #24]
 8019752:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8019756:	f8ad 301a 	strh.w	r3, [sp, #26]
 801975a:	a906      	add	r1, sp, #24
 801975c:	a801      	add	r0, sp, #4
 801975e:	f7fe fc53 	bl	8018008 <bt_uuid_cmp>
 8019762:	b158      	cbz	r0, 801977c <att_read_group_req+0x6c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
 8019764:	2300      	movs	r3, #0
 8019766:	f88d 301c 	strb.w	r3, [sp, #28]
 801976a:	f642 0301 	movw	r3, #10241	; 0x2801
 801976e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019772:	a907      	add	r1, sp, #28
 8019774:	a801      	add	r0, sp, #4
 8019776:	f7fe fc47 	bl	8018008 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
 801977a:	b978      	cbnz	r0, 801979c <att_read_group_req+0x8c>
	return att_read_group_rsp(chan, &u.uuid, start_handle, end_handle);
 801977c:	463b      	mov	r3, r7
 801977e:	4632      	mov	r2, r6
 8019780:	a901      	add	r1, sp, #4
 8019782:	4628      	mov	r0, r5
 8019784:	f7f5 fa94 	bl	800ecb0 <att_read_group_rsp>
 8019788:	e011      	b.n	80197ae <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, err_handle,
 801978a:	2301      	movs	r3, #1
 801978c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019790:	2110      	movs	r1, #16
 8019792:	4628      	mov	r0, r5
 8019794:	f7f5 f8de 	bl	800e954 <send_err_rsp>
		return 0;
 8019798:	2000      	movs	r0, #0
 801979a:	e008      	b.n	80197ae <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
 801979c:	2310      	movs	r3, #16
 801979e:	4632      	mov	r2, r6
 80197a0:	4619      	mov	r1, r3
 80197a2:	4628      	mov	r0, r5
 80197a4:	f7f5 f8d6 	bl	800e954 <send_err_rsp>
		return 0;
 80197a8:	2000      	movs	r0, #0
 80197aa:	e000      	b.n	80197ae <att_read_group_req+0x9e>
		return BT_ATT_ERR_INVALID_PDU;
 80197ac:	2004      	movs	r0, #4
}
 80197ae:	b009      	add	sp, #36	; 0x24
 80197b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_UNLIKELY;
 80197b2:	200e      	movs	r0, #14
 80197b4:	e7fb      	b.n	80197ae <att_read_group_req+0x9e>

080197b6 <att_read_blob_req>:
{
 80197b6:	b500      	push	{lr}
 80197b8:	b083      	sub	sp, #12
	req = (void *)buf->data;
 80197ba:	688a      	ldr	r2, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
 80197bc:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
 80197be:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
 80197c0:	9200      	str	r2, [sp, #0]
 80197c2:	220d      	movs	r2, #13
 80197c4:	210c      	movs	r1, #12
 80197c6:	f7f5 fb01 	bl	800edcc <att_read_rsp>
}
 80197ca:	b003      	add	sp, #12
 80197cc:	f85d fb04 	ldr.w	pc, [sp], #4

080197d0 <att_read_req>:
{
 80197d0:	b500      	push	{lr}
 80197d2:	b083      	sub	sp, #12
	req = (void *)buf->data;
 80197d4:	688b      	ldr	r3, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
 80197d6:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
 80197d8:	2200      	movs	r2, #0
 80197da:	9200      	str	r2, [sp, #0]
 80197dc:	220b      	movs	r2, #11
 80197de:	210a      	movs	r1, #10
 80197e0:	f7f5 faf4 	bl	800edcc <att_read_rsp>
}
 80197e4:	b003      	add	sp, #12
 80197e6:	f85d fb04 	ldr.w	pc, [sp], #4

080197ea <att_read_type_req>:
{
 80197ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80197ec:	b087      	sub	sp, #28
 80197ee:	4605      	mov	r5, r0
 80197f0:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
 80197f2:	7b0c      	ldrb	r4, [r1, #12]
 80197f4:	3c04      	subs	r4, #4
 80197f6:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
 80197f8:	2c02      	cmp	r4, #2
 80197fa:	d001      	beq.n	8019800 <att_read_type_req+0x16>
 80197fc:	2c10      	cmp	r4, #16
 80197fe:	d123      	bne.n	8019848 <att_read_type_req+0x5e>
	req = net_buf_pull_mem(buf, sizeof(*req));
 8019800:	2104      	movs	r1, #4
 8019802:	3008      	adds	r0, #8
 8019804:	f001 fc4f 	bl	801b0a6 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
 8019808:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
 801980a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
 801980c:	4622      	mov	r2, r4
 801980e:	1d01      	adds	r1, r0, #4
 8019810:	a801      	add	r0, sp, #4
 8019812:	f7fe fc17 	bl	8018044 <bt_uuid_create>
 8019816:	b1c8      	cbz	r0, 801984c <att_read_type_req+0x62>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
 8019818:	f10d 0216 	add.w	r2, sp, #22
 801981c:	4639      	mov	r1, r7
 801981e:	4630      	mov	r0, r6
 8019820:	f7ff fbbf 	bl	8018fa2 <range_is_valid>
 8019824:	b138      	cbz	r0, 8019836 <att_read_type_req+0x4c>
	return att_read_type_rsp(chan, &u.uuid, start_handle, end_handle);
 8019826:	463b      	mov	r3, r7
 8019828:	4632      	mov	r2, r6
 801982a:	a901      	add	r1, sp, #4
 801982c:	4628      	mov	r0, r5
 801982e:	f7f5 fb1f 	bl	800ee70 <att_read_type_rsp>
}
 8019832:	b007      	add	sp, #28
 8019834:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, err_handle,
 8019836:	2301      	movs	r3, #1
 8019838:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801983c:	2108      	movs	r1, #8
 801983e:	4628      	mov	r0, r5
 8019840:	f7f5 f888 	bl	800e954 <send_err_rsp>
		return 0;
 8019844:	2000      	movs	r0, #0
 8019846:	e7f4      	b.n	8019832 <att_read_type_req+0x48>
		return BT_ATT_ERR_INVALID_PDU;
 8019848:	2004      	movs	r0, #4
 801984a:	e7f2      	b.n	8019832 <att_read_type_req+0x48>
		return BT_ATT_ERR_UNLIKELY;
 801984c:	200e      	movs	r0, #14
 801984e:	e7f0      	b.n	8019832 <att_read_type_req+0x48>

08019850 <att_find_type_req>:
{
 8019850:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019854:	b087      	sub	sp, #28
 8019856:	4607      	mov	r7, r0
 8019858:	460c      	mov	r4, r1
	req = net_buf_pull_mem(buf, sizeof(*req));
 801985a:	2106      	movs	r1, #6
 801985c:	f104 0008 	add.w	r0, r4, #8
 8019860:	f001 fc21 	bl	801b0a6 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
 8019864:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
 8019866:	8846      	ldrh	r6, [r0, #2]
	type = sys_le16_to_cpu(req->type);
 8019868:	f8b0 8004 	ldrh.w	r8, [r0, #4]
	value = buf->data;
 801986c:	f8d4 9008 	ldr.w	r9, [r4, #8]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
 8019870:	f10d 020e 	add.w	r2, sp, #14
 8019874:	4631      	mov	r1, r6
 8019876:	4628      	mov	r0, r5
 8019878:	f7ff fb93 	bl	8018fa2 <range_is_valid>
 801987c:	b1d0      	cbz	r0, 80198b4 <att_find_type_req+0x64>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
 801987e:	2300      	movs	r3, #0
 8019880:	f88d 3010 	strb.w	r3, [sp, #16]
 8019884:	f8ad 8012 	strh.w	r8, [sp, #18]
 8019888:	f88d 3014 	strb.w	r3, [sp, #20]
 801988c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8019890:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019894:	a905      	add	r1, sp, #20
 8019896:	a804      	add	r0, sp, #16
 8019898:	f7fe fbb6 	bl	8018008 <bt_uuid_cmp>
 801989c:	b998      	cbnz	r0, 80198c6 <att_find_type_req+0x76>
	return att_find_type_rsp(chan, start_handle, end_handle, value,
 801989e:	7b23      	ldrb	r3, [r4, #12]
 80198a0:	9300      	str	r3, [sp, #0]
 80198a2:	464b      	mov	r3, r9
 80198a4:	4632      	mov	r2, r6
 80198a6:	4629      	mov	r1, r5
 80198a8:	4638      	mov	r0, r7
 80198aa:	f7f5 fb2b 	bl	800ef04 <att_find_type_rsp>
}
 80198ae:	b007      	add	sp, #28
 80198b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
 80198b4:	2301      	movs	r3, #1
 80198b6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80198ba:	2106      	movs	r1, #6
 80198bc:	4638      	mov	r0, r7
 80198be:	f7f5 f849 	bl	800e954 <send_err_rsp>
		return 0;
 80198c2:	2000      	movs	r0, #0
 80198c4:	e7f3      	b.n	80198ae <att_find_type_req+0x5e>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
 80198c6:	230a      	movs	r3, #10
 80198c8:	462a      	mov	r2, r5
 80198ca:	2106      	movs	r1, #6
 80198cc:	4638      	mov	r0, r7
 80198ce:	f7f5 f841 	bl	800e954 <send_err_rsp>
		return 0;
 80198d2:	2000      	movs	r0, #0
 80198d4:	e7eb      	b.n	80198ae <att_find_type_req+0x5e>

080198d6 <att_find_info_req>:
{
 80198d6:	b570      	push	{r4, r5, r6, lr}
 80198d8:	b082      	sub	sp, #8
 80198da:	4604      	mov	r4, r0
	req = (void *)buf->data;
 80198dc:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
 80198de:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
 80198e0:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
 80198e2:	f10d 0206 	add.w	r2, sp, #6
 80198e6:	4631      	mov	r1, r6
 80198e8:	4628      	mov	r0, r5
 80198ea:	f7ff fb5a 	bl	8018fa2 <range_is_valid>
 80198ee:	b130      	cbz	r0, 80198fe <att_find_info_req+0x28>
	return att_find_info_rsp(chan, start_handle, end_handle);
 80198f0:	4632      	mov	r2, r6
 80198f2:	4629      	mov	r1, r5
 80198f4:	4620      	mov	r0, r4
 80198f6:	f7f5 fb4f 	bl	800ef98 <att_find_info_rsp>
}
 80198fa:	b002      	add	sp, #8
 80198fc:	bd70      	pop	{r4, r5, r6, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, err_handle,
 80198fe:	2301      	movs	r3, #1
 8019900:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8019904:	2104      	movs	r1, #4
 8019906:	4620      	mov	r0, r4
 8019908:	f7f5 f824 	bl	800e954 <send_err_rsp>
		return 0;
 801990c:	2000      	movs	r0, #0
 801990e:	e7f4      	b.n	80198fa <att_find_info_req+0x24>

08019910 <bt_att_init>:
{
 8019910:	b508      	push	{r3, lr}
	bt_gatt_init();
 8019912:	f7f6 fbab 	bl	801006c <bt_gatt_init>
}
 8019916:	bd08      	pop	{r3, pc}

08019918 <att_req_destroy>:
{
 8019918:	b510      	push	{r4, lr}
 801991a:	4604      	mov	r4, r0
	if (req->buf) {
 801991c:	6900      	ldr	r0, [r0, #16]
 801991e:	b108      	cbz	r0, 8019924 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
 8019920:	f001 fb4f 	bl	801afc2 <net_buf_unref>
	if (req->destroy) {
 8019924:	68a3      	ldr	r3, [r4, #8]
 8019926:	b10b      	cbz	r3, 801992c <att_req_destroy+0x14>
		req->destroy(req);
 8019928:	4620      	mov	r0, r4
 801992a:	4798      	blx	r3
	bt_att_req_free(req);
 801992c:	4620      	mov	r0, r4
 801992e:	f7f5 fbbb 	bl	800f0a8 <bt_att_req_free>
}
 8019932:	bd10      	pop	{r4, pc}

08019934 <att_confirm>:
{
 8019934:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
 8019936:	2300      	movs	r3, #0
 8019938:	898a      	ldrh	r2, [r1, #12]
 801993a:	6889      	ldr	r1, [r1, #8]
 801993c:	f7f5 fbc0 	bl	800f0c0 <att_handle_rsp>
}
 8019940:	bd08      	pop	{r3, pc}

08019942 <bt_att_encrypt_change>:
{
 8019942:	b570      	push	{r4, r5, r6, lr}
 8019944:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
 8019946:	4605      	mov	r5, r0
	struct bt_conn *conn = ch->chan.conn;
 8019948:	f855 6908 	ldr.w	r6, [r5], #-8
	if (hci_status) {
 801994c:	b149      	cbz	r1, 8019962 <bt_att_encrypt_change+0x20>
		if (att_chan->req) {
 801994e:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8019952:	b12b      	cbz	r3, 8019960 <bt_att_encrypt_change+0x1e>
			att_handle_rsp(att_chan, NULL, 0,
 8019954:	2305      	movs	r3, #5
 8019956:	2200      	movs	r2, #0
 8019958:	4611      	mov	r1, r2
 801995a:	4628      	mov	r0, r5
 801995c:	f7f5 fbb0 	bl	800f0c0 <att_handle_rsp>
}
 8019960:	bd70      	pop	{r4, r5, r6, pc}
	bt_gatt_encrypt_change(conn);
 8019962:	4630      	mov	r0, r6
 8019964:	f7f6 ff60 	bl	8010828 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
 8019968:	7a73      	ldrb	r3, [r6, #9]
 801996a:	2b01      	cmp	r3, #1
 801996c:	d0f8      	beq.n	8019960 <bt_att_encrypt_change+0x1e>
	if (!att_chan->req || !att_chan->req->retrying) {
 801996e:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8019972:	2b00      	cmp	r3, #0
 8019974:	d0f4      	beq.n	8019960 <bt_att_encrypt_change+0x1e>
 8019976:	7d1a      	ldrb	r2, [r3, #20]
 8019978:	2a00      	cmp	r2, #0
 801997a:	d0f1      	beq.n	8019960 <bt_att_encrypt_change+0x1e>
	bt_att_chan_send_rsp(att_chan, att_chan->req->buf,
 801997c:	691e      	ldr	r6, [r3, #16]
 801997e:	4630      	mov	r0, r6
 8019980:	f7f4 fc36 	bl	800e1f0 <chan_cb>
 8019984:	4602      	mov	r2, r0
 8019986:	4631      	mov	r1, r6
 8019988:	4628      	mov	r0, r5
 801998a:	f7ff fd51 	bl	8019430 <bt_att_chan_send_rsp>
	att_chan->req->buf = NULL;
 801998e:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8019992:	2200      	movs	r2, #0
 8019994:	611a      	str	r2, [r3, #16]
 8019996:	e7e3      	b.n	8019960 <bt_att_encrypt_change+0x1e>

08019998 <att_chan_detach>:
{
 8019998:	b538      	push	{r3, r4, r5, lr}
 801999a:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
 801999c:	6800      	ldr	r0, [r0, #0]
 801999e:	f504 7296 	add.w	r2, r4, #300	; 0x12c
	return list->head;
 80199a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80199a4:	2100      	movs	r1, #0
 80199a6:	b173      	cbz	r3, 80199c6 <att_chan_detach+0x2e>
 80199a8:	429a      	cmp	r2, r3
 80199aa:	d002      	beq.n	80199b2 <att_chan_detach+0x1a>
 80199ac:	4619      	mov	r1, r3
 80199ae:	681b      	ldr	r3, [r3, #0]
 80199b0:	e7f9      	b.n	80199a6 <att_chan_detach+0xe>
Z_GENLIST_REMOVE(slist, snode)
 80199b2:	b151      	cbz	r1, 80199ca <att_chan_detach+0x32>
	return node->next;
 80199b4:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
	parent->next = child;
 80199b8:	600b      	str	r3, [r1, #0]
	return list->tail;
 80199ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
Z_GENLIST_REMOVE(slist, snode)
 80199bc:	429a      	cmp	r2, r3
 80199be:	d00c      	beq.n	80199da <att_chan_detach+0x42>
	parent->next = child;
 80199c0:	2300      	movs	r3, #0
 80199c2:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80199c6:	2500      	movs	r5, #0
 80199c8:	e00e      	b.n	80199e8 <att_chan_detach+0x50>
	return node->next;
 80199ca:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
	list->head = node;
 80199ce:	6243      	str	r3, [r0, #36]	; 0x24
	return list->tail;
 80199d0:	6a81      	ldr	r1, [r0, #40]	; 0x28
Z_GENLIST_REMOVE(slist, snode)
 80199d2:	428a      	cmp	r2, r1
 80199d4:	d1f4      	bne.n	80199c0 <att_chan_detach+0x28>
	list->tail = node;
 80199d6:	6283      	str	r3, [r0, #40]	; 0x28
}
 80199d8:	e7f2      	b.n	80199c0 <att_chan_detach+0x28>
	list->tail = node;
 80199da:	6281      	str	r1, [r0, #40]	; 0x28
}
 80199dc:	e7f0      	b.n	80199c0 <att_chan_detach+0x28>
		k_sem_give(&chan->tx_sem);
 80199de:	f504 7088 	add.w	r0, r4, #272	; 0x110
	z_impl_k_sem_give(sem);
 80199e2:	f7fa fd25 	bl	8014430 <z_impl_k_sem_give>
	for (i = 0; i < CONFIG_BT_ATT_TX_MAX; i++) {
 80199e6:	3501      	adds	r5, #1
 80199e8:	2d02      	cmp	r5, #2
 80199ea:	ddf8      	ble.n	80199de <att_chan_detach+0x46>
 80199ec:	e002      	b.n	80199f4 <att_chan_detach+0x5c>
		net_buf_unref(buf);
 80199ee:	4618      	mov	r0, r3
 80199f0:	f001 fae7 	bl	801afc2 <net_buf_unref>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
 80199f4:	2200      	movs	r2, #0
 80199f6:	2300      	movs	r3, #0
 80199f8:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
 80199fc:	f001 fab5 	bl	801af6a <net_buf_get>
 8019a00:	4603      	mov	r3, r0
 8019a02:	2800      	cmp	r0, #0
 8019a04:	d1f3      	bne.n	80199ee <att_chan_detach+0x56>
	if (chan->req) {
 8019a06:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8019a0a:	b12b      	cbz	r3, 8019a18 <att_chan_detach+0x80>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
 8019a0c:	230e      	movs	r3, #14
 8019a0e:	2200      	movs	r2, #0
 8019a10:	4611      	mov	r1, r2
 8019a12:	4620      	mov	r0, r4
 8019a14:	f7f5 fb54 	bl	800f0c0 <att_handle_rsp>
	chan->att = NULL;
 8019a18:	2300      	movs	r3, #0
 8019a1a:	6023      	str	r3, [r4, #0]
}
 8019a1c:	bd38      	pop	{r3, r4, r5, pc}

08019a1e <bt_att_disconnected>:
{
 8019a1e:	b538      	push	{r3, r4, r5, lr}
 8019a20:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
 8019a22:	f850 5c08 	ldr.w	r5, [r0, #-8]
	att_chan_detach(att_chan);
 8019a26:	3808      	subs	r0, #8
 8019a28:	f7ff ffb6 	bl	8019998 <att_chan_detach>
	return list->head;
 8019a2c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (!sys_slist_is_empty(&att->chans)) {
 8019a2e:	b103      	cbz	r3, 8019a32 <bt_att_disconnected+0x14>
}
 8019a30:	bd38      	pop	{r3, r4, r5, pc}
	att_reset(att);
 8019a32:	4628      	mov	r0, r5
 8019a34:	f7f5 fba0 	bl	800f178 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
 8019a38:	6820      	ldr	r0, [r4, #0]
 8019a3a:	f7f6 ff91 	bl	8010960 <bt_gatt_disconnected>
 8019a3e:	e7f7      	b.n	8019a30 <bt_att_disconnected+0x12>

08019a40 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
 8019a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a44:	b082      	sub	sp, #8
 8019a46:	4607      	mov	r7, r0
 8019a48:	460d      	mov	r5, r1
 8019a4a:	4614      	mov	r4, r2
 8019a4c:	4698      	mov	r8, r3
	int ret;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
 8019a4e:	f7f4 fbeb 	bl	800e228 <att_get>
	if (!att) {
 8019a52:	b178      	cbz	r0, 8019a74 <bt_att_send+0x34>
 8019a54:	4606      	mov	r6, r0
	}

	/* If callback is set use the fixed channel since bt_l2cap_chan_send
	 * cannot be used with a custom user_data.
	 */
	if (cb) {
 8019a56:	b99c      	cbnz	r4, 8019a80 <bt_att_send+0x40>
 8019a58:	6a40      	ldr	r0, [r0, #36]	; 0x24
					user_data);
	}

	ret = 0;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
 8019a5a:	b1d0      	cbz	r0, 8019a92 <bt_att_send+0x52>
 8019a5c:	f5b0 7096 	subs.w	r0, r0, #300	; 0x12c
 8019a60:	d01a      	beq.n	8019a98 <bt_att_send+0x58>
Z_GENLIST_PEEK_NEXT(slist, snode)
 8019a62:	f510 7496 	adds.w	r4, r0, #300	; 0x12c
 8019a66:	d015      	beq.n	8019a94 <bt_att_send+0x54>
	return node->next;
 8019a68:	f8d0 412c 	ldr.w	r4, [r0, #300]	; 0x12c
 8019a6c:	b194      	cbz	r4, 8019a94 <bt_att_send+0x54>
 8019a6e:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
 8019a72:	e00f      	b.n	8019a94 <bt_att_send+0x54>
		net_buf_unref(buf);
 8019a74:	4628      	mov	r0, r5
 8019a76:	f001 faa4 	bl	801afc2 <net_buf_unref>
		return -ENOTCONN;
 8019a7a:	f06f 0038 	mvn.w	r0, #56	; 0x38
 8019a7e:	e026      	b.n	8019ace <bt_att_send+0x8e>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
 8019a80:	f8cd 8000 	str.w	r8, [sp]
 8019a84:	4623      	mov	r3, r4
 8019a86:	462a      	mov	r2, r5
 8019a88:	2104      	movs	r1, #4
 8019a8a:	4638      	mov	r0, r7
 8019a8c:	f7ff f9f6 	bl	8018e7c <bt_l2cap_send_cb>
 8019a90:	e01d      	b.n	8019ace <bt_att_send+0x8e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
 8019a92:	4604      	mov	r4, r0
 8019a94:	2300      	movs	r3, #0
 8019a96:	e004      	b.n	8019aa2 <bt_att_send+0x62>
 8019a98:	4604      	mov	r4, r0
 8019a9a:	e7fb      	b.n	8019a94 <bt_att_send+0x54>
 8019a9c:	4622      	mov	r2, r4
 8019a9e:	4620      	mov	r0, r4
 8019aa0:	4614      	mov	r4, r2
 8019aa2:	b188      	cbz	r0, 8019ac8 <bt_att_send+0x88>
		ret = bt_att_chan_send(chan, buf, NULL);
 8019aa4:	2200      	movs	r2, #0
 8019aa6:	4629      	mov	r1, r5
 8019aa8:	f7ff fb7e 	bl	80191a8 <bt_att_chan_send>
		if (ret >= 0) {
 8019aac:	1e03      	subs	r3, r0, #0
 8019aae:	da0b      	bge.n	8019ac8 <bt_att_send+0x88>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
 8019ab0:	2c00      	cmp	r4, #0
 8019ab2:	d0f3      	beq.n	8019a9c <bt_att_send+0x5c>
Z_GENLIST_PEEK_NEXT(slist, snode)
 8019ab4:	f514 7296 	adds.w	r2, r4, #300	; 0x12c
 8019ab8:	d0f1      	beq.n	8019a9e <bt_att_send+0x5e>
	return node->next;
 8019aba:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
 8019abe:	2a00      	cmp	r2, #0
 8019ac0:	d0ed      	beq.n	8019a9e <bt_att_send+0x5e>
 8019ac2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8019ac6:	e7ea      	b.n	8019a9e <bt_att_send+0x5e>
			break;
		}
	}

	if (ret < 0) {
 8019ac8:	2b00      	cmp	r3, #0
 8019aca:	db03      	blt.n	8019ad4 <bt_att_send+0x94>
		/* Queue buffer to be send later */
		BT_DBG("Queueing buffer %p", buf);
		net_buf_put(&att->tx_queue, buf);
	}

	return 0;
 8019acc:	2000      	movs	r0, #0
}
 8019ace:	b002      	add	sp, #8
 8019ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_put(&att->tx_queue, buf);
 8019ad4:	4629      	mov	r1, r5
 8019ad6:	f106 000c 	add.w	r0, r6, #12
 8019ada:	f001 fa65 	bl	801afa8 <net_buf_put>
	return 0;
 8019ade:	2000      	movs	r0, #0
 8019ae0:	e7f5      	b.n	8019ace <bt_att_send+0x8e>

08019ae2 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
 8019ae2:	b570      	push	{r4, r5, r6, lr}
 8019ae4:	460d      	mov	r5, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
 8019ae6:	f7f4 fb9f 	bl	800e228 <att_get>
	if (!att) {
 8019aea:	b170      	cbz	r0, 8019b0a <bt_att_req_send+0x28>
 8019aec:	4606      	mov	r6, r0
	return list->head;
 8019aee:	6a40      	ldr	r0, [r0, #36]	; 0x24
		net_buf_unref(req->buf);
		req->buf = NULL;
		return -ENOTCONN;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
 8019af0:	b1c8      	cbz	r0, 8019b26 <bt_att_req_send+0x44>
 8019af2:	f5b0 7096 	subs.w	r0, r0, #300	; 0x12c
 8019af6:	d018      	beq.n	8019b2a <bt_att_req_send+0x48>
Z_GENLIST_PEEK_NEXT(slist, snode)
 8019af8:	f510 7496 	adds.w	r4, r0, #300	; 0x12c
 8019afc:	d01a      	beq.n	8019b34 <bt_att_req_send+0x52>
	return node->next;
 8019afe:	f8d0 412c 	ldr.w	r4, [r0, #300]	; 0x12c
 8019b02:	b1bc      	cbz	r4, 8019b34 <bt_att_req_send+0x52>
 8019b04:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
 8019b08:	e014      	b.n	8019b34 <bt_att_req_send+0x52>
		net_buf_unref(req->buf);
 8019b0a:	6928      	ldr	r0, [r5, #16]
 8019b0c:	f001 fa59 	bl	801afc2 <net_buf_unref>
		req->buf = NULL;
 8019b10:	2300      	movs	r3, #0
 8019b12:	612b      	str	r3, [r5, #16]
		return -ENOTCONN;
 8019b14:	f06f 0038 	mvn.w	r0, #56	; 0x38
 8019b18:	e024      	b.n	8019b64 <bt_att_req_send+0x82>
		/* If there is nothing pending use the channel */
		if (!chan->req) {
			int ret;

			ret = bt_att_chan_req_send(chan, req);
 8019b1a:	4629      	mov	r1, r5
 8019b1c:	f7ff fb76 	bl	801920c <bt_att_chan_req_send>
			if (ret >= 0) {
 8019b20:	2800      	cmp	r0, #0
 8019b22:	db0c      	blt.n	8019b3e <bt_att_req_send+0x5c>
 8019b24:	e01e      	b.n	8019b64 <bt_att_req_send+0x82>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
 8019b26:	4604      	mov	r4, r0
 8019b28:	e004      	b.n	8019b34 <bt_att_req_send+0x52>
 8019b2a:	4604      	mov	r4, r0
 8019b2c:	e002      	b.n	8019b34 <bt_att_req_send+0x52>
 8019b2e:	4623      	mov	r3, r4
 8019b30:	4620      	mov	r0, r4
 8019b32:	461c      	mov	r4, r3
 8019b34:	b178      	cbz	r0, 8019b56 <bt_att_req_send+0x74>
		if (!chan->req) {
 8019b36:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	d0ed      	beq.n	8019b1a <bt_att_req_send+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
 8019b3e:	2c00      	cmp	r4, #0
 8019b40:	d0f5      	beq.n	8019b2e <bt_att_req_send+0x4c>
Z_GENLIST_PEEK_NEXT(slist, snode)
 8019b42:	f514 7396 	adds.w	r3, r4, #300	; 0x12c
 8019b46:	d0f3      	beq.n	8019b30 <bt_att_req_send+0x4e>
	return node->next;
 8019b48:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	d0ef      	beq.n	8019b30 <bt_att_req_send+0x4e>
 8019b50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8019b54:	e7ec      	b.n	8019b30 <bt_att_req_send+0x4e>
	parent->next = child;
 8019b56:	2300      	movs	r3, #0
 8019b58:	602b      	str	r3, [r5, #0]
	return list->tail;
 8019b5a:	68b3      	ldr	r3, [r6, #8]
Z_GENLIST_APPEND(slist, snode)
 8019b5c:	b11b      	cbz	r3, 8019b66 <bt_att_req_send+0x84>
	parent->next = child;
 8019b5e:	601d      	str	r5, [r3, #0]
	list->tail = node;
 8019b60:	60b5      	str	r5, [r6, #8]
	/* Queue the request to be send later */
	sys_slist_append(&att->reqs, &req->node);

	BT_DBG("req %p queued", req);

	return 0;
 8019b62:	2000      	movs	r0, #0
}
 8019b64:	bd70      	pop	{r4, r5, r6, pc}
 8019b66:	60b5      	str	r5, [r6, #8]
	list->head = node;
 8019b68:	6075      	str	r5, [r6, #4]
}
 8019b6a:	e7fb      	b.n	8019b64 <bt_att_req_send+0x82>

08019b6c <update_range>:
{
 8019b6c:	b430      	push	{r4, r5}
	if (new_start >= *start && new_end <= *end) {
 8019b6e:	8804      	ldrh	r4, [r0, #0]
 8019b70:	42a2      	cmp	r2, r4
 8019b72:	d302      	bcc.n	8019b7a <update_range+0xe>
 8019b74:	880d      	ldrh	r5, [r1, #0]
 8019b76:	42ab      	cmp	r3, r5
 8019b78:	d908      	bls.n	8019b8c <update_range+0x20>
	if (*start > new_start) {
 8019b7a:	42a2      	cmp	r2, r4
 8019b7c:	d200      	bcs.n	8019b80 <update_range+0x14>
		*start = new_start;
 8019b7e:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
 8019b80:	880a      	ldrh	r2, [r1, #0]
 8019b82:	4293      	cmp	r3, r2
 8019b84:	d904      	bls.n	8019b90 <update_range+0x24>
		*end = new_end;
 8019b86:	800b      	strh	r3, [r1, #0]
	return true;
 8019b88:	2001      	movs	r0, #1
 8019b8a:	e002      	b.n	8019b92 <update_range+0x26>
		return false;
 8019b8c:	2000      	movs	r0, #0
 8019b8e:	e000      	b.n	8019b92 <update_range+0x26>
	return true;
 8019b90:	2001      	movs	r0, #1
}
 8019b92:	bc30      	pop	{r4, r5}
 8019b94:	4770      	bx	lr

08019b96 <cf_set_value>:
{
 8019b96:	b4f0      	push	{r4, r5, r6, r7}
	for (i = 0U; i < len && i <= last_byte; i++) {
 8019b98:	2400      	movs	r4, #0
 8019b9a:	e011      	b.n	8019bc0 <cf_set_value+0x2a>
		for (bit = 0U; bit <= last_bit; bit++) {
 8019b9c:	3301      	adds	r3, #1
 8019b9e:	b2db      	uxtb	r3, r3
 8019ba0:	2b02      	cmp	r3, #2
 8019ba2:	d80b      	bhi.n	8019bbc <cf_set_value+0x26>
			if ((BIT(bit) & chg_bits) &&
 8019ba4:	fa25 f603 	lsr.w	r6, r5, r3
 8019ba8:	f016 0f01 	tst.w	r6, #1
 8019bac:	d0f6      	beq.n	8019b9c <cf_set_value+0x6>
 8019bae:	fa27 f603 	lsr.w	r6, r7, r3
 8019bb2:	f016 0f01 	tst.w	r6, #1
 8019bb6:	d0f1      	beq.n	8019b9c <cf_set_value+0x6>
				return false;
 8019bb8:	2000      	movs	r0, #0
 8019bba:	e01b      	b.n	8019bf4 <cf_set_value+0x5e>
	for (i = 0U; i < len && i <= last_byte; i++) {
 8019bbc:	3401      	adds	r4, #1
 8019bbe:	b2a4      	uxth	r4, r4
 8019bc0:	42a2      	cmp	r2, r4
 8019bc2:	d919      	bls.n	8019bf8 <cf_set_value+0x62>
 8019bc4:	2c02      	cmp	r4, #2
 8019bc6:	d805      	bhi.n	8019bd4 <cf_set_value+0x3e>
		uint8_t chg_bits = value[i] ^ cfg->data[i];
 8019bc8:	5d0d      	ldrb	r5, [r1, r4]
 8019bca:	1903      	adds	r3, r0, r4
 8019bcc:	7a1f      	ldrb	r7, [r3, #8]
 8019bce:	407d      	eors	r5, r7
		for (bit = 0U; bit <= last_bit; bit++) {
 8019bd0:	2300      	movs	r3, #0
 8019bd2:	e7e5      	b.n	8019ba0 <cf_set_value+0xa>
 8019bd4:	2300      	movs	r3, #0
 8019bd6:	e008      	b.n	8019bea <cf_set_value+0x54>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
 8019bd8:	5ccc      	ldrb	r4, [r1, r3]
 8019bda:	f004 0407 	and.w	r4, r4, #7
 8019bde:	18c5      	adds	r5, r0, r3
 8019be0:	7a2e      	ldrb	r6, [r5, #8]
 8019be2:	4334      	orrs	r4, r6
 8019be4:	722c      	strb	r4, [r5, #8]
	for (i = 0U; i < len && i < last_byte; i++) {
 8019be6:	3301      	adds	r3, #1
 8019be8:	b29b      	uxth	r3, r3
 8019bea:	429a      	cmp	r2, r3
 8019bec:	d906      	bls.n	8019bfc <cf_set_value+0x66>
 8019bee:	2b01      	cmp	r3, #1
 8019bf0:	d9f2      	bls.n	8019bd8 <cf_set_value+0x42>
	return true;
 8019bf2:	2001      	movs	r0, #1
}
 8019bf4:	bcf0      	pop	{r4, r5, r6, r7}
 8019bf6:	4770      	bx	lr
 8019bf8:	2300      	movs	r3, #0
 8019bfa:	e7f6      	b.n	8019bea <cf_set_value+0x54>
	return true;
 8019bfc:	2001      	movs	r0, #1
 8019bfe:	e7f9      	b.n	8019bf4 <cf_set_value+0x5e>

08019c00 <gatt_ccc_changed>:
{
 8019c00:	b510      	push	{r4, lr}
 8019c02:	460a      	mov	r2, r1
	uint16_t value = 0x0000;
 8019c04:	2100      	movs	r1, #0
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
 8019c06:	460b      	mov	r3, r1
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	dd07      	ble.n	8019c1c <gatt_ccc_changed+0x1c>
	if (value != ccc->value) {
 8019c0c:	8953      	ldrh	r3, [r2, #10]
 8019c0e:	4299      	cmp	r1, r3
 8019c10:	d003      	beq.n	8019c1a <gatt_ccc_changed+0x1a>
		ccc->value = value;
 8019c12:	8151      	strh	r1, [r2, #10]
		if (ccc->cfg_changed) {
 8019c14:	68d3      	ldr	r3, [r2, #12]
 8019c16:	b103      	cbz	r3, 8019c1a <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
 8019c18:	4798      	blx	r3
}
 8019c1a:	bd10      	pop	{r4, pc}
		if (ccc->cfg[i].value > value) {
 8019c1c:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8019c20:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019c24:	8924      	ldrh	r4, [r4, #8]
 8019c26:	428c      	cmp	r4, r1
 8019c28:	d900      	bls.n	8019c2c <gatt_ccc_changed+0x2c>
			value = ccc->cfg[i].value;
 8019c2a:	4621      	mov	r1, r4
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
 8019c2c:	3301      	adds	r3, #1
 8019c2e:	e7eb      	b.n	8019c08 <gatt_ccc_changed+0x8>

08019c30 <gatt_indicate_rsp>:
{
 8019c30:	b510      	push	{r4, lr}
 8019c32:	460a      	mov	r2, r1
 8019c34:	9b02      	ldr	r3, [sp, #8]
	params->func(conn, params->attr, err);
 8019c36:	689c      	ldr	r4, [r3, #8]
 8019c38:	6859      	ldr	r1, [r3, #4]
 8019c3a:	47a0      	blx	r4
}
 8019c3c:	bd10      	pop	{r4, pc}

08019c3e <match_uuid>:
	data->attr = attr;
 8019c3e:	6010      	str	r0, [r2, #0]
	data->handle = handle;
 8019c40:	8091      	strh	r1, [r2, #4]
}
 8019c42:	2000      	movs	r0, #0
 8019c44:	4770      	bx	lr

08019c46 <ccc_set>:
}
 8019c46:	2000      	movs	r0, #0
 8019c48:	4770      	bx	lr

08019c4a <gen_hash_m>:
{
 8019c4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c4c:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
 8019c4e:	6806      	ldr	r6, [r0, #0]
 8019c50:	7835      	ldrb	r5, [r6, #0]
 8019c52:	2d00      	cmp	r5, #0
 8019c54:	d161      	bne.n	8019d1a <gen_hash_m+0xd0>
 8019c56:	4607      	mov	r7, r0
 8019c58:	4614      	mov	r4, r2
	switch (u16->val) {
 8019c5a:	8873      	ldrh	r3, [r6, #2]
 8019c5c:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
 8019c60:	d019      	beq.n	8019c96 <gen_hash_m+0x4c>
 8019c62:	d913      	bls.n	8019c8c <gen_hash_m+0x42>
 8019c64:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 8019c68:	33ff      	adds	r3, #255	; 0xff
 8019c6a:	b29b      	uxth	r3, r3
 8019c6c:	2b04      	cmp	r3, #4
 8019c6e:	d85a      	bhi.n	8019d26 <gen_hash_m+0xdc>
		value = sys_cpu_to_le16(handle);
 8019c70:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
 8019c74:	2202      	movs	r2, #2
 8019c76:	f10d 010e 	add.w	r1, sp, #14
 8019c7a:	4620      	mov	r0, r4
 8019c7c:	f7fd fc44 	bl	8017508 <tc_cmac_update>
 8019c80:	2800      	cmp	r0, #0
 8019c82:	d13a      	bne.n	8019cfa <gen_hash_m+0xb0>
			state->err = -EINVAL;
 8019c84:	f06f 0315 	mvn.w	r3, #21
 8019c88:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
 8019c8a:	e047      	b.n	8019d1c <gen_hash_m+0xd2>
	switch (u16->val) {
 8019c8c:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
 8019c90:	b29b      	uxth	r3, r3
 8019c92:	2b03      	cmp	r3, #3
 8019c94:	d845      	bhi.n	8019d22 <gen_hash_m+0xd8>
		value = sys_cpu_to_le16(handle);
 8019c96:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
 8019c9a:	2202      	movs	r2, #2
 8019c9c:	f10d 010e 	add.w	r1, sp, #14
 8019ca0:	4620      	mov	r0, r4
 8019ca2:	f7fd fc31 	bl	8017508 <tc_cmac_update>
 8019ca6:	b918      	cbnz	r0, 8019cb0 <gen_hash_m+0x66>
			state->err = -EINVAL;
 8019ca8:	f06f 0315 	mvn.w	r3, #21
 8019cac:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
 8019cae:	e035      	b.n	8019d1c <gen_hash_m+0xd2>
		value = sys_cpu_to_le16(u16->val);
 8019cb0:	8873      	ldrh	r3, [r6, #2]
 8019cb2:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
 8019cb6:	2202      	movs	r2, #2
 8019cb8:	f10d 010e 	add.w	r1, sp, #14
 8019cbc:	4620      	mov	r0, r4
 8019cbe:	f7fd fc23 	bl	8017508 <tc_cmac_update>
 8019cc2:	b180      	cbz	r0, 8019ce6 <gen_hash_m+0x9c>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
 8019cc4:	687e      	ldr	r6, [r7, #4]
 8019cc6:	2000      	movs	r0, #0
 8019cc8:	9000      	str	r0, [sp, #0]
 8019cca:	2310      	movs	r3, #16
 8019ccc:	eb0d 0203 	add.w	r2, sp, r3
 8019cd0:	4639      	mov	r1, r7
 8019cd2:	47b0      	blx	r6
		if (len < 0) {
 8019cd4:	1e02      	subs	r2, r0, #0
 8019cd6:	db0a      	blt.n	8019cee <gen_hash_m+0xa4>
		if (tc_cmac_update(&state->state, data, len) ==
 8019cd8:	a904      	add	r1, sp, #16
 8019cda:	4620      	mov	r0, r4
 8019cdc:	f7fd fc14 	bl	8017508 <tc_cmac_update>
 8019ce0:	b138      	cbz	r0, 8019cf2 <gen_hash_m+0xa8>
	return BT_GATT_ITER_CONTINUE;
 8019ce2:	2501      	movs	r5, #1
 8019ce4:	e01a      	b.n	8019d1c <gen_hash_m+0xd2>
			state->err = -EINVAL;
 8019ce6:	f06f 0315 	mvn.w	r3, #21
 8019cea:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
 8019cec:	e016      	b.n	8019d1c <gen_hash_m+0xd2>
			state->err = len;
 8019cee:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
 8019cf0:	e014      	b.n	8019d1c <gen_hash_m+0xd2>
			state->err = -EINVAL;
 8019cf2:	f06f 0315 	mvn.w	r3, #21
 8019cf6:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
 8019cf8:	e010      	b.n	8019d1c <gen_hash_m+0xd2>
		value = sys_cpu_to_le16(u16->val);
 8019cfa:	8873      	ldrh	r3, [r6, #2]
 8019cfc:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
 8019d00:	2202      	movs	r2, #2
 8019d02:	f10d 010e 	add.w	r1, sp, #14
 8019d06:	4620      	mov	r0, r4
 8019d08:	f7fd fbfe 	bl	8017508 <tc_cmac_update>
 8019d0c:	b108      	cbz	r0, 8019d12 <gen_hash_m+0xc8>
	return BT_GATT_ITER_CONTINUE;
 8019d0e:	2501      	movs	r5, #1
 8019d10:	e004      	b.n	8019d1c <gen_hash_m+0xd2>
			state->err = -EINVAL;
 8019d12:	f06f 0315 	mvn.w	r3, #21
 8019d16:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
 8019d18:	e000      	b.n	8019d1c <gen_hash_m+0xd2>
		return BT_GATT_ITER_CONTINUE;
 8019d1a:	2501      	movs	r5, #1
}
 8019d1c:	4628      	mov	r0, r5
 8019d1e:	b009      	add	sp, #36	; 0x24
 8019d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
 8019d22:	2501      	movs	r5, #1
 8019d24:	e7fa      	b.n	8019d1c <gen_hash_m+0xd2>
 8019d26:	2501      	movs	r5, #1
 8019d28:	e7f8      	b.n	8019d1c <gen_hash_m+0xd2>

08019d2a <find_ccc_cfg>:
{
 8019d2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d2c:	b083      	sub	sp, #12
 8019d2e:	4607      	mov	r7, r0
 8019d30:	460d      	mov	r5, r1
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
 8019d32:	2400      	movs	r4, #0
 8019d34:	b11c      	cbz	r4, 8019d3e <find_ccc_cfg+0x14>
	return NULL;
 8019d36:	2600      	movs	r6, #0
}
 8019d38:	4630      	mov	r0, r6
 8019d3a:	b003      	add	sp, #12
 8019d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
 8019d3e:	eb04 0684 	add.w	r6, r4, r4, lsl #2
 8019d42:	eb05 0646 	add.w	r6, r5, r6, lsl #1
		if (conn) {
 8019d46:	b167      	cbz	r7, 8019d62 <find_ccc_cfg+0x38>
						    &cfg->peer)) {
 8019d48:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8019d4c:	4632      	mov	r2, r6
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
 8019d4e:	3201      	adds	r2, #1
 8019d50:	f815 1013 	ldrb.w	r1, [r5, r3, lsl #1]
 8019d54:	4638      	mov	r0, r7
 8019d56:	f7fe feb3 	bl	8018ac0 <bt_conn_is_peer_addr_le>
 8019d5a:	2800      	cmp	r0, #0
 8019d5c:	d1ec      	bne.n	8019d38 <find_ccc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
 8019d5e:	3401      	adds	r4, #1
 8019d60:	e7e8      	b.n	8019d34 <find_ccc_cfg+0xa>
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
 8019d62:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8019d66:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 8019d6a:	2300      	movs	r3, #0
 8019d6c:	9300      	str	r3, [sp, #0]
 8019d6e:	f8cd 3003 	str.w	r3, [sp, #3]
 8019d72:	2207      	movs	r2, #7
 8019d74:	4669      	mov	r1, sp
 8019d76:	3001      	adds	r0, #1
 8019d78:	f7fe f868 	bl	8017e4c <memcmp>
 8019d7c:	2800      	cmp	r0, #0
 8019d7e:	d1ee      	bne.n	8019d5e <find_ccc_cfg+0x34>
 8019d80:	e7da      	b.n	8019d38 <find_ccc_cfg+0xe>

08019d82 <ccc_find_cfg>:
{
 8019d82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d84:	4605      	mov	r5, r0
 8019d86:	460f      	mov	r7, r1
 8019d88:	4616      	mov	r6, r2
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
 8019d8a:	2400      	movs	r4, #0
 8019d8c:	b10c      	cbz	r4, 8019d92 <ccc_find_cfg+0x10>
	return NULL;
 8019d8e:	2000      	movs	r0, #0
}
 8019d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (id == ccc->cfg[i].id &&
 8019d92:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8019d96:	f815 3013 	ldrb.w	r3, [r5, r3, lsl #1]
 8019d9a:	42b3      	cmp	r3, r6
 8019d9c:	d001      	beq.n	8019da2 <ccc_find_cfg+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
 8019d9e:	3401      	adds	r4, #1
 8019da0:	e7f4      	b.n	8019d8c <ccc_find_cfg+0xa>
		    !bt_addr_le_cmp(&ccc->cfg[i].peer, addr)) {
 8019da2:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8019da6:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 8019daa:	2207      	movs	r2, #7
 8019dac:	4639      	mov	r1, r7
 8019dae:	3001      	adds	r0, #1
 8019db0:	f7fe f84c 	bl	8017e4c <memcmp>
		if (id == ccc->cfg[i].id &&
 8019db4:	2800      	cmp	r0, #0
 8019db6:	d1f2      	bne.n	8019d9e <ccc_find_cfg+0x1c>
			return &ccc->cfg[i];
 8019db8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8019dbc:	eb05 0044 	add.w	r0, r5, r4, lsl #1
 8019dc0:	e7e6      	b.n	8019d90 <ccc_find_cfg+0xe>

08019dc2 <clear_ccc_cfg>:
{
 8019dc2:	b530      	push	{r4, r5, lr}
 8019dc4:	b083      	sub	sp, #12
 8019dc6:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
 8019dc8:	2500      	movs	r5, #0
 8019dca:	9500      	str	r5, [sp, #0]
 8019dcc:	f8cd 5003 	str.w	r5, [sp, #3]
	memcpy(dst, src, sizeof(*dst));
 8019dd0:	2207      	movs	r2, #7
 8019dd2:	4669      	mov	r1, sp
 8019dd4:	3001      	adds	r0, #1
 8019dd6:	f7fe f851 	bl	8017e7c <memcpy>
	cfg->id = 0U;
 8019dda:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
 8019ddc:	8125      	strh	r5, [r4, #8]
}
 8019dde:	b003      	add	sp, #12
 8019de0:	bd30      	pop	{r4, r5, pc}

08019de2 <sc_restore_rsp>:
{
 8019de2:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
 8019de4:	f7f5 fa7c 	bl	800f2e0 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
 8019de8:	b188      	cbz	r0, 8019e0e <sc_restore_rsp+0x2c>
 8019dea:	4603      	mov	r3, r0
 8019dec:	7a02      	ldrb	r2, [r0, #8]
 8019dee:	f012 0f01 	tst.w	r2, #1
 8019df2:	d00c      	beq.n	8019e0e <sc_restore_rsp+0x2c>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
 8019df4:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8019df6:	f3bf 8f5b 	dmb	ish
 8019dfa:	e853 2f00 	ldrex	r2, [r3]
 8019dfe:	f042 0201 	orr.w	r2, r2, #1
 8019e02:	e843 2100 	strex	r1, r2, [r3]
 8019e06:	2900      	cmp	r1, #0
 8019e08:	d1f7      	bne.n	8019dfa <sc_restore_rsp+0x18>
 8019e0a:	f3bf 8f5b 	dmb	ish
}
 8019e0e:	bd08      	pop	{r3, pc}

08019e10 <clear_sc_cfg>:
{
 8019e10:	b508      	push	{r3, lr}
	memset(cfg, 0, sizeof(*cfg));
 8019e12:	220c      	movs	r2, #12
 8019e14:	2100      	movs	r1, #0
 8019e16:	f7fe f856 	bl	8017ec6 <memset>
}
 8019e1a:	bd08      	pop	{r3, pc}

08019e1c <sc_ccc_cfg_write>:
{
 8019e1c:	b508      	push	{r3, lr}
	if (value == BT_GATT_CCC_INDICATE) {
 8019e1e:	2a02      	cmp	r2, #2
 8019e20:	d003      	beq.n	8019e2a <sc_ccc_cfg_write+0xe>
		sc_clear(conn);
 8019e22:	f7f5 fcd1 	bl	800f7c8 <sc_clear>
}
 8019e26:	2002      	movs	r0, #2
 8019e28:	bd08      	pop	{r3, pc}
		sc_save(conn->id, &conn->le.dst, 0, 0);
 8019e2a:	2300      	movs	r3, #0
 8019e2c:	461a      	mov	r2, r3
 8019e2e:	f100 0188 	add.w	r1, r0, #136	; 0x88
 8019e32:	7a00      	ldrb	r0, [r0, #8]
 8019e34:	f7f5 fbe6 	bl	800f604 <sc_save>
 8019e38:	e7f5      	b.n	8019e26 <sc_ccc_cfg_write+0xa>

08019e3a <sc_reset>:
{
 8019e3a:	b510      	push	{r4, lr}
 8019e3c:	4604      	mov	r4, r0
	memset(&cfg->data, 0, sizeof(cfg->data));
 8019e3e:	2204      	movs	r2, #4
 8019e40:	2100      	movs	r1, #0
 8019e42:	3008      	adds	r0, #8
 8019e44:	f7fe f83f 	bl	8017ec6 <memset>
		sc_store(cfg);
 8019e48:	4620      	mov	r0, r4
 8019e4a:	f7f5 fb9d 	bl	800f588 <sc_store>
}
 8019e4e:	bd10      	pop	{r4, pc}

08019e50 <gatt_foreach_iter>:
	if (handle > end_handle) {
 8019e50:	4299      	cmp	r1, r3
 8019e52:	d822      	bhi.n	8019e9a <gatt_foreach_iter+0x4a>
{
 8019e54:	b538      	push	{r3, r4, r5, lr}
 8019e56:	4605      	mov	r5, r0
 8019e58:	460c      	mov	r4, r1
	if (handle < start_handle) {
 8019e5a:	4291      	cmp	r1, r2
 8019e5c:	d31f      	bcc.n	8019e9e <gatt_foreach_iter+0x4e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
 8019e5e:	9b04      	ldr	r3, [sp, #16]
 8019e60:	b123      	cbz	r3, 8019e6c <gatt_foreach_iter+0x1c>
 8019e62:	6801      	ldr	r1, [r0, #0]
 8019e64:	4618      	mov	r0, r3
 8019e66:	f7fe f8cf 	bl	8018008 <bt_uuid_cmp>
 8019e6a:	b9d0      	cbnz	r0, 8019ea2 <gatt_foreach_iter+0x52>
	if (attr_data && attr_data != attr->user_data) {
 8019e6c:	9b05      	ldr	r3, [sp, #20]
 8019e6e:	b12b      	cbz	r3, 8019e7c <gatt_foreach_iter+0x2c>
 8019e70:	68eb      	ldr	r3, [r5, #12]
 8019e72:	9a05      	ldr	r2, [sp, #20]
 8019e74:	4293      	cmp	r3, r2
 8019e76:	d001      	beq.n	8019e7c <gatt_foreach_iter+0x2c>
		return BT_GATT_ITER_CONTINUE;
 8019e78:	2001      	movs	r0, #1
 8019e7a:	e011      	b.n	8019ea0 <gatt_foreach_iter+0x50>
	*num_matches -= 1;
 8019e7c:	9b06      	ldr	r3, [sp, #24]
 8019e7e:	881b      	ldrh	r3, [r3, #0]
 8019e80:	3b01      	subs	r3, #1
 8019e82:	9a06      	ldr	r2, [sp, #24]
 8019e84:	8013      	strh	r3, [r2, #0]
	result = func(attr, handle, user_data);
 8019e86:	9a08      	ldr	r2, [sp, #32]
 8019e88:	4621      	mov	r1, r4
 8019e8a:	4628      	mov	r0, r5
 8019e8c:	9b07      	ldr	r3, [sp, #28]
 8019e8e:	4798      	blx	r3
	if (!*num_matches) {
 8019e90:	9b06      	ldr	r3, [sp, #24]
 8019e92:	881b      	ldrh	r3, [r3, #0]
 8019e94:	b923      	cbnz	r3, 8019ea0 <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
 8019e96:	2000      	movs	r0, #0
 8019e98:	e002      	b.n	8019ea0 <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
 8019e9a:	2000      	movs	r0, #0
}
 8019e9c:	4770      	bx	lr
		return BT_GATT_ITER_CONTINUE;
 8019e9e:	2001      	movs	r0, #1
}
 8019ea0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ITER_CONTINUE;
 8019ea2:	2001      	movs	r0, #1
 8019ea4:	e7fc      	b.n	8019ea0 <gatt_foreach_iter+0x50>

08019ea6 <clear_cf_cfg>:
{
 8019ea6:	b530      	push	{r4, r5, lr}
 8019ea8:	b083      	sub	sp, #12
 8019eaa:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
 8019eac:	2500      	movs	r5, #0
 8019eae:	9500      	str	r5, [sp, #0]
 8019eb0:	f8cd 5003 	str.w	r5, [sp, #3]
 8019eb4:	2207      	movs	r2, #7
 8019eb6:	4669      	mov	r1, sp
 8019eb8:	3001      	adds	r0, #1
 8019eba:	f7fd ffdf 	bl	8017e7c <memcpy>
	memset(cfg->data, 0, sizeof(cfg->data));
 8019ebe:	2201      	movs	r2, #1
 8019ec0:	4629      	mov	r1, r5
 8019ec2:	f104 0008 	add.w	r0, r4, #8
 8019ec6:	f7fd fffe 	bl	8017ec6 <memset>
	atomic_set(cfg->flags, 0);
 8019eca:	340c      	adds	r4, #12
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8019ecc:	f3bf 8f5b 	dmb	ish
 8019ed0:	e854 3f00 	ldrex	r3, [r4]
 8019ed4:	e844 5200 	strex	r2, r5, [r4]
 8019ed8:	2a00      	cmp	r2, #0
 8019eda:	d1f9      	bne.n	8019ed0 <clear_cf_cfg+0x2a>
 8019edc:	f3bf 8f5b 	dmb	ish
}
 8019ee0:	b003      	add	sp, #12
 8019ee2:	bd30      	pop	{r4, r5, pc}

08019ee4 <remove_cf_cfg>:
{
 8019ee4:	b570      	push	{r4, r5, r6, lr}
 8019ee6:	4604      	mov	r4, r0
	cfg = find_cf_cfg(conn);
 8019ee8:	f7f5 f9fa 	bl	800f2e0 <find_cf_cfg>
	if (!cfg) {
 8019eec:	b1e8      	cbz	r0, 8019f2a <remove_cf_cfg+0x46>
 8019eee:	4605      	mov	r5, r0
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
 8019ef0:	f104 0688 	add.w	r6, r4, #136	; 0x88
 8019ef4:	4631      	mov	r1, r6
 8019ef6:	7a20      	ldrb	r0, [r4, #8]
 8019ef8:	f7fe fbae 	bl	8018658 <bt_addr_le_is_bonded>
 8019efc:	b918      	cbnz	r0, 8019f06 <remove_cf_cfg+0x22>
		clear_cf_cfg(cfg);
 8019efe:	4628      	mov	r0, r5
 8019f00:	f7ff ffd1 	bl	8019ea6 <clear_cf_cfg>
 8019f04:	e011      	b.n	8019f2a <remove_cf_cfg+0x46>
 8019f06:	2207      	movs	r2, #7
 8019f08:	4631      	mov	r1, r6
 8019f0a:	1c68      	adds	r0, r5, #1
 8019f0c:	f7fd ffb6 	bl	8017e7c <memcpy>
		atomic_clear_bit(cfg->flags, CF_OUT_OF_SYNC);
 8019f10:	350c      	adds	r5, #12
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8019f12:	f3bf 8f5b 	dmb	ish
 8019f16:	e855 3f00 	ldrex	r3, [r5]
 8019f1a:	f023 0302 	bic.w	r3, r3, #2
 8019f1e:	e845 3200 	strex	r2, r3, [r5]
 8019f22:	2a00      	cmp	r2, #0
 8019f24:	d1f7      	bne.n	8019f16 <remove_cf_cfg+0x32>
 8019f26:	f3bf 8f5b 	dmb	ish
}
 8019f2a:	bd70      	pop	{r4, r5, r6, pc}

08019f2c <bt_gatt_attr_read>:
{
 8019f2c:	b510      	push	{r4, lr}
 8019f2e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8019f32:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
 8019f36:	42a1      	cmp	r1, r4
 8019f38:	d80c      	bhi.n	8019f54 <bt_gatt_attr_read+0x28>
 8019f3a:	4610      	mov	r0, r2
	len = MIN(buf_len, value_len - offset);
 8019f3c:	1a64      	subs	r4, r4, r1
 8019f3e:	42a3      	cmp	r3, r4
 8019f40:	bfa8      	it	ge
 8019f42:	4623      	movge	r3, r4
	memcpy(buf, (uint8_t *)value + offset, len);
 8019f44:	b29c      	uxth	r4, r3
 8019f46:	4622      	mov	r2, r4
 8019f48:	9b03      	ldr	r3, [sp, #12]
 8019f4a:	4419      	add	r1, r3
 8019f4c:	f7fd ff96 	bl	8017e7c <memcpy>
}
 8019f50:	4620      	mov	r0, r4
 8019f52:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
 8019f54:	f06f 0406 	mvn.w	r4, #6
 8019f58:	e7fa      	b.n	8019f50 <bt_gatt_attr_read+0x24>

08019f5a <read_ppcp>:
{
 8019f5a:	b510      	push	{r4, lr}
 8019f5c:	b086      	sub	sp, #24
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
 8019f5e:	2418      	movs	r4, #24
 8019f60:	f8ad 4010 	strh.w	r4, [sp, #16]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
 8019f64:	2428      	movs	r4, #40	; 0x28
 8019f66:	f8ad 4012 	strh.w	r4, [sp, #18]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
 8019f6a:	2400      	movs	r4, #0
 8019f6c:	f8ad 4014 	strh.w	r4, [sp, #20]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
 8019f70:	242a      	movs	r4, #42	; 0x2a
 8019f72:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
 8019f76:	2408      	movs	r4, #8
 8019f78:	9402      	str	r4, [sp, #8]
 8019f7a:	ac04      	add	r4, sp, #16
 8019f7c:	9401      	str	r4, [sp, #4]
 8019f7e:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8019f82:	9400      	str	r4, [sp, #0]
 8019f84:	f7ff ffd2 	bl	8019f2c <bt_gatt_attr_read>
}
 8019f88:	b006      	add	sp, #24
 8019f8a:	bd10      	pop	{r4, pc}

08019f8c <read_appearance>:
{
 8019f8c:	b510      	push	{r4, lr}
 8019f8e:	b086      	sub	sp, #24
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
 8019f90:	f240 34c1 	movw	r4, #961	; 0x3c1
 8019f94:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
 8019f98:	2402      	movs	r4, #2
 8019f9a:	9402      	str	r4, [sp, #8]
 8019f9c:	f10d 0416 	add.w	r4, sp, #22
 8019fa0:	9401      	str	r4, [sp, #4]
 8019fa2:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8019fa6:	9400      	str	r4, [sp, #0]
 8019fa8:	f7ff ffc0 	bl	8019f2c <bt_gatt_attr_read>
}
 8019fac:	b006      	add	sp, #24
 8019fae:	bd10      	pop	{r4, pc}

08019fb0 <read_name>:
{
 8019fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019fb4:	b084      	sub	sp, #16
 8019fb6:	4604      	mov	r4, r0
 8019fb8:	460d      	mov	r5, r1
 8019fba:	4616      	mov	r6, r2
 8019fbc:	461f      	mov	r7, r3
	const char *name = bt_get_name();
 8019fbe:	f7f2 fadb 	bl	800c578 <bt_get_name>
 8019fc2:	4680      	mov	r8, r0
				 strlen(name));
 8019fc4:	f7fd ff14 	bl	8017df0 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
 8019fc8:	b280      	uxth	r0, r0
 8019fca:	9002      	str	r0, [sp, #8]
 8019fcc:	f8cd 8004 	str.w	r8, [sp, #4]
 8019fd0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8019fd4:	9300      	str	r3, [sp, #0]
 8019fd6:	463b      	mov	r3, r7
 8019fd8:	4632      	mov	r2, r6
 8019fda:	4629      	mov	r1, r5
 8019fdc:	4620      	mov	r0, r4
 8019fde:	f7ff ffa5 	bl	8019f2c <bt_gatt_attr_read>
}
 8019fe2:	b004      	add	sp, #16
 8019fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019fe8 <cf_read>:
{
 8019fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019fea:	b087      	sub	sp, #28
 8019fec:	4604      	mov	r4, r0
 8019fee:	460d      	mov	r5, r1
 8019ff0:	4616      	mov	r6, r2
 8019ff2:	461f      	mov	r7, r3
	uint8_t data[1] = {};
 8019ff4:	2300      	movs	r3, #0
 8019ff6:	f88d 3014 	strb.w	r3, [sp, #20]
	cfg = find_cf_cfg(conn);
 8019ffa:	f7f5 f971 	bl	800f2e0 <find_cf_cfg>
	if (cfg) {
 8019ffe:	b128      	cbz	r0, 801a00c <cf_read+0x24>
 801a000:	4601      	mov	r1, r0
		memcpy(data, cfg->data, sizeof(data));
 801a002:	2201      	movs	r2, #1
 801a004:	3108      	adds	r1, #8
 801a006:	a805      	add	r0, sp, #20
 801a008:	f7fd ff38 	bl	8017e7c <memcpy>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
 801a00c:	2301      	movs	r3, #1
 801a00e:	9302      	str	r3, [sp, #8]
 801a010:	ab05      	add	r3, sp, #20
 801a012:	9301      	str	r3, [sp, #4]
 801a014:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801a018:	9300      	str	r3, [sp, #0]
 801a01a:	463b      	mov	r3, r7
 801a01c:	4632      	mov	r2, r6
 801a01e:	4629      	mov	r1, r5
 801a020:	4620      	mov	r0, r4
 801a022:	f7ff ff83 	bl	8019f2c <bt_gatt_attr_read>
}
 801a026:	b007      	add	sp, #28
 801a028:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a02a <bt_gatt_attr_read_service>:
{
 801a02a:	b570      	push	{r4, r5, r6, lr}
 801a02c:	b086      	sub	sp, #24
 801a02e:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
 801a032:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
 801a034:	7826      	ldrb	r6, [r4, #0]
 801a036:	b146      	cbz	r6, 801a04a <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
 801a038:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
 801a03a:	2610      	movs	r6, #16
 801a03c:	9602      	str	r6, [sp, #8]
 801a03e:	9401      	str	r4, [sp, #4]
 801a040:	9500      	str	r5, [sp, #0]
 801a042:	f7ff ff73 	bl	8019f2c <bt_gatt_attr_read>
}
 801a046:	b006      	add	sp, #24
 801a048:	bd70      	pop	{r4, r5, r6, pc}
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
 801a04a:	8864      	ldrh	r4, [r4, #2]
 801a04c:	f8ad 4016 	strh.w	r4, [sp, #22]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
 801a050:	2402      	movs	r4, #2
 801a052:	9402      	str	r4, [sp, #8]
 801a054:	f10d 0416 	add.w	r4, sp, #22
 801a058:	9401      	str	r4, [sp, #4]
 801a05a:	9500      	str	r5, [sp, #0]
 801a05c:	f7ff ff66 	bl	8019f2c <bt_gatt_attr_read>
 801a060:	e7f1      	b.n	801a046 <bt_gatt_attr_read_service+0x1c>

0801a062 <bt_gatt_attr_read_ccc>:
{
 801a062:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a064:	b087      	sub	sp, #28
 801a066:	4605      	mov	r5, r0
 801a068:	460c      	mov	r4, r1
 801a06a:	4616      	mov	r6, r2
 801a06c:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
 801a06e:	68c9      	ldr	r1, [r1, #12]
 801a070:	f7ff fe5b 	bl	8019d2a <find_ccc_cfg>
	if (cfg) {
 801a074:	b190      	cbz	r0, 801a09c <bt_gatt_attr_read_ccc+0x3a>
		value = sys_cpu_to_le16(cfg->value);
 801a076:	8903      	ldrh	r3, [r0, #8]
 801a078:	f8ad 3016 	strh.w	r3, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
 801a07c:	2302      	movs	r3, #2
 801a07e:	9302      	str	r3, [sp, #8]
 801a080:	f10d 0316 	add.w	r3, sp, #22
 801a084:	9301      	str	r3, [sp, #4]
 801a086:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801a08a:	9300      	str	r3, [sp, #0]
 801a08c:	463b      	mov	r3, r7
 801a08e:	4632      	mov	r2, r6
 801a090:	4621      	mov	r1, r4
 801a092:	4628      	mov	r0, r5
 801a094:	f7ff ff4a 	bl	8019f2c <bt_gatt_attr_read>
}
 801a098:	b007      	add	sp, #28
 801a09a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = 0x0000;
 801a09c:	2300      	movs	r3, #0
 801a09e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a0a2:	e7eb      	b.n	801a07c <bt_gatt_attr_read_ccc+0x1a>

0801a0a4 <bt_gatt_attr_read_chrc>:
{
 801a0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0a8:	b08a      	sub	sp, #40	; 0x28
 801a0aa:	4605      	mov	r5, r0
 801a0ac:	460c      	mov	r4, r1
 801a0ae:	4616      	mov	r6, r2
 801a0b0:	461f      	mov	r7, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
 801a0b2:	f8d1 800c 	ldr.w	r8, [r1, #12]
	pdu.properties = chrc->properties;
 801a0b6:	f898 3006 	ldrb.w	r3, [r8, #6]
 801a0ba:	f88d 3014 	strb.w	r3, [sp, #20]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
 801a0be:	4608      	mov	r0, r1
 801a0c0:	f7f6 f852 	bl	8010168 <bt_gatt_attr_value_handle>
 801a0c4:	f8ad 0015 	strh.w	r0, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
 801a0c8:	f8d8 1000 	ldr.w	r1, [r8]
 801a0cc:	780b      	ldrb	r3, [r1, #0]
 801a0ce:	b993      	cbnz	r3, 801a0f6 <bt_gatt_attr_read_chrc+0x52>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
 801a0d0:	884b      	ldrh	r3, [r1, #2]
 801a0d2:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2U;
 801a0d6:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
 801a0d8:	9302      	str	r3, [sp, #8]
 801a0da:	ab05      	add	r3, sp, #20
 801a0dc:	9301      	str	r3, [sp, #4]
 801a0de:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801a0e2:	9300      	str	r3, [sp, #0]
 801a0e4:	463b      	mov	r3, r7
 801a0e6:	4632      	mov	r2, r6
 801a0e8:	4621      	mov	r1, r4
 801a0ea:	4628      	mov	r0, r5
 801a0ec:	f7ff ff1e 	bl	8019f2c <bt_gatt_attr_read>
}
 801a0f0:	b00a      	add	sp, #40	; 0x28
 801a0f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
 801a0f6:	2210      	movs	r2, #16
 801a0f8:	3101      	adds	r1, #1
 801a0fa:	f10d 0017 	add.w	r0, sp, #23
 801a0fe:	f7fd febd 	bl	8017e7c <memcpy>
		value_len += 16U;
 801a102:	2313      	movs	r3, #19
 801a104:	e7e8      	b.n	801a0d8 <bt_gatt_attr_read_chrc+0x34>

0801a106 <db_hash_process>:
{
 801a106:	b508      	push	{r3, lr}
	db_hash_gen(true);
 801a108:	2001      	movs	r0, #1
 801a10a:	f7f6 f88f 	bl	801022c <db_hash_gen>
}
 801a10e:	bd08      	pop	{r3, pc}

0801a110 <bt_gatt_check_perm>:
{
 801a110:	b538      	push	{r3, r4, r5, lr}
 801a112:	4605      	mov	r5, r0
	if ((mask & BT_GATT_PERM_READ) &&
 801a114:	f012 0f01 	tst.w	r2, #1
 801a118:	d005      	beq.n	801a126 <bt_gatt_check_perm+0x16>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
 801a11a:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
 801a11c:	f013 0f15 	tst.w	r3, #21
 801a120:	d01d      	beq.n	801a15e <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
 801a122:	684b      	ldr	r3, [r1, #4]
 801a124:	b1eb      	cbz	r3, 801a162 <bt_gatt_check_perm+0x52>
	if ((mask & BT_GATT_PERM_WRITE) &&
 801a126:	f012 0f02 	tst.w	r2, #2
 801a12a:	d005      	beq.n	801a138 <bt_gatt_check_perm+0x28>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
 801a12c:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
 801a12e:	f013 0f2a 	tst.w	r3, #42	; 0x2a
 801a132:	d018      	beq.n	801a166 <bt_gatt_check_perm+0x56>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
 801a134:	688b      	ldr	r3, [r1, #8]
 801a136:	b1c3      	cbz	r3, 801a16a <bt_gatt_check_perm+0x5a>
	mask &= attr->perm;
 801a138:	7c8c      	ldrb	r4, [r1, #18]
 801a13a:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
 801a13c:	f014 0f30 	tst.w	r4, #48	; 0x30
 801a140:	d106      	bne.n	801a150 <bt_gatt_check_perm+0x40>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
 801a142:	f014 000c 	ands.w	r0, r4, #12
 801a146:	d002      	beq.n	801a14e <bt_gatt_check_perm+0x3e>
		if (!conn->encrypt) {
 801a148:	7aeb      	ldrb	r3, [r5, #11]
 801a14a:	b183      	cbz	r3, 801a16e <bt_gatt_check_perm+0x5e>
	return 0;
 801a14c:	2000      	movs	r0, #0
}
 801a14e:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
 801a150:	4628      	mov	r0, r5
 801a152:	f7fe fc5d 	bl	8018a10 <bt_conn_get_security>
 801a156:	2802      	cmp	r0, #2
 801a158:	d8f3      	bhi.n	801a142 <bt_gatt_check_perm+0x32>
			return BT_ATT_ERR_AUTHENTICATION;
 801a15a:	2005      	movs	r0, #5
 801a15c:	e7f7      	b.n	801a14e <bt_gatt_check_perm+0x3e>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
 801a15e:	2002      	movs	r0, #2
 801a160:	e7f5      	b.n	801a14e <bt_gatt_check_perm+0x3e>
 801a162:	2002      	movs	r0, #2
 801a164:	e7f3      	b.n	801a14e <bt_gatt_check_perm+0x3e>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
 801a166:	2003      	movs	r0, #3
 801a168:	e7f1      	b.n	801a14e <bt_gatt_check_perm+0x3e>
 801a16a:	2003      	movs	r0, #3
 801a16c:	e7ef      	b.n	801a14e <bt_gatt_check_perm+0x3e>
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
 801a16e:	200f      	movs	r0, #15
 801a170:	e7ed      	b.n	801a14e <bt_gatt_check_perm+0x3e>

0801a172 <bt_gatt_change_aware>:
{
 801a172:	b510      	push	{r4, lr}
 801a174:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
 801a176:	f7f5 f8b3 	bl	800f2e0 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
 801a17a:	2800      	cmp	r0, #0
 801a17c:	d042      	beq.n	801a204 <bt_gatt_change_aware+0x92>
 801a17e:	7a02      	ldrb	r2, [r0, #8]
 801a180:	f012 0f01 	tst.w	r2, #1
 801a184:	d101      	bne.n	801a18a <bt_gatt_change_aware+0x18>
		return true;
 801a186:	2001      	movs	r0, #1
}
 801a188:	bd10      	pop	{r4, pc}
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
 801a18a:	f100 010c 	add.w	r1, r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 801a18e:	f3bf 8f5b 	dmb	ish
 801a192:	68c2      	ldr	r2, [r0, #12]
 801a194:	f3bf 8f5b 	dmb	ish
 801a198:	f012 0f01 	tst.w	r2, #1
 801a19c:	d134      	bne.n	801a208 <bt_gatt_change_aware+0x96>
	if (!req) {
 801a19e:	b90c      	cbnz	r4, 801a1a4 <bt_gatt_change_aware+0x32>
		return false;
 801a1a0:	4620      	mov	r0, r4
 801a1a2:	e7f1      	b.n	801a188 <bt_gatt_change_aware+0x16>
 801a1a4:	f3bf 8f5b 	dmb	ish
 801a1a8:	68c3      	ldr	r3, [r0, #12]
 801a1aa:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
 801a1ae:	f013 0f02 	tst.w	r3, #2
 801a1b2:	d10d      	bne.n	801a1d0 <bt_gatt_change_aware+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 801a1b4:	f3bf 8f5b 	dmb	ish
 801a1b8:	e851 3f00 	ldrex	r3, [r1]
 801a1bc:	f043 0302 	orr.w	r3, r3, #2
 801a1c0:	e841 3200 	strex	r2, r3, [r1]
 801a1c4:	2a00      	cmp	r2, #0
 801a1c6:	d1f7      	bne.n	801a1b8 <bt_gatt_change_aware+0x46>
 801a1c8:	f3bf 8f5b 	dmb	ish
	return false;
 801a1cc:	2000      	movs	r0, #0
 801a1ce:	e7db      	b.n	801a188 <bt_gatt_change_aware+0x16>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 801a1d0:	f3bf 8f5b 	dmb	ish
 801a1d4:	e851 3f00 	ldrex	r3, [r1]
 801a1d8:	f023 0302 	bic.w	r3, r3, #2
 801a1dc:	e841 3200 	strex	r2, r3, [r1]
 801a1e0:	2a00      	cmp	r2, #0
 801a1e2:	d1f7      	bne.n	801a1d4 <bt_gatt_change_aware+0x62>
 801a1e4:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 801a1e8:	f3bf 8f5b 	dmb	ish
 801a1ec:	e851 3f00 	ldrex	r3, [r1]
 801a1f0:	f043 0301 	orr.w	r3, r3, #1
 801a1f4:	e841 3200 	strex	r2, r3, [r1]
 801a1f8:	2a00      	cmp	r2, #0
 801a1fa:	d1f7      	bne.n	801a1ec <bt_gatt_change_aware+0x7a>
 801a1fc:	f3bf 8f5b 	dmb	ish
		return true;
 801a200:	4620      	mov	r0, r4
 801a202:	e7c1      	b.n	801a188 <bt_gatt_change_aware+0x16>
		return true;
 801a204:	2001      	movs	r0, #1
 801a206:	e7bf      	b.n	801a188 <bt_gatt_change_aware+0x16>
		return true;
 801a208:	2001      	movs	r0, #1
 801a20a:	e7bd      	b.n	801a188 <bt_gatt_change_aware+0x16>

0801a20c <bt_gatt_clear>:
{
 801a20c:	b538      	push	{r3, r4, r5, lr}
 801a20e:	4604      	mov	r4, r0
 801a210:	460d      	mov	r5, r1
	err = bt_gatt_clear_ccc(id, addr);
 801a212:	f7f6 f89f 	bl	8010354 <bt_gatt_clear_ccc>
	if (err < 0) {
 801a216:	2800      	cmp	r0, #0
 801a218:	db0c      	blt.n	801a234 <bt_gatt_clear+0x28>
		err = bt_gatt_clear_sc(id, addr);
 801a21a:	4629      	mov	r1, r5
 801a21c:	4620      	mov	r0, r4
 801a21e:	f7f5 fa91 	bl	800f744 <bt_gatt_clear_sc>
		if (err < 0) {
 801a222:	2800      	cmp	r0, #0
 801a224:	db06      	blt.n	801a234 <bt_gatt_clear+0x28>
		err = bt_gatt_clear_cf(id, addr);
 801a226:	4629      	mov	r1, r5
 801a228:	4620      	mov	r0, r4
 801a22a:	f7f5 fef7 	bl	801001c <bt_gatt_clear_cf>
		if (err < 0) {
 801a22e:	2800      	cmp	r0, #0
 801a230:	db00      	blt.n	801a234 <bt_gatt_clear+0x28>
	return 0;
 801a232:	2000      	movs	r0, #0
}
 801a234:	bd38      	pop	{r3, r4, r5, pc}

0801a236 <auth_err_get>:
	switch (smp_err) {
 801a236:	3801      	subs	r0, #1
 801a238:	280d      	cmp	r0, #13
 801a23a:	d812      	bhi.n	801a262 <auth_err_get+0x2c>
 801a23c:	e8df f000 	tbb	[pc, r0]
 801a240:	07091307 	.word	0x07091307
 801a244:	110b090b 	.word	0x110b090b
 801a248:	07070f0d 	.word	0x07070f0d
 801a24c:	0d0d      	.short	0x0d0d
		return BT_SECURITY_ERR_INVALID_PARAM;
 801a24e:	2001      	movs	r0, #1
 801a250:	4770      	bx	lr
		return BT_SECURITY_ERR_AUTH_REQUIREMENT;
 801a252:	2004      	movs	r0, #4
 801a254:	4770      	bx	lr
		return BT_SECURITY_ERR_PAIR_NOT_SUPPORTED;
 801a256:	2005      	movs	r0, #5
 801a258:	4770      	bx	lr
		return BT_SECURITY_ERR_PAIR_NOT_ALLOWED;
 801a25a:	2006      	movs	r0, #6
 801a25c:	4770      	bx	lr
		return BT_SECURITY_ERR_INVALID_PARAM;
 801a25e:	2007      	movs	r0, #7
 801a260:	4770      	bx	lr
		return BT_SECURITY_ERR_UNSPECIFIED;
 801a262:	2008      	movs	r0, #8
 801a264:	4770      	bx	lr
		return BT_SECURITY_ERR_OOB_NOT_AVAILABLE;
 801a266:	2003      	movs	r0, #3
}
 801a268:	4770      	bx	lr

0801a26a <smp_err_get>:
	switch (auth_err) {
 801a26a:	1e43      	subs	r3, r0, #1
 801a26c:	2b07      	cmp	r3, #7
 801a26e:	d80b      	bhi.n	801a288 <smp_err_get+0x1e>
 801a270:	e8df f003 	tbb	[pc, r3]
 801a274:	0c04080c 	.word	0x0c04080c
 801a278:	0806080d 	.word	0x0806080d
		return BT_SMP_ERR_UNSPECIFIED;
 801a27c:	2002      	movs	r0, #2
 801a27e:	4770      	bx	lr
		return BT_SMP_ERR_INVALID_PARAMS;
 801a280:	200a      	movs	r0, #10
 801a282:	4770      	bx	lr
		return BT_SMP_ERR_UNSPECIFIED;
 801a284:	2008      	movs	r0, #8
 801a286:	4770      	bx	lr
		return 0;
 801a288:	2000      	movs	r0, #0
 801a28a:	4770      	bx	lr
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
 801a28c:	2003      	movs	r0, #3
}
 801a28e:	4770      	bx	lr

0801a290 <get_encryption_key_size>:
{
 801a290:	4603      	mov	r3, r0
	return MIN(req->max_key_size, rsp->max_key_size);
 801a292:	f890 00cc 	ldrb.w	r0, [r0, #204]	; 0xcc
 801a296:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
}
 801a29a:	4298      	cmp	r0, r3
 801a29c:	bf28      	it	cs
 801a29e:	4618      	movcs	r0, r3
 801a2a0:	4770      	bx	lr

0801a2a2 <smp_encrypt_info>:
}
 801a2a2:	2007      	movs	r0, #7
 801a2a4:	4770      	bx	lr

0801a2a6 <smp_master_ident>:
}
 801a2a6:	2007      	movs	r0, #7
 801a2a8:	4770      	bx	lr

0801a2aa <smp_pairing_rsp>:
}
 801a2aa:	2007      	movs	r0, #7
 801a2ac:	4770      	bx	lr

0801a2ae <le_sc_oob_data_req_check>:
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
 801a2ae:	f890 00c3 	ldrb.w	r0, [r0, #195]	; 0xc3
}
 801a2b2:	f000 0001 	and.w	r0, r0, #1
 801a2b6:	4770      	bx	lr

0801a2b8 <le_sc_oob_data_rsp_check>:
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
 801a2b8:	f890 00ca 	ldrb.w	r0, [r0, #202]	; 0xca
}
 801a2bc:	f000 0001 	and.w	r0, r0, #1
 801a2c0:	4770      	bx	lr

0801a2c2 <le_sc_oob_config_set>:
{
 801a2c2:	b570      	push	{r4, r5, r6, lr}
 801a2c4:	4606      	mov	r6, r0
 801a2c6:	460c      	mov	r4, r1
	bool req_oob_present = le_sc_oob_data_req_check(smp);
 801a2c8:	f7ff fff1 	bl	801a2ae <le_sc_oob_data_req_check>
 801a2cc:	4605      	mov	r5, r0
	bool rsp_oob_present = le_sc_oob_data_rsp_check(smp);
 801a2ce:	4630      	mov	r0, r6
 801a2d0:	f7ff fff2 	bl	801a2b8 <le_sc_oob_data_rsp_check>
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
 801a2d4:	b12d      	cbz	r5, 801a2e2 <le_sc_oob_config_set+0x20>
 801a2d6:	2300      	movs	r3, #0
		if (rsp_oob_present) {
 801a2d8:	b108      	cbz	r0, 801a2de <le_sc_oob_config_set+0x1c>
				     BT_CONN_OOB_BOTH_PEERS :
 801a2da:	b923      	cbnz	r3, 801a2e6 <le_sc_oob_config_set+0x24>
 801a2dc:	2302      	movs	r3, #2
	info->lesc.oob_config = oob_config;
 801a2de:	7063      	strb	r3, [r4, #1]
}
 801a2e0:	bd70      	pop	{r4, r5, r6, pc}
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
 801a2e2:	2303      	movs	r3, #3
 801a2e4:	e7f8      	b.n	801a2d8 <le_sc_oob_config_set+0x16>
				     BT_CONN_OOB_BOTH_PEERS :
 801a2e6:	2301      	movs	r3, #1
 801a2e8:	e7f9      	b.n	801a2de <le_sc_oob_config_set+0x1c>

0801a2ea <smp_signing_info>:
}
 801a2ea:	2007      	movs	r0, #7
 801a2ec:	4770      	bx	lr

0801a2ee <smp_security_request>:
}
 801a2ee:	2007      	movs	r0, #7
 801a2f0:	4770      	bx	lr

0801a2f2 <smp_keys_check>:
{
 801a2f2:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 801a2f4:	f3bf 8f5b 	dmb	ish
 801a2f8:	6843      	ldr	r3, [r0, #4]
 801a2fa:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
 801a2fe:	f413 6f00 	tst.w	r3, #2048	; 0x800
 801a302:	d132      	bne.n	801a36a <smp_keys_check+0x78>
 801a304:	4604      	mov	r4, r0
	if (!conn->le.keys) {
 801a306:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 801a30a:	b1db      	cbz	r3, 801a344 <smp_keys_check+0x52>
	if (!conn->le.keys ||
 801a30c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 801a310:	b36b      	cbz	r3, 801a36e <smp_keys_check+0x7c>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
 801a312:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
 801a314:	f012 0f24 	tst.w	r2, #36	; 0x24
 801a318:	d02b      	beq.n	801a372 <smp_keys_check+0x80>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
 801a31a:	7aa1      	ldrb	r1, [r4, #10]
 801a31c:	2902      	cmp	r1, #2
 801a31e:	d903      	bls.n	801a328 <smp_keys_check+0x36>
	    !(conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
 801a320:	7b58      	ldrb	r0, [r3, #13]
	if (conn->required_sec_level > BT_SECURITY_L2 &&
 801a322:	f010 0f01 	tst.w	r0, #1
 801a326:	d026      	beq.n	801a376 <smp_keys_check+0x84>
	if (conn->required_sec_level > BT_SECURITY_L3 &&
 801a328:	2903      	cmp	r1, #3
 801a32a:	d926      	bls.n	801a37a <smp_keys_check+0x88>
	    !(conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
 801a32c:	7b59      	ldrb	r1, [r3, #13]
	if (conn->required_sec_level > BT_SECURITY_L3 &&
 801a32e:	f011 0f01 	tst.w	r1, #1
 801a332:	d124      	bne.n	801a37e <smp_keys_check+0x8c>
	    !(conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
 801a334:	f012 0f20 	tst.w	r2, #32
 801a338:	d123      	bne.n	801a382 <smp_keys_check+0x90>
	    !(conn->le.keys->enc_size == BT_SMP_MAX_ENC_KEY_SIZE)) {
 801a33a:	7b1b      	ldrb	r3, [r3, #12]
	    !(conn->le.keys->keys & BT_KEYS_LTK_P256) &&
 801a33c:	2b10      	cmp	r3, #16
 801a33e:	d122      	bne.n	801a386 <smp_keys_check+0x94>
	return true;
 801a340:	2001      	movs	r0, #1
 801a342:	e013      	b.n	801a36c <smp_keys_check+0x7a>
						     conn->id, &conn->le.dst);
 801a344:	f100 0588 	add.w	r5, r0, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
 801a348:	462a      	mov	r2, r5
 801a34a:	7a01      	ldrb	r1, [r0, #8]
 801a34c:	2020      	movs	r0, #32
 801a34e:	f7f7 fe99 	bl	8012084 <bt_keys_find>
 801a352:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
 801a356:	2800      	cmp	r0, #0
 801a358:	d1d8      	bne.n	801a30c <smp_keys_check+0x1a>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
 801a35a:	462a      	mov	r2, r5
 801a35c:	7a21      	ldrb	r1, [r4, #8]
 801a35e:	2004      	movs	r0, #4
 801a360:	f7f7 fe90 	bl	8012084 <bt_keys_find>
 801a364:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
 801a368:	e7d0      	b.n	801a30c <smp_keys_check+0x1a>
		return false;
 801a36a:	2000      	movs	r0, #0
}
 801a36c:	bd38      	pop	{r3, r4, r5, pc}
		return false;
 801a36e:	2000      	movs	r0, #0
 801a370:	e7fc      	b.n	801a36c <smp_keys_check+0x7a>
 801a372:	2000      	movs	r0, #0
 801a374:	e7fa      	b.n	801a36c <smp_keys_check+0x7a>
		return false;
 801a376:	2000      	movs	r0, #0
 801a378:	e7f8      	b.n	801a36c <smp_keys_check+0x7a>
	return true;
 801a37a:	2001      	movs	r0, #1
 801a37c:	e7f6      	b.n	801a36c <smp_keys_check+0x7a>
 801a37e:	2001      	movs	r0, #1
 801a380:	e7f4      	b.n	801a36c <smp_keys_check+0x7a>
 801a382:	2001      	movs	r0, #1
 801a384:	e7f2      	b.n	801a36c <smp_keys_check+0x7a>
		return false;
 801a386:	2000      	movs	r0, #0
 801a388:	e7f0      	b.n	801a36c <smp_keys_check+0x7a>

0801a38a <smp_reset>:
{
 801a38a:	b538      	push	{r3, r4, r5, lr}
 801a38c:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
 801a38e:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
 801a390:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
 801a394:	f002 fdd0 	bl	801cf38 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
 801a398:	2200      	movs	r2, #0
 801a39a:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
	atomic_set(&smp->allowed_cmds, 0);
 801a39e:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 801a3a2:	f3bf 8f5b 	dmb	ish
 801a3a6:	e853 1f00 	ldrex	r1, [r3]
 801a3aa:	e843 2000 	strex	r0, r2, [r3]
 801a3ae:	2800      	cmp	r0, #0
 801a3b0:	d1f9      	bne.n	801a3a6 <smp_reset+0x1c>
 801a3b2:	f3bf 8f5b 	dmb	ish
	atomic_set(smp->flags, 0);
 801a3b6:	34bc      	adds	r4, #188	; 0xbc
 801a3b8:	f3bf 8f5b 	dmb	ish
 801a3bc:	e854 1f00 	ldrex	r1, [r4]
 801a3c0:	e844 2000 	strex	r0, r2, [r4]
 801a3c4:	2800      	cmp	r0, #0
 801a3c6:	d1f9      	bne.n	801a3bc <smp_reset+0x32>
 801a3c8:	f3bf 8f5b 	dmb	ish
	if (conn->required_sec_level != conn->sec_level) {
 801a3cc:	7aa9      	ldrb	r1, [r5, #10]
 801a3ce:	7a6a      	ldrb	r2, [r5, #9]
 801a3d0:	4291      	cmp	r1, r2
 801a3d2:	d000      	beq.n	801a3d6 <smp_reset+0x4c>
		conn->required_sec_level = conn->sec_level;
 801a3d4:	72aa      	strb	r2, [r5, #10]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 801a3d6:	f3bf 8f5b 	dmb	ish
 801a3da:	e853 2f00 	ldrex	r2, [r3]
 801a3de:	f042 0202 	orr.w	r2, r2, #2
 801a3e2:	e843 2100 	strex	r1, r2, [r3]
 801a3e6:	2900      	cmp	r1, #0
 801a3e8:	d1f7      	bne.n	801a3da <smp_reset+0x50>
 801a3ea:	f3bf 8f5b 	dmb	ish
}
 801a3ee:	bd38      	pop	{r3, r4, r5, pc}

0801a3f0 <bt_smp_aes_cmac>:
{
 801a3f0:	b570      	push	{r4, r5, r6, lr}
 801a3f2:	b0c2      	sub	sp, #264	; 0x108
 801a3f4:	460c      	mov	r4, r1
 801a3f6:	4615      	mov	r5, r2
 801a3f8:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
 801a3fa:	aa16      	add	r2, sp, #88	; 0x58
 801a3fc:	4601      	mov	r1, r0
 801a3fe:	4668      	mov	r0, sp
 801a400:	f7fd f855 	bl	80174ae <tc_cmac_setup>
 801a404:	b168      	cbz	r0, 801a422 <bt_smp_aes_cmac+0x32>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
 801a406:	462a      	mov	r2, r5
 801a408:	4621      	mov	r1, r4
 801a40a:	4668      	mov	r0, sp
 801a40c:	f7fd f87c 	bl	8017508 <tc_cmac_update>
 801a410:	b150      	cbz	r0, 801a428 <bt_smp_aes_cmac+0x38>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
 801a412:	4669      	mov	r1, sp
 801a414:	4630      	mov	r0, r6
 801a416:	f7fd f8e5 	bl	80175e4 <tc_cmac_final>
 801a41a:	b140      	cbz	r0, 801a42e <bt_smp_aes_cmac+0x3e>
	return 0;
 801a41c:	2000      	movs	r0, #0
}
 801a41e:	b042      	add	sp, #264	; 0x108
 801a420:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
 801a422:	f06f 0004 	mvn.w	r0, #4
 801a426:	e7fa      	b.n	801a41e <bt_smp_aes_cmac+0x2e>
		return -EIO;
 801a428:	f06f 0004 	mvn.w	r0, #4
 801a42c:	e7f7      	b.n	801a41e <bt_smp_aes_cmac+0x2e>
		return -EIO;
 801a42e:	f06f 0004 	mvn.w	r0, #4
 801a432:	e7f4      	b.n	801a41e <bt_smp_aes_cmac+0x2e>

0801a434 <smp_f4>:
{
 801a434:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a436:	b097      	sub	sp, #92	; 0x5c
 801a438:	9d1c      	ldr	r5, [sp, #112]	; 0x70
	psrc += length - 1;
 801a43a:	301f      	adds	r0, #31
	uint8_t *pdst = (uint8_t *)dst;
 801a43c:	ac01      	add	r4, sp, #4
	for (; length > 0; length--) {
 801a43e:	2620      	movs	r6, #32
 801a440:	b12e      	cbz	r6, 801a44e <smp_f4+0x1a>
		*pdst++ = *psrc--;
 801a442:	f810 7901 	ldrb.w	r7, [r0], #-1
 801a446:	f804 7b01 	strb.w	r7, [r4], #1
	for (; length > 0; length--) {
 801a44a:	3e01      	subs	r6, #1
 801a44c:	e7f8      	b.n	801a440 <smp_f4+0xc>
	psrc += length - 1;
 801a44e:	311f      	adds	r1, #31
	uint8_t *pdst = (uint8_t *)dst;
 801a450:	a809      	add	r0, sp, #36	; 0x24
	for (; length > 0; length--) {
 801a452:	2420      	movs	r4, #32
 801a454:	b12c      	cbz	r4, 801a462 <smp_f4+0x2e>
		*pdst++ = *psrc--;
 801a456:	f811 6901 	ldrb.w	r6, [r1], #-1
 801a45a:	f800 6b01 	strb.w	r6, [r0], #1
	for (; length > 0; length--) {
 801a45e:	3c01      	subs	r4, #1
 801a460:	e7f8      	b.n	801a454 <smp_f4+0x20>
	m[64] = z;
 801a462:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	psrc += length - 1;
 801a466:	320f      	adds	r2, #15
	uint8_t *pdst = (uint8_t *)dst;
 801a468:	ab12      	add	r3, sp, #72	; 0x48
	for (; length > 0; length--) {
 801a46a:	2410      	movs	r4, #16
 801a46c:	e004      	b.n	801a478 <smp_f4+0x44>
		*pdst++ = *psrc--;
 801a46e:	f812 1901 	ldrb.w	r1, [r2], #-1
 801a472:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
 801a476:	3c01      	subs	r4, #1
 801a478:	2c00      	cmp	r4, #0
 801a47a:	d1f8      	bne.n	801a46e <smp_f4+0x3a>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
 801a47c:	462b      	mov	r3, r5
 801a47e:	2241      	movs	r2, #65	; 0x41
 801a480:	a901      	add	r1, sp, #4
 801a482:	a812      	add	r0, sp, #72	; 0x48
 801a484:	f7ff ffb4 	bl	801a3f0 <bt_smp_aes_cmac>
	if (err) {
 801a488:	b948      	cbnz	r0, 801a49e <smp_f4+0x6a>
	for (i = 0; i < (length/2); i++) {
 801a48a:	2c07      	cmp	r4, #7
 801a48c:	d807      	bhi.n	801a49e <smp_f4+0x6a>
		uint8_t tmp = ((uint8_t *)buf)[i];
 801a48e:	5d2a      	ldrb	r2, [r5, r4]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
 801a490:	f1c4 030f 	rsb	r3, r4, #15
 801a494:	5ce9      	ldrb	r1, [r5, r3]
 801a496:	5529      	strb	r1, [r5, r4]
		((uint8_t *)buf)[length - 1 - i] = tmp;
 801a498:	54ea      	strb	r2, [r5, r3]
	for (i = 0; i < (length/2); i++) {
 801a49a:	3401      	adds	r4, #1
 801a49c:	e7f5      	b.n	801a48a <smp_f4+0x56>
}
 801a49e:	b017      	add	sp, #92	; 0x5c
 801a4a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a4a2 <smp_f6>:
{
 801a4a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a4a4:	b097      	sub	sp, #92	; 0x5c
 801a4a6:	4606      	mov	r6, r0
 801a4a8:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 801a4aa:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
	psrc += length - 1;
 801a4ac:	310f      	adds	r1, #15
	uint8_t *pdst = (uint8_t *)dst;
 801a4ae:	a801      	add	r0, sp, #4
	for (; length > 0; length--) {
 801a4b0:	2410      	movs	r4, #16
 801a4b2:	b12c      	cbz	r4, 801a4c0 <smp_f6+0x1e>
		*pdst++ = *psrc--;
 801a4b4:	f811 e901 	ldrb.w	lr, [r1], #-1
 801a4b8:	f800 eb01 	strb.w	lr, [r0], #1
	for (; length > 0; length--) {
 801a4bc:	3c01      	subs	r4, #1
 801a4be:	e7f8      	b.n	801a4b2 <smp_f6+0x10>
	psrc += length - 1;
 801a4c0:	320f      	adds	r2, #15
	uint8_t *pdst = (uint8_t *)dst;
 801a4c2:	a905      	add	r1, sp, #20
	for (; length > 0; length--) {
 801a4c4:	2010      	movs	r0, #16
 801a4c6:	b128      	cbz	r0, 801a4d4 <smp_f6+0x32>
		*pdst++ = *psrc--;
 801a4c8:	f812 c901 	ldrb.w	ip, [r2], #-1
 801a4cc:	f801 cb01 	strb.w	ip, [r1], #1
	for (; length > 0; length--) {
 801a4d0:	3801      	subs	r0, #1
 801a4d2:	e7f8      	b.n	801a4c6 <smp_f6+0x24>
	psrc += length - 1;
 801a4d4:	330f      	adds	r3, #15
	uint8_t *pdst = (uint8_t *)dst;
 801a4d6:	aa09      	add	r2, sp, #36	; 0x24
	for (; length > 0; length--) {
 801a4d8:	2110      	movs	r1, #16
 801a4da:	e004      	b.n	801a4e6 <smp_f6+0x44>
		*pdst++ = *psrc--;
 801a4dc:	f813 0901 	ldrb.w	r0, [r3], #-1
 801a4e0:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
 801a4e4:	3901      	subs	r1, #1
 801a4e6:	2900      	cmp	r1, #0
 801a4e8:	d1f8      	bne.n	801a4dc <smp_f6+0x3a>
	psrc += length - 1;
 801a4ea:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801a4ec:	3302      	adds	r3, #2
	uint8_t *pdst = (uint8_t *)dst;
 801a4ee:	aa0d      	add	r2, sp, #52	; 0x34
	for (; length > 0; length--) {
 801a4f0:	2103      	movs	r1, #3
 801a4f2:	e004      	b.n	801a4fe <smp_f6+0x5c>
		*pdst++ = *psrc--;
 801a4f4:	f813 0901 	ldrb.w	r0, [r3], #-1
 801a4f8:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
 801a4fc:	3901      	subs	r1, #1
 801a4fe:	2900      	cmp	r1, #0
 801a500:	d1f8      	bne.n	801a4f4 <smp_f6+0x52>
	m[51] = a1->type;
 801a502:	4639      	mov	r1, r7
 801a504:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a508:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
	memcpy(m + 52, a1->a.val, 6);
 801a50c:	2206      	movs	r2, #6
 801a50e:	a80e      	add	r0, sp, #56	; 0x38
 801a510:	f7fd fcb4 	bl	8017e7c <memcpy>
	psrc += length - 1;
 801a514:	1dbb      	adds	r3, r7, #6
	uint8_t *pdst = (uint8_t *)dst;
 801a516:	aa0e      	add	r2, sp, #56	; 0x38
	for (; length > 0; length--) {
 801a518:	2106      	movs	r1, #6
 801a51a:	b129      	cbz	r1, 801a528 <smp_f6+0x86>
		*pdst++ = *psrc--;
 801a51c:	f813 0901 	ldrb.w	r0, [r3], #-1
 801a520:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
 801a524:	3901      	subs	r1, #1
 801a526:	e7f8      	b.n	801a51a <smp_f6+0x78>
	m[58] = a2->type;
 801a528:	991e      	ldr	r1, [sp, #120]	; 0x78
 801a52a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a52e:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
	memcpy(m + 59, a2->a.val, 6);
 801a532:	2206      	movs	r2, #6
 801a534:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
 801a538:	f7fd fca0 	bl	8017e7c <memcpy>
	psrc += length - 1;
 801a53c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801a53e:	3306      	adds	r3, #6
	uint8_t *pdst = (uint8_t *)dst;
 801a540:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
	for (; length > 0; length--) {
 801a544:	2106      	movs	r1, #6
 801a546:	e004      	b.n	801a552 <smp_f6+0xb0>
		*pdst++ = *psrc--;
 801a548:	f813 0901 	ldrb.w	r0, [r3], #-1
 801a54c:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
 801a550:	3901      	subs	r1, #1
 801a552:	2900      	cmp	r1, #0
 801a554:	d1f8      	bne.n	801a548 <smp_f6+0xa6>
	psrc += length - 1;
 801a556:	f106 000f 	add.w	r0, r6, #15
	uint8_t *pdst = (uint8_t *)dst;
 801a55a:	ab12      	add	r3, sp, #72	; 0x48
	for (; length > 0; length--) {
 801a55c:	2410      	movs	r4, #16
 801a55e:	e004      	b.n	801a56a <smp_f6+0xc8>
		*pdst++ = *psrc--;
 801a560:	f810 2901 	ldrb.w	r2, [r0], #-1
 801a564:	f803 2b01 	strb.w	r2, [r3], #1
	for (; length > 0; length--) {
 801a568:	3c01      	subs	r4, #1
 801a56a:	2c00      	cmp	r4, #0
 801a56c:	d1f8      	bne.n	801a560 <smp_f6+0xbe>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
 801a56e:	462b      	mov	r3, r5
 801a570:	2241      	movs	r2, #65	; 0x41
 801a572:	a901      	add	r1, sp, #4
 801a574:	a812      	add	r0, sp, #72	; 0x48
 801a576:	f7ff ff3b 	bl	801a3f0 <bt_smp_aes_cmac>
	if (err) {
 801a57a:	b138      	cbz	r0, 801a58c <smp_f6+0xea>
 801a57c:	e008      	b.n	801a590 <smp_f6+0xee>
		uint8_t tmp = ((uint8_t *)buf)[i];
 801a57e:	5d2a      	ldrb	r2, [r5, r4]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
 801a580:	f1c4 030f 	rsb	r3, r4, #15
 801a584:	5ce9      	ldrb	r1, [r5, r3]
 801a586:	5529      	strb	r1, [r5, r4]
		((uint8_t *)buf)[length - 1 - i] = tmp;
 801a588:	54ea      	strb	r2, [r5, r3]
	for (i = 0; i < (length/2); i++) {
 801a58a:	3401      	adds	r4, #1
 801a58c:	2c07      	cmp	r4, #7
 801a58e:	d9f6      	bls.n	801a57e <smp_f6+0xdc>
}
 801a590:	b017      	add	sp, #92	; 0x5c
 801a592:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a594 <smp_pairing_confirm>:
{
 801a594:	b538      	push	{r3, r4, r5, lr}
 801a596:	4604      	mov	r4, r0
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
 801a598:	6889      	ldr	r1, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
 801a59a:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 801a59e:	f3bf 8f5b 	dmb	ish
 801a5a2:	e855 3f00 	ldrex	r3, [r5]
 801a5a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801a5aa:	e845 3200 	strex	r2, r3, [r5]
 801a5ae:	2a00      	cmp	r2, #0
 801a5b0:	d1f7      	bne.n	801a5a2 <smp_pairing_confirm+0xe>
 801a5b2:	f3bf 8f5b 	dmb	ish
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
 801a5b6:	2210      	movs	r2, #16
 801a5b8:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
 801a5bc:	f7fd fc5e 	bl	8017e7c <memcpy>
	switch (smp->method) {
 801a5c0:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 801a5c4:	2b01      	cmp	r3, #1
 801a5c6:	d013      	beq.n	801a5f0 <smp_pairing_confirm+0x5c>
 801a5c8:	2b02      	cmp	r3, #2
 801a5ca:	d13a      	bne.n	801a642 <smp_pairing_confirm+0xae>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
 801a5cc:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 801a5d0:	f3bf 8f5b 	dmb	ish
 801a5d4:	e853 2f00 	ldrex	r2, [r3]
 801a5d8:	f042 0210 	orr.w	r2, r2, #16
 801a5dc:	e843 2100 	strex	r1, r2, [r3]
 801a5e0:	2900      	cmp	r1, #0
 801a5e2:	d1f7      	bne.n	801a5d4 <smp_pairing_confirm+0x40>
 801a5e4:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_confirm(smp);
 801a5e8:	4620      	mov	r0, r4
 801a5ea:	f7f6 fc69 	bl	8010ec0 <smp_send_pairing_confirm>
}
 801a5ee:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 801a5f0:	f3bf 8f5b 	dmb	ish
 801a5f4:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 801a5f8:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
 801a5fc:	f413 7f00 	tst.w	r3, #512	; 0x200
 801a600:	d111      	bne.n	801a626 <smp_pairing_confirm+0x92>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
 801a602:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 801a606:	f3bf 8f5b 	dmb	ish
 801a60a:	e853 2f00 	ldrex	r2, [r3]
 801a60e:	f042 0210 	orr.w	r2, r2, #16
 801a612:	e843 2100 	strex	r1, r2, [r3]
 801a616:	2900      	cmp	r1, #0
 801a618:	d1f7      	bne.n	801a60a <smp_pairing_confirm+0x76>
 801a61a:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_confirm(smp);
 801a61e:	4620      	mov	r0, r4
 801a620:	f7f6 fc4e 	bl	8010ec0 <smp_send_pairing_confirm>
 801a624:	e7e3      	b.n	801a5ee <smp_pairing_confirm+0x5a>
 801a626:	f3bf 8f5b 	dmb	ish
 801a62a:	e855 3f00 	ldrex	r3, [r5]
 801a62e:	f043 0301 	orr.w	r3, r3, #1
 801a632:	e845 3200 	strex	r2, r3, [r5]
 801a636:	2a00      	cmp	r2, #0
 801a638:	d1f7      	bne.n	801a62a <smp_pairing_confirm+0x96>
 801a63a:	f3bf 8f5b 	dmb	ish
			return 0;
 801a63e:	2000      	movs	r0, #0
 801a640:	e7d5      	b.n	801a5ee <smp_pairing_confirm+0x5a>
	switch (smp->method) {
 801a642:	2008      	movs	r0, #8
 801a644:	e7d3      	b.n	801a5ee <smp_pairing_confirm+0x5a>

0801a646 <sc_smp_send_dhkey_check>:
{
 801a646:	b570      	push	{r4, r5, r6, lr}
 801a648:	4604      	mov	r4, r0
 801a64a:	460d      	mov	r5, r1
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
 801a64c:	2210      	movs	r2, #16
 801a64e:	210d      	movs	r1, #13
 801a650:	f7f6 fac2 	bl	8010bd8 <smp_create_pdu>
	if (!buf) {
 801a654:	b180      	cbz	r0, 801a678 <sc_smp_send_dhkey_check+0x32>
 801a656:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
 801a658:	2110      	movs	r1, #16
 801a65a:	3008      	adds	r0, #8
 801a65c:	f000 fcfb 	bl	801b056 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
 801a660:	2210      	movs	r2, #16
 801a662:	4629      	mov	r1, r5
 801a664:	f7fd fc0a 	bl	8017e7c <memcpy>
	smp_send(smp, buf, NULL, NULL);
 801a668:	2300      	movs	r3, #0
 801a66a:	461a      	mov	r2, r3
 801a66c:	4631      	mov	r1, r6
 801a66e:	4620      	mov	r0, r4
 801a670:	f7f6 fc0e 	bl	8010e90 <smp_send>
	return 0;
 801a674:	2000      	movs	r0, #0
}
 801a676:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
 801a678:	2008      	movs	r0, #8
 801a67a:	e7fc      	b.n	801a676 <sc_smp_send_dhkey_check+0x30>

0801a67c <compute_and_check_and_send_slave_dhcheck>:
{
 801a67c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a67e:	b091      	sub	sp, #68	; 0x44
 801a680:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
 801a682:	2210      	movs	r2, #16
 801a684:	2100      	movs	r1, #0
 801a686:	eb0d 0002 	add.w	r0, sp, r2
 801a68a:	f7fd fc1c 	bl	8017ec6 <memset>
	switch (smp->method) {
 801a68e:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 801a692:	2b05      	cmp	r3, #5
 801a694:	d87e      	bhi.n	801a794 <compute_and_check_and_send_slave_dhcheck+0x118>
 801a696:	e8df f003 	tbb	[pc, r3]
 801a69a:	0309      	.short	0x0309
 801a69c:	637d0903 	.word	0x637d0903
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
 801a6a0:	2204      	movs	r2, #4
 801a6a2:	f504 71c8 	add.w	r1, r4, #400	; 0x190
 801a6a6:	a804      	add	r0, sp, #16
 801a6a8:	f7fd fbe8 	bl	8017e7c <memcpy>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
 801a6ac:	f104 07ef 	add.w	r7, r4, #239	; 0xef
 801a6b0:	4625      	mov	r5, r4
		   &smp->chan.chan.conn->le.init_addr,
 801a6b2:	f855 3bdf 	ldr.w	r3, [r5], #223
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
 801a6b6:	f103 0296 	add.w	r2, r3, #150	; 0x96
 801a6ba:	f204 167f 	addw	r6, r4, #383	; 0x17f
		   smp->tk)) {
 801a6be:	f104 01ff 	add.w	r1, r4, #255	; 0xff
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
 801a6c2:	9102      	str	r1, [sp, #8]
 801a6c4:	9601      	str	r6, [sp, #4]
 801a6c6:	9200      	str	r2, [sp, #0]
 801a6c8:	338f      	adds	r3, #143	; 0x8f
 801a6ca:	462a      	mov	r2, r5
 801a6cc:	4639      	mov	r1, r7
 801a6ce:	f204 104f 	addw	r0, r4, #335	; 0x14f
 801a6d2:	f7f6 fae5 	bl	8010ca0 <smp_f5>
 801a6d6:	2800      	cmp	r0, #0
 801a6d8:	d15e      	bne.n	801a798 <compute_and_check_and_send_slave_dhcheck+0x11c>
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
 801a6da:	4622      	mov	r2, r4
		   &smp->chan.chan.conn->le.resp_addr,
 801a6dc:	f852 3bc9 	ldr.w	r3, [r2], #201
 801a6e0:	f103 0196 	add.w	r1, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr, e)) {
 801a6e4:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
 801a6e6:	a808      	add	r0, sp, #32
 801a6e8:	9003      	str	r0, [sp, #12]
 801a6ea:	9302      	str	r3, [sp, #8]
 801a6ec:	9101      	str	r1, [sp, #4]
 801a6ee:	9200      	str	r2, [sp, #0]
 801a6f0:	ab04      	add	r3, sp, #16
 801a6f2:	463a      	mov	r2, r7
 801a6f4:	4629      	mov	r1, r5
 801a6f6:	4630      	mov	r0, r6
 801a6f8:	f7ff fed3 	bl	801a4a2 <smp_f6>
 801a6fc:	2800      	cmp	r0, #0
 801a6fe:	d14e      	bne.n	801a79e <compute_and_check_and_send_slave_dhcheck+0x122>
	if (smp->method == LE_SC_OOB) {
 801a700:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 801a704:	2b05      	cmp	r3, #5
 801a706:	d035      	beq.n	801a774 <compute_and_check_and_send_slave_dhcheck+0xf8>
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
 801a708:	4622      	mov	r2, r4
		   &smp->chan.chan.conn->le.init_addr,
 801a70a:	f852 3bc2 	ldr.w	r3, [r2], #194
 801a70e:	f103 018f 	add.w	r1, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr, re)) {
 801a712:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
 801a714:	a80c      	add	r0, sp, #48	; 0x30
 801a716:	9003      	str	r0, [sp, #12]
 801a718:	9302      	str	r3, [sp, #8]
 801a71a:	9101      	str	r1, [sp, #4]
 801a71c:	9200      	str	r2, [sp, #0]
 801a71e:	ab04      	add	r3, sp, #16
 801a720:	462a      	mov	r2, r5
 801a722:	4639      	mov	r1, r7
 801a724:	4630      	mov	r0, r6
 801a726:	f7ff febc 	bl	801a4a2 <smp_f6>
 801a72a:	bbd0      	cbnz	r0, 801a7a2 <compute_and_check_and_send_slave_dhcheck+0x126>
	if (memcmp(smp->e, re, 16)) {
 801a72c:	2210      	movs	r2, #16
 801a72e:	a90c      	add	r1, sp, #48	; 0x30
 801a730:	f204 106f 	addw	r0, r4, #367	; 0x16f
 801a734:	f7fd fb8a 	bl	8017e4c <memcmp>
 801a738:	bba8      	cbnz	r0, 801a7a6 <compute_and_check_and_send_slave_dhcheck+0x12a>
	err = sc_smp_send_dhkey_check(smp, e);
 801a73a:	a908      	add	r1, sp, #32
 801a73c:	4620      	mov	r0, r4
 801a73e:	f7ff ff82 	bl	801a646 <sc_smp_send_dhkey_check>
	if (err) {
 801a742:	bb50      	cbnz	r0, 801a79a <compute_and_check_and_send_slave_dhcheck+0x11e>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
 801a744:	34bc      	adds	r4, #188	; 0xbc
 801a746:	f3bf 8f5b 	dmb	ish
 801a74a:	e854 3f00 	ldrex	r3, [r4]
 801a74e:	f043 0302 	orr.w	r3, r3, #2
 801a752:	e844 3200 	strex	r2, r3, [r4]
 801a756:	2a00      	cmp	r2, #0
 801a758:	d1f7      	bne.n	801a74a <compute_and_check_and_send_slave_dhcheck+0xce>
 801a75a:	f3bf 8f5b 	dmb	ish
	return 0;
 801a75e:	e01c      	b.n	801a79a <compute_and_check_and_send_slave_dhcheck+0x11e>
		if (smp->oobd_remote) {
 801a760:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
 801a764:	2900      	cmp	r1, #0
 801a766:	d0a1      	beq.n	801a6ac <compute_and_check_and_send_slave_dhcheck+0x30>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
 801a768:	2210      	movs	r2, #16
 801a76a:	eb0d 0002 	add.w	r0, sp, r2
 801a76e:	f7fd fb85 	bl	8017e7c <memcpy>
 801a772:	e79b      	b.n	801a6ac <compute_and_check_and_send_slave_dhcheck+0x30>
		if (smp->oobd_local) {
 801a774:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
 801a778:	b129      	cbz	r1, 801a786 <compute_and_check_and_send_slave_dhcheck+0x10a>
			memcpy(r, smp->oobd_local->r, sizeof(r));
 801a77a:	2210      	movs	r2, #16
 801a77c:	eb0d 0002 	add.w	r0, sp, r2
 801a780:	f7fd fb7c 	bl	8017e7c <memcpy>
 801a784:	e7c0      	b.n	801a708 <compute_and_check_and_send_slave_dhcheck+0x8c>
			memset(r, 0, sizeof(r));
 801a786:	2210      	movs	r2, #16
 801a788:	2100      	movs	r1, #0
 801a78a:	eb0d 0002 	add.w	r0, sp, r2
 801a78e:	f7fd fb9a 	bl	8017ec6 <memset>
 801a792:	e7b9      	b.n	801a708 <compute_and_check_and_send_slave_dhcheck+0x8c>
	switch (smp->method) {
 801a794:	2008      	movs	r0, #8
 801a796:	e000      	b.n	801a79a <compute_and_check_and_send_slave_dhcheck+0x11e>
		return BT_SMP_ERR_UNSPECIFIED;
 801a798:	2008      	movs	r0, #8
}
 801a79a:	b011      	add	sp, #68	; 0x44
 801a79c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
 801a79e:	2008      	movs	r0, #8
 801a7a0:	e7fb      	b.n	801a79a <compute_and_check_and_send_slave_dhcheck+0x11e>
		return BT_SMP_ERR_UNSPECIFIED;
 801a7a2:	2008      	movs	r0, #8
 801a7a4:	e7f9      	b.n	801a79a <compute_and_check_and_send_slave_dhcheck+0x11e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
 801a7a6:	200b      	movs	r0, #11
 801a7a8:	e7f7      	b.n	801a79a <compute_and_check_and_send_slave_dhcheck+0x11e>

0801a7aa <smp_dhkey_check>:
{
 801a7aa:	b538      	push	{r3, r4, r5, lr}
	struct bt_smp_dhkey_check *req = (void *)buf->data;
 801a7ac:	6889      	ldr	r1, [r1, #8]
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
 801a7ae:	6803      	ldr	r3, [r0, #0]
 801a7b0:	78db      	ldrb	r3, [r3, #3]
 801a7b2:	2b01      	cmp	r3, #1
 801a7b4:	d001      	beq.n	801a7ba <smp_dhkey_check+0x10>
	return 0;
 801a7b6:	2000      	movs	r0, #0
}
 801a7b8:	bd38      	pop	{r3, r4, r5, pc}
 801a7ba:	4604      	mov	r4, r0
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
 801a7bc:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 801a7c0:	f3bf 8f5b 	dmb	ish
 801a7c4:	e855 3f00 	ldrex	r3, [r5]
 801a7c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801a7cc:	e845 3200 	strex	r2, r3, [r5]
 801a7d0:	2a00      	cmp	r2, #0
 801a7d2:	d1f7      	bne.n	801a7c4 <smp_dhkey_check+0x1a>
 801a7d4:	f3bf 8f5b 	dmb	ish
		memcpy(smp->e, req->e, sizeof(smp->e));
 801a7d8:	2210      	movs	r2, #16
 801a7da:	f204 106f 	addw	r0, r4, #367	; 0x16f
 801a7de:	f7fd fb4d 	bl	8017e7c <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 801a7e2:	f3bf 8f5b 	dmb	ish
 801a7e6:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 801a7ea:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
 801a7ee:	f013 0f80 	tst.w	r3, #128	; 0x80
 801a7f2:	d116      	bne.n	801a822 <smp_dhkey_check+0x78>
 801a7f4:	f3bf 8f5b 	dmb	ish
 801a7f8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 801a7fc:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
 801a800:	f413 7f00 	tst.w	r3, #512	; 0x200
 801a804:	d01b      	beq.n	801a83e <smp_dhkey_check+0x94>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 801a806:	f3bf 8f5b 	dmb	ish
 801a80a:	e855 3f00 	ldrex	r3, [r5]
 801a80e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801a812:	e845 3200 	strex	r2, r3, [r5]
 801a816:	2a00      	cmp	r2, #0
 801a818:	d1f7      	bne.n	801a80a <smp_dhkey_check+0x60>
 801a81a:	f3bf 8f5b 	dmb	ish
			return 0;
 801a81e:	2000      	movs	r0, #0
 801a820:	e7ca      	b.n	801a7b8 <smp_dhkey_check+0xe>
 801a822:	f3bf 8f5b 	dmb	ish
 801a826:	e855 3f00 	ldrex	r3, [r5]
 801a82a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801a82e:	e845 3200 	strex	r2, r3, [r5]
 801a832:	2a00      	cmp	r2, #0
 801a834:	d1f7      	bne.n	801a826 <smp_dhkey_check+0x7c>
 801a836:	f3bf 8f5b 	dmb	ish
			return 0;
 801a83a:	2000      	movs	r0, #0
 801a83c:	e7bc      	b.n	801a7b8 <smp_dhkey_check+0xe>
		return compute_and_check_and_send_slave_dhcheck(smp);
 801a83e:	4620      	mov	r0, r4
 801a840:	f7ff ff1c 	bl	801a67c <compute_and_check_and_send_slave_dhcheck>
 801a844:	e7b8      	b.n	801a7b8 <smp_dhkey_check+0xe>

0801a846 <smp_send_pairing_random>:
{
 801a846:	b538      	push	{r3, r4, r5, lr}
 801a848:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
 801a84a:	2210      	movs	r2, #16
 801a84c:	2104      	movs	r1, #4
 801a84e:	f7f6 f9c3 	bl	8010bd8 <smp_create_pdu>
	if (!rsp_buf) {
 801a852:	b188      	cbz	r0, 801a878 <smp_send_pairing_random+0x32>
 801a854:	4605      	mov	r5, r0
	req = net_buf_add(rsp_buf, sizeof(*req));
 801a856:	2110      	movs	r1, #16
 801a858:	3008      	adds	r0, #8
 801a85a:	f000 fbfc 	bl	801b056 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
 801a85e:	2210      	movs	r2, #16
 801a860:	f104 01df 	add.w	r1, r4, #223	; 0xdf
 801a864:	f7fd fb0a 	bl	8017e7c <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
 801a868:	2300      	movs	r3, #0
 801a86a:	461a      	mov	r2, r3
 801a86c:	4629      	mov	r1, r5
 801a86e:	4620      	mov	r0, r4
 801a870:	f7f6 fb0e 	bl	8010e90 <smp_send>
	return 0;
 801a874:	2000      	movs	r0, #0
}
 801a876:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
 801a878:	2008      	movs	r0, #8
 801a87a:	e7fc      	b.n	801a876 <smp_send_pairing_random+0x30>

0801a87c <send_pairing_rsp>:
{
 801a87c:	b538      	push	{r3, r4, r5, lr}
 801a87e:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
 801a880:	2206      	movs	r2, #6
 801a882:	2102      	movs	r1, #2
 801a884:	f7f6 f9a8 	bl	8010bd8 <smp_create_pdu>
	if (!rsp_buf) {
 801a888:	b188      	cbz	r0, 801a8ae <send_pairing_rsp+0x32>
 801a88a:	4605      	mov	r5, r0
	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
 801a88c:	2106      	movs	r1, #6
 801a88e:	3008      	adds	r0, #8
 801a890:	f000 fbe1 	bl	801b056 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
 801a894:	2206      	movs	r2, #6
 801a896:	f104 01c9 	add.w	r1, r4, #201	; 0xc9
 801a89a:	f7fd faef 	bl	8017e7c <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
 801a89e:	2300      	movs	r3, #0
 801a8a0:	461a      	mov	r2, r3
 801a8a2:	4629      	mov	r1, r5
 801a8a4:	4620      	mov	r0, r4
 801a8a6:	f7f6 faf3 	bl	8010e90 <smp_send>
	return 0;
 801a8aa:	2000      	movs	r0, #0
}
 801a8ac:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
 801a8ae:	2008      	movs	r0, #8
 801a8b0:	e7fc      	b.n	801a8ac <send_pairing_rsp+0x30>

0801a8b2 <smp_error>:
{
 801a8b2:	b570      	push	{r4, r5, r6, lr}
 801a8b4:	b082      	sub	sp, #8
 801a8b6:	4605      	mov	r5, r0
 801a8b8:	460c      	mov	r4, r1
	smp_pairing_complete(smp, reason);
 801a8ba:	f7f6 fb77 	bl	8010fac <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
 801a8be:	2201      	movs	r2, #1
 801a8c0:	2105      	movs	r1, #5
 801a8c2:	4628      	mov	r0, r5
 801a8c4:	f7f6 f988 	bl	8010bd8 <smp_create_pdu>
	if (!buf) {
 801a8c8:	b180      	cbz	r0, 801a8ec <smp_error+0x3a>
 801a8ca:	4606      	mov	r6, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
 801a8cc:	2101      	movs	r1, #1
 801a8ce:	3008      	adds	r0, #8
 801a8d0:	f000 fbc1 	bl	801b056 <net_buf_simple_add>
	rsp->reason = reason;
 801a8d4:	7004      	strb	r4, [r0, #0]
 801a8d6:	2400      	movs	r4, #0
 801a8d8:	9400      	str	r4, [sp, #0]
 801a8da:	4623      	mov	r3, r4
 801a8dc:	4632      	mov	r2, r6
 801a8de:	2106      	movs	r1, #6
 801a8e0:	6828      	ldr	r0, [r5, #0]
 801a8e2:	f7fe facb 	bl	8018e7c <bt_l2cap_send_cb>
	return 0;
 801a8e6:	4620      	mov	r0, r4
}
 801a8e8:	b002      	add	sp, #8
 801a8ea:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
 801a8ec:	f06f 0036 	mvn.w	r0, #54	; 0x36
 801a8f0:	e7fa      	b.n	801a8e8 <smp_error+0x36>

0801a8f2 <bt_smp_disconnected>:
{
 801a8f2:	b538      	push	{r3, r4, r5, lr}
 801a8f4:	4604      	mov	r4, r0
	struct bt_keys *keys = chan->conn->le.keys;
 801a8f6:	6803      	ldr	r3, [r0, #0]
 801a8f8:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	k_delayed_work_cancel(&smp->work);
 801a8fc:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
 801a900:	f002 fb1a 	bl	801cf38 <k_delayed_work_cancel>
	if (keys) {
 801a904:	b145      	cbz	r5, 801a918 <bt_smp_disconnected+0x26>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
 801a906:	89eb      	ldrh	r3, [r5, #14]
 801a908:	b11b      	cbz	r3, 801a912 <bt_smp_disconnected+0x20>
		    (keys->flags & BT_KEYS_DEBUG))) {
 801a90a:	7b6b      	ldrb	r3, [r5, #13]
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
 801a90c:	f013 0f02 	tst.w	r3, #2
 801a910:	d002      	beq.n	801a918 <bt_smp_disconnected+0x26>
			bt_keys_clear(keys);
 801a912:	4628      	mov	r0, r5
 801a914:	f7f7 fc58 	bl	80121c8 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
 801a918:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 801a91c:	2100      	movs	r1, #0
 801a91e:	4620      	mov	r0, r4
 801a920:	f7fd fad1 	bl	8017ec6 <memset>
}
 801a924:	bd38      	pop	{r3, r4, r5, pc}

0801a926 <update_debug_keys_check>:
{
 801a926:	b510      	push	{r4, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
 801a928:	6804      	ldr	r4, [r0, #0]
	if (!conn->le.keys) {
 801a92a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 801a92e:	b163      	cbz	r3, 801a94a <update_debug_keys_check+0x24>
	if (!conn->le.keys ||
 801a930:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 801a934:	b18b      	cbz	r3, 801a95a <update_debug_keys_check+0x34>
	    !(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
 801a936:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
 801a938:	f012 0f24 	tst.w	r2, #36	; 0x24
 801a93c:	d00f      	beq.n	801a95e <update_debug_keys_check+0x38>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
 801a93e:	7b5b      	ldrb	r3, [r3, #13]
 801a940:	f013 0f02 	tst.w	r3, #2
 801a944:	d10d      	bne.n	801a962 <update_debug_keys_check+0x3c>
	return true;
 801a946:	2001      	movs	r0, #1
}
 801a948:	bd10      	pop	{r4, pc}
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
 801a94a:	f104 0188 	add.w	r1, r4, #136	; 0x88
 801a94e:	7a20      	ldrb	r0, [r4, #8]
 801a950:	f7f7 fb12 	bl	8011f78 <bt_keys_get_addr>
 801a954:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
 801a958:	e7ea      	b.n	801a930 <update_debug_keys_check+0xa>
		return true;
 801a95a:	2001      	movs	r0, #1
 801a95c:	e7f4      	b.n	801a948 <update_debug_keys_check+0x22>
 801a95e:	2001      	movs	r0, #1
 801a960:	e7f2      	b.n	801a948 <update_debug_keys_check+0x22>
		return false;
 801a962:	2000      	movs	r0, #0
 801a964:	e7f0      	b.n	801a948 <update_debug_keys_check+0x22>

0801a966 <update_keys_check>:
{
 801a966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a968:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
 801a96a:	6805      	ldr	r5, [r0, #0]
	if (!conn->le.keys) {
 801a96c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
 801a970:	b1f3      	cbz	r3, 801a9b0 <update_keys_check+0x4a>
	if (!conn->le.keys ||
 801a972:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
 801a976:	b373      	cbz	r3, 801a9d6 <update_keys_check+0x70>
	    !(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
 801a978:	89de      	ldrh	r6, [r3, #14]
	if (!conn->le.keys ||
 801a97a:	f016 0f24 	tst.w	r6, #36	; 0x24
 801a97e:	d02c      	beq.n	801a9da <update_keys_check+0x74>
	if (conn->le.keys->enc_size > get_encryption_key_size(smp)) {
 801a980:	7b1f      	ldrb	r7, [r3, #12]
 801a982:	4620      	mov	r0, r4
 801a984:	f7ff fc84 	bl	801a290 <get_encryption_key_size>
 801a988:	4287      	cmp	r7, r0
 801a98a:	d828      	bhi.n	801a9de <update_keys_check+0x78>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
 801a98c:	f016 0f20 	tst.w	r6, #32
 801a990:	d116      	bne.n	801a9c0 <update_keys_check+0x5a>
	if ((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
 801a992:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
 801a996:	7b5b      	ldrb	r3, [r3, #13]
 801a998:	f013 0301 	ands.w	r3, r3, #1
 801a99c:	d002      	beq.n	801a9a4 <update_keys_check+0x3e>
	     smp->method == JUST_WORKS) {
 801a99e:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
	if ((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
 801a9a2:	b1f2      	cbz	r2, 801a9e2 <update_keys_check+0x7c>
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
 801a9a4:	b9fb      	cbnz	r3, 801a9e6 <update_keys_check+0x80>
	     && smp->method == JUST_WORKS)) {
 801a9a6:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
 801a9aa:	b1f3      	cbz	r3, 801a9ea <update_keys_check+0x84>
	return true;
 801a9ac:	2001      	movs	r0, #1
 801a9ae:	e015      	b.n	801a9dc <update_keys_check+0x76>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
 801a9b0:	f105 0188 	add.w	r1, r5, #136	; 0x88
 801a9b4:	7a28      	ldrb	r0, [r5, #8]
 801a9b6:	f7f7 fadf 	bl	8011f78 <bt_keys_get_addr>
 801a9ba:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
 801a9be:	e7d8      	b.n	801a972 <update_keys_check+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 801a9c0:	f3bf 8f5b 	dmb	ish
 801a9c4:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 801a9c8:	f3bf 8f5b 	dmb	ish
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
 801a9cc:	f013 0f20 	tst.w	r3, #32
 801a9d0:	d1df      	bne.n	801a992 <update_keys_check+0x2c>
		return false;
 801a9d2:	2000      	movs	r0, #0
 801a9d4:	e002      	b.n	801a9dc <update_keys_check+0x76>
		return true;
 801a9d6:	2001      	movs	r0, #1
 801a9d8:	e000      	b.n	801a9dc <update_keys_check+0x76>
 801a9da:	2001      	movs	r0, #1
}
 801a9dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
 801a9de:	2000      	movs	r0, #0
 801a9e0:	e7fc      	b.n	801a9dc <update_keys_check+0x76>
		return false;
 801a9e2:	2000      	movs	r0, #0
 801a9e4:	e7fa      	b.n	801a9dc <update_keys_check+0x76>
	return true;
 801a9e6:	2001      	movs	r0, #1
 801a9e8:	e7f8      	b.n	801a9dc <update_keys_check+0x76>
		return false;
 801a9ea:	2000      	movs	r0, #0
 801a9ec:	e7f6      	b.n	801a9dc <update_keys_check+0x76>

0801a9ee <smp_send_security_req>:
{
 801a9ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a9f2:	b083      	sub	sp, #12
 801a9f4:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
 801a9f6:	f7f6 f8cf 	bl	8010b98 <smp_chan_get>
	if (!smp) {
 801a9fa:	2800      	cmp	r0, #0
 801a9fc:	d076      	beq.n	801aaec <smp_send_security_req+0xfe>
 801a9fe:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
 801aa00:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
 801aa04:	f3bf 8f5b 	dmb	ish
 801aa08:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 801aa0c:	f3bf 8f5b 	dmb	ish
 801aa10:	f013 0f10 	tst.w	r3, #16
 801aa14:	d16d      	bne.n	801aaf2 <smp_send_security_req+0x104>
 801aa16:	f3bf 8f5b 	dmb	ish
 801aa1a:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 801aa1e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
 801aa22:	f013 0f08 	tst.w	r3, #8
 801aa26:	d167      	bne.n	801aaf8 <smp_send_security_req+0x10a>
 801aa28:	f3bf 8f5b 	dmb	ish
 801aa2c:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 801aa30:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
 801aa34:	f013 0f02 	tst.w	r3, #2
 801aa38:	d161      	bne.n	801aafe <smp_send_security_req+0x110>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
 801aa3a:	4628      	mov	r0, r5
 801aa3c:	f7f6 f870 	bl	8010b20 <sec_level_reachable>
 801aa40:	2800      	cmp	r0, #0
 801aa42:	d03f      	beq.n	801aac4 <smp_send_security_req+0xd6>
	if (!conn->le.keys) {
 801aa44:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
 801aa48:	2b00      	cmp	r3, #0
 801aa4a:	d043      	beq.n	801aad4 <smp_send_security_req+0xe6>
	if (smp_init(smp) != 0) {
 801aa4c:	4620      	mov	r0, r4
 801aa4e:	f7f6 fcc1 	bl	80113d4 <smp_init>
 801aa52:	4680      	mov	r8, r0
 801aa54:	2800      	cmp	r0, #0
 801aa56:	d155      	bne.n	801ab04 <smp_send_security_req+0x116>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
 801aa58:	2201      	movs	r2, #1
 801aa5a:	210b      	movs	r1, #11
 801aa5c:	4620      	mov	r0, r4
 801aa5e:	f7f6 f8bb 	bl	8010bd8 <smp_create_pdu>
	if (!req_buf) {
 801aa62:	4681      	mov	r9, r0
 801aa64:	2800      	cmp	r0, #0
 801aa66:	d050      	beq.n	801ab0a <smp_send_security_req+0x11c>
	req = net_buf_add(req_buf, sizeof(*req));
 801aa68:	2101      	movs	r1, #1
 801aa6a:	3008      	adds	r0, #8
 801aa6c:	f000 faf3 	bl	801b056 <net_buf_simple_add>
 801aa70:	4606      	mov	r6, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
 801aa72:	2109      	movs	r1, #9
 801aa74:	4628      	mov	r0, r5
 801aa76:	f7f6 f833 	bl	8010ae0 <get_auth>
 801aa7a:	7030      	strb	r0, [r6, #0]
 801aa7c:	2300      	movs	r3, #0
 801aa7e:	9300      	str	r3, [sp, #0]
 801aa80:	464a      	mov	r2, r9
 801aa82:	2106      	movs	r1, #6
 801aa84:	4628      	mov	r0, r5
 801aa86:	f7fe f9f9 	bl	8018e7c <bt_l2cap_send_cb>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 801aa8a:	f3bf 8f5b 	dmb	ish
 801aa8e:	e857 3f00 	ldrex	r3, [r7]
 801aa92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801aa96:	e847 3200 	strex	r2, r3, [r7]
 801aa9a:	2a00      	cmp	r2, #0
 801aa9c:	d1f7      	bne.n	801aa8e <smp_send_security_req+0xa0>
 801aa9e:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
 801aaa2:	34b8      	adds	r4, #184	; 0xb8
 801aaa4:	f3bf 8f5b 	dmb	ish
 801aaa8:	e854 3f00 	ldrex	r3, [r4]
 801aaac:	f043 0302 	orr.w	r3, r3, #2
 801aab0:	e844 3200 	strex	r2, r3, [r4]
 801aab4:	2a00      	cmp	r2, #0
 801aab6:	d1f7      	bne.n	801aaa8 <smp_send_security_req+0xba>
 801aab8:	f3bf 8f5b 	dmb	ish
}
 801aabc:	4640      	mov	r0, r8
 801aabe:	b003      	add	sp, #12
 801aac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
 801aac4:	4628      	mov	r0, r5
 801aac6:	f7ff fc14 	bl	801a2f2 <smp_keys_check>
 801aaca:	2800      	cmp	r0, #0
 801aacc:	d1ba      	bne.n	801aa44 <smp_send_security_req+0x56>
		return -EINVAL;
 801aace:	f06f 0815 	mvn.w	r8, #21
 801aad2:	e7f3      	b.n	801aabc <smp_send_security_req+0xce>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
 801aad4:	f105 0188 	add.w	r1, r5, #136	; 0x88
 801aad8:	7a28      	ldrb	r0, [r5, #8]
 801aada:	f7f7 fa4d 	bl	8011f78 <bt_keys_get_addr>
 801aade:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
 801aae2:	2800      	cmp	r0, #0
 801aae4:	d1b2      	bne.n	801aa4c <smp_send_security_req+0x5e>
			return -ENOMEM;
 801aae6:	f06f 080b 	mvn.w	r8, #11
 801aaea:	e7e7      	b.n	801aabc <smp_send_security_req+0xce>
		return -ENOTCONN;
 801aaec:	f06f 0838 	mvn.w	r8, #56	; 0x38
 801aaf0:	e7e4      	b.n	801aabc <smp_send_security_req+0xce>
		return -EIO;
 801aaf2:	f06f 0804 	mvn.w	r8, #4
 801aaf6:	e7e1      	b.n	801aabc <smp_send_security_req+0xce>
		return -EBUSY;
 801aaf8:	f06f 080f 	mvn.w	r8, #15
 801aafc:	e7de      	b.n	801aabc <smp_send_security_req+0xce>
		return -EBUSY;
 801aafe:	f06f 080f 	mvn.w	r8, #15
 801ab02:	e7db      	b.n	801aabc <smp_send_security_req+0xce>
		return -ENOBUFS;
 801ab04:	f06f 0836 	mvn.w	r8, #54	; 0x36
 801ab08:	e7d8      	b.n	801aabc <smp_send_security_req+0xce>
		return -ENOBUFS;
 801ab0a:	f06f 0836 	mvn.w	r8, #54	; 0x36
 801ab0e:	e7d5      	b.n	801aabc <smp_send_security_req+0xce>

0801ab10 <bt_smp_encrypt_change>:
{
 801ab10:	b510      	push	{r4, lr}
 801ab12:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->conn;
 801ab14:	4603      	mov	r3, r0
 801ab16:	f853 2bbc 	ldr.w	r2, [r3], #188
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 801ab1a:	f3bf 8f5b 	dmb	ish
 801ab1e:	e853 0f00 	ldrex	r0, [r3]
 801ab22:	f020 0002 	bic.w	r0, r0, #2
 801ab26:	e843 0c00 	strex	ip, r0, [r3]
 801ab2a:	f1bc 0f00 	cmp.w	ip, #0
 801ab2e:	d1f6      	bne.n	801ab1e <bt_smp_encrypt_change+0xe>
 801ab30:	f3bf 8f5b 	dmb	ish
	if (hci_status) {
 801ab34:	b909      	cbnz	r1, 801ab3a <bt_smp_encrypt_change+0x2a>
	if (!conn->encrypt) {
 801ab36:	7ad2      	ldrb	r2, [r2, #11]
 801ab38:	b902      	cbnz	r2, 801ab3c <bt_smp_encrypt_change+0x2c>
}
 801ab3a:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 801ab3c:	f3bf 8f5b 	dmb	ish
 801ab40:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
 801ab44:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
 801ab48:	f012 0f08 	tst.w	r2, #8
 801ab4c:	d044      	beq.n	801abd8 <bt_smp_encrypt_change+0xc8>
 801ab4e:	f3bf 8f5b 	dmb	ish
 801ab52:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
 801ab56:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
 801ab5a:	f012 0f20 	tst.w	r2, #32
 801ab5e:	d021      	beq.n	801aba4 <bt_smp_encrypt_change+0x94>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
 801ab60:	f894 21a0 	ldrb.w	r2, [r4, #416]	; 0x1a0
 801ab64:	f012 0f08 	tst.w	r2, #8
 801ab68:	d010      	beq.n	801ab8c <bt_smp_encrypt_change+0x7c>
		    (smp->remote_dist & BT_SMP_DIST_LINK_KEY)) {
 801ab6a:	f894 21a1 	ldrb.w	r2, [r4, #417]	; 0x1a1
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
 801ab6e:	f012 0f08 	tst.w	r2, #8
 801ab72:	d00b      	beq.n	801ab8c <bt_smp_encrypt_change+0x7c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 801ab74:	f3bf 8f5b 	dmb	ish
 801ab78:	e853 2f00 	ldrex	r2, [r3]
 801ab7c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801ab80:	e843 2100 	strex	r1, r2, [r3]
 801ab84:	2900      	cmp	r1, #0
 801ab86:	d1f7      	bne.n	801ab78 <bt_smp_encrypt_change+0x68>
 801ab88:	f3bf 8f5b 	dmb	ish
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
 801ab8c:	f894 21a0 	ldrb.w	r2, [r4, #416]	; 0x1a0
 801ab90:	f022 0208 	bic.w	r2, r2, #8
 801ab94:	f884 21a0 	strb.w	r2, [r4, #416]	; 0x1a0
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
 801ab98:	f894 21a1 	ldrb.w	r2, [r4, #417]	; 0x1a1
 801ab9c:	f022 0208 	bic.w	r2, r2, #8
 801aba0:	f884 21a1 	strb.w	r2, [r4, #417]	; 0x1a1
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
 801aba4:	f894 21a1 	ldrb.w	r2, [r4, #417]	; 0x1a1
 801aba8:	f012 0f01 	tst.w	r2, #1
 801abac:	d118      	bne.n	801abe0 <bt_smp_encrypt_change+0xd0>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
 801abae:	f012 0f02 	tst.w	r2, #2
 801abb2:	d13d      	bne.n	801ac30 <bt_smp_encrypt_change+0x120>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
 801abb4:	f012 0f04 	tst.w	r2, #4
 801abb8:	d020      	beq.n	801abfc <bt_smp_encrypt_change+0xec>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
 801abba:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
 801abbe:	f3bf 8f5b 	dmb	ish
 801abc2:	e852 1f00 	ldrex	r1, [r2]
 801abc6:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 801abca:	e842 1000 	strex	r0, r1, [r2]
 801abce:	2800      	cmp	r0, #0
 801abd0:	d1f7      	bne.n	801abc2 <bt_smp_encrypt_change+0xb2>
 801abd2:	f3bf 8f5b 	dmb	ish
}
 801abd6:	e011      	b.n	801abfc <bt_smp_encrypt_change+0xec>
		smp_reset(smp);
 801abd8:	4620      	mov	r0, r4
 801abda:	f7ff fbd6 	bl	801a38a <smp_reset>
		return;
 801abde:	e7ac      	b.n	801ab3a <bt_smp_encrypt_change+0x2a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
 801abe0:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 801abe4:	f3bf 8f5b 	dmb	ish
 801abe8:	e852 1f00 	ldrex	r1, [r2]
 801abec:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 801abf0:	e842 1000 	strex	r0, r1, [r2]
 801abf4:	2800      	cmp	r0, #0
 801abf6:	d1f7      	bne.n	801abe8 <bt_smp_encrypt_change+0xd8>
 801abf8:	f3bf 8f5b 	dmb	ish
 801abfc:	f3bf 8f5b 	dmb	ish
 801ac00:	e853 2f00 	ldrex	r2, [r3]
 801ac04:	f042 0204 	orr.w	r2, r2, #4
 801ac08:	e843 2100 	strex	r1, r2, [r3]
 801ac0c:	2900      	cmp	r1, #0
 801ac0e:	d1f7      	bne.n	801ac00 <bt_smp_encrypt_change+0xf0>
 801ac10:	f3bf 8f5b 	dmb	ish
	if (bt_smp_distribute_keys(smp)) {
 801ac14:	4620      	mov	r0, r4
 801ac16:	f7f6 fda5 	bl	8011764 <bt_smp_distribute_keys>
 801ac1a:	2800      	cmp	r0, #0
 801ac1c:	d18d      	bne.n	801ab3a <bt_smp_encrypt_change+0x2a>
	if (!smp->local_dist && !smp->remote_dist) {
 801ac1e:	f8b4 31a0 	ldrh.w	r3, [r4, #416]	; 0x1a0
 801ac22:	2b00      	cmp	r3, #0
 801ac24:	d189      	bne.n	801ab3a <bt_smp_encrypt_change+0x2a>
		smp_pairing_complete(smp, 0);
 801ac26:	2100      	movs	r1, #0
 801ac28:	4620      	mov	r0, r4
 801ac2a:	f7f6 f9bf 	bl	8010fac <smp_pairing_complete>
 801ac2e:	e784      	b.n	801ab3a <bt_smp_encrypt_change+0x2a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
 801ac30:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
 801ac34:	f3bf 8f5b 	dmb	ish
 801ac38:	e852 1f00 	ldrex	r1, [r2]
 801ac3c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 801ac40:	e842 1000 	strex	r0, r1, [r2]
 801ac44:	2800      	cmp	r0, #0
 801ac46:	d1f7      	bne.n	801ac38 <bt_smp_encrypt_change+0x128>
 801ac48:	f3bf 8f5b 	dmb	ish
}
 801ac4c:	e7d6      	b.n	801abfc <bt_smp_encrypt_change+0xec>

0801ac4e <bt_smp_request_ltk>:
{
 801ac4e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ac52:	4604      	mov	r4, r0
 801ac54:	4616      	mov	r6, r2
 801ac56:	461f      	mov	r7, r3
 801ac58:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	smp = smp_chan_get(conn);
 801ac5c:	f7f5 ff9c 	bl	8010b98 <smp_chan_get>
	if (!smp) {
 801ac60:	2800      	cmp	r0, #0
 801ac62:	f000 8087 	beq.w	801ad74 <bt_smp_request_ltk+0x126>
 801ac66:	4605      	mov	r5, r0
	if (ediv == 0U && rand == 0U &&
 801ac68:	f1b8 0f00 	cmp.w	r8, #0
 801ac6c:	d102      	bne.n	801ac74 <bt_smp_request_ltk+0x26>
 801ac6e:	ea56 0307 	orrs.w	r3, r6, r7
 801ac72:	d01f      	beq.n	801acb4 <bt_smp_request_ltk+0x66>
	if (!conn->le.keys) {
 801ac74:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 801ac78:	2b00      	cmp	r3, #0
 801ac7a:	d050      	beq.n	801ad1e <bt_smp_request_ltk+0xd0>
	if (ediv == 0U && rand == 0U &&
 801ac7c:	f1b8 0f00 	cmp.w	r8, #0
 801ac80:	d109      	bne.n	801ac96 <bt_smp_request_ltk+0x48>
 801ac82:	ea56 0307 	orrs.w	r3, r6, r7
 801ac86:	d106      	bne.n	801ac96 <bt_smp_request_ltk+0x48>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
 801ac88:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
 801ac8c:	b119      	cbz	r1, 801ac96 <bt_smp_request_ltk+0x48>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
 801ac8e:	89cb      	ldrh	r3, [r1, #14]
 801ac90:	f013 0f20 	tst.w	r3, #32
 801ac94:	d156      	bne.n	801ad44 <bt_smp_request_ltk+0xf6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 801ac96:	f3bf 8f5b 	dmb	ish
 801ac9a:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
 801ac9e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
 801aca2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 801aca6:	d15f      	bne.n	801ad68 <bt_smp_request_ltk+0x11a>
	smp_reset(smp);
 801aca8:	4628      	mov	r0, r5
 801acaa:	f7ff fb6e 	bl	801a38a <smp_reset>
	return false;
 801acae:	2000      	movs	r0, #0
}
 801acb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
 801acb4:	f100 09bc 	add.w	r9, r0, #188	; 0xbc
 801acb8:	f3bf 8f5b 	dmb	ish
 801acbc:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 801acc0:	f3bf 8f5b 	dmb	ish
	if (ediv == 0U && rand == 0U &&
 801acc4:	f013 0f08 	tst.w	r3, #8
 801acc8:	d0d4      	beq.n	801ac74 <bt_smp_request_ltk+0x26>
 801acca:	f3bf 8f5b 	dmb	ish
 801acce:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 801acd2:	f3bf 8f5b 	dmb	ish
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
 801acd6:	f013 0f02 	tst.w	r3, #2
 801acda:	d0cb      	beq.n	801ac74 <bt_smp_request_ltk+0x26>
		enc_size = get_encryption_key_size(smp);
 801acdc:	f7ff fad8 	bl	801a290 <get_encryption_key_size>
 801ace0:	4604      	mov	r4, r0
		memcpy(ltk, smp->tk, enc_size);
 801ace2:	4602      	mov	r2, r0
 801ace4:	f105 01ff 	add.w	r1, r5, #255	; 0xff
 801ace8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801acea:	f7fd f8c7 	bl	8017e7c <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
 801acee:	2c0f      	cmp	r4, #15
 801acf0:	d90d      	bls.n	801ad0e <bt_smp_request_ltk+0xc0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 801acf2:	f3bf 8f5b 	dmb	ish
 801acf6:	e859 3f00 	ldrex	r3, [r9]
 801acfa:	f043 0302 	orr.w	r3, r3, #2
 801acfe:	e849 3200 	strex	r2, r3, [r9]
 801ad02:	2a00      	cmp	r2, #0
 801ad04:	d1f7      	bne.n	801acf6 <bt_smp_request_ltk+0xa8>
 801ad06:	f3bf 8f5b 	dmb	ish
		return true;
 801ad0a:	2001      	movs	r0, #1
 801ad0c:	e7d0      	b.n	801acb0 <bt_smp_request_ltk+0x62>
			(void)memset(ltk + enc_size, 0,
 801ad0e:	f1c4 0210 	rsb	r2, r4, #16
 801ad12:	2100      	movs	r1, #0
 801ad14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad16:	1918      	adds	r0, r3, r4
 801ad18:	f7fd f8d5 	bl	8017ec6 <memset>
 801ad1c:	e7e9      	b.n	801acf2 <bt_smp_request_ltk+0xa4>
					     &conn->le.dst);
 801ad1e:	f104 0988 	add.w	r9, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
 801ad22:	464a      	mov	r2, r9
 801ad24:	7a21      	ldrb	r1, [r4, #8]
 801ad26:	2020      	movs	r0, #32
 801ad28:	f7f7 f9ac 	bl	8012084 <bt_keys_find>
 801ad2c:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
 801ad30:	2800      	cmp	r0, #0
 801ad32:	d1a3      	bne.n	801ac7c <bt_smp_request_ltk+0x2e>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
 801ad34:	464a      	mov	r2, r9
 801ad36:	7a21      	ldrb	r1, [r4, #8]
 801ad38:	2001      	movs	r0, #1
 801ad3a:	f7f7 f9a3 	bl	8012084 <bt_keys_find>
 801ad3e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
 801ad42:	e79b      	b.n	801ac7c <bt_smp_request_ltk+0x2e>
		enc_size = conn->le.keys->enc_size;
 801ad44:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
 801ad46:	4622      	mov	r2, r4
 801ad48:	311a      	adds	r1, #26
 801ad4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ad4c:	f7fd f896 	bl	8017e7c <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
 801ad50:	2c0f      	cmp	r4, #15
 801ad52:	d901      	bls.n	801ad58 <bt_smp_request_ltk+0x10a>
		return true;
 801ad54:	2001      	movs	r0, #1
 801ad56:	e7ab      	b.n	801acb0 <bt_smp_request_ltk+0x62>
			(void)memset(ltk + enc_size, 0,
 801ad58:	f1c4 0210 	rsb	r2, r4, #16
 801ad5c:	2100      	movs	r1, #0
 801ad5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad60:	1918      	adds	r0, r3, r4
 801ad62:	f7fd f8b0 	bl	8017ec6 <memset>
 801ad66:	e7f5      	b.n	801ad54 <bt_smp_request_ltk+0x106>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
 801ad68:	2202      	movs	r2, #2
 801ad6a:	2106      	movs	r1, #6
 801ad6c:	4620      	mov	r0, r4
 801ad6e:	f7f2 fac3 	bl	800d2f8 <bt_conn_security_changed>
 801ad72:	e799      	b.n	801aca8 <bt_smp_request_ltk+0x5a>
		return false;
 801ad74:	2000      	movs	r0, #0
 801ad76:	e79b      	b.n	801acb0 <bt_smp_request_ltk+0x62>

0801ad78 <bt_smp_sign>:
}
 801ad78:	f06f 0022 	mvn.w	r0, #34	; 0x22
 801ad7c:	4770      	bx	lr

0801ad7e <bt_smp_start_security>:
{
 801ad7e:	b508      	push	{r3, lr}
	switch (conn->role) {
 801ad80:	78c3      	ldrb	r3, [r0, #3]
 801ad82:	2b01      	cmp	r3, #1
 801ad84:	d102      	bne.n	801ad8c <bt_smp_start_security+0xe>
		return smp_send_security_req(conn);
 801ad86:	f7ff fe32 	bl	801a9ee <smp_send_security_req>
}
 801ad8a:	bd08      	pop	{r3, pc}
		return -EINVAL;
 801ad8c:	f06f 0015 	mvn.w	r0, #21
 801ad90:	e7fb      	b.n	801ad8a <bt_smp_start_security+0xc>

0801ad92 <id_add>:
{
 801ad92:	b508      	push	{r3, lr}
	bt_id_add(keys);
 801ad94:	f7f0 fcd6 	bl	800b744 <bt_id_add>
}
 801ad98:	bd08      	pop	{r3, pc}

0801ad9a <bt_keys_add_type>:
	keys->keys |= type;
 801ad9a:	89c3      	ldrh	r3, [r0, #14]
 801ad9c:	4319      	orrs	r1, r3
 801ad9e:	81c1      	strh	r1, [r0, #14]
}
 801ada0:	4770      	bx	lr

0801ada2 <bt_keys_get_type>:
{
 801ada2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ada4:	4606      	mov	r6, r0
 801ada6:	460c      	mov	r4, r1
 801ada8:	4615      	mov	r5, r2
	keys = bt_keys_find(type, id, addr);
 801adaa:	f7f7 f96b 	bl	8012084 <bt_keys_find>
	if (keys) {
 801adae:	4607      	mov	r7, r0
 801adb0:	b108      	cbz	r0, 801adb6 <bt_keys_get_type+0x14>
}
 801adb2:	4638      	mov	r0, r7
 801adb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	keys = bt_keys_get_addr(id, addr);
 801adb6:	4629      	mov	r1, r5
 801adb8:	4620      	mov	r0, r4
 801adba:	f7f7 f8dd 	bl	8011f78 <bt_keys_get_addr>
	if (!keys) {
 801adbe:	4607      	mov	r7, r0
 801adc0:	2800      	cmp	r0, #0
 801adc2:	d0f6      	beq.n	801adb2 <bt_keys_get_type+0x10>
	bt_keys_add_type(keys, type);
 801adc4:	4631      	mov	r1, r6
 801adc6:	f7ff ffe8 	bl	801ad9a <bt_keys_add_type>
	return keys;
 801adca:	e7f2      	b.n	801adb2 <bt_keys_get_type+0x10>

0801adcc <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, uint8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
 801adcc:	4770      	bx	lr

0801adce <data_alloc>:
};

#endif /* CONFIG_HEAP_MEM_POOL_SIZE > 0 */

static uint8_t *data_alloc(struct net_buf *buf, size_t *size, k_timeout_t timeout)
{
 801adce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801add2:	4604      	mov	r4, r0
 801add4:	460d      	mov	r5, r1
 801add6:	4617      	mov	r7, r2
 801add8:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 801adda:	7980      	ldrb	r0, [r0, #6]
 801addc:	f7f7 fb48 	bl	8012470 <net_buf_pool_get>

	return pool->alloc->cb->alloc(buf, size, timeout);
 801ade0:	6a03      	ldr	r3, [r0, #32]
 801ade2:	681b      	ldr	r3, [r3, #0]
 801ade4:	f8d3 8000 	ldr.w	r8, [r3]
 801ade8:	463a      	mov	r2, r7
 801adea:	4633      	mov	r3, r6
 801adec:	4629      	mov	r1, r5
 801adee:	4620      	mov	r0, r4
 801adf0:	47c0      	blx	r8
}
 801adf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801adf6 <data_unref>:

	return pool->alloc->cb->ref(buf, data);
}

static void data_unref(struct net_buf *buf, uint8_t *data)
{
 801adf6:	b538      	push	{r3, r4, r5, lr}
 801adf8:	4604      	mov	r4, r0
 801adfa:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 801adfc:	7980      	ldrb	r0, [r0, #6]
 801adfe:	f7f7 fb37 	bl	8012470 <net_buf_pool_get>

	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
 801ae02:	7963      	ldrb	r3, [r4, #5]
 801ae04:	f013 0f02 	tst.w	r3, #2
 801ae08:	d105      	bne.n	801ae16 <data_unref+0x20>
		return;
	}

	pool->alloc->cb->unref(buf, data);
 801ae0a:	6a03      	ldr	r3, [r0, #32]
 801ae0c:	681b      	ldr	r3, [r3, #0]
 801ae0e:	689b      	ldr	r3, [r3, #8]
 801ae10:	4629      	mov	r1, r5
 801ae12:	4620      	mov	r0, r4
 801ae14:	4798      	blx	r3
}
 801ae16:	bd38      	pop	{r3, r4, r5, pc}

0801ae18 <fixed_data_alloc>:
{
 801ae18:	b570      	push	{r4, r5, r6, lr}
 801ae1a:	4604      	mov	r4, r0
 801ae1c:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 801ae1e:	7980      	ldrb	r0, [r0, #6]
 801ae20:	f7f7 fb26 	bl	8012470 <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
 801ae24:	6a03      	ldr	r3, [r0, #32]
 801ae26:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
 801ae28:	682a      	ldr	r2, [r5, #0]
 801ae2a:	6819      	ldr	r1, [r3, #0]
 801ae2c:	428a      	cmp	r2, r1
 801ae2e:	bf28      	it	cs
 801ae30:	460a      	movcs	r2, r1
 801ae32:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
 801ae34:	685d      	ldr	r5, [r3, #4]
 801ae36:	681e      	ldr	r6, [r3, #0]
 801ae38:	4620      	mov	r0, r4
 801ae3a:	f7f7 fb21 	bl	8012480 <net_buf_id>
}
 801ae3e:	fb00 5006 	mla	r0, r0, r6, r5
 801ae42:	bd70      	pop	{r4, r5, r6, pc}

0801ae44 <net_buf_reset>:
	buf->len  = 0U;
 801ae44:	2300      	movs	r3, #0
 801ae46:	8183      	strh	r3, [r0, #12]
	buf->data = buf->__buf;
 801ae48:	6903      	ldr	r3, [r0, #16]
 801ae4a:	6083      	str	r3, [r0, #8]
}
 801ae4c:	4770      	bx	lr

0801ae4e <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
 801ae4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae52:	b083      	sub	sp, #12
 801ae54:	4605      	mov	r5, r0
 801ae56:	9101      	str	r1, [sp, #4]
 801ae58:	4616      	mov	r6, r2
 801ae5a:	461f      	mov	r7, r3
	uint64_t end = z_timeout_end_calc(timeout);
 801ae5c:	4610      	mov	r0, r2
 801ae5e:	4619      	mov	r1, r3
 801ae60:	f002 f8f8 	bl	801d054 <z_timeout_end_calc>
 801ae64:	4682      	mov	sl, r0
 801ae66:	9100      	str	r1, [sp, #0]
 801ae68:	f04f 0310 	mov.w	r3, #16
 801ae6c:	f3ef 8b11 	mrs	fp, BASEPRI
 801ae70:	f383 8811 	msr	BASEPRI, r3
 801ae74:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
 801ae78:	8b6b      	ldrh	r3, [r5, #26]
 801ae7a:	2b00      	cmp	r3, #0
 801ae7c:	d03f      	beq.n	801aefe <net_buf_alloc_len+0xb0>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
 801ae7e:	8b2a      	ldrh	r2, [r5, #24]
 801ae80:	4293      	cmp	r3, r2
 801ae82:	d32f      	bcc.n	801aee4 <net_buf_alloc_len+0x96>
				irq_unlock(key);
				goto success;
			}
		}

		uninit_count = pool->uninit_count--;
 801ae84:	8b6a      	ldrh	r2, [r5, #26]
 801ae86:	1e53      	subs	r3, r2, #1
 801ae88:	836b      	strh	r3, [r5, #26]
	__asm__ volatile(
 801ae8a:	f38b 8811 	msr	BASEPRI, fp
 801ae8e:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
 801ae92:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 801ae94:	8b2b      	ldrh	r3, [r5, #24]
 801ae96:	1a9b      	subs	r3, r3, r2
 801ae98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ae9c:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
	buf->pool_id = pool_id(pool);
 801aea0:	4628      	mov	r0, r5
 801aea2:	f7f7 fad9 	bl	8012458 <pool_id>
 801aea6:	71a0      	strb	r0, [r4, #6]
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
 801aea8:	9b01      	ldr	r3, [sp, #4]
 801aeaa:	2b00      	cmp	r3, #0
 801aeac:	d046      	beq.n	801af3c <net_buf_alloc_len+0xee>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 801aeae:	ea56 0307 	orrs.w	r3, r6, r7
 801aeb2:	d005      	beq.n	801aec0 <net_buf_alloc_len+0x72>
 801aeb4:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801aeb8:	bf08      	it	eq
 801aeba:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 801aebe:	d12b      	bne.n	801af18 <net_buf_alloc_len+0xca>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
 801aec0:	4632      	mov	r2, r6
 801aec2:	463b      	mov	r3, r7
 801aec4:	a901      	add	r1, sp, #4
 801aec6:	4620      	mov	r0, r4
 801aec8:	f7ff ff81 	bl	801adce <data_alloc>
 801aecc:	4605      	mov	r5, r0
 801aece:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
 801aed0:	2800      	cmp	r0, #0
 801aed2:	d135      	bne.n	801af40 <net_buf_alloc_len+0xf2>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 801aed4:	79a0      	ldrb	r0, [r4, #6]
 801aed6:	f7f7 facb 	bl	8012470 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
 801aeda:	4621      	mov	r1, r4
 801aedc:	f001 fdcd 	bl	801ca7a <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
 801aee0:	462c      	mov	r4, r5
}
 801aee2:	e037      	b.n	801af54 <net_buf_alloc_len+0x106>
	return z_impl_k_queue_get(queue, timeout);
 801aee4:	2200      	movs	r2, #0
 801aee6:	2300      	movs	r3, #0
 801aee8:	4628      	mov	r0, r5
 801aeea:	f7f8 ff31 	bl	8013d50 <z_impl_k_queue_get>
			if (buf) {
 801aeee:	4604      	mov	r4, r0
 801aef0:	2800      	cmp	r0, #0
 801aef2:	d0c7      	beq.n	801ae84 <net_buf_alloc_len+0x36>
 801aef4:	f38b 8811 	msr	BASEPRI, fp
 801aef8:	f3bf 8f6f 	isb	sy
				goto success;
 801aefc:	e7d4      	b.n	801aea8 <net_buf_alloc_len+0x5a>
 801aefe:	f38b 8811 	msr	BASEPRI, fp
 801af02:	f3bf 8f6f 	isb	sy
 801af06:	4632      	mov	r2, r6
 801af08:	463b      	mov	r3, r7
 801af0a:	4628      	mov	r0, r5
 801af0c:	f7f8 ff20 	bl	8013d50 <z_impl_k_queue_get>
	if (!buf) {
 801af10:	4604      	mov	r4, r0
 801af12:	2800      	cmp	r0, #0
 801af14:	d1c8      	bne.n	801aea8 <net_buf_alloc_len+0x5a>
 801af16:	e01d      	b.n	801af54 <net_buf_alloc_len+0x106>
			int64_t remaining = end - z_tick_get();
 801af18:	f7f9 fd30 	bl	801497c <z_tick_get>
 801af1c:	ebba 0800 	subs.w	r8, sl, r0
 801af20:	9b00      	ldr	r3, [sp, #0]
 801af22:	eb63 0901 	sbc.w	r9, r3, r1
			if (remaining <= 0) {
 801af26:	f1b8 0f01 	cmp.w	r8, #1
 801af2a:	f179 0300 	sbcs.w	r3, r9, #0
 801af2e:	db02      	blt.n	801af36 <net_buf_alloc_len+0xe8>
				timeout = Z_TIMEOUT_TICKS(remaining);
 801af30:	4646      	mov	r6, r8
 801af32:	464f      	mov	r7, r9
 801af34:	e7c4      	b.n	801aec0 <net_buf_alloc_len+0x72>
				timeout = K_NO_WAIT;
 801af36:	2600      	movs	r6, #0
 801af38:	2700      	movs	r7, #0
 801af3a:	e7c1      	b.n	801aec0 <net_buf_alloc_len+0x72>
		}

		NET_BUF_ASSERT(req_size <= size);
	} else {
		buf->__buf = NULL;
 801af3c:	2300      	movs	r3, #0
 801af3e:	6123      	str	r3, [r4, #16]
	}

	buf->ref   = 1U;
 801af40:	2301      	movs	r3, #1
 801af42:	7123      	strb	r3, [r4, #4]
	buf->flags = 0U;
 801af44:	2300      	movs	r3, #0
 801af46:	7163      	strb	r3, [r4, #5]
	buf->frags = NULL;
 801af48:	6023      	str	r3, [r4, #0]
	buf->size  = size;
 801af4a:	9b01      	ldr	r3, [sp, #4]
 801af4c:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
 801af4e:	4620      	mov	r0, r4
 801af50:	f7ff ff78 	bl	801ae44 <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	pool->avail_count--;
	__ASSERT_NO_MSG(pool->avail_count >= 0);
#endif
	return buf;
}
 801af54:	4620      	mov	r0, r4
 801af56:	b003      	add	sp, #12
 801af58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801af5c <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool,
				    k_timeout_t timeout)
{
 801af5c:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
 801af5e:	6a01      	ldr	r1, [r0, #32]
 801af60:	6849      	ldr	r1, [r1, #4]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
 801af62:	6809      	ldr	r1, [r1, #0]
 801af64:	f7ff ff73 	bl	801ae4e <net_buf_alloc_len>
}
 801af68:	bd08      	pop	{r3, pc}

0801af6a <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
 801af6a:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
 801af6c:	4605      	mov	r5, r0
 801af6e:	f7f8 feef 	bl	8013d50 <z_impl_k_queue_get>
	if (!buf) {
 801af72:	4606      	mov	r6, r0
 801af74:	b190      	cbz	r0, 801af9c <net_buf_get+0x32>
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
 801af76:	4604      	mov	r4, r0
 801af78:	e00a      	b.n	801af90 <net_buf_get+0x26>
 801af7a:	2200      	movs	r2, #0
 801af7c:	2300      	movs	r3, #0
 801af7e:	4628      	mov	r0, r5
 801af80:	f7f8 fee6 	bl	8013d50 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
 801af84:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
 801af86:	7963      	ldrb	r3, [r4, #5]
 801af88:	f023 0301 	bic.w	r3, r3, #1
 801af8c:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
 801af8e:	4604      	mov	r4, r0
 801af90:	7963      	ldrb	r3, [r4, #5]
 801af92:	f013 0f01 	tst.w	r3, #1
 801af96:	d1f0      	bne.n	801af7a <net_buf_get+0x10>
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
 801af98:	2300      	movs	r3, #0
 801af9a:	6023      	str	r3, [r4, #0]

	return buf;
}
 801af9c:	4630      	mov	r0, r6
 801af9e:	bd70      	pop	{r4, r5, r6, pc}

0801afa0 <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
 801afa0:	6883      	ldr	r3, [r0, #8]
 801afa2:	440b      	add	r3, r1
 801afa4:	6003      	str	r3, [r0, #0]
}
 801afa6:	4770      	bx	lr

0801afa8 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
 801afa8:	b510      	push	{r4, lr}
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
	__ASSERT_NO_MSG(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
 801afaa:	460a      	mov	r2, r1
 801afac:	6814      	ldr	r4, [r2, #0]
 801afae:	b12c      	cbz	r4, 801afbc <net_buf_put+0x14>
		tail->flags |= NET_BUF_FRAGS;
 801afb0:	7953      	ldrb	r3, [r2, #5]
 801afb2:	f043 0301 	orr.w	r3, r3, #1
 801afb6:	7153      	strb	r3, [r2, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
 801afb8:	4622      	mov	r2, r4
 801afba:	e7f7      	b.n	801afac <net_buf_put+0x4>
	}

	k_fifo_put_list(fifo, buf, tail);
 801afbc:	f001 fd64 	bl	801ca88 <k_queue_append_list>
}
 801afc0:	bd10      	pop	{r4, pc}

0801afc2 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
 801afc2:	b538      	push	{r3, r4, r5, lr}
 801afc4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	while (buf) {
 801afc6:	e00f      	b.n	801afe8 <net_buf_unref+0x26>
		if (--buf->ref > 0) {
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
 801afc8:	4620      	mov	r0, r4
 801afca:	f7ff ff14 	bl	801adf6 <data_unref>
			buf->__buf = NULL;
 801afce:	2300      	movs	r3, #0
 801afd0:	6123      	str	r3, [r4, #16]
		}

		buf->data = NULL;
 801afd2:	2300      	movs	r3, #0
 801afd4:	60a3      	str	r3, [r4, #8]
		buf->frags = NULL;
 801afd6:	6023      	str	r3, [r4, #0]

		pool = net_buf_pool_get(buf->pool_id);
 801afd8:	79a0      	ldrb	r0, [r4, #6]
 801afda:	f7f7 fa49 	bl	8012470 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		__ASSERT_NO_MSG(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
 801afde:	69c3      	ldr	r3, [r0, #28]
 801afe0:	b16b      	cbz	r3, 801affe <net_buf_unref+0x3c>
			pool->destroy(buf);
 801afe2:	4620      	mov	r0, r4
 801afe4:	4798      	blx	r3
{
 801afe6:	462c      	mov	r4, r5
	while (buf) {
 801afe8:	b184      	cbz	r4, 801b00c <net_buf_unref+0x4a>
		struct net_buf *frags = buf->frags;
 801afea:	6825      	ldr	r5, [r4, #0]
		if (--buf->ref > 0) {
 801afec:	7923      	ldrb	r3, [r4, #4]
 801afee:	3b01      	subs	r3, #1
 801aff0:	b2db      	uxtb	r3, r3
 801aff2:	7123      	strb	r3, [r4, #4]
 801aff4:	b953      	cbnz	r3, 801b00c <net_buf_unref+0x4a>
		if (buf->__buf) {
 801aff6:	6921      	ldr	r1, [r4, #16]
 801aff8:	2900      	cmp	r1, #0
 801affa:	d1e5      	bne.n	801afc8 <net_buf_unref+0x6>
 801affc:	e7e9      	b.n	801afd2 <net_buf_unref+0x10>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 801affe:	79a0      	ldrb	r0, [r4, #6]
 801b000:	f7f7 fa36 	bl	8012470 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
 801b004:	4621      	mov	r1, r4
 801b006:	f001 fd38 	bl	801ca7a <k_queue_prepend>
}
 801b00a:	e7ec      	b.n	801afe6 <net_buf_unref+0x24>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
 801b00c:	bd38      	pop	{r3, r4, r5, pc}

0801b00e <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
 801b00e:	7902      	ldrb	r2, [r0, #4]
 801b010:	3201      	adds	r2, #1
 801b012:	7102      	strb	r2, [r0, #4]
	return buf;
}
 801b014:	4770      	bx	lr

0801b016 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
 801b016:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
 801b018:	4618      	mov	r0, r3
 801b01a:	681b      	ldr	r3, [r3, #0]
 801b01c:	2b00      	cmp	r3, #0
 801b01e:	d1fb      	bne.n	801b018 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
 801b020:	4770      	bx	lr

0801b022 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
 801b022:	b570      	push	{r4, r5, r6, lr}
 801b024:	4604      	mov	r4, r0
 801b026:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
 801b028:	6806      	ldr	r6, [r0, #0]
 801b02a:	b11e      	cbz	r6, 801b034 <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
 801b02c:	4608      	mov	r0, r1
 801b02e:	f7ff fff2 	bl	801b016 <net_buf_frag_last>
 801b032:	6006      	str	r6, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
 801b034:	6025      	str	r5, [r4, #0]
}
 801b036:	bd70      	pop	{r4, r5, r6, pc}

0801b038 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
 801b038:	b538      	push	{r3, r4, r5, lr}
 801b03a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(frag);

	if (!head) {
 801b03c:	b138      	cbz	r0, 801b04e <net_buf_frag_add+0x16>
 801b03e:	4604      	mov	r4, r0
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
 801b040:	f7ff ffe9 	bl	801b016 <net_buf_frag_last>
 801b044:	4629      	mov	r1, r5
 801b046:	f7ff ffec 	bl	801b022 <net_buf_frag_insert>

	return head;
 801b04a:	4620      	mov	r0, r4
}
 801b04c:	bd38      	pop	{r3, r4, r5, pc}
		return net_buf_ref(frag);
 801b04e:	4608      	mov	r0, r1
 801b050:	f7ff ffdd 	bl	801b00e <net_buf_ref>
 801b054:	e7fa      	b.n	801b04c <net_buf_frag_add+0x14>

0801b056 <net_buf_simple_add>:
	return buf->data + buf->len;
 801b056:	6802      	ldr	r2, [r0, #0]
 801b058:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
 801b05a:	4419      	add	r1, r3
 801b05c:	8081      	strh	r1, [r0, #4]
	return tail;
}
 801b05e:	18d0      	adds	r0, r2, r3
 801b060:	4770      	bx	lr

0801b062 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
 801b062:	b538      	push	{r3, r4, r5, lr}
 801b064:	460d      	mov	r5, r1
 801b066:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
 801b068:	4611      	mov	r1, r2
 801b06a:	f7ff fff4 	bl	801b056 <net_buf_simple_add>
 801b06e:	4622      	mov	r2, r4
 801b070:	4629      	mov	r1, r5
 801b072:	f7fc ff03 	bl	8017e7c <memcpy>
}
 801b076:	bd38      	pop	{r3, r4, r5, pc}

0801b078 <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
 801b078:	b510      	push	{r4, lr}
 801b07a:	460c      	mov	r4, r1
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
 801b07c:	2101      	movs	r1, #1
 801b07e:	f7ff ffea 	bl	801b056 <net_buf_simple_add>
	*u8 = val;
 801b082:	7004      	strb	r4, [r0, #0]

	return u8;
}
 801b084:	bd10      	pop	{r4, pc}

0801b086 <net_buf_simple_push>:

	sys_put_be64(val, net_buf_simple_add(buf, sizeof(val)));
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
 801b086:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
 801b088:	6800      	ldr	r0, [r0, #0]
 801b08a:	1a40      	subs	r0, r0, r1
 801b08c:	6018      	str	r0, [r3, #0]
	buf->len += len;
 801b08e:	889a      	ldrh	r2, [r3, #4]
 801b090:	4411      	add	r1, r2
 801b092:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
 801b094:	4770      	bx	lr

0801b096 <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
 801b096:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
 801b098:	8882      	ldrh	r2, [r0, #4]
 801b09a:	1a52      	subs	r2, r2, r1
 801b09c:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
 801b09e:	6800      	ldr	r0, [r0, #0]
 801b0a0:	4408      	add	r0, r1
 801b0a2:	6018      	str	r0, [r3, #0]
}
 801b0a4:	4770      	bx	lr

0801b0a6 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
 801b0a6:	4603      	mov	r3, r0
	void *data = buf->data;
 801b0a8:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
 801b0aa:	889a      	ldrh	r2, [r3, #4]
 801b0ac:	1a52      	subs	r2, r2, r1
 801b0ae:	809a      	strh	r2, [r3, #4]
	buf->data += len;
 801b0b0:	4401      	add	r1, r0
 801b0b2:	6019      	str	r1, [r3, #0]

	return data;
}
 801b0b4:	4770      	bx	lr

0801b0b6 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
 801b0b6:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
 801b0b8:	6803      	ldr	r3, [r0, #0]
 801b0ba:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
 801b0bc:	2102      	movs	r1, #2
 801b0be:	f7ff ffea 	bl	801b096 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
 801b0c2:	4620      	mov	r0, r4
 801b0c4:	bd10      	pop	{r4, pc}

0801b0c6 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
 801b0c6:	6802      	ldr	r2, [r0, #0]
 801b0c8:	6880      	ldr	r0, [r0, #8]
}
 801b0ca:	1a10      	subs	r0, r2, r0
 801b0cc:	4770      	bx	lr

0801b0ce <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
 801b0ce:	b538      	push	{r3, r4, r5, lr}
 801b0d0:	4604      	mov	r4, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
 801b0d2:	88c5      	ldrh	r5, [r0, #6]
 801b0d4:	f7ff fff7 	bl	801b0c6 <net_buf_simple_headroom>
 801b0d8:	1a2d      	subs	r5, r5, r0
 801b0da:	88a0      	ldrh	r0, [r4, #4]
}
 801b0dc:	1a28      	subs	r0, r5, r0
 801b0de:	bd38      	pop	{r3, r4, r5, pc}

0801b0e0 <hid_on_get_idle>:
}
 801b0e0:	f06f 0022 	mvn.w	r0, #34	; 0x22
 801b0e4:	4770      	bx	lr

0801b0e6 <hid_on_get_report>:
}
 801b0e6:	f06f 0022 	mvn.w	r0, #34	; 0x22
 801b0ea:	4770      	bx	lr

0801b0ec <hid_on_get_protocol>:
}
 801b0ec:	f06f 0022 	mvn.w	r0, #34	; 0x22
 801b0f0:	4770      	bx	lr

0801b0f2 <hid_on_set_idle>:
}
 801b0f2:	f06f 0022 	mvn.w	r0, #34	; 0x22
 801b0f6:	4770      	bx	lr

0801b0f8 <hid_on_set_report>:
}
 801b0f8:	f06f 0022 	mvn.w	r0, #34	; 0x22
 801b0fc:	4770      	bx	lr

0801b0fe <hid_on_set_protocol>:
}
 801b0fe:	f06f 0022 	mvn.w	r0, #34	; 0x22
 801b102:	4770      	bx	lr

0801b104 <usb_set_hid_report_size>:
	struct usb_if_descriptor *if_desc = (void *)cfg->interface_descriptor;
 801b104:	6843      	ldr	r3, [r0, #4]
	dst[0] = val;
 801b106:	7419      	strb	r1, [r3, #16]
	dst[1] = val >> 8;
 801b108:	0a09      	lsrs	r1, r1, #8
 801b10a:	7459      	strb	r1, [r3, #17]
}
 801b10c:	4770      	bx	lr

0801b10e <hid_interface_config>:
	desc->if0.bInterfaceNumber = bInterfaceNumber;
 801b10e:	7081      	strb	r1, [r0, #2]
}
 801b110:	4770      	bx	lr

0801b112 <usb_hid_device_init>:
static int usb_hid_device_init(const struct device *dev)
{
	LOG_DBG("Init HID Device: dev %p (%s)", dev, dev->name);

	return 0;
}
 801b112:	2000      	movs	r0, #0
 801b114:	4770      	bx	lr

0801b116 <usb_hid_init>:
{
 801b116:	b508      	push	{r3, lr}
	struct hid_device_info *dev_data = dev->data;
 801b118:	68c3      	ldr	r3, [r0, #12]
	usb_set_hid_report_size(cfg, dev_data->report_size);
 801b11a:	8899      	ldrh	r1, [r3, #4]
 801b11c:	6840      	ldr	r0, [r0, #4]
 801b11e:	f7ff fff1 	bl	801b104 <usb_set_hid_report_size>
}
 801b122:	2000      	movs	r0, #0
 801b124:	bd08      	pop	{r3, pc}

0801b126 <gpio_stm32_isr>:
{
 801b126:	b570      	push	{r4, r5, r6, lr}
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 801b128:	684e      	ldr	r6, [r1, #4]
 801b12a:	2501      	movs	r5, #1
 801b12c:	4085      	lsls	r5, r0
	return list->head;
 801b12e:	6889      	ldr	r1, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 801b130:	b119      	cbz	r1, 801b13a <gpio_stm32_isr+0x14>
 801b132:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
 801b134:	b149      	cbz	r1, 801b14a <gpio_stm32_isr+0x24>
	return node->next;
 801b136:	680c      	ldr	r4, [r1, #0]
 801b138:	e007      	b.n	801b14a <gpio_stm32_isr+0x24>
 801b13a:	460c      	mov	r4, r1
 801b13c:	e005      	b.n	801b14a <gpio_stm32_isr+0x24>
 801b13e:	b164      	cbz	r4, 801b15a <gpio_stm32_isr+0x34>
 801b140:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 801b142:	b104      	cbz	r4, 801b146 <gpio_stm32_isr+0x20>
	return node->next;
 801b144:	6823      	ldr	r3, [r4, #0]
 801b146:	4621      	mov	r1, r4
 801b148:	461c      	mov	r4, r3
 801b14a:	b141      	cbz	r1, 801b15e <gpio_stm32_isr+0x38>
		if (cb->pin_mask & pins) {
 801b14c:	688a      	ldr	r2, [r1, #8]
 801b14e:	402a      	ands	r2, r5
 801b150:	d0f5      	beq.n	801b13e <gpio_stm32_isr+0x18>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 801b152:	684b      	ldr	r3, [r1, #4]
 801b154:	4630      	mov	r0, r6
 801b156:	4798      	blx	r3
 801b158:	e7f1      	b.n	801b13e <gpio_stm32_isr+0x18>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 801b15a:	4623      	mov	r3, r4
 801b15c:	e7f3      	b.n	801b146 <gpio_stm32_isr+0x20>
}
 801b15e:	bd70      	pop	{r4, r5, r6, pc}

0801b160 <gpio_stm32_flags_to_conf>:
	if ((flags & GPIO_OUTPUT) != 0) {
 801b160:	f410 7f00 	tst.w	r0, #512	; 0x200
 801b164:	d01b      	beq.n	801b19e <gpio_stm32_flags_to_conf+0x3e>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 801b166:	2310      	movs	r3, #16
 801b168:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 801b16a:	f010 0f02 	tst.w	r0, #2
 801b16e:	d004      	beq.n	801b17a <gpio_stm32_flags_to_conf+0x1a>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 801b170:	f010 0f04 	tst.w	r0, #4
 801b174:	d02c      	beq.n	801b1d0 <gpio_stm32_flags_to_conf+0x70>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 801b176:	2350      	movs	r3, #80	; 0x50
 801b178:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_PULL_UP) != 0) {
 801b17a:	f010 0310 	ands.w	r3, r0, #16
 801b17e:	d005      	beq.n	801b18c <gpio_stm32_flags_to_conf+0x2c>
			*pincfg |= STM32_PINCFG_PULL_UP;
 801b180:	680b      	ldr	r3, [r1, #0]
 801b182:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801b186:	600b      	str	r3, [r1, #0]
	return 0;
 801b188:	2000      	movs	r0, #0
 801b18a:	4770      	bx	lr
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 801b18c:	f010 0020 	ands.w	r0, r0, #32
 801b190:	d020      	beq.n	801b1d4 <gpio_stm32_flags_to_conf+0x74>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 801b192:	680a      	ldr	r2, [r1, #0]
 801b194:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801b198:	600a      	str	r2, [r1, #0]
	return 0;
 801b19a:	4618      	mov	r0, r3
 801b19c:	4770      	bx	lr
	} else if  ((flags & GPIO_INPUT) != 0) {
 801b19e:	f410 7f80 	tst.w	r0, #256	; 0x100
 801b1a2:	d011      	beq.n	801b1c8 <gpio_stm32_flags_to_conf+0x68>
		*pincfg = STM32_PINCFG_MODE_INPUT;
 801b1a4:	2300      	movs	r3, #0
 801b1a6:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_PULL_UP) != 0) {
 801b1a8:	f010 0310 	ands.w	r3, r0, #16
 801b1ac:	d004      	beq.n	801b1b8 <gpio_stm32_flags_to_conf+0x58>
			*pincfg |= STM32_PINCFG_PULL_UP;
 801b1ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 801b1b2:	600b      	str	r3, [r1, #0]
	return 0;
 801b1b4:	2000      	movs	r0, #0
 801b1b6:	4770      	bx	lr
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 801b1b8:	f010 0020 	ands.w	r0, r0, #32
 801b1bc:	d00a      	beq.n	801b1d4 <gpio_stm32_flags_to_conf+0x74>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 801b1be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801b1c2:	600a      	str	r2, [r1, #0]
	return 0;
 801b1c4:	4618      	mov	r0, r3
 801b1c6:	4770      	bx	lr
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 801b1c8:	2330      	movs	r3, #48	; 0x30
 801b1ca:	600b      	str	r3, [r1, #0]
	return 0;
 801b1cc:	2000      	movs	r0, #0
 801b1ce:	4770      	bx	lr
				return -ENOTSUP;
 801b1d0:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 801b1d4:	4770      	bx	lr

0801b1d6 <gpio_stm32_port_get_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 801b1d6:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801b1d8:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 801b1da:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 801b1dc:	600b      	str	r3, [r1, #0]
}
 801b1de:	2000      	movs	r0, #0
 801b1e0:	4770      	bx	lr

0801b1e2 <gpio_stm32_port_set_masked_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 801b1e2:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801b1e4:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 801b1e6:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 801b1e8:	4042      	eors	r2, r0
 801b1ea:	400a      	ands	r2, r1
 801b1ec:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 801b1ee:	615a      	str	r2, [r3, #20]
}
 801b1f0:	2000      	movs	r0, #0
 801b1f2:	4770      	bx	lr

0801b1f4 <gpio_stm32_port_set_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 801b1f4:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801b1f6:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 801b1f8:	6199      	str	r1, [r3, #24]
}
 801b1fa:	2000      	movs	r0, #0
 801b1fc:	4770      	bx	lr

0801b1fe <gpio_stm32_port_clear_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 801b1fe:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801b200:	685b      	ldr	r3, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 801b202:	6299      	str	r1, [r3, #40]	; 0x28
}
 801b204:	2000      	movs	r0, #0
 801b206:	4770      	bx	lr

0801b208 <gpio_stm32_port_toggle_bits>:
	const struct gpio_stm32_config *cfg = dev->config;
 801b208:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801b20a:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 801b20c:	6953      	ldr	r3, [r2, #20]
 801b20e:	404b      	eors	r3, r1
 801b210:	6153      	str	r3, [r2, #20]
}
 801b212:	2000      	movs	r0, #0
 801b214:	4770      	bx	lr

0801b216 <gpio_stm32_manage_callback>:
{
 801b216:	b470      	push	{r4, r5, r6}
	struct gpio_stm32_data *data = dev->data;
 801b218:	68c0      	ldr	r0, [r0, #12]
	return gpio_manage_callback(&data->cb, callback, set);
 801b21a:	f100 0508 	add.w	r5, r0, #8
	return list->head;
 801b21e:	6883      	ldr	r3, [r0, #8]
	if (!sys_slist_is_empty(callbacks)) {
 801b220:	b1db      	cbz	r3, 801b25a <gpio_stm32_manage_callback+0x44>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
 801b222:	460e      	mov	r6, r1
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 801b224:	2400      	movs	r4, #0
 801b226:	e00a      	b.n	801b23e <gpio_stm32_manage_callback+0x28>
	return node->next;
 801b228:	680b      	ldr	r3, [r1, #0]
	list->head = node;
 801b22a:	6083      	str	r3, [r0, #8]
	return list->tail;
 801b22c:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
 801b22e:	42a1      	cmp	r1, r4
 801b230:	d10f      	bne.n	801b252 <gpio_stm32_manage_callback+0x3c>
	list->tail = node;
 801b232:	606b      	str	r3, [r5, #4]
}
 801b234:	e00d      	b.n	801b252 <gpio_stm32_manage_callback+0x3c>
	list->tail = node;
 801b236:	606c      	str	r4, [r5, #4]
}
 801b238:	e00b      	b.n	801b252 <gpio_stm32_manage_callback+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 801b23a:	461c      	mov	r4, r3
 801b23c:	681b      	ldr	r3, [r3, #0]
 801b23e:	b15b      	cbz	r3, 801b258 <gpio_stm32_manage_callback+0x42>
 801b240:	429e      	cmp	r6, r3
 801b242:	d1fa      	bne.n	801b23a <gpio_stm32_manage_callback+0x24>
Z_GENLIST_REMOVE(slist, snode)
 801b244:	2c00      	cmp	r4, #0
 801b246:	d0ef      	beq.n	801b228 <gpio_stm32_manage_callback+0x12>
	return node->next;
 801b248:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
 801b24a:	6023      	str	r3, [r4, #0]
	return list->tail;
 801b24c:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
 801b24e:	4299      	cmp	r1, r3
 801b250:	d0f1      	beq.n	801b236 <gpio_stm32_manage_callback+0x20>
	parent->next = child;
 801b252:	2300      	movs	r3, #0
 801b254:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 801b256:	e000      	b.n	801b25a <gpio_stm32_manage_callback+0x44>
			if (!set) {
 801b258:	b152      	cbz	r2, 801b270 <gpio_stm32_manage_callback+0x5a>
	if (set) {
 801b25a:	b162      	cbz	r2, 801b276 <gpio_stm32_manage_callback+0x60>
	return list->head;
 801b25c:	6883      	ldr	r3, [r0, #8]
	parent->next = child;
 801b25e:	600b      	str	r3, [r1, #0]
	list->head = node;
 801b260:	6081      	str	r1, [r0, #8]
	return list->tail;
 801b262:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
 801b264:	b10b      	cbz	r3, 801b26a <gpio_stm32_manage_callback+0x54>
	return 0;
 801b266:	2000      	movs	r0, #0
 801b268:	e006      	b.n	801b278 <gpio_stm32_manage_callback+0x62>
	list->tail = node;
 801b26a:	6069      	str	r1, [r5, #4]
 801b26c:	2000      	movs	r0, #0
}
 801b26e:	e003      	b.n	801b278 <gpio_stm32_manage_callback+0x62>
				return -EINVAL;
 801b270:	f06f 0015 	mvn.w	r0, #21
 801b274:	e000      	b.n	801b278 <gpio_stm32_manage_callback+0x62>
	return 0;
 801b276:	2000      	movs	r0, #0
}
 801b278:	bc70      	pop	{r4, r5, r6}
 801b27a:	4770      	bx	lr

0801b27c <gpio_stm32_configure>:
{
 801b27c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b27e:	460f      	mov	r7, r1
	pinval = 1 << pin;
 801b280:	2401      	movs	r4, #1
 801b282:	408c      	lsls	r4, r1
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 801b284:	f002 0130 	and.w	r1, r2, #48	; 0x30
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 801b288:	f3c2 1c01 	ubfx	ip, r2, #4, #2
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 801b28c:	6805      	ldr	r5, [r0, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801b28e:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 801b292:	2e00      	cmp	r6, #0
 801b294:	d053      	beq.n	801b33e <gpio_stm32_configure+0xc2>
  return __builtin_clz(value);
 801b296:	fab6 f686 	clz	r6, r6
 801b29a:	0076      	lsls	r6, r6, #1
 801b29c:	f04f 0e03 	mov.w	lr, #3
 801b2a0:	fa0e f606 	lsl.w	r6, lr, r6
 801b2a4:	ea25 0606 	bic.w	r6, r5, r6
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801b2a8:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 801b2ac:	2d00      	cmp	r5, #0
 801b2ae:	d048      	beq.n	801b342 <gpio_stm32_configure+0xc6>
  return __builtin_clz(value);
 801b2b0:	fab5 f585 	clz	r5, r5
 801b2b4:	006d      	lsls	r5, r5, #1
 801b2b6:	fa0c f505 	lsl.w	r5, ip, r5
 801b2ba:	4335      	orrs	r5, r6
 801b2bc:	6005      	str	r5, [r0, #0]
	if (STM32_MODER_ALT_MODE == mode) {
 801b2be:	2920      	cmp	r1, #32
 801b2c0:	d041      	beq.n	801b346 <gpio_stm32_configure+0xca>
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 801b2c2:	f3c2 1180 	ubfx	r1, r2, #6, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 801b2c6:	6843      	ldr	r3, [r0, #4]
 801b2c8:	ea23 0304 	bic.w	r3, r3, r4
 801b2cc:	40b9      	lsls	r1, r7
 801b2ce:	4319      	orrs	r1, r3
 801b2d0:	6041      	str	r1, [r0, #4]
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 801b2d2:	f3c2 15c1 	ubfx	r5, r2, #7, #2
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 801b2d6:	6883      	ldr	r3, [r0, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801b2d8:	fa94 f1a4 	rbit	r1, r4
  if (value == 0U)
 801b2dc:	2900      	cmp	r1, #0
 801b2de:	d06a      	beq.n	801b3b6 <gpio_stm32_configure+0x13a>
  return __builtin_clz(value);
 801b2e0:	fab1 f181 	clz	r1, r1
 801b2e4:	0049      	lsls	r1, r1, #1
 801b2e6:	2603      	movs	r6, #3
 801b2e8:	fa06 f101 	lsl.w	r1, r6, r1
 801b2ec:	ea23 0101 	bic.w	r1, r3, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801b2f0:	fa94 f3a4 	rbit	r3, r4
  if (value == 0U)
 801b2f4:	2b00      	cmp	r3, #0
 801b2f6:	d060      	beq.n	801b3ba <gpio_stm32_configure+0x13e>
  return __builtin_clz(value);
 801b2f8:	fab3 f383 	clz	r3, r3
 801b2fc:	005b      	lsls	r3, r3, #1
 801b2fe:	fa05 f303 	lsl.w	r3, r5, r3
 801b302:	430b      	orrs	r3, r1
 801b304:	6083      	str	r3, [r0, #8]
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 801b306:	f3c2 2241 	ubfx	r2, r2, #9, #2
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 801b30a:	68c1      	ldr	r1, [r0, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801b30c:	fa94 f3a4 	rbit	r3, r4
  if (value == 0U)
 801b310:	2b00      	cmp	r3, #0
 801b312:	d054      	beq.n	801b3be <gpio_stm32_configure+0x142>
  return __builtin_clz(value);
 801b314:	fab3 f383 	clz	r3, r3
 801b318:	005b      	lsls	r3, r3, #1
 801b31a:	2503      	movs	r5, #3
 801b31c:	fa05 f303 	lsl.w	r3, r5, r3
 801b320:	ea21 0303 	bic.w	r3, r1, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801b324:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 801b328:	2c00      	cmp	r4, #0
 801b32a:	d04a      	beq.n	801b3c2 <gpio_stm32_configure+0x146>
  return __builtin_clz(value);
 801b32c:	fab4 f484 	clz	r4, r4
 801b330:	0064      	lsls	r4, r4, #1
 801b332:	fa02 f404 	lsl.w	r4, r2, r4
 801b336:	431c      	orrs	r4, r3
 801b338:	60c4      	str	r4, [r0, #12]
}
 801b33a:	2000      	movs	r0, #0
 801b33c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 801b33e:	2620      	movs	r6, #32
 801b340:	e7ab      	b.n	801b29a <gpio_stm32_configure+0x1e>
 801b342:	2520      	movs	r5, #32
 801b344:	e7b6      	b.n	801b2b4 <gpio_stm32_configure+0x38>
		if (pin < 8) {
 801b346:	2f07      	cmp	r7, #7
 801b348:	dc19      	bgt.n	801b37e <gpio_stm32_configure+0x102>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 801b34a:	6a05      	ldr	r5, [r0, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801b34c:	fa94 f1a4 	rbit	r1, r4
  if (value == 0U)
 801b350:	b189      	cbz	r1, 801b376 <gpio_stm32_configure+0xfa>
  return __builtin_clz(value);
 801b352:	fab1 f181 	clz	r1, r1
 801b356:	0089      	lsls	r1, r1, #2
 801b358:	260f      	movs	r6, #15
 801b35a:	fa06 f101 	lsl.w	r1, r6, r1
 801b35e:	ea25 0501 	bic.w	r5, r5, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801b362:	fa94 f1a4 	rbit	r1, r4
  if (value == 0U)
 801b366:	b141      	cbz	r1, 801b37a <gpio_stm32_configure+0xfe>
  return __builtin_clz(value);
 801b368:	fab1 f181 	clz	r1, r1
 801b36c:	0089      	lsls	r1, r1, #2
 801b36e:	408b      	lsls	r3, r1
 801b370:	432b      	orrs	r3, r5
 801b372:	6203      	str	r3, [r0, #32]
}
 801b374:	e7a5      	b.n	801b2c2 <gpio_stm32_configure+0x46>
    return 32U;
 801b376:	2120      	movs	r1, #32
 801b378:	e7ed      	b.n	801b356 <gpio_stm32_configure+0xda>
 801b37a:	2120      	movs	r1, #32
 801b37c:	e7f6      	b.n	801b36c <gpio_stm32_configure+0xf0>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 801b37e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801b380:	0a21      	lsrs	r1, r4, #8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801b382:	fa91 f5a1 	rbit	r5, r1
  if (value == 0U)
 801b386:	b195      	cbz	r5, 801b3ae <gpio_stm32_configure+0x132>
  return __builtin_clz(value);
 801b388:	fab5 f585 	clz	r5, r5
 801b38c:	00ad      	lsls	r5, r5, #2
 801b38e:	f04f 0c0f 	mov.w	ip, #15
 801b392:	fa0c f505 	lsl.w	r5, ip, r5
 801b396:	ea26 0505 	bic.w	r5, r6, r5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801b39a:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 801b39e:	b141      	cbz	r1, 801b3b2 <gpio_stm32_configure+0x136>
  return __builtin_clz(value);
 801b3a0:	fab1 f181 	clz	r1, r1
 801b3a4:	0089      	lsls	r1, r1, #2
 801b3a6:	408b      	lsls	r3, r1
 801b3a8:	432b      	orrs	r3, r5
 801b3aa:	6243      	str	r3, [r0, #36]	; 0x24
}
 801b3ac:	e789      	b.n	801b2c2 <gpio_stm32_configure+0x46>
    return 32U;
 801b3ae:	2520      	movs	r5, #32
 801b3b0:	e7ec      	b.n	801b38c <gpio_stm32_configure+0x110>
 801b3b2:	2120      	movs	r1, #32
 801b3b4:	e7f6      	b.n	801b3a4 <gpio_stm32_configure+0x128>
 801b3b6:	2120      	movs	r1, #32
 801b3b8:	e794      	b.n	801b2e4 <gpio_stm32_configure+0x68>
 801b3ba:	2320      	movs	r3, #32
 801b3bc:	e79e      	b.n	801b2fc <gpio_stm32_configure+0x80>
 801b3be:	2320      	movs	r3, #32
 801b3c0:	e7aa      	b.n	801b318 <gpio_stm32_configure+0x9c>
 801b3c2:	2420      	movs	r4, #32
 801b3c4:	e7b4      	b.n	801b330 <gpio_stm32_configure+0xb4>

0801b3c6 <gpio_stm32_config>:
{
 801b3c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b3ca:	b082      	sub	sp, #8
 801b3cc:	4605      	mov	r5, r0
 801b3ce:	460f      	mov	r7, r1
 801b3d0:	4614      	mov	r4, r2
	const struct gpio_stm32_config *cfg = dev->config;
 801b3d2:	f8d0 8004 	ldr.w	r8, [r0, #4]
	err = gpio_stm32_flags_to_conf(flags, &pincfg);
 801b3d6:	a901      	add	r1, sp, #4
 801b3d8:	4610      	mov	r0, r2
 801b3da:	f7ff fec1 	bl	801b160 <gpio_stm32_flags_to_conf>
	if (err != 0) {
 801b3de:	4606      	mov	r6, r0
 801b3e0:	b978      	cbnz	r0, 801b402 <gpio_stm32_config+0x3c>
	if ((flags & GPIO_OUTPUT) != 0) {
 801b3e2:	f414 7f00 	tst.w	r4, #512	; 0x200
 801b3e6:	d005      	beq.n	801b3f4 <gpio_stm32_config+0x2e>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 801b3e8:	f414 6f00 	tst.w	r4, #2048	; 0x800
 801b3ec:	d10d      	bne.n	801b40a <gpio_stm32_config+0x44>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 801b3ee:	f414 6f80 	tst.w	r4, #1024	; 0x400
 801b3f2:	d110      	bne.n	801b416 <gpio_stm32_config+0x50>
	gpio_stm32_configure(cfg->base, pin, pincfg, 0);
 801b3f4:	2300      	movs	r3, #0
 801b3f6:	9a01      	ldr	r2, [sp, #4]
 801b3f8:	4639      	mov	r1, r7
 801b3fa:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801b3fe:	f7ff ff3d 	bl	801b27c <gpio_stm32_configure>
}
 801b402:	4630      	mov	r0, r6
 801b404:	b002      	add	sp, #8
 801b406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 801b40a:	2101      	movs	r1, #1
 801b40c:	40b9      	lsls	r1, r7
 801b40e:	4628      	mov	r0, r5
 801b410:	f7ff fef0 	bl	801b1f4 <gpio_stm32_port_set_bits_raw>
 801b414:	e7ee      	b.n	801b3f4 <gpio_stm32_config+0x2e>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 801b416:	2101      	movs	r1, #1
 801b418:	40b9      	lsls	r1, r7
 801b41a:	4628      	mov	r0, r5
 801b41c:	f7ff feef 	bl	801b1fe <gpio_stm32_port_clear_bits_raw>
 801b420:	e7e8      	b.n	801b3f4 <gpio_stm32_config+0x2e>

0801b422 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
 801b422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b426:	b082      	sub	sp, #8
 801b428:	460e      	mov	r6, r1
 801b42a:	4617      	mov	r7, r2
 801b42c:	4698      	mov	r8, r3
	const struct flash_driver_api *api = dev->api;
 801b42e:	6883      	ldr	r3, [r0, #8]
	off_t group_offs = 0;
	uint32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
 801b430:	695b      	ldr	r3, [r3, #20]
 801b432:	466a      	mov	r2, sp
 801b434:	a901      	add	r1, sp, #4
 801b436:	4798      	blx	r3
	off_t end = 0;
 801b438:	2400      	movs	r4, #0
	off_t group_offs = 0;
 801b43a:	46a4      	mov	ip, r4
	size_t page_count = 0;
 801b43c:	4623      	mov	r3, r4

	while (layout_size--) {
 801b43e:	e00c      	b.n	801b45a <flash_get_page_info+0x38>
		if (use_addr) {
			end += layout->pages_count * layout->pages_size;
		} else {
			end += layout->pages_count;
 801b440:	9a01      	ldr	r2, [sp, #4]
 801b442:	6812      	ldr	r2, [r2, #0]
 801b444:	4414      	add	r4, r2
		}

		if (offs < end) {
 801b446:	42b4      	cmp	r4, r6
 801b448:	dc13      	bgt.n	801b472 <flash_get_page_info+0x50>
			info->index = page_count + num_in_group;

			return 0;
		}

		group_offs += layout->pages_count * layout->pages_size;
 801b44a:	9801      	ldr	r0, [sp, #4]
 801b44c:	6805      	ldr	r5, [r0, #0]
 801b44e:	6842      	ldr	r2, [r0, #4]
 801b450:	fb02 cc05 	mla	ip, r2, r5, ip
		page_count += layout->pages_count;
 801b454:	442b      	add	r3, r5

		layout++;
 801b456:	3008      	adds	r0, #8
 801b458:	9001      	str	r0, [sp, #4]
	while (layout_size--) {
 801b45a:	9800      	ldr	r0, [sp, #0]
 801b45c:	1e42      	subs	r2, r0, #1
 801b45e:	9200      	str	r2, [sp, #0]
 801b460:	b1e8      	cbz	r0, 801b49e <flash_get_page_info+0x7c>
		if (use_addr) {
 801b462:	2f00      	cmp	r7, #0
 801b464:	d0ec      	beq.n	801b440 <flash_get_page_info+0x1e>
			end += layout->pages_count * layout->pages_size;
 801b466:	9a01      	ldr	r2, [sp, #4]
 801b468:	6811      	ldr	r1, [r2, #0]
 801b46a:	6852      	ldr	r2, [r2, #4]
 801b46c:	fb02 4401 	mla	r4, r2, r1, r4
 801b470:	e7e9      	b.n	801b446 <flash_get_page_info+0x24>
			info->size = layout->pages_size;
 801b472:	9a01      	ldr	r2, [sp, #4]
 801b474:	6851      	ldr	r1, [r2, #4]
 801b476:	f8c8 1004 	str.w	r1, [r8, #4]
			if (use_addr) {
 801b47a:	b177      	cbz	r7, 801b49a <flash_get_page_info+0x78>
				num_in_group = (offs - group_offs) /
 801b47c:	eba6 060c 	sub.w	r6, r6, ip
					       layout->pages_size;
 801b480:	6851      	ldr	r1, [r2, #4]
				num_in_group = (offs - group_offs) /
 801b482:	fbb6 f6f1 	udiv	r6, r6, r1
					     num_in_group * layout->pages_size;
 801b486:	6852      	ldr	r2, [r2, #4]
			info->start_offset = group_offs +
 801b488:	fb06 c202 	mla	r2, r6, r2, ip
 801b48c:	f8c8 2000 	str.w	r2, [r8]
			info->index = page_count + num_in_group;
 801b490:	4433      	add	r3, r6
 801b492:	f8c8 3008 	str.w	r3, [r8, #8]
			return 0;
 801b496:	2000      	movs	r0, #0
 801b498:	e003      	b.n	801b4a2 <flash_get_page_info+0x80>
				num_in_group = offs - page_count;
 801b49a:	1af6      	subs	r6, r6, r3
 801b49c:	e7f3      	b.n	801b486 <flash_get_page_info+0x64>
	}

	return -EINVAL; /* page of the index doesn't exist */
 801b49e:	f06f 0015 	mvn.w	r0, #21
}
 801b4a2:	b002      	add	sp, #8
 801b4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b4a8 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
 801b4a8:	b508      	push	{r3, lr}
 801b4aa:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, true, info);
 801b4ac:	2201      	movs	r2, #1
 801b4ae:	f7ff ffb8 	bl	801b422 <flash_get_page_info>
}
 801b4b2:	bd08      	pop	{r3, pc}

0801b4b4 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
 801b4b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b4b8:	b086      	sub	sp, #24
 801b4ba:	4689      	mov	r9, r1
 801b4bc:	4690      	mov	r8, r2
	const struct flash_driver_api *api = dev->api;
 801b4be:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
 801b4c0:	695b      	ldr	r3, [r3, #20]
 801b4c2:	aa01      	add	r2, sp, #4
 801b4c4:	a905      	add	r1, sp, #20
 801b4c6:	4798      	blx	r3
	off_t off = 0;
 801b4c8:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
 801b4ca:	4626      	mov	r6, r4

	for (block = 0; block < num_blocks; block++) {
 801b4cc:	46a2      	mov	sl, r4
 801b4ce:	9b01      	ldr	r3, [sp, #4]
 801b4d0:	4553      	cmp	r3, sl
 801b4d2:	d916      	bls.n	801b502 <flash_page_foreach+0x4e>
		const struct flash_pages_layout *l = &layout[block];
 801b4d4:	9f05      	ldr	r7, [sp, #20]
 801b4d6:	eb07 07ca 	add.w	r7, r7, sl, lsl #3
		page_info.size = l->pages_size;
 801b4da:	687b      	ldr	r3, [r7, #4]
 801b4dc:	9303      	str	r3, [sp, #12]

		for (i = 0; i < l->pages_count; i++) {
 801b4de:	2500      	movs	r5, #0
 801b4e0:	683b      	ldr	r3, [r7, #0]
 801b4e2:	42ab      	cmp	r3, r5
 801b4e4:	d90a      	bls.n	801b4fc <flash_page_foreach+0x48>
			page_info.start_offset = off;
 801b4e6:	9402      	str	r4, [sp, #8]
			page_info.index = page;
 801b4e8:	9604      	str	r6, [sp, #16]

			if (!cb(&page_info, data)) {
 801b4ea:	4641      	mov	r1, r8
 801b4ec:	a802      	add	r0, sp, #8
 801b4ee:	47c8      	blx	r9
 801b4f0:	b138      	cbz	r0, 801b502 <flash_page_foreach+0x4e>
				return;
			}

			off += page_info.size;
 801b4f2:	9b03      	ldr	r3, [sp, #12]
 801b4f4:	441c      	add	r4, r3
			page++;
 801b4f6:	3601      	adds	r6, #1
		for (i = 0; i < l->pages_count; i++) {
 801b4f8:	3501      	adds	r5, #1
 801b4fa:	e7f1      	b.n	801b4e0 <flash_page_foreach+0x2c>
	for (block = 0; block < num_blocks; block++) {
 801b4fc:	f10a 0a01 	add.w	sl, sl, #1
 801b500:	e7e5      	b.n	801b4ce <flash_page_foreach+0x1a>
		}
	}
}
 801b502:	b006      	add	sp, #24
 801b504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801b508 <HAL_PCD_MspInit>:
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_MspInit could be implemented in the user file
   */
}
 801b508:	4770      	bx	lr

0801b50a <HAL_PCD_Init>:
  if (hpcd == NULL)
 801b50a:	2800      	cmp	r0, #0
 801b50c:	d053      	beq.n	801b5b6 <HAL_PCD_Init+0xac>
{
 801b50e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b510:	b087      	sub	sp, #28
 801b512:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 801b514:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 801b518:	b1e3      	cbz	r3, 801b554 <HAL_PCD_Init+0x4a>
  hpcd->State = HAL_PCD_STATE_BUSY;
 801b51a:	2303      	movs	r3, #3
 801b51c:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  __HAL_PCD_DISABLE(hpcd);
 801b520:	6820      	ldr	r0, [r4, #0]
 801b522:	f000 fc17 	bl	801bd54 <USB_DisableGlobalInt>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801b526:	2300      	movs	r3, #0
 801b528:	6860      	ldr	r0, [r4, #4]
 801b52a:	4283      	cmp	r3, r0
 801b52c:	d217      	bcs.n	801b55e <HAL_PCD_Init+0x54>
    hpcd->IN_ep[i].is_in = 1U;
 801b52e:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 801b532:	2101      	movs	r1, #1
 801b534:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 801b538:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 801b53c:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 801b53e:	2100      	movs	r1, #0
 801b540:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 801b544:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 801b546:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 801b548:	1c9a      	adds	r2, r3, #2
 801b54a:	0152      	lsls	r2, r2, #5
 801b54c:	50a1      	str	r1, [r4, r2]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801b54e:	3301      	adds	r3, #1
 801b550:	b2db      	uxtb	r3, r3
 801b552:	e7e9      	b.n	801b528 <HAL_PCD_Init+0x1e>
    hpcd->Lock = HAL_UNLOCKED;
 801b554:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
    HAL_PCD_MspInit(hpcd);
 801b558:	f7ff ffd6 	bl	801b508 <HAL_PCD_MspInit>
 801b55c:	e7dd      	b.n	801b51a <HAL_PCD_Init+0x10>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801b55e:	2300      	movs	r3, #0
 801b560:	e012      	b.n	801b588 <HAL_PCD_Init+0x7e>
    hpcd->OUT_ep[i].is_in = 0U;
 801b562:	eb04 1143 	add.w	r1, r4, r3, lsl #5
 801b566:	2200      	movs	r2, #0
 801b568:	f881 2129 	strb.w	r2, [r1, #297]	; 0x129
    hpcd->OUT_ep[i].num = i;
 801b56c:	f881 3128 	strb.w	r3, [r1, #296]	; 0x128
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 801b570:	f881 212b 	strb.w	r2, [r1, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 801b574:	f8c1 2138 	str.w	r2, [r1, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 801b578:	f8c1 213c 	str.w	r2, [r1, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 801b57c:	f103 010a 	add.w	r1, r3, #10
 801b580:	0149      	lsls	r1, r1, #5
 801b582:	5062      	str	r2, [r4, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801b584:	3301      	adds	r3, #1
 801b586:	b2db      	uxtb	r3, r3
 801b588:	4298      	cmp	r0, r3
 801b58a:	d8ea      	bhi.n	801b562 <HAL_PCD_Init+0x58>
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 801b58c:	4625      	mov	r5, r4
 801b58e:	f855 7b10 	ldr.w	r7, [r5], #16
 801b592:	466e      	mov	r6, sp
 801b594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b596:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801b598:	682b      	ldr	r3, [r5, #0]
 801b59a:	6033      	str	r3, [r6, #0]
 801b59c:	1d23      	adds	r3, r4, #4
 801b59e:	cb0e      	ldmia	r3, {r1, r2, r3}
 801b5a0:	4638      	mov	r0, r7
 801b5a2:	f000 fbe1 	bl	801bd68 <USB_DevInit>
  hpcd->USB_Address = 0U;
 801b5a6:	2000      	movs	r0, #0
 801b5a8:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 801b5ac:	2301      	movs	r3, #1
 801b5ae:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
}
 801b5b2:	b007      	add	sp, #28
 801b5b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 801b5b6:	2001      	movs	r0, #1
}
 801b5b8:	4770      	bx	lr

0801b5ba <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 801b5ba:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 801b5be:	2b01      	cmp	r3, #1
 801b5c0:	d010      	beq.n	801b5e4 <HAL_PCD_Start+0x2a>
{
 801b5c2:	b510      	push	{r4, lr}
 801b5c4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 801b5c6:	2101      	movs	r1, #1
 801b5c8:	f880 1228 	strb.w	r1, [r0, #552]	; 0x228

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 801b5cc:	f000 fbb9 	bl	801bd42 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 801b5d0:	6820      	ldr	r0, [r4, #0]
 801b5d2:	f000 fef4 	bl	801c3be <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 801b5d6:	6820      	ldr	r0, [r4, #0]
 801b5d8:	f000 fbb4 	bl	801bd44 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 801b5dc:	2000      	movs	r0, #0
 801b5de:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 801b5e2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 801b5e4:	2002      	movs	r0, #2
}
 801b5e6:	4770      	bx	lr

0801b5e8 <HAL_PCD_SOFCallback>:
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 801b5e8:	4770      	bx	lr

0801b5ea <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 801b5ea:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 801b5ee:	2b01      	cmp	r3, #1
 801b5f0:	d00d      	beq.n	801b60e <HAL_PCD_SetAddress+0x24>
{
 801b5f2:	b510      	push	{r4, lr}
 801b5f4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 801b5f6:	2301      	movs	r3, #1
 801b5f8:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  hpcd->USB_Address = address;
 801b5fc:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 801b600:	6800      	ldr	r0, [r0, #0]
 801b602:	f000 fed6 	bl	801c3b2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 801b606:	2000      	movs	r0, #0
 801b608:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 801b60c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 801b60e:	2002      	movs	r0, #2
}
 801b610:	4770      	bx	lr

0801b612 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 801b612:	b570      	push	{r4, r5, r6, lr}
 801b614:	4605      	mov	r5, r0
 801b616:	460c      	mov	r4, r1
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801b618:	f011 0f80 	tst.w	r1, #128	; 0x80
 801b61c:	d121      	bne.n	801b662 <HAL_PCD_EP_Open+0x50>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801b61e:	f001 0007 	and.w	r0, r1, #7
 801b622:	0140      	lsls	r0, r0, #5
 801b624:	f500 7194 	add.w	r1, r0, #296	; 0x128
 801b628:	4429      	add	r1, r5
    ep->is_in = 0U;
 801b62a:	4428      	add	r0, r5
 801b62c:	2600      	movs	r6, #0
 801b62e:	f880 6129 	strb.w	r6, [r0, #297]	; 0x129
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 801b632:	f004 0407 	and.w	r4, r4, #7
 801b636:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 801b638:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 801b63a:	70cb      	strb	r3, [r1, #3]

  if (ep->is_in != 0U)
 801b63c:	784a      	ldrb	r2, [r1, #1]
 801b63e:	b102      	cbz	r2, 801b642 <HAL_PCD_EP_Open+0x30>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 801b640:	81cc      	strh	r4, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 801b642:	2b02      	cmp	r3, #2
 801b644:	d018      	beq.n	801b678 <HAL_PCD_EP_Open+0x66>
  {
    ep->data_pid_start = 0U;
  }

  __HAL_LOCK(hpcd);
 801b646:	f895 3228 	ldrb.w	r3, [r5, #552]	; 0x228
 801b64a:	2b01      	cmp	r3, #1
 801b64c:	d017      	beq.n	801b67e <HAL_PCD_EP_Open+0x6c>
 801b64e:	2301      	movs	r3, #1
 801b650:	f885 3228 	strb.w	r3, [r5, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 801b654:	6828      	ldr	r0, [r5, #0]
 801b656:	f000 fb9d 	bl	801bd94 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801b65a:	2000      	movs	r0, #0
 801b65c:	f885 0228 	strb.w	r0, [r5, #552]	; 0x228

  return ret;
}
 801b660:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801b662:	f001 0007 	and.w	r0, r1, #7
 801b666:	0140      	lsls	r0, r0, #5
 801b668:	f100 0128 	add.w	r1, r0, #40	; 0x28
 801b66c:	4429      	add	r1, r5
    ep->is_in = 1U;
 801b66e:	4428      	add	r0, r5
 801b670:	2601      	movs	r6, #1
 801b672:	f880 6029 	strb.w	r6, [r0, #41]	; 0x29
 801b676:	e7dc      	b.n	801b632 <HAL_PCD_EP_Open+0x20>
    ep->data_pid_start = 0U;
 801b678:	2300      	movs	r3, #0
 801b67a:	710b      	strb	r3, [r1, #4]
 801b67c:	e7e3      	b.n	801b646 <HAL_PCD_EP_Open+0x34>
  __HAL_LOCK(hpcd);
 801b67e:	2002      	movs	r0, #2
 801b680:	e7ee      	b.n	801b660 <HAL_PCD_EP_Open+0x4e>

0801b682 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801b682:	b510      	push	{r4, lr}
 801b684:	4604      	mov	r4, r0
 801b686:	460b      	mov	r3, r1
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801b688:	f011 0f80 	tst.w	r1, #128	; 0x80
 801b68c:	d11a      	bne.n	801b6c4 <HAL_PCD_EP_Close+0x42>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801b68e:	f001 0207 	and.w	r2, r1, #7
 801b692:	0152      	lsls	r2, r2, #5
 801b694:	f502 7194 	add.w	r1, r2, #296	; 0x128
 801b698:	4401      	add	r1, r0
    ep->is_in = 0U;
 801b69a:	4402      	add	r2, r0
 801b69c:	2000      	movs	r0, #0
 801b69e:	f882 0129 	strb.w	r0, [r2, #297]	; 0x129
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 801b6a2:	f003 0307 	and.w	r3, r3, #7
 801b6a6:	700b      	strb	r3, [r1, #0]

  __HAL_LOCK(hpcd);
 801b6a8:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 801b6ac:	2b01      	cmp	r3, #1
 801b6ae:	d014      	beq.n	801b6da <HAL_PCD_EP_Close+0x58>
 801b6b0:	2301      	movs	r3, #1
 801b6b2:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 801b6b6:	6820      	ldr	r0, [r4, #0]
 801b6b8:	f000 fd1a 	bl	801c0f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801b6bc:	2000      	movs	r0, #0
 801b6be:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 801b6c2:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801b6c4:	f001 0207 	and.w	r2, r1, #7
 801b6c8:	0152      	lsls	r2, r2, #5
 801b6ca:	f102 0128 	add.w	r1, r2, #40	; 0x28
 801b6ce:	4401      	add	r1, r0
    ep->is_in = 1U;
 801b6d0:	4402      	add	r2, r0
 801b6d2:	2001      	movs	r0, #1
 801b6d4:	f882 0029 	strb.w	r0, [r2, #41]	; 0x29
 801b6d8:	e7e3      	b.n	801b6a2 <HAL_PCD_EP_Close+0x20>
  __HAL_LOCK(hpcd);
 801b6da:	2002      	movs	r0, #2
 801b6dc:	e7f1      	b.n	801b6c2 <HAL_PCD_EP_Close+0x40>

0801b6de <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801b6de:	b570      	push	{r4, r5, r6, lr}
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801b6e0:	f001 0407 	and.w	r4, r1, #7
 801b6e4:	0165      	lsls	r5, r4, #5
 801b6e6:	f505 7194 	add.w	r1, r5, #296	; 0x128
 801b6ea:	4401      	add	r1, r0

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801b6ec:	4405      	add	r5, r0
 801b6ee:	f8c5 213c 	str.w	r2, [r5, #316]	; 0x13c
  ep->xfer_len = len;
 801b6f2:	f104 020a 	add.w	r2, r4, #10
 801b6f6:	0156      	lsls	r6, r2, #5
 801b6f8:	eb00 1242 	add.w	r2, r0, r2, lsl #5
 801b6fc:	5183      	str	r3, [r0, r6]
  ep->xfer_count = 0U;
 801b6fe:	2300      	movs	r3, #0
 801b700:	6053      	str	r3, [r2, #4]
  ep->is_in = 0U;
 801b702:	f885 3129 	strb.w	r3, [r5, #297]	; 0x129
  ep->num = ep_addr & EP_ADDR_MSK;
 801b706:	f885 4128 	strb.w	r4, [r5, #296]	; 0x128

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801b70a:	b924      	cbnz	r4, 801b716 <HAL_PCD_EP_Receive+0x38>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 801b70c:	6800      	ldr	r0, [r0, #0]
 801b70e:	f000 fe71 	bl	801c3f4 <USB_EPStartXfer>
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
  }

  return HAL_OK;
}
 801b712:	2000      	movs	r0, #0
 801b714:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 801b716:	6800      	ldr	r0, [r0, #0]
 801b718:	f000 fe6c 	bl	801c3f4 <USB_EPStartXfer>
 801b71c:	e7f9      	b.n	801b712 <HAL_PCD_EP_Receive+0x34>

0801b71e <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 801b71e:	f001 0107 	and.w	r1, r1, #7
 801b722:	310a      	adds	r1, #10
 801b724:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 801b728:	6848      	ldr	r0, [r1, #4]
 801b72a:	4770      	bx	lr

0801b72c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801b72c:	b570      	push	{r4, r5, r6, lr}
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801b72e:	f001 0407 	and.w	r4, r1, #7
 801b732:	0165      	lsls	r5, r4, #5
 801b734:	f105 0128 	add.w	r1, r5, #40	; 0x28
 801b738:	4401      	add	r1, r0

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801b73a:	4405      	add	r5, r0
 801b73c:	63ea      	str	r2, [r5, #60]	; 0x3c
  ep->xfer_len = len;
 801b73e:	1ca2      	adds	r2, r4, #2
 801b740:	0156      	lsls	r6, r2, #5
 801b742:	eb00 1242 	add.w	r2, r0, r2, lsl #5
 801b746:	5183      	str	r3, [r0, r6]
  ep->xfer_count = 0U;
 801b748:	2300      	movs	r3, #0
 801b74a:	6053      	str	r3, [r2, #4]
  ep->is_in = 1U;
 801b74c:	2301      	movs	r3, #1
 801b74e:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 801b752:	f885 4028 	strb.w	r4, [r5, #40]	; 0x28

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801b756:	b924      	cbnz	r4, 801b762 <HAL_PCD_EP_Transmit+0x36>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 801b758:	6800      	ldr	r0, [r0, #0]
 801b75a:	f000 fe4b 	bl	801c3f4 <USB_EPStartXfer>
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
  }

  return HAL_OK;
}
 801b75e:	2000      	movs	r0, #0
 801b760:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 801b762:	6800      	ldr	r0, [r0, #0]
 801b764:	f000 fe46 	bl	801c3f4 <USB_EPStartXfer>
 801b768:	e7f9      	b.n	801b75e <HAL_PCD_EP_Transmit+0x32>

0801b76a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 801b76a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b76c:	4605      	mov	r5, r0
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 801b76e:	e0a7      	b.n	801b8c0 <PCD_EP_ISR_Handler+0x156>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801b770:	8803      	ldrh	r3, [r0, #0]
 801b772:	b29b      	uxth	r3, r3
 801b774:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 801b778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b77c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801b780:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801b784:	b29b      	uxth	r3, r3
 801b786:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 801b788:	682a      	ldr	r2, [r5, #0]
 801b78a:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 801b78e:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 801b792:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801b796:	3302      	adds	r3, #2
 801b798:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801b79c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 801b7a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801b7a4:	646b      	str	r3, [r5, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 801b7a6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 801b7a8:	4413      	add	r3, r2
 801b7aa:	63eb      	str	r3, [r5, #60]	; 0x3c

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 801b7ac:	2100      	movs	r1, #0
 801b7ae:	4628      	mov	r0, r5
 801b7b0:	f7fb fd92 	bl	80172d8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 801b7b4:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 801b7b8:	2b00      	cmp	r3, #0
 801b7ba:	f000 8081 	beq.w	801b8c0 <PCD_EP_ISR_Handler+0x156>
 801b7be:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 801b7c0:	2b00      	cmp	r3, #0
 801b7c2:	d17d      	bne.n	801b8c0 <PCD_EP_ISR_Handler+0x156>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 801b7c4:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 801b7c8:	682a      	ldr	r2, [r5, #0]
 801b7ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b7ce:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 801b7d2:	2300      	movs	r3, #0
 801b7d4:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 801b7d8:	e072      	b.n	801b8c0 <PCD_EP_ISR_Handler+0x156>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);

        if ((wEPVal & USB_EP_SETUP) != 0U)
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801b7da:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 801b7de:	f895 2128 	ldrb.w	r2, [r5, #296]	; 0x128
 801b7e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b7e6:	3306      	adds	r3, #6
 801b7e8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801b7ec:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 801b7f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801b7f4:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 801b7f8:	f8b5 212e 	ldrh.w	r2, [r5, #302]	; 0x12e
 801b7fc:	f505 710c 	add.w	r1, r5, #560	; 0x230
 801b800:	f000 ff68 	bl	801c6d4 <USB_ReadPMA>
                      ep->pmaadress, (uint16_t)ep->xfer_count);

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801b804:	682a      	ldr	r2, [r5, #0]
 801b806:	8813      	ldrh	r3, [r2, #0]
 801b808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b80c:	051b      	lsls	r3, r3, #20
 801b80e:	0d1b      	lsrs	r3, r3, #20
 801b810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b814:	8013      	strh	r3, [r2, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 801b816:	4628      	mov	r0, r5
 801b818:	f7eb fe38 	bl	800748c <HAL_PCD_SetupStageCallback>
 801b81c:	e050      	b.n	801b8c0 <PCD_EP_ISR_Handler+0x156>
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 801b81e:	2a3e      	cmp	r2, #62	; 0x3e
 801b820:	d808      	bhi.n	801b834 <PCD_EP_ISR_Handler+0xca>
 801b822:	0851      	lsrs	r1, r2, #1
 801b824:	f012 0f01 	tst.w	r2, #1
 801b828:	d000      	beq.n	801b82c <PCD_EP_ISR_Handler+0xc2>
 801b82a:	3101      	adds	r1, #1
 801b82c:	0289      	lsls	r1, r1, #10
 801b82e:	f8a3 140c 	strh.w	r1, [r3, #1036]	; 0x40c
 801b832:	e09d      	b.n	801b970 <PCD_EP_ISR_Handler+0x206>
 801b834:	0951      	lsrs	r1, r2, #5
 801b836:	f012 0f1f 	tst.w	r2, #31
 801b83a:	d100      	bne.n	801b83e <PCD_EP_ISR_Handler+0xd4>
 801b83c:	3901      	subs	r1, #1
 801b83e:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 801b842:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 801b846:	f8a3 140c 	strh.w	r1, [r3, #1036]	; 0x40c
 801b84a:	e091      	b.n	801b970 <PCD_EP_ISR_Handler+0x206>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 801b84c:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 801b850:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 801b852:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 801b856:	f040 809a 	bne.w	801b98e <PCD_EP_ISR_Handler+0x224>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 801b85a:	f017 0f80 	tst.w	r7, #128	; 0x80
 801b85e:	d02f      	beq.n	801b8c0 <PCD_EP_ISR_Handler+0x156>
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 801b860:	682a      	ldr	r2, [r5, #0]
 801b862:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 801b866:	b29b      	uxth	r3, r3
 801b868:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 801b86c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b870:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801b874:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801b878:	b29b      	uxth	r3, r3
 801b87a:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 801b87e:	682a      	ldr	r2, [r5, #0]
 801b880:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 801b884:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 801b888:	f891 0028 	ldrb.w	r0, [r1, #40]	; 0x28
 801b88c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 801b890:	3302      	adds	r3, #2
 801b892:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801b896:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 801b89a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801b89e:	1ca3      	adds	r3, r4, #2
 801b8a0:	0158      	lsls	r0, r3, #5
 801b8a2:	eb05 1343 	add.w	r3, r5, r3, lsl #5
 801b8a6:	605a      	str	r2, [r3, #4]
        ep->xfer_buff += ep->xfer_count;
 801b8a8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 801b8aa:	441a      	add	r2, r3
 801b8ac:	63ca      	str	r2, [r1, #60]	; 0x3c

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 801b8ae:	582b      	ldr	r3, [r5, r0]
 801b8b0:	2b00      	cmp	r3, #0
 801b8b2:	f040 8106 	bne.w	801bac2 <PCD_EP_ISR_Handler+0x358>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801b8b6:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 801b8ba:	4628      	mov	r0, r5
 801b8bc:	f7fb fd0c 	bl	80172d8 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 801b8c0:	6828      	ldr	r0, [r5, #0]
 801b8c2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 801b8c6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 801b8ca:	f000 8102 	beq.w	801bad2 <PCD_EP_ISR_Handler+0x368>
    wIstr = hpcd->Instance->ISTR;
 801b8ce:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
 801b8d2:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 801b8d4:	f014 040f 	ands.w	r4, r4, #15
 801b8d8:	d1b8      	bne.n	801b84c <PCD_EP_ISR_Handler+0xe2>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 801b8da:	f013 0f10 	tst.w	r3, #16
 801b8de:	f43f af47 	beq.w	801b770 <PCD_EP_ISR_Handler+0x6>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 801b8e2:	8803      	ldrh	r3, [r0, #0]
 801b8e4:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 801b8e6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 801b8ea:	f47f af76 	bne.w	801b7da <PCD_EP_ISR_Handler+0x70>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 801b8ee:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 801b8f2:	d0e5      	beq.n	801b8c0 <PCD_EP_ISR_Handler+0x156>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801b8f4:	8803      	ldrh	r3, [r0, #0]
 801b8f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b8fa:	051b      	lsls	r3, r3, #20
 801b8fc:	0d1b      	lsrs	r3, r3, #20
 801b8fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b902:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801b904:	6828      	ldr	r0, [r5, #0]
 801b906:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 801b90a:	f895 2128 	ldrb.w	r2, [r5, #296]	; 0x128
 801b90e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b912:	3306      	adds	r3, #6
 801b914:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801b918:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 801b91c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801b920:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 801b924:	b18b      	cbz	r3, 801b94a <PCD_EP_ISR_Handler+0x1e0>
 801b926:	f8d5 113c 	ldr.w	r1, [r5, #316]	; 0x13c
 801b92a:	b171      	cbz	r1, 801b94a <PCD_EP_ISR_Handler+0x1e0>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 801b92c:	f8b5 212e 	ldrh.w	r2, [r5, #302]	; 0x12e
 801b930:	f000 fed0 	bl	801c6d4 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 801b934:	f8d5 2144 	ldr.w	r2, [r5, #324]	; 0x144
 801b938:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
 801b93c:	4413      	add	r3, r2
 801b93e:	f8c5 313c 	str.w	r3, [r5, #316]	; 0x13c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 801b942:	2100      	movs	r1, #0
 801b944:	4628      	mov	r0, r5
 801b946:	f7fb fcb3 	bl	80172b0 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 801b94a:	682b      	ldr	r3, [r5, #0]
 801b94c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 801b950:	4413      	add	r3, r2
 801b952:	f8d5 2138 	ldr.w	r2, [r5, #312]	; 0x138
 801b956:	2a00      	cmp	r2, #0
 801b958:	f47f af61 	bne.w	801b81e <PCD_EP_ISR_Handler+0xb4>
 801b95c:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 801b960:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 801b964:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 801b968:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 801b96c:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 801b970:	682a      	ldr	r2, [r5, #0]
 801b972:	8813      	ldrh	r3, [r2, #0]
 801b974:	b29b      	uxth	r3, r3
 801b976:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801b97a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b97e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 801b982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801b986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b98a:	8013      	strh	r3, [r2, #0]
 801b98c:	e798      	b.n	801b8c0 <PCD_EP_ISR_Handler+0x156>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 801b98e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 801b992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b996:	051b      	lsls	r3, r3, #20
 801b998:	0d1b      	lsrs	r3, r3, #20
 801b99a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b99e:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if (ep->doublebuffer == 0U)
 801b9a2:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 801b9a6:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 801b9aa:	b9d3      	cbnz	r3, 801b9e2 <PCD_EP_ISR_Handler+0x278>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801b9ac:	6828      	ldr	r0, [r5, #0]
 801b9ae:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 801b9b2:	eb05 1244 	add.w	r2, r5, r4, lsl #5
 801b9b6:	f892 2128 	ldrb.w	r2, [r2, #296]	; 0x128
 801b9ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b9be:	3306      	adds	r3, #6
 801b9c0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801b9c4:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 801b9c8:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 801b9cc:	b38e      	cbz	r6, 801ba32 <PCD_EP_ISR_Handler+0x2c8>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 801b9ce:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 801b9d2:	4633      	mov	r3, r6
 801b9d4:	f8b1 212e 	ldrh.w	r2, [r1, #302]	; 0x12e
 801b9d8:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 801b9dc:	f000 fe7a 	bl	801c6d4 <USB_ReadPMA>
 801b9e0:	e027      	b.n	801ba32 <PCD_EP_ISR_Handler+0x2c8>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 801b9e2:	6828      	ldr	r0, [r5, #0]
 801b9e4:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 801b9e8:	f893 2128 	ldrb.w	r2, [r3, #296]	; 0x128
 801b9ec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801b9f0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 801b9f4:	d046      	beq.n	801ba84 <PCD_EP_ISR_Handler+0x31a>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801b9f6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 801b9fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b9fe:	3302      	adds	r3, #2
 801ba00:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ba04:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 801ba08:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 801ba0c:	bb86      	cbnz	r6, 801ba70 <PCD_EP_ISR_Handler+0x306>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 801ba0e:	682a      	ldr	r2, [r5, #0]
 801ba10:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 801ba14:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 801ba18:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 801ba1c:	b29b      	uxth	r3, r3
 801ba1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801ba22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ba26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801ba2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801ba2e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        ep->xfer_count += count;
 801ba32:	f104 030a 	add.w	r3, r4, #10
 801ba36:	0159      	lsls	r1, r3, #5
 801ba38:	eb05 1343 	add.w	r3, r5, r3, lsl #5
 801ba3c:	685a      	ldr	r2, [r3, #4]
 801ba3e:	4432      	add	r2, r6
 801ba40:	605a      	str	r2, [r3, #4]
        ep->xfer_buff += count;
 801ba42:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 801ba46:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 801ba4a:	4432      	add	r2, r6
 801ba4c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 801ba50:	586b      	ldr	r3, [r5, r1]
 801ba52:	b12b      	cbz	r3, 801ba60 <PCD_EP_ISR_Handler+0x2f6>
 801ba54:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 801ba58:	f8d1 1138 	ldr.w	r1, [r1, #312]	; 0x138
 801ba5c:	428e      	cmp	r6, r1
 801ba5e:	d228      	bcs.n	801bab2 <PCD_EP_ISR_Handler+0x348>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 801ba60:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 801ba64:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 801ba68:	4628      	mov	r0, r5
 801ba6a:	f7fb fc21 	bl	80172b0 <HAL_PCD_DataOutStageCallback>
 801ba6e:	e6f4      	b.n	801b85a <PCD_EP_ISR_Handler+0xf0>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 801ba70:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 801ba74:	4633      	mov	r3, r6
 801ba76:	f8b1 2130 	ldrh.w	r2, [r1, #304]	; 0x130
 801ba7a:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 801ba7e:	f000 fe29 	bl	801c6d4 <USB_ReadPMA>
 801ba82:	e7c4      	b.n	801ba0e <PCD_EP_ISR_Handler+0x2a4>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801ba84:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 801ba88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ba8c:	3306      	adds	r3, #6
 801ba8e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ba92:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 801ba96:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 801ba9a:	2e00      	cmp	r6, #0
 801ba9c:	d0b7      	beq.n	801ba0e <PCD_EP_ISR_Handler+0x2a4>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801ba9e:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 801baa2:	4633      	mov	r3, r6
 801baa4:	f8b1 2132 	ldrh.w	r2, [r1, #306]	; 0x132
 801baa8:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 801baac:	f000 fe12 	bl	801c6d4 <USB_ReadPMA>
 801bab0:	e7ad      	b.n	801ba0e <PCD_EP_ISR_Handler+0x2a4>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 801bab2:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 801bab6:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
 801baba:	4628      	mov	r0, r5
 801babc:	f7ff fe0f 	bl	801b6de <HAL_PCD_EP_Receive>
 801bac0:	e6cb      	b.n	801b85a <PCD_EP_ISR_Handler+0xf0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 801bac2:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 801bac6:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 801baca:	4628      	mov	r0, r5
 801bacc:	f7ff fe2e 	bl	801b72c <HAL_PCD_EP_Transmit>
 801bad0:	e6f6      	b.n	801b8c0 <PCD_EP_ISR_Handler+0x156>
        }
      }
    }
  }
  return HAL_OK;
}
 801bad2:	2000      	movs	r0, #0
 801bad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801bad6 <HAL_PCD_IRQHandler>:
{
 801bad6:	b510      	push	{r4, lr}
 801bad8:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 801bada:	6800      	ldr	r0, [r0, #0]
 801badc:	f000 fc71 	bl	801c3c2 <USB_ReadInterrupts>
 801bae0:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 801bae4:	d145      	bne.n	801bb72 <HAL_PCD_IRQHandler+0x9c>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 801bae6:	6820      	ldr	r0, [r4, #0]
 801bae8:	f000 fc6b 	bl	801c3c2 <USB_ReadInterrupts>
 801baec:	f410 6f80 	tst.w	r0, #1024	; 0x400
 801baf0:	d143      	bne.n	801bb7a <HAL_PCD_IRQHandler+0xa4>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 801baf2:	6820      	ldr	r0, [r4, #0]
 801baf4:	f000 fc65 	bl	801c3c2 <USB_ReadInterrupts>
 801baf8:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 801bafc:	d008      	beq.n	801bb10 <HAL_PCD_IRQHandler+0x3a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 801bafe:	6822      	ldr	r2, [r4, #0]
 801bb00:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 801bb04:	b29b      	uxth	r3, r3
 801bb06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801bb0a:	b29b      	uxth	r3, r3
 801bb0c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 801bb10:	6820      	ldr	r0, [r4, #0]
 801bb12:	f000 fc56 	bl	801c3c2 <USB_ReadInterrupts>
 801bb16:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 801bb1a:	d008      	beq.n	801bb2e <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 801bb1c:	6822      	ldr	r2, [r4, #0]
 801bb1e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 801bb22:	b29b      	uxth	r3, r3
 801bb24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801bb28:	b29b      	uxth	r3, r3
 801bb2a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 801bb2e:	6820      	ldr	r0, [r4, #0]
 801bb30:	f000 fc47 	bl	801c3c2 <USB_ReadInterrupts>
 801bb34:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 801bb38:	d130      	bne.n	801bb9c <HAL_PCD_IRQHandler+0xc6>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 801bb3a:	6820      	ldr	r0, [r4, #0]
 801bb3c:	f000 fc41 	bl	801c3c2 <USB_ReadInterrupts>
 801bb40:	f410 6f00 	tst.w	r0, #2048	; 0x800
 801bb44:	d149      	bne.n	801bbda <HAL_PCD_IRQHandler+0x104>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 801bb46:	6820      	ldr	r0, [r4, #0]
 801bb48:	f000 fc3b 	bl	801c3c2 <USB_ReadInterrupts>
 801bb4c:	f410 7f00 	tst.w	r0, #512	; 0x200
 801bb50:	d164      	bne.n	801bc1c <HAL_PCD_IRQHandler+0x146>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 801bb52:	6820      	ldr	r0, [r4, #0]
 801bb54:	f000 fc35 	bl	801c3c2 <USB_ReadInterrupts>
 801bb58:	f410 7f80 	tst.w	r0, #256	; 0x100
 801bb5c:	d008      	beq.n	801bb70 <HAL_PCD_IRQHandler+0x9a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 801bb5e:	6822      	ldr	r2, [r4, #0]
 801bb60:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 801bb64:	b29b      	uxth	r3, r3
 801bb66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801bb6a:	b29b      	uxth	r3, r3
 801bb6c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 801bb70:	bd10      	pop	{r4, pc}
    (void)PCD_EP_ISR_Handler(hpcd);
 801bb72:	4620      	mov	r0, r4
 801bb74:	f7ff fdf9 	bl	801b76a <PCD_EP_ISR_Handler>
 801bb78:	e7b5      	b.n	801bae6 <HAL_PCD_IRQHandler+0x10>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 801bb7a:	6822      	ldr	r2, [r4, #0]
 801bb7c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 801bb80:	b29b      	uxth	r3, r3
 801bb82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801bb86:	b29b      	uxth	r3, r3
 801bb88:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 801bb8c:	4620      	mov	r0, r4
 801bb8e:	f7eb fc3d 	bl	800740c <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 801bb92:	2100      	movs	r1, #0
 801bb94:	4620      	mov	r0, r4
 801bb96:	f7ff fd28 	bl	801b5ea <HAL_PCD_SetAddress>
 801bb9a:	e7aa      	b.n	801baf2 <HAL_PCD_IRQHandler+0x1c>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 801bb9c:	6822      	ldr	r2, [r4, #0]
 801bb9e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 801bba2:	b29b      	uxth	r3, r3
 801bba4:	f023 0304 	bic.w	r3, r3, #4
 801bba8:	b29b      	uxth	r3, r3
 801bbaa:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 801bbae:	6822      	ldr	r2, [r4, #0]
 801bbb0:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 801bbb4:	b29b      	uxth	r3, r3
 801bbb6:	f023 0308 	bic.w	r3, r3, #8
 801bbba:	b29b      	uxth	r3, r3
 801bbbc:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 801bbc0:	4620      	mov	r0, r4
 801bbc2:	f7eb fc57 	bl	8007474 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 801bbc6:	6822      	ldr	r2, [r4, #0]
 801bbc8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 801bbcc:	b29b      	uxth	r3, r3
 801bbce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801bbd2:	b29b      	uxth	r3, r3
 801bbd4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 801bbd8:	e7af      	b.n	801bb3a <HAL_PCD_IRQHandler+0x64>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 801bbda:	6822      	ldr	r2, [r4, #0]
 801bbdc:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 801bbe0:	f043 0308 	orr.w	r3, r3, #8
 801bbe4:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 801bbe8:	6822      	ldr	r2, [r4, #0]
 801bbea:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 801bbee:	b29b      	uxth	r3, r3
 801bbf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801bbf4:	b29b      	uxth	r3, r3
 801bbf6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 801bbfa:	6822      	ldr	r2, [r4, #0]
 801bbfc:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 801bc00:	f043 0304 	orr.w	r3, r3, #4
 801bc04:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 801bc08:	6820      	ldr	r0, [r4, #0]
 801bc0a:	f000 fbda 	bl	801c3c2 <USB_ReadInterrupts>
 801bc0e:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 801bc12:	d198      	bne.n	801bb46 <HAL_PCD_IRQHandler+0x70>
      HAL_PCD_SuspendCallback(hpcd);
 801bc14:	4620      	mov	r0, r4
 801bc16:	f7eb fc21 	bl	800745c <HAL_PCD_SuspendCallback>
 801bc1a:	e794      	b.n	801bb46 <HAL_PCD_IRQHandler+0x70>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 801bc1c:	6822      	ldr	r2, [r4, #0]
 801bc1e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 801bc22:	b29b      	uxth	r3, r3
 801bc24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801bc28:	b29b      	uxth	r3, r3
 801bc2a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 801bc2e:	4620      	mov	r0, r4
 801bc30:	f7ff fcda 	bl	801b5e8 <HAL_PCD_SOFCallback>
 801bc34:	e78d      	b.n	801bb52 <HAL_PCD_IRQHandler+0x7c>

0801bc36 <HAL_PCD_EP_SetStall>:
{
 801bc36:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 801bc38:	f001 0507 	and.w	r5, r1, #7
 801bc3c:	6843      	ldr	r3, [r0, #4]
 801bc3e:	429d      	cmp	r5, r3
 801bc40:	d82c      	bhi.n	801bc9c <HAL_PCD_EP_SetStall+0x66>
 801bc42:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 801bc44:	f011 0f80 	tst.w	r1, #128	; 0x80
 801bc48:	d119      	bne.n	801bc7e <HAL_PCD_EP_SetStall+0x48>
    ep = &hpcd->OUT_ep[ep_addr];
 801bc4a:	014b      	lsls	r3, r1, #5
 801bc4c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 801bc50:	4401      	add	r1, r0
    ep->is_in = 0U;
 801bc52:	4403      	add	r3, r0
 801bc54:	2200      	movs	r2, #0
 801bc56:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
  ep->is_stall = 1U;
 801bc5a:	2301      	movs	r3, #1
 801bc5c:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801bc5e:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 801bc60:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 801bc64:	2b01      	cmp	r3, #1
 801bc66:	d01b      	beq.n	801bca0 <HAL_PCD_EP_SetStall+0x6a>
 801bc68:	2301      	movs	r3, #1
 801bc6a:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 801bc6e:	6820      	ldr	r0, [r4, #0]
 801bc70:	f000 fb29 	bl	801c2c6 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801bc74:	b165      	cbz	r5, 801bc90 <HAL_PCD_EP_SetStall+0x5a>
  __HAL_UNLOCK(hpcd);
 801bc76:	2000      	movs	r0, #0
 801bc78:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 801bc7c:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801bc7e:	016b      	lsls	r3, r5, #5
 801bc80:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801bc84:	4401      	add	r1, r0
    ep->is_in = 1U;
 801bc86:	4403      	add	r3, r0
 801bc88:	2201      	movs	r2, #1
 801bc8a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 801bc8e:	e7e4      	b.n	801bc5a <HAL_PCD_EP_SetStall+0x24>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 801bc90:	f504 710c 	add.w	r1, r4, #560	; 0x230
 801bc94:	6820      	ldr	r0, [r4, #0]
 801bc96:	f000 fb97 	bl	801c3c8 <USB_EP0_OutStart>
 801bc9a:	e7ec      	b.n	801bc76 <HAL_PCD_EP_SetStall+0x40>
    return HAL_ERROR;
 801bc9c:	2001      	movs	r0, #1
 801bc9e:	e7ed      	b.n	801bc7c <HAL_PCD_EP_SetStall+0x46>
  __HAL_LOCK(hpcd);
 801bca0:	2002      	movs	r0, #2
 801bca2:	e7eb      	b.n	801bc7c <HAL_PCD_EP_SetStall+0x46>

0801bca4 <HAL_PCD_EP_ClrStall>:
{
 801bca4:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 801bca6:	f001 010f 	and.w	r1, r1, #15
 801bcaa:	6842      	ldr	r2, [r0, #4]
 801bcac:	4291      	cmp	r1, r2
 801bcae:	d82c      	bhi.n	801bd0a <HAL_PCD_EP_ClrStall+0x66>
{
 801bcb0:	b510      	push	{r4, lr}
 801bcb2:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 801bcb4:	f013 0f80 	tst.w	r3, #128	; 0x80
 801bcb8:	d11c      	bne.n	801bcf4 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801bcba:	f003 0207 	and.w	r2, r3, #7
 801bcbe:	0152      	lsls	r2, r2, #5
 801bcc0:	f502 7194 	add.w	r1, r2, #296	; 0x128
 801bcc4:	4401      	add	r1, r0
    ep->is_in = 0U;
 801bcc6:	4402      	add	r2, r0
 801bcc8:	2000      	movs	r0, #0
 801bcca:	f882 0129 	strb.w	r0, [r2, #297]	; 0x129
  ep->is_stall = 0U;
 801bcce:	2200      	movs	r2, #0
 801bcd0:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801bcd2:	f003 0307 	and.w	r3, r3, #7
 801bcd6:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 801bcd8:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 801bcdc:	2b01      	cmp	r3, #1
 801bcde:	d016      	beq.n	801bd0e <HAL_PCD_EP_ClrStall+0x6a>
 801bce0:	2301      	movs	r3, #1
 801bce2:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 801bce6:	6820      	ldr	r0, [r4, #0]
 801bce8:	f000 fb12 	bl	801c310 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801bcec:	2000      	movs	r0, #0
 801bcee:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 801bcf2:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801bcf4:	f003 0207 	and.w	r2, r3, #7
 801bcf8:	0152      	lsls	r2, r2, #5
 801bcfa:	f102 0128 	add.w	r1, r2, #40	; 0x28
 801bcfe:	4401      	add	r1, r0
    ep->is_in = 1U;
 801bd00:	4402      	add	r2, r0
 801bd02:	2001      	movs	r0, #1
 801bd04:	f882 0029 	strb.w	r0, [r2, #41]	; 0x29
 801bd08:	e7e1      	b.n	801bcce <HAL_PCD_EP_ClrStall+0x2a>
    return HAL_ERROR;
 801bd0a:	2001      	movs	r0, #1
}
 801bd0c:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 801bd0e:	2002      	movs	r0, #2
 801bd10:	e7ef      	b.n	801bcf2 <HAL_PCD_EP_ClrStall+0x4e>

0801bd12 <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 801bd12:	f011 0f80 	tst.w	r1, #128	; 0x80
 801bd16:	d009      	beq.n	801bd2c <HAL_PCDEx_PMAConfig+0x1a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801bd18:	f001 0107 	and.w	r1, r1, #7
 801bd1c:	0149      	lsls	r1, r1, #5
 801bd1e:	3128      	adds	r1, #40	; 0x28
 801bd20:	4401      	add	r1, r0
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 801bd22:	b942      	cbnz	r2, 801bd36 <HAL_PCDEx_PMAConfig+0x24>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 801bd24:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 801bd26:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 801bd28:	2000      	movs	r0, #0
 801bd2a:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 801bd2c:	0149      	lsls	r1, r1, #5
 801bd2e:	f501 7194 	add.w	r1, r1, #296	; 0x128
 801bd32:	4401      	add	r1, r0
 801bd34:	e7f5      	b.n	801bd22 <HAL_PCDEx_PMAConfig+0x10>
    ep->doublebuffer = 1U;
 801bd36:	2201      	movs	r2, #1
 801bd38:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 801bd3a:	810b      	strh	r3, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 801bd3c:	0c1b      	lsrs	r3, r3, #16
 801bd3e:	814b      	strh	r3, [r1, #10]
 801bd40:	e7f2      	b.n	801bd28 <HAL_PCDEx_PMAConfig+0x16>

0801bd42 <HAL_PCDEx_SetConnectionState>:
  UNUSED(hpcd);
  UNUSED(state);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCDEx_SetConnectionState could be implemented in the user file
   */
}
 801bd42:	4770      	bx	lr

0801bd44 <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 801bd44:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801bd48:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 801bd4c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 801bd50:	2000      	movs	r0, #0
 801bd52:	4770      	bx	lr

0801bd54 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 801bd54:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801bd58:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801bd5c:	045b      	lsls	r3, r3, #17
 801bd5e:	0c5b      	lsrs	r3, r3, #17
 801bd60:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 801bd64:	2000      	movs	r0, #0
 801bd66:	4770      	bx	lr

0801bd68 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801bd68:	b084      	sub	sp, #16
 801bd6a:	b538      	push	{r3, r4, r5, lr}
 801bd6c:	ad05      	add	r5, sp, #20
 801bd6e:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 801bd72:	2301      	movs	r3, #1
 801bd74:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 801bd78:	2500      	movs	r5, #0
 801bd7a:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 801bd7e:	f8a0 5044 	strh.w	r5, [r0, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801bd82:	f8a0 5050 	strh.w	r5, [r0, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 801bd86:	f7ff ffdd 	bl	801bd44 <USB_EnableGlobalInt>

  return HAL_OK;
}
 801bd8a:	4628      	mov	r0, r5
 801bd8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bd90:	b004      	add	sp, #16
 801bd92:	4770      	bx	lr

0801bd94 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801bd94:	b430      	push	{r4, r5}
 801bd96:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801bd98:	780a      	ldrb	r2, [r1, #0]
 801bd9a:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 801bd9e:	b2a4      	uxth	r4, r4
 801bda0:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 801bda4:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 801bda8:	b2a4      	uxth	r4, r4

  /* initialize Endpoint */
  switch (ep->type)
 801bdaa:	78c8      	ldrb	r0, [r1, #3]
 801bdac:	2803      	cmp	r0, #3
 801bdae:	d85a      	bhi.n	801be66 <USB_ActivateEndpoint+0xd2>
 801bdb0:	e8df f000 	tbb	[pc, r0]
 801bdb4:	5102554e 	.word	0x5102554e
 801bdb8:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 801bdba:	f248 0580 	movw	r5, #32896	; 0x8080
 801bdbe:	432c      	orrs	r4, r5
 801bdc0:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801bdc4:	780c      	ldrb	r4, [r1, #0]
 801bdc6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 801bdca:	b212      	sxth	r2, r2
 801bdcc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 801bdd0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 801bdd4:	4322      	orrs	r2, r4
 801bdd6:	b292      	uxth	r2, r2
 801bdd8:	432a      	orrs	r2, r5
 801bdda:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  if (ep->doublebuffer == 0U)
 801bdde:	7b0a      	ldrb	r2, [r1, #12]
 801bde0:	2a00      	cmp	r2, #0
 801bde2:	f040 80aa 	bne.w	801bf3a <USB_ActivateEndpoint+0x1a6>
  {
    if (ep->is_in != 0U)
 801bde6:	784a      	ldrb	r2, [r1, #1]
 801bde8:	2a00      	cmp	r2, #0
 801bdea:	d04d      	beq.n	801be88 <USB_ActivateEndpoint+0xf4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801bdec:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 801bdf0:	441a      	add	r2, r3
 801bdf2:	780c      	ldrb	r4, [r1, #0]
 801bdf4:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 801bdf8:	88cc      	ldrh	r4, [r1, #6]
 801bdfa:	0864      	lsrs	r4, r4, #1
 801bdfc:	0064      	lsls	r4, r4, #1
 801bdfe:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801be02:	780c      	ldrb	r4, [r1, #0]
 801be04:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 801be08:	f012 0f40 	tst.w	r2, #64	; 0x40
 801be0c:	d00c      	beq.n	801be28 <USB_ActivateEndpoint+0x94>
 801be0e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 801be12:	b292      	uxth	r2, r2
 801be14:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 801be18:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 801be1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801be20:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 801be24:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 801be28:	78ca      	ldrb	r2, [r1, #3]
 801be2a:	2a01      	cmp	r2, #1
 801be2c:	d01d      	beq.n	801be6a <USB_ActivateEndpoint+0xd6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801be2e:	7809      	ldrb	r1, [r1, #0]
 801be30:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 801be34:	b292      	uxth	r2, r2
 801be36:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 801be3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801be3e:	f082 0220 	eor.w	r2, r2, #32
 801be42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801be46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801be4a:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 801be4e:	e05b      	b.n	801bf08 <USB_ActivateEndpoint+0x174>
      wEpRegVal |= USB_EP_CONTROL;
 801be50:	f444 7400 	orr.w	r4, r4, #512	; 0x200
      break;
 801be54:	e7b1      	b.n	801bdba <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_INTERRUPT;
 801be56:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 801be5a:	2000      	movs	r0, #0
      break;
 801be5c:	e7ad      	b.n	801bdba <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801be5e:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 801be62:	2000      	movs	r0, #0
      break;
 801be64:	e7a9      	b.n	801bdba <USB_ActivateEndpoint+0x26>
      ret = HAL_ERROR;
 801be66:	2001      	movs	r0, #1
 801be68:	e7a7      	b.n	801bdba <USB_ActivateEndpoint+0x26>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801be6a:	7809      	ldrb	r1, [r1, #0]
 801be6c:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 801be70:	b292      	uxth	r2, r2
 801be72:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 801be76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801be7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801be7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801be82:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 801be86:	e03f      	b.n	801bf08 <USB_ActivateEndpoint+0x174>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801be88:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 801be8c:	441a      	add	r2, r3
 801be8e:	780c      	ldrb	r4, [r1, #0]
 801be90:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 801be94:	88cc      	ldrh	r4, [r1, #6]
 801be96:	0864      	lsrs	r4, r4, #1
 801be98:	0064      	lsls	r4, r4, #1
 801be9a:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801be9e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 801bea2:	441a      	add	r2, r3
 801bea4:	780c      	ldrb	r4, [r1, #0]
 801bea6:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 801beaa:	690c      	ldr	r4, [r1, #16]
 801beac:	bb74      	cbnz	r4, 801bf0c <USB_ActivateEndpoint+0x178>
 801beae:	f8b2 440c 	ldrh.w	r4, [r2, #1036]	; 0x40c
 801beb2:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 801beb6:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 801beba:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 801bebe:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801bec2:	780c      	ldrb	r4, [r1, #0]
 801bec4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 801bec8:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 801becc:	d00c      	beq.n	801bee8 <USB_ActivateEndpoint+0x154>
 801bece:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 801bed2:	b292      	uxth	r2, r2
 801bed4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 801bed8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 801bedc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 801bee0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801bee4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801bee8:	7809      	ldrb	r1, [r1, #0]
 801beea:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 801beee:	b292      	uxth	r2, r2
 801bef0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801bef4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 801bef8:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 801befc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801bf00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801bf04:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 801bf08:	bc30      	pop	{r4, r5}
 801bf0a:	4770      	bx	lr
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801bf0c:	2c3e      	cmp	r4, #62	; 0x3e
 801bf0e:	d808      	bhi.n	801bf22 <USB_ActivateEndpoint+0x18e>
 801bf10:	0865      	lsrs	r5, r4, #1
 801bf12:	f014 0f01 	tst.w	r4, #1
 801bf16:	d000      	beq.n	801bf1a <USB_ActivateEndpoint+0x186>
 801bf18:	3501      	adds	r5, #1
 801bf1a:	02ad      	lsls	r5, r5, #10
 801bf1c:	f8a2 540c 	strh.w	r5, [r2, #1036]	; 0x40c
 801bf20:	e7cf      	b.n	801bec2 <USB_ActivateEndpoint+0x12e>
 801bf22:	0965      	lsrs	r5, r4, #5
 801bf24:	f014 0f1f 	tst.w	r4, #31
 801bf28:	d100      	bne.n	801bf2c <USB_ActivateEndpoint+0x198>
 801bf2a:	3d01      	subs	r5, #1
 801bf2c:	ea6f 65c5 	mvn.w	r5, r5, lsl #27
 801bf30:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 801bf34:	f8a2 540c 	strh.w	r5, [r2, #1036]	; 0x40c
 801bf38:	e7c3      	b.n	801bec2 <USB_ActivateEndpoint+0x12e>
    PCD_SET_EP_DBUF(USBx, ep->num);
 801bf3a:	780c      	ldrb	r4, [r1, #0]
 801bf3c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 801bf40:	b292      	uxth	r2, r2
 801bf42:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 801bf46:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 801bf4a:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 801bf4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801bf52:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801bf56:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 801bf5a:	441a      	add	r2, r3
 801bf5c:	780c      	ldrb	r4, [r1, #0]
 801bf5e:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 801bf62:	890c      	ldrh	r4, [r1, #8]
 801bf64:	0864      	lsrs	r4, r4, #1
 801bf66:	0064      	lsls	r4, r4, #1
 801bf68:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
 801bf6c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 801bf70:	441a      	add	r2, r3
 801bf72:	780c      	ldrb	r4, [r1, #0]
 801bf74:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 801bf78:	894c      	ldrh	r4, [r1, #10]
 801bf7a:	0864      	lsrs	r4, r4, #1
 801bf7c:	0064      	lsls	r4, r4, #1
 801bf7e:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408
    if (ep->is_in == 0U)
 801bf82:	784a      	ldrb	r2, [r1, #1]
 801bf84:	2a00      	cmp	r2, #0
 801bf86:	d14e      	bne.n	801c026 <USB_ActivateEndpoint+0x292>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801bf88:	780c      	ldrb	r4, [r1, #0]
 801bf8a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 801bf8e:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 801bf92:	d00c      	beq.n	801bfae <USB_ActivateEndpoint+0x21a>
 801bf94:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 801bf98:	b292      	uxth	r2, r2
 801bf9a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 801bf9e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 801bfa2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 801bfa6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801bfaa:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801bfae:	780c      	ldrb	r4, [r1, #0]
 801bfb0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 801bfb4:	f012 0f40 	tst.w	r2, #64	; 0x40
 801bfb8:	d00c      	beq.n	801bfd4 <USB_ActivateEndpoint+0x240>
 801bfba:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 801bfbe:	b292      	uxth	r2, r2
 801bfc0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 801bfc4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 801bfc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801bfcc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 801bfd0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 801bfd4:	780c      	ldrb	r4, [r1, #0]
 801bfd6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 801bfda:	b292      	uxth	r2, r2
 801bfdc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 801bfe0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 801bfe4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801bfe8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 801bfec:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801bff0:	780d      	ldrb	r5, [r1, #0]
 801bff2:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 801bff6:	b292      	uxth	r2, r2
 801bff8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801bffc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 801c000:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 801c004:	f248 0480 	movw	r4, #32896	; 0x8080
 801c008:	4322      	orrs	r2, r4
 801c00a:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801c00e:	7809      	ldrb	r1, [r1, #0]
 801c010:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 801c014:	b292      	uxth	r2, r2
 801c016:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 801c01a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c01e:	4322      	orrs	r2, r4
 801c020:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 801c024:	e770      	b.n	801bf08 <USB_ActivateEndpoint+0x174>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801c026:	780c      	ldrb	r4, [r1, #0]
 801c028:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 801c02c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 801c030:	d00c      	beq.n	801c04c <USB_ActivateEndpoint+0x2b8>
 801c032:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 801c036:	b292      	uxth	r2, r2
 801c038:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 801c03c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 801c040:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 801c044:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801c048:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801c04c:	780c      	ldrb	r4, [r1, #0]
 801c04e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 801c052:	f012 0f40 	tst.w	r2, #64	; 0x40
 801c056:	d00c      	beq.n	801c072 <USB_ActivateEndpoint+0x2de>
 801c058:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 801c05c:	b292      	uxth	r2, r2
 801c05e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 801c062:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 801c066:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801c06a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 801c06e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 801c072:	780c      	ldrb	r4, [r1, #0]
 801c074:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 801c078:	b292      	uxth	r2, r2
 801c07a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 801c07e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 801c082:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 801c086:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801c08a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 801c08e:	78ca      	ldrb	r2, [r1, #3]
 801c090:	2a01      	cmp	r2, #1
 801c092:	d01e      	beq.n	801c0d2 <USB_ActivateEndpoint+0x33e>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801c094:	780c      	ldrb	r4, [r1, #0]
 801c096:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 801c09a:	b292      	uxth	r2, r2
 801c09c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 801c0a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c0a4:	f082 0220 	eor.w	r2, r2, #32
 801c0a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801c0ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801c0b0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801c0b4:	7809      	ldrb	r1, [r1, #0]
 801c0b6:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 801c0ba:	b292      	uxth	r2, r2
 801c0bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801c0c0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 801c0c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801c0c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801c0cc:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 801c0d0:	e71a      	b.n	801bf08 <USB_ActivateEndpoint+0x174>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801c0d2:	780c      	ldrb	r4, [r1, #0]
 801c0d4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 801c0d8:	b292      	uxth	r2, r2
 801c0da:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 801c0de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c0e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801c0e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801c0ea:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 801c0ee:	e7e1      	b.n	801c0b4 <USB_ActivateEndpoint+0x320>

0801c0f0 <USB_DeactivateEndpoint>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 801c0f0:	7b0b      	ldrb	r3, [r1, #12]
 801c0f2:	2b00      	cmp	r3, #0
 801c0f4:	d146      	bne.n	801c184 <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 801c0f6:	784b      	ldrb	r3, [r1, #1]
 801c0f8:	b313      	cbz	r3, 801c140 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801c0fa:	780a      	ldrb	r2, [r1, #0]
 801c0fc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801c100:	f013 0f40 	tst.w	r3, #64	; 0x40
 801c104:	d00c      	beq.n	801c120 <USB_DeactivateEndpoint+0x30>
 801c106:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801c10a:	b29b      	uxth	r3, r3
 801c10c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801c110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801c114:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801c118:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801c11c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801c120:	780a      	ldrb	r2, [r1, #0]
 801c122:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801c126:	b29b      	uxth	r3, r3
 801c128:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801c12c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c130:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801c134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c138:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 801c13c:	2000      	movs	r0, #0
 801c13e:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801c140:	780a      	ldrb	r2, [r1, #0]
 801c142:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801c146:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 801c14a:	d00c      	beq.n	801c166 <USB_DeactivateEndpoint+0x76>
 801c14c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801c150:	b29b      	uxth	r3, r3
 801c152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801c156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801c15a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801c15e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c162:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801c166:	780a      	ldrb	r2, [r1, #0]
 801c168:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801c16c:	b29b      	uxth	r3, r3
 801c16e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801c172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801c176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801c17a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c17e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 801c182:	e7db      	b.n	801c13c <USB_DeactivateEndpoint+0x4c>
{
 801c184:	b410      	push	{r4}
    if (ep->is_in == 0U)
 801c186:	784b      	ldrb	r3, [r1, #1]
 801c188:	2b00      	cmp	r3, #0
 801c18a:	d14f      	bne.n	801c22c <USB_DeactivateEndpoint+0x13c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801c18c:	780a      	ldrb	r2, [r1, #0]
 801c18e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801c192:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 801c196:	d00c      	beq.n	801c1b2 <USB_DeactivateEndpoint+0xc2>
 801c198:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801c19c:	b29b      	uxth	r3, r3
 801c19e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801c1a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801c1a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801c1aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c1ae:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801c1b2:	780a      	ldrb	r2, [r1, #0]
 801c1b4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801c1b8:	f013 0f40 	tst.w	r3, #64	; 0x40
 801c1bc:	d00c      	beq.n	801c1d8 <USB_DeactivateEndpoint+0xe8>
 801c1be:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801c1c2:	b29b      	uxth	r3, r3
 801c1c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801c1c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801c1cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801c1d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801c1d4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 801c1d8:	780a      	ldrb	r2, [r1, #0]
 801c1da:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801c1de:	b29b      	uxth	r3, r3
 801c1e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801c1e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801c1e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801c1ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801c1f0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801c1f4:	780b      	ldrb	r3, [r1, #0]
 801c1f6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 801c1fa:	b292      	uxth	r2, r2
 801c1fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801c200:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 801c204:	f248 0480 	movw	r4, #32896	; 0x8080
 801c208:	4322      	orrs	r2, r4
 801c20a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801c20e:	780a      	ldrb	r2, [r1, #0]
 801c210:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801c214:	b29b      	uxth	r3, r3
 801c216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801c21a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c21e:	4323      	orrs	r3, r4
 801c220:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 801c224:	2000      	movs	r0, #0
 801c226:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c22a:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801c22c:	780a      	ldrb	r2, [r1, #0]
 801c22e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801c232:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 801c236:	d00c      	beq.n	801c252 <USB_DeactivateEndpoint+0x162>
 801c238:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801c23c:	b29b      	uxth	r3, r3
 801c23e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801c242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801c246:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801c24a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c24e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801c252:	780a      	ldrb	r2, [r1, #0]
 801c254:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801c258:	f013 0f40 	tst.w	r3, #64	; 0x40
 801c25c:	d00c      	beq.n	801c278 <USB_DeactivateEndpoint+0x188>
 801c25e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801c262:	b29b      	uxth	r3, r3
 801c264:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801c268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801c26c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801c270:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801c274:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 801c278:	780a      	ldrb	r2, [r1, #0]
 801c27a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801c27e:	b29b      	uxth	r3, r3
 801c280:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801c284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801c288:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801c28c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c290:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801c294:	780b      	ldrb	r3, [r1, #0]
 801c296:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 801c29a:	b292      	uxth	r2, r2
 801c29c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 801c2a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c2a4:	f248 0480 	movw	r4, #32896	; 0x8080
 801c2a8:	4322      	orrs	r2, r4
 801c2aa:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801c2ae:	780a      	ldrb	r2, [r1, #0]
 801c2b0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801c2b4:	b29b      	uxth	r3, r3
 801c2b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801c2ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801c2be:	4323      	orrs	r3, r4
 801c2c0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 801c2c4:	e7ae      	b.n	801c224 <USB_DeactivateEndpoint+0x134>

0801c2c6 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 801c2c6:	784b      	ldrb	r3, [r1, #1]
 801c2c8:	b18b      	cbz	r3, 801c2ee <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801c2ca:	780a      	ldrb	r2, [r1, #0]
 801c2cc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801c2d0:	b29b      	uxth	r3, r3
 801c2d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801c2d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c2da:	f083 0310 	eor.w	r3, r3, #16
 801c2de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801c2e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c2e6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 801c2ea:	2000      	movs	r0, #0
 801c2ec:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801c2ee:	780a      	ldrb	r2, [r1, #0]
 801c2f0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801c2f4:	b29b      	uxth	r3, r3
 801c2f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801c2fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801c2fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801c302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801c306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c30a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 801c30e:	e7ec      	b.n	801c2ea <USB_EPSetStall+0x24>

0801c310 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 801c310:	7b0b      	ldrb	r3, [r1, #12]
 801c312:	2b00      	cmp	r3, #0
 801c314:	d14b      	bne.n	801c3ae <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 801c316:	784b      	ldrb	r3, [r1, #1]
 801c318:	b333      	cbz	r3, 801c368 <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801c31a:	780a      	ldrb	r2, [r1, #0]
 801c31c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801c320:	f013 0f40 	tst.w	r3, #64	; 0x40
 801c324:	d00c      	beq.n	801c340 <USB_EPClearStall+0x30>
 801c326:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801c32a:	b29b      	uxth	r3, r3
 801c32c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801c330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801c334:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801c338:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801c33c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 801c340:	78cb      	ldrb	r3, [r1, #3]
 801c342:	2b01      	cmp	r3, #1
 801c344:	d033      	beq.n	801c3ae <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801c346:	780a      	ldrb	r2, [r1, #0]
 801c348:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801c34c:	b29b      	uxth	r3, r3
 801c34e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801c352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c356:	f083 0320 	eor.w	r3, r3, #32
 801c35a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801c35e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c362:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 801c366:	e022      	b.n	801c3ae <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801c368:	780a      	ldrb	r2, [r1, #0]
 801c36a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801c36e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 801c372:	d00c      	beq.n	801c38e <USB_EPClearStall+0x7e>
 801c374:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801c378:	b29b      	uxth	r3, r3
 801c37a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801c37e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801c382:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801c386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c38a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801c38e:	780a      	ldrb	r2, [r1, #0]
 801c390:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801c394:	b29b      	uxth	r3, r3
 801c396:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801c39a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801c39e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 801c3a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801c3a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c3aa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 801c3ae:	2000      	movs	r0, #0
 801c3b0:	4770      	bx	lr

0801c3b2 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 801c3b2:	b911      	cbnz	r1, 801c3ba <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 801c3b4:	2380      	movs	r3, #128	; 0x80
 801c3b6:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 801c3ba:	2000      	movs	r0, #0
 801c3bc:	4770      	bx	lr

0801c3be <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 801c3be:	2000      	movs	r0, #0
 801c3c0:	4770      	bx	lr

0801c3c2 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801c3c2:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 801c3c6:	4770      	bx	lr

0801c3c8 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 801c3c8:	2000      	movs	r0, #0
 801c3ca:	4770      	bx	lr

0801c3cc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801c3cc:	b410      	push	{r4}
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801c3ce:	1c5c      	adds	r4, r3, #1
 801c3d0:	0864      	lsrs	r4, r4, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801c3d2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801c3d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 801c3da:	b144      	cbz	r4, 801c3ee <USB_WritePMA+0x22>
  {
    temp1 = *pBuf;
 801c3dc:	780b      	ldrb	r3, [r1, #0]
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 801c3de:	7848      	ldrb	r0, [r1, #1]
    *pdwVal = (uint16_t)temp2;
 801c3e0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 801c3e4:	f822 3b04 	strh.w	r3, [r2], #4

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 801c3e8:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 801c3ea:	3c01      	subs	r4, #1
 801c3ec:	e7f5      	b.n	801c3da <USB_WritePMA+0xe>
  }
}
 801c3ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c3f2:	4770      	bx	lr

0801c3f4 <USB_EPStartXfer>:
{
 801c3f4:	b570      	push	{r4, r5, r6, lr}
 801c3f6:	4605      	mov	r5, r0
 801c3f8:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 801c3fa:	7849      	ldrb	r1, [r1, #1]
 801c3fc:	2901      	cmp	r1, #1
 801c3fe:	d02f      	beq.n	801c460 <USB_EPStartXfer+0x6c>
    if (ep->xfer_len > ep->maxpacket)
 801c400:	69a2      	ldr	r2, [r4, #24]
 801c402:	6923      	ldr	r3, [r4, #16]
 801c404:	429a      	cmp	r2, r3
 801c406:	f240 80e9 	bls.w	801c5dc <USB_EPStartXfer+0x1e8>
      ep->xfer_len -= len;
 801c40a:	1ad2      	subs	r2, r2, r3
 801c40c:	61a2      	str	r2, [r4, #24]
    if (ep->doublebuffer == 0U)
 801c40e:	7b22      	ldrb	r2, [r4, #12]
 801c410:	2a00      	cmp	r2, #0
 801c412:	f040 80fe 	bne.w	801c612 <USB_EPStartXfer+0x21e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801c416:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 801c41a:	442a      	add	r2, r5
 801c41c:	7821      	ldrb	r1, [r4, #0]
 801c41e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 801c422:	2b00      	cmp	r3, #0
 801c424:	f040 80de 	bne.w	801c5e4 <USB_EPStartXfer+0x1f0>
 801c428:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 801c42c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801c430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801c434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801c438:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801c43c:	7822      	ldrb	r2, [r4, #0]
 801c43e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 801c442:	b29b      	uxth	r3, r3
 801c444:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801c448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801c44c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 801c450:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801c454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c458:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 801c45c:	2000      	movs	r0, #0
 801c45e:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 801c460:	69a2      	ldr	r2, [r4, #24]
 801c462:	6923      	ldr	r3, [r4, #16]
 801c464:	429a      	cmp	r2, r3
 801c466:	d91c      	bls.n	801c4a2 <USB_EPStartXfer+0xae>
      ep->xfer_len -= len;
 801c468:	1ad2      	subs	r2, r2, r3
 801c46a:	61a2      	str	r2, [r4, #24]
    if (ep->doublebuffer == 0U)
 801c46c:	7b22      	ldrb	r2, [r4, #12]
 801c46e:	b1e2      	cbz	r2, 801c4aa <USB_EPStartXfer+0xb6>
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801c470:	7822      	ldrb	r2, [r4, #0]
 801c472:	f835 0022 	ldrh.w	r0, [r5, r2, lsl #2]
 801c476:	f010 0f40 	tst.w	r0, #64	; 0x40
 801c47a:	d06c      	beq.n	801c556 <USB_EPStartXfer+0x162>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801c47c:	2900      	cmp	r1, #0
 801c47e:	d13b      	bne.n	801c4f8 <USB_EPStartXfer+0x104>
 801c480:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 801c484:	4429      	add	r1, r5
 801c486:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 801c48a:	b9f3      	cbnz	r3, 801c4ca <USB_EPStartXfer+0xd6>
 801c48c:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	; 0x40c
 801c490:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 801c494:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 801c498:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 801c49c:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 801c4a0:	e031      	b.n	801c506 <USB_EPStartXfer+0x112>
      ep->xfer_len = 0U;
 801c4a2:	2300      	movs	r3, #0
 801c4a4:	61a3      	str	r3, [r4, #24]
      len = ep->xfer_len;
 801c4a6:	4613      	mov	r3, r2
 801c4a8:	e7e0      	b.n	801c46c <USB_EPStartXfer+0x78>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801c4aa:	b29e      	uxth	r6, r3
 801c4ac:	4633      	mov	r3, r6
 801c4ae:	88e2      	ldrh	r2, [r4, #6]
 801c4b0:	6961      	ldr	r1, [r4, #20]
 801c4b2:	4628      	mov	r0, r5
 801c4b4:	f7ff ff8a 	bl	801c3cc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801c4b8:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 801c4bc:	442b      	add	r3, r5
 801c4be:	7822      	ldrb	r2, [r4, #0]
 801c4c0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801c4c4:	f8a3 6404 	strh.w	r6, [r3, #1028]	; 0x404
 801c4c8:	e034      	b.n	801c534 <USB_EPStartXfer+0x140>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801c4ca:	2b3e      	cmp	r3, #62	; 0x3e
 801c4cc:	d808      	bhi.n	801c4e0 <USB_EPStartXfer+0xec>
 801c4ce:	0859      	lsrs	r1, r3, #1
 801c4d0:	f013 0f01 	tst.w	r3, #1
 801c4d4:	d000      	beq.n	801c4d8 <USB_EPStartXfer+0xe4>
 801c4d6:	3101      	adds	r1, #1
 801c4d8:	0289      	lsls	r1, r1, #10
 801c4da:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 801c4de:	e012      	b.n	801c506 <USB_EPStartXfer+0x112>
 801c4e0:	0959      	lsrs	r1, r3, #5
 801c4e2:	f013 0f1f 	tst.w	r3, #31
 801c4e6:	d100      	bne.n	801c4ea <USB_EPStartXfer+0xf6>
 801c4e8:	3901      	subs	r1, #1
 801c4ea:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 801c4ee:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 801c4f2:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 801c4f6:	e006      	b.n	801c506 <USB_EPStartXfer+0x112>
 801c4f8:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 801c4fc:	4429      	add	r1, r5
 801c4fe:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 801c502:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
        pmabuffer = ep->pmaaddr1;
 801c506:	8962      	ldrh	r2, [r4, #10]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801c508:	b29b      	uxth	r3, r3
 801c50a:	6961      	ldr	r1, [r4, #20]
 801c50c:	4628      	mov	r0, r5
 801c50e:	f7ff ff5d 	bl	801c3cc <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 801c512:	7863      	ldrb	r3, [r4, #1]
 801c514:	2b00      	cmp	r3, #0
 801c516:	d150      	bne.n	801c5ba <USB_EPStartXfer+0x1c6>
 801c518:	7822      	ldrb	r2, [r4, #0]
 801c51a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 801c51e:	b29b      	uxth	r3, r3
 801c520:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801c524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801c528:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801c52c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801c530:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801c534:	7822      	ldrb	r2, [r4, #0]
 801c536:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 801c53a:	b29b      	uxth	r3, r3
 801c53c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801c540:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c544:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 801c548:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801c54c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c550:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 801c554:	e782      	b.n	801c45c <USB_EPStartXfer+0x68>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801c556:	bb39      	cbnz	r1, 801c5a8 <USB_EPStartXfer+0x1b4>
 801c558:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 801c55c:	4429      	add	r1, r5
 801c55e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 801c562:	b953      	cbnz	r3, 801c57a <USB_EPStartXfer+0x186>
 801c564:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 801c568:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 801c56c:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 801c570:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 801c574:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 801c578:	e01d      	b.n	801c5b6 <USB_EPStartXfer+0x1c2>
 801c57a:	2b3e      	cmp	r3, #62	; 0x3e
 801c57c:	d808      	bhi.n	801c590 <USB_EPStartXfer+0x19c>
 801c57e:	0859      	lsrs	r1, r3, #1
 801c580:	f013 0f01 	tst.w	r3, #1
 801c584:	d000      	beq.n	801c588 <USB_EPStartXfer+0x194>
 801c586:	3101      	adds	r1, #1
 801c588:	0289      	lsls	r1, r1, #10
 801c58a:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 801c58e:	e012      	b.n	801c5b6 <USB_EPStartXfer+0x1c2>
 801c590:	0959      	lsrs	r1, r3, #5
 801c592:	f013 0f1f 	tst.w	r3, #31
 801c596:	d100      	bne.n	801c59a <USB_EPStartXfer+0x1a6>
 801c598:	3901      	subs	r1, #1
 801c59a:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 801c59e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 801c5a2:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 801c5a6:	e006      	b.n	801c5b6 <USB_EPStartXfer+0x1c2>
 801c5a8:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 801c5ac:	4429      	add	r1, r5
 801c5ae:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 801c5b2:	f8a2 3404 	strh.w	r3, [r2, #1028]	; 0x404
        pmabuffer = ep->pmaaddr0;
 801c5b6:	8922      	ldrh	r2, [r4, #8]
 801c5b8:	e7a6      	b.n	801c508 <USB_EPStartXfer+0x114>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 801c5ba:	2b01      	cmp	r3, #1
 801c5bc:	d1ba      	bne.n	801c534 <USB_EPStartXfer+0x140>
 801c5be:	7822      	ldrb	r2, [r4, #0]
 801c5c0:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 801c5c4:	b29b      	uxth	r3, r3
 801c5c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801c5ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801c5ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801c5d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c5d6:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 801c5da:	e7ab      	b.n	801c534 <USB_EPStartXfer+0x140>
      ep->xfer_len = 0U;
 801c5dc:	2300      	movs	r3, #0
 801c5de:	61a3      	str	r3, [r4, #24]
      len = ep->xfer_len;
 801c5e0:	4613      	mov	r3, r2
 801c5e2:	e714      	b.n	801c40e <USB_EPStartXfer+0x1a>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801c5e4:	2b3e      	cmp	r3, #62	; 0x3e
 801c5e6:	d808      	bhi.n	801c5fa <USB_EPStartXfer+0x206>
 801c5e8:	0859      	lsrs	r1, r3, #1
 801c5ea:	f013 0f01 	tst.w	r3, #1
 801c5ee:	d000      	beq.n	801c5f2 <USB_EPStartXfer+0x1fe>
 801c5f0:	3101      	adds	r1, #1
 801c5f2:	0289      	lsls	r1, r1, #10
 801c5f4:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 801c5f8:	e720      	b.n	801c43c <USB_EPStartXfer+0x48>
 801c5fa:	0959      	lsrs	r1, r3, #5
 801c5fc:	f013 0f1f 	tst.w	r3, #31
 801c600:	d100      	bne.n	801c604 <USB_EPStartXfer+0x210>
 801c602:	3901      	subs	r1, #1
 801c604:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 801c608:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 801c60c:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 801c610:	e714      	b.n	801c43c <USB_EPStartXfer+0x48>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801c612:	b981      	cbnz	r1, 801c636 <USB_EPStartXfer+0x242>
 801c614:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 801c618:	442a      	add	r2, r5
 801c61a:	7821      	ldrb	r1, [r4, #0]
 801c61c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 801c620:	b9f3      	cbnz	r3, 801c660 <USB_EPStartXfer+0x26c>
 801c622:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 801c626:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 801c62a:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 801c62e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 801c632:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 801c636:	7862      	ldrb	r2, [r4, #1]
 801c638:	2a00      	cmp	r2, #0
 801c63a:	d13f      	bne.n	801c6bc <USB_EPStartXfer+0x2c8>
 801c63c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 801c640:	442a      	add	r2, r5
 801c642:	7821      	ldrb	r1, [r4, #0]
 801c644:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 801c648:	bb0b      	cbnz	r3, 801c68e <USB_EPStartXfer+0x29a>
 801c64a:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 801c64e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801c652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801c656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801c65a:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 801c65e:	e6ed      	b.n	801c43c <USB_EPStartXfer+0x48>
 801c660:	2b3e      	cmp	r3, #62	; 0x3e
 801c662:	d808      	bhi.n	801c676 <USB_EPStartXfer+0x282>
 801c664:	0859      	lsrs	r1, r3, #1
 801c666:	f013 0f01 	tst.w	r3, #1
 801c66a:	d000      	beq.n	801c66e <USB_EPStartXfer+0x27a>
 801c66c:	3101      	adds	r1, #1
 801c66e:	0289      	lsls	r1, r1, #10
 801c670:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 801c674:	e7df      	b.n	801c636 <USB_EPStartXfer+0x242>
 801c676:	0959      	lsrs	r1, r3, #5
 801c678:	f013 0f1f 	tst.w	r3, #31
 801c67c:	d100      	bne.n	801c680 <USB_EPStartXfer+0x28c>
 801c67e:	3901      	subs	r1, #1
 801c680:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 801c684:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 801c688:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 801c68c:	e7d3      	b.n	801c636 <USB_EPStartXfer+0x242>
 801c68e:	2b3e      	cmp	r3, #62	; 0x3e
 801c690:	d808      	bhi.n	801c6a4 <USB_EPStartXfer+0x2b0>
 801c692:	0859      	lsrs	r1, r3, #1
 801c694:	f013 0f01 	tst.w	r3, #1
 801c698:	d000      	beq.n	801c69c <USB_EPStartXfer+0x2a8>
 801c69a:	3101      	adds	r1, #1
 801c69c:	0289      	lsls	r1, r1, #10
 801c69e:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 801c6a2:	e6cb      	b.n	801c43c <USB_EPStartXfer+0x48>
 801c6a4:	0959      	lsrs	r1, r3, #5
 801c6a6:	f013 0f1f 	tst.w	r3, #31
 801c6aa:	d100      	bne.n	801c6ae <USB_EPStartXfer+0x2ba>
 801c6ac:	3901      	subs	r1, #1
 801c6ae:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 801c6b2:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 801c6b6:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 801c6ba:	e6bf      	b.n	801c43c <USB_EPStartXfer+0x48>
 801c6bc:	2a01      	cmp	r2, #1
 801c6be:	f47f aebd 	bne.w	801c43c <USB_EPStartXfer+0x48>
 801c6c2:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 801c6c6:	442a      	add	r2, r5
 801c6c8:	7821      	ldrb	r1, [r4, #0]
 801c6ca:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 801c6ce:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 801c6d2:	e6b3      	b.n	801c43c <USB_EPStartXfer+0x48>

0801c6d4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801c6d4:	b410      	push	{r4}
  uint32_t n = (uint32_t)wNBytes >> 1;
 801c6d6:	085c      	lsrs	r4, r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801c6d8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801c6dc:	f500 6080 	add.w	r0, r0, #1024	; 0x400

  for (i = n; i != 0U; i--)
 801c6e0:	b13c      	cbz	r4, 801c6f2 <USB_ReadPMA+0x1e>
  {
    temp = *(__IO uint16_t *)pdwVal;
 801c6e2:	f830 2b04 	ldrh.w	r2, [r0], #4
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 801c6e6:	700a      	strb	r2, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 801c6e8:	0a12      	lsrs	r2, r2, #8
 801c6ea:	704a      	strb	r2, [r1, #1]
    pBuf++;
 801c6ec:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 801c6ee:	3c01      	subs	r4, #1
 801c6f0:	e7f6      	b.n	801c6e0 <USB_ReadPMA+0xc>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 801c6f2:	f013 0f01 	tst.w	r3, #1
 801c6f6:	d001      	beq.n	801c6fc <USB_ReadPMA+0x28>
  {
    temp = *pdwVal;
 801c6f8:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 801c6fa:	700b      	strb	r3, [r1, #0]
  }
}
 801c6fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c700:	4770      	bx	lr

0801c702 <UTILS_GetPLLOutputFrequency>:
  pllfreq = __LL_RCC_CALC_PLLCLK_FREQ(PLL_InputFrequency / (UTILS_PLLInitStruct->Prediv + 1U), UTILS_PLLInitStruct->PLLMul);
 801c702:	684b      	ldr	r3, [r1, #4]
 801c704:	3301      	adds	r3, #1
 801c706:	fbb0 f0f3 	udiv	r0, r0, r3
 801c70a:	680b      	ldr	r3, [r1, #0]
 801c70c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801c710:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 801c714:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 801c718:	b132      	cbz	r2, 801c728 <UTILS_GetPLLOutputFrequency+0x26>
  return __builtin_clz(value);
 801c71a:	fab2 f282 	clz	r2, r2
 801c71e:	40d3      	lsrs	r3, r2
 801c720:	3302      	adds	r3, #2
}
 801c722:	fb03 f000 	mul.w	r0, r3, r0
 801c726:	4770      	bx	lr
    return 32U;
 801c728:	2220      	movs	r2, #32
 801c72a:	e7f8      	b.n	801c71e <UTILS_GetPLLOutputFrequency+0x1c>

0801c72c <kscan_gpio_input_devices_0>:
 801c72c:	68c0      	ldr	r0, [r0, #12]
 801c72e:	3050      	adds	r0, #80	; 0x50
 801c730:	4770      	bx	lr

0801c732 <kscan_gpio_input_configs_0>:
 801c732:	6840      	ldr	r0, [r0, #4]
 801c734:	4770      	bx	lr

0801c736 <kscan_gpio_output_devices_0>:
 801c736:	68c0      	ldr	r0, [r0, #12]
 801c738:	3060      	adds	r0, #96	; 0x60
 801c73a:	4770      	bx	lr

0801c73c <kscan_gpio_output_configs_0>:
 801c73c:	6840      	ldr	r0, [r0, #4]
 801c73e:	3030      	adds	r0, #48	; 0x30
 801c740:	4770      	bx	lr

0801c742 <kscan_gpio_set_matrix_state_0>:
 801c742:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c746:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801c74a:	548b      	strb	r3, [r1, r2]
 801c74c:	4770      	bx	lr

0801c74e <kscan_gpio_enable_interrupts_0>:
 801c74e:	b538      	push	{r3, r4, r5, lr}
 801c750:	4605      	mov	r5, r0
 801c752:	f7ff ffeb 	bl	801c72c <kscan_gpio_input_devices_0>
 801c756:	4604      	mov	r4, r0
 801c758:	4628      	mov	r0, r5
 801c75a:	f7ff ffea 	bl	801c732 <kscan_gpio_input_configs_0>
 801c75e:	4601      	mov	r1, r0
 801c760:	f44f 2398 	mov.w	r3, #311296	; 0x4c000
 801c764:	2204      	movs	r2, #4
 801c766:	4620      	mov	r0, r4
 801c768:	f7f6 fb2c 	bl	8012dc4 <kscan_gpio_config_interrupts>
 801c76c:	bd38      	pop	{r3, r4, r5, pc}

0801c76e <kscan_gpio_disable_interrupts_0>:
 801c76e:	b538      	push	{r3, r4, r5, lr}
 801c770:	4605      	mov	r5, r0
 801c772:	f7ff ffdb 	bl	801c72c <kscan_gpio_input_devices_0>
 801c776:	4604      	mov	r4, r0
 801c778:	4628      	mov	r0, r5
 801c77a:	f7ff ffda 	bl	801c732 <kscan_gpio_input_configs_0>
 801c77e:	4601      	mov	r1, r0
 801c780:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801c784:	2204      	movs	r2, #4
 801c786:	4620      	mov	r0, r4
 801c788:	f7f6 fb1c 	bl	8012dc4 <kscan_gpio_config_interrupts>
 801c78c:	bd38      	pop	{r3, r4, r5, pc}

0801c78e <kscan_gpio_disable_0>:
 801c78e:	b508      	push	{r3, lr}
 801c790:	f7ff ffed 	bl	801c76e <kscan_gpio_disable_interrupts_0>
 801c794:	bd08      	pop	{r3, pc}

0801c796 <kscan_gpio_enable_0>:
 801c796:	b510      	push	{r4, lr}
 801c798:	4604      	mov	r4, r0
 801c79a:	f7ff ffd8 	bl	801c74e <kscan_gpio_enable_interrupts_0>
 801c79e:	b100      	cbz	r0, 801c7a2 <kscan_gpio_enable_0+0xc>
 801c7a0:	bd10      	pop	{r4, pc}
 801c7a2:	4620      	mov	r0, r4
 801c7a4:	f7f6 fbbe 	bl	8012f24 <kscan_gpio_read_0>
 801c7a8:	e7fa      	b.n	801c7a0 <kscan_gpio_enable_0+0xa>

0801c7aa <kscan_gpio_work_handler_0>:
 801c7aa:	b508      	push	{r3, lr}
 801c7ac:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801c7ae:	f7f6 fbb9 	bl	8012f24 <kscan_gpio_read_0>
 801c7b2:	bd08      	pop	{r3, pc}

0801c7b4 <arch_system_halt>:
	__asm__ volatile(
 801c7b4:	f04f 0210 	mov.w	r2, #16
 801c7b8:	f3ef 8311 	mrs	r3, BASEPRI
 801c7bc:	f382 8811 	msr	BASEPRI, r2
 801c7c0:	f3bf 8f6f 	isb	sy
	for (;;) {
 801c7c4:	e7fe      	b.n	801c7c4 <arch_system_halt+0x10>

0801c7c6 <k_heap_init>:
{
 801c7c6:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
 801c7c8:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
 801c7cc:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
 801c7ce:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
 801c7d0:	f7f9 f9b5 	bl	8015b3e <sys_heap_init>
}
 801c7d4:	bd10      	pop	{r4, pc}

0801c7d6 <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
 801c7d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7da:	b085      	sub	sp, #20
 801c7dc:	4680      	mov	r8, r0
 801c7de:	9103      	str	r1, [sp, #12]
	int64_t now, end = z_timeout_end_calc(timeout);
 801c7e0:	4610      	mov	r0, r2
 801c7e2:	4619      	mov	r1, r3
 801c7e4:	f000 fc36 	bl	801d054 <z_timeout_end_calc>
 801c7e8:	4681      	mov	r9, r0
 801c7ea:	468a      	mov	sl, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
 801c7ec:	f108 0b14 	add.w	fp, r8, #20
 801c7f0:	f04f 0310 	mov.w	r3, #16
 801c7f4:	f3ef 8511 	mrs	r5, BASEPRI
 801c7f8:	f383 8811 	msr	BASEPRI, r3
 801c7fc:	f3bf 8f6f 	isb	sy
	void *ret = NULL;
 801c800:	2400      	movs	r4, #0
 801c802:	e00f      	b.n	801c824 <k_heap_alloc+0x4e>
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
 801c804:	e9cd 6700 	strd	r6, r7, [sp]
 801c808:	f108 020c 	add.w	r2, r8, #12
 801c80c:	4629      	mov	r1, r5
 801c80e:	4658      	mov	r0, fp
 801c810:	f7f7 fd32 	bl	8014278 <z_pend_curr>
 801c814:	f04f 0310 	mov.w	r3, #16
 801c818:	f3ef 8511 	mrs	r5, BASEPRI
 801c81c:	f383 8811 	msr	BASEPRI, r3
 801c820:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
 801c824:	b97c      	cbnz	r4, 801c846 <k_heap_alloc+0x70>
		ret = sys_heap_alloc(&h->heap, bytes);
 801c826:	9903      	ldr	r1, [sp, #12]
 801c828:	4640      	mov	r0, r8
 801c82a:	f7f9 f946 	bl	8015aba <sys_heap_alloc>
 801c82e:	4604      	mov	r4, r0
		now = z_tick_get();
 801c830:	f7f8 f8a4 	bl	801497c <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
 801c834:	b93c      	cbnz	r4, 801c846 <k_heap_alloc+0x70>
 801c836:	ebb9 0600 	subs.w	r6, r9, r0
 801c83a:	eb6a 0701 	sbc.w	r7, sl, r1
 801c83e:	2e01      	cmp	r6, #1
 801c840:	f177 0300 	sbcs.w	r3, r7, #0
 801c844:	dade      	bge.n	801c804 <k_heap_alloc+0x2e>
	__asm__ volatile(
 801c846:	f385 8811 	msr	BASEPRI, r5
 801c84a:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
 801c84e:	4620      	mov	r0, r4
 801c850:	b005      	add	sp, #20
 801c852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c856 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
 801c856:	b570      	push	{r4, r5, r6, lr}
 801c858:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
 801c85a:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
 801c85e:	f04f 0310 	mov.w	r3, #16
 801c862:	f3ef 8511 	mrs	r5, BASEPRI
 801c866:	f383 8811 	msr	BASEPRI, r3
 801c86a:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
 801c86e:	f7f9 f909 	bl	8015a84 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
 801c872:	f104 000c 	add.w	r0, r4, #12
 801c876:	f000 fa88 	bl	801cd8a <z_unpend_all>
 801c87a:	b920      	cbnz	r0, 801c886 <k_heap_free+0x30>
	__asm__ volatile(
 801c87c:	f385 8811 	msr	BASEPRI, r5
 801c880:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
 801c884:	bd70      	pop	{r4, r5, r6, pc}
		z_reschedule(&h->lock, key);
 801c886:	4629      	mov	r1, r5
 801c888:	4630      	mov	r0, r6
 801c88a:	f7f7 fae9 	bl	8013e60 <z_reschedule>
 801c88e:	e7f9      	b.n	801c884 <k_heap_free+0x2e>

0801c890 <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
 801c890:	b538      	push	{r3, r4, r5, lr}
 801c892:	460d      	mov	r5, r1
 801c894:	4614      	mov	r4, r2
	block->id.heap = p->heap;
 801c896:	6800      	ldr	r0, [r0, #0]
 801c898:	6048      	str	r0, [r1, #4]
	block->data = k_heap_alloc(p->heap, size, timeout);
 801c89a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c89e:	4621      	mov	r1, r4
 801c8a0:	f7ff ff99 	bl	801c7d6 <k_heap_alloc>
 801c8a4:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
 801c8a6:	b164      	cbz	r4, 801c8c2 <k_mem_pool_alloc+0x32>
 801c8a8:	b108      	cbz	r0, 801c8ae <k_mem_pool_alloc+0x1e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
	} else {
		return 0;
 801c8aa:	2000      	movs	r0, #0
	}
}
 801c8ac:	bd38      	pop	{r3, r4, r5, pc}
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
 801c8ae:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801c8b2:	4323      	orrs	r3, r4
 801c8b4:	d102      	bne.n	801c8bc <k_mem_pool_alloc+0x2c>
 801c8b6:	f06f 000b 	mvn.w	r0, #11
 801c8ba:	e7f7      	b.n	801c8ac <k_mem_pool_alloc+0x1c>
 801c8bc:	f06f 000a 	mvn.w	r0, #10
 801c8c0:	e7f4      	b.n	801c8ac <k_mem_pool_alloc+0x1c>
		return 0;
 801c8c2:	2000      	movs	r0, #0
 801c8c4:	e7f2      	b.n	801c8ac <k_mem_pool_alloc+0x1c>

0801c8c6 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
 801c8c6:	b508      	push	{r3, lr}
	k_heap_free(id->heap, id->data);
 801c8c8:	6801      	ldr	r1, [r0, #0]
 801c8ca:	6840      	ldr	r0, [r0, #4]
 801c8cc:	f7ff ffc3 	bl	801c856 <k_heap_free>
}
 801c8d0:	bd08      	pop	{r3, pc}

0801c8d2 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 801c8d2:	68c2      	ldr	r2, [r0, #12]
 801c8d4:	6903      	ldr	r3, [r0, #16]
 801c8d6:	431a      	orrs	r2, r3
 801c8d8:	f012 0203 	ands.w	r2, r2, #3
 801c8dc:	d10d      	bne.n	801c8fa <create_free_list+0x28>
	slab->free_list = NULL;
 801c8de:	2100      	movs	r1, #0
 801c8e0:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
 801c8e2:	e005      	b.n	801c8f0 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
 801c8e4:	6941      	ldr	r1, [r0, #20]
 801c8e6:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
 801c8e8:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
 801c8ea:	68c1      	ldr	r1, [r0, #12]
 801c8ec:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
 801c8ee:	3201      	adds	r2, #1
 801c8f0:	6881      	ldr	r1, [r0, #8]
 801c8f2:	4291      	cmp	r1, r2
 801c8f4:	d8f6      	bhi.n	801c8e4 <create_free_list+0x12>
	return 0;
 801c8f6:	2000      	movs	r0, #0
 801c8f8:	4770      	bx	lr
		return -EINVAL;
 801c8fa:	f06f 0015 	mvn.w	r0, #21
}
 801c8fe:	4770      	bx	lr

0801c900 <k_mem_slab_init>:
{
 801c900:	b510      	push	{r4, lr}
 801c902:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
 801c904:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
 801c906:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
 801c908:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
 801c90a:	2300      	movs	r3, #0
 801c90c:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
 801c90e:	f7ff ffe0 	bl	801c8d2 <create_free_list>
	if (rc < 0) {
 801c912:	2800      	cmp	r0, #0
 801c914:	db01      	blt.n	801c91a <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
 801c916:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
 801c918:	6064      	str	r4, [r4, #4]
}
 801c91a:	bd10      	pop	{r4, pc}

0801c91c <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
 801c91c:	4288      	cmp	r0, r1
 801c91e:	da00      	bge.n	801c922 <new_prio_for_inheritance+0x6>
 801c920:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
 801c922:	2900      	cmp	r1, #0
 801c924:	db01      	blt.n	801c92a <new_prio_for_inheritance+0xe>
 801c926:	4608      	mov	r0, r1
 801c928:	4770      	bx	lr
 801c92a:	2000      	movs	r0, #0
}
 801c92c:	4770      	bx	lr

0801c92e <adjust_owner_prio>:
{
 801c92e:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
 801c930:	6880      	ldr	r0, [r0, #8]
 801c932:	f990 300e 	ldrsb.w	r3, [r0, #14]
 801c936:	428b      	cmp	r3, r1
 801c938:	d101      	bne.n	801c93e <adjust_owner_prio+0x10>
	return false;
 801c93a:	2000      	movs	r0, #0
}
 801c93c:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
 801c93e:	f7f7 fcaf 	bl	80142a0 <z_set_prio>
 801c942:	e7fb      	b.n	801c93c <adjust_owner_prio+0xe>

0801c944 <z_impl_k_mutex_init>:
{
 801c944:	4603      	mov	r3, r0
	mutex->owner = NULL;
 801c946:	2000      	movs	r0, #0
 801c948:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
 801c94a:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
 801c94c:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
 801c94e:	605b      	str	r3, [r3, #4]
}
 801c950:	4770      	bx	lr

0801c952 <prepare_thread_to_run>:
{
 801c952:	b508      	push	{r3, lr}
 801c954:	2200      	movs	r2, #0
 801c956:	6702      	str	r2, [r0, #112]	; 0x70
 801c958:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
 801c95a:	f000 f94b 	bl	801cbf4 <z_ready_thread>
}
 801c95e:	bd08      	pop	{r3, pc}

0801c960 <queue_insert>:
{
 801c960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c964:	4607      	mov	r7, r0
 801c966:	4688      	mov	r8, r1
 801c968:	4614      	mov	r4, r2
 801c96a:	461d      	mov	r5, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
 801c96c:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
 801c970:	f04f 0310 	mov.w	r3, #16
 801c974:	f3ef 8911 	mrs	r9, BASEPRI
 801c978:	f383 8811 	msr	BASEPRI, r3
 801c97c:	f3bf 8f6f 	isb	sy
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
 801c980:	4630      	mov	r0, r6
 801c982:	f000 f9c7 	bl	801cd14 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
 801c986:	b9b8      	cbnz	r0, 801c9b8 <queue_insert+0x58>
	if (alloc) {
 801c988:	b9fd      	cbnz	r5, 801c9ca <queue_insert+0x6a>
	node->next_and_flags = flags;
 801c98a:	2300      	movs	r3, #0
 801c98c:	6023      	str	r3, [r4, #0]
Z_GENLIST_INSERT(sflist, sfnode)
 801c98e:	f1b8 0f00 	cmp.w	r8, #0
 801c992:	d02a      	beq.n	801c9ea <queue_insert+0x8a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 801c994:	f8d8 3000 	ldr.w	r3, [r8]
Z_GENLIST_INSERT(sflist, sfnode)
 801c998:	f033 0303 	bics.w	r3, r3, #3
 801c99c:	d133      	bne.n	801ca06 <queue_insert+0xa6>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 801c99e:	6823      	ldr	r3, [r4, #0]
 801c9a0:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
 801c9a4:	6023      	str	r3, [r4, #0]
	return list->tail;
 801c9a6:	687a      	ldr	r2, [r7, #4]
Z_GENLIST_APPEND(sflist, sfnode)
 801c9a8:	b352      	cbz	r2, 801ca00 <queue_insert+0xa0>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 801c9aa:	6813      	ldr	r3, [r2, #0]
 801c9ac:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
 801c9b0:	4323      	orrs	r3, r4
 801c9b2:	6013      	str	r3, [r2, #0]
	list->tail = node;
 801c9b4:	607c      	str	r4, [r7, #4]
}
 801c9b6:	e032      	b.n	801ca1e <queue_insert+0xbe>
		prepare_thread_to_run(first_pending_thread, data);
 801c9b8:	4621      	mov	r1, r4
 801c9ba:	f7ff ffca 	bl	801c952 <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
 801c9be:	4649      	mov	r1, r9
 801c9c0:	4630      	mov	r0, r6
 801c9c2:	f7f7 fa4d 	bl	8013e60 <z_reschedule>
		return 0;
 801c9c6:	2000      	movs	r0, #0
 801c9c8:	e033      	b.n	801ca32 <queue_insert+0xd2>
		anode = z_thread_malloc(sizeof(*anode));
 801c9ca:	2008      	movs	r0, #8
 801c9cc:	f7f8 fac8 	bl	8014f60 <z_thread_malloc>
		if (anode == NULL) {
 801c9d0:	b120      	cbz	r0, 801c9dc <queue_insert+0x7c>
		anode->data = data;
 801c9d2:	6044      	str	r4, [r0, #4]
	node->next_and_flags = flags;
 801c9d4:	2201      	movs	r2, #1
 801c9d6:	6002      	str	r2, [r0, #0]
		data = anode;
 801c9d8:	4604      	mov	r4, r0
 801c9da:	e7d8      	b.n	801c98e <queue_insert+0x2e>
	__asm__ volatile(
 801c9dc:	f389 8811 	msr	BASEPRI, r9
 801c9e0:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
 801c9e4:	f06f 000b 	mvn.w	r0, #11
 801c9e8:	e023      	b.n	801ca32 <queue_insert+0xd2>
	return list->head;
 801c9ea:	683a      	ldr	r2, [r7, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 801c9ec:	6823      	ldr	r3, [r4, #0]
 801c9ee:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
 801c9f2:	4313      	orrs	r3, r2
 801c9f4:	6023      	str	r3, [r4, #0]
	list->head = node;
 801c9f6:	603c      	str	r4, [r7, #0]
	return list->tail;
 801c9f8:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
 801c9fa:	b983      	cbnz	r3, 801ca1e <queue_insert+0xbe>
	list->tail = node;
 801c9fc:	607c      	str	r4, [r7, #4]
}
 801c9fe:	e00e      	b.n	801ca1e <queue_insert+0xbe>
	list->tail = node;
 801ca00:	607c      	str	r4, [r7, #4]
	list->head = node;
 801ca02:	603c      	str	r4, [r7, #0]
}
 801ca04:	e00b      	b.n	801ca1e <queue_insert+0xbe>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 801ca06:	6822      	ldr	r2, [r4, #0]
 801ca08:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
 801ca0c:	4313      	orrs	r3, r2
 801ca0e:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 801ca10:	f8d8 3000 	ldr.w	r3, [r8]
 801ca14:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
 801ca18:	431c      	orrs	r4, r3
 801ca1a:	f8c8 4000 	str.w	r4, [r8]
	z_handle_obj_poll_events(&queue->poll_events, state);
 801ca1e:	2104      	movs	r1, #4
 801ca20:	f107 0010 	add.w	r0, r7, #16
 801ca24:	f000 fbd9 	bl	801d1da <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
 801ca28:	4649      	mov	r1, r9
 801ca2a:	4630      	mov	r0, r6
 801ca2c:	f7f7 fa18 	bl	8013e60 <z_reschedule>
	return 0;
 801ca30:	2000      	movs	r0, #0
}
 801ca32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801ca36 <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
 801ca36:	b160      	cbz	r0, 801ca52 <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 801ca38:	6803      	ldr	r3, [r0, #0]
 801ca3a:	f013 0f03 	tst.w	r3, #3
 801ca3e:	d008      	beq.n	801ca52 <z_queue_node_peek+0x1c>
{
 801ca40:	b510      	push	{r4, lr}
		ret = anode->data;
 801ca42:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
 801ca44:	b909      	cbnz	r1, 801ca4a <z_queue_node_peek+0x14>
		ret = anode->data;
 801ca46:	4620      	mov	r0, r4
}
 801ca48:	bd10      	pop	{r4, pc}
			k_free(anode);
 801ca4a:	f000 fbf6 	bl	801d23a <k_free>
		ret = anode->data;
 801ca4e:	4620      	mov	r0, r4
 801ca50:	e7fa      	b.n	801ca48 <z_queue_node_peek+0x12>
}
 801ca52:	4770      	bx	lr

0801ca54 <z_impl_k_queue_init>:
	list->head = NULL;
 801ca54:	2300      	movs	r3, #0
 801ca56:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
 801ca58:	6043      	str	r3, [r0, #4]
 801ca5a:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
 801ca5e:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
 801ca60:	60c3      	str	r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
 801ca62:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
 801ca66:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
 801ca68:	6143      	str	r3, [r0, #20]
}
 801ca6a:	4770      	bx	lr

0801ca6c <k_queue_append>:
{
 801ca6c:	b508      	push	{r3, lr}
 801ca6e:	460a      	mov	r2, r1
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
 801ca70:	2300      	movs	r3, #0
 801ca72:	6841      	ldr	r1, [r0, #4]
 801ca74:	f7ff ff74 	bl	801c960 <queue_insert>
}
 801ca78:	bd08      	pop	{r3, pc}

0801ca7a <k_queue_prepend>:
{
 801ca7a:	b508      	push	{r3, lr}
 801ca7c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false);
 801ca7e:	2300      	movs	r3, #0
 801ca80:	4619      	mov	r1, r3
 801ca82:	f7ff ff6d 	bl	801c960 <queue_insert>
}
 801ca86:	bd08      	pop	{r3, pc}

0801ca88 <k_queue_append_list>:
	CHECKIF(head == NULL || tail == NULL) {
 801ca88:	b3a1      	cbz	r1, 801caf4 <k_queue_append_list+0x6c>
{
 801ca8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca8e:	4606      	mov	r6, r0
 801ca90:	4617      	mov	r7, r2
 801ca92:	460c      	mov	r4, r1
	CHECKIF(head == NULL || tail == NULL) {
 801ca94:	b38a      	cbz	r2, 801cafa <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
 801ca96:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
 801ca9a:	f04f 0310 	mov.w	r3, #16
 801ca9e:	f3ef 8811 	mrs	r8, BASEPRI
 801caa2:	f383 8811 	msr	BASEPRI, r3
 801caa6:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
 801caaa:	4628      	mov	r0, r5
 801caac:	f000 f932 	bl	801cd14 <z_unpend_first_thread>
 801cab0:	e006      	b.n	801cac0 <k_queue_append_list+0x38>
		prepare_thread_to_run(thread, head);
 801cab2:	4621      	mov	r1, r4
 801cab4:	f7ff ff4d 	bl	801c952 <prepare_thread_to_run>
		head = *(void **)head;
 801cab8:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
 801caba:	4628      	mov	r0, r5
 801cabc:	f000 f92a 	bl	801cd14 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
 801cac0:	b10c      	cbz	r4, 801cac6 <k_queue_append_list+0x3e>
 801cac2:	2800      	cmp	r0, #0
 801cac4:	d1f5      	bne.n	801cab2 <k_queue_append_list+0x2a>
	if (head != NULL) {
 801cac6:	b13c      	cbz	r4, 801cad8 <k_queue_append_list+0x50>
	return list->tail;
 801cac8:	6872      	ldr	r2, [r6, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
 801caca:	b18a      	cbz	r2, 801caf0 <k_queue_append_list+0x68>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 801cacc:	6813      	ldr	r3, [r2, #0]
 801cace:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
 801cad2:	431c      	orrs	r4, r3
 801cad4:	6014      	str	r4, [r2, #0]
	list->tail = node;
 801cad6:	6077      	str	r7, [r6, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
 801cad8:	2104      	movs	r1, #4
 801cada:	f106 0010 	add.w	r0, r6, #16
 801cade:	f000 fb7c 	bl	801d1da <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
 801cae2:	4641      	mov	r1, r8
 801cae4:	4628      	mov	r0, r5
 801cae6:	f7f7 f9bb 	bl	8013e60 <z_reschedule>
	return 0;
 801caea:	2000      	movs	r0, #0
}
 801caec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	list->head = node;
 801caf0:	6034      	str	r4, [r6, #0]
}
 801caf2:	e7f0      	b.n	801cad6 <k_queue_append_list+0x4e>
		return -EINVAL;
 801caf4:	f06f 0015 	mvn.w	r0, #21
}
 801caf8:	4770      	bx	lr
		return -EINVAL;
 801cafa:	f06f 0015 	mvn.w	r0, #21
 801cafe:	e7f5      	b.n	801caec <k_queue_append_list+0x64>

0801cb00 <pended_on>:
}
 801cb00:	6880      	ldr	r0, [r0, #8]
 801cb02:	4770      	bx	lr

0801cb04 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
 801cb04:	f990 200e 	ldrsb.w	r2, [r0, #14]
 801cb08:	f991 300e 	ldrsb.w	r3, [r1, #14]
 801cb0c:	429a      	cmp	r2, r3
 801cb0e:	db01      	blt.n	801cb14 <z_is_t1_higher_prio_than_t2+0x10>
	return false;
 801cb10:	2000      	movs	r0, #0
 801cb12:	4770      	bx	lr
		return true;
 801cb14:	2001      	movs	r0, #1
}
 801cb16:	4770      	bx	lr

0801cb18 <z_find_first_thread_to_unpend>:
{
 801cb18:	b538      	push	{r3, r4, r5, lr}
 801cb1a:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
 801cb1c:	2300      	movs	r3, #0
 801cb1e:	f04f 0210 	mov.w	r2, #16
 801cb22:	f3ef 8411 	mrs	r4, BASEPRI
 801cb26:	f382 8811 	msr	BASEPRI, r2
 801cb2a:	f3bf 8f6f 	isb	sy
	struct k_thread *ret = NULL;
 801cb2e:	4618      	mov	r0, r3
	LOCKED(&sched_spinlock) {
 801cb30:	b943      	cbnz	r3, 801cb44 <z_find_first_thread_to_unpend+0x2c>
		ret = _priq_wait_best(&wait_q->waitq);
 801cb32:	4628      	mov	r0, r5
 801cb34:	f000 f857 	bl	801cbe6 <z_priq_dumb_best>
	__asm__ volatile(
 801cb38:	f384 8811 	msr	BASEPRI, r4
 801cb3c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 801cb40:	2301      	movs	r3, #1
 801cb42:	e7f5      	b.n	801cb30 <z_find_first_thread_to_unpend+0x18>
}
 801cb44:	bd38      	pop	{r3, r4, r5, pc}

0801cb46 <z_unpend_thread_no_timeout>:
{
 801cb46:	b538      	push	{r3, r4, r5, lr}
 801cb48:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 801cb4a:	2300      	movs	r3, #0
	__asm__ volatile(
 801cb4c:	f04f 0210 	mov.w	r2, #16
 801cb50:	f3ef 8511 	mrs	r5, BASEPRI
 801cb54:	f382 8811 	msr	BASEPRI, r2
 801cb58:	f3bf 8f6f 	isb	sy
 801cb5c:	b98b      	cbnz	r3, 801cb82 <z_unpend_thread_no_timeout+0x3c>
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
 801cb5e:	4620      	mov	r0, r4
 801cb60:	f7ff ffce 	bl	801cb00 <pended_on>
 801cb64:	4621      	mov	r1, r4
 801cb66:	f7f7 f9ad 	bl	8013ec4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 801cb6a:	7b63      	ldrb	r3, [r4, #13]
 801cb6c:	f023 0302 	bic.w	r3, r3, #2
 801cb70:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 801cb72:	2300      	movs	r3, #0
 801cb74:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 801cb76:	f385 8811 	msr	BASEPRI, r5
 801cb7a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 801cb7e:	2301      	movs	r3, #1
 801cb80:	e7ec      	b.n	801cb5c <z_unpend_thread_no_timeout+0x16>
}
 801cb82:	bd38      	pop	{r3, r4, r5, pc}

0801cb84 <z_reschedule_irqlock>:
{
 801cb84:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 801cb86:	4603      	mov	r3, r0
 801cb88:	b928      	cbnz	r0, 801cb96 <z_reschedule_irqlock+0x12>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801cb8a:	f3ef 8205 	mrs	r2, IPSR
 801cb8e:	b912      	cbnz	r2, 801cb96 <z_reschedule_irqlock+0x12>
 801cb90:	f7ec f88a 	bl	8008ca8 <arch_swap>
	return ret;
 801cb94:	e003      	b.n	801cb9e <z_reschedule_irqlock+0x1a>
 801cb96:	f383 8811 	msr	BASEPRI, r3
 801cb9a:	f3bf 8f6f 	isb	sy
}
 801cb9e:	bd08      	pop	{r3, pc}

0801cba0 <z_unpend_thread>:
{
 801cba0:	b538      	push	{r3, r4, r5, lr}
 801cba2:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 801cba4:	2300      	movs	r3, #0
	__asm__ volatile(
 801cba6:	f04f 0210 	mov.w	r2, #16
 801cbaa:	f3ef 8511 	mrs	r5, BASEPRI
 801cbae:	f382 8811 	msr	BASEPRI, r2
 801cbb2:	f3bf 8f6f 	isb	sy
 801cbb6:	b98b      	cbnz	r3, 801cbdc <z_unpend_thread+0x3c>
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
 801cbb8:	4620      	mov	r0, r4
 801cbba:	f7ff ffa1 	bl	801cb00 <pended_on>
 801cbbe:	4621      	mov	r1, r4
 801cbc0:	f7f7 f980 	bl	8013ec4 <z_priq_dumb_remove>
 801cbc4:	7b63      	ldrb	r3, [r4, #13]
 801cbc6:	f023 0302 	bic.w	r3, r3, #2
 801cbca:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 801cbcc:	2300      	movs	r3, #0
 801cbce:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 801cbd0:	f385 8811 	msr	BASEPRI, r5
 801cbd4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 801cbd8:	2301      	movs	r3, #1
 801cbda:	e7ec      	b.n	801cbb6 <z_unpend_thread+0x16>
	return z_abort_timeout(&thread->base.timeout);
 801cbdc:	f104 0018 	add.w	r0, r4, #24
 801cbe0:	f000 f9d7 	bl	801cf92 <z_abort_timeout>
}
 801cbe4:	bd38      	pop	{r3, r4, r5, pc}

0801cbe6 <z_priq_dumb_best>:
{
 801cbe6:	4603      	mov	r3, r0
	return list->head == list;
 801cbe8:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 801cbea:	4283      	cmp	r3, r0
 801cbec:	d000      	beq.n	801cbf0 <z_priq_dumb_best+0xa>
}
 801cbee:	4770      	bx	lr
	struct k_thread *thread = NULL;
 801cbf0:	2000      	movs	r0, #0
	return thread;
 801cbf2:	e7fc      	b.n	801cbee <z_priq_dumb_best+0x8>

0801cbf4 <z_ready_thread>:
{
 801cbf4:	b538      	push	{r3, r4, r5, lr}
 801cbf6:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
 801cbf8:	2300      	movs	r3, #0
	__asm__ volatile(
 801cbfa:	f04f 0210 	mov.w	r2, #16
 801cbfe:	f3ef 8411 	mrs	r4, BASEPRI
 801cc02:	f382 8811 	msr	BASEPRI, r2
 801cc06:	f3bf 8f6f 	isb	sy
 801cc0a:	b943      	cbnz	r3, 801cc1e <z_ready_thread+0x2a>
		ready_thread(thread);
 801cc0c:	4628      	mov	r0, r5
 801cc0e:	f7f7 f9c1 	bl	8013f94 <ready_thread>
	__asm__ volatile(
 801cc12:	f384 8811 	msr	BASEPRI, r4
 801cc16:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 801cc1a:	2301      	movs	r3, #1
 801cc1c:	e7f5      	b.n	801cc0a <z_ready_thread+0x16>
}
 801cc1e:	bd38      	pop	{r3, r4, r5, pc}

0801cc20 <z_thread_timeout>:
{
 801cc20:	b570      	push	{r4, r5, r6, lr}
 801cc22:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
 801cc24:	2300      	movs	r3, #0
	__asm__ volatile(
 801cc26:	f04f 0210 	mov.w	r2, #16
 801cc2a:	f3ef 8611 	mrs	r6, BASEPRI
 801cc2e:	f382 8811 	msr	BASEPRI, r2
 801cc32:	f3bf 8f6f 	isb	sy
 801cc36:	e019      	b.n	801cc6c <z_thread_timeout+0x4c>
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
 801cc38:	4620      	mov	r0, r4
 801cc3a:	f7ff ff61 	bl	801cb00 <pended_on>
 801cc3e:	4621      	mov	r1, r4
 801cc40:	f7f7 f940 	bl	8013ec4 <z_priq_dumb_remove>
 801cc44:	7b63      	ldrb	r3, [r4, #13]
 801cc46:	f023 0302 	bic.w	r3, r3, #2
 801cc4a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 801cc4c:	2300      	movs	r3, #0
 801cc4e:	60a3      	str	r3, [r4, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
 801cc50:	f815 3c0b 	ldrb.w	r3, [r5, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 801cc54:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
 801cc58:	f805 3c0b 	strb.w	r3, [r5, #-11]
		ready_thread(thread);
 801cc5c:	4620      	mov	r0, r4
 801cc5e:	f7f7 f999 	bl	8013f94 <ready_thread>
	__asm__ volatile(
 801cc62:	f386 8811 	msr	BASEPRI, r6
 801cc66:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 801cc6a:	2301      	movs	r3, #1
 801cc6c:	b933      	cbnz	r3, 801cc7c <z_thread_timeout+0x5c>
		struct k_thread *thread = CONTAINER_OF(timeout,
 801cc6e:	f1a5 0418 	sub.w	r4, r5, #24
		if (thread->base.pended_on != NULL) {
 801cc72:	f855 3c10 	ldr.w	r3, [r5, #-16]
 801cc76:	2b00      	cmp	r3, #0
 801cc78:	d1de      	bne.n	801cc38 <z_thread_timeout+0x18>
 801cc7a:	e7e9      	b.n	801cc50 <z_thread_timeout+0x30>
}
 801cc7c:	bd70      	pop	{r4, r5, r6, pc}

0801cc7e <add_to_waitq_locked>:
{
 801cc7e:	b570      	push	{r4, r5, r6, lr}
 801cc80:	4605      	mov	r5, r0
 801cc82:	460e      	mov	r6, r1
	unready_thread(thread);
 801cc84:	f7f7 fadc 	bl	8014240 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 801cc88:	7b6b      	ldrb	r3, [r5, #13]
 801cc8a:	f043 0302 	orr.w	r3, r3, #2
 801cc8e:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
 801cc90:	b1ae      	cbz	r6, 801ccbe <add_to_waitq_locked+0x40>
		thread->base.pended_on = wait_q;
 801cc92:	60ae      	str	r6, [r5, #8]
	return list->head == list;
 801cc94:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 801cc96:	42a6      	cmp	r6, r4
 801cc98:	d019      	beq.n	801ccce <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 801cc9a:	b15c      	cbz	r4, 801ccb4 <add_to_waitq_locked+0x36>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
 801cc9c:	4621      	mov	r1, r4
 801cc9e:	4628      	mov	r0, r5
 801cca0:	f7ff ff30 	bl	801cb04 <z_is_t1_higher_prio_than_t2>
 801cca4:	b960      	cbnz	r0, 801ccc0 <add_to_waitq_locked+0x42>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 801cca6:	b12c      	cbz	r4, 801ccb4 <add_to_waitq_locked+0x36>
	return (node == list->tail) ? NULL : node->next;
 801cca8:	6873      	ldr	r3, [r6, #4]
 801ccaa:	429c      	cmp	r4, r3
 801ccac:	d002      	beq.n	801ccb4 <add_to_waitq_locked+0x36>
 801ccae:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 801ccb0:	2c00      	cmp	r4, #0
 801ccb2:	d1f2      	bne.n	801cc9a <add_to_waitq_locked+0x1c>
	node->next = list;
 801ccb4:	602e      	str	r6, [r5, #0]
	node->prev = list->tail;
 801ccb6:	6873      	ldr	r3, [r6, #4]
 801ccb8:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
 801ccba:	601d      	str	r5, [r3, #0]
	list->tail = node;
 801ccbc:	6075      	str	r5, [r6, #4]
}
 801ccbe:	bd70      	pop	{r4, r5, r6, pc}
	node->prev = successor->prev;
 801ccc0:	6863      	ldr	r3, [r4, #4]
 801ccc2:	606b      	str	r3, [r5, #4]
	node->next = successor;
 801ccc4:	602c      	str	r4, [r5, #0]
	successor->prev->next = node;
 801ccc6:	6863      	ldr	r3, [r4, #4]
 801ccc8:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 801ccca:	6065      	str	r5, [r4, #4]
}
 801cccc:	e7f7      	b.n	801ccbe <add_to_waitq_locked+0x40>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 801ccce:	2400      	movs	r4, #0
 801ccd0:	e7e3      	b.n	801cc9a <add_to_waitq_locked+0x1c>

0801ccd2 <pend>:
{
 801ccd2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ccd6:	4605      	mov	r5, r0
 801ccd8:	460f      	mov	r7, r1
 801ccda:	4691      	mov	r9, r2
 801ccdc:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
 801ccde:	2400      	movs	r4, #0
	__asm__ volatile(
 801cce0:	f04f 0310 	mov.w	r3, #16
 801cce4:	f3ef 8611 	mrs	r6, BASEPRI
 801cce8:	f383 8811 	msr	BASEPRI, r3
 801ccec:	f3bf 8f6f 	isb	sy
 801ccf0:	b94c      	cbnz	r4, 801cd06 <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
 801ccf2:	4639      	mov	r1, r7
 801ccf4:	4628      	mov	r0, r5
 801ccf6:	f7ff ffc2 	bl	801cc7e <add_to_waitq_locked>
	__asm__ volatile(
 801ccfa:	f386 8811 	msr	BASEPRI, r6
 801ccfe:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 801cd02:	2401      	movs	r4, #1
 801cd04:	e7f4      	b.n	801ccf0 <pend+0x1e>
	add_thread_timeout(thread, timeout);
 801cd06:	464a      	mov	r2, r9
 801cd08:	4643      	mov	r3, r8
 801cd0a:	4628      	mov	r0, r5
 801cd0c:	f7f7 f85c 	bl	8013dc8 <add_thread_timeout>
}
 801cd10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801cd14 <z_unpend_first_thread>:
{
 801cd14:	b570      	push	{r4, r5, r6, lr}
 801cd16:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
 801cd18:	2300      	movs	r3, #0
	__asm__ volatile(
 801cd1a:	f04f 0210 	mov.w	r2, #16
 801cd1e:	f3ef 8511 	mrs	r5, BASEPRI
 801cd22:	f382 8811 	msr	BASEPRI, r2
 801cd26:	f3bf 8f6f 	isb	sy
	struct k_thread *ret = NULL;
 801cd2a:	461c      	mov	r4, r3
	LOCKED(&sched_spinlock) {
 801cd2c:	b94b      	cbnz	r3, 801cd42 <z_unpend_first_thread+0x2e>
		ret = _priq_wait_best(&wait_q->waitq);
 801cd2e:	4630      	mov	r0, r6
 801cd30:	f7ff ff59 	bl	801cbe6 <z_priq_dumb_best>
 801cd34:	4604      	mov	r4, r0
	__asm__ volatile(
 801cd36:	f385 8811 	msr	BASEPRI, r5
 801cd3a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 801cd3e:	2301      	movs	r3, #1
 801cd40:	e7f4      	b.n	801cd2c <z_unpend_first_thread+0x18>

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
 801cd42:	b1dc      	cbz	r4, 801cd7c <z_unpend_first_thread+0x68>
	LOCKED(&sched_spinlock) {
 801cd44:	2300      	movs	r3, #0
	__asm__ volatile(
 801cd46:	f04f 0210 	mov.w	r2, #16
 801cd4a:	f3ef 8511 	mrs	r5, BASEPRI
 801cd4e:	f382 8811 	msr	BASEPRI, r2
 801cd52:	f3bf 8f6f 	isb	sy
 801cd56:	b98b      	cbnz	r3, 801cd7c <z_unpend_first_thread+0x68>
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
 801cd58:	4620      	mov	r0, r4
 801cd5a:	f7ff fed1 	bl	801cb00 <pended_on>
 801cd5e:	4621      	mov	r1, r4
 801cd60:	f7f7 f8b0 	bl	8013ec4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 801cd64:	7b63      	ldrb	r3, [r4, #13]
 801cd66:	f023 0302 	bic.w	r3, r3, #2
 801cd6a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 801cd6c:	2300      	movs	r3, #0
 801cd6e:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 801cd70:	f385 8811 	msr	BASEPRI, r5
 801cd74:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 801cd78:	2301      	movs	r3, #1
 801cd7a:	e7ec      	b.n	801cd56 <z_unpend_first_thread+0x42>
	if (thread != NULL) {
 801cd7c:	b11c      	cbz	r4, 801cd86 <z_unpend_first_thread+0x72>
 801cd7e:	f104 0018 	add.w	r0, r4, #24
 801cd82:	f000 f906 	bl	801cf92 <z_abort_timeout>
}
 801cd86:	4620      	mov	r0, r4
 801cd88:	bd70      	pop	{r4, r5, r6, pc}

0801cd8a <z_unpend_all>:
{
 801cd8a:	b538      	push	{r3, r4, r5, lr}
 801cd8c:	4605      	mov	r5, r0
	int need_sched = 0;
 801cd8e:	2000      	movs	r0, #0
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 801cd90:	e006      	b.n	801cda0 <z_unpend_all+0x16>
		z_unpend_thread(thread);
 801cd92:	4620      	mov	r0, r4
 801cd94:	f7ff ff04 	bl	801cba0 <z_unpend_thread>
		z_ready_thread(thread);
 801cd98:	4620      	mov	r0, r4
 801cd9a:	f7ff ff2b 	bl	801cbf4 <z_ready_thread>
		need_sched = 1;
 801cd9e:	2001      	movs	r0, #1
	return list->head == list;
 801cda0:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 801cda2:	42a5      	cmp	r5, r4
 801cda4:	d001      	beq.n	801cdaa <z_unpend_all+0x20>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 801cda6:	2c00      	cmp	r4, #0
 801cda8:	d1f3      	bne.n	801cd92 <z_unpend_all+0x8>
}
 801cdaa:	bd38      	pop	{r3, r4, r5, pc}

0801cdac <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
 801cdac:	b15a      	cbz	r2, 801cdc6 <z_impl_k_sem_init+0x1a>
 801cdae:	428a      	cmp	r2, r1
 801cdb0:	d30c      	bcc.n	801cdcc <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
 801cdb2:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
 801cdb4:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
 801cdb6:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
 801cdb8:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
 801cdba:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
 801cdbe:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
 801cdc0:	6143      	str	r3, [r0, #20]
	return 0;
 801cdc2:	2000      	movs	r0, #0
 801cdc4:	4770      	bx	lr
		return -EINVAL;
 801cdc6:	f06f 0015 	mvn.w	r0, #21
 801cdca:	4770      	bx	lr
 801cdcc:	f06f 0015 	mvn.w	r0, #21
}
 801cdd0:	4770      	bx	lr

0801cdd2 <setup_thread_stack>:
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 801cdd2:	3207      	adds	r2, #7
 801cdd4:	f022 0207 	bic.w	r2, r2, #7
}
 801cdd8:	1888      	adds	r0, r1, r2
 801cdda:	4770      	bx	lr

0801cddc <k_is_in_isr>:
 801cddc:	f3ef 8005 	mrs	r0, IPSR
}
 801cde0:	3800      	subs	r0, #0
 801cde2:	bf18      	it	ne
 801cde4:	2001      	movne	r0, #1
 801cde6:	4770      	bx	lr

0801cde8 <z_impl_k_thread_name_set>:
}
 801cde8:	f06f 0046 	mvn.w	r0, #70	; 0x46
 801cdec:	4770      	bx	lr

0801cdee <k_thread_name_get>:
}
 801cdee:	2000      	movs	r0, #0
 801cdf0:	4770      	bx	lr

0801cdf2 <z_impl_k_thread_start>:
{
 801cdf2:	b508      	push	{r3, lr}
	z_sched_start(thread);
 801cdf4:	f7f7 f90a 	bl	801400c <z_sched_start>
}
 801cdf8:	bd08      	pop	{r3, pc}

0801cdfa <z_init_thread_base>:
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
 801cdfa:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 801cdfc:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
 801cdfe:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
 801ce00:	2300      	movs	r3, #0
 801ce02:	73c3      	strb	r3, [r0, #15]
	node->next = NULL;
 801ce04:	6183      	str	r3, [r0, #24]
	node->prev = NULL;
 801ce06:	61c3      	str	r3, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
 801ce08:	4770      	bx	lr

0801ce0a <z_impl_k_thread_create>:
{
 801ce0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ce0c:	b087      	sub	sp, #28
 801ce0e:	4604      	mov	r4, r0
 801ce10:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 801ce14:	2500      	movs	r5, #0
 801ce16:	9505      	str	r5, [sp, #20]
 801ce18:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801ce1a:	9504      	str	r5, [sp, #16]
 801ce1c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801ce1e:	9503      	str	r5, [sp, #12]
 801ce20:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801ce22:	9502      	str	r5, [sp, #8]
 801ce24:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801ce26:	9501      	str	r5, [sp, #4]
 801ce28:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ce2a:	9500      	str	r5, [sp, #0]
 801ce2c:	f7f7 fb7c 	bl	8014528 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 801ce30:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801ce34:	bf08      	it	eq
 801ce36:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 801ce3a:	d102      	bne.n	801ce42 <z_impl_k_thread_create+0x38>
}
 801ce3c:	4620      	mov	r0, r4
 801ce3e:	b007      	add	sp, #28
 801ce40:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
 801ce42:	4632      	mov	r2, r6
 801ce44:	463b      	mov	r3, r7
 801ce46:	4620      	mov	r0, r4
 801ce48:	f7f7 fb5c 	bl	8014504 <schedule_new_thread>
 801ce4c:	e7f6      	b.n	801ce3c <z_impl_k_thread_create+0x32>

0801ce4e <work_cancel>:
{
 801ce4e:	b538      	push	{r3, r4, r5, lr}
	CHECKIF(work->work_q == NULL) {
 801ce50:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801ce52:	2b00      	cmp	r3, #0
 801ce54:	d04b      	beq.n	801ceee <work_cancel+0xa0>
 801ce56:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 801ce58:	f3bf 8f5b 	dmb	ish
 801ce5c:	6883      	ldr	r3, [r0, #8]
 801ce5e:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
 801ce62:	f013 0f01 	tst.w	r3, #1
 801ce66:	d03a      	beq.n	801cede <work_cancel+0x90>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
 801ce68:	6a85      	ldr	r5, [r0, #40]	; 0x28
	return list->head;
 801ce6a:	682b      	ldr	r3, [r5, #0]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
 801ce6c:	2200      	movs	r2, #0
 801ce6e:	b1bb      	cbz	r3, 801cea0 <work_cancel+0x52>
 801ce70:	4298      	cmp	r0, r3
 801ce72:	d004      	beq.n	801ce7e <work_cancel+0x30>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 801ce74:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
 801ce76:	461a      	mov	r2, r3
 801ce78:	f021 0303 	bic.w	r3, r1, #3
 801ce7c:	e7f7      	b.n	801ce6e <work_cancel+0x20>
Z_GENLIST_REMOVE(sflist, sfnode)
 801ce7e:	b302      	cbz	r2, 801cec2 <work_cancel+0x74>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 801ce80:	6823      	ldr	r3, [r4, #0]
 801ce82:	f023 0103 	bic.w	r1, r3, #3
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 801ce86:	6813      	ldr	r3, [r2, #0]
 801ce88:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
 801ce8c:	430b      	orrs	r3, r1
 801ce8e:	6013      	str	r3, [r2, #0]
	return list->tail;
 801ce90:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(sflist, sfnode)
 801ce92:	429c      	cmp	r4, r3
 801ce94:	d01e      	beq.n	801ced4 <work_cancel+0x86>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 801ce96:	6823      	ldr	r3, [r4, #0]
 801ce98:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
 801ce9c:	6023      	str	r3, [r4, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
 801ce9e:	2301      	movs	r3, #1
 801cea0:	b1d3      	cbz	r3, 801ced8 <work_cancel+0x8a>
	work->work_q = NULL;
 801cea2:	2000      	movs	r0, #0
 801cea4:	62a0      	str	r0, [r4, #40]	; 0x28
	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);
 801cea6:	3408      	adds	r4, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 801cea8:	f3bf 8f5b 	dmb	ish
 801ceac:	e854 3f00 	ldrex	r3, [r4]
 801ceb0:	f023 0301 	bic.w	r3, r3, #1
 801ceb4:	e844 3200 	strex	r2, r3, [r4]
 801ceb8:	2a00      	cmp	r2, #0
 801ceba:	d1f7      	bne.n	801ceac <work_cancel+0x5e>
 801cebc:	f3bf 8f5b 	dmb	ish
}
 801cec0:	bd38      	pop	{r3, r4, r5, pc}
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 801cec2:	6823      	ldr	r3, [r4, #0]
 801cec4:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
 801cec8:	602b      	str	r3, [r5, #0]
	return list->tail;
 801ceca:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_REMOVE(sflist, sfnode)
 801cecc:	4294      	cmp	r4, r2
 801cece:	d1e2      	bne.n	801ce96 <work_cancel+0x48>
	list->tail = node;
 801ced0:	606b      	str	r3, [r5, #4]
}
 801ced2:	e7e0      	b.n	801ce96 <work_cancel+0x48>
	list->tail = node;
 801ced4:	606a      	str	r2, [r5, #4]
}
 801ced6:	e7de      	b.n	801ce96 <work_cancel+0x48>
			return -EINVAL;
 801ced8:	f06f 0015 	mvn.w	r0, #21
 801cedc:	e7f0      	b.n	801cec0 <work_cancel+0x72>
		int err = z_abort_timeout(&work->timeout);
 801cede:	3010      	adds	r0, #16
 801cee0:	f000 f857 	bl	801cf92 <z_abort_timeout>
		if (err) {
 801cee4:	2800      	cmp	r0, #0
 801cee6:	d0dc      	beq.n	801cea2 <work_cancel+0x54>
			return -EALREADY;
 801cee8:	f06f 0044 	mvn.w	r0, #68	; 0x44
 801ceec:	e7e8      	b.n	801cec0 <work_cancel+0x72>
		return -EALREADY;
 801ceee:	f06f 0044 	mvn.w	r0, #68	; 0x44
 801cef2:	e7e5      	b.n	801cec0 <work_cancel+0x72>

0801cef4 <work_timeout>:
{
 801cef4:	b508      	push	{r3, lr}
 801cef6:	4603      	mov	r3, r0
	k_work_submit_to_queue(w->work_q, &w->work);
 801cef8:	6980      	ldr	r0, [r0, #24]
 801cefa:	f1a3 0110 	sub.w	r1, r3, #16
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 801cefe:	3b08      	subs	r3, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 801cf00:	f3bf 8f5b 	dmb	ish
 801cf04:	e853 2f00 	ldrex	r2, [r3]
 801cf08:	f042 0c01 	orr.w	ip, r2, #1
 801cf0c:	e843 ce00 	strex	lr, ip, [r3]
 801cf10:	f1be 0f00 	cmp.w	lr, #0
 801cf14:	d1f6      	bne.n	801cf04 <work_timeout+0x10>
 801cf16:	f3bf 8f5b 	dmb	ish
 801cf1a:	f012 0f01 	tst.w	r2, #1
 801cf1e:	d000      	beq.n	801cf22 <work_timeout+0x2e>
}
 801cf20:	bd08      	pop	{r3, pc}
		k_queue_append(&work_q->queue, work);
 801cf22:	f7ff fda3 	bl	801ca6c <k_queue_append>
 801cf26:	e7fb      	b.n	801cf20 <work_timeout+0x2c>

0801cf28 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 801cf28:	2300      	movs	r3, #0
 801cf2a:	6003      	str	r3, [r0, #0]
 801cf2c:	6041      	str	r1, [r0, #4]
 801cf2e:	6083      	str	r3, [r0, #8]
	node->next = NULL;
 801cf30:	6103      	str	r3, [r0, #16]
	node->prev = NULL;
 801cf32:	6143      	str	r3, [r0, #20]
	work->work_q = NULL;
 801cf34:	6283      	str	r3, [r0, #40]	; 0x28
}
 801cf36:	4770      	bx	lr

0801cf38 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
	if (!work->work_q) {
 801cf38:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801cf3a:	b17b      	cbz	r3, 801cf5c <k_delayed_work_cancel+0x24>
{
 801cf3c:	b510      	push	{r4, lr}
	__asm__ volatile(
 801cf3e:	f04f 0310 	mov.w	r3, #16
 801cf42:	f3ef 8411 	mrs	r4, BASEPRI
 801cf46:	f383 8811 	msr	BASEPRI, r3
 801cf4a:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
 801cf4e:	f7ff ff7e 	bl	801ce4e <work_cancel>
	__asm__ volatile(
 801cf52:	f384 8811 	msr	BASEPRI, r4
 801cf56:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
 801cf5a:	bd10      	pop	{r4, pc}
		return -EINVAL;
 801cf5c:	f06f 0015 	mvn.w	r0, #21
}
 801cf60:	4770      	bx	lr

0801cf62 <remove_timeout>:
{
 801cf62:	b538      	push	{r3, r4, r5, lr}
 801cf64:	4604      	mov	r4, r0
	if (next(t) != NULL) {
 801cf66:	f7f7 fbd9 	bl	801471c <next>
 801cf6a:	b148      	cbz	r0, 801cf80 <remove_timeout+0x1e>
 801cf6c:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
 801cf6e:	6920      	ldr	r0, [r4, #16]
 801cf70:	6965      	ldr	r5, [r4, #20]
 801cf72:	6913      	ldr	r3, [r2, #16]
 801cf74:	6951      	ldr	r1, [r2, #20]
 801cf76:	181b      	adds	r3, r3, r0
 801cf78:	eb45 0101 	adc.w	r1, r5, r1
 801cf7c:	6113      	str	r3, [r2, #16]
 801cf7e:	6151      	str	r1, [r2, #20]
	node->prev->next = node->next;
 801cf80:	6862      	ldr	r2, [r4, #4]
 801cf82:	6823      	ldr	r3, [r4, #0]
 801cf84:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 801cf86:	6862      	ldr	r2, [r4, #4]
 801cf88:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 801cf8a:	2300      	movs	r3, #0
 801cf8c:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
 801cf8e:	6063      	str	r3, [r4, #4]
}
 801cf90:	bd38      	pop	{r3, r4, r5, pc}

0801cf92 <z_abort_timeout>:
{
 801cf92:	b570      	push	{r4, r5, r6, lr}
 801cf94:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
 801cf96:	2300      	movs	r3, #0
	__asm__ volatile(
 801cf98:	f04f 0210 	mov.w	r2, #16
 801cf9c:	f3ef 8611 	mrs	r6, BASEPRI
 801cfa0:	f382 8811 	msr	BASEPRI, r2
 801cfa4:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
 801cfa8:	f06f 0015 	mvn.w	r0, #21
 801cfac:	e008      	b.n	801cfc0 <z_abort_timeout+0x2e>
			remove_timeout(to);
 801cfae:	4620      	mov	r0, r4
 801cfb0:	f7ff ffd7 	bl	801cf62 <remove_timeout>
			ret = 0;
 801cfb4:	4628      	mov	r0, r5
	__asm__ volatile(
 801cfb6:	f386 8811 	msr	BASEPRI, r6
 801cfba:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 801cfbe:	2301      	movs	r3, #1
 801cfc0:	461d      	mov	r5, r3
 801cfc2:	b91b      	cbnz	r3, 801cfcc <z_abort_timeout+0x3a>
	return node->next != NULL;
 801cfc4:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
 801cfc6:	2b00      	cmp	r3, #0
 801cfc8:	d1f1      	bne.n	801cfae <z_abort_timeout+0x1c>
 801cfca:	e7f4      	b.n	801cfb6 <z_abort_timeout+0x24>
}
 801cfcc:	bd70      	pop	{r4, r5, r6, pc}

0801cfce <z_get_next_timeout_expiry>:
{
 801cfce:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
 801cfd0:	2300      	movs	r3, #0
	__asm__ volatile(
 801cfd2:	f04f 0210 	mov.w	r2, #16
 801cfd6:	f3ef 8411 	mrs	r4, BASEPRI
 801cfda:	f382 8811 	msr	BASEPRI, r2
 801cfde:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
 801cfe2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	LOCKED(&timeout_lock) {
 801cfe6:	b93b      	cbnz	r3, 801cff8 <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
 801cfe8:	f7f7 fbb0 	bl	801474c <next_timeout>
	__asm__ volatile(
 801cfec:	f384 8811 	msr	BASEPRI, r4
 801cff0:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 801cff4:	2301      	movs	r3, #1
 801cff6:	e7f6      	b.n	801cfe6 <z_get_next_timeout_expiry+0x18>
}
 801cff8:	bd10      	pop	{r4, pc}

0801cffa <z_set_timeout_expiry>:
{
 801cffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cffc:	4606      	mov	r6, r0
 801cffe:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
 801d000:	2300      	movs	r3, #0
	__asm__ volatile(
 801d002:	f04f 0210 	mov.w	r2, #16
 801d006:	f3ef 8511 	mrs	r5, BASEPRI
 801d00a:	f382 8811 	msr	BASEPRI, r2
 801d00e:	f3bf 8f6f 	isb	sy
 801d012:	e00a      	b.n	801d02a <z_set_timeout_expiry+0x30>
			      || (ticks < next_to);
 801d014:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
 801d016:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 801d01a:	2801      	cmp	r0, #1
 801d01c:	dd00      	ble.n	801d020 <z_set_timeout_expiry+0x26>
 801d01e:	b97c      	cbnz	r4, 801d040 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
 801d020:	f385 8811 	msr	BASEPRI, r5
 801d024:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 801d028:	2301      	movs	r3, #1
 801d02a:	461c      	mov	r4, r3
 801d02c:	b96b      	cbnz	r3, 801d04a <z_set_timeout_expiry+0x50>
		int next_to = next_timeout();
 801d02e:	f7f7 fb8d 	bl	801474c <next_timeout>
			      || (ticks < next_to);
 801d032:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801d036:	d0ed      	beq.n	801d014 <z_set_timeout_expiry+0x1a>
 801d038:	42b0      	cmp	r0, r6
 801d03a:	ddec      	ble.n	801d016 <z_set_timeout_expiry+0x1c>
 801d03c:	2401      	movs	r4, #1
 801d03e:	e7ea      	b.n	801d016 <z_set_timeout_expiry+0x1c>
			z_clock_set_timeout(ticks, is_idle);
 801d040:	4639      	mov	r1, r7
 801d042:	4630      	mov	r0, r6
 801d044:	f7eb f88e 	bl	8008164 <z_clock_set_timeout>
 801d048:	e7ea      	b.n	801d020 <z_set_timeout_expiry+0x26>
}
 801d04a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d04c <z_impl_k_uptime_ticks>:
	return (uint32_t)curr_tick;
#endif
}

int64_t z_impl_k_uptime_ticks(void)
{
 801d04c:	b508      	push	{r3, lr}
	return z_tick_get();
 801d04e:	f7f7 fc95 	bl	801497c <z_tick_get>
}
 801d052:	bd08      	pop	{r3, pc}

0801d054 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
 801d054:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 801d056:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 801d05a:	bf08      	it	eq
 801d05c:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
 801d060:	d015      	beq.n	801d08e <z_timeout_end_calc+0x3a>
 801d062:	4604      	mov	r4, r0
 801d064:	460d      	mov	r5, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 801d066:	ea54 0105 	orrs.w	r1, r4, r5
 801d06a:	d00d      	beq.n	801d088 <z_timeout_end_calc+0x34>
#ifdef CONFIG_LEGACY_TIMEOUT_API
	dt = k_ms_to_ticks_ceil32(timeout);
#else
	dt = timeout.ticks;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
 801d06c:	f06f 0101 	mvn.w	r1, #1
 801d070:	1a0a      	subs	r2, r1, r0
 801d072:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801d076:	eb61 0305 	sbc.w	r3, r1, r5
 801d07a:	2a00      	cmp	r2, #0
 801d07c:	f173 0100 	sbcs.w	r1, r3, #0
 801d080:	db09      	blt.n	801d096 <z_timeout_end_calc+0x42>
		return Z_TICK_ABS(dt);
 801d082:	4610      	mov	r0, r2
 801d084:	4619      	mov	r1, r3
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
 801d086:	bd38      	pop	{r3, r4, r5, pc}
		return z_tick_get();
 801d088:	f7f7 fc78 	bl	801497c <z_tick_get>
 801d08c:	e7fb      	b.n	801d086 <z_timeout_end_calc+0x32>
		return UINT64_MAX;
 801d08e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d092:	4601      	mov	r1, r0
 801d094:	e7f7      	b.n	801d086 <z_timeout_end_calc+0x32>
	return z_tick_get() + MAX(1, dt);
 801d096:	f7f7 fc71 	bl	801497c <z_tick_get>
 801d09a:	4623      	mov	r3, r4
 801d09c:	462a      	mov	r2, r5
 801d09e:	2c01      	cmp	r4, #1
 801d0a0:	f175 0400 	sbcs.w	r4, r5, #0
 801d0a4:	db03      	blt.n	801d0ae <z_timeout_end_calc+0x5a>
 801d0a6:	18c0      	adds	r0, r0, r3
 801d0a8:	eb42 0101 	adc.w	r1, r2, r1
 801d0ac:	e7eb      	b.n	801d086 <z_timeout_end_calc+0x32>
 801d0ae:	2301      	movs	r3, #1
 801d0b0:	2200      	movs	r2, #0
 801d0b2:	e7f8      	b.n	801d0a6 <z_timeout_end_calc+0x52>

0801d0b4 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
 801d0b4:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
 801d0b6:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
 801d0b8:	2300      	movs	r3, #0
 801d0ba:	6303      	str	r3, [r0, #48]	; 0x30
 801d0bc:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
 801d0c0:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
 801d0c2:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
 801d0c4:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 801d0c6:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
 801d0c8:	6343      	str	r3, [r0, #52]	; 0x34
}
 801d0ca:	4770      	bx	lr

0801d0cc <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 801d0cc:	b510      	push	{r4, lr}
 801d0ce:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
 801d0d0:	f7ff ff5f 	bl	801cf92 <z_abort_timeout>

	if (inactive) {
 801d0d4:	b9d0      	cbnz	r0, 801d10c <z_impl_k_timer_stop+0x40>
		return;
	}

	if (timer->stop_fn != NULL) {
 801d0d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d0d8:	b10b      	cbz	r3, 801d0de <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 801d0da:	4620      	mov	r0, r4
 801d0dc:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
 801d0de:	2100      	movs	r1, #0
 801d0e0:	f104 0018 	add.w	r0, r4, #24
 801d0e4:	f7ff fd18 	bl	801cb18 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
 801d0e8:	4604      	mov	r4, r0
 801d0ea:	b108      	cbz	r0, 801d0f0 <z_impl_k_timer_stop+0x24>
		z_unpend_thread_no_timeout(thread);
 801d0ec:	f7ff fd2b 	bl	801cb46 <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
 801d0f0:	b164      	cbz	r4, 801d10c <z_impl_k_timer_stop+0x40>
		z_ready_thread(pending_thread);
 801d0f2:	4620      	mov	r0, r4
 801d0f4:	f7ff fd7e 	bl	801cbf4 <z_ready_thread>
	__asm__ volatile(
 801d0f8:	f04f 0310 	mov.w	r3, #16
 801d0fc:	f3ef 8011 	mrs	r0, BASEPRI
 801d100:	f383 8811 	msr	BASEPRI, r3
 801d104:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 801d108:	f7ff fd3c 	bl	801cb84 <z_reschedule_irqlock>
		z_reschedule_unlocked();
	}
}
 801d10c:	bd10      	pop	{r4, pc}

0801d10e <signal_poll_event>:
{
 801d10e:	b570      	push	{r4, r5, r6, lr}
 801d110:	4604      	mov	r4, r0
 801d112:	460d      	mov	r5, r1
	struct _poller *poller = event->poller;
 801d114:	6886      	ldr	r6, [r0, #8]
	if (poller) {
 801d116:	b19e      	cbz	r6, 801d140 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
 801d118:	68b3      	ldr	r3, [r6, #8]
 801d11a:	b173      	cbz	r3, 801d13a <signal_poll_event+0x2c>
			retcode = poller->cb(event, state);
 801d11c:	4798      	blx	r3
		poller->is_polling = false;
 801d11e:	2300      	movs	r3, #0
 801d120:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
 801d122:	2800      	cmp	r0, #0
 801d124:	db08      	blt.n	801d138 <signal_poll_event+0x2a>
	event->poller = NULL;
 801d126:	2300      	movs	r3, #0
 801d128:	60a3      	str	r3, [r4, #8]
	event->state |= state;
 801d12a:	68e3      	ldr	r3, [r4, #12]
 801d12c:	f3c3 3104 	ubfx	r1, r3, #12, #5
 801d130:	430d      	orrs	r5, r1
 801d132:	f365 3310 	bfi	r3, r5, #12, #5
 801d136:	60e3      	str	r3, [r4, #12]
}
 801d138:	bd70      	pop	{r4, r5, r6, pc}
		poller->is_polling = false;
 801d13a:	2000      	movs	r0, #0
 801d13c:	7030      	strb	r0, [r6, #0]
		if (retcode < 0) {
 801d13e:	e7f2      	b.n	801d126 <signal_poll_event+0x18>
	int retcode = 0;
 801d140:	2000      	movs	r0, #0
 801d142:	e7f0      	b.n	801d126 <signal_poll_event+0x18>

0801d144 <k_poll_poller_cb>:
{
 801d144:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
 801d146:	6883      	ldr	r3, [r0, #8]
 801d148:	685c      	ldr	r4, [r3, #4]
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
 801d14a:	7b63      	ldrb	r3, [r4, #13]
	if (!z_is_thread_pending(thread)) {
 801d14c:	f013 0f02 	tst.w	r3, #2
 801d150:	d027      	beq.n	801d1a2 <k_poll_poller_cb+0x5e>
 801d152:	460d      	mov	r5, r1
	return thread->base.timeout.dticks == _EXPIRED;
 801d154:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
	if (z_is_thread_timeout_expired(thread)) {
 801d158:	f06f 0001 	mvn.w	r0, #1
 801d15c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801d160:	428b      	cmp	r3, r1
 801d162:	bf08      	it	eq
 801d164:	4282      	cmpeq	r2, r0
 801d166:	d01e      	beq.n	801d1a6 <k_poll_poller_cb+0x62>
	z_unpend_thread(thread);
 801d168:	4620      	mov	r0, r4
 801d16a:	f7ff fd19 	bl	801cba0 <z_unpend_thread>
	arch_thread_return_value_set(thread,
 801d16e:	2d08      	cmp	r5, #8
 801d170:	d009      	beq.n	801d186 <k_poll_poller_cb+0x42>
 801d172:	2300      	movs	r3, #0
 801d174:	6723      	str	r3, [r4, #112]	; 0x70
	uint8_t state = thread->base.thread_state;
 801d176:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 801d178:	f013 0f1f 	tst.w	r3, #31
 801d17c:	d108      	bne.n	801d190 <k_poll_poller_cb+0x4c>
	return node->next != NULL;
 801d17e:	69a3      	ldr	r3, [r4, #24]
 801d180:	b123      	cbz	r3, 801d18c <k_poll_poller_cb+0x48>
 801d182:	2300      	movs	r3, #0
 801d184:	e005      	b.n	801d192 <k_poll_poller_cb+0x4e>
 801d186:	f06f 0303 	mvn.w	r3, #3
 801d18a:	e7f3      	b.n	801d174 <k_poll_poller_cb+0x30>
 801d18c:	2301      	movs	r3, #1
 801d18e:	e000      	b.n	801d192 <k_poll_poller_cb+0x4e>
 801d190:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
 801d192:	b90b      	cbnz	r3, 801d198 <k_poll_poller_cb+0x54>
		return 0;
 801d194:	2000      	movs	r0, #0
 801d196:	e005      	b.n	801d1a4 <k_poll_poller_cb+0x60>
	z_ready_thread(thread);
 801d198:	4620      	mov	r0, r4
 801d19a:	f7ff fd2b 	bl	801cbf4 <z_ready_thread>
	return 0;
 801d19e:	2000      	movs	r0, #0
 801d1a0:	e000      	b.n	801d1a4 <k_poll_poller_cb+0x60>
		return 0;
 801d1a2:	2000      	movs	r0, #0
}
 801d1a4:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
 801d1a6:	f06f 000a 	mvn.w	r0, #10
 801d1aa:	e7fb      	b.n	801d1a4 <k_poll_poller_cb+0x60>

0801d1ac <k_poll_event_init>:
{
 801d1ac:	b430      	push	{r4, r5}
	event->poller = NULL;
 801d1ae:	2400      	movs	r4, #0
 801d1b0:	6084      	str	r4, [r0, #8]
	event->type = type;
 801d1b2:	7b45      	ldrb	r5, [r0, #13]
 801d1b4:	f361 0503 	bfi	r5, r1, #0, #4
 801d1b8:	7345      	strb	r5, [r0, #13]
	event->state = K_POLL_STATE_NOT_READY;
 801d1ba:	68c1      	ldr	r1, [r0, #12]
 801d1bc:	f364 3110 	bfi	r1, r4, #12, #5
 801d1c0:	60c1      	str	r1, [r0, #12]
	event->mode = mode;
 801d1c2:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801d1c6:	f362 0141 	bfi	r1, r2, #1, #1
 801d1ca:	7381      	strb	r1, [r0, #14]
	event->unused = 0U;
 801d1cc:	89c2      	ldrh	r2, [r0, #14]
 801d1ce:	f364 028f 	bfi	r2, r4, #2, #14
 801d1d2:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
 801d1d4:	6103      	str	r3, [r0, #16]
}
 801d1d6:	bc30      	pop	{r4, r5}
 801d1d8:	4770      	bx	lr

0801d1da <z_handle_obj_poll_events>:
{
 801d1da:	b508      	push	{r3, lr}
 801d1dc:	4603      	mov	r3, r0
	return list->head == list;
 801d1de:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
 801d1e0:	4283      	cmp	r3, r0
 801d1e2:	d00a      	beq.n	801d1fa <z_handle_obj_poll_events+0x20>
	node->prev->next = node->next;
 801d1e4:	6842      	ldr	r2, [r0, #4]
 801d1e6:	6803      	ldr	r3, [r0, #0]
 801d1e8:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 801d1ea:	6842      	ldr	r2, [r0, #4]
 801d1ec:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 801d1ee:	2300      	movs	r3, #0
 801d1f0:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 801d1f2:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
 801d1f4:	b108      	cbz	r0, 801d1fa <z_handle_obj_poll_events+0x20>
		(void) signal_poll_event(poll_event, state);
 801d1f6:	f7ff ff8a 	bl	801d10e <signal_poll_event>
}
 801d1fa:	bd08      	pop	{r3, pc}

0801d1fc <k_mem_pool_malloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
 801d1fc:	2300      	movs	r3, #0
 801d1fe:	2208      	movs	r2, #8
 801d200:	188a      	adds	r2, r1, r2
 801d202:	d214      	bcs.n	801d22e <k_mem_pool_malloc+0x32>
	if (size_add_overflow(size, WB_UP(sizeof(struct k_mem_block_id)),
 801d204:	b9bb      	cbnz	r3, 801d236 <k_mem_pool_malloc+0x3a>
{
 801d206:	b530      	push	{r4, r5, lr}
 801d208:	b085      	sub	sp, #20
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
 801d20a:	2400      	movs	r4, #0
 801d20c:	2500      	movs	r5, #0
 801d20e:	e9cd 4500 	strd	r4, r5, [sp]
 801d212:	a902      	add	r1, sp, #8
 801d214:	f7ff fb3c 	bl	801c890 <k_mem_pool_alloc>
 801d218:	b958      	cbnz	r0, 801d232 <k_mem_pool_malloc+0x36>
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
 801d21a:	2208      	movs	r2, #8
 801d21c:	eb0d 0102 	add.w	r1, sp, r2
 801d220:	9802      	ldr	r0, [sp, #8]
 801d222:	f7fa fe2b 	bl	8017e7c <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
 801d226:	9802      	ldr	r0, [sp, #8]
 801d228:	3008      	adds	r0, #8
}
 801d22a:	b005      	add	sp, #20
 801d22c:	bd30      	pop	{r4, r5, pc}
 801d22e:	2301      	movs	r3, #1
 801d230:	e7e8      	b.n	801d204 <k_mem_pool_malloc+0x8>
		return NULL;
 801d232:	2000      	movs	r0, #0
 801d234:	e7f9      	b.n	801d22a <k_mem_pool_malloc+0x2e>
		return NULL;
 801d236:	2000      	movs	r0, #0
}
 801d238:	4770      	bx	lr

0801d23a <k_free>:
	if (ptr != NULL) {
 801d23a:	b120      	cbz	r0, 801d246 <k_free+0xc>
{
 801d23c:	b508      	push	{r3, lr}
		k_mem_pool_free_id(ptr);
 801d23e:	3808      	subs	r0, #8
 801d240:	f7ff fb41 	bl	801c8c6 <k_mem_pool_free_id>
}
 801d244:	bd08      	pop	{r3, pc}
 801d246:	4770      	bx	lr

0801d248 <sys_power_save_idle>:
	_kernel.idle = ticks;
#endif
}

static void sys_power_save_idle(void)
{
 801d248:	b508      	push	{r3, lr}
	int32_t ticks = z_get_next_timeout_expiry();
 801d24a:	f7ff fec0 	bl	801cfce <z_get_next_timeout_expiry>
	 * periods less than that.  This seems... silly, given that it
	 * saves no power and does not improve latency.  But it's an
	 * API we need to honor...
	 */
#ifdef CONFIG_SYS_CLOCK_EXISTS
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
 801d24e:	2802      	cmp	r0, #2
 801d250:	dc00      	bgt.n	801d254 <sys_power_save_idle+0xc>
 801d252:	2001      	movs	r0, #1
 801d254:	2101      	movs	r1, #1
 801d256:	f7ff fed0 	bl	801cffa <z_set_timeout_expiry>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 801d25a:	f7eb fdeb 	bl	8008e34 <arch_cpu_idle>
		k_cpu_idle();
	}
#else
	k_cpu_idle();
#endif
}
 801d25e:	bd08      	pop	{r3, pc}

0801d260 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
 801d260:	b508      	push	{r3, lr}
 801d262:	f04f 0210 	mov.w	r2, #16
 801d266:	f3ef 8311 	mrs	r3, BASEPRI
 801d26a:	f382 8811 	msr	BASEPRI, r2
 801d26e:	f3bf 8f6f 	isb	sy
#if SMP_FALLBACK
		k_busy_wait(100);
		k_yield();
#else
		(void)arch_irq_lock();
		sys_power_save_idle();
 801d272:	f7ff ffe9 	bl	801d248 <sys_power_save_idle>
	while (true) {
 801d276:	e7f4      	b.n	801d262 <idle+0x2>

0801d278 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
 801d278:	4770      	bx	lr
