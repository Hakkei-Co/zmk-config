
zmk.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_start>:
 8000000:	200075a8 	.word	0x200075a8
 8000004:	0800b2a1 	.word	0x0800b2a1
 8000008:	0801c55f 	.word	0x0801c55f
 800000c:	0800b2cd 	.word	0x0800b2cd
 8000010:	0800b2cd 	.word	0x0800b2cd
 8000014:	0800b2cd 	.word	0x0800b2cd
 8000018:	0800b2cd 	.word	0x0800b2cd
	...
 800002c:	0800b039 	.word	0x0800b039
 8000030:	0800b2cd 	.word	0x0800b2cd
 8000034:	00000000 	.word	0x00000000
 8000038:	0800aff1 	.word	0x0800aff1
 800003c:	0800a3e9 	.word	0x0800a3e9

08000040 <_irq_vector_table>:
 8000040:	0800b279 0800b279 0800b279 0800b279     y...y...y...y...
 8000050:	0800b279 0800b279 0800b279 0800b279     y...y...y...y...
 8000060:	0800b279 0800b279 0800b279 0800b279     y...y...y...y...
 8000070:	0800b279 0800b279 0800b279 0800b279     y...y...y...y...
 8000080:	0800b279 0800b279 0800b279 0800b279     y...y...y...y...
 8000090:	0800b279 0800b279 0800b279 0800b279     y...y...y...y...
 80000a0:	0800b279 0800b279 0800b279 0800b279     y...y...y...y...
 80000b0:	0800b279 0800b279 0800b279 0800b279     y...y...y...y...
 80000c0:	0800b279 0800b279 0800b279 0800b279     y...y...y...y...
 80000d0:	0800b279 0800b279 0800b279 0800b279     y...y...y...y...
 80000e0:	0800b279 0800b279 0800b279 0800b279     y...y...y...y...
 80000f0:	0800b279 0800b279 0800b279 0800b279     y...y...y...y...
 8000100:	0800b279 0800b279 0800b279 0800b279     y...y...y...y...
 8000110:	0800b279 0800b279 0800b279 0800b279     y...y...y...y...
 8000120:	0800b279 0800b279 0800b279 0800b279     y...y...y...y...
 8000130:	0800b279 0800b279 0800b279 0800b279     y...y...y...y...
 8000140:	0800b279 0800b279 0800b279 0800b279     y...y...y...y...
 8000150:	0800b279 0800b279 0800b279 0800b279     y...y...y...y...
 8000160:	0800b279 0800b279 0800b279 0800b279     y...y...y...y...
 8000170:	0800b279 0800b279 0800b279 0800b279     y...y...y...y...
 8000180:	0800b279 0800b279                       y...y...

Disassembly of section text:

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000198:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800019c:	f000 b96e 	b.w	800047c <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f806 	bl	80001b8 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__udivmoddi4>:
 80001b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001bc:	9d08      	ldr	r5, [sp, #32]
 80001be:	460e      	mov	r6, r1
 80001c0:	4604      	mov	r4, r0
 80001c2:	468c      	mov	ip, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	f040 8081 	bne.w	80002cc <__udivmoddi4+0x114>
 80001ca:	428a      	cmp	r2, r1
 80001cc:	4617      	mov	r7, r2
 80001ce:	d945      	bls.n	800025c <__udivmoddi4+0xa4>
 80001d0:	fab2 f282 	clz	r2, r2
 80001d4:	b14a      	cbz	r2, 80001ea <__udivmoddi4+0x32>
 80001d6:	f1c2 0120 	rsb	r1, r2, #32
 80001da:	fa06 f302 	lsl.w	r3, r6, r2
 80001de:	fa20 f101 	lsr.w	r1, r0, r1
 80001e2:	4097      	lsls	r7, r2
 80001e4:	ea41 0c03 	orr.w	ip, r1, r3
 80001e8:	4094      	lsls	r4, r2
 80001ea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80001ee:	0c23      	lsrs	r3, r4, #16
 80001f0:	fbbc f6fe 	udiv	r6, ip, lr
 80001f4:	b2b9      	uxth	r1, r7
 80001f6:	fb0e cc16 	mls	ip, lr, r6, ip
 80001fa:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80001fe:	fb06 f001 	mul.w	r0, r6, r1
 8000202:	4298      	cmp	r0, r3
 8000204:	d909      	bls.n	800021a <__udivmoddi4+0x62>
 8000206:	18fb      	adds	r3, r7, r3
 8000208:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800020c:	f080 8115 	bcs.w	800043a <__udivmoddi4+0x282>
 8000210:	4298      	cmp	r0, r3
 8000212:	f240 8112 	bls.w	800043a <__udivmoddi4+0x282>
 8000216:	3e02      	subs	r6, #2
 8000218:	443b      	add	r3, r7
 800021a:	1a1b      	subs	r3, r3, r0
 800021c:	b2a4      	uxth	r4, r4
 800021e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000222:	fb0e 3310 	mls	r3, lr, r0, r3
 8000226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800022a:	fb00 f101 	mul.w	r1, r0, r1
 800022e:	42a1      	cmp	r1, r4
 8000230:	d909      	bls.n	8000246 <__udivmoddi4+0x8e>
 8000232:	193c      	adds	r4, r7, r4
 8000234:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000238:	f080 8101 	bcs.w	800043e <__udivmoddi4+0x286>
 800023c:	42a1      	cmp	r1, r4
 800023e:	f240 80fe 	bls.w	800043e <__udivmoddi4+0x286>
 8000242:	3802      	subs	r0, #2
 8000244:	443c      	add	r4, r7
 8000246:	1a64      	subs	r4, r4, r1
 8000248:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800024c:	2100      	movs	r1, #0
 800024e:	b11d      	cbz	r5, 8000258 <__udivmoddi4+0xa0>
 8000250:	40d4      	lsrs	r4, r2
 8000252:	2300      	movs	r3, #0
 8000254:	e9c5 4300 	strd	r4, r3, [r5]
 8000258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025c:	b902      	cbnz	r2, 8000260 <__udivmoddi4+0xa8>
 800025e:	deff      	udf	#255	; 0xff
 8000260:	fab2 f282 	clz	r2, r2
 8000264:	2a00      	cmp	r2, #0
 8000266:	d14f      	bne.n	8000308 <__udivmoddi4+0x150>
 8000268:	1bcb      	subs	r3, r1, r7
 800026a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800026e:	fa1f f887 	uxth.w	r8, r7
 8000272:	2101      	movs	r1, #1
 8000274:	fbb3 fcfe 	udiv	ip, r3, lr
 8000278:	0c26      	lsrs	r6, r4, #16
 800027a:	fb0e 331c 	mls	r3, lr, ip, r3
 800027e:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8000282:	fb08 f30c 	mul.w	r3, r8, ip
 8000286:	42b3      	cmp	r3, r6
 8000288:	d907      	bls.n	800029a <__udivmoddi4+0xe2>
 800028a:	19be      	adds	r6, r7, r6
 800028c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000290:	d202      	bcs.n	8000298 <__udivmoddi4+0xe0>
 8000292:	42b3      	cmp	r3, r6
 8000294:	f200 80eb 	bhi.w	800046e <__udivmoddi4+0x2b6>
 8000298:	4684      	mov	ip, r0
 800029a:	1af6      	subs	r6, r6, r3
 800029c:	b2a3      	uxth	r3, r4
 800029e:	fbb6 f0fe 	udiv	r0, r6, lr
 80002a2:	fb0e 6610 	mls	r6, lr, r0, r6
 80002a6:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 80002aa:	fb08 f800 	mul.w	r8, r8, r0
 80002ae:	45a0      	cmp	r8, r4
 80002b0:	d907      	bls.n	80002c2 <__udivmoddi4+0x10a>
 80002b2:	193c      	adds	r4, r7, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	d202      	bcs.n	80002c0 <__udivmoddi4+0x108>
 80002ba:	45a0      	cmp	r8, r4
 80002bc:	f200 80d2 	bhi.w	8000464 <__udivmoddi4+0x2ac>
 80002c0:	4618      	mov	r0, r3
 80002c2:	eba4 0408 	sub.w	r4, r4, r8
 80002c6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002ca:	e7c0      	b.n	800024e <__udivmoddi4+0x96>
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d908      	bls.n	80002e2 <__udivmoddi4+0x12a>
 80002d0:	2d00      	cmp	r5, #0
 80002d2:	f000 80af 	beq.w	8000434 <__udivmoddi4+0x27c>
 80002d6:	2100      	movs	r1, #0
 80002d8:	e9c5 0600 	strd	r0, r6, [r5]
 80002dc:	4608      	mov	r0, r1
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f183 	clz	r1, r3
 80002e6:	2900      	cmp	r1, #0
 80002e8:	d149      	bne.n	800037e <__udivmoddi4+0x1c6>
 80002ea:	42b3      	cmp	r3, r6
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0x13c>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80bb 	bhi.w	800046a <__udivmoddi4+0x2b2>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb66 0303 	sbc.w	r3, r6, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469c      	mov	ip, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0aa      	beq.n	8000258 <__udivmoddi4+0xa0>
 8000302:	e9c5 4c00 	strd	r4, ip, [r5]
 8000306:	e7a7      	b.n	8000258 <__udivmoddi4+0xa0>
 8000308:	f1c2 0320 	rsb	r3, r2, #32
 800030c:	4097      	lsls	r7, r2
 800030e:	40d8      	lsrs	r0, r3
 8000310:	4091      	lsls	r1, r2
 8000312:	40de      	lsrs	r6, r3
 8000314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000318:	4308      	orrs	r0, r1
 800031a:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 800031e:	fbb6 f1fe 	udiv	r1, r6, lr
 8000322:	fa1f f887 	uxth.w	r8, r7
 8000326:	fb0e 6611 	mls	r6, lr, r1, r6
 800032a:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
 800032e:	fb01 f308 	mul.w	r3, r1, r8
 8000332:	42b3      	cmp	r3, r6
 8000334:	fa04 f402 	lsl.w	r4, r4, r2
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x196>
 800033a:	19be      	adds	r6, r7, r6
 800033c:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 8000340:	f080 808e 	bcs.w	8000460 <__udivmoddi4+0x2a8>
 8000344:	42b3      	cmp	r3, r6
 8000346:	f240 808b 	bls.w	8000460 <__udivmoddi4+0x2a8>
 800034a:	3902      	subs	r1, #2
 800034c:	443e      	add	r6, r7
 800034e:	1af3      	subs	r3, r6, r3
 8000350:	b286      	uxth	r6, r0
 8000352:	fbb3 f0fe 	udiv	r0, r3, lr
 8000356:	fb0e 3310 	mls	r3, lr, r0, r3
 800035a:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 800035e:	fb00 f308 	mul.w	r3, r0, r8
 8000362:	42b3      	cmp	r3, r6
 8000364:	d907      	bls.n	8000376 <__udivmoddi4+0x1be>
 8000366:	19be      	adds	r6, r7, r6
 8000368:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800036c:	d274      	bcs.n	8000458 <__udivmoddi4+0x2a0>
 800036e:	42b3      	cmp	r3, r6
 8000370:	d972      	bls.n	8000458 <__udivmoddi4+0x2a0>
 8000372:	3802      	subs	r0, #2
 8000374:	443e      	add	r6, r7
 8000376:	1af3      	subs	r3, r6, r3
 8000378:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037c:	e77a      	b.n	8000274 <__udivmoddi4+0xbc>
 800037e:	f1c1 0720 	rsb	r7, r1, #32
 8000382:	fa03 f401 	lsl.w	r4, r3, r1
 8000386:	fa22 f307 	lsr.w	r3, r2, r7
 800038a:	431c      	orrs	r4, r3
 800038c:	fa20 f907 	lsr.w	r9, r0, r7
 8000390:	fa06 f301 	lsl.w	r3, r6, r1
 8000394:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000398:	40fe      	lsrs	r6, r7
 800039a:	ea49 0903 	orr.w	r9, r9, r3
 800039e:	ea4f 4319 	mov.w	r3, r9, lsr #16
 80003a2:	fbb6 fefc 	udiv	lr, r6, ip
 80003a6:	fa1f f884 	uxth.w	r8, r4
 80003aa:	fb0c 661e 	mls	r6, ip, lr, r6
 80003ae:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 80003b2:	fb0e fa08 	mul.w	sl, lr, r8
 80003b6:	45b2      	cmp	sl, r6
 80003b8:	fa02 f201 	lsl.w	r2, r2, r1
 80003bc:	fa00 f301 	lsl.w	r3, r0, r1
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x21c>
 80003c2:	19a6      	adds	r6, r4, r6
 80003c4:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80003c8:	d248      	bcs.n	800045c <__udivmoddi4+0x2a4>
 80003ca:	45b2      	cmp	sl, r6
 80003cc:	d946      	bls.n	800045c <__udivmoddi4+0x2a4>
 80003ce:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d2:	4426      	add	r6, r4
 80003d4:	eba6 060a 	sub.w	r6, r6, sl
 80003d8:	fa1f f989 	uxth.w	r9, r9
 80003dc:	fbb6 f0fc 	udiv	r0, r6, ip
 80003e0:	fb0c 6610 	mls	r6, ip, r0, r6
 80003e4:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
 80003e8:	fb00 f808 	mul.w	r8, r0, r8
 80003ec:	45b0      	cmp	r8, r6
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0x248>
 80003f0:	19a6      	adds	r6, r4, r6
 80003f2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003f6:	d22d      	bcs.n	8000454 <__udivmoddi4+0x29c>
 80003f8:	45b0      	cmp	r8, r6
 80003fa:	d92b      	bls.n	8000454 <__udivmoddi4+0x29c>
 80003fc:	3802      	subs	r0, #2
 80003fe:	4426      	add	r6, r4
 8000400:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000404:	eba6 0608 	sub.w	r6, r6, r8
 8000408:	fba0 8902 	umull	r8, r9, r0, r2
 800040c:	454e      	cmp	r6, r9
 800040e:	46c4      	mov	ip, r8
 8000410:	46ce      	mov	lr, r9
 8000412:	d318      	bcc.n	8000446 <__udivmoddi4+0x28e>
 8000414:	d015      	beq.n	8000442 <__udivmoddi4+0x28a>
 8000416:	b375      	cbz	r5, 8000476 <__udivmoddi4+0x2be>
 8000418:	ebb3 020c 	subs.w	r2, r3, ip
 800041c:	eb66 060e 	sbc.w	r6, r6, lr
 8000420:	fa06 f707 	lsl.w	r7, r6, r7
 8000424:	fa22 f301 	lsr.w	r3, r2, r1
 8000428:	40ce      	lsrs	r6, r1
 800042a:	431f      	orrs	r7, r3
 800042c:	e9c5 7600 	strd	r7, r6, [r5]
 8000430:	2100      	movs	r1, #0
 8000432:	e711      	b.n	8000258 <__udivmoddi4+0xa0>
 8000434:	4629      	mov	r1, r5
 8000436:	4628      	mov	r0, r5
 8000438:	e70e      	b.n	8000258 <__udivmoddi4+0xa0>
 800043a:	4666      	mov	r6, ip
 800043c:	e6ed      	b.n	800021a <__udivmoddi4+0x62>
 800043e:	4618      	mov	r0, r3
 8000440:	e701      	b.n	8000246 <__udivmoddi4+0x8e>
 8000442:	4543      	cmp	r3, r8
 8000444:	d2e7      	bcs.n	8000416 <__udivmoddi4+0x25e>
 8000446:	ebb8 0c02 	subs.w	ip, r8, r2
 800044a:	eb69 0404 	sbc.w	r4, r9, r4
 800044e:	3801      	subs	r0, #1
 8000450:	46a6      	mov	lr, r4
 8000452:	e7e0      	b.n	8000416 <__udivmoddi4+0x25e>
 8000454:	4660      	mov	r0, ip
 8000456:	e7d3      	b.n	8000400 <__udivmoddi4+0x248>
 8000458:	4660      	mov	r0, ip
 800045a:	e78c      	b.n	8000376 <__udivmoddi4+0x1be>
 800045c:	4686      	mov	lr, r0
 800045e:	e7b9      	b.n	80003d4 <__udivmoddi4+0x21c>
 8000460:	4661      	mov	r1, ip
 8000462:	e774      	b.n	800034e <__udivmoddi4+0x196>
 8000464:	3802      	subs	r0, #2
 8000466:	443c      	add	r4, r7
 8000468:	e72b      	b.n	80002c2 <__udivmoddi4+0x10a>
 800046a:	4608      	mov	r0, r1
 800046c:	e747      	b.n	80002fe <__udivmoddi4+0x146>
 800046e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000472:	443e      	add	r6, r7
 8000474:	e711      	b.n	800029a <__udivmoddi4+0xe2>
 8000476:	4629      	mov	r1, r5
 8000478:	e6ee      	b.n	8000258 <__udivmoddi4+0xa0>
 800047a:	bf00      	nop

0800047c <__aeabi_idiv0>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <activity_expiry_function>:
    }
}

K_WORK_DEFINE(activity_work, activity_work_handler);

void activity_expiry_function() { k_work_submit(&activity_work); }
 8000480:	b508      	push	{r3, lr}
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8000482:	4b0b      	ldr	r3, [pc, #44]	; (80004b0 <activity_expiry_function+0x30>)
 8000484:	f3bf 8f5b 	dmb	ish
 8000488:	e853 2f00 	ldrex	r2, [r3]
 800048c:	f042 0101 	orr.w	r1, r2, #1
 8000490:	e843 1000 	strex	r0, r1, [r3]
 8000494:	2800      	cmp	r0, #0
 8000496:	d1f7      	bne.n	8000488 <activity_expiry_function+0x8>
 8000498:	f3bf 8f5b 	dmb	ish
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 800049c:	f012 0f01 	tst.w	r2, #1
 80004a0:	d000      	beq.n	80004a4 <activity_expiry_function+0x24>
 80004a2:	bd08      	pop	{r3, pc}
		k_queue_append(&work_q->queue, work);
 80004a4:	f1a3 0108 	sub.w	r1, r3, #8
 80004a8:	4802      	ldr	r0, [pc, #8]	; (80004b4 <activity_expiry_function+0x34>)
 80004aa:	f021 fd03 	bl	8021eb4 <k_queue_append>
 80004ae:	e7f8      	b.n	80004a2 <activity_expiry_function+0x22>
 80004b0:	20000128 	.word	0x20000128
 80004b4:	20003310 	.word	0x20003310

080004b8 <activity_init>:

K_TIMER_DEFINE(activity_timer, activity_expiry_function, NULL);

int activity_init() {
 80004b8:	b500      	push	{lr}
 80004ba:	b083      	sub	sp, #12
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
 80004bc:	f021 ffee 	bl	802249c <z_impl_k_uptime_ticks>
	if (div_ratio) {
		t += off;
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / (from_hz / to_hz);
 80004c0:	220a      	movs	r2, #10
 80004c2:	2300      	movs	r3, #0
 80004c4:	f7ff fe60 	bl	8000188 <__aeabi_uldivmod>
    activity_last_uptime = k_uptime_get();
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <activity_init+0x2c>)
 80004ca:	6018      	str	r0, [r3, #0]

    k_timer_start(&activity_timer, K_SECONDS(1), K_SECONDS(1));
 80004cc:	f242 7210 	movw	r2, #10000	; 0x2710
 80004d0:	2300      	movs	r3, #0
	z_impl_k_timer_start(timer, duration, period);
 80004d2:	e9cd 2300 	strd	r2, r3, [sp]
 80004d6:	4804      	ldr	r0, [pc, #16]	; (80004e8 <activity_init+0x30>)
 80004d8:	f018 fea6 	bl	8019228 <z_impl_k_timer_start>
    return 0;
}
 80004dc:	2000      	movs	r0, #0
 80004de:	b003      	add	sp, #12
 80004e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80004e4:	200033a8 	.word	0x200033a8
 80004e8:	20000eb0 	.word	0x20000eb0

080004ec <raise_event>:
int raise_event() {
 80004ec:	b508      	push	{r3, lr}
    return ZMK_EVENT_RAISE(new_zmk_activity_state_changed(
 80004ee:	4b03      	ldr	r3, [pc, #12]	; (80004fc <raise_event+0x10>)
 80004f0:	7818      	ldrb	r0, [r3, #0]
 80004f2:	f000 fb43 	bl	8000b7c <new_zmk_activity_state_changed>
 80004f6:	f019 f979 	bl	80197ec <zmk_event_manager_raise>
}
 80004fa:	bd08      	pop	{r3, pc}
 80004fc:	20005962 	.word	0x20005962

08000500 <set_state>:
int set_state(enum zmk_activity_state state) {
 8000500:	b508      	push	{r3, lr}
    if (activity_state == state)
 8000502:	4b05      	ldr	r3, [pc, #20]	; (8000518 <set_state+0x18>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	4283      	cmp	r3, r0
 8000508:	d004      	beq.n	8000514 <set_state+0x14>
    activity_state = state;
 800050a:	4b03      	ldr	r3, [pc, #12]	; (8000518 <set_state+0x18>)
 800050c:	7018      	strb	r0, [r3, #0]
    return raise_event();
 800050e:	f7ff ffed 	bl	80004ec <raise_event>
}
 8000512:	bd08      	pop	{r3, pc}
        return 0;
 8000514:	2000      	movs	r0, #0
 8000516:	e7fc      	b.n	8000512 <set_state+0x12>
 8000518:	20005962 	.word	0x20005962

0800051c <activity_event_listener>:
int activity_event_listener(const zmk_event_t *eh) {
 800051c:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 800051e:	f021 ffbd 	bl	802249c <z_impl_k_uptime_ticks>
 8000522:	220a      	movs	r2, #10
 8000524:	2300      	movs	r3, #0
 8000526:	f7ff fe2f 	bl	8000188 <__aeabi_uldivmod>
    activity_last_uptime = k_uptime_get();
 800052a:	4b03      	ldr	r3, [pc, #12]	; (8000538 <activity_event_listener+0x1c>)
 800052c:	6018      	str	r0, [r3, #0]
    return set_state(ZMK_ACTIVITY_ACTIVE);
 800052e:	2000      	movs	r0, #0
 8000530:	f7ff ffe6 	bl	8000500 <set_state>
}
 8000534:	bd08      	pop	{r3, pc}
 8000536:	bf00      	nop
 8000538:	200033a8 	.word	0x200033a8

0800053c <activity_work_handler>:
void activity_work_handler(struct k_work *work) {
 800053c:	b508      	push	{r3, lr}
 800053e:	f021 ffad 	bl	802249c <z_impl_k_uptime_ticks>
 8000542:	220a      	movs	r2, #10
 8000544:	2300      	movs	r3, #0
 8000546:	f7ff fe1f 	bl	8000188 <__aeabi_uldivmod>
    int32_t inactive_time = current - activity_last_uptime;
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <activity_work_handler+0x28>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	1ac0      	subs	r0, r0, r3
        if (inactive_time > MAX_IDLE_MS) {
 8000550:	f247 5330 	movw	r3, #30000	; 0x7530
 8000554:	4298      	cmp	r0, r3
 8000556:	dc00      	bgt.n	800055a <activity_work_handler+0x1e>
}
 8000558:	bd08      	pop	{r3, pc}
        set_state(ZMK_ACTIVITY_IDLE);
 800055a:	2001      	movs	r0, #1
 800055c:	f7ff ffd0 	bl	8000500 <set_state>
}
 8000560:	e7fa      	b.n	8000558 <activity_work_handler+0x1c>
 8000562:	bf00      	nop
 8000564:	200033a8 	.word	0x200033a8

08000568 <zmk_kscan_process_msgq>:

    k_msgq_put(&zmk_kscan_msgq, &ev, K_NO_WAIT);
    k_work_submit(&msg_processor.work);
}

void zmk_kscan_process_msgq(struct k_work *item) {
 8000568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056a:	b08d      	sub	sp, #52	; 0x34
    struct zmk_kscan_event ev;

    while (k_msgq_get(&zmk_kscan_msgq, &ev, K_NO_WAIT) == 0) {
 800056c:	e019      	b.n	80005a2 <zmk_kscan_process_msgq+0x3a>
        bool pressed = (ev.state == ZMK_KSCAN_EVENT_STATE_PRESSED);
        uint32_t position = zmk_matrix_transform_row_column_to_position(ev.row, ev.column);
        LOG_DBG("Row: %d, col: %d, position: %d, pressed: %s\n", ev.row, ev.column, position,
 800056e:	4b21      	ldr	r3, [pc, #132]	; (80005f4 <zmk_kscan_process_msgq+0x8c>)
 8000570:	9304      	str	r3, [sp, #16]
 8000572:	462b      	mov	r3, r5
 8000574:	2205      	movs	r2, #5
 8000576:	4669      	mov	r1, sp
 8000578:	481f      	ldr	r0, [pc, #124]	; (80005f8 <zmk_kscan_process_msgq+0x90>)
 800057a:	f006 f8e5 	bl	8006748 <log_n>
                (pressed ? "true" : "false"));
        ZMK_EVENT_RAISE(new_zmk_position_state_changed((struct zmk_position_state_changed){
 800057e:	9408      	str	r4, [sp, #32]
 8000580:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
 8000584:	f021 ff8a 	bl	802249c <z_impl_k_uptime_ticks>
 8000588:	220a      	movs	r2, #10
 800058a:	2300      	movs	r3, #0
 800058c:	f7ff fdfc 	bl	8000188 <__aeabi_uldivmod>
 8000590:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8000594:	ab0c      	add	r3, sp, #48	; 0x30
 8000596:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800059a:	f000 fafb 	bl	8000b94 <new_zmk_position_state_changed>
 800059e:	f019 f925 	bl	80197ec <zmk_event_manager_raise>
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&msgq, *(uintptr_t *)&data, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2300      	movs	r3, #0
 80005a6:	a905      	add	r1, sp, #20
 80005a8:	4814      	ldr	r0, [pc, #80]	; (80005fc <zmk_kscan_process_msgq+0x94>)
 80005aa:	f017 fe1d 	bl	80181e8 <z_impl_k_msgq_get>
    while (k_msgq_get(&zmk_kscan_msgq, &ev, K_NO_WAIT) == 0) {
 80005ae:	b9f8      	cbnz	r0, 80005f0 <zmk_kscan_process_msgq+0x88>
        bool pressed = (ev.state == ZMK_KSCAN_EVENT_STATE_PRESSED);
 80005b0:	9f07      	ldr	r7, [sp, #28]
 80005b2:	fab7 f687 	clz	r6, r7
 80005b6:	0976      	lsrs	r6, r6, #5
        uint32_t position = zmk_matrix_transform_row_column_to_position(ev.row, ev.column);
 80005b8:	9906      	ldr	r1, [sp, #24]
 80005ba:	9805      	ldr	r0, [sp, #20]
 80005bc:	f000 f88c 	bl	80006d8 <zmk_matrix_transform_row_column_to_position>
 80005c0:	4604      	mov	r4, r0
        LOG_DBG("Row: %d, col: %d, position: %d, pressed: %s\n", ev.row, ev.column, position,
 80005c2:	2304      	movs	r3, #4
 80005c4:	f363 0502 	bfi	r5, r3, #0, #3
 80005c8:	f36f 05c5 	bfc	r5, #3, #3
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <zmk_kscan_process_msgq+0x98>)
 80005ce:	4a0d      	ldr	r2, [pc, #52]	; (8000604 <zmk_kscan_process_msgq+0x9c>)
 80005d0:	1a9b      	subs	r3, r3, r2
 80005d2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80005d6:	f363 158f 	bfi	r5, r3, #6, #10
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <zmk_kscan_process_msgq+0xa0>)
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	9b05      	ldr	r3, [sp, #20]
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	9b06      	ldr	r3, [sp, #24]
 80005e4:	9302      	str	r3, [sp, #8]
 80005e6:	9003      	str	r0, [sp, #12]
 80005e8:	2f00      	cmp	r7, #0
 80005ea:	d1c0      	bne.n	800056e <zmk_kscan_process_msgq+0x6>
 80005ec:	4b07      	ldr	r3, [pc, #28]	; (800060c <zmk_kscan_process_msgq+0xa4>)
 80005ee:	e7bf      	b.n	8000570 <zmk_kscan_process_msgq+0x8>
            .state = pressed, .position = position, .timestamp = k_uptime_get()}));
    }
}
 80005f0:	b00d      	add	sp, #52	; 0x34
 80005f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f4:	08022db8 	.word	0x08022db8
 80005f8:	08022dc0 	.word	0x08022dc0
 80005fc:	20001028 	.word	0x20001028
 8000600:	08022c60 	.word	0x08022c60
 8000604:	08022b90 	.word	0x08022b90
 8000608:	08022e14 	.word	0x08022e14
 800060c:	08022db0 	.word	0x08022db0

08000610 <zmk_kscan_callback>:
                               bool pressed) {
 8000610:	b500      	push	{lr}
 8000612:	b085      	sub	sp, #20
    struct zmk_kscan_event ev = {
 8000614:	9101      	str	r1, [sp, #4]
 8000616:	9202      	str	r2, [sp, #8]
        .state = (pressed ? ZMK_KSCAN_EVENT_STATE_PRESSED : ZMK_KSCAN_EVENT_STATE_RELEASED)};
 8000618:	f083 0301 	eor.w	r3, r3, #1
    struct zmk_kscan_event ev = {
 800061c:	9303      	str	r3, [sp, #12]
	return z_impl_k_msgq_put(msgq, data, timeout);
 800061e:	2200      	movs	r2, #0
 8000620:	2300      	movs	r3, #0
 8000622:	a901      	add	r1, sp, #4
 8000624:	480d      	ldr	r0, [pc, #52]	; (800065c <zmk_kscan_callback+0x4c>)
 8000626:	f017 fd87 	bl	8018138 <z_impl_k_msgq_put>
 800062a:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <zmk_kscan_callback+0x50>)
 800062c:	f3bf 8f5b 	dmb	ish
 8000630:	e853 2f00 	ldrex	r2, [r3]
 8000634:	f042 0101 	orr.w	r1, r2, #1
 8000638:	e843 1000 	strex	r0, r1, [r3]
 800063c:	2800      	cmp	r0, #0
 800063e:	d1f7      	bne.n	8000630 <zmk_kscan_callback+0x20>
 8000640:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 8000644:	f012 0f01 	tst.w	r2, #1
 8000648:	d002      	beq.n	8000650 <zmk_kscan_callback+0x40>
}
 800064a:	b005      	add	sp, #20
 800064c:	f85d fb04 	ldr.w	pc, [sp], #4
		k_queue_append(&work_q->queue, work);
 8000650:	f1a3 0108 	sub.w	r1, r3, #8
 8000654:	4803      	ldr	r0, [pc, #12]	; (8000664 <zmk_kscan_callback+0x54>)
 8000656:	f021 fc2d 	bl	8021eb4 <k_queue_append>
 800065a:	e7f6      	b.n	800064a <zmk_kscan_callback+0x3a>
 800065c:	20001028 	.word	0x20001028
 8000660:	200033b4 	.word	0x200033b4
 8000664:	20003310 	.word	0x20003310

08000668 <zmk_kscan_init>:

int zmk_kscan_init(char *name) {
 8000668:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 800066a:	f017 faf1 	bl	8017c50 <z_impl_device_get_binding>
    const struct device *dev = device_get_binding(name);
    if (dev == NULL) {
 800066e:	b188      	cbz	r0, 8000694 <zmk_kscan_init+0x2c>
 8000670:	4604      	mov	r4, r0
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <zmk_kscan_init+0x58>)
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	4912      	ldr	r1, [pc, #72]	; (80006c4 <zmk_kscan_init+0x5c>)
 800067a:	6059      	str	r1, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
			     kscan_callback_t callback);

static inline int z_impl_kscan_config(const struct device *dev,
					kscan_callback_t callback)
{
	const struct kscan_driver_api *api =
 800067e:	6883      	ldr	r3, [r0, #8]
				(struct kscan_driver_api *)dev->api;

	return api->config(dev, callback);
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4911      	ldr	r1, [pc, #68]	; (80006c8 <zmk_kscan_init+0x60>)
 8000684:	4798      	blx	r3
 */
__syscall int kscan_enable_callback(const struct device *dev);

static inline int z_impl_kscan_enable_callback(const struct device *dev)
{
	const struct kscan_driver_api *api =
 8000686:	68a3      	ldr	r3, [r4, #8]
			(const struct kscan_driver_api *)dev->api;

	if (api->enable_callback == NULL) {
 8000688:	689b      	ldr	r3, [r3, #8]
 800068a:	b1bb      	cbz	r3, 80006bc <zmk_kscan_init+0x54>
		return -ENOTSUP;
	}

	return api->enable_callback(dev);
 800068c:	4620      	mov	r0, r4
 800068e:	4798      	blx	r3
    k_work_init(&msg_processor.work, zmk_kscan_process_msgq);

    kscan_config(dev, zmk_kscan_callback);
    kscan_enable_callback(dev);

    return 0;
 8000690:	2000      	movs	r0, #0
}
 8000692:	bd10      	pop	{r4, pc}
        LOG_ERR("Failed to get the KSCAN device");
 8000694:	f04f 0100 	mov.w	r1, #0
 8000698:	2301      	movs	r3, #1
 800069a:	f363 0102 	bfi	r1, r3, #0, #3
 800069e:	f36f 01c5 	bfc	r1, #3, #3
 80006a2:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <zmk_kscan_init+0x64>)
 80006a4:	4a0a      	ldr	r2, [pc, #40]	; (80006d0 <zmk_kscan_init+0x68>)
 80006a6:	1a9b      	subs	r3, r3, r2
 80006a8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80006ac:	f363 118f 	bfi	r1, r3, #6, #10
 80006b0:	4808      	ldr	r0, [pc, #32]	; (80006d4 <zmk_kscan_init+0x6c>)
 80006b2:	f006 f8b5 	bl	8006820 <log_0>
        return -EINVAL;
 80006b6:	f06f 0015 	mvn.w	r0, #21
 80006ba:	e7ea      	b.n	8000692 <zmk_kscan_init+0x2a>
    return 0;
 80006bc:	2000      	movs	r0, #0
 80006be:	e7e8      	b.n	8000692 <zmk_kscan_init+0x2a>
 80006c0:	200033ac 	.word	0x200033ac
 80006c4:	08000569 	.word	0x08000569
 80006c8:	08000611 	.word	0x08000611
 80006cc:	08022c60 	.word	0x08022c60
 80006d0:	08022b90 	.word	0x08022b90
 80006d4:	08022df4 	.word	0x08022df4

080006d8 <zmk_matrix_transform_row_column_to_position>:

#if DT_NODE_HAS_PROP(ZMK_KEYMAP_TRANSFORM_NODE, row_offset)
    row += DT_PROP(ZMK_KEYMAP_TRANSFORM_NODE, row_offset);
#endif

    matrix_index = (row * ZMK_MATRIX_COLS) + column;
 80006d8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80006dc:	eb01 0080 	add.w	r0, r1, r0, lsl #2
#ifdef ZMK_KEYMAP_TRANSFORM_NODE
    return transform[matrix_index];
#else
    return matrix_index;
#endif /* ZMK_KEYMAP_TRANSFORM_NODE */
};
 80006e0:	4b01      	ldr	r3, [pc, #4]	; (80006e8 <zmk_matrix_transform_row_column_to_position+0x10>)
 80006e2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80006e6:	4770      	bx	lr
 80006e8:	08022e2c 	.word	0x08022e2c

080006ec <zmk_hid_register_mod>:
        LOG_DBG("Modifiers set to 0x%02X", keyboard_report.body.modifiers);                        \
    }

zmk_mod_flags_t zmk_hid_get_explicit_mods() { return explicit_modifiers; }

int zmk_hid_register_mod(zmk_mod_t modifier) {
 80006ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ee:	b083      	sub	sp, #12
 80006f0:	4605      	mov	r5, r0
    explicit_modifier_counts[modifier]++;
 80006f2:	4a1a      	ldr	r2, [pc, #104]	; (800075c <zmk_hid_register_mod+0x70>)
 80006f4:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 80006f8:	3301      	adds	r3, #1
 80006fa:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    LOG_DBG("Modifier %d count %d", modifier, explicit_modifier_counts[modifier]);
 80006fe:	2704      	movs	r7, #4
 8000700:	f04f 0200 	mov.w	r2, #0
 8000704:	f367 0202 	bfi	r2, r7, #0, #3
 8000708:	f36f 02c5 	bfc	r2, #3, #3
 800070c:	4c14      	ldr	r4, [pc, #80]	; (8000760 <zmk_hid_register_mod+0x74>)
 800070e:	4915      	ldr	r1, [pc, #84]	; (8000764 <zmk_hid_register_mod+0x78>)
 8000710:	1a64      	subs	r4, r4, r1
 8000712:	f3c4 04c9 	ubfx	r4, r4, #3, #10
 8000716:	f364 128f 	bfi	r2, r4, #6, #10
 800071a:	4e13      	ldr	r6, [pc, #76]	; (8000768 <zmk_hid_register_mod+0x7c>)
 800071c:	f8ad 2000 	strh.w	r2, [sp]
 8000720:	4602      	mov	r2, r0
 8000722:	4631      	mov	r1, r6
 8000724:	4811      	ldr	r0, [pc, #68]	; (800076c <zmk_hid_register_mod+0x80>)
 8000726:	f005 fe3f 	bl	80063a8 <log_3>
    WRITE_BIT(explicit_modifiers, modifier, true);
 800072a:	2201      	movs	r2, #1
 800072c:	fa02 f505 	lsl.w	r5, r2, r5
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <zmk_hid_register_mod+0x84>)
 8000732:	781a      	ldrb	r2, [r3, #0]
 8000734:	432a      	orrs	r2, r5
 8000736:	b2d2      	uxtb	r2, r2
 8000738:	701a      	strb	r2, [r3, #0]
    SET_MODIFIERS(explicit_modifiers);
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <zmk_hid_register_mod+0x88>)
 800073c:	705a      	strb	r2, [r3, #1]
 800073e:	f04f 0300 	mov.w	r3, #0
 8000742:	f367 0302 	bfi	r3, r7, #0, #3
 8000746:	f36f 03c5 	bfc	r3, #3, #3
 800074a:	f364 138f 	bfi	r3, r4, #6, #10
 800074e:	4631      	mov	r1, r6
 8000750:	4809      	ldr	r0, [pc, #36]	; (8000778 <zmk_hid_register_mod+0x8c>)
 8000752:	f005 ff75 	bl	8006640 <log_2>
    return 0;
}
 8000756:	2000      	movs	r0, #0
 8000758:	b003      	add	sp, #12
 800075a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800075c:	200033b8 	.word	0x200033b8
 8000760:	08022c60 	.word	0x08022c60
 8000764:	08022b90 	.word	0x08022b90
 8000768:	08022f7c 	.word	0x08022f7c
 800076c:	08022ee0 	.word	0x08022ee0
 8000770:	20005963 	.word	0x20005963
 8000774:	2000013c 	.word	0x2000013c
 8000778:	08022efc 	.word	0x08022efc

0800077c <zmk_hid_unregister_mod>:

int zmk_hid_unregister_mod(zmk_mod_t modifier) {
 800077c:	b570      	push	{r4, r5, r6, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	4604      	mov	r4, r0
    if (explicit_modifier_counts[modifier] <= 0) {
 8000782:	4b34      	ldr	r3, [pc, #208]	; (8000854 <zmk_hid_unregister_mod+0xd8>)
 8000784:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000788:	2b00      	cmp	r3, #0
 800078a:	dd35      	ble.n	80007f8 <zmk_hid_unregister_mod+0x7c>
        LOG_ERR("Tried to unregister modifier %d too often", modifier);
        return -EINVAL;
    }
    explicit_modifier_counts[modifier]--;
 800078c:	3b01      	subs	r3, #1
 800078e:	4e31      	ldr	r6, [pc, #196]	; (8000854 <zmk_hid_unregister_mod+0xd8>)
 8000790:	f846 3020 	str.w	r3, [r6, r0, lsl #2]
    LOG_DBG("Modifier %d count: %d", modifier, explicit_modifier_counts[modifier]);
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	2204      	movs	r2, #4
 800079a:	f362 0102 	bfi	r1, r2, #0, #3
 800079e:	f36f 01c5 	bfc	r1, #3, #3
 80007a2:	4a2d      	ldr	r2, [pc, #180]	; (8000858 <zmk_hid_unregister_mod+0xdc>)
 80007a4:	482d      	ldr	r0, [pc, #180]	; (800085c <zmk_hid_unregister_mod+0xe0>)
 80007a6:	1a12      	subs	r2, r2, r0
 80007a8:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 80007ac:	f362 118f 	bfi	r1, r2, #6, #10
 80007b0:	4d2b      	ldr	r5, [pc, #172]	; (8000860 <zmk_hid_unregister_mod+0xe4>)
 80007b2:	f8ad 1000 	strh.w	r1, [sp]
 80007b6:	4622      	mov	r2, r4
 80007b8:	4629      	mov	r1, r5
 80007ba:	482a      	ldr	r0, [pc, #168]	; (8000864 <zmk_hid_unregister_mod+0xe8>)
 80007bc:	f005 fdf4 	bl	80063a8 <log_3>
    if (explicit_modifier_counts[modifier] == 0) {
 80007c0:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 80007c4:	b36b      	cbz	r3, 8000822 <zmk_hid_unregister_mod+0xa6>
        LOG_DBG("Modifier %d released", modifier);
        WRITE_BIT(explicit_modifiers, modifier, false);
    }
    SET_MODIFIERS(explicit_modifiers);
 80007c6:	4b28      	ldr	r3, [pc, #160]	; (8000868 <zmk_hid_unregister_mod+0xec>)
 80007c8:	781a      	ldrb	r2, [r3, #0]
 80007ca:	4b28      	ldr	r3, [pc, #160]	; (800086c <zmk_hid_unregister_mod+0xf0>)
 80007cc:	705a      	strb	r2, [r3, #1]
 80007ce:	f04f 0300 	mov.w	r3, #0
 80007d2:	2104      	movs	r1, #4
 80007d4:	f361 0302 	bfi	r3, r1, #0, #3
 80007d8:	f36f 03c5 	bfc	r3, #3, #3
 80007dc:	491e      	ldr	r1, [pc, #120]	; (8000858 <zmk_hid_unregister_mod+0xdc>)
 80007de:	481f      	ldr	r0, [pc, #124]	; (800085c <zmk_hid_unregister_mod+0xe0>)
 80007e0:	1a09      	subs	r1, r1, r0
 80007e2:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 80007e6:	f361 138f 	bfi	r3, r1, #6, #10
 80007ea:	4629      	mov	r1, r5
 80007ec:	4820      	ldr	r0, [pc, #128]	; (8000870 <zmk_hid_unregister_mod+0xf4>)
 80007ee:	f005 ff27 	bl	8006640 <log_2>
    return 0;
 80007f2:	2000      	movs	r0, #0
}
 80007f4:	b002      	add	sp, #8
 80007f6:	bd70      	pop	{r4, r5, r6, pc}
        LOG_ERR("Tried to unregister modifier %d too often", modifier);
 80007f8:	f04f 0200 	mov.w	r2, #0
 80007fc:	2301      	movs	r3, #1
 80007fe:	f363 0202 	bfi	r2, r3, #0, #3
 8000802:	f36f 02c5 	bfc	r2, #3, #3
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <zmk_hid_unregister_mod+0xdc>)
 8000808:	4914      	ldr	r1, [pc, #80]	; (800085c <zmk_hid_unregister_mod+0xe0>)
 800080a:	1a5b      	subs	r3, r3, r1
 800080c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8000810:	f363 128f 	bfi	r2, r3, #6, #10
 8000814:	4601      	mov	r1, r0
 8000816:	4817      	ldr	r0, [pc, #92]	; (8000874 <zmk_hid_unregister_mod+0xf8>)
 8000818:	f005 fe92 	bl	8006540 <log_1>
        return -EINVAL;
 800081c:	f06f 0015 	mvn.w	r0, #21
 8000820:	e7e8      	b.n	80007f4 <zmk_hid_unregister_mod+0x78>
        LOG_DBG("Modifier %d released", modifier);
 8000822:	2204      	movs	r2, #4
 8000824:	f362 0302 	bfi	r3, r2, #0, #3
 8000828:	f36f 03c5 	bfc	r3, #3, #3
 800082c:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <zmk_hid_unregister_mod+0xdc>)
 800082e:	490b      	ldr	r1, [pc, #44]	; (800085c <zmk_hid_unregister_mod+0xe0>)
 8000830:	1a52      	subs	r2, r2, r1
 8000832:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8000836:	f362 138f 	bfi	r3, r2, #6, #10
 800083a:	4622      	mov	r2, r4
 800083c:	4629      	mov	r1, r5
 800083e:	480e      	ldr	r0, [pc, #56]	; (8000878 <zmk_hid_unregister_mod+0xfc>)
 8000840:	f005 fefe 	bl	8006640 <log_2>
        WRITE_BIT(explicit_modifiers, modifier, false);
 8000844:	2001      	movs	r0, #1
 8000846:	40a0      	lsls	r0, r4
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <zmk_hid_unregister_mod+0xec>)
 800084a:	781c      	ldrb	r4, [r3, #0]
 800084c:	ea24 0400 	bic.w	r4, r4, r0
 8000850:	701c      	strb	r4, [r3, #0]
 8000852:	e7b8      	b.n	80007c6 <zmk_hid_unregister_mod+0x4a>
 8000854:	200033b8 	.word	0x200033b8
 8000858:	08022c60 	.word	0x08022c60
 800085c:	08022b90 	.word	0x08022b90
 8000860:	08022f94 	.word	0x08022f94
 8000864:	08022f44 	.word	0x08022f44
 8000868:	20005963 	.word	0x20005963
 800086c:	2000013c 	.word	0x2000013c
 8000870:	08022efc 	.word	0x08022efc
 8000874:	08022f18 	.word	0x08022f18
 8000878:	08022f60 	.word	0x08022f60

0800087c <zmk_hid_implicit_modifiers_press>:
        if (val) {                                                                                 \
            break;                                                                                 \
        }                                                                                          \
    }

int zmk_hid_implicit_modifiers_press(zmk_mod_flags_t implicit_modifiers) {
 800087c:	b508      	push	{r3, lr}
    SET_MODIFIERS(explicit_modifiers | implicit_modifiers);
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <zmk_hid_implicit_modifiers_press+0x34>)
 8000880:	781a      	ldrb	r2, [r3, #0]
 8000882:	4302      	orrs	r2, r0
 8000884:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <zmk_hid_implicit_modifiers_press+0x38>)
 8000886:	705a      	strb	r2, [r3, #1]
 8000888:	f04f 0300 	mov.w	r3, #0
 800088c:	2104      	movs	r1, #4
 800088e:	f361 0302 	bfi	r3, r1, #0, #3
 8000892:	f36f 03c5 	bfc	r3, #3, #3
 8000896:	4908      	ldr	r1, [pc, #32]	; (80008b8 <zmk_hid_implicit_modifiers_press+0x3c>)
 8000898:	4808      	ldr	r0, [pc, #32]	; (80008bc <zmk_hid_implicit_modifiers_press+0x40>)
 800089a:	1a09      	subs	r1, r1, r0
 800089c:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 80008a0:	f361 138f 	bfi	r3, r1, #6, #10
 80008a4:	4906      	ldr	r1, [pc, #24]	; (80008c0 <zmk_hid_implicit_modifiers_press+0x44>)
 80008a6:	4807      	ldr	r0, [pc, #28]	; (80008c4 <zmk_hid_implicit_modifiers_press+0x48>)
 80008a8:	f005 feca 	bl	8006640 <log_2>
    return 0;
}
 80008ac:	2000      	movs	r0, #0
 80008ae:	bd08      	pop	{r3, pc}
 80008b0:	20005963 	.word	0x20005963
 80008b4:	2000013c 	.word	0x2000013c
 80008b8:	08022c60 	.word	0x08022c60
 80008bc:	08022b90 	.word	0x08022b90
 80008c0:	08022fac 	.word	0x08022fac
 80008c4:	08022efc 	.word	0x08022efc

080008c8 <zmk_hid_implicit_modifiers_release>:

int zmk_hid_implicit_modifiers_release() {
 80008c8:	b508      	push	{r3, lr}
    SET_MODIFIERS(explicit_modifiers);
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <zmk_hid_implicit_modifiers_release+0x34>)
 80008cc:	781a      	ldrb	r2, [r3, #0]
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <zmk_hid_implicit_modifiers_release+0x38>)
 80008d0:	705a      	strb	r2, [r3, #1]
 80008d2:	f04f 0300 	mov.w	r3, #0
 80008d6:	2104      	movs	r1, #4
 80008d8:	f361 0302 	bfi	r3, r1, #0, #3
 80008dc:	f36f 03c5 	bfc	r3, #3, #3
 80008e0:	4908      	ldr	r1, [pc, #32]	; (8000904 <zmk_hid_implicit_modifiers_release+0x3c>)
 80008e2:	4809      	ldr	r0, [pc, #36]	; (8000908 <zmk_hid_implicit_modifiers_release+0x40>)
 80008e4:	1a09      	subs	r1, r1, r0
 80008e6:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 80008ea:	f361 138f 	bfi	r3, r1, #6, #10
 80008ee:	4907      	ldr	r1, [pc, #28]	; (800090c <zmk_hid_implicit_modifiers_release+0x44>)
 80008f0:	4807      	ldr	r0, [pc, #28]	; (8000910 <zmk_hid_implicit_modifiers_release+0x48>)
 80008f2:	f005 fea5 	bl	8006640 <log_2>
    return 0;
}
 80008f6:	2000      	movs	r0, #0
 80008f8:	bd08      	pop	{r3, pc}
 80008fa:	bf00      	nop
 80008fc:	20005963 	.word	0x20005963
 8000900:	2000013c 	.word	0x2000013c
 8000904:	08022c60 	.word	0x08022c60
 8000908:	08022b90 	.word	0x08022b90
 800090c:	08022fd0 	.word	0x08022fd0
 8000910:	08022efc 	.word	0x08022efc

08000914 <zmk_hid_keyboard_press>:

int zmk_hid_keyboard_press(zmk_key_t code) {
 8000914:	b508      	push	{r3, lr}
    if (code >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL && code <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI) {
 8000916:	f1a0 03e0 	sub.w	r3, r0, #224	; 0xe0
 800091a:	2b07      	cmp	r3, #7
 800091c:	d901      	bls.n	8000922 <zmk_hid_keyboard_press+0xe>
        return zmk_hid_register_mod(code - HID_USAGE_KEY_KEYBOARD_LEFTCONTROL);
    }
    TOGGLE_KEYBOARD(0U, code);
 800091e:	2300      	movs	r3, #0
 8000920:	e005      	b.n	800092e <zmk_hid_keyboard_press+0x1a>
        return zmk_hid_register_mod(code - HID_USAGE_KEY_KEYBOARD_LEFTCONTROL);
 8000922:	3020      	adds	r0, #32
 8000924:	b2c0      	uxtb	r0, r0
 8000926:	f7ff fee1 	bl	80006ec <zmk_hid_register_mod>
 800092a:	e00f      	b.n	800094c <zmk_hid_keyboard_press+0x38>
    TOGGLE_KEYBOARD(0U, code);
 800092c:	3301      	adds	r3, #1
 800092e:	2b05      	cmp	r3, #5
 8000930:	dc0b      	bgt.n	800094a <zmk_hid_keyboard_press+0x36>
 8000932:	4a07      	ldr	r2, [pc, #28]	; (8000950 <zmk_hid_keyboard_press+0x3c>)
 8000934:	441a      	add	r2, r3
 8000936:	78d2      	ldrb	r2, [r2, #3]
 8000938:	2a00      	cmp	r2, #0
 800093a:	d1f7      	bne.n	800092c <zmk_hid_keyboard_press+0x18>
 800093c:	4a04      	ldr	r2, [pc, #16]	; (8000950 <zmk_hid_keyboard_press+0x3c>)
 800093e:	441a      	add	r2, r3
 8000940:	70d0      	strb	r0, [r2, #3]
 8000942:	2800      	cmp	r0, #0
 8000944:	d0f2      	beq.n	800092c <zmk_hid_keyboard_press+0x18>
    return 0;
 8000946:	2000      	movs	r0, #0
 8000948:	e000      	b.n	800094c <zmk_hid_keyboard_press+0x38>
 800094a:	2000      	movs	r0, #0
};
 800094c:	bd08      	pop	{r3, pc}
 800094e:	bf00      	nop
 8000950:	2000013c 	.word	0x2000013c

08000954 <zmk_hid_keyboard_release>:

int zmk_hid_keyboard_release(zmk_key_t code) {
 8000954:	b508      	push	{r3, lr}
    if (code >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL && code <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI) {
 8000956:	f1a0 03e0 	sub.w	r3, r0, #224	; 0xe0
 800095a:	2b07      	cmp	r3, #7
 800095c:	d901      	bls.n	8000962 <zmk_hid_keyboard_release+0xe>
        return zmk_hid_unregister_mod(code - HID_USAGE_KEY_KEYBOARD_LEFTCONTROL);
    }
    TOGGLE_KEYBOARD(code, 0U);
 800095e:	2300      	movs	r3, #0
 8000960:	e005      	b.n	800096e <zmk_hid_keyboard_release+0x1a>
        return zmk_hid_unregister_mod(code - HID_USAGE_KEY_KEYBOARD_LEFTCONTROL);
 8000962:	3020      	adds	r0, #32
 8000964:	b2c0      	uxtb	r0, r0
 8000966:	f7ff ff09 	bl	800077c <zmk_hid_unregister_mod>
 800096a:	e00d      	b.n	8000988 <zmk_hid_keyboard_release+0x34>
    TOGGLE_KEYBOARD(code, 0U);
 800096c:	3301      	adds	r3, #1
 800096e:	2b05      	cmp	r3, #5
 8000970:	dc09      	bgt.n	8000986 <zmk_hid_keyboard_release+0x32>
 8000972:	4a06      	ldr	r2, [pc, #24]	; (800098c <zmk_hid_keyboard_release+0x38>)
 8000974:	441a      	add	r2, r3
 8000976:	78d2      	ldrb	r2, [r2, #3]
 8000978:	4282      	cmp	r2, r0
 800097a:	d1f7      	bne.n	800096c <zmk_hid_keyboard_release+0x18>
 800097c:	4a03      	ldr	r2, [pc, #12]	; (800098c <zmk_hid_keyboard_release+0x38>)
 800097e:	441a      	add	r2, r3
 8000980:	2100      	movs	r1, #0
 8000982:	70d1      	strb	r1, [r2, #3]
 8000984:	e7f2      	b.n	800096c <zmk_hid_keyboard_release+0x18>
    return 0;
 8000986:	2000      	movs	r0, #0
};
 8000988:	bd08      	pop	{r3, pc}
 800098a:	bf00      	nop
 800098c:	2000013c 	.word	0x2000013c

08000990 <zmk_hid_keyboard_clear>:

void zmk_hid_keyboard_clear() { memset(&keyboard_report.body, 0, sizeof(keyboard_report.body)); }
 8000990:	b508      	push	{r3, lr}
 8000992:	2208      	movs	r2, #8
 8000994:	2100      	movs	r1, #0
 8000996:	4802      	ldr	r0, [pc, #8]	; (80009a0 <zmk_hid_keyboard_clear+0x10>)
 8000998:	f01b ffae 	bl	801c8f8 <memset>
 800099c:	bd08      	pop	{r3, pc}
 800099e:	bf00      	nop
 80009a0:	2000013d 	.word	0x2000013d

080009a4 <zmk_hid_consumer_press>:

int zmk_hid_consumer_press(zmk_key_t code) {
    TOGGLE_CONSUMER(0U, code);
 80009a4:	2300      	movs	r3, #0
 80009a6:	e000      	b.n	80009aa <zmk_hid_consumer_press+0x6>
 80009a8:	3301      	adds	r3, #1
 80009aa:	2b05      	cmp	r3, #5
 80009ac:	dc0d      	bgt.n	80009ca <zmk_hid_consumer_press+0x26>
 80009ae:	4a08      	ldr	r2, [pc, #32]	; (80009d0 <zmk_hid_consumer_press+0x2c>)
 80009b0:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80009b4:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 80009b8:	2a00      	cmp	r2, #0
 80009ba:	d1f5      	bne.n	80009a8 <zmk_hid_consumer_press+0x4>
 80009bc:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <zmk_hid_consumer_press+0x2c>)
 80009be:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80009c2:	f8a2 0001 	strh.w	r0, [r2, #1]
 80009c6:	2800      	cmp	r0, #0
 80009c8:	d0ee      	beq.n	80009a8 <zmk_hid_consumer_press+0x4>
    return 0;
};
 80009ca:	2000      	movs	r0, #0
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	2000012c 	.word	0x2000012c

080009d4 <zmk_hid_consumer_release>:

int zmk_hid_consumer_release(zmk_key_t code) {
    TOGGLE_CONSUMER(code, 0U);
 80009d4:	2300      	movs	r3, #0
 80009d6:	e000      	b.n	80009da <zmk_hid_consumer_release+0x6>
 80009d8:	3301      	adds	r3, #1
 80009da:	2b05      	cmp	r3, #5
 80009dc:	dc0d      	bgt.n	80009fa <zmk_hid_consumer_release+0x26>
 80009de:	4a08      	ldr	r2, [pc, #32]	; (8000a00 <zmk_hid_consumer_release+0x2c>)
 80009e0:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80009e4:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 80009e8:	4282      	cmp	r2, r0
 80009ea:	d1f5      	bne.n	80009d8 <zmk_hid_consumer_release+0x4>
 80009ec:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <zmk_hid_consumer_release+0x2c>)
 80009ee:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80009f2:	2100      	movs	r1, #0
 80009f4:	7051      	strb	r1, [r2, #1]
 80009f6:	7091      	strb	r1, [r2, #2]
 80009f8:	e7ee      	b.n	80009d8 <zmk_hid_consumer_release+0x4>
    return 0;
};
 80009fa:	2000      	movs	r0, #0
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	2000012c 	.word	0x2000012c

08000a04 <zmk_hid_consumer_clear>:

void zmk_hid_consumer_clear() { memset(&consumer_report.body, 0, sizeof(consumer_report.body)); }
 8000a04:	b508      	push	{r3, lr}
 8000a06:	220c      	movs	r2, #12
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4802      	ldr	r0, [pc, #8]	; (8000a14 <zmk_hid_consumer_clear+0x10>)
 8000a0c:	f01b ff74 	bl	801c8f8 <memset>
 8000a10:	bd08      	pop	{r3, pc}
 8000a12:	bf00      	nop
 8000a14:	2000012d 	.word	0x2000012d

08000a18 <zmk_hid_get_keyboard_report>:

struct zmk_hid_keyboard_report *zmk_hid_get_keyboard_report() {
    return &keyboard_report;
}
 8000a18:	4800      	ldr	r0, [pc, #0]	; (8000a1c <zmk_hid_get_keyboard_report+0x4>)
 8000a1a:	4770      	bx	lr
 8000a1c:	2000013c 	.word	0x2000013c

08000a20 <zmk_hid_get_consumer_report>:

struct zmk_hid_consumer_report *zmk_hid_get_consumer_report() {
    return &consumer_report;
}
 8000a20:	4800      	ldr	r0, [pc, #0]	; (8000a24 <zmk_hid_get_consumer_report+0x4>)
 8000a22:	4770      	bx	lr
 8000a24:	2000012c 	.word	0x2000012c

08000a28 <zmk_event_manager_handle_from>:
extern struct zmk_event_type *__event_type_end[];

extern struct zmk_event_subscription __event_subscriptions_start[];
extern struct zmk_event_subscription __event_subscriptions_end[];

int zmk_event_manager_handle_from(zmk_event_t *event, uint8_t start_index) {
 8000a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a2a:	4606      	mov	r6, r0
    int ret = 0;
    uint8_t len = __event_subscriptions_end - __event_subscriptions_start;
 8000a2c:	4f2f      	ldr	r7, [pc, #188]	; (8000aec <zmk_event_manager_handle_from+0xc4>)
 8000a2e:	4b30      	ldr	r3, [pc, #192]	; (8000af0 <zmk_event_manager_handle_from+0xc8>)
 8000a30:	1aff      	subs	r7, r7, r3
 8000a32:	10ff      	asrs	r7, r7, #3
    for (int i = start_index; i < len; i++) {
 8000a34:	460c      	mov	r4, r1
    int ret = 0;
 8000a36:	2500      	movs	r5, #0
    for (int i = start_index; i < len; i++) {
 8000a38:	e02c      	b.n	8000a94 <zmk_event_manager_handle_from+0x6c>
        struct zmk_event_subscription *ev_sub = __event_subscriptions_start + i;
        if (ev_sub->event_type == event->event) {
            ret = ev_sub->listener->callback(event);
            if (ret < 0) {
                LOG_DBG("Listener returned an error: %d", ret);
 8000a3a:	f04f 0300 	mov.w	r3, #0
 8000a3e:	2204      	movs	r2, #4
 8000a40:	f362 0302 	bfi	r3, r2, #0, #3
 8000a44:	f36f 03c5 	bfc	r3, #3, #3
 8000a48:	4a2a      	ldr	r2, [pc, #168]	; (8000af4 <zmk_event_manager_handle_from+0xcc>)
 8000a4a:	492b      	ldr	r1, [pc, #172]	; (8000af8 <zmk_event_manager_handle_from+0xd0>)
 8000a4c:	1a52      	subs	r2, r2, r1
 8000a4e:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8000a52:	f362 138f 	bfi	r3, r2, #6, #10
 8000a56:	462a      	mov	r2, r5
 8000a58:	4928      	ldr	r1, [pc, #160]	; (8000afc <zmk_event_manager_handle_from+0xd4>)
 8000a5a:	4829      	ldr	r0, [pc, #164]	; (8000b00 <zmk_event_manager_handle_from+0xd8>)
 8000a5c:	f005 fdf0 	bl	8006640 <log_2>
                goto release;
 8000a60:	e012      	b.n	8000a88 <zmk_event_manager_handle_from+0x60>
            } else if (ret > 0) {
                switch (ret) {
                case ZMK_EV_EVENT_HANDLED:
                    LOG_DBG("Listener handled the event");
 8000a62:	f04f 0200 	mov.w	r2, #0
 8000a66:	2304      	movs	r3, #4
 8000a68:	f363 0202 	bfi	r2, r3, #0, #3
 8000a6c:	f36f 02c5 	bfc	r2, #3, #3
 8000a70:	4b20      	ldr	r3, [pc, #128]	; (8000af4 <zmk_event_manager_handle_from+0xcc>)
 8000a72:	4921      	ldr	r1, [pc, #132]	; (8000af8 <zmk_event_manager_handle_from+0xd0>)
 8000a74:	1a5b      	subs	r3, r3, r1
 8000a76:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8000a7a:	f363 128f 	bfi	r2, r3, #6, #10
 8000a7e:	491f      	ldr	r1, [pc, #124]	; (8000afc <zmk_event_manager_handle_from+0xd4>)
 8000a80:	4820      	ldr	r0, [pc, #128]	; (8000b04 <zmk_event_manager_handle_from+0xdc>)
 8000a82:	f005 fd5d 	bl	8006540 <log_1>
                    ret = 0;
 8000a86:	2500      	movs	r5, #0
            }
        }
    }

release:
    k_free(event);
 8000a88:	4630      	mov	r0, r6
 8000a8a:	f021 fdfe 	bl	802268a <k_free>
    return ret;
}
 8000a8e:	4628      	mov	r0, r5
 8000a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (int i = start_index; i < len; i++) {
 8000a92:	3401      	adds	r4, #1
 8000a94:	b2fb      	uxtb	r3, r7
 8000a96:	429c      	cmp	r4, r3
 8000a98:	daf6      	bge.n	8000a88 <zmk_event_manager_handle_from+0x60>
        struct zmk_event_subscription *ev_sub = __event_subscriptions_start + i;
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <zmk_event_manager_handle_from+0xc8>)
 8000a9c:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
        if (ev_sub->event_type == event->event) {
 8000aa0:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
 8000aa4:	6833      	ldr	r3, [r6, #0]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d1f3      	bne.n	8000a92 <zmk_event_manager_handle_from+0x6a>
            ret = ev_sub->listener->callback(event);
 8000aaa:	684b      	ldr	r3, [r1, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4630      	mov	r0, r6
 8000ab0:	4798      	blx	r3
            if (ret < 0) {
 8000ab2:	1e05      	subs	r5, r0, #0
 8000ab4:	dbc1      	blt.n	8000a3a <zmk_event_manager_handle_from+0x12>
            } else if (ret > 0) {
 8000ab6:	2d00      	cmp	r5, #0
 8000ab8:	ddeb      	ble.n	8000a92 <zmk_event_manager_handle_from+0x6a>
                switch (ret) {
 8000aba:	2d01      	cmp	r5, #1
 8000abc:	d0d1      	beq.n	8000a62 <zmk_event_manager_handle_from+0x3a>
 8000abe:	2d02      	cmp	r5, #2
 8000ac0:	d1e7      	bne.n	8000a92 <zmk_event_manager_handle_from+0x6a>
                    LOG_DBG("Listener captured the event");
 8000ac2:	f04f 0200 	mov.w	r2, #0
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	f363 0202 	bfi	r2, r3, #0, #3
 8000acc:	f36f 02c5 	bfc	r2, #3, #3
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <zmk_event_manager_handle_from+0xcc>)
 8000ad2:	4909      	ldr	r1, [pc, #36]	; (8000af8 <zmk_event_manager_handle_from+0xd0>)
 8000ad4:	1a5b      	subs	r3, r3, r1
 8000ad6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8000ada:	f363 128f 	bfi	r2, r3, #6, #10
 8000ade:	4907      	ldr	r1, [pc, #28]	; (8000afc <zmk_event_manager_handle_from+0xd4>)
 8000ae0:	4809      	ldr	r0, [pc, #36]	; (8000b08 <zmk_event_manager_handle_from+0xe0>)
 8000ae2:	f005 fd2d 	bl	8006540 <log_1>
                    event->last_listener_index = i;
 8000ae6:	7134      	strb	r4, [r6, #4]
                    return 0;
 8000ae8:	2500      	movs	r5, #0
 8000aea:	e7d0      	b.n	8000a8e <zmk_event_manager_handle_from+0x66>
 8000aec:	0802845c 	.word	0x0802845c
 8000af0:	08028414 	.word	0x08028414
 8000af4:	08022c60 	.word	0x08022c60
 8000af8:	08022b90 	.word	0x08022b90
 8000afc:	08023084 	.word	0x08023084
 8000b00:	08022ff4 	.word	0x08022ff4
 8000b04:	08023018 	.word	0x08023018
 8000b08:	08023038 	.word	0x08023038

08000b0c <zmk_event_manager_raise_at>:
    LOG_WRN("Unable to find where to raise this after event");

    return -EINVAL;
}

int zmk_event_manager_raise_at(zmk_event_t *event, const struct zmk_listener *listener) {
 8000b0c:	b570      	push	{r4, r5, r6, lr}
    uint8_t len = __event_subscriptions_end - __event_subscriptions_start;
 8000b0e:	4d16      	ldr	r5, [pc, #88]	; (8000b68 <zmk_event_manager_raise_at+0x5c>)
 8000b10:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <zmk_event_manager_raise_at+0x60>)
 8000b12:	1aed      	subs	r5, r5, r3
 8000b14:	10ed      	asrs	r5, r5, #3
    for (int i = 0; i < len; i++) {
 8000b16:	2300      	movs	r3, #0
 8000b18:	e000      	b.n	8000b1c <zmk_event_manager_raise_at+0x10>
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	b2ea      	uxtb	r2, r5
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	dd0e      	ble.n	8000b40 <zmk_event_manager_raise_at+0x34>
        struct zmk_event_subscription *ev_sub = __event_subscriptions_start + i;
 8000b22:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <zmk_event_manager_raise_at+0x60>)
 8000b24:	eb02 06c3 	add.w	r6, r2, r3, lsl #3

        if (ev_sub->event_type == event->event && ev_sub->listener == listener) {
 8000b28:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8000b2c:	6802      	ldr	r2, [r0, #0]
 8000b2e:	4294      	cmp	r4, r2
 8000b30:	d1f3      	bne.n	8000b1a <zmk_event_manager_raise_at+0xe>
 8000b32:	6872      	ldr	r2, [r6, #4]
 8000b34:	428a      	cmp	r2, r1
 8000b36:	d1f0      	bne.n	8000b1a <zmk_event_manager_raise_at+0xe>
            return zmk_event_manager_handle_from(event, i);
 8000b38:	b2d9      	uxtb	r1, r3
 8000b3a:	f7ff ff75 	bl	8000a28 <zmk_event_manager_handle_from>
 8000b3e:	e012      	b.n	8000b66 <zmk_event_manager_raise_at+0x5a>
        }
    }

    LOG_WRN("Unable to find where to raise this event");
 8000b40:	f04f 0100 	mov.w	r1, #0
 8000b44:	2302      	movs	r3, #2
 8000b46:	f363 0102 	bfi	r1, r3, #0, #3
 8000b4a:	f36f 01c5 	bfc	r1, #3, #3
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <zmk_event_manager_raise_at+0x64>)
 8000b50:	4a08      	ldr	r2, [pc, #32]	; (8000b74 <zmk_event_manager_raise_at+0x68>)
 8000b52:	1a9b      	subs	r3, r3, r2
 8000b54:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8000b58:	f363 118f 	bfi	r1, r3, #6, #10
 8000b5c:	4806      	ldr	r0, [pc, #24]	; (8000b78 <zmk_event_manager_raise_at+0x6c>)
 8000b5e:	f005 fe5f 	bl	8006820 <log_0>

    return -EINVAL;
 8000b62:	f06f 0015 	mvn.w	r0, #21
}
 8000b66:	bd70      	pop	{r4, r5, r6, pc}
 8000b68:	0802845c 	.word	0x0802845c
 8000b6c:	08028414 	.word	0x08028414
 8000b70:	08022c60 	.word	0x08022c60
 8000b74:	08022b90 	.word	0x08022b90
 8000b78:	08023058 	.word	0x08023058

08000b7c <new_zmk_activity_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/activity_state_changed.h>

 8000b7c:	b510      	push	{r4, lr}
 8000b7e:	4604      	mov	r4, r0
 8000b80:	200c      	movs	r0, #12
 8000b82:	f018 fdf1 	bl	8019768 <k_malloc>
 8000b86:	4a02      	ldr	r2, [pc, #8]	; (8000b90 <new_zmk_activity_state_changed+0x14>)
 8000b88:	6002      	str	r2, [r0, #0]
 8000b8a:	7204      	strb	r4, [r0, #8]
 8000b8c:	bd10      	pop	{r4, pc}
 8000b8e:	bf00      	nop
 8000b90:	080230c0 	.word	0x080230c0

08000b94 <new_zmk_position_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/position_state_changed.h>

 8000b94:	b570      	push	{r4, r5, r6, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	466c      	mov	r4, sp
 8000b9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000b9e:	2018      	movs	r0, #24
 8000ba0:	f018 fde2 	bl	8019768 <k_malloc>
 8000ba4:	4606      	mov	r6, r0
 8000ba6:	4605      	mov	r5, r0
 8000ba8:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <new_zmk_position_state_changed+0x28>)
 8000baa:	f845 3b08 	str.w	r3, [r5], #8
 8000bae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000bb2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000bb6:	4630      	mov	r0, r6
 8000bb8:	b004      	add	sp, #16
 8000bba:	bd70      	pop	{r4, r5, r6, pc}
 8000bbc:	080230e0 	.word	0x080230e0

08000bc0 <as_zmk_position_state_changed>:
 8000bc0:	6802      	ldr	r2, [r0, #0]
 8000bc2:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <as_zmk_position_state_changed+0x10>)
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d101      	bne.n	8000bcc <as_zmk_position_state_changed+0xc>
 8000bc8:	3008      	adds	r0, #8
 8000bca:	4770      	bx	lr
 8000bcc:	2000      	movs	r0, #0
 8000bce:	4770      	bx	lr
 8000bd0:	080230e0 	.word	0x080230e0

08000bd4 <new_zmk_layer_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/layer_state_changed.h>

 8000bd4:	b570      	push	{r4, r5, r6, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	466c      	mov	r4, sp
 8000bda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000bde:	2018      	movs	r0, #24
 8000be0:	f018 fdc2 	bl	8019768 <k_malloc>
 8000be4:	4606      	mov	r6, r0
 8000be6:	4605      	mov	r5, r0
 8000be8:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <new_zmk_layer_state_changed+0x28>)
 8000bea:	f845 3b08 	str.w	r3, [r5], #8
 8000bee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000bf2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000bf6:	4630      	mov	r0, r6
 8000bf8:	b004      	add	sp, #16
 8000bfa:	bd70      	pop	{r4, r5, r6, pc}
 8000bfc:	080230fc 	.word	0x080230fc

08000c00 <new_zmk_keycode_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/keycode_state_changed.h>

ZMK_EVENT_IMPL(zmk_keycode_state_changed);
 8000c00:	b084      	sub	sp, #16
 8000c02:	b570      	push	{r4, r5, r6, lr}
 8000c04:	ac04      	add	r4, sp, #16
 8000c06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000c0a:	2020      	movs	r0, #32
 8000c0c:	f018 fdac 	bl	8019768 <k_malloc>
 8000c10:	4606      	mov	r6, r0
 8000c12:	4604      	mov	r4, r0
 8000c14:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <new_zmk_keycode_state_changed+0x34>)
 8000c16:	f844 3b08 	str.w	r3, [r4], #8
 8000c1a:	ad04      	add	r5, sp, #16
 8000c1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c20:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c24:	e884 0003 	stmia.w	r4, {r0, r1}
 8000c28:	4630      	mov	r0, r6
 8000c2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000c2e:	b004      	add	sp, #16
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	0802311c 	.word	0x0802311c

08000c38 <as_zmk_keycode_state_changed>:
 8000c38:	6802      	ldr	r2, [r0, #0]
 8000c3a:	4b03      	ldr	r3, [pc, #12]	; (8000c48 <as_zmk_keycode_state_changed+0x10>)
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d101      	bne.n	8000c44 <as_zmk_keycode_state_changed+0xc>
 8000c40:	3008      	adds	r0, #8
 8000c42:	4770      	bx	lr
 8000c44:	2000      	movs	r0, #0
 8000c46:	4770      	bx	lr
 8000c48:	0802311c 	.word	0x0802311c

08000c4c <new_zmk_ble_active_profile_changed>:
 */

#include <kernel.h>
#include <zmk/events/ble_active_profile_changed.h>

 8000c4c:	b510      	push	{r4, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	466c      	mov	r4, sp
 8000c52:	e884 0003 	stmia.w	r4, {r0, r1}
 8000c56:	2010      	movs	r0, #16
 8000c58:	f018 fd86 	bl	8019768 <k_malloc>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	4602      	mov	r2, r0
 8000c60:	4904      	ldr	r1, [pc, #16]	; (8000c74 <new_zmk_ble_active_profile_changed+0x28>)
 8000c62:	f842 1b08 	str.w	r1, [r2], #8
 8000c66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c6a:	e882 0003 	stmia.w	r2, {r0, r1}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	b002      	add	sp, #8
 8000c72:	bd10      	pop	{r4, pc}
 8000c74:	08023178 	.word	0x08023178

08000c78 <new_zmk_battery_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/battery_state_changed.h>

 8000c78:	b510      	push	{r4, lr}
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	200c      	movs	r0, #12
 8000c7e:	f018 fd73 	bl	8019768 <k_malloc>
 8000c82:	4a02      	ldr	r2, [pc, #8]	; (8000c8c <new_zmk_battery_state_changed+0x14>)
 8000c84:	6002      	str	r2, [r0, #0]
 8000c86:	7204      	strb	r4, [r0, #8]
 8000c88:	bd10      	pop	{r4, pc}
 8000c8a:	bf00      	nop
 8000c8c:	08023198 	.word	0x08023198

08000c90 <new_zmk_usb_conn_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/usb_conn_state_changed.h>

 8000c90:	b510      	push	{r4, lr}
 8000c92:	4604      	mov	r4, r0
 8000c94:	200c      	movs	r0, #12
 8000c96:	f018 fd67 	bl	8019768 <k_malloc>
 8000c9a:	4a02      	ldr	r2, [pc, #8]	; (8000ca4 <new_zmk_usb_conn_state_changed+0x14>)
 8000c9c:	6002      	str	r2, [r0, #0]
 8000c9e:	7204      	strb	r4, [r0, #8]
 8000ca0:	bd10      	pop	{r4, pc}
 8000ca2:	bf00      	nop
 8000ca4:	080231b8 	.word	0x080231b8

08000ca8 <on_keymap_binding_pressed>:
LOG_MODULE_DECLARE(zmk, CONFIG_ZMK_LOG_LEVEL);

static int behavior_key_press_init(const struct device *dev) { return 0; };

static int on_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                     struct zmk_behavior_binding_event event) {
 8000ca8:	b082      	sub	sp, #8
 8000caa:	b570      	push	{r4, r5, r6, lr}
 8000cac:	b088      	sub	sp, #32
 8000cae:	4604      	mov	r4, r0
 8000cb0:	a90c      	add	r1, sp, #48	; 0x30
 8000cb2:	e881 000c 	stmia.w	r1, {r2, r3}
    LOG_DBG("position %d keycode 0x%02X", event.position, binding->param1);
 8000cb6:	f04f 0200 	mov.w	r2, #0
 8000cba:	2304      	movs	r3, #4
 8000cbc:	f363 0202 	bfi	r2, r3, #0, #3
 8000cc0:	f36f 02c5 	bfc	r2, #3, #3
 8000cc4:	4b23      	ldr	r3, [pc, #140]	; (8000d54 <on_keymap_binding_pressed+0xac>)
 8000cc6:	4924      	ldr	r1, [pc, #144]	; (8000d58 <on_keymap_binding_pressed+0xb0>)
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8000cce:	f363 128f 	bfi	r2, r3, #6, #10
 8000cd2:	f8ad 2000 	strh.w	r2, [sp]
 8000cd6:	6843      	ldr	r3, [r0, #4]
 8000cd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8000cda:	4920      	ldr	r1, [pc, #128]	; (8000d5c <on_keymap_binding_pressed+0xb4>)
 8000cdc:	4820      	ldr	r0, [pc, #128]	; (8000d60 <on_keymap_binding_pressed+0xb8>)
 8000cde:	f005 fb63 	bl	80063a8 <log_3>
    return ZMK_EVENT_RAISE(
 8000ce2:	6863      	ldr	r3, [r4, #4]
 8000ce4:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38

ZMK_EVENT_DECLARE(zmk_keycode_state_changed);

static inline struct zmk_keycode_state_changed_event *
zmk_keycode_state_changed_from_encoded(uint32_t encoded, bool pressed, int64_t timestamp) {
    uint16_t page = HID_USAGE_PAGE(encoded) & 0xFF;
 8000ce8:	f3c3 4207 	ubfx	r2, r3, #16, #8
    uint16_t id = HID_USAGE_ID(encoded);
    uint8_t implicit_modifiers = 0x00;
    uint8_t explicit_modifiers = 0x00;

    if (!page) {
 8000cec:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 8000cf0:	d100      	bne.n	8000cf4 <on_keymap_binding_pressed+0x4c>
        page = HID_USAGE_KEY;
 8000cf2:	2207      	movs	r2, #7
    }

    if (is_mod(page, id)) {
 8000cf4:	b2d6      	uxtb	r6, r2
 8000cf6:	b299      	uxth	r1, r3
    zmk_key_t key;
    bool pressed;
};

static inline bool is_mod(uint8_t usage_page, uint32_t keycode) {
    return (keycode >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL &&
 8000cf8:	f1a1 00e0 	sub.w	r0, r1, #224	; 0xe0
            keycode <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI && usage_page == HID_USAGE_KEY);
 8000cfc:	2807      	cmp	r0, #7
 8000cfe:	d803      	bhi.n	8000d08 <on_keymap_binding_pressed+0x60>
 8000d00:	2e07      	cmp	r6, #7
 8000d02:	d021      	beq.n	8000d48 <on_keymap_binding_pressed+0xa0>
 8000d04:	2000      	movs	r0, #0
 8000d06:	e000      	b.n	8000d0a <on_keymap_binding_pressed+0x62>
 8000d08:	2000      	movs	r0, #0
 8000d0a:	b1f8      	cbz	r0, 8000d4c <on_keymap_binding_pressed+0xa4>
        explicit_modifiers = SELECT_MODS(encoded);
 8000d0c:	0e18      	lsrs	r0, r3, #24
    uint8_t implicit_modifiers = 0x00;
 8000d0e:	2300      	movs	r3, #0
    } else {
        implicit_modifiers = SELECT_MODS(encoded);
    }

    return new_zmk_keycode_state_changed(
        (struct zmk_keycode_state_changed){.usage_page = page,
 8000d10:	f8ad 2008 	strh.w	r2, [sp, #8]
 8000d14:	9103      	str	r1, [sp, #12]
 8000d16:	f88d 3010 	strb.w	r3, [sp, #16]
 8000d1a:	f88d 0011 	strb.w	r0, [sp, #17]
 8000d1e:	2301      	movs	r3, #1
 8000d20:	f88d 3012 	strb.w	r3, [sp, #18]
 8000d24:	e9cd 4506 	strd	r4, r5, [sp, #24]
    return new_zmk_keycode_state_changed(
 8000d28:	ab08      	add	r3, sp, #32
 8000d2a:	e913 0003 	ldmdb	r3, {r0, r1}
 8000d2e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8000d32:	ab02      	add	r3, sp, #8
 8000d34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d36:	f7ff ff63 	bl	8000c00 <new_zmk_keycode_state_changed>
 8000d3a:	f018 fd57 	bl	80197ec <zmk_event_manager_raise>
        zmk_keycode_state_changed_from_encoded(binding->param1, true, event.timestamp));
}
 8000d3e:	b008      	add	sp, #32
 8000d40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000d44:	b002      	add	sp, #8
 8000d46:	4770      	bx	lr
 8000d48:	2001      	movs	r0, #1
 8000d4a:	e7de      	b.n	8000d0a <on_keymap_binding_pressed+0x62>
        implicit_modifiers = SELECT_MODS(encoded);
 8000d4c:	0e1b      	lsrs	r3, r3, #24
    uint8_t explicit_modifiers = 0x00;
 8000d4e:	2000      	movs	r0, #0
 8000d50:	e7de      	b.n	8000d10 <on_keymap_binding_pressed+0x68>
 8000d52:	bf00      	nop
 8000d54:	08022c60 	.word	0x08022c60
 8000d58:	08022b90 	.word	0x08022b90
 8000d5c:	080231dc 	.word	0x080231dc
 8000d60:	080231bc 	.word	0x080231bc

08000d64 <on_keymap_binding_released>:

static int on_keymap_binding_released(struct zmk_behavior_binding *binding,
                                      struct zmk_behavior_binding_event event) {
 8000d64:	b082      	sub	sp, #8
 8000d66:	b570      	push	{r4, r5, r6, lr}
 8000d68:	b088      	sub	sp, #32
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	a90c      	add	r1, sp, #48	; 0x30
 8000d6e:	e881 000c 	stmia.w	r1, {r2, r3}
    LOG_DBG("position %d keycode 0x%02X", event.position, binding->param1);
 8000d72:	f04f 0200 	mov.w	r2, #0
 8000d76:	2304      	movs	r3, #4
 8000d78:	f363 0202 	bfi	r2, r3, #0, #3
 8000d7c:	f36f 02c5 	bfc	r2, #3, #3
 8000d80:	4b23      	ldr	r3, [pc, #140]	; (8000e10 <on_keymap_binding_released+0xac>)
 8000d82:	4924      	ldr	r1, [pc, #144]	; (8000e14 <on_keymap_binding_released+0xb0>)
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8000d8a:	f363 128f 	bfi	r2, r3, #6, #10
 8000d8e:	f8ad 2000 	strh.w	r2, [sp]
 8000d92:	6843      	ldr	r3, [r0, #4]
 8000d94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8000d96:	4920      	ldr	r1, [pc, #128]	; (8000e18 <on_keymap_binding_released+0xb4>)
 8000d98:	4820      	ldr	r0, [pc, #128]	; (8000e1c <on_keymap_binding_released+0xb8>)
 8000d9a:	f005 fb05 	bl	80063a8 <log_3>
    return ZMK_EVENT_RAISE(
 8000d9e:	6863      	ldr	r3, [r4, #4]
 8000da0:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
    uint16_t page = HID_USAGE_PAGE(encoded) & 0xFF;
 8000da4:	f3c3 4207 	ubfx	r2, r3, #16, #8
    if (!page) {
 8000da8:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 8000dac:	d100      	bne.n	8000db0 <on_keymap_binding_released+0x4c>
        page = HID_USAGE_KEY;
 8000dae:	2207      	movs	r2, #7
    if (is_mod(page, id)) {
 8000db0:	b2d6      	uxtb	r6, r2
 8000db2:	b299      	uxth	r1, r3
    return (keycode >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL &&
 8000db4:	f1a1 00e0 	sub.w	r0, r1, #224	; 0xe0
            keycode <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI && usage_page == HID_USAGE_KEY);
 8000db8:	2807      	cmp	r0, #7
 8000dba:	d803      	bhi.n	8000dc4 <on_keymap_binding_released+0x60>
 8000dbc:	2e07      	cmp	r6, #7
 8000dbe:	d021      	beq.n	8000e04 <on_keymap_binding_released+0xa0>
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	e000      	b.n	8000dc6 <on_keymap_binding_released+0x62>
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	b1f8      	cbz	r0, 8000e08 <on_keymap_binding_released+0xa4>
        explicit_modifiers = SELECT_MODS(encoded);
 8000dc8:	0e18      	lsrs	r0, r3, #24
    uint8_t implicit_modifiers = 0x00;
 8000dca:	2300      	movs	r3, #0
        (struct zmk_keycode_state_changed){.usage_page = page,
 8000dcc:	f8ad 2008 	strh.w	r2, [sp, #8]
 8000dd0:	9103      	str	r1, [sp, #12]
 8000dd2:	f88d 3010 	strb.w	r3, [sp, #16]
 8000dd6:	f88d 0011 	strb.w	r0, [sp, #17]
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f88d 3012 	strb.w	r3, [sp, #18]
 8000de0:	e9cd 4506 	strd	r4, r5, [sp, #24]
    return new_zmk_keycode_state_changed(
 8000de4:	ab08      	add	r3, sp, #32
 8000de6:	e913 0003 	ldmdb	r3, {r0, r1}
 8000dea:	e88d 0003 	stmia.w	sp, {r0, r1}
 8000dee:	ab02      	add	r3, sp, #8
 8000df0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000df2:	f7ff ff05 	bl	8000c00 <new_zmk_keycode_state_changed>
 8000df6:	f018 fcf9 	bl	80197ec <zmk_event_manager_raise>
        zmk_keycode_state_changed_from_encoded(binding->param1, false, event.timestamp));
}
 8000dfa:	b008      	add	sp, #32
 8000dfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000e00:	b002      	add	sp, #8
 8000e02:	4770      	bx	lr
 8000e04:	2001      	movs	r0, #1
 8000e06:	e7de      	b.n	8000dc6 <on_keymap_binding_released+0x62>
        implicit_modifiers = SELECT_MODS(encoded);
 8000e08:	0e1b      	lsrs	r3, r3, #24
    uint8_t explicit_modifiers = 0x00;
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	e7de      	b.n	8000dcc <on_keymap_binding_released+0x68>
 8000e0e:	bf00      	nop
 8000e10:	08022c60 	.word	0x08022c60
 8000e14:	08022b90 	.word	0x08022b90
 8000e18:	080231f8 	.word	0x080231f8
 8000e1c:	080231bc 	.word	0x080231bc

08000e20 <capture_event>:
struct active_hold_tap active_hold_taps[ZMK_BHV_HOLD_TAP_MAX_HELD] = {};
// We capture most position_state_changed events and some modifiers_state_changed events.
const zmk_event_t *captured_events[ZMK_BHV_HOLD_TAP_MAX_CAPTURED_EVENTS] = {};

static int capture_event(const zmk_event_t *event) {
    for (int i = 0; i < ZMK_BHV_HOLD_TAP_MAX_CAPTURED_EVENTS; i++) {
 8000e20:	2300      	movs	r3, #0
 8000e22:	2b27      	cmp	r3, #39	; 0x27
 8000e24:	dc0a      	bgt.n	8000e3c <capture_event+0x1c>
        if (captured_events[i] == NULL) {
 8000e26:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <capture_event+0x24>)
 8000e28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e2c:	b10a      	cbz	r2, 8000e32 <capture_event+0x12>
    for (int i = 0; i < ZMK_BHV_HOLD_TAP_MAX_CAPTURED_EVENTS; i++) {
 8000e2e:	3301      	adds	r3, #1
 8000e30:	e7f7      	b.n	8000e22 <capture_event+0x2>
            captured_events[i] = event;
 8000e32:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <capture_event+0x24>)
 8000e34:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
            return 0;
 8000e38:	2000      	movs	r0, #0
 8000e3a:	4770      	bx	lr
        }
    }
    return -ENOMEM;
 8000e3c:	f06f 000b 	mvn.w	r0, #11
}
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	200033d8 	.word	0x200033d8

08000e48 <find_hold_tap>:
        ZMK_EVENT_RAISE_AT(captured_event, behavior_hold_tap);
    }
}

static struct active_hold_tap *find_hold_tap(uint32_t position) {
    for (int i = 0; i < ZMK_BHV_HOLD_TAP_MAX_HELD; i++) {
 8000e48:	2300      	movs	r3, #0
 8000e4a:	2b09      	cmp	r3, #9
 8000e4c:	dc0c      	bgt.n	8000e68 <find_hold_tap+0x20>
        if (active_hold_taps[i].position == position) {
 8000e4e:	2258      	movs	r2, #88	; 0x58
 8000e50:	fb02 f203 	mul.w	r2, r2, r3
 8000e54:	4905      	ldr	r1, [pc, #20]	; (8000e6c <find_hold_tap+0x24>)
 8000e56:	588a      	ldr	r2, [r1, r2]
 8000e58:	4282      	cmp	r2, r0
 8000e5a:	d001      	beq.n	8000e60 <find_hold_tap+0x18>
    for (int i = 0; i < ZMK_BHV_HOLD_TAP_MAX_HELD; i++) {
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	e7f4      	b.n	8000e4a <find_hold_tap+0x2>
            return &active_hold_taps[i];
 8000e60:	2258      	movs	r2, #88	; 0x58
 8000e62:	fb02 1003 	mla	r0, r2, r3, r1
 8000e66:	4770      	bx	lr
        }
    }
    return NULL;
 8000e68:	2000      	movs	r0, #0
}
 8000e6a:	4770      	bx	lr
 8000e6c:	20001298 	.word	0x20001298

08000e70 <store_hold_tap>:

static struct active_hold_tap *store_hold_tap(uint32_t position, uint32_t param_hold,
                                              uint32_t param_tap, int64_t timestamp,
                                              const struct behavior_hold_tap_config *config) {
 8000e70:	b470      	push	{r4, r5, r6}
 8000e72:	4605      	mov	r5, r0
    for (int i = 0; i < ZMK_BHV_HOLD_TAP_MAX_HELD; i++) {
 8000e74:	2300      	movs	r3, #0
 8000e76:	2b09      	cmp	r3, #9
 8000e78:	dc1d      	bgt.n	8000eb6 <store_hold_tap+0x46>
        if (active_hold_taps[i].position != ZMK_BHV_HOLD_TAP_POSITION_NOT_USED) {
 8000e7a:	2458      	movs	r4, #88	; 0x58
 8000e7c:	fb04 f403 	mul.w	r4, r4, r3
 8000e80:	480e      	ldr	r0, [pc, #56]	; (8000ebc <store_hold_tap+0x4c>)
 8000e82:	5904      	ldr	r4, [r0, r4]
 8000e84:	f242 700f 	movw	r0, #9999	; 0x270f
 8000e88:	4284      	cmp	r4, r0
 8000e8a:	d112      	bne.n	8000eb2 <store_hold_tap+0x42>
            continue;
        }
        active_hold_taps[i].position = position;
 8000e8c:	4e0b      	ldr	r6, [pc, #44]	; (8000ebc <store_hold_tap+0x4c>)
 8000e8e:	2458      	movs	r4, #88	; 0x58
 8000e90:	fb04 f303 	mul.w	r3, r4, r3
 8000e94:	18f0      	adds	r0, r6, r3
 8000e96:	50f5      	str	r5, [r6, r3]
        active_hold_taps[i].is_decided = false;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	7603      	strb	r3, [r0, #24]
        active_hold_taps[i].is_hold = false;
 8000e9c:	7643      	strb	r3, [r0, #25]
        active_hold_taps[i].config = config;
 8000e9e:	9b05      	ldr	r3, [sp, #20]
 8000ea0:	61c3      	str	r3, [r0, #28]
        active_hold_taps[i].param_hold = param_hold;
 8000ea2:	6041      	str	r1, [r0, #4]
        active_hold_taps[i].param_tap = param_tap;
 8000ea4:	6082      	str	r2, [r0, #8]
        active_hold_taps[i].timestamp = timestamp;
 8000ea6:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8000eaa:	e9c0 2304 	strd	r2, r3, [r0, #16]
        return &active_hold_taps[i];
    }
    return NULL;
}
 8000eae:	bc70      	pop	{r4, r5, r6}
 8000eb0:	4770      	bx	lr
    for (int i = 0; i < ZMK_BHV_HOLD_TAP_MAX_HELD; i++) {
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	e7df      	b.n	8000e76 <store_hold_tap+0x6>
    return NULL;
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	e7f9      	b.n	8000eae <store_hold_tap+0x3e>
 8000eba:	bf00      	nop
 8000ebc:	20001298 	.word	0x20001298

08000ec0 <find_captured_keydown_event>:
static struct zmk_position_state_changed *find_captured_keydown_event(uint32_t position) {
 8000ec0:	b570      	push	{r4, r5, r6, lr}
 8000ec2:	4605      	mov	r5, r0
    for (int i = 0; i < ZMK_BHV_HOLD_TAP_MAX_CAPTURED_EVENTS; i++) {
 8000ec4:	2400      	movs	r4, #0
    struct zmk_position_state_changed *last_match = NULL;
 8000ec6:	4626      	mov	r6, r4
    for (int i = 0; i < ZMK_BHV_HOLD_TAP_MAX_CAPTURED_EVENTS; i++) {
 8000ec8:	e000      	b.n	8000ecc <find_captured_keydown_event+0xc>
 8000eca:	3401      	adds	r4, #1
 8000ecc:	2c27      	cmp	r4, #39	; 0x27
 8000ece:	dc0f      	bgt.n	8000ef0 <find_captured_keydown_event+0x30>
        const zmk_event_t *eh = captured_events[i];
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <find_captured_keydown_event+0x34>)
 8000ed2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
        if (eh == NULL) {
 8000ed6:	b158      	cbz	r0, 8000ef0 <find_captured_keydown_event+0x30>
        struct zmk_position_state_changed *position_event = as_zmk_position_state_changed(eh);
 8000ed8:	f7ff fe72 	bl	8000bc0 <as_zmk_position_state_changed>
        if (position_event == NULL) {
 8000edc:	2800      	cmp	r0, #0
 8000ede:	d0f4      	beq.n	8000eca <find_captured_keydown_event+0xa>
        if (position_event->position == position && position_event->state) {
 8000ee0:	6802      	ldr	r2, [r0, #0]
 8000ee2:	42aa      	cmp	r2, r5
 8000ee4:	d1f1      	bne.n	8000eca <find_captured_keydown_event+0xa>
 8000ee6:	7902      	ldrb	r2, [r0, #4]
 8000ee8:	2a00      	cmp	r2, #0
 8000eea:	d0ee      	beq.n	8000eca <find_captured_keydown_event+0xa>
            last_match = position_event;
 8000eec:	4606      	mov	r6, r0
 8000eee:	e7ec      	b.n	8000eca <find_captured_keydown_event+0xa>
}
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	bd70      	pop	{r4, r5, r6, pc}
 8000ef4:	200033d8 	.word	0x200033d8

08000ef8 <keycode_state_changed_listener>:
    capture_event(eh);
    decide_hold_tap(undecided_hold_tap, ev->state ? HT_OTHER_KEY_DOWN : HT_OTHER_KEY_UP);
    return ZMK_EV_EVENT_CAPTURED;
}

static int keycode_state_changed_listener(const zmk_event_t *eh) {
 8000ef8:	b530      	push	{r4, r5, lr}
 8000efa:	b085      	sub	sp, #20
 8000efc:	4604      	mov	r4, r0
    // we want to catch layer-up events too... how?
    struct zmk_keycode_state_changed *ev = as_zmk_keycode_state_changed(eh);
 8000efe:	f7ff fe9b 	bl	8000c38 <as_zmk_keycode_state_changed>

    if (undecided_hold_tap == NULL) {
 8000f02:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <keycode_state_changed_listener+0x80>)
 8000f04:	6819      	ldr	r1, [r3, #0]
 8000f06:	2900      	cmp	r1, #0
 8000f08:	d031      	beq.n	8000f6e <keycode_state_changed_listener+0x76>
        // LOG_DBG("0x%02X bubble (no undecided hold_tap active)", ev->keycode);
        return ZMK_EV_EVENT_BUBBLE;
    }

    if (!is_mod(ev->usage_page, ev->keycode)) {
 8000f0a:	7802      	ldrb	r2, [r0, #0]
 8000f0c:	6843      	ldr	r3, [r0, #4]
    return (keycode >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL &&
 8000f0e:	3be0      	subs	r3, #224	; 0xe0
            keycode <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI && usage_page == HID_USAGE_KEY);
 8000f10:	2b07      	cmp	r3, #7
 8000f12:	d803      	bhi.n	8000f1c <keycode_state_changed_listener+0x24>
 8000f14:	2a07      	cmp	r2, #7
 8000f16:	d026      	beq.n	8000f66 <keycode_state_changed_listener+0x6e>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	e000      	b.n	8000f1e <keycode_state_changed_listener+0x26>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	b343      	cbz	r3, 8000f72 <keycode_state_changed_listener+0x7a>
        return ZMK_EV_EVENT_BUBBLE;
    }

    // only key-up events will bubble through position_state_changed_listener
    // if a undecided_hold_tap is active.
    LOG_DBG("%d capturing 0x%02X %s event", undecided_hold_tap->position, ev->keycode,
 8000f20:	f04f 0300 	mov.w	r3, #0
 8000f24:	2204      	movs	r2, #4
 8000f26:	f362 0302 	bfi	r3, r2, #0, #3
 8000f2a:	f36f 03c5 	bfc	r3, #3, #3
 8000f2e:	4a13      	ldr	r2, [pc, #76]	; (8000f7c <keycode_state_changed_listener+0x84>)
 8000f30:	4d13      	ldr	r5, [pc, #76]	; (8000f80 <keycode_state_changed_listener+0x88>)
 8000f32:	1b52      	subs	r2, r2, r5
 8000f34:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8000f38:	f362 138f 	bfi	r3, r2, #6, #10
 8000f3c:	4a11      	ldr	r2, [pc, #68]	; (8000f84 <keycode_state_changed_listener+0x8c>)
 8000f3e:	9200      	str	r2, [sp, #0]
 8000f40:	680a      	ldr	r2, [r1, #0]
 8000f42:	9201      	str	r2, [sp, #4]
 8000f44:	6842      	ldr	r2, [r0, #4]
 8000f46:	9202      	str	r2, [sp, #8]
 8000f48:	7a82      	ldrb	r2, [r0, #10]
 8000f4a:	b172      	cbz	r2, 8000f6a <keycode_state_changed_listener+0x72>
 8000f4c:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <keycode_state_changed_listener+0x90>)
 8000f4e:	9203      	str	r2, [sp, #12]
 8000f50:	2204      	movs	r2, #4
 8000f52:	4669      	mov	r1, sp
 8000f54:	480d      	ldr	r0, [pc, #52]	; (8000f8c <keycode_state_changed_listener+0x94>)
 8000f56:	f005 fbf7 	bl	8006748 <log_n>
            ev->state ? "down" : "up");
    capture_event(eh);
 8000f5a:	4620      	mov	r0, r4
 8000f5c:	f7ff ff60 	bl	8000e20 <capture_event>
    return ZMK_EV_EVENT_CAPTURED;
 8000f60:	2002      	movs	r0, #2
}
 8000f62:	b005      	add	sp, #20
 8000f64:	bd30      	pop	{r4, r5, pc}
 8000f66:	2301      	movs	r3, #1
 8000f68:	e7d9      	b.n	8000f1e <keycode_state_changed_listener+0x26>
    LOG_DBG("%d capturing 0x%02X %s event", undecided_hold_tap->position, ev->keycode,
 8000f6a:	4a09      	ldr	r2, [pc, #36]	; (8000f90 <keycode_state_changed_listener+0x98>)
 8000f6c:	e7ef      	b.n	8000f4e <keycode_state_changed_listener+0x56>
        return ZMK_EV_EVENT_BUBBLE;
 8000f6e:	2000      	movs	r0, #0
 8000f70:	e7f7      	b.n	8000f62 <keycode_state_changed_listener+0x6a>
        return ZMK_EV_EVENT_BUBBLE;
 8000f72:	2000      	movs	r0, #0
 8000f74:	e7f5      	b.n	8000f62 <keycode_state_changed_listener+0x6a>
 8000f76:	bf00      	nop
 8000f78:	20003478 	.word	0x20003478
 8000f7c:	08022c60 	.word	0x08022c60
 8000f80:	08022b90 	.word	0x08022b90
 8000f84:	08023620 	.word	0x08023620
 8000f88:	08023250 	.word	0x08023250
 8000f8c:	0802325c 	.word	0x0802325c
 8000f90:	08023258 	.word	0x08023258

08000f94 <release_captured_events>:
    if (undecided_hold_tap != NULL) {
 8000f94:	4b2d      	ldr	r3, [pc, #180]	; (800104c <release_captured_events+0xb8>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	b103      	cbz	r3, 8000f9c <release_captured_events+0x8>
 8000f9a:	4770      	bx	lr
static void release_captured_events() {
 8000f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f9e:	b083      	sub	sp, #12
    for (int i = 0; i < ZMK_BHV_HOLD_TAP_MAX_CAPTURED_EVENTS; i++) {
 8000fa0:	2400      	movs	r4, #0
 8000fa2:	e00b      	b.n	8000fbc <release_captured_events+0x28>
            LOG_DBG("Releasing key position event for position %d %s", position_event->position,
 8000fa4:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <release_captured_events+0xbc>)
 8000fa6:	f8ad 6000 	strh.w	r6, [sp]
 8000faa:	492a      	ldr	r1, [pc, #168]	; (8001054 <release_captured_events+0xc0>)
 8000fac:	482a      	ldr	r0, [pc, #168]	; (8001058 <release_captured_events+0xc4>)
 8000fae:	f005 f9fb 	bl	80063a8 <log_3>
        ZMK_EVENT_RAISE_AT(captured_event, behavior_hold_tap);
 8000fb2:	492a      	ldr	r1, [pc, #168]	; (800105c <release_captured_events+0xc8>)
 8000fb4:	4628      	mov	r0, r5
 8000fb6:	f7ff fda9 	bl	8000b0c <zmk_event_manager_raise_at>
    for (int i = 0; i < ZMK_BHV_HOLD_TAP_MAX_CAPTURED_EVENTS; i++) {
 8000fba:	3401      	adds	r4, #1
 8000fbc:	2c27      	cmp	r4, #39	; 0x27
 8000fbe:	dc42      	bgt.n	8001046 <release_captured_events+0xb2>
        const zmk_event_t *captured_event = captured_events[i];
 8000fc0:	4b27      	ldr	r3, [pc, #156]	; (8001060 <release_captured_events+0xcc>)
 8000fc2:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
        if (captured_event == NULL) {
 8000fc6:	2d00      	cmp	r5, #0
 8000fc8:	d03d      	beq.n	8001046 <release_captured_events+0xb2>
        captured_events[i] = NULL;
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        if (undecided_hold_tap != NULL) {
 8000fd0:	4b1e      	ldr	r3, [pc, #120]	; (800104c <release_captured_events+0xb8>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	b11b      	cbz	r3, 8000fde <release_captured_events+0x4a>
	return z_impl_k_sleep(timeout);
 8000fd6:	2064      	movs	r0, #100	; 0x64
 8000fd8:	2100      	movs	r1, #0
 8000fda:	f017 fe17 	bl	8018c0c <z_impl_k_sleep>
        if ((position_event = as_zmk_position_state_changed(captured_event)) != NULL) {
 8000fde:	4628      	mov	r0, r5
 8000fe0:	f7ff fdee 	bl	8000bc0 <as_zmk_position_state_changed>
 8000fe4:	b188      	cbz	r0, 800100a <release_captured_events+0x76>
            LOG_DBG("Releasing key position event for position %d %s", position_event->position,
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	f363 0602 	bfi	r6, r3, #0, #3
 8000fec:	f36f 06c5 	bfc	r6, #3, #3
 8000ff0:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <release_captured_events+0xd0>)
 8000ff2:	4a1d      	ldr	r2, [pc, #116]	; (8001068 <release_captured_events+0xd4>)
 8000ff4:	1a9b      	subs	r3, r3, r2
 8000ff6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8000ffa:	f363 168f 	bfi	r6, r3, #6, #10
 8000ffe:	6802      	ldr	r2, [r0, #0]
 8001000:	7903      	ldrb	r3, [r0, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d0ce      	beq.n	8000fa4 <release_captured_events+0x10>
 8001006:	4b19      	ldr	r3, [pc, #100]	; (800106c <release_captured_events+0xd8>)
 8001008:	e7cd      	b.n	8000fa6 <release_captured_events+0x12>
        } else if ((modifier_event = as_zmk_keycode_state_changed(captured_event)) != NULL) {
 800100a:	4628      	mov	r0, r5
 800100c:	f7ff fe14 	bl	8000c38 <as_zmk_keycode_state_changed>
 8001010:	2800      	cmp	r0, #0
 8001012:	d0ce      	beq.n	8000fb2 <release_captured_events+0x1e>
            LOG_DBG("Releasing mods changed event 0x%02X %s", modifier_event->keycode,
 8001014:	2304      	movs	r3, #4
 8001016:	f363 0702 	bfi	r7, r3, #0, #3
 800101a:	f36f 07c5 	bfc	r7, #3, #3
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <release_captured_events+0xd0>)
 8001020:	4a11      	ldr	r2, [pc, #68]	; (8001068 <release_captured_events+0xd4>)
 8001022:	1a9b      	subs	r3, r3, r2
 8001024:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8001028:	f363 178f 	bfi	r7, r3, #6, #10
 800102c:	6842      	ldr	r2, [r0, #4]
 800102e:	7a83      	ldrb	r3, [r0, #10]
 8001030:	b13b      	cbz	r3, 8001042 <release_captured_events+0xae>
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <release_captured_events+0xd8>)
 8001034:	f8ad 7000 	strh.w	r7, [sp]
 8001038:	4906      	ldr	r1, [pc, #24]	; (8001054 <release_captured_events+0xc0>)
 800103a:	480d      	ldr	r0, [pc, #52]	; (8001070 <release_captured_events+0xdc>)
 800103c:	f005 f9b4 	bl	80063a8 <log_3>
 8001040:	e7b7      	b.n	8000fb2 <release_captured_events+0x1e>
 8001042:	4b03      	ldr	r3, [pc, #12]	; (8001050 <release_captured_events+0xbc>)
 8001044:	e7f6      	b.n	8001034 <release_captured_events+0xa0>
}
 8001046:	b003      	add	sp, #12
 8001048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800104a:	bf00      	nop
 800104c:	20003478 	.word	0x20003478
 8001050:	08022f70 	.word	0x08022f70
 8001054:	0802359c 	.word	0x0802359c
 8001058:	08023288 	.word	0x08023288
 800105c:	0802364c 	.word	0x0802364c
 8001060:	200033d8 	.word	0x200033d8
 8001064:	08022c60 	.word	0x08022c60
 8001068:	08022b90 	.word	0x08022b90
 800106c:	08023280 	.word	0x08023280
 8001070:	080232bc 	.word	0x080232bc

08001074 <decide_hold_tap>:
    if (hold_tap->is_decided) {
 8001074:	7e03      	ldrb	r3, [r0, #24]
 8001076:	2b00      	cmp	r3, #0
 8001078:	f040 8099 	bne.w	80011ae <decide_hold_tap+0x13a>
static void decide_hold_tap(struct active_hold_tap *hold_tap, enum decision_moment event_type) {
 800107c:	b530      	push	{r4, r5, lr}
 800107e:	b093      	sub	sp, #76	; 0x4c
 8001080:	4604      	mov	r4, r0
 8001082:	460d      	mov	r5, r1
    if (hold_tap != undecided_hold_tap) {
 8001084:	4b4a      	ldr	r3, [pc, #296]	; (80011b0 <decide_hold_tap+0x13c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4283      	cmp	r3, r0
 800108a:	d16c      	bne.n	8001166 <decide_hold_tap+0xf2>
    switch (hold_tap->config->flavor) {
 800108c:	69c3      	ldr	r3, [r0, #28]
 800108e:	7a1b      	ldrb	r3, [r3, #8]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d004      	beq.n	800109e <decide_hold_tap+0x2a>
 8001094:	2b02      	cmp	r3, #2
 8001096:	d006      	beq.n	80010a6 <decide_hold_tap+0x32>
 8001098:	b94b      	cbnz	r3, 80010ae <decide_hold_tap+0x3a>
        decide_hold_preferred(hold_tap, event_type);
 800109a:	f018 fbe6 	bl	801986a <decide_hold_preferred>
        decide_balanced(hold_tap, event_type);
 800109e:	4629      	mov	r1, r5
 80010a0:	4620      	mov	r0, r4
 80010a2:	f018 fbc6 	bl	8019832 <decide_balanced>
        decide_tap_preferred(hold_tap, event_type);
 80010a6:	4629      	mov	r1, r5
 80010a8:	4620      	mov	r0, r4
 80010aa:	f018 fbd1 	bl	8019850 <decide_tap_preferred>
    if (!hold_tap->is_decided) {
 80010ae:	7e23      	ldrb	r3, [r4, #24]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d056      	beq.n	8001162 <decide_hold_tap+0xee>
    LOG_DBG("%d decided %s (%s event %d)", hold_tap->position, hold_tap->is_hold ? "hold" : "tap",
 80010b4:	f04f 0300 	mov.w	r3, #0
 80010b8:	2204      	movs	r2, #4
 80010ba:	f362 0302 	bfi	r3, r2, #0, #3
 80010be:	f36f 03c5 	bfc	r3, #3, #3
 80010c2:	4a3c      	ldr	r2, [pc, #240]	; (80011b4 <decide_hold_tap+0x140>)
 80010c4:	493c      	ldr	r1, [pc, #240]	; (80011b8 <decide_hold_tap+0x144>)
 80010c6:	1a52      	subs	r2, r2, r1
 80010c8:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 80010cc:	f362 138f 	bfi	r3, r2, #6, #10
 80010d0:	4a3a      	ldr	r2, [pc, #232]	; (80011bc <decide_hold_tap+0x148>)
 80010d2:	9206      	str	r2, [sp, #24]
 80010d4:	6822      	ldr	r2, [r4, #0]
 80010d6:	9207      	str	r2, [sp, #28]
 80010d8:	7e62      	ldrb	r2, [r4, #25]
 80010da:	2a00      	cmp	r2, #0
 80010dc:	d056      	beq.n	800118c <decide_hold_tap+0x118>
 80010de:	4a38      	ldr	r2, [pc, #224]	; (80011c0 <decide_hold_tap+0x14c>)
 80010e0:	9208      	str	r2, [sp, #32]
 80010e2:	69e2      	ldr	r2, [r4, #28]
 80010e4:	7a12      	ldrb	r2, [r2, #8]
    switch (flavor) {
 80010e6:	2a01      	cmp	r2, #1
 80010e8:	d054      	beq.n	8001194 <decide_hold_tap+0x120>
 80010ea:	2a02      	cmp	r2, #2
 80010ec:	d054      	beq.n	8001198 <decide_hold_tap+0x124>
 80010ee:	2a00      	cmp	r2, #0
 80010f0:	d04e      	beq.n	8001190 <decide_hold_tap+0x11c>
    return "UNKNOWN FLAVOR";
 80010f2:	4a34      	ldr	r2, [pc, #208]	; (80011c4 <decide_hold_tap+0x150>)
    LOG_DBG("%d decided %s (%s event %d)", hold_tap->position, hold_tap->is_hold ? "hold" : "tap",
 80010f4:	9209      	str	r2, [sp, #36]	; 0x24
 80010f6:	950a      	str	r5, [sp, #40]	; 0x28
 80010f8:	2205      	movs	r2, #5
 80010fa:	a906      	add	r1, sp, #24
 80010fc:	4832      	ldr	r0, [pc, #200]	; (80011c8 <decide_hold_tap+0x154>)
 80010fe:	f005 fb23 	bl	8006748 <log_n>
    undecided_hold_tap = NULL;
 8001102:	2300      	movs	r3, #0
 8001104:	4a2a      	ldr	r2, [pc, #168]	; (80011b0 <decide_hold_tap+0x13c>)
 8001106:	6013      	str	r3, [r2, #0]
    struct zmk_behavior_binding_event event = {
 8001108:	930e      	str	r3, [sp, #56]	; 0x38
        .position = hold_tap->position,
 800110a:	6823      	ldr	r3, [r4, #0]
    struct zmk_behavior_binding_event event = {
 800110c:	930f      	str	r3, [sp, #60]	; 0x3c
        .timestamp = hold_tap->timestamp,
 800110e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    struct zmk_behavior_binding_event event = {
 8001112:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    if (hold_tap->is_hold) {
 8001116:	7e63      	ldrb	r3, [r4, #25]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d03f      	beq.n	800119c <decide_hold_tap+0x128>
        binding.behavior_dev = hold_tap->config->behaviors->hold.behavior_dev;
 800111c:	69e3      	ldr	r3, [r4, #28]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	930b      	str	r3, [sp, #44]	; 0x2c
        binding.param1 = hold_tap->param_hold;
 8001124:	6863      	ldr	r3, [r4, #4]
 8001126:	930c      	str	r3, [sp, #48]	; 0x30
        binding.param2 = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	930d      	str	r3, [sp, #52]	; 0x34
    behavior_keymap_binding_pressed(&binding, event);
 800112c:	ac02      	add	r4, sp, #8
 800112e:	ab12      	add	r3, sp, #72	; 0x48
 8001130:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8001134:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&binding, *(uintptr_t *)&event, K_SYSCALL_BEHAVIOR_KEYMAP_BINDING_PRESSED);
	}
#endif
	compiler_barrier();
	return z_impl_behavior_keymap_binding_pressed(binding, event);
 8001138:	ad06      	add	r5, sp, #24
 800113a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800113e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
__syscall int behavior_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                              struct zmk_behavior_binding_event event);

static inline int z_impl_behavior_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                                         struct zmk_behavior_binding_event event) {
    const struct device *dev = device_get_binding(binding->behavior_dev);
 8001142:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001144:	f016 fd84 	bl	8017c50 <z_impl_device_get_binding>
    const struct behavior_driver_api *api = (const struct behavior_driver_api *)dev->api;
 8001148:	6883      	ldr	r3, [r0, #8]

    if (api->binding_pressed == NULL) {
 800114a:	681c      	ldr	r4, [r3, #0]
 800114c:	b13c      	cbz	r4, 800115e <decide_hold_tap+0xea>
        return -ENOTSUP;
    }

    return api->binding_pressed(binding, event);
 800114e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001150:	9808      	ldr	r0, [sp, #32]
 8001152:	e88d 0003 	stmia.w	sp, {r0, r1}
 8001156:	9b07      	ldr	r3, [sp, #28]
 8001158:	9a06      	ldr	r2, [sp, #24]
 800115a:	a80b      	add	r0, sp, #44	; 0x2c
 800115c:	47a0      	blx	r4
    release_captured_events();
 800115e:	f7ff ff19 	bl	8000f94 <release_captured_events>
}
 8001162:	b013      	add	sp, #76	; 0x4c
 8001164:	bd30      	pop	{r4, r5, pc}
        LOG_DBG("ERROR found undecided tap hold that is not the active tap hold");
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	2304      	movs	r3, #4
 800116c:	f363 0202 	bfi	r2, r3, #0, #3
 8001170:	f36f 02c5 	bfc	r2, #3, #3
 8001174:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <decide_hold_tap+0x140>)
 8001176:	4910      	ldr	r1, [pc, #64]	; (80011b8 <decide_hold_tap+0x144>)
 8001178:	1a5b      	subs	r3, r3, r1
 800117a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800117e:	f363 128f 	bfi	r2, r3, #6, #10
 8001182:	490e      	ldr	r1, [pc, #56]	; (80011bc <decide_hold_tap+0x148>)
 8001184:	4811      	ldr	r0, [pc, #68]	; (80011cc <decide_hold_tap+0x158>)
 8001186:	f005 f9db 	bl	8006540 <log_1>
        return;
 800118a:	e7ea      	b.n	8001162 <decide_hold_tap+0xee>
    LOG_DBG("%d decided %s (%s event %d)", hold_tap->position, hold_tap->is_hold ? "hold" : "tap",
 800118c:	4a10      	ldr	r2, [pc, #64]	; (80011d0 <decide_hold_tap+0x15c>)
 800118e:	e7a7      	b.n	80010e0 <decide_hold_tap+0x6c>
    switch (flavor) {
 8001190:	4a10      	ldr	r2, [pc, #64]	; (80011d4 <decide_hold_tap+0x160>)
 8001192:	e7af      	b.n	80010f4 <decide_hold_tap+0x80>
        return "balanced";
 8001194:	4a10      	ldr	r2, [pc, #64]	; (80011d8 <decide_hold_tap+0x164>)
 8001196:	e7ad      	b.n	80010f4 <decide_hold_tap+0x80>
        return "tap-preferred";
 8001198:	4a10      	ldr	r2, [pc, #64]	; (80011dc <decide_hold_tap+0x168>)
 800119a:	e7ab      	b.n	80010f4 <decide_hold_tap+0x80>
        binding.behavior_dev = hold_tap->config->behaviors->tap.behavior_dev;
 800119c:	69e3      	ldr	r3, [r4, #28]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	930b      	str	r3, [sp, #44]	; 0x2c
        binding.param1 = hold_tap->param_tap;
 80011a4:	68a3      	ldr	r3, [r4, #8]
 80011a6:	930c      	str	r3, [sp, #48]	; 0x30
        binding.param2 = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	930d      	str	r3, [sp, #52]	; 0x34
 80011ac:	e7be      	b.n	800112c <decide_hold_tap+0xb8>
 80011ae:	4770      	bx	lr
 80011b0:	20003478 	.word	0x20003478
 80011b4:	08022c60 	.word	0x08022c60
 80011b8:	08022b90 	.word	0x08022b90
 80011bc:	080235b4 	.word	0x080235b4
 80011c0:	08023368 	.word	0x08023368
 80011c4:	080232f8 	.word	0x080232f8
 80011c8:	08023370 	.word	0x08023370
 80011cc:	08023324 	.word	0x08023324
 80011d0:	080234e4 	.word	0x080234e4
 80011d4:	08023314 	.word	0x08023314
 80011d8:	08023308 	.word	0x08023308
 80011dc:	080232e8 	.word	0x080232e8

080011e0 <position_state_changed_listener>:
static int position_state_changed_listener(const zmk_event_t *eh) {
 80011e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011e2:	b085      	sub	sp, #20
 80011e4:	4605      	mov	r5, r0
    struct zmk_position_state_changed *ev = as_zmk_position_state_changed(eh);
 80011e6:	f7ff fceb 	bl	8000bc0 <as_zmk_position_state_changed>
 80011ea:	4604      	mov	r4, r0
    if (undecided_hold_tap == NULL) {
 80011ec:	4b59      	ldr	r3, [pc, #356]	; (8001354 <position_state_changed_listener+0x174>)
 80011ee:	6818      	ldr	r0, [r3, #0]
 80011f0:	2800      	cmp	r0, #0
 80011f2:	d040      	beq.n	8001276 <position_state_changed_listener+0x96>
    if (undecided_hold_tap->position == ev->position) {
 80011f4:	6802      	ldr	r2, [r0, #0]
 80011f6:	6823      	ldr	r3, [r4, #0]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d051      	beq.n	80012a0 <position_state_changed_listener+0xc0>
    if (ev->timestamp >
 80011fc:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
        (undecided_hold_tap->timestamp + undecided_hold_tap->config->tapping_term_ms)) {
 8001200:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 8001204:	69c1      	ldr	r1, [r0, #28]
 8001206:	6809      	ldr	r1, [r1, #0]
 8001208:	1852      	adds	r2, r2, r1
 800120a:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    if (ev->timestamp >
 800120e:	42b2      	cmp	r2, r6
 8001210:	41bb      	sbcs	r3, r7
 8001212:	db6e      	blt.n	80012f2 <position_state_changed_listener+0x112>
    if (!ev->state && find_captured_keydown_event(ev->position) == NULL) {
 8001214:	7923      	ldrb	r3, [r4, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d06f      	beq.n	80012fa <position_state_changed_listener+0x11a>
    LOG_DBG("%d capturing %d %s event", undecided_hold_tap->position, ev->position,
 800121a:	f04f 0300 	mov.w	r3, #0
 800121e:	2204      	movs	r2, #4
 8001220:	f362 0302 	bfi	r3, r2, #0, #3
 8001224:	f36f 03c5 	bfc	r3, #3, #3
 8001228:	4a4b      	ldr	r2, [pc, #300]	; (8001358 <position_state_changed_listener+0x178>)
 800122a:	494c      	ldr	r1, [pc, #304]	; (800135c <position_state_changed_listener+0x17c>)
 800122c:	1a52      	subs	r2, r2, r1
 800122e:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8001232:	f362 138f 	bfi	r3, r2, #6, #10
 8001236:	4a4a      	ldr	r2, [pc, #296]	; (8001360 <position_state_changed_listener+0x180>)
 8001238:	9200      	str	r2, [sp, #0]
 800123a:	4a46      	ldr	r2, [pc, #280]	; (8001354 <position_state_changed_listener+0x174>)
 800123c:	6812      	ldr	r2, [r2, #0]
 800123e:	6812      	ldr	r2, [r2, #0]
 8001240:	9201      	str	r2, [sp, #4]
 8001242:	6822      	ldr	r2, [r4, #0]
 8001244:	9202      	str	r2, [sp, #8]
 8001246:	7922      	ldrb	r2, [r4, #4]
 8001248:	2a00      	cmp	r2, #0
 800124a:	d07e      	beq.n	800134a <position_state_changed_listener+0x16a>
 800124c:	4a45      	ldr	r2, [pc, #276]	; (8001364 <position_state_changed_listener+0x184>)
 800124e:	9203      	str	r2, [sp, #12]
 8001250:	2204      	movs	r2, #4
 8001252:	4669      	mov	r1, sp
 8001254:	4844      	ldr	r0, [pc, #272]	; (8001368 <position_state_changed_listener+0x188>)
 8001256:	f005 fa77 	bl	8006748 <log_n>
    capture_event(eh);
 800125a:	4628      	mov	r0, r5
 800125c:	f7ff fde0 	bl	8000e20 <capture_event>
    decide_hold_tap(undecided_hold_tap, ev->state ? HT_OTHER_KEY_DOWN : HT_OTHER_KEY_UP);
 8001260:	4b3c      	ldr	r3, [pc, #240]	; (8001354 <position_state_changed_listener+0x174>)
 8001262:	6818      	ldr	r0, [r3, #0]
 8001264:	7923      	ldrb	r3, [r4, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d071      	beq.n	800134e <position_state_changed_listener+0x16e>
 800126a:	2101      	movs	r1, #1
 800126c:	f7ff ff02 	bl	8001074 <decide_hold_tap>
    return ZMK_EV_EVENT_CAPTURED;
 8001270:	2002      	movs	r0, #2
}
 8001272:	b005      	add	sp, #20
 8001274:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG_DBG("%d bubble (no undecided hold_tap active)", ev->position);
 8001276:	f04f 0300 	mov.w	r3, #0
 800127a:	2204      	movs	r2, #4
 800127c:	f362 0302 	bfi	r3, r2, #0, #3
 8001280:	f36f 03c5 	bfc	r3, #3, #3
 8001284:	4a34      	ldr	r2, [pc, #208]	; (8001358 <position_state_changed_listener+0x178>)
 8001286:	4935      	ldr	r1, [pc, #212]	; (800135c <position_state_changed_listener+0x17c>)
 8001288:	1a52      	subs	r2, r2, r1
 800128a:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 800128e:	f362 138f 	bfi	r3, r2, #6, #10
 8001292:	6822      	ldr	r2, [r4, #0]
 8001294:	4932      	ldr	r1, [pc, #200]	; (8001360 <position_state_changed_listener+0x180>)
 8001296:	4835      	ldr	r0, [pc, #212]	; (800136c <position_state_changed_listener+0x18c>)
 8001298:	f005 f9d2 	bl	8006640 <log_2>
        return ZMK_EV_EVENT_BUBBLE;
 800129c:	2000      	movs	r0, #0
 800129e:	e7e8      	b.n	8001272 <position_state_changed_listener+0x92>
        if (ev->state) { // keydown
 80012a0:	7923      	ldrb	r3, [r4, #4]
 80012a2:	b193      	cbz	r3, 80012ca <position_state_changed_listener+0xea>
            LOG_ERR("hold-tap listener should be called before before most other listeners!");
 80012a4:	f04f 0100 	mov.w	r1, #0
 80012a8:	2301      	movs	r3, #1
 80012aa:	f363 0102 	bfi	r1, r3, #0, #3
 80012ae:	f36f 01c5 	bfc	r1, #3, #3
 80012b2:	4b29      	ldr	r3, [pc, #164]	; (8001358 <position_state_changed_listener+0x178>)
 80012b4:	4a29      	ldr	r2, [pc, #164]	; (800135c <position_state_changed_listener+0x17c>)
 80012b6:	1a9b      	subs	r3, r3, r2
 80012b8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80012bc:	f363 118f 	bfi	r1, r3, #6, #10
 80012c0:	482b      	ldr	r0, [pc, #172]	; (8001370 <position_state_changed_listener+0x190>)
 80012c2:	f005 faad 	bl	8006820 <log_0>
            return ZMK_EV_EVENT_BUBBLE;
 80012c6:	2000      	movs	r0, #0
 80012c8:	e7d3      	b.n	8001272 <position_state_changed_listener+0x92>
            LOG_DBG("%d bubble undecided hold-tap keyrelease event", undecided_hold_tap->position);
 80012ca:	f04f 0300 	mov.w	r3, #0
 80012ce:	2104      	movs	r1, #4
 80012d0:	f361 0302 	bfi	r3, r1, #0, #3
 80012d4:	f36f 03c5 	bfc	r3, #3, #3
 80012d8:	491f      	ldr	r1, [pc, #124]	; (8001358 <position_state_changed_listener+0x178>)
 80012da:	4820      	ldr	r0, [pc, #128]	; (800135c <position_state_changed_listener+0x17c>)
 80012dc:	1a09      	subs	r1, r1, r0
 80012de:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 80012e2:	f361 138f 	bfi	r3, r1, #6, #10
 80012e6:	491e      	ldr	r1, [pc, #120]	; (8001360 <position_state_changed_listener+0x180>)
 80012e8:	4822      	ldr	r0, [pc, #136]	; (8001374 <position_state_changed_listener+0x194>)
 80012ea:	f005 f9a9 	bl	8006640 <log_2>
            return ZMK_EV_EVENT_BUBBLE;
 80012ee:	2000      	movs	r0, #0
 80012f0:	e7bf      	b.n	8001272 <position_state_changed_listener+0x92>
        decide_hold_tap(undecided_hold_tap, HT_TIMER_EVENT);
 80012f2:	2103      	movs	r1, #3
 80012f4:	f7ff febe 	bl	8001074 <decide_hold_tap>
 80012f8:	e78c      	b.n	8001214 <position_state_changed_listener+0x34>
    if (!ev->state && find_captured_keydown_event(ev->position) == NULL) {
 80012fa:	6820      	ldr	r0, [r4, #0]
 80012fc:	f7ff fde0 	bl	8000ec0 <find_captured_keydown_event>
 8001300:	2800      	cmp	r0, #0
 8001302:	d18a      	bne.n	800121a <position_state_changed_listener+0x3a>
        LOG_DBG("%d bubbling %d %s event", undecided_hold_tap->position, ev->position,
 8001304:	f04f 0300 	mov.w	r3, #0
 8001308:	2204      	movs	r2, #4
 800130a:	f362 0302 	bfi	r3, r2, #0, #3
 800130e:	f36f 03c5 	bfc	r3, #3, #3
 8001312:	4a11      	ldr	r2, [pc, #68]	; (8001358 <position_state_changed_listener+0x178>)
 8001314:	4911      	ldr	r1, [pc, #68]	; (800135c <position_state_changed_listener+0x17c>)
 8001316:	1a52      	subs	r2, r2, r1
 8001318:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 800131c:	f362 138f 	bfi	r3, r2, #6, #10
 8001320:	4a0f      	ldr	r2, [pc, #60]	; (8001360 <position_state_changed_listener+0x180>)
 8001322:	9200      	str	r2, [sp, #0]
 8001324:	4a0b      	ldr	r2, [pc, #44]	; (8001354 <position_state_changed_listener+0x174>)
 8001326:	6812      	ldr	r2, [r2, #0]
 8001328:	6812      	ldr	r2, [r2, #0]
 800132a:	9201      	str	r2, [sp, #4]
 800132c:	6822      	ldr	r2, [r4, #0]
 800132e:	9202      	str	r2, [sp, #8]
 8001330:	7922      	ldrb	r2, [r4, #4]
 8001332:	b142      	cbz	r2, 8001346 <position_state_changed_listener+0x166>
 8001334:	4a0b      	ldr	r2, [pc, #44]	; (8001364 <position_state_changed_listener+0x184>)
 8001336:	9203      	str	r2, [sp, #12]
 8001338:	2204      	movs	r2, #4
 800133a:	4669      	mov	r1, sp
 800133c:	480e      	ldr	r0, [pc, #56]	; (8001378 <position_state_changed_listener+0x198>)
 800133e:	f005 fa03 	bl	8006748 <log_n>
        return ZMK_EV_EVENT_BUBBLE;
 8001342:	2000      	movs	r0, #0
 8001344:	e795      	b.n	8001272 <position_state_changed_listener+0x92>
        LOG_DBG("%d bubbling %d %s event", undecided_hold_tap->position, ev->position,
 8001346:	4a0d      	ldr	r2, [pc, #52]	; (800137c <position_state_changed_listener+0x19c>)
 8001348:	e7f5      	b.n	8001336 <position_state_changed_listener+0x156>
    LOG_DBG("%d capturing %d %s event", undecided_hold_tap->position, ev->position,
 800134a:	4a0c      	ldr	r2, [pc, #48]	; (800137c <position_state_changed_listener+0x19c>)
 800134c:	e77f      	b.n	800124e <position_state_changed_listener+0x6e>
    decide_hold_tap(undecided_hold_tap, ev->state ? HT_OTHER_KEY_DOWN : HT_OTHER_KEY_UP);
 800134e:	2102      	movs	r1, #2
 8001350:	e78c      	b.n	800126c <position_state_changed_listener+0x8c>
 8001352:	bf00      	nop
 8001354:	20003478 	.word	0x20003478
 8001358:	08022c60 	.word	0x08022c60
 800135c:	08022b90 	.word	0x08022b90
 8001360:	08023600 	.word	0x08023600
 8001364:	08023250 	.word	0x08023250
 8001368:	08023458 	.word	0x08023458
 800136c:	08023390 	.word	0x08023390
 8001370:	080233c0 	.word	0x080233c0
 8001374:	08023408 	.word	0x08023408
 8001378:	0802343c 	.word	0x0802343c
 800137c:	08023258 	.word	0x08023258

08001380 <on_hold_tap_binding_released>:
                                        struct zmk_behavior_binding_event event) {
 8001380:	b082      	sub	sp, #8
 8001382:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001384:	b093      	sub	sp, #76	; 0x4c
 8001386:	a918      	add	r1, sp, #96	; 0x60
 8001388:	e881 000c 	stmia.w	r1, {r2, r3}
    struct active_hold_tap *hold_tap = find_hold_tap(event.position);
 800138c:	9819      	ldr	r0, [sp, #100]	; 0x64
 800138e:	f7ff fd5b 	bl	8000e48 <find_hold_tap>
    if (hold_tap == NULL) {
 8001392:	2800      	cmp	r0, #0
 8001394:	d05f      	beq.n	8001456 <on_hold_tap_binding_released+0xd6>
 8001396:	4604      	mov	r4, r0
    int work_cancel_result = k_delayed_work_cancel(&hold_tap->work);
 8001398:	3020      	adds	r0, #32
 800139a:	f020 fff1 	bl	8022380 <k_delayed_work_cancel>
 800139e:	4607      	mov	r7, r0
    if (event.timestamp > (hold_tap->timestamp + hold_tap->config->tapping_term_ms)) {
 80013a0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80013a4:	69e1      	ldr	r1, [r4, #28]
 80013a6:	6809      	ldr	r1, [r1, #0]
 80013a8:	1852      	adds	r2, r2, r1
 80013aa:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80013ae:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 80013b2:	4282      	cmp	r2, r0
 80013b4:	418b      	sbcs	r3, r1
 80013b6:	db60      	blt.n	800147a <on_hold_tap_binding_released+0xfa>
    decide_hold_tap(hold_tap, HT_KEY_UP);
 80013b8:	2100      	movs	r1, #0
 80013ba:	4620      	mov	r0, r4
 80013bc:	f7ff fe5a 	bl	8001074 <decide_hold_tap>
    struct zmk_behavior_binding_event sub_behavior_data = {
 80013c0:	2300      	movs	r3, #0
 80013c2:	930e      	str	r3, [sp, #56]	; 0x38
        .position = hold_tap->position,
 80013c4:	6823      	ldr	r3, [r4, #0]
    struct zmk_behavior_binding_event sub_behavior_data = {
 80013c6:	930f      	str	r3, [sp, #60]	; 0x3c
        .timestamp = hold_tap->timestamp,
 80013c8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    struct zmk_behavior_binding_event sub_behavior_data = {
 80013cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    if (hold_tap->is_hold) {
 80013d0:	7e63      	ldrb	r3, [r4, #25]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d056      	beq.n	8001484 <on_hold_tap_binding_released+0x104>
        sub_behavior_binding.behavior_dev = hold_tap->config->behaviors->hold.behavior_dev;
 80013d6:	69e3      	ldr	r3, [r4, #28]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	930b      	str	r3, [sp, #44]	; 0x2c
        sub_behavior_binding.param1 = hold_tap->param_hold;
 80013de:	6863      	ldr	r3, [r4, #4]
 80013e0:	930c      	str	r3, [sp, #48]	; 0x30
        sub_behavior_binding.param2 = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	930d      	str	r3, [sp, #52]	; 0x34
    behavior_keymap_binding_released(&sub_behavior_binding, sub_behavior_data);
 80013e6:	ad02      	add	r5, sp, #8
 80013e8:	ab12      	add	r3, sp, #72	; 0x48
 80013ea:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80013ee:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&binding, *(uintptr_t *)&event, K_SYSCALL_BEHAVIOR_KEYMAP_BINDING_RELEASED);
	}
#endif
	compiler_barrier();
	return z_impl_behavior_keymap_binding_released(binding, event);
 80013f2:	ae06      	add	r6, sp, #24
 80013f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80013f8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
__syscall int behavior_keymap_binding_released(struct zmk_behavior_binding *binding,
                                               struct zmk_behavior_binding_event event);

static inline int z_impl_behavior_keymap_binding_released(struct zmk_behavior_binding *binding,
                                                          struct zmk_behavior_binding_event event) {
    const struct device *dev = device_get_binding(binding->behavior_dev);
 80013fc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80013fe:	f016 fc27 	bl	8017c50 <z_impl_device_get_binding>
    const struct behavior_driver_api *api = (const struct behavior_driver_api *)dev->api;
 8001402:	6883      	ldr	r3, [r0, #8]

    if (api->binding_released == NULL) {
 8001404:	685d      	ldr	r5, [r3, #4]
 8001406:	b13d      	cbz	r5, 8001418 <on_hold_tap_binding_released+0x98>
        return -ENOTSUP;
    }

    return api->binding_released(binding, event);
 8001408:	9909      	ldr	r1, [sp, #36]	; 0x24
 800140a:	9808      	ldr	r0, [sp, #32]
 800140c:	e88d 0003 	stmia.w	sp, {r0, r1}
 8001410:	9b07      	ldr	r3, [sp, #28]
 8001412:	9a06      	ldr	r2, [sp, #24]
 8001414:	a80b      	add	r0, sp, #44	; 0x2c
 8001416:	47a8      	blx	r5
    if (work_cancel_result == -EINPROGRESS) {
 8001418:	f117 0f44 	cmn.w	r7, #68	; 0x44
 800141c:	d03b      	beq.n	8001496 <on_hold_tap_binding_released+0x116>
        LOG_DBG("%d cleaning up hold-tap", event.position);
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	2204      	movs	r2, #4
 8001424:	f362 0302 	bfi	r3, r2, #0, #3
 8001428:	f36f 03c5 	bfc	r3, #3, #3
 800142c:	4a25      	ldr	r2, [pc, #148]	; (80014c4 <on_hold_tap_binding_released+0x144>)
 800142e:	4926      	ldr	r1, [pc, #152]	; (80014c8 <on_hold_tap_binding_released+0x148>)
 8001430:	1a52      	subs	r2, r2, r1
 8001432:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8001436:	f362 138f 	bfi	r3, r2, #6, #10
 800143a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800143c:	4923      	ldr	r1, [pc, #140]	; (80014cc <on_hold_tap_binding_released+0x14c>)
 800143e:	4824      	ldr	r0, [pc, #144]	; (80014d0 <on_hold_tap_binding_released+0x150>)
 8001440:	f005 f8fe 	bl	8006640 <log_2>
        clear_hold_tap(hold_tap);
 8001444:	4620      	mov	r0, r4
 8001446:	f018 f9eb 	bl	8019820 <clear_hold_tap>
}
 800144a:	2000      	movs	r0, #0
 800144c:	b013      	add	sp, #76	; 0x4c
 800144e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001452:	b002      	add	sp, #8
 8001454:	4770      	bx	lr
        LOG_ERR("ACTIVE_HOLD_TAP_CLEANED_UP_TOO_EARLY");
 8001456:	f04f 0100 	mov.w	r1, #0
 800145a:	2301      	movs	r3, #1
 800145c:	f363 0102 	bfi	r1, r3, #0, #3
 8001460:	f36f 01c5 	bfc	r1, #3, #3
 8001464:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <on_hold_tap_binding_released+0x144>)
 8001466:	4a18      	ldr	r2, [pc, #96]	; (80014c8 <on_hold_tap_binding_released+0x148>)
 8001468:	1a9b      	subs	r3, r3, r2
 800146a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800146e:	f363 118f 	bfi	r1, r3, #6, #10
 8001472:	4818      	ldr	r0, [pc, #96]	; (80014d4 <on_hold_tap_binding_released+0x154>)
 8001474:	f005 f9d4 	bl	8006820 <log_0>
        return ZMK_BEHAVIOR_OPAQUE;
 8001478:	e7e7      	b.n	800144a <on_hold_tap_binding_released+0xca>
        decide_hold_tap(hold_tap, HT_TIMER_EVENT);
 800147a:	2103      	movs	r1, #3
 800147c:	4620      	mov	r0, r4
 800147e:	f7ff fdf9 	bl	8001074 <decide_hold_tap>
 8001482:	e799      	b.n	80013b8 <on_hold_tap_binding_released+0x38>
        sub_behavior_binding.behavior_dev = hold_tap->config->behaviors->tap.behavior_dev;
 8001484:	69e3      	ldr	r3, [r4, #28]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	930b      	str	r3, [sp, #44]	; 0x2c
        sub_behavior_binding.param1 = hold_tap->param_tap;
 800148c:	68a3      	ldr	r3, [r4, #8]
 800148e:	930c      	str	r3, [sp, #48]	; 0x30
        sub_behavior_binding.param2 = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	930d      	str	r3, [sp, #52]	; 0x34
 8001494:	e7a7      	b.n	80013e6 <on_hold_tap_binding_released+0x66>
        LOG_DBG("%d hold-tap timer work in event queue", event.position);
 8001496:	f04f 0300 	mov.w	r3, #0
 800149a:	2204      	movs	r2, #4
 800149c:	f362 0302 	bfi	r3, r2, #0, #3
 80014a0:	f36f 03c5 	bfc	r3, #3, #3
 80014a4:	4a07      	ldr	r2, [pc, #28]	; (80014c4 <on_hold_tap_binding_released+0x144>)
 80014a6:	4908      	ldr	r1, [pc, #32]	; (80014c8 <on_hold_tap_binding_released+0x148>)
 80014a8:	1a52      	subs	r2, r2, r1
 80014aa:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 80014ae:	f362 138f 	bfi	r3, r2, #6, #10
 80014b2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80014b4:	4905      	ldr	r1, [pc, #20]	; (80014cc <on_hold_tap_binding_released+0x14c>)
 80014b6:	4808      	ldr	r0, [pc, #32]	; (80014d8 <on_hold_tap_binding_released+0x158>)
 80014b8:	f005 f8c2 	bl	8006640 <log_2>
        hold_tap->work_is_cancelled = true;
 80014bc:	2301      	movs	r3, #1
 80014be:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80014c2:	e7c2      	b.n	800144a <on_hold_tap_binding_released+0xca>
 80014c4:	08022c60 	.word	0x08022c60
 80014c8:	08022b90 	.word	0x08022b90
 80014cc:	080235e0 	.word	0x080235e0
 80014d0:	080234cc 	.word	0x080234cc
 80014d4:	08023478 	.word	0x08023478
 80014d8:	080234a0 	.word	0x080234a0

080014dc <on_hold_tap_binding_pressed>:
                                       struct zmk_behavior_binding_event event) {
 80014dc:	b082      	sub	sp, #8
 80014de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014e0:	b085      	sub	sp, #20
 80014e2:	4604      	mov	r4, r0
 80014e4:	a90a      	add	r1, sp, #40	; 0x28
 80014e6:	e881 000c 	stmia.w	r1, {r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
 80014ea:	6800      	ldr	r0, [r0, #0]
 80014ec:	f016 fbb0 	bl	8017c50 <z_impl_device_get_binding>
    const struct behavior_hold_tap_config *cfg = dev->config;
 80014f0:	6846      	ldr	r6, [r0, #4]
    if (undecided_hold_tap != NULL) {
 80014f2:	4b37      	ldr	r3, [pc, #220]	; (80015d0 <on_hold_tap_binding_pressed+0xf4>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	b1bb      	cbz	r3, 8001528 <on_hold_tap_binding_pressed+0x4c>
        LOG_DBG("ERROR another hold-tap behavior is undecided.");
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	2304      	movs	r3, #4
 80014fe:	f363 0202 	bfi	r2, r3, #0, #3
 8001502:	f36f 02c5 	bfc	r2, #3, #3
 8001506:	4b33      	ldr	r3, [pc, #204]	; (80015d4 <on_hold_tap_binding_pressed+0xf8>)
 8001508:	4933      	ldr	r1, [pc, #204]	; (80015d8 <on_hold_tap_binding_pressed+0xfc>)
 800150a:	1a5b      	subs	r3, r3, r1
 800150c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8001510:	f363 128f 	bfi	r2, r3, #6, #10
 8001514:	4931      	ldr	r1, [pc, #196]	; (80015dc <on_hold_tap_binding_pressed+0x100>)
 8001516:	4832      	ldr	r0, [pc, #200]	; (80015e0 <on_hold_tap_binding_pressed+0x104>)
 8001518:	f005 f812 	bl	8006540 <log_1>
}
 800151c:	2000      	movs	r0, #0
 800151e:	b005      	add	sp, #20
 8001520:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001524:	b002      	add	sp, #8
 8001526:	4770      	bx	lr
        store_hold_tap(event.position, binding->param1, binding->param2, event.timestamp, cfg);
 8001528:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800152a:	9602      	str	r6, [sp, #8]
 800152c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8001530:	e9cd 2300 	strd	r2, r3, [sp]
 8001534:	68a2      	ldr	r2, [r4, #8]
 8001536:	6861      	ldr	r1, [r4, #4]
 8001538:	4638      	mov	r0, r7
 800153a:	f7ff fc99 	bl	8000e70 <store_hold_tap>
    if (hold_tap == NULL) {
 800153e:	4605      	mov	r5, r0
 8001540:	b390      	cbz	r0, 80015a8 <on_hold_tap_binding_pressed+0xcc>
    LOG_DBG("%d new undecided hold_tap", event.position);
 8001542:	f04f 0300 	mov.w	r3, #0
 8001546:	2204      	movs	r2, #4
 8001548:	f362 0302 	bfi	r3, r2, #0, #3
 800154c:	f36f 03c5 	bfc	r3, #3, #3
 8001550:	4a20      	ldr	r2, [pc, #128]	; (80015d4 <on_hold_tap_binding_pressed+0xf8>)
 8001552:	4921      	ldr	r1, [pc, #132]	; (80015d8 <on_hold_tap_binding_pressed+0xfc>)
 8001554:	1a52      	subs	r2, r2, r1
 8001556:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 800155a:	f362 138f 	bfi	r3, r2, #6, #10
 800155e:	463a      	mov	r2, r7
 8001560:	491e      	ldr	r1, [pc, #120]	; (80015dc <on_hold_tap_binding_pressed+0x100>)
 8001562:	4820      	ldr	r0, [pc, #128]	; (80015e4 <on_hold_tap_binding_pressed+0x108>)
 8001564:	f005 f86c 	bl	8006640 <log_2>
    undecided_hold_tap = hold_tap;
 8001568:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <on_hold_tap_binding_pressed+0xf4>)
 800156a:	601d      	str	r5, [r3, #0]
    int32_t tapping_term_ms_left = (hold_tap->timestamp + cfg->tapping_term_ms) - k_uptime_get();
 800156c:	692c      	ldr	r4, [r5, #16]
 800156e:	6830      	ldr	r0, [r6, #0]
 8001570:	4404      	add	r4, r0
	return z_impl_k_uptime_ticks();
 8001572:	f020 ff93 	bl	802249c <z_impl_k_uptime_ticks>
 8001576:	220a      	movs	r2, #10
 8001578:	2300      	movs	r3, #0
 800157a:	f7fe fe05 	bl	8000188 <__aeabi_uldivmod>
 800157e:	1a20      	subs	r0, r4, r0
    if (tapping_term_ms_left > 0) {
 8001580:	2800      	cmp	r0, #0
 8001582:	ddcb      	ble.n	800151c <on_hold_tap_binding_pressed+0x40>
        k_delayed_work_submit(&hold_tap->work, K_MSEC(tapping_term_ms_left));
 8001584:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8001588:	17c7      	asrs	r7, r0, #31
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * (to_hz / from_hz);
 800158a:	00b9      	lsls	r1, r7, #2
 800158c:	0082      	lsls	r2, r0, #2
 800158e:	ea41 7390 	orr.w	r3, r1, r0, lsr #30
 8001592:	1812      	adds	r2, r2, r0
 8001594:	eb47 0303 	adc.w	r3, r7, r3
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					k_timeout_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
 8001598:	1892      	adds	r2, r2, r2
 800159a:	415b      	adcs	r3, r3
 800159c:	f105 0120 	add.w	r1, r5, #32
 80015a0:	4811      	ldr	r0, [pc, #68]	; (80015e8 <on_hold_tap_binding_pressed+0x10c>)
 80015a2:	f017 fc65 	bl	8018e70 <k_delayed_work_submit_to_queue>
 80015a6:	e7b9      	b.n	800151c <on_hold_tap_binding_pressed+0x40>
        LOG_ERR("unable to store hold-tap info, did you press more than %d hold-taps?",
 80015a8:	f04f 0200 	mov.w	r2, #0
 80015ac:	2301      	movs	r3, #1
 80015ae:	f363 0202 	bfi	r2, r3, #0, #3
 80015b2:	f36f 02c5 	bfc	r2, #3, #3
 80015b6:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <on_hold_tap_binding_pressed+0xf8>)
 80015b8:	4907      	ldr	r1, [pc, #28]	; (80015d8 <on_hold_tap_binding_pressed+0xfc>)
 80015ba:	1a5b      	subs	r3, r3, r1
 80015bc:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80015c0:	f363 128f 	bfi	r2, r3, #6, #10
 80015c4:	210a      	movs	r1, #10
 80015c6:	4809      	ldr	r0, [pc, #36]	; (80015ec <on_hold_tap_binding_pressed+0x110>)
 80015c8:	f004 ffba 	bl	8006540 <log_1>
        return ZMK_BEHAVIOR_OPAQUE;
 80015cc:	e7a6      	b.n	800151c <on_hold_tap_binding_pressed+0x40>
 80015ce:	bf00      	nop
 80015d0:	20003478 	.word	0x20003478
 80015d4:	08022c60 	.word	0x08022c60
 80015d8:	08022b90 	.word	0x08022b90
 80015dc:	080235c4 	.word	0x080235c4
 80015e0:	080234e8 	.word	0x080234e8
 80015e4:	08023564 	.word	0x08023564
 80015e8:	20003310 	.word	0x20003310
 80015ec:	0802351c 	.word	0x0802351c

080015f0 <behavior_hold_tap_init>:
}

static int behavior_hold_tap_init(const struct device *dev) {
    static bool init_first_run = true;

    if (init_first_run) {
 80015f0:	4b0e      	ldr	r3, [pc, #56]	; (800162c <behavior_hold_tap_init+0x3c>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	b91b      	cbnz	r3, 80015fe <behavior_hold_tap_init+0xe>
        for (int i = 0; i < ZMK_BHV_HOLD_TAP_MAX_HELD; i++) {
            k_delayed_work_init(&active_hold_taps[i].work, behavior_hold_tap_timer_work_handler);
            active_hold_taps[i].position = ZMK_BHV_HOLD_TAP_POSITION_NOT_USED;
        }
    }
    init_first_run = false;
 80015f6:	2000      	movs	r0, #0
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <behavior_hold_tap_init+0x3c>)
 80015fa:	7018      	strb	r0, [r3, #0]
    return 0;
}
 80015fc:	4770      	bx	lr
static int behavior_hold_tap_init(const struct device *dev) {
 80015fe:	b570      	push	{r4, r5, r6, lr}
        for (int i = 0; i < ZMK_BHV_HOLD_TAP_MAX_HELD; i++) {
 8001600:	2500      	movs	r5, #0
 8001602:	2d09      	cmp	r5, #9
 8001604:	dc0e      	bgt.n	8001624 <behavior_hold_tap_init+0x34>
            k_delayed_work_init(&active_hold_taps[i].work, behavior_hold_tap_timer_work_handler);
 8001606:	4e0a      	ldr	r6, [pc, #40]	; (8001630 <behavior_hold_tap_init+0x40>)
 8001608:	2458      	movs	r4, #88	; 0x58
 800160a:	fb04 f405 	mul.w	r4, r4, r5
 800160e:	f104 0020 	add.w	r0, r4, #32
 8001612:	4908      	ldr	r1, [pc, #32]	; (8001634 <behavior_hold_tap_init+0x44>)
 8001614:	4430      	add	r0, r6
 8001616:	f020 feab 	bl	8022370 <k_delayed_work_init>
            active_hold_taps[i].position = ZMK_BHV_HOLD_TAP_POSITION_NOT_USED;
 800161a:	f242 730f 	movw	r3, #9999	; 0x270f
 800161e:	5133      	str	r3, [r6, r4]
        for (int i = 0; i < ZMK_BHV_HOLD_TAP_MAX_HELD; i++) {
 8001620:	3501      	adds	r5, #1
 8001622:	e7ee      	b.n	8001602 <behavior_hold_tap_init+0x12>
    init_first_run = false;
 8001624:	2000      	movs	r0, #0
 8001626:	4b01      	ldr	r3, [pc, #4]	; (800162c <behavior_hold_tap_init+0x3c>)
 8001628:	7018      	strb	r0, [r3, #0]
}
 800162a:	bd70      	pop	{r4, r5, r6, pc}
 800162c:	20000ce0 	.word	0x20000ce0
 8001630:	20001298 	.word	0x20001298
 8001634:	080198af 	.word	0x080198af

08001638 <store_sticky_key>:

struct active_sticky_key active_sticky_keys[ZMK_BHV_STICKY_KEY_MAX_HELD] = {};

static struct active_sticky_key *store_sticky_key(uint32_t position, uint32_t param1,
                                                  uint32_t param2,
                                                  const struct behavior_sticky_key_config *config) {
 8001638:	b4f0      	push	{r4, r5, r6, r7}
 800163a:	4607      	mov	r7, r0
    for (int i = 0; i < ZMK_BHV_STICKY_KEY_MAX_HELD; i++) {
 800163c:	2500      	movs	r5, #0
 800163e:	e000      	b.n	8001642 <store_sticky_key+0xa>
 8001640:	3501      	adds	r5, #1
 8001642:	2d09      	cmp	r5, #9
 8001644:	dc20      	bgt.n	8001688 <store_sticky_key+0x50>
        struct active_sticky_key *const sticky_key = &active_sticky_keys[i];
 8001646:	4e11      	ldr	r6, [pc, #68]	; (800168c <store_sticky_key+0x54>)
 8001648:	2458      	movs	r4, #88	; 0x58
 800164a:	fb04 f405 	mul.w	r4, r4, r5
 800164e:	1930      	adds	r0, r6, r4
        if (sticky_key->position != ZMK_BHV_STICKY_KEY_POSITION_FREE ||
 8001650:	5934      	ldr	r4, [r6, r4]
 8001652:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8001656:	d1f3      	bne.n	8001640 <store_sticky_key+0x8>
            sticky_key->timer_cancelled) {
 8001658:	7c44      	ldrb	r4, [r0, #17]
        if (sticky_key->position != ZMK_BHV_STICKY_KEY_POSITION_FREE ||
 800165a:	2c00      	cmp	r4, #0
 800165c:	d1f0      	bne.n	8001640 <store_sticky_key+0x8>
            continue;
        }
        sticky_key->position = position;
 800165e:	4e0b      	ldr	r6, [pc, #44]	; (800168c <store_sticky_key+0x54>)
 8001660:	2458      	movs	r4, #88	; 0x58
 8001662:	fb04 f505 	mul.w	r5, r4, r5
 8001666:	1974      	adds	r4, r6, r5
 8001668:	5177      	str	r7, [r6, r5]
        sticky_key->param1 = param1;
 800166a:	6061      	str	r1, [r4, #4]
        sticky_key->param2 = param2;
 800166c:	60a2      	str	r2, [r4, #8]
        sticky_key->config = config;
 800166e:	60e3      	str	r3, [r4, #12]
        sticky_key->release_at = 0;
 8001670:	2200      	movs	r2, #0
 8001672:	2300      	movs	r3, #0
 8001674:	e9c4 2306 	strd	r2, r3, [r4, #24]
        sticky_key->timer_cancelled = false;
 8001678:	2300      	movs	r3, #0
 800167a:	7463      	strb	r3, [r4, #17]
        sticky_key->timer_started = false;
 800167c:	7423      	strb	r3, [r4, #16]
        sticky_key->modified_key_usage_page = 0;
 800167e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        sticky_key->modified_key_keycode = 0;
 8001682:	6563      	str	r3, [r4, #84]	; 0x54
        return sticky_key;
    }
    return NULL;
}
 8001684:	bcf0      	pop	{r4, r5, r6, r7}
 8001686:	4770      	bx	lr
    return NULL;
 8001688:	2000      	movs	r0, #0
 800168a:	e7fb      	b.n	8001684 <store_sticky_key+0x4c>
 800168c:	20001608 	.word	0x20001608

08001690 <find_sticky_key>:
static void clear_sticky_key(struct active_sticky_key *sticky_key) {
    sticky_key->position = ZMK_BHV_STICKY_KEY_POSITION_FREE;
}

static struct active_sticky_key *find_sticky_key(uint32_t position) {
    for (int i = 0; i < ZMK_BHV_STICKY_KEY_MAX_HELD; i++) {
 8001690:	2300      	movs	r3, #0
 8001692:	e000      	b.n	8001696 <find_sticky_key+0x6>
 8001694:	3301      	adds	r3, #1
 8001696:	2b09      	cmp	r3, #9
 8001698:	dc10      	bgt.n	80016bc <find_sticky_key+0x2c>
        if (active_sticky_keys[i].position == position && !active_sticky_keys[i].timer_cancelled) {
 800169a:	2258      	movs	r2, #88	; 0x58
 800169c:	fb02 f203 	mul.w	r2, r2, r3
 80016a0:	4907      	ldr	r1, [pc, #28]	; (80016c0 <find_sticky_key+0x30>)
 80016a2:	588a      	ldr	r2, [r1, r2]
 80016a4:	4282      	cmp	r2, r0
 80016a6:	d1f5      	bne.n	8001694 <find_sticky_key+0x4>
 80016a8:	2258      	movs	r2, #88	; 0x58
 80016aa:	fb02 1203 	mla	r2, r2, r3, r1
 80016ae:	7c52      	ldrb	r2, [r2, #17]
 80016b0:	2a00      	cmp	r2, #0
 80016b2:	d1ef      	bne.n	8001694 <find_sticky_key+0x4>
            return &active_sticky_keys[i];
 80016b4:	2258      	movs	r2, #88	; 0x58
 80016b6:	fb02 1003 	mla	r0, r2, r3, r1
 80016ba:	4770      	bx	lr
        }
    }
    return NULL;
 80016bc:	2000      	movs	r0, #0
}
 80016be:	4770      	bx	lr
 80016c0:	20001608 	.word	0x20001608

080016c4 <behavior_sticky_key_init>:
    }
}

static int behavior_sticky_key_init(const struct device *dev) {
    static bool init_first_run = true;
    if (init_first_run) {
 80016c4:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <behavior_sticky_key_init+0x3c>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	b91b      	cbnz	r3, 80016d2 <behavior_sticky_key_init+0xe>
            k_delayed_work_init(&active_sticky_keys[i].release_timer,
                                behavior_sticky_key_timer_handler);
            active_sticky_keys[i].position = ZMK_BHV_STICKY_KEY_POSITION_FREE;
        }
    }
    init_first_run = false;
 80016ca:	2000      	movs	r0, #0
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <behavior_sticky_key_init+0x3c>)
 80016ce:	7018      	strb	r0, [r3, #0]
    return 0;
}
 80016d0:	4770      	bx	lr
static int behavior_sticky_key_init(const struct device *dev) {
 80016d2:	b570      	push	{r4, r5, r6, lr}
        for (int i = 0; i < ZMK_BHV_STICKY_KEY_MAX_HELD; i++) {
 80016d4:	2500      	movs	r5, #0
 80016d6:	2d09      	cmp	r5, #9
 80016d8:	dc0e      	bgt.n	80016f8 <behavior_sticky_key_init+0x34>
            k_delayed_work_init(&active_sticky_keys[i].release_timer,
 80016da:	4e0a      	ldr	r6, [pc, #40]	; (8001704 <behavior_sticky_key_init+0x40>)
 80016dc:	2458      	movs	r4, #88	; 0x58
 80016de:	fb04 f405 	mul.w	r4, r4, r5
 80016e2:	f104 0020 	add.w	r0, r4, #32
 80016e6:	4908      	ldr	r1, [pc, #32]	; (8001708 <behavior_sticky_key_init+0x44>)
 80016e8:	4430      	add	r0, r6
 80016ea:	f020 fe41 	bl	8022370 <k_delayed_work_init>
            active_sticky_keys[i].position = ZMK_BHV_STICKY_KEY_POSITION_FREE;
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016f2:	5133      	str	r3, [r6, r4]
        for (int i = 0; i < ZMK_BHV_STICKY_KEY_MAX_HELD; i++) {
 80016f4:	3501      	adds	r5, #1
 80016f6:	e7ee      	b.n	80016d6 <behavior_sticky_key_init+0x12>
    init_first_run = false;
 80016f8:	2000      	movs	r0, #0
 80016fa:	4b01      	ldr	r3, [pc, #4]	; (8001700 <behavior_sticky_key_init+0x3c>)
 80016fc:	7018      	strb	r0, [r3, #0]
}
 80016fe:	bd70      	pop	{r4, r5, r6, pc}
 8001700:	20000ce1 	.word	0x20000ce1
 8001704:	20001608 	.word	0x20001608
 8001708:	080198e9 	.word	0x080198e9

0800170c <on_sticky_key_binding_pressed>:
                                         struct zmk_behavior_binding_event event) {
 800170c:	b082      	sub	sp, #8
 800170e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001710:	b093      	sub	sp, #76	; 0x4c
 8001712:	4604      	mov	r4, r0
 8001714:	a918      	add	r1, sp, #96	; 0x60
 8001716:	e881 000c 	stmia.w	r1, {r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
 800171a:	6800      	ldr	r0, [r0, #0]
 800171c:	f016 fa98 	bl	8017c50 <z_impl_device_get_binding>
    const struct behavior_sticky_key_config *cfg = dev->config;
 8001720:	6847      	ldr	r7, [r0, #4]
    sticky_key = find_sticky_key(event.position);
 8001722:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8001724:	4630      	mov	r0, r6
 8001726:	f7ff ffb3 	bl	8001690 <find_sticky_key>
    if (sticky_key != NULL) {
 800172a:	2800      	cmp	r0, #0
 800172c:	d02d      	beq.n	800178a <on_sticky_key_binding_pressed+0x7e>
 800172e:	4605      	mov	r5, r0
        stop_timer(sticky_key);
 8001730:	f018 f8ce 	bl	80198d0 <stop_timer>
        .behavior_dev = sticky_key->config->behavior.behavior_dev,
 8001734:	68eb      	ldr	r3, [r5, #12]
 8001736:	685b      	ldr	r3, [r3, #4]
    struct zmk_behavior_binding binding = {
 8001738:	9303      	str	r3, [sp, #12]
        .param1 = sticky_key->param1,
 800173a:	686b      	ldr	r3, [r5, #4]
    struct zmk_behavior_binding binding = {
 800173c:	9304      	str	r3, [sp, #16]
        .param2 = sticky_key->param2,
 800173e:	68ab      	ldr	r3, [r5, #8]
    struct zmk_behavior_binding binding = {
 8001740:	9305      	str	r3, [sp, #20]
    struct zmk_behavior_binding_event event = {
 8001742:	2300      	movs	r3, #0
 8001744:	9306      	str	r3, [sp, #24]
        .position = sticky_key->position,
 8001746:	682b      	ldr	r3, [r5, #0]
    struct zmk_behavior_binding_event event = {
 8001748:	9307      	str	r3, [sp, #28]
 800174a:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800174e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    clear_sticky_key(sticky_key);
 8001752:	4628      	mov	r0, r5
 8001754:	f018 f8b8 	bl	80198c8 <clear_sticky_key>
    return behavior_keymap_binding_released(&binding, event);
 8001758:	ad0a      	add	r5, sp, #40	; 0x28
 800175a:	ab06      	add	r3, sp, #24
 800175c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800175e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001762:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001766:	ad12      	add	r5, sp, #72	; 0x48
 8001768:	e905 000f 	stmdb	r5, {r0, r1, r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
 800176c:	9803      	ldr	r0, [sp, #12]
 800176e:	f016 fa6f 	bl	8017c50 <z_impl_device_get_binding>
    const struct behavior_driver_api *api = (const struct behavior_driver_api *)dev->api;
 8001772:	6883      	ldr	r3, [r0, #8]
    if (api->binding_released == NULL) {
 8001774:	685d      	ldr	r5, [r3, #4]
 8001776:	b145      	cbz	r5, 800178a <on_sticky_key_binding_pressed+0x7e>
    return api->binding_released(binding, event);
 8001778:	ab12      	add	r3, sp, #72	; 0x48
 800177a:	e913 0003 	ldmdb	r3, {r0, r1}
 800177e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8001782:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001784:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001786:	a803      	add	r0, sp, #12
 8001788:	47a8      	blx	r5
    sticky_key = store_sticky_key(event.position, binding->param1, binding->param2, cfg);
 800178a:	463b      	mov	r3, r7
 800178c:	68a2      	ldr	r2, [r4, #8]
 800178e:	6861      	ldr	r1, [r4, #4]
 8001790:	4630      	mov	r0, r6
 8001792:	f7ff ff51 	bl	8001638 <store_sticky_key>
    if (sticky_key == NULL) {
 8001796:	2800      	cmp	r0, #0
 8001798:	d040      	beq.n	800181c <on_sticky_key_binding_pressed+0x110>
        .behavior_dev = sticky_key->config->behavior.behavior_dev,
 800179a:	68c2      	ldr	r2, [r0, #12]
 800179c:	6852      	ldr	r2, [r2, #4]
    struct zmk_behavior_binding binding = {
 800179e:	9203      	str	r2, [sp, #12]
        .param1 = sticky_key->param1,
 80017a0:	6842      	ldr	r2, [r0, #4]
    struct zmk_behavior_binding binding = {
 80017a2:	9204      	str	r2, [sp, #16]
        .param2 = sticky_key->param2,
 80017a4:	6882      	ldr	r2, [r0, #8]
    struct zmk_behavior_binding binding = {
 80017a6:	9205      	str	r2, [sp, #20]
    struct zmk_behavior_binding_event event = {
 80017a8:	2200      	movs	r2, #0
 80017aa:	9206      	str	r2, [sp, #24]
        .position = sticky_key->position,
 80017ac:	6803      	ldr	r3, [r0, #0]
    struct zmk_behavior_binding_event event = {
 80017ae:	9307      	str	r3, [sp, #28]
 80017b0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80017b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
    return behavior_keymap_binding_pressed(&binding, event);
 80017b8:	ac0a      	add	r4, sp, #40	; 0x28
 80017ba:	ab06      	add	r3, sp, #24
 80017bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return z_impl_behavior_keymap_binding_pressed(binding, event);
 80017c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017c6:	ac12      	add	r4, sp, #72	; 0x48
 80017c8:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
 80017cc:	9803      	ldr	r0, [sp, #12]
 80017ce:	f016 fa3f 	bl	8017c50 <z_impl_device_get_binding>
    const struct behavior_driver_api *api = (const struct behavior_driver_api *)dev->api;
 80017d2:	6883      	ldr	r3, [r0, #8]
    if (api->binding_pressed == NULL) {
 80017d4:	681c      	ldr	r4, [r3, #0]
 80017d6:	b144      	cbz	r4, 80017ea <on_sticky_key_binding_pressed+0xde>
    return api->binding_pressed(binding, event);
 80017d8:	ab12      	add	r3, sp, #72	; 0x48
 80017da:	e913 0003 	ldmdb	r3, {r0, r1}
 80017de:	e88d 0003 	stmia.w	sp, {r0, r1}
 80017e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80017e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80017e6:	a803      	add	r0, sp, #12
 80017e8:	47a0      	blx	r4
    LOG_DBG("%d new sticky_key", event.position);
 80017ea:	f04f 0300 	mov.w	r3, #0
 80017ee:	2204      	movs	r2, #4
 80017f0:	f362 0302 	bfi	r3, r2, #0, #3
 80017f4:	f36f 03c5 	bfc	r3, #3, #3
 80017f8:	4a12      	ldr	r2, [pc, #72]	; (8001844 <on_sticky_key_binding_pressed+0x138>)
 80017fa:	4913      	ldr	r1, [pc, #76]	; (8001848 <on_sticky_key_binding_pressed+0x13c>)
 80017fc:	1a52      	subs	r2, r2, r1
 80017fe:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8001802:	f362 138f 	bfi	r3, r2, #6, #10
 8001806:	4632      	mov	r2, r6
 8001808:	4910      	ldr	r1, [pc, #64]	; (800184c <on_sticky_key_binding_pressed+0x140>)
 800180a:	4811      	ldr	r0, [pc, #68]	; (8001850 <on_sticky_key_binding_pressed+0x144>)
 800180c:	f004 ff18 	bl	8006640 <log_2>
}
 8001810:	2000      	movs	r0, #0
 8001812:	b013      	add	sp, #76	; 0x4c
 8001814:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001818:	b002      	add	sp, #8
 800181a:	4770      	bx	lr
        LOG_ERR("unable to store sticky key, did you press more than %d sticky_key?",
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	2301      	movs	r3, #1
 8001822:	f363 0202 	bfi	r2, r3, #0, #3
 8001826:	f36f 02c5 	bfc	r2, #3, #3
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <on_sticky_key_binding_pressed+0x138>)
 800182c:	4906      	ldr	r1, [pc, #24]	; (8001848 <on_sticky_key_binding_pressed+0x13c>)
 800182e:	1a5b      	subs	r3, r3, r1
 8001830:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8001834:	f363 128f 	bfi	r2, r3, #6, #10
 8001838:	210a      	movs	r1, #10
 800183a:	4806      	ldr	r0, [pc, #24]	; (8001854 <on_sticky_key_binding_pressed+0x148>)
 800183c:	f004 fe80 	bl	8006540 <log_1>
        return ZMK_BEHAVIOR_OPAQUE;
 8001840:	e7e6      	b.n	8001810 <on_sticky_key_binding_pressed+0x104>
 8001842:	bf00      	nop
 8001844:	08022c60 	.word	0x08022c60
 8001848:	08022b90 	.word	0x08022b90
 800184c:	08023744 	.word	0x08023744
 8001850:	08023694 	.word	0x08023694
 8001854:	08023650 	.word	0x08023650

08001858 <sticky_key_keycode_state_changed_listener>:
static int sticky_key_keycode_state_changed_listener(const zmk_event_t *eh) {
 8001858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800185c:	b092      	sub	sp, #72	; 0x48
    struct zmk_keycode_state_changed *ev = as_zmk_keycode_state_changed(eh);
 800185e:	f7ff f9eb 	bl	8000c38 <as_zmk_keycode_state_changed>
    if (ev == NULL) {
 8001862:	2800      	cmp	r0, #0
 8001864:	f000 80db 	beq.w	8001a1e <sticky_key_keycode_state_changed_listener+0x1c6>
 8001868:	4607      	mov	r7, r0
    for (int i = 0; i < ZMK_BHV_STICKY_KEY_MAX_HELD; i++) {
 800186a:	2400      	movs	r4, #0
 800186c:	e049      	b.n	8001902 <sticky_key_keycode_state_changed_listener+0xaa>
            (HID_USAGE_PAGE(sticky_key->param1) & 0xFF) == ev->usage_page &&
 800186e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8001872:	8839      	ldrh	r1, [r7, #0]
            HID_USAGE_ID(sticky_key->param1) == ev->keycode &&
 8001874:	428a      	cmp	r2, r1
 8001876:	d15e      	bne.n	8001936 <sticky_key_keycode_state_changed_listener+0xde>
            SELECT_MODS(sticky_key->param1) == ev->implicit_modifiers) {
 8001878:	7a3a      	ldrb	r2, [r7, #8]
            (HID_USAGE_PAGE(sticky_key->param1) & 0xFF) == ev->usage_page &&
 800187a:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
 800187e:	d15a      	bne.n	8001936 <sticky_key_keycode_state_changed_listener+0xde>
 8001880:	e03e      	b.n	8001900 <sticky_key_keycode_state_changed_listener+0xa8>
            stop_timer(sticky_key);
 8001882:	4640      	mov	r0, r8
 8001884:	f018 f824 	bl	80198d0 <stop_timer>
            release_sticky_key_behavior(sticky_key, sticky_key->release_at);
 8001888:	4a67      	ldr	r2, [pc, #412]	; (8001a28 <sticky_key_keycode_state_changed_listener+0x1d0>)
 800188a:	2358      	movs	r3, #88	; 0x58
 800188c:	fb03 2304 	mla	r3, r3, r4, r2
 8001890:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
        .behavior_dev = sticky_key->config->behavior.behavior_dev,
 8001894:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8001898:	6849      	ldr	r1, [r1, #4]
    struct zmk_behavior_binding binding = {
 800189a:	9103      	str	r1, [sp, #12]
        .param1 = sticky_key->param1,
 800189c:	f8d8 1004 	ldr.w	r1, [r8, #4]
    struct zmk_behavior_binding binding = {
 80018a0:	9104      	str	r1, [sp, #16]
        .param2 = sticky_key->param2,
 80018a2:	f8d8 1008 	ldr.w	r1, [r8, #8]
    struct zmk_behavior_binding binding = {
 80018a6:	9105      	str	r1, [sp, #20]
    struct zmk_behavior_binding_event event = {
 80018a8:	2100      	movs	r1, #0
 80018aa:	9106      	str	r1, [sp, #24]
        .position = sticky_key->position,
 80018ac:	5971      	ldr	r1, [r6, r5]
    struct zmk_behavior_binding_event event = {
 80018ae:	9107      	str	r1, [sp, #28]
 80018b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
    clear_sticky_key(sticky_key);
 80018b4:	4640      	mov	r0, r8
 80018b6:	f018 f807 	bl	80198c8 <clear_sticky_key>
    return behavior_keymap_binding_released(&binding, event);
 80018ba:	ad0a      	add	r5, sp, #40	; 0x28
 80018bc:	ab06      	add	r3, sp, #24
 80018be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018c0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	return z_impl_behavior_keymap_binding_released(binding, event);
 80018c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80018c8:	ad12      	add	r5, sp, #72	; 0x48
 80018ca:	e905 000f 	stmdb	r5, {r0, r1, r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
 80018ce:	9803      	ldr	r0, [sp, #12]
 80018d0:	f016 f9be 	bl	8017c50 <z_impl_device_get_binding>
    const struct behavior_driver_api *api = (const struct behavior_driver_api *)dev->api;
 80018d4:	6883      	ldr	r3, [r0, #8]
    if (api->binding_released == NULL) {
 80018d6:	685d      	ldr	r5, [r3, #4]
 80018d8:	b195      	cbz	r5, 8001900 <sticky_key_keycode_state_changed_listener+0xa8>
    return api->binding_released(binding, event);
 80018da:	ab12      	add	r3, sp, #72	; 0x48
 80018dc:	e913 0003 	ldmdb	r3, {r0, r1}
 80018e0:	e88d 0003 	stmia.w	sp, {r0, r1}
 80018e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80018e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80018e8:	a803      	add	r0, sp, #12
 80018ea:	47a8      	blx	r5
            continue;
 80018ec:	e008      	b.n	8001900 <sticky_key_keycode_state_changed_listener+0xa8>
            sticky_key->modified_key_usage_page = ev->usage_page;
 80018ee:	883a      	ldrh	r2, [r7, #0]
 80018f0:	494d      	ldr	r1, [pc, #308]	; (8001a28 <sticky_key_keycode_state_changed_listener+0x1d0>)
 80018f2:	2358      	movs	r3, #88	; 0x58
 80018f4:	fb03 1304 	mla	r3, r3, r4, r1
 80018f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            sticky_key->modified_key_keycode = ev->keycode;
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	655a      	str	r2, [r3, #84]	; 0x54
    for (int i = 0; i < ZMK_BHV_STICKY_KEY_MAX_HELD; i++) {
 8001900:	3401      	adds	r4, #1
 8001902:	2c09      	cmp	r4, #9
 8001904:	f300 808b 	bgt.w	8001a1e <sticky_key_keycode_state_changed_listener+0x1c6>
        struct active_sticky_key *sticky_key = &active_sticky_keys[i];
 8001908:	4e47      	ldr	r6, [pc, #284]	; (8001a28 <sticky_key_keycode_state_changed_listener+0x1d0>)
 800190a:	2558      	movs	r5, #88	; 0x58
 800190c:	fb05 f504 	mul.w	r5, r5, r4
 8001910:	eb06 0805 	add.w	r8, r6, r5
        if (sticky_key->position == ZMK_BHV_STICKY_KEY_POSITION_FREE) {
 8001914:	5973      	ldr	r3, [r6, r5]
 8001916:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800191a:	d0f1      	beq.n	8001900 <sticky_key_keycode_state_changed_listener+0xa8>
        if (strcmp(sticky_key->config->behavior.behavior_dev, "KEY_PRESS") == 0 &&
 800191c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8001920:	4942      	ldr	r1, [pc, #264]	; (8001a2c <sticky_key_keycode_state_changed_listener+0x1d4>)
 8001922:	6858      	ldr	r0, [r3, #4]
 8001924:	f01a ff85 	bl	801c832 <strcmp>
 8001928:	b928      	cbnz	r0, 8001936 <sticky_key_keycode_state_changed_listener+0xde>
            HID_USAGE_ID(sticky_key->param1) == ev->keycode &&
 800192a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800192e:	b299      	uxth	r1, r3
 8001930:	687a      	ldr	r2, [r7, #4]
        if (strcmp(sticky_key->config->behavior.behavior_dev, "KEY_PRESS") == 0 &&
 8001932:	4291      	cmp	r1, r2
 8001934:	d09b      	beq.n	800186e <sticky_key_keycode_state_changed_listener+0x16>
        if (sticky_key->release_at != 0 && ev->timestamp > sticky_key->release_at) {
 8001936:	4a3c      	ldr	r2, [pc, #240]	; (8001a28 <sticky_key_keycode_state_changed_listener+0x1d0>)
 8001938:	2358      	movs	r3, #88	; 0x58
 800193a:	fb03 2304 	mla	r3, r3, r4, r2
 800193e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001942:	ea50 0301 	orrs.w	r3, r0, r1
 8001946:	d005      	beq.n	8001954 <sticky_key_keycode_state_changed_listener+0xfc>
 8001948:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800194c:	4290      	cmp	r0, r2
 800194e:	eb71 0303 	sbcs.w	r3, r1, r3
 8001952:	db96      	blt.n	8001882 <sticky_key_keycode_state_changed_listener+0x2a>
        if (ev->state) { // key down
 8001954:	7abb      	ldrb	r3, [r7, #10]
 8001956:	b1bb      	cbz	r3, 8001988 <sticky_key_keycode_state_changed_listener+0x130>
            if (sticky_key->modified_key_usage_page != 0 || sticky_key->modified_key_keycode != 0) {
 8001958:	4a33      	ldr	r2, [pc, #204]	; (8001a28 <sticky_key_keycode_state_changed_listener+0x1d0>)
 800195a:	2358      	movs	r3, #88	; 0x58
 800195c:	fb03 2304 	mla	r3, r3, r4, r2
 8001960:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1cb      	bne.n	8001900 <sticky_key_keycode_state_changed_listener+0xa8>
 8001968:	2358      	movs	r3, #88	; 0x58
 800196a:	fb03 2304 	mla	r3, r3, r4, r2
 800196e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1c5      	bne.n	8001900 <sticky_key_keycode_state_changed_listener+0xa8>
            if (sticky_key->timer_started) {
 8001974:	2358      	movs	r3, #88	; 0x58
 8001976:	fb03 2304 	mla	r3, r3, r4, r2
 800197a:	7c1b      	ldrb	r3, [r3, #16]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0b6      	beq.n	80018ee <sticky_key_keycode_state_changed_listener+0x96>
                stop_timer(sticky_key);
 8001980:	4640      	mov	r0, r8
 8001982:	f017 ffa5 	bl	80198d0 <stop_timer>
 8001986:	e7b2      	b.n	80018ee <sticky_key_keycode_state_changed_listener+0x96>
            if (sticky_key->timer_started &&
 8001988:	4a27      	ldr	r2, [pc, #156]	; (8001a28 <sticky_key_keycode_state_changed_listener+0x1d0>)
 800198a:	2358      	movs	r3, #88	; 0x58
 800198c:	fb03 2304 	mla	r3, r3, r4, r2
 8001990:	7c1b      	ldrb	r3, [r3, #16]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0b4      	beq.n	8001900 <sticky_key_keycode_state_changed_listener+0xa8>
                sticky_key->modified_key_usage_page == ev->usage_page &&
 8001996:	2358      	movs	r3, #88	; 0x58
 8001998:	fb03 2304 	mla	r3, r3, r4, r2
 800199c:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80019a0:	883b      	ldrh	r3, [r7, #0]
            if (sticky_key->timer_started &&
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d1ac      	bne.n	8001900 <sticky_key_keycode_state_changed_listener+0xa8>
                sticky_key->modified_key_keycode == ev->keycode) {
 80019a6:	4a20      	ldr	r2, [pc, #128]	; (8001a28 <sticky_key_keycode_state_changed_listener+0x1d0>)
 80019a8:	2358      	movs	r3, #88	; 0x58
 80019aa:	fb03 2304 	mla	r3, r3, r4, r2
 80019ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80019b0:	687b      	ldr	r3, [r7, #4]
                sticky_key->modified_key_usage_page == ev->usage_page &&
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d1a4      	bne.n	8001900 <sticky_key_keycode_state_changed_listener+0xa8>
                stop_timer(sticky_key);
 80019b6:	4640      	mov	r0, r8
 80019b8:	f017 ff8a 	bl	80198d0 <stop_timer>
                release_sticky_key_behavior(sticky_key, ev->timestamp);
 80019bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
        .behavior_dev = sticky_key->config->behavior.behavior_dev,
 80019c0:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80019c4:	6849      	ldr	r1, [r1, #4]
    struct zmk_behavior_binding binding = {
 80019c6:	9103      	str	r1, [sp, #12]
        .param1 = sticky_key->param1,
 80019c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
    struct zmk_behavior_binding binding = {
 80019cc:	9104      	str	r1, [sp, #16]
        .param2 = sticky_key->param2,
 80019ce:	f8d8 1008 	ldr.w	r1, [r8, #8]
    struct zmk_behavior_binding binding = {
 80019d2:	9105      	str	r1, [sp, #20]
    struct zmk_behavior_binding_event event = {
 80019d4:	2100      	movs	r1, #0
 80019d6:	9106      	str	r1, [sp, #24]
        .position = sticky_key->position,
 80019d8:	5971      	ldr	r1, [r6, r5]
    struct zmk_behavior_binding_event event = {
 80019da:	9107      	str	r1, [sp, #28]
 80019dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
    clear_sticky_key(sticky_key);
 80019e0:	4640      	mov	r0, r8
 80019e2:	f017 ff71 	bl	80198c8 <clear_sticky_key>
    return behavior_keymap_binding_released(&binding, event);
 80019e6:	ad0a      	add	r5, sp, #40	; 0x28
 80019e8:	ab06      	add	r3, sp, #24
 80019ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019ec:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80019f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80019f4:	ad12      	add	r5, sp, #72	; 0x48
 80019f6:	e905 000f 	stmdb	r5, {r0, r1, r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
 80019fa:	9803      	ldr	r0, [sp, #12]
 80019fc:	f016 f928 	bl	8017c50 <z_impl_device_get_binding>
    const struct behavior_driver_api *api = (const struct behavior_driver_api *)dev->api;
 8001a00:	6883      	ldr	r3, [r0, #8]
    if (api->binding_released == NULL) {
 8001a02:	685d      	ldr	r5, [r3, #4]
 8001a04:	2d00      	cmp	r5, #0
 8001a06:	f43f af7b 	beq.w	8001900 <sticky_key_keycode_state_changed_listener+0xa8>
    return api->binding_released(binding, event);
 8001a0a:	ab12      	add	r3, sp, #72	; 0x48
 8001a0c:	e913 0003 	ldmdb	r3, {r0, r1}
 8001a10:	e88d 0003 	stmia.w	sp, {r0, r1}
 8001a14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001a16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001a18:	a803      	add	r0, sp, #12
 8001a1a:	47a8      	blx	r5
 8001a1c:	e770      	b.n	8001900 <sticky_key_keycode_state_changed_listener+0xa8>
}
 8001a1e:	2000      	movs	r0, #0
 8001a20:	b012      	add	sp, #72	; 0x48
 8001a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a26:	bf00      	nop
 8001a28:	20001608 	.word	0x20001608
 8001a2c:	08023954 	.word	0x08023954

08001a30 <on_sticky_key_binding_released>:
                                          struct zmk_behavior_binding_event event) {
 8001a30:	b082      	sub	sp, #8
 8001a32:	b570      	push	{r4, r5, r6, lr}
 8001a34:	b092      	sub	sp, #72	; 0x48
 8001a36:	a916      	add	r1, sp, #88	; 0x58
 8001a38:	e881 000c 	stmia.w	r1, {r2, r3}
    struct active_sticky_key *sticky_key = find_sticky_key(event.position);
 8001a3c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001a3e:	f7ff fe27 	bl	8001690 <find_sticky_key>
    if (sticky_key == NULL) {
 8001a42:	b1f8      	cbz	r0, 8001a84 <on_sticky_key_binding_released+0x54>
 8001a44:	4606      	mov	r6, r0
    if (sticky_key->modified_key_usage_page != 0 && sticky_key->modified_key_keycode != 0) {
 8001a46:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8001a4a:	b10b      	cbz	r3, 8001a50 <on_sticky_key_binding_released+0x20>
 8001a4c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001a4e:	bb63      	cbnz	r3, 8001aaa <on_sticky_key_binding_released+0x7a>
    sticky_key->timer_started = true;
 8001a50:	2301      	movs	r3, #1
 8001a52:	7433      	strb	r3, [r6, #16]
    sticky_key->release_at = event.timestamp + sticky_key->config->release_after_ms;
 8001a54:	68f3      	ldr	r3, [r6, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
 8001a5c:	18e4      	adds	r4, r4, r3
 8001a5e:	f145 0500 	adc.w	r5, r5, #0
 8001a62:	e9c6 4506 	strd	r4, r5, [r6, #24]
 8001a66:	f020 fd19 	bl	802249c <z_impl_k_uptime_ticks>
			return t / (from_hz / to_hz);
 8001a6a:	220a      	movs	r2, #10
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f7fe fb8b 	bl	8000188 <__aeabi_uldivmod>
    int32_t ms_left = sticky_key->release_at - k_uptime_get();
 8001a72:	1a24      	subs	r4, r4, r0
    if (ms_left > 0) {
 8001a74:	2c00      	cmp	r4, #0
 8001a76:	dc59      	bgt.n	8001b2c <on_sticky_key_binding_released+0xfc>
    return ZMK_BEHAVIOR_OPAQUE;
 8001a78:	2000      	movs	r0, #0
}
 8001a7a:	b012      	add	sp, #72	; 0x48
 8001a7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001a80:	b002      	add	sp, #8
 8001a82:	4770      	bx	lr
        LOG_ERR("ACTIVE STICKY KEY CLEARED TOO EARLY");
 8001a84:	f04f 0100 	mov.w	r1, #0
 8001a88:	2301      	movs	r3, #1
 8001a8a:	f363 0102 	bfi	r1, r3, #0, #3
 8001a8e:	f36f 01c5 	bfc	r1, #3, #3
 8001a92:	4b30      	ldr	r3, [pc, #192]	; (8001b54 <on_sticky_key_binding_released+0x124>)
 8001a94:	4a30      	ldr	r2, [pc, #192]	; (8001b58 <on_sticky_key_binding_released+0x128>)
 8001a96:	1a9b      	subs	r3, r3, r2
 8001a98:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8001a9c:	f363 118f 	bfi	r1, r3, #6, #10
 8001aa0:	482e      	ldr	r0, [pc, #184]	; (8001b5c <on_sticky_key_binding_released+0x12c>)
 8001aa2:	f004 febd 	bl	8006820 <log_0>
        return ZMK_BEHAVIOR_OPAQUE;
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	e7e7      	b.n	8001a7a <on_sticky_key_binding_released+0x4a>
        LOG_DBG("Another key was pressed while the sticky key was pressed. Act like a normal key.");
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	2304      	movs	r3, #4
 8001ab0:	f363 0202 	bfi	r2, r3, #0, #3
 8001ab4:	f36f 02c5 	bfc	r2, #3, #3
 8001ab8:	4b26      	ldr	r3, [pc, #152]	; (8001b54 <on_sticky_key_binding_released+0x124>)
 8001aba:	4927      	ldr	r1, [pc, #156]	; (8001b58 <on_sticky_key_binding_released+0x128>)
 8001abc:	1a5b      	subs	r3, r3, r1
 8001abe:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8001ac2:	f363 128f 	bfi	r2, r3, #6, #10
 8001ac6:	4926      	ldr	r1, [pc, #152]	; (8001b60 <on_sticky_key_binding_released+0x130>)
 8001ac8:	4826      	ldr	r0, [pc, #152]	; (8001b64 <on_sticky_key_binding_released+0x134>)
 8001aca:	f004 fd39 	bl	8006540 <log_1>
        .behavior_dev = sticky_key->config->behavior.behavior_dev,
 8001ace:	68f3      	ldr	r3, [r6, #12]
 8001ad0:	685b      	ldr	r3, [r3, #4]
    struct zmk_behavior_binding binding = {
 8001ad2:	9303      	str	r3, [sp, #12]
        .param1 = sticky_key->param1,
 8001ad4:	6873      	ldr	r3, [r6, #4]
    struct zmk_behavior_binding binding = {
 8001ad6:	9304      	str	r3, [sp, #16]
        .param2 = sticky_key->param2,
 8001ad8:	68b3      	ldr	r3, [r6, #8]
    struct zmk_behavior_binding binding = {
 8001ada:	9305      	str	r3, [sp, #20]
    struct zmk_behavior_binding_event event = {
 8001adc:	2300      	movs	r3, #0
 8001ade:	9306      	str	r3, [sp, #24]
        .position = sticky_key->position,
 8001ae0:	6833      	ldr	r3, [r6, #0]
    struct zmk_behavior_binding_event event = {
 8001ae2:	9307      	str	r3, [sp, #28]
 8001ae4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8001ae8:	e9cd 2308 	strd	r2, r3, [sp, #32]
    clear_sticky_key(sticky_key);
 8001aec:	4630      	mov	r0, r6
 8001aee:	f017 feeb 	bl	80198c8 <clear_sticky_key>
    return behavior_keymap_binding_released(&binding, event);
 8001af2:	ac0a      	add	r4, sp, #40	; 0x28
 8001af4:	ab06      	add	r3, sp, #24
 8001af6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001af8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001afc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b00:	ac12      	add	r4, sp, #72	; 0x48
 8001b02:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
 8001b06:	9803      	ldr	r0, [sp, #12]
 8001b08:	f016 f8a2 	bl	8017c50 <z_impl_device_get_binding>
    const struct behavior_driver_api *api = (const struct behavior_driver_api *)dev->api;
 8001b0c:	6883      	ldr	r3, [r0, #8]
    if (api->binding_released == NULL) {
 8001b0e:	685c      	ldr	r4, [r3, #4]
 8001b10:	b14c      	cbz	r4, 8001b26 <on_sticky_key_binding_released+0xf6>
    return api->binding_released(binding, event);
 8001b12:	ab12      	add	r3, sp, #72	; 0x48
 8001b14:	e913 0003 	ldmdb	r3, {r0, r1}
 8001b18:	e88d 0003 	stmia.w	sp, {r0, r1}
 8001b1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001b1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001b20:	a803      	add	r0, sp, #12
 8001b22:	47a0      	blx	r4
 8001b24:	e7a9      	b.n	8001a7a <on_sticky_key_binding_released+0x4a>
        return -ENOTSUP;
 8001b26:	f06f 0022 	mvn.w	r0, #34	; 0x22
        return release_sticky_key_behavior(sticky_key, event.timestamp);
 8001b2a:	e7a6      	b.n	8001a7a <on_sticky_key_binding_released+0x4a>
        k_delayed_work_submit(&sticky_key->release_timer, K_MSEC(ms_left));
 8001b2c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8001b30:	17e1      	asrs	r1, r4, #31
			return t * (to_hz / from_hz);
 8001b32:	008d      	lsls	r5, r1, #2
 8001b34:	00a2      	lsls	r2, r4, #2
 8001b36:	ea45 7394 	orr.w	r3, r5, r4, lsr #30
 8001b3a:	1912      	adds	r2, r2, r4
 8001b3c:	eb41 0303 	adc.w	r3, r1, r3
 8001b40:	1892      	adds	r2, r2, r2
 8001b42:	415b      	adcs	r3, r3
 8001b44:	f106 0120 	add.w	r1, r6, #32
 8001b48:	4807      	ldr	r0, [pc, #28]	; (8001b68 <on_sticky_key_binding_released+0x138>)
 8001b4a:	f017 f991 	bl	8018e70 <k_delayed_work_submit_to_queue>
    return ZMK_BEHAVIOR_OPAQUE;
 8001b4e:	2000      	movs	r0, #0
 8001b50:	e793      	b.n	8001a7a <on_sticky_key_binding_released+0x4a>
 8001b52:	bf00      	nop
 8001b54:	08022c60 	.word	0x08022c60
 8001b58:	08022b90 	.word	0x08022b90
 8001b5c:	080236ac 	.word	0x080236ac
 8001b60:	08023764 	.word	0x08023764
 8001b64:	080236d0 	.word	0x080236d0
 8001b68:	20003310 	.word	0x20003310

08001b6c <mo_keymap_binding_released>:
    LOG_DBG("position %d layer %d", event.position, binding->param1);
    return zmk_keymap_layer_activate(binding->param1);
}

static int mo_keymap_binding_released(struct zmk_behavior_binding *binding,
                                      struct zmk_behavior_binding_event event) {
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	b510      	push	{r4, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	4604      	mov	r4, r0
 8001b74:	a904      	add	r1, sp, #16
 8001b76:	e881 000c 	stmia.w	r1, {r2, r3}
    LOG_DBG("position %d layer %d", event.position, binding->param1);
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	2304      	movs	r3, #4
 8001b80:	f363 0202 	bfi	r2, r3, #0, #3
 8001b84:	f36f 02c5 	bfc	r2, #3, #3
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <mo_keymap_binding_released+0x4c>)
 8001b8a:	490c      	ldr	r1, [pc, #48]	; (8001bbc <mo_keymap_binding_released+0x50>)
 8001b8c:	1a5b      	subs	r3, r3, r1
 8001b8e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8001b92:	f363 128f 	bfi	r2, r3, #6, #10
 8001b96:	f8ad 2000 	strh.w	r2, [sp]
 8001b9a:	6843      	ldr	r3, [r0, #4]
 8001b9c:	9a05      	ldr	r2, [sp, #20]
 8001b9e:	4908      	ldr	r1, [pc, #32]	; (8001bc0 <mo_keymap_binding_released+0x54>)
 8001ba0:	4808      	ldr	r0, [pc, #32]	; (8001bc4 <mo_keymap_binding_released+0x58>)
 8001ba2:	f004 fc01 	bl	80063a8 <log_3>
    return zmk_keymap_layer_deactivate(binding->param1);
 8001ba6:	7920      	ldrb	r0, [r4, #4]
 8001ba8:	f000 faae 	bl	8002108 <zmk_keymap_layer_deactivate>
}
 8001bac:	b002      	add	sp, #8
 8001bae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001bb2:	b002      	add	sp, #8
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	08022c60 	.word	0x08022c60
 8001bbc:	08022b90 	.word	0x08022b90
 8001bc0:	080237cc 	.word	0x080237cc
 8001bc4:	08023794 	.word	0x08023794

08001bc8 <mo_keymap_binding_pressed>:
                                     struct zmk_behavior_binding_event event) {
 8001bc8:	b082      	sub	sp, #8
 8001bca:	b510      	push	{r4, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	4604      	mov	r4, r0
 8001bd0:	a904      	add	r1, sp, #16
 8001bd2:	e881 000c 	stmia.w	r1, {r2, r3}
    LOG_DBG("position %d layer %d", event.position, binding->param1);
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	2304      	movs	r3, #4
 8001bdc:	f363 0202 	bfi	r2, r3, #0, #3
 8001be0:	f36f 02c5 	bfc	r2, #3, #3
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <mo_keymap_binding_pressed+0x4c>)
 8001be6:	490c      	ldr	r1, [pc, #48]	; (8001c18 <mo_keymap_binding_pressed+0x50>)
 8001be8:	1a5b      	subs	r3, r3, r1
 8001bea:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8001bee:	f363 128f 	bfi	r2, r3, #6, #10
 8001bf2:	f8ad 2000 	strh.w	r2, [sp]
 8001bf6:	6843      	ldr	r3, [r0, #4]
 8001bf8:	9a05      	ldr	r2, [sp, #20]
 8001bfa:	4908      	ldr	r1, [pc, #32]	; (8001c1c <mo_keymap_binding_pressed+0x54>)
 8001bfc:	4808      	ldr	r0, [pc, #32]	; (8001c20 <mo_keymap_binding_pressed+0x58>)
 8001bfe:	f004 fbd3 	bl	80063a8 <log_3>
    return zmk_keymap_layer_activate(binding->param1);
 8001c02:	7920      	ldrb	r0, [r4, #4]
 8001c04:	f000 fa36 	bl	8002074 <zmk_keymap_layer_activate>
}
 8001c08:	b002      	add	sp, #8
 8001c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c0e:	b002      	add	sp, #8
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	08022c60 	.word	0x08022c60
 8001c18:	08022b90 	.word	0x08022b90
 8001c1c:	080237b0 	.word	0x080237b0
 8001c20:	08023794 	.word	0x08023794

08001c24 <on_keymap_binding_pressed>:

#include <logging/log.h>
LOG_MODULE_DECLARE(zmk, CONFIG_ZMK_LOG_LEVEL);

static int on_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                     struct zmk_behavior_binding_event event) {
 8001c24:	b082      	sub	sp, #8
 8001c26:	b508      	push	{r3, lr}
 8001c28:	a902      	add	r1, sp, #8
 8001c2a:	e881 000c 	stmia.w	r1, {r2, r3}
    switch (binding->param1) {
 8001c2e:	6841      	ldr	r1, [r0, #4]
 8001c30:	2901      	cmp	r1, #1
 8001c32:	d01c      	beq.n	8001c6e <on_keymap_binding_pressed+0x4a>
 8001c34:	2902      	cmp	r1, #2
 8001c36:	d01e      	beq.n	8001c76 <on_keymap_binding_pressed+0x52>
 8001c38:	b199      	cbz	r1, 8001c62 <on_keymap_binding_pressed+0x3e>
    case OUT_USB:
        return zmk_endpoints_select(ZMK_ENDPOINT_USB);
    case OUT_BLE:
        return zmk_endpoints_select(ZMK_ENDPOINT_BLE);
    default:
        LOG_ERR("Unknown output command: %d", binding->param1);
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	2301      	movs	r3, #1
 8001c40:	f363 0202 	bfi	r2, r3, #0, #3
 8001c44:	f36f 02c5 	bfc	r2, #3, #3
 8001c48:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <on_keymap_binding_pressed+0x5c>)
 8001c4a:	480e      	ldr	r0, [pc, #56]	; (8001c84 <on_keymap_binding_pressed+0x60>)
 8001c4c:	1a1b      	subs	r3, r3, r0
 8001c4e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8001c52:	f363 128f 	bfi	r2, r3, #6, #10
 8001c56:	480c      	ldr	r0, [pc, #48]	; (8001c88 <on_keymap_binding_pressed+0x64>)
 8001c58:	f004 fc72 	bl	8006540 <log_1>
    }

    return -ENOTSUP;
 8001c5c:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8001c60:	e001      	b.n	8001c66 <on_keymap_binding_pressed+0x42>
        return zmk_endpoints_toggle();
 8001c62:	f003 f923 	bl	8004eac <zmk_endpoints_toggle>
}
 8001c66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001c6a:	b002      	add	sp, #8
 8001c6c:	4770      	bx	lr
        return zmk_endpoints_select(ZMK_ENDPOINT_USB);
 8001c6e:	2000      	movs	r0, #0
 8001c70:	f003 f8f0 	bl	8004e54 <zmk_endpoints_select>
 8001c74:	e7f7      	b.n	8001c66 <on_keymap_binding_pressed+0x42>
        return zmk_endpoints_select(ZMK_ENDPOINT_BLE);
 8001c76:	2001      	movs	r0, #1
 8001c78:	f003 f8ec 	bl	8004e54 <zmk_endpoints_select>
 8001c7c:	e7f3      	b.n	8001c66 <on_keymap_binding_pressed+0x42>
 8001c7e:	bf00      	nop
 8001c80:	08022c60 	.word	0x08022c60
 8001c84:	08022b90 	.word	0x08022b90
 8001c88:	080237f4 	.word	0x080237f4

08001c8c <tog_keymap_binding_released>:
    LOG_DBG("position %d layer %d", event.position, binding->param1);
    return zmk_keymap_layer_toggle(binding->param1);
}

static int tog_keymap_binding_released(struct zmk_behavior_binding *binding,
                                       struct zmk_behavior_binding_event event) {
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	b500      	push	{lr}
 8001c90:	b083      	sub	sp, #12
 8001c92:	a904      	add	r1, sp, #16
 8001c94:	e881 000c 	stmia.w	r1, {r2, r3}
    LOG_DBG("position %d layer %d", event.position, binding->param1);
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	2304      	movs	r3, #4
 8001c9e:	f363 0202 	bfi	r2, r3, #0, #3
 8001ca2:	f36f 02c5 	bfc	r2, #3, #3
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <tog_keymap_binding_released+0x44>)
 8001ca8:	490a      	ldr	r1, [pc, #40]	; (8001cd4 <tog_keymap_binding_released+0x48>)
 8001caa:	1a5b      	subs	r3, r3, r1
 8001cac:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8001cb0:	f363 128f 	bfi	r2, r3, #6, #10
 8001cb4:	6843      	ldr	r3, [r0, #4]
 8001cb6:	f8ad 2000 	strh.w	r2, [sp]
 8001cba:	9a05      	ldr	r2, [sp, #20]
 8001cbc:	4906      	ldr	r1, [pc, #24]	; (8001cd8 <tog_keymap_binding_released+0x4c>)
 8001cbe:	4807      	ldr	r0, [pc, #28]	; (8001cdc <tog_keymap_binding_released+0x50>)
 8001cc0:	f004 fb72 	bl	80063a8 <log_3>
    return ZMK_BEHAVIOR_OPAQUE;
}
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	b003      	add	sp, #12
 8001cc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8001ccc:	b002      	add	sp, #8
 8001cce:	4770      	bx	lr
 8001cd0:	08022c60 	.word	0x08022c60
 8001cd4:	08022b90 	.word	0x08022b90
 8001cd8:	08023850 	.word	0x08023850
 8001cdc:	08023794 	.word	0x08023794

08001ce0 <tog_keymap_binding_pressed>:
                                      struct zmk_behavior_binding_event event) {
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	b510      	push	{r4, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	4604      	mov	r4, r0
 8001ce8:	a904      	add	r1, sp, #16
 8001cea:	e881 000c 	stmia.w	r1, {r2, r3}
    LOG_DBG("position %d layer %d", event.position, binding->param1);
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	2304      	movs	r3, #4
 8001cf4:	f363 0202 	bfi	r2, r3, #0, #3
 8001cf8:	f36f 02c5 	bfc	r2, #3, #3
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <tog_keymap_binding_pressed+0x4c>)
 8001cfe:	490c      	ldr	r1, [pc, #48]	; (8001d30 <tog_keymap_binding_pressed+0x50>)
 8001d00:	1a5b      	subs	r3, r3, r1
 8001d02:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8001d06:	f363 128f 	bfi	r2, r3, #6, #10
 8001d0a:	f8ad 2000 	strh.w	r2, [sp]
 8001d0e:	6843      	ldr	r3, [r0, #4]
 8001d10:	9a05      	ldr	r2, [sp, #20]
 8001d12:	4908      	ldr	r1, [pc, #32]	; (8001d34 <tog_keymap_binding_pressed+0x54>)
 8001d14:	4808      	ldr	r0, [pc, #32]	; (8001d38 <tog_keymap_binding_pressed+0x58>)
 8001d16:	f004 fb47 	bl	80063a8 <log_3>
    return zmk_keymap_layer_toggle(binding->param1);
 8001d1a:	7920      	ldrb	r0, [r4, #4]
 8001d1c:	f017 fe5b 	bl	80199d6 <zmk_keymap_layer_toggle>
}
 8001d20:	b002      	add	sp, #8
 8001d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d26:	b002      	add	sp, #8
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	08022c60 	.word	0x08022c60
 8001d30:	08022b90 	.word	0x08022b90
 8001d34:	08023834 	.word	0x08023834
 8001d38:	08023794 	.word	0x08023794

08001d3c <to_keymap_binding_released>:
    zmk_keymap_layer_to(binding->param1);
    return ZMK_BEHAVIOR_OPAQUE;
}

static int to_keymap_binding_released(struct zmk_behavior_binding *binding,
                                      struct zmk_behavior_binding_event event) {
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	b500      	push	{lr}
 8001d40:	b083      	sub	sp, #12
 8001d42:	a904      	add	r1, sp, #16
 8001d44:	e881 000c 	stmia.w	r1, {r2, r3}
    LOG_DBG("position %d layer %d", event.position, binding->param1);
 8001d48:	f04f 0200 	mov.w	r2, #0
 8001d4c:	2304      	movs	r3, #4
 8001d4e:	f363 0202 	bfi	r2, r3, #0, #3
 8001d52:	f36f 02c5 	bfc	r2, #3, #3
 8001d56:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <to_keymap_binding_released+0x44>)
 8001d58:	490a      	ldr	r1, [pc, #40]	; (8001d84 <to_keymap_binding_released+0x48>)
 8001d5a:	1a5b      	subs	r3, r3, r1
 8001d5c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8001d60:	f363 128f 	bfi	r2, r3, #6, #10
 8001d64:	6843      	ldr	r3, [r0, #4]
 8001d66:	f8ad 2000 	strh.w	r2, [sp]
 8001d6a:	9a05      	ldr	r2, [sp, #20]
 8001d6c:	4906      	ldr	r1, [pc, #24]	; (8001d88 <to_keymap_binding_released+0x4c>)
 8001d6e:	4807      	ldr	r0, [pc, #28]	; (8001d8c <to_keymap_binding_released+0x50>)
 8001d70:	f004 fb1a 	bl	80063a8 <log_3>
    return ZMK_BEHAVIOR_OPAQUE;
}
 8001d74:	2000      	movs	r0, #0
 8001d76:	b003      	add	sp, #12
 8001d78:	f85d eb04 	ldr.w	lr, [sp], #4
 8001d7c:	b002      	add	sp, #8
 8001d7e:	4770      	bx	lr
 8001d80:	08022c60 	.word	0x08022c60
 8001d84:	08022b90 	.word	0x08022b90
 8001d88:	080238a0 	.word	0x080238a0
 8001d8c:	08023794 	.word	0x08023794

08001d90 <to_keymap_binding_pressed>:
                                     struct zmk_behavior_binding_event event) {
 8001d90:	b082      	sub	sp, #8
 8001d92:	b510      	push	{r4, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	4604      	mov	r4, r0
 8001d98:	a904      	add	r1, sp, #16
 8001d9a:	e881 000c 	stmia.w	r1, {r2, r3}
    LOG_DBG("position %d layer %d", event.position, binding->param1);
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	2304      	movs	r3, #4
 8001da4:	f363 0202 	bfi	r2, r3, #0, #3
 8001da8:	f36f 02c5 	bfc	r2, #3, #3
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <to_keymap_binding_pressed+0x4c>)
 8001dae:	490c      	ldr	r1, [pc, #48]	; (8001de0 <to_keymap_binding_pressed+0x50>)
 8001db0:	1a5b      	subs	r3, r3, r1
 8001db2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8001db6:	f363 128f 	bfi	r2, r3, #6, #10
 8001dba:	f8ad 2000 	strh.w	r2, [sp]
 8001dbe:	6843      	ldr	r3, [r0, #4]
 8001dc0:	9a05      	ldr	r2, [sp, #20]
 8001dc2:	4908      	ldr	r1, [pc, #32]	; (8001de4 <to_keymap_binding_pressed+0x54>)
 8001dc4:	4808      	ldr	r0, [pc, #32]	; (8001de8 <to_keymap_binding_pressed+0x58>)
 8001dc6:	f004 faef 	bl	80063a8 <log_3>
    zmk_keymap_layer_to(binding->param1);
 8001dca:	7920      	ldrb	r0, [r4, #4]
 8001dcc:	f017 fe10 	bl	80199f0 <zmk_keymap_layer_to>
}
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	b002      	add	sp, #8
 8001dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001dd8:	b002      	add	sp, #8
 8001dda:	4770      	bx	lr
 8001ddc:	08022c60 	.word	0x08022c60
 8001de0:	08022b90 	.word	0x08022b90
 8001de4:	08023884 	.word	0x08023884
 8001de8:	08023794 	.word	0x08023794

08001dec <on_sensor_binding_triggered>:
LOG_MODULE_DECLARE(zmk, CONFIG_ZMK_LOG_LEVEL);

static int behavior_sensor_rotate_key_press_init(const struct device *dev) { return 0; };

static int on_sensor_binding_triggered(struct zmk_behavior_binding *binding,
                                       const struct device *sensor, int64_t timestamp) {
 8001dec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001df0:	b091      	sub	sp, #68	; 0x44
 8001df2:	4605      	mov	r5, r0
 8001df4:	4688      	mov	r8, r1
 8001df6:	4617      	mov	r7, r2
 8001df8:	461e      	mov	r6, r3
    struct sensor_value value;
    int err;
    uint32_t keycode;
    LOG_DBG("inc keycode 0x%02X dec keycode 0x%02X", binding->param1, binding->param2);
 8001dfa:	f04f 0300 	mov.w	r3, #0
 8001dfe:	2204      	movs	r2, #4
 8001e00:	f362 0302 	bfi	r3, r2, #0, #3
 8001e04:	f36f 03c5 	bfc	r3, #3, #3
 8001e08:	4c58      	ldr	r4, [pc, #352]	; (8001f6c <on_sensor_binding_triggered+0x180>)
 8001e0a:	4a59      	ldr	r2, [pc, #356]	; (8001f70 <on_sensor_binding_triggered+0x184>)
 8001e0c:	1aa4      	subs	r4, r4, r2
 8001e0e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
 8001e12:	f364 138f 	bfi	r3, r4, #6, #10
 8001e16:	f8df 9168 	ldr.w	r9, [pc, #360]	; 8001f80 <on_sensor_binding_triggered+0x194>
 8001e1a:	f8ad 3000 	strh.w	r3, [sp]
 8001e1e:	6883      	ldr	r3, [r0, #8]
 8001e20:	6842      	ldr	r2, [r0, #4]
 8001e22:	4649      	mov	r1, r9
 8001e24:	4853      	ldr	r0, [pc, #332]	; (8001f74 <on_sensor_binding_triggered+0x188>)
 8001e26:	f004 fabf 	bl	80063a8 <log_3>

static inline int z_impl_sensor_channel_get(const struct device *dev,
					    enum sensor_channel chan,
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
 8001e2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	aa02      	add	r2, sp, #8
 8001e32:	2121      	movs	r1, #33	; 0x21
 8001e34:	4640      	mov	r0, r8
 8001e36:	4798      	blx	r3

    err = sensor_channel_get(sensor, SENSOR_CHAN_ROTATION, &value);

    if (err) {
 8001e38:	4680      	mov	r8, r0
 8001e3a:	bb50      	cbnz	r0, 8001e92 <on_sensor_binding_triggered+0xa6>
        LOG_WRN("Failed to ge sensor rotation value: %d", err);
        return err;
    }

    switch (value.val1) {
 8001e3c:	9b02      	ldr	r3, [sp, #8]
 8001e3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e42:	d034      	beq.n	8001eae <on_sensor_binding_triggered+0xc2>
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	f040 808e 	bne.w	8001f66 <on_sensor_binding_triggered+0x17a>
    case 1:
        keycode = binding->param1;
 8001e4a:	686c      	ldr	r4, [r5, #4]
        break;
    default:
        return -ENOTSUP;
    }

    LOG_DBG("SEND %d", keycode);
 8001e4c:	f04f 0300 	mov.w	r3, #0
 8001e50:	2204      	movs	r2, #4
 8001e52:	f362 0302 	bfi	r3, r2, #0, #3
 8001e56:	f36f 03c5 	bfc	r3, #3, #3
 8001e5a:	4a44      	ldr	r2, [pc, #272]	; (8001f6c <on_sensor_binding_triggered+0x180>)
 8001e5c:	4944      	ldr	r1, [pc, #272]	; (8001f70 <on_sensor_binding_triggered+0x184>)
 8001e5e:	1a52      	subs	r2, r2, r1
 8001e60:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8001e64:	f362 138f 	bfi	r3, r2, #6, #10
 8001e68:	4622      	mov	r2, r4
 8001e6a:	4649      	mov	r1, r9
 8001e6c:	4842      	ldr	r0, [pc, #264]	; (8001f78 <on_sensor_binding_triggered+0x18c>)
 8001e6e:	f004 fbe7 	bl	8006640 <log_2>
    uint16_t page = HID_USAGE_PAGE(encoded) & 0xFF;
 8001e72:	f3c4 4307 	ubfx	r3, r4, #16, #8
    if (!page) {
 8001e76:	f414 0f7f 	tst.w	r4, #16711680	; 0xff0000
 8001e7a:	d100      	bne.n	8001e7e <on_sensor_binding_triggered+0x92>
        page = HID_USAGE_KEY;
 8001e7c:	2307      	movs	r3, #7
    if (is_mod(page, id)) {
 8001e7e:	b2d8      	uxtb	r0, r3
 8001e80:	b2a2      	uxth	r2, r4
    return (keycode >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL &&
 8001e82:	f1a2 01e0 	sub.w	r1, r2, #224	; 0xe0
            keycode <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI && usage_page == HID_USAGE_KEY);
 8001e86:	2907      	cmp	r1, #7
 8001e88:	d813      	bhi.n	8001eb2 <on_sensor_binding_triggered+0xc6>
 8001e8a:	2807      	cmp	r0, #7
 8001e8c:	d060      	beq.n	8001f50 <on_sensor_binding_triggered+0x164>
 8001e8e:	4641      	mov	r1, r8
 8001e90:	e010      	b.n	8001eb4 <on_sensor_binding_triggered+0xc8>
        LOG_WRN("Failed to ge sensor rotation value: %d", err);
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	2302      	movs	r3, #2
 8001e98:	f363 0202 	bfi	r2, r3, #0, #3
 8001e9c:	f36f 02c5 	bfc	r2, #3, #3
 8001ea0:	f364 128f 	bfi	r2, r4, #6, #10
 8001ea4:	4601      	mov	r1, r0
 8001ea6:	4835      	ldr	r0, [pc, #212]	; (8001f7c <on_sensor_binding_triggered+0x190>)
 8001ea8:	f004 fb4a 	bl	8006540 <log_1>
        return err;
 8001eac:	e04c      	b.n	8001f48 <on_sensor_binding_triggered+0x15c>
        keycode = binding->param2;
 8001eae:	68ac      	ldr	r4, [r5, #8]
        break;
 8001eb0:	e7cc      	b.n	8001e4c <on_sensor_binding_triggered+0x60>
 8001eb2:	4641      	mov	r1, r8
 8001eb4:	f011 0f01 	tst.w	r1, #1
 8001eb8:	d04c      	beq.n	8001f54 <on_sensor_binding_triggered+0x168>
        explicit_modifiers = SELECT_MODS(encoded);
 8001eba:	0e21      	lsrs	r1, r4, #24
    uint8_t implicit_modifiers = 0x00;
 8001ebc:	2000      	movs	r0, #0
        (struct zmk_keycode_state_changed){.usage_page = page,
 8001ebe:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8001ec2:	920b      	str	r2, [sp, #44]	; 0x2c
 8001ec4:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
 8001ec8:	f88d 1031 	strb.w	r1, [sp, #49]	; 0x31
 8001ecc:	2301      	movs	r3, #1
 8001ece:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 8001ed2:	970e      	str	r7, [sp, #56]	; 0x38
 8001ed4:	960f      	str	r6, [sp, #60]	; 0x3c
    return new_zmk_keycode_state_changed(
 8001ed6:	ab10      	add	r3, sp, #64	; 0x40
 8001ed8:	e913 0003 	ldmdb	r3, {r0, r1}
 8001edc:	e88d 0003 	stmia.w	sp, {r0, r1}
 8001ee0:	ab0a      	add	r3, sp, #40	; 0x28
 8001ee2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ee4:	f7fe fe8c 	bl	8000c00 <new_zmk_keycode_state_changed>

    ZMK_EVENT_RAISE(zmk_keycode_state_changed_from_encoded(keycode, true, timestamp));
 8001ee8:	f017 fc80 	bl	80197ec <zmk_event_manager_raise>
	return z_impl_k_sleep(timeout);
 8001eec:	2032      	movs	r0, #50	; 0x32
 8001eee:	2100      	movs	r1, #0
 8001ef0:	f016 fe8c 	bl	8018c0c <z_impl_k_sleep>
    uint16_t page = HID_USAGE_PAGE(encoded) & 0xFF;
 8001ef4:	f3c4 4307 	ubfx	r3, r4, #16, #8
    if (!page) {
 8001ef8:	f414 0f7f 	tst.w	r4, #16711680	; 0xff0000
 8001efc:	d100      	bne.n	8001f00 <on_sensor_binding_triggered+0x114>
        page = HID_USAGE_KEY;
 8001efe:	2307      	movs	r3, #7
    if (is_mod(page, id)) {
 8001f00:	b2d8      	uxtb	r0, r3
 8001f02:	b2a2      	uxth	r2, r4
    return (keycode >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL &&
 8001f04:	f1a2 01e0 	sub.w	r1, r2, #224	; 0xe0
            keycode <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI && usage_page == HID_USAGE_KEY);
 8001f08:	2907      	cmp	r1, #7
 8001f0a:	d801      	bhi.n	8001f10 <on_sensor_binding_triggered+0x124>
 8001f0c:	2807      	cmp	r0, #7
 8001f0e:	d024      	beq.n	8001f5a <on_sensor_binding_triggered+0x16e>
 8001f10:	f018 0f01 	tst.w	r8, #1
 8001f14:	d024      	beq.n	8001f60 <on_sensor_binding_triggered+0x174>
        explicit_modifiers = SELECT_MODS(encoded);
 8001f16:	0e21      	lsrs	r1, r4, #24
    uint8_t implicit_modifiers = 0x00;
 8001f18:	2400      	movs	r4, #0
        (struct zmk_keycode_state_changed){.usage_page = page,
 8001f1a:	f8ad 3010 	strh.w	r3, [sp, #16]
 8001f1e:	9205      	str	r2, [sp, #20]
 8001f20:	f88d 4018 	strb.w	r4, [sp, #24]
 8001f24:	f88d 1019 	strb.w	r1, [sp, #25]
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f88d 301a 	strb.w	r3, [sp, #26]
 8001f2e:	9708      	str	r7, [sp, #32]
 8001f30:	9609      	str	r6, [sp, #36]	; 0x24
    return new_zmk_keycode_state_changed(
 8001f32:	4631      	mov	r1, r6
 8001f34:	4638      	mov	r0, r7
 8001f36:	e88d 0003 	stmia.w	sp, {r0, r1}
 8001f3a:	ab04      	add	r3, sp, #16
 8001f3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f3e:	f7fe fe5f 	bl	8000c00 <new_zmk_keycode_state_changed>

    // TODO: Better way to do this?
    k_msleep(5);

    return ZMK_EVENT_RAISE(zmk_keycode_state_changed_from_encoded(keycode, false, timestamp));
 8001f42:	f017 fc53 	bl	80197ec <zmk_event_manager_raise>
 8001f46:	4680      	mov	r8, r0
}
 8001f48:	4640      	mov	r0, r8
 8001f4a:	b011      	add	sp, #68	; 0x44
 8001f4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f50:	2101      	movs	r1, #1
 8001f52:	e7af      	b.n	8001eb4 <on_sensor_binding_triggered+0xc8>
        implicit_modifiers = SELECT_MODS(encoded);
 8001f54:	0e20      	lsrs	r0, r4, #24
    uint8_t explicit_modifiers = 0x00;
 8001f56:	2100      	movs	r1, #0
 8001f58:	e7b1      	b.n	8001ebe <on_sensor_binding_triggered+0xd2>
 8001f5a:	f04f 0801 	mov.w	r8, #1
 8001f5e:	e7d7      	b.n	8001f10 <on_sensor_binding_triggered+0x124>
        implicit_modifiers = SELECT_MODS(encoded);
 8001f60:	0e24      	lsrs	r4, r4, #24
    uint8_t explicit_modifiers = 0x00;
 8001f62:	2100      	movs	r1, #0
 8001f64:	e7d9      	b.n	8001f1a <on_sensor_binding_triggered+0x12e>
    switch (value.val1) {
 8001f66:	f06f 0822 	mvn.w	r8, #34	; 0x22
    return ZMK_EVENT_RAISE(zmk_keycode_state_changed_from_encoded(keycode, false, timestamp));
 8001f6a:	e7ed      	b.n	8001f48 <on_sensor_binding_triggered+0x15c>
 8001f6c:	08022c60 	.word	0x08022c60
 8001f70:	08022b90 	.word	0x08022b90
 8001f74:	080238f0 	.word	0x080238f0
 8001f78:	08023944 	.word	0x08023944
 8001f7c:	0802391c 	.word	0x0802391c
 8001f80:	08023960 	.word	0x08023960

08001f84 <on_keymap_binding_pressed>:

#include <logging/log.h>
LOG_MODULE_DECLARE(zmk, CONFIG_ZMK_LOG_LEVEL);

static int on_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                     struct zmk_behavior_binding_event event) {
 8001f84:	b082      	sub	sp, #8
 8001f86:	b538      	push	{r3, r4, r5, lr}
 8001f88:	4604      	mov	r4, r0
 8001f8a:	a904      	add	r1, sp, #16
 8001f8c:	e881 000c 	stmia.w	r1, {r2, r3}
 8001f90:	482f      	ldr	r0, [pc, #188]	; (8002050 <on_keymap_binding_pressed+0xcc>)
 8001f92:	f015 fe5d 	bl	8017c50 <z_impl_device_get_binding>
    const struct device *ext_power = device_get_binding("EXT_POWER");
    if (ext_power == NULL) {
 8001f96:	b1e8      	cbz	r0, 8001fd4 <on_keymap_binding_pressed+0x50>
 8001f98:	4605      	mov	r5, r0
        LOG_ERR("Unable to retrieve ext_power device: %d", binding->param1);
        return -EIO;
    }

    switch (binding->param1) {
 8001f9a:	6861      	ldr	r1, [r4, #4]
 8001f9c:	2901      	cmp	r1, #1
 8001f9e:	d033      	beq.n	8002008 <on_keymap_binding_pressed+0x84>
 8001fa0:	2902      	cmp	r1, #2
 8001fa2:	d036      	beq.n	8002012 <on_keymap_binding_pressed+0x8e>
 8001fa4:	b359      	cbz	r1, 8001ffe <on_keymap_binding_pressed+0x7a>
        if (ext_power_get(ext_power) > 0)
            return ext_power_disable(ext_power);
        else
            return ext_power_enable(ext_power);
    default:
        LOG_ERR("Unknown ext_power command: %d", binding->param1);
 8001fa6:	f04f 0200 	mov.w	r2, #0
 8001faa:	2301      	movs	r3, #1
 8001fac:	f363 0202 	bfi	r2, r3, #0, #3
 8001fb0:	f36f 02c5 	bfc	r2, #3, #3
 8001fb4:	4b27      	ldr	r3, [pc, #156]	; (8002054 <on_keymap_binding_pressed+0xd0>)
 8001fb6:	4828      	ldr	r0, [pc, #160]	; (8002058 <on_keymap_binding_pressed+0xd4>)
 8001fb8:	1a1b      	subs	r3, r3, r0
 8001fba:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8001fbe:	f363 128f 	bfi	r2, r3, #6, #10
 8001fc2:	4826      	ldr	r0, [pc, #152]	; (800205c <on_keymap_binding_pressed+0xd8>)
 8001fc4:	f004 fabc 	bl	8006540 <log_1>
    }

    return -ENOTSUP;
 8001fc8:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 8001fcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001fd0:	b002      	add	sp, #8
 8001fd2:	4770      	bx	lr
        LOG_ERR("Unable to retrieve ext_power device: %d", binding->param1);
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	2301      	movs	r3, #1
 8001fda:	f363 0202 	bfi	r2, r3, #0, #3
 8001fde:	f36f 02c5 	bfc	r2, #3, #3
 8001fe2:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <on_keymap_binding_pressed+0xd0>)
 8001fe4:	491c      	ldr	r1, [pc, #112]	; (8002058 <on_keymap_binding_pressed+0xd4>)
 8001fe6:	1a5b      	subs	r3, r3, r1
 8001fe8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8001fec:	f363 128f 	bfi	r2, r3, #6, #10
 8001ff0:	6861      	ldr	r1, [r4, #4]
 8001ff2:	481b      	ldr	r0, [pc, #108]	; (8002060 <on_keymap_binding_pressed+0xdc>)
 8001ff4:	f004 faa4 	bl	8006540 <log_1>
        return -EIO;
 8001ff8:	f06f 0004 	mvn.w	r0, #4
 8001ffc:	e7e6      	b.n	8001fcc <on_keymap_binding_pressed+0x48>
 * @retval Negative errno code if failure.
 */
__syscall int ext_power_disable(const struct device *dev);

static inline int z_impl_ext_power_disable(const struct device *dev) {
    const struct ext_power_api *api = (const struct ext_power_api *)dev->api;
 8001ffe:	6883      	ldr	r3, [r0, #8]

    if (api->disable == NULL) {
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	b1f3      	cbz	r3, 8002042 <on_keymap_binding_pressed+0xbe>
        return -ENOTSUP;
    }

    return api->disable(dev);
 8002004:	4798      	blx	r3
 8002006:	e7e1      	b.n	8001fcc <on_keymap_binding_pressed+0x48>
    const struct ext_power_api *api = (const struct ext_power_api *)dev->api;
 8002008:	6883      	ldr	r3, [r0, #8]
    if (api->enable == NULL) {
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	b1e3      	cbz	r3, 8002048 <on_keymap_binding_pressed+0xc4>
    return api->enable(dev);
 800200e:	4798      	blx	r3
 8002010:	e7dc      	b.n	8001fcc <on_keymap_binding_pressed+0x48>
 * @retval Negative errno code if failure.
 */
__syscall int ext_power_get(const struct device *dev);

static inline int z_impl_ext_power_get(const struct device *dev) {
    const struct ext_power_api *api = (const struct ext_power_api *)dev->api;
 8002012:	6883      	ldr	r3, [r0, #8]

    if (api->get == NULL) {
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	b15b      	cbz	r3, 8002030 <on_keymap_binding_pressed+0xac>
        return -ENOTSUP;
    }

    return api->get(dev);
 8002018:	4798      	blx	r3
        if (ext_power_get(ext_power) > 0)
 800201a:	2800      	cmp	r0, #0
 800201c:	dd08      	ble.n	8002030 <on_keymap_binding_pressed+0xac>
    const struct ext_power_api *api = (const struct ext_power_api *)dev->api;
 800201e:	68ab      	ldr	r3, [r5, #8]
    if (api->disable == NULL) {
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	b113      	cbz	r3, 800202a <on_keymap_binding_pressed+0xa6>
    return api->disable(dev);
 8002024:	4628      	mov	r0, r5
 8002026:	4798      	blx	r3
 8002028:	e7d0      	b.n	8001fcc <on_keymap_binding_pressed+0x48>
        return -ENOTSUP;
 800202a:	f06f 0022 	mvn.w	r0, #34	; 0x22
            return ext_power_disable(ext_power);
 800202e:	e7cd      	b.n	8001fcc <on_keymap_binding_pressed+0x48>
    const struct ext_power_api *api = (const struct ext_power_api *)dev->api;
 8002030:	68ab      	ldr	r3, [r5, #8]
    if (api->enable == NULL) {
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	b113      	cbz	r3, 800203c <on_keymap_binding_pressed+0xb8>
    return api->enable(dev);
 8002036:	4628      	mov	r0, r5
 8002038:	4798      	blx	r3
 800203a:	e7c7      	b.n	8001fcc <on_keymap_binding_pressed+0x48>
        return -ENOTSUP;
 800203c:	f06f 0022 	mvn.w	r0, #34	; 0x22
            return ext_power_enable(ext_power);
 8002040:	e7c4      	b.n	8001fcc <on_keymap_binding_pressed+0x48>
        return -ENOTSUP;
 8002042:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8002046:	e7c1      	b.n	8001fcc <on_keymap_binding_pressed+0x48>
        return -ENOTSUP;
 8002048:	f06f 0022 	mvn.w	r0, #34	; 0x22
 800204c:	e7be      	b.n	8001fcc <on_keymap_binding_pressed+0x48>
 800204e:	bf00      	nop
 8002050:	08023988 	.word	0x08023988
 8002054:	08022c60 	.word	0x08022c60
 8002058:	08022b90 	.word	0x08022b90
 800205c:	080239bc 	.word	0x080239bc
 8002060:	08023994 	.word	0x08023994

08002064 <zmk_keymap_layer_active>:
    // The default layer is assumed to be ALWAYS ACTIVE so we include an || here to ensure nobody
    // breaks up that assumption by accident
    return (state_to_test & (BIT(layer))) == (BIT(layer)) || layer == _zmk_keymap_layer_default;
};

bool zmk_keymap_layer_active(uint8_t layer) {
 8002064:	b508      	push	{r3, lr}
    return zmk_keymap_layer_active_with_state(layer, _zmk_keymap_layer_state);
 8002066:	4b02      	ldr	r3, [pc, #8]	; (8002070 <zmk_keymap_layer_active+0xc>)
 8002068:	6819      	ldr	r1, [r3, #0]
 800206a:	f017 fca9 	bl	80199c0 <zmk_keymap_layer_active_with_state>
};
 800206e:	bd08      	pop	{r3, pc}
 8002070:	2000347c 	.word	0x2000347c

08002074 <zmk_keymap_layer_activate>:
    if (layer >= ZMK_KEYMAP_LAYERS_LEN) {
 8002074:	2802      	cmp	r0, #2
 8002076:	d839      	bhi.n	80020ec <zmk_keymap_layer_activate+0x78>
        }
    }
    return zmk_keymap_layer_default();
}

int zmk_keymap_layer_activate(uint8_t layer) { return set_layer_state(layer, true); };
 8002078:	b510      	push	{r4, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	4604      	mov	r4, r0
    zmk_keymap_layers_state_t old_state = _zmk_keymap_layer_state;
 800207e:	491d      	ldr	r1, [pc, #116]	; (80020f4 <zmk_keymap_layer_activate+0x80>)
 8002080:	680a      	ldr	r2, [r1, #0]
    WRITE_BIT(_zmk_keymap_layer_state, layer, state);
 8002082:	2301      	movs	r3, #1
 8002084:	4083      	lsls	r3, r0
 8002086:	4313      	orrs	r3, r2
 8002088:	600b      	str	r3, [r1, #0]
    if (old_state != _zmk_keymap_layer_state) {
 800208a:	429a      	cmp	r2, r3
 800208c:	d102      	bne.n	8002094 <zmk_keymap_layer_activate+0x20>
    return 0;
 800208e:	2000      	movs	r0, #0
int zmk_keymap_layer_activate(uint8_t layer) { return set_layer_state(layer, true); };
 8002090:	b006      	add	sp, #24
 8002092:	bd10      	pop	{r4, pc}
        LOG_DBG("layer_changed: layer %d state %d", layer, state);
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	2304      	movs	r3, #4
 800209a:	f363 0202 	bfi	r2, r3, #0, #3
 800209e:	f36f 02c5 	bfc	r2, #3, #3
 80020a2:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <zmk_keymap_layer_activate+0x84>)
 80020a4:	4915      	ldr	r1, [pc, #84]	; (80020fc <zmk_keymap_layer_activate+0x88>)
 80020a6:	1a5b      	subs	r3, r3, r1
 80020a8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80020ac:	f363 128f 	bfi	r2, r3, #6, #10
 80020b0:	f8ad 2000 	strh.w	r2, [sp]
 80020b4:	2301      	movs	r3, #1
 80020b6:	4602      	mov	r2, r0
 80020b8:	4911      	ldr	r1, [pc, #68]	; (8002100 <zmk_keymap_layer_activate+0x8c>)
 80020ba:	4812      	ldr	r0, [pc, #72]	; (8002104 <zmk_keymap_layer_activate+0x90>)
 80020bc:	f004 f974 	bl	80063a8 <log_3>

ZMK_EVENT_DECLARE(zmk_layer_state_changed);

static inline struct zmk_layer_state_changed_event *create_layer_state_changed(uint8_t layer,
                                                                               bool state) {
    return new_zmk_layer_state_changed((struct zmk_layer_state_changed){
 80020c0:	f88d 4008 	strb.w	r4, [sp, #8]
 80020c4:	2301      	movs	r3, #1
 80020c6:	f88d 3009 	strb.w	r3, [sp, #9]
	return z_impl_k_uptime_ticks();
 80020ca:	f020 f9e7 	bl	802249c <z_impl_k_uptime_ticks>
			return t / (from_hz / to_hz);
 80020ce:	220a      	movs	r2, #10
 80020d0:	2300      	movs	r3, #0
 80020d2:	f7fe f859 	bl	8000188 <__aeabi_uldivmod>
 80020d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80020da:	ab06      	add	r3, sp, #24
 80020dc:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80020e0:	f7fe fd78 	bl	8000bd4 <new_zmk_layer_state_changed>
        ZMK_EVENT_RAISE(create_layer_state_changed(layer, state));
 80020e4:	f017 fb82 	bl	80197ec <zmk_event_manager_raise>
    return 0;
 80020e8:	2000      	movs	r0, #0
 80020ea:	e7d1      	b.n	8002090 <zmk_keymap_layer_activate+0x1c>
        return -EINVAL;
 80020ec:	f06f 0015 	mvn.w	r0, #21
int zmk_keymap_layer_activate(uint8_t layer) { return set_layer_state(layer, true); };
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	2000347c 	.word	0x2000347c
 80020f8:	08022c60 	.word	0x08022c60
 80020fc:	08022b90 	.word	0x08022b90
 8002100:	08023ae0 	.word	0x08023ae0
 8002104:	080239fc 	.word	0x080239fc

08002108 <zmk_keymap_layer_deactivate>:
    if (layer >= ZMK_KEYMAP_LAYERS_LEN) {
 8002108:	2802      	cmp	r0, #2
 800210a:	d83b      	bhi.n	8002184 <zmk_keymap_layer_deactivate+0x7c>

int zmk_keymap_layer_deactivate(uint8_t layer) { return set_layer_state(layer, false); };
 800210c:	b510      	push	{r4, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	4604      	mov	r4, r0
    if (layer == _zmk_keymap_layer_default && !state) {
 8002112:	2800      	cmp	r0, #0
 8002114:	d039      	beq.n	800218a <zmk_keymap_layer_deactivate+0x82>
    zmk_keymap_layers_state_t old_state = _zmk_keymap_layer_state;
 8002116:	491e      	ldr	r1, [pc, #120]	; (8002190 <zmk_keymap_layer_deactivate+0x88>)
 8002118:	680a      	ldr	r2, [r1, #0]
    WRITE_BIT(_zmk_keymap_layer_state, layer, state);
 800211a:	2301      	movs	r3, #1
 800211c:	4083      	lsls	r3, r0
 800211e:	ea22 0303 	bic.w	r3, r2, r3
 8002122:	600b      	str	r3, [r1, #0]
    if (old_state != _zmk_keymap_layer_state) {
 8002124:	429a      	cmp	r2, r3
 8002126:	d101      	bne.n	800212c <zmk_keymap_layer_deactivate+0x24>
    return 0;
 8002128:	2000      	movs	r0, #0
int zmk_keymap_layer_deactivate(uint8_t layer) { return set_layer_state(layer, false); };
 800212a:	e02f      	b.n	800218c <zmk_keymap_layer_deactivate+0x84>
        LOG_DBG("layer_changed: layer %d state %d", layer, state);
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	2304      	movs	r3, #4
 8002132:	f363 0202 	bfi	r2, r3, #0, #3
 8002136:	f36f 02c5 	bfc	r2, #3, #3
 800213a:	4b16      	ldr	r3, [pc, #88]	; (8002194 <zmk_keymap_layer_deactivate+0x8c>)
 800213c:	4916      	ldr	r1, [pc, #88]	; (8002198 <zmk_keymap_layer_deactivate+0x90>)
 800213e:	1a5b      	subs	r3, r3, r1
 8002140:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8002144:	f363 128f 	bfi	r2, r3, #6, #10
 8002148:	f8ad 2000 	strh.w	r2, [sp]
 800214c:	2300      	movs	r3, #0
 800214e:	4602      	mov	r2, r0
 8002150:	4912      	ldr	r1, [pc, #72]	; (800219c <zmk_keymap_layer_deactivate+0x94>)
 8002152:	4813      	ldr	r0, [pc, #76]	; (80021a0 <zmk_keymap_layer_deactivate+0x98>)
 8002154:	f004 f928 	bl	80063a8 <log_3>
 8002158:	f88d 4008 	strb.w	r4, [sp, #8]
 800215c:	2400      	movs	r4, #0
 800215e:	f88d 4009 	strb.w	r4, [sp, #9]
 8002162:	f020 f99b 	bl	802249c <z_impl_k_uptime_ticks>
 8002166:	220a      	movs	r2, #10
 8002168:	2300      	movs	r3, #0
 800216a:	f7fe f80d 	bl	8000188 <__aeabi_uldivmod>
 800216e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002172:	ab06      	add	r3, sp, #24
 8002174:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8002178:	f7fe fd2c 	bl	8000bd4 <new_zmk_layer_state_changed>
        ZMK_EVENT_RAISE(create_layer_state_changed(layer, state));
 800217c:	f017 fb36 	bl	80197ec <zmk_event_manager_raise>
    return 0;
 8002180:	4620      	mov	r0, r4
 8002182:	e003      	b.n	800218c <zmk_keymap_layer_deactivate+0x84>
        return -EINVAL;
 8002184:	f06f 0015 	mvn.w	r0, #21
int zmk_keymap_layer_deactivate(uint8_t layer) { return set_layer_state(layer, false); };
 8002188:	4770      	bx	lr
        return 0;
 800218a:	2000      	movs	r0, #0
int zmk_keymap_layer_deactivate(uint8_t layer) { return set_layer_state(layer, false); };
 800218c:	b006      	add	sp, #24
 800218e:	bd10      	pop	{r4, pc}
 8002190:	2000347c 	.word	0x2000347c
 8002194:	08022c60 	.word	0x08022c60
 8002198:	08022b90 	.word	0x08022b90
 800219c:	08023ae0 	.word	0x08023ae0
 80021a0:	080239fc 	.word	0x080239fc

080021a4 <zmk_keymap_apply_position_state>:
    }

    return zmk_keymap_layer_names[layer];
}

int zmk_keymap_apply_position_state(int layer, uint32_t position, bool pressed, int64_t timestamp) {
 80021a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021a8:	b091      	sub	sp, #68	; 0x44
 80021aa:	4605      	mov	r5, r0
 80021ac:	460c      	mov	r4, r1
 80021ae:	9202      	str	r2, [sp, #8]
    struct zmk_behavior_binding *binding = &zmk_keymap[layer][position];
 80021b0:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80022e0 <zmk_keymap_apply_position_state+0x13c>
 80021b4:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 80021b8:	ebc0 1680 	rsb	r6, r0, r0, lsl #6
 80021bc:	00f6      	lsls	r6, r6, #3
 80021be:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 80021c2:	eb08 0306 	add.w	r3, r8, r6
 80021c6:	9303      	str	r3, [sp, #12]
    const struct device *behavior;
    struct zmk_behavior_binding_event event = {
 80021c8:	900c      	str	r0, [sp, #48]	; 0x30
 80021ca:	910d      	str	r1, [sp, #52]	; 0x34
 80021cc:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80021d0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
        .layer = layer,
        .position = position,
        .timestamp = timestamp,
    };

    LOG_DBG("layer: %d position: %d, binding name: %s", layer, position,
 80021d4:	f04f 0a04 	mov.w	sl, #4
 80021d8:	f04f 0700 	mov.w	r7, #0
 80021dc:	f36a 0702 	bfi	r7, sl, #0, #3
 80021e0:	f36f 07c5 	bfc	r7, #3, #3
 80021e4:	4b39      	ldr	r3, [pc, #228]	; (80022cc <zmk_keymap_apply_position_state+0x128>)
 80021e6:	4a3a      	ldr	r2, [pc, #232]	; (80022d0 <zmk_keymap_apply_position_state+0x12c>)
 80021e8:	1a9b      	subs	r3, r3, r2
 80021ea:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80021ee:	f363 178f 	bfi	r7, r3, #6, #10
 80021f2:	4b38      	ldr	r3, [pc, #224]	; (80022d4 <zmk_keymap_apply_position_state+0x130>)
 80021f4:	9308      	str	r3, [sp, #32]
 80021f6:	9009      	str	r0, [sp, #36]	; 0x24
 80021f8:	910a      	str	r1, [sp, #40]	; 0x28
 80021fa:	f858 0006 	ldr.w	r0, [r8, r6]
 80021fe:	f003 ffcf 	bl	80061a0 <log_strdup>
 8002202:	900b      	str	r0, [sp, #44]	; 0x2c
 8002204:	463b      	mov	r3, r7
 8002206:	4652      	mov	r2, sl
 8002208:	a908      	add	r1, sp, #32
 800220a:	4833      	ldr	r0, [pc, #204]	; (80022d8 <zmk_keymap_apply_position_state+0x134>)
 800220c:	f004 fa9c 	bl	8006748 <log_n>
            log_strdup(binding->behavior_dev));

    behavior = device_get_binding(binding->behavior_dev);
 8002210:	f858 0006 	ldr.w	r0, [r8, r6]
 8002214:	f015 fd1c 	bl	8017c50 <z_impl_device_get_binding>

    if (!behavior) {
 8002218:	b1f8      	cbz	r0, 800225a <zmk_keymap_apply_position_state+0xb6>
        LOG_DBG("No behavior assigned to %d on layer %d", position, layer);
        return 1;
    }

    if (pressed) {
 800221a:	9b02      	ldr	r3, [sp, #8]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d036      	beq.n	800228e <zmk_keymap_apply_position_state+0xea>
        return behavior_keymap_binding_pressed(binding, event);
 8002220:	ac04      	add	r4, sp, #16
 8002222:	ab10      	add	r3, sp, #64	; 0x40
 8002224:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8002228:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return z_impl_behavior_keymap_binding_pressed(binding, event);
 800222c:	ad08      	add	r5, sp, #32
 800222e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002232:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
 8002236:	f858 0006 	ldr.w	r0, [r8, r6]
 800223a:	f015 fd09 	bl	8017c50 <z_impl_device_get_binding>
    const struct behavior_driver_api *api = (const struct behavior_driver_api *)dev->api;
 800223e:	6883      	ldr	r3, [r0, #8]
    if (api->binding_pressed == NULL) {
 8002240:	681c      	ldr	r4, [r3, #0]
 8002242:	b30c      	cbz	r4, 8002288 <zmk_keymap_apply_position_state+0xe4>
    return api->binding_pressed(binding, event);
 8002244:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002246:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002248:	e88d 0003 	stmia.w	sp, {r0, r1}
 800224c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800224e:	9a08      	ldr	r2, [sp, #32]
 8002250:	9803      	ldr	r0, [sp, #12]
 8002252:	47a0      	blx	r4
    } else {
        return behavior_keymap_binding_released(binding, event);
    }
}
 8002254:	b011      	add	sp, #68	; 0x44
 8002256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LOG_DBG("No behavior assigned to %d on layer %d", position, layer);
 800225a:	f04f 0200 	mov.w	r2, #0
 800225e:	f36a 0202 	bfi	r2, sl, #0, #3
 8002262:	f36f 02c5 	bfc	r2, #3, #3
 8002266:	4b19      	ldr	r3, [pc, #100]	; (80022cc <zmk_keymap_apply_position_state+0x128>)
 8002268:	4919      	ldr	r1, [pc, #100]	; (80022d0 <zmk_keymap_apply_position_state+0x12c>)
 800226a:	1a5b      	subs	r3, r3, r1
 800226c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8002270:	f363 128f 	bfi	r2, r3, #6, #10
 8002274:	f8ad 2000 	strh.w	r2, [sp]
 8002278:	462b      	mov	r3, r5
 800227a:	4622      	mov	r2, r4
 800227c:	4915      	ldr	r1, [pc, #84]	; (80022d4 <zmk_keymap_apply_position_state+0x130>)
 800227e:	4817      	ldr	r0, [pc, #92]	; (80022dc <zmk_keymap_apply_position_state+0x138>)
 8002280:	f004 f892 	bl	80063a8 <log_3>
        return 1;
 8002284:	2001      	movs	r0, #1
 8002286:	e7e5      	b.n	8002254 <zmk_keymap_apply_position_state+0xb0>
        return -ENOTSUP;
 8002288:	f06f 0022 	mvn.w	r0, #34	; 0x22
        return behavior_keymap_binding_pressed(binding, event);
 800228c:	e7e2      	b.n	8002254 <zmk_keymap_apply_position_state+0xb0>
        return behavior_keymap_binding_released(binding, event);
 800228e:	ac04      	add	r4, sp, #16
 8002290:	ab10      	add	r3, sp, #64	; 0x40
 8002292:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8002296:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return z_impl_behavior_keymap_binding_released(binding, event);
 800229a:	ad08      	add	r5, sp, #32
 800229c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022a0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
 80022a4:	f858 0006 	ldr.w	r0, [r8, r6]
 80022a8:	f015 fcd2 	bl	8017c50 <z_impl_device_get_binding>
    const struct behavior_driver_api *api = (const struct behavior_driver_api *)dev->api;
 80022ac:	6883      	ldr	r3, [r0, #8]
    if (api->binding_released == NULL) {
 80022ae:	685c      	ldr	r4, [r3, #4]
 80022b0:	b144      	cbz	r4, 80022c4 <zmk_keymap_apply_position_state+0x120>
    return api->binding_released(binding, event);
 80022b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80022b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80022b6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80022ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80022bc:	9a08      	ldr	r2, [sp, #32]
 80022be:	9803      	ldr	r0, [sp, #12]
 80022c0:	47a0      	blx	r4
 80022c2:	e7c7      	b.n	8002254 <zmk_keymap_apply_position_state+0xb0>
        return -ENOTSUP;
 80022c4:	f06f 0022 	mvn.w	r0, #34	; 0x22
 80022c8:	e7c4      	b.n	8002254 <zmk_keymap_apply_position_state+0xb0>
 80022ca:	bf00      	nop
 80022cc:	08022c60 	.word	0x08022c60
 80022d0:	08022b90 	.word	0x08022b90
 80022d4:	08023af0 	.word	0x08023af0
 80022d8:	08023a24 	.word	0x08023a24
 80022dc:	08023a54 	.word	0x08023a54
 80022e0:	200001b0 	.word	0x200001b0

080022e4 <zmk_keymap_position_state_changed>:

int zmk_keymap_position_state_changed(uint32_t position, bool pressed, int64_t timestamp) {
 80022e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	4605      	mov	r5, r0
 80022ec:	4616      	mov	r6, r2
 80022ee:	461f      	mov	r7, r3
    if (pressed) {
 80022f0:	4688      	mov	r8, r1
 80022f2:	b121      	cbz	r1, 80022fe <zmk_keymap_position_state_changed+0x1a>
        zmk_keymap_active_behavior_layer[position] = _zmk_keymap_layer_state;
 80022f4:	4b25      	ldr	r3, [pc, #148]	; (800238c <zmk_keymap_position_state_changed+0xa8>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	4b25      	ldr	r3, [pc, #148]	; (8002390 <zmk_keymap_position_state_changed+0xac>)
 80022fa:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
int zmk_keymap_position_state_changed(uint32_t position, bool pressed, int64_t timestamp) {
 80022fe:	2402      	movs	r4, #2
 8002300:	e011      	b.n	8002326 <zmk_keymap_position_state_changed+0x42>
    }
    for (int layer = ZMK_KEYMAP_LAYERS_LEN - 1; layer >= _zmk_keymap_layer_default; layer--) {
        if (zmk_keymap_layer_active_with_state(layer, zmk_keymap_active_behavior_layer[position])) {
            int ret = zmk_keymap_apply_position_state(layer, position, pressed, timestamp);
            if (ret > 0) {
                LOG_DBG("behavior processing to continue to next layer");
 8002302:	2304      	movs	r3, #4
 8002304:	f363 0902 	bfi	r9, r3, #0, #3
 8002308:	f36f 09c5 	bfc	r9, #3, #3
 800230c:	4b21      	ldr	r3, [pc, #132]	; (8002394 <zmk_keymap_position_state_changed+0xb0>)
 800230e:	4a22      	ldr	r2, [pc, #136]	; (8002398 <zmk_keymap_position_state_changed+0xb4>)
 8002310:	1a9b      	subs	r3, r3, r2
 8002312:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8002316:	f363 198f 	bfi	r9, r3, #6, #10
 800231a:	464a      	mov	r2, r9
 800231c:	491f      	ldr	r1, [pc, #124]	; (800239c <zmk_keymap_position_state_changed+0xb8>)
 800231e:	4820      	ldr	r0, [pc, #128]	; (80023a0 <zmk_keymap_position_state_changed+0xbc>)
 8002320:	f004 f90e 	bl	8006540 <log_1>
    for (int layer = ZMK_KEYMAP_LAYERS_LEN - 1; layer >= _zmk_keymap_layer_default; layer--) {
 8002324:	3c01      	subs	r4, #1
 8002326:	2c00      	cmp	r4, #0
 8002328:	db2c      	blt.n	8002384 <zmk_keymap_position_state_changed+0xa0>
        if (zmk_keymap_layer_active_with_state(layer, zmk_keymap_active_behavior_layer[position])) {
 800232a:	4919      	ldr	r1, [pc, #100]	; (8002390 <zmk_keymap_position_state_changed+0xac>)
 800232c:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
 8002330:	b2e0      	uxtb	r0, r4
 8002332:	f017 fb45 	bl	80199c0 <zmk_keymap_layer_active_with_state>
 8002336:	2800      	cmp	r0, #0
 8002338:	d0f4      	beq.n	8002324 <zmk_keymap_position_state_changed+0x40>
            int ret = zmk_keymap_apply_position_state(layer, position, pressed, timestamp);
 800233a:	9600      	str	r6, [sp, #0]
 800233c:	9701      	str	r7, [sp, #4]
 800233e:	4642      	mov	r2, r8
 8002340:	4629      	mov	r1, r5
 8002342:	4620      	mov	r0, r4
 8002344:	f7ff ff2e 	bl	80021a4 <zmk_keymap_apply_position_state>
            if (ret > 0) {
 8002348:	f1b0 0a00 	subs.w	sl, r0, #0
 800234c:	dcd9      	bgt.n	8002302 <zmk_keymap_position_state_changed+0x1e>
                continue;
            } else if (ret < 0) {
 800234e:	f1ba 0f00 	cmp.w	sl, #0
 8002352:	db03      	blt.n	800235c <zmk_keymap_position_state_changed+0x78>
            }
        }
    }

    return -ENOTSUP;
}
 8002354:	4650      	mov	r0, sl
 8002356:	b002      	add	sp, #8
 8002358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                LOG_DBG("Behavior returned error: %d", ret);
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	2204      	movs	r2, #4
 8002362:	f362 0302 	bfi	r3, r2, #0, #3
 8002366:	f36f 03c5 	bfc	r3, #3, #3
 800236a:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <zmk_keymap_position_state_changed+0xb0>)
 800236c:	490a      	ldr	r1, [pc, #40]	; (8002398 <zmk_keymap_position_state_changed+0xb4>)
 800236e:	1a52      	subs	r2, r2, r1
 8002370:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8002374:	f362 138f 	bfi	r3, r2, #6, #10
 8002378:	4652      	mov	r2, sl
 800237a:	4908      	ldr	r1, [pc, #32]	; (800239c <zmk_keymap_position_state_changed+0xb8>)
 800237c:	4809      	ldr	r0, [pc, #36]	; (80023a4 <zmk_keymap_position_state_changed+0xc0>)
 800237e:	f004 f95f 	bl	8006640 <log_2>
                return ret;
 8002382:	e7e7      	b.n	8002354 <zmk_keymap_position_state_changed+0x70>
    return -ENOTSUP;
 8002384:	f06f 0a22 	mvn.w	sl, #34	; 0x22
 8002388:	e7e4      	b.n	8002354 <zmk_keymap_position_state_changed+0x70>
 800238a:	bf00      	nop
 800238c:	2000347c 	.word	0x2000347c
 8002390:	20003480 	.word	0x20003480
 8002394:	08022c60 	.word	0x08022c60
 8002398:	08022b90 	.word	0x08022b90
 800239c:	08023b10 	.word	0x08023b10
 80023a0:	08023a80 	.word	0x08023a80
 80023a4:	08023ab4 	.word	0x08023ab4

080023a8 <on_keymap_binding_pressed>:
LOG_MODULE_DECLARE(zmk, CONFIG_ZMK_LOG_LEVEL);

#include <zmk/ble.h>

static int on_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                     struct zmk_behavior_binding_event event) {
 80023a8:	b082      	sub	sp, #8
 80023aa:	b508      	push	{r3, lr}
 80023ac:	a902      	add	r1, sp, #8
 80023ae:	e881 000c 	stmia.w	r1, {r2, r3}
    switch (binding->param1) {
 80023b2:	6841      	ldr	r1, [r0, #4]
 80023b4:	2903      	cmp	r1, #3
 80023b6:	d813      	bhi.n	80023e0 <on_keymap_binding_pressed+0x38>
 80023b8:	e8df f001 	tbb	[pc, r1]
 80023bc:	0e0b0802 	.word	0x0e0b0802
    case BT_CLR_CMD:
        return zmk_ble_clear_bonds();
 80023c0:	f000 fece 	bl	8003160 <zmk_ble_clear_bonds>
    default:
        LOG_ERR("Unknown BT command: %d", binding->param1);
    }

    return -ENOTSUP;
}
 80023c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80023c8:	b002      	add	sp, #8
 80023ca:	4770      	bx	lr
        return zmk_ble_prof_next();
 80023cc:	f000 ff58 	bl	8003280 <zmk_ble_prof_next>
 80023d0:	e7f8      	b.n	80023c4 <on_keymap_binding_pressed+0x1c>
        return zmk_ble_prof_prev();
 80023d2:	f000 ff83 	bl	80032dc <zmk_ble_prof_prev>
 80023d6:	e7f5      	b.n	80023c4 <on_keymap_binding_pressed+0x1c>
        return zmk_ble_prof_select(binding->param2);
 80023d8:	7a00      	ldrb	r0, [r0, #8]
 80023da:	f000 ff23 	bl	8003224 <zmk_ble_prof_select>
 80023de:	e7f1      	b.n	80023c4 <on_keymap_binding_pressed+0x1c>
        LOG_ERR("Unknown BT command: %d", binding->param1);
 80023e0:	f04f 0200 	mov.w	r2, #0
 80023e4:	2301      	movs	r3, #1
 80023e6:	f363 0202 	bfi	r2, r3, #0, #3
 80023ea:	f36f 02c5 	bfc	r2, #3, #3
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <on_keymap_binding_pressed+0x60>)
 80023f0:	4806      	ldr	r0, [pc, #24]	; (800240c <on_keymap_binding_pressed+0x64>)
 80023f2:	1a1b      	subs	r3, r3, r0
 80023f4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80023f8:	f363 128f 	bfi	r2, r3, #6, #10
 80023fc:	4804      	ldr	r0, [pc, #16]	; (8002410 <on_keymap_binding_pressed+0x68>)
 80023fe:	f004 f89f 	bl	8006540 <log_1>
    return -ENOTSUP;
 8002402:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8002406:	e7dd      	b.n	80023c4 <on_keymap_binding_pressed+0x1c>
 8002408:	08022c60 	.word	0x08022c60
 800240c:	08022b90 	.word	0x08022b90
 8002410:	08023b38 	.word	0x08023b38

08002414 <raise_profile_changed_event>:

static bt_addr_le_t peripheral_addr;

#endif /* IS_ENABLED(CONFIG_ZMK_SPLIT_BLE_ROLE_CENTRAL) */

static void raise_profile_changed_event() {
 8002414:	b500      	push	{lr}
 8002416:	b083      	sub	sp, #12
    ZMK_EVENT_RAISE(new_zmk_ble_active_profile_changed((struct zmk_ble_active_profile_changed){
 8002418:	4b09      	ldr	r3, [pc, #36]	; (8002440 <raise_profile_changed_event+0x2c>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	f88d 3000 	strb.w	r3, [sp]
 8002420:	4a08      	ldr	r2, [pc, #32]	; (8002444 <raise_profile_changed_event+0x30>)
 8002422:	2116      	movs	r1, #22
 8002424:	fb01 2303 	mla	r3, r1, r3, r2
 8002428:	9301      	str	r3, [sp, #4]
 800242a:	ab02      	add	r3, sp, #8
 800242c:	e913 0003 	ldmdb	r3, {r0, r1}
 8002430:	f7fe fc0c 	bl	8000c4c <new_zmk_ble_active_profile_changed>
 8002434:	f017 f9da 	bl	80197ec <zmk_event_manager_raise>
        .index = active_profile, .profile = &profiles[active_profile]}));
}
 8002438:	b003      	add	sp, #12
 800243a:	f85d fb04 	ldr.w	pc, [sp], #4
 800243e:	bf00      	nop
 8002440:	20005964 	.word	0x20005964
 8002444:	20003534 	.word	0x20003534

08002448 <ble_save_profile_work>:
};

int zmk_ble_active_profile_index() { return active_profile; }

#if IS_ENABLED(CONFIG_SETTINGS)
static void ble_save_profile_work(struct k_work *work) {
 8002448:	b508      	push	{r3, lr}
    settings_save_one("ble/active_profile", &active_profile, sizeof(active_profile));
 800244a:	2201      	movs	r2, #1
 800244c:	4902      	ldr	r1, [pc, #8]	; (8002458 <ble_save_profile_work+0x10>)
 800244e:	4803      	ldr	r0, [pc, #12]	; (800245c <ble_save_profile_work+0x14>)
 8002450:	f006 f8aa 	bl	80085a8 <settings_save_one>
}
 8002454:	bd08      	pop	{r3, pc}
 8002456:	bf00      	nop
 8002458:	20005964 	.word	0x20005964
 800245c:	08023b5c 	.word	0x08023b5c

08002460 <ble_save_profile>:

static struct k_delayed_work ble_save_work;
#endif

static int ble_save_profile() {
 8002460:	b510      	push	{r4, lr}
#if IS_ENABLED(CONFIG_SETTINGS)
    k_delayed_work_cancel(&ble_save_work);
 8002462:	4c05      	ldr	r4, [pc, #20]	; (8002478 <ble_save_profile+0x18>)
 8002464:	4620      	mov	r0, r4
 8002466:	f01f ff8b 	bl	8022380 <k_delayed_work_cancel>
 800246a:	4a04      	ldr	r2, [pc, #16]	; (800247c <ble_save_profile+0x1c>)
 800246c:	2300      	movs	r3, #0
 800246e:	4621      	mov	r1, r4
 8002470:	4803      	ldr	r0, [pc, #12]	; (8002480 <ble_save_profile+0x20>)
 8002472:	f016 fcfd 	bl	8018e70 <k_delayed_work_submit_to_queue>
    return k_delayed_work_submit(&ble_save_work, K_MSEC(CONFIG_ZMK_SETTINGS_SAVE_DEBOUNCE));
#else
    return 0;
#endif
}
 8002476:	bd10      	pop	{r4, pc}
 8002478:	20001978 	.word	0x20001978
 800247c:	000927c0 	.word	0x000927c0
 8002480:	20003310 	.word	0x20003310

08002484 <ble_profiles_handle_set>:
#endif /* IS_ENABLED(CONFIG_ZMK_SPLIT_BLE_ROLE_CENTRAL) */

#if IS_ENABLED(CONFIG_SETTINGS)

static int ble_profiles_handle_set(const char *name, size_t len, settings_read_cb read_cb,
                                   void *cb_arg) {
 8002484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002488:	b094      	sub	sp, #80	; 0x50
 800248a:	4605      	mov	r5, r0
 800248c:	460f      	mov	r7, r1
 800248e:	4690      	mov	r8, r2
 8002490:	4699      	mov	r9, r3
    const char *next;

    LOG_DBG("Setting BLE value %s", log_strdup(name));
 8002492:	f04f 0600 	mov.w	r6, #0
 8002496:	2304      	movs	r3, #4
 8002498:	f363 0602 	bfi	r6, r3, #0, #3
 800249c:	f36f 06c5 	bfc	r6, #3, #3
 80024a0:	4c9a      	ldr	r4, [pc, #616]	; (800270c <ble_profiles_handle_set+0x288>)
 80024a2:	4b9b      	ldr	r3, [pc, #620]	; (8002710 <ble_profiles_handle_set+0x28c>)
 80024a4:	1ae4      	subs	r4, r4, r3
 80024a6:	f3c4 04c9 	ubfx	r4, r4, #3, #10
 80024aa:	f364 168f 	bfi	r6, r4, #6, #10
 80024ae:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 8002764 <ble_profiles_handle_set+0x2e0>
 80024b2:	f003 fe75 	bl	80061a0 <log_strdup>
 80024b6:	4602      	mov	r2, r0
 80024b8:	4633      	mov	r3, r6
 80024ba:	4651      	mov	r1, sl
 80024bc:	4895      	ldr	r0, [pc, #596]	; (8002714 <ble_profiles_handle_set+0x290>)
 80024be:	f004 f8bf 	bl	8006640 <log_2>

    if (settings_name_steq(name, "profiles", &next) && next) {
 80024c2:	aa13      	add	r2, sp, #76	; 0x4c
 80024c4:	4994      	ldr	r1, [pc, #592]	; (8002718 <ble_profiles_handle_set+0x294>)
 80024c6:	4628      	mov	r0, r5
 80024c8:	f019 fa38 	bl	801b93c <settings_name_steq>
 80024cc:	2800      	cmp	r0, #0
 80024ce:	f000 80c6 	beq.w	800265e <ble_profiles_handle_set+0x1da>
 80024d2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80024d4:	2800      	cmp	r0, #0
 80024d6:	f000 80c2 	beq.w	800265e <ble_profiles_handle_set+0x1da>
        char *endptr;
        uint8_t idx = strtoul(next, &endptr, 10);
 80024da:	220a      	movs	r2, #10
 80024dc:	a907      	add	r1, sp, #28
 80024de:	f01a f8ef 	bl	801c6c0 <strtoul>
 80024e2:	b2c2      	uxtb	r2, r0
        if (*endptr != '\0') {
 80024e4:	9b07      	ldr	r3, [sp, #28]
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	b9db      	cbnz	r3, 8002522 <ble_profiles_handle_set+0x9e>
            LOG_WRN("Invalid profile index: %s", log_strdup(next));
            return -EINVAL;
        }

        if (len != sizeof(struct zmk_ble_profile)) {
 80024ea:	2f16      	cmp	r7, #22
 80024ec:	d132      	bne.n	8002554 <ble_profiles_handle_set+0xd0>
            LOG_ERR("Invalid profile size (got %d expected %d)", len,
                    sizeof(struct zmk_ble_profile));
            return -EINVAL;
        }

        if (idx >= PROFILE_COUNT) {
 80024ee:	2a04      	cmp	r2, #4
 80024f0:	d846      	bhi.n	8002580 <ble_profiles_handle_set+0xfc>
            LOG_WRN("Profile address for index %d is larger than max of %d", idx, PROFILE_COUNT);
            return -EINVAL;
        }

        int err = read_cb(cb_arg, &profiles[idx], sizeof(struct zmk_ble_profile));
 80024f2:	b2c5      	uxtb	r5, r0
 80024f4:	2216      	movs	r2, #22
 80024f6:	4989      	ldr	r1, [pc, #548]	; (800271c <ble_profiles_handle_set+0x298>)
 80024f8:	fb02 1105 	mla	r1, r2, r5, r1
 80024fc:	4648      	mov	r0, r9
 80024fe:	47c0      	blx	r8
        if (err <= 0) {
 8002500:	1e04      	subs	r4, r0, #0
 8002502:	dd53      	ble.n	80025ac <ble_profiles_handle_set+0x128>
            LOG_ERR("Failed to handle profile address from settings (err %d)", err);
            return err;
        }

        char addr_str[BT_ADDR_LE_STR_LEN];
        bt_addr_le_to_str(&profiles[idx].peer, addr_str, sizeof(addr_str));
 8002504:	2316      	movs	r3, #22
 8002506:	fb03 f305 	mul.w	r3, r3, r5
 800250a:	3308      	adds	r3, #8
 800250c:	4a83      	ldr	r2, [pc, #524]	; (800271c <ble_profiles_handle_set+0x298>)
 800250e:	4413      	add	r3, r2
 8002510:	1ddc      	adds	r4, r3, #7
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
 8002512:	79db      	ldrb	r3, [r3, #7]
 8002514:	2b03      	cmp	r3, #3
 8002516:	f200 809c 	bhi.w	8002652 <ble_profiles_handle_set+0x1ce>
 800251a:	e8df f003 	tbb	[pc, r3]
 800251e:	8b5a      	.short	0x8b5a
 8002520:	9590      	.short	0x9590
            LOG_WRN("Invalid profile index: %s", log_strdup(next));
 8002522:	f04f 0400 	mov.w	r4, #0
 8002526:	2302      	movs	r3, #2
 8002528:	f363 0402 	bfi	r4, r3, #0, #3
 800252c:	f36f 04c5 	bfc	r4, #3, #3
 8002530:	4b76      	ldr	r3, [pc, #472]	; (800270c <ble_profiles_handle_set+0x288>)
 8002532:	4a77      	ldr	r2, [pc, #476]	; (8002710 <ble_profiles_handle_set+0x28c>)
 8002534:	1a9b      	subs	r3, r3, r2
 8002536:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800253a:	f363 148f 	bfi	r4, r3, #6, #10
 800253e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8002540:	f003 fe2e 	bl	80061a0 <log_strdup>
 8002544:	4601      	mov	r1, r0
 8002546:	4622      	mov	r2, r4
 8002548:	4875      	ldr	r0, [pc, #468]	; (8002720 <ble_profiles_handle_set+0x29c>)
 800254a:	f003 fff9 	bl	8006540 <log_1>
            return -EINVAL;
 800254e:	f06f 0415 	mvn.w	r4, #21
 8002552:	e096      	b.n	8002682 <ble_profiles_handle_set+0x1fe>
            LOG_ERR("Invalid profile size (got %d expected %d)", len,
 8002554:	f04f 0300 	mov.w	r3, #0
 8002558:	2201      	movs	r2, #1
 800255a:	f362 0302 	bfi	r3, r2, #0, #3
 800255e:	f36f 03c5 	bfc	r3, #3, #3
 8002562:	4a6a      	ldr	r2, [pc, #424]	; (800270c <ble_profiles_handle_set+0x288>)
 8002564:	496a      	ldr	r1, [pc, #424]	; (8002710 <ble_profiles_handle_set+0x28c>)
 8002566:	1a52      	subs	r2, r2, r1
 8002568:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 800256c:	f362 138f 	bfi	r3, r2, #6, #10
 8002570:	2216      	movs	r2, #22
 8002572:	4639      	mov	r1, r7
 8002574:	486b      	ldr	r0, [pc, #428]	; (8002724 <ble_profiles_handle_set+0x2a0>)
 8002576:	f004 f863 	bl	8006640 <log_2>
            return -EINVAL;
 800257a:	f06f 0415 	mvn.w	r4, #21
 800257e:	e080      	b.n	8002682 <ble_profiles_handle_set+0x1fe>
            LOG_WRN("Profile address for index %d is larger than max of %d", idx, PROFILE_COUNT);
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	2202      	movs	r2, #2
 8002586:	f362 0302 	bfi	r3, r2, #0, #3
 800258a:	f36f 03c5 	bfc	r3, #3, #3
 800258e:	4a5f      	ldr	r2, [pc, #380]	; (800270c <ble_profiles_handle_set+0x288>)
 8002590:	495f      	ldr	r1, [pc, #380]	; (8002710 <ble_profiles_handle_set+0x28c>)
 8002592:	1a52      	subs	r2, r2, r1
 8002594:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8002598:	f362 138f 	bfi	r3, r2, #6, #10
 800259c:	2205      	movs	r2, #5
 800259e:	b2c1      	uxtb	r1, r0
 80025a0:	4861      	ldr	r0, [pc, #388]	; (8002728 <ble_profiles_handle_set+0x2a4>)
 80025a2:	f004 f84d 	bl	8006640 <log_2>
            return -EINVAL;
 80025a6:	f06f 0415 	mvn.w	r4, #21
 80025aa:	e06a      	b.n	8002682 <ble_profiles_handle_set+0x1fe>
            LOG_ERR("Failed to handle profile address from settings (err %d)", err);
 80025ac:	f04f 0200 	mov.w	r2, #0
 80025b0:	2301      	movs	r3, #1
 80025b2:	f363 0202 	bfi	r2, r3, #0, #3
 80025b6:	f36f 02c5 	bfc	r2, #3, #3
 80025ba:	4b54      	ldr	r3, [pc, #336]	; (800270c <ble_profiles_handle_set+0x288>)
 80025bc:	4954      	ldr	r1, [pc, #336]	; (8002710 <ble_profiles_handle_set+0x28c>)
 80025be:	1a5b      	subs	r3, r3, r1
 80025c0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80025c4:	f363 128f 	bfi	r2, r3, #6, #10
 80025c8:	4621      	mov	r1, r4
 80025ca:	4858      	ldr	r0, [pc, #352]	; (800272c <ble_profiles_handle_set+0x2a8>)
 80025cc:	f003 ffb8 	bl	8006540 <log_1>
            return err;
 80025d0:	e057      	b.n	8002682 <ble_profiles_handle_set+0x1fe>
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
 80025d2:	4957      	ldr	r1, [pc, #348]	; (8002730 <ble_profiles_handle_set+0x2ac>)
 80025d4:	a808      	add	r0, sp, #32
 80025d6:	f01a f8f4 	bl	801c7c2 <strcpy>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
 80025da:	7963      	ldrb	r3, [r4, #5]
 80025dc:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
 80025de:	78e1      	ldrb	r1, [r4, #3]
 80025e0:	78a0      	ldrb	r0, [r4, #2]
 80025e2:	7866      	ldrb	r6, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
 80025e4:	af08      	add	r7, sp, #32
 80025e6:	9705      	str	r7, [sp, #20]
 80025e8:	9604      	str	r6, [sp, #16]
 80025ea:	9003      	str	r0, [sp, #12]
 80025ec:	9102      	str	r1, [sp, #8]
 80025ee:	9201      	str	r2, [sp, #4]
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	79a3      	ldrb	r3, [r4, #6]
 80025f4:	4a4f      	ldr	r2, [pc, #316]	; (8002734 <ble_profiles_handle_set+0x2b0>)
 80025f6:	211e      	movs	r1, #30
 80025f8:	a80b      	add	r0, sp, #44	; 0x2c
 80025fa:	f017 fd19 	bl	801a030 <snprintk>

        LOG_DBG("Loaded %s address for profile %d", log_strdup(addr_str), idx);
 80025fe:	f04f 0400 	mov.w	r4, #0
 8002602:	2304      	movs	r3, #4
 8002604:	f363 0402 	bfi	r4, r3, #0, #3
 8002608:	f36f 04c5 	bfc	r4, #3, #3
 800260c:	4b3f      	ldr	r3, [pc, #252]	; (800270c <ble_profiles_handle_set+0x288>)
 800260e:	4a40      	ldr	r2, [pc, #256]	; (8002710 <ble_profiles_handle_set+0x28c>)
 8002610:	1a9b      	subs	r3, r3, r2
 8002612:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8002616:	f363 148f 	bfi	r4, r3, #6, #10
 800261a:	a80b      	add	r0, sp, #44	; 0x2c
 800261c:	f003 fdc0 	bl	80061a0 <log_strdup>
 8002620:	4602      	mov	r2, r0
 8002622:	f8ad 4000 	strh.w	r4, [sp]
 8002626:	462b      	mov	r3, r5
 8002628:	4651      	mov	r1, sl
 800262a:	4843      	ldr	r0, [pc, #268]	; (8002738 <ble_profiles_handle_set+0x2b4>)
 800262c:	f003 febc 	bl	80063a8 <log_3>
            return err;
        }
    }
#endif

    return 0;
 8002630:	2400      	movs	r4, #0
 8002632:	e026      	b.n	8002682 <ble_profiles_handle_set+0x1fe>
		strcpy(type, "random");
 8002634:	4941      	ldr	r1, [pc, #260]	; (800273c <ble_profiles_handle_set+0x2b8>)
 8002636:	a808      	add	r0, sp, #32
 8002638:	f01a f8c3 	bl	801c7c2 <strcpy>
		break;
 800263c:	e7cd      	b.n	80025da <ble_profiles_handle_set+0x156>
		strcpy(type, "public-id");
 800263e:	4940      	ldr	r1, [pc, #256]	; (8002740 <ble_profiles_handle_set+0x2bc>)
 8002640:	a808      	add	r0, sp, #32
 8002642:	f01a f8be 	bl	801c7c2 <strcpy>
		break;
 8002646:	e7c8      	b.n	80025da <ble_profiles_handle_set+0x156>
		strcpy(type, "random-id");
 8002648:	493e      	ldr	r1, [pc, #248]	; (8002744 <ble_profiles_handle_set+0x2c0>)
 800264a:	a808      	add	r0, sp, #32
 800264c:	f01a f8b9 	bl	801c7c2 <strcpy>
		break;
 8002650:	e7c3      	b.n	80025da <ble_profiles_handle_set+0x156>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
 8002652:	4a3d      	ldr	r2, [pc, #244]	; (8002748 <ble_profiles_handle_set+0x2c4>)
 8002654:	210a      	movs	r1, #10
 8002656:	a808      	add	r0, sp, #32
 8002658:	f017 fcea 	bl	801a030 <snprintk>
		break;
 800265c:	e7bd      	b.n	80025da <ble_profiles_handle_set+0x156>
    } else if (settings_name_steq(name, "active_profile", &next) && !next) {
 800265e:	aa13      	add	r2, sp, #76	; 0x4c
 8002660:	493a      	ldr	r1, [pc, #232]	; (800274c <ble_profiles_handle_set+0x2c8>)
 8002662:	4628      	mov	r0, r5
 8002664:	f019 f96a 	bl	801b93c <settings_name_steq>
 8002668:	b108      	cbz	r0, 800266e <ble_profiles_handle_set+0x1ea>
 800266a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800266c:	b16b      	cbz	r3, 800268a <ble_profiles_handle_set+0x206>
    else if (settings_name_steq(name, "peripheral_address", &next) && !next) {
 800266e:	aa13      	add	r2, sp, #76	; 0x4c
 8002670:	4937      	ldr	r1, [pc, #220]	; (8002750 <ble_profiles_handle_set+0x2cc>)
 8002672:	4628      	mov	r0, r5
 8002674:	f019 f962 	bl	801b93c <settings_name_steq>
 8002678:	4604      	mov	r4, r0
 800267a:	b110      	cbz	r0, 8002682 <ble_profiles_handle_set+0x1fe>
 800267c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800267e:	b30b      	cbz	r3, 80026c4 <ble_profiles_handle_set+0x240>
    return 0;
 8002680:	2400      	movs	r4, #0
};
 8002682:	4620      	mov	r0, r4
 8002684:	b014      	add	sp, #80	; 0x50
 8002686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (len != sizeof(active_profile)) {
 800268a:	2f01      	cmp	r7, #1
 800268c:	d137      	bne.n	80026fe <ble_profiles_handle_set+0x27a>
        int err = read_cb(cb_arg, &active_profile, sizeof(active_profile));
 800268e:	2201      	movs	r2, #1
 8002690:	4930      	ldr	r1, [pc, #192]	; (8002754 <ble_profiles_handle_set+0x2d0>)
 8002692:	4648      	mov	r0, r9
 8002694:	47c0      	blx	r8
        if (err <= 0) {
 8002696:	1e04      	subs	r4, r0, #0
 8002698:	dd01      	ble.n	800269e <ble_profiles_handle_set+0x21a>
    return 0;
 800269a:	2400      	movs	r4, #0
 800269c:	e7f1      	b.n	8002682 <ble_profiles_handle_set+0x1fe>
            LOG_ERR("Failed to handle active profile from settings (err %d)", err);
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	2301      	movs	r3, #1
 80026a4:	f363 0202 	bfi	r2, r3, #0, #3
 80026a8:	f36f 02c5 	bfc	r2, #3, #3
 80026ac:	4b17      	ldr	r3, [pc, #92]	; (800270c <ble_profiles_handle_set+0x288>)
 80026ae:	4918      	ldr	r1, [pc, #96]	; (8002710 <ble_profiles_handle_set+0x28c>)
 80026b0:	1a5b      	subs	r3, r3, r1
 80026b2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80026b6:	f363 128f 	bfi	r2, r3, #6, #10
 80026ba:	4621      	mov	r1, r4
 80026bc:	4826      	ldr	r0, [pc, #152]	; (8002758 <ble_profiles_handle_set+0x2d4>)
 80026be:	f003 ff3f 	bl	8006540 <log_1>
            return err;
 80026c2:	e7de      	b.n	8002682 <ble_profiles_handle_set+0x1fe>
        if (len != sizeof(bt_addr_le_t)) {
 80026c4:	2f07      	cmp	r7, #7
 80026c6:	d11d      	bne.n	8002704 <ble_profiles_handle_set+0x280>
        int err = read_cb(cb_arg, &peripheral_addr, sizeof(bt_addr_le_t));
 80026c8:	2207      	movs	r2, #7
 80026ca:	4924      	ldr	r1, [pc, #144]	; (800275c <ble_profiles_handle_set+0x2d8>)
 80026cc:	4648      	mov	r0, r9
 80026ce:	47c0      	blx	r8
        if (err <= 0) {
 80026d0:	1e04      	subs	r4, r0, #0
 80026d2:	dd01      	ble.n	80026d8 <ble_profiles_handle_set+0x254>
    return 0;
 80026d4:	2400      	movs	r4, #0
 80026d6:	e7d4      	b.n	8002682 <ble_profiles_handle_set+0x1fe>
            LOG_ERR("Failed to handle peripheral address from settings (err %d)", err);
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	2301      	movs	r3, #1
 80026de:	f363 0202 	bfi	r2, r3, #0, #3
 80026e2:	f36f 02c5 	bfc	r2, #3, #3
 80026e6:	4b09      	ldr	r3, [pc, #36]	; (800270c <ble_profiles_handle_set+0x288>)
 80026e8:	4909      	ldr	r1, [pc, #36]	; (8002710 <ble_profiles_handle_set+0x28c>)
 80026ea:	1a5b      	subs	r3, r3, r1
 80026ec:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80026f0:	f363 128f 	bfi	r2, r3, #6, #10
 80026f4:	4621      	mov	r1, r4
 80026f6:	481a      	ldr	r0, [pc, #104]	; (8002760 <ble_profiles_handle_set+0x2dc>)
 80026f8:	f003 ff22 	bl	8006540 <log_1>
            return err;
 80026fc:	e7c1      	b.n	8002682 <ble_profiles_handle_set+0x1fe>
            return -EINVAL;
 80026fe:	f06f 0415 	mvn.w	r4, #21
 8002702:	e7be      	b.n	8002682 <ble_profiles_handle_set+0x1fe>
            return -EINVAL;
 8002704:	f06f 0415 	mvn.w	r4, #21
 8002708:	e7bb      	b.n	8002682 <ble_profiles_handle_set+0x1fe>
 800270a:	bf00      	nop
 800270c:	08022c60 	.word	0x08022c60
 8002710:	08022b90 	.word	0x08022b90
 8002714:	08023b70 	.word	0x08023b70
 8002718:	08023b8c 	.word	0x08023b8c
 800271c:	20003534 	.word	0x20003534
 8002720:	08023b98 	.word	0x08023b98
 8002724:	08023bb4 	.word	0x08023bb4
 8002728:	08023be0 	.word	0x08023be0
 800272c:	08023c18 	.word	0x08023c18
 8002730:	08023c50 	.word	0x08023c50
 8002734:	08023c78 	.word	0x08023c78
 8002738:	08023c9c 	.word	0x08023c9c
 800273c:	08023c58 	.word	0x08023c58
 8002740:	08023c60 	.word	0x08023c60
 8002744:	08023c6c 	.word	0x08023c6c
 8002748:	08027b48 	.word	0x08027b48
 800274c:	08023b60 	.word	0x08023b60
 8002750:	08024158 	.word	0x08024158
 8002754:	20005964 	.word	0x20005964
 8002758:	08023cc4 	.word	0x08023cc4
 800275c:	2000352c 	.word	0x2000352c
 8002760:	08023cfc 	.word	0x08023cfc
 8002764:	080241ec 	.word	0x080241ec

08002768 <is_conn_active_profile>:

struct settings_handler profiles_handler = {.name = "ble", .h_set = ble_profiles_handle_set};
#endif /* IS_ENABLED(CONFIG_SETTINGS) */

static bool is_conn_active_profile(const struct bt_conn *conn) {
 8002768:	b508      	push	{r3, lr}
    return bt_addr_le_cmp(bt_conn_get_dst(conn), &profiles[active_profile].peer) == 0;
 800276a:	f01b f807 	bl	801d77c <bt_conn_get_dst>
 800276e:	4b08      	ldr	r3, [pc, #32]	; (8002790 <is_conn_active_profile+0x28>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2116      	movs	r1, #22
 8002774:	fb01 f103 	mul.w	r1, r1, r3
 8002778:	3108      	adds	r1, #8
 800277a:	4b06      	ldr	r3, [pc, #24]	; (8002794 <is_conn_active_profile+0x2c>)
 800277c:	4419      	add	r1, r3
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
 800277e:	2207      	movs	r2, #7
 8002780:	4411      	add	r1, r2
 8002782:	f01a f87c 	bl	801c87e <memcmp>
}
 8002786:	fab0 f080 	clz	r0, r0
 800278a:	0940      	lsrs	r0, r0, #5
 800278c:	bd08      	pop	{r3, pc}
 800278e:	bf00      	nop
 8002790:	20005964 	.word	0x20005964
 8002794:	20003534 	.word	0x20003534

08002798 <le_param_updated>:
        LOG_ERR("Security failed: %s level %u err %d", log_strdup(addr), level, err);
    }
}

static void le_param_updated(struct bt_conn *conn, uint16_t interval, uint16_t latency,
                             uint16_t timeout) {
 8002798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800279c:	b094      	sub	sp, #80	; 0x50
 800279e:	460f      	mov	r7, r1
 80027a0:	4616      	mov	r6, r2
 80027a2:	461d      	mov	r5, r3
    char addr[BT_ADDR_LE_STR_LEN];

    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
 80027a4:	f01a ffea 	bl	801d77c <bt_conn_get_dst>
 80027a8:	4604      	mov	r4, r0
	switch (addr->type) {
 80027aa:	7803      	ldrb	r3, [r0, #0]
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d84b      	bhi.n	8002848 <le_param_updated+0xb0>
 80027b0:	e8df f003 	tbb	[pc, r3]
 80027b4:	45403b02 	.word	0x45403b02
		strcpy(type, "public");
 80027b8:	4926      	ldr	r1, [pc, #152]	; (8002854 <le_param_updated+0xbc>)
 80027ba:	a807      	add	r0, sp, #28
 80027bc:	f01a f801 	bl	801c7c2 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
 80027c0:	79a3      	ldrb	r3, [r4, #6]
 80027c2:	7962      	ldrb	r2, [r4, #5]
 80027c4:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
 80027c6:	78e0      	ldrb	r0, [r4, #3]
 80027c8:	f894 c002 	ldrb.w	ip, [r4, #2]
 80027cc:	f894 e001 	ldrb.w	lr, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
 80027d0:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80027d4:	ac07      	add	r4, sp, #28
 80027d6:	9405      	str	r4, [sp, #20]
 80027d8:	f8cd e010 	str.w	lr, [sp, #16]
 80027dc:	f8cd c00c 	str.w	ip, [sp, #12]
 80027e0:	9002      	str	r0, [sp, #8]
 80027e2:	9101      	str	r1, [sp, #4]
 80027e4:	9200      	str	r2, [sp, #0]
 80027e6:	4a1c      	ldr	r2, [pc, #112]	; (8002858 <le_param_updated+0xc0>)
 80027e8:	211e      	movs	r1, #30
 80027ea:	4640      	mov	r0, r8
 80027ec:	f017 fc20 	bl	801a030 <snprintk>

    LOG_DBG("%s: interval %d latency %d timeout %d", addr, interval, latency, timeout);
 80027f0:	f04f 0300 	mov.w	r3, #0
 80027f4:	2204      	movs	r2, #4
 80027f6:	f362 0302 	bfi	r3, r2, #0, #3
 80027fa:	f36f 03c5 	bfc	r3, #3, #3
 80027fe:	4817      	ldr	r0, [pc, #92]	; (800285c <le_param_updated+0xc4>)
 8002800:	4a17      	ldr	r2, [pc, #92]	; (8002860 <le_param_updated+0xc8>)
 8002802:	1a80      	subs	r0, r0, r2
 8002804:	f3c0 00c9 	ubfx	r0, r0, #3, #10
 8002808:	f360 138f 	bfi	r3, r0, #6, #10
 800280c:	4a15      	ldr	r2, [pc, #84]	; (8002864 <le_param_updated+0xcc>)
 800280e:	9207      	str	r2, [sp, #28]
 8002810:	f8cd 8020 	str.w	r8, [sp, #32]
 8002814:	9709      	str	r7, [sp, #36]	; 0x24
 8002816:	960a      	str	r6, [sp, #40]	; 0x28
 8002818:	950b      	str	r5, [sp, #44]	; 0x2c
 800281a:	2205      	movs	r2, #5
 800281c:	4621      	mov	r1, r4
 800281e:	4812      	ldr	r0, [pc, #72]	; (8002868 <le_param_updated+0xd0>)
 8002820:	f003 ff92 	bl	8006748 <log_n>
}
 8002824:	b014      	add	sp, #80	; 0x50
 8002826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		strcpy(type, "random");
 800282a:	4910      	ldr	r1, [pc, #64]	; (800286c <le_param_updated+0xd4>)
 800282c:	a807      	add	r0, sp, #28
 800282e:	f019 ffc8 	bl	801c7c2 <strcpy>
		break;
 8002832:	e7c5      	b.n	80027c0 <le_param_updated+0x28>
		strcpy(type, "public-id");
 8002834:	490e      	ldr	r1, [pc, #56]	; (8002870 <le_param_updated+0xd8>)
 8002836:	a807      	add	r0, sp, #28
 8002838:	f019 ffc3 	bl	801c7c2 <strcpy>
		break;
 800283c:	e7c0      	b.n	80027c0 <le_param_updated+0x28>
		strcpy(type, "random-id");
 800283e:	490d      	ldr	r1, [pc, #52]	; (8002874 <le_param_updated+0xdc>)
 8002840:	a807      	add	r0, sp, #28
 8002842:	f019 ffbe 	bl	801c7c2 <strcpy>
		break;
 8002846:	e7bb      	b.n	80027c0 <le_param_updated+0x28>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
 8002848:	4a0b      	ldr	r2, [pc, #44]	; (8002878 <le_param_updated+0xe0>)
 800284a:	210a      	movs	r1, #10
 800284c:	a807      	add	r0, sp, #28
 800284e:	f017 fbef 	bl	801a030 <snprintk>
		break;
 8002852:	e7b5      	b.n	80027c0 <le_param_updated+0x28>
 8002854:	08023c50 	.word	0x08023c50
 8002858:	08023c78 	.word	0x08023c78
 800285c:	08022c60 	.word	0x08022c60
 8002860:	08022b90 	.word	0x08022b90
 8002864:	08024234 	.word	0x08024234
 8002868:	08023d38 	.word	0x08023d38
 800286c:	08023c58 	.word	0x08023c58
 8002870:	08023c60 	.word	0x08023c60
 8002874:	08023c6c 	.word	0x08023c6c
 8002878:	08027b48 	.word	0x08027b48

0800287c <auth_cancel>:
    auth_passkey_entry_conn = bt_conn_ref(conn);
}

#endif

static void auth_cancel(struct bt_conn *conn) {
 800287c:	b570      	push	{r4, r5, r6, lr}
 800287e:	b092      	sub	sp, #72	; 0x48
    char addr[BT_ADDR_LE_STR_LEN];

    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
 8002880:	f01a ff7c 	bl	801d77c <bt_conn_get_dst>
 8002884:	4604      	mov	r4, r0
	switch (addr->type) {
 8002886:	7803      	ldrb	r3, [r0, #0]
 8002888:	2b03      	cmp	r3, #3
 800288a:	d84c      	bhi.n	8002926 <auth_cancel+0xaa>
 800288c:	e8df f003 	tbb	[pc, r3]
 8002890:	46413c02 	.word	0x46413c02
		strcpy(type, "public");
 8002894:	4927      	ldr	r1, [pc, #156]	; (8002934 <auth_cancel+0xb8>)
 8002896:	a807      	add	r0, sp, #28
 8002898:	f019 ff93 	bl	801c7c2 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
 800289c:	79a3      	ldrb	r3, [r4, #6]
 800289e:	7962      	ldrb	r2, [r4, #5]
 80028a0:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
 80028a2:	78e0      	ldrb	r0, [r4, #3]
 80028a4:	78a5      	ldrb	r5, [r4, #2]
 80028a6:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
 80028a8:	ae07      	add	r6, sp, #28
 80028aa:	9605      	str	r6, [sp, #20]
 80028ac:	9404      	str	r4, [sp, #16]
 80028ae:	9503      	str	r5, [sp, #12]
 80028b0:	9002      	str	r0, [sp, #8]
 80028b2:	9101      	str	r1, [sp, #4]
 80028b4:	9200      	str	r2, [sp, #0]
 80028b6:	4a20      	ldr	r2, [pc, #128]	; (8002938 <auth_cancel+0xbc>)
 80028b8:	211e      	movs	r1, #30
 80028ba:	a80a      	add	r0, sp, #40	; 0x28
 80028bc:	f017 fbb8 	bl	801a030 <snprintk>

    if (auth_passkey_entry_conn) {
 80028c0:	4b1e      	ldr	r3, [pc, #120]	; (800293c <auth_cancel+0xc0>)
 80028c2:	6818      	ldr	r0, [r3, #0]
 80028c4:	b120      	cbz	r0, 80028d0 <auth_cancel+0x54>
        bt_conn_unref(auth_passkey_entry_conn);
 80028c6:	f01a ff33 	bl	801d730 <bt_conn_unref>
        auth_passkey_entry_conn = NULL;
 80028ca:	4b1c      	ldr	r3, [pc, #112]	; (800293c <auth_cancel+0xc0>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
    }

    passkey_digit = 0;
 80028d0:	2300      	movs	r3, #0
 80028d2:	4a1b      	ldr	r2, [pc, #108]	; (8002940 <auth_cancel+0xc4>)
 80028d4:	7013      	strb	r3, [r2, #0]

    LOG_DBG("Pairing cancelled: %s", log_strdup(addr));
 80028d6:	f04f 0400 	mov.w	r4, #0
 80028da:	2204      	movs	r2, #4
 80028dc:	f362 0402 	bfi	r4, r2, #0, #3
 80028e0:	f363 04c5 	bfi	r4, r3, #3, #3
 80028e4:	4b17      	ldr	r3, [pc, #92]	; (8002944 <auth_cancel+0xc8>)
 80028e6:	4a18      	ldr	r2, [pc, #96]	; (8002948 <auth_cancel+0xcc>)
 80028e8:	1a9b      	subs	r3, r3, r2
 80028ea:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80028ee:	f363 148f 	bfi	r4, r3, #6, #10
 80028f2:	a80a      	add	r0, sp, #40	; 0x28
 80028f4:	f003 fc54 	bl	80061a0 <log_strdup>
 80028f8:	4602      	mov	r2, r0
 80028fa:	4623      	mov	r3, r4
 80028fc:	4913      	ldr	r1, [pc, #76]	; (800294c <auth_cancel+0xd0>)
 80028fe:	4814      	ldr	r0, [pc, #80]	; (8002950 <auth_cancel+0xd4>)
 8002900:	f003 fe9e 	bl	8006640 <log_2>
}
 8002904:	b012      	add	sp, #72	; 0x48
 8002906:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
 8002908:	4912      	ldr	r1, [pc, #72]	; (8002954 <auth_cancel+0xd8>)
 800290a:	a807      	add	r0, sp, #28
 800290c:	f019 ff59 	bl	801c7c2 <strcpy>
		break;
 8002910:	e7c4      	b.n	800289c <auth_cancel+0x20>
		strcpy(type, "public-id");
 8002912:	4911      	ldr	r1, [pc, #68]	; (8002958 <auth_cancel+0xdc>)
 8002914:	a807      	add	r0, sp, #28
 8002916:	f019 ff54 	bl	801c7c2 <strcpy>
		break;
 800291a:	e7bf      	b.n	800289c <auth_cancel+0x20>
		strcpy(type, "random-id");
 800291c:	490f      	ldr	r1, [pc, #60]	; (800295c <auth_cancel+0xe0>)
 800291e:	a807      	add	r0, sp, #28
 8002920:	f019 ff4f 	bl	801c7c2 <strcpy>
		break;
 8002924:	e7ba      	b.n	800289c <auth_cancel+0x20>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
 8002926:	4a0e      	ldr	r2, [pc, #56]	; (8002960 <auth_cancel+0xe4>)
 8002928:	210a      	movs	r1, #10
 800292a:	a807      	add	r0, sp, #28
 800292c:	f017 fb80 	bl	801a030 <snprintk>
		break;
 8002930:	e7b4      	b.n	800289c <auth_cancel+0x20>
 8002932:	bf00      	nop
 8002934:	08023c50 	.word	0x08023c50
 8002938:	08023c78 	.word	0x08023c78
 800293c:	20003528 	.word	0x20003528
 8002940:	20005966 	.word	0x20005966
 8002944:	08022c60 	.word	0x08022c60
 8002948:	08022b90 	.word	0x08022b90
 800294c:	08024248 	.word	0x08024248
 8002950:	08023d64 	.word	0x08023d64
 8002954:	08023c58 	.word	0x08023c58
 8002958:	08023c60 	.word	0x08023c60
 800295c:	08023c6c 	.word	0x08023c6c
 8002960:	08027b48 	.word	0x08027b48

08002964 <security_changed>:
static void security_changed(struct bt_conn *conn, bt_security_t level, enum bt_security_err err) {
 8002964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002966:	b093      	sub	sp, #76	; 0x4c
 8002968:	460e      	mov	r6, r1
 800296a:	4615      	mov	r5, r2
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
 800296c:	f01a ff06 	bl	801d77c <bt_conn_get_dst>
 8002970:	4604      	mov	r4, r0
	switch (addr->type) {
 8002972:	7803      	ldrb	r3, [r0, #0]
 8002974:	2b03      	cmp	r3, #3
 8002976:	d846      	bhi.n	8002a06 <security_changed+0xa2>
 8002978:	e8df f003 	tbb	[pc, r3]
 800297c:	403b3602 	.word	0x403b3602
		strcpy(type, "public");
 8002980:	4931      	ldr	r1, [pc, #196]	; (8002a48 <security_changed+0xe4>)
 8002982:	a807      	add	r0, sp, #28
 8002984:	f019 ff1d 	bl	801c7c2 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
 8002988:	79a3      	ldrb	r3, [r4, #6]
 800298a:	7962      	ldrb	r2, [r4, #5]
 800298c:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
 800298e:	78e0      	ldrb	r0, [r4, #3]
 8002990:	78a7      	ldrb	r7, [r4, #2]
 8002992:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
 8002994:	f10d 0c1c 	add.w	ip, sp, #28
 8002998:	f8cd c014 	str.w	ip, [sp, #20]
 800299c:	9404      	str	r4, [sp, #16]
 800299e:	9703      	str	r7, [sp, #12]
 80029a0:	9002      	str	r0, [sp, #8]
 80029a2:	9101      	str	r1, [sp, #4]
 80029a4:	9200      	str	r2, [sp, #0]
 80029a6:	4a29      	ldr	r2, [pc, #164]	; (8002a4c <security_changed+0xe8>)
 80029a8:	211e      	movs	r1, #30
 80029aa:	a80a      	add	r0, sp, #40	; 0x28
 80029ac:	f017 fb40 	bl	801a030 <snprintk>
    if (!err) {
 80029b0:	bb7d      	cbnz	r5, 8002a12 <security_changed+0xae>
        LOG_DBG("Security changed: %s level %u", log_strdup(addr), level);
 80029b2:	f04f 0400 	mov.w	r4, #0
 80029b6:	2304      	movs	r3, #4
 80029b8:	f363 0402 	bfi	r4, r3, #0, #3
 80029bc:	f36f 04c5 	bfc	r4, #3, #3
 80029c0:	4b23      	ldr	r3, [pc, #140]	; (8002a50 <security_changed+0xec>)
 80029c2:	4a24      	ldr	r2, [pc, #144]	; (8002a54 <security_changed+0xf0>)
 80029c4:	1a9b      	subs	r3, r3, r2
 80029c6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80029ca:	f363 148f 	bfi	r4, r3, #6, #10
 80029ce:	a80a      	add	r0, sp, #40	; 0x28
 80029d0:	f003 fbe6 	bl	80061a0 <log_strdup>
 80029d4:	4602      	mov	r2, r0
 80029d6:	f8ad 4000 	strh.w	r4, [sp]
 80029da:	4633      	mov	r3, r6
 80029dc:	491e      	ldr	r1, [pc, #120]	; (8002a58 <security_changed+0xf4>)
 80029de:	481f      	ldr	r0, [pc, #124]	; (8002a5c <security_changed+0xf8>)
 80029e0:	f003 fce2 	bl	80063a8 <log_3>
}
 80029e4:	b013      	add	sp, #76	; 0x4c
 80029e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
 80029e8:	491d      	ldr	r1, [pc, #116]	; (8002a60 <security_changed+0xfc>)
 80029ea:	a807      	add	r0, sp, #28
 80029ec:	f019 fee9 	bl	801c7c2 <strcpy>
		break;
 80029f0:	e7ca      	b.n	8002988 <security_changed+0x24>
		strcpy(type, "public-id");
 80029f2:	491c      	ldr	r1, [pc, #112]	; (8002a64 <security_changed+0x100>)
 80029f4:	a807      	add	r0, sp, #28
 80029f6:	f019 fee4 	bl	801c7c2 <strcpy>
		break;
 80029fa:	e7c5      	b.n	8002988 <security_changed+0x24>
		strcpy(type, "random-id");
 80029fc:	491a      	ldr	r1, [pc, #104]	; (8002a68 <security_changed+0x104>)
 80029fe:	a807      	add	r0, sp, #28
 8002a00:	f019 fedf 	bl	801c7c2 <strcpy>
		break;
 8002a04:	e7c0      	b.n	8002988 <security_changed+0x24>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
 8002a06:	4a19      	ldr	r2, [pc, #100]	; (8002a6c <security_changed+0x108>)
 8002a08:	210a      	movs	r1, #10
 8002a0a:	a807      	add	r0, sp, #28
 8002a0c:	f017 fb10 	bl	801a030 <snprintk>
		break;
 8002a10:	e7ba      	b.n	8002988 <security_changed+0x24>
        LOG_ERR("Security failed: %s level %u err %d", log_strdup(addr), level, err);
 8002a12:	f04f 0400 	mov.w	r4, #0
 8002a16:	2301      	movs	r3, #1
 8002a18:	f363 0402 	bfi	r4, r3, #0, #3
 8002a1c:	f36f 04c5 	bfc	r4, #3, #3
 8002a20:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <security_changed+0xec>)
 8002a22:	4a0c      	ldr	r2, [pc, #48]	; (8002a54 <security_changed+0xf0>)
 8002a24:	1a9b      	subs	r3, r3, r2
 8002a26:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8002a2a:	f363 148f 	bfi	r4, r3, #6, #10
 8002a2e:	a80a      	add	r0, sp, #40	; 0x28
 8002a30:	f003 fbb6 	bl	80061a0 <log_strdup>
 8002a34:	4601      	mov	r1, r0
 8002a36:	f8ad 4000 	strh.w	r4, [sp]
 8002a3a:	462b      	mov	r3, r5
 8002a3c:	4632      	mov	r2, r6
 8002a3e:	480c      	ldr	r0, [pc, #48]	; (8002a70 <security_changed+0x10c>)
 8002a40:	f003 fcb2 	bl	80063a8 <log_3>
}
 8002a44:	e7ce      	b.n	80029e4 <security_changed+0x80>
 8002a46:	bf00      	nop
 8002a48:	08023c50 	.word	0x08023c50
 8002a4c:	08023c78 	.word	0x08023c78
 8002a50:	08022c60 	.word	0x08022c60
 8002a54:	08022b90 	.word	0x08022b90
 8002a58:	08024220 	.word	0x08024220
 8002a5c:	08023d80 	.word	0x08023d80
 8002a60:	08023c58 	.word	0x08023c58
 8002a64:	08023c60 	.word	0x08023c60
 8002a68:	08023c6c 	.word	0x08023c6c
 8002a6c:	08027b48 	.word	0x08027b48
 8002a70:	08023da4 	.word	0x08023da4

08002a74 <disconnected>:
static void disconnected(struct bt_conn *conn, uint8_t reason) {
 8002a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a76:	b093      	sub	sp, #76	; 0x4c
 8002a78:	4605      	mov	r5, r0
 8002a7a:	460e      	mov	r6, r1
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
 8002a7c:	f01a fe7e 	bl	801d77c <bt_conn_get_dst>
 8002a80:	4604      	mov	r4, r0
	switch (addr->type) {
 8002a82:	7803      	ldrb	r3, [r0, #0]
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	d85a      	bhi.n	8002b3e <disconnected+0xca>
 8002a88:	e8df f003 	tbb	[pc, r3]
 8002a8c:	544f4a02 	.word	0x544f4a02
		strcpy(type, "public");
 8002a90:	4945      	ldr	r1, [pc, #276]	; (8002ba8 <disconnected+0x134>)
 8002a92:	a807      	add	r0, sp, #28
 8002a94:	f019 fe95 	bl	801c7c2 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
 8002a98:	79a3      	ldrb	r3, [r4, #6]
 8002a9a:	7962      	ldrb	r2, [r4, #5]
 8002a9c:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
 8002a9e:	78e0      	ldrb	r0, [r4, #3]
 8002aa0:	78a7      	ldrb	r7, [r4, #2]
 8002aa2:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
 8002aa4:	f10d 0c1c 	add.w	ip, sp, #28
 8002aa8:	f8cd c014 	str.w	ip, [sp, #20]
 8002aac:	9404      	str	r4, [sp, #16]
 8002aae:	9703      	str	r7, [sp, #12]
 8002ab0:	9002      	str	r0, [sp, #8]
 8002ab2:	9101      	str	r1, [sp, #4]
 8002ab4:	9200      	str	r2, [sp, #0]
 8002ab6:	4a3d      	ldr	r2, [pc, #244]	; (8002bac <disconnected+0x138>)
 8002ab8:	211e      	movs	r1, #30
 8002aba:	a80a      	add	r0, sp, #40	; 0x28
 8002abc:	f017 fab8 	bl	801a030 <snprintk>
    LOG_DBG("Disconnected from %s (reason 0x%02x)", log_strdup(addr), reason);
 8002ac0:	f04f 0400 	mov.w	r4, #0
 8002ac4:	2304      	movs	r3, #4
 8002ac6:	f363 0402 	bfi	r4, r3, #0, #3
 8002aca:	f36f 04c5 	bfc	r4, #3, #3
 8002ace:	4b38      	ldr	r3, [pc, #224]	; (8002bb0 <disconnected+0x13c>)
 8002ad0:	4a38      	ldr	r2, [pc, #224]	; (8002bb4 <disconnected+0x140>)
 8002ad2:	1a9b      	subs	r3, r3, r2
 8002ad4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8002ad8:	f363 148f 	bfi	r4, r3, #6, #10
 8002adc:	4f36      	ldr	r7, [pc, #216]	; (8002bb8 <disconnected+0x144>)
 8002ade:	a80a      	add	r0, sp, #40	; 0x28
 8002ae0:	f003 fb5e 	bl	80061a0 <log_strdup>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	f8ad 4000 	strh.w	r4, [sp]
 8002aea:	4633      	mov	r3, r6
 8002aec:	4639      	mov	r1, r7
 8002aee:	4833      	ldr	r0, [pc, #204]	; (8002bbc <disconnected+0x148>)
 8002af0:	f003 fc5a 	bl	80063a8 <log_3>
 8002af4:	4b32      	ldr	r3, [pc, #200]	; (8002bc0 <disconnected+0x14c>)
 8002af6:	f3bf 8f5b 	dmb	ish
 8002afa:	e853 2f00 	ldrex	r2, [r3]
 8002afe:	f042 0101 	orr.w	r1, r2, #1
 8002b02:	e843 1000 	strex	r0, r1, [r3]
 8002b06:	2800      	cmp	r0, #0
 8002b08:	d1f7      	bne.n	8002afa <disconnected+0x86>
 8002b0a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 8002b0e:	f012 0f01 	tst.w	r2, #1
 8002b12:	d01a      	beq.n	8002b4a <disconnected+0xd6>
    if (is_conn_active_profile(conn)) {
 8002b14:	4628      	mov	r0, r5
 8002b16:	f7ff fe27 	bl	8002768 <is_conn_active_profile>
 8002b1a:	b9e0      	cbnz	r0, 8002b56 <disconnected+0xe2>
}
 8002b1c:	b013      	add	sp, #76	; 0x4c
 8002b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
 8002b20:	4928      	ldr	r1, [pc, #160]	; (8002bc4 <disconnected+0x150>)
 8002b22:	a807      	add	r0, sp, #28
 8002b24:	f019 fe4d 	bl	801c7c2 <strcpy>
		break;
 8002b28:	e7b6      	b.n	8002a98 <disconnected+0x24>
		strcpy(type, "public-id");
 8002b2a:	4927      	ldr	r1, [pc, #156]	; (8002bc8 <disconnected+0x154>)
 8002b2c:	a807      	add	r0, sp, #28
 8002b2e:	f019 fe48 	bl	801c7c2 <strcpy>
		break;
 8002b32:	e7b1      	b.n	8002a98 <disconnected+0x24>
		strcpy(type, "random-id");
 8002b34:	4925      	ldr	r1, [pc, #148]	; (8002bcc <disconnected+0x158>)
 8002b36:	a807      	add	r0, sp, #28
 8002b38:	f019 fe43 	bl	801c7c2 <strcpy>
		break;
 8002b3c:	e7ac      	b.n	8002a98 <disconnected+0x24>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
 8002b3e:	4a24      	ldr	r2, [pc, #144]	; (8002bd0 <disconnected+0x15c>)
 8002b40:	210a      	movs	r1, #10
 8002b42:	a807      	add	r0, sp, #28
 8002b44:	f017 fa74 	bl	801a030 <snprintk>
		break;
 8002b48:	e7a6      	b.n	8002a98 <disconnected+0x24>
		k_queue_append(&work_q->queue, work);
 8002b4a:	f1a3 0108 	sub.w	r1, r3, #8
 8002b4e:	4821      	ldr	r0, [pc, #132]	; (8002bd4 <disconnected+0x160>)
 8002b50:	f01f f9b0 	bl	8021eb4 <k_queue_append>
 8002b54:	e7de      	b.n	8002b14 <disconnected+0xa0>
        LOG_DBG("Active profile disconnected");
 8002b56:	f04f 0200 	mov.w	r2, #0
 8002b5a:	2304      	movs	r3, #4
 8002b5c:	f363 0202 	bfi	r2, r3, #0, #3
 8002b60:	f36f 02c5 	bfc	r2, #3, #3
 8002b64:	4b12      	ldr	r3, [pc, #72]	; (8002bb0 <disconnected+0x13c>)
 8002b66:	4913      	ldr	r1, [pc, #76]	; (8002bb4 <disconnected+0x140>)
 8002b68:	1a5b      	subs	r3, r3, r1
 8002b6a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8002b6e:	f363 128f 	bfi	r2, r3, #6, #10
 8002b72:	4639      	mov	r1, r7
 8002b74:	4818      	ldr	r0, [pc, #96]	; (8002bd8 <disconnected+0x164>)
 8002b76:	f003 fce3 	bl	8006540 <log_1>
 8002b7a:	4b18      	ldr	r3, [pc, #96]	; (8002bdc <disconnected+0x168>)
 8002b7c:	f3bf 8f5b 	dmb	ish
 8002b80:	e853 2f00 	ldrex	r2, [r3]
 8002b84:	f042 0101 	orr.w	r1, r2, #1
 8002b88:	e843 1000 	strex	r0, r1, [r3]
 8002b8c:	2800      	cmp	r0, #0
 8002b8e:	d1f7      	bne.n	8002b80 <disconnected+0x10c>
 8002b90:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 8002b94:	f012 0f01 	tst.w	r2, #1
 8002b98:	d1c0      	bne.n	8002b1c <disconnected+0xa8>
		k_queue_append(&work_q->queue, work);
 8002b9a:	f1a3 0108 	sub.w	r1, r3, #8
 8002b9e:	480d      	ldr	r0, [pc, #52]	; (8002bd4 <disconnected+0x160>)
 8002ba0:	f01f f988 	bl	8021eb4 <k_queue_append>
}
 8002ba4:	e7ba      	b.n	8002b1c <disconnected+0xa8>
 8002ba6:	bf00      	nop
 8002ba8:	08023c50 	.word	0x08023c50
 8002bac:	08023c78 	.word	0x08023c78
 8002bb0:	08022c60 	.word	0x08022c60
 8002bb4:	08022b90 	.word	0x08022b90
 8002bb8:	08024210 	.word	0x08024210
 8002bbc:	08023dc8 	.word	0x08023dc8
 8002bc0:	200007f0 	.word	0x200007f0
 8002bc4:	08023c58 	.word	0x08023c58
 8002bc8:	08023c60 	.word	0x08023c60
 8002bcc:	08023c6c 	.word	0x08023c6c
 8002bd0:	08027b48 	.word	0x08027b48
 8002bd4:	20003310 	.word	0x20003310
 8002bd8:	08023df4 	.word	0x08023df4
 8002bdc:	200007e4 	.word	0x200007e4

08002be0 <zmk_ble_active_profile_is_open>:
bool zmk_ble_active_profile_is_open() {
 8002be0:	b500      	push	{lr}
 8002be2:	b083      	sub	sp, #12
    return !bt_addr_le_cmp(&profiles[active_profile].peer, BT_ADDR_LE_ANY);
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <zmk_ble_active_profile_is_open+0x34>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2016      	movs	r0, #22
 8002bea:	fb00 f003 	mul.w	r0, r0, r3
 8002bee:	3008      	adds	r0, #8
 8002bf0:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <zmk_ble_active_profile_is_open+0x38>)
 8002bf2:	4418      	add	r0, r3
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	f8cd 3003 	str.w	r3, [sp, #3]
 8002bfc:	2207      	movs	r2, #7
 8002bfe:	4669      	mov	r1, sp
 8002c00:	4410      	add	r0, r2
 8002c02:	f019 fe3c 	bl	801c87e <memcmp>
}
 8002c06:	fab0 f080 	clz	r0, r0
 8002c0a:	0940      	lsrs	r0, r0, #5
 8002c0c:	b003      	add	sp, #12
 8002c0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c12:	bf00      	nop
 8002c14:	20005964 	.word	0x20005964
 8002c18:	20003534 	.word	0x20003534

08002c1c <auth_pairing_accept>:

#if IS_HOST_PERIPHERAL
static enum bt_security_err auth_pairing_accept(struct bt_conn *conn,
                                                const struct bt_conn_pairing_feat *const feat) {
 8002c1c:	b530      	push	{r4, r5, lr}
 8002c1e:	b08b      	sub	sp, #44	; 0x2c
    struct bt_conn_info info;
    bt_conn_get_info(conn, &info);
 8002c20:	a902      	add	r1, sp, #8
 8002c22:	f00d fde9 	bl	80107f8 <bt_conn_get_info>

    LOG_DBG("role %d, open? %s", info.role, zmk_ble_active_profile_is_open() ? "yes" : "no");
 8002c26:	f04f 0400 	mov.w	r4, #0
 8002c2a:	2304      	movs	r3, #4
 8002c2c:	f363 0402 	bfi	r4, r3, #0, #3
 8002c30:	f36f 04c5 	bfc	r4, #3, #3
 8002c34:	4b1b      	ldr	r3, [pc, #108]	; (8002ca4 <auth_pairing_accept+0x88>)
 8002c36:	4a1c      	ldr	r2, [pc, #112]	; (8002ca8 <auth_pairing_accept+0x8c>)
 8002c38:	1a9b      	subs	r3, r3, r2
 8002c3a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8002c3e:	f363 148f 	bfi	r4, r3, #6, #10
 8002c42:	f89d 5009 	ldrb.w	r5, [sp, #9]
 8002c46:	f7ff ffcb 	bl	8002be0 <zmk_ble_active_profile_is_open>
 8002c4a:	b170      	cbz	r0, 8002c6a <auth_pairing_accept+0x4e>
 8002c4c:	4b17      	ldr	r3, [pc, #92]	; (8002cac <auth_pairing_accept+0x90>)
 8002c4e:	f8ad 4000 	strh.w	r4, [sp]
 8002c52:	462a      	mov	r2, r5
 8002c54:	4916      	ldr	r1, [pc, #88]	; (8002cb0 <auth_pairing_accept+0x94>)
 8002c56:	4817      	ldr	r0, [pc, #92]	; (8002cb4 <auth_pairing_accept+0x98>)
 8002c58:	f003 fba6 	bl	80063a8 <log_3>
    if (info.role == BT_CONN_ROLE_SLAVE && !zmk_ble_active_profile_is_open()) {
 8002c5c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d004      	beq.n	8002c6e <auth_pairing_accept+0x52>
        LOG_WRN("Rejecting pairing request to taken profile %d", active_profile);
        return BT_SECURITY_ERR_PAIR_NOT_ALLOWED;
    }

    return BT_SECURITY_ERR_SUCCESS;
 8002c64:	2000      	movs	r0, #0
};
 8002c66:	b00b      	add	sp, #44	; 0x2c
 8002c68:	bd30      	pop	{r4, r5, pc}
    LOG_DBG("role %d, open? %s", info.role, zmk_ble_active_profile_is_open() ? "yes" : "no");
 8002c6a:	4b13      	ldr	r3, [pc, #76]	; (8002cb8 <auth_pairing_accept+0x9c>)
 8002c6c:	e7ef      	b.n	8002c4e <auth_pairing_accept+0x32>
    if (info.role == BT_CONN_ROLE_SLAVE && !zmk_ble_active_profile_is_open()) {
 8002c6e:	f7ff ffb7 	bl	8002be0 <zmk_ble_active_profile_is_open>
 8002c72:	b108      	cbz	r0, 8002c78 <auth_pairing_accept+0x5c>
    return BT_SECURITY_ERR_SUCCESS;
 8002c74:	2000      	movs	r0, #0
 8002c76:	e7f6      	b.n	8002c66 <auth_pairing_accept+0x4a>
        LOG_WRN("Rejecting pairing request to taken profile %d", active_profile);
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	f363 0202 	bfi	r2, r3, #0, #3
 8002c82:	f36f 02c5 	bfc	r2, #3, #3
 8002c86:	4b07      	ldr	r3, [pc, #28]	; (8002ca4 <auth_pairing_accept+0x88>)
 8002c88:	4907      	ldr	r1, [pc, #28]	; (8002ca8 <auth_pairing_accept+0x8c>)
 8002c8a:	1a5b      	subs	r3, r3, r1
 8002c8c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8002c90:	f363 128f 	bfi	r2, r3, #6, #10
 8002c94:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <auth_pairing_accept+0xa0>)
 8002c96:	7819      	ldrb	r1, [r3, #0]
 8002c98:	4809      	ldr	r0, [pc, #36]	; (8002cc0 <auth_pairing_accept+0xa4>)
 8002c9a:	f003 fc51 	bl	8006540 <log_1>
        return BT_SECURITY_ERR_PAIR_NOT_ALLOWED;
 8002c9e:	2006      	movs	r0, #6
 8002ca0:	e7e1      	b.n	8002c66 <auth_pairing_accept+0x4a>
 8002ca2:	bf00      	nop
 8002ca4:	08022c60 	.word	0x08022c60
 8002ca8:	08022b90 	.word	0x08022b90
 8002cac:	08023e14 	.word	0x08023e14
 8002cb0:	08024254 	.word	0x08024254
 8002cb4:	08023e1c 	.word	0x08023e1c
 8002cb8:	08023e18 	.word	0x08023e18
 8002cbc:	20005964 	.word	0x20005964
 8002cc0:	08023e34 	.word	0x08023e34

08002cc4 <set_profile_address>:
void set_profile_address(uint8_t index, const bt_addr_le_t *addr) {
 8002cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cc8:	b096      	sub	sp, #88	; 0x58
 8002cca:	4680      	mov	r8, r0
 8002ccc:	460c      	mov	r4, r1
	switch (addr->type) {
 8002cce:	780b      	ldrb	r3, [r1, #0]
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	d86e      	bhi.n	8002db2 <set_profile_address+0xee>
 8002cd4:	e8df f003 	tbb	[pc, r3]
 8002cd8:	68635e02 	.word	0x68635e02
		strcpy(type, "public");
 8002cdc:	493b      	ldr	r1, [pc, #236]	; (8002dcc <set_profile_address+0x108>)
 8002cde:	a807      	add	r0, sp, #28
 8002ce0:	f019 fd6f 	bl	801c7c2 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
 8002ce4:	7963      	ldrb	r3, [r4, #5]
 8002ce6:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
 8002ce8:	78e1      	ldrb	r1, [r4, #3]
 8002cea:	78a0      	ldrb	r0, [r4, #2]
 8002cec:	7865      	ldrb	r5, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
 8002cee:	ae07      	add	r6, sp, #28
 8002cf0:	9605      	str	r6, [sp, #20]
 8002cf2:	9504      	str	r5, [sp, #16]
 8002cf4:	9003      	str	r0, [sp, #12]
 8002cf6:	9102      	str	r1, [sp, #8]
 8002cf8:	9201      	str	r2, [sp, #4]
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	79a3      	ldrb	r3, [r4, #6]
 8002cfe:	4a34      	ldr	r2, [pc, #208]	; (8002dd0 <set_profile_address+0x10c>)
 8002d00:	211e      	movs	r1, #30
 8002d02:	a80a      	add	r0, sp, #40	; 0x28
 8002d04:	f017 f994 	bl	801a030 <snprintk>
    memcpy(&profiles[index].peer, addr, sizeof(bt_addr_le_t));
 8002d08:	4e32      	ldr	r6, [pc, #200]	; (8002dd4 <set_profile_address+0x110>)
 8002d0a:	2716      	movs	r7, #22
 8002d0c:	fb07 f508 	mul.w	r5, r7, r8
 8002d10:	f105 0008 	add.w	r0, r5, #8
 8002d14:	4430      	add	r0, r6
 8002d16:	2207      	movs	r2, #7
 8002d18:	4621      	mov	r1, r4
 8002d1a:	4410      	add	r0, r2
 8002d1c:	f019 fdc7 	bl	801c8ae <memcpy>
    sprintf(setting_name, "ble/profiles/%d", index);
 8002d20:	4642      	mov	r2, r8
 8002d22:	492d      	ldr	r1, [pc, #180]	; (8002dd8 <set_profile_address+0x114>)
 8002d24:	a812      	add	r0, sp, #72	; 0x48
 8002d26:	f008 fec3 	bl	800bab0 <sprintf>
    LOG_DBG("Setting profile addr for %s to %s", log_strdup(setting_name), log_strdup(addr_str));
 8002d2a:	f04f 0400 	mov.w	r4, #0
 8002d2e:	2304      	movs	r3, #4
 8002d30:	f363 0402 	bfi	r4, r3, #0, #3
 8002d34:	f36f 04c5 	bfc	r4, #3, #3
 8002d38:	4b28      	ldr	r3, [pc, #160]	; (8002ddc <set_profile_address+0x118>)
 8002d3a:	4a29      	ldr	r2, [pc, #164]	; (8002de0 <set_profile_address+0x11c>)
 8002d3c:	1a9b      	subs	r3, r3, r2
 8002d3e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8002d42:	f363 148f 	bfi	r4, r3, #6, #10
 8002d46:	a812      	add	r0, sp, #72	; 0x48
 8002d48:	f003 fa2a 	bl	80061a0 <log_strdup>
 8002d4c:	4680      	mov	r8, r0
 8002d4e:	a80a      	add	r0, sp, #40	; 0x28
 8002d50:	f003 fa26 	bl	80061a0 <log_strdup>
 8002d54:	4603      	mov	r3, r0
 8002d56:	f8ad 4000 	strh.w	r4, [sp]
 8002d5a:	4642      	mov	r2, r8
 8002d5c:	4921      	ldr	r1, [pc, #132]	; (8002de4 <set_profile_address+0x120>)
 8002d5e:	4822      	ldr	r0, [pc, #136]	; (8002de8 <set_profile_address+0x124>)
 8002d60:	f003 fb22 	bl	80063a8 <log_3>
    settings_save_one(setting_name, &profiles[index], sizeof(struct zmk_ble_profile));
 8002d64:	463a      	mov	r2, r7
 8002d66:	1971      	adds	r1, r6, r5
 8002d68:	a812      	add	r0, sp, #72	; 0x48
 8002d6a:	f005 fc1d 	bl	80085a8 <settings_save_one>
 8002d6e:	4b1f      	ldr	r3, [pc, #124]	; (8002dec <set_profile_address+0x128>)
 8002d70:	f3bf 8f5b 	dmb	ish
 8002d74:	e853 2f00 	ldrex	r2, [r3]
 8002d78:	f042 0101 	orr.w	r1, r2, #1
 8002d7c:	e843 1000 	strex	r0, r1, [r3]
 8002d80:	2800      	cmp	r0, #0
 8002d82:	d1f7      	bne.n	8002d74 <set_profile_address+0xb0>
 8002d84:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 8002d88:	f012 0f01 	tst.w	r2, #1
 8002d8c:	d017      	beq.n	8002dbe <set_profile_address+0xfa>
}
 8002d8e:	b016      	add	sp, #88	; 0x58
 8002d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		strcpy(type, "random");
 8002d94:	4916      	ldr	r1, [pc, #88]	; (8002df0 <set_profile_address+0x12c>)
 8002d96:	a807      	add	r0, sp, #28
 8002d98:	f019 fd13 	bl	801c7c2 <strcpy>
		break;
 8002d9c:	e7a2      	b.n	8002ce4 <set_profile_address+0x20>
		strcpy(type, "public-id");
 8002d9e:	4915      	ldr	r1, [pc, #84]	; (8002df4 <set_profile_address+0x130>)
 8002da0:	a807      	add	r0, sp, #28
 8002da2:	f019 fd0e 	bl	801c7c2 <strcpy>
		break;
 8002da6:	e79d      	b.n	8002ce4 <set_profile_address+0x20>
		strcpy(type, "random-id");
 8002da8:	4913      	ldr	r1, [pc, #76]	; (8002df8 <set_profile_address+0x134>)
 8002daa:	a807      	add	r0, sp, #28
 8002dac:	f019 fd09 	bl	801c7c2 <strcpy>
		break;
 8002db0:	e798      	b.n	8002ce4 <set_profile_address+0x20>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
 8002db2:	4a12      	ldr	r2, [pc, #72]	; (8002dfc <set_profile_address+0x138>)
 8002db4:	210a      	movs	r1, #10
 8002db6:	a807      	add	r0, sp, #28
 8002db8:	f017 f93a 	bl	801a030 <snprintk>
		break;
 8002dbc:	e792      	b.n	8002ce4 <set_profile_address+0x20>
		k_queue_append(&work_q->queue, work);
 8002dbe:	f1a3 0108 	sub.w	r1, r3, #8
 8002dc2:	480f      	ldr	r0, [pc, #60]	; (8002e00 <set_profile_address+0x13c>)
 8002dc4:	f01f f876 	bl	8021eb4 <k_queue_append>
 8002dc8:	e7e1      	b.n	8002d8e <set_profile_address+0xca>
 8002dca:	bf00      	nop
 8002dcc:	08023c50 	.word	0x08023c50
 8002dd0:	08023c78 	.word	0x08023c78
 8002dd4:	20003534 	.word	0x20003534
 8002dd8:	08023e64 	.word	0x08023e64
 8002ddc:	08022c60 	.word	0x08022c60
 8002de0:	08022b90 	.word	0x08022b90
 8002de4:	08024174 	.word	0x08024174
 8002de8:	08023e74 	.word	0x08023e74
 8002dec:	200007e4 	.word	0x200007e4
 8002df0:	08023c58 	.word	0x08023c58
 8002df4:	08023c60 	.word	0x08023c60
 8002df8:	08023c6c 	.word	0x08023c6c
 8002dfc:	08027b48 	.word	0x08027b48
 8002e00:	20003310 	.word	0x20003310

08002e04 <zmk_ble_active_profile_addr>:
bt_addr_le_t *zmk_ble_active_profile_addr() { return &profiles[active_profile].peer; }
 8002e04:	4b04      	ldr	r3, [pc, #16]	; (8002e18 <zmk_ble_active_profile_addr+0x14>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2016      	movs	r0, #22
 8002e0a:	fb00 f003 	mul.w	r0, r0, r3
 8002e0e:	3008      	adds	r0, #8
 8002e10:	4b02      	ldr	r3, [pc, #8]	; (8002e1c <zmk_ble_active_profile_addr+0x18>)
 8002e12:	4418      	add	r0, r3
 8002e14:	3007      	adds	r0, #7
 8002e16:	4770      	bx	lr
 8002e18:	20005964 	.word	0x20005964
 8002e1c:	20003534 	.word	0x20003534

08002e20 <update_advertising>:
int update_advertising() {
 8002e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e22:	b097      	sub	sp, #92	; 0x5c
    if (zmk_ble_active_profile_is_open()) {
 8002e24:	f7ff fedc 	bl	8002be0 <zmk_ble_active_profile_is_open>
 8002e28:	2800      	cmp	r0, #0
 8002e2a:	d042      	beq.n	8002eb2 <update_advertising+0x92>
        desired_adv = ZMK_ADV_CONN;
 8002e2c:	2402      	movs	r4, #2
    LOG_DBG("advertising from %d to %d", advertising_status, desired_adv);
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	2304      	movs	r3, #4
 8002e34:	f363 0202 	bfi	r2, r3, #0, #3
 8002e38:	f36f 02c5 	bfc	r2, #3, #3
 8002e3c:	4baf      	ldr	r3, [pc, #700]	; (80030fc <update_advertising+0x2dc>)
 8002e3e:	49b0      	ldr	r1, [pc, #704]	; (8003100 <update_advertising+0x2e0>)
 8002e40:	1a5b      	subs	r3, r3, r1
 8002e42:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8002e46:	f363 128f 	bfi	r2, r3, #6, #10
 8002e4a:	4eae      	ldr	r6, [pc, #696]	; (8003104 <update_advertising+0x2e4>)
 8002e4c:	4dae      	ldr	r5, [pc, #696]	; (8003108 <update_advertising+0x2e8>)
 8002e4e:	f8ad 2000 	strh.w	r2, [sp]
 8002e52:	4623      	mov	r3, r4
 8002e54:	782a      	ldrb	r2, [r5, #0]
 8002e56:	4631      	mov	r1, r6
 8002e58:	48ac      	ldr	r0, [pc, #688]	; (800310c <update_advertising+0x2ec>)
 8002e5a:	f003 faa5 	bl	80063a8 <log_3>
    switch (desired_adv + CURR_ADV(advertising_status)) {
 8002e5e:	782b      	ldrb	r3, [r5, #0]
 8002e60:	eb04 1403 	add.w	r4, r4, r3, lsl #4
 8002e64:	3c01      	subs	r4, #1
 8002e66:	2c20      	cmp	r4, #32
 8002e68:	f200 816f 	bhi.w	800314a <update_advertising+0x32a>
 8002e6c:	e8df f014 	tbh	[pc, r4, lsl #1]
 8002e70:	013100a6 	.word	0x013100a6
 8002e74:	016d016d 	.word	0x016d016d
 8002e78:	016d016d 	.word	0x016d016d
 8002e7c:	016d016d 	.word	0x016d016d
 8002e80:	016d016d 	.word	0x016d016d
 8002e84:	016d016d 	.word	0x016d016d
 8002e88:	016d016d 	.word	0x016d016d
 8002e8c:	0028016d 	.word	0x0028016d
 8002e90:	00f30042 	.word	0x00f30042
 8002e94:	016d016d 	.word	0x016d016d
 8002e98:	016d016d 	.word	0x016d016d
 8002e9c:	016d016d 	.word	0x016d016d
 8002ea0:	016d016d 	.word	0x016d016d
 8002ea4:	016d016d 	.word	0x016d016d
 8002ea8:	016d016d 	.word	0x016d016d
 8002eac:	0028016d 	.word	0x0028016d
 8002eb0:	0042      	.short	0x0042
    } else if (!zmk_ble_active_profile_is_connected()) {
 8002eb2:	f016 fdc6 	bl	8019a42 <zmk_ble_active_profile_is_connected>
 8002eb6:	b108      	cbz	r0, 8002ebc <update_advertising+0x9c>
    enum advertising_type desired_adv = ZMK_ADV_NONE;
 8002eb8:	2400      	movs	r4, #0
 8002eba:	e7b8      	b.n	8002e2e <update_advertising+0xe>
        desired_adv = ZMK_ADV_CONN;
 8002ebc:	2402      	movs	r4, #2
 8002ebe:	e7b6      	b.n	8002e2e <update_advertising+0xe>
        CHECKED_ADV_STOP();
 8002ec0:	f00c fb5c 	bl	800f57c <bt_le_adv_stop>
 8002ec4:	4b90      	ldr	r3, [pc, #576]	; (8003108 <update_advertising+0x2e8>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	701a      	strb	r2, [r3, #0]
 8002eca:	4604      	mov	r4, r0
 8002ecc:	2800      	cmp	r0, #0
 8002ece:	f000 8112 	beq.w	80030f6 <update_advertising+0x2d6>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	f363 0202 	bfi	r2, r3, #0, #3
 8002ed8:	f36f 02c5 	bfc	r2, #3, #3
 8002edc:	4b87      	ldr	r3, [pc, #540]	; (80030fc <update_advertising+0x2dc>)
 8002ede:	4988      	ldr	r1, [pc, #544]	; (8003100 <update_advertising+0x2e0>)
 8002ee0:	1a5b      	subs	r3, r3, r1
 8002ee2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8002ee6:	f363 128f 	bfi	r2, r3, #6, #10
 8002eea:	4601      	mov	r1, r0
 8002eec:	4888      	ldr	r0, [pc, #544]	; (8003110 <update_advertising+0x2f0>)
 8002eee:	f003 fb27 	bl	8006540 <log_1>
 8002ef2:	e12b      	b.n	800314c <update_advertising+0x32c>
        CHECKED_ADV_STOP();
 8002ef4:	f00c fb42 	bl	800f57c <bt_le_adv_stop>
 8002ef8:	4b83      	ldr	r3, [pc, #524]	; (8003108 <update_advertising+0x2e8>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	701a      	strb	r2, [r3, #0]
 8002efe:	4604      	mov	r4, r0
 8002f00:	b9f0      	cbnz	r0, 8002f40 <update_advertising+0x120>
        CHECKED_DIR_ADV();
 8002f02:	f7ff ff7f 	bl	8002e04 <zmk_ble_active_profile_addr>
 8002f06:	4605      	mov	r5, r0
 8002f08:	4601      	mov	r1, r0
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f00d fa86 	bl	801041c <bt_conn_lookup_addr_le>
 8002f10:	4607      	mov	r7, r0
 8002f12:	b330      	cbz	r0, 8002f62 <update_advertising+0x142>
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	2304      	movs	r3, #4
 8002f1a:	f363 0202 	bfi	r2, r3, #0, #3
 8002f1e:	f36f 02c5 	bfc	r2, #3, #3
 8002f22:	4b76      	ldr	r3, [pc, #472]	; (80030fc <update_advertising+0x2dc>)
 8002f24:	4976      	ldr	r1, [pc, #472]	; (8003100 <update_advertising+0x2e0>)
 8002f26:	1a5b      	subs	r3, r3, r1
 8002f28:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8002f2c:	f363 128f 	bfi	r2, r3, #6, #10
 8002f30:	4631      	mov	r1, r6
 8002f32:	4878      	ldr	r0, [pc, #480]	; (8003114 <update_advertising+0x2f4>)
 8002f34:	f003 fb04 	bl	8006540 <log_1>
 8002f38:	4638      	mov	r0, r7
 8002f3a:	f01a fbf9 	bl	801d730 <bt_conn_unref>
 8002f3e:	e105      	b.n	800314c <update_advertising+0x32c>
        CHECKED_ADV_STOP();
 8002f40:	2301      	movs	r3, #1
 8002f42:	f363 0202 	bfi	r2, r3, #0, #3
 8002f46:	f36f 02c5 	bfc	r2, #3, #3
 8002f4a:	4b6c      	ldr	r3, [pc, #432]	; (80030fc <update_advertising+0x2dc>)
 8002f4c:	496c      	ldr	r1, [pc, #432]	; (8003100 <update_advertising+0x2e0>)
 8002f4e:	1a5b      	subs	r3, r3, r1
 8002f50:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8002f54:	f363 128f 	bfi	r2, r3, #6, #10
 8002f58:	4601      	mov	r1, r0
 8002f5a:	486d      	ldr	r0, [pc, #436]	; (8003110 <update_advertising+0x2f0>)
 8002f5c:	f003 faf0 	bl	8006540 <log_1>
 8002f60:	e0f4      	b.n	800314c <update_advertising+0x32c>
        CHECKED_DIR_ADV();
 8002f62:	2300      	movs	r3, #0
 8002f64:	f88d 3008 	strb.w	r3, [sp, #8]
 8002f68:	f88d 3009 	strb.w	r3, [sp, #9]
 8002f6c:	f88d 300a 	strb.w	r3, [sp, #10]
 8002f70:	2213      	movs	r2, #19
 8002f72:	9203      	str	r2, [sp, #12]
 8002f74:	22a0      	movs	r2, #160	; 0xa0
 8002f76:	9204      	str	r2, [sp, #16]
 8002f78:	22f0      	movs	r2, #240	; 0xf0
 8002f7a:	9205      	str	r2, [sp, #20]
 8002f7c:	9506      	str	r5, [sp, #24]
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	2204      	movs	r2, #4
 8002f82:	4965      	ldr	r1, [pc, #404]	; (8003118 <update_advertising+0x2f8>)
 8002f84:	a802      	add	r0, sp, #8
 8002f86:	f01a f904 	bl	801d192 <bt_le_adv_start>
 8002f8a:	4604      	mov	r4, r0
 8002f8c:	b918      	cbnz	r0, 8002f96 <update_advertising+0x176>
 8002f8e:	4b5e      	ldr	r3, [pc, #376]	; (8003108 <update_advertising+0x2e8>)
 8002f90:	2201      	movs	r2, #1
 8002f92:	701a      	strb	r2, [r3, #0]
        break;
 8002f94:	e0af      	b.n	80030f6 <update_advertising+0x2d6>
        CHECKED_DIR_ADV();
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	f363 0202 	bfi	r2, r3, #0, #3
 8002fa0:	f36f 02c5 	bfc	r2, #3, #3
 8002fa4:	4b55      	ldr	r3, [pc, #340]	; (80030fc <update_advertising+0x2dc>)
 8002fa6:	4956      	ldr	r1, [pc, #344]	; (8003100 <update_advertising+0x2e0>)
 8002fa8:	1a5b      	subs	r3, r3, r1
 8002faa:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8002fae:	f363 128f 	bfi	r2, r3, #6, #10
 8002fb2:	4601      	mov	r1, r0
 8002fb4:	4859      	ldr	r0, [pc, #356]	; (800311c <update_advertising+0x2fc>)
 8002fb6:	f003 fac3 	bl	8006540 <log_1>
 8002fba:	e0c7      	b.n	800314c <update_advertising+0x32c>
        CHECKED_DIR_ADV();
 8002fbc:	f7ff ff22 	bl	8002e04 <zmk_ble_active_profile_addr>
 8002fc0:	4604      	mov	r4, r0
 8002fc2:	4601      	mov	r1, r0
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	f00d fa29 	bl	801041c <bt_conn_lookup_addr_le>
 8002fca:	4605      	mov	r5, r0
 8002fcc:	b1b0      	cbz	r0, 8002ffc <update_advertising+0x1dc>
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	2304      	movs	r3, #4
 8002fd4:	f363 0202 	bfi	r2, r3, #0, #3
 8002fd8:	f36f 02c5 	bfc	r2, #3, #3
 8002fdc:	4b47      	ldr	r3, [pc, #284]	; (80030fc <update_advertising+0x2dc>)
 8002fde:	4948      	ldr	r1, [pc, #288]	; (8003100 <update_advertising+0x2e0>)
 8002fe0:	1a5b      	subs	r3, r3, r1
 8002fe2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8002fe6:	f363 128f 	bfi	r2, r3, #6, #10
 8002fea:	4631      	mov	r1, r6
 8002fec:	4849      	ldr	r0, [pc, #292]	; (8003114 <update_advertising+0x2f4>)
 8002fee:	f003 faa7 	bl	8006540 <log_1>
 8002ff2:	4628      	mov	r0, r5
 8002ff4:	f01a fb9c 	bl	801d730 <bt_conn_unref>
 8002ff8:	2400      	movs	r4, #0
 8002ffa:	e0a7      	b.n	800314c <update_advertising+0x32c>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	f88d 301c 	strb.w	r3, [sp, #28]
 8003002:	f88d 301d 	strb.w	r3, [sp, #29]
 8003006:	f88d 301e 	strb.w	r3, [sp, #30]
 800300a:	2213      	movs	r2, #19
 800300c:	9208      	str	r2, [sp, #32]
 800300e:	22a0      	movs	r2, #160	; 0xa0
 8003010:	9209      	str	r2, [sp, #36]	; 0x24
 8003012:	22f0      	movs	r2, #240	; 0xf0
 8003014:	920a      	str	r2, [sp, #40]	; 0x28
 8003016:	940b      	str	r4, [sp, #44]	; 0x2c
 8003018:	9300      	str	r3, [sp, #0]
 800301a:	2204      	movs	r2, #4
 800301c:	493e      	ldr	r1, [pc, #248]	; (8003118 <update_advertising+0x2f8>)
 800301e:	a807      	add	r0, sp, #28
 8003020:	f01a f8b7 	bl	801d192 <bt_le_adv_start>
 8003024:	4604      	mov	r4, r0
 8003026:	b918      	cbnz	r0, 8003030 <update_advertising+0x210>
 8003028:	4b37      	ldr	r3, [pc, #220]	; (8003108 <update_advertising+0x2e8>)
 800302a:	2201      	movs	r2, #1
 800302c:	701a      	strb	r2, [r3, #0]
        break;
 800302e:	e062      	b.n	80030f6 <update_advertising+0x2d6>
        CHECKED_DIR_ADV();
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	2301      	movs	r3, #1
 8003036:	f363 0202 	bfi	r2, r3, #0, #3
 800303a:	f36f 02c5 	bfc	r2, #3, #3
 800303e:	4b2f      	ldr	r3, [pc, #188]	; (80030fc <update_advertising+0x2dc>)
 8003040:	492f      	ldr	r1, [pc, #188]	; (8003100 <update_advertising+0x2e0>)
 8003042:	1a5b      	subs	r3, r3, r1
 8003044:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8003048:	f363 128f 	bfi	r2, r3, #6, #10
 800304c:	4601      	mov	r1, r0
 800304e:	4833      	ldr	r0, [pc, #204]	; (800311c <update_advertising+0x2fc>)
 8003050:	f003 fa76 	bl	8006540 <log_1>
 8003054:	e07a      	b.n	800314c <update_advertising+0x32c>
        CHECKED_ADV_STOP();
 8003056:	f00c fa91 	bl	800f57c <bt_le_adv_stop>
 800305a:	4b2b      	ldr	r3, [pc, #172]	; (8003108 <update_advertising+0x2e8>)
 800305c:	2200      	movs	r2, #0
 800305e:	701a      	strb	r2, [r3, #0]
 8003060:	4604      	mov	r4, r0
 8003062:	b990      	cbnz	r0, 800308a <update_advertising+0x26a>
        CHECKED_OPEN_ADV();
 8003064:	ac0c      	add	r4, sp, #48	; 0x30
 8003066:	4d2e      	ldr	r5, [pc, #184]	; (8003120 <update_advertising+0x300>)
 8003068:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800306a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800306c:	682b      	ldr	r3, [r5, #0]
 800306e:	6023      	str	r3, [r4, #0]
 8003070:	2300      	movs	r3, #0
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	2204      	movs	r2, #4
 8003076:	4928      	ldr	r1, [pc, #160]	; (8003118 <update_advertising+0x2f8>)
 8003078:	a80c      	add	r0, sp, #48	; 0x30
 800307a:	f01a f88a 	bl	801d192 <bt_le_adv_start>
 800307e:	4604      	mov	r4, r0
 8003080:	b9a0      	cbnz	r0, 80030ac <update_advertising+0x28c>
 8003082:	4b21      	ldr	r3, [pc, #132]	; (8003108 <update_advertising+0x2e8>)
 8003084:	2202      	movs	r2, #2
 8003086:	701a      	strb	r2, [r3, #0]
        break;
 8003088:	e035      	b.n	80030f6 <update_advertising+0x2d6>
        CHECKED_ADV_STOP();
 800308a:	2301      	movs	r3, #1
 800308c:	f363 0202 	bfi	r2, r3, #0, #3
 8003090:	f36f 02c5 	bfc	r2, #3, #3
 8003094:	4b19      	ldr	r3, [pc, #100]	; (80030fc <update_advertising+0x2dc>)
 8003096:	491a      	ldr	r1, [pc, #104]	; (8003100 <update_advertising+0x2e0>)
 8003098:	1a5b      	subs	r3, r3, r1
 800309a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800309e:	f363 128f 	bfi	r2, r3, #6, #10
 80030a2:	4601      	mov	r1, r0
 80030a4:	481a      	ldr	r0, [pc, #104]	; (8003110 <update_advertising+0x2f0>)
 80030a6:	f003 fa4b 	bl	8006540 <log_1>
 80030aa:	e04f      	b.n	800314c <update_advertising+0x32c>
        CHECKED_OPEN_ADV();
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	2301      	movs	r3, #1
 80030b2:	f363 0202 	bfi	r2, r3, #0, #3
 80030b6:	f36f 02c5 	bfc	r2, #3, #3
 80030ba:	4b10      	ldr	r3, [pc, #64]	; (80030fc <update_advertising+0x2dc>)
 80030bc:	4910      	ldr	r1, [pc, #64]	; (8003100 <update_advertising+0x2e0>)
 80030be:	1a5b      	subs	r3, r3, r1
 80030c0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80030c4:	f363 128f 	bfi	r2, r3, #6, #10
 80030c8:	4601      	mov	r1, r0
 80030ca:	4814      	ldr	r0, [pc, #80]	; (800311c <update_advertising+0x2fc>)
 80030cc:	f003 fa38 	bl	8006540 <log_1>
 80030d0:	e03c      	b.n	800314c <update_advertising+0x32c>
        CHECKED_OPEN_ADV();
 80030d2:	ac11      	add	r4, sp, #68	; 0x44
 80030d4:	4d12      	ldr	r5, [pc, #72]	; (8003120 <update_advertising+0x300>)
 80030d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030da:	682b      	ldr	r3, [r5, #0]
 80030dc:	6023      	str	r3, [r4, #0]
 80030de:	2300      	movs	r3, #0
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	2204      	movs	r2, #4
 80030e4:	490c      	ldr	r1, [pc, #48]	; (8003118 <update_advertising+0x2f8>)
 80030e6:	a811      	add	r0, sp, #68	; 0x44
 80030e8:	f01a f853 	bl	801d192 <bt_le_adv_start>
 80030ec:	4604      	mov	r4, r0
 80030ee:	b9c8      	cbnz	r0, 8003124 <update_advertising+0x304>
 80030f0:	4b05      	ldr	r3, [pc, #20]	; (8003108 <update_advertising+0x2e8>)
 80030f2:	2202      	movs	r2, #2
 80030f4:	701a      	strb	r2, [r3, #0]
    return 0;
 80030f6:	2400      	movs	r4, #0
 80030f8:	e028      	b.n	800314c <update_advertising+0x32c>
 80030fa:	bf00      	nop
 80030fc:	08022c60 	.word	0x08022c60
 8003100:	08022b90 	.word	0x08022b90
 8003104:	08024188 	.word	0x08024188
 8003108:	20005965 	.word	0x20005965
 800310c:	08023e9c 	.word	0x08023e9c
 8003110:	08023ebc 	.word	0x08023ebc
 8003114:	08023ee0 	.word	0x08023ee0
 8003118:	08024290 	.word	0x08024290
 800311c:	08023f1c 	.word	0x08023f1c
 8003120:	08022c78 	.word	0x08022c78
        CHECKED_OPEN_ADV();
 8003124:	f04f 0200 	mov.w	r2, #0
 8003128:	2301      	movs	r3, #1
 800312a:	f363 0202 	bfi	r2, r3, #0, #3
 800312e:	f36f 02c5 	bfc	r2, #3, #3
 8003132:	4b08      	ldr	r3, [pc, #32]	; (8003154 <update_advertising+0x334>)
 8003134:	4908      	ldr	r1, [pc, #32]	; (8003158 <update_advertising+0x338>)
 8003136:	1a5b      	subs	r3, r3, r1
 8003138:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800313c:	f363 128f 	bfi	r2, r3, #6, #10
 8003140:	4601      	mov	r1, r0
 8003142:	4806      	ldr	r0, [pc, #24]	; (800315c <update_advertising+0x33c>)
 8003144:	f003 f9fc 	bl	8006540 <log_1>
 8003148:	e000      	b.n	800314c <update_advertising+0x32c>
    switch (desired_adv + CURR_ADV(advertising_status)) {
 800314a:	2400      	movs	r4, #0
};
 800314c:	4620      	mov	r0, r4
 800314e:	b017      	add	sp, #92	; 0x5c
 8003150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003152:	bf00      	nop
 8003154:	08022c60 	.word	0x08022c60
 8003158:	08022b90 	.word	0x08022b90
 800315c:	08023f1c 	.word	0x08023f1c

08003160 <zmk_ble_clear_bonds>:
int zmk_ble_clear_bonds() {
 8003160:	b510      	push	{r4, lr}
 8003162:	b084      	sub	sp, #16
    LOG_DBG("");
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	2304      	movs	r3, #4
 800316a:	f363 0202 	bfi	r2, r3, #0, #3
 800316e:	f36f 02c5 	bfc	r2, #3, #3
 8003172:	4b25      	ldr	r3, [pc, #148]	; (8003208 <zmk_ble_clear_bonds+0xa8>)
 8003174:	4925      	ldr	r1, [pc, #148]	; (800320c <zmk_ble_clear_bonds+0xac>)
 8003176:	1a5b      	subs	r3, r3, r1
 8003178:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800317c:	f363 128f 	bfi	r2, r3, #6, #10
 8003180:	4c23      	ldr	r4, [pc, #140]	; (8003210 <zmk_ble_clear_bonds+0xb0>)
 8003182:	4621      	mov	r1, r4
 8003184:	4823      	ldr	r0, [pc, #140]	; (8003214 <zmk_ble_clear_bonds+0xb4>)
 8003186:	f003 f9db 	bl	8006540 <log_1>
    if (bt_addr_le_cmp(&profiles[active_profile].peer, BT_ADDR_LE_ANY)) {
 800318a:	4b23      	ldr	r3, [pc, #140]	; (8003218 <zmk_ble_clear_bonds+0xb8>)
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2016      	movs	r0, #22
 8003190:	fb00 f003 	mul.w	r0, r0, r3
 8003194:	3008      	adds	r0, #8
 8003196:	4b21      	ldr	r3, [pc, #132]	; (800321c <zmk_ble_clear_bonds+0xbc>)
 8003198:	4418      	add	r0, r3
 800319a:	2300      	movs	r3, #0
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	f8cd 3003 	str.w	r3, [sp, #3]
 80031a2:	2207      	movs	r2, #7
 80031a4:	4669      	mov	r1, sp
 80031a6:	4410      	add	r0, r2
 80031a8:	f019 fb69 	bl	801c87e <memcmp>
 80031ac:	b920      	cbnz	r0, 80031b8 <zmk_ble_clear_bonds+0x58>
    update_advertising();
 80031ae:	f7ff fe37 	bl	8002e20 <update_advertising>
};
 80031b2:	2000      	movs	r0, #0
 80031b4:	b004      	add	sp, #16
 80031b6:	bd10      	pop	{r4, pc}
        LOG_DBG("Unpairing!");
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	2304      	movs	r3, #4
 80031be:	f363 0202 	bfi	r2, r3, #0, #3
 80031c2:	f36f 02c5 	bfc	r2, #3, #3
 80031c6:	4b10      	ldr	r3, [pc, #64]	; (8003208 <zmk_ble_clear_bonds+0xa8>)
 80031c8:	4910      	ldr	r1, [pc, #64]	; (800320c <zmk_ble_clear_bonds+0xac>)
 80031ca:	1a5b      	subs	r3, r3, r1
 80031cc:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80031d0:	f363 128f 	bfi	r2, r3, #6, #10
 80031d4:	4621      	mov	r1, r4
 80031d6:	4812      	ldr	r0, [pc, #72]	; (8003220 <zmk_ble_clear_bonds+0xc0>)
 80031d8:	f003 f9b2 	bl	8006540 <log_1>
        bt_unpair(BT_ID_DEFAULT, &profiles[active_profile].peer);
 80031dc:	4c0e      	ldr	r4, [pc, #56]	; (8003218 <zmk_ble_clear_bonds+0xb8>)
 80031de:	7823      	ldrb	r3, [r4, #0]
 80031e0:	2116      	movs	r1, #22
 80031e2:	fb01 f103 	mul.w	r1, r1, r3
 80031e6:	3108      	adds	r1, #8
 80031e8:	4b0c      	ldr	r3, [pc, #48]	; (800321c <zmk_ble_clear_bonds+0xbc>)
 80031ea:	4419      	add	r1, r3
 80031ec:	3107      	adds	r1, #7
 80031ee:	2000      	movs	r0, #0
 80031f0:	f00a fda8 	bl	800dd44 <bt_unpair>
        set_profile_address(active_profile, BT_ADDR_LE_ANY);
 80031f4:	2300      	movs	r3, #0
 80031f6:	9302      	str	r3, [sp, #8]
 80031f8:	f8cd 300b 	str.w	r3, [sp, #11]
 80031fc:	a902      	add	r1, sp, #8
 80031fe:	7820      	ldrb	r0, [r4, #0]
 8003200:	f7ff fd60 	bl	8002cc4 <set_profile_address>
 8003204:	e7d3      	b.n	80031ae <zmk_ble_clear_bonds+0x4e>
 8003206:	bf00      	nop
 8003208:	08022c60 	.word	0x08022c60
 800320c:	08022b90 	.word	0x08022b90
 8003210:	0802419c 	.word	0x0802419c
 8003214:	08023f44 	.word	0x08023f44
 8003218:	20005964 	.word	0x20005964
 800321c:	20003534 	.word	0x20003534
 8003220:	08023f4c 	.word	0x08023f4c

08003224 <zmk_ble_prof_select>:
int zmk_ble_prof_select(uint8_t index) {
 8003224:	b510      	push	{r4, lr}
 8003226:	4604      	mov	r4, r0
    LOG_DBG("profile %d", index);
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	2204      	movs	r2, #4
 800322e:	f362 0302 	bfi	r3, r2, #0, #3
 8003232:	f36f 03c5 	bfc	r3, #3, #3
 8003236:	4a0d      	ldr	r2, [pc, #52]	; (800326c <zmk_ble_prof_select+0x48>)
 8003238:	490d      	ldr	r1, [pc, #52]	; (8003270 <zmk_ble_prof_select+0x4c>)
 800323a:	1a52      	subs	r2, r2, r1
 800323c:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8003240:	f362 138f 	bfi	r3, r2, #6, #10
 8003244:	4602      	mov	r2, r0
 8003246:	490b      	ldr	r1, [pc, #44]	; (8003274 <zmk_ble_prof_select+0x50>)
 8003248:	480b      	ldr	r0, [pc, #44]	; (8003278 <zmk_ble_prof_select+0x54>)
 800324a:	f003 f9f9 	bl	8006640 <log_2>
    if (active_profile == index) {
 800324e:	4b0b      	ldr	r3, [pc, #44]	; (800327c <zmk_ble_prof_select+0x58>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	42a3      	cmp	r3, r4
 8003254:	d007      	beq.n	8003266 <zmk_ble_prof_select+0x42>
    active_profile = index;
 8003256:	4b09      	ldr	r3, [pc, #36]	; (800327c <zmk_ble_prof_select+0x58>)
 8003258:	701c      	strb	r4, [r3, #0]
    ble_save_profile();
 800325a:	f7ff f901 	bl	8002460 <ble_save_profile>
    update_advertising();
 800325e:	f7ff fddf 	bl	8002e20 <update_advertising>
    raise_profile_changed_event();
 8003262:	f7ff f8d7 	bl	8002414 <raise_profile_changed_event>
};
 8003266:	2000      	movs	r0, #0
 8003268:	bd10      	pop	{r4, pc}
 800326a:	bf00      	nop
 800326c:	08022c60 	.word	0x08022c60
 8003270:	08022b90 	.word	0x08022b90
 8003274:	080241b0 	.word	0x080241b0
 8003278:	08023f5c 	.word	0x08023f5c
 800327c:	20005964 	.word	0x20005964

08003280 <zmk_ble_prof_next>:
int zmk_ble_prof_next() {
 8003280:	b508      	push	{r3, lr}
    LOG_DBG("");
 8003282:	f04f 0200 	mov.w	r2, #0
 8003286:	2304      	movs	r3, #4
 8003288:	f363 0202 	bfi	r2, r3, #0, #3
 800328c:	f36f 02c5 	bfc	r2, #3, #3
 8003290:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <zmk_ble_prof_next+0x44>)
 8003292:	490d      	ldr	r1, [pc, #52]	; (80032c8 <zmk_ble_prof_next+0x48>)
 8003294:	1a5b      	subs	r3, r3, r1
 8003296:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800329a:	f363 128f 	bfi	r2, r3, #6, #10
 800329e:	490b      	ldr	r1, [pc, #44]	; (80032cc <zmk_ble_prof_next+0x4c>)
 80032a0:	480b      	ldr	r0, [pc, #44]	; (80032d0 <zmk_ble_prof_next+0x50>)
 80032a2:	f003 f94d 	bl	8006540 <log_1>
    return zmk_ble_prof_select((active_profile + 1) % PROFILE_COUNT);
 80032a6:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <zmk_ble_prof_next+0x54>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	3301      	adds	r3, #1
 80032ac:	480a      	ldr	r0, [pc, #40]	; (80032d8 <zmk_ble_prof_next+0x58>)
 80032ae:	fb80 2003 	smull	r2, r0, r0, r3
 80032b2:	1040      	asrs	r0, r0, #1
 80032b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80032b8:	1a18      	subs	r0, r3, r0
 80032ba:	b2c0      	uxtb	r0, r0
 80032bc:	f7ff ffb2 	bl	8003224 <zmk_ble_prof_select>
};
 80032c0:	bd08      	pop	{r3, pc}
 80032c2:	bf00      	nop
 80032c4:	08022c60 	.word	0x08022c60
 80032c8:	08022b90 	.word	0x08022b90
 80032cc:	080241c4 	.word	0x080241c4
 80032d0:	08023f44 	.word	0x08023f44
 80032d4:	20005964 	.word	0x20005964
 80032d8:	66666667 	.word	0x66666667

080032dc <zmk_ble_prof_prev>:
int zmk_ble_prof_prev() {
 80032dc:	b508      	push	{r3, lr}
    LOG_DBG("");
 80032de:	f04f 0200 	mov.w	r2, #0
 80032e2:	2304      	movs	r3, #4
 80032e4:	f363 0202 	bfi	r2, r3, #0, #3
 80032e8:	f36f 02c5 	bfc	r2, #3, #3
 80032ec:	4b0c      	ldr	r3, [pc, #48]	; (8003320 <zmk_ble_prof_prev+0x44>)
 80032ee:	490d      	ldr	r1, [pc, #52]	; (8003324 <zmk_ble_prof_prev+0x48>)
 80032f0:	1a5b      	subs	r3, r3, r1
 80032f2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80032f6:	f363 128f 	bfi	r2, r3, #6, #10
 80032fa:	490b      	ldr	r1, [pc, #44]	; (8003328 <zmk_ble_prof_prev+0x4c>)
 80032fc:	480b      	ldr	r0, [pc, #44]	; (800332c <zmk_ble_prof_prev+0x50>)
 80032fe:	f003 f91f 	bl	8006540 <log_1>
    return zmk_ble_prof_select((active_profile + PROFILE_COUNT - 1) % PROFILE_COUNT);
 8003302:	4b0b      	ldr	r3, [pc, #44]	; (8003330 <zmk_ble_prof_prev+0x54>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	3304      	adds	r3, #4
 8003308:	480a      	ldr	r0, [pc, #40]	; (8003334 <zmk_ble_prof_prev+0x58>)
 800330a:	fb80 2003 	smull	r2, r0, r0, r3
 800330e:	1040      	asrs	r0, r0, #1
 8003310:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003314:	1a18      	subs	r0, r3, r0
 8003316:	b2c0      	uxtb	r0, r0
 8003318:	f7ff ff84 	bl	8003224 <zmk_ble_prof_select>
};
 800331c:	bd08      	pop	{r3, pc}
 800331e:	bf00      	nop
 8003320:	08022c60 	.word	0x08022c60
 8003324:	08022b90 	.word	0x08022b90
 8003328:	080241d8 	.word	0x080241d8
 800332c:	08023f44 	.word	0x08023f44
 8003330:	20005964 	.word	0x20005964
 8003334:	66666667 	.word	0x66666667

08003338 <auth_pairing_complete>:
#endif /* IS_HOST_PERIPHERAL */

static void auth_pairing_complete(struct bt_conn *conn, bool bonded) {
 8003338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800333a:	b09b      	sub	sp, #108	; 0x6c
 800333c:	4605      	mov	r5, r0
    struct bt_conn_info info;
    char addr[BT_ADDR_LE_STR_LEN];
    const bt_addr_le_t *dst = bt_conn_get_dst(conn);
 800333e:	f01a fa1d 	bl	801d77c <bt_conn_get_dst>
 8003342:	4604      	mov	r4, r0
	switch (addr->type) {
 8003344:	7803      	ldrb	r3, [r0, #0]
 8003346:	2b03      	cmp	r3, #3
 8003348:	d846      	bhi.n	80033d8 <auth_pairing_complete+0xa0>
 800334a:	e8df f003 	tbb	[pc, r3]
 800334e:	3602      	.short	0x3602
 8003350:	403b      	.short	0x403b
		strcpy(type, "public");
 8003352:	4937      	ldr	r1, [pc, #220]	; (8003430 <auth_pairing_complete+0xf8>)
 8003354:	a807      	add	r0, sp, #28
 8003356:	f019 fa34 	bl	801c7c2 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
 800335a:	79a3      	ldrb	r3, [r4, #6]
 800335c:	7962      	ldrb	r2, [r4, #5]
 800335e:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
 8003360:	78e0      	ldrb	r0, [r4, #3]
 8003362:	78a6      	ldrb	r6, [r4, #2]
 8003364:	7867      	ldrb	r7, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
 8003366:	f10d 0c1c 	add.w	ip, sp, #28
 800336a:	f8cd c014 	str.w	ip, [sp, #20]
 800336e:	9704      	str	r7, [sp, #16]
 8003370:	9603      	str	r6, [sp, #12]
 8003372:	9002      	str	r0, [sp, #8]
 8003374:	9101      	str	r1, [sp, #4]
 8003376:	9200      	str	r2, [sp, #0]
 8003378:	4a2e      	ldr	r2, [pc, #184]	; (8003434 <auth_pairing_complete+0xfc>)
 800337a:	211e      	movs	r1, #30
 800337c:	a80a      	add	r0, sp, #40	; 0x28
 800337e:	f016 fe57 	bl	801a030 <snprintk>

    bt_addr_le_to_str(dst, addr, sizeof(addr));
    bt_conn_get_info(conn, &info);
 8003382:	a912      	add	r1, sp, #72	; 0x48
 8003384:	4628      	mov	r0, r5
 8003386:	f00d fa37 	bl	80107f8 <bt_conn_get_info>

    if (info.role != BT_CONN_ROLE_SLAVE) {
 800338a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 800338e:	2a01      	cmp	r2, #1
 8003390:	d028      	beq.n	80033e4 <auth_pairing_complete+0xac>
        LOG_DBG("SKIPPING FOR ROLE %d", info.role);
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	2104      	movs	r1, #4
 8003398:	f361 0302 	bfi	r3, r1, #0, #3
 800339c:	f36f 03c5 	bfc	r3, #3, #3
 80033a0:	4925      	ldr	r1, [pc, #148]	; (8003438 <auth_pairing_complete+0x100>)
 80033a2:	4826      	ldr	r0, [pc, #152]	; (800343c <auth_pairing_complete+0x104>)
 80033a4:	1a09      	subs	r1, r1, r0
 80033a6:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 80033aa:	f361 138f 	bfi	r3, r1, #6, #10
 80033ae:	4924      	ldr	r1, [pc, #144]	; (8003440 <auth_pairing_complete+0x108>)
 80033b0:	4824      	ldr	r0, [pc, #144]	; (8003444 <auth_pairing_complete+0x10c>)
 80033b2:	f003 f945 	bl	8006640 <log_2>
    }
#endif /* IS_HOST_PERIPHERAL */

    set_profile_address(active_profile, dst);
    update_advertising();
};
 80033b6:	b01b      	add	sp, #108	; 0x6c
 80033b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
 80033ba:	4923      	ldr	r1, [pc, #140]	; (8003448 <auth_pairing_complete+0x110>)
 80033bc:	a807      	add	r0, sp, #28
 80033be:	f019 fa00 	bl	801c7c2 <strcpy>
		break;
 80033c2:	e7ca      	b.n	800335a <auth_pairing_complete+0x22>
		strcpy(type, "public-id");
 80033c4:	4921      	ldr	r1, [pc, #132]	; (800344c <auth_pairing_complete+0x114>)
 80033c6:	a807      	add	r0, sp, #28
 80033c8:	f019 f9fb 	bl	801c7c2 <strcpy>
		break;
 80033cc:	e7c5      	b.n	800335a <auth_pairing_complete+0x22>
		strcpy(type, "random-id");
 80033ce:	4920      	ldr	r1, [pc, #128]	; (8003450 <auth_pairing_complete+0x118>)
 80033d0:	a807      	add	r0, sp, #28
 80033d2:	f019 f9f6 	bl	801c7c2 <strcpy>
		break;
 80033d6:	e7c0      	b.n	800335a <auth_pairing_complete+0x22>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
 80033d8:	4a1e      	ldr	r2, [pc, #120]	; (8003454 <auth_pairing_complete+0x11c>)
 80033da:	210a      	movs	r1, #10
 80033dc:	a807      	add	r0, sp, #28
 80033de:	f016 fe27 	bl	801a030 <snprintk>
		break;
 80033e2:	e7ba      	b.n	800335a <auth_pairing_complete+0x22>
    if (!zmk_ble_active_profile_is_open()) {
 80033e4:	f7ff fbfc 	bl	8002be0 <zmk_ble_active_profile_is_open>
 80033e8:	b138      	cbz	r0, 80033fa <auth_pairing_complete+0xc2>
    set_profile_address(active_profile, dst);
 80033ea:	4621      	mov	r1, r4
 80033ec:	4b1a      	ldr	r3, [pc, #104]	; (8003458 <auth_pairing_complete+0x120>)
 80033ee:	7818      	ldrb	r0, [r3, #0]
 80033f0:	f7ff fc68 	bl	8002cc4 <set_profile_address>
    update_advertising();
 80033f4:	f7ff fd14 	bl	8002e20 <update_advertising>
 80033f8:	e7dd      	b.n	80033b6 <auth_pairing_complete+0x7e>
        LOG_ERR("Pairing completed but current profile is not open: %s", log_strdup(addr));
 80033fa:	f04f 0500 	mov.w	r5, #0
 80033fe:	2301      	movs	r3, #1
 8003400:	f363 0502 	bfi	r5, r3, #0, #3
 8003404:	f36f 05c5 	bfc	r5, #3, #3
 8003408:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <auth_pairing_complete+0x100>)
 800340a:	4a0c      	ldr	r2, [pc, #48]	; (800343c <auth_pairing_complete+0x104>)
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8003412:	f363 158f 	bfi	r5, r3, #6, #10
 8003416:	a80a      	add	r0, sp, #40	; 0x28
 8003418:	f002 fec2 	bl	80061a0 <log_strdup>
 800341c:	4601      	mov	r1, r0
 800341e:	462a      	mov	r2, r5
 8003420:	480e      	ldr	r0, [pc, #56]	; (800345c <auth_pairing_complete+0x124>)
 8003422:	f003 f88d 	bl	8006540 <log_1>
        bt_unpair(BT_ID_DEFAULT, dst);
 8003426:	4621      	mov	r1, r4
 8003428:	2000      	movs	r0, #0
 800342a:	f00a fc8b 	bl	800dd44 <bt_unpair>
        return;
 800342e:	e7c2      	b.n	80033b6 <auth_pairing_complete+0x7e>
 8003430:	08023c50 	.word	0x08023c50
 8003434:	08023c78 	.word	0x08023c78
 8003438:	08022c60 	.word	0x08022c60
 800343c:	08022b90 	.word	0x08022b90
 8003440:	08024268 	.word	0x08024268
 8003444:	08023f6c 	.word	0x08023f6c
 8003448:	08023c58 	.word	0x08023c58
 800344c:	08023c60 	.word	0x08023c60
 8003450:	08023c6c 	.word	0x08023c6c
 8003454:	08027b48 	.word	0x08027b48
 8003458:	20005964 	.word	0x20005964
 800345c:	08023f88 	.word	0x08023f88

08003460 <connected>:
static void connected(struct bt_conn *conn, uint8_t err) {
 8003460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003462:	b095      	sub	sp, #84	; 0x54
 8003464:	4605      	mov	r5, r0
 8003466:	460e      	mov	r6, r1
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
 8003468:	f01a f988 	bl	801d77c <bt_conn_get_dst>
 800346c:	4604      	mov	r4, r0
	switch (addr->type) {
 800346e:	7803      	ldrb	r3, [r0, #0]
 8003470:	2b03      	cmp	r3, #3
 8003472:	d879      	bhi.n	8003568 <connected+0x108>
 8003474:	e8df f003 	tbb	[pc, r3]
 8003478:	736e6902 	.word	0x736e6902
		strcpy(type, "public");
 800347c:	4971      	ldr	r1, [pc, #452]	; (8003644 <connected+0x1e4>)
 800347e:	a807      	add	r0, sp, #28
 8003480:	f019 f99f 	bl	801c7c2 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
 8003484:	79a3      	ldrb	r3, [r4, #6]
 8003486:	7962      	ldrb	r2, [r4, #5]
 8003488:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
 800348a:	78e0      	ldrb	r0, [r4, #3]
 800348c:	78a7      	ldrb	r7, [r4, #2]
 800348e:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
 8003490:	f10d 0c1c 	add.w	ip, sp, #28
 8003494:	f8cd c014 	str.w	ip, [sp, #20]
 8003498:	9404      	str	r4, [sp, #16]
 800349a:	9703      	str	r7, [sp, #12]
 800349c:	9002      	str	r0, [sp, #8]
 800349e:	9101      	str	r1, [sp, #4]
 80034a0:	9200      	str	r2, [sp, #0]
 80034a2:	4a69      	ldr	r2, [pc, #420]	; (8003648 <connected+0x1e8>)
 80034a4:	211e      	movs	r1, #30
 80034a6:	a80a      	add	r0, sp, #40	; 0x28
 80034a8:	f016 fdc2 	bl	801a030 <snprintk>
    LOG_DBG("Connected thread: %p", k_current_get());
 80034ac:	f04f 0400 	mov.w	r4, #0
 80034b0:	2304      	movs	r3, #4
 80034b2:	f363 0402 	bfi	r4, r3, #0, #3
 80034b6:	f36f 04c5 	bfc	r4, #3, #3
 80034ba:	4b64      	ldr	r3, [pc, #400]	; (800364c <connected+0x1ec>)
 80034bc:	4a64      	ldr	r2, [pc, #400]	; (8003650 <connected+0x1f0>)
 80034be:	1a9b      	subs	r3, r3, r2
 80034c0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80034c4:	f363 148f 	bfi	r4, r3, #6, #10
 80034c8:	4f62      	ldr	r7, [pc, #392]	; (8003654 <connected+0x1f4>)
	return z_impl_k_current_get();
 80034ca:	f015 fbb7 	bl	8018c3c <z_impl_k_current_get>
 80034ce:	4602      	mov	r2, r0
 80034d0:	4623      	mov	r3, r4
 80034d2:	4639      	mov	r1, r7
 80034d4:	4860      	ldr	r0, [pc, #384]	; (8003658 <connected+0x1f8>)
 80034d6:	f003 f8b3 	bl	8006640 <log_2>
    advertising_status = ZMK_ADV_NONE;
 80034da:	4b60      	ldr	r3, [pc, #384]	; (800365c <connected+0x1fc>)
 80034dc:	2200      	movs	r2, #0
 80034de:	701a      	strb	r2, [r3, #0]
    if (err) {
 80034e0:	2e00      	cmp	r6, #0
 80034e2:	d147      	bne.n	8003574 <connected+0x114>
    LOG_DBG("Connected %s", log_strdup(addr));
 80034e4:	f04f 0400 	mov.w	r4, #0
 80034e8:	2304      	movs	r3, #4
 80034ea:	f363 0402 	bfi	r4, r3, #0, #3
 80034ee:	f36f 04c5 	bfc	r4, #3, #3
 80034f2:	4b56      	ldr	r3, [pc, #344]	; (800364c <connected+0x1ec>)
 80034f4:	4a56      	ldr	r2, [pc, #344]	; (8003650 <connected+0x1f0>)
 80034f6:	1a9b      	subs	r3, r3, r2
 80034f8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80034fc:	f363 148f 	bfi	r4, r3, #6, #10
 8003500:	a80a      	add	r0, sp, #40	; 0x28
 8003502:	f002 fe4d 	bl	80061a0 <log_strdup>
 8003506:	4602      	mov	r2, r0
 8003508:	4623      	mov	r3, r4
 800350a:	4639      	mov	r1, r7
 800350c:	4854      	ldr	r0, [pc, #336]	; (8003660 <connected+0x200>)
 800350e:	f003 f897 	bl	8006640 <log_2>
    err = bt_conn_le_param_update(conn, BT_LE_CONN_PARAM(0x0006, 0x000c, 30, 400));
 8003512:	ab12      	add	r3, sp, #72	; 0x48
 8003514:	4a53      	ldr	r2, [pc, #332]	; (8003664 <connected+0x204>)
 8003516:	e892 0003 	ldmia.w	r2, {r0, r1}
 800351a:	e883 0003 	stmia.w	r3, {r0, r1}
 800351e:	4619      	mov	r1, r3
 8003520:	4628      	mov	r0, r5
 8003522:	f01a f977 	bl	801d814 <bt_conn_le_param_update>
    if (err) {
 8003526:	f010 0fff 	tst.w	r0, #255	; 0xff
 800352a:	d13d      	bne.n	80035a8 <connected+0x148>
    if (bt_conn_set_security(conn, BT_SECURITY_L2)) {
 800352c:	2102      	movs	r1, #2
 800352e:	4628      	mov	r0, r5
 8003530:	f01a f814 	bl	801d55c <bt_conn_set_security>
 8003534:	2800      	cmp	r0, #0
 8003536:	d14a      	bne.n	80035ce <connected+0x16e>
    update_advertising();
 8003538:	f7ff fc72 	bl	8002e20 <update_advertising>
    if (is_conn_active_profile(conn)) {
 800353c:	4628      	mov	r0, r5
 800353e:	f7ff f913 	bl	8002768 <is_conn_active_profile>
 8003542:	2800      	cmp	r0, #0
 8003544:	d155      	bne.n	80035f2 <connected+0x192>
}
 8003546:	b015      	add	sp, #84	; 0x54
 8003548:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
 800354a:	4947      	ldr	r1, [pc, #284]	; (8003668 <connected+0x208>)
 800354c:	a807      	add	r0, sp, #28
 800354e:	f019 f938 	bl	801c7c2 <strcpy>
		break;
 8003552:	e797      	b.n	8003484 <connected+0x24>
		strcpy(type, "public-id");
 8003554:	4945      	ldr	r1, [pc, #276]	; (800366c <connected+0x20c>)
 8003556:	a807      	add	r0, sp, #28
 8003558:	f019 f933 	bl	801c7c2 <strcpy>
		break;
 800355c:	e792      	b.n	8003484 <connected+0x24>
		strcpy(type, "random-id");
 800355e:	4944      	ldr	r1, [pc, #272]	; (8003670 <connected+0x210>)
 8003560:	a807      	add	r0, sp, #28
 8003562:	f019 f92e 	bl	801c7c2 <strcpy>
		break;
 8003566:	e78d      	b.n	8003484 <connected+0x24>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
 8003568:	4a42      	ldr	r2, [pc, #264]	; (8003674 <connected+0x214>)
 800356a:	210a      	movs	r1, #10
 800356c:	a807      	add	r0, sp, #28
 800356e:	f016 fd5f 	bl	801a030 <snprintk>
		break;
 8003572:	e787      	b.n	8003484 <connected+0x24>
        LOG_WRN("Failed to connect to %s (%u)", log_strdup(addr), err);
 8003574:	f04f 0400 	mov.w	r4, #0
 8003578:	2302      	movs	r3, #2
 800357a:	f363 0402 	bfi	r4, r3, #0, #3
 800357e:	f36f 04c5 	bfc	r4, #3, #3
 8003582:	4b32      	ldr	r3, [pc, #200]	; (800364c <connected+0x1ec>)
 8003584:	4a32      	ldr	r2, [pc, #200]	; (8003650 <connected+0x1f0>)
 8003586:	1a9b      	subs	r3, r3, r2
 8003588:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800358c:	f363 148f 	bfi	r4, r3, #6, #10
 8003590:	a80a      	add	r0, sp, #40	; 0x28
 8003592:	f002 fe05 	bl	80061a0 <log_strdup>
 8003596:	4601      	mov	r1, r0
 8003598:	4623      	mov	r3, r4
 800359a:	4632      	mov	r2, r6
 800359c:	4836      	ldr	r0, [pc, #216]	; (8003678 <connected+0x218>)
 800359e:	f003 f84f 	bl	8006640 <log_2>
        update_advertising();
 80035a2:	f7ff fc3d 	bl	8002e20 <update_advertising>
        return;
 80035a6:	e7ce      	b.n	8003546 <connected+0xe6>
        LOG_WRN("Failed to update LE parameters (err %d)", err);
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	2302      	movs	r3, #2
 80035ae:	f363 0202 	bfi	r2, r3, #0, #3
 80035b2:	f36f 02c5 	bfc	r2, #3, #3
 80035b6:	4b25      	ldr	r3, [pc, #148]	; (800364c <connected+0x1ec>)
 80035b8:	4925      	ldr	r1, [pc, #148]	; (8003650 <connected+0x1f0>)
 80035ba:	1a5b      	subs	r3, r3, r1
 80035bc:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80035c0:	f363 128f 	bfi	r2, r3, #6, #10
 80035c4:	b2c1      	uxtb	r1, r0
 80035c6:	482d      	ldr	r0, [pc, #180]	; (800367c <connected+0x21c>)
 80035c8:	f002 ffba 	bl	8006540 <log_1>
 80035cc:	e7ae      	b.n	800352c <connected+0xcc>
        LOG_ERR("Failed to set security");
 80035ce:	f04f 0100 	mov.w	r1, #0
 80035d2:	2301      	movs	r3, #1
 80035d4:	f363 0102 	bfi	r1, r3, #0, #3
 80035d8:	f36f 01c5 	bfc	r1, #3, #3
 80035dc:	4b1b      	ldr	r3, [pc, #108]	; (800364c <connected+0x1ec>)
 80035de:	4a1c      	ldr	r2, [pc, #112]	; (8003650 <connected+0x1f0>)
 80035e0:	1a9b      	subs	r3, r3, r2
 80035e2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80035e6:	f363 118f 	bfi	r1, r3, #6, #10
 80035ea:	4825      	ldr	r0, [pc, #148]	; (8003680 <connected+0x220>)
 80035ec:	f003 f918 	bl	8006820 <log_0>
 80035f0:	e7a2      	b.n	8003538 <connected+0xd8>
        LOG_DBG("Active profile connected");
 80035f2:	f04f 0200 	mov.w	r2, #0
 80035f6:	2304      	movs	r3, #4
 80035f8:	f363 0202 	bfi	r2, r3, #0, #3
 80035fc:	f36f 02c5 	bfc	r2, #3, #3
 8003600:	4b12      	ldr	r3, [pc, #72]	; (800364c <connected+0x1ec>)
 8003602:	4913      	ldr	r1, [pc, #76]	; (8003650 <connected+0x1f0>)
 8003604:	1a5b      	subs	r3, r3, r1
 8003606:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800360a:	f363 128f 	bfi	r2, r3, #6, #10
 800360e:	4639      	mov	r1, r7
 8003610:	481c      	ldr	r0, [pc, #112]	; (8003684 <connected+0x224>)
 8003612:	f002 ff95 	bl	8006540 <log_1>
 8003616:	4b1c      	ldr	r3, [pc, #112]	; (8003688 <connected+0x228>)
 8003618:	f3bf 8f5b 	dmb	ish
 800361c:	e853 2f00 	ldrex	r2, [r3]
 8003620:	f042 0101 	orr.w	r1, r2, #1
 8003624:	e843 1000 	strex	r0, r1, [r3]
 8003628:	2800      	cmp	r0, #0
 800362a:	d1f7      	bne.n	800361c <connected+0x1bc>
 800362c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 8003630:	f012 0f01 	tst.w	r2, #1
 8003634:	d187      	bne.n	8003546 <connected+0xe6>
		k_queue_append(&work_q->queue, work);
 8003636:	f1a3 0108 	sub.w	r1, r3, #8
 800363a:	4814      	ldr	r0, [pc, #80]	; (800368c <connected+0x22c>)
 800363c:	f01e fc3a 	bl	8021eb4 <k_queue_append>
}
 8003640:	e781      	b.n	8003546 <connected+0xe6>
 8003642:	bf00      	nop
 8003644:	08023c50 	.word	0x08023c50
 8003648:	08023c78 	.word	0x08023c78
 800364c:	08022c60 	.word	0x08022c60
 8003650:	08022b90 	.word	0x08022b90
 8003654:	08024204 	.word	0x08024204
 8003658:	08023fc0 	.word	0x08023fc0
 800365c:	20005965 	.word	0x20005965
 8003660:	08023ffc 	.word	0x08023ffc
 8003664:	08022c8c 	.word	0x08022c8c
 8003668:	08023c58 	.word	0x08023c58
 800366c:	08023c60 	.word	0x08023c60
 8003670:	08023c6c 	.word	0x08023c6c
 8003674:	08027b48 	.word	0x08027b48
 8003678:	08023fdc 	.word	0x08023fdc
 800367c:	08024010 	.word	0x08024010
 8003680:	08024038 	.word	0x08024038
 8003684:	08024050 	.word	0x08024050
 8003688:	200007e4 	.word	0x200007e4
 800368c:	20003310 	.word	0x20003310

08003690 <zmk_ble_ready>:
    .passkey_entry = auth_passkey_entry,
#endif
    .cancel = auth_cancel,
};

static void zmk_ble_ready(int err) {
 8003690:	b510      	push	{r4, lr}
 8003692:	4604      	mov	r4, r0
    LOG_DBG("ready? %d", err);
 8003694:	f04f 0300 	mov.w	r3, #0
 8003698:	2204      	movs	r2, #4
 800369a:	f362 0302 	bfi	r3, r2, #0, #3
 800369e:	f36f 03c5 	bfc	r3, #3, #3
 80036a2:	4a11      	ldr	r2, [pc, #68]	; (80036e8 <zmk_ble_ready+0x58>)
 80036a4:	4911      	ldr	r1, [pc, #68]	; (80036ec <zmk_ble_ready+0x5c>)
 80036a6:	1a52      	subs	r2, r2, r1
 80036a8:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 80036ac:	f362 138f 	bfi	r3, r2, #6, #10
 80036b0:	4602      	mov	r2, r0
 80036b2:	490f      	ldr	r1, [pc, #60]	; (80036f0 <zmk_ble_ready+0x60>)
 80036b4:	480f      	ldr	r0, [pc, #60]	; (80036f4 <zmk_ble_ready+0x64>)
 80036b6:	f002 ffc3 	bl	8006640 <log_2>
    if (err) {
 80036ba:	b914      	cbnz	r4, 80036c2 <zmk_ble_ready+0x32>
        LOG_ERR("Bluetooth init failed (err %d)", err);
        return;
    }

    update_advertising();
 80036bc:	f7ff fbb0 	bl	8002e20 <update_advertising>
}
 80036c0:	bd10      	pop	{r4, pc}
        LOG_ERR("Bluetooth init failed (err %d)", err);
 80036c2:	f04f 0200 	mov.w	r2, #0
 80036c6:	2301      	movs	r3, #1
 80036c8:	f363 0202 	bfi	r2, r3, #0, #3
 80036cc:	f36f 02c5 	bfc	r2, #3, #3
 80036d0:	4b05      	ldr	r3, [pc, #20]	; (80036e8 <zmk_ble_ready+0x58>)
 80036d2:	4906      	ldr	r1, [pc, #24]	; (80036ec <zmk_ble_ready+0x5c>)
 80036d4:	1a5b      	subs	r3, r3, r1
 80036d6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80036da:	f363 128f 	bfi	r2, r3, #6, #10
 80036de:	4621      	mov	r1, r4
 80036e0:	4805      	ldr	r0, [pc, #20]	; (80036f8 <zmk_ble_ready+0x68>)
 80036e2:	f002 ff2d 	bl	8006540 <log_1>
        return;
 80036e6:	e7eb      	b.n	80036c0 <zmk_ble_ready+0x30>
 80036e8:	08022c60 	.word	0x08022c60
 80036ec:	08022b90 	.word	0x08022b90
 80036f0:	08024280 	.word	0x08024280
 80036f4:	08024070 	.word	0x08024070
 80036f8:	08024080 	.word	0x08024080

080036fc <zmk_ble_init>:

static int zmk_ble_init(const struct device *_arg) {
 80036fc:	b570      	push	{r4, r5, r6, lr}
 80036fe:	b084      	sub	sp, #16
    int err = bt_enable(NULL);
 8003700:	2000      	movs	r0, #0
 8003702:	f00b fc6d 	bl	800efe0 <bt_enable>

    if (err) {
 8003706:	bb58      	cbnz	r0, 8003760 <zmk_ble_init+0x64>
        LOG_ERR("BLUETOOTH FAILED (%d)", err);
        return err;
    }

#if IS_ENABLED(CONFIG_SETTINGS)
    settings_subsys_init();
 8003708:	f005 f922 	bl	8008950 <settings_subsys_init>

    err = settings_register(&profiles_handler);
 800370c:	483e      	ldr	r0, [pc, #248]	; (8003808 <zmk_ble_init+0x10c>)
 800370e:	f004 ffe7 	bl	80086e0 <settings_register>
    if (err) {
 8003712:	4605      	mov	r5, r0
 8003714:	2800      	cmp	r0, #0
 8003716:	d137      	bne.n	8003788 <zmk_ble_init+0x8c>
        LOG_ERR("Failed to setup the profile settings handler (err %d)", err);
        return err;
    }

    k_delayed_work_init(&ble_save_work, ble_save_profile_work);
 8003718:	493c      	ldr	r1, [pc, #240]	; (800380c <zmk_ble_init+0x110>)
 800371a:	483d      	ldr	r0, [pc, #244]	; (8003810 <zmk_ble_init+0x114>)
 800371c:	f01e fe28 	bl	8022370 <k_delayed_work_init>

    settings_load_subtree("ble");
 8003720:	483c      	ldr	r0, [pc, #240]	; (8003814 <zmk_ble_init+0x118>)
 8003722:	f004 ff7d 	bl	8008620 <settings_load_subtree>
    settings_load_subtree("bt");
 8003726:	483c      	ldr	r0, [pc, #240]	; (8003818 <zmk_ble_init+0x11c>)
 8003728:	f004 ff7a 	bl	8008620 <settings_load_subtree>

#endif

#if IS_ENABLED(CONFIG_ZMK_BLE_CLEAR_BONDS_ON_START)
    LOG_WRN("Clearing all existing BLE bond information from the keyboard");
 800372c:	f04f 0100 	mov.w	r1, #0
 8003730:	2302      	movs	r3, #2
 8003732:	f363 0102 	bfi	r1, r3, #0, #3
 8003736:	f36f 01c5 	bfc	r1, #3, #3
 800373a:	4b38      	ldr	r3, [pc, #224]	; (800381c <zmk_ble_init+0x120>)
 800373c:	4a38      	ldr	r2, [pc, #224]	; (8003820 <zmk_ble_init+0x124>)
 800373e:	1a9b      	subs	r3, r3, r2
 8003740:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8003744:	f363 118f 	bfi	r1, r3, #6, #10
 8003748:	4836      	ldr	r0, [pc, #216]	; (8003824 <zmk_ble_init+0x128>)
 800374a:	f003 f869 	bl	8006820 <log_0>

    for (int i = 0; i < 10; i++) {
 800374e:	462c      	mov	r4, r5
 8003750:	2c09      	cmp	r4, #9
 8003752:	dc2c      	bgt.n	80037ae <zmk_ble_init+0xb2>
        bt_unpair(i, NULL);
 8003754:	2100      	movs	r1, #0
 8003756:	b2e0      	uxtb	r0, r4
 8003758:	f00a faf4 	bl	800dd44 <bt_unpair>
    for (int i = 0; i < 10; i++) {
 800375c:	3401      	adds	r4, #1
 800375e:	e7f7      	b.n	8003750 <zmk_ble_init+0x54>
 8003760:	4605      	mov	r5, r0
        LOG_ERR("BLUETOOTH FAILED (%d)", err);
 8003762:	f04f 0200 	mov.w	r2, #0
 8003766:	2301      	movs	r3, #1
 8003768:	f363 0202 	bfi	r2, r3, #0, #3
 800376c:	f36f 02c5 	bfc	r2, #3, #3
 8003770:	4b2a      	ldr	r3, [pc, #168]	; (800381c <zmk_ble_init+0x120>)
 8003772:	492b      	ldr	r1, [pc, #172]	; (8003820 <zmk_ble_init+0x124>)
 8003774:	1a5b      	subs	r3, r3, r1
 8003776:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800377a:	f363 128f 	bfi	r2, r3, #6, #10
 800377e:	4601      	mov	r1, r0
 8003780:	4829      	ldr	r0, [pc, #164]	; (8003828 <zmk_ble_init+0x12c>)
 8003782:	f002 fedd 	bl	8006540 <log_1>
        return err;
 8003786:	e03c      	b.n	8003802 <zmk_ble_init+0x106>
        LOG_ERR("Failed to setup the profile settings handler (err %d)", err);
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	2301      	movs	r3, #1
 800378e:	f363 0202 	bfi	r2, r3, #0, #3
 8003792:	f36f 02c5 	bfc	r2, #3, #3
 8003796:	4b21      	ldr	r3, [pc, #132]	; (800381c <zmk_ble_init+0x120>)
 8003798:	4921      	ldr	r1, [pc, #132]	; (8003820 <zmk_ble_init+0x124>)
 800379a:	1a5b      	subs	r3, r3, r1
 800379c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80037a0:	f363 128f 	bfi	r2, r3, #6, #10
 80037a4:	4601      	mov	r1, r0
 80037a6:	4821      	ldr	r0, [pc, #132]	; (800382c <zmk_ble_init+0x130>)
 80037a8:	f002 feca 	bl	8006540 <log_1>
        return err;
 80037ac:	e029      	b.n	8003802 <zmk_ble_init+0x106>
    }

    for (int i = 0; i < PROFILE_COUNT; i++) {
 80037ae:	462c      	mov	r4, r5
 80037b0:	e000      	b.n	80037b4 <zmk_ble_init+0xb8>
 80037b2:	3401      	adds	r4, #1
 80037b4:	2c04      	cmp	r4, #4
 80037b6:	dc1b      	bgt.n	80037f0 <zmk_ble_init+0xf4>
        char setting_name[15];
        sprintf(setting_name, "ble/profiles/%d", i);
 80037b8:	4622      	mov	r2, r4
 80037ba:	491d      	ldr	r1, [pc, #116]	; (8003830 <zmk_ble_init+0x134>)
 80037bc:	4668      	mov	r0, sp
 80037be:	f008 f977 	bl	800bab0 <sprintf>

        err = settings_delete(setting_name);
 80037c2:	4668      	mov	r0, sp
 80037c4:	f018 f8b4 	bl	801b930 <settings_delete>
        if (err) {
 80037c8:	4601      	mov	r1, r0
 80037ca:	2800      	cmp	r0, #0
 80037cc:	d0f1      	beq.n	80037b2 <zmk_ble_init+0xb6>
            LOG_ERR("Failed to delete setting: %d", err);
 80037ce:	2301      	movs	r3, #1
 80037d0:	f363 0602 	bfi	r6, r3, #0, #3
 80037d4:	f36f 06c5 	bfc	r6, #3, #3
 80037d8:	4b10      	ldr	r3, [pc, #64]	; (800381c <zmk_ble_init+0x120>)
 80037da:	4a11      	ldr	r2, [pc, #68]	; (8003820 <zmk_ble_init+0x124>)
 80037dc:	1a9b      	subs	r3, r3, r2
 80037de:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80037e2:	f363 168f 	bfi	r6, r3, #6, #10
 80037e6:	4632      	mov	r2, r6
 80037e8:	4812      	ldr	r0, [pc, #72]	; (8003834 <zmk_ble_init+0x138>)
 80037ea:	f002 fea9 	bl	8006540 <log_1>
 80037ee:	e7e0      	b.n	80037b2 <zmk_ble_init+0xb6>
        }
    }
#endif

    bt_conn_cb_register(&conn_callbacks);
 80037f0:	4811      	ldr	r0, [pc, #68]	; (8003838 <zmk_ble_init+0x13c>)
 80037f2:	f00c fc8d 	bl	8010110 <bt_conn_cb_register>
    bt_conn_auth_cb_register(&zmk_ble_auth_cb_display);
 80037f6:	4811      	ldr	r0, [pc, #68]	; (800383c <zmk_ble_init+0x140>)
 80037f8:	f00d fb22 	bl	8010e40 <bt_conn_auth_cb_register>

    zmk_ble_ready(0);
 80037fc:	2000      	movs	r0, #0
 80037fe:	f7ff ff47 	bl	8003690 <zmk_ble_ready>

    return 0;
}
 8003802:	4628      	mov	r0, r5
 8003804:	b004      	add	sp, #16
 8003806:	bd70      	pop	{r4, r5, r6, pc}
 8003808:	200007c4 	.word	0x200007c4
 800380c:	08002449 	.word	0x08002449
 8003810:	20001978 	.word	0x20001978
 8003814:	08027848 	.word	0x08027848
 8003818:	080240f0 	.word	0x080240f0
 800381c:	08022c60 	.word	0x08022c60
 8003820:	08022b90 	.word	0x08022b90
 8003824:	080240f4 	.word	0x080240f4
 8003828:	080240a0 	.word	0x080240a0
 800382c:	080240b8 	.word	0x080240b8
 8003830:	08023e64 	.word	0x08023e64
 8003834:	08024134 	.word	0x08024134
 8003838:	200007a4 	.word	0x200007a4
 800383c:	200007f4 	.word	0x200007f4

08003840 <zmk_ble_set_peripheral_addr>:
void zmk_ble_set_peripheral_addr(bt_addr_le_t *addr) {
 8003840:	b510      	push	{r4, lr}
 8003842:	4604      	mov	r4, r0
    memcpy(&peripheral_addr, addr, sizeof(bt_addr_le_t));
 8003844:	2207      	movs	r2, #7
 8003846:	4601      	mov	r1, r0
 8003848:	4804      	ldr	r0, [pc, #16]	; (800385c <zmk_ble_set_peripheral_addr+0x1c>)
 800384a:	f019 f830 	bl	801c8ae <memcpy>
    settings_save_one("ble/peripheral_address", addr, sizeof(bt_addr_le_t));
 800384e:	2207      	movs	r2, #7
 8003850:	4621      	mov	r1, r4
 8003852:	4803      	ldr	r0, [pc, #12]	; (8003860 <zmk_ble_set_peripheral_addr+0x20>)
 8003854:	f004 fea8 	bl	80085a8 <settings_save_one>
}
 8003858:	bd10      	pop	{r4, pc}
 800385a:	bf00      	nop
 800385c:	2000352c 	.word	0x2000352c
 8003860:	08024154 	.word	0x08024154

08003864 <zmk_battery_update>:
#include <zmk/event_manager.h>
#include <zmk/events/battery_state_changed.h>

const struct device *battery;

static int zmk_battery_update(const struct device *battery) {
 8003864:	b530      	push	{r4, r5, lr}
 8003866:	b083      	sub	sp, #12
 8003868:	4604      	mov	r4, r0
	const struct sensor_driver_api *api =
 800386a:	6883      	ldr	r3, [r0, #8]
	return api->sample_fetch(dev, type);
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	212b      	movs	r1, #43	; 0x2b
 8003870:	4798      	blx	r3
    struct sensor_value state_of_charge;

    int rc = sensor_sample_fetch_chan(battery, SENSOR_CHAN_GAUGE_STATE_OF_CHARGE);

    if (rc != 0) {
 8003872:	bb58      	cbnz	r0, 80038cc <zmk_battery_update+0x68>
	const struct sensor_driver_api *api =
 8003874:	68a3      	ldr	r3, [r4, #8]
	return api->channel_get(dev, chan, val);
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	466a      	mov	r2, sp
 800387a:	212b      	movs	r1, #43	; 0x2b
 800387c:	4620      	mov	r0, r4
 800387e:	4798      	blx	r3
        return rc;
    }

    rc = sensor_channel_get(battery, SENSOR_CHAN_GAUGE_STATE_OF_CHARGE, &state_of_charge);

    if (rc != 0) {
 8003880:	4605      	mov	r5, r0
 8003882:	2800      	cmp	r0, #0
 8003884:	d137      	bne.n	80038f6 <zmk_battery_update+0x92>
        LOG_DBG("Failed to get battery state of charge: %d", rc);
        return rc;
    }

    LOG_DBG("Setting BAS GATT battery level to %d.", state_of_charge.val1);
 8003886:	f04f 0300 	mov.w	r3, #0
 800388a:	2204      	movs	r2, #4
 800388c:	f362 0302 	bfi	r3, r2, #0, #3
 8003890:	f36f 03c5 	bfc	r3, #3, #3
 8003894:	4a2b      	ldr	r2, [pc, #172]	; (8003944 <zmk_battery_update+0xe0>)
 8003896:	492c      	ldr	r1, [pc, #176]	; (8003948 <zmk_battery_update+0xe4>)
 8003898:	1a52      	subs	r2, r2, r1
 800389a:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 800389e:	f362 138f 	bfi	r3, r2, #6, #10
 80038a2:	9a00      	ldr	r2, [sp, #0]
 80038a4:	4929      	ldr	r1, [pc, #164]	; (800394c <zmk_battery_update+0xe8>)
 80038a6:	482a      	ldr	r0, [pc, #168]	; (8003950 <zmk_battery_update+0xec>)
 80038a8:	f002 feca 	bl	8006640 <log_2>

    rc = bt_bas_set_battery_level(state_of_charge.val1);
 80038ac:	f89d 0000 	ldrb.w	r0, [sp]
 80038b0:	f003 fb08 	bl	8006ec4 <bt_bas_set_battery_level>

    if (rc != 0) {
 80038b4:	4605      	mov	r5, r0
 80038b6:	bb90      	cbnz	r0, 800391e <zmk_battery_update+0xba>
        LOG_WRN("Failed to set BAS GATT battery level (err %d)", rc);
        return rc;
    }

    return ZMK_EVENT_RAISE(new_zmk_battery_state_changed(
 80038b8:	f89d 0000 	ldrb.w	r0, [sp]
 80038bc:	f7fd f9dc 	bl	8000c78 <new_zmk_battery_state_changed>
 80038c0:	f015 ff94 	bl	80197ec <zmk_event_manager_raise>
 80038c4:	4605      	mov	r5, r0
        (struct zmk_battery_state_changed){.state_of_charge = state_of_charge.val1}));
}
 80038c6:	4628      	mov	r0, r5
 80038c8:	b003      	add	sp, #12
 80038ca:	bd30      	pop	{r4, r5, pc}
 80038cc:	4605      	mov	r5, r0
        LOG_DBG("Failed to fetch battery values: %d", rc);
 80038ce:	f04f 0300 	mov.w	r3, #0
 80038d2:	2204      	movs	r2, #4
 80038d4:	f362 0302 	bfi	r3, r2, #0, #3
 80038d8:	f36f 03c5 	bfc	r3, #3, #3
 80038dc:	4a19      	ldr	r2, [pc, #100]	; (8003944 <zmk_battery_update+0xe0>)
 80038de:	491a      	ldr	r1, [pc, #104]	; (8003948 <zmk_battery_update+0xe4>)
 80038e0:	1a52      	subs	r2, r2, r1
 80038e2:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 80038e6:	f362 138f 	bfi	r3, r2, #6, #10
 80038ea:	4602      	mov	r2, r0
 80038ec:	4917      	ldr	r1, [pc, #92]	; (800394c <zmk_battery_update+0xe8>)
 80038ee:	4819      	ldr	r0, [pc, #100]	; (8003954 <zmk_battery_update+0xf0>)
 80038f0:	f002 fea6 	bl	8006640 <log_2>
        return rc;
 80038f4:	e7e7      	b.n	80038c6 <zmk_battery_update+0x62>
        LOG_DBG("Failed to get battery state of charge: %d", rc);
 80038f6:	f04f 0300 	mov.w	r3, #0
 80038fa:	2204      	movs	r2, #4
 80038fc:	f362 0302 	bfi	r3, r2, #0, #3
 8003900:	f36f 03c5 	bfc	r3, #3, #3
 8003904:	4a0f      	ldr	r2, [pc, #60]	; (8003944 <zmk_battery_update+0xe0>)
 8003906:	4910      	ldr	r1, [pc, #64]	; (8003948 <zmk_battery_update+0xe4>)
 8003908:	1a52      	subs	r2, r2, r1
 800390a:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 800390e:	f362 138f 	bfi	r3, r2, #6, #10
 8003912:	4602      	mov	r2, r0
 8003914:	490d      	ldr	r1, [pc, #52]	; (800394c <zmk_battery_update+0xe8>)
 8003916:	4810      	ldr	r0, [pc, #64]	; (8003958 <zmk_battery_update+0xf4>)
 8003918:	f002 fe92 	bl	8006640 <log_2>
        return rc;
 800391c:	e7d3      	b.n	80038c6 <zmk_battery_update+0x62>
        LOG_WRN("Failed to set BAS GATT battery level (err %d)", rc);
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	2302      	movs	r3, #2
 8003924:	f363 0202 	bfi	r2, r3, #0, #3
 8003928:	f36f 02c5 	bfc	r2, #3, #3
 800392c:	4b05      	ldr	r3, [pc, #20]	; (8003944 <zmk_battery_update+0xe0>)
 800392e:	4906      	ldr	r1, [pc, #24]	; (8003948 <zmk_battery_update+0xe4>)
 8003930:	1a5b      	subs	r3, r3, r1
 8003932:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8003936:	f363 128f 	bfi	r2, r3, #6, #10
 800393a:	4601      	mov	r1, r0
 800393c:	4807      	ldr	r0, [pc, #28]	; (800395c <zmk_battery_update+0xf8>)
 800393e:	f002 fdff 	bl	8006540 <log_1>
        return rc;
 8003942:	e7c0      	b.n	80038c6 <zmk_battery_update+0x62>
 8003944:	08022c60 	.word	0x08022c60
 8003948:	08022b90 	.word	0x08022b90
 800394c:	080243c4 	.word	0x080243c4
 8003950:	08024308 	.word	0x08024308
 8003954:	080242b0 	.word	0x080242b0
 8003958:	080242d8 	.word	0x080242d8
 800395c:	08024334 	.word	0x08024334

08003960 <zmk_battery_work>:

static void zmk_battery_work(struct k_work *work) {
 8003960:	b508      	push	{r3, lr}
    int rc = zmk_battery_update(battery);
 8003962:	4b0d      	ldr	r3, [pc, #52]	; (8003998 <zmk_battery_work+0x38>)
 8003964:	6818      	ldr	r0, [r3, #0]
 8003966:	f7ff ff7d 	bl	8003864 <zmk_battery_update>

    if (rc != 0) {
 800396a:	b900      	cbnz	r0, 800396e <zmk_battery_work+0xe>
        LOG_DBG("Failed to update battery value: %d.", rc);
    }
}
 800396c:	bd08      	pop	{r3, pc}
 800396e:	4602      	mov	r2, r0
        LOG_DBG("Failed to update battery value: %d.", rc);
 8003970:	f04f 0300 	mov.w	r3, #0
 8003974:	2104      	movs	r1, #4
 8003976:	f361 0302 	bfi	r3, r1, #0, #3
 800397a:	f36f 03c5 	bfc	r3, #3, #3
 800397e:	4907      	ldr	r1, [pc, #28]	; (800399c <zmk_battery_work+0x3c>)
 8003980:	4807      	ldr	r0, [pc, #28]	; (80039a0 <zmk_battery_work+0x40>)
 8003982:	1a09      	subs	r1, r1, r0
 8003984:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 8003988:	f361 138f 	bfi	r3, r1, #6, #10
 800398c:	4905      	ldr	r1, [pc, #20]	; (80039a4 <zmk_battery_work+0x44>)
 800398e:	4806      	ldr	r0, [pc, #24]	; (80039a8 <zmk_battery_work+0x48>)
 8003990:	f002 fe56 	bl	8006640 <log_2>
}
 8003994:	e7ea      	b.n	800396c <zmk_battery_work+0xc>
 8003996:	bf00      	nop
 8003998:	200035a4 	.word	0x200035a4
 800399c:	08022c60 	.word	0x08022c60
 80039a0:	08022b90 	.word	0x08022b90
 80039a4:	080243d8 	.word	0x080243d8
 80039a8:	08024364 	.word	0x08024364

080039ac <zmk_battery_timer>:

K_WORK_DEFINE(battery_work, zmk_battery_work);

static void zmk_battery_timer(struct k_timer *timer) { k_work_submit(&battery_work); }
 80039ac:	b508      	push	{r3, lr}
 80039ae:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <zmk_battery_timer+0x30>)
 80039b0:	f3bf 8f5b 	dmb	ish
 80039b4:	e853 2f00 	ldrex	r2, [r3]
 80039b8:	f042 0101 	orr.w	r1, r2, #1
 80039bc:	e843 1000 	strex	r0, r1, [r3]
 80039c0:	2800      	cmp	r0, #0
 80039c2:	d1f7      	bne.n	80039b4 <zmk_battery_timer+0x8>
 80039c4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 80039c8:	f012 0f01 	tst.w	r2, #1
 80039cc:	d000      	beq.n	80039d0 <zmk_battery_timer+0x24>
 80039ce:	bd08      	pop	{r3, pc}
		k_queue_append(&work_q->queue, work);
 80039d0:	f1a3 0108 	sub.w	r1, r3, #8
 80039d4:	4802      	ldr	r0, [pc, #8]	; (80039e0 <zmk_battery_timer+0x34>)
 80039d6:	f01e fa6d 	bl	8021eb4 <k_queue_append>
 80039da:	e7f8      	b.n	80039ce <zmk_battery_timer+0x22>
 80039dc:	20000824 	.word	0x20000824
 80039e0:	20003310 	.word	0x20003310

080039e4 <zmk_battery_init>:

K_TIMER_DEFINE(battery_timer, zmk_battery_timer, NULL);

static int zmk_battery_init(const struct device *_arg) {
 80039e4:	b510      	push	{r4, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	481e      	ldr	r0, [pc, #120]	; (8003a64 <zmk_battery_init+0x80>)
 80039ea:	f014 f931 	bl	8017c50 <z_impl_device_get_binding>
    battery = device_get_binding("BATTERY");
 80039ee:	4b1e      	ldr	r3, [pc, #120]	; (8003a68 <zmk_battery_init+0x84>)
 80039f0:	6018      	str	r0, [r3, #0]

    if (battery == NULL) {
 80039f2:	b168      	cbz	r0, 8003a10 <zmk_battery_init+0x2c>
        LOG_DBG("No battery device labelled BATTERY found.");
        return -ENODEV;
    }

    int rc = zmk_battery_update(battery);
 80039f4:	f7ff ff36 	bl	8003864 <zmk_battery_update>

    if (rc != 0) {
 80039f8:	4604      	mov	r4, r0
 80039fa:	b9f0      	cbnz	r0, 8003a3a <zmk_battery_init+0x56>
        LOG_DBG("Failed to update battery value: %d.", rc);
        return rc;
    }

    k_timer_start(&battery_timer, K_MINUTES(1), K_MINUTES(1));
 80039fc:	4a1b      	ldr	r2, [pc, #108]	; (8003a6c <zmk_battery_init+0x88>)
 80039fe:	2300      	movs	r3, #0
	z_impl_k_timer_start(timer, duration, period);
 8003a00:	e9cd 2300 	strd	r2, r3, [sp]
 8003a04:	481a      	ldr	r0, [pc, #104]	; (8003a70 <zmk_battery_init+0x8c>)
 8003a06:	f015 fc0f 	bl	8019228 <z_impl_k_timer_start>

    return 0;
}
 8003a0a:	4620      	mov	r0, r4
 8003a0c:	b002      	add	sp, #8
 8003a0e:	bd10      	pop	{r4, pc}
        LOG_DBG("No battery device labelled BATTERY found.");
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	2304      	movs	r3, #4
 8003a16:	f363 0202 	bfi	r2, r3, #0, #3
 8003a1a:	f36f 02c5 	bfc	r2, #3, #3
 8003a1e:	4b15      	ldr	r3, [pc, #84]	; (8003a74 <zmk_battery_init+0x90>)
 8003a20:	4915      	ldr	r1, [pc, #84]	; (8003a78 <zmk_battery_init+0x94>)
 8003a22:	1a5b      	subs	r3, r3, r1
 8003a24:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8003a28:	f363 128f 	bfi	r2, r3, #6, #10
 8003a2c:	4913      	ldr	r1, [pc, #76]	; (8003a7c <zmk_battery_init+0x98>)
 8003a2e:	4814      	ldr	r0, [pc, #80]	; (8003a80 <zmk_battery_init+0x9c>)
 8003a30:	f002 fd86 	bl	8006540 <log_1>
        return -ENODEV;
 8003a34:	f06f 0412 	mvn.w	r4, #18
 8003a38:	e7e7      	b.n	8003a0a <zmk_battery_init+0x26>
        LOG_DBG("Failed to update battery value: %d.", rc);
 8003a3a:	f04f 0300 	mov.w	r3, #0
 8003a3e:	2204      	movs	r2, #4
 8003a40:	f362 0302 	bfi	r3, r2, #0, #3
 8003a44:	f36f 03c5 	bfc	r3, #3, #3
 8003a48:	4a0a      	ldr	r2, [pc, #40]	; (8003a74 <zmk_battery_init+0x90>)
 8003a4a:	490b      	ldr	r1, [pc, #44]	; (8003a78 <zmk_battery_init+0x94>)
 8003a4c:	1a52      	subs	r2, r2, r1
 8003a4e:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8003a52:	f362 138f 	bfi	r3, r2, #6, #10
 8003a56:	4602      	mov	r2, r0
 8003a58:	4908      	ldr	r1, [pc, #32]	; (8003a7c <zmk_battery_init+0x98>)
 8003a5a:	480a      	ldr	r0, [pc, #40]	; (8003a84 <zmk_battery_init+0xa0>)
 8003a5c:	f002 fdf0 	bl	8006640 <log_2>
        return rc;
 8003a60:	e7d3      	b.n	8003a0a <zmk_battery_init+0x26>
 8003a62:	bf00      	nop
 8003a64:	0802438c 	.word	0x0802438c
 8003a68:	200035a4 	.word	0x200035a4
 8003a6c:	000927c0 	.word	0x000927c0
 8003a70:	20000ee8 	.word	0x20000ee8
 8003a74:	08022c60 	.word	0x08022c60
 8003a78:	08022b90 	.word	0x08022b90
 8003a7c:	080243ec 	.word	0x080243ec
 8003a80:	08024394 	.word	0x08024394
 8003a84:	08024364 	.word	0x08024364

08003a88 <peripheral_event_work_callback>:
static struct bt_gatt_subscribe_params subscribe_params;

K_MSGQ_DEFINE(peripheral_event_msgq, sizeof(struct zmk_position_state_changed),
              CONFIG_ZMK_SPLIT_BLE_CENTRAL_POSITION_QUEUE_SIZE, 4);

void peripheral_event_work_callback(struct k_work *work) {
 8003a88:	b510      	push	{r4, lr}
 8003a8a:	b084      	sub	sp, #16
	return z_impl_k_msgq_get(msgq, data, timeout);
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	2300      	movs	r3, #0
 8003a90:	4669      	mov	r1, sp
 8003a92:	4810      	ldr	r0, [pc, #64]	; (8003ad4 <peripheral_event_work_callback+0x4c>)
 8003a94:	f014 fba8 	bl	80181e8 <z_impl_k_msgq_get>
    struct zmk_position_state_changed ev;
    while (k_msgq_get(&peripheral_event_msgq, &ev, K_NO_WAIT) == 0) {
 8003a98:	b9c8      	cbnz	r0, 8003ace <peripheral_event_work_callback+0x46>
        LOG_DBG("Trigger key position state change for %d", ev.position);
 8003a9a:	2304      	movs	r3, #4
 8003a9c:	f363 0402 	bfi	r4, r3, #0, #3
 8003aa0:	f36f 04c5 	bfc	r4, #3, #3
 8003aa4:	4b0c      	ldr	r3, [pc, #48]	; (8003ad8 <peripheral_event_work_callback+0x50>)
 8003aa6:	4a0d      	ldr	r2, [pc, #52]	; (8003adc <peripheral_event_work_callback+0x54>)
 8003aa8:	1a9b      	subs	r3, r3, r2
 8003aaa:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8003aae:	f363 148f 	bfi	r4, r3, #6, #10
 8003ab2:	4623      	mov	r3, r4
 8003ab4:	9a00      	ldr	r2, [sp, #0]
 8003ab6:	490a      	ldr	r1, [pc, #40]	; (8003ae0 <peripheral_event_work_callback+0x58>)
 8003ab8:	480a      	ldr	r0, [pc, #40]	; (8003ae4 <peripheral_event_work_callback+0x5c>)
 8003aba:	f002 fdc1 	bl	8006640 <log_2>
        ZMK_EVENT_RAISE(new_zmk_position_state_changed(ev));
 8003abe:	ab04      	add	r3, sp, #16
 8003ac0:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8003ac4:	f7fd f866 	bl	8000b94 <new_zmk_position_state_changed>
 8003ac8:	f015 fe90 	bl	80197ec <zmk_event_manager_raise>
 8003acc:	e7de      	b.n	8003a8c <peripheral_event_work_callback+0x4>
    }
}
 8003ace:	b004      	add	sp, #16
 8003ad0:	bd10      	pop	{r4, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20000fb0 	.word	0x20000fb0
 8003ad8:	08022c60 	.word	0x08022c60
 8003adc:	08022b90 	.word	0x08022b90
 8003ae0:	08024784 	.word	0x08024784
 8003ae4:	08024400 	.word	0x08024400

08003ae8 <split_central_process_connection>:
    }

    return BT_GATT_ITER_STOP;
}

static void split_central_process_connection(struct bt_conn *conn) {
 8003ae8:	b570      	push	{r4, r5, r6, lr}
 8003aea:	b08c      	sub	sp, #48	; 0x30
 8003aec:	4604      	mov	r4, r0
    int err;

    LOG_DBG("Current security for connection: %d", bt_conn_get_security(conn));
 8003aee:	f04f 0500 	mov.w	r5, #0
 8003af2:	2304      	movs	r3, #4
 8003af4:	f363 0502 	bfi	r5, r3, #0, #3
 8003af8:	f36f 05c5 	bfc	r5, #3, #3
 8003afc:	4b3a      	ldr	r3, [pc, #232]	; (8003be8 <split_central_process_connection+0x100>)
 8003afe:	4a3b      	ldr	r2, [pc, #236]	; (8003bec <split_central_process_connection+0x104>)
 8003b00:	1a9b      	subs	r3, r3, r2
 8003b02:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8003b06:	f363 158f 	bfi	r5, r3, #6, #10
 8003b0a:	4e39      	ldr	r6, [pc, #228]	; (8003bf0 <split_central_process_connection+0x108>)
 8003b0c:	f019 fd5e 	bl	801d5cc <bt_conn_get_security>
 8003b10:	4602      	mov	r2, r0
 8003b12:	462b      	mov	r3, r5
 8003b14:	4631      	mov	r1, r6
 8003b16:	4837      	ldr	r0, [pc, #220]	; (8003bf4 <split_central_process_connection+0x10c>)
 8003b18:	f002 fd92 	bl	8006640 <log_2>

    err = bt_conn_set_security(conn, BT_SECURITY_L2);
 8003b1c:	2102      	movs	r1, #2
 8003b1e:	4620      	mov	r0, r4
 8003b20:	f019 fd1c 	bl	801d55c <bt_conn_set_security>
    if (err) {
 8003b24:	bb28      	cbnz	r0, 8003b72 <split_central_process_connection+0x8a>
        LOG_ERR("Failed to set security (reason %d)", err);
        return;
    }

    if (conn == default_conn && !subscribe_params.value) {
 8003b26:	4b34      	ldr	r3, [pc, #208]	; (8003bf8 <split_central_process_connection+0x110>)
 8003b28:	6818      	ldr	r0, [r3, #0]
 8003b2a:	42a0      	cmp	r0, r4
 8003b2c:	d034      	beq.n	8003b98 <split_central_process_connection+0xb0>
        }
    }

    struct bt_conn_info info;

    bt_conn_get_info(conn, &info);
 8003b2e:	a904      	add	r1, sp, #16
 8003b30:	4620      	mov	r0, r4
 8003b32:	f00c fe61 	bl	80107f8 <bt_conn_get_info>

    LOG_DBG("New connection params: Interval: %d, Latency: %d, PHY: %d", info.le.interval,
 8003b36:	2204      	movs	r2, #4
 8003b38:	f04f 0300 	mov.w	r3, #0
 8003b3c:	f362 0302 	bfi	r3, r2, #0, #3
 8003b40:	f36f 03c5 	bfc	r3, #3, #3
 8003b44:	4928      	ldr	r1, [pc, #160]	; (8003be8 <split_central_process_connection+0x100>)
 8003b46:	4829      	ldr	r0, [pc, #164]	; (8003bec <split_central_process_connection+0x104>)
 8003b48:	1a09      	subs	r1, r1, r0
 8003b4a:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 8003b4e:	f361 138f 	bfi	r3, r1, #6, #10
 8003b52:	9600      	str	r6, [sp, #0]
 8003b54:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8003b58:	9101      	str	r1, [sp, #4]
 8003b5a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8003b5e:	9102      	str	r1, [sp, #8]
 8003b60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003b62:	7849      	ldrb	r1, [r1, #1]
 8003b64:	9103      	str	r1, [sp, #12]
 8003b66:	4669      	mov	r1, sp
 8003b68:	4824      	ldr	r0, [pc, #144]	; (8003bfc <split_central_process_connection+0x114>)
 8003b6a:	f002 fded 	bl	8006748 <log_n>
            info.le.latency, info.le.phy->rx_phy);
}
 8003b6e:	b00c      	add	sp, #48	; 0x30
 8003b70:	bd70      	pop	{r4, r5, r6, pc}
 8003b72:	4601      	mov	r1, r0
        LOG_ERR("Failed to set security (reason %d)", err);
 8003b74:	f04f 0200 	mov.w	r2, #0
 8003b78:	2301      	movs	r3, #1
 8003b7a:	f363 0202 	bfi	r2, r3, #0, #3
 8003b7e:	f36f 02c5 	bfc	r2, #3, #3
 8003b82:	4b19      	ldr	r3, [pc, #100]	; (8003be8 <split_central_process_connection+0x100>)
 8003b84:	4819      	ldr	r0, [pc, #100]	; (8003bec <split_central_process_connection+0x104>)
 8003b86:	1a1b      	subs	r3, r3, r0
 8003b88:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8003b8c:	f363 128f 	bfi	r2, r3, #6, #10
 8003b90:	481b      	ldr	r0, [pc, #108]	; (8003c00 <split_central_process_connection+0x118>)
 8003b92:	f002 fcd5 	bl	8006540 <log_1>
        return;
 8003b96:	e7ea      	b.n	8003b6e <split_central_process_connection+0x86>
    if (conn == default_conn && !subscribe_params.value) {
 8003b98:	4b1a      	ldr	r3, [pc, #104]	; (8003c04 <split_central_process_connection+0x11c>)
 8003b9a:	899b      	ldrh	r3, [r3, #12]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1c6      	bne.n	8003b2e <split_central_process_connection+0x46>
        discover_params.uuid = &uuid.uuid;
 8003ba0:	4919      	ldr	r1, [pc, #100]	; (8003c08 <split_central_process_connection+0x120>)
 8003ba2:	4b1a      	ldr	r3, [pc, #104]	; (8003c0c <split_central_process_connection+0x124>)
 8003ba4:	600b      	str	r3, [r1, #0]
        discover_params.func = split_central_discovery_func;
 8003ba6:	4b1a      	ldr	r3, [pc, #104]	; (8003c10 <split_central_process_connection+0x128>)
 8003ba8:	604b      	str	r3, [r1, #4]
        discover_params.start_handle = 0x0001;
 8003baa:	2301      	movs	r3, #1
 8003bac:	810b      	strh	r3, [r1, #8]
        discover_params.end_handle = 0xffff;
 8003bae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bb2:	81cb      	strh	r3, [r1, #14]
        discover_params.type = BT_GATT_DISCOVER_PRIMARY;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	740b      	strb	r3, [r1, #16]
        err = bt_gatt_discover(default_conn, &discover_params);
 8003bb8:	f010 fabc 	bl	8014134 <bt_gatt_discover>
        if (err) {
 8003bbc:	4601      	mov	r1, r0
 8003bbe:	2800      	cmp	r0, #0
 8003bc0:	d0b5      	beq.n	8003b2e <split_central_process_connection+0x46>
            LOG_ERR("Discover failed(err %d)", err);
 8003bc2:	f04f 0200 	mov.w	r2, #0
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	f363 0202 	bfi	r2, r3, #0, #3
 8003bcc:	f36f 02c5 	bfc	r2, #3, #3
 8003bd0:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <split_central_process_connection+0x100>)
 8003bd2:	4806      	ldr	r0, [pc, #24]	; (8003bec <split_central_process_connection+0x104>)
 8003bd4:	1a1b      	subs	r3, r3, r0
 8003bd6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8003bda:	f363 128f 	bfi	r2, r3, #6, #10
 8003bde:	480d      	ldr	r0, [pc, #52]	; (8003c14 <split_central_process_connection+0x12c>)
 8003be0:	f002 fcae 	bl	8006540 <log_1>
            return;
 8003be4:	e7c3      	b.n	8003b6e <split_central_process_connection+0x86>
 8003be6:	bf00      	nop
 8003be8:	08022c60 	.word	0x08022c60
 8003bec:	08022b90 	.word	0x08022b90
 8003bf0:	080247f8 	.word	0x080247f8
 8003bf4:	08024430 	.word	0x08024430
 8003bf8:	200035a8 	.word	0x200035a8
 8003bfc:	08024494 	.word	0x08024494
 8003c00:	08024458 	.word	0x08024458
 8003c04:	200035d0 	.word	0x200035d0
 8003c08:	200035ac 	.word	0x200035ac
 8003c0c:	20000854 	.word	0x20000854
 8003c10:	08003de1 	.word	0x08003de1
 8003c14:	0802447c 	.word	0x0802447c

08003c18 <split_central_notify_func>:
                                         uint16_t length) {
 8003c18:	b530      	push	{r4, r5, lr}
 8003c1a:	b08b      	sub	sp, #44	; 0x2c
    if (!data) {
 8003c1c:	b31a      	cbz	r2, 8003c66 <split_central_notify_func+0x4e>
 8003c1e:	4615      	mov	r5, r2
    LOG_DBG("[NOTIFICATION] data %p length %u", data, length);
 8003c20:	f04f 0100 	mov.w	r1, #0
 8003c24:	2204      	movs	r2, #4
 8003c26:	f362 0102 	bfi	r1, r2, #0, #3
 8003c2a:	f36f 01c5 	bfc	r1, #3, #3
 8003c2e:	4a3b      	ldr	r2, [pc, #236]	; (8003d1c <split_central_notify_func+0x104>)
 8003c30:	483b      	ldr	r0, [pc, #236]	; (8003d20 <split_central_notify_func+0x108>)
 8003c32:	1a12      	subs	r2, r2, r0
 8003c34:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8003c38:	f362 118f 	bfi	r1, r2, #6, #10
 8003c3c:	f8ad 1000 	strh.w	r1, [sp]
 8003c40:	462a      	mov	r2, r5
 8003c42:	4938      	ldr	r1, [pc, #224]	; (8003d24 <split_central_notify_func+0x10c>)
 8003c44:	4838      	ldr	r0, [pc, #224]	; (8003d28 <split_central_notify_func+0x110>)
 8003c46:	f002 fbaf 	bl	80063a8 <log_3>
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	2b0f      	cmp	r3, #15
 8003c4e:	dc1e      	bgt.n	8003c8e <split_central_notify_func+0x76>
        changed_positions[i] = ((uint8_t *)data)[i] ^ position_state[i];
 8003c50:	5ce8      	ldrb	r0, [r5, r3]
 8003c52:	4936      	ldr	r1, [pc, #216]	; (8003d2c <split_central_notify_func+0x114>)
 8003c54:	5cca      	ldrb	r2, [r1, r3]
 8003c56:	ac0a      	add	r4, sp, #40	; 0x28
 8003c58:	441c      	add	r4, r3
 8003c5a:	4042      	eors	r2, r0
 8003c5c:	f804 2c10 	strb.w	r2, [r4, #-16]
        position_state[i] = ((uint8_t *)data)[i];
 8003c60:	54c8      	strb	r0, [r1, r3]
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
 8003c62:	3301      	adds	r3, #1
 8003c64:	e7f2      	b.n	8003c4c <split_central_notify_func+0x34>
 8003c66:	460c      	mov	r4, r1
        LOG_DBG("[UNSUBSCRIBED]");
 8003c68:	2304      	movs	r3, #4
 8003c6a:	f363 0202 	bfi	r2, r3, #0, #3
 8003c6e:	f36f 02c5 	bfc	r2, #3, #3
 8003c72:	4b2a      	ldr	r3, [pc, #168]	; (8003d1c <split_central_notify_func+0x104>)
 8003c74:	492a      	ldr	r1, [pc, #168]	; (8003d20 <split_central_notify_func+0x108>)
 8003c76:	1a5b      	subs	r3, r3, r1
 8003c78:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8003c7c:	f363 128f 	bfi	r2, r3, #6, #10
 8003c80:	4928      	ldr	r1, [pc, #160]	; (8003d24 <split_central_notify_func+0x10c>)
 8003c82:	482b      	ldr	r0, [pc, #172]	; (8003d30 <split_central_notify_func+0x118>)
 8003c84:	f002 fc5c 	bl	8006540 <log_1>
        params->value_handle = 0U;
 8003c88:	2000      	movs	r0, #0
 8003c8a:	8120      	strh	r0, [r4, #8]
        return BT_GATT_ITER_STOP;
 8003c8c:	e044      	b.n	8003d18 <split_central_notify_func+0x100>
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
 8003c8e:	2500      	movs	r5, #0
 8003c90:	e03d      	b.n	8003d0e <split_central_notify_func+0xf6>
                uint32_t position = (i * 8) + j;
 8003c92:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
                bool pressed = position_state[i] & BIT(j);
 8003c96:	4a25      	ldr	r2, [pc, #148]	; (8003d2c <split_central_notify_func+0x114>)
 8003c98:	5d51      	ldrb	r1, [r2, r5]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	40a2      	lsls	r2, r4
 8003c9e:	4211      	tst	r1, r2
 8003ca0:	bf14      	ite	ne
 8003ca2:	2201      	movne	r2, #1
 8003ca4:	2200      	moveq	r2, #0
                struct zmk_position_state_changed ev = {
 8003ca6:	9302      	str	r3, [sp, #8]
 8003ca8:	f88d 200c 	strb.w	r2, [sp, #12]
	return z_impl_k_uptime_ticks();
 8003cac:	f01e fbf6 	bl	802249c <z_impl_k_uptime_ticks>
 8003cb0:	220a      	movs	r2, #10
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	f7fc fa68 	bl	8000188 <__aeabi_uldivmod>
 8003cb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
	return z_impl_k_msgq_put(msgq, data, timeout);
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	a902      	add	r1, sp, #8
 8003cc2:	481c      	ldr	r0, [pc, #112]	; (8003d34 <split_central_notify_func+0x11c>)
 8003cc4:	f014 fa38 	bl	8018138 <z_impl_k_msgq_put>
 8003cc8:	4b1b      	ldr	r3, [pc, #108]	; (8003d38 <split_central_notify_func+0x120>)
 8003cca:	f3bf 8f5b 	dmb	ish
 8003cce:	e853 2f00 	ldrex	r2, [r3]
 8003cd2:	f042 0101 	orr.w	r1, r2, #1
 8003cd6:	e843 1000 	strex	r0, r1, [r3]
 8003cda:	2800      	cmp	r0, #0
 8003cdc:	d1f7      	bne.n	8003cce <split_central_notify_func+0xb6>
 8003cde:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 8003ce2:	f012 0f01 	tst.w	r2, #1
 8003ce6:	d00b      	beq.n	8003d00 <split_central_notify_func+0xe8>
        for (int j = 0; j < 8; j++) {
 8003ce8:	3401      	adds	r4, #1
 8003cea:	2c07      	cmp	r4, #7
 8003cec:	dc0e      	bgt.n	8003d0c <split_central_notify_func+0xf4>
            if (changed_positions[i] & BIT(j)) {
 8003cee:	ab0a      	add	r3, sp, #40	; 0x28
 8003cf0:	442b      	add	r3, r5
 8003cf2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003cf6:	40e3      	lsrs	r3, r4
 8003cf8:	f013 0f01 	tst.w	r3, #1
 8003cfc:	d0f4      	beq.n	8003ce8 <split_central_notify_func+0xd0>
 8003cfe:	e7c8      	b.n	8003c92 <split_central_notify_func+0x7a>
		k_queue_append(&work_q->queue, work);
 8003d00:	f1a3 0108 	sub.w	r1, r3, #8
 8003d04:	480d      	ldr	r0, [pc, #52]	; (8003d3c <split_central_notify_func+0x124>)
 8003d06:	f01e f8d5 	bl	8021eb4 <k_queue_append>
 8003d0a:	e7ed      	b.n	8003ce8 <split_central_notify_func+0xd0>
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
 8003d0c:	3501      	adds	r5, #1
 8003d0e:	2d0f      	cmp	r5, #15
 8003d10:	dc01      	bgt.n	8003d16 <split_central_notify_func+0xfe>
        for (int j = 0; j < 8; j++) {
 8003d12:	2400      	movs	r4, #0
 8003d14:	e7e9      	b.n	8003cea <split_central_notify_func+0xd2>
    return BT_GATT_ITER_CONTINUE;
 8003d16:	2001      	movs	r0, #1
}
 8003d18:	b00b      	add	sp, #44	; 0x2c
 8003d1a:	bd30      	pop	{r4, r5, pc}
 8003d1c:	08022c60 	.word	0x08022c60
 8003d20:	08022b90 	.word	0x08022b90
 8003d24:	080247a4 	.word	0x080247a4
 8003d28:	080244e8 	.word	0x080244e8
 8003d2c:	200035c0 	.word	0x200035c0
 8003d30:	080244d4 	.word	0x080244d4
 8003d34:	20000fb0 	.word	0x20000fb0
 8003d38:	20000850 	.word	0x20000850
 8003d3c:	20003310 	.word	0x20003310

08003d40 <split_central_subscribe>:
static int split_central_subscribe(struct bt_conn *conn) {
 8003d40:	b508      	push	{r3, lr}
    int err = bt_gatt_subscribe(conn, &subscribe_params);
 8003d42:	4920      	ldr	r1, [pc, #128]	; (8003dc4 <split_central_subscribe+0x84>)
 8003d44:	f010 fb7c 	bl	8014440 <bt_gatt_subscribe>
    switch (err) {
 8003d48:	f110 0f45 	cmn.w	r0, #69	; 0x45
 8003d4c:	d013      	beq.n	8003d76 <split_central_subscribe+0x36>
 8003d4e:	4601      	mov	r1, r0
 8003d50:	b328      	cbz	r0, 8003d9e <split_central_subscribe+0x5e>
        LOG_ERR("Subscribe failed (err %d)", err);
 8003d52:	f04f 0200 	mov.w	r2, #0
 8003d56:	2301      	movs	r3, #1
 8003d58:	f363 0202 	bfi	r2, r3, #0, #3
 8003d5c:	f36f 02c5 	bfc	r2, #3, #3
 8003d60:	4b19      	ldr	r3, [pc, #100]	; (8003dc8 <split_central_subscribe+0x88>)
 8003d62:	481a      	ldr	r0, [pc, #104]	; (8003dcc <split_central_subscribe+0x8c>)
 8003d64:	1a1b      	subs	r3, r3, r0
 8003d66:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8003d6a:	f363 128f 	bfi	r2, r3, #6, #10
 8003d6e:	4818      	ldr	r0, [pc, #96]	; (8003dd0 <split_central_subscribe+0x90>)
 8003d70:	f002 fbe6 	bl	8006540 <log_1>
 8003d74:	e011      	b.n	8003d9a <split_central_subscribe+0x5a>
        LOG_DBG("[ALREADY SUBSCRIBED]");
 8003d76:	f04f 0200 	mov.w	r2, #0
 8003d7a:	2304      	movs	r3, #4
 8003d7c:	f363 0202 	bfi	r2, r3, #0, #3
 8003d80:	f36f 02c5 	bfc	r2, #3, #3
 8003d84:	4b10      	ldr	r3, [pc, #64]	; (8003dc8 <split_central_subscribe+0x88>)
 8003d86:	4911      	ldr	r1, [pc, #68]	; (8003dcc <split_central_subscribe+0x8c>)
 8003d88:	1a5b      	subs	r3, r3, r1
 8003d8a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8003d8e:	f363 128f 	bfi	r2, r3, #6, #10
 8003d92:	4910      	ldr	r1, [pc, #64]	; (8003dd4 <split_central_subscribe+0x94>)
 8003d94:	4810      	ldr	r0, [pc, #64]	; (8003dd8 <split_central_subscribe+0x98>)
 8003d96:	f002 fbd3 	bl	8006540 <log_1>
}
 8003d9a:	2000      	movs	r0, #0
 8003d9c:	bd08      	pop	{r3, pc}
        LOG_DBG("[SUBSCRIBED]");
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	2304      	movs	r3, #4
 8003da4:	f363 0202 	bfi	r2, r3, #0, #3
 8003da8:	f36f 02c5 	bfc	r2, #3, #3
 8003dac:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <split_central_subscribe+0x88>)
 8003dae:	4907      	ldr	r1, [pc, #28]	; (8003dcc <split_central_subscribe+0x8c>)
 8003db0:	1a5b      	subs	r3, r3, r1
 8003db2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8003db6:	f363 128f 	bfi	r2, r3, #6, #10
 8003dba:	4906      	ldr	r1, [pc, #24]	; (8003dd4 <split_central_subscribe+0x94>)
 8003dbc:	4807      	ldr	r0, [pc, #28]	; (8003ddc <split_central_subscribe+0x9c>)
 8003dbe:	f002 fbbf 	bl	8006540 <log_1>
 8003dc2:	e7ea      	b.n	8003d9a <split_central_subscribe+0x5a>
 8003dc4:	200035d0 	.word	0x200035d0
 8003dc8:	08022c60 	.word	0x08022c60
 8003dcc:	08022b90 	.word	0x08022b90
 8003dd0:	08024540 	.word	0x08024540
 8003dd4:	080247c0 	.word	0x080247c0
 8003dd8:	08024510 	.word	0x08024510
 8003ddc:	0802452c 	.word	0x0802452c

08003de0 <split_central_discovery_func>:
                                            struct bt_gatt_discover_params *params) {
 8003de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003de2:	b091      	sub	sp, #68	; 0x44
    if (!attr) {
 8003de4:	2900      	cmp	r1, #0
 8003de6:	d03d      	beq.n	8003e64 <split_central_discovery_func+0x84>
 8003de8:	4606      	mov	r6, r0
 8003dea:	460f      	mov	r7, r1
    LOG_DBG("[ATTRIBUTE] handle %u", attr->handle);
 8003dec:	f04f 0300 	mov.w	r3, #0
 8003df0:	2204      	movs	r2, #4
 8003df2:	f362 0302 	bfi	r3, r2, #0, #3
 8003df6:	f36f 03c5 	bfc	r3, #3, #3
 8003dfa:	4a55      	ldr	r2, [pc, #340]	; (8003f50 <split_central_discovery_func+0x170>)
 8003dfc:	4955      	ldr	r1, [pc, #340]	; (8003f54 <split_central_discovery_func+0x174>)
 8003dfe:	1a52      	subs	r2, r2, r1
 8003e00:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8003e04:	f362 138f 	bfi	r3, r2, #6, #10
 8003e08:	8a3a      	ldrh	r2, [r7, #16]
 8003e0a:	4953      	ldr	r1, [pc, #332]	; (8003f58 <split_central_discovery_func+0x178>)
 8003e0c:	4853      	ldr	r0, [pc, #332]	; (8003f5c <split_central_discovery_func+0x17c>)
 8003e0e:	f002 fc17 	bl	8006640 <log_2>
    if (!bt_uuid_cmp(discover_params.uuid, BT_UUID_DECLARE_128(ZMK_SPLIT_BT_SERVICE_UUID))) {
 8003e12:	466c      	mov	r4, sp
 8003e14:	4d52      	ldr	r5, [pc, #328]	; (8003f60 <split_central_discovery_func+0x180>)
 8003e16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e1a:	682b      	ldr	r3, [r5, #0]
 8003e1c:	7023      	strb	r3, [r4, #0]
 8003e1e:	4669      	mov	r1, sp
 8003e20:	4b50      	ldr	r3, [pc, #320]	; (8003f64 <split_central_discovery_func+0x184>)
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	f018 fe09 	bl	801ca3a <bt_uuid_cmp>
 8003e28:	2800      	cmp	r0, #0
 8003e2a:	d146      	bne.n	8003eba <split_central_discovery_func+0xda>
        memcpy(&uuid, BT_UUID_DECLARE_128(ZMK_SPLIT_BT_CHAR_POSITION_STATE_UUID), sizeof(uuid));
 8003e2c:	ac05      	add	r4, sp, #20
 8003e2e:	3504      	adds	r5, #4
 8003e30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e34:	682b      	ldr	r3, [r5, #0]
 8003e36:	7023      	strb	r3, [r4, #0]
 8003e38:	4c4b      	ldr	r4, [pc, #300]	; (8003f68 <split_central_discovery_func+0x188>)
 8003e3a:	2211      	movs	r2, #17
 8003e3c:	a905      	add	r1, sp, #20
 8003e3e:	4620      	mov	r0, r4
 8003e40:	f018 fd35 	bl	801c8ae <memcpy>
        discover_params.uuid = &uuid.uuid;
 8003e44:	4947      	ldr	r1, [pc, #284]	; (8003f64 <split_central_discovery_func+0x184>)
 8003e46:	600c      	str	r4, [r1, #0]
        discover_params.start_handle = attr->handle + 1;
 8003e48:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	810b      	strh	r3, [r1, #8]
        discover_params.type = BT_GATT_DISCOVER_CHARACTERISTIC;
 8003e50:	2303      	movs	r3, #3
 8003e52:	740b      	strb	r3, [r1, #16]
        err = bt_gatt_discover(conn, &discover_params);
 8003e54:	4630      	mov	r0, r6
 8003e56:	f010 f96d 	bl	8014134 <bt_gatt_discover>
        if (err) {
 8003e5a:	4601      	mov	r1, r0
 8003e5c:	b9d8      	cbnz	r0, 8003e96 <split_central_discovery_func+0xb6>
}
 8003e5e:	2000      	movs	r0, #0
 8003e60:	b011      	add	sp, #68	; 0x44
 8003e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e64:	4614      	mov	r4, r2
        LOG_DBG("Discover complete");
 8003e66:	f04f 0200 	mov.w	r2, #0
 8003e6a:	2304      	movs	r3, #4
 8003e6c:	f363 0202 	bfi	r2, r3, #0, #3
 8003e70:	f36f 02c5 	bfc	r2, #3, #3
 8003e74:	4b36      	ldr	r3, [pc, #216]	; (8003f50 <split_central_discovery_func+0x170>)
 8003e76:	4937      	ldr	r1, [pc, #220]	; (8003f54 <split_central_discovery_func+0x174>)
 8003e78:	1a5b      	subs	r3, r3, r1
 8003e7a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8003e7e:	f363 128f 	bfi	r2, r3, #6, #10
 8003e82:	4935      	ldr	r1, [pc, #212]	; (8003f58 <split_central_discovery_func+0x178>)
 8003e84:	4839      	ldr	r0, [pc, #228]	; (8003f6c <split_central_discovery_func+0x18c>)
 8003e86:	f002 fb5b 	bl	8006540 <log_1>
        (void)memset(params, 0, sizeof(*params));
 8003e8a:	2214      	movs	r2, #20
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	4620      	mov	r0, r4
 8003e90:	f018 fd32 	bl	801c8f8 <memset>
        return BT_GATT_ITER_STOP;
 8003e94:	e7e3      	b.n	8003e5e <split_central_discovery_func+0x7e>
            LOG_ERR("Discover failed (err %d)", err);
 8003e96:	f04f 0200 	mov.w	r2, #0
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	f363 0202 	bfi	r2, r3, #0, #3
 8003ea0:	f36f 02c5 	bfc	r2, #3, #3
 8003ea4:	4b2a      	ldr	r3, [pc, #168]	; (8003f50 <split_central_discovery_func+0x170>)
 8003ea6:	482b      	ldr	r0, [pc, #172]	; (8003f54 <split_central_discovery_func+0x174>)
 8003ea8:	1a1b      	subs	r3, r3, r0
 8003eaa:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8003eae:	f363 128f 	bfi	r2, r3, #6, #10
 8003eb2:	482f      	ldr	r0, [pc, #188]	; (8003f70 <split_central_discovery_func+0x190>)
 8003eb4:	f002 fb44 	bl	8006540 <log_1>
 8003eb8:	e7d1      	b.n	8003e5e <split_central_discovery_func+0x7e>
                            BT_UUID_DECLARE_128(ZMK_SPLIT_BT_CHAR_POSITION_STATE_UUID))) {
 8003eba:	ac0a      	add	r4, sp, #40	; 0x28
 8003ebc:	4d2d      	ldr	r5, [pc, #180]	; (8003f74 <split_central_discovery_func+0x194>)
 8003ebe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ec0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ec2:	682b      	ldr	r3, [r5, #0]
 8003ec4:	7023      	strb	r3, [r4, #0]
    } else if (!bt_uuid_cmp(discover_params.uuid,
 8003ec6:	a90a      	add	r1, sp, #40	; 0x28
 8003ec8:	4b26      	ldr	r3, [pc, #152]	; (8003f64 <split_central_discovery_func+0x184>)
 8003eca:	6818      	ldr	r0, [r3, #0]
 8003ecc:	f018 fdb5 	bl	801ca3a <bt_uuid_cmp>
 8003ed0:	bb90      	cbnz	r0, 8003f38 <split_central_discovery_func+0x158>
        memcpy(&uuid, BT_UUID_GATT_CCC, sizeof(uuid));
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 8003ed8:	f642 1302 	movw	r3, #10498	; 0x2902
 8003edc:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8003ee0:	4d21      	ldr	r5, [pc, #132]	; (8003f68 <split_central_discovery_func+0x188>)
 8003ee2:	2211      	movs	r2, #17
 8003ee4:	a90f      	add	r1, sp, #60	; 0x3c
 8003ee6:	4628      	mov	r0, r5
 8003ee8:	f018 fce1 	bl	801c8ae <memcpy>
        discover_params.uuid = &uuid.uuid;
 8003eec:	4c1d      	ldr	r4, [pc, #116]	; (8003f64 <split_central_discovery_func+0x184>)
 8003eee:	6025      	str	r5, [r4, #0]
        discover_params.start_handle = attr->handle + 2;
 8003ef0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003ef4:	3302      	adds	r3, #2
 8003ef6:	8123      	strh	r3, [r4, #8]
        discover_params.type = BT_GATT_DISCOVER_DESCRIPTOR;
 8003ef8:	2304      	movs	r3, #4
 8003efa:	7423      	strb	r3, [r4, #16]
        subscribe_params.value_handle = bt_gatt_attr_value_handle(attr);
 8003efc:	4638      	mov	r0, r7
 8003efe:	f00f fe03 	bl	8013b08 <bt_gatt_attr_value_handle>
 8003f02:	4b1d      	ldr	r3, [pc, #116]	; (8003f78 <split_central_discovery_func+0x198>)
 8003f04:	8118      	strh	r0, [r3, #8]
        err = bt_gatt_discover(conn, &discover_params);
 8003f06:	4621      	mov	r1, r4
 8003f08:	4630      	mov	r0, r6
 8003f0a:	f010 f913 	bl	8014134 <bt_gatt_discover>
        if (err) {
 8003f0e:	4601      	mov	r1, r0
 8003f10:	2800      	cmp	r0, #0
 8003f12:	d0a4      	beq.n	8003e5e <split_central_discovery_func+0x7e>
            LOG_ERR("Discover failed (err %d)", err);
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	2301      	movs	r3, #1
 8003f1a:	f363 0202 	bfi	r2, r3, #0, #3
 8003f1e:	f36f 02c5 	bfc	r2, #3, #3
 8003f22:	4b0b      	ldr	r3, [pc, #44]	; (8003f50 <split_central_discovery_func+0x170>)
 8003f24:	480b      	ldr	r0, [pc, #44]	; (8003f54 <split_central_discovery_func+0x174>)
 8003f26:	1a1b      	subs	r3, r3, r0
 8003f28:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8003f2c:	f363 128f 	bfi	r2, r3, #6, #10
 8003f30:	480f      	ldr	r0, [pc, #60]	; (8003f70 <split_central_discovery_func+0x190>)
 8003f32:	f002 fb05 	bl	8006540 <log_1>
 8003f36:	e792      	b.n	8003e5e <split_central_discovery_func+0x7e>
        subscribe_params.notify = split_central_notify_func;
 8003f38:	4b0f      	ldr	r3, [pc, #60]	; (8003f78 <split_central_discovery_func+0x198>)
 8003f3a:	4a10      	ldr	r2, [pc, #64]	; (8003f7c <split_central_discovery_func+0x19c>)
 8003f3c:	601a      	str	r2, [r3, #0]
        subscribe_params.value = BT_GATT_CCC_NOTIFY;
 8003f3e:	2201      	movs	r2, #1
 8003f40:	819a      	strh	r2, [r3, #12]
        subscribe_params.ccc_handle = attr->handle;
 8003f42:	8a3a      	ldrh	r2, [r7, #16]
 8003f44:	815a      	strh	r2, [r3, #10]
        split_central_subscribe(conn);
 8003f46:	4630      	mov	r0, r6
 8003f48:	f7ff fefa 	bl	8003d40 <split_central_subscribe>
        return BT_GATT_ITER_STOP;
 8003f4c:	e787      	b.n	8003e5e <split_central_discovery_func+0x7e>
 8003f4e:	bf00      	nop
 8003f50:	08022c60 	.word	0x08022c60
 8003f54:	08022b90 	.word	0x08022b90
 8003f58:	080247d8 	.word	0x080247d8
 8003f5c:	08024574 	.word	0x08024574
 8003f60:	08022c94 	.word	0x08022c94
 8003f64:	200035ac 	.word	0x200035ac
 8003f68:	20000854 	.word	0x20000854
 8003f6c:	0802455c 	.word	0x0802455c
 8003f70:	08024590 	.word	0x08024590
 8003f74:	08022ca8 	.word	0x08022ca8
 8003f78:	200035d0 	.word	0x200035d0
 8003f7c:	08003c19 	.word	0x08003c19

08003f80 <start_scan>:
    if (type == BT_GAP_ADV_TYPE_ADV_IND || type == BT_GAP_ADV_TYPE_ADV_DIRECT_IND) {
        bt_data_parse(ad, split_central_eir_found, (void *)addr);
    }
}

static int start_scan(void) {
 8003f80:	b530      	push	{r4, r5, lr}
 8003f82:	b087      	sub	sp, #28
    int err;

    err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, split_central_device_found);
 8003f84:	ac01      	add	r4, sp, #4
 8003f86:	4d19      	ldr	r5, [pc, #100]	; (8003fec <start_scan+0x6c>)
 8003f88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f8c:	682b      	ldr	r3, [r5, #0]
 8003f8e:	6023      	str	r3, [r4, #0]
 8003f90:	4917      	ldr	r1, [pc, #92]	; (8003ff0 <start_scan+0x70>)
 8003f92:	a801      	add	r0, sp, #4
 8003f94:	f00b fc60 	bl	800f858 <bt_le_scan_start>
    if (err) {
 8003f98:	4604      	mov	r4, r0
 8003f9a:	b9a0      	cbnz	r0, 8003fc6 <start_scan+0x46>
        LOG_ERR("Scanning failed to start (err %d)", err);
        return err;
    }

    LOG_DBG("Scanning successfully started");
 8003f9c:	f04f 0200 	mov.w	r2, #0
 8003fa0:	2304      	movs	r3, #4
 8003fa2:	f363 0202 	bfi	r2, r3, #0, #3
 8003fa6:	f36f 02c5 	bfc	r2, #3, #3
 8003faa:	4b12      	ldr	r3, [pc, #72]	; (8003ff4 <start_scan+0x74>)
 8003fac:	4912      	ldr	r1, [pc, #72]	; (8003ff8 <start_scan+0x78>)
 8003fae:	1a5b      	subs	r3, r3, r1
 8003fb0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8003fb4:	f363 128f 	bfi	r2, r3, #6, #10
 8003fb8:	4910      	ldr	r1, [pc, #64]	; (8003ffc <start_scan+0x7c>)
 8003fba:	4811      	ldr	r0, [pc, #68]	; (8004000 <start_scan+0x80>)
 8003fbc:	f002 fac0 	bl	8006540 <log_1>
    return 0;
}
 8003fc0:	4620      	mov	r0, r4
 8003fc2:	b007      	add	sp, #28
 8003fc4:	bd30      	pop	{r4, r5, pc}
        LOG_ERR("Scanning failed to start (err %d)", err);
 8003fc6:	f04f 0200 	mov.w	r2, #0
 8003fca:	2301      	movs	r3, #1
 8003fcc:	f363 0202 	bfi	r2, r3, #0, #3
 8003fd0:	f36f 02c5 	bfc	r2, #3, #3
 8003fd4:	4b07      	ldr	r3, [pc, #28]	; (8003ff4 <start_scan+0x74>)
 8003fd6:	4908      	ldr	r1, [pc, #32]	; (8003ff8 <start_scan+0x78>)
 8003fd8:	1a5b      	subs	r3, r3, r1
 8003fda:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8003fde:	f363 128f 	bfi	r2, r3, #6, #10
 8003fe2:	4601      	mov	r1, r0
 8003fe4:	4807      	ldr	r0, [pc, #28]	; (8004004 <start_scan+0x84>)
 8003fe6:	f002 faab 	bl	8006540 <log_1>
        return err;
 8003fea:	e7e9      	b.n	8003fc0 <start_scan+0x40>
 8003fec:	08022cbc 	.word	0x08022cbc
 8003ff0:	080044cd 	.word	0x080044cd
 8003ff4:	08022c60 	.word	0x08022c60
 8003ff8:	08022b90 	.word	0x08022b90
 8003ffc:	08024850 	.word	0x08024850
 8004000:	080245d0 	.word	0x080245d0
 8004004:	080245ac 	.word	0x080245ac

08004008 <zmk_split_bt_central_init>:
static struct bt_conn_cb conn_callbacks = {
    .connected = split_central_connected,
    .disconnected = split_central_disconnected,
};

int zmk_split_bt_central_init(const struct device *_arg) {
 8004008:	b508      	push	{r3, lr}
    bt_conn_cb_register(&conn_callbacks);
 800400a:	4803      	ldr	r0, [pc, #12]	; (8004018 <zmk_split_bt_central_init+0x10>)
 800400c:	f00c f880 	bl	8010110 <bt_conn_cb_register>

    return start_scan();
 8004010:	f7ff ffb6 	bl	8003f80 <start_scan>
}
 8004014:	bd08      	pop	{r3, pc}
 8004016:	bf00      	nop
 8004018:	20000828 	.word	0x20000828

0800401c <split_central_connected>:
static void split_central_connected(struct bt_conn *conn, uint8_t conn_err) {
 800401c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800401e:	b093      	sub	sp, #76	; 0x4c
 8004020:	4606      	mov	r6, r0
 8004022:	460d      	mov	r5, r1
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
 8004024:	f019 fbaa 	bl	801d77c <bt_conn_get_dst>
 8004028:	4604      	mov	r4, r0
	switch (addr->type) {
 800402a:	7803      	ldrb	r3, [r0, #0]
 800402c:	2b03      	cmp	r3, #3
 800402e:	d847      	bhi.n	80040c0 <split_central_connected+0xa4>
 8004030:	e8df f003 	tbb	[pc, r3]
 8004034:	413c3702 	.word	0x413c3702
		strcpy(type, "public");
 8004038:	4934      	ldr	r1, [pc, #208]	; (800410c <split_central_connected+0xf0>)
 800403a:	a807      	add	r0, sp, #28
 800403c:	f018 fbc1 	bl	801c7c2 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
 8004040:	79a3      	ldrb	r3, [r4, #6]
 8004042:	7962      	ldrb	r2, [r4, #5]
 8004044:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
 8004046:	78e0      	ldrb	r0, [r4, #3]
 8004048:	78a7      	ldrb	r7, [r4, #2]
 800404a:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
 800404c:	f10d 0c1c 	add.w	ip, sp, #28
 8004050:	f8cd c014 	str.w	ip, [sp, #20]
 8004054:	9404      	str	r4, [sp, #16]
 8004056:	9703      	str	r7, [sp, #12]
 8004058:	9002      	str	r0, [sp, #8]
 800405a:	9101      	str	r1, [sp, #4]
 800405c:	9200      	str	r2, [sp, #0]
 800405e:	4a2c      	ldr	r2, [pc, #176]	; (8004110 <split_central_connected+0xf4>)
 8004060:	211e      	movs	r1, #30
 8004062:	a80a      	add	r0, sp, #40	; 0x28
 8004064:	f015 ffe4 	bl	801a030 <snprintk>
    if (conn_err) {
 8004068:	bb85      	cbnz	r5, 80040cc <split_central_connected+0xb0>
    LOG_DBG("Connected: %s", log_strdup(addr));
 800406a:	f04f 0400 	mov.w	r4, #0
 800406e:	2304      	movs	r3, #4
 8004070:	f363 0402 	bfi	r4, r3, #0, #3
 8004074:	f36f 04c5 	bfc	r4, #3, #3
 8004078:	4b26      	ldr	r3, [pc, #152]	; (8004114 <split_central_connected+0xf8>)
 800407a:	4a27      	ldr	r2, [pc, #156]	; (8004118 <split_central_connected+0xfc>)
 800407c:	1a9b      	subs	r3, r3, r2
 800407e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8004082:	f363 148f 	bfi	r4, r3, #6, #10
 8004086:	a80a      	add	r0, sp, #40	; 0x28
 8004088:	f002 f88a 	bl	80061a0 <log_strdup>
 800408c:	4602      	mov	r2, r0
 800408e:	4623      	mov	r3, r4
 8004090:	4922      	ldr	r1, [pc, #136]	; (800411c <split_central_connected+0x100>)
 8004092:	4823      	ldr	r0, [pc, #140]	; (8004120 <split_central_connected+0x104>)
 8004094:	f002 fad4 	bl	8006640 <log_2>
    split_central_process_connection(conn);
 8004098:	4630      	mov	r0, r6
 800409a:	f7ff fd25 	bl	8003ae8 <split_central_process_connection>
}
 800409e:	b013      	add	sp, #76	; 0x4c
 80040a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
 80040a2:	4920      	ldr	r1, [pc, #128]	; (8004124 <split_central_connected+0x108>)
 80040a4:	a807      	add	r0, sp, #28
 80040a6:	f018 fb8c 	bl	801c7c2 <strcpy>
		break;
 80040aa:	e7c9      	b.n	8004040 <split_central_connected+0x24>
		strcpy(type, "public-id");
 80040ac:	491e      	ldr	r1, [pc, #120]	; (8004128 <split_central_connected+0x10c>)
 80040ae:	a807      	add	r0, sp, #28
 80040b0:	f018 fb87 	bl	801c7c2 <strcpy>
		break;
 80040b4:	e7c4      	b.n	8004040 <split_central_connected+0x24>
		strcpy(type, "random-id");
 80040b6:	491d      	ldr	r1, [pc, #116]	; (800412c <split_central_connected+0x110>)
 80040b8:	a807      	add	r0, sp, #28
 80040ba:	f018 fb82 	bl	801c7c2 <strcpy>
		break;
 80040be:	e7bf      	b.n	8004040 <split_central_connected+0x24>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
 80040c0:	4a1b      	ldr	r2, [pc, #108]	; (8004130 <split_central_connected+0x114>)
 80040c2:	210a      	movs	r1, #10
 80040c4:	a807      	add	r0, sp, #28
 80040c6:	f015 ffb3 	bl	801a030 <snprintk>
		break;
 80040ca:	e7b9      	b.n	8004040 <split_central_connected+0x24>
        LOG_ERR("Failed to connect to %s (%u)", log_strdup(addr), conn_err);
 80040cc:	f04f 0400 	mov.w	r4, #0
 80040d0:	2301      	movs	r3, #1
 80040d2:	f363 0402 	bfi	r4, r3, #0, #3
 80040d6:	f36f 04c5 	bfc	r4, #3, #3
 80040da:	4b0e      	ldr	r3, [pc, #56]	; (8004114 <split_central_connected+0xf8>)
 80040dc:	4a0e      	ldr	r2, [pc, #56]	; (8004118 <split_central_connected+0xfc>)
 80040de:	1a9b      	subs	r3, r3, r2
 80040e0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80040e4:	f363 148f 	bfi	r4, r3, #6, #10
 80040e8:	a80a      	add	r0, sp, #40	; 0x28
 80040ea:	f002 f859 	bl	80061a0 <log_strdup>
 80040ee:	4601      	mov	r1, r0
 80040f0:	4623      	mov	r3, r4
 80040f2:	462a      	mov	r2, r5
 80040f4:	480f      	ldr	r0, [pc, #60]	; (8004134 <split_central_connected+0x118>)
 80040f6:	f002 faa3 	bl	8006640 <log_2>
        bt_conn_unref(default_conn);
 80040fa:	4c0f      	ldr	r4, [pc, #60]	; (8004138 <split_central_connected+0x11c>)
 80040fc:	6820      	ldr	r0, [r4, #0]
 80040fe:	f019 fb17 	bl	801d730 <bt_conn_unref>
        default_conn = NULL;
 8004102:	2300      	movs	r3, #0
 8004104:	6023      	str	r3, [r4, #0]
        start_scan();
 8004106:	f7ff ff3b 	bl	8003f80 <start_scan>
        return;
 800410a:	e7c8      	b.n	800409e <split_central_connected+0x82>
 800410c:	08023c50 	.word	0x08023c50
 8004110:	08023c78 	.word	0x08023c78
 8004114:	08022c60 	.word	0x08022c60
 8004118:	08022b90 	.word	0x08022b90
 800411c:	0802485c 	.word	0x0802485c
 8004120:	080245f4 	.word	0x080245f4
 8004124:	08023c58 	.word	0x08023c58
 8004128:	08023c60 	.word	0x08023c60
 800412c:	08023c6c 	.word	0x08023c6c
 8004130:	08027b48 	.word	0x08027b48
 8004134:	08023fdc 	.word	0x08023fdc
 8004138:	200035a8 	.word	0x200035a8

0800413c <split_central_eir_found>:
static bool split_central_eir_found(struct bt_data *data, void *user_data) {
 800413c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004140:	b0af      	sub	sp, #188	; 0xbc
 8004142:	4604      	mov	r4, r0
 8004144:	460d      	mov	r5, r1
    LOG_DBG("[AD]: %u data_len %u", data->type, data->data_len);
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	2304      	movs	r3, #4
 800414c:	f363 0202 	bfi	r2, r3, #0, #3
 8004150:	f36f 02c5 	bfc	r2, #3, #3
 8004154:	4b93      	ldr	r3, [pc, #588]	; (80043a4 <split_central_eir_found+0x268>)
 8004156:	4994      	ldr	r1, [pc, #592]	; (80043a8 <split_central_eir_found+0x26c>)
 8004158:	1a5b      	subs	r3, r3, r1
 800415a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800415e:	f363 128f 	bfi	r2, r3, #6, #10
 8004162:	4f92      	ldr	r7, [pc, #584]	; (80043ac <split_central_eir_found+0x270>)
 8004164:	f8ad 2000 	strh.w	r2, [sp]
 8004168:	7843      	ldrb	r3, [r0, #1]
 800416a:	7802      	ldrb	r2, [r0, #0]
 800416c:	4639      	mov	r1, r7
 800416e:	4890      	ldr	r0, [pc, #576]	; (80043b0 <split_central_eir_found+0x274>)
 8004170:	f002 f91a 	bl	80063a8 <log_3>
    switch (data->type) {
 8004174:	7823      	ldrb	r3, [r4, #0]
 8004176:	3b06      	subs	r3, #6
 8004178:	2b01      	cmp	r3, #1
 800417a:	d903      	bls.n	8004184 <split_central_eir_found+0x48>
    return true;
 800417c:	2001      	movs	r0, #1
}
 800417e:	b02f      	add	sp, #188	; 0xbc
 8004180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (data->data_len % 16 != 0U) {
 8004184:	7863      	ldrb	r3, [r4, #1]
 8004186:	f013 0f0f 	tst.w	r3, #15
 800418a:	d101      	bne.n	8004190 <split_central_eir_found+0x54>
        for (i = 0; i < data->data_len; i += 16) {
 800418c:	2600      	movs	r6, #0
 800418e:	e023      	b.n	80041d8 <split_central_eir_found+0x9c>
            LOG_ERR("AD malformed");
 8004190:	2401      	movs	r4, #1
 8004192:	f04f 0100 	mov.w	r1, #0
 8004196:	f364 0102 	bfi	r1, r4, #0, #3
 800419a:	f36f 01c5 	bfc	r1, #3, #3
 800419e:	4b81      	ldr	r3, [pc, #516]	; (80043a4 <split_central_eir_found+0x268>)
 80041a0:	4a81      	ldr	r2, [pc, #516]	; (80043a8 <split_central_eir_found+0x26c>)
 80041a2:	1a9b      	subs	r3, r3, r2
 80041a4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80041a8:	f363 118f 	bfi	r1, r3, #6, #10
 80041ac:	4881      	ldr	r0, [pc, #516]	; (80043b4 <split_central_eir_found+0x278>)
 80041ae:	f002 fb37 	bl	8006820 <log_0>
            return true;
 80041b2:	4620      	mov	r0, r4
 80041b4:	e7e3      	b.n	800417e <split_central_eir_found+0x42>
                LOG_ERR("Unable to load UUID");
 80041b6:	2301      	movs	r3, #1
 80041b8:	f363 0902 	bfi	r9, r3, #0, #3
 80041bc:	f36f 09c5 	bfc	r9, #3, #3
 80041c0:	4b78      	ldr	r3, [pc, #480]	; (80043a4 <split_central_eir_found+0x268>)
 80041c2:	4a79      	ldr	r2, [pc, #484]	; (80043a8 <split_central_eir_found+0x26c>)
 80041c4:	1a9b      	subs	r3, r3, r2
 80041c6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80041ca:	f363 198f 	bfi	r9, r3, #6, #10
 80041ce:	4649      	mov	r1, r9
 80041d0:	4879      	ldr	r0, [pc, #484]	; (80043b8 <split_central_eir_found+0x27c>)
 80041d2:	f002 fb25 	bl	8006820 <log_0>
        for (i = 0; i < data->data_len; i += 16) {
 80041d6:	3610      	adds	r6, #16
 80041d8:	7863      	ldrb	r3, [r4, #1]
 80041da:	429e      	cmp	r6, r3
 80041dc:	f280 80e0 	bge.w	80043a0 <split_central_eir_found+0x264>
            if (!bt_uuid_create(&uuid.uuid, &data->data[i], 16)) {
 80041e0:	6861      	ldr	r1, [r4, #4]
 80041e2:	2210      	movs	r2, #16
 80041e4:	4431      	add	r1, r6
 80041e6:	eb0d 0002 	add.w	r0, sp, r2
 80041ea:	f018 fc44 	bl	801ca76 <bt_uuid_create>
 80041ee:	2800      	cmp	r0, #0
 80041f0:	d0e1      	beq.n	80041b6 <split_central_eir_found+0x7a>
            if (bt_uuid_cmp(&uuid.uuid, BT_UUID_DECLARE_128(ZMK_SPLIT_BT_SERVICE_UUID))) {
 80041f2:	f10d 0c74 	add.w	ip, sp, #116	; 0x74
 80041f6:	f8df e1d8 	ldr.w	lr, [pc, #472]	; 80043d0 <split_central_eir_found+0x294>
 80041fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80041fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004202:	f8de 3000 	ldr.w	r3, [lr]
 8004206:	f88c 3000 	strb.w	r3, [ip]
 800420a:	a91d      	add	r1, sp, #116	; 0x74
 800420c:	a804      	add	r0, sp, #16
 800420e:	f018 fc14 	bl	801ca3a <bt_uuid_cmp>
 8004212:	2800      	cmp	r0, #0
 8004214:	d138      	bne.n	8004288 <split_central_eir_found+0x14c>
            LOG_DBG("Found the split service");
 8004216:	2304      	movs	r3, #4
 8004218:	f363 0802 	bfi	r8, r3, #0, #3
 800421c:	f36f 08c5 	bfc	r8, #3, #3
 8004220:	4b60      	ldr	r3, [pc, #384]	; (80043a4 <split_central_eir_found+0x268>)
 8004222:	4a61      	ldr	r2, [pc, #388]	; (80043a8 <split_central_eir_found+0x26c>)
 8004224:	1a9b      	subs	r3, r3, r2
 8004226:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800422a:	f363 188f 	bfi	r8, r3, #6, #10
 800422e:	4642      	mov	r2, r8
 8004230:	4639      	mov	r1, r7
 8004232:	4862      	ldr	r0, [pc, #392]	; (80043bc <split_central_eir_found+0x280>)
 8004234:	f002 f984 	bl	8006540 <log_1>
            zmk_ble_set_peripheral_addr(addr);
 8004238:	4628      	mov	r0, r5
 800423a:	f7ff fb01 	bl	8003840 <zmk_ble_set_peripheral_addr>
            err = bt_le_scan_stop();
 800423e:	f00b fb9d 	bl	800f97c <bt_le_scan_stop>
            if (err) {
 8004242:	4601      	mov	r1, r0
 8004244:	2800      	cmp	r0, #0
 8004246:	d152      	bne.n	80042ee <split_central_eir_found+0x1b2>
            default_conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
 8004248:	4629      	mov	r1, r5
 800424a:	2000      	movs	r0, #0
 800424c:	f00c f8e6 	bl	801041c <bt_conn_lookup_addr_le>
 8004250:	4b5b      	ldr	r3, [pc, #364]	; (80043c0 <split_central_eir_found+0x284>)
 8004252:	6018      	str	r0, [r3, #0]
            if (default_conn) {
 8004254:	2800      	cmp	r0, #0
 8004256:	d05b      	beq.n	8004310 <split_central_eir_found+0x1d4>
                LOG_DBG("Found existing connection");
 8004258:	f04f 0200 	mov.w	r2, #0
 800425c:	2304      	movs	r3, #4
 800425e:	f363 0202 	bfi	r2, r3, #0, #3
 8004262:	f36f 02c5 	bfc	r2, #3, #3
 8004266:	4b4f      	ldr	r3, [pc, #316]	; (80043a4 <split_central_eir_found+0x268>)
 8004268:	494f      	ldr	r1, [pc, #316]	; (80043a8 <split_central_eir_found+0x26c>)
 800426a:	1a5b      	subs	r3, r3, r1
 800426c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8004270:	f363 128f 	bfi	r2, r3, #6, #10
 8004274:	4639      	mov	r1, r7
 8004276:	4853      	ldr	r0, [pc, #332]	; (80043c4 <split_central_eir_found+0x288>)
 8004278:	f002 f962 	bl	8006540 <log_1>
                split_central_process_connection(default_conn);
 800427c:	4b50      	ldr	r3, [pc, #320]	; (80043c0 <split_central_eir_found+0x284>)
 800427e:	6818      	ldr	r0, [r3, #0]
 8004280:	f7ff fc32 	bl	8003ae8 <split_central_process_connection>
            return false;
 8004284:	2000      	movs	r0, #0
 8004286:	e77a      	b.n	800417e <split_central_eir_found+0x42>
                bt_uuid_to_str(&uuid.uuid, uuid_str, sizeof(uuid_str));
 8004288:	2225      	movs	r2, #37	; 0x25
 800428a:	a909      	add	r1, sp, #36	; 0x24
 800428c:	a804      	add	r0, sp, #16
 800428e:	f007 fe75 	bl	800bf7c <bt_uuid_to_str>
                bt_uuid_to_str(BT_UUID_DECLARE_128(ZMK_SPLIT_BT_SERVICE_UUID), service_uuid_str,
 8004292:	f10d 0c88 	add.w	ip, sp, #136	; 0x88
 8004296:	f8df e138 	ldr.w	lr, [pc, #312]	; 80043d0 <split_central_eir_found+0x294>
 800429a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800429e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80042a2:	f8de 3000 	ldr.w	r3, [lr]
 80042a6:	f88c 3000 	strb.w	r3, [ip]
 80042aa:	2225      	movs	r2, #37	; 0x25
 80042ac:	a913      	add	r1, sp, #76	; 0x4c
 80042ae:	a822      	add	r0, sp, #136	; 0x88
 80042b0:	f007 fe64 	bl	800bf7c <bt_uuid_to_str>
                LOG_DBG("UUID %s does not match split UUID: %s", log_strdup(uuid_str),
 80042b4:	2304      	movs	r3, #4
 80042b6:	f363 0a02 	bfi	sl, r3, #0, #3
 80042ba:	f36f 0ac5 	bfc	sl, #3, #3
 80042be:	4b39      	ldr	r3, [pc, #228]	; (80043a4 <split_central_eir_found+0x268>)
 80042c0:	4a39      	ldr	r2, [pc, #228]	; (80043a8 <split_central_eir_found+0x26c>)
 80042c2:	1a9b      	subs	r3, r3, r2
 80042c4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80042c8:	f363 1a8f 	bfi	sl, r3, #6, #10
 80042cc:	a809      	add	r0, sp, #36	; 0x24
 80042ce:	f001 ff67 	bl	80061a0 <log_strdup>
 80042d2:	9003      	str	r0, [sp, #12]
 80042d4:	ab13      	add	r3, sp, #76	; 0x4c
 80042d6:	4618      	mov	r0, r3
 80042d8:	f001 ff62 	bl	80061a0 <log_strdup>
 80042dc:	4603      	mov	r3, r0
 80042de:	f8ad a000 	strh.w	sl, [sp]
 80042e2:	9a03      	ldr	r2, [sp, #12]
 80042e4:	4639      	mov	r1, r7
 80042e6:	4838      	ldr	r0, [pc, #224]	; (80043c8 <split_central_eir_found+0x28c>)
 80042e8:	f002 f85e 	bl	80063a8 <log_3>
                continue;
 80042ec:	e773      	b.n	80041d6 <split_central_eir_found+0x9a>
                LOG_ERR("Stop LE scan failed (err %d)", err);
 80042ee:	2301      	movs	r3, #1
 80042f0:	f363 0b02 	bfi	fp, r3, #0, #3
 80042f4:	f36f 0bc5 	bfc	fp, #3, #3
 80042f8:	4b2a      	ldr	r3, [pc, #168]	; (80043a4 <split_central_eir_found+0x268>)
 80042fa:	4a2b      	ldr	r2, [pc, #172]	; (80043a8 <split_central_eir_found+0x26c>)
 80042fc:	1a9b      	subs	r3, r3, r2
 80042fe:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8004302:	f363 1b8f 	bfi	fp, r3, #6, #10
 8004306:	465a      	mov	r2, fp
 8004308:	4830      	ldr	r0, [pc, #192]	; (80043cc <split_central_eir_found+0x290>)
 800430a:	f002 f919 	bl	8006540 <log_1>
                continue;
 800430e:	e762      	b.n	80041d6 <split_central_eir_found+0x9a>
                param = BT_LE_CONN_PARAM(0x0006, 0x0006, 30, 400);
 8004310:	4b2f      	ldr	r3, [pc, #188]	; (80043d0 <split_central_eir_found+0x294>)
 8004312:	ae27      	add	r6, sp, #156	; 0x9c
 8004314:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004316:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004318:	e886 0003 	stmia.w	r6, {r0, r1}
                err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN, param, &default_conn);
 800431c:	ac29      	add	r4, sp, #164	; 0xa4
 800431e:	3344      	adds	r3, #68	; 0x44
 8004320:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004322:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004326:	4b26      	ldr	r3, [pc, #152]	; (80043c0 <split_central_eir_found+0x284>)
 8004328:	4632      	mov	r2, r6
 800432a:	4621      	mov	r1, r4
 800432c:	4628      	mov	r0, r5
 800432e:	f00c fa97 	bl	8010860 <bt_conn_le_create>
                if (err) {
 8004332:	4601      	mov	r1, r0
 8004334:	b9f0      	cbnz	r0, 8004374 <split_central_eir_found+0x238>
                err = bt_conn_le_phy_update(default_conn, BT_CONN_LE_PHY_PARAM_2M);
 8004336:	4b26      	ldr	r3, [pc, #152]	; (80043d0 <split_central_eir_found+0x294>)
 8004338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433a:	932d      	str	r3, [sp, #180]	; 0xb4
 800433c:	a92d      	add	r1, sp, #180	; 0xb4
 800433e:	4b20      	ldr	r3, [pc, #128]	; (80043c0 <split_central_eir_found+0x284>)
 8004340:	6818      	ldr	r0, [r3, #0]
 8004342:	f019 fa1d 	bl	801d780 <bt_conn_le_phy_update>
                if (err) {
 8004346:	4601      	mov	r1, r0
 8004348:	2800      	cmp	r0, #0
 800434a:	d09b      	beq.n	8004284 <split_central_eir_found+0x148>
                    LOG_ERR("Update phy conn failed (err %d)", err);
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	2301      	movs	r3, #1
 8004352:	f363 0202 	bfi	r2, r3, #0, #3
 8004356:	f36f 02c5 	bfc	r2, #3, #3
 800435a:	4b12      	ldr	r3, [pc, #72]	; (80043a4 <split_central_eir_found+0x268>)
 800435c:	4812      	ldr	r0, [pc, #72]	; (80043a8 <split_central_eir_found+0x26c>)
 800435e:	1a1b      	subs	r3, r3, r0
 8004360:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8004364:	f363 128f 	bfi	r2, r3, #6, #10
 8004368:	481a      	ldr	r0, [pc, #104]	; (80043d4 <split_central_eir_found+0x298>)
 800436a:	f002 f8e9 	bl	8006540 <log_1>
                    start_scan();
 800436e:	f7ff fe07 	bl	8003f80 <start_scan>
 8004372:	e787      	b.n	8004284 <split_central_eir_found+0x148>
                    LOG_ERR("Create conn failed (err %d) (create conn? 0x%04x)", err,
 8004374:	f04f 0300 	mov.w	r3, #0
 8004378:	2201      	movs	r2, #1
 800437a:	f362 0302 	bfi	r3, r2, #0, #3
 800437e:	f36f 03c5 	bfc	r3, #3, #3
 8004382:	4a08      	ldr	r2, [pc, #32]	; (80043a4 <split_central_eir_found+0x268>)
 8004384:	4808      	ldr	r0, [pc, #32]	; (80043a8 <split_central_eir_found+0x26c>)
 8004386:	1a12      	subs	r2, r2, r0
 8004388:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 800438c:	f362 138f 	bfi	r3, r2, #6, #10
 8004390:	f242 020d 	movw	r2, #8205	; 0x200d
 8004394:	4810      	ldr	r0, [pc, #64]	; (80043d8 <split_central_eir_found+0x29c>)
 8004396:	f002 f953 	bl	8006640 <log_2>
                    start_scan();
 800439a:	f7ff fdf1 	bl	8003f80 <start_scan>
 800439e:	e7ca      	b.n	8004336 <split_central_eir_found+0x1fa>
    return true;
 80043a0:	2001      	movs	r0, #1
 80043a2:	e6ec      	b.n	800417e <split_central_eir_found+0x42>
 80043a4:	08022c60 	.word	0x08022c60
 80043a8:	08022b90 	.word	0x08022b90
 80043ac:	0802481c 	.word	0x0802481c
 80043b0:	08024608 	.word	0x08024608
 80043b4:	08024624 	.word	0x08024624
 80043b8:	08024634 	.word	0x08024634
 80043bc:	08024674 	.word	0x08024674
 80043c0:	200035a8 	.word	0x200035a8
 80043c4:	080246b0 	.word	0x080246b0
 80043c8:	08024648 	.word	0x08024648
 80043cc:	08024690 	.word	0x08024690
 80043d0:	08022c94 	.word	0x08022c94
 80043d4:	08024704 	.word	0x08024704
 80043d8:	080246d0 	.word	0x080246d0

080043dc <split_central_disconnected>:
static void split_central_disconnected(struct bt_conn *conn, uint8_t reason) {
 80043dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043de:	b093      	sub	sp, #76	; 0x4c
 80043e0:	4605      	mov	r5, r0
 80043e2:	460e      	mov	r6, r1
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
 80043e4:	f019 f9ca 	bl	801d77c <bt_conn_get_dst>
 80043e8:	4604      	mov	r4, r0
	switch (addr->type) {
 80043ea:	7803      	ldrb	r3, [r0, #0]
 80043ec:	2b03      	cmp	r3, #3
 80043ee:	d849      	bhi.n	8004484 <split_central_disconnected+0xa8>
 80043f0:	e8df f003 	tbb	[pc, r3]
 80043f4:	433e3902 	.word	0x433e3902
		strcpy(type, "public");
 80043f8:	4929      	ldr	r1, [pc, #164]	; (80044a0 <split_central_disconnected+0xc4>)
 80043fa:	a807      	add	r0, sp, #28
 80043fc:	f018 f9e1 	bl	801c7c2 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
 8004400:	79a3      	ldrb	r3, [r4, #6]
 8004402:	7962      	ldrb	r2, [r4, #5]
 8004404:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
 8004406:	78e0      	ldrb	r0, [r4, #3]
 8004408:	78a7      	ldrb	r7, [r4, #2]
 800440a:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
 800440c:	f10d 0c1c 	add.w	ip, sp, #28
 8004410:	f8cd c014 	str.w	ip, [sp, #20]
 8004414:	9404      	str	r4, [sp, #16]
 8004416:	9703      	str	r7, [sp, #12]
 8004418:	9002      	str	r0, [sp, #8]
 800441a:	9101      	str	r1, [sp, #4]
 800441c:	9200      	str	r2, [sp, #0]
 800441e:	4a21      	ldr	r2, [pc, #132]	; (80044a4 <split_central_disconnected+0xc8>)
 8004420:	211e      	movs	r1, #30
 8004422:	a80a      	add	r0, sp, #40	; 0x28
 8004424:	f015 fe04 	bl	801a030 <snprintk>
    LOG_DBG("Disconnected: %s (reason %d)", log_strdup(addr), reason);
 8004428:	f04f 0400 	mov.w	r4, #0
 800442c:	2304      	movs	r3, #4
 800442e:	f363 0402 	bfi	r4, r3, #0, #3
 8004432:	f36f 04c5 	bfc	r4, #3, #3
 8004436:	4b1c      	ldr	r3, [pc, #112]	; (80044a8 <split_central_disconnected+0xcc>)
 8004438:	4a1c      	ldr	r2, [pc, #112]	; (80044ac <split_central_disconnected+0xd0>)
 800443a:	1a9b      	subs	r3, r3, r2
 800443c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8004440:	f363 148f 	bfi	r4, r3, #6, #10
 8004444:	a80a      	add	r0, sp, #40	; 0x28
 8004446:	f001 feab 	bl	80061a0 <log_strdup>
 800444a:	4602      	mov	r2, r0
 800444c:	f8ad 4000 	strh.w	r4, [sp]
 8004450:	4633      	mov	r3, r6
 8004452:	4917      	ldr	r1, [pc, #92]	; (80044b0 <split_central_disconnected+0xd4>)
 8004454:	4817      	ldr	r0, [pc, #92]	; (80044b4 <split_central_disconnected+0xd8>)
 8004456:	f001 ffa7 	bl	80063a8 <log_3>
    if (default_conn != conn) {
 800445a:	4b17      	ldr	r3, [pc, #92]	; (80044b8 <split_central_disconnected+0xdc>)
 800445c:	6818      	ldr	r0, [r3, #0]
 800445e:	4285      	cmp	r5, r0
 8004460:	d016      	beq.n	8004490 <split_central_disconnected+0xb4>
}
 8004462:	b013      	add	sp, #76	; 0x4c
 8004464:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
 8004466:	4915      	ldr	r1, [pc, #84]	; (80044bc <split_central_disconnected+0xe0>)
 8004468:	a807      	add	r0, sp, #28
 800446a:	f018 f9aa 	bl	801c7c2 <strcpy>
		break;
 800446e:	e7c7      	b.n	8004400 <split_central_disconnected+0x24>
		strcpy(type, "public-id");
 8004470:	4913      	ldr	r1, [pc, #76]	; (80044c0 <split_central_disconnected+0xe4>)
 8004472:	a807      	add	r0, sp, #28
 8004474:	f018 f9a5 	bl	801c7c2 <strcpy>
		break;
 8004478:	e7c2      	b.n	8004400 <split_central_disconnected+0x24>
		strcpy(type, "random-id");
 800447a:	4912      	ldr	r1, [pc, #72]	; (80044c4 <split_central_disconnected+0xe8>)
 800447c:	a807      	add	r0, sp, #28
 800447e:	f018 f9a0 	bl	801c7c2 <strcpy>
		break;
 8004482:	e7bd      	b.n	8004400 <split_central_disconnected+0x24>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
 8004484:	4a10      	ldr	r2, [pc, #64]	; (80044c8 <split_central_disconnected+0xec>)
 8004486:	210a      	movs	r1, #10
 8004488:	a807      	add	r0, sp, #28
 800448a:	f015 fdd1 	bl	801a030 <snprintk>
		break;
 800448e:	e7b7      	b.n	8004400 <split_central_disconnected+0x24>
    bt_conn_unref(default_conn);
 8004490:	f019 f94e 	bl	801d730 <bt_conn_unref>
    default_conn = NULL;
 8004494:	4b08      	ldr	r3, [pc, #32]	; (80044b8 <split_central_disconnected+0xdc>)
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]
    start_scan();
 800449a:	f7ff fd71 	bl	8003f80 <start_scan>
 800449e:	e7e0      	b.n	8004462 <split_central_disconnected+0x86>
 80044a0:	08023c50 	.word	0x08023c50
 80044a4:	08023c78 	.word	0x08023c78
 80044a8:	08022c60 	.word	0x08022c60
 80044ac:	08022b90 	.word	0x08022b90
 80044b0:	08024874 	.word	0x08024874
 80044b4:	08024724 	.word	0x08024724
 80044b8:	200035a8 	.word	0x200035a8
 80044bc:	08023c58 	.word	0x08023c58
 80044c0:	08023c60 	.word	0x08023c60
 80044c4:	08023c6c 	.word	0x08023c6c
 80044c8:	08027b48 	.word	0x08027b48

080044cc <split_central_device_found>:
                                       struct net_buf_simple *ad) {
 80044cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044d0:	b095      	sub	sp, #84	; 0x54
 80044d2:	4604      	mov	r4, r0
 80044d4:	4688      	mov	r8, r1
 80044d6:	4615      	mov	r5, r2
 80044d8:	461f      	mov	r7, r3
	switch (addr->type) {
 80044da:	7803      	ldrb	r3, [r0, #0]
 80044dc:	2b03      	cmp	r3, #3
 80044de:	d84e      	bhi.n	800457e <split_central_device_found+0xb2>
 80044e0:	e8df f003 	tbb	[pc, r3]
 80044e4:	48433e02 	.word	0x48433e02
		strcpy(type, "public");
 80044e8:	492b      	ldr	r1, [pc, #172]	; (8004598 <split_central_device_found+0xcc>)
 80044ea:	a807      	add	r0, sp, #28
 80044ec:	f018 f969 	bl	801c7c2 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
 80044f0:	7963      	ldrb	r3, [r4, #5]
 80044f2:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
 80044f4:	78e1      	ldrb	r1, [r4, #3]
 80044f6:	78a0      	ldrb	r0, [r4, #2]
 80044f8:	7866      	ldrb	r6, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
 80044fa:	f10d 091c 	add.w	r9, sp, #28
 80044fe:	f8cd 9014 	str.w	r9, [sp, #20]
 8004502:	9604      	str	r6, [sp, #16]
 8004504:	9003      	str	r0, [sp, #12]
 8004506:	9102      	str	r1, [sp, #8]
 8004508:	9201      	str	r2, [sp, #4]
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	79a3      	ldrb	r3, [r4, #6]
 800450e:	4a23      	ldr	r2, [pc, #140]	; (800459c <split_central_device_found+0xd0>)
 8004510:	211e      	movs	r1, #30
 8004512:	a80c      	add	r0, sp, #48	; 0x30
 8004514:	f015 fd8c 	bl	801a030 <snprintk>
    LOG_DBG("[DEVICE]: %s, AD evt type %u, AD data len %u, RSSI %i", log_strdup(dev), type, ad->len,
 8004518:	f04f 0600 	mov.w	r6, #0
 800451c:	2304      	movs	r3, #4
 800451e:	f363 0602 	bfi	r6, r3, #0, #3
 8004522:	f36f 06c5 	bfc	r6, #3, #3
 8004526:	481e      	ldr	r0, [pc, #120]	; (80045a0 <split_central_device_found+0xd4>)
 8004528:	4b1e      	ldr	r3, [pc, #120]	; (80045a4 <split_central_device_found+0xd8>)
 800452a:	1ac0      	subs	r0, r0, r3
 800452c:	f3c0 00c9 	ubfx	r0, r0, #3, #10
 8004530:	f360 168f 	bfi	r6, r0, #6, #10
 8004534:	4b1c      	ldr	r3, [pc, #112]	; (80045a8 <split_central_device_found+0xdc>)
 8004536:	9307      	str	r3, [sp, #28]
 8004538:	a80c      	add	r0, sp, #48	; 0x30
 800453a:	f001 fe31 	bl	80061a0 <log_strdup>
 800453e:	9008      	str	r0, [sp, #32]
 8004540:	9509      	str	r5, [sp, #36]	; 0x24
 8004542:	88bb      	ldrh	r3, [r7, #4]
 8004544:	930a      	str	r3, [sp, #40]	; 0x28
 8004546:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800454a:	4633      	mov	r3, r6
 800454c:	2205      	movs	r2, #5
 800454e:	4649      	mov	r1, r9
 8004550:	4816      	ldr	r0, [pc, #88]	; (80045ac <split_central_device_found+0xe0>)
 8004552:	f002 f8f9 	bl	8006748 <log_n>
    if (type == BT_GAP_ADV_TYPE_ADV_IND || type == BT_GAP_ADV_TYPE_ADV_DIRECT_IND) {
 8004556:	2d01      	cmp	r5, #1
 8004558:	d917      	bls.n	800458a <split_central_device_found+0xbe>
}
 800455a:	b015      	add	sp, #84	; 0x54
 800455c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		strcpy(type, "random");
 8004560:	4913      	ldr	r1, [pc, #76]	; (80045b0 <split_central_device_found+0xe4>)
 8004562:	a807      	add	r0, sp, #28
 8004564:	f018 f92d 	bl	801c7c2 <strcpy>
		break;
 8004568:	e7c2      	b.n	80044f0 <split_central_device_found+0x24>
		strcpy(type, "public-id");
 800456a:	4912      	ldr	r1, [pc, #72]	; (80045b4 <split_central_device_found+0xe8>)
 800456c:	a807      	add	r0, sp, #28
 800456e:	f018 f928 	bl	801c7c2 <strcpy>
		break;
 8004572:	e7bd      	b.n	80044f0 <split_central_device_found+0x24>
		strcpy(type, "random-id");
 8004574:	4910      	ldr	r1, [pc, #64]	; (80045b8 <split_central_device_found+0xec>)
 8004576:	a807      	add	r0, sp, #28
 8004578:	f018 f923 	bl	801c7c2 <strcpy>
		break;
 800457c:	e7b8      	b.n	80044f0 <split_central_device_found+0x24>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
 800457e:	4a0f      	ldr	r2, [pc, #60]	; (80045bc <split_central_device_found+0xf0>)
 8004580:	210a      	movs	r1, #10
 8004582:	a807      	add	r0, sp, #28
 8004584:	f015 fd54 	bl	801a030 <snprintk>
		break;
 8004588:	e7b2      	b.n	80044f0 <split_central_device_found+0x24>
        bt_data_parse(ad, split_central_eir_found, (void *)addr);
 800458a:	4622      	mov	r2, r4
 800458c:	490c      	ldr	r1, [pc, #48]	; (80045c0 <split_central_device_found+0xf4>)
 800458e:	4638      	mov	r0, r7
 8004590:	f009 ffda 	bl	800e548 <bt_data_parse>
}
 8004594:	e7e1      	b.n	800455a <split_central_device_found+0x8e>
 8004596:	bf00      	nop
 8004598:	08023c50 	.word	0x08023c50
 800459c:	08023c78 	.word	0x08023c78
 80045a0:	08022c60 	.word	0x08022c60
 80045a4:	08022b90 	.word	0x08022b90
 80045a8:	08024834 	.word	0x08024834
 80045ac:	08024748 	.word	0x08024748
 80045b0:	08023c58 	.word	0x08023c58
 80045b4:	08023c60 	.word	0x08023c60
 80045b8:	08023c6c 	.word	0x08023c6c
 80045bc:	08027b48 	.word	0x08027b48
 80045c0:	0800413d 	.word	0x0800413d

080045c4 <in_ready_cb>:

static const struct device *hid_dev;

static K_SEM_DEFINE(hid_sem, 1, 1);

static void in_ready_cb(const struct device *dev) { k_sem_give(&hid_sem); }
 80045c4:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
 80045c6:	4802      	ldr	r0, [pc, #8]	; (80045d0 <in_ready_cb+0xc>)
 80045c8:	f014 fb3e 	bl	8018c48 <z_impl_k_sem_give>
 80045cc:	bd08      	pop	{r3, pc}
 80045ce:	bf00      	nop
 80045d0:	20001050 	.word	0x20001050

080045d4 <zmk_usb_init>:
void usb_status_cb(enum usb_dc_status_code status, const uint8_t *params) {
    usb_status = status;
    raise_usb_status_changed_event();
};

static int zmk_usb_init(const struct device *_arg) {
 80045d4:	b508      	push	{r3, lr}
 80045d6:	481e      	ldr	r0, [pc, #120]	; (8004650 <zmk_usb_init+0x7c>)
 80045d8:	f013 fb3a 	bl	8017c50 <z_impl_device_get_binding>
    int usb_enable_ret;

#ifdef CONFIG_ZMK_USB
    hid_dev = device_get_binding("HID_0");
 80045dc:	4b1d      	ldr	r3, [pc, #116]	; (8004654 <zmk_usb_init+0x80>)
 80045de:	6018      	str	r0, [r3, #0]
    if (hid_dev == NULL) {
 80045e0:	b168      	cbz	r0, 80045fe <zmk_usb_init+0x2a>
        LOG_ERR("Unable to locate HID device");
        return -EINVAL;
    }

    usb_hid_register_device(hid_dev, zmk_hid_report_desc, sizeof(zmk_hid_report_desc), &ops);
 80045e2:	4b1d      	ldr	r3, [pc, #116]	; (8004658 <zmk_usb_init+0x84>)
 80045e4:	224c      	movs	r2, #76	; 0x4c
 80045e6:	491d      	ldr	r1, [pc, #116]	; (800465c <zmk_usb_init+0x88>)
 80045e8:	f012 fd54 	bl	8017094 <usb_hid_register_device>

    usb_hid_init(hid_dev);
 80045ec:	4b19      	ldr	r3, [pc, #100]	; (8004654 <zmk_usb_init+0x80>)
 80045ee:	6818      	ldr	r0, [r3, #0]
 80045f0:	f01b ffb5 	bl	802055e <usb_hid_init>

#endif /* CONFIG_ZMK_USB */

    usb_enable_ret = usb_enable(usb_status_cb);
 80045f4:	481a      	ldr	r0, [pc, #104]	; (8004660 <zmk_usb_init+0x8c>)
 80045f6:	f003 fc3d 	bl	8007e74 <usb_enable>

    if (usb_enable_ret != 0) {
 80045fa:	b9a0      	cbnz	r0, 8004626 <zmk_usb_init+0x52>
        LOG_ERR("Unable to enable USB");
        return -EINVAL;
    }

    return 0;
}
 80045fc:	bd08      	pop	{r3, pc}
        LOG_ERR("Unable to locate HID device");
 80045fe:	f04f 0100 	mov.w	r1, #0
 8004602:	2301      	movs	r3, #1
 8004604:	f363 0102 	bfi	r1, r3, #0, #3
 8004608:	f36f 01c5 	bfc	r1, #3, #3
 800460c:	4b15      	ldr	r3, [pc, #84]	; (8004664 <zmk_usb_init+0x90>)
 800460e:	4a16      	ldr	r2, [pc, #88]	; (8004668 <zmk_usb_init+0x94>)
 8004610:	1a9b      	subs	r3, r3, r2
 8004612:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8004616:	f363 118f 	bfi	r1, r3, #6, #10
 800461a:	4814      	ldr	r0, [pc, #80]	; (800466c <zmk_usb_init+0x98>)
 800461c:	f002 f900 	bl	8006820 <log_0>
        return -EINVAL;
 8004620:	f06f 0015 	mvn.w	r0, #21
 8004624:	e7ea      	b.n	80045fc <zmk_usb_init+0x28>
        LOG_ERR("Unable to enable USB");
 8004626:	f04f 0100 	mov.w	r1, #0
 800462a:	2301      	movs	r3, #1
 800462c:	f363 0102 	bfi	r1, r3, #0, #3
 8004630:	f36f 01c5 	bfc	r1, #3, #3
 8004634:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <zmk_usb_init+0x90>)
 8004636:	4a0c      	ldr	r2, [pc, #48]	; (8004668 <zmk_usb_init+0x94>)
 8004638:	1a9b      	subs	r3, r3, r2
 800463a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800463e:	f363 118f 	bfi	r1, r3, #6, #10
 8004642:	480b      	ldr	r0, [pc, #44]	; (8004670 <zmk_usb_init+0x9c>)
 8004644:	f002 f8ec 	bl	8006820 <log_0>
        return -EINVAL;
 8004648:	f06f 0015 	mvn.w	r0, #21
 800464c:	e7d6      	b.n	80045fc <zmk_usb_init+0x28>
 800464e:	bf00      	nop
 8004650:	08024890 	.word	0x08024890
 8004654:	200035e8 	.word	0x200035e8
 8004658:	080248cc 	.word	0x080248cc
 800465c:	080248f0 	.word	0x080248f0
 8004660:	08004701 	.word	0x08004701
 8004664:	08022c60 	.word	0x08022c60
 8004668:	08022b90 	.word	0x08022b90
 800466c:	08024898 	.word	0x08024898
 8004670:	080248b4 	.word	0x080248b4

08004674 <zmk_usb_hid_send_report>:
int zmk_usb_hid_send_report(const uint8_t *report, size_t len) {
 8004674:	b538      	push	{r3, r4, r5, lr}
    switch (usb_status) {
 8004676:	4b14      	ldr	r3, [pc, #80]	; (80046c8 <zmk_usb_hid_send_report+0x54>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	2b0b      	cmp	r3, #11
 800467c:	d80b      	bhi.n	8004696 <zmk_usb_hid_send_report+0x22>
 800467e:	e8df f003 	tbb	[pc, r3]
 8004682:	1f1f      	.short	0x1f1f
 8004684:	061f0a0a 	.word	0x061f0a0a
 8004688:	0a0a0a0a 	.word	0x0a0a0a0a
 800468c:	1f0a      	.short	0x1f0a
        return usb_wakeup_request();
 800468e:	f017 f829 	bl	801b6e4 <usb_wakeup_request>
 8004692:	4604      	mov	r4, r0
 8004694:	e016      	b.n	80046c4 <zmk_usb_hid_send_report+0x50>
 8004696:	4604      	mov	r4, r0
 8004698:	460d      	mov	r5, r1
	return z_impl_k_sem_take(sem, timeout);
 800469a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800469e:	2300      	movs	r3, #0
 80046a0:	480a      	ldr	r0, [pc, #40]	; (80046cc <zmk_usb_hid_send_report+0x58>)
 80046a2:	f014 faf9 	bl	8018c98 <z_impl_k_sem_take>
        int err = hid_int_ep_write(hid_dev, report, len, NULL);
 80046a6:	2300      	movs	r3, #0
 80046a8:	462a      	mov	r2, r5
 80046aa:	4621      	mov	r1, r4
 80046ac:	4808      	ldr	r0, [pc, #32]	; (80046d0 <zmk_usb_hid_send_report+0x5c>)
 80046ae:	6800      	ldr	r0, [r0, #0]
 80046b0:	f012 fd0a 	bl	80170c8 <hid_int_ep_write>
        if (err) {
 80046b4:	4604      	mov	r4, r0
 80046b6:	b128      	cbz	r0, 80046c4 <zmk_usb_hid_send_report+0x50>
	z_impl_k_sem_give(sem);
 80046b8:	4804      	ldr	r0, [pc, #16]	; (80046cc <zmk_usb_hid_send_report+0x58>)
 80046ba:	f014 fac5 	bl	8018c48 <z_impl_k_sem_give>
}
 80046be:	e001      	b.n	80046c4 <zmk_usb_hid_send_report+0x50>
    switch (usb_status) {
 80046c0:	f06f 0412 	mvn.w	r4, #18
}
 80046c4:	4620      	mov	r0, r4
 80046c6:	bd38      	pop	{r3, r4, r5, pc}
 80046c8:	20000ce2 	.word	0x20000ce2
 80046cc:	20001050 	.word	0x20001050
 80046d0:	200035e8 	.word	0x200035e8

080046d4 <zmk_usb_get_conn_state>:
    switch (usb_status) {
 80046d4:	4b09      	ldr	r3, [pc, #36]	; (80046fc <zmk_usb_get_conn_state+0x28>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	2b04      	cmp	r3, #4
 80046da:	d00a      	beq.n	80046f2 <zmk_usb_get_conn_state+0x1e>
 80046dc:	d805      	bhi.n	80046ea <zmk_usb_get_conn_state+0x16>
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d801      	bhi.n	80046e6 <zmk_usb_get_conn_state+0x12>
        return ZMK_USB_CONN_POWERED;
 80046e2:	2001      	movs	r0, #1
 80046e4:	4770      	bx	lr
        return ZMK_USB_CONN_HID;
 80046e6:	2002      	movs	r0, #2
 80046e8:	4770      	bx	lr
    switch (usb_status) {
 80046ea:	2b0b      	cmp	r3, #11
 80046ec:	d103      	bne.n	80046f6 <zmk_usb_get_conn_state+0x22>
 80046ee:	2000      	movs	r0, #0
 80046f0:	4770      	bx	lr
 80046f2:	2000      	movs	r0, #0
 80046f4:	4770      	bx	lr
        return ZMK_USB_CONN_HID;
 80046f6:	2002      	movs	r0, #2
}
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	20000ce2 	.word	0x20000ce2

08004700 <usb_status_cb>:
void usb_status_cb(enum usb_dc_status_code status, const uint8_t *params) {
 8004700:	b508      	push	{r3, lr}
    usb_status = status;
 8004702:	4b02      	ldr	r3, [pc, #8]	; (800470c <usb_status_cb+0xc>)
 8004704:	7018      	strb	r0, [r3, #0]
    raise_usb_status_changed_event();
 8004706:	f015 f9bb 	bl	8019a80 <raise_usb_status_changed_event>
};
 800470a:	bd08      	pop	{r3, pc}
 800470c:	20000ce2 	.word	0x20000ce2

08004710 <read_hids_report_map>:
    return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
                             sizeof(struct hids_report));
}

static ssize_t read_hids_report_map(struct bt_conn *conn, const struct bt_gatt_attr *attr,
                                    void *buf, uint16_t len, uint16_t offset) {
 8004710:	b510      	push	{r4, lr}
 8004712:	b084      	sub	sp, #16
    return bt_gatt_attr_read(conn, attr, buf, len, offset, zmk_hid_report_desc,
 8004714:	244c      	movs	r4, #76	; 0x4c
 8004716:	9402      	str	r4, [sp, #8]
 8004718:	4c04      	ldr	r4, [pc, #16]	; (800472c <read_hids_report_map+0x1c>)
 800471a:	9401      	str	r4, [sp, #4]
 800471c:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8004720:	9400      	str	r4, [sp, #0]
 8004722:	f01a fbd9 	bl	801eed8 <bt_gatt_attr_read>
                             sizeof(zmk_hid_report_desc));
}
 8004726:	b004      	add	sp, #16
 8004728:	bd10      	pop	{r4, pc}
 800472a:	bf00      	nop
 800472c:	08024c24 	.word	0x08024c24

08004730 <zmk_hog_init>:
    k_work_submit_to_queue(&hog_work_q, &hog_consumer_work);

    return 0;
};

int zmk_hog_init(const struct device *_arg) {
 8004730:	b508      	push	{r3, lr}
    k_work_q_start(&hog_work_q, hog_q_stack, K_THREAD_STACK_SIZEOF(hog_q_stack),
 8004732:	2305      	movs	r3, #5
 8004734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004738:	4902      	ldr	r1, [pc, #8]	; (8004744 <zmk_hog_init+0x14>)
 800473a:	4803      	ldr	r0, [pc, #12]	; (8004748 <zmk_hog_init+0x18>)
 800473c:	f014 fb72 	bl	8018e24 <k_work_q_start>
                   CONFIG_ZMK_BLE_THREAD_PRIORITY);

    return 0;
}
 8004740:	2000      	movs	r0, #0
 8004742:	bd08      	pop	{r3, pc}
 8004744:	20006210 	.word	0x20006210
 8004748:	200019a8 	.word	0x200019a8

0800474c <destination_connection>:
struct bt_conn *destination_connection() {
 800474c:	b510      	push	{r4, lr}
 800474e:	b082      	sub	sp, #8
    bt_addr_le_t *addr = zmk_ble_active_profile_addr();
 8004750:	f7fe fb58 	bl	8002e04 <zmk_ble_active_profile_addr>
 8004754:	4604      	mov	r4, r0
    LOG_DBG("Address pointer %p", addr);
 8004756:	f04f 0300 	mov.w	r3, #0
 800475a:	2204      	movs	r2, #4
 800475c:	f362 0302 	bfi	r3, r2, #0, #3
 8004760:	f36f 03c5 	bfc	r3, #3, #3
 8004764:	4a20      	ldr	r2, [pc, #128]	; (80047e8 <destination_connection+0x9c>)
 8004766:	4921      	ldr	r1, [pc, #132]	; (80047ec <destination_connection+0xa0>)
 8004768:	1a52      	subs	r2, r2, r1
 800476a:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 800476e:	f362 138f 	bfi	r3, r2, #6, #10
 8004772:	4602      	mov	r2, r0
 8004774:	491e      	ldr	r1, [pc, #120]	; (80047f0 <destination_connection+0xa4>)
 8004776:	481f      	ldr	r0, [pc, #124]	; (80047f4 <destination_connection+0xa8>)
 8004778:	f001 ff62 	bl	8006640 <log_2>
    if (!bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
 800477c:	2300      	movs	r3, #0
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	f8cd 3003 	str.w	r3, [sp, #3]
 8004784:	2207      	movs	r2, #7
 8004786:	4669      	mov	r1, sp
 8004788:	4620      	mov	r0, r4
 800478a:	f018 f878 	bl	801c87e <memcmp>
 800478e:	b130      	cbz	r0, 800479e <destination_connection+0x52>
    } else if ((conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr)) == NULL) {
 8004790:	4621      	mov	r1, r4
 8004792:	2000      	movs	r0, #0
 8004794:	f00b fe42 	bl	801041c <bt_conn_lookup_addr_le>
 8004798:	b1a0      	cbz	r0, 80047c4 <destination_connection+0x78>
}
 800479a:	b002      	add	sp, #8
 800479c:	bd10      	pop	{r4, pc}
        LOG_WRN("Not sending, no active address for current profile");
 800479e:	f04f 0100 	mov.w	r1, #0
 80047a2:	2302      	movs	r3, #2
 80047a4:	f363 0102 	bfi	r1, r3, #0, #3
 80047a8:	f36f 01c5 	bfc	r1, #3, #3
 80047ac:	4b0e      	ldr	r3, [pc, #56]	; (80047e8 <destination_connection+0x9c>)
 80047ae:	4a0f      	ldr	r2, [pc, #60]	; (80047ec <destination_connection+0xa0>)
 80047b0:	1a9b      	subs	r3, r3, r2
 80047b2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80047b6:	f363 118f 	bfi	r1, r3, #6, #10
 80047ba:	480f      	ldr	r0, [pc, #60]	; (80047f8 <destination_connection+0xac>)
 80047bc:	f002 f830 	bl	8006820 <log_0>
        return NULL;
 80047c0:	2000      	movs	r0, #0
 80047c2:	e7ea      	b.n	800479a <destination_connection+0x4e>
        LOG_WRN("Not sending, not connected to active profile");
 80047c4:	f04f 0100 	mov.w	r1, #0
 80047c8:	2302      	movs	r3, #2
 80047ca:	f363 0102 	bfi	r1, r3, #0, #3
 80047ce:	f36f 01c5 	bfc	r1, #3, #3
 80047d2:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <destination_connection+0x9c>)
 80047d4:	4a05      	ldr	r2, [pc, #20]	; (80047ec <destination_connection+0xa0>)
 80047d6:	1a9b      	subs	r3, r3, r2
 80047d8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80047dc:	f363 118f 	bfi	r1, r3, #6, #10
 80047e0:	4806      	ldr	r0, [pc, #24]	; (80047fc <destination_connection+0xb0>)
 80047e2:	f002 f81d 	bl	8006820 <log_0>
        return NULL;
 80047e6:	e7eb      	b.n	80047c0 <destination_connection+0x74>
 80047e8:	08022c60 	.word	0x08022c60
 80047ec:	08022b90 	.word	0x08022b90
 80047f0:	08024ac0 	.word	0x08024ac0
 80047f4:	0802493c 	.word	0x0802493c
 80047f8:	08024954 	.word	0x08024954
 80047fc:	08024988 	.word	0x08024988

08004800 <send_keyboard_report_callback>:
void send_keyboard_report_callback(struct k_work *work) {
 8004800:	b530      	push	{r4, r5, lr}
 8004802:	b089      	sub	sp, #36	; 0x24
    while (k_msgq_get(&zmk_hog_keyboard_msgq, &report, K_NO_WAIT) == 0) {
 8004804:	e012      	b.n	800482c <send_keyboard_report_callback+0x2c>
            LOG_ERR("Error notifying %d", err);
 8004806:	2301      	movs	r3, #1
 8004808:	f363 0502 	bfi	r5, r3, #0, #3
 800480c:	f36f 05c5 	bfc	r5, #3, #3
 8004810:	4b16      	ldr	r3, [pc, #88]	; (800486c <send_keyboard_report_callback+0x6c>)
 8004812:	4a17      	ldr	r2, [pc, #92]	; (8004870 <send_keyboard_report_callback+0x70>)
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800481a:	f363 158f 	bfi	r5, r3, #6, #10
 800481e:	462a      	mov	r2, r5
 8004820:	4814      	ldr	r0, [pc, #80]	; (8004874 <send_keyboard_report_callback+0x74>)
 8004822:	f001 fe8d 	bl	8006540 <log_1>
        bt_conn_unref(conn);
 8004826:	4620      	mov	r0, r4
 8004828:	f018 ff82 	bl	801d730 <bt_conn_unref>
	return z_impl_k_msgq_get(msgq, data, timeout);
 800482c:	2200      	movs	r2, #0
 800482e:	2300      	movs	r3, #0
 8004830:	a906      	add	r1, sp, #24
 8004832:	4811      	ldr	r0, [pc, #68]	; (8004878 <send_keyboard_report_callback+0x78>)
 8004834:	f013 fcd8 	bl	80181e8 <z_impl_k_msgq_get>
    while (k_msgq_get(&zmk_hog_keyboard_msgq, &report, K_NO_WAIT) == 0) {
 8004838:	b9b0      	cbnz	r0, 8004868 <send_keyboard_report_callback+0x68>
        struct bt_conn *conn = destination_connection();
 800483a:	f7ff ff87 	bl	800474c <destination_connection>
        if (conn == NULL) {
 800483e:	4604      	mov	r4, r0
 8004840:	b190      	cbz	r0, 8004868 <send_keyboard_report_callback+0x68>
        struct bt_gatt_notify_params notify_params = {
 8004842:	2300      	movs	r3, #0
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	9303      	str	r3, [sp, #12]
 8004848:	9304      	str	r3, [sp, #16]
 800484a:	9305      	str	r3, [sp, #20]
 800484c:	4b0b      	ldr	r3, [pc, #44]	; (800487c <send_keyboard_report_callback+0x7c>)
 800484e:	9301      	str	r3, [sp, #4]
 8004850:	ab06      	add	r3, sp, #24
 8004852:	9302      	str	r3, [sp, #8]
 8004854:	2308      	movs	r3, #8
 8004856:	f8ad 300c 	strh.w	r3, [sp, #12]
        int err = bt_gatt_notify_cb(conn, &notify_params);
 800485a:	4669      	mov	r1, sp
 800485c:	f00f fa96 	bl	8013d8c <bt_gatt_notify_cb>
        if (err) {
 8004860:	4601      	mov	r1, r0
 8004862:	2800      	cmp	r0, #0
 8004864:	d0df      	beq.n	8004826 <send_keyboard_report_callback+0x26>
 8004866:	e7ce      	b.n	8004806 <send_keyboard_report_callback+0x6>
}
 8004868:	b009      	add	sp, #36	; 0x24
 800486a:	bd30      	pop	{r4, r5, pc}
 800486c:	08022c60 	.word	0x08022c60
 8004870:	08022b90 	.word	0x08022b90
 8004874:	080249bc 	.word	0x080249bc
 8004878:	20001000 	.word	0x20001000
 800487c:	08024b5c 	.word	0x08024b5c

08004880 <send_consumer_report_callback>:
void send_consumer_report_callback(struct k_work *work) {
 8004880:	b530      	push	{r4, r5, lr}
 8004882:	b08b      	sub	sp, #44	; 0x2c
    while (k_msgq_get(&zmk_hog_consumer_msgq, &report, K_NO_WAIT) == 0) {
 8004884:	e013      	b.n	80048ae <send_consumer_report_callback+0x2e>
            LOG_DBG("Error notifying %d", err);
 8004886:	2304      	movs	r3, #4
 8004888:	f363 0502 	bfi	r5, r3, #0, #3
 800488c:	f36f 05c5 	bfc	r5, #3, #3
 8004890:	4b17      	ldr	r3, [pc, #92]	; (80048f0 <send_consumer_report_callback+0x70>)
 8004892:	4918      	ldr	r1, [pc, #96]	; (80048f4 <send_consumer_report_callback+0x74>)
 8004894:	1a5b      	subs	r3, r3, r1
 8004896:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800489a:	f363 158f 	bfi	r5, r3, #6, #10
 800489e:	462b      	mov	r3, r5
 80048a0:	4915      	ldr	r1, [pc, #84]	; (80048f8 <send_consumer_report_callback+0x78>)
 80048a2:	4816      	ldr	r0, [pc, #88]	; (80048fc <send_consumer_report_callback+0x7c>)
 80048a4:	f001 fecc 	bl	8006640 <log_2>
        bt_conn_unref(conn);
 80048a8:	4620      	mov	r0, r4
 80048aa:	f018 ff41 	bl	801d730 <bt_conn_unref>
 80048ae:	2200      	movs	r2, #0
 80048b0:	2300      	movs	r3, #0
 80048b2:	a907      	add	r1, sp, #28
 80048b4:	4812      	ldr	r0, [pc, #72]	; (8004900 <send_consumer_report_callback+0x80>)
 80048b6:	f013 fc97 	bl	80181e8 <z_impl_k_msgq_get>
    while (k_msgq_get(&zmk_hog_consumer_msgq, &report, K_NO_WAIT) == 0) {
 80048ba:	b9b0      	cbnz	r0, 80048ea <send_consumer_report_callback+0x6a>
        struct bt_conn *conn = destination_connection();
 80048bc:	f7ff ff46 	bl	800474c <destination_connection>
        if (conn == NULL) {
 80048c0:	4604      	mov	r4, r0
 80048c2:	b190      	cbz	r0, 80048ea <send_consumer_report_callback+0x6a>
        struct bt_gatt_notify_params notify_params = {
 80048c4:	2300      	movs	r3, #0
 80048c6:	9301      	str	r3, [sp, #4]
 80048c8:	9304      	str	r3, [sp, #16]
 80048ca:	9305      	str	r3, [sp, #20]
 80048cc:	9306      	str	r3, [sp, #24]
 80048ce:	4b0d      	ldr	r3, [pc, #52]	; (8004904 <send_consumer_report_callback+0x84>)
 80048d0:	9302      	str	r3, [sp, #8]
 80048d2:	ab07      	add	r3, sp, #28
 80048d4:	9303      	str	r3, [sp, #12]
 80048d6:	230c      	movs	r3, #12
 80048d8:	f8ad 3010 	strh.w	r3, [sp, #16]
        int err = bt_gatt_notify_cb(conn, &notify_params);
 80048dc:	a901      	add	r1, sp, #4
 80048de:	f00f fa55 	bl	8013d8c <bt_gatt_notify_cb>
        if (err) {
 80048e2:	4602      	mov	r2, r0
 80048e4:	2800      	cmp	r0, #0
 80048e6:	d0df      	beq.n	80048a8 <send_consumer_report_callback+0x28>
 80048e8:	e7cd      	b.n	8004886 <send_consumer_report_callback+0x6>
};
 80048ea:	b00b      	add	sp, #44	; 0x2c
 80048ec:	bd30      	pop	{r4, r5, pc}
 80048ee:	bf00      	nop
 80048f0:	08022c60 	.word	0x08022c60
 80048f4:	08022b90 	.word	0x08022b90
 80048f8:	08024ad8 	.word	0x08024ad8
 80048fc:	080249b8 	.word	0x080249b8
 8004900:	20000fd8 	.word	0x20000fd8
 8004904:	08024bc0 	.word	0x08024bc0

08004908 <zmk_hog_send_keyboard_report>:
int zmk_hog_send_keyboard_report(struct zmk_hid_keyboard_report_body *report) {
 8004908:	b530      	push	{r4, r5, lr}
 800490a:	b083      	sub	sp, #12
 800490c:	4604      	mov	r4, r0
	return z_impl_k_msgq_put(msgq, data, timeout);
 800490e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004912:	2300      	movs	r3, #0
 8004914:	4601      	mov	r1, r0
 8004916:	4828      	ldr	r0, [pc, #160]	; (80049b8 <zmk_hog_send_keyboard_report+0xb0>)
 8004918:	f013 fc0e 	bl	8018138 <z_impl_k_msgq_put>
    if (err) {
 800491c:	4605      	mov	r5, r0
 800491e:	b388      	cbz	r0, 8004984 <zmk_hog_send_keyboard_report+0x7c>
        switch (err) {
 8004920:	f110 0f0b 	cmn.w	r0, #11
 8004924:	d012      	beq.n	800494c <zmk_hog_send_keyboard_report+0x44>
            LOG_WRN("Failed to queue keyboard report to send (%d)", err);
 8004926:	f04f 0200 	mov.w	r2, #0
 800492a:	2302      	movs	r3, #2
 800492c:	f363 0202 	bfi	r2, r3, #0, #3
 8004930:	f36f 02c5 	bfc	r2, #3, #3
 8004934:	4b21      	ldr	r3, [pc, #132]	; (80049bc <zmk_hog_send_keyboard_report+0xb4>)
 8004936:	4922      	ldr	r1, [pc, #136]	; (80049c0 <zmk_hog_send_keyboard_report+0xb8>)
 8004938:	1a5b      	subs	r3, r3, r1
 800493a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800493e:	f363 128f 	bfi	r2, r3, #6, #10
 8004942:	4601      	mov	r1, r0
 8004944:	481f      	ldr	r0, [pc, #124]	; (80049c4 <zmk_hog_send_keyboard_report+0xbc>)
 8004946:	f001 fdfb 	bl	8006540 <log_1>
            return err;
 800494a:	e02b      	b.n	80049a4 <zmk_hog_send_keyboard_report+0x9c>
            LOG_WRN("Keyboard message queue full, popping first message and queueing again");
 800494c:	f04f 0100 	mov.w	r1, #0
 8004950:	2302      	movs	r3, #2
 8004952:	f363 0102 	bfi	r1, r3, #0, #3
 8004956:	f36f 01c5 	bfc	r1, #3, #3
 800495a:	4b18      	ldr	r3, [pc, #96]	; (80049bc <zmk_hog_send_keyboard_report+0xb4>)
 800495c:	4a18      	ldr	r2, [pc, #96]	; (80049c0 <zmk_hog_send_keyboard_report+0xb8>)
 800495e:	1a9b      	subs	r3, r3, r2
 8004960:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8004964:	f363 118f 	bfi	r1, r3, #6, #10
 8004968:	4817      	ldr	r0, [pc, #92]	; (80049c8 <zmk_hog_send_keyboard_report+0xc0>)
 800496a:	f001 ff59 	bl	8006820 <log_0>
	return z_impl_k_msgq_get(msgq, data, timeout);
 800496e:	2200      	movs	r2, #0
 8004970:	2300      	movs	r3, #0
 8004972:	4669      	mov	r1, sp
 8004974:	4810      	ldr	r0, [pc, #64]	; (80049b8 <zmk_hog_send_keyboard_report+0xb0>)
 8004976:	f013 fc37 	bl	80181e8 <z_impl_k_msgq_get>
            return zmk_hog_send_keyboard_report(report);
 800497a:	4620      	mov	r0, r4
 800497c:	f7ff ffc4 	bl	8004908 <zmk_hog_send_keyboard_report>
 8004980:	4605      	mov	r5, r0
 8004982:	e00f      	b.n	80049a4 <zmk_hog_send_keyboard_report+0x9c>
 8004984:	4b11      	ldr	r3, [pc, #68]	; (80049cc <zmk_hog_send_keyboard_report+0xc4>)
 8004986:	f3bf 8f5b 	dmb	ish
 800498a:	e853 2f00 	ldrex	r2, [r3]
 800498e:	f042 0101 	orr.w	r1, r2, #1
 8004992:	e843 1000 	strex	r0, r1, [r3]
 8004996:	2800      	cmp	r0, #0
 8004998:	d1f7      	bne.n	800498a <zmk_hog_send_keyboard_report+0x82>
 800499a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 800499e:	f012 0f01 	tst.w	r2, #1
 80049a2:	d002      	beq.n	80049aa <zmk_hog_send_keyboard_report+0xa2>
};
 80049a4:	4628      	mov	r0, r5
 80049a6:	b003      	add	sp, #12
 80049a8:	bd30      	pop	{r4, r5, pc}
		k_queue_append(&work_q->queue, work);
 80049aa:	f1a3 0108 	sub.w	r1, r3, #8
 80049ae:	4808      	ldr	r0, [pc, #32]	; (80049d0 <zmk_hog_send_keyboard_report+0xc8>)
 80049b0:	f01d fa80 	bl	8021eb4 <k_queue_append>
}
 80049b4:	e7f6      	b.n	80049a4 <zmk_hog_send_keyboard_report+0x9c>
 80049b6:	bf00      	nop
 80049b8:	20001000 	.word	0x20001000
 80049bc:	08022c60 	.word	0x08022c60
 80049c0:	08022b90 	.word	0x08022b90
 80049c4:	08024a18 	.word	0x08024a18
 80049c8:	080249d0 	.word	0x080249d0
 80049cc:	20000994 	.word	0x20000994
 80049d0:	200019a8 	.word	0x200019a8

080049d4 <zmk_hog_send_consumer_report>:
int zmk_hog_send_consumer_report(struct zmk_hid_consumer_report_body *report) {
 80049d4:	b530      	push	{r4, r5, lr}
 80049d6:	b085      	sub	sp, #20
 80049d8:	4604      	mov	r4, r0
	return z_impl_k_msgq_put(msgq, data, timeout);
 80049da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80049de:	2300      	movs	r3, #0
 80049e0:	4601      	mov	r1, r0
 80049e2:	4828      	ldr	r0, [pc, #160]	; (8004a84 <zmk_hog_send_consumer_report+0xb0>)
 80049e4:	f013 fba8 	bl	8018138 <z_impl_k_msgq_put>
    if (err) {
 80049e8:	4605      	mov	r5, r0
 80049ea:	b388      	cbz	r0, 8004a50 <zmk_hog_send_consumer_report+0x7c>
        switch (err) {
 80049ec:	f110 0f0b 	cmn.w	r0, #11
 80049f0:	d012      	beq.n	8004a18 <zmk_hog_send_consumer_report+0x44>
            LOG_WRN("Failed to queue consumer report to send (%d)", err);
 80049f2:	f04f 0200 	mov.w	r2, #0
 80049f6:	2302      	movs	r3, #2
 80049f8:	f363 0202 	bfi	r2, r3, #0, #3
 80049fc:	f36f 02c5 	bfc	r2, #3, #3
 8004a00:	4b21      	ldr	r3, [pc, #132]	; (8004a88 <zmk_hog_send_consumer_report+0xb4>)
 8004a02:	4922      	ldr	r1, [pc, #136]	; (8004a8c <zmk_hog_send_consumer_report+0xb8>)
 8004a04:	1a5b      	subs	r3, r3, r1
 8004a06:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8004a0a:	f363 128f 	bfi	r2, r3, #6, #10
 8004a0e:	4601      	mov	r1, r0
 8004a10:	481f      	ldr	r0, [pc, #124]	; (8004a90 <zmk_hog_send_consumer_report+0xbc>)
 8004a12:	f001 fd95 	bl	8006540 <log_1>
            return err;
 8004a16:	e02b      	b.n	8004a70 <zmk_hog_send_consumer_report+0x9c>
            LOG_WRN("Consumer message queue full, popping first message and queueing again");
 8004a18:	f04f 0100 	mov.w	r1, #0
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	f363 0102 	bfi	r1, r3, #0, #3
 8004a22:	f36f 01c5 	bfc	r1, #3, #3
 8004a26:	4b18      	ldr	r3, [pc, #96]	; (8004a88 <zmk_hog_send_consumer_report+0xb4>)
 8004a28:	4a18      	ldr	r2, [pc, #96]	; (8004a8c <zmk_hog_send_consumer_report+0xb8>)
 8004a2a:	1a9b      	subs	r3, r3, r2
 8004a2c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8004a30:	f363 118f 	bfi	r1, r3, #6, #10
 8004a34:	4817      	ldr	r0, [pc, #92]	; (8004a94 <zmk_hog_send_consumer_report+0xc0>)
 8004a36:	f001 fef3 	bl	8006820 <log_0>
	return z_impl_k_msgq_get(msgq, data, timeout);
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	a901      	add	r1, sp, #4
 8004a40:	4810      	ldr	r0, [pc, #64]	; (8004a84 <zmk_hog_send_consumer_report+0xb0>)
 8004a42:	f013 fbd1 	bl	80181e8 <z_impl_k_msgq_get>
            return zmk_hog_send_consumer_report(report);
 8004a46:	4620      	mov	r0, r4
 8004a48:	f7ff ffc4 	bl	80049d4 <zmk_hog_send_consumer_report>
 8004a4c:	4605      	mov	r5, r0
 8004a4e:	e00f      	b.n	8004a70 <zmk_hog_send_consumer_report+0x9c>
 8004a50:	4b11      	ldr	r3, [pc, #68]	; (8004a98 <zmk_hog_send_consumer_report+0xc4>)
 8004a52:	f3bf 8f5b 	dmb	ish
 8004a56:	e853 2f00 	ldrex	r2, [r3]
 8004a5a:	f042 0101 	orr.w	r1, r2, #1
 8004a5e:	e843 1000 	strex	r0, r1, [r3]
 8004a62:	2800      	cmp	r0, #0
 8004a64:	d1f7      	bne.n	8004a56 <zmk_hog_send_consumer_report+0x82>
 8004a66:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 8004a6a:	f012 0f01 	tst.w	r2, #1
 8004a6e:	d002      	beq.n	8004a76 <zmk_hog_send_consumer_report+0xa2>
};
 8004a70:	4628      	mov	r0, r5
 8004a72:	b005      	add	sp, #20
 8004a74:	bd30      	pop	{r4, r5, pc}
		k_queue_append(&work_q->queue, work);
 8004a76:	f1a3 0108 	sub.w	r1, r3, #8
 8004a7a:	4808      	ldr	r0, [pc, #32]	; (8004a9c <zmk_hog_send_consumer_report+0xc8>)
 8004a7c:	f01d fa1a 	bl	8021eb4 <k_queue_append>
}
 8004a80:	e7f6      	b.n	8004a70 <zmk_hog_send_consumer_report+0x9c>
 8004a82:	bf00      	nop
 8004a84:	20000fd8 	.word	0x20000fd8
 8004a88:	08022c60 	.word	0x08022c60
 8004a8c:	08022b90 	.word	0x08022b90
 8004a90:	08024a90 	.word	0x08024a90
 8004a94:	08024a48 	.word	0x08024a48
 8004a98:	20000988 	.word	0x20000988
 8004a9c:	200019a8 	.word	0x200019a8

08004aa0 <endpoints_save_preferred>:
}

static struct k_delayed_work endpoints_save_work;
#endif

static int endpoints_save_preferred() {
 8004aa0:	b510      	push	{r4, lr}
#if IS_ENABLED(CONFIG_SETTINGS)
    k_delayed_work_cancel(&endpoints_save_work);
 8004aa2:	4c05      	ldr	r4, [pc, #20]	; (8004ab8 <endpoints_save_preferred+0x18>)
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	f01d fc6b 	bl	8022380 <k_delayed_work_cancel>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
 8004aaa:	4a04      	ldr	r2, [pc, #16]	; (8004abc <endpoints_save_preferred+0x1c>)
 8004aac:	2300      	movs	r3, #0
 8004aae:	4621      	mov	r1, r4
 8004ab0:	4803      	ldr	r0, [pc, #12]	; (8004ac0 <endpoints_save_preferred+0x20>)
 8004ab2:	f014 f9dd 	bl	8018e70 <k_delayed_work_submit_to_queue>
    return k_delayed_work_submit(&endpoints_save_work, K_MSEC(CONFIG_ZMK_SETTINGS_SAVE_DEBOUNCE));
#else
    return 0;
#endif
}
 8004ab6:	bd10      	pop	{r4, pc}
 8004ab8:	20001a38 	.word	0x20001a38
 8004abc:	000927c0 	.word	0x000927c0
 8004ac0:	20003310 	.word	0x20003310

08004ac4 <get_selected_endpoint>:
#else
    return false;
#endif
}

static enum zmk_endpoint get_selected_endpoint() {
 8004ac4:	b510      	push	{r4, lr}
    if (is_ble_ready()) {
 8004ac6:	f015 f83f 	bl	8019b48 <is_ble_ready>
 8004aca:	b360      	cbz	r0, 8004b26 <get_selected_endpoint+0x62>
        if (is_usb_ready()) {
 8004acc:	f015 f840 	bl	8019b50 <is_usb_ready>
 8004ad0:	b1a8      	cbz	r0, 8004afe <get_selected_endpoint+0x3a>
            LOG_DBG("Both endpoints are ready. Using %d", preferred_endpoint);
 8004ad2:	f04f 0300 	mov.w	r3, #0
 8004ad6:	2204      	movs	r2, #4
 8004ad8:	f362 0302 	bfi	r3, r2, #0, #3
 8004adc:	f36f 03c5 	bfc	r3, #3, #3
 8004ae0:	4a26      	ldr	r2, [pc, #152]	; (8004b7c <get_selected_endpoint+0xb8>)
 8004ae2:	4927      	ldr	r1, [pc, #156]	; (8004b80 <get_selected_endpoint+0xbc>)
 8004ae4:	1a52      	subs	r2, r2, r1
 8004ae6:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8004aea:	f362 138f 	bfi	r3, r2, #6, #10
 8004aee:	4c25      	ldr	r4, [pc, #148]	; (8004b84 <get_selected_endpoint+0xc0>)
 8004af0:	7822      	ldrb	r2, [r4, #0]
 8004af2:	4925      	ldr	r1, [pc, #148]	; (8004b88 <get_selected_endpoint+0xc4>)
 8004af4:	4825      	ldr	r0, [pc, #148]	; (8004b8c <get_selected_endpoint+0xc8>)
 8004af6:	f001 fda3 	bl	8006640 <log_2>
            return preferred_endpoint;
 8004afa:	7820      	ldrb	r0, [r4, #0]
 8004afc:	e029      	b.n	8004b52 <get_selected_endpoint+0x8e>
        }

        LOG_DBG("Only BLE is ready.");
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	2304      	movs	r3, #4
 8004b04:	f363 0202 	bfi	r2, r3, #0, #3
 8004b08:	f36f 02c5 	bfc	r2, #3, #3
 8004b0c:	4b1b      	ldr	r3, [pc, #108]	; (8004b7c <get_selected_endpoint+0xb8>)
 8004b0e:	491c      	ldr	r1, [pc, #112]	; (8004b80 <get_selected_endpoint+0xbc>)
 8004b10:	1a5b      	subs	r3, r3, r1
 8004b12:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8004b16:	f363 128f 	bfi	r2, r3, #6, #10
 8004b1a:	491b      	ldr	r1, [pc, #108]	; (8004b88 <get_selected_endpoint+0xc4>)
 8004b1c:	481c      	ldr	r0, [pc, #112]	; (8004b90 <get_selected_endpoint+0xcc>)
 8004b1e:	f001 fd0f 	bl	8006540 <log_1>
        return ZMK_ENDPOINT_BLE;
 8004b22:	2001      	movs	r0, #1
 8004b24:	e015      	b.n	8004b52 <get_selected_endpoint+0x8e>
    }

    if (is_usb_ready()) {
 8004b26:	f015 f813 	bl	8019b50 <is_usb_ready>
 8004b2a:	b998      	cbnz	r0, 8004b54 <get_selected_endpoint+0x90>
        LOG_DBG("Only USB is ready.");
        return ZMK_ENDPOINT_USB;
    }

    LOG_DBG("No endpoints are ready.");
 8004b2c:	f04f 0200 	mov.w	r2, #0
 8004b30:	2304      	movs	r3, #4
 8004b32:	f363 0202 	bfi	r2, r3, #0, #3
 8004b36:	f36f 02c5 	bfc	r2, #3, #3
 8004b3a:	4b10      	ldr	r3, [pc, #64]	; (8004b7c <get_selected_endpoint+0xb8>)
 8004b3c:	4910      	ldr	r1, [pc, #64]	; (8004b80 <get_selected_endpoint+0xbc>)
 8004b3e:	1a5b      	subs	r3, r3, r1
 8004b40:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8004b44:	f363 128f 	bfi	r2, r3, #6, #10
 8004b48:	490f      	ldr	r1, [pc, #60]	; (8004b88 <get_selected_endpoint+0xc4>)
 8004b4a:	4812      	ldr	r0, [pc, #72]	; (8004b94 <get_selected_endpoint+0xd0>)
 8004b4c:	f001 fcf8 	bl	8006540 <log_1>
    return DEFAULT_ENDPOINT;
 8004b50:	2001      	movs	r0, #1
}
 8004b52:	bd10      	pop	{r4, pc}
        LOG_DBG("Only USB is ready.");
 8004b54:	f04f 0200 	mov.w	r2, #0
 8004b58:	2304      	movs	r3, #4
 8004b5a:	f363 0202 	bfi	r2, r3, #0, #3
 8004b5e:	f36f 02c5 	bfc	r2, #3, #3
 8004b62:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <get_selected_endpoint+0xb8>)
 8004b64:	4906      	ldr	r1, [pc, #24]	; (8004b80 <get_selected_endpoint+0xbc>)
 8004b66:	1a5b      	subs	r3, r3, r1
 8004b68:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8004b6c:	f363 128f 	bfi	r2, r3, #6, #10
 8004b70:	4905      	ldr	r1, [pc, #20]	; (8004b88 <get_selected_endpoint+0xc4>)
 8004b72:	4809      	ldr	r0, [pc, #36]	; (8004b98 <get_selected_endpoint+0xd4>)
 8004b74:	f001 fce4 	bl	8006540 <log_1>
        return ZMK_ENDPOINT_USB;
 8004b78:	2000      	movs	r0, #0
 8004b7a:	e7ea      	b.n	8004b52 <get_selected_endpoint+0x8e>
 8004b7c:	08022c60 	.word	0x08022c60
 8004b80:	08022b90 	.word	0x08022b90
 8004b84:	20005968 	.word	0x20005968
 8004b88:	08024ecc 	.word	0x08024ecc
 8004b8c:	08024c70 	.word	0x08024c70
 8004b90:	08024c98 	.word	0x08024c98
 8004b94:	08024cc8 	.word	0x08024cc8
 8004b98:	08024cb0 	.word	0x08024cb0

08004b9c <send_keyboard_report>:
static int send_keyboard_report() {
 8004b9c:	b510      	push	{r4, lr}
    struct zmk_hid_keyboard_report *keyboard_report = zmk_hid_get_keyboard_report();
 8004b9e:	f7fb ff3b 	bl	8000a18 <zmk_hid_get_keyboard_report>
    switch (current_endpoint) {
 8004ba2:	4b26      	ldr	r3, [pc, #152]	; (8004c3c <send_keyboard_report+0xa0>)
 8004ba4:	7819      	ldrb	r1, [r3, #0]
 8004ba6:	b1b1      	cbz	r1, 8004bd6 <send_keyboard_report+0x3a>
 8004ba8:	2901      	cmp	r1, #1
 8004baa:	d02d      	beq.n	8004c08 <send_keyboard_report+0x6c>
        LOG_ERR("Unsupported endpoint %d", current_endpoint);
 8004bac:	f04f 0200 	mov.w	r2, #0
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	f363 0202 	bfi	r2, r3, #0, #3
 8004bb6:	f36f 02c5 	bfc	r2, #3, #3
 8004bba:	4b21      	ldr	r3, [pc, #132]	; (8004c40 <send_keyboard_report+0xa4>)
 8004bbc:	4821      	ldr	r0, [pc, #132]	; (8004c44 <send_keyboard_report+0xa8>)
 8004bbe:	1a1b      	subs	r3, r3, r0
 8004bc0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8004bc4:	f363 128f 	bfi	r2, r3, #6, #10
 8004bc8:	481f      	ldr	r0, [pc, #124]	; (8004c48 <send_keyboard_report+0xac>)
 8004bca:	f001 fcb9 	bl	8006540 <log_1>
        return -ENOTSUP;
 8004bce:	f06f 0422 	mvn.w	r4, #34	; 0x22
}
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	bd10      	pop	{r4, pc}
        int err = zmk_usb_hid_send_report((uint8_t *)keyboard_report, sizeof(*keyboard_report));
 8004bd6:	2109      	movs	r1, #9
 8004bd8:	f7ff fd4c 	bl	8004674 <zmk_usb_hid_send_report>
        if (err) {
 8004bdc:	4604      	mov	r4, r0
 8004bde:	2800      	cmp	r0, #0
 8004be0:	d0f7      	beq.n	8004bd2 <send_keyboard_report+0x36>
            LOG_ERR("FAILED TO SEND OVER USB: %d", err);
 8004be2:	f04f 0200 	mov.w	r2, #0
 8004be6:	2301      	movs	r3, #1
 8004be8:	f363 0202 	bfi	r2, r3, #0, #3
 8004bec:	f36f 02c5 	bfc	r2, #3, #3
 8004bf0:	4b13      	ldr	r3, [pc, #76]	; (8004c40 <send_keyboard_report+0xa4>)
 8004bf2:	4914      	ldr	r1, [pc, #80]	; (8004c44 <send_keyboard_report+0xa8>)
 8004bf4:	1a5b      	subs	r3, r3, r1
 8004bf6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8004bfa:	f363 128f 	bfi	r2, r3, #6, #10
 8004bfe:	4601      	mov	r1, r0
 8004c00:	4812      	ldr	r0, [pc, #72]	; (8004c4c <send_keyboard_report+0xb0>)
 8004c02:	f001 fc9d 	bl	8006540 <log_1>
 8004c06:	e7e4      	b.n	8004bd2 <send_keyboard_report+0x36>
        int err = zmk_hog_send_keyboard_report(&keyboard_report->body);
 8004c08:	3001      	adds	r0, #1
 8004c0a:	f7ff fe7d 	bl	8004908 <zmk_hog_send_keyboard_report>
        if (err) {
 8004c0e:	4604      	mov	r4, r0
 8004c10:	2800      	cmp	r0, #0
 8004c12:	d0de      	beq.n	8004bd2 <send_keyboard_report+0x36>
            LOG_ERR("FAILED TO SEND OVER HOG: %d", err);
 8004c14:	f04f 0200 	mov.w	r2, #0
 8004c18:	2301      	movs	r3, #1
 8004c1a:	f363 0202 	bfi	r2, r3, #0, #3
 8004c1e:	f36f 02c5 	bfc	r2, #3, #3
 8004c22:	4b07      	ldr	r3, [pc, #28]	; (8004c40 <send_keyboard_report+0xa4>)
 8004c24:	4907      	ldr	r1, [pc, #28]	; (8004c44 <send_keyboard_report+0xa8>)
 8004c26:	1a5b      	subs	r3, r3, r1
 8004c28:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8004c2c:	f363 128f 	bfi	r2, r3, #6, #10
 8004c30:	4601      	mov	r1, r0
 8004c32:	4807      	ldr	r0, [pc, #28]	; (8004c50 <send_keyboard_report+0xb4>)
 8004c34:	f001 fc84 	bl	8006540 <log_1>
 8004c38:	e7cb      	b.n	8004bd2 <send_keyboard_report+0x36>
 8004c3a:	bf00      	nop
 8004c3c:	20000ce3 	.word	0x20000ce3
 8004c40:	08022c60 	.word	0x08022c60
 8004c44:	08022b90 	.word	0x08022b90
 8004c48:	08024d1c 	.word	0x08024d1c
 8004c4c:	08024ce4 	.word	0x08024ce4
 8004c50:	08024d00 	.word	0x08024d00

08004c54 <send_consumer_report>:
static int send_consumer_report() {
 8004c54:	b510      	push	{r4, lr}
    struct zmk_hid_consumer_report *consumer_report = zmk_hid_get_consumer_report();
 8004c56:	f7fb fee3 	bl	8000a20 <zmk_hid_get_consumer_report>
    switch (current_endpoint) {
 8004c5a:	4b26      	ldr	r3, [pc, #152]	; (8004cf4 <send_consumer_report+0xa0>)
 8004c5c:	7819      	ldrb	r1, [r3, #0]
 8004c5e:	b1b1      	cbz	r1, 8004c8e <send_consumer_report+0x3a>
 8004c60:	2901      	cmp	r1, #1
 8004c62:	d02d      	beq.n	8004cc0 <send_consumer_report+0x6c>
        LOG_ERR("Unsupported endpoint %d", current_endpoint);
 8004c64:	f04f 0200 	mov.w	r2, #0
 8004c68:	2301      	movs	r3, #1
 8004c6a:	f363 0202 	bfi	r2, r3, #0, #3
 8004c6e:	f36f 02c5 	bfc	r2, #3, #3
 8004c72:	4b21      	ldr	r3, [pc, #132]	; (8004cf8 <send_consumer_report+0xa4>)
 8004c74:	4821      	ldr	r0, [pc, #132]	; (8004cfc <send_consumer_report+0xa8>)
 8004c76:	1a1b      	subs	r3, r3, r0
 8004c78:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8004c7c:	f363 128f 	bfi	r2, r3, #6, #10
 8004c80:	481f      	ldr	r0, [pc, #124]	; (8004d00 <send_consumer_report+0xac>)
 8004c82:	f001 fc5d 	bl	8006540 <log_1>
        return -ENOTSUP;
 8004c86:	f06f 0422 	mvn.w	r4, #34	; 0x22
}
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	bd10      	pop	{r4, pc}
        int err = zmk_usb_hid_send_report((uint8_t *)consumer_report, sizeof(*consumer_report));
 8004c8e:	210d      	movs	r1, #13
 8004c90:	f7ff fcf0 	bl	8004674 <zmk_usb_hid_send_report>
        if (err) {
 8004c94:	4604      	mov	r4, r0
 8004c96:	2800      	cmp	r0, #0
 8004c98:	d0f7      	beq.n	8004c8a <send_consumer_report+0x36>
            LOG_ERR("FAILED TO SEND OVER USB: %d", err);
 8004c9a:	f04f 0200 	mov.w	r2, #0
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	f363 0202 	bfi	r2, r3, #0, #3
 8004ca4:	f36f 02c5 	bfc	r2, #3, #3
 8004ca8:	4b13      	ldr	r3, [pc, #76]	; (8004cf8 <send_consumer_report+0xa4>)
 8004caa:	4914      	ldr	r1, [pc, #80]	; (8004cfc <send_consumer_report+0xa8>)
 8004cac:	1a5b      	subs	r3, r3, r1
 8004cae:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8004cb2:	f363 128f 	bfi	r2, r3, #6, #10
 8004cb6:	4601      	mov	r1, r0
 8004cb8:	4812      	ldr	r0, [pc, #72]	; (8004d04 <send_consumer_report+0xb0>)
 8004cba:	f001 fc41 	bl	8006540 <log_1>
 8004cbe:	e7e4      	b.n	8004c8a <send_consumer_report+0x36>
        int err = zmk_hog_send_consumer_report(&consumer_report->body);
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	f7ff fe87 	bl	80049d4 <zmk_hog_send_consumer_report>
        if (err) {
 8004cc6:	4604      	mov	r4, r0
 8004cc8:	2800      	cmp	r0, #0
 8004cca:	d0de      	beq.n	8004c8a <send_consumer_report+0x36>
            LOG_ERR("FAILED TO SEND OVER HOG: %d", err);
 8004ccc:	f04f 0200 	mov.w	r2, #0
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	f363 0202 	bfi	r2, r3, #0, #3
 8004cd6:	f36f 02c5 	bfc	r2, #3, #3
 8004cda:	4b07      	ldr	r3, [pc, #28]	; (8004cf8 <send_consumer_report+0xa4>)
 8004cdc:	4907      	ldr	r1, [pc, #28]	; (8004cfc <send_consumer_report+0xa8>)
 8004cde:	1a5b      	subs	r3, r3, r1
 8004ce0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8004ce4:	f363 128f 	bfi	r2, r3, #6, #10
 8004ce8:	4601      	mov	r1, r0
 8004cea:	4807      	ldr	r0, [pc, #28]	; (8004d08 <send_consumer_report+0xb4>)
 8004cec:	f001 fc28 	bl	8006540 <log_1>
 8004cf0:	e7cb      	b.n	8004c8a <send_consumer_report+0x36>
 8004cf2:	bf00      	nop
 8004cf4:	20000ce3 	.word	0x20000ce3
 8004cf8:	08022c60 	.word	0x08022c60
 8004cfc:	08022b90 	.word	0x08022b90
 8004d00:	08024d1c 	.word	0x08024d1c
 8004d04:	08024ce4 	.word	0x08024ce4
 8004d08:	08024d00 	.word	0x08024d00

08004d0c <zmk_endpoints_init>:
static int zmk_endpoints_init(const struct device *_arg) {
 8004d0c:	b510      	push	{r4, lr}
    settings_subsys_init();
 8004d0e:	f003 fe1f 	bl	8008950 <settings_subsys_init>
    int err = settings_register(&endpoints_handler);
 8004d12:	4810      	ldr	r0, [pc, #64]	; (8004d54 <zmk_endpoints_init+0x48>)
 8004d14:	f003 fce4 	bl	80086e0 <settings_register>
    if (err) {
 8004d18:	4604      	mov	r4, r0
 8004d1a:	b940      	cbnz	r0, 8004d2e <zmk_endpoints_init+0x22>
    k_delayed_work_init(&endpoints_save_work, endpoints_save_preferred_work);
 8004d1c:	490e      	ldr	r1, [pc, #56]	; (8004d58 <zmk_endpoints_init+0x4c>)
 8004d1e:	480f      	ldr	r0, [pc, #60]	; (8004d5c <zmk_endpoints_init+0x50>)
 8004d20:	f01d fb26 	bl	8022370 <k_delayed_work_init>
    settings_load_subtree("endpoints");
 8004d24:	480e      	ldr	r0, [pc, #56]	; (8004d60 <zmk_endpoints_init+0x54>)
 8004d26:	f003 fc7b 	bl	8008620 <settings_load_subtree>
}
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	bd10      	pop	{r4, pc}
        LOG_ERR("Failed to register the endpoints settings handler (err %d)", err);
 8004d2e:	f04f 0200 	mov.w	r2, #0
 8004d32:	2301      	movs	r3, #1
 8004d34:	f363 0202 	bfi	r2, r3, #0, #3
 8004d38:	f36f 02c5 	bfc	r2, #3, #3
 8004d3c:	4b09      	ldr	r3, [pc, #36]	; (8004d64 <zmk_endpoints_init+0x58>)
 8004d3e:	490a      	ldr	r1, [pc, #40]	; (8004d68 <zmk_endpoints_init+0x5c>)
 8004d40:	1a5b      	subs	r3, r3, r1
 8004d42:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8004d46:	f363 128f 	bfi	r2, r3, #6, #10
 8004d4a:	4601      	mov	r1, r0
 8004d4c:	4807      	ldr	r0, [pc, #28]	; (8004d6c <zmk_endpoints_init+0x60>)
 8004d4e:	f001 fbf7 	bl	8006540 <log_1>
        return err;
 8004d52:	e7ea      	b.n	8004d2a <zmk_endpoints_init+0x1e>
 8004d54:	2000099c 	.word	0x2000099c
 8004d58:	08004d71 	.word	0x08004d71
 8004d5c:	20001a38 	.word	0x20001a38
 8004d60:	08024d70 	.word	0x08024d70
 8004d64:	08022c60 	.word	0x08022c60
 8004d68:	08022b90 	.word	0x08022b90
 8004d6c:	08024d34 	.word	0x08024d34

08004d70 <endpoints_save_preferred_work>:
static void endpoints_save_preferred_work(struct k_work *work) {
 8004d70:	b508      	push	{r3, lr}
    settings_save_one("endpoints/preferred", &preferred_endpoint, sizeof(preferred_endpoint));
 8004d72:	2201      	movs	r2, #1
 8004d74:	4902      	ldr	r1, [pc, #8]	; (8004d80 <endpoints_save_preferred_work+0x10>)
 8004d76:	4803      	ldr	r0, [pc, #12]	; (8004d84 <endpoints_save_preferred_work+0x14>)
 8004d78:	f003 fc16 	bl	80085a8 <settings_save_one>
}
 8004d7c:	bd08      	pop	{r3, pc}
 8004d7e:	bf00      	nop
 8004d80:	20005968 	.word	0x20005968
 8004d84:	08024d7c 	.word	0x08024d7c

08004d88 <zmk_endpoints_send_report>:
int zmk_endpoints_send_report(uint16_t usage_page) {
 8004d88:	b510      	push	{r4, lr}
 8004d8a:	4604      	mov	r4, r0
    LOG_DBG("usage page 0x%02X", usage_page);
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	2204      	movs	r2, #4
 8004d92:	f362 0302 	bfi	r3, r2, #0, #3
 8004d96:	f36f 03c5 	bfc	r3, #3, #3
 8004d9a:	4a15      	ldr	r2, [pc, #84]	; (8004df0 <zmk_endpoints_send_report+0x68>)
 8004d9c:	4915      	ldr	r1, [pc, #84]	; (8004df4 <zmk_endpoints_send_report+0x6c>)
 8004d9e:	1a52      	subs	r2, r2, r1
 8004da0:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8004da4:	f362 138f 	bfi	r3, r2, #6, #10
 8004da8:	4602      	mov	r2, r0
 8004daa:	4913      	ldr	r1, [pc, #76]	; (8004df8 <zmk_endpoints_send_report+0x70>)
 8004dac:	4813      	ldr	r0, [pc, #76]	; (8004dfc <zmk_endpoints_send_report+0x74>)
 8004dae:	f001 fc47 	bl	8006640 <log_2>
    switch (usage_page) {
 8004db2:	2c07      	cmp	r4, #7
 8004db4:	d016      	beq.n	8004de4 <zmk_endpoints_send_report+0x5c>
 8004db6:	2c0c      	cmp	r4, #12
 8004db8:	d017      	beq.n	8004dea <zmk_endpoints_send_report+0x62>
        LOG_ERR("Unsupported usage page %d", usage_page);
 8004dba:	f04f 0200 	mov.w	r2, #0
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	f363 0202 	bfi	r2, r3, #0, #3
 8004dc4:	f36f 02c5 	bfc	r2, #3, #3
 8004dc8:	4b09      	ldr	r3, [pc, #36]	; (8004df0 <zmk_endpoints_send_report+0x68>)
 8004dca:	490a      	ldr	r1, [pc, #40]	; (8004df4 <zmk_endpoints_send_report+0x6c>)
 8004dcc:	1a5b      	subs	r3, r3, r1
 8004dce:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8004dd2:	f363 128f 	bfi	r2, r3, #6, #10
 8004dd6:	4621      	mov	r1, r4
 8004dd8:	4809      	ldr	r0, [pc, #36]	; (8004e00 <zmk_endpoints_send_report+0x78>)
 8004dda:	f001 fbb1 	bl	8006540 <log_1>
        return -ENOTSUP;
 8004dde:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8004de2:	e001      	b.n	8004de8 <zmk_endpoints_send_report+0x60>
        return send_keyboard_report();
 8004de4:	f7ff feda 	bl	8004b9c <send_keyboard_report>
}
 8004de8:	bd10      	pop	{r4, pc}
        return send_consumer_report();
 8004dea:	f7ff ff33 	bl	8004c54 <send_consumer_report>
 8004dee:	e7fb      	b.n	8004de8 <zmk_endpoints_send_report+0x60>
 8004df0:	08022c60 	.word	0x08022c60
 8004df4:	08022b90 	.word	0x08022b90
 8004df8:	08024e98 	.word	0x08024e98
 8004dfc:	08024d90 	.word	0x08024d90
 8004e00:	08024da8 	.word	0x08024da8

08004e04 <update_current_endpoint>:

    zmk_endpoints_send_report(HID_USAGE_KEY);
    zmk_endpoints_send_report(HID_USAGE_CONSUMER);
}

static void update_current_endpoint() {
 8004e04:	b510      	push	{r4, lr}
    enum zmk_endpoint new_endpoint = get_selected_endpoint();
 8004e06:	f7ff fe5d 	bl	8004ac4 <get_selected_endpoint>

    if (new_endpoint != current_endpoint) {
 8004e0a:	4b0e      	ldr	r3, [pc, #56]	; (8004e44 <update_current_endpoint+0x40>)
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	4283      	cmp	r3, r0
 8004e10:	d100      	bne.n	8004e14 <update_current_endpoint+0x10>
        disconnect_current_endpoint();

        current_endpoint = new_endpoint;
        LOG_INF("Endpoint changed: %d", current_endpoint);
    }
}
 8004e12:	bd10      	pop	{r4, pc}
 8004e14:	4604      	mov	r4, r0
        disconnect_current_endpoint();
 8004e16:	f014 fea3 	bl	8019b60 <disconnect_current_endpoint>
        current_endpoint = new_endpoint;
 8004e1a:	4b0a      	ldr	r3, [pc, #40]	; (8004e44 <update_current_endpoint+0x40>)
 8004e1c:	701c      	strb	r4, [r3, #0]
        LOG_INF("Endpoint changed: %d", current_endpoint);
 8004e1e:	f04f 0200 	mov.w	r2, #0
 8004e22:	2303      	movs	r3, #3
 8004e24:	f363 0202 	bfi	r2, r3, #0, #3
 8004e28:	f36f 02c5 	bfc	r2, #3, #3
 8004e2c:	4b06      	ldr	r3, [pc, #24]	; (8004e48 <update_current_endpoint+0x44>)
 8004e2e:	4907      	ldr	r1, [pc, #28]	; (8004e4c <update_current_endpoint+0x48>)
 8004e30:	1a5b      	subs	r3, r3, r1
 8004e32:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8004e36:	f363 128f 	bfi	r2, r3, #6, #10
 8004e3a:	4621      	mov	r1, r4
 8004e3c:	4804      	ldr	r0, [pc, #16]	; (8004e50 <update_current_endpoint+0x4c>)
 8004e3e:	f001 fb7f 	bl	8006540 <log_1>
}
 8004e42:	e7e6      	b.n	8004e12 <update_current_endpoint+0xe>
 8004e44:	20000ce3 	.word	0x20000ce3
 8004e48:	08022c60 	.word	0x08022c60
 8004e4c:	08022b90 	.word	0x08022b90
 8004e50:	08024dc4 	.word	0x08024dc4

08004e54 <zmk_endpoints_select>:
int zmk_endpoints_select(enum zmk_endpoint endpoint) {
 8004e54:	b510      	push	{r4, lr}
 8004e56:	4604      	mov	r4, r0
    LOG_DBG("Selected endpoint %d", endpoint);
 8004e58:	f04f 0300 	mov.w	r3, #0
 8004e5c:	2204      	movs	r2, #4
 8004e5e:	f362 0302 	bfi	r3, r2, #0, #3
 8004e62:	f36f 03c5 	bfc	r3, #3, #3
 8004e66:	4a0c      	ldr	r2, [pc, #48]	; (8004e98 <zmk_endpoints_select+0x44>)
 8004e68:	490c      	ldr	r1, [pc, #48]	; (8004e9c <zmk_endpoints_select+0x48>)
 8004e6a:	1a52      	subs	r2, r2, r1
 8004e6c:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8004e70:	f362 138f 	bfi	r3, r2, #6, #10
 8004e74:	4602      	mov	r2, r0
 8004e76:	490a      	ldr	r1, [pc, #40]	; (8004ea0 <zmk_endpoints_select+0x4c>)
 8004e78:	480a      	ldr	r0, [pc, #40]	; (8004ea4 <zmk_endpoints_select+0x50>)
 8004e7a:	f001 fbe1 	bl	8006640 <log_2>
    if (preferred_endpoint == endpoint) {
 8004e7e:	4b0a      	ldr	r3, [pc, #40]	; (8004ea8 <zmk_endpoints_select+0x54>)
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	42a3      	cmp	r3, r4
 8004e84:	d005      	beq.n	8004e92 <zmk_endpoints_select+0x3e>
    preferred_endpoint = endpoint;
 8004e86:	4b08      	ldr	r3, [pc, #32]	; (8004ea8 <zmk_endpoints_select+0x54>)
 8004e88:	701c      	strb	r4, [r3, #0]
    endpoints_save_preferred();
 8004e8a:	f7ff fe09 	bl	8004aa0 <endpoints_save_preferred>
    update_current_endpoint();
 8004e8e:	f7ff ffb9 	bl	8004e04 <update_current_endpoint>
}
 8004e92:	2000      	movs	r0, #0
 8004e94:	bd10      	pop	{r4, pc}
 8004e96:	bf00      	nop
 8004e98:	08022c60 	.word	0x08022c60
 8004e9c:	08022b90 	.word	0x08022b90
 8004ea0:	08024e80 	.word	0x08024e80
 8004ea4:	08024ddc 	.word	0x08024ddc
 8004ea8:	20005968 	.word	0x20005968

08004eac <zmk_endpoints_toggle>:
int zmk_endpoints_toggle() {
 8004eac:	b508      	push	{r3, lr}
        (preferred_endpoint == ZMK_ENDPOINT_USB) ? ZMK_ENDPOINT_BLE : ZMK_ENDPOINT_USB;
 8004eae:	4b04      	ldr	r3, [pc, #16]	; (8004ec0 <zmk_endpoints_toggle+0x14>)
 8004eb0:	7818      	ldrb	r0, [r3, #0]
    return zmk_endpoints_select(new_endpoint);
 8004eb2:	fab0 f080 	clz	r0, r0
 8004eb6:	0940      	lsrs	r0, r0, #5
 8004eb8:	f7ff ffcc 	bl	8004e54 <zmk_endpoints_select>
}
 8004ebc:	bd08      	pop	{r3, pc}
 8004ebe:	bf00      	nop
 8004ec0:	20005968 	.word	0x20005968

08004ec4 <endpoints_handle_set>:
                                void *cb_arg) {
 8004ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ec8:	4681      	mov	r9, r0
 8004eca:	460e      	mov	r6, r1
 8004ecc:	4617      	mov	r7, r2
 8004ece:	4698      	mov	r8, r3
    LOG_DBG("Setting endpoint value %s", log_strdup(name));
 8004ed0:	f04f 0500 	mov.w	r5, #0
 8004ed4:	2304      	movs	r3, #4
 8004ed6:	f363 0502 	bfi	r5, r3, #0, #3
 8004eda:	f36f 05c5 	bfc	r5, #3, #3
 8004ede:	4c26      	ldr	r4, [pc, #152]	; (8004f78 <endpoints_handle_set+0xb4>)
 8004ee0:	4b26      	ldr	r3, [pc, #152]	; (8004f7c <endpoints_handle_set+0xb8>)
 8004ee2:	1ae4      	subs	r4, r4, r3
 8004ee4:	f3c4 04c9 	ubfx	r4, r4, #3, #10
 8004ee8:	f364 158f 	bfi	r5, r4, #6, #10
 8004eec:	f001 f958 	bl	80061a0 <log_strdup>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	462b      	mov	r3, r5
 8004ef4:	4922      	ldr	r1, [pc, #136]	; (8004f80 <endpoints_handle_set+0xbc>)
 8004ef6:	4823      	ldr	r0, [pc, #140]	; (8004f84 <endpoints_handle_set+0xc0>)
 8004ef8:	f001 fba2 	bl	8006640 <log_2>
    if (settings_name_steq(name, "preferred", NULL)) {
 8004efc:	2200      	movs	r2, #0
 8004efe:	4922      	ldr	r1, [pc, #136]	; (8004f88 <endpoints_handle_set+0xc4>)
 8004f00:	4648      	mov	r0, r9
 8004f02:	f016 fd1b 	bl	801b93c <settings_name_steq>
 8004f06:	4604      	mov	r4, r0
 8004f08:	b150      	cbz	r0, 8004f20 <endpoints_handle_set+0x5c>
        if (len != sizeof(enum zmk_endpoint)) {
 8004f0a:	2e01      	cmp	r6, #1
 8004f0c:	d10b      	bne.n	8004f26 <endpoints_handle_set+0x62>
        int err = read_cb(cb_arg, &preferred_endpoint, sizeof(enum zmk_endpoint));
 8004f0e:	2201      	movs	r2, #1
 8004f10:	491e      	ldr	r1, [pc, #120]	; (8004f8c <endpoints_handle_set+0xc8>)
 8004f12:	4640      	mov	r0, r8
 8004f14:	47b8      	blx	r7
        if (err <= 0) {
 8004f16:	1e04      	subs	r4, r0, #0
 8004f18:	dd1a      	ble.n	8004f50 <endpoints_handle_set+0x8c>
        update_current_endpoint();
 8004f1a:	f7ff ff73 	bl	8004e04 <update_current_endpoint>
    return 0;
 8004f1e:	2400      	movs	r4, #0
}
 8004f20:	4620      	mov	r0, r4
 8004f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            LOG_ERR("Invalid endpoint size (got %d expected %d)", len, sizeof(enum zmk_endpoint));
 8004f26:	2201      	movs	r2, #1
 8004f28:	f04f 0300 	mov.w	r3, #0
 8004f2c:	f362 0302 	bfi	r3, r2, #0, #3
 8004f30:	f36f 03c5 	bfc	r3, #3, #3
 8004f34:	4910      	ldr	r1, [pc, #64]	; (8004f78 <endpoints_handle_set+0xb4>)
 8004f36:	4811      	ldr	r0, [pc, #68]	; (8004f7c <endpoints_handle_set+0xb8>)
 8004f38:	1a09      	subs	r1, r1, r0
 8004f3a:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 8004f3e:	f361 138f 	bfi	r3, r1, #6, #10
 8004f42:	4631      	mov	r1, r6
 8004f44:	4812      	ldr	r0, [pc, #72]	; (8004f90 <endpoints_handle_set+0xcc>)
 8004f46:	f001 fb7b 	bl	8006640 <log_2>
            return -EINVAL;
 8004f4a:	f06f 0415 	mvn.w	r4, #21
 8004f4e:	e7e7      	b.n	8004f20 <endpoints_handle_set+0x5c>
            LOG_ERR("Failed to read preferred endpoint from settings (err %d)", err);
 8004f50:	f04f 0200 	mov.w	r2, #0
 8004f54:	2301      	movs	r3, #1
 8004f56:	f363 0202 	bfi	r2, r3, #0, #3
 8004f5a:	f36f 02c5 	bfc	r2, #3, #3
 8004f5e:	4b06      	ldr	r3, [pc, #24]	; (8004f78 <endpoints_handle_set+0xb4>)
 8004f60:	4906      	ldr	r1, [pc, #24]	; (8004f7c <endpoints_handle_set+0xb8>)
 8004f62:	1a5b      	subs	r3, r3, r1
 8004f64:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8004f68:	f363 128f 	bfi	r2, r3, #6, #10
 8004f6c:	4621      	mov	r1, r4
 8004f6e:	4809      	ldr	r0, [pc, #36]	; (8004f94 <endpoints_handle_set+0xd0>)
 8004f70:	f001 fae6 	bl	8006540 <log_1>
            return err;
 8004f74:	e7d4      	b.n	8004f20 <endpoints_handle_set+0x5c>
 8004f76:	bf00      	nop
 8004f78:	08022c60 	.word	0x08022c60
 8004f7c:	08022b90 	.word	0x08022b90
 8004f80:	08024eb4 	.word	0x08024eb4
 8004f84:	08024df8 	.word	0x08024df8
 8004f88:	080232ec 	.word	0x080232ec
 8004f8c:	20005968 	.word	0x20005968
 8004f90:	08024e18 	.word	0x08024e18
 8004f94:	08024e44 	.word	0x08024e44

08004f98 <hid_listener_keycode_pressed>:
#include <zmk/events/modifiers_state_changed.h>
#include <zmk/hid.h>
#include <dt-bindings/zmk/hid_usage_pages.h>
#include <zmk/endpoints.h>

static int hid_listener_keycode_pressed(const struct zmk_keycode_state_changed *ev) {
 8004f98:	b530      	push	{r4, r5, lr}
 8004f9a:	b087      	sub	sp, #28
 8004f9c:	4604      	mov	r4, r0
    int err;
    LOG_DBG("usage_page 0x%02X keycode 0x%02X implicit_mods 0x%02X explicit_mods 0x%02X",
 8004f9e:	f04f 0300 	mov.w	r3, #0
 8004fa2:	2204      	movs	r2, #4
 8004fa4:	f362 0302 	bfi	r3, r2, #0, #3
 8004fa8:	f36f 03c5 	bfc	r3, #3, #3
 8004fac:	4a2b      	ldr	r2, [pc, #172]	; (800505c <hid_listener_keycode_pressed+0xc4>)
 8004fae:	492c      	ldr	r1, [pc, #176]	; (8005060 <hid_listener_keycode_pressed+0xc8>)
 8004fb0:	1a52      	subs	r2, r2, r1
 8004fb2:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8004fb6:	f362 138f 	bfi	r3, r2, #6, #10
 8004fba:	4a2a      	ldr	r2, [pc, #168]	; (8005064 <hid_listener_keycode_pressed+0xcc>)
 8004fbc:	9201      	str	r2, [sp, #4]
 8004fbe:	8802      	ldrh	r2, [r0, #0]
 8004fc0:	9202      	str	r2, [sp, #8]
 8004fc2:	6842      	ldr	r2, [r0, #4]
 8004fc4:	9203      	str	r2, [sp, #12]
 8004fc6:	7a02      	ldrb	r2, [r0, #8]
 8004fc8:	9204      	str	r2, [sp, #16]
 8004fca:	7a42      	ldrb	r2, [r0, #9]
 8004fcc:	9205      	str	r2, [sp, #20]
 8004fce:	2205      	movs	r2, #5
 8004fd0:	a901      	add	r1, sp, #4
 8004fd2:	4825      	ldr	r0, [pc, #148]	; (8005068 <hid_listener_keycode_pressed+0xd0>)
 8004fd4:	f001 fbb8 	bl	8006748 <log_n>
            ev->usage_page, ev->keycode, ev->implicit_modifiers, ev->explicit_modifiers);
    switch (ev->usage_page) {
 8004fd8:	8823      	ldrh	r3, [r4, #0]
 8004fda:	2b07      	cmp	r3, #7
 8004fdc:	d00e      	beq.n	8004ffc <hid_listener_keycode_pressed+0x64>
 8004fde:	2b0c      	cmp	r3, #12
 8004fe0:	d024      	beq.n	800502c <hid_listener_keycode_pressed+0x94>
            LOG_ERR("Unable to press keycode");
            return err;
        }
        break;
    }
    zmk_hid_register_mods(ev->explicit_modifiers);
 8004fe2:	7a60      	ldrb	r0, [r4, #9]
 8004fe4:	f014 fbdc 	bl	80197a0 <zmk_hid_register_mods>
    zmk_hid_implicit_modifiers_press(ev->implicit_modifiers);
 8004fe8:	7a20      	ldrb	r0, [r4, #8]
 8004fea:	f7fb fc47 	bl	800087c <zmk_hid_implicit_modifiers_press>
    return zmk_endpoints_send_report(ev->usage_page);
 8004fee:	8820      	ldrh	r0, [r4, #0]
 8004ff0:	f7ff feca 	bl	8004d88 <zmk_endpoints_send_report>
 8004ff4:	4605      	mov	r5, r0
}
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	b007      	add	sp, #28
 8004ffa:	bd30      	pop	{r4, r5, pc}
        err = zmk_hid_keyboard_press(ev->keycode);
 8004ffc:	6860      	ldr	r0, [r4, #4]
 8004ffe:	f7fb fc89 	bl	8000914 <zmk_hid_keyboard_press>
        if (err) {
 8005002:	4605      	mov	r5, r0
 8005004:	2800      	cmp	r0, #0
 8005006:	d0ec      	beq.n	8004fe2 <hid_listener_keycode_pressed+0x4a>
            LOG_ERR("Unable to press keycode");
 8005008:	f04f 0100 	mov.w	r1, #0
 800500c:	2301      	movs	r3, #1
 800500e:	f363 0102 	bfi	r1, r3, #0, #3
 8005012:	f36f 01c5 	bfc	r1, #3, #3
 8005016:	4b11      	ldr	r3, [pc, #68]	; (800505c <hid_listener_keycode_pressed+0xc4>)
 8005018:	4a11      	ldr	r2, [pc, #68]	; (8005060 <hid_listener_keycode_pressed+0xc8>)
 800501a:	1a9b      	subs	r3, r3, r2
 800501c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8005020:	f363 118f 	bfi	r1, r3, #6, #10
 8005024:	4811      	ldr	r0, [pc, #68]	; (800506c <hid_listener_keycode_pressed+0xd4>)
 8005026:	f001 fbfb 	bl	8006820 <log_0>
            return err;
 800502a:	e7e4      	b.n	8004ff6 <hid_listener_keycode_pressed+0x5e>
        err = zmk_hid_consumer_press(ev->keycode);
 800502c:	6860      	ldr	r0, [r4, #4]
 800502e:	f7fb fcb9 	bl	80009a4 <zmk_hid_consumer_press>
        if (err) {
 8005032:	4605      	mov	r5, r0
 8005034:	2800      	cmp	r0, #0
 8005036:	d0d4      	beq.n	8004fe2 <hid_listener_keycode_pressed+0x4a>
            LOG_ERR("Unable to press keycode");
 8005038:	f04f 0100 	mov.w	r1, #0
 800503c:	2301      	movs	r3, #1
 800503e:	f363 0102 	bfi	r1, r3, #0, #3
 8005042:	f36f 01c5 	bfc	r1, #3, #3
 8005046:	4b05      	ldr	r3, [pc, #20]	; (800505c <hid_listener_keycode_pressed+0xc4>)
 8005048:	4a05      	ldr	r2, [pc, #20]	; (8005060 <hid_listener_keycode_pressed+0xc8>)
 800504a:	1a9b      	subs	r3, r3, r2
 800504c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8005050:	f363 118f 	bfi	r1, r3, #6, #10
 8005054:	4805      	ldr	r0, [pc, #20]	; (800506c <hid_listener_keycode_pressed+0xd4>)
 8005056:	f001 fbe3 	bl	8006820 <log_0>
            return err;
 800505a:	e7cc      	b.n	8004ff6 <hid_listener_keycode_pressed+0x5e>
 800505c:	08022c60 	.word	0x08022c60
 8005060:	08022b90 	.word	0x08022b90
 8005064:	08024f6c 	.word	0x08024f6c
 8005068:	08024ee8 	.word	0x08024ee8
 800506c:	08024f38 	.word	0x08024f38

08005070 <hid_listener_keycode_released>:

static int hid_listener_keycode_released(const struct zmk_keycode_state_changed *ev) {
 8005070:	b530      	push	{r4, r5, lr}
 8005072:	b087      	sub	sp, #28
 8005074:	4604      	mov	r4, r0
    int err;
    LOG_DBG("usage_page 0x%02X keycode 0x%02X implicit_mods 0x%02X explicit_mods 0x%02X",
 8005076:	f04f 0300 	mov.w	r3, #0
 800507a:	2204      	movs	r2, #4
 800507c:	f362 0302 	bfi	r3, r2, #0, #3
 8005080:	f36f 03c5 	bfc	r3, #3, #3
 8005084:	4a2b      	ldr	r2, [pc, #172]	; (8005134 <hid_listener_keycode_released+0xc4>)
 8005086:	492c      	ldr	r1, [pc, #176]	; (8005138 <hid_listener_keycode_released+0xc8>)
 8005088:	1a52      	subs	r2, r2, r1
 800508a:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 800508e:	f362 138f 	bfi	r3, r2, #6, #10
 8005092:	4a2a      	ldr	r2, [pc, #168]	; (800513c <hid_listener_keycode_released+0xcc>)
 8005094:	9201      	str	r2, [sp, #4]
 8005096:	8802      	ldrh	r2, [r0, #0]
 8005098:	9202      	str	r2, [sp, #8]
 800509a:	6842      	ldr	r2, [r0, #4]
 800509c:	9203      	str	r2, [sp, #12]
 800509e:	7a02      	ldrb	r2, [r0, #8]
 80050a0:	9204      	str	r2, [sp, #16]
 80050a2:	7a42      	ldrb	r2, [r0, #9]
 80050a4:	9205      	str	r2, [sp, #20]
 80050a6:	2205      	movs	r2, #5
 80050a8:	a901      	add	r1, sp, #4
 80050aa:	4825      	ldr	r0, [pc, #148]	; (8005140 <hid_listener_keycode_released+0xd0>)
 80050ac:	f001 fb4c 	bl	8006748 <log_n>
            ev->usage_page, ev->keycode, ev->implicit_modifiers, ev->explicit_modifiers);
    switch (ev->usage_page) {
 80050b0:	8823      	ldrh	r3, [r4, #0]
 80050b2:	2b07      	cmp	r3, #7
 80050b4:	d00d      	beq.n	80050d2 <hid_listener_keycode_released+0x62>
 80050b6:	2b0c      	cmp	r3, #12
 80050b8:	d023      	beq.n	8005102 <hid_listener_keycode_released+0x92>
        if (err) {
            LOG_ERR("Unable to release keycode");
            return err;
        }
    }
    zmk_hid_unregister_mods(ev->explicit_modifiers);
 80050ba:	7a60      	ldrb	r0, [r4, #9]
 80050bc:	f014 fb83 	bl	80197c6 <zmk_hid_unregister_mods>
    // There is a minor issue with this code.
    // If LC(A) is pressed, then LS(B), then LC(A) is released, the shift for B will be released
    // prematurely. This causes if LS(B) to repeat like Bbbbbbbb when pressed for a long time.
    // Solving this would require keeping track of which key's implicit modifiers are currently
    // active and only releasing modifiers at that time.
    zmk_hid_implicit_modifiers_release();
 80050c0:	f7fb fc02 	bl	80008c8 <zmk_hid_implicit_modifiers_release>
    return zmk_endpoints_send_report(ev->usage_page);
 80050c4:	8820      	ldrh	r0, [r4, #0]
 80050c6:	f7ff fe5f 	bl	8004d88 <zmk_endpoints_send_report>
 80050ca:	4605      	mov	r5, r0
}
 80050cc:	4628      	mov	r0, r5
 80050ce:	b007      	add	sp, #28
 80050d0:	bd30      	pop	{r4, r5, pc}
        err = zmk_hid_keyboard_release(ev->keycode);
 80050d2:	6860      	ldr	r0, [r4, #4]
 80050d4:	f7fb fc3e 	bl	8000954 <zmk_hid_keyboard_release>
        if (err) {
 80050d8:	4605      	mov	r5, r0
 80050da:	2800      	cmp	r0, #0
 80050dc:	d0ed      	beq.n	80050ba <hid_listener_keycode_released+0x4a>
            LOG_ERR("Unable to release keycode");
 80050de:	f04f 0100 	mov.w	r1, #0
 80050e2:	2301      	movs	r3, #1
 80050e4:	f363 0102 	bfi	r1, r3, #0, #3
 80050e8:	f36f 01c5 	bfc	r1, #3, #3
 80050ec:	4b11      	ldr	r3, [pc, #68]	; (8005134 <hid_listener_keycode_released+0xc4>)
 80050ee:	4a12      	ldr	r2, [pc, #72]	; (8005138 <hid_listener_keycode_released+0xc8>)
 80050f0:	1a9b      	subs	r3, r3, r2
 80050f2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80050f6:	f363 118f 	bfi	r1, r3, #6, #10
 80050fa:	4812      	ldr	r0, [pc, #72]	; (8005144 <hid_listener_keycode_released+0xd4>)
 80050fc:	f001 fb90 	bl	8006820 <log_0>
            return err;
 8005100:	e7e4      	b.n	80050cc <hid_listener_keycode_released+0x5c>
        err = zmk_hid_consumer_release(ev->keycode);
 8005102:	6860      	ldr	r0, [r4, #4]
 8005104:	f7fb fc66 	bl	80009d4 <zmk_hid_consumer_release>
        if (err) {
 8005108:	4605      	mov	r5, r0
 800510a:	2800      	cmp	r0, #0
 800510c:	d0d5      	beq.n	80050ba <hid_listener_keycode_released+0x4a>
            LOG_ERR("Unable to release keycode");
 800510e:	f04f 0100 	mov.w	r1, #0
 8005112:	2301      	movs	r3, #1
 8005114:	f363 0102 	bfi	r1, r3, #0, #3
 8005118:	f36f 01c5 	bfc	r1, #3, #3
 800511c:	4b05      	ldr	r3, [pc, #20]	; (8005134 <hid_listener_keycode_released+0xc4>)
 800511e:	4a06      	ldr	r2, [pc, #24]	; (8005138 <hid_listener_keycode_released+0xc8>)
 8005120:	1a9b      	subs	r3, r3, r2
 8005122:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8005126:	f363 118f 	bfi	r1, r3, #6, #10
 800512a:	4806      	ldr	r0, [pc, #24]	; (8005144 <hid_listener_keycode_released+0xd4>)
 800512c:	f001 fb78 	bl	8006820 <log_0>
            return err;
 8005130:	e7cc      	b.n	80050cc <hid_listener_keycode_released+0x5c>
 8005132:	bf00      	nop
 8005134:	08022c60 	.word	0x08022c60
 8005138:	08022b90 	.word	0x08022b90
 800513c:	08024f8c 	.word	0x08024f8c
 8005140:	08024ee8 	.word	0x08024ee8
 8005144:	08024f50 	.word	0x08024f50

08005148 <main>:
#include <zmk/display.h>
#include <drivers/ext_power.h>

#define ZMK_KSCAN_DEV DT_LABEL(ZMK_MATRIX_NODE_ID)

void main(void) {
 8005148:	b508      	push	{r3, lr}
    LOG_INF("Welcome to ZMK!\n");
 800514a:	f04f 0100 	mov.w	r1, #0
 800514e:	2303      	movs	r3, #3
 8005150:	f363 0102 	bfi	r1, r3, #0, #3
 8005154:	f36f 01c5 	bfc	r1, #3, #3
 8005158:	4b06      	ldr	r3, [pc, #24]	; (8005174 <main+0x2c>)
 800515a:	4a07      	ldr	r2, [pc, #28]	; (8005178 <main+0x30>)
 800515c:	1a9b      	subs	r3, r3, r2
 800515e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8005162:	f363 118f 	bfi	r1, r3, #6, #10
 8005166:	4805      	ldr	r0, [pc, #20]	; (800517c <main+0x34>)
 8005168:	f001 fb5a 	bl	8006820 <log_0>

    if (zmk_kscan_init(ZMK_KSCAN_DEV) != 0) {
 800516c:	4804      	ldr	r0, [pc, #16]	; (8005180 <main+0x38>)
 800516e:	f7fb fa7b 	bl	8000668 <zmk_kscan_init>
    }

#ifdef CONFIG_ZMK_DISPLAY
    zmk_display_init();
#endif /* CONFIG_ZMK_DISPLAY */
}
 8005172:	bd08      	pop	{r3, pc}
 8005174:	08022c60 	.word	0x08022c60
 8005178:	08022b90 	.word	0x08022b90
 800517c:	08024fb0 	.word	0x08024fb0
 8005180:	08024fc4 	.word	0x08024fc4

08005184 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
 8005184:	b430      	push	{r4, r5}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
 8005186:	2400      	movs	r4, #0
 8005188:	4294      	cmp	r4, r2
 800518a:	d20f      	bcs.n	80051ac <crc8_ccitt+0x28>
		val ^= p[i];
 800518c:	5d0b      	ldrb	r3, [r1, r4]
 800518e:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
 8005190:	0918      	lsrs	r0, r3, #4
 8005192:	4d07      	ldr	r5, [pc, #28]	; (80051b0 <crc8_ccitt+0x2c>)
 8005194:	5628      	ldrsb	r0, [r5, r0]
 8005196:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
 800519a:	b2c3      	uxtb	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
 800519c:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80051a0:	5628      	ldrsb	r0, [r5, r0]
 80051a2:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
 80051a6:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
 80051a8:	3401      	adds	r4, #1
 80051aa:	e7ed      	b.n	8005188 <crc8_ccitt+0x4>
	}
	return val;
}
 80051ac:	bc30      	pop	{r4, r5}
 80051ae:	4770      	bx	lr
 80051b0:	08024fd0 	.word	0x08024fd0

080051b4 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
 80051b4:	b430      	push	{r4, r5}
 80051b6:	4605      	mov	r5, r0
	uint8_t divisor = 100;
	uint8_t num_digits = 0;
 80051b8:	2000      	movs	r0, #0
	uint8_t divisor = 100;
 80051ba:	2364      	movs	r3, #100	; 0x64
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
 80051bc:	e00f      	b.n	80051de <u8_to_dec+0x2a>
		digit = value / divisor;
		if (digit != 0 || divisor == 1 || num_digits != 0) {
			*buf = (char)digit + '0';
 80051be:	3430      	adds	r4, #48	; 0x30
 80051c0:	f805 4b01 	strb.w	r4, [r5], #1
			buf++;
			buflen--;
 80051c4:	3901      	subs	r1, #1
 80051c6:	b2c9      	uxtb	r1, r1
			num_digits++;
 80051c8:	3001      	adds	r0, #1
 80051ca:	b2c0      	uxtb	r0, r0
		}

		value -= digit * divisor;
 80051cc:	fbb2 f4f3 	udiv	r4, r2, r3
 80051d0:	fb03 2214 	mls	r2, r3, r4, r2
 80051d4:	b2d2      	uxtb	r2, r2
		divisor /= 10;
 80051d6:	4c0a      	ldr	r4, [pc, #40]	; (8005200 <u8_to_dec+0x4c>)
 80051d8:	fba4 4303 	umull	r4, r3, r4, r3
 80051dc:	08db      	lsrs	r3, r3, #3
	while (buflen > 0 && divisor > 0) {
 80051de:	b149      	cbz	r1, 80051f4 <u8_to_dec+0x40>
 80051e0:	b143      	cbz	r3, 80051f4 <u8_to_dec+0x40>
		digit = value / divisor;
 80051e2:	fbb2 f4f3 	udiv	r4, r2, r3
		if (digit != 0 || divisor == 1 || num_digits != 0) {
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d2e9      	bcs.n	80051be <u8_to_dec+0xa>
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d0e7      	beq.n	80051be <u8_to_dec+0xa>
 80051ee:	2800      	cmp	r0, #0
 80051f0:	d0ec      	beq.n	80051cc <u8_to_dec+0x18>
 80051f2:	e7e4      	b.n	80051be <u8_to_dec+0xa>
	}

	if (buflen) {
 80051f4:	b109      	cbz	r1, 80051fa <u8_to_dec+0x46>
		*buf = '\0';
 80051f6:	2300      	movs	r3, #0
 80051f8:	702b      	strb	r3, [r5, #0]
	}

	return num_digits;
}
 80051fa:	bc30      	pop	{r4, r5}
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	cccccccd 	.word	0xcccccccd

08005204 <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
			 bool pad_before, char pad_char, int min_width)
{
 8005204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005208:	b089      	sub	sp, #36	; 0x24
 800520a:	4692      	mov	sl, r2
 800520c:	469b      	mov	fp, r3
 800520e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8005212:	9301      	str	r3, [sp, #4]
 8005214:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
	char buf[DIGITS_BUFLEN];
	int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
 8005218:	2414      	movs	r4, #20
 800521a:	9700      	str	r7, [sp, #0]
 800521c:	460f      	mov	r7, r1
 800521e:	4606      	mov	r6, r0
 8005220:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8005222:	ea5a 030b 	orrs.w	r3, sl, fp
 8005226:	d018      	beq.n	800525a <print_digits+0x56>
		buf[i] = "0123456789abcdef"[num % base];
 8005228:	ea4f 79e5 	mov.w	r9, r5, asr #31
 800522c:	462a      	mov	r2, r5
 800522e:	464b      	mov	r3, r9
 8005230:	4650      	mov	r0, sl
 8005232:	4659      	mov	r1, fp
 8005234:	f7fa ffa8 	bl	8000188 <__aeabi_uldivmod>
 8005238:	4b27      	ldr	r3, [pc, #156]	; (80052d8 <print_digits+0xd4>)
 800523a:	4413      	add	r3, r2
 800523c:	781a      	ldrb	r2, [r3, #0]
 800523e:	ab08      	add	r3, sp, #32
 8005240:	4423      	add	r3, r4
 8005242:	f803 2c18 	strb.w	r2, [r3, #-24]
		num /= base;
 8005246:	462a      	mov	r2, r5
 8005248:	464b      	mov	r3, r9
 800524a:	4650      	mov	r0, sl
 800524c:	4659      	mov	r1, fp
 800524e:	f7fa ff9b 	bl	8000188 <__aeabi_uldivmod>
 8005252:	4682      	mov	sl, r0
 8005254:	468b      	mov	fp, r1
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
 8005256:	3c01      	subs	r4, #1
 8005258:	e7e3      	b.n	8005222 <print_digits+0x1e>
 800525a:	4635      	mov	r5, r6
 800525c:	463e      	mov	r6, r7
 800525e:	9f00      	ldr	r7, [sp, #0]
	}

	if (i == DIGITS_BUFLEN - 1) {
 8005260:	2c14      	cmp	r4, #20
 8005262:	d00b      	beq.n	800527c <print_digits+0x78>
		buf[i] = '0';
	} else {
		i++;
 8005264:	3401      	adds	r4, #1
	}

	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
 8005266:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005268:	eb04 0803 	add.w	r8, r4, r3
 800526c:	f1b8 0f15 	cmp.w	r8, #21
 8005270:	d00a      	beq.n	8005288 <print_digits+0x84>
 8005272:	f1a8 0815 	sub.w	r8, r8, #21
 8005276:	46a1      	mov	r9, r4
 8005278:	9c01      	ldr	r4, [sp, #4]
 800527a:	e00f      	b.n	800529c <print_digits+0x98>
		buf[i] = '0';
 800527c:	2230      	movs	r2, #48	; 0x30
 800527e:	ab08      	add	r3, sp, #32
 8005280:	4423      	add	r3, r4
 8005282:	f803 2c18 	strb.w	r2, [r3, #-24]
 8005286:	e7ee      	b.n	8005266 <print_digits+0x62>
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
 8005288:	f04f 0800 	mov.w	r8, #0
 800528c:	46a1      	mov	r9, r4
 800528e:	9c01      	ldr	r4, [sp, #4]
 8005290:	e004      	b.n	800529c <print_digits+0x98>

	for (/**/; pad > 0 && pad_before; pad--) {
		out(pad_char, ctx);
 8005292:	4631      	mov	r1, r6
 8005294:	4638      	mov	r0, r7
 8005296:	47a8      	blx	r5
	for (/**/; pad > 0 && pad_before; pad--) {
 8005298:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800529c:	f1b8 0f00 	cmp.w	r8, #0
 80052a0:	dd03      	ble.n	80052aa <print_digits+0xa6>
 80052a2:	2c00      	cmp	r4, #0
 80052a4:	d1f5      	bne.n	8005292 <print_digits+0x8e>
 80052a6:	464c      	mov	r4, r9
 80052a8:	e000      	b.n	80052ac <print_digits+0xa8>
 80052aa:	464c      	mov	r4, r9
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
 80052ac:	2c14      	cmp	r4, #20
 80052ae:	d807      	bhi.n	80052c0 <print_digits+0xbc>
		out(buf[i], ctx);
 80052b0:	ab08      	add	r3, sp, #32
 80052b2:	4423      	add	r3, r4
 80052b4:	4631      	mov	r1, r6
 80052b6:	f813 0c18 	ldrb.w	r0, [r3, #-24]
 80052ba:	47a8      	blx	r5
	for (/**/; i < DIGITS_BUFLEN; i++) {
 80052bc:	3401      	adds	r4, #1
 80052be:	e7f5      	b.n	80052ac <print_digits+0xa8>
	}
	for (/**/; pad > 0; pad--) {
 80052c0:	f1b8 0f00 	cmp.w	r8, #0
 80052c4:	dd05      	ble.n	80052d2 <print_digits+0xce>
		out(pad_char, ctx);
 80052c6:	4631      	mov	r1, r6
 80052c8:	4638      	mov	r0, r7
 80052ca:	47a8      	blx	r5
	for (/**/; pad > 0; pad--) {
 80052cc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80052d0:	e7f6      	b.n	80052c0 <print_digits+0xbc>
	}
}
 80052d2:	b009      	add	sp, #36	; 0x24
 80052d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052d8:	08024fe0 	.word	0x08024fe0

080052dc <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
 80052dc:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
 80052de:	680b      	ldr	r3, [r1, #0]
 80052e0:	3301      	adds	r3, #1
 80052e2:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 80052e4:	4b01      	ldr	r3, [pc, #4]	; (80052ec <char_out+0x10>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4798      	blx	r3
}
 80052ea:	bd08      	pop	{r3, pc}
 80052ec:	200009b4 	.word	0x200009b4

080052f0 <__printk_hook_install>:
	_char_out = fn;
 80052f0:	4b01      	ldr	r3, [pc, #4]	; (80052f8 <__printk_hook_install+0x8>)
 80052f2:	6018      	str	r0, [r3, #0]
}
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	200009b4 	.word	0x200009b4

080052fc <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
 80052fc:	b500      	push	{lr}
 80052fe:	b083      	sub	sp, #12
 8005300:	4602      	mov	r2, r0
 8005302:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
 8005304:	2100      	movs	r1, #0
 8005306:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
 8005308:	a901      	add	r1, sp, #4
 800530a:	4803      	ldr	r0, [pc, #12]	; (8005318 <vprintk+0x1c>)
 800530c:	f014 fcf7 	bl	8019cfe <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
 8005310:	b003      	add	sp, #12
 8005312:	f85d fb04 	ldr.w	pc, [sp], #4
 8005316:	bf00      	nop
 8005318:	080052dd 	.word	0x080052dd

0800531c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
 800531c:	b510      	push	{r4, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
 8005322:	9001      	str	r0, [sp, #4]
 8005324:	9102      	str	r1, [sp, #8]
 8005326:	2100      	movs	r1, #0
 8005328:	9103      	str	r1, [sp, #12]

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
 800532a:	a901      	add	r1, sp, #4
 800532c:	4805      	ldr	r0, [pc, #20]	; (8005344 <vsnprintk+0x28>)
 800532e:	f014 fce6 	bl	8019cfe <z_vprintk>

	if (ctx.count < ctx.max) {
 8005332:	9b03      	ldr	r3, [sp, #12]
 8005334:	9a02      	ldr	r2, [sp, #8]
 8005336:	4293      	cmp	r3, r2
 8005338:	da01      	bge.n	800533e <vsnprintk+0x22>
		str[ctx.count] = '\0';
 800533a:	2200      	movs	r2, #0
 800533c:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
 800533e:	9803      	ldr	r0, [sp, #12]
 8005340:	b004      	add	sp, #16
 8005342:	bd10      	pop	{r4, pc}
 8005344:	08019ccd 	.word	0x08019ccd

08005348 <_ldiv5>:
 * six.  This was tested exhaustively through the first ~10B values in
 * the input space, and for ~2e12 (4 hours runtime) random inputs
 * taken from the full 64 bit space.
 */
static void _ldiv5(uint64_t *v)
{
 8005348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t hi;
	uint64_t rem = *v, quot = 0U, q;
 800534c:	6805      	ldr	r5, [r0, #0]
 800534e:	6846      	ldr	r6, [r0, #4]

	/*
	 * Usage in this file wants rounded behavior, not truncation.  So add
	 * two to get the threshold right.
	 */
	rem += 2U;
 8005350:	3502      	adds	r5, #2
 8005352:	f146 0600 	adc.w	r6, r6, #0

	for (i = 0; i < 3; i++) {
 8005356:	f04f 0c00 	mov.w	ip, #0
	uint64_t rem = *v, quot = 0U, q;
 800535a:	4667      	mov	r7, ip
 800535c:	46e6      	mov	lr, ip
	for (i = 0; i < 3; i++) {
 800535e:	e02c      	b.n	80053ba <_ldiv5+0x72>
		hi = rem >> shifts[i];
 8005360:	4b1a      	ldr	r3, [pc, #104]	; (80053cc <_ldiv5+0x84>)
 8005362:	f813 400c 	ldrb.w	r4, [r3, ip]
 8005366:	f1c4 0120 	rsb	r1, r4, #32
 800536a:	f1a4 0320 	sub.w	r3, r4, #32
 800536e:	fa25 f204 	lsr.w	r2, r5, r4
 8005372:	fa06 f101 	lsl.w	r1, r6, r1
 8005376:	430a      	orrs	r2, r1
 8005378:	fa26 f303 	lsr.w	r3, r6, r3
 800537c:	431a      	orrs	r2, r3
		q = (uint64_t)(hi / 5U) << shifts[i];
 800537e:	4b14      	ldr	r3, [pc, #80]	; (80053d0 <_ldiv5+0x88>)
 8005380:	fba3 2302 	umull	r2, r3, r3, r2
 8005384:	089b      	lsrs	r3, r3, #2
 8005386:	f1a4 0820 	sub.w	r8, r4, #32
 800538a:	f1c4 0220 	rsb	r2, r4, #32
 800538e:	fa03 f108 	lsl.w	r1, r3, r8
 8005392:	fa23 f202 	lsr.w	r2, r3, r2
 8005396:	4311      	orrs	r1, r2
 8005398:	40a3      	lsls	r3, r4
		rem -= q * 5U;
 800539a:	ea4f 0881 	mov.w	r8, r1, lsl #2
 800539e:	009a      	lsls	r2, r3, #2
 80053a0:	ea48 7493 	orr.w	r4, r8, r3, lsr #30
 80053a4:	18d2      	adds	r2, r2, r3
 80053a6:	eb41 0404 	adc.w	r4, r1, r4
 80053aa:	1aad      	subs	r5, r5, r2
 80053ac:	eb66 0604 	sbc.w	r6, r6, r4
		quot += q;
 80053b0:	18ff      	adds	r7, r7, r3
 80053b2:	eb4e 0e01 	adc.w	lr, lr, r1
	for (i = 0; i < 3; i++) {
 80053b6:	f10c 0c01 	add.w	ip, ip, #1
 80053ba:	f1bc 0f02 	cmp.w	ip, #2
 80053be:	ddcf      	ble.n	8005360 <_ldiv5+0x18>
	}

	*v = quot;
 80053c0:	6007      	str	r7, [r0, #0]
 80053c2:	f8c0 e004 	str.w	lr, [r0, #4]
}
 80053c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053ca:	bf00      	nop
 80053cc:	08025000 	.word	0x08025000
 80053d0:	cccccccd 	.word	0xcccccccd

080053d4 <_to_float>:
struct zero_padding { int predot, postdot, trail; };

static int _to_float(char *buf, uint64_t double_temp, char c,
		     bool falt, bool fplus, bool fspace, int precision,
		     struct zero_padding *zp)
{
 80053d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053d8:	b089      	sub	sp, #36	; 0x24
 80053da:	4686      	mov	lr, r0
 80053dc:	9000      	str	r0, [sp, #0]
 80053de:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 80053e2:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
 80053e6:	9101      	str	r1, [sp, #4]
 80053e8:	f89d 6050 	ldrb.w	r6, [sp, #80]	; 0x50
 80053ec:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 80053f0:	9d16      	ldr	r5, [sp, #88]	; 0x58
	uint64_t fract;
	uint64_t ltemp;
	bool prune_zero;
	char *start = buf;

	exp = double_temp >> 52 & 0x7ff;
 80053f2:	f3c3 540a 	ubfx	r4, r3, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
 80053f6:	02d9      	lsls	r1, r3, #11
 80053f8:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 80053fc:	02d0      	lsls	r0, r2, #11
 80053fe:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005402:	9004      	str	r0, [sp, #16]
 8005404:	9105      	str	r1, [sp, #20]
	sign = !!(double_temp & HIGHBIT64);

	if (sign) {
 8005406:	2a00      	cmp	r2, #0
 8005408:	f173 0300 	sbcs.w	r3, r3, #0
 800540c:	db05      	blt.n	800541a <_to_float+0x46>
		*buf++ = '-';
	} else if (fplus) {
 800540e:	b396      	cbz	r6, 8005476 <_to_float+0xa2>
		*buf++ = '+';
 8005410:	9e00      	ldr	r6, [sp, #0]
 8005412:	232b      	movs	r3, #43	; 0x2b
 8005414:	f806 3b01 	strb.w	r3, [r6], #1
 8005418:	e003      	b.n	8005422 <_to_float+0x4e>
		*buf++ = '-';
 800541a:	4676      	mov	r6, lr
 800541c:	232d      	movs	r3, #45	; 0x2d
 800541e:	f806 3b01 	strb.w	r3, [r6], #1
	} else if (fspace) {
		*buf++ = ' ';
	}

	if (exp == 0x7ff) {
 8005422:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005426:	429c      	cmp	r4, r3
 8005428:	d02f      	beq.n	800548a <_to_float+0xb6>
		}
		*buf = 0;
		return buf - start;
	}

	if (c == 'F') {
 800542a:	2f46      	cmp	r7, #70	; 0x46
 800542c:	d059      	beq.n	80054e2 <_to_float+0x10e>
		c = 'f';
	}

	if ((exp | fract) != 0) {
 800542e:	9b04      	ldr	r3, [sp, #16]
 8005430:	ea44 0a03 	orr.w	sl, r4, r3
 8005434:	9905      	ldr	r1, [sp, #20]
 8005436:	17e3      	asrs	r3, r4, #31
 8005438:	ea43 0b01 	orr.w	fp, r3, r1
 800543c:	ea5a 030b 	orrs.w	r3, sl, fp
 8005440:	d007      	beq.n	8005452 <_to_float+0x7e>
		if (exp == 0) {
 8005442:	2c00      	cmp	r4, #0
 8005444:	d04f      	beq.n	80054e6 <_to_float+0x112>
			/* this is a denormal */
			while (((fract <<= 1) & HIGHBIT64) == 0) {
				exp--;
			}
		}
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
 8005446:	f2a4 34fe 	subw	r4, r4, #1022	; 0x3fe
		fract |= HIGHBIT64;
 800544a:	9b05      	ldr	r3, [sp, #20]
 800544c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005450:	9305      	str	r3, [sp, #20]
		c = 'f';
 8005452:	f04f 0800 	mov.w	r8, #0
	}

	decexp = 0;
	while (exp <= -3) {
 8005456:	f114 0f02 	cmn.w	r4, #2
 800545a:	da7b      	bge.n	8005554 <_to_float+0x180>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
 800545c:	9804      	ldr	r0, [sp, #16]
 800545e:	9905      	ldr	r1, [sp, #20]
 8005460:	2300      	movs	r3, #0
 8005462:	2b00      	cmp	r3, #0
 8005464:	bf08      	it	eq
 8005466:	f1b1 3f33 	cmpeq.w	r1, #858993459	; 0x33333333
 800546a:	d34b      	bcc.n	8005504 <_to_float+0x130>
			_rlrshift(&fract);
 800546c:	a804      	add	r0, sp, #16
 800546e:	f015 f97f 	bl	801a770 <_rlrshift>
			exp++;
 8005472:	3401      	adds	r4, #1
 8005474:	e7f2      	b.n	800545c <_to_float+0x88>
	} else if (fspace) {
 8005476:	f1bc 0f00 	cmp.w	ip, #0
 800547a:	d004      	beq.n	8005486 <_to_float+0xb2>
		*buf++ = ' ';
 800547c:	9e00      	ldr	r6, [sp, #0]
 800547e:	2320      	movs	r3, #32
 8005480:	f806 3b01 	strb.w	r3, [r6], #1
 8005484:	e7cd      	b.n	8005422 <_to_float+0x4e>
 8005486:	9e00      	ldr	r6, [sp, #0]
 8005488:	e7cb      	b.n	8005422 <_to_float+0x4e>
		if (!fract) {
 800548a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800548e:	4313      	orrs	r3, r2
 8005490:	d116      	bne.n	80054c0 <_to_float+0xec>
extern "C" {
#endif

static inline int isupper(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 8005492:	3f41      	subs	r7, #65	; 0x41
			if (isupper((int)c)) {
 8005494:	2f19      	cmp	r7, #25
 8005496:	d80b      	bhi.n	80054b0 <_to_float+0xdc>
				*buf++ = 'I';
 8005498:	2349      	movs	r3, #73	; 0x49
 800549a:	7033      	strb	r3, [r6, #0]
				*buf++ = 'N';
 800549c:	234e      	movs	r3, #78	; 0x4e
 800549e:	7073      	strb	r3, [r6, #1]
				*buf++ = 'F';
 80054a0:	1cf3      	adds	r3, r6, #3
 80054a2:	2246      	movs	r2, #70	; 0x46
 80054a4:	70b2      	strb	r2, [r6, #2]
		*buf = 0;
 80054a6:	2200      	movs	r2, #0
 80054a8:	701a      	strb	r2, [r3, #0]
		return buf - start;
 80054aa:	9a00      	ldr	r2, [sp, #0]
 80054ac:	1a98      	subs	r0, r3, r2
 80054ae:	e142      	b.n	8005736 <_to_float+0x362>
				*buf++ = 'i';
 80054b0:	2369      	movs	r3, #105	; 0x69
 80054b2:	7033      	strb	r3, [r6, #0]
				*buf++ = 'n';
 80054b4:	236e      	movs	r3, #110	; 0x6e
 80054b6:	7073      	strb	r3, [r6, #1]
				*buf++ = 'f';
 80054b8:	1cf3      	adds	r3, r6, #3
 80054ba:	2266      	movs	r2, #102	; 0x66
 80054bc:	70b2      	strb	r2, [r6, #2]
 80054be:	e7f2      	b.n	80054a6 <_to_float+0xd2>
 80054c0:	3f41      	subs	r7, #65	; 0x41
			if (isupper((int)c)) {
 80054c2:	2f19      	cmp	r7, #25
 80054c4:	d806      	bhi.n	80054d4 <_to_float+0x100>
				*buf++ = 'N';
 80054c6:	224e      	movs	r2, #78	; 0x4e
 80054c8:	7032      	strb	r2, [r6, #0]
				*buf++ = 'A';
 80054ca:	2341      	movs	r3, #65	; 0x41
 80054cc:	7073      	strb	r3, [r6, #1]
				*buf++ = 'N';
 80054ce:	1cf3      	adds	r3, r6, #3
 80054d0:	70b2      	strb	r2, [r6, #2]
 80054d2:	e7e8      	b.n	80054a6 <_to_float+0xd2>
				*buf++ = 'n';
 80054d4:	226e      	movs	r2, #110	; 0x6e
 80054d6:	7032      	strb	r2, [r6, #0]
				*buf++ = 'a';
 80054d8:	2361      	movs	r3, #97	; 0x61
 80054da:	7073      	strb	r3, [r6, #1]
				*buf++ = 'n';
 80054dc:	1cf3      	adds	r3, r6, #3
 80054de:	70b2      	strb	r2, [r6, #2]
 80054e0:	e7e1      	b.n	80054a6 <_to_float+0xd2>
		c = 'f';
 80054e2:	2766      	movs	r7, #102	; 0x66
 80054e4:	e7a3      	b.n	800542e <_to_float+0x5a>
			while (((fract <<= 1) & HIGHBIT64) == 0) {
 80054e6:	9b04      	ldr	r3, [sp, #16]
 80054e8:	9a05      	ldr	r2, [sp, #20]
 80054ea:	eb13 0803 	adds.w	r8, r3, r3
 80054ee:	eb42 0902 	adc.w	r9, r2, r2
 80054f2:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80054f6:	f1b8 0f00 	cmp.w	r8, #0
 80054fa:	f179 0300 	sbcs.w	r3, r9, #0
 80054fe:	dba2      	blt.n	8005446 <_to_float+0x72>
				exp--;
 8005500:	3c01      	subs	r4, #1
 8005502:	e7f0      	b.n	80054e6 <_to_float+0x112>
		}
		fract *= 5U;
 8005504:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 8005508:	0083      	lsls	r3, r0, #2
 800550a:	ea4c 7290 	orr.w	r2, ip, r0, lsr #30
 800550e:	1818      	adds	r0, r3, r0
 8005510:	eb42 0101 	adc.w	r1, r2, r1
 8005514:	9004      	str	r0, [sp, #16]
 8005516:	9105      	str	r1, [sp, #20]
		exp++;
 8005518:	3401      	adds	r4, #1
		decexp--;
 800551a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff

		while ((fract >> 32) <= (MAXFP1 / 2)) {
 800551e:	9b04      	ldr	r3, [sp, #16]
 8005520:	9a05      	ldr	r2, [sp, #20]
 8005522:	2100      	movs	r1, #0
 8005524:	2900      	cmp	r1, #0
 8005526:	bf08      	it	eq
 8005528:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
 800552c:	d293      	bcs.n	8005456 <_to_float+0x82>
			fract <<= 1;
 800552e:	18db      	adds	r3, r3, r3
 8005530:	4152      	adcs	r2, r2
 8005532:	9304      	str	r3, [sp, #16]
 8005534:	9205      	str	r2, [sp, #20]
			exp--;
 8005536:	3c01      	subs	r4, #1
 8005538:	e7f1      	b.n	800551e <_to_float+0x14a>
	while (exp > 0) {
		_ldiv5(&fract);
		exp--;
		decexp++;
		while ((fract >> 32) <= (MAXFP1 / 2)) {
			fract <<= 1;
 800553a:	18db      	adds	r3, r3, r3
 800553c:	4152      	adcs	r2, r2
 800553e:	9304      	str	r3, [sp, #16]
 8005540:	9205      	str	r2, [sp, #20]
			exp--;
 8005542:	3c01      	subs	r4, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
 8005544:	9b04      	ldr	r3, [sp, #16]
 8005546:	9a05      	ldr	r2, [sp, #20]
 8005548:	2100      	movs	r1, #0
 800554a:	2900      	cmp	r1, #0
 800554c:	bf08      	it	eq
 800554e:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
 8005552:	d3f2      	bcc.n	800553a <_to_float+0x166>
	while (exp > 0) {
 8005554:	2c00      	cmp	r4, #0
 8005556:	dd0a      	ble.n	800556e <_to_float+0x19a>
		_ldiv5(&fract);
 8005558:	a804      	add	r0, sp, #16
 800555a:	f7ff fef5 	bl	8005348 <_ldiv5>
		exp--;
 800555e:	3c01      	subs	r4, #1
		decexp++;
 8005560:	f108 0801 	add.w	r8, r8, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
 8005564:	e7ee      	b.n	8005544 <_to_float+0x170>
		}
	}

	while (exp < (0 + 4)) {
		_rlrshift(&fract);
 8005566:	a804      	add	r0, sp, #16
 8005568:	f015 f902 	bl	801a770 <_rlrshift>
		exp++;
 800556c:	3401      	adds	r4, #1
	while (exp < (0 + 4)) {
 800556e:	2c03      	cmp	r4, #3
 8005570:	ddf9      	ble.n	8005566 <_to_float+0x192>
	}

	if (precision < 0) {
 8005572:	2d00      	cmp	r5, #0
 8005574:	db13      	blt.n	800559e <_to_float+0x1ca>
		precision = 6;		/* Default precision if none given */
	}

	prune_zero = false;		/* Assume trailing 0's allowed     */
	if ((c == 'g') || (c == 'G')) {
 8005576:	2f67      	cmp	r7, #103	; 0x67
 8005578:	d013      	beq.n	80055a2 <_to_float+0x1ce>
 800557a:	2f47      	cmp	r7, #71	; 0x47
 800557c:	d011      	beq.n	80055a2 <_to_float+0x1ce>
	prune_zero = false;		/* Assume trailing 0's allowed     */
 800557e:	f04f 0a00 	mov.w	sl, #0
		if (!falt && (precision > 0)) {
			prune_zero = true;
		}
	}

	if (c == 'f') {
 8005582:	2f66      	cmp	r7, #102	; 0x66
 8005584:	d027      	beq.n	80055d6 <_to_float+0x202>
		exp = precision + decexp;
		if (exp < 0) {
			exp = 0;
		}
	} else {
		exp = precision + 1;
 8005586:	1c6c      	adds	r4, r5, #1
	}
	digit_count = 16;
 8005588:	2310      	movs	r3, #16
 800558a:	9307      	str	r3, [sp, #28]
	if (exp > 16) {
 800558c:	429c      	cmp	r4, r3
 800558e:	dd00      	ble.n	8005592 <_to_float+0x1be>
		exp = 16;
 8005590:	461c      	mov	r4, r3
	}

	ltemp = 0x0800000000000000;
 8005592:	2200      	movs	r2, #0
 8005594:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005598:	e9cd 2302 	strd	r2, r3, [sp, #8]
	while (exp--) {
 800559c:	e029      	b.n	80055f2 <_to_float+0x21e>
		precision = 6;		/* Default precision if none given */
 800559e:	2506      	movs	r5, #6
 80055a0:	e7e9      	b.n	8005576 <_to_float+0x1a2>
		if (decexp < (-4 + 1) || decexp > precision) {
 80055a2:	f118 0f03 	cmn.w	r8, #3
 80055a6:	db01      	blt.n	80055ac <_to_float+0x1d8>
 80055a8:	4545      	cmp	r5, r8
 80055aa:	da0b      	bge.n	80055c4 <_to_float+0x1f0>
			c += 'e' - 'g';
 80055ac:	3f02      	subs	r7, #2
 80055ae:	b2ff      	uxtb	r7, r7
			if (precision > 0) {
 80055b0:	2d00      	cmp	r5, #0
 80055b2:	dd00      	ble.n	80055b6 <_to_float+0x1e2>
				precision--;
 80055b4:	3d01      	subs	r5, #1
		if (!falt && (precision > 0)) {
 80055b6:	9b01      	ldr	r3, [sp, #4]
 80055b8:	b953      	cbnz	r3, 80055d0 <_to_float+0x1fc>
 80055ba:	2d00      	cmp	r5, #0
 80055bc:	dd06      	ble.n	80055cc <_to_float+0x1f8>
			prune_zero = true;
 80055be:	f04f 0a01 	mov.w	sl, #1
 80055c2:	e7de      	b.n	8005582 <_to_float+0x1ae>
			precision -= decexp;
 80055c4:	eba5 0508 	sub.w	r5, r5, r8
			c = 'f';
 80055c8:	2766      	movs	r7, #102	; 0x66
 80055ca:	e7f4      	b.n	80055b6 <_to_float+0x1e2>
	prune_zero = false;		/* Assume trailing 0's allowed     */
 80055cc:	469a      	mov	sl, r3
 80055ce:	e7d8      	b.n	8005582 <_to_float+0x1ae>
 80055d0:	f04f 0a00 	mov.w	sl, #0
 80055d4:	e7d5      	b.n	8005582 <_to_float+0x1ae>
		if (exp < 0) {
 80055d6:	eb15 0408 	adds.w	r4, r5, r8
 80055da:	d5d5      	bpl.n	8005588 <_to_float+0x1b4>
	digit_count = 16;
 80055dc:	2310      	movs	r3, #16
 80055de:	9307      	str	r3, [sp, #28]
			exp = 0;
 80055e0:	2400      	movs	r4, #0
 80055e2:	e7d6      	b.n	8005592 <_to_float+0x1be>
		_ldiv5(&ltemp);
 80055e4:	a802      	add	r0, sp, #8
 80055e6:	f7ff feaf 	bl	8005348 <_ldiv5>
		_rlrshift(&ltemp);
 80055ea:	a802      	add	r0, sp, #8
 80055ec:	f015 f8c0 	bl	801a770 <_rlrshift>
	while (exp--) {
 80055f0:	464c      	mov	r4, r9
 80055f2:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 80055f6:	2c00      	cmp	r4, #0
 80055f8:	d1f4      	bne.n	80055e4 <_to_float+0x210>
	}

	fract += ltemp;
 80055fa:	9b04      	ldr	r3, [sp, #16]
 80055fc:	9a02      	ldr	r2, [sp, #8]
 80055fe:	189b      	adds	r3, r3, r2
 8005600:	9a05      	ldr	r2, [sp, #20]
 8005602:	9903      	ldr	r1, [sp, #12]
 8005604:	eb41 0202 	adc.w	r2, r1, r2
 8005608:	9304      	str	r3, [sp, #16]
 800560a:	9205      	str	r2, [sp, #20]
	if ((fract >> 32) & 0xF0000000) {
 800560c:	f002 4070 	and.w	r0, r2, #4026531840	; 0xf0000000
 8005610:	2100      	movs	r1, #0
 8005612:	ea50 0301 	orrs.w	r3, r0, r1
 8005616:	d109      	bne.n	800562c <_to_float+0x258>
		_ldiv5(&fract);
		_rlrshift(&fract);
		decexp++;
	}

	if (c == 'f') {
 8005618:	2f66      	cmp	r7, #102	; 0x66
 800561a:	f040 808f 	bne.w	800573c <_to_float+0x368>
		if (decexp > 0) {
 800561e:	f1b8 0f00 	cmp.w	r8, #0
 8005622:	dc14      	bgt.n	800564e <_to_float+0x27a>
				decexp--;
			}
			zp->predot = decexp;
			decexp = 0;
		} else {
			*buf++ = '0';
 8005624:	2330      	movs	r3, #48	; 0x30
 8005626:	f806 3b01 	strb.w	r3, [r6], #1
 800562a:	e01a      	b.n	8005662 <_to_float+0x28e>
		_ldiv5(&fract);
 800562c:	a804      	add	r0, sp, #16
 800562e:	f7ff fe8b 	bl	8005348 <_ldiv5>
		_rlrshift(&fract);
 8005632:	a804      	add	r0, sp, #16
 8005634:	f015 f89c 	bl	801a770 <_rlrshift>
		decexp++;
 8005638:	f108 0801 	add.w	r8, r8, #1
 800563c:	e7ec      	b.n	8005618 <_to_float+0x244>
				*buf++ = _get_digit(&fract, &digit_count);
 800563e:	a907      	add	r1, sp, #28
 8005640:	a804      	add	r0, sp, #16
 8005642:	f015 f8a7 	bl	801a794 <_get_digit>
 8005646:	f806 0b01 	strb.w	r0, [r6], #1
				decexp--;
 800564a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			while (decexp > 0 && digit_count > 0) {
 800564e:	f1b8 0f00 	cmp.w	r8, #0
 8005652:	dd02      	ble.n	800565a <_to_float+0x286>
 8005654:	9b07      	ldr	r3, [sp, #28]
 8005656:	2b00      	cmp	r3, #0
 8005658:	dcf1      	bgt.n	800563e <_to_float+0x26a>
			zp->predot = decexp;
 800565a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800565c:	f8c3 8000 	str.w	r8, [r3]
			decexp = 0;
 8005660:	46a0      	mov	r8, r4
		}
		if (falt || (precision > 0)) {
 8005662:	9b01      	ldr	r3, [sp, #4]
 8005664:	b90b      	cbnz	r3, 800566a <_to_float+0x296>
 8005666:	2d00      	cmp	r5, #0
 8005668:	dd13      	ble.n	8005692 <_to_float+0x2be>
			*buf++ = '.';
 800566a:	4633      	mov	r3, r6
 800566c:	222e      	movs	r2, #46	; 0x2e
 800566e:	f803 2b01 	strb.w	r2, [r3], #1
		}
		if (decexp < 0 && precision > 0) {
 8005672:	f1b8 0f00 	cmp.w	r8, #0
 8005676:	da17      	bge.n	80056a8 <_to_float+0x2d4>
 8005678:	2d00      	cmp	r5, #0
 800567a:	dd15      	ble.n	80056a8 <_to_float+0x2d4>
			zp->postdot = -decexp;
 800567c:	f1c8 0200 	rsb	r2, r8, #0
 8005680:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8005682:	604a      	str	r2, [r1, #4]
			if (zp->postdot > precision) {
 8005684:	42aa      	cmp	r2, r5
 8005686:	dd00      	ble.n	800568a <_to_float+0x2b6>
				zp->postdot = precision;
 8005688:	604d      	str	r5, [r1, #4]
			}
			precision -= zp->postdot;
 800568a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800568c:	6852      	ldr	r2, [r2, #4]
 800568e:	1aad      	subs	r5, r5, r2
 8005690:	e00a      	b.n	80056a8 <_to_float+0x2d4>
 8005692:	4633      	mov	r3, r6
 8005694:	e7ed      	b.n	8005672 <_to_float+0x29e>
		}
		while (precision > 0 && digit_count > 0) {
			*buf++ = _get_digit(&fract, &digit_count);
 8005696:	461c      	mov	r4, r3
 8005698:	a907      	add	r1, sp, #28
 800569a:	a804      	add	r0, sp, #16
 800569c:	f015 f87a 	bl	801a794 <_get_digit>
 80056a0:	f804 0b01 	strb.w	r0, [r4], #1
			precision--;
 80056a4:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
 80056a6:	4623      	mov	r3, r4
		while (precision > 0 && digit_count > 0) {
 80056a8:	2d00      	cmp	r5, #0
 80056aa:	dd02      	ble.n	80056b2 <_to_float+0x2de>
 80056ac:	9a07      	ldr	r2, [sp, #28]
 80056ae:	2a00      	cmp	r2, #0
 80056b0:	dcf1      	bgt.n	8005696 <_to_float+0x2c2>
		}
		zp->trail = precision;
 80056b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80056b4:	6095      	str	r5, [r2, #8]
			precision--;
		}
		zp->trail = precision;
	}

	if (prune_zero) {
 80056b6:	f1ba 0f00 	cmp.w	sl, #0
 80056ba:	d00a      	beq.n	80056d2 <_to_float+0x2fe>
		zp->trail = 0;
 80056bc:	2200      	movs	r2, #0
 80056be:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80056c0:	608a      	str	r2, [r1, #8]
		while (*--buf == '0')
 80056c2:	461a      	mov	r2, r3
 80056c4:	4613      	mov	r3, r2
 80056c6:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 80056ca:	2930      	cmp	r1, #48	; 0x30
 80056cc:	d0fa      	beq.n	80056c4 <_to_float+0x2f0>
			;
		if (*buf != '.') {
 80056ce:	292e      	cmp	r1, #46	; 0x2e
 80056d0:	d058      	beq.n	8005784 <_to_float+0x3b0>
			buf++;
		}
	}

	if ((c == 'e') || (c == 'E')) {
 80056d2:	2f65      	cmp	r7, #101	; 0x65
 80056d4:	d001      	beq.n	80056da <_to_float+0x306>
 80056d6:	2f45      	cmp	r7, #69	; 0x45
 80056d8:	d129      	bne.n	800572e <_to_float+0x35a>
		*buf++ = c;
 80056da:	701f      	strb	r7, [r3, #0]
		if (decexp < 0) {
 80056dc:	f1b8 0f00 	cmp.w	r8, #0
 80056e0:	db52      	blt.n	8005788 <_to_float+0x3b4>
			decexp = -decexp;
			*buf++ = '-';
		} else {
			*buf++ = '+';
 80056e2:	1c99      	adds	r1, r3, #2
 80056e4:	222b      	movs	r2, #43	; 0x2b
 80056e6:	705a      	strb	r2, [r3, #1]
		}
		if (decexp >= 100) {
 80056e8:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 80056ec:	dd0d      	ble.n	800570a <_to_float+0x336>
			*buf++ = (decexp / 100) + '0';
 80056ee:	4a29      	ldr	r2, [pc, #164]	; (8005794 <_to_float+0x3c0>)
 80056f0:	fb82 3208 	smull	r3, r2, r2, r8
 80056f4:	ea4f 73e8 	mov.w	r3, r8, asr #31
 80056f8:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 80056fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005700:	f801 2b01 	strb.w	r2, [r1], #1
			decexp %= 100;
 8005704:	2264      	movs	r2, #100	; 0x64
 8005706:	fb02 8813 	mls	r8, r2, r3, r8
		}
		*buf++ = (decexp / 10) + '0';
 800570a:	4b23      	ldr	r3, [pc, #140]	; (8005798 <_to_float+0x3c4>)
 800570c:	fb83 2308 	smull	r2, r3, r3, r8
 8005710:	ea4f 72e8 	mov.w	r2, r8, asr #31
 8005714:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
 8005718:	f102 0030 	add.w	r0, r2, #48	; 0x30
 800571c:	460b      	mov	r3, r1
 800571e:	f803 0b02 	strb.w	r0, [r3], #2
		decexp %= 10;
 8005722:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005726:	eba8 0242 	sub.w	r2, r8, r2, lsl #1
		*buf++ = decexp + '0';
 800572a:	3230      	adds	r2, #48	; 0x30
 800572c:	704a      	strb	r2, [r1, #1]
	}
	*buf = 0;
 800572e:	2200      	movs	r2, #0
 8005730:	701a      	strb	r2, [r3, #0]

	return buf - start;
 8005732:	9a00      	ldr	r2, [sp, #0]
 8005734:	1a98      	subs	r0, r3, r2
}
 8005736:	b009      	add	sp, #36	; 0x24
 8005738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*buf = _get_digit(&fract, &digit_count);
 800573c:	a907      	add	r1, sp, #28
 800573e:	a804      	add	r0, sp, #16
 8005740:	f015 f828 	bl	801a794 <_get_digit>
 8005744:	4633      	mov	r3, r6
 8005746:	f803 0b01 	strb.w	r0, [r3], #1
		if (*buf++ != '0') {
 800574a:	2830      	cmp	r0, #48	; 0x30
 800574c:	d001      	beq.n	8005752 <_to_float+0x37e>
			decexp--;
 800574e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (falt || (precision > 0)) {
 8005752:	9a01      	ldr	r2, [sp, #4]
 8005754:	b90a      	cbnz	r2, 800575a <_to_float+0x386>
 8005756:	2d00      	cmp	r5, #0
 8005758:	dd0c      	ble.n	8005774 <_to_float+0x3a0>
			*buf++ = '.';
 800575a:	1cb3      	adds	r3, r6, #2
 800575c:	222e      	movs	r2, #46	; 0x2e
 800575e:	7072      	strb	r2, [r6, #1]
 8005760:	e008      	b.n	8005774 <_to_float+0x3a0>
			*buf++ = _get_digit(&fract, &digit_count);
 8005762:	461c      	mov	r4, r3
 8005764:	a907      	add	r1, sp, #28
 8005766:	a804      	add	r0, sp, #16
 8005768:	f015 f814 	bl	801a794 <_get_digit>
 800576c:	f804 0b01 	strb.w	r0, [r4], #1
			precision--;
 8005770:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
 8005772:	4623      	mov	r3, r4
		while (precision > 0 && digit_count > 0) {
 8005774:	2d00      	cmp	r5, #0
 8005776:	dd02      	ble.n	800577e <_to_float+0x3aa>
 8005778:	9a07      	ldr	r2, [sp, #28]
 800577a:	2a00      	cmp	r2, #0
 800577c:	dcf1      	bgt.n	8005762 <_to_float+0x38e>
		zp->trail = precision;
 800577e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005780:	6095      	str	r5, [r2, #8]
 8005782:	e798      	b.n	80056b6 <_to_float+0x2e2>
		while (*--buf == '0')
 8005784:	4613      	mov	r3, r2
 8005786:	e7a4      	b.n	80056d2 <_to_float+0x2fe>
			decexp = -decexp;
 8005788:	f1c8 0800 	rsb	r8, r8, #0
			*buf++ = '-';
 800578c:	1c99      	adds	r1, r3, #2
 800578e:	222d      	movs	r2, #45	; 0x2d
 8005790:	705a      	strb	r2, [r3, #1]
 8005792:	e7a9      	b.n	80056e8 <_to_float+0x314>
 8005794:	51eb851f 	.word	0x51eb851f
 8005798:	66666667 	.word	0x66666667

0800579c <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
 800579c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a0:	b099      	sub	sp, #100	; 0x64
 80057a2:	4606      	mov	r6, r0
 80057a4:	460d      	mov	r5, r1
 80057a6:	920d      	str	r2, [sp, #52]	; 0x34
 80057a8:	930c      	str	r3, [sp, #48]	; 0x30
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
 80057aa:	2400      	movs	r4, #0

	while ((c = *format++)) {
 80057ac:	e000      	b.n	80057b0 <z_prf+0x14>
		if (c != '%') {
			PUTC(c);
			count++;
 80057ae:	3401      	adds	r4, #1
	while ((c = *format++)) {
 80057b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	920d      	str	r2, [sp, #52]	; 0x34
 80057b6:	7818      	ldrb	r0, [r3, #0]
 80057b8:	b138      	cbz	r0, 80057ca <z_prf+0x2e>
		if (c != '%') {
 80057ba:	2825      	cmp	r0, #37	; 0x25
 80057bc:	d018      	beq.n	80057f0 <z_prf+0x54>
			PUTC(c);
 80057be:	4629      	mov	r1, r5
 80057c0:	47b0      	blx	r6
 80057c2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80057c6:	d1f2      	bne.n	80057ae <z_prf+0x12>
 80057c8:	4604      	mov	r4, r0
		}
	}
	return count;

#undef PUTC
}
 80057ca:	4620      	mov	r0, r4
 80057cc:	b019      	add	sp, #100	; 0x64
 80057ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					fplus = true;
 80057d2:	f04f 0801 	mov.w	r8, #1
					break;
 80057d6:	e013      	b.n	8005800 <z_prf+0x64>
					fspace = true;
 80057d8:	2301      	movs	r3, #1
 80057da:	9307      	str	r3, [sp, #28]
					break;
 80057dc:	e010      	b.n	8005800 <z_prf+0x64>
					falt = true;
 80057de:	2301      	movs	r3, #1
 80057e0:	9308      	str	r3, [sp, #32]
					break;
 80057e2:	e00d      	b.n	8005800 <z_prf+0x64>
					fzero = true;
 80057e4:	f04f 0901 	mov.w	r9, #1
					break;
 80057e8:	e00a      	b.n	8005800 <z_prf+0x64>
					fminus = true;
 80057ea:	f04f 0a01 	mov.w	sl, #1
 80057ee:	e007      	b.n	8005800 <z_prf+0x64>
			fminus = fplus = fspace = falt = fzero = false;
 80057f0:	f04f 0900 	mov.w	r9, #0
 80057f4:	f8cd 901c 	str.w	r9, [sp, #28]
 80057f8:	46c8      	mov	r8, r9
 80057fa:	46ca      	mov	sl, r9
 80057fc:	f8cd 9020 	str.w	r9, [sp, #32]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
 8005800:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005802:	1c5a      	adds	r2, r3, #1
 8005804:	920d      	str	r2, [sp, #52]	; 0x34
 8005806:	781f      	ldrb	r7, [r3, #0]
 8005808:	4639      	mov	r1, r7
 800580a:	48c5      	ldr	r0, [pc, #788]	; (8005b20 <z_prf+0x384>)
 800580c:	f016 fffd 	bl	801c80a <strchr>
 8005810:	b370      	cbz	r0, 8005870 <z_prf+0xd4>
				switch (c) {
 8005812:	2f00      	cmp	r7, #0
 8005814:	d0d9      	beq.n	80057ca <z_prf+0x2e>
 8005816:	2f30      	cmp	r7, #48	; 0x30
 8005818:	d8f2      	bhi.n	8005800 <z_prf+0x64>
 800581a:	2f20      	cmp	r7, #32
 800581c:	d3f0      	bcc.n	8005800 <z_prf+0x64>
 800581e:	3f20      	subs	r7, #32
 8005820:	2f10      	cmp	r7, #16
 8005822:	d8ed      	bhi.n	8005800 <z_prf+0x64>
 8005824:	a301      	add	r3, pc, #4	; (adr r3, 800582c <z_prf+0x90>)
 8005826:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 800582a:	bf00      	nop
 800582c:	080057d9 	.word	0x080057d9
 8005830:	08005801 	.word	0x08005801
 8005834:	08005801 	.word	0x08005801
 8005838:	080057df 	.word	0x080057df
 800583c:	08005801 	.word	0x08005801
 8005840:	08005801 	.word	0x08005801
 8005844:	08005801 	.word	0x08005801
 8005848:	08005801 	.word	0x08005801
 800584c:	08005801 	.word	0x08005801
 8005850:	08005801 	.word	0x08005801
 8005854:	08005801 	.word	0x08005801
 8005858:	080057d3 	.word	0x080057d3
 800585c:	08005801 	.word	0x08005801
 8005860:	080057eb 	.word	0x080057eb
 8005864:	08005801 	.word	0x08005801
 8005868:	08005801 	.word	0x08005801
 800586c:	080057e5 	.word	0x080057e5
			if (c == '*') {
 8005870:	2f2a      	cmp	r7, #42	; 0x2a
 8005872:	f000 8119 	beq.w	8005aa8 <z_prf+0x30c>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 8005876:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
			} else if (!isdigit((int)c)) {
 800587a:	2b09      	cmp	r3, #9
 800587c:	f240 8125 	bls.w	8005aca <z_prf+0x32e>
				width = 0;
 8005880:	2300      	movs	r3, #0
 8005882:	930a      	str	r3, [sp, #40]	; 0x28
			if (c == '.') {
 8005884:	2f2e      	cmp	r7, #46	; 0x2e
 8005886:	f000 8129 	beq.w	8005adc <z_prf+0x340>
			precision = -1;
 800588a:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
			if (strchr("hlz", c) != NULL) {
 800588e:	9709      	str	r7, [sp, #36]	; 0x24
 8005890:	4639      	mov	r1, r7
 8005892:	48a4      	ldr	r0, [pc, #656]	; (8005b24 <z_prf+0x388>)
 8005894:	f016 ffb9 	bl	801c80a <strchr>
 8005898:	2800      	cmp	r0, #0
 800589a:	f000 813d 	beq.w	8005b18 <z_prf+0x37c>
				c = *format++;
 800589e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058a0:	1c5a      	adds	r2, r3, #1
 80058a2:	920d      	str	r2, [sp, #52]	; 0x34
 80058a4:	781f      	ldrb	r7, [r3, #0]
				} else if (i == 'h' && c == 'h') {
 80058a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058a8:	2968      	cmp	r1, #104	; 0x68
 80058aa:	f000 812c 	beq.w	8005b06 <z_prf+0x36a>
			zero.predot = zero.postdot = zero.trail = 0;
 80058ae:	2300      	movs	r3, #0
 80058b0:	9310      	str	r3, [sp, #64]	; 0x40
 80058b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80058b4:	930e      	str	r3, [sp, #56]	; 0x38
			switch (c) {
 80058b6:	970b      	str	r7, [sp, #44]	; 0x2c
 80058b8:	2f78      	cmp	r7, #120	; 0x78
 80058ba:	f200 825b 	bhi.w	8005d74 <z_prf+0x5d8>
 80058be:	a301      	add	r3, pc, #4	; (adr r3, 80058c4 <z_prf+0x128>)
 80058c0:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 80058c4:	080057cb 	.word	0x080057cb
 80058c8:	08005d75 	.word	0x08005d75
 80058cc:	08005d75 	.word	0x08005d75
 80058d0:	08005d75 	.word	0x08005d75
 80058d4:	08005d75 	.word	0x08005d75
 80058d8:	08005d75 	.word	0x08005d75
 80058dc:	08005d75 	.word	0x08005d75
 80058e0:	08005d75 	.word	0x08005d75
 80058e4:	08005d75 	.word	0x08005d75
 80058e8:	08005d75 	.word	0x08005d75
 80058ec:	08005d75 	.word	0x08005d75
 80058f0:	08005d75 	.word	0x08005d75
 80058f4:	08005d75 	.word	0x08005d75
 80058f8:	08005d75 	.word	0x08005d75
 80058fc:	08005d75 	.word	0x08005d75
 8005900:	08005d75 	.word	0x08005d75
 8005904:	08005d75 	.word	0x08005d75
 8005908:	08005d75 	.word	0x08005d75
 800590c:	08005d75 	.word	0x08005d75
 8005910:	08005d75 	.word	0x08005d75
 8005914:	08005d75 	.word	0x08005d75
 8005918:	08005d75 	.word	0x08005d75
 800591c:	08005d75 	.word	0x08005d75
 8005920:	08005d75 	.word	0x08005d75
 8005924:	08005d75 	.word	0x08005d75
 8005928:	08005d75 	.word	0x08005d75
 800592c:	08005d75 	.word	0x08005d75
 8005930:	08005d75 	.word	0x08005d75
 8005934:	08005d75 	.word	0x08005d75
 8005938:	08005d75 	.word	0x08005d75
 800593c:	08005d75 	.word	0x08005d75
 8005940:	08005d75 	.word	0x08005d75
 8005944:	08005d75 	.word	0x08005d75
 8005948:	08005d75 	.word	0x08005d75
 800594c:	08005d75 	.word	0x08005d75
 8005950:	08005d75 	.word	0x08005d75
 8005954:	08005d75 	.word	0x08005d75
 8005958:	08005d63 	.word	0x08005d63
 800595c:	08005d75 	.word	0x08005d75
 8005960:	08005d75 	.word	0x08005d75
 8005964:	08005d75 	.word	0x08005d75
 8005968:	08005d75 	.word	0x08005d75
 800596c:	08005d75 	.word	0x08005d75
 8005970:	08005d75 	.word	0x08005d75
 8005974:	08005d75 	.word	0x08005d75
 8005978:	08005d75 	.word	0x08005d75
 800597c:	08005d75 	.word	0x08005d75
 8005980:	08005d75 	.word	0x08005d75
 8005984:	08005d75 	.word	0x08005d75
 8005988:	08005d75 	.word	0x08005d75
 800598c:	08005d75 	.word	0x08005d75
 8005990:	08005d75 	.word	0x08005d75
 8005994:	08005d75 	.word	0x08005d75
 8005998:	08005d75 	.word	0x08005d75
 800599c:	08005d75 	.word	0x08005d75
 80059a0:	08005d75 	.word	0x08005d75
 80059a4:	08005d75 	.word	0x08005d75
 80059a8:	08005d75 	.word	0x08005d75
 80059ac:	08005d75 	.word	0x08005d75
 80059b0:	08005d75 	.word	0x08005d75
 80059b4:	08005d75 	.word	0x08005d75
 80059b8:	08005d75 	.word	0x08005d75
 80059bc:	08005d75 	.word	0x08005d75
 80059c0:	08005d75 	.word	0x08005d75
 80059c4:	08005d75 	.word	0x08005d75
 80059c8:	08005d75 	.word	0x08005d75
 80059cc:	08005d75 	.word	0x08005d75
 80059d0:	08005d75 	.word	0x08005d75
 80059d4:	08005d75 	.word	0x08005d75
 80059d8:	08005be5 	.word	0x08005be5
 80059dc:	08005be5 	.word	0x08005be5
 80059e0:	08005be5 	.word	0x08005be5
 80059e4:	08005d75 	.word	0x08005d75
 80059e8:	08005d75 	.word	0x08005d75
 80059ec:	08005d75 	.word	0x08005d75
 80059f0:	08005d75 	.word	0x08005d75
 80059f4:	08005d75 	.word	0x08005d75
 80059f8:	08005d75 	.word	0x08005d75
 80059fc:	08005d75 	.word	0x08005d75
 8005a00:	08005d75 	.word	0x08005d75
 8005a04:	08005d75 	.word	0x08005d75
 8005a08:	08005d75 	.word	0x08005d75
 8005a0c:	08005d75 	.word	0x08005d75
 8005a10:	08005d75 	.word	0x08005d75
 8005a14:	08005d75 	.word	0x08005d75
 8005a18:	08005d75 	.word	0x08005d75
 8005a1c:	08005d75 	.word	0x08005d75
 8005a20:	08005d75 	.word	0x08005d75
 8005a24:	08005cf9 	.word	0x08005cf9
 8005a28:	08005d75 	.word	0x08005d75
 8005a2c:	08005d75 	.word	0x08005d75
 8005a30:	08005d75 	.word	0x08005d75
 8005a34:	08005d75 	.word	0x08005d75
 8005a38:	08005d75 	.word	0x08005d75
 8005a3c:	08005d75 	.word	0x08005d75
 8005a40:	08005d75 	.word	0x08005d75
 8005a44:	08005d75 	.word	0x08005d75
 8005a48:	08005d75 	.word	0x08005d75
 8005a4c:	08005d75 	.word	0x08005d75
 8005a50:	08005b29 	.word	0x08005b29
 8005a54:	08005b93 	.word	0x08005b93
 8005a58:	08005be5 	.word	0x08005be5
 8005a5c:	08005be5 	.word	0x08005be5
 8005a60:	08005be5 	.word	0x08005be5
 8005a64:	08005d75 	.word	0x08005d75
 8005a68:	08005b93 	.word	0x08005b93
 8005a6c:	08005d75 	.word	0x08005d75
 8005a70:	08005d75 	.word	0x08005d75
 8005a74:	08005d75 	.word	0x08005d75
 8005a78:	08005d75 	.word	0x08005d75
 8005a7c:	08005c5d 	.word	0x08005c5d
 8005a80:	08005cf9 	.word	0x08005cf9
 8005a84:	08005caf 	.word	0x08005caf
 8005a88:	08005d75 	.word	0x08005d75
 8005a8c:	08005d75 	.word	0x08005d75
 8005a90:	08005ccb 	.word	0x08005ccb
 8005a94:	08005d75 	.word	0x08005d75
 8005a98:	08005cf9 	.word	0x08005cf9
 8005a9c:	08005d75 	.word	0x08005d75
 8005aa0:	08005d75 	.word	0x08005d75
 8005aa4:	08005cf9 	.word	0x08005cf9
				width = va_arg(vargs, int);
 8005aa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005aaa:	1d1a      	adds	r2, r3, #4
 8005aac:	920c      	str	r2, [sp, #48]	; 0x30
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	930a      	str	r3, [sp, #40]	; 0x28
				if (width < 0) {
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	db04      	blt.n	8005ac0 <z_prf+0x324>
				c = *format++;
 8005ab6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ab8:	1c5a      	adds	r2, r3, #1
 8005aba:	920d      	str	r2, [sp, #52]	; 0x34
 8005abc:	781f      	ldrb	r7, [r3, #0]
 8005abe:	e6e1      	b.n	8005884 <z_prf+0xe8>
					width = -width;
 8005ac0:	425b      	negs	r3, r3
 8005ac2:	930a      	str	r3, [sp, #40]	; 0x28
					fminus = true;
 8005ac4:	f04f 0a01 	mov.w	sl, #1
 8005ac8:	e7f5      	b.n	8005ab6 <z_prf+0x31a>
				width = _atoi(&format);	/* Find width */
 8005aca:	a80d      	add	r0, sp, #52	; 0x34
 8005acc:	f014 fe7e 	bl	801a7cc <_atoi>
 8005ad0:	900a      	str	r0, [sp, #40]	; 0x28
				c = *format++;
 8005ad2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ad4:	1c5a      	adds	r2, r3, #1
 8005ad6:	920d      	str	r2, [sp, #52]	; 0x34
 8005ad8:	781f      	ldrb	r7, [r3, #0]
 8005ada:	e6d3      	b.n	8005884 <z_prf+0xe8>
				c = *format++;
 8005adc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ade:	1c5a      	adds	r2, r3, #1
 8005ae0:	920d      	str	r2, [sp, #52]	; 0x34
 8005ae2:	781b      	ldrb	r3, [r3, #0]
				if (c == '*') {
 8005ae4:	2b2a      	cmp	r3, #42	; 0x2a
 8005ae6:	d109      	bne.n	8005afc <z_prf+0x360>
					precision = va_arg(vargs, int);
 8005ae8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005aea:	1d1a      	adds	r2, r3, #4
 8005aec:	920c      	str	r2, [sp, #48]	; 0x30
 8005aee:	f8d3 b000 	ldr.w	fp, [r3]
				c = *format++;
 8005af2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005af4:	1c5a      	adds	r2, r3, #1
 8005af6:	920d      	str	r2, [sp, #52]	; 0x34
 8005af8:	781f      	ldrb	r7, [r3, #0]
 8005afa:	e6c8      	b.n	800588e <z_prf+0xf2>
					precision = _atoi(&format);
 8005afc:	a80d      	add	r0, sp, #52	; 0x34
 8005afe:	f014 fe65 	bl	801a7cc <_atoi>
 8005b02:	4683      	mov	fp, r0
 8005b04:	e7f5      	b.n	8005af2 <z_prf+0x356>
				} else if (i == 'h' && c == 'h') {
 8005b06:	2f68      	cmp	r7, #104	; 0x68
 8005b08:	f47f aed1 	bne.w	80058ae <z_prf+0x112>
					c = *format++;
 8005b0c:	1c9a      	adds	r2, r3, #2
 8005b0e:	920d      	str	r2, [sp, #52]	; 0x34
 8005b10:	785f      	ldrb	r7, [r3, #1]
					i = 'H';
 8005b12:	2348      	movs	r3, #72	; 0x48
 8005b14:	9309      	str	r3, [sp, #36]	; 0x24
 8005b16:	e6ca      	b.n	80058ae <z_prf+0x112>
			i = 0;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b1c:	e6c7      	b.n	80058ae <z_prf+0x112>
 8005b1e:	bf00      	nop
 8005b20:	08024ff4 	.word	0x08024ff4
 8005b24:	08024ffc 	.word	0x08024ffc
				buf[0] = va_arg(vargs, int);
 8005b28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b2a:	1d1a      	adds	r2, r3, #4
 8005b2c:	920c      	str	r2, [sp, #48]	; 0x30
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
			prefix = 0;
 8005b34:	f04f 0800 	mov.w	r8, #0
				clen = 1;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	9308      	str	r3, [sp, #32]
				precision = 0;
 8005b3c:	46c3      	mov	fp, r8
			cptr = buf;
 8005b3e:	af11      	add	r7, sp, #68	; 0x44
			if (precision >= 0) {
 8005b40:	f1bb 0f00 	cmp.w	fp, #0
 8005b44:	f2c0 813b 	blt.w	8005dbe <z_prf+0x622>
				zero_head = precision - clen + prefix;
 8005b48:	9b08      	ldr	r3, [sp, #32]
 8005b4a:	ebab 0903 	sub.w	r9, fp, r3
 8005b4e:	44c1      	add	r9, r8
			if (zero_head < 0) {
 8005b50:	f1b9 0f00 	cmp.w	r9, #0
 8005b54:	f2c0 813e 	blt.w	8005dd4 <z_prf+0x638>
			width -= clen + zero_head;
 8005b58:	9b08      	ldr	r3, [sp, #32]
 8005b5a:	eb03 0b09 	add.w	fp, r3, r9
 8005b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b60:	eba3 0b0b 	sub.w	fp, r3, fp
			if (!fminus && width > 0) {
 8005b64:	f1ba 0f00 	cmp.w	sl, #0
 8005b68:	f040 8137 	bne.w	8005dda <z_prf+0x63e>
 8005b6c:	f1bb 0f00 	cmp.w	fp, #0
 8005b70:	f340 8133 	ble.w	8005dda <z_prf+0x63e>
				count += width;
 8005b74:	445c      	add	r4, fp
				while (width-- > 0) {
 8005b76:	465b      	mov	r3, fp
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005b7e:	f340 812c 	ble.w	8005dda <z_prf+0x63e>
					PUTC(' ');
 8005b82:	4629      	mov	r1, r5
 8005b84:	2020      	movs	r0, #32
 8005b86:	47b0      	blx	r6
 8005b88:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005b8c:	d1f3      	bne.n	8005b76 <z_prf+0x3da>
 8005b8e:	4604      	mov	r4, r0
 8005b90:	e61b      	b.n	80057ca <z_prf+0x2e>
				switch (i) {
 8005b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b94:	2b6c      	cmp	r3, #108	; 0x6c
 8005b96:	d006      	beq.n	8005ba6 <z_prf+0x40a>
 8005b98:	2b7a      	cmp	r3, #122	; 0x7a
 8005b9a:	d01e      	beq.n	8005bda <z_prf+0x43e>
					val = va_arg(vargs, int);
 8005b9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b9e:	1d1a      	adds	r2, r3, #4
 8005ba0:	920c      	str	r2, [sp, #48]	; 0x30
 8005ba2:	681f      	ldr	r7, [r3, #0]
					break;
 8005ba4:	e003      	b.n	8005bae <z_prf+0x412>
					val = va_arg(vargs, long);
 8005ba6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ba8:	1d1a      	adds	r2, r3, #4
 8005baa:	920c      	str	r2, [sp, #48]	; 0x30
 8005bac:	681f      	ldr	r7, [r3, #0]
				clen = _to_dec(buf, val, fplus, fspace);
 8005bae:	9b07      	ldr	r3, [sp, #28]
 8005bb0:	4642      	mov	r2, r8
 8005bb2:	4639      	mov	r1, r7
 8005bb4:	a811      	add	r0, sp, #68	; 0x44
 8005bb6:	f014 fdbe 	bl	801a736 <_to_dec>
 8005bba:	9008      	str	r0, [sp, #32]
				if (fplus || fspace || val < 0) {
 8005bbc:	f1b8 0f00 	cmp.w	r8, #0
 8005bc0:	f040 80e8 	bne.w	8005d94 <z_prf+0x5f8>
 8005bc4:	9b07      	ldr	r3, [sp, #28]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	f040 80e8 	bne.w	8005d9c <z_prf+0x600>
 8005bcc:	2f00      	cmp	r7, #0
 8005bce:	f2c0 80e9 	blt.w	8005da4 <z_prf+0x608>
			prefix = 0;
 8005bd2:	f04f 0800 	mov.w	r8, #0
			cptr = buf;
 8005bd6:	af11      	add	r7, sp, #68	; 0x44
 8005bd8:	e7b2      	b.n	8005b40 <z_prf+0x3a4>
					val = va_arg(vargs, ssize_t);
 8005bda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bdc:	1d1a      	adds	r2, r3, #4
 8005bde:	920c      	str	r2, [sp, #48]	; 0x30
 8005be0:	681f      	ldr	r7, [r3, #0]
					break;
 8005be2:	e7e4      	b.n	8005bae <z_prf+0x412>
				u.d = va_arg(vargs, double);
 8005be4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005be6:	3307      	adds	r3, #7
 8005be8:	f023 0307 	bic.w	r3, r3, #7
 8005bec:	f103 0208 	add.w	r2, r3, #8
 8005bf0:	920c      	str	r2, [sp, #48]	; 0x30
 8005bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
				clen = _to_float(buf, double_val, c, falt,
 8005bf6:	a90e      	add	r1, sp, #56	; 0x38
 8005bf8:	9105      	str	r1, [sp, #20]
 8005bfa:	f8cd b010 	str.w	fp, [sp, #16]
 8005bfe:	9907      	ldr	r1, [sp, #28]
 8005c00:	9103      	str	r1, [sp, #12]
 8005c02:	f8cd 8008 	str.w	r8, [sp, #8]
 8005c06:	9808      	ldr	r0, [sp, #32]
 8005c08:	9001      	str	r0, [sp, #4]
 8005c0a:	9700      	str	r7, [sp, #0]
 8005c0c:	a811      	add	r0, sp, #68	; 0x44
 8005c0e:	f7ff fbe1 	bl	80053d4 <_to_float>
				if (fplus || fspace || (buf[0] == '-')) {
 8005c12:	f1b8 0f00 	cmp.w	r8, #0
 8005c16:	d108      	bne.n	8005c2a <z_prf+0x48e>
 8005c18:	9907      	ldr	r1, [sp, #28]
 8005c1a:	b9e1      	cbnz	r1, 8005c56 <z_prf+0x4ba>
 8005c1c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8005c20:	2b2d      	cmp	r3, #45	; 0x2d
 8005c22:	d104      	bne.n	8005c2e <z_prf+0x492>
					prefix = 1;
 8005c24:	f04f 0801 	mov.w	r8, #1
 8005c28:	e001      	b.n	8005c2e <z_prf+0x492>
 8005c2a:	f04f 0801 	mov.w	r8, #1
				clen += zero.predot + zero.postdot + zero.trail;
 8005c2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c32:	4413      	add	r3, r2
 8005c34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005c36:	4413      	add	r3, r2
 8005c38:	4403      	add	r3, r0
 8005c3a:	9308      	str	r3, [sp, #32]
				if (!isdigit((int)buf[prefix])) {
 8005c3c:	ab18      	add	r3, sp, #96	; 0x60
 8005c3e:	4443      	add	r3, r8
 8005c40:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005c44:	3b30      	subs	r3, #48	; 0x30
 8005c46:	2b09      	cmp	r3, #9
 8005c48:	d901      	bls.n	8005c4e <z_prf+0x4b2>
					fzero = false;
 8005c4a:	f04f 0900 	mov.w	r9, #0
				precision = -1;
 8005c4e:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
			cptr = buf;
 8005c52:	af11      	add	r7, sp, #68	; 0x44
 8005c54:	e774      	b.n	8005b40 <z_prf+0x3a4>
					prefix = 1;
 8005c56:	f04f 0801 	mov.w	r8, #1
 8005c5a:	e7e8      	b.n	8005c2e <z_prf+0x492>
				switch (i) {
 8005c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c5e:	2b6c      	cmp	r3, #108	; 0x6c
 8005c60:	d019      	beq.n	8005c96 <z_prf+0x4fa>
 8005c62:	dc09      	bgt.n	8005c78 <z_prf+0x4dc>
 8005c64:	2b48      	cmp	r3, #72	; 0x48
 8005c66:	d010      	beq.n	8005c8a <z_prf+0x4ee>
 8005c68:	2b68      	cmp	r3, #104	; 0x68
 8005c6a:	d11a      	bne.n	8005ca2 <z_prf+0x506>
					*va_arg(vargs, short *) = count;
 8005c6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c6e:	1d1a      	adds	r2, r3, #4
 8005c70:	920c      	str	r2, [sp, #48]	; 0x30
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	801c      	strh	r4, [r3, #0]
					break;
 8005c76:	e59b      	b.n	80057b0 <z_prf+0x14>
 8005c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c7a:	2b7a      	cmp	r3, #122	; 0x7a
 8005c7c:	d111      	bne.n	8005ca2 <z_prf+0x506>
					*va_arg(vargs, ssize_t *) = count;
 8005c7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c80:	1d1a      	adds	r2, r3, #4
 8005c82:	920c      	str	r2, [sp, #48]	; 0x30
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	601c      	str	r4, [r3, #0]
					break;
 8005c88:	e592      	b.n	80057b0 <z_prf+0x14>
					*va_arg(vargs, char *) = count;
 8005c8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c8c:	1d1a      	adds	r2, r3, #4
 8005c8e:	920c      	str	r2, [sp, #48]	; 0x30
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	701c      	strb	r4, [r3, #0]
					break;
 8005c94:	e58c      	b.n	80057b0 <z_prf+0x14>
					*va_arg(vargs, long *) = count;
 8005c96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c98:	1d1a      	adds	r2, r3, #4
 8005c9a:	920c      	str	r2, [sp, #48]	; 0x30
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	601c      	str	r4, [r3, #0]
					break;
 8005ca0:	e586      	b.n	80057b0 <z_prf+0x14>
					*va_arg(vargs, int *) = count;
 8005ca2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ca4:	1d1a      	adds	r2, r3, #4
 8005ca6:	920c      	str	r2, [sp, #48]	; 0x30
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	601c      	str	r4, [r3, #0]
				continue;
 8005cac:	e580      	b.n	80057b0 <z_prf+0x14>
				val = (uintptr_t) va_arg(vargs, void *);
 8005cae:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005cb0:	1d0b      	adds	r3, r1, #4
 8005cb2:	930c      	str	r3, [sp, #48]	; 0x30
				clen = _to_hex(buf, val, true, 'x');
 8005cb4:	2378      	movs	r3, #120	; 0x78
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	6809      	ldr	r1, [r1, #0]
 8005cba:	a811      	add	r0, sp, #68	; 0x44
 8005cbc:	f014 fd0b 	bl	801a6d6 <_to_hex>
 8005cc0:	9008      	str	r0, [sp, #32]
				prefix = 2;
 8005cc2:	f04f 0802 	mov.w	r8, #2
			cptr = buf;
 8005cc6:	af11      	add	r7, sp, #68	; 0x44
				break;
 8005cc8:	e73a      	b.n	8005b40 <z_prf+0x3a4>
				cptr = va_arg(vargs, char *);
 8005cca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ccc:	1d1a      	adds	r2, r3, #4
 8005cce:	920c      	str	r2, [sp, #48]	; 0x30
 8005cd0:	681f      	ldr	r7, [r3, #0]
				if (precision < 0) {
 8005cd2:	f1bb 0f00 	cmp.w	fp, #0
 8005cd6:	db07      	blt.n	8005ce8 <z_prf+0x54c>
				for (clen = 0; clen < precision; clen++) {
 8005cd8:	2300      	movs	r3, #0
 8005cda:	459b      	cmp	fp, r3
 8005cdc:	dd07      	ble.n	8005cee <z_prf+0x552>
					if (cptr[clen] == '\0') {
 8005cde:	5cfa      	ldrb	r2, [r7, r3]
 8005ce0:	2a00      	cmp	r2, #0
 8005ce2:	d063      	beq.n	8005dac <z_prf+0x610>
				for (clen = 0; clen < precision; clen++) {
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	e7f8      	b.n	8005cda <z_prf+0x53e>
					precision = INT_MAX;
 8005ce8:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005cec:	e7f4      	b.n	8005cd8 <z_prf+0x53c>
 8005cee:	9308      	str	r3, [sp, #32]
			prefix = 0;
 8005cf0:	f04f 0800 	mov.w	r8, #0
				precision = 0;
 8005cf4:	46c3      	mov	fp, r8
 8005cf6:	e723      	b.n	8005b40 <z_prf+0x3a4>
				switch (i) {
 8005cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cfa:	2b6c      	cmp	r3, #108	; 0x6c
 8005cfc:	d006      	beq.n	8005d0c <z_prf+0x570>
 8005cfe:	2b7a      	cmp	r3, #122	; 0x7a
 8005d00:	d019      	beq.n	8005d36 <z_prf+0x59a>
					val = va_arg(vargs, unsigned int);
 8005d02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d04:	1d1a      	adds	r2, r3, #4
 8005d06:	920c      	str	r2, [sp, #48]	; 0x30
 8005d08:	6819      	ldr	r1, [r3, #0]
					break;
 8005d0a:	e003      	b.n	8005d14 <z_prf+0x578>
					val = va_arg(vargs, unsigned long);
 8005d0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d0e:	1d1a      	adds	r2, r3, #4
 8005d10:	920c      	str	r2, [sp, #48]	; 0x30
 8005d12:	6819      	ldr	r1, [r3, #0]
				if (c == 'o') {
 8005d14:	2f6f      	cmp	r7, #111	; 0x6f
 8005d16:	d013      	beq.n	8005d40 <z_prf+0x5a4>
				} else if (c == 'u') {
 8005d18:	2f75      	cmp	r7, #117	; 0x75
 8005d1a:	d01a      	beq.n	8005d52 <z_prf+0x5b6>
					clen = _to_hex(buf, val, falt, c);
 8005d1c:	463b      	mov	r3, r7
 8005d1e:	9f08      	ldr	r7, [sp, #32]
 8005d20:	463a      	mov	r2, r7
 8005d22:	a811      	add	r0, sp, #68	; 0x44
 8005d24:	f014 fcd7 	bl	801a6d6 <_to_hex>
 8005d28:	9008      	str	r0, [sp, #32]
					if (falt) {
 8005d2a:	2f00      	cmp	r7, #0
 8005d2c:	d143      	bne.n	8005db6 <z_prf+0x61a>
			prefix = 0;
 8005d2e:	f04f 0800 	mov.w	r8, #0
			cptr = buf;
 8005d32:	af11      	add	r7, sp, #68	; 0x44
 8005d34:	e704      	b.n	8005b40 <z_prf+0x3a4>
					val = va_arg(vargs, size_t);
 8005d36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d38:	1d1a      	adds	r2, r3, #4
 8005d3a:	920c      	str	r2, [sp, #48]	; 0x30
 8005d3c:	6819      	ldr	r1, [r3, #0]
					break;
 8005d3e:	e7e9      	b.n	8005d14 <z_prf+0x578>
					clen = _to_octal(buf, val, falt);
 8005d40:	9a08      	ldr	r2, [sp, #32]
 8005d42:	a811      	add	r0, sp, #68	; 0x44
 8005d44:	f014 fce1 	bl	801a70a <_to_octal>
 8005d48:	9008      	str	r0, [sp, #32]
			prefix = 0;
 8005d4a:	f04f 0800 	mov.w	r8, #0
			cptr = buf;
 8005d4e:	af11      	add	r7, sp, #68	; 0x44
 8005d50:	e6f6      	b.n	8005b40 <z_prf+0x3a4>
					clen = _to_udec(buf, val);
 8005d52:	a811      	add	r0, sp, #68	; 0x44
 8005d54:	f014 fcea 	bl	801a72c <_to_udec>
 8005d58:	9008      	str	r0, [sp, #32]
			prefix = 0;
 8005d5a:	f04f 0800 	mov.w	r8, #0
			cptr = buf;
 8005d5e:	af11      	add	r7, sp, #68	; 0x44
 8005d60:	e6ee      	b.n	8005b40 <z_prf+0x3a4>
				PUTC('%');
 8005d62:	4629      	mov	r1, r5
 8005d64:	2025      	movs	r0, #37	; 0x25
 8005d66:	47b0      	blx	r6
 8005d68:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005d6c:	f000 80e1 	beq.w	8005f32 <z_prf+0x796>
				count++;
 8005d70:	3401      	adds	r4, #1
				continue;
 8005d72:	e51d      	b.n	80057b0 <z_prf+0x14>
				PUTC('%');
 8005d74:	4629      	mov	r1, r5
 8005d76:	2025      	movs	r0, #37	; 0x25
 8005d78:	47b0      	blx	r6
 8005d7a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005d7e:	f000 80da 	beq.w	8005f36 <z_prf+0x79a>
				PUTC(c);
 8005d82:	4629      	mov	r1, r5
 8005d84:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005d86:	47b0      	blx	r6
 8005d88:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005d8c:	f000 80d5 	beq.w	8005f3a <z_prf+0x79e>
				count += 2;
 8005d90:	3402      	adds	r4, #2
				continue;
 8005d92:	e50d      	b.n	80057b0 <z_prf+0x14>
					prefix = 1;
 8005d94:	f04f 0801 	mov.w	r8, #1
			cptr = buf;
 8005d98:	af11      	add	r7, sp, #68	; 0x44
 8005d9a:	e6d1      	b.n	8005b40 <z_prf+0x3a4>
					prefix = 1;
 8005d9c:	f04f 0801 	mov.w	r8, #1
			cptr = buf;
 8005da0:	af11      	add	r7, sp, #68	; 0x44
 8005da2:	e6cd      	b.n	8005b40 <z_prf+0x3a4>
					prefix = 1;
 8005da4:	f04f 0801 	mov.w	r8, #1
			cptr = buf;
 8005da8:	af11      	add	r7, sp, #68	; 0x44
 8005daa:	e6c9      	b.n	8005b40 <z_prf+0x3a4>
 8005dac:	9308      	str	r3, [sp, #32]
			prefix = 0;
 8005dae:	f04f 0800 	mov.w	r8, #0
				precision = 0;
 8005db2:	46c3      	mov	fp, r8
 8005db4:	e6c4      	b.n	8005b40 <z_prf+0x3a4>
						prefix = 2;
 8005db6:	f04f 0802 	mov.w	r8, #2
			cptr = buf;
 8005dba:	af11      	add	r7, sp, #68	; 0x44
 8005dbc:	e6c0      	b.n	8005b40 <z_prf+0x3a4>
			} else if (fzero) {
 8005dbe:	f1b9 0f00 	cmp.w	r9, #0
 8005dc2:	d004      	beq.n	8005dce <z_prf+0x632>
				zero_head = width - clen;
 8005dc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dc6:	9a08      	ldr	r2, [sp, #32]
 8005dc8:	eba3 0902 	sub.w	r9, r3, r2
 8005dcc:	e6c0      	b.n	8005b50 <z_prf+0x3b4>
				zero_head = 0;
 8005dce:	f04f 0900 	mov.w	r9, #0
 8005dd2:	e6c1      	b.n	8005b58 <z_prf+0x3bc>
				zero_head = 0;
 8005dd4:	f04f 0900 	mov.w	r9, #0
 8005dd8:	e6be      	b.n	8005b58 <z_prf+0x3bc>
			clen -= prefix;
 8005dda:	9b08      	ldr	r3, [sp, #32]
 8005ddc:	eba3 0a08 	sub.w	sl, r3, r8
			count += prefix;
 8005de0:	eb04 0308 	add.w	r3, r4, r8
 8005de4:	461c      	mov	r4, r3
			while (prefix-- > 0) {
 8005de6:	4643      	mov	r3, r8
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005dee:	dd08      	ble.n	8005e02 <z_prf+0x666>
				PUTC(*cptr++);
 8005df0:	4629      	mov	r1, r5
 8005df2:	f817 0b01 	ldrb.w	r0, [r7], #1
 8005df6:	47b0      	blx	r6
 8005df8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005dfc:	d1f3      	bne.n	8005de6 <z_prf+0x64a>
 8005dfe:	4604      	mov	r4, r0
 8005e00:	e4e3      	b.n	80057ca <z_prf+0x2e>
			count += zero_head;
 8005e02:	4623      	mov	r3, r4
 8005e04:	444b      	add	r3, r9
 8005e06:	4698      	mov	r8, r3
			while (zero_head-- > 0) {
 8005e08:	464b      	mov	r3, r9
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8005e10:	dd07      	ble.n	8005e22 <z_prf+0x686>
				PUTC('0');
 8005e12:	4629      	mov	r1, r5
 8005e14:	2030      	movs	r0, #48	; 0x30
 8005e16:	47b0      	blx	r6
 8005e18:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005e1c:	d1f4      	bne.n	8005e08 <z_prf+0x66c>
 8005e1e:	4604      	mov	r4, r0
 8005e20:	e4d3      	b.n	80057ca <z_prf+0x2e>
			count += clen;
 8005e22:	44d0      	add	r8, sl
			if (zero.predot) {
 8005e24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e26:	b933      	cbnz	r3, 8005e36 <z_prf+0x69a>
			if (zero.postdot) {
 8005e28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e2a:	bb1b      	cbnz	r3, 8005e74 <z_prf+0x6d8>
			if (zero.trail) {
 8005e2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d05c      	beq.n	8005eec <z_prf+0x750>
				c = *cptr;
 8005e32:	783b      	ldrb	r3, [r7, #0]
				while (isdigit((int)c) || c == '.') {
 8005e34:	e043      	b.n	8005ebe <z_prf+0x722>
				c = *cptr;
 8005e36:	7838      	ldrb	r0, [r7, #0]
 8005e38:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
				while (isdigit((int)c)) {
 8005e3c:	2b09      	cmp	r3, #9
 8005e3e:	d809      	bhi.n	8005e54 <z_prf+0x6b8>
					PUTC(c);
 8005e40:	4629      	mov	r1, r5
 8005e42:	47b0      	blx	r6
 8005e44:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005e48:	d079      	beq.n	8005f3e <z_prf+0x7a2>
					clen--;
 8005e4a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					c = *++cptr;
 8005e4e:	f817 0f01 	ldrb.w	r0, [r7, #1]!
 8005e52:	e7f1      	b.n	8005e38 <z_prf+0x69c>
				clen -= zero.predot;
 8005e54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e56:	ebaa 0a03 	sub.w	sl, sl, r3
				while (zero.predot-- > 0) {
 8005e5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e5c:	1e5a      	subs	r2, r3, #1
 8005e5e:	920e      	str	r2, [sp, #56]	; 0x38
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	dde1      	ble.n	8005e28 <z_prf+0x68c>
					PUTC('0');
 8005e64:	4629      	mov	r1, r5
 8005e66:	2030      	movs	r0, #48	; 0x30
 8005e68:	47b0      	blx	r6
 8005e6a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005e6e:	d1f4      	bne.n	8005e5a <z_prf+0x6be>
 8005e70:	4604      	mov	r4, r0
 8005e72:	e4aa      	b.n	80057ca <z_prf+0x2e>
					c = *cptr++;
 8005e74:	783c      	ldrb	r4, [r7, #0]
 8005e76:	3701      	adds	r7, #1
					PUTC(c);
 8005e78:	4629      	mov	r1, r5
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	47b0      	blx	r6
 8005e7e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005e82:	d05e      	beq.n	8005f42 <z_prf+0x7a6>
					clen--;
 8005e84:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				} while (c != '.');
 8005e88:	2c2e      	cmp	r4, #46	; 0x2e
 8005e8a:	d1f3      	bne.n	8005e74 <z_prf+0x6d8>
				clen -= zero.postdot;
 8005e8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e8e:	ebaa 0a03 	sub.w	sl, sl, r3
				while (zero.postdot-- > 0) {
 8005e92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e94:	1e5a      	subs	r2, r3, #1
 8005e96:	920f      	str	r2, [sp, #60]	; 0x3c
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	ddc7      	ble.n	8005e2c <z_prf+0x690>
					PUTC('0');
 8005e9c:	4629      	mov	r1, r5
 8005e9e:	2030      	movs	r0, #48	; 0x30
 8005ea0:	47b0      	blx	r6
 8005ea2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005ea6:	d1f4      	bne.n	8005e92 <z_prf+0x6f6>
 8005ea8:	4604      	mov	r4, r0
 8005eaa:	e48e      	b.n	80057ca <z_prf+0x2e>
					PUTC(c);
 8005eac:	4629      	mov	r1, r5
 8005eae:	47b0      	blx	r6
 8005eb0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005eb4:	d047      	beq.n	8005f46 <z_prf+0x7aa>
					clen--;
 8005eb6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					c = *++cptr;
 8005eba:	f817 3f01 	ldrb.w	r3, [r7, #1]!
				while (isdigit((int)c) || c == '.') {
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005ec4:	2a09      	cmp	r2, #9
 8005ec6:	d9f1      	bls.n	8005eac <z_prf+0x710>
 8005ec8:	2b2e      	cmp	r3, #46	; 0x2e
 8005eca:	d0ef      	beq.n	8005eac <z_prf+0x710>
				clen -= zero.trail;
 8005ecc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ece:	ebaa 0a03 	sub.w	sl, sl, r3
				while (zero.trail-- > 0) {
 8005ed2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ed4:	1e5a      	subs	r2, r3, #1
 8005ed6:	9210      	str	r2, [sp, #64]	; 0x40
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	dd07      	ble.n	8005eec <z_prf+0x750>
					PUTC('0');
 8005edc:	4629      	mov	r1, r5
 8005ede:	2030      	movs	r0, #48	; 0x30
 8005ee0:	47b0      	blx	r6
 8005ee2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005ee6:	d1f4      	bne.n	8005ed2 <z_prf+0x736>
 8005ee8:	4604      	mov	r4, r0
 8005eea:	e46e      	b.n	80057ca <z_prf+0x2e>
			while (clen-- > 0) {
 8005eec:	4653      	mov	r3, sl
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005ef4:	dd08      	ble.n	8005f08 <z_prf+0x76c>
				PUTC(*cptr++);
 8005ef6:	4629      	mov	r1, r5
 8005ef8:	f817 0b01 	ldrb.w	r0, [r7], #1
 8005efc:	47b0      	blx	r6
 8005efe:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005f02:	d1f3      	bne.n	8005eec <z_prf+0x750>
 8005f04:	4604      	mov	r4, r0
 8005f06:	e460      	b.n	80057ca <z_prf+0x2e>
			if (width > 0) {
 8005f08:	f1bb 0f00 	cmp.w	fp, #0
 8005f0c:	dc01      	bgt.n	8005f12 <z_prf+0x776>
			count += clen;
 8005f0e:	4644      	mov	r4, r8
 8005f10:	e44e      	b.n	80057b0 <z_prf+0x14>
				count += width;
 8005f12:	eb0b 0408 	add.w	r4, fp, r8
				while (width-- > 0) {
 8005f16:	465b      	mov	r3, fp
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005f1e:	f77f ac47 	ble.w	80057b0 <z_prf+0x14>
					PUTC(' ');
 8005f22:	4629      	mov	r1, r5
 8005f24:	2020      	movs	r0, #32
 8005f26:	47b0      	blx	r6
 8005f28:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005f2c:	d1f3      	bne.n	8005f16 <z_prf+0x77a>
 8005f2e:	4604      	mov	r4, r0
 8005f30:	e44b      	b.n	80057ca <z_prf+0x2e>
				PUTC('%');
 8005f32:	4604      	mov	r4, r0
 8005f34:	e449      	b.n	80057ca <z_prf+0x2e>
				PUTC('%');
 8005f36:	4604      	mov	r4, r0
 8005f38:	e447      	b.n	80057ca <z_prf+0x2e>
				PUTC(c);
 8005f3a:	4604      	mov	r4, r0
 8005f3c:	e445      	b.n	80057ca <z_prf+0x2e>
 8005f3e:	4604      	mov	r4, r0
 8005f40:	e443      	b.n	80057ca <z_prf+0x2e>
 8005f42:	4604      	mov	r4, r0
 8005f44:	e441      	b.n	80057ca <z_prf+0x2e>
 8005f46:	4604      	mov	r4, r0
 8005f48:	e43f      	b.n	80057ca <z_prf+0x2e>
 8005f4a:	bf00      	nop

08005f4c <stm32f3_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8005f4c:	f04f 0210 	mov.w	r2, #16
 8005f50:	f3ef 8311 	mrs	r3, BASEPRI
 8005f54:	f382 8811 	msr	BASEPRI, r2
 8005f58:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 8 MHz from HSI */
	SystemCoreClock = 8000000;
 8005f64:	4b02      	ldr	r3, [pc, #8]	; (8005f70 <stm32f3_init+0x24>)
 8005f66:	4a03      	ldr	r2, [pc, #12]	; (8005f74 <stm32f3_init+0x28>)
 8005f68:	601a      	str	r2, [r3, #0]

	return 0;
}
 8005f6a:	2000      	movs	r0, #0
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	20000cd0 	.word	0x20000cd0
 8005f74:	007a1200 	.word	0x007a1200

08005f78 <is_rodata>:
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
 8005f78:	4b05      	ldr	r3, [pc, #20]	; (8005f90 <is_rodata+0x18>)
 8005f7a:	4298      	cmp	r0, r3
 8005f7c:	d304      	bcc.n	8005f88 <is_rodata+0x10>
 8005f7e:	4b05      	ldr	r3, [pc, #20]	; (8005f94 <is_rodata+0x1c>)
 8005f80:	4298      	cmp	r0, r3
 8005f82:	d303      	bcc.n	8005f8c <is_rodata+0x14>
 8005f84:	2000      	movs	r0, #0
 8005f86:	4770      	bx	lr
 8005f88:	2000      	movs	r0, #0
 8005f8a:	4770      	bx	lr
 8005f8c:	2001      	movs	r0, #1
		((const char *)addr < (const char *)RO_END));
}
 8005f8e:	4770      	bx	lr
 8005f90:	080226d4 	.word	0x080226d4
 8005f94:	0802845c 	.word	0x0802845c

08005f98 <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
 8005f98:	b508      	push	{r3, lr}
	proc_tid = process_tid;
 8005f9a:	4b06      	ldr	r3, [pc, #24]	; (8005fb4 <thread_set+0x1c>)
 8005f9c:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 8005f9e:	b118      	cbz	r0, 8005fa8 <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
 8005fa0:	4b05      	ldr	r3, [pc, #20]	; (8005fb8 <thread_set+0x20>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
 8005fa4:	2b09      	cmp	r3, #9
 8005fa6:	dc00      	bgt.n	8005faa <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
 8005fa8:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
 8005faa:	4804      	ldr	r0, [pc, #16]	; (8005fbc <thread_set+0x24>)
 8005fac:	f012 fe4c 	bl	8018c48 <z_impl_k_sem_give>
}
 8005fb0:	e7fa      	b.n	8005fa8 <thread_set+0x10>
 8005fb2:	bf00      	nop
 8005fb4:	20003620 	.word	0x20003620
 8005fb8:	200035f0 	.word	0x200035f0
 8005fbc:	20001068 	.word	0x20001068

08005fc0 <log_process_thread_timer_expiry_fn>:
	__ASSERT_NO_MSG(false);
}
#endif /* !defined(CONFIG_USERSPACE) */

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
 8005fc0:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
 8005fc2:	4802      	ldr	r0, [pc, #8]	; (8005fcc <log_process_thread_timer_expiry_fn+0xc>)
 8005fc4:	f012 fe40 	bl	8018c48 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
 8005fc8:	bd08      	pop	{r3, pc}
 8005fca:	bf00      	nop
 8005fcc:	20001068 	.word	0x20001068

08005fd0 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
 8005fd0:	b530      	push	{r4, r5, lr}
 8005fd2:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	490f      	ldr	r1, [pc, #60]	; (8006014 <enable_logger+0x44>)
 8005fd8:	480f      	ldr	r0, [pc, #60]	; (8006018 <enable_logger+0x48>)
 8005fda:	f01c fa93 	bl	8022504 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8005fde:	4d0f      	ldr	r5, [pc, #60]	; (800601c <enable_logger+0x4c>)
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005fe8:	2400      	movs	r4, #0
 8005fea:	9404      	str	r4, [sp, #16]
 8005fec:	230e      	movs	r3, #14
 8005fee:	9303      	str	r3, [sp, #12]
 8005ff0:	9402      	str	r4, [sp, #8]
 8005ff2:	9401      	str	r4, [sp, #4]
 8005ff4:	9400      	str	r4, [sp, #0]
 8005ff6:	4b0a      	ldr	r3, [pc, #40]	; (8006020 <enable_logger+0x50>)
 8005ff8:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005ffc:	4909      	ldr	r1, [pc, #36]	; (8006024 <enable_logger+0x54>)
 8005ffe:	4628      	mov	r0, r5
 8006000:	f01c f927 	bl	8022252 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
 8006004:	4908      	ldr	r1, [pc, #32]	; (8006028 <enable_logger+0x58>)
 8006006:	4628      	mov	r0, r5
 8006008:	f01c f912 	bl	8022230 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
 800600c:	4620      	mov	r0, r4
 800600e:	b009      	add	sp, #36	; 0x24
 8006010:	bd30      	pop	{r4, r5, pc}
 8006012:	bf00      	nop
 8006014:	08005fc1 	.word	0x08005fc1
 8006018:	20001a68 	.word	0x20001a68
 800601c:	20001aa0 	.word	0x20001aa0
 8006020:	08006511 	.word	0x08006511
 8006024:	20006410 	.word	0x20006410
 8006028:	08025004 	.word	0x08025004

0800602c <log_core_init>:
{
 800602c:	b508      	push	{r3, lr}
		log_msg_pool_init();
 800602e:	f000 fc9b 	bl	8006968 <log_msg_pool_init>
		log_list_init(&list);
 8006032:	4808      	ldr	r0, [pc, #32]	; (8006054 <log_core_init+0x28>)
 8006034:	f014 fbe0 	bl	801a7f8 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
 8006038:	2306      	movs	r3, #6
 800603a:	2228      	movs	r2, #40	; 0x28
 800603c:	4906      	ldr	r1, [pc, #24]	; (8006058 <log_core_init+0x2c>)
 800603e:	4807      	ldr	r0, [pc, #28]	; (800605c <log_core_init+0x30>)
 8006040:	f01b fe82 	bl	8021d48 <k_mem_slab_init>
		timestamp_func = k_uptime_get_32;
 8006044:	4b06      	ldr	r3, [pc, #24]	; (8006060 <log_core_init+0x34>)
 8006046:	4a07      	ldr	r2, [pc, #28]	; (8006064 <log_core_init+0x38>)
 8006048:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
 800604a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800604e:	f000 fe9f 	bl	8006d90 <log_output_timestamp_freq_set>
}
 8006052:	bd08      	pop	{r3, pc}
 8006054:	200035fc 	.word	0x200035fc
 8006058:	20008844 	.word	0x20008844
 800605c:	20003604 	.word	0x20003604
 8006060:	200009b8 	.word	0x200009b8
 8006064:	0801a82d 	.word	0x0801a82d

08006068 <dropped_notify>:
{
 8006068:	b538      	push	{r3, r4, r5, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 800606a:	4b12      	ldr	r3, [pc, #72]	; (80060b4 <dropped_notify+0x4c>)
 800606c:	2400      	movs	r4, #0
 800606e:	f3bf 8f5b 	dmb	ish
 8006072:	e853 5f00 	ldrex	r5, [r3]
 8006076:	e843 4200 	strex	r2, r4, [r3]
 800607a:	2a00      	cmp	r2, #0
 800607c:	d1f9      	bne.n	8006072 <dropped_notify+0xa>
 800607e:	f3bf 8f5b 	dmb	ish
	for (int i = 0; i < log_backend_count_get(); i++) {
 8006082:	e000      	b.n	8006086 <dropped_notify+0x1e>
 8006084:	3401      	adds	r4, #1
 8006086:	4b0c      	ldr	r3, [pc, #48]	; (80060b8 <dropped_notify+0x50>)
 8006088:	4a0c      	ldr	r2, [pc, #48]	; (80060bc <dropped_notify+0x54>)
 800608a:	1a9b      	subs	r3, r3, r2
 800608c:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 8006090:	da0f      	bge.n	80060b2 <dropped_notify+0x4a>
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
 8006092:	480a      	ldr	r0, [pc, #40]	; (80060bc <dropped_notify+0x54>)
 8006094:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 8006098:	6843      	ldr	r3, [r0, #4]
 800609a:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
 800609c:	2b00      	cmp	r3, #0
 800609e:	d0f1      	beq.n	8006084 <dropped_notify+0x1c>
	if (backend->api->dropped != NULL) {
 80060a0:	0123      	lsls	r3, r4, #4
 80060a2:	4a06      	ldr	r2, [pc, #24]	; (80060bc <dropped_notify+0x54>)
 80060a4:	58d3      	ldr	r3, [r2, r3]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d0eb      	beq.n	8006084 <dropped_notify+0x1c>
		backend->api->dropped(backend, cnt);
 80060ac:	4629      	mov	r1, r5
 80060ae:	4798      	blx	r3
 80060b0:	e7e8      	b.n	8006084 <dropped_notify+0x1c>
}
 80060b2:	bd38      	pop	{r3, r4, r5, pc}
 80060b4:	200035f4 	.word	0x200035f4
 80060b8:	08022c78 	.word	0x08022c78
 80060bc:	08022c68 	.word	0x08022c68

080060c0 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 80060c0:	4b06      	ldr	r3, [pc, #24]	; (80060dc <log_dropped+0x1c>)
 80060c2:	f3bf 8f5b 	dmb	ish
 80060c6:	e853 2f00 	ldrex	r2, [r3]
 80060ca:	3201      	adds	r2, #1
 80060cc:	e843 2100 	strex	r1, r2, [r3]
 80060d0:	2900      	cmp	r1, #0
 80060d2:	d1f8      	bne.n	80060c6 <log_dropped+0x6>
 80060d4:	f3bf 8f5b 	dmb	ish
}
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	200035f4 	.word	0x200035f4

080060e0 <log_source_name_get>:
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
 80060e0:	4b05      	ldr	r3, [pc, #20]	; (80060f8 <log_source_name_get+0x18>)
 80060e2:	4a06      	ldr	r2, [pc, #24]	; (80060fc <log_source_name_get+0x1c>)
 80060e4:	1a9b      	subs	r3, r3, r2
 80060e6:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
 80060ea:	d202      	bcs.n	80060f2 <log_source_name_get+0x12>
 * @param source_id Source ID.
 * @return Name.
 */
static inline const char *log_name_get(uint32_t source_id)
{
	return __log_const_start[source_id].name;
 80060ec:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
 80060f0:	4770      	bx	lr
 80060f2:	2000      	movs	r0, #0
}
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	08022c68 	.word	0x08022c68
 80060fc:	08022b90 	.word	0x08022b90

08006100 <log_backend_enable>:
{
 8006100:	b508      	push	{r3, lr}
	id += backend - log_backend_get(0);
 8006102:	4b0b      	ldr	r3, [pc, #44]	; (8006130 <log_backend_enable+0x30>)
 8006104:	1ac3      	subs	r3, r0, r3
 8006106:	111b      	asrs	r3, r3, #4
 8006108:	3301      	adds	r3, #1
	backend->cb->id = id;
 800610a:	6842      	ldr	r2, [r0, #4]
 800610c:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
 800610e:	6843      	ldr	r3, [r0, #4]
 8006110:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
 8006112:	6843      	ldr	r3, [r0, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	715a      	strb	r2, [r3, #5]
	if (!backend_attached) {
 8006118:	4b06      	ldr	r3, [pc, #24]	; (8006134 <log_backend_enable+0x34>)
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	b11b      	cbz	r3, 8006126 <log_backend_enable+0x26>
	backend_attached = true;
 800611e:	4b05      	ldr	r3, [pc, #20]	; (8006134 <log_backend_enable+0x34>)
 8006120:	2201      	movs	r2, #1
 8006122:	701a      	strb	r2, [r3, #0]
}
 8006124:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
 8006126:	4804      	ldr	r0, [pc, #16]	; (8006138 <log_backend_enable+0x38>)
 8006128:	f012 fd8e 	bl	8018c48 <z_impl_k_sem_give>
}
 800612c:	e7f7      	b.n	800611e <log_backend_enable+0x1e>
 800612e:	bf00      	nop
 8006130:	08022c68 	.word	0x08022c68
 8006134:	20005969 	.word	0x20005969
 8006138:	20001068 	.word	0x20001068

0800613c <log_init>:
{
 800613c:	b538      	push	{r3, r4, r5, lr}
 800613e:	4b15      	ldr	r3, [pc, #84]	; (8006194 <log_init+0x58>)
 8006140:	f3bf 8f5b 	dmb	ish
 8006144:	e853 2f00 	ldrex	r2, [r3]
 8006148:	1c51      	adds	r1, r2, #1
 800614a:	e843 1000 	strex	r0, r1, [r3]
 800614e:	2800      	cmp	r0, #0
 8006150:	d1f8      	bne.n	8006144 <log_init+0x8>
 8006152:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
 8006156:	b9da      	cbnz	r2, 8006190 <log_init+0x54>
	for (i = 0; i < log_backend_count_get(); i++) {
 8006158:	2400      	movs	r4, #0
 800615a:	e005      	b.n	8006168 <log_init+0x2c>
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
 800615c:	2204      	movs	r2, #4
 800615e:	2100      	movs	r1, #0
 8006160:	4628      	mov	r0, r5
 8006162:	f7ff ffcd 	bl	8006100 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
 8006166:	3401      	adds	r4, #1
 8006168:	4b0b      	ldr	r3, [pc, #44]	; (8006198 <log_init+0x5c>)
 800616a:	4a0c      	ldr	r2, [pc, #48]	; (800619c <log_init+0x60>)
 800616c:	1a9b      	subs	r3, r3, r2
 800616e:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 8006172:	da0d      	bge.n	8006190 <log_init+0x54>
	return &__log_backends_start[idx];
 8006174:	4d09      	ldr	r5, [pc, #36]	; (800619c <log_init+0x60>)
 8006176:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
 800617a:	7b2b      	ldrb	r3, [r5, #12]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d0f2      	beq.n	8006166 <log_init+0x2a>
			if (backend->api->init != NULL) {
 8006180:	0123      	lsls	r3, r4, #4
 8006182:	4a06      	ldr	r2, [pc, #24]	; (800619c <log_init+0x60>)
 8006184:	58d3      	ldr	r3, [r2, r3]
 8006186:	695b      	ldr	r3, [r3, #20]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d0e7      	beq.n	800615c <log_init+0x20>
				backend->api->init();
 800618c:	4798      	blx	r3
 800618e:	e7e5      	b.n	800615c <log_init+0x20>
}
 8006190:	bd38      	pop	{r3, r4, r5, pc}
 8006192:	bf00      	nop
 8006194:	200035f8 	.word	0x200035f8
 8006198:	08022c78 	.word	0x08022c78
 800619c:	08022c68 	.word	0x08022c68

080061a0 <log_strdup>:
{
 80061a0:	b510      	push	{r4, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	4604      	mov	r4, r0
	    is_rodata(str) || _is_user_context()) {
 80061a6:	f7ff fee7 	bl	8005f78 <is_rodata>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
 80061aa:	bb10      	cbnz	r0, 80061f2 <log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
 80061ac:	2200      	movs	r2, #0
 80061ae:	2300      	movs	r3, #0
 80061b0:	a901      	add	r1, sp, #4
 80061b2:	4811      	ldr	r0, [pc, #68]	; (80061f8 <log_strdup+0x58>)
 80061b4:	f011 ff62 	bl	801807c <k_mem_slab_alloc>
	if (err != 0) {
 80061b8:	b108      	cbz	r0, 80061be <log_strdup+0x1e>
		return (char *)log_strdup_fail_msg;
 80061ba:	4c10      	ldr	r4, [pc, #64]	; (80061fc <log_strdup+0x5c>)
 80061bc:	e019      	b.n	80061f2 <log_strdup+0x52>
	(void)atomic_set(&dup->refcount, 1);
 80061be:	9b01      	ldr	r3, [sp, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80061c0:	2201      	movs	r2, #1
 80061c2:	f3bf 8f5b 	dmb	ish
 80061c6:	e853 1f00 	ldrex	r1, [r3]
 80061ca:	e843 2000 	strex	r0, r2, [r3]
 80061ce:	2800      	cmp	r0, #0
 80061d0:	d1f9      	bne.n	80061c6 <log_strdup+0x26>
 80061d2:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
 80061d6:	221f      	movs	r2, #31
 80061d8:	4621      	mov	r1, r4
 80061da:	9801      	ldr	r0, [sp, #4]
 80061dc:	3004      	adds	r0, #4
 80061de:	f016 faf9 	bl	801c7d4 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
 80061e2:	9c01      	ldr	r4, [sp, #4]
 80061e4:	237e      	movs	r3, #126	; 0x7e
 80061e6:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
 80061ea:	2300      	movs	r3, #0
 80061ec:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	return dup->buf;
 80061f0:	3404      	adds	r4, #4
}
 80061f2:	4620      	mov	r0, r4
 80061f4:	b002      	add	sp, #8
 80061f6:	bd10      	pop	{r4, pc}
 80061f8:	20003604 	.word	0x20003604
 80061fc:	0802500c 	.word	0x0802500c

08006200 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
 8006200:	b138      	cbz	r0, 8006212 <log_is_strdup+0x12>
 8006202:	4a07      	ldr	r2, [pc, #28]	; (8006220 <log_is_strdup+0x20>)
 8006204:	4290      	cmp	r0, r2
 8006206:	d306      	bcc.n	8006216 <log_is_strdup+0x16>
 8006208:	32f0      	adds	r2, #240	; 0xf0
 800620a:	4290      	cmp	r0, r2
 800620c:	d305      	bcc.n	800621a <log_is_strdup+0x1a>
 800620e:	2000      	movs	r0, #0
 8006210:	4770      	bx	lr
 8006212:	2000      	movs	r0, #0
 8006214:	4770      	bx	lr
 8006216:	2000      	movs	r0, #0
 8006218:	4770      	bx	lr
 800621a:	2001      	movs	r0, #1
}
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	20008844 	.word	0x20008844

08006224 <detect_missed_strdup>:
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 8006224:	7a03      	ldrb	r3, [r0, #8]
	if (!log_msg_is_std(msg)) {
 8006226:	f013 0f01 	tst.w	r3, #1
 800622a:	d000      	beq.n	800622e <detect_missed_strdup+0xa>
 800622c:	4770      	bx	lr
{
 800622e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006232:	b083      	sub	sp, #12
 8006234:	4606      	mov	r6, r0
	msg_str = log_msg_str_get(msg);
 8006236:	f014 fbde 	bl	801a9f6 <log_msg_str_get>
 800623a:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
 800623c:	4630      	mov	r0, r6
 800623e:	f014 fbc5 	bl	801a9cc <log_msg_nargs_get>
 8006242:	4601      	mov	r1, r0
 8006244:	4638      	mov	r0, r7
 8006246:	f014 faf9 	bl	801a83c <z_log_get_s_mask>
 800624a:	4605      	mov	r5, r0
	while (mask) {
 800624c:	e004      	b.n	8006258 <detect_missed_strdup+0x34>
		mask &= ~BIT(idx);
 800624e:	2301      	movs	r3, #1
 8006250:	fa03 f404 	lsl.w	r4, r3, r4
 8006254:	ea25 0504 	bic.w	r5, r5, r4
	while (mask) {
 8006258:	b36d      	cbz	r5, 80062b6 <detect_missed_strdup+0x92>
		idx = 31 - __builtin_clz(mask);
 800625a:	fab5 f485 	clz	r4, r5
 800625e:	f1c4 041f 	rsb	r4, r4, #31
		str = (const char *)log_msg_arg_get(msg, idx);
 8006262:	4621      	mov	r1, r4
 8006264:	4630      	mov	r0, r6
 8006266:	f014 fbb4 	bl	801a9d2 <log_msg_arg_get>
 800626a:	4681      	mov	r9, r0
		if (!is_rodata(str) && !log_is_strdup(str) &&
 800626c:	f7ff fe84 	bl	8005f78 <is_rodata>
 8006270:	2800      	cmp	r0, #0
 8006272:	d1ec      	bne.n	800624e <detect_missed_strdup+0x2a>
 8006274:	4648      	mov	r0, r9
 8006276:	f7ff ffc3 	bl	8006200 <log_is_strdup>
 800627a:	2800      	cmp	r0, #0
 800627c:	d1e7      	bne.n	800624e <detect_missed_strdup+0x2a>
 800627e:	4b0f      	ldr	r3, [pc, #60]	; (80062bc <detect_missed_strdup+0x98>)
 8006280:	4599      	cmp	r9, r3
 8006282:	d0e4      	beq.n	800624e <detect_missed_strdup+0x2a>
	return msg->hdr.ids.source_id;
 8006284:	8971      	ldrh	r1, [r6, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
 8006286:	0989      	lsrs	r1, r1, #6
 8006288:	f7ff ff2a 	bl	80060e0 <log_source_name_get>
 800628c:	4602      	mov	r2, r0
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
 800628e:	2301      	movs	r3, #1
 8006290:	f363 0802 	bfi	r8, r3, #0, #3
 8006294:	f36f 08c5 	bfc	r8, #3, #3
 8006298:	4b09      	ldr	r3, [pc, #36]	; (80062c0 <detect_missed_strdup+0x9c>)
 800629a:	490a      	ldr	r1, [pc, #40]	; (80062c4 <detect_missed_strdup+0xa0>)
 800629c:	1a5b      	subs	r3, r3, r1
 800629e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80062a2:	f363 188f 	bfi	r8, r3, #6, #10
 80062a6:	f8ad 8000 	strh.w	r8, [sp]
 80062aa:	463b      	mov	r3, r7
 80062ac:	4621      	mov	r1, r4
 80062ae:	4806      	ldr	r0, [pc, #24]	; (80062c8 <detect_missed_strdup+0xa4>)
 80062b0:	f000 f87a 	bl	80063a8 <log_3>
 80062b4:	e7cb      	b.n	800624e <detect_missed_strdup+0x2a>
}
 80062b6:	b003      	add	sp, #12
 80062b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062bc:	0802500c 	.word	0x0802500c
 80062c0:	08022c10 	.word	0x08022c10
 80062c4:	08022b90 	.word	0x08022b90
 80062c8:	08025028 	.word	0x08025028

080062cc <msg_process>:
{
 80062cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ce:	4606      	mov	r6, r0
	if (!bypass) {
 80062d0:	bb19      	cbnz	r1, 800631a <msg_process+0x4e>
		    !panic_mode) {
 80062d2:	4b14      	ldr	r3, [pc, #80]	; (8006324 <msg_process+0x58>)
 80062d4:	781b      	ldrb	r3, [r3, #0]
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
 80062d6:	b10b      	cbz	r3, 80062dc <msg_process+0x10>
{
 80062d8:	2400      	movs	r4, #0
 80062da:	e003      	b.n	80062e4 <msg_process+0x18>
			detect_missed_strdup(msg);
 80062dc:	f7ff ffa2 	bl	8006224 <detect_missed_strdup>
 80062e0:	e7fa      	b.n	80062d8 <msg_process+0xc>
		for (int i = 0; i < log_backend_count_get(); i++) {
 80062e2:	3401      	adds	r4, #1
 80062e4:	4b10      	ldr	r3, [pc, #64]	; (8006328 <msg_process+0x5c>)
 80062e6:	4a11      	ldr	r2, [pc, #68]	; (800632c <msg_process+0x60>)
 80062e8:	1a9b      	subs	r3, r3, r2
 80062ea:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 80062ee:	da14      	bge.n	800631a <msg_process+0x4e>
 80062f0:	4d0e      	ldr	r5, [pc, #56]	; (800632c <msg_process+0x60>)
 80062f2:	eb05 1504 	add.w	r5, r5, r4, lsl #4
	return backend->cb->active;
 80062f6:	686b      	ldr	r3, [r5, #4]
 80062f8:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d0f1      	beq.n	80062e2 <msg_process+0x16>
			    msg_filter_check(backend, msg)) {
 80062fe:	4631      	mov	r1, r6
 8006300:	4628      	mov	r0, r5
 8006302:	f014 fa91 	bl	801a828 <msg_filter_check>
			if (log_backend_is_active(backend) &&
 8006306:	2800      	cmp	r0, #0
 8006308:	d0eb      	beq.n	80062e2 <msg_process+0x16>
	backend->api->put(backend, msg);
 800630a:	0127      	lsls	r7, r4, #4
 800630c:	4b07      	ldr	r3, [pc, #28]	; (800632c <msg_process+0x60>)
 800630e:	59db      	ldr	r3, [r3, r7]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4631      	mov	r1, r6
 8006314:	4628      	mov	r0, r5
 8006316:	4798      	blx	r3
}
 8006318:	e7e3      	b.n	80062e2 <msg_process+0x16>
	log_msg_put(msg);
 800631a:	4630      	mov	r0, r6
 800631c:	f014 fb6d 	bl	801a9fa <log_msg_put>
}
 8006320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006322:	bf00      	nop
 8006324:	2000596a 	.word	0x2000596a
 8006328:	08022c78 	.word	0x08022c78
 800632c:	08022c68 	.word	0x08022c68

08006330 <z_impl_log_process>:
{
 8006330:	b538      	push	{r3, r4, r5, lr}
 8006332:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
 8006334:	4b18      	ldr	r3, [pc, #96]	; (8006398 <z_impl_log_process+0x68>)
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	b903      	cbnz	r3, 800633c <z_impl_log_process+0xc>
 800633a:	b340      	cbz	r0, 800638e <z_impl_log_process+0x5e>
	__asm__ volatile(
 800633c:	f04f 0310 	mov.w	r3, #16
 8006340:	f3ef 8511 	mrs	r5, BASEPRI
 8006344:	f383 8811 	msr	BASEPRI, r3
 8006348:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
 800634c:	4813      	ldr	r0, [pc, #76]	; (800639c <z_impl_log_process+0x6c>)
 800634e:	f014 fa63 	bl	801a818 <log_list_head_get>
	__asm__ volatile(
 8006352:	f385 8811 	msr	BASEPRI, r5
 8006356:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
 800635a:	b170      	cbz	r0, 800637a <z_impl_log_process+0x4a>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 800635c:	4b10      	ldr	r3, [pc, #64]	; (80063a0 <z_impl_log_process+0x70>)
 800635e:	f3bf 8f5b 	dmb	ish
 8006362:	e853 2f00 	ldrex	r2, [r3]
 8006366:	3a01      	subs	r2, #1
 8006368:	e843 2100 	strex	r1, r2, [r3]
 800636c:	2900      	cmp	r1, #0
 800636e:	d1f8      	bne.n	8006362 <z_impl_log_process+0x32>
 8006370:	f3bf 8f5b 	dmb	ish
		msg_process(msg, bypass);
 8006374:	4621      	mov	r1, r4
 8006376:	f7ff ffa9 	bl	80062cc <msg_process>
	if (!bypass && dropped_cnt) {
 800637a:	b914      	cbnz	r4, 8006382 <z_impl_log_process+0x52>
 800637c:	4b09      	ldr	r3, [pc, #36]	; (80063a4 <z_impl_log_process+0x74>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	b933      	cbnz	r3, 8006390 <z_impl_log_process+0x60>
	return (log_list_head_peek(&list) != NULL);
 8006382:	4806      	ldr	r0, [pc, #24]	; (800639c <z_impl_log_process+0x6c>)
 8006384:	f014 fa46 	bl	801a814 <log_list_head_peek>
 8006388:	3800      	subs	r0, #0
 800638a:	bf18      	it	ne
 800638c:	2001      	movne	r0, #1
}
 800638e:	bd38      	pop	{r3, r4, r5, pc}
		dropped_notify();
 8006390:	f7ff fe6a 	bl	8006068 <dropped_notify>
 8006394:	e7f5      	b.n	8006382 <z_impl_log_process+0x52>
 8006396:	bf00      	nop
 8006398:	20005969 	.word	0x20005969
 800639c:	200035fc 	.word	0x200035fc
 80063a0:	200035f0 	.word	0x200035f0
 80063a4:	200035f4 	.word	0x200035f4

080063a8 <log_3>:
{
 80063a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063ac:	b082      	sub	sp, #8
 80063ae:	4680      	mov	r8, r0
 80063b0:	460f      	mov	r7, r1
 80063b2:	4616      	mov	r6, r2
 80063b4:	461d      	mov	r5, r3
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 80063b6:	f000 fafb 	bl	80069b0 <log_msg_chunk_alloc>

	if (msg != NULL) {
 80063ba:	4604      	mov	r4, r0
 80063bc:	b140      	cbz	r0, 80063d0 <log_3+0x28>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
 80063be:	2301      	movs	r3, #1
 80063c0:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 80063c2:	2200      	movs	r2, #0
 80063c4:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
 80063c6:	f04f 0300 	mov.w	r3, #0
 80063ca:	f362 0300 	bfi	r3, r2, #0, #1
 80063ce:	7203      	strb	r3, [r0, #8]
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
 80063d0:	b14c      	cbz	r4, 80063e6 <log_3+0x3e>
		msg->str = str;
 80063d2:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 3U;
 80063d6:	7a63      	ldrb	r3, [r4, #9]
 80063d8:	2203      	movs	r2, #3
 80063da:	f362 1307 	bfi	r3, r2, #4, #4
 80063de:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
 80063e0:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
 80063e2:	61a6      	str	r6, [r4, #24]
		msg->payload.single.args[2] = arg3;
 80063e4:	61e5      	str	r5, [r4, #28]
		if (msg == NULL) {
 80063e6:	2c00      	cmp	r4, #0
 80063e8:	d030      	beq.n	800644c <log_3+0xa4>
	msg->hdr.ids = src_level;
 80063ea:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80063ee:	8163      	strh	r3, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
 80063f0:	4b2a      	ldr	r3, [pc, #168]	; (800649c <log_3+0xf4>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4798      	blx	r3
 80063f6:	60e0      	str	r0, [r4, #12]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 80063f8:	4b29      	ldr	r3, [pc, #164]	; (80064a0 <log_3+0xf8>)
 80063fa:	f3bf 8f5b 	dmb	ish
 80063fe:	e853 2f00 	ldrex	r2, [r3]
 8006402:	3201      	adds	r2, #1
 8006404:	e843 2100 	strex	r1, r2, [r3]
 8006408:	2900      	cmp	r1, #0
 800640a:	d1f8      	bne.n	80063fe <log_3+0x56>
 800640c:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
 8006410:	f04f 0310 	mov.w	r3, #16
 8006414:	f3ef 8511 	mrs	r5, BASEPRI
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 8006420:	4621      	mov	r1, r4
 8006422:	4820      	ldr	r0, [pc, #128]	; (80064a4 <log_3+0xfc>)
 8006424:	f014 f9ec 	bl	801a800 <log_list_add_tail>
	__asm__ volatile(
 8006428:	f385 8811 	msr	BASEPRI, r5
 800642c:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
 8006430:	4b1d      	ldr	r3, [pc, #116]	; (80064a8 <log_3+0x100>)
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	b96b      	cbnz	r3, 8006452 <log_3+0xaa>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 8006436:	4b1d      	ldr	r3, [pc, #116]	; (80064ac <log_3+0x104>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	b11b      	cbz	r3, 8006444 <log_3+0x9c>
 800643c:	4a18      	ldr	r2, [pc, #96]	; (80064a0 <log_3+0xf8>)
 800643e:	6812      	ldr	r2, [r2, #0]
 8006440:	2a01      	cmp	r2, #1
 8006442:	d016      	beq.n	8006472 <log_3+0xca>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 8006444:	4a16      	ldr	r2, [pc, #88]	; (80064a0 <log_3+0xf8>)
 8006446:	6812      	ldr	r2, [r2, #0]
 8006448:	2a0a      	cmp	r2, #10
 800644a:	d01d      	beq.n	8006488 <log_3+0xe0>
}
 800644c:	b002      	add	sp, #8
 800644e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
 8006452:	f04f 0310 	mov.w	r3, #16
 8006456:	f3ef 8411 	mrs	r4, BASEPRI
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
 8006462:	2000      	movs	r0, #0
 8006464:	f7ff ff64 	bl	8006330 <z_impl_log_process>
	__asm__ volatile(
 8006468:	f384 8811 	msr	BASEPRI, r4
 800646c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 8006470:	e7ec      	b.n	800644c <log_3+0xa4>
	z_impl_k_timer_start(timer, duration, period);
 8006472:	2200      	movs	r2, #0
 8006474:	2300      	movs	r3, #0
 8006476:	e9cd 2300 	strd	r2, r3, [sp]
 800647a:	f242 7210 	movw	r2, #10000	; 0x2710
 800647e:	2300      	movs	r3, #0
 8006480:	480b      	ldr	r0, [pc, #44]	; (80064b0 <log_3+0x108>)
 8006482:	f012 fed1 	bl	8019228 <z_impl_k_timer_start>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 8006486:	e7e1      	b.n	800644c <log_3+0xa4>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 8006488:	2b00      	cmp	r3, #0
 800648a:	d0df      	beq.n	800644c <log_3+0xa4>
	z_impl_k_timer_stop(timer);
 800648c:	4808      	ldr	r0, [pc, #32]	; (80064b0 <log_3+0x108>)
 800648e:	f01c f845 	bl	802251c <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 8006492:	4808      	ldr	r0, [pc, #32]	; (80064b4 <log_3+0x10c>)
 8006494:	f012 fbd8 	bl	8018c48 <z_impl_k_sem_give>
}
 8006498:	e7d8      	b.n	800644c <log_3+0xa4>
 800649a:	bf00      	nop
 800649c:	200009b8 	.word	0x200009b8
 80064a0:	200035f0 	.word	0x200035f0
 80064a4:	200035fc 	.word	0x200035fc
 80064a8:	2000596a 	.word	0x2000596a
 80064ac:	20003620 	.word	0x20003620
 80064b0:	20001a68 	.word	0x20001a68
 80064b4:	20001068 	.word	0x20001068

080064b8 <z_impl_log_panic>:
	if (panic_mode) {
 80064b8:	4b12      	ldr	r3, [pc, #72]	; (8006504 <z_impl_log_panic+0x4c>)
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	b103      	cbz	r3, 80064c0 <z_impl_log_panic+0x8>
 80064be:	4770      	bx	lr
{
 80064c0:	b510      	push	{r4, lr}
	log_init();
 80064c2:	f7ff fe3b 	bl	800613c <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
 80064c6:	2400      	movs	r4, #0
 80064c8:	e000      	b.n	80064cc <z_impl_log_panic+0x14>
 80064ca:	3401      	adds	r4, #1
 80064cc:	4b0e      	ldr	r3, [pc, #56]	; (8006508 <z_impl_log_panic+0x50>)
 80064ce:	4a0f      	ldr	r2, [pc, #60]	; (800650c <z_impl_log_panic+0x54>)
 80064d0:	1a9b      	subs	r3, r3, r2
 80064d2:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 80064d6:	da0c      	bge.n	80064f2 <z_impl_log_panic+0x3a>
	return &__log_backends_start[idx];
 80064d8:	480c      	ldr	r0, [pc, #48]	; (800650c <z_impl_log_panic+0x54>)
 80064da:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
 80064de:	6843      	ldr	r3, [r0, #4]
 80064e0:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d0f1      	beq.n	80064ca <z_impl_log_panic+0x12>
	backend->api->panic(backend);
 80064e6:	0123      	lsls	r3, r4, #4
 80064e8:	4a08      	ldr	r2, [pc, #32]	; (800650c <z_impl_log_panic+0x54>)
 80064ea:	58d3      	ldr	r3, [r2, r3]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	4798      	blx	r3
}
 80064f0:	e7eb      	b.n	80064ca <z_impl_log_panic+0x12>
 80064f2:	2000      	movs	r0, #0
 80064f4:	f7ff ff1c 	bl	8006330 <z_impl_log_process>
		while (log_process(false) == true) {
 80064f8:	2800      	cmp	r0, #0
 80064fa:	d1fa      	bne.n	80064f2 <z_impl_log_panic+0x3a>
	panic_mode = true;
 80064fc:	4b01      	ldr	r3, [pc, #4]	; (8006504 <z_impl_log_panic+0x4c>)
 80064fe:	2201      	movs	r2, #1
 8006500:	701a      	strb	r2, [r3, #0]
}
 8006502:	bd10      	pop	{r4, pc}
 8006504:	2000596a 	.word	0x2000596a
 8006508:	08022c78 	.word	0x08022c78
 800650c:	08022c68 	.word	0x08022c68

08006510 <log_process_thread_func>:
{
 8006510:	b508      	push	{r3, lr}
	log_init();
 8006512:	f7ff fe13 	bl	800613c <log_init>
	return z_impl_k_current_get();
 8006516:	f012 fb91 	bl	8018c3c <z_impl_k_current_get>
	thread_set(k_current_get());
 800651a:	f7ff fd3d 	bl	8005f98 <thread_set>
 800651e:	e006      	b.n	800652e <log_process_thread_func+0x1e>
	return z_impl_k_sem_take(sem, timeout);
 8006520:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006524:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006528:	4804      	ldr	r0, [pc, #16]	; (800653c <log_process_thread_func+0x2c>)
 800652a:	f012 fbb5 	bl	8018c98 <z_impl_k_sem_take>
 800652e:	2000      	movs	r0, #0
 8006530:	f7ff fefe 	bl	8006330 <z_impl_log_process>
		if (log_process(false) == false) {
 8006534:	2800      	cmp	r0, #0
 8006536:	d1fa      	bne.n	800652e <log_process_thread_func+0x1e>
 8006538:	e7f2      	b.n	8006520 <log_process_thread_func+0x10>
 800653a:	bf00      	nop
 800653c:	20001068 	.word	0x20001068

08006540 <log_1>:
{
 8006540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006542:	b083      	sub	sp, #12
 8006544:	4606      	mov	r6, r0
 8006546:	460d      	mov	r5, r1
 8006548:	4617      	mov	r7, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 800654a:	f000 fa31 	bl	80069b0 <log_msg_chunk_alloc>
	if (msg != NULL) {
 800654e:	4604      	mov	r4, r0
 8006550:	b140      	cbz	r0, 8006564 <log_1+0x24>
		msg->hdr.ref_cnt = 1;
 8006552:	2301      	movs	r3, #1
 8006554:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 8006556:	2100      	movs	r1, #0
 8006558:	8101      	strh	r1, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
 800655a:	f04f 0300 	mov.w	r3, #0
 800655e:	f361 0300 	bfi	r3, r1, #0, #1
 8006562:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
 8006564:	b134      	cbz	r4, 8006574 <log_1+0x34>
		msg->str = str;
 8006566:	6126      	str	r6, [r4, #16]
		msg->hdr.params.std.nargs = 1U;
 8006568:	7a63      	ldrb	r3, [r4, #9]
 800656a:	2201      	movs	r2, #1
 800656c:	f362 1307 	bfi	r3, r2, #4, #4
 8006570:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
 8006572:	6165      	str	r5, [r4, #20]
		if (msg == NULL) {
 8006574:	2c00      	cmp	r4, #0
 8006576:	d02e      	beq.n	80065d6 <log_1+0x96>
	msg->hdr.ids = src_level;
 8006578:	8167      	strh	r7, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
 800657a:	4b2a      	ldr	r3, [pc, #168]	; (8006624 <log_1+0xe4>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4798      	blx	r3
 8006580:	60e0      	str	r0, [r4, #12]
 8006582:	4b29      	ldr	r3, [pc, #164]	; (8006628 <log_1+0xe8>)
 8006584:	f3bf 8f5b 	dmb	ish
 8006588:	e853 2f00 	ldrex	r2, [r3]
 800658c:	3201      	adds	r2, #1
 800658e:	e843 2100 	strex	r1, r2, [r3]
 8006592:	2900      	cmp	r1, #0
 8006594:	d1f8      	bne.n	8006588 <log_1+0x48>
 8006596:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
 800659a:	f04f 0310 	mov.w	r3, #16
 800659e:	f3ef 8511 	mrs	r5, BASEPRI
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 80065aa:	4621      	mov	r1, r4
 80065ac:	481f      	ldr	r0, [pc, #124]	; (800662c <log_1+0xec>)
 80065ae:	f014 f927 	bl	801a800 <log_list_add_tail>
	__asm__ volatile(
 80065b2:	f385 8811 	msr	BASEPRI, r5
 80065b6:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
 80065ba:	4b1d      	ldr	r3, [pc, #116]	; (8006630 <log_1+0xf0>)
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	b963      	cbnz	r3, 80065da <log_1+0x9a>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 80065c0:	4b1c      	ldr	r3, [pc, #112]	; (8006634 <log_1+0xf4>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	b11b      	cbz	r3, 80065ce <log_1+0x8e>
 80065c6:	4a18      	ldr	r2, [pc, #96]	; (8006628 <log_1+0xe8>)
 80065c8:	6812      	ldr	r2, [r2, #0]
 80065ca:	2a01      	cmp	r2, #1
 80065cc:	d015      	beq.n	80065fa <log_1+0xba>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 80065ce:	4a16      	ldr	r2, [pc, #88]	; (8006628 <log_1+0xe8>)
 80065d0:	6812      	ldr	r2, [r2, #0]
 80065d2:	2a0a      	cmp	r2, #10
 80065d4:	d01c      	beq.n	8006610 <log_1+0xd0>
}
 80065d6:	b003      	add	sp, #12
 80065d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__asm__ volatile(
 80065da:	f04f 0310 	mov.w	r3, #16
 80065de:	f3ef 8411 	mrs	r4, BASEPRI
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	2000      	movs	r0, #0
 80065ec:	f7ff fea0 	bl	8006330 <z_impl_log_process>
	__asm__ volatile(
 80065f0:	f384 8811 	msr	BASEPRI, r4
 80065f4:	f3bf 8f6f 	isb	sy
}
 80065f8:	e7ed      	b.n	80065d6 <log_1+0x96>
	z_impl_k_timer_start(timer, duration, period);
 80065fa:	2200      	movs	r2, #0
 80065fc:	2300      	movs	r3, #0
 80065fe:	e9cd 2300 	strd	r2, r3, [sp]
 8006602:	f242 7210 	movw	r2, #10000	; 0x2710
 8006606:	2300      	movs	r3, #0
 8006608:	480b      	ldr	r0, [pc, #44]	; (8006638 <log_1+0xf8>)
 800660a:	f012 fe0d 	bl	8019228 <z_impl_k_timer_start>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 800660e:	e7e2      	b.n	80065d6 <log_1+0x96>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 8006610:	2b00      	cmp	r3, #0
 8006612:	d0e0      	beq.n	80065d6 <log_1+0x96>
	z_impl_k_timer_stop(timer);
 8006614:	4808      	ldr	r0, [pc, #32]	; (8006638 <log_1+0xf8>)
 8006616:	f01b ff81 	bl	802251c <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 800661a:	4808      	ldr	r0, [pc, #32]	; (800663c <log_1+0xfc>)
 800661c:	f012 fb14 	bl	8018c48 <z_impl_k_sem_give>
}
 8006620:	e7d9      	b.n	80065d6 <log_1+0x96>
 8006622:	bf00      	nop
 8006624:	200009b8 	.word	0x200009b8
 8006628:	200035f0 	.word	0x200035f0
 800662c:	200035fc 	.word	0x200035fc
 8006630:	2000596a 	.word	0x2000596a
 8006634:	20003620 	.word	0x20003620
 8006638:	20001a68 	.word	0x20001a68
 800663c:	20001068 	.word	0x20001068

08006640 <log_2>:
{
 8006640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006644:	b082      	sub	sp, #8
 8006646:	4607      	mov	r7, r0
 8006648:	460e      	mov	r6, r1
 800664a:	4615      	mov	r5, r2
 800664c:	4698      	mov	r8, r3
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 800664e:	f000 f9af 	bl	80069b0 <log_msg_chunk_alloc>
	if (msg != NULL) {
 8006652:	4604      	mov	r4, r0
 8006654:	b140      	cbz	r0, 8006668 <log_2+0x28>
		msg->hdr.ref_cnt = 1;
 8006656:	2301      	movs	r3, #1
 8006658:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 800665a:	2200      	movs	r2, #0
 800665c:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
 800665e:	f04f 0300 	mov.w	r3, #0
 8006662:	f362 0300 	bfi	r3, r2, #0, #1
 8006666:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
 8006668:	b13c      	cbz	r4, 800667a <log_2+0x3a>
		msg->str = str;
 800666a:	6127      	str	r7, [r4, #16]
		msg->hdr.params.std.nargs = 2U;
 800666c:	7a63      	ldrb	r3, [r4, #9]
 800666e:	2202      	movs	r2, #2
 8006670:	f362 1307 	bfi	r3, r2, #4, #4
 8006674:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
 8006676:	6166      	str	r6, [r4, #20]
		msg->payload.single.args[1] = arg2;
 8006678:	61a5      	str	r5, [r4, #24]
		if (msg == NULL) {
 800667a:	2c00      	cmp	r4, #0
 800667c:	d02f      	beq.n	80066de <log_2+0x9e>
	msg->hdr.ids = src_level;
 800667e:	f8a4 800a 	strh.w	r8, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
 8006682:	4b2a      	ldr	r3, [pc, #168]	; (800672c <log_2+0xec>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4798      	blx	r3
 8006688:	60e0      	str	r0, [r4, #12]
 800668a:	4b29      	ldr	r3, [pc, #164]	; (8006730 <log_2+0xf0>)
 800668c:	f3bf 8f5b 	dmb	ish
 8006690:	e853 2f00 	ldrex	r2, [r3]
 8006694:	3201      	adds	r2, #1
 8006696:	e843 2100 	strex	r1, r2, [r3]
 800669a:	2900      	cmp	r1, #0
 800669c:	d1f8      	bne.n	8006690 <log_2+0x50>
 800669e:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
 80066a2:	f04f 0310 	mov.w	r3, #16
 80066a6:	f3ef 8511 	mrs	r5, BASEPRI
 80066aa:	f383 8811 	msr	BASEPRI, r3
 80066ae:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 80066b2:	4621      	mov	r1, r4
 80066b4:	481f      	ldr	r0, [pc, #124]	; (8006734 <log_2+0xf4>)
 80066b6:	f014 f8a3 	bl	801a800 <log_list_add_tail>
	__asm__ volatile(
 80066ba:	f385 8811 	msr	BASEPRI, r5
 80066be:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
 80066c2:	4b1d      	ldr	r3, [pc, #116]	; (8006738 <log_2+0xf8>)
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	b96b      	cbnz	r3, 80066e4 <log_2+0xa4>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 80066c8:	4b1c      	ldr	r3, [pc, #112]	; (800673c <log_2+0xfc>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	b11b      	cbz	r3, 80066d6 <log_2+0x96>
 80066ce:	4a18      	ldr	r2, [pc, #96]	; (8006730 <log_2+0xf0>)
 80066d0:	6812      	ldr	r2, [r2, #0]
 80066d2:	2a01      	cmp	r2, #1
 80066d4:	d016      	beq.n	8006704 <log_2+0xc4>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 80066d6:	4a16      	ldr	r2, [pc, #88]	; (8006730 <log_2+0xf0>)
 80066d8:	6812      	ldr	r2, [r2, #0]
 80066da:	2a0a      	cmp	r2, #10
 80066dc:	d01d      	beq.n	800671a <log_2+0xda>
}
 80066de:	b002      	add	sp, #8
 80066e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
 80066e4:	f04f 0310 	mov.w	r3, #16
 80066e8:	f3ef 8411 	mrs	r4, BASEPRI
 80066ec:	f383 8811 	msr	BASEPRI, r3
 80066f0:	f3bf 8f6f 	isb	sy
 80066f4:	2000      	movs	r0, #0
 80066f6:	f7ff fe1b 	bl	8006330 <z_impl_log_process>
	__asm__ volatile(
 80066fa:	f384 8811 	msr	BASEPRI, r4
 80066fe:	f3bf 8f6f 	isb	sy
}
 8006702:	e7ec      	b.n	80066de <log_2+0x9e>
	z_impl_k_timer_start(timer, duration, period);
 8006704:	2200      	movs	r2, #0
 8006706:	2300      	movs	r3, #0
 8006708:	e9cd 2300 	strd	r2, r3, [sp]
 800670c:	f242 7210 	movw	r2, #10000	; 0x2710
 8006710:	2300      	movs	r3, #0
 8006712:	480b      	ldr	r0, [pc, #44]	; (8006740 <log_2+0x100>)
 8006714:	f012 fd88 	bl	8019228 <z_impl_k_timer_start>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 8006718:	e7e1      	b.n	80066de <log_2+0x9e>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 800671a:	2b00      	cmp	r3, #0
 800671c:	d0df      	beq.n	80066de <log_2+0x9e>
	z_impl_k_timer_stop(timer);
 800671e:	4808      	ldr	r0, [pc, #32]	; (8006740 <log_2+0x100>)
 8006720:	f01b fefc 	bl	802251c <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 8006724:	4807      	ldr	r0, [pc, #28]	; (8006744 <log_2+0x104>)
 8006726:	f012 fa8f 	bl	8018c48 <z_impl_k_sem_give>
}
 800672a:	e7d8      	b.n	80066de <log_2+0x9e>
 800672c:	200009b8 	.word	0x200009b8
 8006730:	200035f0 	.word	0x200035f0
 8006734:	200035fc 	.word	0x200035fc
 8006738:	2000596a 	.word	0x2000596a
 800673c:	20003620 	.word	0x20003620
 8006740:	20001a68 	.word	0x20001a68
 8006744:	20001068 	.word	0x20001068

08006748 <log_n>:
{
 8006748:	b530      	push	{r4, r5, lr}
 800674a:	b083      	sub	sp, #12
 800674c:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
 800674e:	f014 f998 	bl	801aa82 <log_msg_create_n>
		if (msg == NULL) {
 8006752:	2800      	cmp	r0, #0
 8006754:	d02f      	beq.n	80067b6 <log_n+0x6e>
 8006756:	4605      	mov	r5, r0
	msg->hdr.ids = src_level;
 8006758:	8144      	strh	r4, [r0, #10]
	msg->hdr.timestamp = timestamp_func();
 800675a:	4b2a      	ldr	r3, [pc, #168]	; (8006804 <log_n+0xbc>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4798      	blx	r3
 8006760:	60e8      	str	r0, [r5, #12]
 8006762:	4b29      	ldr	r3, [pc, #164]	; (8006808 <log_n+0xc0>)
 8006764:	f3bf 8f5b 	dmb	ish
 8006768:	e853 2f00 	ldrex	r2, [r3]
 800676c:	3201      	adds	r2, #1
 800676e:	e843 2100 	strex	r1, r2, [r3]
 8006772:	2900      	cmp	r1, #0
 8006774:	d1f8      	bne.n	8006768 <log_n+0x20>
 8006776:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
 800677a:	f04f 0310 	mov.w	r3, #16
 800677e:	f3ef 8411 	mrs	r4, BASEPRI
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 800678a:	4629      	mov	r1, r5
 800678c:	481f      	ldr	r0, [pc, #124]	; (800680c <log_n+0xc4>)
 800678e:	f014 f837 	bl	801a800 <log_list_add_tail>
	__asm__ volatile(
 8006792:	f384 8811 	msr	BASEPRI, r4
 8006796:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
 800679a:	4b1d      	ldr	r3, [pc, #116]	; (8006810 <log_n+0xc8>)
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	b963      	cbnz	r3, 80067ba <log_n+0x72>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 80067a0:	4b1c      	ldr	r3, [pc, #112]	; (8006814 <log_n+0xcc>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	b11b      	cbz	r3, 80067ae <log_n+0x66>
 80067a6:	4a18      	ldr	r2, [pc, #96]	; (8006808 <log_n+0xc0>)
 80067a8:	6812      	ldr	r2, [r2, #0]
 80067aa:	2a01      	cmp	r2, #1
 80067ac:	d015      	beq.n	80067da <log_n+0x92>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 80067ae:	4a16      	ldr	r2, [pc, #88]	; (8006808 <log_n+0xc0>)
 80067b0:	6812      	ldr	r2, [r2, #0]
 80067b2:	2a0a      	cmp	r2, #10
 80067b4:	d01c      	beq.n	80067f0 <log_n+0xa8>
}
 80067b6:	b003      	add	sp, #12
 80067b8:	bd30      	pop	{r4, r5, pc}
	__asm__ volatile(
 80067ba:	f04f 0310 	mov.w	r3, #16
 80067be:	f3ef 8411 	mrs	r4, BASEPRI
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	2000      	movs	r0, #0
 80067cc:	f7ff fdb0 	bl	8006330 <z_impl_log_process>
	__asm__ volatile(
 80067d0:	f384 8811 	msr	BASEPRI, r4
 80067d4:	f3bf 8f6f 	isb	sy
}
 80067d8:	e7ed      	b.n	80067b6 <log_n+0x6e>
	z_impl_k_timer_start(timer, duration, period);
 80067da:	2200      	movs	r2, #0
 80067dc:	2300      	movs	r3, #0
 80067de:	e9cd 2300 	strd	r2, r3, [sp]
 80067e2:	f242 7210 	movw	r2, #10000	; 0x2710
 80067e6:	2300      	movs	r3, #0
 80067e8:	480b      	ldr	r0, [pc, #44]	; (8006818 <log_n+0xd0>)
 80067ea:	f012 fd1d 	bl	8019228 <z_impl_k_timer_start>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 80067ee:	e7e2      	b.n	80067b6 <log_n+0x6e>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d0e0      	beq.n	80067b6 <log_n+0x6e>
	z_impl_k_timer_stop(timer);
 80067f4:	4808      	ldr	r0, [pc, #32]	; (8006818 <log_n+0xd0>)
 80067f6:	f01b fe91 	bl	802251c <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 80067fa:	4808      	ldr	r0, [pc, #32]	; (800681c <log_n+0xd4>)
 80067fc:	f012 fa24 	bl	8018c48 <z_impl_k_sem_give>
}
 8006800:	e7d9      	b.n	80067b6 <log_n+0x6e>
 8006802:	bf00      	nop
 8006804:	200009b8 	.word	0x200009b8
 8006808:	200035f0 	.word	0x200035f0
 800680c:	200035fc 	.word	0x200035fc
 8006810:	2000596a 	.word	0x2000596a
 8006814:	20003620 	.word	0x20003620
 8006818:	20001a68 	.word	0x20001a68
 800681c:	20001068 	.word	0x20001068

08006820 <log_0>:
{
 8006820:	b570      	push	{r4, r5, r6, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	4605      	mov	r5, r0
 8006826:	460e      	mov	r6, r1
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 8006828:	f000 f8c2 	bl	80069b0 <log_msg_chunk_alloc>
	if (msg != NULL) {
 800682c:	4604      	mov	r4, r0
 800682e:	b140      	cbz	r0, 8006842 <log_0+0x22>
		msg->hdr.ref_cnt = 1;
 8006830:	2301      	movs	r3, #1
 8006832:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 8006834:	2200      	movs	r2, #0
 8006836:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
 8006838:	f04f 0300 	mov.w	r3, #0
 800683c:	f362 0300 	bfi	r3, r2, #0, #1
 8006840:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
 8006842:	b104      	cbz	r4, 8006846 <log_0+0x26>
		msg->str = str;
 8006844:	6125      	str	r5, [r4, #16]
		if (msg == NULL) {
 8006846:	2c00      	cmp	r4, #0
 8006848:	d02e      	beq.n	80068a8 <log_0+0x88>
	msg->hdr.ids = src_level;
 800684a:	8166      	strh	r6, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
 800684c:	4b29      	ldr	r3, [pc, #164]	; (80068f4 <log_0+0xd4>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4798      	blx	r3
 8006852:	60e0      	str	r0, [r4, #12]
 8006854:	4b28      	ldr	r3, [pc, #160]	; (80068f8 <log_0+0xd8>)
 8006856:	f3bf 8f5b 	dmb	ish
 800685a:	e853 2f00 	ldrex	r2, [r3]
 800685e:	3201      	adds	r2, #1
 8006860:	e843 2100 	strex	r1, r2, [r3]
 8006864:	2900      	cmp	r1, #0
 8006866:	d1f8      	bne.n	800685a <log_0+0x3a>
 8006868:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
 800686c:	f04f 0310 	mov.w	r3, #16
 8006870:	f3ef 8511 	mrs	r5, BASEPRI
 8006874:	f383 8811 	msr	BASEPRI, r3
 8006878:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 800687c:	4621      	mov	r1, r4
 800687e:	481f      	ldr	r0, [pc, #124]	; (80068fc <log_0+0xdc>)
 8006880:	f013 ffbe 	bl	801a800 <log_list_add_tail>
	__asm__ volatile(
 8006884:	f385 8811 	msr	BASEPRI, r5
 8006888:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
 800688c:	4b1c      	ldr	r3, [pc, #112]	; (8006900 <log_0+0xe0>)
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	b963      	cbnz	r3, 80068ac <log_0+0x8c>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 8006892:	4b1c      	ldr	r3, [pc, #112]	; (8006904 <log_0+0xe4>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	b11b      	cbz	r3, 80068a0 <log_0+0x80>
 8006898:	4a17      	ldr	r2, [pc, #92]	; (80068f8 <log_0+0xd8>)
 800689a:	6812      	ldr	r2, [r2, #0]
 800689c:	2a01      	cmp	r2, #1
 800689e:	d015      	beq.n	80068cc <log_0+0xac>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 80068a0:	4a15      	ldr	r2, [pc, #84]	; (80068f8 <log_0+0xd8>)
 80068a2:	6812      	ldr	r2, [r2, #0]
 80068a4:	2a0a      	cmp	r2, #10
 80068a6:	d01c      	beq.n	80068e2 <log_0+0xc2>
}
 80068a8:	b002      	add	sp, #8
 80068aa:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
 80068ac:	f04f 0310 	mov.w	r3, #16
 80068b0:	f3ef 8411 	mrs	r4, BASEPRI
 80068b4:	f383 8811 	msr	BASEPRI, r3
 80068b8:	f3bf 8f6f 	isb	sy
 80068bc:	2000      	movs	r0, #0
 80068be:	f7ff fd37 	bl	8006330 <z_impl_log_process>
	__asm__ volatile(
 80068c2:	f384 8811 	msr	BASEPRI, r4
 80068c6:	f3bf 8f6f 	isb	sy
}
 80068ca:	e7ed      	b.n	80068a8 <log_0+0x88>
	z_impl_k_timer_start(timer, duration, period);
 80068cc:	2200      	movs	r2, #0
 80068ce:	2300      	movs	r3, #0
 80068d0:	e9cd 2300 	strd	r2, r3, [sp]
 80068d4:	f242 7210 	movw	r2, #10000	; 0x2710
 80068d8:	2300      	movs	r3, #0
 80068da:	480b      	ldr	r0, [pc, #44]	; (8006908 <log_0+0xe8>)
 80068dc:	f012 fca4 	bl	8019228 <z_impl_k_timer_start>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 80068e0:	e7e2      	b.n	80068a8 <log_0+0x88>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d0e0      	beq.n	80068a8 <log_0+0x88>
	z_impl_k_timer_stop(timer);
 80068e6:	4808      	ldr	r0, [pc, #32]	; (8006908 <log_0+0xe8>)
 80068e8:	f01b fe18 	bl	802251c <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 80068ec:	4807      	ldr	r0, [pc, #28]	; (800690c <log_0+0xec>)
 80068ee:	f012 f9ab 	bl	8018c48 <z_impl_k_sem_give>
}
 80068f2:	e7d9      	b.n	80068a8 <log_0+0x88>
 80068f4:	200009b8 	.word	0x200009b8
 80068f8:	200035f0 	.word	0x200035f0
 80068fc:	200035fc 	.word	0x200035fc
 8006900:	2000596a 	.word	0x2000596a
 8006904:	20003620 	.word	0x20003620
 8006908:	20001a68 	.word	0x20001a68
 800690c:	20001068 	.word	0x20001068

08006910 <log_free>:
{
 8006910:	b500      	push	{lr}
 8006912:	b083      	sub	sp, #12
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
 8006914:	3804      	subs	r0, #4
 8006916:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8006918:	f3bf 8f5b 	dmb	ish
 800691c:	e850 3f00 	ldrex	r3, [r0]
 8006920:	1e5a      	subs	r2, r3, #1
 8006922:	e840 2100 	strex	r1, r2, [r0]
 8006926:	2900      	cmp	r1, #0
 8006928:	d1f8      	bne.n	800691c <log_free+0xc>
 800692a:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
 800692e:	2b01      	cmp	r3, #1
 8006930:	d002      	beq.n	8006938 <log_free+0x28>
}
 8006932:	b003      	add	sp, #12
 8006934:	f85d fb04 	ldr.w	pc, [sp], #4
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
 8006938:	a901      	add	r1, sp, #4
 800693a:	4802      	ldr	r0, [pc, #8]	; (8006944 <log_free+0x34>)
 800693c:	f011 fbd4 	bl	80180e8 <k_mem_slab_free>
}
 8006940:	e7f7      	b.n	8006932 <log_free+0x22>
 8006942:	bf00      	nop
 8006944:	20003604 	.word	0x20003604

08006948 <cont_free>:
{
	atomic_inc(&msg->hdr.ref_cnt);
}

static void cont_free(struct log_msg_cont *cont)
{
 8006948:	b510      	push	{r4, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	9001      	str	r0, [sp, #4]
	struct log_msg_cont *next;

	while (cont != NULL) {
 800694e:	9b01      	ldr	r3, [sp, #4]
 8006950:	b133      	cbz	r3, 8006960 <cont_free+0x18>
		next = cont->next;
 8006952:	681c      	ldr	r4, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
 8006954:	a901      	add	r1, sp, #4
 8006956:	4803      	ldr	r0, [pc, #12]	; (8006964 <cont_free+0x1c>)
 8006958:	f011 fbc6 	bl	80180e8 <k_mem_slab_free>
		cont = next;
 800695c:	9401      	str	r4, [sp, #4]
 800695e:	e7f6      	b.n	800694e <cont_free+0x6>
	}
}
 8006960:	b002      	add	sp, #8
 8006962:	bd10      	pop	{r4, pc}
 8006964:	20003624 	.word	0x20003624

08006968 <log_msg_pool_init>:
{
 8006968:	b508      	push	{r3, lr}
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
 800696a:	2340      	movs	r3, #64	; 0x40
 800696c:	2220      	movs	r2, #32
 800696e:	4902      	ldr	r1, [pc, #8]	; (8006978 <log_msg_pool_init+0x10>)
 8006970:	4802      	ldr	r0, [pc, #8]	; (800697c <log_msg_pool_init+0x14>)
 8006972:	f01b f9e9 	bl	8021d48 <k_mem_slab_init>
}
 8006976:	bd08      	pop	{r3, pc}
 8006978:	20008934 	.word	0x20008934
 800697c:	20003624 	.word	0x20003624

08006980 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
 8006980:	b510      	push	{r4, lr}
 8006982:	b082      	sub	sp, #8
	union log_msg_chunk *msg = NULL;
 8006984:	2300      	movs	r3, #0
 8006986:	9301      	str	r3, [sp, #4]
 8006988:	2001      	movs	r0, #1
 800698a:	f7ff fcd1 	bl	8006330 <z_impl_log_process>
 800698e:	4604      	mov	r4, r0
	int err;

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
 8006990:	f7ff fb96 	bl	80060c0 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
 8006994:	2200      	movs	r2, #0
 8006996:	2300      	movs	r3, #0
 8006998:	a901      	add	r1, sp, #4
 800699a:	4804      	ldr	r0, [pc, #16]	; (80069ac <log_msg_no_space_handle+0x2c>)
 800699c:	f011 fb6e 	bl	801807c <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
 80069a0:	b108      	cbz	r0, 80069a6 <log_msg_no_space_handle+0x26>
 80069a2:	2c00      	cmp	r4, #0
 80069a4:	d1f0      	bne.n	8006988 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
 80069a6:	9801      	ldr	r0, [sp, #4]
 80069a8:	b002      	add	sp, #8
 80069aa:	bd10      	pop	{r4, pc}
 80069ac:	20003624 	.word	0x20003624

080069b0 <log_msg_chunk_alloc>:
{
 80069b0:	b500      	push	{lr}
 80069b2:	b083      	sub	sp, #12
	union log_msg_chunk *msg = NULL;
 80069b4:	2300      	movs	r3, #0
 80069b6:	9301      	str	r3, [sp, #4]
		   block_on_alloc()
 80069b8:	f013 ff61 	bl	801a87e <block_on_alloc>
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
 80069bc:	b150      	cbz	r0, 80069d4 <log_msg_chunk_alloc+0x24>
 80069be:	2200      	movs	r2, #0
 80069c0:	2300      	movs	r3, #0
 80069c2:	a901      	add	r1, sp, #4
 80069c4:	4807      	ldr	r0, [pc, #28]	; (80069e4 <log_msg_chunk_alloc+0x34>)
 80069c6:	f011 fb59 	bl	801807c <k_mem_slab_alloc>
	if (err != 0) {
 80069ca:	b930      	cbnz	r0, 80069da <log_msg_chunk_alloc+0x2a>
}
 80069cc:	9801      	ldr	r0, [sp, #4]
 80069ce:	b003      	add	sp, #12
 80069d0:	f85d fb04 	ldr.w	pc, [sp], #4
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
 80069d4:	2200      	movs	r2, #0
 80069d6:	2300      	movs	r3, #0
 80069d8:	e7f3      	b.n	80069c2 <log_msg_chunk_alloc+0x12>
		msg = log_msg_no_space_handle();
 80069da:	f7ff ffd1 	bl	8006980 <log_msg_no_space_handle>
 80069de:	9001      	str	r0, [sp, #4]
 80069e0:	e7f4      	b.n	80069cc <log_msg_chunk_alloc+0x1c>
 80069e2:	bf00      	nop
 80069e4:	20003624 	.word	0x20003624

080069e8 <msg_free>:
{
 80069e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069ea:	b083      	sub	sp, #12
 80069ec:	9001      	str	r0, [sp, #4]
	uint32_t nargs = log_msg_nargs_get(msg);
 80069ee:	4604      	mov	r4, r0
 80069f0:	f013 ffec 	bl	801a9cc <log_msg_nargs_get>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 80069f4:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg) && nargs) {
 80069f6:	f013 0f01 	tst.w	r3, #1
 80069fa:	d101      	bne.n	8006a00 <msg_free+0x18>
 80069fc:	4606      	mov	r6, r0
 80069fe:	bb50      	cbnz	r0, 8006a56 <msg_free+0x6e>
	if (msg->hdr.params.generic.ext == 1) {
 8006a00:	9b01      	ldr	r3, [sp, #4]
 8006a02:	7a1a      	ldrb	r2, [r3, #8]
 8006a04:	f012 0f02 	tst.w	r2, #2
 8006a08:	d128      	bne.n	8006a5c <msg_free+0x74>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
 8006a0a:	a901      	add	r1, sp, #4
 8006a0c:	4815      	ldr	r0, [pc, #84]	; (8006a64 <msg_free+0x7c>)
 8006a0e:	f011 fb6b 	bl	80180e8 <k_mem_slab_free>
}
 8006a12:	b003      	add	sp, #12
 8006a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
					smask = z_log_get_s_mask(
 8006a16:	9801      	ldr	r0, [sp, #4]
 8006a18:	f013 ffed 	bl	801a9f6 <log_msg_str_get>
 8006a1c:	4631      	mov	r1, r6
 8006a1e:	f013 ff0d 	bl	801a83c <z_log_get_s_mask>
					if (smask == 0) {
 8006a22:	4607      	mov	r7, r0
 8006a24:	b988      	cbnz	r0, 8006a4a <msg_free+0x62>
 8006a26:	e7eb      	b.n	8006a00 <msg_free+0x18>
					log_free(buf);
 8006a28:	4628      	mov	r0, r5
 8006a2a:	f7ff ff71 	bl	8006910 <log_free>
		for (i = 0; i < nargs; i++) {
 8006a2e:	3401      	adds	r4, #1
 8006a30:	42b4      	cmp	r4, r6
 8006a32:	d2e5      	bcs.n	8006a00 <msg_free+0x18>
			void *buf = (void *)log_msg_arg_get(msg, i);
 8006a34:	4621      	mov	r1, r4
 8006a36:	9801      	ldr	r0, [sp, #4]
 8006a38:	f013 ffcb 	bl	801a9d2 <log_msg_arg_get>
 8006a3c:	4605      	mov	r5, r0
			if (log_is_strdup(buf)) {
 8006a3e:	f7ff fbdf 	bl	8006200 <log_is_strdup>
 8006a42:	2800      	cmp	r0, #0
 8006a44:	d0f3      	beq.n	8006a2e <msg_free+0x46>
				if (smask == 0) {
 8006a46:	2f00      	cmp	r7, #0
 8006a48:	d0e5      	beq.n	8006a16 <msg_free+0x2e>
				if (smask & BIT(i)) {
 8006a4a:	fa27 f304 	lsr.w	r3, r7, r4
 8006a4e:	f013 0f01 	tst.w	r3, #1
 8006a52:	d0ec      	beq.n	8006a2e <msg_free+0x46>
 8006a54:	e7e8      	b.n	8006a28 <msg_free+0x40>
		uint32_t smask = 0;
 8006a56:	2700      	movs	r7, #0
		for (i = 0; i < nargs; i++) {
 8006a58:	463c      	mov	r4, r7
 8006a5a:	e7e9      	b.n	8006a30 <msg_free+0x48>
		cont_free(msg->payload.ext.next);
 8006a5c:	6958      	ldr	r0, [r3, #20]
 8006a5e:	f7ff ff73 	bl	8006948 <cont_free>
 8006a62:	e7d2      	b.n	8006a0a <msg_free+0x22>
 8006a64:	20003624 	.word	0x20003624

08006a68 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
 8006a68:	b40e      	push	{r1, r2, r3}
 8006a6a:	b500      	push	{lr}
 8006a6c:	b082      	sub	sp, #8
 8006a6e:	4601      	mov	r1, r0
 8006a70:	ab03      	add	r3, sp, #12
 8006a72:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
 8006a76:	9301      	str	r3, [sp, #4]
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
 8006a78:	4804      	ldr	r0, [pc, #16]	; (8006a8c <print_formatted+0x24>)
 8006a7a:	f013 f940 	bl	8019cfe <z_vprintk>
#endif
	va_end(args);

	return length;
}
 8006a7e:	2000      	movs	r0, #0
 8006a80:	b002      	add	sp, #8
 8006a82:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a86:	b003      	add	sp, #12
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	0801ae23 	.word	0x0801ae23

08006a90 <timestamp_print>:
	log_output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *log_output,
			   uint32_t flags, uint32_t timestamp)
{
 8006a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a92:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
 8006a94:	f011 0f44 	tst.w	r1, #68	; 0x44
 8006a98:	d005      	beq.n	8006aa6 <timestamp_print+0x16>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
 8006a9a:	4b1a      	ldr	r3, [pc, #104]	; (8006b04 <timestamp_print+0x74>)
 8006a9c:	681c      	ldr	r4, [r3, #0]
 8006a9e:	b934      	cbnz	r4, 8006aae <timestamp_print+0x1e>
			length = print_formatted(log_output,
						 "[%02d:%02d:%02d.%03d,%03d] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
 8006aa0:	2000      	movs	r0, #0
	}

	return length;
}
 8006aa2:	b005      	add	sp, #20
 8006aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		length = print_formatted(log_output, "[%08lu] ", timestamp);
 8006aa6:	4918      	ldr	r1, [pc, #96]	; (8006b08 <timestamp_print+0x78>)
 8006aa8:	f7ff ffde 	bl	8006a68 <print_formatted>
 8006aac:	e7f9      	b.n	8006aa2 <timestamp_print+0x12>
		timestamp /= timestamp_div;
 8006aae:	4b17      	ldr	r3, [pc, #92]	; (8006b0c <timestamp_print+0x7c>)
 8006ab0:	6819      	ldr	r1, [r3, #0]
 8006ab2:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
 8006ab6:	fbb1 f5f4 	udiv	r5, r1, r4
		hours = seconds / 3600U;
 8006aba:	4a15      	ldr	r2, [pc, #84]	; (8006b10 <timestamp_print+0x80>)
 8006abc:	fba2 3205 	umull	r3, r2, r2, r5
 8006ac0:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
 8006ac2:	f44f 6661 	mov.w	r6, #3600	; 0xe10
 8006ac6:	fb06 5612 	mls	r6, r6, r2, r5
		mins = seconds / 60U;
 8006aca:	4b12      	ldr	r3, [pc, #72]	; (8006b14 <timestamp_print+0x84>)
 8006acc:	fba3 7306 	umull	r7, r3, r3, r6
 8006ad0:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
 8006ad2:	fb04 1115 	mls	r1, r4, r5, r1
		ms = (remainder * 1000U) / freq;
 8006ad6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8006ada:	fb05 f101 	mul.w	r1, r5, r1
 8006ade:	fbb1 f7f4 	udiv	r7, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8006ae2:	fb07 1114 	mls	r1, r7, r4, r1
 8006ae6:	fb05 f101 	mul.w	r1, r5, r1
 8006aea:	fbb1 f4f4 	udiv	r4, r1, r4
			length = print_formatted(log_output,
 8006aee:	9402      	str	r4, [sp, #8]
 8006af0:	9701      	str	r7, [sp, #4]
 8006af2:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
 8006af6:	eba6 0181 	sub.w	r1, r6, r1, lsl #2
 8006afa:	9100      	str	r1, [sp, #0]
 8006afc:	4906      	ldr	r1, [pc, #24]	; (8006b18 <timestamp_print+0x88>)
 8006afe:	f7ff ffb3 	bl	8006a68 <print_formatted>
 8006b02:	e7ce      	b.n	8006aa2 <timestamp_print+0x12>
 8006b04:	20003640 	.word	0x20003640
 8006b08:	0802506c 	.word	0x0802506c
 8006b0c:	20003644 	.word	0x20003644
 8006b10:	91a2b3c5 	.word	0x91a2b3c5
 8006b14:	88888889 	.word	0x88888889
 8006b18:	08025078 	.word	0x08025078

08006b1c <color_print>:

static void color_print(const struct log_output *log_output,
			bool color, bool start, uint32_t level)
{
	if (color) {
 8006b1c:	b161      	cbz	r1, 8006b38 <color_print+0x1c>
{
 8006b1e:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
 8006b20:	b12a      	cbz	r2, 8006b2e <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
 8006b22:	4a06      	ldr	r2, [pc, #24]	; (8006b3c <color_print+0x20>)
 8006b24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006b28:	b912      	cbnz	r2, 8006b30 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
 8006b2a:	4a05      	ldr	r2, [pc, #20]	; (8006b40 <color_print+0x24>)
 8006b2c:	e000      	b.n	8006b30 <color_print+0x14>
 8006b2e:	4a04      	ldr	r2, [pc, #16]	; (8006b40 <color_print+0x24>)
		print_formatted(log_output, "%s", log_color);
 8006b30:	4904      	ldr	r1, [pc, #16]	; (8006b44 <color_print+0x28>)
 8006b32:	f7ff ff99 	bl	8006a68 <print_formatted>
	}
}
 8006b36:	bd08      	pop	{r3, pc}
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	080250e8 	.word	0x080250e8
 8006b40:	08025094 	.word	0x08025094
 8006b44:	08026648 	.word	0x08026648

08006b48 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 8006b48:	f011 0f10 	tst.w	r1, #16
 8006b4c:	d10b      	bne.n	8006b66 <newline_print+0x1e>
{
 8006b4e:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 8006b50:	f011 0f20 	tst.w	r1, #32
 8006b54:	d003      	beq.n	8006b5e <newline_print+0x16>
		print_formatted(ctx, "\n");
 8006b56:	4904      	ldr	r1, [pc, #16]	; (8006b68 <newline_print+0x20>)
 8006b58:	f7ff ff86 	bl	8006a68 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
 8006b5c:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
 8006b5e:	4903      	ldr	r1, [pc, #12]	; (8006b6c <newline_print+0x24>)
 8006b60:	f7ff ff82 	bl	8006a68 <print_formatted>
 8006b64:	e7fa      	b.n	8006b5c <newline_print+0x14>
 8006b66:	4770      	bx	lr
 8006b68:	0802509c 	.word	0x0802509c
 8006b6c:	080250a0 	.word	0x080250a0

08006b70 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *log_output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
 8006b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b74:	4605      	mov	r5, r0
 8006b76:	460f      	mov	r7, r1
 8006b78:	4616      	mov	r6, r2
 8006b7a:	4698      	mov	r8, r3
	newline_print(log_output, flags);
 8006b7c:	9906      	ldr	r1, [sp, #24]
 8006b7e:	f7ff ffe3 	bl	8006b48 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
 8006b82:	2400      	movs	r4, #0
 8006b84:	4544      	cmp	r4, r8
 8006b86:	da05      	bge.n	8006b94 <hexdump_line_print+0x24>
		print_formatted(log_output, " ");
 8006b88:	4923      	ldr	r1, [pc, #140]	; (8006c18 <hexdump_line_print+0xa8>)
 8006b8a:	4628      	mov	r0, r5
 8006b8c:	f7ff ff6c 	bl	8006a68 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 8006b90:	3401      	adds	r4, #1
 8006b92:	e7f7      	b.n	8006b84 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8006b94:	2400      	movs	r4, #0
 8006b96:	e009      	b.n	8006bac <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(log_output, " ");
 8006b98:	491f      	ldr	r1, [pc, #124]	; (8006c18 <hexdump_line_print+0xa8>)
 8006b9a:	4628      	mov	r0, r5
 8006b9c:	f7ff ff64 	bl	8006a68 <print_formatted>
 8006ba0:	e00b      	b.n	8006bba <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(log_output, "%02x ", data[i]);
		} else {
			print_formatted(log_output, "   ");
 8006ba2:	491e      	ldr	r1, [pc, #120]	; (8006c1c <hexdump_line_print+0xac>)
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	f7ff ff5f 	bl	8006a68 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8006baa:	3401      	adds	r4, #1
 8006bac:	2c0f      	cmp	r4, #15
 8006bae:	dc0c      	bgt.n	8006bca <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
 8006bb0:	2c00      	cmp	r4, #0
 8006bb2:	dd02      	ble.n	8006bba <hexdump_line_print+0x4a>
 8006bb4:	f014 0f07 	tst.w	r4, #7
 8006bb8:	d0ee      	beq.n	8006b98 <hexdump_line_print+0x28>
		if (i < length) {
 8006bba:	42b4      	cmp	r4, r6
 8006bbc:	d2f1      	bcs.n	8006ba2 <hexdump_line_print+0x32>
			print_formatted(log_output, "%02x ", data[i]);
 8006bbe:	5d3a      	ldrb	r2, [r7, r4]
 8006bc0:	4917      	ldr	r1, [pc, #92]	; (8006c20 <hexdump_line_print+0xb0>)
 8006bc2:	4628      	mov	r0, r5
 8006bc4:	f7ff ff50 	bl	8006a68 <print_formatted>
 8006bc8:	e7ef      	b.n	8006baa <hexdump_line_print+0x3a>
		}
	}

	print_formatted(log_output, "|");
 8006bca:	4916      	ldr	r1, [pc, #88]	; (8006c24 <hexdump_line_print+0xb4>)
 8006bcc:	4628      	mov	r0, r5
 8006bce:	f7ff ff4b 	bl	8006a68 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8006bd2:	2400      	movs	r4, #0
 8006bd4:	e009      	b.n	8006bea <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(log_output, " ");
 8006bd6:	4910      	ldr	r1, [pc, #64]	; (8006c18 <hexdump_line_print+0xa8>)
 8006bd8:	4628      	mov	r0, r5
 8006bda:	f7ff ff45 	bl	8006a68 <print_formatted>
 8006bde:	e00b      	b.n	8006bf8 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(log_output, "%c",
 8006be0:	4911      	ldr	r1, [pc, #68]	; (8006c28 <hexdump_line_print+0xb8>)
 8006be2:	4628      	mov	r0, r5
 8006be4:	f7ff ff40 	bl	8006a68 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8006be8:	3401      	adds	r4, #1
 8006bea:	2c0f      	cmp	r4, #15
 8006bec:	dc12      	bgt.n	8006c14 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
 8006bee:	2c00      	cmp	r4, #0
 8006bf0:	dd02      	ble.n	8006bf8 <hexdump_line_print+0x88>
 8006bf2:	f014 0f07 	tst.w	r4, #7
 8006bf6:	d0ee      	beq.n	8006bd6 <hexdump_line_print+0x66>
		if (i < length) {
 8006bf8:	42b4      	cmp	r4, r6
 8006bfa:	d206      	bcs.n	8006c0a <hexdump_line_print+0x9a>
			char c = (char)data[i];
 8006bfc:	5d3a      	ldrb	r2, [r7, r4]
	return (int)((((unsigned)c) >= ' ') &&
 8006bfe:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(log_output, "%c",
 8006c02:	2b5e      	cmp	r3, #94	; 0x5e
 8006c04:	d9ec      	bls.n	8006be0 <hexdump_line_print+0x70>
 8006c06:	222e      	movs	r2, #46	; 0x2e
 8006c08:	e7ea      	b.n	8006be0 <hexdump_line_print+0x70>
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(log_output, " ");
 8006c0a:	4903      	ldr	r1, [pc, #12]	; (8006c18 <hexdump_line_print+0xa8>)
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	f7ff ff2b 	bl	8006a68 <print_formatted>
 8006c12:	e7e9      	b.n	8006be8 <hexdump_line_print+0x78>
		}
	}
}
 8006c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c18:	080250c0 	.word	0x080250c0
 8006c1c:	080250ac 	.word	0x080250ac
 8006c20:	080250a4 	.word	0x080250a4
 8006c24:	080250b0 	.word	0x080250b0
 8006c28:	080250b4 	.word	0x080250b4

08006c2c <ids_print>:
{
 8006c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c2e:	4604      	mov	r4, r0
 8006c30:	4616      	mov	r6, r2
 8006c32:	461d      	mov	r5, r3
	if (level_on) {
 8006c34:	b949      	cbnz	r1, 8006c4a <ids_print+0x1e>
	int total = 0;
 8006c36:	2700      	movs	r7, #0
	total += print_formatted(log_output,
 8006c38:	b186      	cbz	r6, 8006c5c <ids_print+0x30>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	9a07      	ldr	r2, [sp, #28]
 8006c3e:	4093      	lsls	r3, r2
				(func_on &&
 8006c40:	f013 0f10 	tst.w	r3, #16
 8006c44:	d116      	bne.n	8006c74 <ids_print+0x48>
	total += print_formatted(log_output,
 8006c46:	4e0c      	ldr	r6, [pc, #48]	; (8006c78 <ids_print+0x4c>)
 8006c48:	e009      	b.n	8006c5e <ids_print+0x32>
		total += print_formatted(log_output, "<%s> ", severity[level]);
 8006c4a:	4b0c      	ldr	r3, [pc, #48]	; (8006c7c <ids_print+0x50>)
 8006c4c:	9a07      	ldr	r2, [sp, #28]
 8006c4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c52:	490b      	ldr	r1, [pc, #44]	; (8006c80 <ids_print+0x54>)
 8006c54:	f7ff ff08 	bl	8006a68 <print_formatted>
 8006c58:	4607      	mov	r7, r0
 8006c5a:	e7ed      	b.n	8006c38 <ids_print+0xc>
	total += print_formatted(log_output,
 8006c5c:	4e06      	ldr	r6, [pc, #24]	; (8006c78 <ids_print+0x4c>)
 8006c5e:	9906      	ldr	r1, [sp, #24]
 8006c60:	4628      	mov	r0, r5
 8006c62:	f7ff fa3d 	bl	80060e0 <log_source_name_get>
 8006c66:	4602      	mov	r2, r0
 8006c68:	4631      	mov	r1, r6
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	f7ff fefc 	bl	8006a68 <print_formatted>
}
 8006c70:	4438      	add	r0, r7
 8006c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	total += print_formatted(log_output,
 8006c74:	4e03      	ldr	r6, [pc, #12]	; (8006c84 <ids_print+0x58>)
 8006c76:	e7f2      	b.n	8006c5e <ids_print+0x32>
 8006c78:	08023f44 	.word	0x08023f44
 8006c7c:	08025124 	.word	0x08025124
 8006c80:	080250bc 	.word	0x080250bc
 8006c84:	080250b8 	.word	0x080250b8

08006c88 <hexdump_print>:

static void hexdump_print(struct log_msg *msg,
			  const struct log_output *log_output,
			  int prefix_offset, uint32_t flags)
{
 8006c88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c8c:	b089      	sub	sp, #36	; 0x24
 8006c8e:	4607      	mov	r7, r0
 8006c90:	460e      	mov	r6, r1
 8006c92:	4691      	mov	r9, r2
 8006c94:	4698      	mov	r8, r3
	uint32_t offset = 0U;
	uint8_t buf[HEXDUMP_BYTES_IN_LINE];
	size_t length;

	print_formatted(log_output, "%s", log_msg_str_get(msg));
 8006c96:	f013 feae 	bl	801a9f6 <log_msg_str_get>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	490e      	ldr	r1, [pc, #56]	; (8006cd8 <hexdump_print+0x50>)
 8006c9e:	4630      	mov	r0, r6
 8006ca0:	f7ff fee2 	bl	8006a68 <print_formatted>
	uint32_t offset = 0U;
 8006ca4:	2400      	movs	r4, #0

	do {
		length = sizeof(buf);
 8006ca6:	2510      	movs	r5, #16
 8006ca8:	9503      	str	r5, [sp, #12]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
 8006caa:	4623      	mov	r3, r4
 8006cac:	aa03      	add	r2, sp, #12
 8006cae:	eb0d 0105 	add.w	r1, sp, r5
 8006cb2:	4638      	mov	r0, r7
 8006cb4:	f013 fef9 	bl	801aaaa <log_msg_hexdump_data_get>

		if (length) {
 8006cb8:	9a03      	ldr	r2, [sp, #12]
 8006cba:	b152      	cbz	r2, 8006cd2 <hexdump_print+0x4a>
			hexdump_line_print(log_output, buf, length,
 8006cbc:	f8cd 8000 	str.w	r8, [sp]
 8006cc0:	464b      	mov	r3, r9
 8006cc2:	eb0d 0105 	add.w	r1, sp, r5
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	f7ff ff52 	bl	8006b70 <hexdump_line_print>
					   prefix_offset, flags);
			offset += length;
 8006ccc:	9d03      	ldr	r5, [sp, #12]
 8006cce:	442c      	add	r4, r5
		length = sizeof(buf);
 8006cd0:	e7e9      	b.n	8006ca6 <hexdump_print+0x1e>
		} else {
			break;
		}
	} while (true);
}
 8006cd2:	b009      	add	sp, #36	; 0x24
 8006cd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006cd8:	08026648 	.word	0x08026648

08006cdc <raw_string_print>:

static void raw_string_print(struct log_msg *msg,
			     const struct log_output *log_output)
{
 8006cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	4606      	mov	r6, r0
 8006ce2:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(log_output->size);

	size_t offset = 0;
	size_t length;
	bool eol = false;
 8006ce4:	2700      	movs	r7, #0
	size_t offset = 0;
 8006ce6:	463d      	mov	r5, r7
 8006ce8:	e00d      	b.n	8006d06 <raw_string_print+0x2a>
		/* Sting is stored in a hexdump message. */
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
		log_output->control_block->offset = length;

		if (length != 0) {
			eol = (log_output->buf[length - 1] == '\n');
 8006cea:	68a2      	ldr	r2, [r4, #8]
 8006cec:	4413      	add	r3, r2
 8006cee:	f813 7c01 	ldrb.w	r7, [r3, #-1]
 8006cf2:	2f0a      	cmp	r7, #10
 8006cf4:	bf14      	ite	ne
 8006cf6:	2700      	movne	r7, #0
 8006cf8:	2701      	moveq	r7, #1
		}

		log_output_flush(log_output);
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	f014 f884 	bl	801ae08 <log_output_flush>
		offset += length;
 8006d00:	9b01      	ldr	r3, [sp, #4]
 8006d02:	441d      	add	r5, r3
	} while (length > 0);
 8006d04:	b173      	cbz	r3, 8006d24 <raw_string_print+0x48>
		length = log_output->size;
 8006d06:	68e3      	ldr	r3, [r4, #12]
 8006d08:	9301      	str	r3, [sp, #4]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
 8006d0a:	462b      	mov	r3, r5
 8006d0c:	aa01      	add	r2, sp, #4
 8006d0e:	68a1      	ldr	r1, [r4, #8]
 8006d10:	4630      	mov	r0, r6
 8006d12:	f013 feca 	bl	801aaaa <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
 8006d16:	6863      	ldr	r3, [r4, #4]
 8006d18:	9a01      	ldr	r2, [sp, #4]
 8006d1a:	601a      	str	r2, [r3, #0]
		if (length != 0) {
 8006d1c:	9b01      	ldr	r3, [sp, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d0eb      	beq.n	8006cfa <raw_string_print+0x1e>
 8006d22:	e7e2      	b.n	8006cea <raw_string_print+0xe>

	if (eol) {
 8006d24:	b90f      	cbnz	r7, 8006d2a <raw_string_print+0x4e>
		print_formatted(log_output, "\r");
	}
}
 8006d26:	b003      	add	sp, #12
 8006d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(log_output, "\r");
 8006d2a:	4902      	ldr	r1, [pc, #8]	; (8006d34 <raw_string_print+0x58>)
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	f7ff fe9b 	bl	8006a68 <print_formatted>
}
 8006d32:	e7f8      	b.n	8006d26 <raw_string_print+0x4a>
 8006d34:	080250c4 	.word	0x080250c4

08006d38 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, uint32_t cnt)
{
 8006d38:	b570      	push	{r4, r5, r6, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
 8006d3e:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8006d40:	f242 730f 	movw	r3, #9999	; 0x270f
 8006d44:	428b      	cmp	r3, r1
 8006d46:	bf28      	it	cs
 8006d48:	460b      	movcs	r3, r1
 8006d4a:	4a0e      	ldr	r2, [pc, #56]	; (8006d84 <log_output_dropped_process+0x4c>)
 8006d4c:	2105      	movs	r1, #5
 8006d4e:	4668      	mov	r0, sp
 8006d50:	f013 f96e 	bl	801a030 <snprintk>
 8006d54:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     log_output->control_block->ctx);
 8006d56:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	220b      	movs	r2, #11
 8006d5c:	490a      	ldr	r1, [pc, #40]	; (8006d88 <log_output_dropped_process+0x50>)
 8006d5e:	4628      	mov	r0, r5
 8006d60:	f013 feab 	bl	801aaba <buffer_write>
	buffer_write(outf, buf, len, log_output->control_block->ctx);
 8006d64:	6863      	ldr	r3, [r4, #4]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	4632      	mov	r2, r6
 8006d6a:	4669      	mov	r1, sp
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	f013 fea4 	bl	801aaba <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     log_output->control_block->ctx);
 8006d72:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	221b      	movs	r2, #27
 8006d78:	4904      	ldr	r1, [pc, #16]	; (8006d8c <log_output_dropped_process+0x54>)
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	f013 fe9d 	bl	801aaba <buffer_write>
}
 8006d80:	b002      	add	sp, #8
 8006d82:	bd70      	pop	{r4, r5, r6, pc}
 8006d84:	080258dc 	.word	0x080258dc
 8006d88:	08025118 	.word	0x08025118
 8006d8c:	080250fc 	.word	0x080250fc

08006d90 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
 8006d90:	4b07      	ldr	r3, [pc, #28]	; (8006db0 <log_output_timestamp_freq_set+0x20>)
 8006d92:	2201      	movs	r2, #1
 8006d94:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 8006d96:	4b07      	ldr	r3, [pc, #28]	; (8006db4 <log_output_timestamp_freq_set+0x24>)
 8006d98:	4298      	cmp	r0, r3
 8006d9a:	d905      	bls.n	8006da8 <log_output_timestamp_freq_set+0x18>
		frequency /= 2U;
 8006d9c:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 8006d9e:	4a04      	ldr	r2, [pc, #16]	; (8006db0 <log_output_timestamp_freq_set+0x20>)
 8006da0:	6813      	ldr	r3, [r2, #0]
 8006da2:	005b      	lsls	r3, r3, #1
 8006da4:	6013      	str	r3, [r2, #0]
 8006da6:	e7f6      	b.n	8006d96 <log_output_timestamp_freq_set+0x6>
	}

	freq = frequency;
 8006da8:	4b03      	ldr	r3, [pc, #12]	; (8006db8 <log_output_timestamp_freq_set+0x28>)
 8006daa:	6018      	str	r0, [r3, #0]
}
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	20003644 	.word	0x20003644
 8006db4:	000f4240 	.word	0x000f4240
 8006db8:	20003640 	.word	0x20003640

08006dbc <char_out>:
#include <assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
 8006dbc:	b570      	push	{r4, r5, r6, lr}
 8006dbe:	4606      	mov	r6, r0
 8006dc0:	460d      	mov	r5, r1
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
 8006dc2:	2400      	movs	r4, #0
 8006dc4:	42ac      	cmp	r4, r5
 8006dc6:	d207      	bcs.n	8006dd8 <char_out+0x1c>
		uart_poll_out(uart_dev, data[i]);
 8006dc8:	4b04      	ldr	r3, [pc, #16]	; (8006ddc <char_out+0x20>)
 8006dca:	6818      	ldr	r0, [r3, #0]
 8006dcc:	5d31      	ldrb	r1, [r6, r4]
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
 8006dce:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
 8006dd4:	3401      	adds	r4, #1
 8006dd6:	e7f5      	b.n	8006dc4 <char_out+0x8>
	}

	return length;
}
 8006dd8:	4628      	mov	r0, r5
 8006dda:	bd70      	pop	{r4, r5, r6, pc}
 8006ddc:	2000365c 	.word	0x2000365c

08006de0 <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
 8006de0:	b508      	push	{r3, lr}
 8006de2:	4803      	ldr	r0, [pc, #12]	; (8006df0 <log_backend_uart_init+0x10>)
 8006de4:	f010 ff34 	bl	8017c50 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 8006de8:	4b02      	ldr	r3, [pc, #8]	; (8006df4 <log_backend_uart_init+0x14>)
 8006dea:	6018      	str	r0, [r3, #0]
	assert((void *)uart_dev);
}
 8006dec:	bd08      	pop	{r3, pc}
 8006dee:	bf00      	nop
 8006df0:	08024fc0 	.word	0x08024fc0
 8006df4:	2000365c 	.word	0x2000365c

08006df8 <panic>:

static void panic(struct log_backend const *const backend)
{
 8006df8:	b508      	push	{r3, lr}
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
 8006dfa:	4802      	ldr	r0, [pc, #8]	; (8006e04 <panic+0xc>)
 8006dfc:	f014 f804 	bl	801ae08 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
 8006e00:	bd08      	pop	{r3, pc}
 8006e02:	bf00      	nop
 8006e04:	08025164 	.word	0x08025164

08006e08 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
 8006e08:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, uint32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
 8006e0a:	4802      	ldr	r0, [pc, #8]	; (8006e14 <dropped+0xc>)
 8006e0c:	f7ff ff94 	bl	8006d38 <log_output_dropped_process>
	ARG_UNUSED(backend);

	log_backend_std_dropped(&log_output_uart, cnt);
}
 8006e10:	bd08      	pop	{r3, pc}
 8006e12:	bf00      	nop
 8006e14:	08025164 	.word	0x08025164

08006e18 <put>:
{
 8006e18:	b510      	push	{r4, lr}
 8006e1a:	460c      	mov	r4, r1
	log_msg_get(msg);
 8006e1c:	4608      	mov	r0, r1
 8006e1e:	f013 fdc8 	bl	801a9b2 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
 8006e22:	220f      	movs	r2, #15
 8006e24:	4621      	mov	r1, r4
 8006e26:	4803      	ldr	r0, [pc, #12]	; (8006e34 <put+0x1c>)
 8006e28:	f014 f817 	bl	801ae5a <log_output_msg_process>
	log_msg_put(msg);
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	f013 fde4 	bl	801a9fa <log_msg_put>
}
 8006e32:	bd10      	pop	{r4, pc}
 8006e34:	08025164 	.word	0x08025164

08006e38 <read_pnp_id>:

#if CONFIG_BT_DIS_PNP
static ssize_t read_pnp_id(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, void *buf,
			   uint16_t len, uint16_t offset)
{
 8006e38:	b510      	push	{r4, lr}
 8006e3a:	b084      	sub	sp, #16
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &dis_pnp_id,
 8006e3c:	2407      	movs	r4, #7
 8006e3e:	9402      	str	r4, [sp, #8]
 8006e40:	4c04      	ldr	r4, [pc, #16]	; (8006e54 <read_pnp_id+0x1c>)
 8006e42:	9401      	str	r4, [sp, #4]
 8006e44:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8006e48:	9400      	str	r4, [sp, #0]
 8006e4a:	f018 f845 	bl	801eed8 <bt_gatt_attr_read>
				 sizeof(dis_pnp_id));
}
 8006e4e:	b004      	add	sp, #16
 8006e50:	bd10      	pop	{r4, pc}
 8006e52:	bf00      	nop
 8006e54:	20000a00 	.word	0x20000a00

08006e58 <blvl_ccc_cfg_changed>:

static uint8_t battery_level = 100U;

static void blvl_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				       uint16_t value)
{
 8006e58:	b508      	push	{r3, lr}
	ARG_UNUSED(attr);

	bool notif_enabled = (value == BT_GATT_CCC_NOTIFY);

	LOG_INF("BAS Notifications %s", notif_enabled ? "enabled" : "disabled");
 8006e5a:	f04f 0200 	mov.w	r2, #0
 8006e5e:	2303      	movs	r3, #3
 8006e60:	f363 0202 	bfi	r2, r3, #0, #3
 8006e64:	f36f 02c5 	bfc	r2, #3, #3
 8006e68:	4b07      	ldr	r3, [pc, #28]	; (8006e88 <blvl_ccc_cfg_changed+0x30>)
 8006e6a:	4808      	ldr	r0, [pc, #32]	; (8006e8c <blvl_ccc_cfg_changed+0x34>)
 8006e6c:	1a1b      	subs	r3, r3, r0
 8006e6e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8006e72:	f363 128f 	bfi	r2, r3, #6, #10
 8006e76:	2901      	cmp	r1, #1
 8006e78:	d004      	beq.n	8006e84 <blvl_ccc_cfg_changed+0x2c>
 8006e7a:	4905      	ldr	r1, [pc, #20]	; (8006e90 <blvl_ccc_cfg_changed+0x38>)
 8006e7c:	4805      	ldr	r0, [pc, #20]	; (8006e94 <blvl_ccc_cfg_changed+0x3c>)
 8006e7e:	f7ff fb5f 	bl	8006540 <log_1>
}
 8006e82:	bd08      	pop	{r3, pc}
	LOG_INF("BAS Notifications %s", notif_enabled ? "enabled" : "disabled");
 8006e84:	4904      	ldr	r1, [pc, #16]	; (8006e98 <blvl_ccc_cfg_changed+0x40>)
 8006e86:	e7f9      	b.n	8006e7c <blvl_ccc_cfg_changed+0x24>
 8006e88:	08022b90 	.word	0x08022b90
 8006e8c:	08022b90 	.word	0x08022b90
 8006e90:	08025440 	.word	0x08025440
 8006e94:	08025224 	.word	0x08025224
 8006e98:	080253fc 	.word	0x080253fc

08006e9c <read_blvl>:

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
 8006e9c:	b510      	push	{r4, lr}
 8006e9e:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
 8006ea0:	4c07      	ldr	r4, [pc, #28]	; (8006ec0 <read_blvl+0x24>)
 8006ea2:	7824      	ldrb	r4, [r4, #0]
 8006ea4:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
 8006ea8:	2401      	movs	r4, #1
 8006eaa:	9402      	str	r4, [sp, #8]
 8006eac:	f10d 0417 	add.w	r4, sp, #23
 8006eb0:	9401      	str	r4, [sp, #4]
 8006eb2:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8006eb6:	9400      	str	r4, [sp, #0]
 8006eb8:	f018 f80e 	bl	801eed8 <bt_gatt_attr_read>
				 sizeof(lvl8));
}
 8006ebc:	b006      	add	sp, #24
 8006ebe:	bd10      	pop	{r4, pc}
 8006ec0:	20000ce4 	.word	0x20000ce4

08006ec4 <bt_bas_set_battery_level>:
{
	return battery_level;
}

int bt_bas_set_battery_level(uint8_t level)
{
 8006ec4:	b500      	push	{lr}
 8006ec6:	b089      	sub	sp, #36	; 0x24
 8006ec8:	f88d 0007 	strb.w	r0, [sp, #7]
	int rc;

	if (level > 100U) {
 8006ecc:	2864      	cmp	r0, #100	; 0x64
 8006ece:	d818      	bhi.n	8006f02 <bt_bas_set_battery_level+0x3e>
		return -EINVAL;
	}

	battery_level = level;
 8006ed0:	4b0e      	ldr	r3, [pc, #56]	; (8006f0c <bt_bas_set_battery_level+0x48>)
 8006ed2:	7018      	strb	r0, [r3, #0]
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
 8006ed4:	2218      	movs	r2, #24
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	a802      	add	r0, sp, #8
 8006eda:	f015 fd0d 	bl	801c8f8 <memset>

	params.attr = attr;
 8006ede:	4b0c      	ldr	r3, [pc, #48]	; (8006f10 <bt_bas_set_battery_level+0x4c>)
 8006ee0:	9303      	str	r3, [sp, #12]
	params.data = data;
 8006ee2:	f10d 0307 	add.w	r3, sp, #7
 8006ee6:	9304      	str	r3, [sp, #16]
	params.len = len;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	f8ad 3014 	strh.w	r3, [sp, #20]

	return bt_gatt_notify_cb(conn, &params);
 8006eee:	a902      	add	r1, sp, #8
 8006ef0:	2000      	movs	r0, #0
 8006ef2:	f00c ff4b 	bl	8013d8c <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &bas.attrs[1], &level, sizeof(level));

	return rc == -ENOTCONN ? 0 : rc;
 8006ef6:	f110 0f39 	cmn.w	r0, #57	; 0x39
 8006efa:	d005      	beq.n	8006f08 <bt_bas_set_battery_level+0x44>
}
 8006efc:	b009      	add	sp, #36	; 0x24
 8006efe:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
 8006f02:	f06f 0015 	mvn.w	r0, #21
 8006f06:	e7f9      	b.n	8006efc <bt_bas_set_battery_level+0x38>
	return rc == -ENOTCONN ? 0 : rc;
 8006f08:	2000      	movs	r0, #0
 8006f0a:	e7f7      	b.n	8006efc <bt_bas_set_battery_level+0x38>
 8006f0c:	20000ce4 	.word	0x20000ce4
 8006f10:	08025254 	.word	0x08025254

08006f14 <nvs_init>:
	}
	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
 8006f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f16:	b085      	sub	sp, #20
 8006f18:	4604      	mov	r4, r0
 8006f1a:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
 8006f1c:	3014      	adds	r0, #20
	return z_impl_k_mutex_init(mutex);
 8006f1e:	f01a ff35 	bl	8021d8c <z_impl_k_mutex_init>
 8006f22:	4628      	mov	r0, r5
 8006f24:	f010 fe94 	bl	8017c50 <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
 8006f28:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	d02a      	beq.n	8006f84 <nvs_init+0x70>
 */
__syscall const struct flash_parameters *flash_get_parameters(const struct device *dev);

static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
 8006f2e:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	4798      	blx	r3
		LOG_ERR("No valid flash device found");
		return -ENXIO;
	}

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
 8006f34:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
 8006f36:	2800      	cmp	r0, #0
 8006f38:	d038      	beq.n	8006fac <nvs_init+0x98>
		LOG_ERR("Could not obtain flash parameters");
		return -EINVAL;
	}

	write_block_size = flash_get_write_block_size(fs->flash_device);
 8006f3a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	const struct flash_driver_api *api =
 8006f3c:	6883      	ldr	r3, [r0, #8]
	return api->get_parameters(dev)->write_block_size;
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	4798      	blx	r3
 8006f42:	6803      	ldr	r3, [r0, #0]

	/* check that the write block size is supported */
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
 8006f44:	3b01      	subs	r3, #1
 8006f46:	2b1f      	cmp	r3, #31
 8006f48:	d844      	bhi.n	8006fd4 <nvs_init+0xc0>
		LOG_ERR("Unsupported write block size");
		return -EINVAL;
	}

	/* check that sector size is a multiple of pagesize */
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
 8006f4a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006f4c:	6821      	ldr	r1, [r4, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
 8006f4e:	aa01      	add	r2, sp, #4
 8006f50:	f019 fcce 	bl	80208f0 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
 8006f54:	2800      	cmp	r0, #0
 8006f56:	d151      	bne.n	8006ffc <nvs_init+0xe8>
		LOG_ERR("Unable to get page info");
		return -EINVAL;
	}
	if (!fs->sector_size || fs->sector_size % info.size) {
 8006f58:	89a3      	ldrh	r3, [r4, #12]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d062      	beq.n	8007024 <nvs_init+0x110>
 8006f5e:	9902      	ldr	r1, [sp, #8]
 8006f60:	fbb3 f2f1 	udiv	r2, r3, r1
 8006f64:	fb01 3312 	mls	r3, r1, r2, r3
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d15b      	bne.n	8007024 <nvs_init+0x110>
		LOG_ERR("Invalid sector size");
		return -EINVAL;
	}

	/* check the number of sectors, it should be at least 2 */
	if (fs->sector_count < 2) {
 8006f6c:	89e3      	ldrh	r3, [r4, #14]
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d96c      	bls.n	800704c <nvs_init+0x138>
		LOG_ERR("Configuration error - sector count");
		return -EINVAL;
	}

	rc = nvs_startup(fs);
 8006f72:	4620      	mov	r0, r4
 8006f74:	f014 fa98 	bl	801b4a8 <nvs_startup>
	if (rc) {
 8006f78:	4606      	mov	r6, r0
 8006f7a:	2800      	cmp	r0, #0
 8006f7c:	d07a      	beq.n	8007074 <nvs_init+0x160>
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
 8006f7e:	4630      	mov	r0, r6
 8006f80:	b005      	add	sp, #20
 8006f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("No valid flash device found");
 8006f84:	f04f 0100 	mov.w	r1, #0
 8006f88:	2301      	movs	r3, #1
 8006f8a:	f363 0102 	bfi	r1, r3, #0, #3
 8006f8e:	f36f 01c5 	bfc	r1, #3, #3
 8006f92:	4b51      	ldr	r3, [pc, #324]	; (80070d8 <nvs_init+0x1c4>)
 8006f94:	4a51      	ldr	r2, [pc, #324]	; (80070dc <nvs_init+0x1c8>)
 8006f96:	1a9b      	subs	r3, r3, r2
 8006f98:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8006f9c:	f363 118f 	bfi	r1, r3, #6, #10
 8006fa0:	484f      	ldr	r0, [pc, #316]	; (80070e0 <nvs_init+0x1cc>)
 8006fa2:	f7ff fc3d 	bl	8006820 <log_0>
		return -ENXIO;
 8006fa6:	f06f 0605 	mvn.w	r6, #5
 8006faa:	e7e8      	b.n	8006f7e <nvs_init+0x6a>
		LOG_ERR("Could not obtain flash parameters");
 8006fac:	f04f 0100 	mov.w	r1, #0
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	f363 0102 	bfi	r1, r3, #0, #3
 8006fb6:	f36f 01c5 	bfc	r1, #3, #3
 8006fba:	4b47      	ldr	r3, [pc, #284]	; (80070d8 <nvs_init+0x1c4>)
 8006fbc:	4a47      	ldr	r2, [pc, #284]	; (80070dc <nvs_init+0x1c8>)
 8006fbe:	1a9b      	subs	r3, r3, r2
 8006fc0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8006fc4:	f363 118f 	bfi	r1, r3, #6, #10
 8006fc8:	4846      	ldr	r0, [pc, #280]	; (80070e4 <nvs_init+0x1d0>)
 8006fca:	f7ff fc29 	bl	8006820 <log_0>
		return -EINVAL;
 8006fce:	f06f 0615 	mvn.w	r6, #21
 8006fd2:	e7d4      	b.n	8006f7e <nvs_init+0x6a>
		LOG_ERR("Unsupported write block size");
 8006fd4:	f04f 0100 	mov.w	r1, #0
 8006fd8:	2301      	movs	r3, #1
 8006fda:	f363 0102 	bfi	r1, r3, #0, #3
 8006fde:	f36f 01c5 	bfc	r1, #3, #3
 8006fe2:	4b3d      	ldr	r3, [pc, #244]	; (80070d8 <nvs_init+0x1c4>)
 8006fe4:	4a3d      	ldr	r2, [pc, #244]	; (80070dc <nvs_init+0x1c8>)
 8006fe6:	1a9b      	subs	r3, r3, r2
 8006fe8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8006fec:	f363 118f 	bfi	r1, r3, #6, #10
 8006ff0:	483d      	ldr	r0, [pc, #244]	; (80070e8 <nvs_init+0x1d4>)
 8006ff2:	f7ff fc15 	bl	8006820 <log_0>
		return -EINVAL;
 8006ff6:	f06f 0615 	mvn.w	r6, #21
 8006ffa:	e7c0      	b.n	8006f7e <nvs_init+0x6a>
		LOG_ERR("Unable to get page info");
 8006ffc:	f04f 0100 	mov.w	r1, #0
 8007000:	2301      	movs	r3, #1
 8007002:	f363 0102 	bfi	r1, r3, #0, #3
 8007006:	f36f 01c5 	bfc	r1, #3, #3
 800700a:	4b33      	ldr	r3, [pc, #204]	; (80070d8 <nvs_init+0x1c4>)
 800700c:	4a33      	ldr	r2, [pc, #204]	; (80070dc <nvs_init+0x1c8>)
 800700e:	1a9b      	subs	r3, r3, r2
 8007010:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8007014:	f363 118f 	bfi	r1, r3, #6, #10
 8007018:	4834      	ldr	r0, [pc, #208]	; (80070ec <nvs_init+0x1d8>)
 800701a:	f7ff fc01 	bl	8006820 <log_0>
		return -EINVAL;
 800701e:	f06f 0615 	mvn.w	r6, #21
 8007022:	e7ac      	b.n	8006f7e <nvs_init+0x6a>
		LOG_ERR("Invalid sector size");
 8007024:	f04f 0100 	mov.w	r1, #0
 8007028:	2301      	movs	r3, #1
 800702a:	f363 0102 	bfi	r1, r3, #0, #3
 800702e:	f36f 01c5 	bfc	r1, #3, #3
 8007032:	4b29      	ldr	r3, [pc, #164]	; (80070d8 <nvs_init+0x1c4>)
 8007034:	4a29      	ldr	r2, [pc, #164]	; (80070dc <nvs_init+0x1c8>)
 8007036:	1a9b      	subs	r3, r3, r2
 8007038:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800703c:	f363 118f 	bfi	r1, r3, #6, #10
 8007040:	482b      	ldr	r0, [pc, #172]	; (80070f0 <nvs_init+0x1dc>)
 8007042:	f7ff fbed 	bl	8006820 <log_0>
		return -EINVAL;
 8007046:	f06f 0615 	mvn.w	r6, #21
 800704a:	e798      	b.n	8006f7e <nvs_init+0x6a>
		LOG_ERR("Configuration error - sector count");
 800704c:	f04f 0100 	mov.w	r1, #0
 8007050:	2301      	movs	r3, #1
 8007052:	f363 0102 	bfi	r1, r3, #0, #3
 8007056:	f36f 01c5 	bfc	r1, #3, #3
 800705a:	4b1f      	ldr	r3, [pc, #124]	; (80070d8 <nvs_init+0x1c4>)
 800705c:	4a1f      	ldr	r2, [pc, #124]	; (80070dc <nvs_init+0x1c8>)
 800705e:	1a9b      	subs	r3, r3, r2
 8007060:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8007064:	f363 118f 	bfi	r1, r3, #6, #10
 8007068:	4822      	ldr	r0, [pc, #136]	; (80070f4 <nvs_init+0x1e0>)
 800706a:	f7ff fbd9 	bl	8006820 <log_0>
		return -EINVAL;
 800706e:	f06f 0615 	mvn.w	r6, #21
 8007072:	e784      	b.n	8006f7e <nvs_init+0x6a>
	fs->ready = true;
 8007074:	2301      	movs	r3, #1
 8007076:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
 8007078:	2703      	movs	r7, #3
 800707a:	f04f 0300 	mov.w	r3, #0
 800707e:	f367 0302 	bfi	r3, r7, #0, #3
 8007082:	f36f 03c5 	bfc	r3, #3, #3
 8007086:	4d14      	ldr	r5, [pc, #80]	; (80070d8 <nvs_init+0x1c4>)
 8007088:	4a14      	ldr	r2, [pc, #80]	; (80070dc <nvs_init+0x1c8>)
 800708a:	1aad      	subs	r5, r5, r2
 800708c:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8007090:	f365 138f 	bfi	r3, r5, #6, #10
 8007094:	89a2      	ldrh	r2, [r4, #12]
 8007096:	89e1      	ldrh	r1, [r4, #14]
 8007098:	4817      	ldr	r0, [pc, #92]	; (80070f8 <nvs_init+0x1e4>)
 800709a:	f7ff fad1 	bl	8006640 <log_2>
	LOG_INF("alloc wra: %d, %x",
 800709e:	f04f 0300 	mov.w	r3, #0
 80070a2:	f367 0302 	bfi	r3, r7, #0, #3
 80070a6:	f36f 03c5 	bfc	r3, #3, #3
 80070aa:	f365 138f 	bfi	r3, r5, #6, #10
 80070ae:	6861      	ldr	r1, [r4, #4]
 80070b0:	b28a      	uxth	r2, r1
 80070b2:	0c09      	lsrs	r1, r1, #16
 80070b4:	4811      	ldr	r0, [pc, #68]	; (80070fc <nvs_init+0x1e8>)
 80070b6:	f7ff fac3 	bl	8006640 <log_2>
	LOG_INF("data wra: %d, %x",
 80070ba:	f04f 0300 	mov.w	r3, #0
 80070be:	f367 0302 	bfi	r3, r7, #0, #3
 80070c2:	f36f 03c5 	bfc	r3, #3, #3
 80070c6:	f365 138f 	bfi	r3, r5, #6, #10
 80070ca:	68a1      	ldr	r1, [r4, #8]
 80070cc:	b28a      	uxth	r2, r1
 80070ce:	0c09      	lsrs	r1, r1, #16
 80070d0:	480b      	ldr	r0, [pc, #44]	; (8007100 <nvs_init+0x1ec>)
 80070d2:	f7ff fab5 	bl	8006640 <log_2>
	return 0;
 80070d6:	e752      	b.n	8006f7e <nvs_init+0x6a>
 80070d8:	08022c08 	.word	0x08022c08
 80070dc:	08022b90 	.word	0x08022b90
 80070e0:	080252a4 	.word	0x080252a4
 80070e4:	080252c0 	.word	0x080252c0
 80070e8:	080252e4 	.word	0x080252e4
 80070ec:	08025304 	.word	0x08025304
 80070f0:	0802531c 	.word	0x0802531c
 80070f4:	08025330 	.word	0x08025330
 80070f8:	08025354 	.word	0x08025354
 80070fc:	0802536c 	.word	0x0802536c
 8007100:	08025380 	.word	0x08025380

08007104 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
 8007104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007108:	b087      	sub	sp, #28
 800710a:	9201      	str	r2, [sp, #4]
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
 800710c:	f890 b010 	ldrb.w	fp, [r0, #16]
 8007110:	f1bb 0f00 	cmp.w	fp, #0
 8007114:	d027      	beq.n	8007166 <nvs_write+0x62>
 8007116:	4604      	mov	r4, r0
 8007118:	460e      	mov	r6, r1
 800711a:	4699      	mov	r9, r3
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
 800711c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	b2d9      	uxtb	r1, r3
	if (write_block_size <= 1U) {
 8007122:	2901      	cmp	r1, #1
 8007124:	d933      	bls.n	800718e <nvs_write+0x8a>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
 8007126:	f101 0a07 	add.w	sl, r1, #7
 800712a:	424a      	negs	r2, r1
 800712c:	ea0a 0a02 	and.w	sl, sl, r2
	if (write_block_size <= 1U) {
 8007130:	2901      	cmp	r1, #1
 8007132:	d92f      	bls.n	8007194 <nvs_write+0x90>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
 8007134:	b2db      	uxtb	r3, r3
 8007136:	eb09 0803 	add.w	r8, r9, r3
 800713a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800713e:	425b      	negs	r3, r3
 8007140:	ea08 0803 	and.w	r8, r8, r3

	/* The maximum data size is sector size - 3 ate
	 * where: 1 ate for data, 1 ate for sector close
	 * and 1 ate to always allow a delete.
	 */
	if ((len > (fs->sector_size - 3 * ate_size)) ||
 8007144:	89a3      	ldrh	r3, [r4, #12]
 8007146:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
 800714a:	1a9b      	subs	r3, r3, r2
 800714c:	454b      	cmp	r3, r9
 800714e:	f0c0 8096 	bcc.w	800727e <nvs_write+0x17a>
 8007152:	f1b9 0f00 	cmp.w	r9, #0
 8007156:	d003      	beq.n	8007160 <nvs_write+0x5c>
	    ((len > 0) && (data == NULL))) {
 8007158:	9b01      	ldr	r3, [sp, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	f000 8092 	beq.w	8007284 <nvs_write+0x180>
		return -EINVAL;
	}

	/* find latest entry with same id */
	wlk_addr = fs->ate_wra;
 8007160:	6863      	ldr	r3, [r4, #4]
 8007162:	9303      	str	r3, [sp, #12]
	rd_addr = wlk_addr;
 8007164:	e01c      	b.n	80071a0 <nvs_write+0x9c>
		LOG_ERR("NVS not initialized");
 8007166:	f04f 0100 	mov.w	r1, #0
 800716a:	2301      	movs	r3, #1
 800716c:	f363 0102 	bfi	r1, r3, #0, #3
 8007170:	f36f 01c5 	bfc	r1, #3, #3
 8007174:	4b45      	ldr	r3, [pc, #276]	; (800728c <nvs_write+0x188>)
 8007176:	4a46      	ldr	r2, [pc, #280]	; (8007290 <nvs_write+0x18c>)
 8007178:	1a9b      	subs	r3, r3, r2
 800717a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800717e:	f363 118f 	bfi	r1, r3, #6, #10
 8007182:	4844      	ldr	r0, [pc, #272]	; (8007294 <nvs_write+0x190>)
 8007184:	f7ff fb4c 	bl	8006820 <log_0>
		return -EACCES;
 8007188:	f06f 050c 	mvn.w	r5, #12
 800718c:	e071      	b.n	8007272 <nvs_write+0x16e>
		return len;
 800718e:	f04f 0a08 	mov.w	sl, #8
 8007192:	e7cd      	b.n	8007130 <nvs_write+0x2c>
 8007194:	46c8      	mov	r8, r9
 8007196:	e7d5      	b.n	8007144 <nvs_write+0x40>
		}
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
			prev_found = true;
			break;
		}
		if (wlk_addr == fs->ate_wra) {
 8007198:	6862      	ldr	r2, [r4, #4]
 800719a:	9b03      	ldr	r3, [sp, #12]
 800719c:	429a      	cmp	r2, r3
 800719e:	d012      	beq.n	80071c6 <nvs_write+0xc2>
		rd_addr = wlk_addr;
 80071a0:	9f03      	ldr	r7, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
 80071a2:	aa04      	add	r2, sp, #16
 80071a4:	a903      	add	r1, sp, #12
 80071a6:	4620      	mov	r0, r4
 80071a8:	f013 ff9b 	bl	801b0e2 <nvs_prev_ate>
		if (rc) {
 80071ac:	4605      	mov	r5, r0
 80071ae:	2800      	cmp	r0, #0
 80071b0:	d15f      	bne.n	8007272 <nvs_write+0x16e>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
 80071b2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80071b6:	42b3      	cmp	r3, r6
 80071b8:	d1ee      	bne.n	8007198 <nvs_write+0x94>
 80071ba:	a804      	add	r0, sp, #16
 80071bc:	f013 ff4c 	bl	801b058 <nvs_ate_crc8_check>
 80071c0:	2800      	cmp	r0, #0
 80071c2:	d1e9      	bne.n	8007198 <nvs_write+0x94>
 80071c4:	e001      	b.n	80071ca <nvs_write+0xc6>
	bool prev_found = false;
 80071c6:	f04f 0b00 	mov.w	fp, #0
			break;
		}
	}

	if (prev_found) {
 80071ca:	f1bb 0f00 	cmp.w	fp, #0
 80071ce:	d018      	beq.n	8007202 <nvs_write+0xfe>
		/* previous entry found */
		rd_addr &= ADDR_SECT_MASK;
 80071d0:	0c3f      	lsrs	r7, r7, #16
 80071d2:	043f      	lsls	r7, r7, #16
		rd_addr += wlk_ate.offset;
 80071d4:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 80071d8:	4439      	add	r1, r7

		if (len == 0) {
 80071da:	f1b9 0f00 	cmp.w	r9, #0
 80071de:	d103      	bne.n	80071e8 <nvs_write+0xe4>
			/* do not try to compare with empty data */
			if (wlk_ate.len == 0U) {
 80071e0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80071e4:	b983      	cbnz	r3, 8007208 <nvs_write+0x104>
 80071e6:	e044      	b.n	8007272 <nvs_write+0x16e>
				/* skip delete entry as it is already the
				 * last one
				 */
				return 0;
			}
		} else if (len == wlk_ate.len) {
 80071e8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80071ec:	454b      	cmp	r3, r9
 80071ee:	d10b      	bne.n	8007208 <nvs_write+0x104>
			/* do not try to compare if lengths are not equal */
			/* compare the data and if equal return 0 */
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
 80071f0:	464b      	mov	r3, r9
 80071f2:	9a01      	ldr	r2, [sp, #4]
 80071f4:	4620      	mov	r0, r4
 80071f6:	f013 feb7 	bl	801af68 <nvs_flash_block_cmp>
			if (rc <= 0) {
 80071fa:	2800      	cmp	r0, #0
 80071fc:	dc04      	bgt.n	8007208 <nvs_write+0x104>
				return rc;
 80071fe:	4605      	mov	r5, r0
 8007200:	e037      	b.n	8007272 <nvs_write+0x16e>
			}
		}
	} else {
		/* skip delete entry for non-existing entry */
		if (len == 0) {
 8007202:	f1b9 0f00 	cmp.w	r9, #0
 8007206:	d034      	beq.n	8007272 <nvs_write+0x16e>
			return 0;
		}
	}

	/* calculate required space if the entry contains data */
	if (data_size) {
 8007208:	f1b8 0f00 	cmp.w	r8, #0
 800720c:	d00c      	beq.n	8007228 <nvs_write+0x124>
		/* Leave space for delete ate */
		required_space = data_size + ate_size;
 800720e:	fa1a f788 	uxtah	r7, sl, r8
 8007212:	b2bf      	uxth	r7, r7
	}

	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
 8007214:	f104 0814 	add.w	r8, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
 8007218:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800721c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007220:	4640      	mov	r0, r8
 8007222:	f011 f843 	bl	80182ac <z_impl_k_mutex_lock>

	gc_count = 0;
 8007226:	e00c      	b.n	8007242 <nvs_write+0x13e>
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
 8007228:	2700      	movs	r7, #0
 800722a:	e7f3      	b.n	8007214 <nvs_write+0x110>
			goto end;
		}

		if (fs->ate_wra >= fs->data_wra + required_space) {

			rc = nvs_flash_wrt_entry(fs, id, data, len);
 800722c:	464b      	mov	r3, r9
 800722e:	9a01      	ldr	r2, [sp, #4]
 8007230:	4631      	mov	r1, r6
 8007232:	4620      	mov	r0, r4
 8007234:	f014 f8e9 	bl	801b40a <nvs_flash_wrt_entry>
			if (rc) {
 8007238:	4605      	mov	r5, r0
 800723a:	b9b8      	cbnz	r0, 800726c <nvs_write+0x168>
		if (rc) {
			goto end;
		}
		gc_count++;
	}
	rc = len;
 800723c:	464d      	mov	r5, r9
 800723e:	e015      	b.n	800726c <nvs_write+0x168>
		gc_count++;
 8007240:	3501      	adds	r5, #1
		if (gc_count == fs->sector_count) {
 8007242:	89e3      	ldrh	r3, [r4, #14]
 8007244:	429d      	cmp	r5, r3
 8007246:	d00f      	beq.n	8007268 <nvs_write+0x164>
		if (fs->ate_wra >= fs->data_wra + required_space) {
 8007248:	6862      	ldr	r2, [r4, #4]
 800724a:	68a3      	ldr	r3, [r4, #8]
 800724c:	443b      	add	r3, r7
 800724e:	429a      	cmp	r2, r3
 8007250:	d2ec      	bcs.n	800722c <nvs_write+0x128>
		rc = nvs_sector_close(fs);
 8007252:	4620      	mov	r0, r4
 8007254:	f014 f8f8 	bl	801b448 <nvs_sector_close>
		if (rc) {
 8007258:	b978      	cbnz	r0, 800727a <nvs_write+0x176>
		rc = nvs_gc(fs);
 800725a:	4620      	mov	r0, r4
 800725c:	f014 f840 	bl	801b2e0 <nvs_gc>
		if (rc) {
 8007260:	2800      	cmp	r0, #0
 8007262:	d0ed      	beq.n	8007240 <nvs_write+0x13c>
		rc = nvs_gc(fs);
 8007264:	4605      	mov	r5, r0
 8007266:	e001      	b.n	800726c <nvs_write+0x168>
			rc = -ENOSPC;
 8007268:	f06f 051b 	mvn.w	r5, #27
	return z_impl_k_mutex_unlock(mutex);
 800726c:	4640      	mov	r0, r8
 800726e:	f011 f8a7 	bl	80183c0 <z_impl_k_mutex_unlock>
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
 8007272:	4628      	mov	r0, r5
 8007274:	b007      	add	sp, #28
 8007276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = nvs_sector_close(fs);
 800727a:	4605      	mov	r5, r0
 800727c:	e7f6      	b.n	800726c <nvs_write+0x168>
		return -EINVAL;
 800727e:	f06f 0515 	mvn.w	r5, #21
 8007282:	e7f6      	b.n	8007272 <nvs_write+0x16e>
 8007284:	f06f 0515 	mvn.w	r5, #21
 8007288:	e7f3      	b.n	8007272 <nvs_write+0x16e>
 800728a:	bf00      	nop
 800728c:	08022c08 	.word	0x08022c08
 8007290:	08022b90 	.word	0x08022b90
 8007294:	08025290 	.word	0x08025290

08007298 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
 8007298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800729c:	b084      	sub	sp, #16
 800729e:	4699      	mov	r9, r3
 80072a0:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
 80072a4:	7c03      	ldrb	r3, [r0, #16]
 80072a6:	b1a3      	cbz	r3, 80072d2 <nvs_read_hist+0x3a>
 80072a8:	4604      	mov	r4, r0
 80072aa:	460f      	mov	r7, r1
 80072ac:	4692      	mov	sl, r2
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
 80072ae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
 80072b4:	2a01      	cmp	r2, #1
 80072b6:	d920      	bls.n	80072fa <nvs_read_hist+0x62>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
 80072b8:	4613      	mov	r3, r2
 80072ba:	3207      	adds	r2, #7
 80072bc:	425b      	negs	r3, r3
 80072be:	401a      	ands	r2, r3
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));

	if (len > (fs->sector_size - 2 * ate_size)) {
 80072c0:	89a3      	ldrh	r3, [r4, #12]
 80072c2:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80072c6:	454b      	cmp	r3, r9
 80072c8:	d357      	bcc.n	800737a <nvs_read_hist+0xe2>
		return -EINVAL;
	}

	cnt_his = 0U;

	wlk_addr = fs->ate_wra;
 80072ca:	6866      	ldr	r6, [r4, #4]
 80072cc:	9603      	str	r6, [sp, #12]
	cnt_his = 0U;
 80072ce:	2500      	movs	r5, #0
	rd_addr = wlk_addr;

	while (cnt_his <= cnt) {
 80072d0:	e019      	b.n	8007306 <nvs_read_hist+0x6e>
		LOG_ERR("NVS not initialized");
 80072d2:	f04f 0100 	mov.w	r1, #0
 80072d6:	2301      	movs	r3, #1
 80072d8:	f363 0102 	bfi	r1, r3, #0, #3
 80072dc:	f36f 01c5 	bfc	r1, #3, #3
 80072e0:	4b2a      	ldr	r3, [pc, #168]	; (800738c <nvs_read_hist+0xf4>)
 80072e2:	4a2b      	ldr	r2, [pc, #172]	; (8007390 <nvs_read_hist+0xf8>)
 80072e4:	1a9b      	subs	r3, r3, r2
 80072e6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80072ea:	f363 118f 	bfi	r1, r3, #6, #10
 80072ee:	4829      	ldr	r0, [pc, #164]	; (8007394 <nvs_read_hist+0xfc>)
 80072f0:	f7ff fa96 	bl	8006820 <log_0>
		return -EACCES;
 80072f4:	f06f 030c 	mvn.w	r3, #12
 80072f8:	e034      	b.n	8007364 <nvs_read_hist+0xcc>
		return len;
 80072fa:	2208      	movs	r2, #8
 80072fc:	e7e0      	b.n	80072c0 <nvs_read_hist+0x28>
			goto err;
		}
		if ((wlk_ate.id == id) &&  (!nvs_ate_crc8_check(&wlk_ate))) {
			cnt_his++;
		}
		if (wlk_addr == fs->ate_wra) {
 80072fe:	6862      	ldr	r2, [r4, #4]
 8007300:	9b03      	ldr	r3, [sp, #12]
 8007302:	429a      	cmp	r2, r3
 8007304:	d015      	beq.n	8007332 <nvs_read_hist+0x9a>
	while (cnt_his <= cnt) {
 8007306:	4545      	cmp	r5, r8
 8007308:	d813      	bhi.n	8007332 <nvs_read_hist+0x9a>
		rd_addr = wlk_addr;
 800730a:	9e03      	ldr	r6, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
 800730c:	aa01      	add	r2, sp, #4
 800730e:	a903      	add	r1, sp, #12
 8007310:	4620      	mov	r0, r4
 8007312:	f013 fee6 	bl	801b0e2 <nvs_prev_ate>
		if (rc) {
 8007316:	4603      	mov	r3, r0
 8007318:	bb20      	cbnz	r0, 8007364 <nvs_read_hist+0xcc>
		if ((wlk_ate.id == id) &&  (!nvs_ate_crc8_check(&wlk_ate))) {
 800731a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800731e:	42bb      	cmp	r3, r7
 8007320:	d1ed      	bne.n	80072fe <nvs_read_hist+0x66>
 8007322:	a801      	add	r0, sp, #4
 8007324:	f013 fe98 	bl	801b058 <nvs_ate_crc8_check>
 8007328:	2800      	cmp	r0, #0
 800732a:	d1e8      	bne.n	80072fe <nvs_read_hist+0x66>
			cnt_his++;
 800732c:	3501      	adds	r5, #1
 800732e:	b2ad      	uxth	r5, r5
 8007330:	e7e5      	b.n	80072fe <nvs_read_hist+0x66>
			break;
		}
	}

	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
 8007332:	6862      	ldr	r2, [r4, #4]
 8007334:	9b03      	ldr	r3, [sp, #12]
 8007336:	429a      	cmp	r2, r3
 8007338:	d018      	beq.n	800736c <nvs_read_hist+0xd4>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
 800733a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
 800733e:	b1fb      	cbz	r3, 8007380 <nvs_read_hist+0xe8>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
 8007340:	4545      	cmp	r5, r8
 8007342:	d320      	bcc.n	8007386 <nvs_read_hist+0xee>
		return -ENOENT;
	}

	rd_addr &= ADDR_SECT_MASK;
 8007344:	0c36      	lsrs	r6, r6, #16
 8007346:	0436      	lsls	r6, r6, #16
	rd_addr += wlk_ate.offset;
 8007348:	f8bd 1006 	ldrh.w	r1, [sp, #6]
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
 800734c:	454b      	cmp	r3, r9
 800734e:	bf28      	it	cs
 8007350:	464b      	movcs	r3, r9
 8007352:	4652      	mov	r2, sl
 8007354:	4431      	add	r1, r6
 8007356:	4620      	mov	r0, r4
 8007358:	f013 fddb 	bl	801af12 <nvs_flash_rd>
	if (rc) {
 800735c:	4603      	mov	r3, r0
 800735e:	b908      	cbnz	r0, 8007364 <nvs_read_hist+0xcc>
		goto err;
	}

	return wlk_ate.len;
 8007360:	f8bd 3008 	ldrh.w	r3, [sp, #8]

err:
	return rc;
}
 8007364:	4618      	mov	r0, r3
 8007366:	b004      	add	sp, #16
 8007368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
 800736c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8007370:	42bb      	cmp	r3, r7
 8007372:	d0e2      	beq.n	800733a <nvs_read_hist+0xa2>
		return -ENOENT;
 8007374:	f06f 0301 	mvn.w	r3, #1
 8007378:	e7f4      	b.n	8007364 <nvs_read_hist+0xcc>
		return -EINVAL;
 800737a:	f06f 0315 	mvn.w	r3, #21
 800737e:	e7f1      	b.n	8007364 <nvs_read_hist+0xcc>
		return -ENOENT;
 8007380:	f06f 0301 	mvn.w	r3, #1
 8007384:	e7ee      	b.n	8007364 <nvs_read_hist+0xcc>
 8007386:	f06f 0301 	mvn.w	r3, #1
 800738a:	e7eb      	b.n	8007364 <nvs_read_hist+0xcc>
 800738c:	08022c08 	.word	0x08022c08
 8007390:	08022b90 	.word	0x08022b90
 8007394:	08025290 	.word	0x08025290

08007398 <usb_handle_request>:
 *
 * @return true if the request was handles successfully
 */
static bool usb_handle_request(struct usb_setup_packet *setup,
			       int32_t *len, uint8_t **data)
{
 8007398:	b510      	push	{r4, lr}
	uint32_t type = REQTYPE_GET_TYPE(setup->bmRequestType);
 800739a:	7803      	ldrb	r3, [r0, #0]
 800739c:	f3c3 1341 	ubfx	r3, r3, #5, #2
	usb_request_handler handler = usb_dev.req_handlers[type];
 80073a0:	330a      	adds	r3, #10
 80073a2:	4c06      	ldr	r4, [pc, #24]	; (80073bc <usb_handle_request+0x24>)
 80073a4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
	if (type >= MAX_NUM_REQ_HANDLERS) {
		LOG_DBG("Error Incorrect iType %d", type);
		return false;
	}

	if (handler == NULL) {
 80073a8:	b123      	cbz	r3, 80073b4 <usb_handle_request+0x1c>
		LOG_DBG("No handler for reqtype %d", type);
		return false;
	}

	if ((*handler)(setup, len, data) < 0) {
 80073aa:	4798      	blx	r3
 80073ac:	2800      	cmp	r0, #0
 80073ae:	db03      	blt.n	80073b8 <usb_handle_request+0x20>
		LOG_DBG("Handler Error %d", type);
		usb_print_setup(setup);
		return false;
	}

	return true;
 80073b0:	2001      	movs	r0, #1
}
 80073b2:	bd10      	pop	{r4, pc}
		return false;
 80073b4:	2000      	movs	r0, #0
 80073b6:	e7fc      	b.n	80073b2 <usb_handle_request+0x1a>
		return false;
 80073b8:	2000      	movs	r0, #0
 80073ba:	e7fa      	b.n	80073b2 <usb_handle_request+0x1a>
 80073bc:	20003660 	.word	0x20003660

080073c0 <usb_register_request_handler>:
 * @return N/A
 */
static void usb_register_request_handler(int32_t type,
					 usb_request_handler handler)
{
	usb_dev.req_handlers[type] = handler;
 80073c0:	300a      	adds	r0, #10
 80073c2:	4b02      	ldr	r3, [pc, #8]	; (80073cc <usb_register_request_handler+0xc>)
 80073c4:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	20003660 	.word	0x20003660

080073d0 <usb_register_descriptors>:
 *
 * @param [in] usb_descriptors The descriptor byte array
 */
static void usb_register_descriptors(const uint8_t *usb_descriptors)
{
	usb_dev.descriptors = usb_descriptors;
 80073d0:	4b01      	ldr	r3, [pc, #4]	; (80073d8 <usb_register_descriptors+0x8>)
 80073d2:	6258      	str	r0, [r3, #36]	; 0x24
}
 80073d4:	4770      	bx	lr
 80073d6:	bf00      	nop
 80073d8:	20003660 	.word	0x20003660

080073dc <usb_get_descriptor>:
 *
 * @return true if the descriptor was found, false otherwise
 */
static bool usb_get_descriptor(uint16_t type_index, uint16_t lang_id,
		int32_t *len, uint8_t **data)
{
 80073dc:	b4f0      	push	{r4, r5, r6, r7}
	bool found = false;

	/*Avoid compiler warning until this is used for something*/
	ARG_UNUSED(lang_id);

	type = GET_DESC_TYPE(type_index);
 80073de:	0a05      	lsrs	r5, r0, #8

	/*
	 * Invalid types of descriptors,
	 * see USB Spec. Revision 2.0, 9.4.3 Get Descriptor
	 */
	if ((type == USB_INTERFACE_DESC) || (type == USB_ENDPOINT_DESC) ||
 80073e0:	1f29      	subs	r1, r5, #4
 80073e2:	b2c9      	uxtb	r1, r1
 80073e4:	2901      	cmp	r1, #1
 80073e6:	d91e      	bls.n	8007426 <usb_get_descriptor+0x4a>
 80073e8:	b2c6      	uxtb	r6, r0
 80073ea:	2d07      	cmp	r5, #7
 80073ec:	d81e      	bhi.n	800742c <usb_get_descriptor+0x50>
	    (type > USB_OTHER_SPEED)) {
		return false;
	}

	p = (uint8_t *)usb_dev.descriptors;
 80073ee:	4910      	ldr	r1, [pc, #64]	; (8007430 <usb_get_descriptor+0x54>)
 80073f0:	6a49      	ldr	r1, [r1, #36]	; 0x24
	cur_index = 0;
 80073f2:	2700      	movs	r7, #0

	while (p[DESC_bLength] != 0U) {
 80073f4:	e000      	b.n	80073f8 <usb_get_descriptor+0x1c>
				break;
			}
			cur_index++;
		}
		/* skip to next descriptor */
		p += p[DESC_bLength];
 80073f6:	4401      	add	r1, r0
	while (p[DESC_bLength] != 0U) {
 80073f8:	7808      	ldrb	r0, [r1, #0]
 80073fa:	b138      	cbz	r0, 800740c <usb_get_descriptor+0x30>
		if (p[DESC_bDescriptorType] == type) {
 80073fc:	784c      	ldrb	r4, [r1, #1]
 80073fe:	42ac      	cmp	r4, r5
 8007400:	d1f9      	bne.n	80073f6 <usb_get_descriptor+0x1a>
			if (cur_index == index) {
 8007402:	42be      	cmp	r6, r7
 8007404:	d001      	beq.n	800740a <usb_get_descriptor+0x2e>
			cur_index++;
 8007406:	3701      	adds	r7, #1
 8007408:	e7f5      	b.n	80073f6 <usb_get_descriptor+0x1a>
				found = true;
 800740a:	2001      	movs	r0, #1
	}

	if (found) {
 800740c:	b160      	cbz	r0, 8007428 <usb_get_descriptor+0x4c>
		/* set data pointer */
		*data = p;
 800740e:	6019      	str	r1, [r3, #0]
		/* get length from structure */
		if (type == USB_CONFIGURATION_DESC) {
 8007410:	2d02      	cmp	r5, #2
 8007412:	d002      	beq.n	800741a <usb_get_descriptor+0x3e>
			 */
			*len = (p[CONF_DESC_wTotalLength]) |
			    (p[CONF_DESC_wTotalLength + 1] << 8);
		} else {
			/* normally length is at offset 0 */
			*len = p[DESC_bLength];
 8007414:	780b      	ldrb	r3, [r1, #0]
 8007416:	6013      	str	r3, [r2, #0]
 8007418:	e006      	b.n	8007428 <usb_get_descriptor+0x4c>
			*len = (p[CONF_DESC_wTotalLength]) |
 800741a:	788b      	ldrb	r3, [r1, #2]
			    (p[CONF_DESC_wTotalLength + 1] << 8);
 800741c:	78c9      	ldrb	r1, [r1, #3]
			*len = (p[CONF_DESC_wTotalLength]) |
 800741e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007422:	6013      	str	r3, [r2, #0]
 8007424:	e000      	b.n	8007428 <usb_get_descriptor+0x4c>
		return false;
 8007426:	2000      	movs	r0, #0
	} else {
		/* nothing found */
		LOG_DBG("Desc %x not found!", type_index);
	}
	return found;
}
 8007428:	bcf0      	pop	{r4, r5, r6, r7}
 800742a:	4770      	bx	lr
		return false;
 800742c:	2000      	movs	r0, #0
 800742e:	e7fb      	b.n	8007428 <usb_get_descriptor+0x4c>
 8007430:	20003660 	.word	0x20003660

08007434 <is_device_configured>:
 *
 * @return true if Configured, false otherwise.
 */
static bool is_device_configured(void)
{
	return (usb_dev.configuration != 0);
 8007434:	4b03      	ldr	r3, [pc, #12]	; (8007444 <is_device_configured+0x10>)
 8007436:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
}
 800743a:	3800      	subs	r0, #0
 800743c:	bf18      	it	ne
 800743e:	2001      	movne	r0, #1
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	20003660 	.word	0x20003660

08007448 <is_interface_valid>:
 *
 * @return true if interface exists - valid
 */
static bool is_interface_valid(uint8_t interface)
{
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
 8007448:	4b07      	ldr	r3, [pc, #28]	; (8007468 <is_interface_valid+0x20>)
 800744a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	const struct usb_cfg_descriptor *cfg_descr;

	/* Search through descriptor for matching interface */
	while (p[DESC_bLength] != 0U) {
 800744c:	e000      	b.n	8007450 <is_interface_valid+0x8>
			cfg_descr = (const struct usb_cfg_descriptor *)p;
			if (interface < cfg_descr->bNumInterfaces) {
				return true;
			}
		}
		p += p[DESC_bLength];
 800744e:	4413      	add	r3, r2
	while (p[DESC_bLength] != 0U) {
 8007450:	781a      	ldrb	r2, [r3, #0]
 8007452:	b13a      	cbz	r2, 8007464 <is_interface_valid+0x1c>
		if (p[DESC_bDescriptorType] == USB_CONFIGURATION_DESC) {
 8007454:	7859      	ldrb	r1, [r3, #1]
 8007456:	2902      	cmp	r1, #2
 8007458:	d1f9      	bne.n	800744e <is_interface_valid+0x6>
			if (interface < cfg_descr->bNumInterfaces) {
 800745a:	7919      	ldrb	r1, [r3, #4]
 800745c:	4281      	cmp	r1, r0
 800745e:	d9f6      	bls.n	800744e <is_interface_valid+0x6>
				return true;
 8007460:	2001      	movs	r0, #1
	}

	return false;
}
 8007462:	4770      	bx	lr
	return false;
 8007464:	2000      	movs	r0, #0
 8007466:	4770      	bx	lr
 8007468:	20003660 	.word	0x20003660

0800746c <is_ep_valid>:
 * either Control Endpoint or one used by the device.
 *
 * @return true if endpoint exists - valid
 */
static bool is_ep_valid(uint8_t ep)
{
 800746c:	b470      	push	{r4, r5, r6}
	size_t size = (__usb_data_end - __usb_data_start);
 800746e:	4b16      	ldr	r3, [pc, #88]	; (80074c8 <is_ep_valid+0x5c>)
 8007470:	4a16      	ldr	r2, [pc, #88]	; (80074cc <is_ep_valid+0x60>)
 8007472:	1a9b      	subs	r3, r3, r2
 8007474:	109b      	asrs	r3, r3, #2
 8007476:	4e16      	ldr	r6, [pc, #88]	; (80074d0 <is_ep_valid+0x64>)
 8007478:	fb06 f603 	mul.w	r6, r6, r3
	const struct usb_ep_cfg_data *ep_data;
	const struct usb_cfg_data *cfg;

	/* Check if its Endpoint 0 */
	if (USB_EP_GET_IDX(ep) == 0) {
 800747c:	f030 0380 	bics.w	r3, r0, #128	; 0x80
 8007480:	d01d      	beq.n	80074be <is_ep_valid+0x52>
		return true;
	}

	for (size_t i = 0; i < size; i++) {
 8007482:	2400      	movs	r4, #0
 8007484:	42b4      	cmp	r4, r6
 8007486:	d218      	bcs.n	80074ba <is_ep_valid+0x4e>
		cfg = &__usb_data_start[i];
		ep_data = cfg->endpoint;
 8007488:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800748c:	4b0f      	ldr	r3, [pc, #60]	; (80074cc <is_ep_valid+0x60>)
 800748e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8007492:	6a15      	ldr	r5, [r2, #32]

		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
 8007494:	2300      	movs	r3, #0
 8007496:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800749a:	490c      	ldr	r1, [pc, #48]	; (80074cc <is_ep_valid+0x60>)
 800749c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80074a0:	7f12      	ldrb	r2, [r2, #28]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d907      	bls.n	80074b6 <is_ep_valid+0x4a>
			if (ep_data[n].ep_addr == ep) {
 80074a6:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 80074aa:	7912      	ldrb	r2, [r2, #4]
 80074ac:	4282      	cmp	r2, r0
 80074ae:	d008      	beq.n	80074c2 <is_ep_valid+0x56>
		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
 80074b0:	3301      	adds	r3, #1
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	e7ef      	b.n	8007496 <is_ep_valid+0x2a>
	for (size_t i = 0; i < size; i++) {
 80074b6:	3401      	adds	r4, #1
 80074b8:	e7e4      	b.n	8007484 <is_ep_valid+0x18>
				return true;
			}
		}
	}

	return false;
 80074ba:	2000      	movs	r0, #0
 80074bc:	e002      	b.n	80074c4 <is_ep_valid+0x58>
		return true;
 80074be:	2001      	movs	r0, #1
 80074c0:	e000      	b.n	80074c4 <is_ep_valid+0x58>
				return true;
 80074c2:	2001      	movs	r0, #1
}
 80074c4:	bc70      	pop	{r4, r5, r6}
 80074c6:	4770      	bx	lr
 80074c8:	20001294 	.word	0x20001294
 80074cc:	20001270 	.word	0x20001270
 80074d0:	38e38e39 	.word	0x38e38e39

080074d4 <usb_register_custom_req_handler>:
 *
 * @param [in] handler Callback function pointer
 */
static void usb_register_custom_req_handler(usb_request_handler handler)
{
	usb_dev.custom_req_handler = handler;
 80074d4:	4b01      	ldr	r3, [pc, #4]	; (80074dc <usb_register_custom_req_handler+0x8>)
 80074d6:	6198      	str	r0, [r3, #24]
}
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	20003660 	.word	0x20003660

080074e0 <usb_register_status_callback>:
 *
 * @param [in] cb Callback function pointer
 */
static void usb_register_status_callback(usb_dc_status_callback cb)
{
	usb_dev.status_callback = cb;
 80074e0:	4b01      	ldr	r3, [pc, #4]	; (80074e8 <usb_register_status_callback+0x8>)
 80074e2:	61d8      	str	r0, [r3, #28]
}
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	20003660 	.word	0x20003660

080074ec <foreach_ep>:

static int foreach_ep(int (* endpoint_callback)(const struct usb_ep_cfg_data *))
{
 80074ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074f0:	4606      	mov	r6, r0
	size_t size = (__usb_data_end - __usb_data_start);
 80074f2:	4b14      	ldr	r3, [pc, #80]	; (8007544 <foreach_ep+0x58>)
 80074f4:	4a14      	ldr	r2, [pc, #80]	; (8007548 <foreach_ep+0x5c>)
 80074f6:	eba3 0802 	sub.w	r8, r3, r2
 80074fa:	ea4f 03a8 	mov.w	r3, r8, asr #2
 80074fe:	4a13      	ldr	r2, [pc, #76]	; (800754c <foreach_ep+0x60>)
 8007500:	fb02 f803 	mul.w	r8, r2, r3

	for (size_t i = 0; i < size; i++) {
 8007504:	2500      	movs	r5, #0
 8007506:	4545      	cmp	r5, r8
 8007508:	d218      	bcs.n	800753c <foreach_ep+0x50>
		struct usb_cfg_data *cfg = &__usb_data_start[i];
		struct usb_ep_cfg_data *ep_data = cfg->endpoint;
 800750a:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800750e:	4a0e      	ldr	r2, [pc, #56]	; (8007548 <foreach_ep+0x5c>)
 8007510:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007514:	6a1f      	ldr	r7, [r3, #32]

		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
 8007516:	2400      	movs	r4, #0
 8007518:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800751c:	4a0a      	ldr	r2, [pc, #40]	; (8007548 <foreach_ep+0x5c>)
 800751e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007522:	7f1b      	ldrb	r3, [r3, #28]
 8007524:	42a3      	cmp	r3, r4
 8007526:	d907      	bls.n	8007538 <foreach_ep+0x4c>
			int ret;

			ret = endpoint_callback(&ep_data[n]);
 8007528:	eb07 00c4 	add.w	r0, r7, r4, lsl #3
 800752c:	47b0      	blx	r6
			if (ret < 0) {
 800752e:	2800      	cmp	r0, #0
 8007530:	db05      	blt.n	800753e <foreach_ep+0x52>
		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
 8007532:	3401      	adds	r4, #1
 8007534:	b2e4      	uxtb	r4, r4
 8007536:	e7ef      	b.n	8007518 <foreach_ep+0x2c>
	for (size_t i = 0; i < size; i++) {
 8007538:	3501      	adds	r5, #1
 800753a:	e7e4      	b.n	8007506 <foreach_ep+0x1a>
				return ret;
			}
		}
	}

	return 0;
 800753c:	2000      	movs	r0, #0
}
 800753e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007542:	bf00      	nop
 8007544:	20001294 	.word	0x20001294
 8007548:	20001270 	.word	0x20001270
 800754c:	38e38e39 	.word	0x38e38e39

08007550 <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
 8007550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	size_t size = (__usb_data_end - __usb_data_start);
 8007552:	4f13      	ldr	r7, [pc, #76]	; (80075a0 <class_handler+0x50>)
 8007554:	4b13      	ldr	r3, [pc, #76]	; (80075a4 <class_handler+0x54>)
 8007556:	1aff      	subs	r7, r7, r3
 8007558:	10bb      	asrs	r3, r7, #2
 800755a:	4f13      	ldr	r7, [pc, #76]	; (80075a8 <class_handler+0x58>)
 800755c:	fb07 f703 	mul.w	r7, r7, r3
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	for (size_t i = 0; i < size; i++) {
 8007560:	2300      	movs	r3, #0
 8007562:	e000      	b.n	8007566 <class_handler+0x16>
 8007564:	3301      	adds	r3, #1
 8007566:	42bb      	cmp	r3, r7
 8007568:	d216      	bcs.n	8007598 <class_handler+0x48>
		iface = &(__usb_data_start[i].interface);
		if_descr = __usb_data_start[i].interface_descriptor;
 800756a:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
 800756e:	4d0d      	ldr	r5, [pc, #52]	; (80075a4 <class_handler+0x54>)
 8007570:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8007574:	6866      	ldr	r6, [r4, #4]
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
 8007576:	4c0d      	ldr	r4, [pc, #52]	; (80075ac <class_handler+0x5c>)
 8007578:	6a64      	ldr	r4, [r4, #36]	; 0x24
 800757a:	42a6      	cmp	r6, r4
 800757c:	d3f2      	bcc.n	8007564 <class_handler+0x14>
			continue;
		}

		if (iface->class_handler &&
 800757e:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
 8007582:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8007586:	6924      	ldr	r4, [r4, #16]
 8007588:	2c00      	cmp	r4, #0
 800758a:	d0eb      	beq.n	8007564 <class_handler+0x14>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
 800758c:	78b6      	ldrb	r6, [r6, #2]
 800758e:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
 8007590:	42ae      	cmp	r6, r5
 8007592:	d1e7      	bne.n	8007564 <class_handler+0x14>
			return iface->class_handler(pSetup, len, data);
 8007594:	47a0      	blx	r4
 8007596:	e001      	b.n	800759c <class_handler+0x4c>
		}
	}

	return -ENOTSUP;
 8007598:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 800759c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800759e:	bf00      	nop
 80075a0:	20001294 	.word	0x20001294
 80075a4:	20001270 	.word	0x20001270
 80075a8:	38e38e39 	.word	0x38e38e39
 80075ac:	20003660 	.word	0x20003660

080075b0 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
 80075b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	size_t size = (__usb_data_end - __usb_data_start);
 80075b2:	4f15      	ldr	r7, [pc, #84]	; (8007608 <custom_handler+0x58>)
 80075b4:	4b15      	ldr	r3, [pc, #84]	; (800760c <custom_handler+0x5c>)
 80075b6:	1aff      	subs	r7, r7, r3
 80075b8:	10bb      	asrs	r3, r7, #2
 80075ba:	4f15      	ldr	r7, [pc, #84]	; (8007610 <custom_handler+0x60>)
 80075bc:	fb07 f703 	mul.w	r7, r7, r3
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	for (size_t i = 0; i < size; i++) {
 80075c0:	2300      	movs	r3, #0
 80075c2:	e000      	b.n	80075c6 <custom_handler+0x16>
 80075c4:	3301      	adds	r3, #1
 80075c6:	42bb      	cmp	r3, r7
 80075c8:	d21b      	bcs.n	8007602 <custom_handler+0x52>
		iface = &(__usb_data_start[i].interface);
		if_descr = __usb_data_start[i].interface_descriptor;
 80075ca:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
 80075ce:	4d0f      	ldr	r5, [pc, #60]	; (800760c <custom_handler+0x5c>)
 80075d0:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 80075d4:	6864      	ldr	r4, [r4, #4]
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
 80075d6:	4d0f      	ldr	r5, [pc, #60]	; (8007614 <custom_handler+0x64>)
 80075d8:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 80075da:	42ac      	cmp	r4, r5
 80075dc:	d3f2      	bcc.n	80075c4 <custom_handler+0x14>
		}

		/* An exception for AUDIO_CLASS is temporary and shall not be
		 * considered as valid solution for other classes.
		 */
		if (iface->custom_handler &&
 80075de:	eb03 05c3 	add.w	r5, r3, r3, lsl #3
 80075e2:	4e0a      	ldr	r6, [pc, #40]	; (800760c <custom_handler+0x5c>)
 80075e4:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 80075e8:	69ad      	ldr	r5, [r5, #24]
 80075ea:	2d00      	cmp	r5, #0
 80075ec:	d0ea      	beq.n	80075c4 <custom_handler+0x14>
		    (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF) ||
 80075ee:	f894 c002 	ldrb.w	ip, [r4, #2]
 80075f2:	7906      	ldrb	r6, [r0, #4]
		if (iface->custom_handler &&
 80075f4:	45b4      	cmp	ip, r6
 80075f6:	d002      	beq.n	80075fe <custom_handler+0x4e>
		     if_descr->bInterfaceClass == AUDIO_CLASS)) {
 80075f8:	7964      	ldrb	r4, [r4, #5]
		    (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF) ||
 80075fa:	2c01      	cmp	r4, #1
 80075fc:	d1e2      	bne.n	80075c4 <custom_handler+0x14>
			return iface->custom_handler(pSetup, len, data);
 80075fe:	47a8      	blx	r5
 8007600:	e001      	b.n	8007606 <custom_handler+0x56>
		}
	}

	return -ENOTSUP;
 8007602:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 8007606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007608:	20001294 	.word	0x20001294
 800760c:	20001270 	.word	0x20001270
 8007610:	38e38e39 	.word	0x38e38e39
 8007614:	20003660 	.word	0x20003660

08007618 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
 8007618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800761c:	4681      	mov	r9, r0
 800761e:	4688      	mov	r8, r1
 8007620:	4617      	mov	r7, r2
	size_t size = (__usb_data_end - __usb_data_start);
 8007622:	4e10      	ldr	r6, [pc, #64]	; (8007664 <vendor_handler+0x4c>)
 8007624:	4b10      	ldr	r3, [pc, #64]	; (8007668 <vendor_handler+0x50>)
 8007626:	1af6      	subs	r6, r6, r3
 8007628:	10b3      	asrs	r3, r6, #2
 800762a:	4e10      	ldr	r6, [pc, #64]	; (800766c <vendor_handler+0x54>)
 800762c:	fb06 f603 	mul.w	r6, r6, r3
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	for (size_t i = 0; i < size; i++) {
 8007630:	2400      	movs	r4, #0
 8007632:	e000      	b.n	8007636 <vendor_handler+0x1e>
 8007634:	3401      	adds	r4, #1
 8007636:	42a6      	cmp	r6, r4
 8007638:	d90f      	bls.n	800765a <vendor_handler+0x42>
		iface = &(__usb_data_start[i].interface);
		if (iface->vendor_handler) {
 800763a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800763e:	4d0a      	ldr	r5, [pc, #40]	; (8007668 <vendor_handler+0x50>)
 8007640:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d0f4      	beq.n	8007634 <vendor_handler+0x1c>
			if (!iface->vendor_handler(pSetup, len, data)) {
 800764a:	463a      	mov	r2, r7
 800764c:	4641      	mov	r1, r8
 800764e:	4648      	mov	r0, r9
 8007650:	4798      	blx	r3
 8007652:	4603      	mov	r3, r0
 8007654:	2800      	cmp	r0, #0
 8007656:	d1ed      	bne.n	8007634 <vendor_handler+0x1c>
 8007658:	e001      	b.n	800765e <vendor_handler+0x46>
				return 0;
			}
		}
	}

	return -ENOTSUP;
 800765a:	f06f 0322 	mvn.w	r3, #34	; 0x22
}
 800765e:	4618      	mov	r0, r3
 8007660:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007664:	20001294 	.word	0x20001294
 8007668:	20001270 	.word	0x20001270
 800766c:	38e38e39 	.word	0x38e38e39

08007670 <set_endpoint>:
{
 8007670:	b500      	push	{lr}
 8007672:	b083      	sub	sp, #12
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
 8007674:	7883      	ldrb	r3, [r0, #2]
 8007676:	f88d 3000 	strb.w	r3, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
 800767a:	8883      	ldrh	r3, [r0, #4]
 800767c:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
 8007680:	78c3      	ldrb	r3, [r0, #3]
 8007682:	f003 0303 	and.w	r3, r3, #3
 8007686:	f88d 3004 	strb.w	r3, [sp, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
 800768a:	4668      	mov	r0, sp
 800768c:	f001 fde6 	bl	800925c <usb_dc_ep_configure>
	if (ret == -EALREADY) {
 8007690:	f110 0f45 	cmn.w	r0, #69	; 0x45
 8007694:	d010      	beq.n	80076b8 <set_endpoint+0x48>
	} else if (ret) {
 8007696:	bb18      	cbnz	r0, 80076e0 <set_endpoint+0x70>
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
 8007698:	f89d 0000 	ldrb.w	r0, [sp]
 800769c:	f001 fe82 	bl	80093a4 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
 80076a0:	f110 0f45 	cmn.w	r0, #69	; 0x45
 80076a4:	d031      	beq.n	800770a <set_endpoint+0x9a>
	} else if (ret) {
 80076a6:	2800      	cmp	r0, #0
 80076a8:	d143      	bne.n	8007732 <set_endpoint+0xc2>
	usb_dev.configured = true;
 80076aa:	2001      	movs	r0, #1
 80076ac:	4b2b      	ldr	r3, [pc, #172]	; (800775c <set_endpoint+0xec>)
 80076ae:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
}
 80076b2:	b003      	add	sp, #12
 80076b4:	f85d fb04 	ldr.w	pc, [sp], #4
		LOG_WRN("Endpoint 0x%02x already configured", ep_cfg.ep_addr);
 80076b8:	f04f 0200 	mov.w	r2, #0
 80076bc:	2302      	movs	r3, #2
 80076be:	f363 0202 	bfi	r2, r3, #0, #3
 80076c2:	f36f 02c5 	bfc	r2, #3, #3
 80076c6:	4b26      	ldr	r3, [pc, #152]	; (8007760 <set_endpoint+0xf0>)
 80076c8:	4926      	ldr	r1, [pc, #152]	; (8007764 <set_endpoint+0xf4>)
 80076ca:	1a5b      	subs	r3, r3, r1
 80076cc:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80076d0:	f363 128f 	bfi	r2, r3, #6, #10
 80076d4:	f89d 1000 	ldrb.w	r1, [sp]
 80076d8:	4823      	ldr	r0, [pc, #140]	; (8007768 <set_endpoint+0xf8>)
 80076da:	f7fe ff31 	bl	8006540 <log_1>
 80076de:	e7db      	b.n	8007698 <set_endpoint+0x28>
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
 80076e0:	f04f 0200 	mov.w	r2, #0
 80076e4:	2301      	movs	r3, #1
 80076e6:	f363 0202 	bfi	r2, r3, #0, #3
 80076ea:	f36f 02c5 	bfc	r2, #3, #3
 80076ee:	4b1c      	ldr	r3, [pc, #112]	; (8007760 <set_endpoint+0xf0>)
 80076f0:	491c      	ldr	r1, [pc, #112]	; (8007764 <set_endpoint+0xf4>)
 80076f2:	1a5b      	subs	r3, r3, r1
 80076f4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80076f8:	f363 128f 	bfi	r2, r3, #6, #10
 80076fc:	f89d 1000 	ldrb.w	r1, [sp]
 8007700:	481a      	ldr	r0, [pc, #104]	; (800776c <set_endpoint+0xfc>)
 8007702:	f7fe ff1d 	bl	8006540 <log_1>
		return false;
 8007706:	2000      	movs	r0, #0
 8007708:	e7d3      	b.n	80076b2 <set_endpoint+0x42>
		LOG_WRN("Endpoint 0x%02x already enabled", ep_cfg.ep_addr);
 800770a:	f04f 0200 	mov.w	r2, #0
 800770e:	2302      	movs	r3, #2
 8007710:	f363 0202 	bfi	r2, r3, #0, #3
 8007714:	f36f 02c5 	bfc	r2, #3, #3
 8007718:	4b11      	ldr	r3, [pc, #68]	; (8007760 <set_endpoint+0xf0>)
 800771a:	4912      	ldr	r1, [pc, #72]	; (8007764 <set_endpoint+0xf4>)
 800771c:	1a5b      	subs	r3, r3, r1
 800771e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8007722:	f363 128f 	bfi	r2, r3, #6, #10
 8007726:	f89d 1000 	ldrb.w	r1, [sp]
 800772a:	4811      	ldr	r0, [pc, #68]	; (8007770 <set_endpoint+0x100>)
 800772c:	f7fe ff08 	bl	8006540 <log_1>
 8007730:	e7bb      	b.n	80076aa <set_endpoint+0x3a>
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
 8007732:	f04f 0200 	mov.w	r2, #0
 8007736:	2301      	movs	r3, #1
 8007738:	f363 0202 	bfi	r2, r3, #0, #3
 800773c:	f36f 02c5 	bfc	r2, #3, #3
 8007740:	4b07      	ldr	r3, [pc, #28]	; (8007760 <set_endpoint+0xf0>)
 8007742:	4908      	ldr	r1, [pc, #32]	; (8007764 <set_endpoint+0xf4>)
 8007744:	1a5b      	subs	r3, r3, r1
 8007746:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800774a:	f363 128f 	bfi	r2, r3, #6, #10
 800774e:	f89d 1000 	ldrb.w	r1, [sp]
 8007752:	4808      	ldr	r0, [pc, #32]	; (8007774 <set_endpoint+0x104>)
 8007754:	f7fe fef4 	bl	8006540 <log_1>
		return false;
 8007758:	2000      	movs	r0, #0
 800775a:	e7aa      	b.n	80076b2 <set_endpoint+0x42>
 800775c:	20003660 	.word	0x20003660
 8007760:	08022c48 	.word	0x08022c48
 8007764:	08022b90 	.word	0x08022b90
 8007768:	0802539c 	.word	0x0802539c
 800776c:	080253c0 	.word	0x080253c0
 8007770:	080253e4 	.word	0x080253e4
 8007774:	08025404 	.word	0x08025404

08007778 <usb_set_configuration>:
{
 8007778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800777c:	b082      	sub	sp, #8
 800777e:	f88d 0007 	strb.w	r0, [sp, #7]
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
 8007782:	4b1a      	ldr	r3, [pc, #104]	; (80077ec <usb_set_configuration+0x74>)
 8007784:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	if (config_index == 0U) {
 8007786:	b370      	cbz	r0, 80077e6 <usb_set_configuration+0x6e>
 8007788:	460e      	mov	r6, r1
	bool found = false;
 800778a:	2700      	movs	r7, #0
	uint8_t cur_config = 0xFF;
 800778c:	25ff      	movs	r5, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
 800778e:	46a8      	mov	r8, r5
 8007790:	e003      	b.n	800779a <usb_set_configuration+0x22>
			cur_alt_setting =
 8007792:	f894 8003 	ldrb.w	r8, [r4, #3]
		p += p[DESC_bLength];
 8007796:	7823      	ldrb	r3, [r4, #0]
 8007798:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
 800779a:	7823      	ldrb	r3, [r4, #0]
 800779c:	b1c3      	cbz	r3, 80077d0 <usb_set_configuration+0x58>
		switch (p[DESC_bDescriptorType]) {
 800779e:	7863      	ldrb	r3, [r4, #1]
 80077a0:	2b04      	cmp	r3, #4
 80077a2:	d0f6      	beq.n	8007792 <usb_set_configuration+0x1a>
 80077a4:	2b05      	cmp	r3, #5
 80077a6:	d008      	beq.n	80077ba <usb_set_configuration+0x42>
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d1f4      	bne.n	8007796 <usb_set_configuration+0x1e>
			cur_config = p[CONF_DESC_bConfigurationValue];
 80077ac:	7965      	ldrb	r5, [r4, #5]
			if (cur_config == config_index) {
 80077ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80077b2:	42ab      	cmp	r3, r5
 80077b4:	d1ef      	bne.n	8007796 <usb_set_configuration+0x1e>
				found = true;
 80077b6:	2701      	movs	r7, #1
 80077b8:	e7ed      	b.n	8007796 <usb_set_configuration+0x1e>
			if ((cur_config != config_index) ||
 80077ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80077be:	429d      	cmp	r5, r3
 80077c0:	d1e9      	bne.n	8007796 <usb_set_configuration+0x1e>
 80077c2:	45b0      	cmp	r8, r6
 80077c4:	d1e7      	bne.n	8007796 <usb_set_configuration+0x1e>
			found = set_endpoint((struct usb_ep_descriptor *)p);
 80077c6:	4620      	mov	r0, r4
 80077c8:	f7ff ff52 	bl	8007670 <set_endpoint>
 80077cc:	4607      	mov	r7, r0
			break;
 80077ce:	e7e2      	b.n	8007796 <usb_set_configuration+0x1e>
	if (usb_dev.status_callback) {
 80077d0:	4b06      	ldr	r3, [pc, #24]	; (80077ec <usb_set_configuration+0x74>)
 80077d2:	69db      	ldr	r3, [r3, #28]
 80077d4:	b11b      	cbz	r3, 80077de <usb_set_configuration+0x66>
		usb_dev.status_callback(USB_DC_CONFIGURED, &config_index);
 80077d6:	f10d 0107 	add.w	r1, sp, #7
 80077da:	2003      	movs	r0, #3
 80077dc:	4798      	blx	r3
}
 80077de:	4638      	mov	r0, r7
 80077e0:	b002      	add	sp, #8
 80077e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return true;
 80077e6:	2701      	movs	r7, #1
 80077e8:	e7f9      	b.n	80077de <usb_set_configuration+0x66>
 80077ea:	bf00      	nop
 80077ec:	20003660 	.word	0x20003660

080077f0 <usb_handle_std_device_req>:
{
 80077f0:	b570      	push	{r4, r5, r6, lr}
	uint16_t value = setup->wValue;
 80077f2:	8844      	ldrh	r4, [r0, #2]
	uint16_t index = setup->wIndex;
 80077f4:	8886      	ldrh	r6, [r0, #4]
	uint8_t *data = *data_buf;
 80077f6:	6815      	ldr	r5, [r2, #0]
	switch (setup->bRequest) {
 80077f8:	7843      	ldrb	r3, [r0, #1]
 80077fa:	2b09      	cmp	r3, #9
 80077fc:	d82a      	bhi.n	8007854 <usb_handle_std_device_req+0x64>
 80077fe:	e8df f003 	tbb	[pc, r3]
 8007802:	2905      	.short	0x2905
 8007804:	0c292929 	.word	0x0c292929
 8007808:	1f182911 	.word	0x1f182911
		data[1] = 0U;
 800780c:	2300      	movs	r3, #0
 800780e:	706b      	strb	r3, [r5, #1]
			data[0] |= DEVICE_STATUS_SELF_POWERED;
 8007810:	2001      	movs	r0, #1
 8007812:	7028      	strb	r0, [r5, #0]
		*len = 2;
 8007814:	2302      	movs	r3, #2
 8007816:	600b      	str	r3, [r1, #0]
		break;
 8007818:	e01d      	b.n	8007856 <usb_handle_std_device_req+0x66>
		usb_dc_set_address(value);
 800781a:	b2e0      	uxtb	r0, r4
 800781c:	f001 fc40 	bl	80090a0 <usb_dc_set_address>
	bool ret = true;
 8007820:	2001      	movs	r0, #1
		break;
 8007822:	e018      	b.n	8007856 <usb_handle_std_device_req+0x66>
		ret = usb_get_descriptor(value, index, len, data_buf);
 8007824:	4613      	mov	r3, r2
 8007826:	460a      	mov	r2, r1
 8007828:	4631      	mov	r1, r6
 800782a:	4620      	mov	r0, r4
 800782c:	f7ff fdd6 	bl	80073dc <usb_get_descriptor>
		break;
 8007830:	e011      	b.n	8007856 <usb_handle_std_device_req+0x66>
		data[0] = usb_dev.configuration;
 8007832:	4b09      	ldr	r3, [pc, #36]	; (8007858 <usb_handle_std_device_req+0x68>)
 8007834:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
 8007838:	702b      	strb	r3, [r5, #0]
		*len = 1;
 800783a:	2001      	movs	r0, #1
 800783c:	6008      	str	r0, [r1, #0]
		break;
 800783e:	e00a      	b.n	8007856 <usb_handle_std_device_req+0x66>
		if (!usb_set_configuration(value, 0)) {
 8007840:	b2e4      	uxtb	r4, r4
 8007842:	2100      	movs	r1, #0
 8007844:	4620      	mov	r0, r4
 8007846:	f7ff ff97 	bl	8007778 <usb_set_configuration>
 800784a:	b120      	cbz	r0, 8007856 <usb_handle_std_device_req+0x66>
			usb_dev.configuration = value;
 800784c:	4b02      	ldr	r3, [pc, #8]	; (8007858 <usb_handle_std_device_req+0x68>)
 800784e:	f883 40ba 	strb.w	r4, [r3, #186]	; 0xba
 8007852:	e000      	b.n	8007856 <usb_handle_std_device_req+0x66>
	switch (setup->bRequest) {
 8007854:	2000      	movs	r0, #0
}
 8007856:	bd70      	pop	{r4, r5, r6, pc}
 8007858:	20003660 	.word	0x20003660

0800785c <reset_endpoint>:
{
 800785c:	b510      	push	{r4, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
 800785e:	7884      	ldrb	r4, [r0, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
 8007860:	4620      	mov	r0, r4
 8007862:	f000 fdd3 	bl	800840c <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
 8007866:	4620      	mov	r0, r4
 8007868:	f001 fdda 	bl	8009420 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
 800786c:	f110 0f45 	cmn.w	r0, #69	; 0x45
 8007870:	d002      	beq.n	8007878 <reset_endpoint+0x1c>
	} else if (ret) {
 8007872:	b9a8      	cbnz	r0, 80078a0 <reset_endpoint+0x44>
	return true;
 8007874:	2001      	movs	r0, #1
}
 8007876:	bd10      	pop	{r4, pc}
		LOG_WRN("Endpoint 0x%02x already disabled", ep_cfg.ep_addr);
 8007878:	f04f 0200 	mov.w	r2, #0
 800787c:	2302      	movs	r3, #2
 800787e:	f363 0202 	bfi	r2, r3, #0, #3
 8007882:	f36f 02c5 	bfc	r2, #3, #3
 8007886:	4b10      	ldr	r3, [pc, #64]	; (80078c8 <reset_endpoint+0x6c>)
 8007888:	4910      	ldr	r1, [pc, #64]	; (80078cc <reset_endpoint+0x70>)
 800788a:	1a5b      	subs	r3, r3, r1
 800788c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8007890:	f363 128f 	bfi	r2, r3, #6, #10
 8007894:	4621      	mov	r1, r4
 8007896:	480e      	ldr	r0, [pc, #56]	; (80078d0 <reset_endpoint+0x74>)
 8007898:	f7fe fe52 	bl	8006540 <log_1>
	return true;
 800789c:	2001      	movs	r0, #1
 800789e:	e7ea      	b.n	8007876 <reset_endpoint+0x1a>
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_cfg.ep_addr);
 80078a0:	f04f 0200 	mov.w	r2, #0
 80078a4:	2301      	movs	r3, #1
 80078a6:	f363 0202 	bfi	r2, r3, #0, #3
 80078aa:	f36f 02c5 	bfc	r2, #3, #3
 80078ae:	4b06      	ldr	r3, [pc, #24]	; (80078c8 <reset_endpoint+0x6c>)
 80078b0:	4906      	ldr	r1, [pc, #24]	; (80078cc <reset_endpoint+0x70>)
 80078b2:	1a5b      	subs	r3, r3, r1
 80078b4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80078b8:	f363 128f 	bfi	r2, r3, #6, #10
 80078bc:	4621      	mov	r1, r4
 80078be:	4805      	ldr	r0, [pc, #20]	; (80078d4 <reset_endpoint+0x78>)
 80078c0:	f7fe fe3e 	bl	8006540 <log_1>
		return false;
 80078c4:	2000      	movs	r0, #0
 80078c6:	e7d6      	b.n	8007876 <reset_endpoint+0x1a>
 80078c8:	08022c48 	.word	0x08022c48
 80078cc:	08022b90 	.word	0x08022b90
 80078d0:	08025428 	.word	0x08025428
 80078d4:	0802544c 	.word	0x0802544c

080078d8 <usb_set_interface>:
{
 80078d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078dc:	4606      	mov	r6, r0
 80078de:	4689      	mov	r9, r1
	const uint8_t *p = usb_dev.descriptors;
 80078e0:	4b15      	ldr	r3, [pc, #84]	; (8007938 <usb_set_interface+0x60>)
 80078e2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	bool ret = false;
 80078e4:	f04f 0800 	mov.w	r8, #0
	uint8_t cur_iface = 0xFF;
 80078e8:	25ff      	movs	r5, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
 80078ea:	462f      	mov	r7, r5
	const uint8_t *if_desc = NULL;
 80078ec:	46c2      	mov	sl, r8
 80078ee:	e005      	b.n	80078fc <usb_set_interface+0x24>
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
 80078f0:	78e7      	ldrb	r7, [r4, #3]
			cur_iface = p[INTF_DESC_bInterfaceNumber];
 80078f2:	78a5      	ldrb	r5, [r4, #2]
			if (cur_iface == iface &&
 80078f4:	42b5      	cmp	r5, r6
 80078f6:	d011      	beq.n	800791c <usb_set_interface+0x44>
		p += p[DESC_bLength];
 80078f8:	7823      	ldrb	r3, [r4, #0]
 80078fa:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
 80078fc:	7823      	ldrb	r3, [r4, #0]
 80078fe:	b18b      	cbz	r3, 8007924 <usb_set_interface+0x4c>
		switch (p[DESC_bDescriptorType]) {
 8007900:	7863      	ldrb	r3, [r4, #1]
 8007902:	2b04      	cmp	r3, #4
 8007904:	d0f4      	beq.n	80078f0 <usb_set_interface+0x18>
 8007906:	2b05      	cmp	r3, #5
 8007908:	d1f6      	bne.n	80078f8 <usb_set_interface+0x20>
			if (cur_iface == iface) {
 800790a:	42ae      	cmp	r6, r5
 800790c:	d1f4      	bne.n	80078f8 <usb_set_interface+0x20>
				ret = usb_eps_reconfigure(ep, cur_alt_setting,
 800790e:	464a      	mov	r2, r9
 8007910:	4639      	mov	r1, r7
 8007912:	4620      	mov	r0, r4
 8007914:	f013 feab 	bl	801b66e <usb_eps_reconfigure>
 8007918:	4680      	mov	r8, r0
 800791a:	e7ed      	b.n	80078f8 <usb_set_interface+0x20>
			if (cur_iface == iface &&
 800791c:	454f      	cmp	r7, r9
 800791e:	d1eb      	bne.n	80078f8 <usb_set_interface+0x20>
				if_desc = (void *)p;
 8007920:	46a2      	mov	sl, r4
 8007922:	e7e9      	b.n	80078f8 <usb_set_interface+0x20>
	if (usb_dev.status_callback) {
 8007924:	4b04      	ldr	r3, [pc, #16]	; (8007938 <usb_set_interface+0x60>)
 8007926:	69db      	ldr	r3, [r3, #28]
 8007928:	b113      	cbz	r3, 8007930 <usb_set_interface+0x58>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
 800792a:	4651      	mov	r1, sl
 800792c:	2007      	movs	r0, #7
 800792e:	4798      	blx	r3
}
 8007930:	4640      	mov	r0, r8
 8007932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007936:	bf00      	nop
 8007938:	20003660 	.word	0x20003660

0800793c <usb_handle_std_endpoint_req>:
{
 800793c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007940:	b082      	sub	sp, #8
 8007942:	4604      	mov	r4, r0
 8007944:	460e      	mov	r6, r1
	uint8_t ep = (uint8_t)setup->wIndex;
 8007946:	7905      	ldrb	r5, [r0, #4]
 8007948:	f88d 5007 	strb.w	r5, [sp, #7]
	uint8_t *data = *data_buf;
 800794c:	f8d2 8000 	ldr.w	r8, [r2]
	if (!is_ep_valid(ep)) {
 8007950:	4628      	mov	r0, r5
 8007952:	f7ff fd8b 	bl	800746c <is_ep_valid>
 8007956:	4607      	mov	r7, r0
 8007958:	b130      	cbz	r0, 8007968 <usb_handle_std_endpoint_req+0x2c>
	switch (setup->bRequest) {
 800795a:	7863      	ldrb	r3, [r4, #1]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d018      	beq.n	8007992 <usb_handle_std_endpoint_req+0x56>
 8007960:	2b03      	cmp	r3, #3
 8007962:	d03f      	beq.n	80079e4 <usb_handle_std_endpoint_req+0xa8>
 8007964:	b123      	cbz	r3, 8007970 <usb_handle_std_endpoint_req+0x34>
 8007966:	2700      	movs	r7, #0
}
 8007968:	4638      	mov	r0, r7
 800796a:	b002      	add	sp, #8
 800796c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
 8007970:	f035 0380 	bics.w	r3, r5, #128	; 0x80
 8007974:	d003      	beq.n	800797e <usb_handle_std_endpoint_req+0x42>
 8007976:	f7ff fd5d 	bl	8007434 <is_device_configured>
 800797a:	2800      	cmp	r0, #0
 800797c:	d059      	beq.n	8007a32 <usb_handle_std_endpoint_req+0xf6>
			usb_dc_ep_is_stalled(ep, &data[0]);
 800797e:	4641      	mov	r1, r8
 8007980:	4628      	mov	r0, r5
 8007982:	f014 f985 	bl	801bc90 <usb_dc_ep_is_stalled>
			data[1] = 0U;
 8007986:	2300      	movs	r3, #0
 8007988:	f888 3001 	strb.w	r3, [r8, #1]
			*len = 2;
 800798c:	2302      	movs	r3, #2
 800798e:	6033      	str	r3, [r6, #0]
			break;
 8007990:	e7ea      	b.n	8007968 <usb_handle_std_endpoint_req+0x2c>
		if (setup->wValue == FEA_ENDPOINT_HALT) {
 8007992:	8863      	ldrh	r3, [r4, #2]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d14e      	bne.n	8007a36 <usb_handle_std_endpoint_req+0xfa>
			if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
 8007998:	f035 0380 	bics.w	r3, r5, #128	; 0x80
 800799c:	d003      	beq.n	80079a6 <usb_handle_std_endpoint_req+0x6a>
 800799e:	f7ff fd49 	bl	8007434 <is_device_configured>
 80079a2:	2800      	cmp	r0, #0
 80079a4:	d049      	beq.n	8007a3a <usb_handle_std_endpoint_req+0xfe>
				LOG_INF("... EP clear halt %x", ep);
 80079a6:	f04f 0200 	mov.w	r2, #0
 80079aa:	2303      	movs	r3, #3
 80079ac:	f363 0202 	bfi	r2, r3, #0, #3
 80079b0:	f36f 02c5 	bfc	r2, #3, #3
 80079b4:	4b24      	ldr	r3, [pc, #144]	; (8007a48 <usb_handle_std_endpoint_req+0x10c>)
 80079b6:	4925      	ldr	r1, [pc, #148]	; (8007a4c <usb_handle_std_endpoint_req+0x110>)
 80079b8:	1a5b      	subs	r3, r3, r1
 80079ba:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80079be:	f363 128f 	bfi	r2, r3, #6, #10
 80079c2:	4629      	mov	r1, r5
 80079c4:	4822      	ldr	r0, [pc, #136]	; (8007a50 <usb_handle_std_endpoint_req+0x114>)
 80079c6:	f7fe fdbb 	bl	8006540 <log_1>
				usb_dc_ep_clear_stall(ep);
 80079ca:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80079ce:	f001 fcb9 	bl	8009344 <usb_dc_ep_clear_stall>
				if (usb_dev.status_callback) {
 80079d2:	4b20      	ldr	r3, [pc, #128]	; (8007a54 <usb_handle_std_endpoint_req+0x118>)
 80079d4:	69db      	ldr	r3, [r3, #28]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d0c6      	beq.n	8007968 <usb_handle_std_endpoint_req+0x2c>
					usb_dev.status_callback(
 80079da:	f10d 0107 	add.w	r1, sp, #7
 80079de:	2009      	movs	r0, #9
 80079e0:	4798      	blx	r3
 80079e2:	e7c1      	b.n	8007968 <usb_handle_std_endpoint_req+0x2c>
		if (setup->wValue == FEA_ENDPOINT_HALT) {
 80079e4:	8863      	ldrh	r3, [r4, #2]
 80079e6:	bb53      	cbnz	r3, 8007a3e <usb_handle_std_endpoint_req+0x102>
			if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
 80079e8:	f035 0380 	bics.w	r3, r5, #128	; 0x80
 80079ec:	d002      	beq.n	80079f4 <usb_handle_std_endpoint_req+0xb8>
 80079ee:	f7ff fd21 	bl	8007434 <is_device_configured>
 80079f2:	b330      	cbz	r0, 8007a42 <usb_handle_std_endpoint_req+0x106>
				LOG_INF("--- EP SET halt %x", ep);
 80079f4:	f04f 0200 	mov.w	r2, #0
 80079f8:	2303      	movs	r3, #3
 80079fa:	f363 0202 	bfi	r2, r3, #0, #3
 80079fe:	f36f 02c5 	bfc	r2, #3, #3
 8007a02:	4b11      	ldr	r3, [pc, #68]	; (8007a48 <usb_handle_std_endpoint_req+0x10c>)
 8007a04:	4911      	ldr	r1, [pc, #68]	; (8007a4c <usb_handle_std_endpoint_req+0x110>)
 8007a06:	1a5b      	subs	r3, r3, r1
 8007a08:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8007a0c:	f363 128f 	bfi	r2, r3, #6, #10
 8007a10:	4629      	mov	r1, r5
 8007a12:	4811      	ldr	r0, [pc, #68]	; (8007a58 <usb_handle_std_endpoint_req+0x11c>)
 8007a14:	f7fe fd94 	bl	8006540 <log_1>
				usb_dc_ep_set_stall(ep);
 8007a18:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8007a1c:	f001 fc62 	bl	80092e4 <usb_dc_ep_set_stall>
				if (usb_dev.status_callback) {
 8007a20:	4b0c      	ldr	r3, [pc, #48]	; (8007a54 <usb_handle_std_endpoint_req+0x118>)
 8007a22:	69db      	ldr	r3, [r3, #28]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d09f      	beq.n	8007968 <usb_handle_std_endpoint_req+0x2c>
					usb_dev.status_callback(
 8007a28:	f10d 0107 	add.w	r1, sp, #7
 8007a2c:	2008      	movs	r0, #8
 8007a2e:	4798      	blx	r3
 8007a30:	e79a      	b.n	8007968 <usb_handle_std_endpoint_req+0x2c>
		return false;
 8007a32:	4607      	mov	r7, r0
 8007a34:	e798      	b.n	8007968 <usb_handle_std_endpoint_req+0x2c>
		return false;
 8007a36:	2700      	movs	r7, #0
 8007a38:	e796      	b.n	8007968 <usb_handle_std_endpoint_req+0x2c>
 8007a3a:	4607      	mov	r7, r0
 8007a3c:	e794      	b.n	8007968 <usb_handle_std_endpoint_req+0x2c>
		return false;
 8007a3e:	2700      	movs	r7, #0
 8007a40:	e792      	b.n	8007968 <usb_handle_std_endpoint_req+0x2c>
 8007a42:	4607      	mov	r7, r0
 8007a44:	e790      	b.n	8007968 <usb_handle_std_endpoint_req+0x2c>
 8007a46:	bf00      	nop
 8007a48:	08022c48 	.word	0x08022c48
 8007a4c:	08022b90 	.word	0x08022b90
 8007a50:	08025470 	.word	0x08025470
 8007a54:	20003660 	.word	0x20003660
 8007a58:	08025488 	.word	0x08025488

08007a5c <usb_handle_standard_request>:
{
 8007a5c:	b570      	push	{r4, r5, r6, lr}
 8007a5e:	4604      	mov	r4, r0
 8007a60:	460d      	mov	r5, r1
 8007a62:	4616      	mov	r6, r2
	if (usb_dev.custom_req_handler &&
 8007a64:	4b18      	ldr	r3, [pc, #96]	; (8007ac8 <usb_handle_standard_request+0x6c>)
 8007a66:	699b      	ldr	r3, [r3, #24]
 8007a68:	b10b      	cbz	r3, 8007a6e <usb_handle_standard_request+0x12>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
 8007a6a:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
 8007a6c:	b148      	cbz	r0, 8007a82 <usb_handle_standard_request+0x26>
	switch (REQTYPE_GET_RECIP(setup->bmRequestType)) {
 8007a6e:	7823      	ldrb	r3, [r4, #0]
 8007a70:	f003 031f 	and.w	r3, r3, #31
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d00d      	beq.n	8007a94 <usb_handle_standard_request+0x38>
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d013      	beq.n	8007aa4 <usb_handle_standard_request+0x48>
 8007a7c:	b113      	cbz	r3, 8007a84 <usb_handle_standard_request+0x28>
 8007a7e:	f06f 0015 	mvn.w	r0, #21
}
 8007a82:	bd70      	pop	{r4, r5, r6, pc}
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
 8007a84:	4632      	mov	r2, r6
 8007a86:	4629      	mov	r1, r5
 8007a88:	4620      	mov	r0, r4
 8007a8a:	f7ff feb1 	bl	80077f0 <usb_handle_std_device_req>
 8007a8e:	b188      	cbz	r0, 8007ab4 <usb_handle_standard_request+0x58>
	int rc = 0;
 8007a90:	2000      	movs	r0, #0
 8007a92:	e7f6      	b.n	8007a82 <usb_handle_standard_request+0x26>
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
 8007a94:	4632      	mov	r2, r6
 8007a96:	4629      	mov	r1, r5
 8007a98:	4620      	mov	r0, r4
 8007a9a:	f013 fdf1 	bl	801b680 <usb_handle_std_interface_req>
 8007a9e:	b160      	cbz	r0, 8007aba <usb_handle_standard_request+0x5e>
	int rc = 0;
 8007aa0:	2000      	movs	r0, #0
 8007aa2:	e7ee      	b.n	8007a82 <usb_handle_standard_request+0x26>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
 8007aa4:	4632      	mov	r2, r6
 8007aa6:	4629      	mov	r1, r5
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	f7ff ff47 	bl	800793c <usb_handle_std_endpoint_req>
 8007aae:	b138      	cbz	r0, 8007ac0 <usb_handle_standard_request+0x64>
	int rc = 0;
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	e7e6      	b.n	8007a82 <usb_handle_standard_request+0x26>
			rc = -EINVAL;
 8007ab4:	f06f 0015 	mvn.w	r0, #21
 8007ab8:	e7e3      	b.n	8007a82 <usb_handle_standard_request+0x26>
			rc = -EINVAL;
 8007aba:	f06f 0015 	mvn.w	r0, #21
 8007abe:	e7e0      	b.n	8007a82 <usb_handle_standard_request+0x26>
			rc = -EINVAL;
 8007ac0:	f06f 0015 	mvn.w	r0, #21
 8007ac4:	e7dd      	b.n	8007a82 <usb_handle_standard_request+0x26>
 8007ac6:	bf00      	nop
 8007ac8:	20003660 	.word	0x20003660

08007acc <composite_setup_ep_cb>:

static int composite_setup_ep_cb(void)
{
 8007acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	size_t size = (__usb_data_end - __usb_data_start);
 8007ace:	4f15      	ldr	r7, [pc, #84]	; (8007b24 <composite_setup_ep_cb+0x58>)
 8007ad0:	4b15      	ldr	r3, [pc, #84]	; (8007b28 <composite_setup_ep_cb+0x5c>)
 8007ad2:	1aff      	subs	r7, r7, r3
 8007ad4:	10bb      	asrs	r3, r7, #2
 8007ad6:	4f15      	ldr	r7, [pc, #84]	; (8007b2c <composite_setup_ep_cb+0x60>)
 8007ad8:	fb07 f703 	mul.w	r7, r7, r3
	struct usb_ep_cfg_data *ep_data;

	for (size_t i = 0; i < size; i++) {
 8007adc:	2500      	movs	r5, #0
 8007ade:	42af      	cmp	r7, r5
 8007ae0:	d91b      	bls.n	8007b1a <composite_setup_ep_cb+0x4e>
		ep_data = __usb_data_start[i].endpoint;
 8007ae2:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8007ae6:	4a10      	ldr	r2, [pc, #64]	; (8007b28 <composite_setup_ep_cb+0x5c>)
 8007ae8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007aec:	6a1e      	ldr	r6, [r3, #32]
		for (uint8_t n = 0; n < __usb_data_start[i].num_endpoints; n++) {
 8007aee:	2400      	movs	r4, #0
 8007af0:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8007af4:	4a0c      	ldr	r2, [pc, #48]	; (8007b28 <composite_setup_ep_cb+0x5c>)
 8007af6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007afa:	7f1b      	ldrb	r3, [r3, #28]
 8007afc:	429c      	cmp	r4, r3
 8007afe:	d20a      	bcs.n	8007b16 <composite_setup_ep_cb+0x4a>
			LOG_DBG("set cb, ep: 0x%x", ep_data[n].ep_addr);
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
 8007b00:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
 8007b04:	f856 1034 	ldr.w	r1, [r6, r4, lsl #3]
 8007b08:	7918      	ldrb	r0, [r3, #4]
 8007b0a:	f014 f8b6 	bl	801bc7a <usb_dc_ep_set_callback>
 8007b0e:	b930      	cbnz	r0, 8007b1e <composite_setup_ep_cb+0x52>
		for (uint8_t n = 0; n < __usb_data_start[i].num_endpoints; n++) {
 8007b10:	3401      	adds	r4, #1
 8007b12:	b2e4      	uxtb	r4, r4
 8007b14:	e7ec      	b.n	8007af0 <composite_setup_ep_cb+0x24>
	for (size_t i = 0; i < size; i++) {
 8007b16:	3501      	adds	r5, #1
 8007b18:	e7e1      	b.n	8007ade <composite_setup_ep_cb+0x12>
				return -1;
			}
		}
	}

	return 0;
 8007b1a:	2000      	movs	r0, #0
 8007b1c:	e001      	b.n	8007b22 <composite_setup_ep_cb+0x56>
				return -1;
 8007b1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8007b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b24:	20001294 	.word	0x20001294
 8007b28:	20001270 	.word	0x20001270
 8007b2c:	38e38e39 	.word	0x38e38e39

08007b30 <forward_status_cb>:
{
 8007b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b32:	4606      	mov	r6, r0
 8007b34:	460f      	mov	r7, r1
	size_t size = (__usb_data_end - __usb_data_start);
 8007b36:	4d1a      	ldr	r5, [pc, #104]	; (8007ba0 <forward_status_cb+0x70>)
 8007b38:	4b1a      	ldr	r3, [pc, #104]	; (8007ba4 <forward_status_cb+0x74>)
 8007b3a:	1aed      	subs	r5, r5, r3
 8007b3c:	10ab      	asrs	r3, r5, #2
 8007b3e:	4d1a      	ldr	r5, [pc, #104]	; (8007ba8 <forward_status_cb+0x78>)
 8007b40:	fb05 f503 	mul.w	r5, r5, r3
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND) {
 8007b44:	1f03      	subs	r3, r0, #4
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d901      	bls.n	8007b50 <forward_status_cb+0x20>
{
 8007b4c:	2400      	movs	r4, #0
 8007b4e:	e011      	b.n	8007b74 <forward_status_cb+0x44>
		if (usb_dev.configured) {
 8007b50:	4b16      	ldr	r3, [pc, #88]	; (8007bac <forward_status_cb+0x7c>)
 8007b52:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d0f8      	beq.n	8007b4c <forward_status_cb+0x1c>
			usb_cancel_transfers();
 8007b5a:	f000 fc89 	bl	8008470 <usb_cancel_transfers>
			if (status == USB_DC_DISCONNECTED) {
 8007b5e:	2e04      	cmp	r6, #4
 8007b60:	d1f4      	bne.n	8007b4c <forward_status_cb+0x1c>
				foreach_ep(disable_interface_ep);
 8007b62:	4813      	ldr	r0, [pc, #76]	; (8007bb0 <forward_status_cb+0x80>)
 8007b64:	f7ff fcc2 	bl	80074ec <foreach_ep>
				usb_dev.configured = false;
 8007b68:	4b10      	ldr	r3, [pc, #64]	; (8007bac <forward_status_cb+0x7c>)
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
 8007b70:	e7ec      	b.n	8007b4c <forward_status_cb+0x1c>
	for (size_t i = 0; i < size; i++) {
 8007b72:	3401      	adds	r4, #1
 8007b74:	42ac      	cmp	r4, r5
 8007b76:	d20b      	bcs.n	8007b90 <forward_status_cb+0x60>
		struct usb_cfg_data *cfg = &__usb_data_start[i];
 8007b78:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 8007b7c:	4b09      	ldr	r3, [pc, #36]	; (8007ba4 <forward_status_cb+0x74>)
 8007b7e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
		if (cfg->cb_usb_status) {
 8007b82:	68c3      	ldr	r3, [r0, #12]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d0f4      	beq.n	8007b72 <forward_status_cb+0x42>
			cfg->cb_usb_status(cfg, status, param);
 8007b88:	463a      	mov	r2, r7
 8007b8a:	4631      	mov	r1, r6
 8007b8c:	4798      	blx	r3
 8007b8e:	e7f0      	b.n	8007b72 <forward_status_cb+0x42>
	if (usb_dev.user_status_callback) {
 8007b90:	4b06      	ldr	r3, [pc, #24]	; (8007bac <forward_status_cb+0x7c>)
 8007b92:	6a1b      	ldr	r3, [r3, #32]
 8007b94:	b113      	cbz	r3, 8007b9c <forward_status_cb+0x6c>
		usb_dev.user_status_callback(status, param);
 8007b96:	4639      	mov	r1, r7
 8007b98:	4630      	mov	r0, r6
 8007b9a:	4798      	blx	r3
}
 8007b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	20001294 	.word	0x20001294
 8007ba4:	20001270 	.word	0x20001270
 8007ba8:	38e38e39 	.word	0x38e38e39
 8007bac:	20003660 	.word	0x20003660
 8007bb0:	0801b6db 	.word	0x0801b6db

08007bb4 <usb_write>:
{
 8007bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bb8:	4606      	mov	r6, r0
 8007bba:	4689      	mov	r9, r1
 8007bbc:	4690      	mov	r8, r2
 8007bbe:	461f      	mov	r7, r3
	int tries = CONFIG_USB_NUMOF_EP_WRITE_RETRIES;
 8007bc0:	250a      	movs	r5, #10
 8007bc2:	e018      	b.n	8007bf6 <usb_write+0x42>
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
 8007bc4:	2302      	movs	r3, #2
 8007bc6:	f363 0a02 	bfi	sl, r3, #0, #3
 8007bca:	f36f 0ac5 	bfc	sl, #3, #3
 8007bce:	4b11      	ldr	r3, [pc, #68]	; (8007c14 <usb_write+0x60>)
 8007bd0:	4a11      	ldr	r2, [pc, #68]	; (8007c18 <usb_write+0x64>)
 8007bd2:	1a9b      	subs	r3, r3, r2
 8007bd4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8007bd8:	f363 1a8f 	bfi	sl, r3, #6, #10
 8007bdc:	4652      	mov	r2, sl
 8007bde:	4631      	mov	r1, r6
 8007be0:	480e      	ldr	r0, [pc, #56]	; (8007c1c <usb_write+0x68>)
 8007be2:	f7fe fcad 	bl	8006540 <log_1>
	z_impl_k_yield();
 8007be6:	f010 ff7d 	bl	8018ae4 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
 8007bea:	f114 0f0b 	cmn.w	r4, #11
 8007bee:	d10d      	bne.n	8007c0c <usb_write+0x58>
 8007bf0:	1e6b      	subs	r3, r5, #1
 8007bf2:	b15d      	cbz	r5, 8007c0c <usb_write+0x58>
 8007bf4:	461d      	mov	r5, r3
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
 8007bf6:	463b      	mov	r3, r7
 8007bf8:	4642      	mov	r2, r8
 8007bfa:	4649      	mov	r1, r9
 8007bfc:	4630      	mov	r0, r6
 8007bfe:	f001 fc3d 	bl	800947c <usb_dc_ep_write>
 8007c02:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
 8007c04:	f110 0f0b 	cmn.w	r0, #11
 8007c08:	d1ef      	bne.n	8007bea <usb_write+0x36>
 8007c0a:	e7db      	b.n	8007bc4 <usb_write+0x10>
}
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c12:	bf00      	nop
 8007c14:	08022c48 	.word	0x08022c48
 8007c18:	08022b90 	.word	0x08022b90
 8007c1c:	0802549c 	.word	0x0802549c

08007c20 <usb_data_to_host>:
{
 8007c20:	b530      	push	{r4, r5, lr}
 8007c22:	b083      	sub	sp, #12
	if (usb_dev.zlp_flag == false) {
 8007c24:	4b13      	ldr	r3, [pc, #76]	; (8007c74 <usb_data_to_host+0x54>)
 8007c26:	7d1b      	ldrb	r3, [r3, #20]
 8007c28:	b9cb      	cbnz	r3, 8007c5e <usb_data_to_host+0x3e>
 8007c2a:	4605      	mov	r5, r0
		uint32_t chunk = usb_dev.data_buf_residue;
 8007c2c:	4c11      	ldr	r4, [pc, #68]	; (8007c74 <usb_data_to_host+0x54>)
 8007c2e:	68e2      	ldr	r2, [r4, #12]
 8007c30:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_IN_EP0, usb_dev.data_buf,
 8007c32:	ab01      	add	r3, sp, #4
 8007c34:	68a1      	ldr	r1, [r4, #8]
 8007c36:	2080      	movs	r0, #128	; 0x80
 8007c38:	f7ff ffbc 	bl	8007bb4 <usb_write>
		usb_dev.data_buf += chunk;
 8007c3c:	9901      	ldr	r1, [sp, #4]
 8007c3e:	68a2      	ldr	r2, [r4, #8]
 8007c40:	440a      	add	r2, r1
 8007c42:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
 8007c44:	68e3      	ldr	r3, [r4, #12]
 8007c46:	1a5b      	subs	r3, r3, r1
 8007c48:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && len > usb_dev.data_buf_len) {
 8007c4a:	b983      	cbnz	r3, 8007c6e <usb_data_to_host+0x4e>
 8007c4c:	6923      	ldr	r3, [r4, #16]
 8007c4e:	429d      	cmp	r5, r3
 8007c50:	dd0d      	ble.n	8007c6e <usb_data_to_host+0x4e>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
 8007c52:	f013 0f3f 	tst.w	r3, #63	; 0x3f
 8007c56:	d10a      	bne.n	8007c6e <usb_data_to_host+0x4e>
				usb_dev.zlp_flag = true;
 8007c58:	2201      	movs	r2, #1
 8007c5a:	7522      	strb	r2, [r4, #20]
 8007c5c:	e007      	b.n	8007c6e <usb_data_to_host+0x4e>
		usb_dev.zlp_flag = false;
 8007c5e:	2100      	movs	r1, #0
 8007c60:	4b04      	ldr	r3, [pc, #16]	; (8007c74 <usb_data_to_host+0x54>)
 8007c62:	7519      	strb	r1, [r3, #20]
		usb_dc_ep_write(USB_CONTROL_IN_EP0, NULL, 0, NULL);
 8007c64:	460b      	mov	r3, r1
 8007c66:	460a      	mov	r2, r1
 8007c68:	2080      	movs	r0, #128	; 0x80
 8007c6a:	f001 fc07 	bl	800947c <usb_dc_ep_write>
}
 8007c6e:	b003      	add	sp, #12
 8007c70:	bd30      	pop	{r4, r5, pc}
 8007c72:	bf00      	nop
 8007c74:	20003660 	.word	0x20003660

08007c78 <usb_handle_control_transfer>:
{
 8007c78:	b510      	push	{r4, lr}
 8007c7a:	b084      	sub	sp, #16
	uint32_t chunk = 0U;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	9303      	str	r3, [sp, #12]
	if (ep == USB_CONTROL_OUT_EP0 && ep_status == USB_DC_EP_SETUP) {
 8007c80:	4604      	mov	r4, r0
 8007c82:	b900      	cbnz	r0, 8007c86 <usb_handle_control_transfer+0xe>
 8007c84:	b349      	cbz	r1, 8007cda <usb_handle_control_transfer+0x62>
	} else if (ep == USB_CONTROL_OUT_EP0) {
 8007c86:	2c00      	cmp	r4, #0
 8007c88:	f040 8096 	bne.w	8007db8 <usb_handle_control_transfer+0x140>
		if (usb_dev.data_buf_residue <= 0) {
 8007c8c:	4b52      	ldr	r3, [pc, #328]	; (8007dd8 <usb_handle_control_transfer+0x160>)
 8007c8e:	68da      	ldr	r2, [r3, #12]
 8007c90:	2a00      	cmp	r2, #0
 8007c92:	dd79      	ble.n	8007d88 <usb_handle_control_transfer+0x110>
		if (usb_dc_ep_read(USB_CONTROL_OUT_EP0,
 8007c94:	ab03      	add	r3, sp, #12
 8007c96:	4950      	ldr	r1, [pc, #320]	; (8007dd8 <usb_handle_control_transfer+0x160>)
 8007c98:	6889      	ldr	r1, [r1, #8]
 8007c9a:	2000      	movs	r0, #0
 8007c9c:	f014 f808 	bl	801bcb0 <usb_dc_ep_read>
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	db7e      	blt.n	8007da2 <usb_handle_control_transfer+0x12a>
		usb_dev.data_buf += chunk;
 8007ca4:	9803      	ldr	r0, [sp, #12]
 8007ca6:	4a4c      	ldr	r2, [pc, #304]	; (8007dd8 <usb_handle_control_transfer+0x160>)
 8007ca8:	6891      	ldr	r1, [r2, #8]
 8007caa:	4401      	add	r1, r0
 8007cac:	6091      	str	r1, [r2, #8]
		usb_dev.data_buf_residue -= chunk;
 8007cae:	68d3      	ldr	r3, [r2, #12]
 8007cb0:	1a1b      	subs	r3, r3, r0
 8007cb2:	60d3      	str	r3, [r2, #12]
		if (usb_dev.data_buf_residue == 0) {
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f040 8081 	bne.w	8007dbc <usb_handle_control_transfer+0x144>
			usb_dev.data_buf = usb_dev.req_data;
 8007cba:	4610      	mov	r0, r2
 8007cbc:	f102 0338 	add.w	r3, r2, #56	; 0x38
 8007cc0:	f842 3f08 	str.w	r3, [r2, #8]!
			if (!usb_handle_request(setup,
 8007cc4:	f100 0110 	add.w	r1, r0, #16
 8007cc8:	f7ff fb66 	bl	8007398 <usb_handle_request>
 8007ccc:	2800      	cmp	r0, #0
 8007cce:	d06f      	beq.n	8007db0 <usb_handle_control_transfer+0x138>
			usb_data_to_host(setup->wLength);
 8007cd0:	4b41      	ldr	r3, [pc, #260]	; (8007dd8 <usb_handle_control_transfer+0x160>)
 8007cd2:	88d8      	ldrh	r0, [r3, #6]
 8007cd4:	f7ff ffa4 	bl	8007c20 <usb_data_to_host>
 8007cd8:	e070      	b.n	8007dbc <usb_handle_control_transfer+0x144>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
 8007cda:	2208      	movs	r2, #8
 8007cdc:	a901      	add	r1, sp, #4
 8007cde:	f013 ffe7 	bl	801bcb0 <usb_dc_ep_read>
 8007ce2:	2800      	cmp	r0, #0
 8007ce4:	db30      	blt.n	8007d48 <usb_handle_control_transfer+0xd0>
		setup->bmRequestType = setup_raw.bmRequestType;
 8007ce6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8007cea:	4b3b      	ldr	r3, [pc, #236]	; (8007dd8 <usb_handle_control_transfer+0x160>)
 8007cec:	7019      	strb	r1, [r3, #0]
		setup->bRequest = setup_raw.bRequest;
 8007cee:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8007cf2:	705a      	strb	r2, [r3, #1]
		setup->wValue = sys_le16_to_cpu(setup_raw.wValue);
 8007cf4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007cf8:	805a      	strh	r2, [r3, #2]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
 8007cfa:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8007cfe:	809a      	strh	r2, [r3, #4]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
 8007d00:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8007d04:	80da      	strh	r2, [r3, #6]
		if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
 8007d06:	2a80      	cmp	r2, #128	; 0x80
 8007d08:	d901      	bls.n	8007d0e <usb_handle_control_transfer+0x96>
			if (REQTYPE_GET_DIR(setup->bmRequestType)
 8007d0a:	09cb      	lsrs	r3, r1, #7
 8007d0c:	d020      	beq.n	8007d50 <usb_handle_control_transfer+0xd8>
		usb_dev.data_buf = usb_dev.req_data;
 8007d0e:	4b32      	ldr	r3, [pc, #200]	; (8007dd8 <usb_handle_control_transfer+0x160>)
 8007d10:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8007d14:	6098      	str	r0, [r3, #8]
		usb_dev.data_buf_residue = setup->wLength;
 8007d16:	60da      	str	r2, [r3, #12]
		usb_dev.data_buf_len = setup->wLength;
 8007d18:	611a      	str	r2, [r3, #16]
		usb_dev.zlp_flag = false;
 8007d1a:	2000      	movs	r0, #0
 8007d1c:	7518      	strb	r0, [r3, #20]
		if (setup->wLength &&
 8007d1e:	b10a      	cbz	r2, 8007d24 <usb_handle_control_transfer+0xac>
 8007d20:	09cb      	lsrs	r3, r1, #7
 8007d22:	d04b      	beq.n	8007dbc <usb_handle_control_transfer+0x144>
		if (!usb_handle_request(setup,
 8007d24:	482c      	ldr	r0, [pc, #176]	; (8007dd8 <usb_handle_control_transfer+0x160>)
 8007d26:	f100 0208 	add.w	r2, r0, #8
 8007d2a:	f100 0110 	add.w	r1, r0, #16
 8007d2e:	f7ff fb33 	bl	8007398 <usb_handle_request>
 8007d32:	b328      	cbz	r0, 8007d80 <usb_handle_control_transfer+0x108>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
 8007d34:	4b28      	ldr	r3, [pc, #160]	; (8007dd8 <usb_handle_control_transfer+0x160>)
 8007d36:	88d8      	ldrh	r0, [r3, #6]
 8007d38:	691a      	ldr	r2, [r3, #16]
 8007d3a:	4282      	cmp	r2, r0
 8007d3c:	bfa8      	it	ge
 8007d3e:	4602      	movge	r2, r0
 8007d40:	60da      	str	r2, [r3, #12]
		usb_data_to_host(setup->wLength);
 8007d42:	f7ff ff6d 	bl	8007c20 <usb_data_to_host>
 8007d46:	e039      	b.n	8007dbc <usb_handle_control_transfer+0x144>
			usb_dc_ep_set_stall(USB_CONTROL_IN_EP0);
 8007d48:	2080      	movs	r0, #128	; 0x80
 8007d4a:	f001 facb 	bl	80092e4 <usb_dc_ep_set_stall>
			return;
 8007d4e:	e035      	b.n	8007dbc <usb_handle_control_transfer+0x144>
				LOG_ERR("Request buffer too small");
 8007d50:	f04f 0100 	mov.w	r1, #0
 8007d54:	2301      	movs	r3, #1
 8007d56:	f363 0102 	bfi	r1, r3, #0, #3
 8007d5a:	f36f 01c5 	bfc	r1, #3, #3
 8007d5e:	4b1f      	ldr	r3, [pc, #124]	; (8007ddc <usb_handle_control_transfer+0x164>)
 8007d60:	4a1f      	ldr	r2, [pc, #124]	; (8007de0 <usb_handle_control_transfer+0x168>)
 8007d62:	1a9b      	subs	r3, r3, r2
 8007d64:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8007d68:	f363 118f 	bfi	r1, r3, #6, #10
 8007d6c:	481d      	ldr	r0, [pc, #116]	; (8007de4 <usb_handle_control_transfer+0x16c>)
 8007d6e:	f7fe fd57 	bl	8006820 <log_0>
				usb_dc_ep_set_stall(USB_CONTROL_IN_EP0);
 8007d72:	2080      	movs	r0, #128	; 0x80
 8007d74:	f001 fab6 	bl	80092e4 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_OUT_EP0);
 8007d78:	2000      	movs	r0, #0
 8007d7a:	f001 fab3 	bl	80092e4 <usb_dc_ep_set_stall>
				return;
 8007d7e:	e01d      	b.n	8007dbc <usb_handle_control_transfer+0x144>
			usb_dc_ep_set_stall(USB_CONTROL_IN_EP0);
 8007d80:	2080      	movs	r0, #128	; 0x80
 8007d82:	f001 faaf 	bl	80092e4 <usb_dc_ep_set_stall>
			return;
 8007d86:	e019      	b.n	8007dbc <usb_handle_control_transfer+0x144>
			if (usb_dc_ep_read(USB_CONTROL_OUT_EP0,
 8007d88:	ab03      	add	r3, sp, #12
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	4912      	ldr	r1, [pc, #72]	; (8007dd8 <usb_handle_control_transfer+0x160>)
 8007d8e:	6889      	ldr	r1, [r1, #8]
 8007d90:	4610      	mov	r0, r2
 8007d92:	f013 ff8d 	bl	801bcb0 <usb_dc_ep_read>
 8007d96:	2800      	cmp	r0, #0
 8007d98:	da10      	bge.n	8007dbc <usb_handle_control_transfer+0x144>
				usb_dc_ep_set_stall(USB_CONTROL_IN_EP0);
 8007d9a:	2080      	movs	r0, #128	; 0x80
 8007d9c:	f001 faa2 	bl	80092e4 <usb_dc_ep_set_stall>
			return;
 8007da0:	e00c      	b.n	8007dbc <usb_handle_control_transfer+0x144>
			usb_dc_ep_set_stall(USB_CONTROL_IN_EP0);
 8007da2:	2080      	movs	r0, #128	; 0x80
 8007da4:	f001 fa9e 	bl	80092e4 <usb_dc_ep_set_stall>
			usb_dc_ep_set_stall(USB_CONTROL_OUT_EP0);
 8007da8:	2000      	movs	r0, #0
 8007daa:	f001 fa9b 	bl	80092e4 <usb_dc_ep_set_stall>
			return;
 8007dae:	e005      	b.n	8007dbc <usb_handle_control_transfer+0x144>
				usb_dc_ep_set_stall(USB_CONTROL_IN_EP0);
 8007db0:	2080      	movs	r0, #128	; 0x80
 8007db2:	f001 fa97 	bl	80092e4 <usb_dc_ep_set_stall>
				return;
 8007db6:	e001      	b.n	8007dbc <usb_handle_control_transfer+0x144>
	} else if (ep == USB_CONTROL_IN_EP0) {
 8007db8:	2c80      	cmp	r4, #128	; 0x80
 8007dba:	d001      	beq.n	8007dc0 <usb_handle_control_transfer+0x148>
}
 8007dbc:	b004      	add	sp, #16
 8007dbe:	bd10      	pop	{r4, pc}
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
 8007dc0:	4b05      	ldr	r3, [pc, #20]	; (8007dd8 <usb_handle_control_transfer+0x160>)
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	b91b      	cbnz	r3, 8007dce <usb_handle_control_transfer+0x156>
 8007dc6:	4b04      	ldr	r3, [pc, #16]	; (8007dd8 <usb_handle_control_transfer+0x160>)
 8007dc8:	7d1b      	ldrb	r3, [r3, #20]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d0f6      	beq.n	8007dbc <usb_handle_control_transfer+0x144>
			usb_data_to_host(setup->wLength);
 8007dce:	4b02      	ldr	r3, [pc, #8]	; (8007dd8 <usb_handle_control_transfer+0x160>)
 8007dd0:	88d8      	ldrh	r0, [r3, #6]
 8007dd2:	f7ff ff25 	bl	8007c20 <usb_data_to_host>
		__ASSERT_NO_MSG(false);
 8007dd6:	e7f1      	b.n	8007dbc <usb_handle_control_transfer+0x144>
 8007dd8:	20003660 	.word	0x20003660
 8007ddc:	08022c48 	.word	0x08022c48
 8007de0:	08022b90 	.word	0x08022b90
 8007de4:	080254c4 	.word	0x080254c4

08007de8 <usb_set_config>:

int usb_set_config(const uint8_t *device_descriptor)
{
 8007de8:	b508      	push	{r3, lr}
	/* register descriptors */
	usb_register_descriptors(device_descriptor);
 8007dea:	f7ff faf1 	bl	80073d0 <usb_register_descriptors>

	/* register standard request handler */
	usb_register_request_handler(REQTYPE_TYPE_STANDARD,
 8007dee:	4908      	ldr	r1, [pc, #32]	; (8007e10 <usb_set_config+0x28>)
 8007df0:	2000      	movs	r0, #0
 8007df2:	f7ff fae5 	bl	80073c0 <usb_register_request_handler>
				     usb_handle_standard_request);

	/* register class request handlers for each interface*/
	usb_register_request_handler(REQTYPE_TYPE_CLASS, class_handler);
 8007df6:	4907      	ldr	r1, [pc, #28]	; (8007e14 <usb_set_config+0x2c>)
 8007df8:	2001      	movs	r0, #1
 8007dfa:	f7ff fae1 	bl	80073c0 <usb_register_request_handler>

	/* register vendor request handler */
	usb_register_request_handler(REQTYPE_TYPE_VENDOR, vendor_handler);
 8007dfe:	4906      	ldr	r1, [pc, #24]	; (8007e18 <usb_set_config+0x30>)
 8007e00:	2002      	movs	r0, #2
 8007e02:	f7ff fadd 	bl	80073c0 <usb_register_request_handler>

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);
 8007e06:	4805      	ldr	r0, [pc, #20]	; (8007e1c <usb_set_config+0x34>)
 8007e08:	f7ff fb64 	bl	80074d4 <usb_register_custom_req_handler>

	return 0;
}
 8007e0c:	2000      	movs	r0, #0
 8007e0e:	bd08      	pop	{r3, pc}
 8007e10:	08007a5d 	.word	0x08007a5d
 8007e14:	08007551 	.word	0x08007551
 8007e18:	08007619 	.word	0x08007619
 8007e1c:	080075b1 	.word	0x080075b1

08007e20 <usb_device_init>:
/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(const struct device *dev)
{
 8007e20:	b508      	push	{r3, lr}
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
 8007e22:	4b10      	ldr	r3, [pc, #64]	; (8007e64 <usb_device_init+0x44>)
 8007e24:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8007e28:	b10b      	cbz	r3, 8007e2e <usb_device_init+0xe>
		return 0;
 8007e2a:	2000      	movs	r0, #0
	}

	usb_set_config(device_descriptor);

	return 0;
}
 8007e2c:	bd08      	pop	{r3, pc}
	device_descriptor = usb_get_device_descriptor();
 8007e2e:	f000 f9d7 	bl	80081e0 <usb_get_device_descriptor>
	if (!device_descriptor) {
 8007e32:	b118      	cbz	r0, 8007e3c <usb_device_init+0x1c>
	usb_set_config(device_descriptor);
 8007e34:	f7ff ffd8 	bl	8007de8 <usb_set_config>
	return 0;
 8007e38:	2000      	movs	r0, #0
 8007e3a:	e7f7      	b.n	8007e2c <usb_device_init+0xc>
		LOG_ERR("Failed to configure USB device stack");
 8007e3c:	f04f 0100 	mov.w	r1, #0
 8007e40:	2301      	movs	r3, #1
 8007e42:	f363 0102 	bfi	r1, r3, #0, #3
 8007e46:	f36f 01c5 	bfc	r1, #3, #3
 8007e4a:	4b07      	ldr	r3, [pc, #28]	; (8007e68 <usb_device_init+0x48>)
 8007e4c:	4a07      	ldr	r2, [pc, #28]	; (8007e6c <usb_device_init+0x4c>)
 8007e4e:	1a9b      	subs	r3, r3, r2
 8007e50:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8007e54:	f363 118f 	bfi	r1, r3, #6, #10
 8007e58:	4805      	ldr	r0, [pc, #20]	; (8007e70 <usb_device_init+0x50>)
 8007e5a:	f7fe fce1 	bl	8006820 <log_0>
		return -1;
 8007e5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e62:	e7e3      	b.n	8007e2c <usb_device_init+0xc>
 8007e64:	20003660 	.word	0x20003660
 8007e68:	08022c48 	.word	0x08022c48
 8007e6c:	08022b90 	.word	0x08022b90
 8007e70:	080254e0 	.word	0x080254e0

08007e74 <usb_enable>:
{
 8007e74:	b530      	push	{r4, r5, lr}
 8007e76:	b083      	sub	sp, #12
 8007e78:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
 8007e7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e82:	482d      	ldr	r0, [pc, #180]	; (8007f38 <usb_enable+0xc4>)
 8007e84:	f010 fa12 	bl	80182ac <z_impl_k_mutex_lock>
	if (usb_dev.enabled == true) {
 8007e88:	4b2c      	ldr	r3, [pc, #176]	; (8007f3c <usb_enable+0xc8>)
 8007e8a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d14a      	bne.n	8007f28 <usb_enable+0xb4>
	ret = usb_vbus_set(true);
 8007e92:	2001      	movs	r0, #1
 8007e94:	f013 fbe9 	bl	801b66a <usb_vbus_set>
	if (ret < 0) {
 8007e98:	1e04      	subs	r4, r0, #0
 8007e9a:	db46      	blt.n	8007f2a <usb_enable+0xb6>
	usb_dev.user_status_callback = status_cb;
 8007e9c:	4b27      	ldr	r3, [pc, #156]	; (8007f3c <usb_enable+0xc8>)
 8007e9e:	621d      	str	r5, [r3, #32]
	usb_register_status_callback(forward_status_cb);
 8007ea0:	4c27      	ldr	r4, [pc, #156]	; (8007f40 <usb_enable+0xcc>)
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	f7ff fb1c 	bl	80074e0 <usb_register_status_callback>
	usb_dc_set_status_callback(forward_status_cb);
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	f001 f8f3 	bl	8009094 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
 8007eae:	f001 f8c3 	bl	8009038 <usb_dc_attach>
	if (ret < 0) {
 8007eb2:	1e04      	subs	r4, r0, #0
 8007eb4:	db39      	blt.n	8007f2a <usb_enable+0xb6>
	ret = usb_transfer_init();
 8007eb6:	f000 fb1d 	bl	80084f4 <usb_transfer_init>
	if (ret < 0) {
 8007eba:	1e04      	subs	r4, r0, #0
 8007ebc:	db35      	blt.n	8007f2a <usb_enable+0xb6>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
 8007ebe:	2340      	movs	r3, #64	; 0x40
 8007ec0:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	f88d 3004 	strb.w	r3, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_OUT_EP0;
 8007eca:	f88d 3000 	strb.w	r3, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
 8007ece:	4668      	mov	r0, sp
 8007ed0:	f001 f9c4 	bl	800925c <usb_dc_ep_configure>
	if (ret < 0) {
 8007ed4:	1e04      	subs	r4, r0, #0
 8007ed6:	db28      	blt.n	8007f2a <usb_enable+0xb6>
	ep0_cfg.ep_addr = USB_CONTROL_IN_EP0;
 8007ed8:	2380      	movs	r3, #128	; 0x80
 8007eda:	f88d 3000 	strb.w	r3, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
 8007ede:	4668      	mov	r0, sp
 8007ee0:	f001 f9bc 	bl	800925c <usb_dc_ep_configure>
	if (ret < 0) {
 8007ee4:	1e04      	subs	r4, r0, #0
 8007ee6:	db20      	blt.n	8007f2a <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_OUT_EP0,
 8007ee8:	4916      	ldr	r1, [pc, #88]	; (8007f44 <usb_enable+0xd0>)
 8007eea:	2000      	movs	r0, #0
 8007eec:	f013 fec5 	bl	801bc7a <usb_dc_ep_set_callback>
	if (ret < 0) {
 8007ef0:	1e04      	subs	r4, r0, #0
 8007ef2:	db1a      	blt.n	8007f2a <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_IN_EP0,
 8007ef4:	4913      	ldr	r1, [pc, #76]	; (8007f44 <usb_enable+0xd0>)
 8007ef6:	2080      	movs	r0, #128	; 0x80
 8007ef8:	f013 febf 	bl	801bc7a <usb_dc_ep_set_callback>
	if (ret < 0) {
 8007efc:	1e04      	subs	r4, r0, #0
 8007efe:	db14      	blt.n	8007f2a <usb_enable+0xb6>
	ret = composite_setup_ep_cb();
 8007f00:	f7ff fde4 	bl	8007acc <composite_setup_ep_cb>
	if (ret < 0) {
 8007f04:	1e04      	subs	r4, r0, #0
 8007f06:	db10      	blt.n	8007f2a <usb_enable+0xb6>
	ret = usb_dc_ep_enable(USB_CONTROL_OUT_EP0);
 8007f08:	2000      	movs	r0, #0
 8007f0a:	f001 fa4b 	bl	80093a4 <usb_dc_ep_enable>
	if (ret < 0) {
 8007f0e:	1e04      	subs	r4, r0, #0
 8007f10:	db0b      	blt.n	8007f2a <usb_enable+0xb6>
	ret = usb_dc_ep_enable(USB_CONTROL_IN_EP0);
 8007f12:	2080      	movs	r0, #128	; 0x80
 8007f14:	f001 fa46 	bl	80093a4 <usb_dc_ep_enable>
	if (ret < 0) {
 8007f18:	1e04      	subs	r4, r0, #0
 8007f1a:	db06      	blt.n	8007f2a <usb_enable+0xb6>
	usb_dev.enabled = true;
 8007f1c:	4b07      	ldr	r3, [pc, #28]	; (8007f3c <usb_enable+0xc8>)
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	ret = 0;
 8007f24:	2400      	movs	r4, #0
 8007f26:	e000      	b.n	8007f2a <usb_enable+0xb6>
		ret = 0;
 8007f28:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
 8007f2a:	4803      	ldr	r0, [pc, #12]	; (8007f38 <usb_enable+0xc4>)
 8007f2c:	f010 fa48 	bl	80183c0 <z_impl_k_mutex_unlock>
}
 8007f30:	4620      	mov	r0, r4
 8007f32:	b003      	add	sp, #12
 8007f34:	bd30      	pop	{r4, r5, pc}
 8007f36:	bf00      	nop
 8007f38:	20000f9c 	.word	0x20000f9c
 8007f3c:	20003660 	.word	0x20003660
 8007f40:	08007b31 	.word	0x08007b31
 8007f44:	08007c79 	.word	0x08007c79

08007f48 <usb_get_cfg_data>:
 * The interface descriptor of a USB function must be assigned to the
 * usb_cfg_data so that usb_ep_cfg_data and matching endpoint descriptor
 * can be found.
 */
static struct usb_cfg_data *usb_get_cfg_data(struct usb_if_descriptor *iface)
{
 8007f48:	b410      	push	{r4}
	size_t length = (__usb_data_end - __usb_data_start);
 8007f4a:	4c0e      	ldr	r4, [pc, #56]	; (8007f84 <usb_get_cfg_data+0x3c>)
 8007f4c:	4b0e      	ldr	r3, [pc, #56]	; (8007f88 <usb_get_cfg_data+0x40>)
 8007f4e:	1ae4      	subs	r4, r4, r3
 8007f50:	10a3      	asrs	r3, r4, #2
 8007f52:	4c0e      	ldr	r4, [pc, #56]	; (8007f8c <usb_get_cfg_data+0x44>)
 8007f54:	fb04 f403 	mul.w	r4, r4, r3

	for (size_t i = 0; i < length; i++) {
 8007f58:	2300      	movs	r3, #0
 8007f5a:	42a3      	cmp	r3, r4
 8007f5c:	d20e      	bcs.n	8007f7c <usb_get_cfg_data+0x34>
		if (__usb_data_start[i].interface_descriptor == iface) {
 8007f5e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8007f62:	4909      	ldr	r1, [pc, #36]	; (8007f88 <usb_get_cfg_data+0x40>)
 8007f64:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8007f68:	6852      	ldr	r2, [r2, #4]
 8007f6a:	4282      	cmp	r2, r0
 8007f6c:	d001      	beq.n	8007f72 <usb_get_cfg_data+0x2a>
	for (size_t i = 0; i < length; i++) {
 8007f6e:	3301      	adds	r3, #1
 8007f70:	e7f3      	b.n	8007f5a <usb_get_cfg_data+0x12>
			return &__usb_data_start[i];
 8007f72:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8007f76:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8007f7a:	e000      	b.n	8007f7e <usb_get_cfg_data+0x36>
		}
	}

	return NULL;
 8007f7c:	2000      	movs	r0, #0
}
 8007f7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f82:	4770      	bx	lr
 8007f84:	20001294 	.word	0x20001294
 8007f88:	20001270 	.word	0x20001270
 8007f8c:	38e38e39 	.word	0x38e38e39

08007f90 <usb_update_sn_string_descriptor>:
 * Hardware Information Driver (HWINFO). User can implement own variant
 * of this function. Please note that the length of the new Serial Number
 * descriptor may not exceed the length of the CONFIG_USB_DEVICE_SN.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
 8007f90:	b530      	push	{r4, r5, lr}
 8007f92:	b089      	sub	sp, #36	; 0x24
	uint8_t hwid[sizeof(CONFIG_USB_DEVICE_SN) / 2];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
 8007f94:	ac01      	add	r4, sp, #4
 8007f96:	4d19      	ldr	r5, [pc, #100]	; (8007ffc <usb_update_sn_string_descriptor+0x6c>)
 8007f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f9c:	682b      	ldr	r3, [r5, #0]
 8007f9e:	7023      	strb	r3, [r4, #0]

	memset(hwid, 0, sizeof(hwid));
 8007fa0:	2208      	movs	r2, #8
 8007fa2:	2100      	movs	r1, #0
 8007fa4:	a806      	add	r0, sp, #24
 8007fa6:	f014 fca7 	bl	801c8f8 <memset>
	memset(sn, 0, sizeof(sn));
 8007faa:	2212      	movs	r2, #18
 8007fac:	2100      	movs	r1, #0
 8007fae:	4814      	ldr	r0, [pc, #80]	; (8008000 <usb_update_sn_string_descriptor+0x70>)
 8007fb0:	f014 fca2 	bl	801c8f8 <memset>
	if (z_syscall_trap()) {
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
 8007fb4:	2108      	movs	r1, #8
 8007fb6:	a806      	add	r0, sp, #24
 8007fb8:	f001 fc12 	bl	80097e0 <z_impl_hwinfo_get_device_id>

	if (hwinfo_get_device_id(hwid, sizeof(hwid)) > 0) {
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	dd19      	ble.n	8007ff4 <usb_update_sn_string_descriptor+0x64>
		LOG_HEXDUMP_DBG(hwid, sizeof(hwid), "Serial Number");
		for (int i = 0; i < sizeof(hwid); i++) {
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	e015      	b.n	8007ff0 <usb_update_sn_string_descriptor+0x60>
			sn[i * 2] = hex[hwid[i] >> 4];
 8007fc4:	ab08      	add	r3, sp, #32
 8007fc6:	4413      	add	r3, r2
 8007fc8:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8007fcc:	0051      	lsls	r1, r2, #1
 8007fce:	a808      	add	r0, sp, #32
 8007fd0:	eb00 1013 	add.w	r0, r0, r3, lsr #4
 8007fd4:	f810 4c1c 	ldrb.w	r4, [r0, #-28]
 8007fd8:	4809      	ldr	r0, [pc, #36]	; (8008000 <usb_update_sn_string_descriptor+0x70>)
 8007fda:	f800 4012 	strb.w	r4, [r0, r2, lsl #1]
			sn[i * 2 + 1] = hex[hwid[i] & 0xF];
 8007fde:	f003 030f 	and.w	r3, r3, #15
 8007fe2:	3101      	adds	r1, #1
 8007fe4:	ac08      	add	r4, sp, #32
 8007fe6:	4423      	add	r3, r4
 8007fe8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007fec:	5443      	strb	r3, [r0, r1]
		for (int i = 0; i < sizeof(hwid); i++) {
 8007fee:	3201      	adds	r2, #1
 8007ff0:	2a07      	cmp	r2, #7
 8007ff2:	d9e7      	bls.n	8007fc4 <usb_update_sn_string_descriptor+0x34>
		}
	}

	return sn;
}
 8007ff4:	4802      	ldr	r0, [pc, #8]	; (8008000 <usb_update_sn_string_descriptor+0x70>)
 8007ff6:	b009      	add	sp, #36	; 0x24
 8007ff8:	bd30      	pop	{r4, r5, pc}
 8007ffa:	bf00      	nop
 8007ffc:	08025514 	.word	0x08025514
 8008000:	2000371c 	.word	0x2000371c

08008004 <usb_fix_ascii_sn_string_descriptor>:

static void usb_fix_ascii_sn_string_descriptor(struct usb_sn_descriptor *sn)
{
 8008004:	b570      	push	{r4, r5, r6, lr}
 8008006:	4604      	mov	r4, r0
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
 8008008:	f7ff ffc2 	bl	8007f90 <usb_update_sn_string_descriptor>
	int runtime_sn_len, default_sn_len;

	if (!runtime_sn) {
 800800c:	b120      	cbz	r0, 8008018 <usb_fix_ascii_sn_string_descriptor+0x14>
 800800e:	4605      	mov	r5, r0
		return;
	}

	runtime_sn_len = strlen(runtime_sn);
 8008010:	f014 fc07 	bl	801c822 <strlen>
	if (!runtime_sn_len) {
 8008014:	4606      	mov	r6, r0
 8008016:	b900      	cbnz	r0, 800801a <usb_fix_ascii_sn_string_descriptor+0x16>
			"length as CONFIG_USB_DEVICE_SN");
		return;
	}

	memcpy(sn->bString, runtime_sn, runtime_sn_len);
}
 8008018:	bd70      	pop	{r4, r5, r6, pc}
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
 800801a:	480e      	ldr	r0, [pc, #56]	; (8008054 <usb_fix_ascii_sn_string_descriptor+0x50>)
 800801c:	f014 fc01 	bl	801c822 <strlen>
	if (runtime_sn_len != default_sn_len) {
 8008020:	4286      	cmp	r6, r0
 8008022:	d011      	beq.n	8008048 <usb_fix_ascii_sn_string_descriptor+0x44>
		LOG_ERR("the new SN descriptor doesn't have the same "
 8008024:	f04f 0100 	mov.w	r1, #0
 8008028:	2301      	movs	r3, #1
 800802a:	f363 0102 	bfi	r1, r3, #0, #3
 800802e:	f36f 01c5 	bfc	r1, #3, #3
 8008032:	4b09      	ldr	r3, [pc, #36]	; (8008058 <usb_fix_ascii_sn_string_descriptor+0x54>)
 8008034:	4a09      	ldr	r2, [pc, #36]	; (800805c <usb_fix_ascii_sn_string_descriptor+0x58>)
 8008036:	1a9b      	subs	r3, r3, r2
 8008038:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800803c:	f363 118f 	bfi	r1, r3, #6, #10
 8008040:	4807      	ldr	r0, [pc, #28]	; (8008060 <usb_fix_ascii_sn_string_descriptor+0x5c>)
 8008042:	f7fe fbed 	bl	8006820 <log_0>
		return;
 8008046:	e7e7      	b.n	8008018 <usb_fix_ascii_sn_string_descriptor+0x14>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
 8008048:	4632      	mov	r2, r6
 800804a:	4629      	mov	r1, r5
 800804c:	1ca0      	adds	r0, r4, #2
 800804e:	f014 fc2e 	bl	801c8ae <memcpy>
 8008052:	e7e1      	b.n	8008018 <usb_fix_ascii_sn_string_descriptor+0x14>
 8008054:	08025514 	.word	0x08025514
 8008058:	08022c40 	.word	0x08022c40
 800805c:	08022b90 	.word	0x08022b90
 8008060:	08025528 	.word	0x08025528

08008064 <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
 8008064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008068:	b082      	sub	sp, #8
 800806a:	4604      	mov	r4, r0
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
	uint32_t requested_ep = BIT(16) | BIT(0);
 800806c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8008070:	9301      	str	r3, [sp, #4]
	uint8_t str_descr_idx = 0U;
 8008072:	2500      	movs	r5, #0
	uint8_t numof_ifaces = 0U;
 8008074:	462f      	mov	r7, r5
	struct usb_cfg_data *cfg_data = NULL;
 8008076:	46a8      	mov	r8, r5
	struct usb_cfg_descriptor *cfg_descr = NULL;
 8008078:	462e      	mov	r6, r5

	while (head->bLength != 0U) {
 800807a:	e065      	b.n	8008148 <usb_fix_descriptor+0xe4>
			LOG_DBG("Association descriptor %p", head);
			break;
		case USB_INTERFACE_DESC:
			if_descr = (struct usb_if_descriptor *)head;
			LOG_DBG("Interface descriptor %p", head);
			if (if_descr->bAlternateSetting) {
 800807c:	78e3      	ldrb	r3, [r4, #3]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d160      	bne.n	8008144 <usb_fix_descriptor+0xe0>
				LOG_DBG("Skip alternate interface");
				break;
			}

			if (if_descr->bInterfaceNumber == 0U) {
 8008082:	78a3      	ldrb	r3, [r4, #2]
 8008084:	b94b      	cbnz	r3, 800809a <usb_fix_descriptor+0x36>
				cfg_data = usb_get_cfg_data(if_descr);
 8008086:	4620      	mov	r0, r4
 8008088:	f7ff ff5e 	bl	8007f48 <usb_get_cfg_data>
				if (!cfg_data) {
 800808c:	4680      	mov	r8, r0
 800808e:	b138      	cbz	r0, 80080a0 <usb_fix_descriptor+0x3c>
					LOG_ERR("There is no usb_cfg_data "
						"for %p", head);
					return -1;
				}

				if (cfg_data->interface_config) {
 8008090:	6883      	ldr	r3, [r0, #8]
 8008092:	b113      	cbz	r3, 800809a <usb_fix_descriptor+0x36>
					cfg_data->interface_config(head,
 8008094:	4639      	mov	r1, r7
 8008096:	4620      	mov	r0, r4
 8008098:	4798      	blx	r3
							numof_ifaces);
				}
			}

			numof_ifaces++;
 800809a:	3701      	adds	r7, #1
 800809c:	b2ff      	uxtb	r7, r7
			break;
 800809e:	e051      	b.n	8008144 <usb_fix_descriptor+0xe0>
					LOG_ERR("There is no usb_cfg_data "
 80080a0:	f04f 0200 	mov.w	r2, #0
 80080a4:	2301      	movs	r3, #1
 80080a6:	f363 0202 	bfi	r2, r3, #0, #3
 80080aa:	f36f 02c5 	bfc	r2, #3, #3
 80080ae:	4b45      	ldr	r3, [pc, #276]	; (80081c4 <usb_fix_descriptor+0x160>)
 80080b0:	4945      	ldr	r1, [pc, #276]	; (80081c8 <usb_fix_descriptor+0x164>)
 80080b2:	1a5b      	subs	r3, r3, r1
 80080b4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80080b8:	f363 128f 	bfi	r2, r3, #6, #10
 80080bc:	4621      	mov	r1, r4
 80080be:	4843      	ldr	r0, [pc, #268]	; (80081cc <usb_fix_descriptor+0x168>)
 80080c0:	f7fe fa3e 	bl	8006540 <log_1>
					return -1;
 80080c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080c8:	e075      	b.n	80081b6 <usb_fix_descriptor+0x152>
		case USB_ENDPOINT_DESC:
			if (!cfg_data) {
 80080ca:	f1b8 0f00 	cmp.w	r8, #0
 80080ce:	d019      	beq.n	8008104 <usb_fix_descriptor+0xa0>
				return -1;
			}

			LOG_DBG("Endpoint descriptor %p", head);
			ep_descr = (struct usb_ep_descriptor *)head;
			if (usb_validate_ep_cfg_data(ep_descr,
 80080d0:	aa01      	add	r2, sp, #4
 80080d2:	4641      	mov	r1, r8
 80080d4:	4620      	mov	r0, r4
 80080d6:	f013 fb1d 	bl	801b714 <usb_validate_ep_cfg_data>
 80080da:	b398      	cbz	r0, 8008144 <usb_fix_descriptor+0xe0>
						     cfg_data,
						     &requested_ep)) {
				LOG_ERR("Failed to validate endpoints");
 80080dc:	f04f 0100 	mov.w	r1, #0
 80080e0:	2301      	movs	r3, #1
 80080e2:	f363 0102 	bfi	r1, r3, #0, #3
 80080e6:	f36f 01c5 	bfc	r1, #3, #3
 80080ea:	4b36      	ldr	r3, [pc, #216]	; (80081c4 <usb_fix_descriptor+0x160>)
 80080ec:	4a36      	ldr	r2, [pc, #216]	; (80081c8 <usb_fix_descriptor+0x164>)
 80080ee:	1a9b      	subs	r3, r3, r2
 80080f0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80080f4:	f363 118f 	bfi	r1, r3, #6, #10
 80080f8:	4835      	ldr	r0, [pc, #212]	; (80081d0 <usb_fix_descriptor+0x16c>)
 80080fa:	f7fe fb91 	bl	8006820 <log_0>
				return -1;
 80080fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008102:	e058      	b.n	80081b6 <usb_fix_descriptor+0x152>
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
 8008104:	f04f 0100 	mov.w	r1, #0
 8008108:	2301      	movs	r3, #1
 800810a:	f363 0102 	bfi	r1, r3, #0, #3
 800810e:	f36f 01c5 	bfc	r1, #3, #3
 8008112:	4b2c      	ldr	r3, [pc, #176]	; (80081c4 <usb_fix_descriptor+0x160>)
 8008114:	4a2c      	ldr	r2, [pc, #176]	; (80081c8 <usb_fix_descriptor+0x164>)
 8008116:	1a9b      	subs	r3, r3, r2
 8008118:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800811c:	f363 118f 	bfi	r1, r3, #6, #10
 8008120:	482c      	ldr	r0, [pc, #176]	; (80081d4 <usb_fix_descriptor+0x170>)
 8008122:	f7fe fb7d 	bl	8006820 <log_0>
				return -1;
 8008126:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800812a:	e044      	b.n	80081b6 <usb_fix_descriptor+0x152>
		case 0:
		case USB_STRING_DESC:
			/*
			 * Copy runtime SN string descriptor first, if has
			 */
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
 800812c:	2d03      	cmp	r5, #3
 800812e:	d01f      	beq.n	8008170 <usb_fix_descriptor+0x10c>
			}
			/*
			 * Skip language descriptor but correct
			 * wTotalLength and bNumInterfaces once.
			 */
			if (str_descr_idx) {
 8008130:	bb15      	cbnz	r5, 8008178 <usb_fix_descriptor+0x114>
				ascii7_to_utf16le(head);
			} else {
				if (!cfg_descr) {
 8008132:	b32e      	cbz	r6, 8008180 <usb_fix_descriptor+0x11c>
					return -1;
				}

				LOG_DBG("Now the wTotalLength is %zd",
					(uint8_t *)head - (uint8_t *)cfg_descr);
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
 8008134:	1ba3      	subs	r3, r4, r6
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
 8008136:	70b3      	strb	r3, [r6, #2]
	dst[1] = val >> 8;
 8008138:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800813c:	70f3      	strb	r3, [r6, #3]
					     (uint8_t *)&cfg_descr->wTotalLength);
				cfg_descr->bNumInterfaces = numof_ifaces;
 800813e:	7137      	strb	r7, [r6, #4]
			}

			str_descr_idx += 1U;
 8008140:	3501      	adds	r5, #1
 8008142:	b2ed      	uxtb	r5, r5
		default:
			break;
		}

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
 8008144:	7823      	ldrb	r3, [r4, #0]
 8008146:	441c      	add	r4, r3
	while (head->bLength != 0U) {
 8008148:	7823      	ldrb	r3, [r4, #0]
 800814a:	b37b      	cbz	r3, 80081ac <usb_fix_descriptor+0x148>
		switch (head->bDescriptorType) {
 800814c:	7863      	ldrb	r3, [r4, #1]
 800814e:	2b05      	cmp	r3, #5
 8008150:	d8f8      	bhi.n	8008144 <usb_fix_descriptor+0xe0>
 8008152:	a201      	add	r2, pc, #4	; (adr r2, 8008158 <usb_fix_descriptor+0xf4>)
 8008154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008158:	0800812d 	.word	0x0800812d
 800815c:	08008145 	.word	0x08008145
 8008160:	080081a9 	.word	0x080081a9
 8008164:	0800812d 	.word	0x0800812d
 8008168:	0800807d 	.word	0x0800807d
 800816c:	080080cb 	.word	0x080080cb
				usb_fix_ascii_sn_string_descriptor(sn);
 8008170:	4620      	mov	r0, r4
 8008172:	f7ff ff47 	bl	8008004 <usb_fix_ascii_sn_string_descriptor>
 8008176:	e7db      	b.n	8008130 <usb_fix_descriptor+0xcc>
				ascii7_to_utf16le(head);
 8008178:	4620      	mov	r0, r4
 800817a:	f013 fab6 	bl	801b6ea <ascii7_to_utf16le>
 800817e:	e7df      	b.n	8008140 <usb_fix_descriptor+0xdc>
					LOG_ERR("Incomplete device descriptor");
 8008180:	f04f 0100 	mov.w	r1, #0
 8008184:	2301      	movs	r3, #1
 8008186:	f363 0102 	bfi	r1, r3, #0, #3
 800818a:	f36f 01c5 	bfc	r1, #3, #3
 800818e:	4b0d      	ldr	r3, [pc, #52]	; (80081c4 <usb_fix_descriptor+0x160>)
 8008190:	4a0d      	ldr	r2, [pc, #52]	; (80081c8 <usb_fix_descriptor+0x164>)
 8008192:	1a9b      	subs	r3, r3, r2
 8008194:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8008198:	f363 118f 	bfi	r1, r3, #6, #10
 800819c:	480e      	ldr	r0, [pc, #56]	; (80081d8 <usb_fix_descriptor+0x174>)
 800819e:	f7fe fb3f 	bl	8006820 <log_0>
					return -1;
 80081a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081a6:	e006      	b.n	80081b6 <usb_fix_descriptor+0x152>
			cfg_descr = (struct usb_cfg_descriptor *)head;
 80081a8:	4626      	mov	r6, r4
 80081aa:	e7cb      	b.n	8008144 <usb_fix_descriptor+0xe0>
	}

	if ((head + 1) != __usb_descriptor_end) {
 80081ac:	1ca0      	adds	r0, r4, #2
 80081ae:	4b0b      	ldr	r3, [pc, #44]	; (80081dc <usb_fix_descriptor+0x178>)
 80081b0:	4298      	cmp	r0, r3
 80081b2:	d103      	bne.n	80081bc <usb_fix_descriptor+0x158>
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
	}

	return 0;
 80081b4:	2000      	movs	r0, #0
}
 80081b6:	b002      	add	sp, #8
 80081b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return usb_fix_descriptor(head + 1);
 80081bc:	f7ff ff52 	bl	8008064 <usb_fix_descriptor>
 80081c0:	e7f9      	b.n	80081b6 <usb_fix_descriptor+0x152>
 80081c2:	bf00      	nop
 80081c4:	08022c40 	.word	0x08022c40
 80081c8:	08022b90 	.word	0x08022b90
 80081cc:	08025574 	.word	0x08025574
 80081d0:	080255d8 	.word	0x080255d8
 80081d4:	08025594 	.word	0x08025594
 80081d8:	080255f8 	.word	0x080255f8
 80081dc:	20001270 	.word	0x20001270

080081e0 <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
 80081e0:	b508      	push	{r3, lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
 80081e2:	480c      	ldr	r0, [pc, #48]	; (8008214 <usb_get_device_descriptor+0x34>)
 80081e4:	f7ff ff3e 	bl	8008064 <usb_fix_descriptor>
 80081e8:	b908      	cbnz	r0, 80081ee <usb_get_device_descriptor+0xe>
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
 80081ea:	480a      	ldr	r0, [pc, #40]	; (8008214 <usb_get_device_descriptor+0x34>)
}
 80081ec:	bd08      	pop	{r3, pc}
		LOG_ERR("Failed to fixup USB descriptor");
 80081ee:	f04f 0100 	mov.w	r1, #0
 80081f2:	2301      	movs	r3, #1
 80081f4:	f363 0102 	bfi	r1, r3, #0, #3
 80081f8:	f36f 01c5 	bfc	r1, #3, #3
 80081fc:	4b06      	ldr	r3, [pc, #24]	; (8008218 <usb_get_device_descriptor+0x38>)
 80081fe:	4a07      	ldr	r2, [pc, #28]	; (800821c <usb_get_device_descriptor+0x3c>)
 8008200:	1a9b      	subs	r3, r3, r2
 8008202:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8008206:	f363 118f 	bfi	r1, r3, #6, #10
 800820a:	4805      	ldr	r0, [pc, #20]	; (8008220 <usb_get_device_descriptor+0x40>)
 800820c:	f7fe fb08 	bl	8006820 <log_0>
		return NULL;
 8008210:	2000      	movs	r0, #0
 8008212:	e7eb      	b.n	80081ec <usb_get_device_descriptor+0xc>
 8008214:	200011f0 	.word	0x200011f0
 8008218:	08022c40 	.word	0x08022c40
 800821c:	08022b90 	.word	0x08022b90
 8008220:	08025618 	.word	0x08025618

08008224 <usb_ep_get_transfer>:
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
 8008224:	2300      	movs	r3, #0
 8008226:	2b03      	cmp	r3, #3
 8008228:	dc0d      	bgt.n	8008246 <usb_ep_get_transfer+0x22>
		if (ut_data[i].ep == ep) {
 800822a:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800822e:	4907      	ldr	r1, [pc, #28]	; (800824c <usb_ep_get_transfer+0x28>)
 8008230:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
 8008234:	4282      	cmp	r2, r0
 8008236:	d001      	beq.n	800823c <usb_ep_get_transfer+0x18>
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
 8008238:	3301      	adds	r3, #1
 800823a:	e7f4      	b.n	8008226 <usb_ep_get_transfer+0x2>
			return &ut_data[i];
 800823c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8008240:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8008244:	4770      	bx	lr
		}
	}

	return NULL;
 8008246:	2000      	movs	r0, #0
}
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	20003730 	.word	0x20003730

08008250 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
 8008250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008254:	b082      	sub	sp, #8
 8008256:	4604      	mov	r4, r0
	int ret = 0;
	uint32_t bytes;
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;
 8008258:	f810 5c34 	ldrb.w	r5, [r0, #-52]

	if (trans->status != -EBUSY) {
 800825c:	f850 3c30 	ldr.w	r3, [r0, #-48]
 8008260:	f113 0f10 	cmn.w	r3, #16
 8008264:	d10c      	bne.n	8008280 <usb_transfer_work+0x30>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
 8008266:	68c3      	ldr	r3, [r0, #12]
 8008268:	f013 0f02 	tst.w	r3, #2
 800826c:	d065      	beq.n	800833a <usb_transfer_work+0xea>
		if (!trans->bsize) {
 800826e:	f850 2c28 	ldr.w	r2, [r0, #-40]
 8008272:	bb92      	cbnz	r2, 80082da <usb_transfer_work+0x8a>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
 8008274:	f013 0f04 	tst.w	r3, #4
 8008278:	d028      	beq.n	80082cc <usb_transfer_work+0x7c>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
			}
			trans->status = 0;
 800827a:	2300      	movs	r3, #0
 800827c:	f844 3c30 	str.w	r3, [r4, #-48]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
 8008280:	f854 3c30 	ldr.w	r3, [r4, #-48]
 8008284:	f113 0f10 	cmn.w	r3, #16
 8008288:	f000 80af 	beq.w	80083ea <usb_transfer_work+0x19a>
 800828c:	f854 6c20 	ldr.w	r6, [r4, #-32]
 8008290:	2e00      	cmp	r6, #0
 8008292:	f000 80aa 	beq.w	80083ea <usb_transfer_work+0x19a>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
 8008296:	f854 7c24 	ldr.w	r7, [r4, #-36]
		void *priv = trans->priv;
 800829a:	f854 8c1c 	ldr.w	r8, [r4, #-28]

		if (k_is_in_isr()) {
 800829e:	f019 ffc1 	bl	8022224 <k_is_in_isr>
 80082a2:	2800      	cmp	r0, #0
 80082a4:	f040 8090 	bne.w	80083c8 <usb_transfer_work+0x178>
		}

		LOG_DBG("Transfer done, ep 0x%02x, status %d, size %zu",
			trans->ep, trans->status, trans->tsize);

		trans->cb = NULL;
 80082a8:	2300      	movs	r3, #0
 80082aa:	f844 3c20 	str.w	r3, [r4, #-32]
		k_sem_give(&trans->sem);
 80082ae:	f1a4 0018 	sub.w	r0, r4, #24
	z_impl_k_sem_give(sem);
 80082b2:	f010 fcc9 	bl	8018c48 <z_impl_k_sem_give>

		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
 80082b6:	f854 3c30 	ldr.w	r3, [r4, #-48]
 80082ba:	f113 0f48 	cmn.w	r3, #72	; 0x48
 80082be:	f000 8094 	beq.w	80083ea <usb_transfer_work+0x19a>
			cb(ep, tsize, priv);
 80082c2:	4642      	mov	r2, r8
 80082c4:	4639      	mov	r1, r7
 80082c6:	4628      	mov	r0, r5
 80082c8:	47b0      	blx	r6
 80082ca:	e08e      	b.n	80083ea <usb_transfer_work+0x19a>
				usb_write(ep, NULL, 0, NULL);
 80082cc:	2300      	movs	r3, #0
 80082ce:	461a      	mov	r2, r3
 80082d0:	4619      	mov	r1, r3
 80082d2:	4628      	mov	r0, r5
 80082d4:	f7ff fc6e 	bl	8007bb4 <usb_write>
 80082d8:	e7cf      	b.n	800827a <usb_transfer_work+0x2a>
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
 80082da:	ab01      	add	r3, sp, #4
 80082dc:	f850 1c2c 	ldr.w	r1, [r0, #-44]
 80082e0:	4628      	mov	r0, r5
 80082e2:	f7ff fc67 	bl	8007bb4 <usb_write>
		if (ret) {
 80082e6:	4601      	mov	r1, r0
 80082e8:	b980      	cbnz	r0, 800830c <usb_transfer_work+0xbc>
		trans->buffer += bytes;
 80082ea:	f854 3c2c 	ldr.w	r3, [r4, #-44]
 80082ee:	9a01      	ldr	r2, [sp, #4]
 80082f0:	4413      	add	r3, r2
 80082f2:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
 80082f6:	f854 3c28 	ldr.w	r3, [r4, #-40]
 80082fa:	1a9b      	subs	r3, r3, r2
 80082fc:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
 8008300:	f854 3c24 	ldr.w	r3, [r4, #-36]
 8008304:	4413      	add	r3, r2
 8008306:	f844 3c24 	str.w	r3, [r4, #-36]
 800830a:	e7b9      	b.n	8008280 <usb_transfer_work+0x30>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
 800830c:	f04f 0300 	mov.w	r3, #0
 8008310:	2201      	movs	r2, #1
 8008312:	f362 0302 	bfi	r3, r2, #0, #3
 8008316:	f36f 03c5 	bfc	r3, #3, #3
 800831a:	4a38      	ldr	r2, [pc, #224]	; (80083fc <usb_transfer_work+0x1ac>)
 800831c:	4838      	ldr	r0, [pc, #224]	; (8008400 <usb_transfer_work+0x1b0>)
 800831e:	1a12      	subs	r2, r2, r0
 8008320:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8008324:	f362 138f 	bfi	r3, r2, #6, #10
 8008328:	462a      	mov	r2, r5
 800832a:	4836      	ldr	r0, [pc, #216]	; (8008404 <usb_transfer_work+0x1b4>)
 800832c:	f7fe f988 	bl	8006640 <log_2>
			trans->status = -EINVAL;
 8008330:	f06f 0315 	mvn.w	r3, #21
 8008334:	f844 3c30 	str.w	r3, [r4, #-48]
			goto done;
 8008338:	e7a2      	b.n	8008280 <usb_transfer_work+0x30>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
 800833a:	ab01      	add	r3, sp, #4
 800833c:	f850 2c28 	ldr.w	r2, [r0, #-40]
 8008340:	f850 1c2c 	ldr.w	r1, [r0, #-44]
 8008344:	4628      	mov	r0, r5
 8008346:	f001 f931 	bl	80095ac <usb_dc_ep_read_wait>
		if (ret) {
 800834a:	4601      	mov	r1, r0
 800834c:	b9a0      	cbnz	r0, 8008378 <usb_transfer_work+0x128>
		trans->buffer += bytes;
 800834e:	f854 3c2c 	ldr.w	r3, [r4, #-44]
 8008352:	9e01      	ldr	r6, [sp, #4]
 8008354:	4433      	add	r3, r6
 8008356:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
 800835a:	f854 3c28 	ldr.w	r3, [r4, #-40]
 800835e:	1b9b      	subs	r3, r3, r6
 8008360:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
 8008364:	f854 3c24 	ldr.w	r3, [r4, #-36]
 8008368:	4433      	add	r3, r6
 800836a:	f844 3c24 	str.w	r3, [r4, #-36]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
 800836e:	b9d6      	cbnz	r6, 80083a6 <usb_transfer_work+0x156>
			trans->status = 0;
 8008370:	2300      	movs	r3, #0
 8008372:	f844 3c30 	str.w	r3, [r4, #-48]
			goto done;
 8008376:	e783      	b.n	8008280 <usb_transfer_work+0x30>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
 8008378:	f04f 0300 	mov.w	r3, #0
 800837c:	2201      	movs	r2, #1
 800837e:	f362 0302 	bfi	r3, r2, #0, #3
 8008382:	f36f 03c5 	bfc	r3, #3, #3
 8008386:	4a1d      	ldr	r2, [pc, #116]	; (80083fc <usb_transfer_work+0x1ac>)
 8008388:	481d      	ldr	r0, [pc, #116]	; (8008400 <usb_transfer_work+0x1b0>)
 800838a:	1a12      	subs	r2, r2, r0
 800838c:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8008390:	f362 138f 	bfi	r3, r2, #6, #10
 8008394:	462a      	mov	r2, r5
 8008396:	481b      	ldr	r0, [pc, #108]	; (8008404 <usb_transfer_work+0x1b4>)
 8008398:	f7fe f952 	bl	8006640 <log_2>
			trans->status = -EINVAL;
 800839c:	f06f 0315 	mvn.w	r3, #21
 80083a0:	f844 3c30 	str.w	r3, [r4, #-48]
			goto done;
 80083a4:	e76c      	b.n	8008280 <usb_transfer_work+0x30>
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
 80083a6:	4628      	mov	r0, r5
 80083a8:	f013 fc92 	bl	801bcd0 <usb_dc_ep_mps>
 80083ac:	fbb6 f3f0 	udiv	r3, r6, r0
 80083b0:	fb00 6013 	mls	r0, r0, r3, r6
 80083b4:	2800      	cmp	r0, #0
 80083b6:	d1db      	bne.n	8008370 <usb_transfer_work+0x120>
 80083b8:	f854 3c28 	ldr.w	r3, [r4, #-40]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d0d7      	beq.n	8008370 <usb_transfer_work+0x120>
		usb_dc_ep_read_continue(ep);
 80083c0:	4628      	mov	r0, r5
 80083c2:	f001 f96f 	bl	80096a4 <usb_dc_ep_read_continue>
 80083c6:	e75b      	b.n	8008280 <usb_transfer_work+0x30>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 80083c8:	f104 0308 	add.w	r3, r4, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 80083cc:	f3bf 8f5b 	dmb	ish
 80083d0:	e853 2f00 	ldrex	r2, [r3]
 80083d4:	f042 0101 	orr.w	r1, r2, #1
 80083d8:	e843 1000 	strex	r0, r1, [r3]
 80083dc:	2800      	cmp	r0, #0
 80083de:	d1f7      	bne.n	80083d0 <usb_transfer_work+0x180>
 80083e0:	f3bf 8f5b 	dmb	ish
 80083e4:	f012 0f01 	tst.w	r2, #1
 80083e8:	d002      	beq.n	80083f0 <usb_transfer_work+0x1a0>
		}
	}
}
 80083ea:	b002      	add	sp, #8
 80083ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		k_queue_append(&work_q->queue, work);
 80083f0:	4621      	mov	r1, r4
 80083f2:	4805      	ldr	r0, [pc, #20]	; (8008408 <usb_transfer_work+0x1b8>)
 80083f4:	f019 fd5e 	bl	8021eb4 <k_queue_append>
			return;
 80083f8:	e7f7      	b.n	80083ea <usb_transfer_work+0x19a>
 80083fa:	bf00      	nop
 80083fc:	08022c58 	.word	0x08022c58
 8008400:	08022b90 	.word	0x08022b90
 8008404:	08025648 	.word	0x08025648
 8008408:	20003310 	.word	0x20003310

0800840c <usb_cancel_transfer>:
	irq_unlock(key);
	return ret;
}

void usb_cancel_transfer(uint8_t ep)
{
 800840c:	b510      	push	{r4, lr}
	__asm__ volatile(
 800840e:	f04f 0310 	mov.w	r3, #16
 8008412:	f3ef 8411 	mrs	r4, BASEPRI
 8008416:	f383 8811 	msr	BASEPRI, r3
 800841a:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
 800841e:	f7ff ff01 	bl	8008224 <usb_ep_get_transfer>
	if (!trans) {
 8008422:	b120      	cbz	r0, 800842e <usb_cancel_transfer+0x22>
 8008424:	4603      	mov	r3, r0
		goto done;
	}

	if (trans->status != -EBUSY) {
 8008426:	6842      	ldr	r2, [r0, #4]
 8008428:	f112 0f10 	cmn.w	r2, #16
 800842c:	d004      	beq.n	8008438 <usb_cancel_transfer+0x2c>
	__asm__ volatile(
 800842e:	f384 8811 	msr	BASEPRI, r4
 8008432:	f3bf 8f6f 	isb	sy
	trans->status = -ECANCELED;
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);

done:
	irq_unlock(key);
}
 8008436:	bd10      	pop	{r4, pc}
	trans->status = -ECANCELED;
 8008438:	f06f 0247 	mvn.w	r2, #71	; 0x47
 800843c:	6042      	str	r2, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
 800843e:	f100 0134 	add.w	r1, r0, #52	; 0x34
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 8008442:	333c      	adds	r3, #60	; 0x3c
 8008444:	f3bf 8f5b 	dmb	ish
 8008448:	e853 2f00 	ldrex	r2, [r3]
 800844c:	f042 0001 	orr.w	r0, r2, #1
 8008450:	e843 0c00 	strex	ip, r0, [r3]
 8008454:	f1bc 0f00 	cmp.w	ip, #0
 8008458:	d1f6      	bne.n	8008448 <usb_cancel_transfer+0x3c>
 800845a:	f3bf 8f5b 	dmb	ish
 800845e:	f012 0f01 	tst.w	r2, #1
 8008462:	d1e4      	bne.n	800842e <usb_cancel_transfer+0x22>
		k_queue_append(&work_q->queue, work);
 8008464:	4801      	ldr	r0, [pc, #4]	; (800846c <usb_cancel_transfer+0x60>)
 8008466:	f019 fd25 	bl	8021eb4 <k_queue_append>
}
 800846a:	e7e0      	b.n	800842e <usb_cancel_transfer+0x22>
 800846c:	20003310 	.word	0x20003310

08008470 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
 8008470:	b538      	push	{r3, r4, r5, lr}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
 8008472:	2400      	movs	r4, #0
 8008474:	e020      	b.n	80084b8 <usb_cancel_transfers+0x48>
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
			trans->status = -ECANCELED;
 8008476:	4b1d      	ldr	r3, [pc, #116]	; (80084ec <usb_cancel_transfers+0x7c>)
 8008478:	441a      	add	r2, r3
 800847a:	f06f 0147 	mvn.w	r1, #71	; 0x47
 800847e:	6051      	str	r1, [r2, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
 8008480:	eb04 1104 	add.w	r1, r4, r4, lsl #4
 8008484:	008a      	lsls	r2, r1, #2
 8008486:	3230      	adds	r2, #48	; 0x30
 8008488:	4413      	add	r3, r2
 800848a:	1d19      	adds	r1, r3, #4
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 800848c:	330c      	adds	r3, #12
 800848e:	f3bf 8f5b 	dmb	ish
 8008492:	e853 2f00 	ldrex	r2, [r3]
 8008496:	f042 0001 	orr.w	r0, r2, #1
 800849a:	e843 0c00 	strex	ip, r0, [r3]
 800849e:	f1bc 0f00 	cmp.w	ip, #0
 80084a2:	d1f6      	bne.n	8008492 <usb_cancel_transfers+0x22>
 80084a4:	f3bf 8f5b 	dmb	ish
 80084a8:	f012 0f01 	tst.w	r2, #1
 80084ac:	d018      	beq.n	80084e0 <usb_cancel_transfers+0x70>
 80084ae:	f385 8811 	msr	BASEPRI, r5
 80084b2:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
 80084b6:	3401      	adds	r4, #1
 80084b8:	2c03      	cmp	r4, #3
 80084ba:	dc15      	bgt.n	80084e8 <usb_cancel_transfers+0x78>
	__asm__ volatile(
 80084bc:	f04f 0310 	mov.w	r3, #16
 80084c0:	f3ef 8511 	mrs	r5, BASEPRI
 80084c4:	f383 8811 	msr	BASEPRI, r3
 80084c8:	f3bf 8f6f 	isb	sy
		if (trans->status == -EBUSY) {
 80084cc:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 80084d0:	009a      	lsls	r2, r3, #2
 80084d2:	4b06      	ldr	r3, [pc, #24]	; (80084ec <usb_cancel_transfers+0x7c>)
 80084d4:	4413      	add	r3, r2
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	f113 0f10 	cmn.w	r3, #16
 80084dc:	d1e7      	bne.n	80084ae <usb_cancel_transfers+0x3e>
 80084de:	e7ca      	b.n	8008476 <usb_cancel_transfers+0x6>
		k_queue_append(&work_q->queue, work);
 80084e0:	4803      	ldr	r0, [pc, #12]	; (80084f0 <usb_cancel_transfers+0x80>)
 80084e2:	f019 fce7 	bl	8021eb4 <k_queue_append>
}
 80084e6:	e7e2      	b.n	80084ae <usb_cancel_transfers+0x3e>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
 80084e8:	bd38      	pop	{r3, r4, r5, pc}
 80084ea:	bf00      	nop
 80084ec:	20003730 	.word	0x20003730
 80084f0:	20003310 	.word	0x20003310

080084f4 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
 80084f4:	b510      	push	{r4, lr}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
 80084f6:	2400      	movs	r4, #0
 80084f8:	e014      	b.n	8008524 <usb_transfer_init+0x30>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 80084fa:	480c      	ldr	r0, [pc, #48]	; (800852c <usb_transfer_init+0x38>)
 80084fc:	eb04 1204 	add.w	r2, r4, r4, lsl #4
 8008500:	0093      	lsls	r3, r2, #2
 8008502:	4403      	add	r3, r0
 8008504:	2200      	movs	r2, #0
 8008506:	635a      	str	r2, [r3, #52]	; 0x34
 8008508:	4909      	ldr	r1, [pc, #36]	; (8008530 <usb_transfer_init+0x3c>)
 800850a:	6399      	str	r1, [r3, #56]	; 0x38
 800850c:	63da      	str	r2, [r3, #60]	; 0x3c
		k_work_init(&ut_data[i].work, usb_transfer_work);
		k_sem_init(&ut_data[i].sem, 1, 1);
 800850e:	eb04 1204 	add.w	r2, r4, r4, lsl #4
 8008512:	0093      	lsls	r3, r2, #2
 8008514:	3318      	adds	r3, #24
 8008516:	4418      	add	r0, r3
 8008518:	3004      	adds	r0, #4
	return z_impl_k_sem_init(sem, initial_count, limit);
 800851a:	2201      	movs	r2, #1
 800851c:	4611      	mov	r1, r2
 800851e:	f019 fe69 	bl	80221f4 <z_impl_k_sem_init>
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
 8008522:	3401      	adds	r4, #1
 8008524:	2c03      	cmp	r4, #3
 8008526:	dde8      	ble.n	80084fa <usb_transfer_init+0x6>
	}

	return 0;
}
 8008528:	2000      	movs	r0, #0
 800852a:	bd10      	pop	{r4, pc}
 800852c:	20003730 	.word	0x20003730
 8008530:	08008251 	.word	0x08008251

08008534 <get_flash_area_from_id>:

extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
 8008534:	b410      	push	{r4}
 8008536:	4604      	mov	r4, r0
	for (int i = 0; i < flash_map_entries; i++) {
 8008538:	2300      	movs	r3, #0
 800853a:	4a09      	ldr	r2, [pc, #36]	; (8008560 <get_flash_area_from_id+0x2c>)
 800853c:	6812      	ldr	r2, [r2, #0]
 800853e:	429a      	cmp	r2, r3
 8008540:	dd09      	ble.n	8008556 <get_flash_area_from_id+0x22>
		if (flash_map[i].fa_id == idx) {
 8008542:	011a      	lsls	r2, r3, #4
 8008544:	4907      	ldr	r1, [pc, #28]	; (8008564 <get_flash_area_from_id+0x30>)
 8008546:	6809      	ldr	r1, [r1, #0]
 8008548:	eb01 1003 	add.w	r0, r1, r3, lsl #4
 800854c:	5c8a      	ldrb	r2, [r1, r2]
 800854e:	42a2      	cmp	r2, r4
 8008550:	d002      	beq.n	8008558 <get_flash_area_from_id+0x24>
	for (int i = 0; i < flash_map_entries; i++) {
 8008552:	3301      	adds	r3, #1
 8008554:	e7f1      	b.n	800853a <get_flash_area_from_id+0x6>
			return &flash_map[i];
		}
	}

	return NULL;
 8008556:	2000      	movs	r0, #0
}
 8008558:	f85d 4b04 	ldr.w	r4, [sp], #4
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	08025694 	.word	0x08025694
 8008564:	20000a74 	.word	0x20000a74

08008568 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
 8008568:	4b08      	ldr	r3, [pc, #32]	; (800858c <flash_area_open+0x24>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	b13b      	cbz	r3, 800857e <flash_area_open+0x16>
{
 800856e:	b510      	push	{r4, lr}
 8008570:	460c      	mov	r4, r1
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
 8008572:	f7ff ffdf 	bl	8008534 <get_flash_area_from_id>
	if (area == NULL) {
 8008576:	b128      	cbz	r0, 8008584 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
 8008578:	6020      	str	r0, [r4, #0]
	return 0;
 800857a:	2000      	movs	r0, #0
}
 800857c:	bd10      	pop	{r4, pc}
		return -EACCES;
 800857e:	f06f 000c 	mvn.w	r0, #12
}
 8008582:	4770      	bx	lr
		return -ENOENT;
 8008584:	f06f 0001 	mvn.w	r0, #1
 8008588:	e7f8      	b.n	800857c <flash_area_open+0x14>
 800858a:	bf00      	nop
 800858c:	20000a74 	.word	0x20000a74

08008590 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
 8008590:	b500      	push	{lr}
 8008592:	b08b      	sub	sp, #44	; 0x2c
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
 8008594:	ab03      	add	r3, sp, #12
 8008596:	9300      	str	r3, [sp, #0]
 8008598:	4b02      	ldr	r3, [pc, #8]	; (80085a4 <flash_area_get_sectors+0x14>)
 800859a:	f013 f9a2 	bl	801b8e2 <flash_area_layout>
}
 800859e:	b00b      	add	sp, #44	; 0x2c
 80085a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80085a4:	0801b8a7 	.word	0x0801b8a7

080085a8 <settings_save_one>:

/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int settings_save_one(const char *name, const void *value, size_t val_len)
{
 80085a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
 80085ac:	4b0f      	ldr	r3, [pc, #60]	; (80085ec <settings_save_one+0x44>)
 80085ae:	681d      	ldr	r5, [r3, #0]
	if (!cs) {
 80085b0:	b1cd      	cbz	r5, 80085e6 <settings_save_one+0x3e>
 80085b2:	4680      	mov	r8, r0
 80085b4:	460f      	mov	r7, r1
 80085b6:	4614      	mov	r4, r2
	return z_impl_k_mutex_lock(mutex, timeout);
 80085b8:	4e0d      	ldr	r6, [pc, #52]	; (80085f0 <settings_save_one+0x48>)
 80085ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085c2:	4630      	mov	r0, r6
 80085c4:	f00f fe72 	bl	80182ac <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
 80085c8:	686b      	ldr	r3, [r5, #4]
 80085ca:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80085ce:	4623      	mov	r3, r4
 80085d0:	463a      	mov	r2, r7
 80085d2:	4641      	mov	r1, r8
 80085d4:	4628      	mov	r0, r5
 80085d6:	47c8      	blx	r9
 80085d8:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
 80085da:	4630      	mov	r0, r6
 80085dc:	f00f fef0 	bl	80183c0 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
 80085e0:	4620      	mov	r0, r4
 80085e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOENT;
 80085e6:	f06f 0401 	mvn.w	r4, #1
 80085ea:	e7f9      	b.n	80085e0 <settings_save_one+0x38>
 80085ec:	20003848 	.word	0x20003848
 80085f0:	20000f88 	.word	0x20000f88

080085f4 <settings_src_register>:
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
 80085f4:	2300      	movs	r3, #0
 80085f6:	6003      	str	r3, [r0, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
 80085f8:	4b05      	ldr	r3, [pc, #20]	; (8008610 <settings_src_register+0x1c>)
 80085fa:	685b      	ldr	r3, [r3, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
 80085fc:	b11b      	cbz	r3, 8008606 <settings_src_register+0x12>
	parent->next = child;
 80085fe:	6018      	str	r0, [r3, #0]
	list->tail = node;
 8008600:	4b03      	ldr	r3, [pc, #12]	; (8008610 <settings_src_register+0x1c>)
 8008602:	6058      	str	r0, [r3, #4]
}
 8008604:	4770      	bx	lr
 8008606:	4b02      	ldr	r3, [pc, #8]	; (8008610 <settings_src_register+0x1c>)
 8008608:	6058      	str	r0, [r3, #4]
	list->head = node;
 800860a:	6018      	str	r0, [r3, #0]
}
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop
 8008610:	20003840 	.word	0x20003840

08008614 <settings_dst_register>:
	settings_save_dst = cs;
 8008614:	4b01      	ldr	r3, [pc, #4]	; (800861c <settings_dst_register+0x8>)
 8008616:	6018      	str	r0, [r3, #0]
}
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	20003848 	.word	0x20003848

08008620 <settings_load_subtree>:
{
 8008620:	b530      	push	{r4, r5, lr}
 8008622:	b085      	sub	sp, #20
 8008624:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
 8008626:	2300      	movs	r3, #0
 8008628:	9302      	str	r3, [sp, #8]
 800862a:	9303      	str	r3, [sp, #12]
 800862c:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
 800862e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008636:	480d      	ldr	r0, [pc, #52]	; (800866c <settings_load_subtree+0x4c>)
 8008638:	f00f fe38 	bl	80182ac <z_impl_k_mutex_lock>
	return list->head;
 800863c:	4b0c      	ldr	r3, [pc, #48]	; (8008670 <settings_load_subtree+0x50>)
 800863e:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
 8008640:	b14c      	cbz	r4, 8008656 <settings_load_subtree+0x36>
		cs->cs_itf->csi_load(cs, &arg);
 8008642:	6863      	ldr	r3, [r4, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	a901      	add	r1, sp, #4
 8008648:	4620      	mov	r0, r4
 800864a:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
 800864c:	2c00      	cmp	r4, #0
 800864e:	d0f7      	beq.n	8008640 <settings_load_subtree+0x20>
	return node->next;
 8008650:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
 8008652:	2c00      	cmp	r4, #0
 8008654:	d1f4      	bne.n	8008640 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
 8008656:	4628      	mov	r0, r5
 8008658:	f000 f93a 	bl	80088d0 <settings_commit_subtree>
 800865c:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
 800865e:	4803      	ldr	r0, [pc, #12]	; (800866c <settings_load_subtree+0x4c>)
 8008660:	f00f feae 	bl	80183c0 <z_impl_k_mutex_unlock>
}
 8008664:	4620      	mov	r0, r4
 8008666:	b005      	add	sp, #20
 8008668:	bd30      	pop	{r4, r5, pc}
 800866a:	bf00      	nop
 800866c:	20000f88 	.word	0x20000f88
 8008670:	20003840 	.word	0x20003840

08008674 <settings_load_subtree_direct>:
{
 8008674:	b510      	push	{r4, lr}
 8008676:	b084      	sub	sp, #16
	const struct settings_load_arg arg = {
 8008678:	9001      	str	r0, [sp, #4]
 800867a:	9102      	str	r1, [sp, #8]
 800867c:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
 800867e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008686:	480b      	ldr	r0, [pc, #44]	; (80086b4 <settings_load_subtree_direct+0x40>)
 8008688:	f00f fe10 	bl	80182ac <z_impl_k_mutex_lock>
	return list->head;
 800868c:	4b0a      	ldr	r3, [pc, #40]	; (80086b8 <settings_load_subtree_direct+0x44>)
 800868e:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
 8008690:	b14c      	cbz	r4, 80086a6 <settings_load_subtree_direct+0x32>
		cs->cs_itf->csi_load(cs, &arg);
 8008692:	6863      	ldr	r3, [r4, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	a901      	add	r1, sp, #4
 8008698:	4620      	mov	r0, r4
 800869a:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
 800869c:	2c00      	cmp	r4, #0
 800869e:	d0f7      	beq.n	8008690 <settings_load_subtree_direct+0x1c>
	return node->next;
 80086a0:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
 80086a2:	2c00      	cmp	r4, #0
 80086a4:	d1f4      	bne.n	8008690 <settings_load_subtree_direct+0x1c>
	return z_impl_k_mutex_unlock(mutex);
 80086a6:	4803      	ldr	r0, [pc, #12]	; (80086b4 <settings_load_subtree_direct+0x40>)
 80086a8:	f00f fe8a 	bl	80183c0 <z_impl_k_mutex_unlock>
}
 80086ac:	2000      	movs	r0, #0
 80086ae:	b004      	add	sp, #16
 80086b0:	bd10      	pop	{r4, pc}
 80086b2:	bf00      	nop
 80086b4:	20000f88 	.word	0x20000f88
 80086b8:	20003840 	.word	0x20003840

080086bc <settings_store_init>:
	list->head = NULL;
 80086bc:	4b02      	ldr	r3, [pc, #8]	; (80086c8 <settings_store_init+0xc>)
 80086be:	2200      	movs	r2, #0
 80086c0:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
 80086c2:	605a      	str	r2, [r3, #4]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	20003840 	.word	0x20003840

080086cc <settings_init>:


void settings_store_init(void);

void settings_init(void)
{
 80086cc:	b508      	push	{r3, lr}
	list->head = NULL;
 80086ce:	4b03      	ldr	r3, [pc, #12]	; (80086dc <settings_init+0x10>)
 80086d0:	2200      	movs	r2, #0
 80086d2:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
 80086d4:	605a      	str	r2, [r3, #4]
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
 80086d6:	f7ff fff1 	bl	80086bc <settings_store_init>
}
 80086da:	bd08      	pop	{r3, pc}
 80086dc:	2000384c 	.word	0x2000384c

080086e0 <settings_register>:

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
int settings_register(struct settings_handler *handler)
{
 80086e0:	b538      	push	{r3, r4, r5, lr}
 80086e2:	4605      	mov	r5, r0
	int rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
 80086e4:	4c20      	ldr	r4, [pc, #128]	; (8008768 <settings_register+0x88>)
 80086e6:	4b21      	ldr	r3, [pc, #132]	; (800876c <settings_register+0x8c>)
 80086e8:	429c      	cmp	r4, r3
 80086ea:	d207      	bcs.n	80086fc <settings_register+0x1c>
		if (strcmp(handler->name, ch->name) == 0) {
 80086ec:	6821      	ldr	r1, [r4, #0]
 80086ee:	6828      	ldr	r0, [r5, #0]
 80086f0:	f014 f89f 	bl	801c832 <strcmp>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	d033      	beq.n	8008760 <settings_register+0x80>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
 80086f8:	3414      	adds	r4, #20
 80086fa:	e7f4      	b.n	80086e6 <settings_register+0x6>
	return z_impl_k_mutex_lock(mutex, timeout);
 80086fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008704:	481a      	ldr	r0, [pc, #104]	; (8008770 <settings_register+0x90>)
 8008706:	f00f fdd1 	bl	80182ac <z_impl_k_mutex_lock>
	return list->head;
 800870a:	4b1a      	ldr	r3, [pc, #104]	; (8008774 <settings_register+0x94>)
 800870c:	681c      	ldr	r4, [r3, #0]
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
 800870e:	b114      	cbz	r4, 8008716 <settings_register+0x36>
 8008710:	3c14      	subs	r4, #20
 8008712:	e000      	b.n	8008716 <settings_register+0x36>
 8008714:	461c      	mov	r4, r3
 8008716:	b15c      	cbz	r4, 8008730 <settings_register+0x50>
		if (strcmp(handler->name, ch->name) == 0) {
 8008718:	6821      	ldr	r1, [r4, #0]
 800871a:	6828      	ldr	r0, [r5, #0]
 800871c:	f014 f889 	bl	801c832 <strcmp>
 8008720:	b1d8      	cbz	r0, 800875a <settings_register+0x7a>
Z_GENLIST_PEEK_NEXT(slist, snode)
 8008722:	f114 0314 	adds.w	r3, r4, #20
 8008726:	d0f5      	beq.n	8008714 <settings_register+0x34>
	return node->next;
 8008728:	6964      	ldr	r4, [r4, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
 800872a:	b10c      	cbz	r4, 8008730 <settings_register+0x50>
 800872c:	3c14      	subs	r4, #20
 800872e:	e7f2      	b.n	8008716 <settings_register+0x36>
			rc = -EEXIST;
			goto end;
		}
	}
	sys_slist_append(&settings_handlers, &handler->node);
 8008730:	f105 0314 	add.w	r3, r5, #20
	parent->next = child;
 8008734:	2200      	movs	r2, #0
 8008736:	616a      	str	r2, [r5, #20]
	return list->tail;
 8008738:	4a0e      	ldr	r2, [pc, #56]	; (8008774 <settings_register+0x94>)
 800873a:	6852      	ldr	r2, [r2, #4]
Z_GENLIST_APPEND(slist, snode)
 800873c:	b142      	cbz	r2, 8008750 <settings_register+0x70>
	parent->next = child;
 800873e:	6013      	str	r3, [r2, #0]
	list->tail = node;
 8008740:	4a0c      	ldr	r2, [pc, #48]	; (8008774 <settings_register+0x94>)
 8008742:	6053      	str	r3, [r2, #4]
	int rc = 0;
 8008744:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
 8008746:	480a      	ldr	r0, [pc, #40]	; (8008770 <settings_register+0x90>)
 8008748:	f00f fe3a 	bl	80183c0 <z_impl_k_mutex_unlock>

end:
	k_mutex_unlock(&settings_lock);
	return rc;
}
 800874c:	4620      	mov	r0, r4
 800874e:	bd38      	pop	{r3, r4, r5, pc}
 8008750:	4a08      	ldr	r2, [pc, #32]	; (8008774 <settings_register+0x94>)
 8008752:	6053      	str	r3, [r2, #4]
	list->head = node;
 8008754:	6013      	str	r3, [r2, #0]
	int rc = 0;
 8008756:	2400      	movs	r4, #0
}
 8008758:	e7f5      	b.n	8008746 <settings_register+0x66>
			rc = -EEXIST;
 800875a:	f06f 0410 	mvn.w	r4, #16
 800875e:	e7f2      	b.n	8008746 <settings_register+0x66>
			return -EEXIST;
 8008760:	f06f 0410 	mvn.w	r4, #16
 8008764:	e7f2      	b.n	800874c <settings_register+0x6c>
 8008766:	bf00      	nop
 8008768:	08022b18 	.word	0x08022b18
 800876c:	08022b90 	.word	0x08022b90
 8008770:	20000f88 	.word	0x20000f88
 8008774:	2000384c 	.word	0x2000384c

08008778 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
 8008778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800877a:	b083      	sub	sp, #12
 800877c:	4606      	mov	r6, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
 800877e:	460f      	mov	r7, r1
 8008780:	b109      	cbz	r1, 8008786 <settings_parse_and_lookup+0xe>
		*next = NULL;
 8008782:	2300      	movs	r3, #0
 8008784:	600b      	str	r3, [r1, #0]
				*next = tmpnext;
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = ch;
 8008786:	4c27      	ldr	r4, [pc, #156]	; (8008824 <settings_parse_and_lookup+0xac>)
 8008788:	2500      	movs	r5, #0
 800878a:	e004      	b.n	8008796 <settings_parse_and_lookup+0x1e>
			if (next) {
 800878c:	b10f      	cbz	r7, 8008792 <settings_parse_and_lookup+0x1a>
				*next = tmpnext;
 800878e:	9b01      	ldr	r3, [sp, #4]
 8008790:	603b      	str	r3, [r7, #0]
			bestmatch = ch;
 8008792:	4625      	mov	r5, r4
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
 8008794:	3414      	adds	r4, #20
 8008796:	4b24      	ldr	r3, [pc, #144]	; (8008828 <settings_parse_and_lookup+0xb0>)
 8008798:	429c      	cmp	r4, r3
 800879a:	d216      	bcs.n	80087ca <settings_parse_and_lookup+0x52>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
 800879c:	aa01      	add	r2, sp, #4
 800879e:	6821      	ldr	r1, [r4, #0]
 80087a0:	4630      	mov	r0, r6
 80087a2:	f013 f8cb 	bl	801b93c <settings_name_steq>
 80087a6:	2800      	cmp	r0, #0
 80087a8:	d0f4      	beq.n	8008794 <settings_parse_and_lookup+0x1c>
		if (!bestmatch) {
 80087aa:	2d00      	cmp	r5, #0
 80087ac:	d0ee      	beq.n	800878c <settings_parse_and_lookup+0x14>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
 80087ae:	2200      	movs	r2, #0
 80087b0:	6829      	ldr	r1, [r5, #0]
 80087b2:	6820      	ldr	r0, [r4, #0]
 80087b4:	f013 f8c2 	bl	801b93c <settings_name_steq>
 80087b8:	2800      	cmp	r0, #0
 80087ba:	d0eb      	beq.n	8008794 <settings_parse_and_lookup+0x1c>
			if (next) {
 80087bc:	b11f      	cbz	r7, 80087c6 <settings_parse_and_lookup+0x4e>
				*next = tmpnext;
 80087be:	9b01      	ldr	r3, [sp, #4]
 80087c0:	603b      	str	r3, [r7, #0]
			bestmatch = ch;
 80087c2:	4625      	mov	r5, r4
 80087c4:	e7e6      	b.n	8008794 <settings_parse_and_lookup+0x1c>
 80087c6:	4625      	mov	r5, r4
 80087c8:	e7e4      	b.n	8008794 <settings_parse_and_lookup+0x1c>
	return list->head;
 80087ca:	4b18      	ldr	r3, [pc, #96]	; (800882c <settings_parse_and_lookup+0xb4>)
 80087cc:	681c      	ldr	r4, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
 80087ce:	b15c      	cbz	r4, 80087e8 <settings_parse_and_lookup+0x70>
 80087d0:	3c14      	subs	r4, #20
 80087d2:	e009      	b.n	80087e8 <settings_parse_and_lookup+0x70>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
			continue;
		}
		if (!bestmatch) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
 80087d4:	b10f      	cbz	r7, 80087da <settings_parse_and_lookup+0x62>
				*next = tmpnext;
 80087d6:	9b01      	ldr	r3, [sp, #4]
 80087d8:	603b      	str	r3, [r7, #0]
			bestmatch = (struct settings_handler_static *)ch;
 80087da:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 80087dc:	f114 0314 	adds.w	r3, r4, #20
 80087e0:	d01a      	beq.n	8008818 <settings_parse_and_lookup+0xa0>
	return node->next;
 80087e2:	6964      	ldr	r4, [r4, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
 80087e4:	b104      	cbz	r4, 80087e8 <settings_parse_and_lookup+0x70>
 80087e6:	3c14      	subs	r4, #20
 80087e8:	b1c4      	cbz	r4, 800881c <settings_parse_and_lookup+0xa4>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
 80087ea:	aa01      	add	r2, sp, #4
 80087ec:	6821      	ldr	r1, [r4, #0]
 80087ee:	4630      	mov	r0, r6
 80087f0:	f013 f8a4 	bl	801b93c <settings_name_steq>
 80087f4:	2800      	cmp	r0, #0
 80087f6:	d0f1      	beq.n	80087dc <settings_parse_and_lookup+0x64>
		if (!bestmatch) {
 80087f8:	2d00      	cmp	r5, #0
 80087fa:	d0eb      	beq.n	80087d4 <settings_parse_and_lookup+0x5c>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
 80087fc:	2200      	movs	r2, #0
 80087fe:	6829      	ldr	r1, [r5, #0]
 8008800:	6820      	ldr	r0, [r4, #0]
 8008802:	f013 f89b 	bl	801b93c <settings_name_steq>
 8008806:	2800      	cmp	r0, #0
 8008808:	d0e8      	beq.n	80087dc <settings_parse_and_lookup+0x64>
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
 800880a:	b11f      	cbz	r7, 8008814 <settings_parse_and_lookup+0x9c>
				*next = tmpnext;
 800880c:	9b01      	ldr	r3, [sp, #4]
 800880e:	603b      	str	r3, [r7, #0]
			bestmatch = (struct settings_handler_static *)ch;
 8008810:	4625      	mov	r5, r4
 8008812:	e7e3      	b.n	80087dc <settings_parse_and_lookup+0x64>
 8008814:	4625      	mov	r5, r4
 8008816:	e7e1      	b.n	80087dc <settings_parse_and_lookup+0x64>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
 8008818:	461c      	mov	r4, r3
 800881a:	e7e5      	b.n	80087e8 <settings_parse_and_lookup+0x70>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
 800881c:	4628      	mov	r0, r5
 800881e:	b003      	add	sp, #12
 8008820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008822:	bf00      	nop
 8008824:	08022b18 	.word	0x08022b18
 8008828:	08022b90 	.word	0x08022b90
 800882c:	2000384c 	.word	0x2000384c

08008830 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
 8008830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008834:	b085      	sub	sp, #20
 8008836:	4604      	mov	r4, r0
 8008838:	4689      	mov	r9, r1
 800883a:	4690      	mov	r8, r2
 800883c:	461f      	mov	r7, r3
 800883e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
	int rc;
	const char *name_key = name;
 8008840:	9003      	str	r0, [sp, #12]

	if (load_arg && load_arg->subtree &&
 8008842:	b135      	cbz	r5, 8008852 <settings_call_set_handler+0x22>
 8008844:	6829      	ldr	r1, [r5, #0]
 8008846:	b121      	cbz	r1, 8008852 <settings_call_set_handler+0x22>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
 8008848:	aa03      	add	r2, sp, #12
 800884a:	f013 f877 	bl	801b93c <settings_name_steq>
	if (load_arg && load_arg->subtree &&
 800884e:	4606      	mov	r6, r0
 8008850:	b150      	cbz	r0, 8008868 <settings_call_set_handler+0x38>
		return 0;
	}

	if (load_arg && load_arg->cb) {
 8008852:	b16d      	cbz	r5, 8008870 <settings_call_set_handler+0x40>
 8008854:	686e      	ldr	r6, [r5, #4]
 8008856:	b15e      	cbz	r6, 8008870 <settings_call_set_handler+0x40>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
 8008858:	68ab      	ldr	r3, [r5, #8]
 800885a:	9300      	str	r3, [sp, #0]
 800885c:	463b      	mov	r3, r7
 800885e:	4642      	mov	r2, r8
 8008860:	4649      	mov	r1, r9
 8008862:	9803      	ldr	r0, [sp, #12]
 8008864:	47b0      	blx	r6
 8008866:	4606      	mov	r6, r0
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
 8008868:	4630      	mov	r0, r6
 800886a:	b005      	add	sp, #20
 800886c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ch = settings_parse_and_lookup(name, &name_key);
 8008870:	a903      	add	r1, sp, #12
 8008872:	4620      	mov	r0, r4
 8008874:	f7ff ff80 	bl	8008778 <settings_parse_and_lookup>
		if (!ch) {
 8008878:	b308      	cbz	r0, 80088be <settings_call_set_handler+0x8e>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
 800887a:	6885      	ldr	r5, [r0, #8]
 800887c:	463b      	mov	r3, r7
 800887e:	4642      	mov	r2, r8
 8008880:	4649      	mov	r1, r9
 8008882:	9803      	ldr	r0, [sp, #12]
 8008884:	47a8      	blx	r5
		if (rc != 0) {
 8008886:	4606      	mov	r6, r0
 8008888:	2800      	cmp	r0, #0
 800888a:	d0ed      	beq.n	8008868 <settings_call_set_handler+0x38>
			LOG_ERR("set-value failure. key: %s error(%d)",
 800888c:	f04f 0500 	mov.w	r5, #0
 8008890:	2301      	movs	r3, #1
 8008892:	f363 0502 	bfi	r5, r3, #0, #3
 8008896:	f36f 05c5 	bfc	r5, #3, #3
 800889a:	4b0a      	ldr	r3, [pc, #40]	; (80088c4 <settings_call_set_handler+0x94>)
 800889c:	4a0a      	ldr	r2, [pc, #40]	; (80088c8 <settings_call_set_handler+0x98>)
 800889e:	1a9b      	subs	r3, r3, r2
 80088a0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80088a4:	f363 158f 	bfi	r5, r3, #6, #10
 80088a8:	4620      	mov	r0, r4
 80088aa:	f7fd fc79 	bl	80061a0 <log_strdup>
 80088ae:	4601      	mov	r1, r0
 80088b0:	462b      	mov	r3, r5
 80088b2:	4632      	mov	r2, r6
 80088b4:	4805      	ldr	r0, [pc, #20]	; (80088cc <settings_call_set_handler+0x9c>)
 80088b6:	f7fd fec3 	bl	8006640 <log_2>
			rc = 0;
 80088ba:	2600      	movs	r6, #0
 80088bc:	e7d4      	b.n	8008868 <settings_call_set_handler+0x38>
			return 0;
 80088be:	2600      	movs	r6, #0
 80088c0:	e7d2      	b.n	8008868 <settings_call_set_handler+0x38>
 80088c2:	bf00      	nop
 80088c4:	08022c28 	.word	0x08022c28
 80088c8:	08022b90 	.word	0x08022b90
 80088cc:	08025698 	.word	0x08025698

080088d0 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
 80088d0:	b570      	push	{r4, r5, r6, lr}
 80088d2:	4605      	mov	r5, r0
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
 80088d4:	4c1b      	ldr	r4, [pc, #108]	; (8008944 <settings_commit_subtree+0x74>)
	rc = 0;
 80088d6:	2600      	movs	r6, #0
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
 80088d8:	e000      	b.n	80088dc <settings_commit_subtree+0xc>
 80088da:	3414      	adds	r4, #20
 80088dc:	4b1a      	ldr	r3, [pc, #104]	; (8008948 <settings_commit_subtree+0x78>)
 80088de:	429c      	cmp	r4, r3
 80088e0:	d20f      	bcs.n	8008902 <settings_commit_subtree+0x32>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
 80088e2:	b135      	cbz	r5, 80088f2 <settings_commit_subtree+0x22>
 80088e4:	2200      	movs	r2, #0
 80088e6:	4629      	mov	r1, r5
 80088e8:	6820      	ldr	r0, [r4, #0]
 80088ea:	f013 f827 	bl	801b93c <settings_name_steq>
 80088ee:	2800      	cmp	r0, #0
 80088f0:	d0f3      	beq.n	80088da <settings_commit_subtree+0xa>
			continue;
		}
		if (ch->h_commit) {
 80088f2:	68e3      	ldr	r3, [r4, #12]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d0f0      	beq.n	80088da <settings_commit_subtree+0xa>
			rc2 = ch->h_commit();
 80088f8:	4798      	blx	r3
			if (!rc) {
 80088fa:	2e00      	cmp	r6, #0
 80088fc:	d1ed      	bne.n	80088da <settings_commit_subtree+0xa>
				rc = rc2;
 80088fe:	4606      	mov	r6, r0
 8008900:	e7eb      	b.n	80088da <settings_commit_subtree+0xa>
	return list->head;
 8008902:	4b12      	ldr	r3, [pc, #72]	; (800894c <settings_commit_subtree+0x7c>)
 8008904:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
 8008906:	b13c      	cbz	r4, 8008918 <settings_commit_subtree+0x48>
 8008908:	3c14      	subs	r4, #20
 800890a:	e005      	b.n	8008918 <settings_commit_subtree+0x48>
Z_GENLIST_PEEK_NEXT(slist, snode)
 800890c:	f114 0314 	adds.w	r3, r4, #20
 8008910:	d013      	beq.n	800893a <settings_commit_subtree+0x6a>
	return node->next;
 8008912:	6964      	ldr	r4, [r4, #20]
 8008914:	b104      	cbz	r4, 8008918 <settings_commit_subtree+0x48>
 8008916:	3c14      	subs	r4, #20
 8008918:	b18c      	cbz	r4, 800893e <settings_commit_subtree+0x6e>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
 800891a:	b135      	cbz	r5, 800892a <settings_commit_subtree+0x5a>
 800891c:	2200      	movs	r2, #0
 800891e:	4629      	mov	r1, r5
 8008920:	6820      	ldr	r0, [r4, #0]
 8008922:	f013 f80b 	bl	801b93c <settings_name_steq>
 8008926:	2800      	cmp	r0, #0
 8008928:	d0f0      	beq.n	800890c <settings_commit_subtree+0x3c>
			continue;
		}
		if (ch->h_commit) {
 800892a:	68e3      	ldr	r3, [r4, #12]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d0ed      	beq.n	800890c <settings_commit_subtree+0x3c>
			rc2 = ch->h_commit();
 8008930:	4798      	blx	r3
			if (!rc) {
 8008932:	2e00      	cmp	r6, #0
 8008934:	d1ea      	bne.n	800890c <settings_commit_subtree+0x3c>
				rc = rc2;
 8008936:	4606      	mov	r6, r0
 8008938:	e7e8      	b.n	800890c <settings_commit_subtree+0x3c>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
 800893a:	461c      	mov	r4, r3
 800893c:	e7ec      	b.n	8008918 <settings_commit_subtree+0x48>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
 800893e:	4630      	mov	r0, r6
 8008940:	bd70      	pop	{r4, r5, r6, pc}
 8008942:	bf00      	nop
 8008944:	08022b18 	.word	0x08022b18
 8008948:	08022b90 	.word	0x08022b90
 800894c:	2000384c 	.word	0x2000384c

08008950 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
 8008950:	b508      	push	{r3, lr}

	int err = 0;

	if (settings_subsys_initialized) {
 8008952:	4b07      	ldr	r3, [pc, #28]	; (8008970 <settings_subsys_init+0x20>)
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	b10b      	cbz	r3, 800895c <settings_subsys_init+0xc>
		return 0;
 8008958:	2000      	movs	r0, #0
	if (!err) {
		settings_subsys_initialized = true;
	}

	return err;
}
 800895a:	bd08      	pop	{r3, pc}
	settings_init();
 800895c:	f7ff feb6 	bl	80086cc <settings_init>
	err = settings_backend_init(); /* func rises kernel panic once error */
 8008960:	f000 f87c 	bl	8008a5c <settings_backend_init>
	if (!err) {
 8008964:	2800      	cmp	r0, #0
 8008966:	d1f8      	bne.n	800895a <settings_subsys_init+0xa>
		settings_subsys_initialized = true;
 8008968:	4b01      	ldr	r3, [pc, #4]	; (8008970 <settings_subsys_init+0x20>)
 800896a:	2201      	movs	r2, #1
 800896c:	701a      	strb	r2, [r3, #0]
 800896e:	e7f4      	b.n	800895a <settings_subsys_init+0xa>
 8008970:	2000596c 	.word	0x2000596c

08008974 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
 8008974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008978:	b098      	sub	sp, #96	; 0x60
 800897a:	4680      	mov	r8, r0
 800897c:	4689      	mov	r9, r1
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
 800897e:	f9b0 4038 	ldrsh.w	r4, [r0, #56]	; 0x38
 8008982:	3401      	adds	r4, #1
 8008984:	b2a4      	uxth	r4, r4
	int ret = 0;
 8008986:	f04f 0a00 	mov.w	sl, #0
 800898a:	e00f      	b.n	80089ac <settings_nvs_load+0x38>
		 */
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
			       &buf, sizeof(buf));

		if ((rc1 <= 0) && (rc2 <= 0)) {
 800898c:	2800      	cmp	r0, #0
 800898e:	dc28      	bgt.n	80089e2 <settings_nvs_load+0x6e>
 8008990:	e00b      	b.n	80089aa <settings_nvs_load+0x36>
			/* Settings item is not stored correctly in the NVS.
			 * NVS entry for its name or value is either missing
			 * or deleted. Clean dirty entries to make space for
			 * future settings item.
			 */
			if (name_id == cf->last_name_id) {
 8008992:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
 8008996:	42ab      	cmp	r3, r5
 8008998:	d03e      	beq.n	8008a18 <settings_nvs_load+0xa4>
				cf->last_name_id--;
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
					  &cf->last_name_id, sizeof(uint16_t));
			}
			nvs_delete(&cf->cf_nvs, name_id);
 800899a:	4629      	mov	r1, r5
 800899c:	4638      	mov	r0, r7
 800899e:	f012 fe56 	bl	801b64e <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
 80089a2:	4621      	mov	r1, r4
 80089a4:	4638      	mov	r0, r7
 80089a6:	f012 fe52 	bl	801b64e <nvs_delete>
{
 80089aa:	462c      	mov	r4, r5
		name_id--;
 80089ac:	1e65      	subs	r5, r4, #1
 80089ae:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
 80089b0:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 80089b4:	d02c      	beq.n	8008a10 <settings_nvs_load+0x9c>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
 80089b6:	f108 0708 	add.w	r7, r8, #8
 80089ba:	234a      	movs	r3, #74	; 0x4a
 80089bc:	aa03      	add	r2, sp, #12
 80089be:	4629      	mov	r1, r5
 80089c0:	4638      	mov	r0, r7
 80089c2:	f012 fe4a 	bl	801b65a <nvs_read>
 80089c6:	4606      	mov	r6, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
 80089c8:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
 80089cc:	343f      	adds	r4, #63	; 0x3f
 80089ce:	b2a4      	uxth	r4, r4
 80089d0:	2301      	movs	r3, #1
 80089d2:	f10d 020b 	add.w	r2, sp, #11
 80089d6:	4621      	mov	r1, r4
 80089d8:	4638      	mov	r0, r7
 80089da:	f012 fe3e 	bl	801b65a <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
 80089de:	2e00      	cmp	r6, #0
 80089e0:	ddd4      	ble.n	800898c <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
 80089e2:	2e00      	cmp	r6, #0
 80089e4:	ddd5      	ble.n	8008992 <settings_nvs_load+0x1e>
 80089e6:	2800      	cmp	r0, #0
 80089e8:	ddd3      	ble.n	8008992 <settings_nvs_load+0x1e>
			continue;
		}

		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
 80089ea:	ab18      	add	r3, sp, #96	; 0x60
 80089ec:	441e      	add	r6, r3
 80089ee:	2300      	movs	r3, #0
 80089f0:	f806 3c54 	strb.w	r3, [r6, #-84]
		read_fn_arg.fs = &cf->cf_nvs;
 80089f4:	9716      	str	r7, [sp, #88]	; 0x58
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
 80089f6:	f8ad 405c 	strh.w	r4, [sp, #92]	; 0x5c

		ret = settings_call_set_handler(
 80089fa:	f8cd 9000 	str.w	r9, [sp]
 80089fe:	ab16      	add	r3, sp, #88	; 0x58
 8008a00:	4a0b      	ldr	r2, [pc, #44]	; (8008a30 <settings_nvs_load+0xbc>)
 8008a02:	4601      	mov	r1, r0
 8008a04:	a803      	add	r0, sp, #12
 8008a06:	f7ff ff13 	bl	8008830 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
 8008a0a:	4682      	mov	sl, r0
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	d0cc      	beq.n	80089aa <settings_nvs_load+0x36>
			break;
		}
	}
	return ret;
}
 8008a10:	4650      	mov	r0, sl
 8008a12:	b018      	add	sp, #96	; 0x60
 8008a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				cf->last_name_id--;
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	4642      	mov	r2, r8
 8008a1c:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
 8008a20:	2302      	movs	r3, #2
 8008a22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008a26:	4638      	mov	r0, r7
 8008a28:	f7fe fb6c 	bl	8007104 <nvs_write>
 8008a2c:	e7b5      	b.n	800899a <settings_nvs_load+0x26>
 8008a2e:	bf00      	nop
 8008a30:	0801b9cd 	.word	0x0801b9cd

08008a34 <settings_nvs_src>:
{
 8008a34:	b508      	push	{r3, lr}
	cf->cf_store.cs_itf = &settings_nvs_itf;
 8008a36:	4b03      	ldr	r3, [pc, #12]	; (8008a44 <settings_nvs_src+0x10>)
 8008a38:	6043      	str	r3, [r0, #4]
	settings_src_register(&cf->cf_store);
 8008a3a:	f7ff fddb 	bl	80085f4 <settings_src_register>
}
 8008a3e:	2000      	movs	r0, #0
 8008a40:	bd08      	pop	{r3, pc}
 8008a42:	bf00      	nop
 8008a44:	20000a78 	.word	0x20000a78

08008a48 <settings_nvs_dst>:
{
 8008a48:	b508      	push	{r3, lr}
	cf->cf_store.cs_itf = &settings_nvs_itf;
 8008a4a:	4b03      	ldr	r3, [pc, #12]	; (8008a58 <settings_nvs_dst+0x10>)
 8008a4c:	6043      	str	r3, [r0, #4]
	settings_dst_register(&cf->cf_store);
 8008a4e:	f7ff fde1 	bl	8008614 <settings_dst_register>
}
 8008a52:	2000      	movs	r0, #0
 8008a54:	bd08      	pop	{r3, pc}
 8008a56:	bf00      	nop
 8008a58:	20000a78 	.word	0x20000a78

08008a5c <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
 8008a5c:	b510      	push	{r4, lr}
 8008a5e:	b084      	sub	sp, #16
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
 8008a60:	2301      	movs	r3, #1
 8008a62:	9300      	str	r3, [sp, #0]

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
 8008a64:	a903      	add	r1, sp, #12
 8008a66:	2000      	movs	r0, #0
 8008a68:	f7ff fd7e 	bl	8008568 <flash_area_open>
	if (rc) {
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	b110      	cbz	r0, 8008a76 <settings_backend_init+0x1a>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	b004      	add	sp, #16
 8008a74:	bd10      	pop	{r4, pc}
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
 8008a76:	aa01      	add	r2, sp, #4
 8008a78:	4669      	mov	r1, sp
 8008a7a:	f7ff fd89 	bl	8008590 <flash_area_get_sectors>
 8008a7e:	4603      	mov	r3, r0
	if (rc == -ENODEV) {
 8008a80:	f110 0f13 	cmn.w	r0, #19
 8008a84:	d0f4      	beq.n	8008a70 <settings_backend_init+0x14>
	} else if (rc != 0 && rc != -ENOMEM) {
 8008a86:	b140      	cbz	r0, 8008a9a <settings_backend_init+0x3e>
 8008a88:	f110 0f0c 	cmn.w	r0, #12
 8008a8c:	d005      	beq.n	8008a9a <settings_backend_init+0x3e>
		k_panic();
 8008a8e:	4040      	eors	r0, r0
 8008a90:	f380 8811 	msr	BASEPRI, r0
 8008a94:	f04f 0004 	mov.w	r0, #4
 8008a98:	df02      	svc	2
	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
 8008a9a:	9c02      	ldr	r4, [sp, #8]
	if (nvs_sector_size > UINT16_MAX) {
 8008a9c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8008aa0:	d223      	bcs.n	8008aea <settings_backend_init+0x8e>
	size_t nvs_sector_size, nvs_size = 0;
 8008aa2:	2200      	movs	r2, #0
	uint16_t cnt = 0;
 8008aa4:	4613      	mov	r3, r2
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
 8008aa6:	2b07      	cmp	r3, #7
 8008aa8:	d807      	bhi.n	8008aba <settings_backend_init+0x5e>
		nvs_size += nvs_sector_size;
 8008aaa:	4422      	add	r2, r4
		if (nvs_size > fa->fa_size) {
 8008aac:	9903      	ldr	r1, [sp, #12]
 8008aae:	6889      	ldr	r1, [r1, #8]
 8008ab0:	4291      	cmp	r1, r2
 8008ab2:	d302      	bcc.n	8008aba <settings_backend_init+0x5e>
		cnt++;
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	e7f5      	b.n	8008aa6 <settings_backend_init+0x4a>
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
 8008aba:	480d      	ldr	r0, [pc, #52]	; (8008af0 <settings_backend_init+0x94>)
 8008abc:	8284      	strh	r4, [r0, #20]
	default_settings_nvs.cf_nvs.sector_count = cnt;
 8008abe:	82c3      	strh	r3, [r0, #22]
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
 8008ac0:	9b03      	ldr	r3, [sp, #12]
 8008ac2:	685a      	ldr	r2, [r3, #4]
 8008ac4:	6082      	str	r2, [r0, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	63c3      	str	r3, [r0, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
 8008aca:	f013 f82c 	bl	801bb26 <settings_nvs_backend_init>
	if (rc) {
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	d1cd      	bne.n	8008a70 <settings_backend_init+0x14>
	rc = settings_nvs_src(&default_settings_nvs);
 8008ad4:	4806      	ldr	r0, [pc, #24]	; (8008af0 <settings_backend_init+0x94>)
 8008ad6:	f7ff ffad 	bl	8008a34 <settings_nvs_src>
	if (rc) {
 8008ada:	4603      	mov	r3, r0
 8008adc:	2800      	cmp	r0, #0
 8008ade:	d1c7      	bne.n	8008a70 <settings_backend_init+0x14>
	rc = settings_nvs_dst(&default_settings_nvs);
 8008ae0:	4803      	ldr	r0, [pc, #12]	; (8008af0 <settings_backend_init+0x94>)
 8008ae2:	f7ff ffb1 	bl	8008a48 <settings_nvs_dst>
 8008ae6:	4603      	mov	r3, r0
	return rc;
 8008ae8:	e7c2      	b.n	8008a70 <settings_backend_init+0x14>
		return -EDOM;
 8008aea:	f06f 0324 	mvn.w	r3, #36	; 0x24
 8008aee:	e7bf      	b.n	8008a70 <settings_backend_init+0x14>
 8008af0:	20003854 	.word	0x20003854

08008af4 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
 8008af4:	b508      	push	{r3, lr}
 8008af6:	4604      	mov	r4, r0
 8008af8:	f04f 0210 	mov.w	r2, #16
 8008afc:	f3ef 8311 	mrs	r3, BASEPRI
 8008b00:	f382 8811 	msr	BASEPRI, r2
 8008b04:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
 8008b08:	f001 fd46 	bl	800a598 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	f002 ff71 	bl	800b9f4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
 8008b12:	4803      	ldr	r0, [pc, #12]	; (8008b20 <sys_reboot+0x2c>)
 8008b14:	f011 fa7e 	bl	801a014 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8008b18:	f002 fb16 	bl	800b148 <arch_cpu_idle>
 8008b1c:	e7fc      	b.n	8008b18 <sys_reboot+0x24>
 8008b1e:	bf00      	nop
 8008b20:	080256cc 	.word	0x080256cc

08008b24 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
 8008b24:	b510      	push	{r4, lr}
 8008b26:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
 8008b28:	280a      	cmp	r0, #10
 8008b2a:	d007      	beq.n	8008b3c <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
 8008b2c:	4b07      	ldr	r3, [pc, #28]	; (8008b4c <console_out+0x28>)
 8008b2e:	6818      	ldr	r0, [r3, #0]
 8008b30:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
 8008b32:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	4798      	blx	r3

	return c;
}
 8008b38:	4620      	mov	r0, r4
 8008b3a:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
 8008b3c:	4b03      	ldr	r3, [pc, #12]	; (8008b4c <console_out+0x28>)
 8008b3e:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 8008b40:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	210d      	movs	r1, #13
 8008b46:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
 8008b48:	e7f0      	b.n	8008b2c <console_out+0x8>
 8008b4a:	bf00      	nop
 8008b4c:	20003894 	.word	0x20003894

08008b50 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
 8008b50:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
 8008b52:	4c04      	ldr	r4, [pc, #16]	; (8008b64 <uart_console_hook_install+0x14>)
 8008b54:	4620      	mov	r0, r4
 8008b56:	f002 ffa5 	bl	800baa4 <__stdout_hook_install>
	__printk_hook_install(console_out);
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	f7fc fbc8 	bl	80052f0 <__printk_hook_install>
}
 8008b60:	bd10      	pop	{r4, pc}
 8008b62:	bf00      	nop
 8008b64:	08008b25 	.word	0x08008b25

08008b68 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 8008b68:	b508      	push	{r3, lr}
 8008b6a:	4804      	ldr	r0, [pc, #16]	; (8008b7c <uart_console_init+0x14>)
 8008b6c:	f00f f870 	bl	8017c50 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 8008b70:	4b03      	ldr	r3, [pc, #12]	; (8008b80 <uart_console_init+0x18>)
 8008b72:	6018      	str	r0, [r3, #0]

	uart_console_hook_install();
 8008b74:	f7ff ffec 	bl	8008b50 <uart_console_hook_install>

	return 0;
}
 8008b78:	2000      	movs	r0, #0
 8008b7a:	bd08      	pop	{r3, pc}
 8008b7c:	08024fc0 	.word	0x08024fc0
 8008b80:	20003894 	.word	0x20003894

08008b84 <__stm32_exti_isr>:
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
{
 8008b84:	b570      	push	{r4, r5, r6, lr}
 8008b86:	4604      	mov	r4, r0
 8008b88:	460d      	mov	r5, r1
	struct stm32_exti_data *data = dev->data;
 8008b8a:	68d6      	ldr	r6, [r2, #12]
	int line;

	/* see which bits are set */
	for (line = min; line < max; line++) {
 8008b8c:	e000      	b.n	8008b90 <__stm32_exti_isr+0xc>
 8008b8e:	3401      	adds	r4, #1
 8008b90:	42ac      	cmp	r4, r5
 8008b92:	da14      	bge.n	8008bbe <__stm32_exti_isr+0x3a>
	if (line < 32) {
 8008b94:	2c1f      	cmp	r4, #31
 8008b96:	dcfa      	bgt.n	8008b8e <__stm32_exti_isr+0xa>
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8008b98:	2301      	movs	r3, #1
 8008b9a:	40a3      	lsls	r3, r4
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8008b9c:	4a08      	ldr	r2, [pc, #32]	; (8008bc0 <__stm32_exti_isr+0x3c>)
 8008b9e:	6952      	ldr	r2, [r2, #20]
		/* check if interrupt is pending */
		if (stm32_exti_is_pending(line)) {
 8008ba0:	ea33 0202 	bics.w	r2, r3, r2
 8008ba4:	d1f3      	bne.n	8008b8e <__stm32_exti_isr+0xa>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8008ba6:	4a06      	ldr	r2, [pc, #24]	; (8008bc0 <__stm32_exti_isr+0x3c>)
 8008ba8:	6153      	str	r3, [r2, #20]
			/* clear pending interrupt */
			stm32_exti_clear_pending(line);

			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
 8008baa:	f856 3034 	ldr.w	r3, [r6, r4, lsl #3]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d0ed      	beq.n	8008b8e <__stm32_exti_isr+0xa>
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8008bb2:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
 8008bb6:	6851      	ldr	r1, [r2, #4]
 8008bb8:	4620      	mov	r0, r4
 8008bba:	4798      	blx	r3
 8008bbc:	e7e7      	b.n	8008b8e <__stm32_exti_isr+0xa>
		}
	}
}
 8008bbe:	bd70      	pop	{r4, r5, r6, pc}
 8008bc0:	40010400 	.word	0x40010400

08008bc4 <stm32_exti_enable>:
{
 8008bc4:	b508      	push	{r3, lr}
	LL_EXTI_EnableIT_0_31(1 << line);
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	4083      	lsls	r3, r0
  SET_BIT(EXTI->IMR, ExtiLine);
 8008bca:	4a04      	ldr	r2, [pc, #16]	; (8008bdc <stm32_exti_enable+0x18>)
 8008bcc:	6811      	ldr	r1, [r2, #0]
 8008bce:	430b      	orrs	r3, r1
 8008bd0:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 8008bd2:	4b03      	ldr	r3, [pc, #12]	; (8008be0 <stm32_exti_enable+0x1c>)
 8008bd4:	5618      	ldrsb	r0, [r3, r0]
 8008bd6:	f002 fa3f 	bl	800b058 <arch_irq_enable>
}
 8008bda:	bd08      	pop	{r3, pc}
 8008bdc:	40010400 	.word	0x40010400
 8008be0:	08025704 	.word	0x08025704

08008be4 <stm32_exti_disable>:
	if (line < 32) {
 8008be4:	281f      	cmp	r0, #31
 8008be6:	dc06      	bgt.n	8008bf6 <stm32_exti_disable+0x12>
		LL_EXTI_DisableIT_0_31(1 << line);
 8008be8:	2301      	movs	r3, #1
 8008bea:	4083      	lsls	r3, r0
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8008bec:	4a02      	ldr	r2, [pc, #8]	; (8008bf8 <stm32_exti_disable+0x14>)
 8008bee:	6810      	ldr	r0, [r2, #0]
 8008bf0:	ea20 0003 	bic.w	r0, r0, r3
 8008bf4:	6010      	str	r0, [r2, #0]
}
 8008bf6:	4770      	bx	lr
 8008bf8:	40010400 	.word	0x40010400

08008bfc <stm32_exti_trigger>:
	switch (trigger) {
 8008bfc:	2903      	cmp	r1, #3
 8008bfe:	d832      	bhi.n	8008c66 <stm32_exti_trigger+0x6a>
 8008c00:	e8df f001 	tbb	[pc, r1]
 8008c04:	271b0f02 	.word	0x271b0f02
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 8008c08:	2301      	movs	r3, #1
 8008c0a:	fa03 f000 	lsl.w	r0, r3, r0
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8008c0e:	4b16      	ldr	r3, [pc, #88]	; (8008c68 <stm32_exti_trigger+0x6c>)
 8008c10:	689a      	ldr	r2, [r3, #8]
 8008c12:	ea22 0200 	bic.w	r2, r2, r0
 8008c16:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8008c18:	68da      	ldr	r2, [r3, #12]
 8008c1a:	ea22 0000 	bic.w	r0, r2, r0
 8008c1e:	60d8      	str	r0, [r3, #12]
}
 8008c20:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8008c22:	2301      	movs	r3, #1
 8008c24:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 8008c28:	4b0f      	ldr	r3, [pc, #60]	; (8008c68 <stm32_exti_trigger+0x6c>)
 8008c2a:	689a      	ldr	r2, [r3, #8]
 8008c2c:	4302      	orrs	r2, r0
 8008c2e:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8008c30:	68da      	ldr	r2, [r3, #12]
 8008c32:	ea22 0000 	bic.w	r0, r2, r0
 8008c36:	60d8      	str	r0, [r3, #12]
}
 8008c38:	4770      	bx	lr
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR, ExtiLine);
 8008c40:	4b09      	ldr	r3, [pc, #36]	; (8008c68 <stm32_exti_trigger+0x6c>)
 8008c42:	68da      	ldr	r2, [r3, #12]
 8008c44:	4302      	orrs	r2, r0
 8008c46:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8008c48:	689a      	ldr	r2, [r3, #8]
 8008c4a:	ea22 0000 	bic.w	r0, r2, r0
 8008c4e:	6098      	str	r0, [r3, #8]
}
 8008c50:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8008c52:	2301      	movs	r3, #1
 8008c54:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 8008c58:	4b03      	ldr	r3, [pc, #12]	; (8008c68 <stm32_exti_trigger+0x6c>)
 8008c5a:	689a      	ldr	r2, [r3, #8]
 8008c5c:	4302      	orrs	r2, r0
 8008c5e:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8008c60:	68da      	ldr	r2, [r3, #12]
 8008c62:	4310      	orrs	r0, r2
 8008c64:	60d8      	str	r0, [r3, #12]
}
 8008c66:	4770      	bx	lr
 8008c68:	40010400 	.word	0x40010400

08008c6c <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_GET(exti_stm32);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 8008c6c:	4b07      	ldr	r3, [pc, #28]	; (8008c8c <stm32_exti_set_callback+0x20>)
 8008c6e:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8008c72:	b93b      	cbnz	r3, 8008c84 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8008c74:	4b05      	ldr	r3, [pc, #20]	; (8008c8c <stm32_exti_set_callback+0x20>)
 8008c76:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	data->cb[line].data = arg;
 8008c7a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8008c7e:	6042      	str	r2, [r0, #4]

	return 0;
 8008c80:	2000      	movs	r0, #0
 8008c82:	4770      	bx	lr
		return -EBUSY;
 8008c84:	f06f 000f 	mvn.w	r0, #15
}
 8008c88:	4770      	bx	lr
 8008c8a:	bf00      	nop
 8008c8c:	20003898 	.word	0x20003898

08008c90 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_GET(exti_stm32);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8008c90:	4b03      	ldr	r3, [pc, #12]	; (8008ca0 <stm32_exti_unset_callback+0x10>)
 8008c92:	2200      	movs	r2, #0
 8008c94:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 8008c98:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8008c9c:	605a      	str	r2, [r3, #4]
}
 8008c9e:	4770      	bx	lr
 8008ca0:	20003898 	.word	0x20003898

08008ca4 <stm32_clock_control_on>:
	return clock / prescaler;
}

static inline int stm32_clock_control_on(const struct device *dev,
					 clock_control_subsys_t sub_system)
{
 8008ca4:	b084      	sub	sp, #16
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8008ca6:	680b      	ldr	r3, [r1, #0]
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	d011      	beq.n	8008cd0 <stm32_clock_control_on+0x2c>
 8008cac:	2b03      	cmp	r3, #3
 8008cae:	d01a      	beq.n	8008ce6 <stm32_clock_control_on+0x42>
 8008cb0:	b11b      	cbz	r3, 8008cba <stm32_clock_control_on+0x16>
 8008cb2:	f06f 0022 	mvn.w	r0, #34	; 0x22
	default:
		return -ENOTSUP;
	}

	return 0;
}
 8008cb6:	b004      	add	sp, #16
 8008cb8:	4770      	bx	lr
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 8008cba:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8008cbc:	4a0f      	ldr	r2, [pc, #60]	; (8008cfc <stm32_clock_control_on+0x58>)
 8008cbe:	6951      	ldr	r1, [r2, #20]
 8008cc0:	4319      	orrs	r1, r3
 8008cc2:	6151      	str	r1, [r2, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8008cc4:	6952      	ldr	r2, [r2, #20]
 8008cc6:	4013      	ands	r3, r2
 8008cc8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8008cca:	9b01      	ldr	r3, [sp, #4]
	return 0;
 8008ccc:	2000      	movs	r0, #0
}
 8008cce:	e7f2      	b.n	8008cb6 <stm32_clock_control_on+0x12>
		LL_APB1_GRP1_EnableClock(pclken->enr);
 8008cd0:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8008cd2:	4a0a      	ldr	r2, [pc, #40]	; (8008cfc <stm32_clock_control_on+0x58>)
 8008cd4:	69d1      	ldr	r1, [r2, #28]
 8008cd6:	4319      	orrs	r1, r3
 8008cd8:	61d1      	str	r1, [r2, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8008cda:	69d2      	ldr	r2, [r2, #28]
 8008cdc:	4013      	ands	r3, r2
 8008cde:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8008ce0:	9b02      	ldr	r3, [sp, #8]
	return 0;
 8008ce2:	2000      	movs	r0, #0
}
 8008ce4:	e7e7      	b.n	8008cb6 <stm32_clock_control_on+0x12>
		LL_APB2_GRP1_EnableClock(pclken->enr);
 8008ce6:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8008ce8:	4a04      	ldr	r2, [pc, #16]	; (8008cfc <stm32_clock_control_on+0x58>)
 8008cea:	6991      	ldr	r1, [r2, #24]
 8008cec:	4319      	orrs	r1, r3
 8008cee:	6191      	str	r1, [r2, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8008cf0:	6992      	ldr	r2, [r2, #24]
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8008cf6:	9b03      	ldr	r3, [sp, #12]
	return 0;
 8008cf8:	2000      	movs	r0, #0
}
 8008cfa:	e7dc      	b.n	8008cb6 <stm32_clock_control_on+0x12>
 8008cfc:	40021000 	.word	0x40021000

08008d00 <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8008d00:	680b      	ldr	r3, [r1, #0]
 8008d02:	2b02      	cmp	r3, #2
 8008d04:	d00d      	beq.n	8008d22 <stm32_clock_control_off+0x22>
 8008d06:	2b03      	cmp	r3, #3
 8008d08:	d013      	beq.n	8008d32 <stm32_clock_control_off+0x32>
 8008d0a:	b113      	cbz	r3, 8008d12 <stm32_clock_control_off+0x12>
 8008d0c:	f06f 0022 	mvn.w	r0, #34	; 0x22
	default:
		return -ENOTSUP;
	}

	return 0;
}
 8008d10:	4770      	bx	lr
		LL_AHB1_GRP1_DisableClock(pclken->enr);
 8008d12:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->AHBENR, Periphs);
 8008d14:	4a0b      	ldr	r2, [pc, #44]	; (8008d44 <stm32_clock_control_off+0x44>)
 8008d16:	6953      	ldr	r3, [r2, #20]
 8008d18:	ea23 0301 	bic.w	r3, r3, r1
 8008d1c:	6153      	str	r3, [r2, #20]
	return 0;
 8008d1e:	2000      	movs	r0, #0
}
 8008d20:	4770      	bx	lr
		LL_APB1_GRP1_DisableClock(pclken->enr);
 8008d22:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8008d24:	4a07      	ldr	r2, [pc, #28]	; (8008d44 <stm32_clock_control_off+0x44>)
 8008d26:	69d3      	ldr	r3, [r2, #28]
 8008d28:	ea23 0301 	bic.w	r3, r3, r1
 8008d2c:	61d3      	str	r3, [r2, #28]
	return 0;
 8008d2e:	2000      	movs	r0, #0
}
 8008d30:	4770      	bx	lr
		LL_APB2_GRP1_DisableClock(pclken->enr);
 8008d32:	6849      	ldr	r1, [r1, #4]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8008d34:	4a03      	ldr	r2, [pc, #12]	; (8008d44 <stm32_clock_control_off+0x44>)
 8008d36:	6993      	ldr	r3, [r2, #24]
 8008d38:	ea23 0301 	bic.w	r3, r3, r1
 8008d3c:	6193      	str	r3, [r2, #24]
	return 0;
 8008d3e:	2000      	movs	r0, #0
}
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop
 8008d44:	40021000 	.word	0x40021000

08008d48 <stm32_clock_control_get_subsys_rate>:


static int stm32_clock_control_get_subsys_rate(const struct device *clock,
						clock_control_subsys_t sub_system,
						uint32_t *rate)
{
 8008d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d4a:	460c      	mov	r4, r1
 8008d4c:	4615      	mov	r5, r2
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 8008d4e:	4b11      	ldr	r3, [pc, #68]	; (8008d94 <stm32_clock_control_get_subsys_rate+0x4c>)
 8008d50:	681f      	ldr	r7, [r3, #0]
	uint32_t apb1_clock = get_bus_clock(ahb_clock,
 8008d52:	2102      	movs	r1, #2
 8008d54:	4638      	mov	r0, r7
 8008d56:	f012 ff68 	bl	801bc2a <get_bus_clock>
 8008d5a:	4606      	mov	r6, r0
				CONFIG_CLOCK_STM32_APB1_PRESCALER);
#if !defined (CONFIG_SOC_SERIES_STM32F0X) && !defined (CONFIG_SOC_SERIES_STM32G0X)
	uint32_t apb2_clock = get_bus_clock(ahb_clock,
 8008d5c:	2101      	movs	r1, #1
 8008d5e:	4638      	mov	r0, r7
 8008d60:	f012 ff63 	bl	801bc2a <get_bus_clock>
				CONFIG_CLOCK_STM32_APB2_PRESCALER);
#endif /* CONFIG_SOC_SERIES_STM32F0X && CONFIG_SOC_SERIES_STM32G0X */

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8008d64:	6823      	ldr	r3, [r4, #0]
 8008d66:	2b02      	cmp	r3, #2
 8008d68:	d00d      	beq.n	8008d86 <stm32_clock_control_get_subsys_rate+0x3e>
 8008d6a:	d804      	bhi.n	8008d76 <stm32_clock_control_get_subsys_rate+0x2e>
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d80d      	bhi.n	8008d8c <stm32_clock_control_get_subsys_rate+0x44>
	case STM32_CLOCK_BUS_AHB1:
	case STM32_CLOCK_BUS_AHB2:
#ifdef CONFIG_SOC_SERIES_STM32L0X
	case STM32_CLOCK_BUS_IOP:
#endif /* CONFIG_SOC_SERIES_STM32L0X */
		*rate = ahb_clock;
 8008d70:	602f      	str	r7, [r5, #0]
#endif /* CONFIG_SOC_SERIES_STM32F0X && CONFIG_SOC_SERIES_STM32G0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 8008d72:	2000      	movs	r0, #0
		break;
 8008d74:	e006      	b.n	8008d84 <stm32_clock_control_get_subsys_rate+0x3c>
	switch (pclken->bus) {
 8008d76:	2b03      	cmp	r3, #3
 8008d78:	d102      	bne.n	8008d80 <stm32_clock_control_get_subsys_rate+0x38>
		*rate = apb2_clock;
 8008d7a:	6028      	str	r0, [r5, #0]
	return 0;
 8008d7c:	2000      	movs	r0, #0
		break;
 8008d7e:	e001      	b.n	8008d84 <stm32_clock_control_get_subsys_rate+0x3c>
	switch (pclken->bus) {
 8008d80:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 8008d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*rate = apb1_clock;
 8008d86:	602e      	str	r6, [r5, #0]
	return 0;
 8008d88:	2000      	movs	r0, #0
		break;
 8008d8a:	e7fb      	b.n	8008d84 <stm32_clock_control_get_subsys_rate+0x3c>
	switch (pclken->bus) {
 8008d8c:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8008d90:	e7f8      	b.n	8008d84 <stm32_clock_control_get_subsys_rate+0x3c>
 8008d92:	bf00      	nop
 8008d94:	20000cd0 	.word	0x20000cd0

08008d98 <stm32_clock_switch_to_hsi>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8008d98:	4b0f      	ldr	r3, [pc, #60]	; (8008dd8 <stm32_clock_switch_to_hsi+0x40>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 */
__unused
static void stm32_clock_switch_to_hsi(uint32_t ahb_prescaler)
{
	/* Enable HSI if not enabled */
	if (LL_RCC_HSI_IsReady() != 1) {
 8008d9c:	f013 0f02 	tst.w	r3, #2
 8008da0:	d109      	bne.n	8008db6 <stm32_clock_switch_to_hsi+0x1e>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8008da2:	4a0d      	ldr	r2, [pc, #52]	; (8008dd8 <stm32_clock_switch_to_hsi+0x40>)
 8008da4:	6813      	ldr	r3, [r2, #0]
 8008da6:	f043 0301 	orr.w	r3, r3, #1
 8008daa:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8008dac:	4b0a      	ldr	r3, [pc, #40]	; (8008dd8 <stm32_clock_switch_to_hsi+0x40>)
 8008dae:	681b      	ldr	r3, [r3, #0]
		/* Enable HSI */
		LL_RCC_HSI_Enable();
		while (LL_RCC_HSI_IsReady() != 1) {
 8008db0:	f013 0f02 	tst.w	r3, #2
 8008db4:	d0fa      	beq.n	8008dac <stm32_clock_switch_to_hsi+0x14>
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8008db6:	4b08      	ldr	r3, [pc, #32]	; (8008dd8 <stm32_clock_switch_to_hsi+0x40>)
 8008db8:	685a      	ldr	r2, [r3, #4]
 8008dba:	f022 0203 	bic.w	r2, r2, #3
 8008dbe:	605a      	str	r2, [r3, #4]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8008dc0:	685a      	ldr	r2, [r3, #4]
 8008dc2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008dc6:	4310      	orrs	r0, r2
 8008dc8:	6058      	str	r0, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008dca:	4b03      	ldr	r3, [pc, #12]	; (8008dd8 <stm32_clock_switch_to_hsi+0x40>)
 8008dcc:	685b      	ldr	r3, [r3, #4]
	}

	/* Set HSI as SYSCLCK source */
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
	LL_RCC_SetAHBPrescaler(ahb_prescaler);
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8008dce:	f013 0f0c 	tst.w	r3, #12
 8008dd2:	d1fa      	bne.n	8008dca <stm32_clock_switch_to_hsi+0x32>
	}
}
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	40021000 	.word	0x40021000

08008ddc <stm32_clock_control_init>:
			 mco2_prescaler(CONFIG_CLOCK_STM32_MCO2_DIV));
#endif /* CONFIG_CLOCK_STM32_MCO2_SRC_NOCLOCK */
}

static int stm32_clock_control_init(const struct device *dev)
{
 8008ddc:	b510      	push	{r4, lr}
 8008dde:	b086      	sub	sp, #24
#endif

	ARG_UNUSED(dev);

	/* configure clock for AHB/APB buses */
	config_bus_clk_init((LL_UTILS_ClkInitTypeDef *)&s_ClkInitStruct);
 8008de0:	a803      	add	r0, sp, #12
 8008de2:	f012 ff1b 	bl	801bc1c <config_bus_clk_init>
#else
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
#endif /* CONFIG_SOC_SERIES_STM32WBX */

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8008de6:	f000 f81f 	bl	8008e28 <config_enable_default_clocks>

#ifdef CONFIG_CLOCK_STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 8008dea:	a801      	add	r0, sp, #4
 8008dec:	f012 ff20 	bl	801bc30 <config_pll_init>
	 *
	 * Don't use s_ClkInitStruct.AHBCLKDivider as the AHB
	 * prescaler here. In this configuration, that's the value to
	 * use when the SYSCLK source is the PLL, not HSI.
	 */
	stm32_clock_switch_to_hsi(LL_RCC_SYSCLK_DIV_1);
 8008df0:	2000      	movs	r0, #0
 8008df2:	f7ff ffd1 	bl	8008d98 <stm32_clock_switch_to_hsi>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8008df6:	4c0a      	ldr	r4, [pc, #40]	; (8008e20 <stm32_clock_control_init+0x44>)
 8008df8:	6823      	ldr	r3, [r4, #0]
 8008dfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008dfe:	6023      	str	r3, [r4, #0]
	} else {
		hse_bypass = LL_UTILS_HSEBYPASS_OFF;
	}

	/* Switch to PLL with HSE as clock source */
	LL_PLL_ConfigSystemClock_HSE(
 8008e00:	ab03      	add	r3, sp, #12
 8008e02:	aa01      	add	r2, sp, #4
 8008e04:	2100      	movs	r1, #0
 8008e06:	4807      	ldr	r0, [pc, #28]	; (8008e24 <stm32_clock_control_init+0x48>)
 8008e08:	f00e faf0 	bl	80173ec <LL_PLL_ConfigSystemClock_HSE>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8008e0c:	6823      	ldr	r3, [r4, #0]
 8008e0e:	f023 0301 	bic.w	r3, r3, #1
 8008e12:	6023      	str	r3, [r4, #0]
		&s_PLLInitStruct,
		&s_ClkInitStruct);

	/* Disable other clocks */
	LL_RCC_HSI_Disable();
	LL_RCC_MSI_Disable();
 8008e14:	f012 ff12 	bl	801bc3c <LL_RCC_MSI_Disable>

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8008e18:	2000      	movs	r0, #0
 8008e1a:	b006      	add	sp, #24
 8008e1c:	bd10      	pop	{r4, pc}
 8008e1e:	bf00      	nop
 8008e20:	40021000 	.word	0x40021000
 8008e24:	007a1200 	.word	0x007a1200

08008e28 <config_enable_default_clocks>:

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 8008e28:	b082      	sub	sp, #8
  SET_BIT(RCC->APB2ENR, Periphs);
 8008e2a:	4b06      	ldr	r3, [pc, #24]	; (8008e44 <config_enable_default_clocks+0x1c>)
 8008e2c:	699a      	ldr	r2, [r3, #24]
 8008e2e:	f042 0201 	orr.w	r2, r2, #1
 8008e32:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8008e34:	699b      	ldr	r3, [r3, #24]
 8008e36:	f003 0301 	and.w	r3, r3, #1
 8008e3a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8008e3c:	9b01      	ldr	r3, [sp, #4]
	/* SYSCFG is required to remap IRQ to avoid conflicts with CAN */
	/* cf §14.1.3, RM0316 */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
#endif
#endif /* !CONFIG_SOC_SERIES_STM32F3X */
}
 8008e3e:	b002      	add	sp, #8
 8008e40:	4770      	bx	lr
 8008e42:	bf00      	nop
 8008e44:	40021000 	.word	0x40021000

08008e48 <enable_port>:
 * @param clk  optional clock device
 *
 * @return 0 on success, error otherwise
 */
static int enable_port(uint32_t port, const struct device *clk)
{
 8008e48:	b510      	push	{r4, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	4604      	mov	r4, r0
	/* enable port clock */
	if (!clk) {
 8008e4e:	4608      	mov	r0, r1
 8008e50:	b171      	cbz	r1, 8008e70 <enable_port+0x28>
		clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);
	}

	struct stm32_pclken pclken;

	pclken.bus = STM32_CLOCK_BUS_GPIO;
 8008e52:	2300      	movs	r3, #0
 8008e54:	9300      	str	r3, [sp, #0]
	pclken.enr = ports_enable[port];
 8008e56:	4b0a      	ldr	r3, [pc, #40]	; (8008e80 <enable_port+0x38>)
 8008e58:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008e5c:	9301      	str	r3, [sp, #4]

	if (pclken.enr == STM32_PORT_NOT_AVAILABLE) {
 8008e5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e62:	d009      	beq.n	8008e78 <enable_port+0x30>
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_on(const struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
 8008e64:	6883      	ldr	r3, [r0, #8]
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4669      	mov	r1, sp
 8008e6a:	4798      	blx	r3
		return -EIO;
	}

	return clock_control_on(clk, (clock_control_subsys_t *) &pclken);
}
 8008e6c:	b002      	add	sp, #8
 8008e6e:	bd10      	pop	{r4, pc}
 8008e70:	4804      	ldr	r0, [pc, #16]	; (8008e84 <enable_port+0x3c>)
 8008e72:	f00e feed 	bl	8017c50 <z_impl_device_get_binding>
 8008e76:	e7ec      	b.n	8008e52 <enable_port+0xa>
		return -EIO;
 8008e78:	f06f 0004 	mvn.w	r0, #4
 8008e7c:	e7f6      	b.n	8008e6c <enable_port+0x24>
 8008e7e:	bf00      	nop
 8008e80:	08025720 	.word	0x08025720
 8008e84:	08025714 	.word	0x08025714

08008e88 <stm32_setup_pins>:
 * @param pinconf  board pin configuration array
 * @param pins     array size
 */
void stm32_setup_pins(const struct pin_config *pinconf,
		      size_t pins)
{
 8008e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e8a:	4605      	mov	r5, r0
 8008e8c:	460e      	mov	r6, r1
 8008e8e:	4809      	ldr	r0, [pc, #36]	; (8008eb4 <stm32_setup_pins+0x2c>)
 8008e90:	f00e fede 	bl	8017c50 <z_impl_device_get_binding>
 8008e94:	4607      	mov	r7, r0
	const struct device *clk;
	int i;

	clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);

	for (i = 0; i < pins; i++) {
 8008e96:	2400      	movs	r4, #0
 8008e98:	42b4      	cmp	r4, r6
 8008e9a:	d209      	bcs.n	8008eb0 <stm32_setup_pins+0x28>
		z_pinmux_stm32_set(pinconf[i].pin_num,
 8008e9c:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8008ea0:	463a      	mov	r2, r7
 8008ea2:	6859      	ldr	r1, [r3, #4]
 8008ea4:	f815 0034 	ldrb.w	r0, [r5, r4, lsl #3]
 8008ea8:	f012 fed5 	bl	801bc56 <z_pinmux_stm32_set>
	for (i = 0; i < pins; i++) {
 8008eac:	3401      	adds	r4, #1
 8008eae:	e7f3      	b.n	8008e98 <stm32_setup_pins+0x10>
				  pinconf[i].mode,
				  clk);
	}
}
 8008eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	08025714 	.word	0x08025714

08008eb8 <usb_dc_stm32_get_ep_state>:

static struct usb_dc_stm32_ep_state *usb_dc_stm32_get_ep_state(uint8_t ep)
{
	struct usb_dc_stm32_ep_state *ep_state_base;

	if (USB_EP_GET_IDX(ep) >= USB_NUM_BIDIR_ENDPOINTS) {
 8008eb8:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 8008ebc:	2b07      	cmp	r3, #7
 8008ebe:	dc0b      	bgt.n	8008ed8 <usb_dc_stm32_get_ep_state+0x20>
		return NULL;
	}

	if (USB_EP_DIR_IS_OUT(ep)) {
 8008ec0:	f010 0f80 	tst.w	r0, #128	; 0x80
 8008ec4:	d106      	bne.n	8008ed4 <usb_dc_stm32_get_ep_state+0x1c>
		ep_state_base = usb_dc_stm32_state.out_ep_state;
 8008ec6:	4a05      	ldr	r2, [pc, #20]	; (8008edc <usb_dc_stm32_get_ep_state+0x24>)
	} else {
		ep_state_base = usb_dc_stm32_state.in_ep_state;
	}

	return ep_state_base + USB_EP_GET_IDX(ep);
 8008ec8:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8008ecc:	232c      	movs	r3, #44	; 0x2c
 8008ece:	fb03 2000 	mla	r0, r3, r0, r2
 8008ed2:	4770      	bx	lr
		ep_state_base = usb_dc_stm32_state.in_ep_state;
 8008ed4:	4a02      	ldr	r2, [pc, #8]	; (8008ee0 <usb_dc_stm32_get_ep_state+0x28>)
 8008ed6:	e7f7      	b.n	8008ec8 <usb_dc_stm32_get_ep_state+0x10>
		return NULL;
 8008ed8:	2000      	movs	r0, #0
}
 8008eda:	4770      	bx	lr
 8008edc:	20003b88 	.word	0x20003b88
 8008ee0:	20003ce8 	.word	0x20003ce8

08008ee4 <usb_dc_stm32_clock_enable>:
	usb_dc_stm32_state.status_cb(USB_DC_SOF, NULL);
}
#endif

static int usb_dc_stm32_clock_enable(void)
{
 8008ee4:	b510      	push	{r4, lr}
 8008ee6:	b082      	sub	sp, #8
 8008ee8:	4812      	ldr	r0, [pc, #72]	; (8008f34 <usb_dc_stm32_clock_enable+0x50>)
 8008eea:	f00e feb1 	bl	8017c50 <z_impl_device_get_binding>
 8008eee:	4603      	mov	r3, r0
	const struct device *clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);
	struct stm32_pclken pclken = {
 8008ef0:	4911      	ldr	r1, [pc, #68]	; (8008f38 <usb_dc_stm32_clock_enable+0x54>)
 8008ef2:	466a      	mov	r2, sp
 8008ef4:	c903      	ldmia	r1, {r0, r1}
 8008ef6:	e882 0003 	stmia.w	r2, {r0, r1}
	const struct clock_control_driver_api *api =
 8008efa:	6899      	ldr	r1, [r3, #8]
	return api->on(dev, sys);
 8008efc:	680c      	ldr	r4, [r1, #0]
 8008efe:	4611      	mov	r1, r2
 8008f00:	4618      	mov	r0, r3
 8008f02:	47a0      	blx	r4
		LOG_ERR("Unable to set USB clock source to PLL.");
	}
#endif /* CONFIG_CLOCK_STM32_MSI_PLL_MODE && !CONFIG_CLOCK_STM32_SYSCLK_SRC_MSI */
#endif /* RCC_HSI48_SUPPORT / LL_RCC_USB_CLKSOURCE_NONE */

	if (clock_control_on(clk, (clock_control_subsys_t *)&pclken) != 0) {
 8008f04:	b908      	cbnz	r0, 8008f0a <usb_dc_stm32_clock_enable+0x26>
	LL_AHB1_GRP1_DisableClockLowPower(LL_AHB1_GRP1_PERIPH_OTGHSULPI);
#endif
#endif

	return 0;
}
 8008f06:	b002      	add	sp, #8
 8008f08:	bd10      	pop	{r4, pc}
		LOG_ERR("Unable to enable USB clock");
 8008f0a:	f04f 0100 	mov.w	r1, #0
 8008f0e:	2301      	movs	r3, #1
 8008f10:	f363 0102 	bfi	r1, r3, #0, #3
 8008f14:	f36f 01c5 	bfc	r1, #3, #3
 8008f18:	4b08      	ldr	r3, [pc, #32]	; (8008f3c <usb_dc_stm32_clock_enable+0x58>)
 8008f1a:	4a09      	ldr	r2, [pc, #36]	; (8008f40 <usb_dc_stm32_clock_enable+0x5c>)
 8008f1c:	1a9b      	subs	r3, r3, r2
 8008f1e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8008f22:	f363 118f 	bfi	r1, r3, #6, #10
 8008f26:	4807      	ldr	r0, [pc, #28]	; (8008f44 <usb_dc_stm32_clock_enable+0x60>)
 8008f28:	f7fd fc7a 	bl	8006820 <log_0>
		return -EIO;
 8008f2c:	f06f 0004 	mvn.w	r0, #4
 8008f30:	e7e9      	b.n	8008f06 <usb_dc_stm32_clock_enable+0x22>
 8008f32:	bf00      	nop
 8008f34:	08025714 	.word	0x08025714
 8008f38:	08022cec 	.word	0x08022cec
 8008f3c:	08022c38 	.word	0x08022c38
 8008f40:	08022b90 	.word	0x08022b90
 8008f44:	0802574c 	.word	0x0802574c

08008f48 <usb_dc_stm32_init>:
	return speed;
}
#endif /* USB_OTG_FS || USB_OTG_HS */

static int usb_dc_stm32_init(void)
{
 8008f48:	b510      	push	{r4, lr}
	HAL_StatusTypeDef status;
	unsigned int i;

#ifdef USB
	usb_dc_stm32_state.pcd.Instance = USB;
 8008f4a:	4831      	ldr	r0, [pc, #196]	; (8009010 <usb_dc_stm32_init+0xc8>)
 8008f4c:	4b31      	ldr	r3, [pc, #196]	; (8009014 <usb_dc_stm32_init+0xcc>)
 8008f4e:	6003      	str	r3, [r0, #0]
	usb_dc_stm32_state.pcd.Init.speed = PCD_SPEED_FULL;
 8008f50:	2302      	movs	r3, #2
 8008f52:	6083      	str	r3, [r0, #8]
	usb_dc_stm32_state.pcd.Init.dev_endpoints = USB_NUM_BIDIR_ENDPOINTS;
 8008f54:	2208      	movs	r2, #8
 8008f56:	6042      	str	r2, [r0, #4]
	usb_dc_stm32_state.pcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008f58:	6103      	str	r3, [r0, #16]
	usb_dc_stm32_state.pcd.Init.ep0_mps = PCD_EP0MPS_64;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	60c3      	str	r3, [r0, #12]
	usb_dc_stm32_state.pcd.Init.low_power_enable = 0;
 8008f5e:	6183      	str	r3, [r0, #24]
#ifdef CONFIG_USB_DEVICE_SOF
	usb_dc_stm32_state.pcd.Init.Sof_enable = 1;
#endif /* CONFIG_USB_DEVICE_SOF */

	LOG_DBG("HAL_PCD_Init");
	status = HAL_PCD_Init(&usb_dc_stm32_state.pcd);
 8008f60:	f017 fcf7 	bl	8020952 <HAL_PCD_Init>
	if (status != HAL_OK) {
 8008f64:	b990      	cbnz	r0, 8008f8c <usb_dc_stm32_init+0x44>
		LOG_ERR("PCD_Init failed, %d", (int)status);
		return -EIO;
	}

	LOG_DBG("HAL_PCD_Start");
	status = HAL_PCD_Start(&usb_dc_stm32_state.pcd);
 8008f66:	482a      	ldr	r0, [pc, #168]	; (8009010 <usb_dc_stm32_init+0xc8>)
 8008f68:	f017 fd4b 	bl	8020a02 <HAL_PCD_Start>
	if (status != HAL_OK) {
 8008f6c:	4601      	mov	r1, r0
 8008f6e:	bb10      	cbnz	r0, 8008fb6 <usb_dc_stm32_init+0x6e>
		LOG_ERR("PCD_Start failed, %d", (int)status);
		return -EIO;
	}

	usb_dc_stm32_state.out_ep_state[EP0_IDX].ep_mps = EP0_MPS;
 8008f70:	4b27      	ldr	r3, [pc, #156]	; (8009010 <usb_dc_stm32_init+0xc8>)
 8008f72:	2240      	movs	r2, #64	; 0x40
 8008f74:	f8a3 2270 	strh.w	r2, [r3, #624]	; 0x270
	usb_dc_stm32_state.out_ep_state[EP0_IDX].ep_type = EP_TYPE_CTRL;
 8008f78:	2400      	movs	r4, #0
 8008f7a:	f883 4274 	strb.w	r4, [r3, #628]	; 0x274
	usb_dc_stm32_state.in_ep_state[EP0_IDX].ep_mps = EP0_MPS;
 8008f7e:	f8a3 23d0 	strh.w	r2, [r3, #976]	; 0x3d0
	usb_dc_stm32_state.in_ep_state[EP0_IDX].ep_type = EP_TYPE_CTRL;
 8008f82:	f883 43d4 	strb.w	r4, [r3, #980]	; 0x3d4

#ifdef USB
	/* Start PMA configuration for the endpoints after the BTABLE. */
	usb_dc_stm32_state.pma_offset = USB_BTABLE_SIZE;
 8008f86:	f8c3 2730 	str.w	r2, [r3, #1840]	; 0x730

	for (i = 0U; i < USB_NUM_BIDIR_ENDPOINTS; i++) {
 8008f8a:	e035      	b.n	8008ff8 <usb_dc_stm32_init+0xb0>
 8008f8c:	4601      	mov	r1, r0
		LOG_ERR("PCD_Init failed, %d", (int)status);
 8008f8e:	f04f 0200 	mov.w	r2, #0
 8008f92:	2301      	movs	r3, #1
 8008f94:	f363 0202 	bfi	r2, r3, #0, #3
 8008f98:	f36f 02c5 	bfc	r2, #3, #3
 8008f9c:	4b1e      	ldr	r3, [pc, #120]	; (8009018 <usb_dc_stm32_init+0xd0>)
 8008f9e:	481f      	ldr	r0, [pc, #124]	; (800901c <usb_dc_stm32_init+0xd4>)
 8008fa0:	1a1b      	subs	r3, r3, r0
 8008fa2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8008fa6:	f363 128f 	bfi	r2, r3, #6, #10
 8008faa:	481d      	ldr	r0, [pc, #116]	; (8009020 <usb_dc_stm32_init+0xd8>)
 8008fac:	f7fd fac8 	bl	8006540 <log_1>
		return -EIO;
 8008fb0:	f06f 0004 	mvn.w	r0, #4
 8008fb4:	e02b      	b.n	800900e <usb_dc_stm32_init+0xc6>
		LOG_ERR("PCD_Start failed, %d", (int)status);
 8008fb6:	f04f 0200 	mov.w	r2, #0
 8008fba:	2301      	movs	r3, #1
 8008fbc:	f363 0202 	bfi	r2, r3, #0, #3
 8008fc0:	f36f 02c5 	bfc	r2, #3, #3
 8008fc4:	4b14      	ldr	r3, [pc, #80]	; (8009018 <usb_dc_stm32_init+0xd0>)
 8008fc6:	4815      	ldr	r0, [pc, #84]	; (800901c <usb_dc_stm32_init+0xd4>)
 8008fc8:	1a1b      	subs	r3, r3, r0
 8008fca:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8008fce:	f363 128f 	bfi	r2, r3, #6, #10
 8008fd2:	4814      	ldr	r0, [pc, #80]	; (8009024 <usb_dc_stm32_init+0xdc>)
 8008fd4:	f7fd fab4 	bl	8006540 <log_1>
		return -EIO;
 8008fd8:	f06f 0004 	mvn.w	r0, #4
 8008fdc:	e017      	b.n	800900e <usb_dc_stm32_init+0xc6>
		k_sem_init(&usb_dc_stm32_state.in_ep_state[i].write_sem, 1, 1);
 8008fde:	202c      	movs	r0, #44	; 0x2c
 8008fe0:	fb00 f004 	mul.w	r0, r0, r4
 8008fe4:	f500 7378 	add.w	r3, r0, #992	; 0x3e0
 8008fe8:	4809      	ldr	r0, [pc, #36]	; (8009010 <usb_dc_stm32_init+0xc8>)
 8008fea:	4418      	add	r0, r3
 8008fec:	3004      	adds	r0, #4
	return z_impl_k_sem_init(sem, initial_count, limit);
 8008fee:	2201      	movs	r2, #1
 8008ff0:	4611      	mov	r1, r2
 8008ff2:	f019 f8ff 	bl	80221f4 <z_impl_k_sem_init>
	for (i = 0U; i < USB_NUM_BIDIR_ENDPOINTS; i++) {
 8008ff6:	3401      	adds	r4, #1
 8008ff8:	2c07      	cmp	r4, #7
 8008ffa:	d9f0      	bls.n	8008fde <usb_dc_stm32_init+0x96>
				    FIFO_EP_WORDS);
		k_sem_init(&usb_dc_stm32_state.in_ep_state[i].write_sem, 1, 1);
	}
#endif /* USB */

	IRQ_CONNECT(USB_IRQ, USB_IRQ_PRI,
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	4611      	mov	r1, r2
 8009000:	204b      	movs	r0, #75	; 0x4b
 8009002:	f002 f84d 	bl	800b0a0 <z_arm_irq_priority_set>
		    usb_dc_stm32_isr, 0, 0);
	irq_enable(USB_IRQ);
 8009006:	204b      	movs	r0, #75	; 0x4b
 8009008:	f002 f826 	bl	800b058 <arch_irq_enable>
	return 0;
 800900c:	2000      	movs	r0, #0
}
 800900e:	bd10      	pop	{r4, pc}
 8009010:	20003918 	.word	0x20003918
 8009014:	40005c00 	.word	0x40005c00
 8009018:	08022c38 	.word	0x08022c38
 800901c:	08022b90 	.word	0x08022b90
 8009020:	08025768 	.word	0x08025768
 8009024:	0802577c 	.word	0x0802577c

08009028 <usb_dc_stm32_isr>:
{
 8009028:	b508      	push	{r3, lr}
	HAL_PCD_IRQHandler(&usb_dc_stm32_state.pcd);
 800902a:	4802      	ldr	r0, [pc, #8]	; (8009034 <usb_dc_stm32_isr+0xc>)
 800902c:	f017 ff77 	bl	8020f1e <HAL_PCD_IRQHandler>
}
 8009030:	bd08      	pop	{r3, pc}
 8009032:	bf00      	nop
 8009034:	20003918 	.word	0x20003918

08009038 <usb_dc_attach>:

/* Zephyr USB device controller API implementation */

int usb_dc_attach(void)
{
 8009038:	b508      	push	{r3, lr}
  return (READ_BIT(RCC->APB2ENR, Periphs) == Periphs);
 800903a:	4b11      	ldr	r3, [pc, #68]	; (8009080 <usb_dc_attach+0x48>)
 800903c:	699b      	ldr	r3, [r3, #24]
	/*
	 * STM32F302/F303: USB IRQ collides with CAN_1 IRQ (§14.1.3, RM0316)
	 * Remap IRQ by default to enable use of both IPs simultaneoulsy
	 * This should be done before calling any HAL function
	 */
	if (LL_APB2_GRP1_IsEnabledClock(LL_APB2_GRP1_PERIPH_SYSCFG)) {
 800903e:	f013 0f01 	tst.w	r3, #1
 8009042:	d008      	beq.n	8009056 <usb_dc_attach+0x1e>
  * @rmtoll SYSCFG_CFGR1 USB_IT_RMP    LL_SYSCFG_EnableRemapIT_USB
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableRemapIT_USB(void)
{
  SET_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_USB_IT_RMP);
 8009044:	4a0f      	ldr	r2, [pc, #60]	; (8009084 <usb_dc_attach+0x4c>)
 8009046:	6813      	ldr	r3, [r2, #0]
 8009048:	f043 0320 	orr.w	r3, r3, #32
 800904c:	6013      	str	r3, [r2, #0]
		LOG_ERR("System Configuration Controller clock is "
			"disabled. Unable to enable pin remapping.");
	}
#endif

	ret = usb_dc_stm32_clock_enable();
 800904e:	f7ff ff49 	bl	8008ee4 <usb_dc_stm32_clock_enable>
	if (ret) {
 8009052:	b190      	cbz	r0, 800907a <usb_dc_attach+0x42>
	LL_PWR_EnableVddUSB();
#endif /* defined(LL_APB1_GRP1_PERIPH_PWR) */
#endif /* PWR_CR2_USV */

	return 0;
}
 8009054:	bd08      	pop	{r3, pc}
		LOG_ERR("System Configuration Controller clock is "
 8009056:	f04f 0100 	mov.w	r1, #0
 800905a:	2301      	movs	r3, #1
 800905c:	f363 0102 	bfi	r1, r3, #0, #3
 8009060:	f36f 01c5 	bfc	r1, #3, #3
 8009064:	4b08      	ldr	r3, [pc, #32]	; (8009088 <usb_dc_attach+0x50>)
 8009066:	4a09      	ldr	r2, [pc, #36]	; (800908c <usb_dc_attach+0x54>)
 8009068:	1a9b      	subs	r3, r3, r2
 800906a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800906e:	f363 118f 	bfi	r1, r3, #6, #10
 8009072:	4807      	ldr	r0, [pc, #28]	; (8009090 <usb_dc_attach+0x58>)
 8009074:	f7fd fbd4 	bl	8006820 <log_0>
 8009078:	e7e9      	b.n	800904e <usb_dc_attach+0x16>
	ret = usb_dc_stm32_init();
 800907a:	f7ff ff65 	bl	8008f48 <usb_dc_stm32_init>
	if (ret) {
 800907e:	e7e9      	b.n	8009054 <usb_dc_attach+0x1c>
 8009080:	40021000 	.word	0x40021000
 8009084:	40010000 	.word	0x40010000
 8009088:	08022c38 	.word	0x08022c38
 800908c:	08022b90 	.word	0x08022b90
 8009090:	08025794 	.word	0x08025794

08009094 <usb_dc_set_status_callback>:

void usb_dc_set_status_callback(const usb_dc_status_callback cb)
{
	LOG_DBG("");

	usb_dc_stm32_state.status_cb = cb;
 8009094:	4b01      	ldr	r3, [pc, #4]	; (800909c <usb_dc_set_status_callback+0x8>)
 8009096:	f8c3 026c 	str.w	r0, [r3, #620]	; 0x26c
}
 800909a:	4770      	bx	lr
 800909c:	20003918 	.word	0x20003918

080090a0 <usb_dc_set_address>:

int usb_dc_set_address(const uint8_t addr)
{
 80090a0:	b510      	push	{r4, lr}
 80090a2:	4604      	mov	r4, r0
	HAL_StatusTypeDef status;

	LOG_DBG("addr %u (0x%02x)", addr, addr);

	status = HAL_PCD_SetAddress(&usb_dc_stm32_state.pcd, addr);
 80090a4:	4601      	mov	r1, r0
 80090a6:	480e      	ldr	r0, [pc, #56]	; (80090e0 <usb_dc_set_address+0x40>)
 80090a8:	f017 fcc3 	bl	8020a32 <HAL_PCD_SetAddress>
	if (status != HAL_OK) {
 80090ac:	b908      	cbnz	r0, 80090b2 <usb_dc_set_address+0x12>
		LOG_ERR("HAL_PCD_SetAddress failed(0x%02x), %d", addr,
			(int)status);
		return -EIO;
	}

	return 0;
 80090ae:	2000      	movs	r0, #0
}
 80090b0:	bd10      	pop	{r4, pc}
 80090b2:	4602      	mov	r2, r0
		LOG_ERR("HAL_PCD_SetAddress failed(0x%02x), %d", addr,
 80090b4:	f04f 0300 	mov.w	r3, #0
 80090b8:	2101      	movs	r1, #1
 80090ba:	f361 0302 	bfi	r3, r1, #0, #3
 80090be:	f36f 03c5 	bfc	r3, #3, #3
 80090c2:	4908      	ldr	r1, [pc, #32]	; (80090e4 <usb_dc_set_address+0x44>)
 80090c4:	4808      	ldr	r0, [pc, #32]	; (80090e8 <usb_dc_set_address+0x48>)
 80090c6:	1a09      	subs	r1, r1, r0
 80090c8:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 80090cc:	f361 138f 	bfi	r3, r1, #6, #10
 80090d0:	4621      	mov	r1, r4
 80090d2:	4806      	ldr	r0, [pc, #24]	; (80090ec <usb_dc_set_address+0x4c>)
 80090d4:	f7fd fab4 	bl	8006640 <log_2>
		return -EIO;
 80090d8:	f06f 0004 	mvn.w	r0, #4
 80090dc:	e7e8      	b.n	80090b0 <usb_dc_set_address+0x10>
 80090de:	bf00      	nop
 80090e0:	20003918 	.word	0x20003918
 80090e4:	08022c38 	.word	0x08022c38
 80090e8:	08022b90 	.word	0x08022b90
 80090ec:	080257e8 	.word	0x080257e8

080090f0 <usb_dc_ep_start_read>:

int usb_dc_ep_start_read(uint8_t ep, uint8_t *data, uint32_t max_data_len)
{
 80090f0:	b510      	push	{r4, lr}
 80090f2:	4604      	mov	r4, r0
 80090f4:	4613      	mov	r3, r2
	HAL_StatusTypeDef status;

	LOG_DBG("ep 0x%02x, len %u", ep, max_data_len);

	/* we flush EP0_IN by doing a 0 length receive on it */
	if (!USB_EP_DIR_IS_OUT(ep) && (ep != EP0_IN || max_data_len)) {
 80090f6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80090fa:	d110      	bne.n	800911e <usb_dc_ep_start_read+0x2e>
		LOG_ERR("invalid ep 0x%02x", ep);
		return -EINVAL;
	}

	if (max_data_len > EP_MPS) {
 80090fc:	2b40      	cmp	r3, #64	; 0x40
 80090fe:	d900      	bls.n	8009102 <usb_dc_ep_start_read+0x12>
		max_data_len = EP_MPS;
 8009100:	2340      	movs	r3, #64	; 0x40
	}

	status = HAL_PCD_EP_Receive(&usb_dc_stm32_state.pcd, ep,
				    usb_dc_stm32_state.ep_buf[USB_EP_GET_IDX(ep)],
 8009102:	f024 0180 	bic.w	r1, r4, #128	; 0x80
 8009106:	481d      	ldr	r0, [pc, #116]	; (800917c <usb_dc_ep_start_read+0x8c>)
 8009108:	0189      	lsls	r1, r1, #6
 800910a:	f501 61a6 	add.w	r1, r1, #1328	; 0x530
	status = HAL_PCD_EP_Receive(&usb_dc_stm32_state.pcd, ep,
 800910e:	1842      	adds	r2, r0, r1
 8009110:	4621      	mov	r1, r4
 8009112:	f017 fd08 	bl	8020b26 <HAL_PCD_EP_Receive>
				    max_data_len);
	if (status != HAL_OK) {
 8009116:	4602      	mov	r2, r0
 8009118:	b9d0      	cbnz	r0, 8009150 <usb_dc_ep_start_read+0x60>
		LOG_ERR("HAL_PCD_EP_Receive failed(0x%02x), %d", ep,
			(int)status);
		return -EIO;
	}

	return 0;
 800911a:	2000      	movs	r0, #0
}
 800911c:	bd10      	pop	{r4, pc}
	if (!USB_EP_DIR_IS_OUT(ep) && (ep != EP0_IN || max_data_len)) {
 800911e:	2880      	cmp	r0, #128	; 0x80
 8009120:	d101      	bne.n	8009126 <usb_dc_ep_start_read+0x36>
 8009122:	2a00      	cmp	r2, #0
 8009124:	d0ea      	beq.n	80090fc <usb_dc_ep_start_read+0xc>
		LOG_ERR("invalid ep 0x%02x", ep);
 8009126:	f04f 0200 	mov.w	r2, #0
 800912a:	2301      	movs	r3, #1
 800912c:	f363 0202 	bfi	r2, r3, #0, #3
 8009130:	f36f 02c5 	bfc	r2, #3, #3
 8009134:	4b12      	ldr	r3, [pc, #72]	; (8009180 <usb_dc_ep_start_read+0x90>)
 8009136:	4913      	ldr	r1, [pc, #76]	; (8009184 <usb_dc_ep_start_read+0x94>)
 8009138:	1a5b      	subs	r3, r3, r1
 800913a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800913e:	f363 128f 	bfi	r2, r3, #6, #10
 8009142:	4621      	mov	r1, r4
 8009144:	4810      	ldr	r0, [pc, #64]	; (8009188 <usb_dc_ep_start_read+0x98>)
 8009146:	f7fd f9fb 	bl	8006540 <log_1>
		return -EINVAL;
 800914a:	f06f 0015 	mvn.w	r0, #21
 800914e:	e7e5      	b.n	800911c <usb_dc_ep_start_read+0x2c>
		LOG_ERR("HAL_PCD_EP_Receive failed(0x%02x), %d", ep,
 8009150:	f04f 0300 	mov.w	r3, #0
 8009154:	2101      	movs	r1, #1
 8009156:	f361 0302 	bfi	r3, r1, #0, #3
 800915a:	f36f 03c5 	bfc	r3, #3, #3
 800915e:	4908      	ldr	r1, [pc, #32]	; (8009180 <usb_dc_ep_start_read+0x90>)
 8009160:	4808      	ldr	r0, [pc, #32]	; (8009184 <usb_dc_ep_start_read+0x94>)
 8009162:	1a09      	subs	r1, r1, r0
 8009164:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 8009168:	f361 138f 	bfi	r3, r1, #6, #10
 800916c:	4621      	mov	r1, r4
 800916e:	4807      	ldr	r0, [pc, #28]	; (800918c <usb_dc_ep_start_read+0x9c>)
 8009170:	f7fd fa66 	bl	8006640 <log_2>
		return -EIO;
 8009174:	f06f 0004 	mvn.w	r0, #4
 8009178:	e7d0      	b.n	800911c <usb_dc_ep_start_read+0x2c>
 800917a:	bf00      	nop
 800917c:	20003918 	.word	0x20003918
 8009180:	08022c38 	.word	0x08022c38
 8009184:	08022b90 	.word	0x08022b90
 8009188:	08025810 	.word	0x08025810
 800918c:	08025824 	.word	0x08025824

08009190 <usb_dc_ep_get_read_count>:

int usb_dc_ep_get_read_count(uint8_t ep, uint32_t *read_bytes)
{
 8009190:	b510      	push	{r4, lr}
	if (!USB_EP_DIR_IS_OUT(ep) || !read_bytes) {
 8009192:	f010 0f80 	tst.w	r0, #128	; 0x80
 8009196:	d108      	bne.n	80091aa <usb_dc_ep_get_read_count+0x1a>
 8009198:	460c      	mov	r4, r1
 800919a:	b131      	cbz	r1, 80091aa <usb_dc_ep_get_read_count+0x1a>
		LOG_ERR("invalid ep 0x%02x", ep);
		return -EINVAL;
	}

	*read_bytes = HAL_PCD_EP_GetRxCount(&usb_dc_stm32_state.pcd, ep);
 800919c:	4601      	mov	r1, r0
 800919e:	480d      	ldr	r0, [pc, #52]	; (80091d4 <usb_dc_ep_get_read_count+0x44>)
 80091a0:	f017 fce1 	bl	8020b66 <HAL_PCD_EP_GetRxCount>
 80091a4:	6020      	str	r0, [r4, #0]

	return 0;
 80091a6:	2000      	movs	r0, #0
}
 80091a8:	bd10      	pop	{r4, pc}
		LOG_ERR("invalid ep 0x%02x", ep);
 80091aa:	f04f 0200 	mov.w	r2, #0
 80091ae:	2301      	movs	r3, #1
 80091b0:	f363 0202 	bfi	r2, r3, #0, #3
 80091b4:	f36f 02c5 	bfc	r2, #3, #3
 80091b8:	4b07      	ldr	r3, [pc, #28]	; (80091d8 <usb_dc_ep_get_read_count+0x48>)
 80091ba:	4908      	ldr	r1, [pc, #32]	; (80091dc <usb_dc_ep_get_read_count+0x4c>)
 80091bc:	1a5b      	subs	r3, r3, r1
 80091be:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80091c2:	f363 128f 	bfi	r2, r3, #6, #10
 80091c6:	4601      	mov	r1, r0
 80091c8:	4805      	ldr	r0, [pc, #20]	; (80091e0 <usb_dc_ep_get_read_count+0x50>)
 80091ca:	f7fd f9b9 	bl	8006540 <log_1>
		return -EINVAL;
 80091ce:	f06f 0015 	mvn.w	r0, #21
 80091d2:	e7e9      	b.n	80091a8 <usb_dc_ep_get_read_count+0x18>
 80091d4:	20003918 	.word	0x20003918
 80091d8:	08022c38 	.word	0x08022c38
 80091dc:	08022b90 	.word	0x08022b90
 80091e0:	08025810 	.word	0x08025810

080091e4 <usb_dc_ep_check_cap>:

int usb_dc_ep_check_cap(const struct usb_dc_ep_cfg_data * const cfg)
{
 80091e4:	b508      	push	{r3, lr}
	uint8_t ep_idx = USB_EP_GET_IDX(cfg->ep_addr);
 80091e6:	7803      	ldrb	r3, [r0, #0]

	LOG_DBG("ep %x, mps %d, type %d", cfg->ep_addr, cfg->ep_mps,
		cfg->ep_type);

	if ((cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
 80091e8:	7902      	ldrb	r2, [r0, #4]
 80091ea:	b912      	cbnz	r2, 80091f2 <usb_dc_ep_check_cap+0xe>
 80091ec:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 80091f0:	b921      	cbnz	r1, 80091fc <usb_dc_ep_check_cap+0x18>
		LOG_ERR("invalid endpoint configuration");
		return -1;
	}

	if (ep_idx > (USB_NUM_BIDIR_ENDPOINTS - 1)) {
 80091f2:	f013 0f78 	tst.w	r3, #120	; 0x78
 80091f6:	d115      	bne.n	8009224 <usb_dc_ep_check_cap+0x40>
		LOG_ERR("endpoint index/address out of range");
		return -1;
	}

	return 0;
 80091f8:	2000      	movs	r0, #0
}
 80091fa:	bd08      	pop	{r3, pc}
		LOG_ERR("invalid endpoint configuration");
 80091fc:	f04f 0100 	mov.w	r1, #0
 8009200:	2301      	movs	r3, #1
 8009202:	f363 0102 	bfi	r1, r3, #0, #3
 8009206:	f36f 01c5 	bfc	r1, #3, #3
 800920a:	4b10      	ldr	r3, [pc, #64]	; (800924c <usb_dc_ep_check_cap+0x68>)
 800920c:	4a10      	ldr	r2, [pc, #64]	; (8009250 <usb_dc_ep_check_cap+0x6c>)
 800920e:	1a9b      	subs	r3, r3, r2
 8009210:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8009214:	f363 118f 	bfi	r1, r3, #6, #10
 8009218:	480e      	ldr	r0, [pc, #56]	; (8009254 <usb_dc_ep_check_cap+0x70>)
 800921a:	f7fd fb01 	bl	8006820 <log_0>
		return -1;
 800921e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009222:	e7ea      	b.n	80091fa <usb_dc_ep_check_cap+0x16>
		LOG_ERR("endpoint index/address out of range");
 8009224:	f04f 0100 	mov.w	r1, #0
 8009228:	2301      	movs	r3, #1
 800922a:	f363 0102 	bfi	r1, r3, #0, #3
 800922e:	f36f 01c5 	bfc	r1, #3, #3
 8009232:	4b06      	ldr	r3, [pc, #24]	; (800924c <usb_dc_ep_check_cap+0x68>)
 8009234:	4a06      	ldr	r2, [pc, #24]	; (8009250 <usb_dc_ep_check_cap+0x6c>)
 8009236:	1a9b      	subs	r3, r3, r2
 8009238:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800923c:	f363 118f 	bfi	r1, r3, #6, #10
 8009240:	4805      	ldr	r0, [pc, #20]	; (8009258 <usb_dc_ep_check_cap+0x74>)
 8009242:	f7fd faed 	bl	8006820 <log_0>
		return -1;
 8009246:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800924a:	e7d6      	b.n	80091fa <usb_dc_ep_check_cap+0x16>
 800924c:	08022c38 	.word	0x08022c38
 8009250:	08022b90 	.word	0x08022b90
 8009254:	0802584c 	.word	0x0802584c
 8009258:	0802586c 	.word	0x0802586c

0800925c <usb_dc_ep_configure>:

int usb_dc_ep_configure(const struct usb_dc_ep_cfg_data * const ep_cfg)
{
 800925c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800925e:	4604      	mov	r4, r0
	uint8_t ep = ep_cfg->ep_addr;
 8009260:	7805      	ldrb	r5, [r0, #0]
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 8009262:	4628      	mov	r0, r5
 8009264:	f7ff fe28 	bl	8008eb8 <usb_dc_stm32_get_ep_state>

	LOG_DBG("ep 0x%02x, previous ep_mps %u, ep_mps %u, ep_type %u",
		ep_cfg->ep_addr, ep_state->ep_mps, ep_cfg->ep_mps,
		ep_cfg->ep_type);

	if (!ep_state) {
 8009268:	b380      	cbz	r0, 80092cc <usb_dc_ep_configure+0x70>
 800926a:	4606      	mov	r6, r0
		return -EINVAL;
	}

#ifdef USB
	if (ep_cfg->ep_mps > ep_state->ep_pma_buf_len) {
 800926c:	8862      	ldrh	r2, [r4, #2]
 800926e:	8843      	ldrh	r3, [r0, #2]
 8009270:	429a      	cmp	r2, r3
 8009272:	d913      	bls.n	800929c <usb_dc_ep_configure+0x40>
		if (USB_RAM_SIZE <=
		    (usb_dc_stm32_state.pma_offset + ep_cfg->ep_mps)) {
 8009274:	4b1a      	ldr	r3, [pc, #104]	; (80092e0 <usb_dc_ep_configure+0x84>)
 8009276:	f8d3 3730 	ldr.w	r3, [r3, #1840]	; 0x730
 800927a:	441a      	add	r2, r3
		if (USB_RAM_SIZE <=
 800927c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8009280:	d227      	bcs.n	80092d2 <usb_dc_ep_configure+0x76>
			return -EINVAL;
		}
		HAL_PCDEx_PMAConfig(&usb_dc_stm32_state.pcd, ep, PCD_SNG_BUF,
 8009282:	4f17      	ldr	r7, [pc, #92]	; (80092e0 <usb_dc_ep_configure+0x84>)
 8009284:	2200      	movs	r2, #0
 8009286:	4629      	mov	r1, r5
 8009288:	4638      	mov	r0, r7
 800928a:	f017 ff66 	bl	802115a <HAL_PCDEx_PMAConfig>
				    usb_dc_stm32_state.pma_offset);
		ep_state->ep_pma_buf_len = ep_cfg->ep_mps;
 800928e:	8862      	ldrh	r2, [r4, #2]
 8009290:	8072      	strh	r2, [r6, #2]
		usb_dc_stm32_state.pma_offset += ep_cfg->ep_mps;
 8009292:	f8d7 3730 	ldr.w	r3, [r7, #1840]	; 0x730
 8009296:	4413      	add	r3, r2
 8009298:	f8c7 3730 	str.w	r3, [r7, #1840]	; 0x730
	}
#endif
	ep_state->ep_mps = ep_cfg->ep_mps;
 800929c:	8863      	ldrh	r3, [r4, #2]
 800929e:	8033      	strh	r3, [r6, #0]

	switch (ep_cfg->ep_type) {
 80092a0:	7923      	ldrb	r3, [r4, #4]
 80092a2:	2b03      	cmp	r3, #3
 80092a4:	d818      	bhi.n	80092d8 <usb_dc_ep_configure+0x7c>
 80092a6:	e8df f003 	tbb	[pc, r3]
 80092aa:	0502      	.short	0x0502
 80092ac:	0d09      	.short	0x0d09
	case USB_DC_EP_CONTROL:
		ep_state->ep_type = EP_TYPE_CTRL;
 80092ae:	2000      	movs	r0, #0
 80092b0:	7130      	strb	r0, [r6, #4]
	default:
		return -EINVAL;
	}

	return 0;
}
 80092b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ep_state->ep_type = EP_TYPE_ISOC;
 80092b4:	2301      	movs	r3, #1
 80092b6:	7133      	strb	r3, [r6, #4]
	return 0;
 80092b8:	2000      	movs	r0, #0
		break;
 80092ba:	e7fa      	b.n	80092b2 <usb_dc_ep_configure+0x56>
		ep_state->ep_type = EP_TYPE_BULK;
 80092bc:	2302      	movs	r3, #2
 80092be:	7133      	strb	r3, [r6, #4]
	return 0;
 80092c0:	2000      	movs	r0, #0
		break;
 80092c2:	e7f6      	b.n	80092b2 <usb_dc_ep_configure+0x56>
		ep_state->ep_type = EP_TYPE_INTR;
 80092c4:	2303      	movs	r3, #3
 80092c6:	7133      	strb	r3, [r6, #4]
	return 0;
 80092c8:	2000      	movs	r0, #0
		break;
 80092ca:	e7f2      	b.n	80092b2 <usb_dc_ep_configure+0x56>
		return -EINVAL;
 80092cc:	f06f 0015 	mvn.w	r0, #21
 80092d0:	e7ef      	b.n	80092b2 <usb_dc_ep_configure+0x56>
			return -EINVAL;
 80092d2:	f06f 0015 	mvn.w	r0, #21
 80092d6:	e7ec      	b.n	80092b2 <usb_dc_ep_configure+0x56>
	switch (ep_cfg->ep_type) {
 80092d8:	f06f 0015 	mvn.w	r0, #21
 80092dc:	e7e9      	b.n	80092b2 <usb_dc_ep_configure+0x56>
 80092de:	bf00      	nop
 80092e0:	20003918 	.word	0x20003918

080092e4 <usb_dc_ep_set_stall>:

int usb_dc_ep_set_stall(const uint8_t ep)
{
 80092e4:	b538      	push	{r3, r4, r5, lr}
 80092e6:	4604      	mov	r4, r0
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 80092e8:	f7ff fde6 	bl	8008eb8 <usb_dc_stm32_get_ep_state>
	HAL_StatusTypeDef status;

	LOG_DBG("ep 0x%02x", ep);

	if (!ep_state) {
 80092ec:	b1f8      	cbz	r0, 800932e <usb_dc_ep_set_stall+0x4a>
 80092ee:	4605      	mov	r5, r0
		return -EINVAL;
	}

	status = HAL_PCD_EP_SetStall(&usb_dc_stm32_state.pcd, ep);
 80092f0:	4621      	mov	r1, r4
 80092f2:	4810      	ldr	r0, [pc, #64]	; (8009334 <usb_dc_ep_set_stall+0x50>)
 80092f4:	f017 fec3 	bl	802107e <HAL_PCD_EP_SetStall>
	if (status != HAL_OK) {
 80092f8:	4602      	mov	r2, r0
 80092fa:	b918      	cbnz	r0, 8009304 <usb_dc_ep_set_stall+0x20>
		LOG_ERR("HAL_PCD_EP_SetStall failed(0x%02x), %d", ep,
			(int)status);
		return -EIO;
	}

	ep_state->ep_stalled = 1U;
 80092fc:	2301      	movs	r3, #1
 80092fe:	716b      	strb	r3, [r5, #5]

	return 0;
 8009300:	2000      	movs	r0, #0
}
 8009302:	bd38      	pop	{r3, r4, r5, pc}
		LOG_ERR("HAL_PCD_EP_SetStall failed(0x%02x), %d", ep,
 8009304:	f04f 0300 	mov.w	r3, #0
 8009308:	2101      	movs	r1, #1
 800930a:	f361 0302 	bfi	r3, r1, #0, #3
 800930e:	f36f 03c5 	bfc	r3, #3, #3
 8009312:	4909      	ldr	r1, [pc, #36]	; (8009338 <usb_dc_ep_set_stall+0x54>)
 8009314:	4809      	ldr	r0, [pc, #36]	; (800933c <usb_dc_ep_set_stall+0x58>)
 8009316:	1a09      	subs	r1, r1, r0
 8009318:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 800931c:	f361 138f 	bfi	r3, r1, #6, #10
 8009320:	4621      	mov	r1, r4
 8009322:	4807      	ldr	r0, [pc, #28]	; (8009340 <usb_dc_ep_set_stall+0x5c>)
 8009324:	f7fd f98c 	bl	8006640 <log_2>
		return -EIO;
 8009328:	f06f 0004 	mvn.w	r0, #4
 800932c:	e7e9      	b.n	8009302 <usb_dc_ep_set_stall+0x1e>
		return -EINVAL;
 800932e:	f06f 0015 	mvn.w	r0, #21
 8009332:	e7e6      	b.n	8009302 <usb_dc_ep_set_stall+0x1e>
 8009334:	20003918 	.word	0x20003918
 8009338:	08022c38 	.word	0x08022c38
 800933c:	08022b90 	.word	0x08022b90
 8009340:	08025890 	.word	0x08025890

08009344 <usb_dc_ep_clear_stall>:

int usb_dc_ep_clear_stall(const uint8_t ep)
{
 8009344:	b538      	push	{r3, r4, r5, lr}
 8009346:	4605      	mov	r5, r0
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 8009348:	f7ff fdb6 	bl	8008eb8 <usb_dc_stm32_get_ep_state>
	HAL_StatusTypeDef status;

	LOG_DBG("ep 0x%02x", ep);

	if (!ep_state) {
 800934c:	b1f8      	cbz	r0, 800938e <usb_dc_ep_clear_stall+0x4a>
 800934e:	4604      	mov	r4, r0
		return -EINVAL;
	}

	status = HAL_PCD_EP_ClrStall(&usb_dc_stm32_state.pcd, ep);
 8009350:	4629      	mov	r1, r5
 8009352:	4810      	ldr	r0, [pc, #64]	; (8009394 <usb_dc_ep_clear_stall+0x50>)
 8009354:	f017 feca 	bl	80210ec <HAL_PCD_EP_ClrStall>
	if (status != HAL_OK) {
 8009358:	4602      	mov	r2, r0
 800935a:	b918      	cbnz	r0, 8009364 <usb_dc_ep_clear_stall+0x20>
		LOG_ERR("HAL_PCD_EP_ClrStall failed(0x%02x), %d", ep,
			(int)status);
		return -EIO;
	}

	ep_state->ep_stalled = 0U;
 800935c:	2000      	movs	r0, #0
 800935e:	7160      	strb	r0, [r4, #5]
	ep_state->read_count = 0U;
 8009360:	60e0      	str	r0, [r4, #12]

	return 0;
}
 8009362:	bd38      	pop	{r3, r4, r5, pc}
		LOG_ERR("HAL_PCD_EP_ClrStall failed(0x%02x), %d", ep,
 8009364:	f04f 0300 	mov.w	r3, #0
 8009368:	2101      	movs	r1, #1
 800936a:	f361 0302 	bfi	r3, r1, #0, #3
 800936e:	f36f 03c5 	bfc	r3, #3, #3
 8009372:	4909      	ldr	r1, [pc, #36]	; (8009398 <usb_dc_ep_clear_stall+0x54>)
 8009374:	4809      	ldr	r0, [pc, #36]	; (800939c <usb_dc_ep_clear_stall+0x58>)
 8009376:	1a09      	subs	r1, r1, r0
 8009378:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 800937c:	f361 138f 	bfi	r3, r1, #6, #10
 8009380:	4629      	mov	r1, r5
 8009382:	4807      	ldr	r0, [pc, #28]	; (80093a0 <usb_dc_ep_clear_stall+0x5c>)
 8009384:	f7fd f95c 	bl	8006640 <log_2>
		return -EIO;
 8009388:	f06f 0004 	mvn.w	r0, #4
 800938c:	e7e9      	b.n	8009362 <usb_dc_ep_clear_stall+0x1e>
		return -EINVAL;
 800938e:	f06f 0015 	mvn.w	r0, #21
 8009392:	e7e6      	b.n	8009362 <usb_dc_ep_clear_stall+0x1e>
 8009394:	20003918 	.word	0x20003918
 8009398:	08022c38 	.word	0x08022c38
 800939c:	08022b90 	.word	0x08022b90
 80093a0:	080258b8 	.word	0x080258b8

080093a4 <usb_dc_ep_enable>:

	return 0;
}

int usb_dc_ep_enable(const uint8_t ep)
{
 80093a4:	b510      	push	{r4, lr}
 80093a6:	4604      	mov	r4, r0
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 80093a8:	f7ff fd86 	bl	8008eb8 <usb_dc_stm32_get_ep_state>
	HAL_StatusTypeDef status;

	LOG_DBG("ep 0x%02x", ep);

	if (!ep_state) {
 80093ac:	b368      	cbz	r0, 800940a <usb_dc_ep_enable+0x66>
	}

	LOG_DBG("HAL_PCD_EP_Open(0x%02x, %u, %u)", ep, ep_state->ep_mps,
		ep_state->ep_type);

	status = HAL_PCD_EP_Open(&usb_dc_stm32_state.pcd, ep,
 80093ae:	7903      	ldrb	r3, [r0, #4]
 80093b0:	8802      	ldrh	r2, [r0, #0]
 80093b2:	4621      	mov	r1, r4
 80093b4:	4816      	ldr	r0, [pc, #88]	; (8009410 <usb_dc_ep_enable+0x6c>)
 80093b6:	f017 fb50 	bl	8020a5a <HAL_PCD_EP_Open>
				 ep_state->ep_mps, ep_state->ep_type);
	if (status != HAL_OK) {
 80093ba:	4602      	mov	r2, r0
 80093bc:	b920      	cbnz	r0, 80093c8 <usb_dc_ep_enable+0x24>
		LOG_ERR("HAL_PCD_EP_Open failed(0x%02x), %d", ep,
			(int)status);
		return -EIO;
	}

	if (USB_EP_DIR_IS_OUT(ep) && ep != EP0_OUT) {
 80093be:	b263      	sxtb	r3, r4
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	dc16      	bgt.n	80093f2 <usb_dc_ep_enable+0x4e>
		return usb_dc_ep_start_read(ep,
					  usb_dc_stm32_state.ep_buf[USB_EP_GET_IDX(ep)],
					  EP_MPS);
	}

	return 0;
 80093c4:	2000      	movs	r0, #0
}
 80093c6:	bd10      	pop	{r4, pc}
		LOG_ERR("HAL_PCD_EP_Open failed(0x%02x), %d", ep,
 80093c8:	f04f 0300 	mov.w	r3, #0
 80093cc:	2101      	movs	r1, #1
 80093ce:	f361 0302 	bfi	r3, r1, #0, #3
 80093d2:	f36f 03c5 	bfc	r3, #3, #3
 80093d6:	490f      	ldr	r1, [pc, #60]	; (8009414 <usb_dc_ep_enable+0x70>)
 80093d8:	480f      	ldr	r0, [pc, #60]	; (8009418 <usb_dc_ep_enable+0x74>)
 80093da:	1a09      	subs	r1, r1, r0
 80093dc:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 80093e0:	f361 138f 	bfi	r3, r1, #6, #10
 80093e4:	4621      	mov	r1, r4
 80093e6:	480d      	ldr	r0, [pc, #52]	; (800941c <usb_dc_ep_enable+0x78>)
 80093e8:	f7fd f92a 	bl	8006640 <log_2>
		return -EIO;
 80093ec:	f06f 0004 	mvn.w	r0, #4
 80093f0:	e7e9      	b.n	80093c6 <usb_dc_ep_enable+0x22>
					  usb_dc_stm32_state.ep_buf[USB_EP_GET_IDX(ep)],
 80093f2:	f024 0380 	bic.w	r3, r4, #128	; 0x80
 80093f6:	019b      	lsls	r3, r3, #6
 80093f8:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
		return usb_dc_ep_start_read(ep,
 80093fc:	2240      	movs	r2, #64	; 0x40
 80093fe:	4904      	ldr	r1, [pc, #16]	; (8009410 <usb_dc_ep_enable+0x6c>)
 8009400:	4419      	add	r1, r3
 8009402:	4620      	mov	r0, r4
 8009404:	f7ff fe74 	bl	80090f0 <usb_dc_ep_start_read>
 8009408:	e7dd      	b.n	80093c6 <usb_dc_ep_enable+0x22>
		return -EINVAL;
 800940a:	f06f 0015 	mvn.w	r0, #21
 800940e:	e7da      	b.n	80093c6 <usb_dc_ep_enable+0x22>
 8009410:	20003918 	.word	0x20003918
 8009414:	08022c38 	.word	0x08022c38
 8009418:	08022b90 	.word	0x08022b90
 800941c:	080258e0 	.word	0x080258e0

08009420 <usb_dc_ep_disable>:

int usb_dc_ep_disable(const uint8_t ep)
{
 8009420:	b510      	push	{r4, lr}
 8009422:	4604      	mov	r4, r0
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 8009424:	f7ff fd48 	bl	8008eb8 <usb_dc_stm32_get_ep_state>
	HAL_StatusTypeDef status;

	LOG_DBG("ep 0x%02x", ep);

	if (!ep_state) {
 8009428:	b1e0      	cbz	r0, 8009464 <usb_dc_ep_disable+0x44>
		return -EINVAL;
	}

	status = HAL_PCD_EP_Close(&usb_dc_stm32_state.pcd, ep);
 800942a:	4621      	mov	r1, r4
 800942c:	480f      	ldr	r0, [pc, #60]	; (800946c <usb_dc_ep_disable+0x4c>)
 800942e:	f017 fb4c 	bl	8020aca <HAL_PCD_EP_Close>
	if (status != HAL_OK) {
 8009432:	4602      	mov	r2, r0
 8009434:	b908      	cbnz	r0, 800943a <usb_dc_ep_disable+0x1a>
		LOG_ERR("HAL_PCD_EP_Close failed(0x%02x), %d", ep,
			(int)status);
		return -EIO;
	}

	return 0;
 8009436:	2000      	movs	r0, #0
}
 8009438:	bd10      	pop	{r4, pc}
		LOG_ERR("HAL_PCD_EP_Close failed(0x%02x), %d", ep,
 800943a:	f04f 0300 	mov.w	r3, #0
 800943e:	2101      	movs	r1, #1
 8009440:	f361 0302 	bfi	r3, r1, #0, #3
 8009444:	f36f 03c5 	bfc	r3, #3, #3
 8009448:	4909      	ldr	r1, [pc, #36]	; (8009470 <usb_dc_ep_disable+0x50>)
 800944a:	480a      	ldr	r0, [pc, #40]	; (8009474 <usb_dc_ep_disable+0x54>)
 800944c:	1a09      	subs	r1, r1, r0
 800944e:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 8009452:	f361 138f 	bfi	r3, r1, #6, #10
 8009456:	4621      	mov	r1, r4
 8009458:	4807      	ldr	r0, [pc, #28]	; (8009478 <usb_dc_ep_disable+0x58>)
 800945a:	f7fd f8f1 	bl	8006640 <log_2>
		return -EIO;
 800945e:	f06f 0004 	mvn.w	r0, #4
 8009462:	e7e9      	b.n	8009438 <usb_dc_ep_disable+0x18>
		return -EINVAL;
 8009464:	f06f 0015 	mvn.w	r0, #21
 8009468:	e7e6      	b.n	8009438 <usb_dc_ep_disable+0x18>
 800946a:	bf00      	nop
 800946c:	20003918 	.word	0x20003918
 8009470:	08022c38 	.word	0x08022c38
 8009474:	08022b90 	.word	0x08022b90
 8009478:	08025904 	.word	0x08025904

0800947c <usb_dc_ep_write>:

int usb_dc_ep_write(const uint8_t ep, const uint8_t *const data,
		    const uint32_t data_len, uint32_t * const ret_bytes)
{
 800947c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009480:	4604      	mov	r4, r0
 8009482:	460f      	mov	r7, r1
 8009484:	4615      	mov	r5, r2
 8009486:	4698      	mov	r8, r3
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 8009488:	f7ff fd16 	bl	8008eb8 <usb_dc_stm32_get_ep_state>
	uint32_t len = data_len;
	int ret = 0;

	LOG_DBG("ep 0x%02x, len %u", ep, data_len);

	if (!ep_state || !USB_EP_DIR_IS_IN(ep)) {
 800948c:	b360      	cbz	r0, 80094e8 <usb_dc_ep_write+0x6c>
 800948e:	4606      	mov	r6, r0
 8009490:	f014 0f80 	tst.w	r4, #128	; 0x80
 8009494:	d028      	beq.n	80094e8 <usb_dc_ep_write+0x6c>
		LOG_ERR("invalid ep 0x%02x", ep);
		return -EINVAL;
	}

	ret = k_sem_take(&ep_state->write_sem, K_NO_WAIT);
 8009496:	3614      	adds	r6, #20
	return z_impl_k_sem_take(sem, timeout);
 8009498:	2200      	movs	r2, #0
 800949a:	2300      	movs	r3, #0
 800949c:	4630      	mov	r0, r6
 800949e:	f00f fbfb 	bl	8018c98 <z_impl_k_sem_take>
	if (ret) {
 80094a2:	4681      	mov	r9, r0
 80094a4:	2800      	cmp	r0, #0
 80094a6:	d134      	bne.n	8009512 <usb_dc_ep_write+0x96>
		LOG_ERR("Unable to get write lock (%d)", ret);
		return -EAGAIN;
	}

	if (!k_is_in_isr()) {
 80094a8:	f018 febc 	bl	8022224 <k_is_in_isr>
 80094ac:	2800      	cmp	r0, #0
 80094ae:	d045      	beq.n	800953c <usb_dc_ep_write+0xc0>
		irq_disable(USB_IRQ);
	}

	if (ep == EP0_IN && len > USB_MAX_CTRL_MPS) {
 80094b0:	2c80      	cmp	r4, #128	; 0x80
 80094b2:	d047      	beq.n	8009544 <usb_dc_ep_write+0xc8>
		len = USB_MAX_CTRL_MPS;
	}

	status = HAL_PCD_EP_Transmit(&usb_dc_stm32_state.pcd, ep,
 80094b4:	462b      	mov	r3, r5
 80094b6:	463a      	mov	r2, r7
 80094b8:	4621      	mov	r1, r4
 80094ba:	4836      	ldr	r0, [pc, #216]	; (8009594 <usb_dc_ep_write+0x118>)
 80094bc:	f017 fb5a 	bl	8020b74 <HAL_PCD_EP_Transmit>
				     (void *)data, len);
	if (status != HAL_OK) {
 80094c0:	4602      	mov	r2, r0
 80094c2:	2800      	cmp	r0, #0
 80094c4:	d142      	bne.n	800954c <usb_dc_ep_write+0xd0>
			(int)status);
		k_sem_give(&ep_state->write_sem);
		ret = -EIO;
	}

	if (!ret && ep == EP0_IN && len > 0) {
 80094c6:	2c80      	cmp	r4, #128	; 0x80
 80094c8:	d058      	beq.n	800957c <usb_dc_ep_write+0x100>
		 * This also flushes the TX FIFO to the host.
		 */
		usb_dc_ep_start_read(ep, NULL, 0);
	}

	if (!k_is_in_isr()) {
 80094ca:	f018 feab 	bl	8022224 <k_is_in_isr>
 80094ce:	2800      	cmp	r0, #0
 80094d0:	d05c      	beq.n	800958c <usb_dc_ep_write+0x110>
		irq_enable(USB_IRQ);
	}

	if (!ret && ret_bytes) {
 80094d2:	f1b9 0f00 	cmp.w	r9, #0
 80094d6:	d104      	bne.n	80094e2 <usb_dc_ep_write+0x66>
 80094d8:	f1b8 0f00 	cmp.w	r8, #0
 80094dc:	d001      	beq.n	80094e2 <usb_dc_ep_write+0x66>
		*ret_bytes = len;
 80094de:	f8c8 5000 	str.w	r5, [r8]
	}

	return ret;
}
 80094e2:	4648      	mov	r0, r9
 80094e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("invalid ep 0x%02x", ep);
 80094e8:	f04f 0200 	mov.w	r2, #0
 80094ec:	2301      	movs	r3, #1
 80094ee:	f363 0202 	bfi	r2, r3, #0, #3
 80094f2:	f36f 02c5 	bfc	r2, #3, #3
 80094f6:	4b28      	ldr	r3, [pc, #160]	; (8009598 <usb_dc_ep_write+0x11c>)
 80094f8:	4928      	ldr	r1, [pc, #160]	; (800959c <usb_dc_ep_write+0x120>)
 80094fa:	1a5b      	subs	r3, r3, r1
 80094fc:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8009500:	f363 128f 	bfi	r2, r3, #6, #10
 8009504:	4621      	mov	r1, r4
 8009506:	4826      	ldr	r0, [pc, #152]	; (80095a0 <usb_dc_ep_write+0x124>)
 8009508:	f7fd f81a 	bl	8006540 <log_1>
		return -EINVAL;
 800950c:	f06f 0915 	mvn.w	r9, #21
 8009510:	e7e7      	b.n	80094e2 <usb_dc_ep_write+0x66>
		LOG_ERR("Unable to get write lock (%d)", ret);
 8009512:	f04f 0200 	mov.w	r2, #0
 8009516:	2301      	movs	r3, #1
 8009518:	f363 0202 	bfi	r2, r3, #0, #3
 800951c:	f36f 02c5 	bfc	r2, #3, #3
 8009520:	4b1d      	ldr	r3, [pc, #116]	; (8009598 <usb_dc_ep_write+0x11c>)
 8009522:	491e      	ldr	r1, [pc, #120]	; (800959c <usb_dc_ep_write+0x120>)
 8009524:	1a5b      	subs	r3, r3, r1
 8009526:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800952a:	f363 128f 	bfi	r2, r3, #6, #10
 800952e:	4601      	mov	r1, r0
 8009530:	481c      	ldr	r0, [pc, #112]	; (80095a4 <usb_dc_ep_write+0x128>)
 8009532:	f7fd f805 	bl	8006540 <log_1>
		return -EAGAIN;
 8009536:	f06f 090a 	mvn.w	r9, #10
 800953a:	e7d2      	b.n	80094e2 <usb_dc_ep_write+0x66>
		irq_disable(USB_IRQ);
 800953c:	204b      	movs	r0, #75	; 0x4b
 800953e:	f001 fd9b 	bl	800b078 <arch_irq_disable>
 8009542:	e7b5      	b.n	80094b0 <usb_dc_ep_write+0x34>
	if (ep == EP0_IN && len > USB_MAX_CTRL_MPS) {
 8009544:	2d40      	cmp	r5, #64	; 0x40
 8009546:	d9b5      	bls.n	80094b4 <usb_dc_ep_write+0x38>
		len = USB_MAX_CTRL_MPS;
 8009548:	2540      	movs	r5, #64	; 0x40
 800954a:	e7b3      	b.n	80094b4 <usb_dc_ep_write+0x38>
		LOG_ERR("HAL_PCD_EP_Transmit failed(0x%02x), %d", ep,
 800954c:	f04f 0300 	mov.w	r3, #0
 8009550:	2101      	movs	r1, #1
 8009552:	f361 0302 	bfi	r3, r1, #0, #3
 8009556:	f36f 03c5 	bfc	r3, #3, #3
 800955a:	490f      	ldr	r1, [pc, #60]	; (8009598 <usb_dc_ep_write+0x11c>)
 800955c:	480f      	ldr	r0, [pc, #60]	; (800959c <usb_dc_ep_write+0x120>)
 800955e:	1a09      	subs	r1, r1, r0
 8009560:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 8009564:	f361 138f 	bfi	r3, r1, #6, #10
 8009568:	4621      	mov	r1, r4
 800956a:	480f      	ldr	r0, [pc, #60]	; (80095a8 <usb_dc_ep_write+0x12c>)
 800956c:	f7fd f868 	bl	8006640 <log_2>
	z_impl_k_sem_give(sem);
 8009570:	4630      	mov	r0, r6
 8009572:	f00f fb69 	bl	8018c48 <z_impl_k_sem_give>
		ret = -EIO;
 8009576:	f06f 0904 	mvn.w	r9, #4
 800957a:	e7a6      	b.n	80094ca <usb_dc_ep_write+0x4e>
	if (!ret && ep == EP0_IN && len > 0) {
 800957c:	2d00      	cmp	r5, #0
 800957e:	d0a4      	beq.n	80094ca <usb_dc_ep_write+0x4e>
		usb_dc_ep_start_read(ep, NULL, 0);
 8009580:	2200      	movs	r2, #0
 8009582:	4611      	mov	r1, r2
 8009584:	4620      	mov	r0, r4
 8009586:	f7ff fdb3 	bl	80090f0 <usb_dc_ep_start_read>
 800958a:	e79e      	b.n	80094ca <usb_dc_ep_write+0x4e>
		irq_enable(USB_IRQ);
 800958c:	204b      	movs	r0, #75	; 0x4b
 800958e:	f001 fd63 	bl	800b058 <arch_irq_enable>
 8009592:	e79e      	b.n	80094d2 <usb_dc_ep_write+0x56>
 8009594:	20003918 	.word	0x20003918
 8009598:	08022c38 	.word	0x08022c38
 800959c:	08022b90 	.word	0x08022b90
 80095a0:	08025810 	.word	0x08025810
 80095a4:	08025928 	.word	0x08025928
 80095a8:	08025948 	.word	0x08025948

080095ac <usb_dc_ep_read_wait>:

int usb_dc_ep_read_wait(uint8_t ep, uint8_t *data, uint32_t max_data_len,
			uint32_t *read_bytes)
{
 80095ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095b0:	4604      	mov	r4, r0
 80095b2:	460f      	mov	r7, r1
 80095b4:	4691      	mov	r9, r2
 80095b6:	461d      	mov	r5, r3
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 80095b8:	f7ff fc7e 	bl	8008eb8 <usb_dc_stm32_get_ep_state>
	uint32_t read_count;

	if (!ep_state) {
 80095bc:	b328      	cbz	r0, 800960a <usb_dc_ep_read_wait+0x5e>
 80095be:	4606      	mov	r6, r0
		LOG_ERR("Invalid Endpoint %x", ep);
		return -EINVAL;
	}

	read_count = ep_state->read_count;
 80095c0:	f8d0 800c 	ldr.w	r8, [r0, #12]

	LOG_DBG("ep 0x%02x, %u bytes, %u+%u, %p", ep, max_data_len,
		ep_state->read_offset, read_count, data);

	if (!USB_EP_DIR_IS_OUT(ep)) { /* check if OUT ep */
 80095c4:	f014 0f80 	tst.w	r4, #128	; 0x80
 80095c8:	d134      	bne.n	8009634 <usb_dc_ep_read_wait+0x88>

	/* When both buffer and max data to read are zero, just ingore reading
	 * and return available data in buffer. Otherwise, return data
	 * previously stored in the buffer.
	 */
	if (data) {
 80095ca:	2f00      	cmp	r7, #0
 80095cc:	d047      	beq.n	800965e <usb_dc_ep_read_wait+0xb2>
		read_count = MIN(read_count, max_data_len);
 80095ce:	45c8      	cmp	r8, r9
 80095d0:	bf28      	it	cs
 80095d2:	46c8      	movcs	r8, r9
		memcpy(data, usb_dc_stm32_state.ep_buf[USB_EP_GET_IDX(ep)] +
 80095d4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 80095d8:	01a4      	lsls	r4, r4, #6
 80095da:	f504 64a6 	add.w	r4, r4, #1328	; 0x530
 80095de:	492b      	ldr	r1, [pc, #172]	; (800968c <usb_dc_ep_read_wait+0xe0>)
 80095e0:	440c      	add	r4, r1
		       ep_state->read_offset, read_count);
 80095e2:	6901      	ldr	r1, [r0, #16]
		memcpy(data, usb_dc_stm32_state.ep_buf[USB_EP_GET_IDX(ep)] +
 80095e4:	4642      	mov	r2, r8
 80095e6:	4421      	add	r1, r4
 80095e8:	4638      	mov	r0, r7
 80095ea:	f013 f960 	bl	801c8ae <memcpy>
		ep_state->read_count -= read_count;
 80095ee:	68f3      	ldr	r3, [r6, #12]
 80095f0:	eba3 0308 	sub.w	r3, r3, r8
 80095f4:	60f3      	str	r3, [r6, #12]
		ep_state->read_offset += read_count;
 80095f6:	6933      	ldr	r3, [r6, #16]
 80095f8:	4443      	add	r3, r8
 80095fa:	6133      	str	r3, [r6, #16]
	} else if (max_data_len) {
		LOG_ERR("Wrong arguments");
	}

	if (read_bytes) {
 80095fc:	2d00      	cmp	r5, #0
 80095fe:	d043      	beq.n	8009688 <usb_dc_ep_read_wait+0xdc>
		*read_bytes = read_count;
 8009600:	f8c5 8000 	str.w	r8, [r5]
	}

	return 0;
 8009604:	2000      	movs	r0, #0
}
 8009606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("Invalid Endpoint %x", ep);
 800960a:	f04f 0200 	mov.w	r2, #0
 800960e:	2301      	movs	r3, #1
 8009610:	f363 0202 	bfi	r2, r3, #0, #3
 8009614:	f36f 02c5 	bfc	r2, #3, #3
 8009618:	4b1d      	ldr	r3, [pc, #116]	; (8009690 <usb_dc_ep_read_wait+0xe4>)
 800961a:	491e      	ldr	r1, [pc, #120]	; (8009694 <usb_dc_ep_read_wait+0xe8>)
 800961c:	1a5b      	subs	r3, r3, r1
 800961e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8009622:	f363 128f 	bfi	r2, r3, #6, #10
 8009626:	4621      	mov	r1, r4
 8009628:	481b      	ldr	r0, [pc, #108]	; (8009698 <usb_dc_ep_read_wait+0xec>)
 800962a:	f7fc ff89 	bl	8006540 <log_1>
		return -EINVAL;
 800962e:	f06f 0015 	mvn.w	r0, #21
 8009632:	e7e8      	b.n	8009606 <usb_dc_ep_read_wait+0x5a>
		LOG_ERR("Wrong endpoint direction: 0x%02x", ep);
 8009634:	f04f 0200 	mov.w	r2, #0
 8009638:	2301      	movs	r3, #1
 800963a:	f363 0202 	bfi	r2, r3, #0, #3
 800963e:	f36f 02c5 	bfc	r2, #3, #3
 8009642:	4b13      	ldr	r3, [pc, #76]	; (8009690 <usb_dc_ep_read_wait+0xe4>)
 8009644:	4913      	ldr	r1, [pc, #76]	; (8009694 <usb_dc_ep_read_wait+0xe8>)
 8009646:	1a5b      	subs	r3, r3, r1
 8009648:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800964c:	f363 128f 	bfi	r2, r3, #6, #10
 8009650:	4621      	mov	r1, r4
 8009652:	4812      	ldr	r0, [pc, #72]	; (800969c <usb_dc_ep_read_wait+0xf0>)
 8009654:	f7fc ff74 	bl	8006540 <log_1>
		return -EINVAL;
 8009658:	f06f 0015 	mvn.w	r0, #21
 800965c:	e7d3      	b.n	8009606 <usb_dc_ep_read_wait+0x5a>
	} else if (max_data_len) {
 800965e:	f1b9 0f00 	cmp.w	r9, #0
 8009662:	d0cb      	beq.n	80095fc <usb_dc_ep_read_wait+0x50>
		LOG_ERR("Wrong arguments");
 8009664:	f04f 0100 	mov.w	r1, #0
 8009668:	2301      	movs	r3, #1
 800966a:	f363 0102 	bfi	r1, r3, #0, #3
 800966e:	f36f 01c5 	bfc	r1, #3, #3
 8009672:	4b07      	ldr	r3, [pc, #28]	; (8009690 <usb_dc_ep_read_wait+0xe4>)
 8009674:	4a07      	ldr	r2, [pc, #28]	; (8009694 <usb_dc_ep_read_wait+0xe8>)
 8009676:	1a9b      	subs	r3, r3, r2
 8009678:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800967c:	f363 118f 	bfi	r1, r3, #6, #10
 8009680:	4807      	ldr	r0, [pc, #28]	; (80096a0 <usb_dc_ep_read_wait+0xf4>)
 8009682:	f7fd f8cd 	bl	8006820 <log_0>
 8009686:	e7b9      	b.n	80095fc <usb_dc_ep_read_wait+0x50>
	return 0;
 8009688:	2000      	movs	r0, #0
 800968a:	e7bc      	b.n	8009606 <usb_dc_ep_read_wait+0x5a>
 800968c:	20003918 	.word	0x20003918
 8009690:	08022c38 	.word	0x08022c38
 8009694:	08022b90 	.word	0x08022b90
 8009698:	08025970 	.word	0x08025970
 800969c:	08025984 	.word	0x08025984
 80096a0:	080259a8 	.word	0x080259a8

080096a4 <usb_dc_ep_read_continue>:

int usb_dc_ep_read_continue(uint8_t ep)
{
 80096a4:	b510      	push	{r4, lr}
 80096a6:	4604      	mov	r4, r0
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 80096a8:	f7ff fc06 	bl	8008eb8 <usb_dc_stm32_get_ep_state>

	if (!ep_state || !USB_EP_DIR_IS_OUT(ep)) { /* Check if OUT ep */
 80096ac:	b130      	cbz	r0, 80096bc <usb_dc_ep_read_continue+0x18>
 80096ae:	f014 0f80 	tst.w	r4, #128	; 0x80
 80096b2:	d103      	bne.n	80096bc <usb_dc_ep_read_continue+0x18>
	}

	/* If no more data in the buffer, start a new read transaction.
	 * DataOutStageCallback will called on transaction complete.
	 */
	if (!ep_state->read_count) {
 80096b4:	68c3      	ldr	r3, [r0, #12]
 80096b6:	b1b3      	cbz	r3, 80096e6 <usb_dc_ep_read_continue+0x42>
		usb_dc_ep_start_read(ep, usb_dc_stm32_state.ep_buf[USB_EP_GET_IDX(ep)],
				     EP_MPS);
	}

	return 0;
 80096b8:	2000      	movs	r0, #0
}
 80096ba:	bd10      	pop	{r4, pc}
		LOG_ERR("Not valid endpoint: %02x", ep);
 80096bc:	f04f 0200 	mov.w	r2, #0
 80096c0:	2301      	movs	r3, #1
 80096c2:	f363 0202 	bfi	r2, r3, #0, #3
 80096c6:	f36f 02c5 	bfc	r2, #3, #3
 80096ca:	4b0d      	ldr	r3, [pc, #52]	; (8009700 <usb_dc_ep_read_continue+0x5c>)
 80096cc:	490d      	ldr	r1, [pc, #52]	; (8009704 <usb_dc_ep_read_continue+0x60>)
 80096ce:	1a5b      	subs	r3, r3, r1
 80096d0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80096d4:	f363 128f 	bfi	r2, r3, #6, #10
 80096d8:	4621      	mov	r1, r4
 80096da:	480b      	ldr	r0, [pc, #44]	; (8009708 <usb_dc_ep_read_continue+0x64>)
 80096dc:	f7fc ff30 	bl	8006540 <log_1>
		return -EINVAL;
 80096e0:	f06f 0015 	mvn.w	r0, #21
 80096e4:	e7e9      	b.n	80096ba <usb_dc_ep_read_continue+0x16>
		usb_dc_ep_start_read(ep, usb_dc_stm32_state.ep_buf[USB_EP_GET_IDX(ep)],
 80096e6:	f024 0380 	bic.w	r3, r4, #128	; 0x80
 80096ea:	019b      	lsls	r3, r3, #6
 80096ec:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 80096f0:	2240      	movs	r2, #64	; 0x40
 80096f2:	4906      	ldr	r1, [pc, #24]	; (800970c <usb_dc_ep_read_continue+0x68>)
 80096f4:	4419      	add	r1, r3
 80096f6:	4620      	mov	r0, r4
 80096f8:	f7ff fcfa 	bl	80090f0 <usb_dc_ep_start_read>
	return 0;
 80096fc:	2000      	movs	r0, #0
 80096fe:	e7dc      	b.n	80096ba <usb_dc_ep_read_continue+0x16>
 8009700:	08022c38 	.word	0x08022c38
 8009704:	08022b90 	.word	0x08022b90
 8009708:	080259b8 	.word	0x080259b8
 800970c:	20003918 	.word	0x20003918

08009710 <HAL_PCD_ResetCallback>:
}

/* Callbacks from the STM32 Cube HAL code */

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8009710:	b510      	push	{r4, lr}
	int i;

	LOG_DBG("");

	HAL_PCD_EP_Open(&usb_dc_stm32_state.pcd, EP0_IN, EP0_MPS, EP_TYPE_CTRL);
 8009712:	4c12      	ldr	r4, [pc, #72]	; (800975c <HAL_PCD_ResetCallback+0x4c>)
 8009714:	2300      	movs	r3, #0
 8009716:	2240      	movs	r2, #64	; 0x40
 8009718:	2180      	movs	r1, #128	; 0x80
 800971a:	4620      	mov	r0, r4
 800971c:	f017 f99d 	bl	8020a5a <HAL_PCD_EP_Open>
	HAL_PCD_EP_Open(&usb_dc_stm32_state.pcd, EP0_OUT, EP0_MPS,
 8009720:	2300      	movs	r3, #0
 8009722:	2240      	movs	r2, #64	; 0x40
 8009724:	4619      	mov	r1, r3
 8009726:	4620      	mov	r0, r4
 8009728:	f017 f997 	bl	8020a5a <HAL_PCD_EP_Open>
			EP_TYPE_CTRL);

	/* The DataInCallback will never be called at this point for any pending
	 * transactions. Reset the IN semaphores to prevent perpetual locked state.
	 * */
	for (i = 0; i < USB_NUM_BIDIR_ENDPOINTS; i++) {
 800972c:	2400      	movs	r4, #0
 800972e:	e00a      	b.n	8009746 <HAL_PCD_ResetCallback+0x36>
		k_sem_give(&usb_dc_stm32_state.in_ep_state[i].write_sem);
 8009730:	202c      	movs	r0, #44	; 0x2c
 8009732:	fb00 f004 	mul.w	r0, r0, r4
 8009736:	f500 7378 	add.w	r3, r0, #992	; 0x3e0
 800973a:	4808      	ldr	r0, [pc, #32]	; (800975c <HAL_PCD_ResetCallback+0x4c>)
 800973c:	4418      	add	r0, r3
 800973e:	3004      	adds	r0, #4
 8009740:	f00f fa82 	bl	8018c48 <z_impl_k_sem_give>
	for (i = 0; i < USB_NUM_BIDIR_ENDPOINTS; i++) {
 8009744:	3401      	adds	r4, #1
 8009746:	2c07      	cmp	r4, #7
 8009748:	ddf2      	ble.n	8009730 <HAL_PCD_ResetCallback+0x20>
	}

	if (usb_dc_stm32_state.status_cb) {
 800974a:	4b04      	ldr	r3, [pc, #16]	; (800975c <HAL_PCD_ResetCallback+0x4c>)
 800974c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8009750:	b113      	cbz	r3, 8009758 <HAL_PCD_ResetCallback+0x48>
		usb_dc_stm32_state.status_cb(USB_DC_RESET, NULL);
 8009752:	2100      	movs	r1, #0
 8009754:	2001      	movs	r0, #1
 8009756:	4798      	blx	r3
	}
}
 8009758:	bd10      	pop	{r4, pc}
 800975a:	bf00      	nop
 800975c:	20003918 	.word	0x20003918

08009760 <HAL_PCD_SuspendCallback>:
		usb_dc_stm32_state.status_cb(USB_DC_DISCONNECTED, NULL);
	}
}

void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8009760:	b508      	push	{r3, lr}
	LOG_DBG("");

	if (usb_dc_stm32_state.status_cb) {
 8009762:	4b04      	ldr	r3, [pc, #16]	; (8009774 <HAL_PCD_SuspendCallback+0x14>)
 8009764:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8009768:	b113      	cbz	r3, 8009770 <HAL_PCD_SuspendCallback+0x10>
		usb_dc_stm32_state.status_cb(USB_DC_SUSPEND, NULL);
 800976a:	2100      	movs	r1, #0
 800976c:	2005      	movs	r0, #5
 800976e:	4798      	blx	r3
	}
}
 8009770:	bd08      	pop	{r3, pc}
 8009772:	bf00      	nop
 8009774:	20003918 	.word	0x20003918

08009778 <HAL_PCD_ResumeCallback>:

void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8009778:	b508      	push	{r3, lr}
	LOG_DBG("");

	if (usb_dc_stm32_state.status_cb) {
 800977a:	4b04      	ldr	r3, [pc, #16]	; (800978c <HAL_PCD_ResumeCallback+0x14>)
 800977c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8009780:	b113      	cbz	r3, 8009788 <HAL_PCD_ResumeCallback+0x10>
		usb_dc_stm32_state.status_cb(USB_DC_RESUME, NULL);
 8009782:	2100      	movs	r1, #0
 8009784:	2006      	movs	r0, #6
 8009786:	4798      	blx	r3
	}
}
 8009788:	bd08      	pop	{r3, pc}
 800978a:	bf00      	nop
 800978c:	20003918 	.word	0x20003918

08009790 <HAL_PCD_SetupStageCallback>:

void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8009790:	b510      	push	{r4, lr}
	struct usb_setup_packet *setup = (void *)usb_dc_stm32_state.pcd.Setup;
	struct usb_dc_stm32_ep_state *ep_state;

	LOG_DBG("");

	ep_state = usb_dc_stm32_get_ep_state(EP0_OUT); /* can't fail for ep0 */
 8009792:	2000      	movs	r0, #0
 8009794:	f7ff fb90 	bl	8008eb8 <usb_dc_stm32_get_ep_state>
 8009798:	4604      	mov	r4, r0
	__ASSERT(ep_state, "No corresponding ep_state for EP0");

	ep_state->read_count = SETUP_SIZE;
 800979a:	2208      	movs	r2, #8
 800979c:	60c2      	str	r2, [r0, #12]
	ep_state->read_offset = 0U;
 800979e:	2300      	movs	r3, #0
 80097a0:	6103      	str	r3, [r0, #16]
	memcpy(&usb_dc_stm32_state.ep_buf[EP0_IDX],
 80097a2:	480d      	ldr	r0, [pc, #52]	; (80097d8 <HAL_PCD_SetupStageCallback+0x48>)
 80097a4:	f500 710c 	add.w	r1, r0, #560	; 0x230
 80097a8:	f500 60a6 	add.w	r0, r0, #1328	; 0x530
 80097ac:	f013 f87f 	bl	801c8ae <memcpy>
	       usb_dc_stm32_state.pcd.Setup, ep_state->read_count);

	if (ep_state->cb) {
 80097b0:	68a3      	ldr	r3, [r4, #8]
 80097b2:	b153      	cbz	r3, 80097ca <HAL_PCD_SetupStageCallback+0x3a>
		ep_state->cb(EP0_OUT, USB_DC_EP_SETUP);
 80097b4:	2100      	movs	r1, #0
 80097b6:	4608      	mov	r0, r1
 80097b8:	4798      	blx	r3

		if (!(setup->wLength == 0U) &&
 80097ba:	4b07      	ldr	r3, [pc, #28]	; (80097d8 <HAL_PCD_SetupStageCallback+0x48>)
 80097bc:	f8b3 2236 	ldrh.w	r2, [r3, #566]	; 0x236
 80097c0:	b11a      	cbz	r2, 80097ca <HAL_PCD_SetupStageCallback+0x3a>
		    !(REQTYPE_GET_DIR(setup->bmRequestType) ==
 80097c2:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
		if (!(setup->wLength == 0U) &&
 80097c6:	09db      	lsrs	r3, r3, #7
 80097c8:	d000      	beq.n	80097cc <HAL_PCD_SetupStageCallback+0x3c>
			usb_dc_ep_start_read(EP0_OUT,
					     usb_dc_stm32_state.ep_buf[EP0_IDX],
					     setup->wLength);
		}
	}
}
 80097ca:	bd10      	pop	{r4, pc}
			usb_dc_ep_start_read(EP0_OUT,
 80097cc:	4903      	ldr	r1, [pc, #12]	; (80097dc <HAL_PCD_SetupStageCallback+0x4c>)
 80097ce:	2000      	movs	r0, #0
 80097d0:	f7ff fc8e 	bl	80090f0 <usb_dc_ep_start_read>
}
 80097d4:	e7f9      	b.n	80097ca <HAL_PCD_SetupStageCallback+0x3a>
 80097d6:	bf00      	nop
 80097d8:	20003918 	.word	0x20003918
 80097dc:	20003e48 	.word	0x20003e48

080097e0 <z_impl_hwinfo_get_device_id>:
struct stm32_uid {
	uint32_t id[3];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
 80097e0:	b510      	push	{r4, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	460c      	mov	r4, r1
  * @brief  Get Word2 of the unique device identifier (UID based on 96 bits)
  * @retval UID[95:64]: Lot number (ASCII encoded) - LOT_NUM[55:24]
  */
__STATIC_INLINE uint32_t LL_GetUID_Word2(void)
{
  return (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE_ADDRESS + 8U))));
 80097e6:	4b1a      	ldr	r3, [pc, #104]	; (8009850 <z_impl_hwinfo_get_device_id+0x70>)
 80097e8:	681a      	ldr	r2, [r3, #0]
	struct stm32_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(LL_GetUID_Word2());
 80097ea:	0a13      	lsrs	r3, r2, #8
 80097ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80097f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80097f4:	0211      	lsls	r1, r2, #8
 80097f6:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 80097fa:	430b      	orrs	r3, r1
 80097fc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009800:	9301      	str	r3, [sp, #4]
  return (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE_ADDRESS + 4U))));
 8009802:	4b14      	ldr	r3, [pc, #80]	; (8009854 <z_impl_hwinfo_get_device_id+0x74>)
 8009804:	681a      	ldr	r2, [r3, #0]
	dev_id.id[1] = sys_cpu_to_be32(LL_GetUID_Word1());
 8009806:	0a13      	lsrs	r3, r2, #8
 8009808:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800980c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8009810:	0211      	lsls	r1, r2, #8
 8009812:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8009816:	430b      	orrs	r3, r1
 8009818:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800981c:	9302      	str	r3, [sp, #8]
  return (uint32_t)(READ_REG(*((uint32_t *)UID_BASE_ADDRESS)));
 800981e:	4b0e      	ldr	r3, [pc, #56]	; (8009858 <z_impl_hwinfo_get_device_id+0x78>)
 8009820:	681a      	ldr	r2, [r3, #0]
	dev_id.id[2] = sys_cpu_to_be32(LL_GetUID_Word0());
 8009822:	0a13      	lsrs	r3, r2, #8
 8009824:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009828:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800982c:	0211      	lsls	r1, r2, #8
 800982e:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8009832:	430b      	orrs	r3, r1
 8009834:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009838:	9303      	str	r3, [sp, #12]

	if (length > sizeof(dev_id.id)) {
 800983a:	2c0c      	cmp	r4, #12
 800983c:	d900      	bls.n	8009840 <z_impl_hwinfo_get_device_id+0x60>
		length = sizeof(dev_id.id);
 800983e:	240c      	movs	r4, #12
	}

	memcpy(buffer, dev_id.id, length);
 8009840:	4622      	mov	r2, r4
 8009842:	a901      	add	r1, sp, #4
 8009844:	f013 f833 	bl	801c8ae <memcpy>

	return length;
}
 8009848:	4620      	mov	r0, r4
 800984a:	b004      	add	sp, #16
 800984c:	bd10      	pop	{r4, pc}
 800984e:	bf00      	nop
 8009850:	1ffff7b4 	.word	0x1ffff7b4
 8009854:	1ffff7b0 	.word	0x1ffff7b0
 8009858:	1ffff7ac 	.word	0x1ffff7ac

0800985c <flash_stm32_get_parameters>:
flash_stm32_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_stm32_parameters;
}
 800985c:	4800      	ldr	r0, [pc, #0]	; (8009860 <flash_stm32_get_parameters+0x4>)
 800985e:	4770      	bx	lr
 8009860:	08025ab8 	.word	0x08025ab8

08009864 <flash_stm32_write>:
{
 8009864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009866:	4606      	mov	r6, r0
 8009868:	460f      	mov	r7, r1
 800986a:	4615      	mov	r5, r2
 800986c:	461c      	mov	r4, r3
	if (!flash_stm32_valid_range(dev, offset, len, true)) {
 800986e:	2301      	movs	r3, #1
 8009870:	4622      	mov	r2, r4
 8009872:	f012 fa8e 	bl	801bd92 <flash_stm32_valid_range>
 8009876:	b118      	cbz	r0, 8009880 <flash_stm32_write+0x1c>
	if (!len) {
 8009878:	b9c4      	cbnz	r4, 80098ac <flash_stm32_write+0x48>
		return 0;
 800987a:	2400      	movs	r4, #0
}
 800987c:	4620      	mov	r0, r4
 800987e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LOG_ERR("Write range invalid. Offset: %ld, len: %zu",
 8009880:	f04f 0300 	mov.w	r3, #0
 8009884:	2201      	movs	r2, #1
 8009886:	f362 0302 	bfi	r3, r2, #0, #3
 800988a:	f36f 03c5 	bfc	r3, #3, #3
 800988e:	4a11      	ldr	r2, [pc, #68]	; (80098d4 <flash_stm32_write+0x70>)
 8009890:	4911      	ldr	r1, [pc, #68]	; (80098d8 <flash_stm32_write+0x74>)
 8009892:	1a52      	subs	r2, r2, r1
 8009894:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8009898:	f362 138f 	bfi	r3, r2, #6, #10
 800989c:	4622      	mov	r2, r4
 800989e:	4639      	mov	r1, r7
 80098a0:	480e      	ldr	r0, [pc, #56]	; (80098dc <flash_stm32_write+0x78>)
 80098a2:	f7fc fecd 	bl	8006640 <log_2>
		return -EINVAL;
 80098a6:	f06f 0415 	mvn.w	r4, #21
 80098aa:	e7e7      	b.n	800987c <flash_stm32_write+0x18>
	k_sem_take(&FLASH_STM32_PRIV(dev)->sem, K_FOREVER);
 80098ac:	68f0      	ldr	r0, [r6, #12]
 80098ae:	300c      	adds	r0, #12
	return z_impl_k_sem_take(sem, timeout);
 80098b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80098b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098b8:	f00f f9ee 	bl	8018c98 <z_impl_k_sem_take>
	rc = flash_stm32_write_range(dev, offset, data, len);
 80098bc:	4623      	mov	r3, r4
 80098be:	462a      	mov	r2, r5
 80098c0:	4639      	mov	r1, r7
 80098c2:	4630      	mov	r0, r6
 80098c4:	f012 fa8f 	bl	801bde6 <flash_stm32_write_range>
 80098c8:	4604      	mov	r4, r0
	k_sem_give(&FLASH_STM32_PRIV(dev)->sem);
 80098ca:	68f0      	ldr	r0, [r6, #12]
 80098cc:	300c      	adds	r0, #12
	z_impl_k_sem_give(sem);
 80098ce:	f00f f9bb 	bl	8018c48 <z_impl_k_sem_give>
	return rc;
 80098d2:	e7d3      	b.n	800987c <flash_stm32_write+0x18>
 80098d4:	08022bf8 	.word	0x08022bf8
 80098d8:	08022b90 	.word	0x08022b90
 80098dc:	080259e4 	.word	0x080259e4

080098e0 <flash_stm32_read>:
{
 80098e0:	b570      	push	{r4, r5, r6, lr}
 80098e2:	460e      	mov	r6, r1
 80098e4:	4615      	mov	r5, r2
 80098e6:	461c      	mov	r4, r3
	if (!flash_stm32_valid_range(dev, offset, len, false)) {
 80098e8:	2300      	movs	r3, #0
 80098ea:	4622      	mov	r2, r4
 80098ec:	f012 fa51 	bl	801bd92 <flash_stm32_valid_range>
 80098f0:	b110      	cbz	r0, 80098f8 <flash_stm32_read+0x18>
	if (!len) {
 80098f2:	b9bc      	cbnz	r4, 8009924 <flash_stm32_read+0x44>
		return 0;
 80098f4:	2000      	movs	r0, #0
}
 80098f6:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("Read range invalid. Offset: %ld, len: %zu",
 80098f8:	f04f 0300 	mov.w	r3, #0
 80098fc:	2201      	movs	r2, #1
 80098fe:	f362 0302 	bfi	r3, r2, #0, #3
 8009902:	f36f 03c5 	bfc	r3, #3, #3
 8009906:	4a0b      	ldr	r2, [pc, #44]	; (8009934 <flash_stm32_read+0x54>)
 8009908:	490b      	ldr	r1, [pc, #44]	; (8009938 <flash_stm32_read+0x58>)
 800990a:	1a52      	subs	r2, r2, r1
 800990c:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8009910:	f362 138f 	bfi	r3, r2, #6, #10
 8009914:	4622      	mov	r2, r4
 8009916:	4631      	mov	r1, r6
 8009918:	4808      	ldr	r0, [pc, #32]	; (800993c <flash_stm32_read+0x5c>)
 800991a:	f7fc fe91 	bl	8006640 <log_2>
		return -EINVAL;
 800991e:	f06f 0015 	mvn.w	r0, #21
 8009922:	e7e8      	b.n	80098f6 <flash_stm32_read+0x16>
	memcpy(data, (uint8_t *) CONFIG_FLASH_BASE_ADDRESS + offset, len);
 8009924:	4622      	mov	r2, r4
 8009926:	f106 6100 	add.w	r1, r6, #134217728	; 0x8000000
 800992a:	4628      	mov	r0, r5
 800992c:	f012 ffbf 	bl	801c8ae <memcpy>
	return 0;
 8009930:	2000      	movs	r0, #0
 8009932:	e7e0      	b.n	80098f6 <flash_stm32_read+0x16>
 8009934:	08022bf8 	.word	0x08022bf8
 8009938:	08022b90 	.word	0x08022b90
 800993c:	08025a10 	.word	0x08025a10

08009940 <flash_stm32_erase>:
{
 8009940:	b570      	push	{r4, r5, r6, lr}
 8009942:	4605      	mov	r5, r0
 8009944:	460e      	mov	r6, r1
 8009946:	4614      	mov	r4, r2
	if (!flash_stm32_valid_range(dev, offset, len, true)) {
 8009948:	2301      	movs	r3, #1
 800994a:	f012 fa22 	bl	801bd92 <flash_stm32_valid_range>
 800994e:	b118      	cbz	r0, 8009958 <flash_stm32_erase+0x18>
	if (!len) {
 8009950:	b9c4      	cbnz	r4, 8009984 <flash_stm32_erase+0x44>
		return 0;
 8009952:	2400      	movs	r4, #0
}
 8009954:	4620      	mov	r0, r4
 8009956:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("Erase range invalid. Offset: %ld, len: %zu",
 8009958:	f04f 0300 	mov.w	r3, #0
 800995c:	2201      	movs	r2, #1
 800995e:	f362 0302 	bfi	r3, r2, #0, #3
 8009962:	f36f 03c5 	bfc	r3, #3, #3
 8009966:	4a11      	ldr	r2, [pc, #68]	; (80099ac <flash_stm32_erase+0x6c>)
 8009968:	4911      	ldr	r1, [pc, #68]	; (80099b0 <flash_stm32_erase+0x70>)
 800996a:	1a52      	subs	r2, r2, r1
 800996c:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8009970:	f362 138f 	bfi	r3, r2, #6, #10
 8009974:	4622      	mov	r2, r4
 8009976:	4631      	mov	r1, r6
 8009978:	480e      	ldr	r0, [pc, #56]	; (80099b4 <flash_stm32_erase+0x74>)
 800997a:	f7fc fe61 	bl	8006640 <log_2>
		return -EINVAL;
 800997e:	f06f 0415 	mvn.w	r4, #21
 8009982:	e7e7      	b.n	8009954 <flash_stm32_erase+0x14>
	k_sem_take(&FLASH_STM32_PRIV(dev)->sem, K_FOREVER);
 8009984:	68e8      	ldr	r0, [r5, #12]
 8009986:	300c      	adds	r0, #12
	return z_impl_k_sem_take(sem, timeout);
 8009988:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800998c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009990:	f00f f982 	bl	8018c98 <z_impl_k_sem_take>
	rc = flash_stm32_block_erase_loop(dev, offset, len);
 8009994:	4622      	mov	r2, r4
 8009996:	4631      	mov	r1, r6
 8009998:	4628      	mov	r0, r5
 800999a:	f000 f903 	bl	8009ba4 <flash_stm32_block_erase_loop>
 800999e:	4604      	mov	r4, r0
	k_sem_give(&FLASH_STM32_PRIV(dev)->sem);
 80099a0:	68e8      	ldr	r0, [r5, #12]
 80099a2:	300c      	adds	r0, #12
	z_impl_k_sem_give(sem);
 80099a4:	f00f f950 	bl	8018c48 <z_impl_k_sem_give>
	return rc;
 80099a8:	e7d4      	b.n	8009954 <flash_stm32_erase+0x14>
 80099aa:	bf00      	nop
 80099ac:	08022bf8 	.word	0x08022bf8
 80099b0:	08022b90 	.word	0x08022b90
 80099b4:	08025a3c 	.word	0x08025a3c

080099b8 <flash_stm32_wait_flash_idle>:
{
 80099b8:	b570      	push	{r4, r5, r6, lr}
 80099ba:	4606      	mov	r6, r0
	return z_impl_k_uptime_ticks();
 80099bc:	f018 fd6e 	bl	802249c <z_impl_k_uptime_ticks>
 80099c0:	220a      	movs	r2, #10
 80099c2:	2300      	movs	r3, #0
 80099c4:	f7f6 fbe0 	bl	8000188 <__aeabi_uldivmod>
	int64_t timeout_time = k_uptime_get() + STM32_FLASH_TIMEOUT;
 80099c8:	f110 0450 	adds.w	r4, r0, #80	; 0x50
 80099cc:	f141 0500 	adc.w	r5, r1, #0
	rc = flash_stm32_check_status(dev);
 80099d0:	4630      	mov	r0, r6
 80099d2:	f012 f9aa 	bl	801bd2a <flash_stm32_check_status>
	if (rc < 0) {
 80099d6:	2800      	cmp	r0, #0
 80099d8:	db26      	blt.n	8009a28 <flash_stm32_wait_flash_idle+0x70>
	while ((FLASH_STM32_REGS(dev)->SR & FLASH_SR_BSY)) {
 80099da:	68f3      	ldr	r3, [r6, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	f013 0f01 	tst.w	r3, #1
 80099e4:	d01e      	beq.n	8009a24 <flash_stm32_wait_flash_idle+0x6c>
 80099e6:	f018 fd59 	bl	802249c <z_impl_k_uptime_ticks>
 80099ea:	220a      	movs	r2, #10
 80099ec:	2300      	movs	r3, #0
 80099ee:	f7f6 fbcb 	bl	8000188 <__aeabi_uldivmod>
		if (k_uptime_get() > timeout_time) {
 80099f2:	4284      	cmp	r4, r0
 80099f4:	eb75 0301 	sbcs.w	r3, r5, r1
 80099f8:	daef      	bge.n	80099da <flash_stm32_wait_flash_idle+0x22>
			LOG_ERR("Timeout! val: %d", STM32_FLASH_TIMEOUT);
 80099fa:	f04f 0200 	mov.w	r2, #0
 80099fe:	2301      	movs	r3, #1
 8009a00:	f363 0202 	bfi	r2, r3, #0, #3
 8009a04:	f36f 02c5 	bfc	r2, #3, #3
 8009a08:	4b09      	ldr	r3, [pc, #36]	; (8009a30 <flash_stm32_wait_flash_idle+0x78>)
 8009a0a:	490a      	ldr	r1, [pc, #40]	; (8009a34 <flash_stm32_wait_flash_idle+0x7c>)
 8009a0c:	1a5b      	subs	r3, r3, r1
 8009a0e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8009a12:	f363 128f 	bfi	r2, r3, #6, #10
 8009a16:	2150      	movs	r1, #80	; 0x50
 8009a18:	4807      	ldr	r0, [pc, #28]	; (8009a38 <flash_stm32_wait_flash_idle+0x80>)
 8009a1a:	f7fc fd91 	bl	8006540 <log_1>
			return -EIO;
 8009a1e:	f06f 0004 	mvn.w	r0, #4
 8009a22:	e000      	b.n	8009a26 <flash_stm32_wait_flash_idle+0x6e>
	return 0;
 8009a24:	2000      	movs	r0, #0
}
 8009a26:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
 8009a28:	f06f 0004 	mvn.w	r0, #4
 8009a2c:	e7fb      	b.n	8009a26 <flash_stm32_wait_flash_idle+0x6e>
 8009a2e:	bf00      	nop
 8009a30:	08022bf8 	.word	0x08022bf8
 8009a34:	08022b90 	.word	0x08022b90
 8009a38:	08025a68 	.word	0x08025a68

08009a3c <flash_stm32_write_protection>:
{
 8009a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a3e:	4604      	mov	r4, r0
 8009a40:	460d      	mov	r5, r1
	FLASH_TypeDef *regs = FLASH_STM32_REGS(dev);
 8009a42:	68c0      	ldr	r0, [r0, #12]
 8009a44:	f850 6b0c 	ldr.w	r6, [r0], #12
	return z_impl_k_sem_take(sem, timeout);
 8009a48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a50:	f00f f922 	bl	8018c98 <z_impl_k_sem_take>
	if (enable) {
 8009a54:	b95d      	cbnz	r5, 8009a6e <flash_stm32_write_protection+0x32>
	int rc = 0;
 8009a56:	2700      	movs	r7, #0
	if (enable) {
 8009a58:	b1a5      	cbz	r5, 8009a84 <flash_stm32_write_protection+0x48>
		regs->CR |= FLASH_CR_LOCK;
 8009a5a:	6933      	ldr	r3, [r6, #16]
 8009a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a60:	6133      	str	r3, [r6, #16]
	k_sem_give(&FLASH_STM32_PRIV(dev)->sem);
 8009a62:	68e0      	ldr	r0, [r4, #12]
 8009a64:	300c      	adds	r0, #12
	z_impl_k_sem_give(sem);
 8009a66:	f00f f8ef 	bl	8018c48 <z_impl_k_sem_give>
}
 8009a6a:	4638      	mov	r0, r7
 8009a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rc = flash_stm32_wait_flash_idle(dev);
 8009a6e:	4620      	mov	r0, r4
 8009a70:	f7ff ffa2 	bl	80099b8 <flash_stm32_wait_flash_idle>
		if (rc) {
 8009a74:	4607      	mov	r7, r0
 8009a76:	2800      	cmp	r0, #0
 8009a78:	d0ee      	beq.n	8009a58 <flash_stm32_write_protection+0x1c>
	k_sem_give(&FLASH_STM32_PRIV(dev)->sem);
 8009a7a:	68e0      	ldr	r0, [r4, #12]
 8009a7c:	300c      	adds	r0, #12
 8009a7e:	f00f f8e3 	bl	8018c48 <z_impl_k_sem_give>
			return rc;
 8009a82:	e7f2      	b.n	8009a6a <flash_stm32_write_protection+0x2e>
		if (regs->CR & FLASH_CR_LOCK) {
 8009a84:	6933      	ldr	r3, [r6, #16]
 8009a86:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009a8a:	d0ea      	beq.n	8009a62 <flash_stm32_write_protection+0x26>
			regs->KEYR = FLASH_KEY1;
 8009a8c:	4b02      	ldr	r3, [pc, #8]	; (8009a98 <flash_stm32_write_protection+0x5c>)
 8009a8e:	6073      	str	r3, [r6, #4]
			regs->KEYR = FLASH_KEY2;
 8009a90:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8009a94:	6073      	str	r3, [r6, #4]
 8009a96:	e7e4      	b.n	8009a62 <flash_stm32_write_protection+0x26>
 8009a98:	45670123 	.word	0x45670123

08009a9c <stm32_flash_init>:
	.page_layout = flash_stm32_page_layout,
#endif
};

static int stm32_flash_init(const struct device *dev)
{
 8009a9c:	b538      	push	{r3, r4, r5, lr}
 8009a9e:	4604      	mov	r4, r0
#if defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32F0X) || \
	defined(CONFIG_SOC_SERIES_STM32F1X) || \
	defined(CONFIG_SOC_SERIES_STM32F3X) || \
	defined(CONFIG_SOC_SERIES_STM32G0X)
	struct flash_stm32_priv *p = FLASH_STM32_PRIV(dev);
 8009aa0:	68c5      	ldr	r5, [r0, #12]
 8009aa2:	4818      	ldr	r0, [pc, #96]	; (8009b04 <stm32_flash_init+0x68>)
 8009aa4:	f00e f8d4 	bl	8017c50 <z_impl_device_get_binding>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8009aa8:	4a17      	ldr	r2, [pc, #92]	; (8009b08 <stm32_flash_init+0x6c>)
 8009aaa:	6813      	ldr	r3, [r2, #0]
 8009aac:	f043 0301 	orr.w	r3, r3, #1
 8009ab0:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8009ab2:	4b15      	ldr	r3, [pc, #84]	; (8009b08 <stm32_flash_init+0x6c>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
#if defined(CONFIG_SOC_SERIES_STM32F0X) || \
	defined(CONFIG_SOC_SERIES_STM32F1X) || \
	defined(CONFIG_SOC_SERIES_STM32F3X)
	LL_RCC_HSI_Enable();

	while (!LL_RCC_HSI_IsReady()) {
 8009ab6:	f013 0f02 	tst.w	r3, #2
 8009aba:	d0fa      	beq.n	8009ab2 <stm32_flash_init+0x16>
	const struct clock_control_driver_api *api =
 8009abc:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	1d29      	adds	r1, r5, #4
 8009ac2:	4798      	blx	r3
	}
#endif

	/* enable clock */
	if (clock_control_on(clk, (clock_control_subsys_t *)&p->pclken) != 0) {
 8009ac4:	b950      	cbnz	r0, 8009adc <stm32_flash_init+0x40>

#ifdef CONFIG_SOC_SERIES_STM32WBX
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_HSEM);
#endif /* CONFIG_SOC_SERIES_STM32WBX */

	flash_stm32_sem_init(dev);
 8009ac6:	68e0      	ldr	r0, [r4, #12]
 8009ac8:	300c      	adds	r0, #12
	return z_impl_k_sem_init(sem, initial_count, limit);
 8009aca:	2201      	movs	r2, #1
 8009acc:	4611      	mov	r1, r2
 8009ace:	f018 fb91 	bl	80221f4 <z_impl_k_sem_init>
		LOG_DBG("Block %zu: bs: %zu count: %zu", i,
			layout[i].pages_size, layout[i].pages_count);
	}
#endif

	return flash_stm32_write_protection(dev, false);
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	f7ff ffb1 	bl	8009a3c <flash_stm32_write_protection>
}
 8009ada:	bd38      	pop	{r3, r4, r5, pc}
		LOG_ERR("Failed to enable clock");
 8009adc:	f04f 0100 	mov.w	r1, #0
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	f363 0102 	bfi	r1, r3, #0, #3
 8009ae6:	f36f 01c5 	bfc	r1, #3, #3
 8009aea:	4b08      	ldr	r3, [pc, #32]	; (8009b0c <stm32_flash_init+0x70>)
 8009aec:	4a08      	ldr	r2, [pc, #32]	; (8009b10 <stm32_flash_init+0x74>)
 8009aee:	1a9b      	subs	r3, r3, r2
 8009af0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8009af4:	f363 118f 	bfi	r1, r3, #6, #10
 8009af8:	4806      	ldr	r0, [pc, #24]	; (8009b14 <stm32_flash_init+0x78>)
 8009afa:	f7fc fe91 	bl	8006820 <log_0>
		return -EIO;
 8009afe:	f06f 0004 	mvn.w	r0, #4
 8009b02:	e7ea      	b.n	8009ada <stm32_flash_init+0x3e>
 8009b04:	08025714 	.word	0x08025714
 8009b08:	40021000 	.word	0x40021000
 8009b0c:	08022bf8 	.word	0x08022bf8
 8009b10:	08022b90 	.word	0x08022b90
 8009b14:	08025a7c 	.word	0x08025a7c

08009b18 <write_value>:
}
#endif

static int write_value(const struct device *dev, off_t offset,
		       flash_prg_t val)
{
 8009b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b1c:	4605      	mov	r5, r0
 8009b1e:	4617      	mov	r7, r2
	volatile flash_prg_t *flash = (flash_prg_t *)(
		offset + CONFIG_FLASH_BASE_ADDRESS);
 8009b20:	f101 6600 	add.w	r6, r1, #134217728	; 0x8000000
	FLASH_TypeDef *regs = FLASH_STM32_REGS(dev);
 8009b24:	68c3      	ldr	r3, [r0, #12]
 8009b26:	f8d3 8000 	ldr.w	r8, [r3]
	int rc;

	/* if the control register is locked, do not fail silently */
	if (is_flash_locked(regs)) {
 8009b2a:	4640      	mov	r0, r8
 8009b2c:	f012 f90f 	bl	801bd4e <is_flash_locked>
 8009b30:	b9d0      	cbnz	r0, 8009b68 <write_value+0x50>
		LOG_ERR("Flash is locked");
		return -EIO;
	}

	/* Check that no Flash main memory operation is ongoing */
	rc = flash_stm32_wait_flash_idle(dev);
 8009b32:	4628      	mov	r0, r5
 8009b34:	f7ff ff40 	bl	80099b8 <flash_stm32_wait_flash_idle>
	if (rc < 0) {
 8009b38:	1e04      	subs	r4, r0, #0
 8009b3a:	db12      	blt.n	8009b62 <write_value+0x4a>
		return rc;
	}

	/* Check if this half word is erased */
	if (*flash != FLASH_ERASED_VALUE) {
 8009b3c:	8833      	ldrh	r3, [r6, #0]
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d123      	bne.n	8009b90 <write_value+0x78>
		LOG_DBG("Flash location not erased");
		return -EIO;
	}

	/* Enable writing */
	write_enable(regs);
 8009b48:	4640      	mov	r0, r8
 8009b4a:	f012 f904 	bl	801bd56 <write_enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009b4e:	f3bf 8f4f 	dsb	sy

	/* Make sure the register write has taken effect */
	__DSB();

	/* Perform the data write operation at the desired memory address */
	*flash = val;
 8009b52:	8037      	strh	r7, [r6, #0]

	/* Wait until the BSY bit is cleared */
	rc = flash_stm32_wait_flash_idle(dev);
 8009b54:	4628      	mov	r0, r5
 8009b56:	f7ff ff2f 	bl	80099b8 <flash_stm32_wait_flash_idle>
 8009b5a:	4604      	mov	r4, r0

	/* Disable writing */
	write_disable(regs);
 8009b5c:	4640      	mov	r0, r8
 8009b5e:	f012 f8ff 	bl	801bd60 <write_disable>

	return rc;
}
 8009b62:	4620      	mov	r0, r4
 8009b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Flash is locked");
 8009b68:	f04f 0100 	mov.w	r1, #0
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	f363 0102 	bfi	r1, r3, #0, #3
 8009b72:	f36f 01c5 	bfc	r1, #3, #3
 8009b76:	4b08      	ldr	r3, [pc, #32]	; (8009b98 <write_value+0x80>)
 8009b78:	4a08      	ldr	r2, [pc, #32]	; (8009b9c <write_value+0x84>)
 8009b7a:	1a9b      	subs	r3, r3, r2
 8009b7c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8009b80:	f363 118f 	bfi	r1, r3, #6, #10
 8009b84:	4806      	ldr	r0, [pc, #24]	; (8009ba0 <write_value+0x88>)
 8009b86:	f7fc fe4b 	bl	8006820 <log_0>
		return -EIO;
 8009b8a:	f06f 0404 	mvn.w	r4, #4
 8009b8e:	e7e8      	b.n	8009b62 <write_value+0x4a>
		return -EIO;
 8009b90:	f06f 0404 	mvn.w	r4, #4
 8009b94:	e7e5      	b.n	8009b62 <write_value+0x4a>
 8009b96:	bf00      	nop
 8009b98:	08022c00 	.word	0x08022c00
 8009b9c:	08022b90 	.word	0x08022b90
 8009ba0:	08025ac0 	.word	0x08025ac0

08009ba4 <flash_stm32_block_erase_loop>:
}

int flash_stm32_block_erase_loop(const struct device *dev,
				 unsigned int offset,
				 unsigned int len)
{
 8009ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ba8:	4607      	mov	r7, r0
 8009baa:	4688      	mov	r8, r1
 8009bac:	4691      	mov	r9, r2
	FLASH_TypeDef *regs = FLASH_STM32_REGS(dev);
 8009bae:	68c3      	ldr	r3, [r0, #12]
 8009bb0:	681e      	ldr	r6, [r3, #0]
	int i, rc = 0;

	/* if the control register is locked, do not fail silently */
	if (is_flash_locked(regs)) {
 8009bb2:	4630      	mov	r0, r6
 8009bb4:	f012 f8cb 	bl	801bd4e <is_flash_locked>
 8009bb8:	bb00      	cbnz	r0, 8009bfc <flash_stm32_block_erase_loop+0x58>
		LOG_ERR("Flash is locked");
		return -EIO;
	}

	/* Check that no Flash memory operation is ongoing */
	rc = flash_stm32_wait_flash_idle(dev);
 8009bba:	4638      	mov	r0, r7
 8009bbc:	f7ff fefc 	bl	80099b8 <flash_stm32_wait_flash_idle>
	if (rc < 0) {
 8009bc0:	1e04      	subs	r4, r0, #0
 8009bc2:	db2e      	blt.n	8009c22 <flash_stm32_block_erase_loop+0x7e>
		return rc;
	}

	for (i = get_page(offset); i <= get_page(offset + len - 1); ++i) {
 8009bc4:	4640      	mov	r0, r8
 8009bc6:	f012 f8bb 	bl	801bd40 <get_page>
 8009bca:	4605      	mov	r5, r0
 8009bcc:	eb08 0009 	add.w	r0, r8, r9
 8009bd0:	3801      	subs	r0, #1
 8009bd2:	f012 f8b5 	bl	801bd40 <get_page>
 8009bd6:	42a8      	cmp	r0, r5
 8009bd8:	d323      	bcc.n	8009c22 <flash_stm32_block_erase_loop+0x7e>
		erase_page_begin(regs, i);
 8009bda:	4629      	mov	r1, r5
 8009bdc:	4630      	mov	r0, r6
 8009bde:	f012 f8c4 	bl	801bd6a <erase_page_begin>
 8009be2:	f3bf 8f4f 	dsb	sy
		__DSB();
		rc = flash_stm32_wait_flash_idle(dev);
 8009be6:	4638      	mov	r0, r7
 8009be8:	f7ff fee6 	bl	80099b8 <flash_stm32_wait_flash_idle>
 8009bec:	4604      	mov	r4, r0
		erase_page_end(regs);
 8009bee:	4630      	mov	r0, r6
 8009bf0:	f012 f8ca 	bl	801bd88 <erase_page_end>

		if (rc < 0) {
 8009bf4:	2c00      	cmp	r4, #0
 8009bf6:	db14      	blt.n	8009c22 <flash_stm32_block_erase_loop+0x7e>
	for (i = get_page(offset); i <= get_page(offset + len - 1); ++i) {
 8009bf8:	3501      	adds	r5, #1
 8009bfa:	e7e7      	b.n	8009bcc <flash_stm32_block_erase_loop+0x28>
		LOG_ERR("Flash is locked");
 8009bfc:	f04f 0100 	mov.w	r1, #0
 8009c00:	2301      	movs	r3, #1
 8009c02:	f363 0102 	bfi	r1, r3, #0, #3
 8009c06:	f36f 01c5 	bfc	r1, #3, #3
 8009c0a:	4b07      	ldr	r3, [pc, #28]	; (8009c28 <flash_stm32_block_erase_loop+0x84>)
 8009c0c:	4a07      	ldr	r2, [pc, #28]	; (8009c2c <flash_stm32_block_erase_loop+0x88>)
 8009c0e:	1a9b      	subs	r3, r3, r2
 8009c10:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8009c14:	f363 118f 	bfi	r1, r3, #6, #10
 8009c18:	4805      	ldr	r0, [pc, #20]	; (8009c30 <flash_stm32_block_erase_loop+0x8c>)
 8009c1a:	f7fc fe01 	bl	8006820 <log_0>
		return -EIO;
 8009c1e:	f06f 0404 	mvn.w	r4, #4
			break;
		}
	}

	return rc;
}
 8009c22:	4620      	mov	r0, r4
 8009c24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c28:	08022c00 	.word	0x08022c00
 8009c2c:	08022b90 	.word	0x08022b90
 8009c30:	08025ac0 	.word	0x08025ac0

08009c34 <flash_stm32_page_layout>:
		.pages_size = 0,
	};

	ARG_UNUSED(dev);

	if (flash_layout.pages_count == 0) {
 8009c34:	4b06      	ldr	r3, [pc, #24]	; (8009c50 <flash_stm32_page_layout+0x1c>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	b92b      	cbnz	r3, 8009c46 <flash_stm32_page_layout+0x12>
#if defined(CONFIG_SOC_SERIES_STM32F3X)
		flash_layout.pages_count =
 8009c3a:	4b05      	ldr	r3, [pc, #20]	; (8009c50 <flash_stm32_page_layout+0x1c>)
 8009c3c:	2080      	movs	r0, #128	; 0x80
 8009c3e:	6018      	str	r0, [r3, #0]
			DT_REG_SIZE(DT_INST(0, soc_nv_flash)) / FLASH_PAGE_SIZE;
#else
		flash_layout.pages_count = (CONFIG_FLASH_SIZE * 1024) /
			FLASH_PAGE_SIZE;
#endif
		flash_layout.pages_size = FLASH_PAGE_SIZE;
 8009c40:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009c44:	6058      	str	r0, [r3, #4]
	}

	*layout = &flash_layout;
 8009c46:	4b02      	ldr	r3, [pc, #8]	; (8009c50 <flash_stm32_page_layout+0x1c>)
 8009c48:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	6013      	str	r3, [r2, #0]
}
 8009c4e:	4770      	bx	lr
 8009c50:	2000404c 	.word	0x2000404c

08009c54 <reset_rx>:
	net_buf_add_mem(buf, rx.hdr, rx.hdr_len);
}

static void reset_rx(void)
{
	rx.type = H4_NONE;
 8009c54:	4b05      	ldr	r3, [pc, #20]	; (8009c6c <reset_rx+0x18>)
 8009c56:	2200      	movs	r2, #0
 8009c58:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	rx.remaining = 0U;
 8009c5c:	839a      	strh	r2, [r3, #28]
	rx.have_hdr = false;
 8009c5e:	f883 2020 	strb.w	r2, [r3, #32]
	rx.hdr_len = 0U;
 8009c62:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	rx.discardable = false;
 8009c66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8009c6a:	4770      	bx	lr
 8009c6c:	20000ac0 	.word	0x20000ac0

08009c70 <h4_send>:
		}
	}
}

static int h4_send(struct net_buf *buf)
{
 8009c70:	b508      	push	{r3, lr}
 8009c72:	4601      	mov	r1, r0
	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	net_buf_put(&tx.fifo, buf);
 8009c74:	4805      	ldr	r0, [pc, #20]	; (8009c8c <h4_send+0x1c>)
 8009c76:	f016 fbaa 	bl	80203ce <net_buf_put>
	uart_irq_tx_enable(h4_dev);
 8009c7a:	4b05      	ldr	r3, [pc, #20]	; (8009c90 <h4_send+0x20>)
 8009c7c:	6818      	ldr	r0, [r3, #0]
__syscall void uart_irq_tx_enable(const struct device *dev);

static inline void z_impl_uart_irq_tx_enable(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
 8009c7e:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->irq_tx_enable) {
 8009c80:	69db      	ldr	r3, [r3, #28]
 8009c82:	b103      	cbz	r3, 8009c86 <h4_send+0x16>
		api->irq_tx_enable(dev);
 8009c84:	4798      	blx	r3

	return 0;
}
 8009c86:	2000      	movs	r0, #0
 8009c88:	bd08      	pop	{r3, pc}
 8009c8a:	bf00      	nop
 8009c8c:	20000af0 	.word	0x20000af0
 8009c90:	20004054 	.word	0x20004054

08009c94 <get_rx>:
{
 8009c94:	b508      	push	{r3, lr}
 8009c96:	4602      	mov	r2, r0
 8009c98:	460b      	mov	r3, r1
	switch (rx.type) {
 8009c9a:	490a      	ldr	r1, [pc, #40]	; (8009cc4 <get_rx+0x30>)
 8009c9c:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
 8009ca0:	2902      	cmp	r1, #2
 8009ca2:	d009      	beq.n	8009cb8 <get_rx+0x24>
 8009ca4:	2904      	cmp	r1, #4
 8009ca6:	d10b      	bne.n	8009cc0 <get_rx+0x2c>
		return bt_buf_get_evt(rx.evt.evt, rx.discardable, timeout);
 8009ca8:	4806      	ldr	r0, [pc, #24]	; (8009cc4 <get_rx+0x30>)
 8009caa:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
 8009cae:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8009cb2:	f005 fec3 	bl	800fa3c <bt_buf_get_evt>
 8009cb6:	e004      	b.n	8009cc2 <get_rx+0x2e>
		return bt_buf_get_rx(BT_BUF_ACL_IN, timeout);
 8009cb8:	2003      	movs	r0, #3
 8009cba:	f005 fe7d 	bl	800f9b8 <bt_buf_get_rx>
 8009cbe:	e000      	b.n	8009cc2 <get_rx+0x2e>
	switch (rx.type) {
 8009cc0:	2000      	movs	r0, #0
}
 8009cc2:	bd08      	pop	{r3, pc}
 8009cc4:	20000ac0 	.word	0x20000ac0

08009cc8 <rx_thread>:
{
 8009cc8:	b538      	push	{r3, r4, r5, lr}
		if (rx.have_hdr && !rx.buf) {
 8009cca:	4b2f      	ldr	r3, [pc, #188]	; (8009d88 <rx_thread+0xc0>)
 8009ccc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009cd0:	b113      	cbz	r3, 8009cd8 <rx_thread+0x10>
 8009cd2:	4b2d      	ldr	r3, [pc, #180]	; (8009d88 <rx_thread+0xc0>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	b173      	cbz	r3, 8009cf6 <rx_thread+0x2e>
		uart_irq_rx_enable(h4_dev);
 8009cd8:	4b2c      	ldr	r3, [pc, #176]	; (8009d8c <rx_thread+0xc4>)
 8009cda:	6818      	ldr	r0, [r3, #0]
__syscall void uart_irq_rx_enable(const struct device *dev);

static inline void z_impl_uart_irq_rx_enable(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
 8009cdc:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->irq_rx_enable) {
 8009cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ce0:	b103      	cbz	r3, 8009ce4 <rx_thread+0x1c>
		api->irq_rx_enable(dev);
 8009ce2:	4798      	blx	r3
		buf = net_buf_get(&rx.fifo, K_FOREVER);
 8009ce4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ce8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cec:	4828      	ldr	r0, [pc, #160]	; (8009d90 <rx_thread+0xc8>)
 8009cee:	f016 fb49 	bl	8020384 <net_buf_get>
 8009cf2:	4604      	mov	r4, r0
 8009cf4:	e034      	b.n	8009d60 <rx_thread+0x98>
			rx.buf = get_rx(K_FOREVER);
 8009cf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cfa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009cfe:	f7ff ffc9 	bl	8009c94 <get_rx>
 8009d02:	4b21      	ldr	r3, [pc, #132]	; (8009d88 <rx_thread+0xc0>)
 8009d04:	6018      	str	r0, [r3, #0]
			if (rx.remaining > net_buf_tailroom(rx.buf)) {
 8009d06:	8b9c      	ldrh	r4, [r3, #28]
 8009d08:	3008      	adds	r0, #8
 8009d0a:	f016 fc04 	bl	8020516 <net_buf_simple_tailroom>
 8009d0e:	4284      	cmp	r4, r0
 8009d10:	d915      	bls.n	8009d3e <rx_thread+0x76>
				BT_ERR("Not enough space in buffer");
 8009d12:	2301      	movs	r3, #1
 8009d14:	f363 0502 	bfi	r5, r3, #0, #3
 8009d18:	f36f 05c5 	bfc	r5, #3, #3
 8009d1c:	4b1d      	ldr	r3, [pc, #116]	; (8009d94 <rx_thread+0xcc>)
 8009d1e:	4a1e      	ldr	r2, [pc, #120]	; (8009d98 <rx_thread+0xd0>)
 8009d20:	1a9b      	subs	r3, r3, r2
 8009d22:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8009d26:	f363 158f 	bfi	r5, r3, #6, #10
 8009d2a:	4629      	mov	r1, r5
 8009d2c:	481b      	ldr	r0, [pc, #108]	; (8009d9c <rx_thread+0xd4>)
 8009d2e:	f7fc fd77 	bl	8006820 <log_0>
				rx.discard = rx.remaining;
 8009d32:	4b15      	ldr	r3, [pc, #84]	; (8009d88 <rx_thread+0xc0>)
 8009d34:	8b9a      	ldrh	r2, [r3, #28]
 8009d36:	83da      	strh	r2, [r3, #30]
				reset_rx();
 8009d38:	f7ff ff8c 	bl	8009c54 <reset_rx>
 8009d3c:	e7cc      	b.n	8009cd8 <rx_thread+0x10>
				copy_hdr(rx.buf);
 8009d3e:	4912      	ldr	r1, [pc, #72]	; (8009d88 <rx_thread+0xc0>)
 8009d40:	6808      	ldr	r0, [r1, #0]
	net_buf_add_mem(buf, rx.hdr, rx.hdr_len);
 8009d42:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
 8009d46:	3124      	adds	r1, #36	; 0x24
 8009d48:	3008      	adds	r0, #8
 8009d4a:	f016 fb9d 	bl	8020488 <net_buf_simple_add_mem>
}
 8009d4e:	e7c3      	b.n	8009cd8 <rx_thread+0x10>
			buf = net_buf_get(&rx.fifo, K_NO_WAIT);
 8009d50:	2200      	movs	r2, #0
 8009d52:	2300      	movs	r3, #0
 8009d54:	480e      	ldr	r0, [pc, #56]	; (8009d90 <rx_thread+0xc8>)
 8009d56:	f016 fb15 	bl	8020384 <net_buf_get>
		} while (buf);
 8009d5a:	4604      	mov	r4, r0
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	d0b4      	beq.n	8009cca <rx_thread+0x2>
			uart_irq_rx_enable(h4_dev);
 8009d60:	4b0a      	ldr	r3, [pc, #40]	; (8009d8c <rx_thread+0xc4>)
 8009d62:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 8009d64:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_enable) {
 8009d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d68:	b103      	cbz	r3, 8009d6c <rx_thread+0xa4>
		api->irq_rx_enable(dev);
 8009d6a:	4798      	blx	r3
			bt_recv(buf);
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	f005 f87b 	bl	800ee68 <bt_recv>
	z_impl_k_yield();
 8009d72:	f00e feb7 	bl	8018ae4 <z_impl_k_yield>
			uart_irq_rx_disable(h4_dev);
 8009d76:	4b05      	ldr	r3, [pc, #20]	; (8009d8c <rx_thread+0xc4>)
 8009d78:	6818      	ldr	r0, [r3, #0]
__syscall void uart_irq_rx_disable(const struct device *dev);

static inline void z_impl_uart_irq_rx_disable(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
 8009d7a:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->irq_rx_disable) {
 8009d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d0e6      	beq.n	8009d50 <rx_thread+0x88>
		api->irq_rx_disable(dev);
 8009d82:	4798      	blx	r3
 8009d84:	e7e4      	b.n	8009d50 <rx_thread+0x88>
 8009d86:	bf00      	nop
 8009d88:	20000ac0 	.word	0x20000ac0
 8009d8c:	20004054 	.word	0x20004054
 8009d90:	20000ac4 	.word	0x20000ac4
 8009d94:	08022bb8 	.word	0x08022bb8
 8009d98:	08022b90 	.word	0x08022b90
 8009d9c:	08025ae4 	.word	0x08025ae4

08009da0 <process_rx>:
{
 8009da0:	b538      	push	{r3, r4, r5, lr}
	if (rx.discard) {
 8009da2:	4b97      	ldr	r3, [pc, #604]	; (800a000 <process_rx+0x260>)
 8009da4:	8bd9      	ldrh	r1, [r3, #30]
 8009da6:	2900      	cmp	r1, #0
 8009da8:	d13c      	bne.n	8009e24 <process_rx+0x84>
	if (rx.have_hdr) {
 8009daa:	4b95      	ldr	r3, [pc, #596]	; (800a000 <process_rx+0x260>)
 8009dac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	f000 80c4 	beq.w	8009f3e <process_rx+0x19e>
	if (!rx.buf) {
 8009db6:	4b92      	ldr	r3, [pc, #584]	; (800a000 <process_rx+0x260>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d03b      	beq.n	8009e36 <process_rx+0x96>
	read = uart_fifo_read(h4_dev, net_buf_tail(rx.buf), rx.remaining);
 8009dbe:	4b91      	ldr	r3, [pc, #580]	; (800a004 <process_rx+0x264>)
 8009dc0:	6818      	ldr	r0, [r3, #0]
 8009dc2:	4b8f      	ldr	r3, [pc, #572]	; (800a000 <process_rx+0x260>)
 8009dc4:	681a      	ldr	r2, [r3, #0]
 *
 * @return Tail pointer for the buffer.
 */
static inline uint8_t *net_buf_simple_tail(struct net_buf_simple *buf)
{
	return buf->data + buf->len;
 8009dc6:	6891      	ldr	r1, [r2, #8]
 8009dc8:	8992      	ldrh	r2, [r2, #12]
 8009dca:	4411      	add	r1, r2
 8009dcc:	8b9a      	ldrh	r2, [r3, #28]
	const struct uart_driver_api *api =
 8009dce:	6883      	ldr	r3, [r0, #8]
	if (api->fifo_read) {
 8009dd0:	699b      	ldr	r3, [r3, #24]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	f000 8092 	beq.w	8009efc <process_rx+0x15c>
		return api->fifo_read(dev, rx_data, size);
 8009dd8:	4798      	blx	r3
 8009dda:	4604      	mov	r4, r0
	net_buf_add(rx.buf, read);
 8009ddc:	4d88      	ldr	r5, [pc, #544]	; (800a000 <process_rx+0x260>)
 8009dde:	6828      	ldr	r0, [r5, #0]
 8009de0:	4621      	mov	r1, r4
 8009de2:	3008      	adds	r0, #8
 8009de4:	f016 fb4a 	bl	802047c <net_buf_simple_add>
	rx.remaining -= read;
 8009de8:	8ba8      	ldrh	r0, [r5, #28]
 8009dea:	1b00      	subs	r0, r0, r4
 8009dec:	b280      	uxth	r0, r0
 8009dee:	83a8      	strh	r0, [r5, #28]
	if (rx.remaining) {
 8009df0:	bb00      	cbnz	r0, 8009e34 <process_rx+0x94>
	buf = rx.buf;
 8009df2:	462b      	mov	r3, r5
 8009df4:	682d      	ldr	r5, [r5, #0]
	rx.buf = NULL;
 8009df6:	2200      	movs	r2, #0
 8009df8:	601a      	str	r2, [r3, #0]
	if (rx.type == H4_EVT) {
 8009dfa:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009dfe:	2b04      	cmp	r3, #4
 8009e00:	d07e      	beq.n	8009f00 <process_rx+0x160>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(uint8_t *)net_buf_user_data(buf) = type;
 8009e02:	2303      	movs	r3, #3
 8009e04:	752b      	strb	r3, [r5, #20]
		evt_flags = BT_HCI_EVT_FLAG_RECV;
 8009e06:	2402      	movs	r4, #2
	reset_rx();
 8009e08:	f7ff ff24 	bl	8009c54 <reset_rx>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
 8009e0c:	f014 0f01 	tst.w	r4, #1
 8009e10:	f040 8091 	bne.w	8009f36 <process_rx+0x196>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
 8009e14:	f014 0f02 	tst.w	r4, #2
 8009e18:	d00c      	beq.n	8009e34 <process_rx+0x94>
		net_buf_put(&rx.fifo, buf);
 8009e1a:	4629      	mov	r1, r5
 8009e1c:	487a      	ldr	r0, [pc, #488]	; (800a008 <process_rx+0x268>)
 8009e1e:	f016 fad6 	bl	80203ce <net_buf_put>
 8009e22:	e007      	b.n	8009e34 <process_rx+0x94>
		rx.discard -= h4_discard(h4_dev, rx.discard);
 8009e24:	4b77      	ldr	r3, [pc, #476]	; (800a004 <process_rx+0x264>)
 8009e26:	6818      	ldr	r0, [r3, #0]
 8009e28:	f011 fff5 	bl	801be16 <h4_discard>
 8009e2c:	4a74      	ldr	r2, [pc, #464]	; (800a000 <process_rx+0x260>)
 8009e2e:	8bd3      	ldrh	r3, [r2, #30]
 8009e30:	1a1b      	subs	r3, r3, r0
 8009e32:	83d3      	strh	r3, [r2, #30]
}
 8009e34:	bd38      	pop	{r3, r4, r5, pc}
		rx.buf = get_rx(K_NO_WAIT);
 8009e36:	2000      	movs	r0, #0
 8009e38:	2100      	movs	r1, #0
 8009e3a:	f7ff ff2b 	bl	8009c94 <get_rx>
 8009e3e:	4b70      	ldr	r3, [pc, #448]	; (800a000 <process_rx+0x260>)
 8009e40:	6018      	str	r0, [r3, #0]
		if (!rx.buf) {
 8009e42:	b178      	cbz	r0, 8009e64 <process_rx+0xc4>
		if (rx.remaining > net_buf_tailroom(rx.buf)) {
 8009e44:	4b6e      	ldr	r3, [pc, #440]	; (800a000 <process_rx+0x260>)
 8009e46:	8b9c      	ldrh	r4, [r3, #28]
 8009e48:	3008      	adds	r0, #8
 8009e4a:	f016 fb64 	bl	8020516 <net_buf_simple_tailroom>
 8009e4e:	4284      	cmp	r4, r0
 8009e50:	d83d      	bhi.n	8009ece <process_rx+0x12e>
		copy_hdr(rx.buf);
 8009e52:	496b      	ldr	r1, [pc, #428]	; (800a000 <process_rx+0x260>)
 8009e54:	6808      	ldr	r0, [r1, #0]
	net_buf_add_mem(buf, rx.hdr, rx.hdr_len);
 8009e56:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
 8009e5a:	3124      	adds	r1, #36	; 0x24
 8009e5c:	3008      	adds	r0, #8
 8009e5e:	f016 fb13 	bl	8020488 <net_buf_simple_add_mem>
 8009e62:	e7ac      	b.n	8009dbe <process_rx+0x1e>
			if (rx.discardable) {
 8009e64:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009e68:	b1c3      	cbz	r3, 8009e9c <process_rx+0xfc>
				BT_WARN("Discarding event 0x%02x", rx.evt.evt);
 8009e6a:	f04f 0200 	mov.w	r2, #0
 8009e6e:	2302      	movs	r3, #2
 8009e70:	f363 0202 	bfi	r2, r3, #0, #3
 8009e74:	f36f 02c5 	bfc	r2, #3, #3
 8009e78:	4b64      	ldr	r3, [pc, #400]	; (800a00c <process_rx+0x26c>)
 8009e7a:	4965      	ldr	r1, [pc, #404]	; (800a010 <process_rx+0x270>)
 8009e7c:	1a5b      	subs	r3, r3, r1
 8009e7e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8009e82:	f363 128f 	bfi	r2, r3, #6, #10
 8009e86:	4c5e      	ldr	r4, [pc, #376]	; (800a000 <process_rx+0x260>)
 8009e88:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 8009e8c:	4861      	ldr	r0, [pc, #388]	; (800a014 <process_rx+0x274>)
 8009e8e:	f7fc fb57 	bl	8006540 <log_1>
				rx.discard = rx.remaining;
 8009e92:	8ba3      	ldrh	r3, [r4, #28]
 8009e94:	83e3      	strh	r3, [r4, #30]
				reset_rx();
 8009e96:	f7ff fedd 	bl	8009c54 <reset_rx>
				return;
 8009e9a:	e7cb      	b.n	8009e34 <process_rx+0x94>
			BT_WARN("Failed to allocate, deferring to rx_thread");
 8009e9c:	f04f 0100 	mov.w	r1, #0
 8009ea0:	2302      	movs	r3, #2
 8009ea2:	f363 0102 	bfi	r1, r3, #0, #3
 8009ea6:	f36f 01c5 	bfc	r1, #3, #3
 8009eaa:	4b58      	ldr	r3, [pc, #352]	; (800a00c <process_rx+0x26c>)
 8009eac:	4a58      	ldr	r2, [pc, #352]	; (800a010 <process_rx+0x270>)
 8009eae:	1a9b      	subs	r3, r3, r2
 8009eb0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8009eb4:	f363 118f 	bfi	r1, r3, #6, #10
 8009eb8:	4857      	ldr	r0, [pc, #348]	; (800a018 <process_rx+0x278>)
 8009eba:	f7fc fcb1 	bl	8006820 <log_0>
			uart_irq_rx_disable(h4_dev);
 8009ebe:	4b51      	ldr	r3, [pc, #324]	; (800a004 <process_rx+0x264>)
 8009ec0:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 8009ec2:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_disable) {
 8009ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d0b4      	beq.n	8009e34 <process_rx+0x94>
		api->irq_rx_disable(dev);
 8009eca:	4798      	blx	r3
			return;
 8009ecc:	e7b2      	b.n	8009e34 <process_rx+0x94>
			BT_ERR("Not enough space in buffer");
 8009ece:	f04f 0100 	mov.w	r1, #0
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	f363 0102 	bfi	r1, r3, #0, #3
 8009ed8:	f36f 01c5 	bfc	r1, #3, #3
 8009edc:	4b4b      	ldr	r3, [pc, #300]	; (800a00c <process_rx+0x26c>)
 8009ede:	4a4c      	ldr	r2, [pc, #304]	; (800a010 <process_rx+0x270>)
 8009ee0:	1a9b      	subs	r3, r3, r2
 8009ee2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8009ee6:	f363 118f 	bfi	r1, r3, #6, #10
 8009eea:	484c      	ldr	r0, [pc, #304]	; (800a01c <process_rx+0x27c>)
 8009eec:	f7fc fc98 	bl	8006820 <log_0>
			rx.discard = rx.remaining;
 8009ef0:	4b43      	ldr	r3, [pc, #268]	; (800a000 <process_rx+0x260>)
 8009ef2:	8b9a      	ldrh	r2, [r3, #28]
 8009ef4:	83da      	strh	r2, [r3, #30]
			reset_rx();
 8009ef6:	f7ff fead 	bl	8009c54 <reset_rx>
			return;
 8009efa:	e79b      	b.n	8009e34 <process_rx+0x94>
	return 0;
 8009efc:	2400      	movs	r4, #0
 8009efe:	e76d      	b.n	8009ddc <process_rx+0x3c>
		evt_flags = bt_hci_evt_get_flags(rx.evt.evt);
 8009f00:	4b3f      	ldr	r3, [pc, #252]	; (800a000 <process_rx+0x260>)
 8009f02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
 8009f06:	3b05      	subs	r3, #5
 8009f08:	2b15      	cmp	r3, #21
 8009f0a:	d80e      	bhi.n	8009f2a <process_rx+0x18a>
 8009f0c:	e8df f003 	tbb	[pc, r3]
 8009f10:	0d0d0d0b 	.word	0x0d0d0d0b
 8009f14:	0d0d0d0d 	.word	0x0d0d0d0d
 8009f18:	0d11110d 	.word	0x0d11110d
 8009f1c:	0d110d0d 	.word	0x0d110d0d
 8009f20:	0d0d0d0d 	.word	0x0d0d0d0d
 8009f24:	110d      	.short	0x110d
 8009f26:	2403      	movs	r4, #3
 8009f28:	e000      	b.n	8009f2c <process_rx+0x18c>
#endif /* defined(CONFIG_BT_CONN) */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
 8009f2a:	2402      	movs	r4, #2
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	752b      	strb	r3, [r5, #20]
}
 8009f30:	e76a      	b.n	8009e08 <process_rx+0x68>
		return BT_HCI_EVT_FLAG_RECV_PRIO;
 8009f32:	2401      	movs	r4, #1
 8009f34:	e7fa      	b.n	8009f2c <process_rx+0x18c>
		bt_recv_prio(buf);
 8009f36:	4628      	mov	r0, r5
 8009f38:	f004 ffc2 	bl	800eec0 <bt_recv_prio>
 8009f3c:	e76a      	b.n	8009e14 <process_rx+0x74>
	switch (rx.type) {
 8009f3e:	4b30      	ldr	r3, [pc, #192]	; (800a000 <process_rx+0x260>)
 8009f40:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009f44:	2b02      	cmp	r3, #2
 8009f46:	f000 80cc 	beq.w	800a0e2 <process_rx+0x342>
 8009f4a:	2b04      	cmp	r3, #4
 8009f4c:	d16a      	bne.n	800a024 <process_rx+0x284>
	int to_read = rx.hdr_len - rx.remaining;
 8009f4e:	4b2c      	ldr	r3, [pc, #176]	; (800a000 <process_rx+0x260>)
 8009f50:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 8009f54:	8b9a      	ldrh	r2, [r3, #28]
 8009f56:	1a89      	subs	r1, r1, r2
	rx.remaining -= uart_fifo_read(h4_dev, (uint8_t *)hdr + to_read,
 8009f58:	482a      	ldr	r0, [pc, #168]	; (800a004 <process_rx+0x264>)
 8009f5a:	6800      	ldr	r0, [r0, #0]
 8009f5c:	3324      	adds	r3, #36	; 0x24
 8009f5e:	4419      	add	r1, r3
	const struct uart_driver_api *api =
 8009f60:	6883      	ldr	r3, [r0, #8]
	if (api->fifo_read) {
 8009f62:	699b      	ldr	r3, [r3, #24]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	f000 80a5 	beq.w	800a0b4 <process_rx+0x314>
		return api->fifo_read(dev, rx_data, size);
 8009f6a:	4798      	blx	r3
 8009f6c:	4a24      	ldr	r2, [pc, #144]	; (800a000 <process_rx+0x260>)
 8009f6e:	8b93      	ldrh	r3, [r2, #28]
 8009f70:	1a1b      	subs	r3, r3, r0
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	8393      	strh	r3, [r2, #28]
	if (rx.hdr_len == sizeof(*hdr) && rx.remaining < sizeof(*hdr)) {
 8009f76:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8009f7a:	2a02      	cmp	r2, #2
 8009f7c:	f000 809c 	beq.w	800a0b8 <process_rx+0x318>
	if (!rx.remaining) {
 8009f80:	4b1f      	ldr	r3, [pc, #124]	; (800a000 <process_rx+0x260>)
 8009f82:	8b9b      	ldrh	r3, [r3, #28]
 8009f84:	b993      	cbnz	r3, 8009fac <process_rx+0x20c>
		if (rx.evt.evt == BT_HCI_EVT_LE_META_EVENT &&
 8009f86:	4b1e      	ldr	r3, [pc, #120]	; (800a000 <process_rx+0x260>)
 8009f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f8a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8009f8e:	4a24      	ldr	r2, [pc, #144]	; (800a020 <process_rx+0x280>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	f000 80a1 	beq.w	800a0d8 <process_rx+0x338>
		rx.remaining = hdr->len - (rx.hdr_len - sizeof(*hdr));
 8009f96:	4a1a      	ldr	r2, [pc, #104]	; (800a000 <process_rx+0x260>)
 8009f98:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8009f9c:	f892 1022 	ldrb.w	r1, [r2, #34]	; 0x22
 8009fa0:	1a5b      	subs	r3, r3, r1
 8009fa2:	3302      	adds	r3, #2
 8009fa4:	8393      	strh	r3, [r2, #28]
		rx.have_hdr = true;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	f882 3020 	strb.w	r3, [r2, #32]
	if (rx.have_hdr && rx.buf) {
 8009fac:	4b14      	ldr	r3, [pc, #80]	; (800a000 <process_rx+0x260>)
 8009fae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	f43f af3e 	beq.w	8009e34 <process_rx+0x94>
 8009fb8:	4b11      	ldr	r3, [pc, #68]	; (800a000 <process_rx+0x260>)
 8009fba:	6818      	ldr	r0, [r3, #0]
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	f43f af39 	beq.w	8009e34 <process_rx+0x94>
		if (rx.remaining > net_buf_tailroom(rx.buf)) {
 8009fc2:	8b9c      	ldrh	r4, [r3, #28]
 8009fc4:	3008      	adds	r0, #8
 8009fc6:	f016 faa6 	bl	8020516 <net_buf_simple_tailroom>
 8009fca:	4284      	cmp	r4, r0
 8009fcc:	f240 80a6 	bls.w	800a11c <process_rx+0x37c>
			BT_ERR("Not enough space in buffer");
 8009fd0:	f04f 0100 	mov.w	r1, #0
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	f363 0102 	bfi	r1, r3, #0, #3
 8009fda:	f36f 01c5 	bfc	r1, #3, #3
 8009fde:	4b0b      	ldr	r3, [pc, #44]	; (800a00c <process_rx+0x26c>)
 8009fe0:	4a0b      	ldr	r2, [pc, #44]	; (800a010 <process_rx+0x270>)
 8009fe2:	1a9b      	subs	r3, r3, r2
 8009fe4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8009fe8:	f363 118f 	bfi	r1, r3, #6, #10
 8009fec:	480b      	ldr	r0, [pc, #44]	; (800a01c <process_rx+0x27c>)
 8009fee:	f7fc fc17 	bl	8006820 <log_0>
			rx.discard = rx.remaining;
 8009ff2:	4b03      	ldr	r3, [pc, #12]	; (800a000 <process_rx+0x260>)
 8009ff4:	8b9a      	ldrh	r2, [r3, #28]
 8009ff6:	83da      	strh	r2, [r3, #30]
			reset_rx();
 8009ff8:	f7ff fe2c 	bl	8009c54 <reset_rx>
 8009ffc:	e71a      	b.n	8009e34 <process_rx+0x94>
 8009ffe:	bf00      	nop
 800a000:	20000ac0 	.word	0x20000ac0
 800a004:	20004054 	.word	0x20004054
 800a008:	20000ac4 	.word	0x20000ac4
 800a00c:	08022bb8 	.word	0x08022bb8
 800a010:	08022b90 	.word	0x08022b90
 800a014:	08025b00 	.word	0x08025b00
 800a018:	08025b18 	.word	0x08025b18
 800a01c:	08025ae4 	.word	0x08025ae4
 800a020:	0002003e 	.word	0x0002003e
	if (uart_fifo_read(h4_dev, &rx.type, 1) != 1) {
 800a024:	4b42      	ldr	r3, [pc, #264]	; (800a130 <process_rx+0x390>)
 800a026:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 800a028:	6883      	ldr	r3, [r0, #8]
	if (api->fifo_read) {
 800a02a:	699b      	ldr	r3, [r3, #24]
 800a02c:	b123      	cbz	r3, 800a038 <process_rx+0x298>
		return api->fifo_read(dev, rx_data, size);
 800a02e:	2201      	movs	r2, #1
 800a030:	4940      	ldr	r1, [pc, #256]	; (800a134 <process_rx+0x394>)
 800a032:	4798      	blx	r3
 800a034:	2801      	cmp	r0, #1
 800a036:	d015      	beq.n	800a064 <process_rx+0x2c4>
		BT_WARN("Unable to read H:4 packet type");
 800a038:	f04f 0100 	mov.w	r1, #0
 800a03c:	2302      	movs	r3, #2
 800a03e:	f363 0102 	bfi	r1, r3, #0, #3
 800a042:	f36f 01c5 	bfc	r1, #3, #3
 800a046:	4b3c      	ldr	r3, [pc, #240]	; (800a138 <process_rx+0x398>)
 800a048:	4a3c      	ldr	r2, [pc, #240]	; (800a13c <process_rx+0x39c>)
 800a04a:	1a9b      	subs	r3, r3, r2
 800a04c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800a050:	f363 118f 	bfi	r1, r3, #6, #10
 800a054:	483a      	ldr	r0, [pc, #232]	; (800a140 <process_rx+0x3a0>)
 800a056:	f7fc fbe3 	bl	8006820 <log_0>
		rx.type = H4_NONE;
 800a05a:	4b3a      	ldr	r3, [pc, #232]	; (800a144 <process_rx+0x3a4>)
 800a05c:	2200      	movs	r2, #0
 800a05e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		return;
 800a062:	e6e7      	b.n	8009e34 <process_rx+0x94>
	switch (rx.type) {
 800a064:	4b37      	ldr	r3, [pc, #220]	; (800a144 <process_rx+0x3a4>)
 800a066:	f893 1023 	ldrb.w	r1, [r3, #35]	; 0x23
 800a06a:	2902      	cmp	r1, #2
 800a06c:	d006      	beq.n	800a07c <process_rx+0x2dc>
 800a06e:	2904      	cmp	r1, #4
 800a070:	d10a      	bne.n	800a088 <process_rx+0x2e8>
		rx.remaining = sizeof(rx.evt);
 800a072:	2202      	movs	r2, #2
 800a074:	839a      	strh	r2, [r3, #28]
		rx.hdr_len = rx.remaining;
 800a076:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		break;
 800a07a:	e6db      	b.n	8009e34 <process_rx+0x94>
		rx.remaining = sizeof(rx.acl);
 800a07c:	4b31      	ldr	r3, [pc, #196]	; (800a144 <process_rx+0x3a4>)
 800a07e:	2204      	movs	r2, #4
 800a080:	839a      	strh	r2, [r3, #28]
		rx.hdr_len = rx.remaining;
 800a082:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		break;
 800a086:	e6d5      	b.n	8009e34 <process_rx+0x94>
		BT_ERR("Unknown H:4 type 0x%02x", rx.type);
 800a088:	f04f 0200 	mov.w	r2, #0
 800a08c:	2301      	movs	r3, #1
 800a08e:	f363 0202 	bfi	r2, r3, #0, #3
 800a092:	f36f 02c5 	bfc	r2, #3, #3
 800a096:	4b28      	ldr	r3, [pc, #160]	; (800a138 <process_rx+0x398>)
 800a098:	4828      	ldr	r0, [pc, #160]	; (800a13c <process_rx+0x39c>)
 800a09a:	1a1b      	subs	r3, r3, r0
 800a09c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800a0a0:	f363 128f 	bfi	r2, r3, #6, #10
 800a0a4:	4828      	ldr	r0, [pc, #160]	; (800a148 <process_rx+0x3a8>)
 800a0a6:	f7fc fa4b 	bl	8006540 <log_1>
		rx.type = H4_NONE;
 800a0aa:	4b26      	ldr	r3, [pc, #152]	; (800a144 <process_rx+0x3a4>)
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 800a0b2:	e6bf      	b.n	8009e34 <process_rx+0x94>
	return 0;
 800a0b4:	2000      	movs	r0, #0
 800a0b6:	e759      	b.n	8009f6c <process_rx+0x1cc>
	if (rx.hdr_len == sizeof(*hdr) && rx.remaining < sizeof(*hdr)) {
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	f63f af61 	bhi.w	8009f80 <process_rx+0x1e0>
		switch (rx.evt.evt) {
 800a0be:	4921      	ldr	r1, [pc, #132]	; (800a144 <process_rx+0x3a4>)
 800a0c0:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
 800a0c4:	293e      	cmp	r1, #62	; 0x3e
 800a0c6:	f47f af5b 	bne.w	8009f80 <process_rx+0x1e0>
			rx.remaining++;
 800a0ca:	491e      	ldr	r1, [pc, #120]	; (800a144 <process_rx+0x3a4>)
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	838b      	strh	r3, [r1, #28]
			rx.hdr_len++;
 800a0d0:	3201      	adds	r2, #1
 800a0d2:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
			break;
 800a0d6:	e753      	b.n	8009f80 <process_rx+0x1e0>
			rx.discardable = true;
 800a0d8:	4b1a      	ldr	r3, [pc, #104]	; (800a144 <process_rx+0x3a4>)
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800a0e0:	e759      	b.n	8009f96 <process_rx+0x1f6>
	int to_read = sizeof(*hdr) - rx.remaining;
 800a0e2:	4b18      	ldr	r3, [pc, #96]	; (800a144 <process_rx+0x3a4>)
 800a0e4:	8b9a      	ldrh	r2, [r3, #28]
 800a0e6:	f1c2 0104 	rsb	r1, r2, #4
	rx.remaining -= uart_fifo_read(h4_dev, (uint8_t *)hdr + to_read,
 800a0ea:	4811      	ldr	r0, [pc, #68]	; (800a130 <process_rx+0x390>)
 800a0ec:	6800      	ldr	r0, [r0, #0]
 800a0ee:	3324      	adds	r3, #36	; 0x24
 800a0f0:	4419      	add	r1, r3
	const struct uart_driver_api *api =
 800a0f2:	6883      	ldr	r3, [r0, #8]
	if (api->fifo_read) {
 800a0f4:	699b      	ldr	r3, [r3, #24]
 800a0f6:	b17b      	cbz	r3, 800a118 <process_rx+0x378>
		return api->fifo_read(dev, rx_data, size);
 800a0f8:	4798      	blx	r3
 800a0fa:	4a12      	ldr	r2, [pc, #72]	; (800a144 <process_rx+0x3a4>)
 800a0fc:	8b93      	ldrh	r3, [r2, #28]
 800a0fe:	1a1b      	subs	r3, r3, r0
 800a100:	b29b      	uxth	r3, r3
 800a102:	8393      	strh	r3, [r2, #28]
	if (!rx.remaining) {
 800a104:	2b00      	cmp	r3, #0
 800a106:	f47f af51 	bne.w	8009fac <process_rx+0x20c>
		rx.remaining = sys_le16_to_cpu(hdr->len);
 800a10a:	4613      	mov	r3, r2
 800a10c:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800a10e:	839a      	strh	r2, [r3, #28]
		rx.have_hdr = true;
 800a110:	2201      	movs	r2, #1
 800a112:	f883 2020 	strb.w	r2, [r3, #32]
}
 800a116:	e749      	b.n	8009fac <process_rx+0x20c>
	return 0;
 800a118:	2000      	movs	r0, #0
 800a11a:	e7ee      	b.n	800a0fa <process_rx+0x35a>
			copy_hdr(rx.buf);
 800a11c:	4909      	ldr	r1, [pc, #36]	; (800a144 <process_rx+0x3a4>)
 800a11e:	6808      	ldr	r0, [r1, #0]
	net_buf_add_mem(buf, rx.hdr, rx.hdr_len);
 800a120:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
 800a124:	3124      	adds	r1, #36	; 0x24
 800a126:	3008      	adds	r0, #8
 800a128:	f016 f9ae 	bl	8020488 <net_buf_simple_add_mem>
}
 800a12c:	e682      	b.n	8009e34 <process_rx+0x94>
 800a12e:	bf00      	nop
 800a130:	20004054 	.word	0x20004054
 800a134:	20000ae3 	.word	0x20000ae3
 800a138:	08022bb8 	.word	0x08022bb8
 800a13c:	08022b90 	.word	0x08022b90
 800a140:	08025b44 	.word	0x08025b44
 800a144:	20000ac0 	.word	0x20000ac0
 800a148:	08025b64 	.word	0x08025b64

0800a14c <bt_uart_isr>:
{
 800a14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	while (uart_irq_update(h4_dev) && uart_irq_is_pending(h4_dev)) {
 800a14e:	4b60      	ldr	r3, [pc, #384]	; (800a2d0 <bt_uart_isr+0x184>)
 800a150:	6818      	ldr	r0, [r3, #0]
__syscall int uart_irq_update(const struct device *dev);

static inline int z_impl_uart_irq_update(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
 800a152:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update) {
 800a154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a156:	2b00      	cmp	r3, #0
 800a158:	f000 80b8 	beq.w	800a2cc <bt_uart_isr+0x180>
		return api->irq_update(dev);
 800a15c:	4798      	blx	r3
 800a15e:	2800      	cmp	r0, #0
 800a160:	f000 80b4 	beq.w	800a2cc <bt_uart_isr+0x180>
 800a164:	4b5a      	ldr	r3, [pc, #360]	; (800a2d0 <bt_uart_isr+0x184>)
 800a166:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 800a168:	6883      	ldr	r3, [r0, #8]
	if (api->irq_is_pending)	{
 800a16a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	f000 80ad 	beq.w	800a2cc <bt_uart_isr+0x180>
		return api->irq_is_pending(dev);
 800a172:	4798      	blx	r3
 800a174:	2800      	cmp	r0, #0
 800a176:	f000 80a9 	beq.w	800a2cc <bt_uart_isr+0x180>
		if (uart_irq_tx_ready(h4_dev)) {
 800a17a:	4b55      	ldr	r3, [pc, #340]	; (800a2d0 <bt_uart_isr+0x184>)
 800a17c:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 800a17e:	6883      	ldr	r3, [r0, #8]
	if (api->irq_tx_ready) {
 800a180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a182:	b10b      	cbz	r3, 800a188 <bt_uart_isr+0x3c>
		return api->irq_tx_ready(dev);
 800a184:	4798      	blx	r3
 800a186:	b958      	cbnz	r0, 800a1a0 <bt_uart_isr+0x54>
		if (uart_irq_rx_ready(h4_dev)) {
 800a188:	4b51      	ldr	r3, [pc, #324]	; (800a2d0 <bt_uart_isr+0x184>)
 800a18a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 800a18c:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_ready) {
 800a18e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a190:	2b00      	cmp	r3, #0
 800a192:	d0dc      	beq.n	800a14e <bt_uart_isr+0x2>
		return api->irq_rx_ready(dev);
 800a194:	4798      	blx	r3
 800a196:	2800      	cmp	r0, #0
 800a198:	d0d9      	beq.n	800a14e <bt_uart_isr+0x2>
			process_rx();
 800a19a:	f7ff fe01 	bl	8009da0 <process_rx>
 800a19e:	e7d6      	b.n	800a14e <bt_uart_isr+0x2>
	if (!tx.buf) {
 800a1a0:	4b4c      	ldr	r3, [pc, #304]	; (800a2d4 <bt_uart_isr+0x188>)
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	b35b      	cbz	r3, 800a1fe <bt_uart_isr+0xb2>
	if (!tx.type) {
 800a1a6:	4b4b      	ldr	r3, [pc, #300]	; (800a2d4 <bt_uart_isr+0x188>)
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d15e      	bne.n	800a26c <bt_uart_isr+0x120>
		switch (bt_buf_get_type(tx.buf)) {
 800a1ae:	4b49      	ldr	r3, [pc, #292]	; (800a2d4 <bt_uart_isr+0x188>)
 800a1b0:	685b      	ldr	r3, [r3, #4]
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
 800a1b2:	7d1b      	ldrb	r3, [r3, #20]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d044      	beq.n	800a242 <bt_uart_isr+0xf6>
 800a1b8:	2b02      	cmp	r3, #2
 800a1ba:	d146      	bne.n	800a24a <bt_uart_isr+0xfe>
			tx.type = H4_ACL;
 800a1bc:	4b45      	ldr	r3, [pc, #276]	; (800a2d4 <bt_uart_isr+0x188>)
 800a1be:	2202      	movs	r2, #2
 800a1c0:	701a      	strb	r2, [r3, #0]
		bytes = uart_fifo_fill(h4_dev, &tx.type, 1);
 800a1c2:	4b43      	ldr	r3, [pc, #268]	; (800a2d0 <bt_uart_isr+0x184>)
 800a1c4:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 800a1c6:	6883      	ldr	r3, [r0, #8]
	if (api->fifo_fill) {
 800a1c8:	695b      	ldr	r3, [r3, #20]
 800a1ca:	b123      	cbz	r3, 800a1d6 <bt_uart_isr+0x8a>
		return api->fifo_fill(dev, tx_data, size);
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	4941      	ldr	r1, [pc, #260]	; (800a2d4 <bt_uart_isr+0x188>)
 800a1d0:	4798      	blx	r3
		if (bytes != 1) {
 800a1d2:	2801      	cmp	r0, #1
 800a1d4:	d04a      	beq.n	800a26c <bt_uart_isr+0x120>
			BT_WARN("Unable to send H:4 type");
 800a1d6:	2302      	movs	r3, #2
 800a1d8:	f363 0402 	bfi	r4, r3, #0, #3
 800a1dc:	f36f 04c5 	bfc	r4, #3, #3
 800a1e0:	4b3d      	ldr	r3, [pc, #244]	; (800a2d8 <bt_uart_isr+0x18c>)
 800a1e2:	4a3e      	ldr	r2, [pc, #248]	; (800a2dc <bt_uart_isr+0x190>)
 800a1e4:	1a9b      	subs	r3, r3, r2
 800a1e6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800a1ea:	f363 148f 	bfi	r4, r3, #6, #10
 800a1ee:	4621      	mov	r1, r4
 800a1f0:	483b      	ldr	r0, [pc, #236]	; (800a2e0 <bt_uart_isr+0x194>)
 800a1f2:	f7fc fb15 	bl	8006820 <log_0>
			tx.type = H4_NONE;
 800a1f6:	4b37      	ldr	r3, [pc, #220]	; (800a2d4 <bt_uart_isr+0x188>)
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	701a      	strb	r2, [r3, #0]
			return;
 800a1fc:	e7c4      	b.n	800a188 <bt_uart_isr+0x3c>
		tx.buf = net_buf_get(&tx.fifo, K_NO_WAIT);
 800a1fe:	4f35      	ldr	r7, [pc, #212]	; (800a2d4 <bt_uart_isr+0x188>)
 800a200:	2200      	movs	r2, #0
 800a202:	2300      	movs	r3, #0
 800a204:	f107 0008 	add.w	r0, r7, #8
 800a208:	f016 f8bc 	bl	8020384 <net_buf_get>
 800a20c:	6078      	str	r0, [r7, #4]
		if (!tx.buf) {
 800a20e:	2800      	cmp	r0, #0
 800a210:	d1c9      	bne.n	800a1a6 <bt_uart_isr+0x5a>
			BT_ERR("TX interrupt but no pending buffer!");
 800a212:	2301      	movs	r3, #1
 800a214:	f363 0602 	bfi	r6, r3, #0, #3
 800a218:	f36f 06c5 	bfc	r6, #3, #3
 800a21c:	4b2e      	ldr	r3, [pc, #184]	; (800a2d8 <bt_uart_isr+0x18c>)
 800a21e:	4a2f      	ldr	r2, [pc, #188]	; (800a2dc <bt_uart_isr+0x190>)
 800a220:	1a9b      	subs	r3, r3, r2
 800a222:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800a226:	f363 168f 	bfi	r6, r3, #6, #10
 800a22a:	4631      	mov	r1, r6
 800a22c:	482d      	ldr	r0, [pc, #180]	; (800a2e4 <bt_uart_isr+0x198>)
 800a22e:	f7fc faf7 	bl	8006820 <log_0>
			uart_irq_tx_disable(h4_dev);
 800a232:	4b27      	ldr	r3, [pc, #156]	; (800a2d0 <bt_uart_isr+0x184>)
 800a234:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 800a236:	6883      	ldr	r3, [r0, #8]
	if (api->irq_tx_disable) {
 800a238:	6a1b      	ldr	r3, [r3, #32]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d0a4      	beq.n	800a188 <bt_uart_isr+0x3c>
		api->irq_tx_disable(dev);
 800a23e:	4798      	blx	r3
			return;
 800a240:	e7a2      	b.n	800a188 <bt_uart_isr+0x3c>
			tx.type = H4_CMD;
 800a242:	4b24      	ldr	r3, [pc, #144]	; (800a2d4 <bt_uart_isr+0x188>)
 800a244:	2201      	movs	r2, #1
 800a246:	701a      	strb	r2, [r3, #0]
			break;
 800a248:	e7bb      	b.n	800a1c2 <bt_uart_isr+0x76>
			BT_ERR("Unknown buffer type");
 800a24a:	2301      	movs	r3, #1
 800a24c:	f363 0502 	bfi	r5, r3, #0, #3
 800a250:	f36f 05c5 	bfc	r5, #3, #3
 800a254:	4b20      	ldr	r3, [pc, #128]	; (800a2d8 <bt_uart_isr+0x18c>)
 800a256:	4a21      	ldr	r2, [pc, #132]	; (800a2dc <bt_uart_isr+0x190>)
 800a258:	1a9b      	subs	r3, r3, r2
 800a25a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800a25e:	f363 158f 	bfi	r5, r3, #6, #10
 800a262:	4629      	mov	r1, r5
 800a264:	4820      	ldr	r0, [pc, #128]	; (800a2e8 <bt_uart_isr+0x19c>)
 800a266:	f7fc fadb 	bl	8006820 <log_0>
			goto done;
 800a26a:	e014      	b.n	800a296 <bt_uart_isr+0x14a>
	bytes = uart_fifo_fill(h4_dev, tx.buf->data, tx.buf->len);
 800a26c:	4b18      	ldr	r3, [pc, #96]	; (800a2d0 <bt_uart_isr+0x184>)
 800a26e:	6818      	ldr	r0, [r3, #0]
 800a270:	4b18      	ldr	r3, [pc, #96]	; (800a2d4 <bt_uart_isr+0x188>)
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	6899      	ldr	r1, [r3, #8]
 800a276:	899a      	ldrh	r2, [r3, #12]
	const struct uart_driver_api *api =
 800a278:	6883      	ldr	r3, [r0, #8]
	if (api->fifo_fill) {
 800a27a:	695b      	ldr	r3, [r3, #20]
 800a27c:	b323      	cbz	r3, 800a2c8 <bt_uart_isr+0x17c>
		return api->fifo_fill(dev, tx_data, size);
 800a27e:	4798      	blx	r3
 800a280:	4601      	mov	r1, r0
	net_buf_pull(tx.buf, bytes);
 800a282:	4f14      	ldr	r7, [pc, #80]	; (800a2d4 <bt_uart_isr+0x188>)
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	3008      	adds	r0, #8
 800a288:	f016 f921 	bl	80204ce <net_buf_simple_pull>
	if (tx.buf->len) {
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	899b      	ldrh	r3, [r3, #12]
 800a290:	2b00      	cmp	r3, #0
 800a292:	f47f af79 	bne.w	800a188 <bt_uart_isr+0x3c>
	tx.type = H4_NONE;
 800a296:	4f0f      	ldr	r7, [pc, #60]	; (800a2d4 <bt_uart_isr+0x188>)
 800a298:	2300      	movs	r3, #0
 800a29a:	703b      	strb	r3, [r7, #0]
	net_buf_unref(tx.buf);
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f016 f8a3 	bl	80203e8 <net_buf_unref>
	tx.buf = net_buf_get(&tx.fifo, K_NO_WAIT);
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	f107 0008 	add.w	r0, r7, #8
 800a2aa:	f016 f86b 	bl	8020384 <net_buf_get>
 800a2ae:	6078      	str	r0, [r7, #4]
	if (!tx.buf) {
 800a2b0:	2800      	cmp	r0, #0
 800a2b2:	f47f af69 	bne.w	800a188 <bt_uart_isr+0x3c>
		uart_irq_tx_disable(h4_dev);
 800a2b6:	4b06      	ldr	r3, [pc, #24]	; (800a2d0 <bt_uart_isr+0x184>)
 800a2b8:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 800a2ba:	6883      	ldr	r3, [r0, #8]
	if (api->irq_tx_disable) {
 800a2bc:	6a1b      	ldr	r3, [r3, #32]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	f43f af62 	beq.w	800a188 <bt_uart_isr+0x3c>
		api->irq_tx_disable(dev);
 800a2c4:	4798      	blx	r3
 800a2c6:	e75f      	b.n	800a188 <bt_uart_isr+0x3c>
	return 0;
 800a2c8:	2100      	movs	r1, #0
 800a2ca:	e7da      	b.n	800a282 <bt_uart_isr+0x136>
}
 800a2cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	20004054 	.word	0x20004054
 800a2d4:	20000ae8 	.word	0x20000ae8
 800a2d8:	08022bb8 	.word	0x08022bb8
 800a2dc:	08022b90 	.word	0x08022b90
 800a2e0:	08025bb4 	.word	0x08025bb4
 800a2e4:	08025b7c 	.word	0x08025b7c
 800a2e8:	08025ba0 	.word	0x08025ba0

0800a2ec <bt_uart_init>:
	.open		= h4_open,
	.send		= h4_send,
};

static int bt_uart_init(const struct device *unused)
{
 800a2ec:	b508      	push	{r3, lr}
 800a2ee:	4807      	ldr	r0, [pc, #28]	; (800a30c <bt_uart_init+0x20>)
 800a2f0:	f00d fcae 	bl	8017c50 <z_impl_device_get_binding>
	ARG_UNUSED(unused);

	h4_dev = device_get_binding(CONFIG_BT_UART_ON_DEV_NAME);
 800a2f4:	4b06      	ldr	r3, [pc, #24]	; (800a310 <bt_uart_init+0x24>)
 800a2f6:	6018      	str	r0, [r3, #0]
	if (!h4_dev) {
 800a2f8:	b120      	cbz	r0, 800a304 <bt_uart_init+0x18>
		return -EINVAL;
	}

	bt_hci_driver_register(&drv);
 800a2fa:	4806      	ldr	r0, [pc, #24]	; (800a314 <bt_uart_init+0x28>)
 800a2fc:	f004 fdfe 	bl	800eefc <bt_hci_driver_register>

	return 0;
 800a300:	2000      	movs	r0, #0
}
 800a302:	bd08      	pop	{r3, pc}
		return -EINVAL;
 800a304:	f06f 0015 	mvn.w	r0, #21
 800a308:	e7fb      	b.n	800a302 <bt_uart_init+0x16>
 800a30a:	bf00      	nop
 800a30c:	08024fc0 	.word	0x08024fc0
 800a310:	20004054 	.word	0x20004054
 800a314:	08025bdc 	.word	0x08025bdc

0800a318 <bt_hci_transport_setup>:
{
 800a318:	b508      	push	{r3, lr}
	h4_discard(h4_dev, 32);
 800a31a:	2120      	movs	r1, #32
 800a31c:	4b02      	ldr	r3, [pc, #8]	; (800a328 <bt_hci_transport_setup+0x10>)
 800a31e:	6818      	ldr	r0, [r3, #0]
 800a320:	f011 fd79 	bl	801be16 <h4_discard>
}
 800a324:	2000      	movs	r0, #0
 800a326:	bd08      	pop	{r3, pc}
 800a328:	20004054 	.word	0x20004054

0800a32c <h4_open>:
{
 800a32c:	b510      	push	{r4, lr}
 800a32e:	b088      	sub	sp, #32
	uart_irq_rx_disable(h4_dev);
 800a330:	4b19      	ldr	r3, [pc, #100]	; (800a398 <h4_open+0x6c>)
 800a332:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 800a334:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_disable) {
 800a336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a338:	b103      	cbz	r3, 800a33c <h4_open+0x10>
		api->irq_rx_disable(dev);
 800a33a:	4798      	blx	r3
	uart_irq_tx_disable(h4_dev);
 800a33c:	4b16      	ldr	r3, [pc, #88]	; (800a398 <h4_open+0x6c>)
 800a33e:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 800a340:	6883      	ldr	r3, [r0, #8]
	if (api->irq_tx_disable) {
 800a342:	6a1b      	ldr	r3, [r3, #32]
 800a344:	b103      	cbz	r3, 800a348 <h4_open+0x1c>
		api->irq_tx_disable(dev);
 800a346:	4798      	blx	r3
	ret = bt_hci_transport_setup(h4_dev);
 800a348:	4b13      	ldr	r3, [pc, #76]	; (800a398 <h4_open+0x6c>)
 800a34a:	6818      	ldr	r0, [r3, #0]
 800a34c:	f7ff ffe4 	bl	800a318 <bt_hci_transport_setup>
	if (ret < 0) {
 800a350:	2800      	cmp	r0, #0
 800a352:	db1e      	blt.n	800a392 <h4_open+0x66>
	uart_irq_callback_set(h4_dev, bt_uart_isr);
 800a354:	4b10      	ldr	r3, [pc, #64]	; (800a398 <h4_open+0x6c>)
 800a356:	6818      	ldr	r0, [r3, #0]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
 800a358:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
 800a35a:	b123      	cbz	r3, 800a366 <h4_open+0x3a>
 800a35c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a35e:	b113      	cbz	r3, 800a366 <h4_open+0x3a>
		api->irq_callback_set(dev, cb, user_data);
 800a360:	2200      	movs	r2, #0
 800a362:	490e      	ldr	r1, [pc, #56]	; (800a39c <h4_open+0x70>)
 800a364:	4798      	blx	r3
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 800a366:	2200      	movs	r2, #0
 800a368:	2300      	movs	r3, #0
 800a36a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a36e:	2400      	movs	r4, #0
 800a370:	9404      	str	r4, [sp, #16]
 800a372:	f06f 0307 	mvn.w	r3, #7
 800a376:	9303      	str	r3, [sp, #12]
 800a378:	9402      	str	r4, [sp, #8]
 800a37a:	9401      	str	r4, [sp, #4]
 800a37c:	9400      	str	r4, [sp, #0]
 800a37e:	4b08      	ldr	r3, [pc, #32]	; (800a3a0 <h4_open+0x74>)
 800a380:	f640 0298 	movw	r2, #2200	; 0x898
 800a384:	4907      	ldr	r1, [pc, #28]	; (800a3a4 <h4_open+0x78>)
 800a386:	4808      	ldr	r0, [pc, #32]	; (800a3a8 <h4_open+0x7c>)
 800a388:	f017 ff63 	bl	8022252 <z_impl_k_thread_create>
	return 0;
 800a38c:	4620      	mov	r0, r4
}
 800a38e:	b008      	add	sp, #32
 800a390:	bd10      	pop	{r4, pc}
		return -EIO;
 800a392:	f06f 0004 	mvn.w	r0, #4
 800a396:	e7fa      	b.n	800a38e <h4_open+0x62>
 800a398:	20004054 	.word	0x20004054
 800a39c:	0800a14d 	.word	0x0800a14d
 800a3a0:	08009cc9 	.word	0x08009cc9
 800a3a4:	20006710 	.word	0x20006710
 800a3a8:	20001b18 	.word	0x20001b18

0800a3ac <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 800a3ac:	4b0b      	ldr	r3, [pc, #44]	; (800a3dc <elapsed+0x30>)
 800a3ae:	6899      	ldr	r1, [r3, #8]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 800a3b0:	681a      	ldr	r2, [r3, #0]
	uint32_t val2 = SysTick->VAL;	/* C */
 800a3b2:	6898      	ldr	r0, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 800a3b4:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800a3b8:	d101      	bne.n	800a3be <elapsed+0x12>
	    || (val1 < val2)) {
 800a3ba:	4281      	cmp	r1, r0
 800a3bc:	d207      	bcs.n	800a3ce <elapsed+0x22>
		overflow_cyc += last_load;
 800a3be:	4b08      	ldr	r3, [pc, #32]	; (800a3e0 <elapsed+0x34>)
 800a3c0:	681a      	ldr	r2, [r3, #0]
 800a3c2:	4908      	ldr	r1, [pc, #32]	; (800a3e4 <elapsed+0x38>)
 800a3c4:	6809      	ldr	r1, [r1, #0]
 800a3c6:	440a      	add	r2, r1
 800a3c8:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 800a3ca:	4b04      	ldr	r3, [pc, #16]	; (800a3dc <elapsed+0x30>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
	}

	return (last_load - val2) + overflow_cyc;
 800a3ce:	4b05      	ldr	r3, [pc, #20]	; (800a3e4 <elapsed+0x38>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	1a1b      	subs	r3, r3, r0
 800a3d4:	4a02      	ldr	r2, [pc, #8]	; (800a3e0 <elapsed+0x34>)
 800a3d6:	6810      	ldr	r0, [r2, #0]
}
 800a3d8:	4418      	add	r0, r3
 800a3da:	4770      	bx	lr
 800a3dc:	e000e010 	.word	0xe000e010
 800a3e0:	20004064 	.word	0x20004064
 800a3e4:	20004060 	.word	0x20004060

0800a3e8 <z_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void z_clock_isr(void *arg)
{
 800a3e8:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	uint32_t dticks;

	/* Update overflow_cyc and clear COUNTFLAG by invoking elapsed() */
	elapsed();
 800a3ea:	f7ff ffdf 	bl	800a3ac <elapsed>

	/* Increment the amount of HW cycles elapsed (complete counter
	 * cycles) and announce the progress to the kernel.
	 */
	cycle_count += overflow_cyc;
 800a3ee:	4b0c      	ldr	r3, [pc, #48]	; (800a420 <z_clock_isr+0x38>)
 800a3f0:	6818      	ldr	r0, [r3, #0]
 800a3f2:	4a0c      	ldr	r2, [pc, #48]	; (800a424 <z_clock_isr+0x3c>)
 800a3f4:	6811      	ldr	r1, [r2, #0]
 800a3f6:	4408      	add	r0, r1
 800a3f8:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	601a      	str	r2, [r3, #0]
		 * because the value has been updated before LOAD re-program.
		 *
		 * We can assess if this is the case by inspecting COUNTFLAG.
		 */

		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 800a3fe:	4a0a      	ldr	r2, [pc, #40]	; (800a428 <z_clock_isr+0x40>)
 800a400:	6811      	ldr	r1, [r2, #0]
 800a402:	1a40      	subs	r0, r0, r1
 800a404:	4b09      	ldr	r3, [pc, #36]	; (800a42c <z_clock_isr+0x44>)
 800a406:	fba3 3000 	umull	r3, r0, r3, r0
 800a40a:	0b00      	lsrs	r0, r0, #12
		announced_cycles += dticks * CYC_PER_TICK;
 800a40c:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 800a410:	fb03 1300 	mla	r3, r3, r0, r1
 800a414:	6013      	str	r3, [r2, #0]
		z_clock_announce(dticks);
 800a416:	f00e fe5b 	bl	80190d0 <z_clock_announce>
	} else {
		z_clock_announce(1);
	}
	z_arm_int_exit();
 800a41a:	f001 fadd 	bl	800b9d8 <z_arm_exc_exit>
}
 800a41e:	bd08      	pop	{r3, pc}
 800a420:	20004064 	.word	0x20004064
 800a424:	2000405c 	.word	0x2000405c
 800a428:	20004058 	.word	0x20004058
 800a42c:	91a2b3c5 	.word	0x91a2b3c5

0800a430 <z_clock_driver_init>:
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a430:	4b09      	ldr	r3, [pc, #36]	; (800a458 <z_clock_driver_init+0x28>)
 800a432:	2210      	movs	r2, #16
 800a434:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
int z_clock_driver_init(const struct device *device)
{
	ARG_UNUSED(device);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 800a438:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800a43c:	4b07      	ldr	r3, [pc, #28]	; (800a45c <z_clock_driver_init+0x2c>)
 800a43e:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 800a440:	2000      	movs	r0, #0
 800a442:	4b07      	ldr	r3, [pc, #28]	; (800a460 <z_clock_driver_init+0x30>)
 800a444:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 800a446:	4b07      	ldr	r3, [pc, #28]	; (800a464 <z_clock_driver_init+0x34>)
 800a448:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 800a44a:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	f042 0207 	orr.w	r2, r2, #7
 800a452:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 800a454:	4770      	bx	lr
 800a456:	bf00      	nop
 800a458:	e000ed00 	.word	0xe000ed00
 800a45c:	20004060 	.word	0x20004060
 800a460:	20004064 	.word	0x20004064
 800a464:	e000e010 	.word	0xe000e010

0800a468 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
 800a468:	b538      	push	{r3, r4, r5, lr}
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_IDLE) && idle
 800a46a:	b111      	cbz	r1, 800a472 <z_clock_set_timeout+0xa>
	    && ticks == K_TICKS_FOREVER) {
 800a46c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a470:	d03f      	beq.n	800a4f2 <z_clock_set_timeout+0x8a>
	}

#if defined(CONFIG_TICKLESS_KERNEL)
	uint32_t delay;

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 800a472:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a476:	d046      	beq.n	800a506 <z_clock_set_timeout+0x9e>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
 800a478:	1e44      	subs	r4, r0, #1
 800a47a:	f640 1318 	movw	r3, #2328	; 0x918
 800a47e:	429c      	cmp	r4, r3
 800a480:	dc01      	bgt.n	800a486 <z_clock_set_timeout+0x1e>
 800a482:	2c00      	cmp	r4, #0
 800a484:	dd42      	ble.n	800a50c <z_clock_set_timeout+0xa4>
 800a486:	f640 1318 	movw	r3, #2328	; 0x918
 800a48a:	429c      	cmp	r4, r3
 800a48c:	dd01      	ble.n	800a492 <z_clock_set_timeout+0x2a>
 800a48e:	f640 1419 	movw	r4, #2329	; 0x919
 800a492:	f04f 0310 	mov.w	r3, #16
 800a496:	f3ef 8511 	mrs	r5, BASEPRI
 800a49a:	f383 8811 	msr	BASEPRI, r3
 800a49e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	uint32_t pending = elapsed();
 800a4a2:	f7ff ff83 	bl	800a3ac <elapsed>

	cycle_count += pending;
 800a4a6:	4b25      	ldr	r3, [pc, #148]	; (800a53c <z_clock_set_timeout+0xd4>)
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	4410      	add	r0, r2
 800a4ac:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
 800a4ae:	4b24      	ldr	r3, [pc, #144]	; (800a540 <z_clock_set_timeout+0xd8>)
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	601a      	str	r2, [r3, #0]

	uint32_t unannounced = cycle_count - announced_cycles;
 800a4b4:	4b23      	ldr	r3, [pc, #140]	; (800a544 <z_clock_set_timeout+0xdc>)
 800a4b6:	681b      	ldr	r3, [r3, #0]

	if ((int32_t)unannounced < 0) {
 800a4b8:	1ac1      	subs	r1, r0, r3
 800a4ba:	d429      	bmi.n	800a510 <z_clock_set_timeout+0xa8>
		 * delay is at least the minimum delay possible.
		 */
		last_load = MIN_DELAY;
	} else {
		/* Desired delay in the future */
		delay = ticks * CYC_PER_TICK;
 800a4bc:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20

		/* Round delay up to next tick boundary */
		delay += unannounced;
 800a4c0:	fb02 1404 	mla	r4, r2, r4, r1
		delay =
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 800a4c4:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 800a4c8:	341f      	adds	r4, #31
 800a4ca:	491f      	ldr	r1, [pc, #124]	; (800a548 <z_clock_set_timeout+0xe0>)
 800a4cc:	fba1 1404 	umull	r1, r4, r1, r4
 800a4d0:	0b24      	lsrs	r4, r4, #12
		delay -= unannounced;
 800a4d2:	1a18      	subs	r0, r3, r0
 800a4d4:	fb02 0404 	mla	r4, r2, r4, r0
		delay = MAX(delay, MIN_DELAY);
 800a4d8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800a4dc:	d91d      	bls.n	800a51a <z_clock_set_timeout+0xb2>
		if (delay > MAX_CYCLES) {
 800a4de:	4b1b      	ldr	r3, [pc, #108]	; (800a54c <z_clock_set_timeout+0xe4>)
 800a4e0:	429c      	cmp	r4, r3
 800a4e2:	d91c      	bls.n	800a51e <z_clock_set_timeout+0xb6>
			last_load = MAX_CYCLES;
 800a4e4:	4b1a      	ldr	r3, [pc, #104]	; (800a550 <z_clock_set_timeout+0xe8>)
 800a4e6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a4ea:	f502 4243 	add.w	r2, r2, #49920	; 0xc300
 800a4ee:	601a      	str	r2, [r3, #0]
 800a4f0:	e017      	b.n	800a522 <z_clock_set_timeout+0xba>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 800a4f2:	4a18      	ldr	r2, [pc, #96]	; (800a554 <z_clock_set_timeout+0xec>)
 800a4f4:	6813      	ldr	r3, [r2, #0]
 800a4f6:	f023 0301 	bic.w	r3, r3, #1
 800a4fa:	6013      	str	r3, [r2, #0]
		last_load = TIMER_STOPPED;
 800a4fc:	4b14      	ldr	r3, [pc, #80]	; (800a550 <z_clock_set_timeout+0xe8>)
 800a4fe:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800a502:	601a      	str	r2, [r3, #0]
		return;
 800a504:	e018      	b.n	800a538 <z_clock_set_timeout+0xd0>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 800a506:	f640 1019 	movw	r0, #2329	; 0x919
 800a50a:	e7b5      	b.n	800a478 <z_clock_set_timeout+0x10>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
 800a50c:	2400      	movs	r4, #0
 800a50e:	e7c0      	b.n	800a492 <z_clock_set_timeout+0x2a>
		last_load = MIN_DELAY;
 800a510:	4b0f      	ldr	r3, [pc, #60]	; (800a550 <z_clock_set_timeout+0xe8>)
 800a512:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a516:	601a      	str	r2, [r3, #0]
 800a518:	e003      	b.n	800a522 <z_clock_set_timeout+0xba>
		delay = MAX(delay, MIN_DELAY);
 800a51a:	f44f 6480 	mov.w	r4, #1024	; 0x400
		} else {
			last_load = delay;
 800a51e:	4b0c      	ldr	r3, [pc, #48]	; (800a550 <z_clock_set_timeout+0xe8>)
 800a520:	601c      	str	r4, [r3, #0]
		}
	}
	SysTick->LOAD = last_load - 1;
 800a522:	4b0b      	ldr	r3, [pc, #44]	; (800a550 <z_clock_set_timeout+0xe8>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	3b01      	subs	r3, #1
 800a528:	4a0a      	ldr	r2, [pc, #40]	; (800a554 <z_clock_set_timeout+0xec>)
 800a52a:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 800a52c:	2300      	movs	r3, #0
 800a52e:	6093      	str	r3, [r2, #8]
	__asm__ volatile(
 800a530:	f385 8811 	msr	BASEPRI, r5
 800a534:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
#endif
}
 800a538:	bd38      	pop	{r3, r4, r5, pc}
 800a53a:	bf00      	nop
 800a53c:	2000405c 	.word	0x2000405c
 800a540:	20004064 	.word	0x20004064
 800a544:	20004058 	.word	0x20004058
 800a548:	91a2b3c5 	.word	0x91a2b3c5
 800a54c:	00ffdf20 	.word	0x00ffdf20
 800a550:	20004060 	.word	0x20004060
 800a554:	e000e010 	.word	0xe000e010

0800a558 <z_clock_elapsed>:

uint32_t z_clock_elapsed(void)
{
 800a558:	b510      	push	{r4, lr}
	__asm__ volatile(
 800a55a:	f04f 0310 	mov.w	r3, #16
 800a55e:	f3ef 8411 	mrs	r4, BASEPRI
 800a562:	f383 8811 	msr	BASEPRI, r3
 800a566:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 800a56a:	f7ff ff1f 	bl	800a3ac <elapsed>
 800a56e:	4b07      	ldr	r3, [pc, #28]	; (800a58c <z_clock_elapsed+0x34>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4418      	add	r0, r3
 800a574:	4b06      	ldr	r3, [pc, #24]	; (800a590 <z_clock_elapsed+0x38>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	1ac0      	subs	r0, r0, r3
	__asm__ volatile(
 800a57a:	f384 8811 	msr	BASEPRI, r4
 800a57e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
 800a582:	4b04      	ldr	r3, [pc, #16]	; (800a594 <z_clock_elapsed+0x3c>)
 800a584:	fba3 3000 	umull	r3, r0, r3, r0
}
 800a588:	0b00      	lsrs	r0, r0, #12
 800a58a:	bd10      	pop	{r4, pc}
 800a58c:	2000405c 	.word	0x2000405c
 800a590:	20004058 	.word	0x20004058
 800a594:	91a2b3c5 	.word	0x91a2b3c5

0800a598 <sys_clock_disable>:
	}
}

void sys_clock_disable(void)
{
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 800a598:	4a02      	ldr	r2, [pc, #8]	; (800a5a4 <sys_clock_disable+0xc>)
 800a59a:	6813      	ldr	r3, [r2, #0]
 800a59c:	f023 0301 	bic.w	r3, r3, #1
 800a5a0:	6013      	str	r3, [r2, #0]
}
 800a5a2:	4770      	bx	lr
 800a5a4:	e000e010 	.word	0xe000e010

0800a5a8 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
 800a5a8:	b4f0      	push	{r4, r5, r6, r7}
 800a5aa:	b08c      	sub	sp, #48	; 0x30
 800a5ac:	4607      	mov	r7, r0
 800a5ae:	460e      	mov	r6, r1
	const unsigned int rconst[11] = {
 800a5b0:	ac01      	add	r4, sp, #4
 800a5b2:	4d2a      	ldr	r5, [pc, #168]	; (800a65c <tc_aes128_set_encrypt_key+0xb4>)
 800a5b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a5b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a5b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a5ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a5bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a5c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
 800a5c4:	2f00      	cmp	r7, #0
 800a5c6:	d045      	beq.n	800a654 <tc_aes128_set_encrypt_key+0xac>
 800a5c8:	4638      	mov	r0, r7
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
 800a5ca:	2e00      	cmp	r6, #0
 800a5cc:	d044      	beq.n	800a658 <tc_aes128_set_encrypt_key+0xb0>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	e00f      	b.n	800a5f2 <tc_aes128_set_encrypt_key+0x4a>
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
 800a5d2:	f816 4023 	ldrb.w	r4, [r6, r3, lsl #2]
 800a5d6:	eb06 0183 	add.w	r1, r6, r3, lsl #2
 800a5da:	784a      	ldrb	r2, [r1, #1]
 800a5dc:	0412      	lsls	r2, r2, #16
 800a5de:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
 800a5e2:	788c      	ldrb	r4, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
 800a5e4:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
 800a5e8:	78c9      	ldrb	r1, [r1, #3]
 800a5ea:	430a      	orrs	r2, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
 800a5ec:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < Nk; ++i) {
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	2b03      	cmp	r3, #3
 800a5f4:	d9ed      	bls.n	800a5d2 <tc_aes128_set_encrypt_key+0x2a>
 800a5f6:	e006      	b.n	800a606 <tc_aes128_set_encrypt_key+0x5e>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
 800a5f8:	1f19      	subs	r1, r3, #4
 800a5fa:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800a5fe:	404a      	eors	r2, r1
 800a600:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
 800a604:	3301      	adds	r3, #1
 800a606:	2b2b      	cmp	r3, #43	; 0x2b
 800a608:	d820      	bhi.n	800a64c <tc_aes128_set_encrypt_key+0xa4>
		t = s->words[i-1];
 800a60a:	1e5a      	subs	r2, r3, #1
 800a60c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		if ((i % Nk) == 0) {
 800a610:	f013 0f03 	tst.w	r3, #3
 800a614:	d1f0      	bne.n	800a5f8 <tc_aes128_set_encrypt_key+0x50>
	return (((a) >> 24)|((a) << 8));
 800a616:	ea4f 6232 	mov.w	r2, r2, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
 800a61a:	0e11      	lsrs	r1, r2, #24
 800a61c:	4c10      	ldr	r4, [pc, #64]	; (800a660 <tc_aes128_set_encrypt_key+0xb8>)
 800a61e:	5c65      	ldrb	r5, [r4, r1]
 800a620:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800a624:	5c61      	ldrb	r1, [r4, r1]
 800a626:	0409      	lsls	r1, r1, #16
 800a628:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
 800a62c:	f3c2 2507 	ubfx	r5, r2, #8, #8
 800a630:	5d65      	ldrb	r5, [r4, r5]
 800a632:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 800a636:	b2d2      	uxtb	r2, r2
 800a638:	5ca2      	ldrb	r2, [r4, r2]
 800a63a:	4311      	orrs	r1, r2
 800a63c:	f023 0203 	bic.w	r2, r3, #3
 800a640:	ac0c      	add	r4, sp, #48	; 0x30
 800a642:	4422      	add	r2, r4
 800a644:	f852 2c2c 	ldr.w	r2, [r2, #-44]
 800a648:	404a      	eors	r2, r1
 800a64a:	e7d5      	b.n	800a5f8 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
 800a64c:	2001      	movs	r0, #1
}
 800a64e:	b00c      	add	sp, #48	; 0x30
 800a650:	bcf0      	pop	{r4, r5, r6, r7}
 800a652:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 800a654:	2000      	movs	r0, #0
 800a656:	e7fa      	b.n	800a64e <tc_aes128_set_encrypt_key+0xa6>
		return TC_CRYPTO_FAIL;
 800a658:	2000      	movs	r0, #0
 800a65a:	e7f8      	b.n	800a64e <tc_aes128_set_encrypt_key+0xa6>
 800a65c:	08022cf4 	.word	0x08022cf4
 800a660:	08025bfc 	.word	0x08025bfc

0800a664 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
 800a664:	2800      	cmp	r0, #0
 800a666:	f000 839a 	beq.w	800ad9e <tc_aes_encrypt+0x73a>
{
 800a66a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a66e:	b088      	sub	sp, #32
 800a670:	4616      	mov	r6, r2
 800a672:	4607      	mov	r7, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
 800a674:	2900      	cmp	r1, #0
 800a676:	f000 8394 	beq.w	800ada2 <tc_aes_encrypt+0x73e>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
 800a67a:	2a00      	cmp	r2, #0
 800a67c:	f000 8393 	beq.w	800ada6 <tc_aes_encrypt+0x742>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
 800a680:	2310      	movs	r3, #16
 800a682:	460a      	mov	r2, r1
 800a684:	4619      	mov	r1, r3
 800a686:	eb0d 0003 	add.w	r0, sp, r3
 800a68a:	f011 fbd4 	bl	801be36 <_copy>
	add_round_key(state, s->words);
 800a68e:	4635      	mov	r5, r6
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
 800a690:	6833      	ldr	r3, [r6, #0]
 800a692:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800a696:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
 800a69a:	f88d 2010 	strb.w	r2, [sp, #16]
 800a69e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800a6a2:	f89d 1011 	ldrb.w	r1, [sp, #17]
 800a6a6:	404a      	eors	r2, r1
 800a6a8:	f88d 2011 	strb.w	r2, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
 800a6ac:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a6b0:	f89d 1012 	ldrb.w	r1, [sp, #18]
 800a6b4:	404a      	eors	r2, r1
 800a6b6:	f88d 2012 	strb.w	r2, [sp, #18]
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800a6c0:	4053      	eors	r3, r2
 800a6c2:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
 800a6c6:	6873      	ldr	r3, [r6, #4]
 800a6c8:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800a6cc:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
 800a6d0:	f88d 2014 	strb.w	r2, [sp, #20]
 800a6d4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800a6d8:	f89d 1015 	ldrb.w	r1, [sp, #21]
 800a6dc:	404a      	eors	r2, r1
 800a6de:	f88d 2015 	strb.w	r2, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
 800a6e2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a6e6:	f89d 1016 	ldrb.w	r1, [sp, #22]
 800a6ea:	404a      	eors	r2, r1
 800a6ec:	f88d 2016 	strb.w	r2, [sp, #22]
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800a6f6:	4053      	eors	r3, r2
 800a6f8:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
 800a6fc:	68b3      	ldr	r3, [r6, #8]
 800a6fe:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800a702:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
 800a706:	f88d 2018 	strb.w	r2, [sp, #24]
 800a70a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800a70e:	f89d 1019 	ldrb.w	r1, [sp, #25]
 800a712:	404a      	eors	r2, r1
 800a714:	f88d 2019 	strb.w	r2, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
 800a718:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a71c:	f89d 101a 	ldrb.w	r1, [sp, #26]
 800a720:	404a      	eors	r2, r1
 800a722:	f88d 201a 	strb.w	r2, [sp, #26]
 800a726:	b2db      	uxtb	r3, r3
 800a728:	f89d 201b 	ldrb.w	r2, [sp, #27]
 800a72c:	4053      	eors	r3, r2
 800a72e:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
 800a732:	68f3      	ldr	r3, [r6, #12]
 800a734:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800a738:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
 800a73c:	f88d 201c 	strb.w	r2, [sp, #28]
 800a740:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800a744:	f89d 101d 	ldrb.w	r1, [sp, #29]
 800a748:	404a      	eors	r2, r1
 800a74a:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
 800a74e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a752:	f89d 101e 	ldrb.w	r1, [sp, #30]
 800a756:	404a      	eors	r2, r1
 800a758:	f88d 201e 	strb.w	r2, [sp, #30]
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800a762:	4053      	eors	r3, r2
 800a764:	f88d 301f 	strb.w	r3, [sp, #31]

	for (i = 0; i < (Nr - 1); ++i) {
 800a768:	2400      	movs	r4, #0
}
 800a76a:	e239      	b.n	800abe0 <tc_aes_encrypt+0x57c>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
 800a76c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800a770:	f88d 3000 	strb.w	r3, [sp]
 800a774:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800a778:	f88d 3001 	strb.w	r3, [sp, #1]
 800a77c:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800a780:	f88d 3002 	strb.w	r3, [sp, #2]
 800a784:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800a788:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
 800a78c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800a790:	f88d 3004 	strb.w	r3, [sp, #4]
 800a794:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800a798:	f88d 3005 	strb.w	r3, [sp, #5]
 800a79c:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800a7a0:	f88d 3006 	strb.w	r3, [sp, #6]
 800a7a4:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800a7a8:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
 800a7ac:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800a7b0:	f88d 3008 	strb.w	r3, [sp, #8]
 800a7b4:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800a7b8:	f88d 3009 	strb.w	r3, [sp, #9]
 800a7bc:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800a7c0:	f88d 300a 	strb.w	r3, [sp, #10]
 800a7c4:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800a7c8:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
 800a7cc:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800a7d0:	f88d 300c 	strb.w	r3, [sp, #12]
 800a7d4:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800a7d8:	f88d 300d 	strb.w	r3, [sp, #13]
 800a7dc:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800a7e0:	f88d 300e 	strb.w	r3, [sp, #14]
 800a7e4:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800a7e8:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
 800a7ec:	2310      	movs	r3, #16
 800a7ee:	466a      	mov	r2, sp
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	eb0d 0003 	add.w	r0, sp, r3
 800a7f6:	f011 fb1e 	bl	801be36 <_copy>
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
 800a7fa:	f89d 0010 	ldrb.w	r0, [sp, #16]
 800a7fe:	f011 fb2b 	bl	801be58 <_double_byte>
 800a802:	4680      	mov	r8, r0
 800a804:	f89d 0011 	ldrb.w	r0, [sp, #17]
 800a808:	f011 fb26 	bl	801be58 <_double_byte>
 800a80c:	4601      	mov	r1, r0
 800a80e:	f89d 0011 	ldrb.w	r0, [sp, #17]
 800a812:	f89d 2012 	ldrb.w	r2, [sp, #18]
 800a816:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800a81a:	4041      	eors	r1, r0
 800a81c:	ea88 0801 	eor.w	r8, r8, r1
 800a820:	ea82 0208 	eor.w	r2, r2, r8
 800a824:	4053      	eors	r3, r2
 800a826:	f88d 3000 	strb.w	r3, [sp]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
 800a82a:	f89d 8010 	ldrb.w	r8, [sp, #16]
 800a82e:	f011 fb13 	bl	801be58 <_double_byte>
 800a832:	ea88 0800 	eor.w	r8, r8, r0
 800a836:	fa5f f888 	uxtb.w	r8, r8
 800a83a:	f89d 0012 	ldrb.w	r0, [sp, #18]
 800a83e:	f011 fb0b 	bl	801be58 <_double_byte>
 800a842:	4602      	mov	r2, r0
 800a844:	f89d 0012 	ldrb.w	r0, [sp, #18]
 800a848:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800a84c:	4042      	eors	r2, r0
 800a84e:	ea88 0802 	eor.w	r8, r8, r2
 800a852:	ea83 0308 	eor.w	r3, r3, r8
 800a856:	f88d 3001 	strb.w	r3, [sp, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
 800a85a:	f89d 8010 	ldrb.w	r8, [sp, #16]
 800a85e:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800a862:	ea88 0803 	eor.w	r8, r8, r3
 800a866:	f011 faf7 	bl	801be58 <_double_byte>
 800a86a:	ea88 0800 	eor.w	r8, r8, r0
 800a86e:	fa5f f888 	uxtb.w	r8, r8
 800a872:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800a876:	f011 faef 	bl	801be58 <_double_byte>
 800a87a:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800a87e:	4058      	eors	r0, r3
 800a880:	ea88 0800 	eor.w	r8, r8, r0
 800a884:	f88d 8002 	strb.w	r8, [sp, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
 800a888:	f89d 0010 	ldrb.w	r0, [sp, #16]
 800a88c:	f011 fae4 	bl	801be58 <_double_byte>
 800a890:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800a894:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800a898:	f89d 8012 	ldrb.w	r8, [sp, #18]
 800a89c:	4050      	eors	r0, r2
 800a89e:	4043      	eors	r3, r0
 800a8a0:	ea88 0803 	eor.w	r8, r8, r3
 800a8a4:	fa5f f888 	uxtb.w	r8, r8
 800a8a8:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800a8ac:	f011 fad4 	bl	801be58 <_double_byte>
 800a8b0:	ea88 0800 	eor.w	r8, r8, r0
 800a8b4:	f88d 8003 	strb.w	r8, [sp, #3]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
 800a8b8:	f89d 0014 	ldrb.w	r0, [sp, #20]
 800a8bc:	f011 facc 	bl	801be58 <_double_byte>
 800a8c0:	4680      	mov	r8, r0
 800a8c2:	f89d 0015 	ldrb.w	r0, [sp, #21]
 800a8c6:	f011 fac7 	bl	801be58 <_double_byte>
 800a8ca:	4601      	mov	r1, r0
 800a8cc:	f89d 0015 	ldrb.w	r0, [sp, #21]
 800a8d0:	f89d 2016 	ldrb.w	r2, [sp, #22]
 800a8d4:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800a8d8:	4041      	eors	r1, r0
 800a8da:	ea88 0801 	eor.w	r8, r8, r1
 800a8de:	ea82 0208 	eor.w	r2, r2, r8
 800a8e2:	4053      	eors	r3, r2
 800a8e4:	f88d 3004 	strb.w	r3, [sp, #4]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
 800a8e8:	f89d 8014 	ldrb.w	r8, [sp, #20]
 800a8ec:	f011 fab4 	bl	801be58 <_double_byte>
 800a8f0:	ea88 0800 	eor.w	r8, r8, r0
 800a8f4:	fa5f f888 	uxtb.w	r8, r8
 800a8f8:	f89d 0016 	ldrb.w	r0, [sp, #22]
 800a8fc:	f011 faac 	bl	801be58 <_double_byte>
 800a900:	4602      	mov	r2, r0
 800a902:	f89d 0016 	ldrb.w	r0, [sp, #22]
 800a906:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800a90a:	4042      	eors	r2, r0
 800a90c:	ea88 0802 	eor.w	r8, r8, r2
 800a910:	ea83 0308 	eor.w	r3, r3, r8
 800a914:	f88d 3005 	strb.w	r3, [sp, #5]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
 800a918:	f89d 8014 	ldrb.w	r8, [sp, #20]
 800a91c:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800a920:	ea88 0803 	eor.w	r8, r8, r3
 800a924:	f011 fa98 	bl	801be58 <_double_byte>
 800a928:	ea88 0800 	eor.w	r8, r8, r0
 800a92c:	fa5f f888 	uxtb.w	r8, r8
 800a930:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800a934:	f011 fa90 	bl	801be58 <_double_byte>
 800a938:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800a93c:	4058      	eors	r0, r3
 800a93e:	ea88 0800 	eor.w	r8, r8, r0
 800a942:	f88d 8006 	strb.w	r8, [sp, #6]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
 800a946:	f89d 0014 	ldrb.w	r0, [sp, #20]
 800a94a:	f011 fa85 	bl	801be58 <_double_byte>
 800a94e:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800a952:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800a956:	f89d 8016 	ldrb.w	r8, [sp, #22]
 800a95a:	4050      	eors	r0, r2
 800a95c:	4043      	eors	r3, r0
 800a95e:	ea88 0803 	eor.w	r8, r8, r3
 800a962:	fa5f f888 	uxtb.w	r8, r8
 800a966:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800a96a:	f011 fa75 	bl	801be58 <_double_byte>
 800a96e:	ea88 0800 	eor.w	r8, r8, r0
 800a972:	f88d 8007 	strb.w	r8, [sp, #7]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
 800a976:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800a97a:	f011 fa6d 	bl	801be58 <_double_byte>
 800a97e:	4680      	mov	r8, r0
 800a980:	f89d 0019 	ldrb.w	r0, [sp, #25]
 800a984:	f011 fa68 	bl	801be58 <_double_byte>
 800a988:	4601      	mov	r1, r0
 800a98a:	f89d 0019 	ldrb.w	r0, [sp, #25]
 800a98e:	f89d 201a 	ldrb.w	r2, [sp, #26]
 800a992:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800a996:	4041      	eors	r1, r0
 800a998:	ea88 0801 	eor.w	r8, r8, r1
 800a99c:	ea82 0208 	eor.w	r2, r2, r8
 800a9a0:	4053      	eors	r3, r2
 800a9a2:	f88d 3008 	strb.w	r3, [sp, #8]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
 800a9a6:	f89d 8018 	ldrb.w	r8, [sp, #24]
 800a9aa:	f011 fa55 	bl	801be58 <_double_byte>
 800a9ae:	ea88 0800 	eor.w	r8, r8, r0
 800a9b2:	fa5f f888 	uxtb.w	r8, r8
 800a9b6:	f89d 001a 	ldrb.w	r0, [sp, #26]
 800a9ba:	f011 fa4d 	bl	801be58 <_double_byte>
 800a9be:	4602      	mov	r2, r0
 800a9c0:	f89d 001a 	ldrb.w	r0, [sp, #26]
 800a9c4:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800a9c8:	4042      	eors	r2, r0
 800a9ca:	ea88 0802 	eor.w	r8, r8, r2
 800a9ce:	ea83 0308 	eor.w	r3, r3, r8
 800a9d2:	f88d 3009 	strb.w	r3, [sp, #9]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
 800a9d6:	f89d 8018 	ldrb.w	r8, [sp, #24]
 800a9da:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800a9de:	ea88 0803 	eor.w	r8, r8, r3
 800a9e2:	f011 fa39 	bl	801be58 <_double_byte>
 800a9e6:	ea88 0800 	eor.w	r8, r8, r0
 800a9ea:	fa5f f888 	uxtb.w	r8, r8
 800a9ee:	f89d 001b 	ldrb.w	r0, [sp, #27]
 800a9f2:	f011 fa31 	bl	801be58 <_double_byte>
 800a9f6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800a9fa:	4058      	eors	r0, r3
 800a9fc:	ea88 0800 	eor.w	r8, r8, r0
 800aa00:	f88d 800a 	strb.w	r8, [sp, #10]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
 800aa04:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800aa08:	f011 fa26 	bl	801be58 <_double_byte>
 800aa0c:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800aa10:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800aa14:	f89d 801a 	ldrb.w	r8, [sp, #26]
 800aa18:	4050      	eors	r0, r2
 800aa1a:	4043      	eors	r3, r0
 800aa1c:	ea88 0803 	eor.w	r8, r8, r3
 800aa20:	fa5f f888 	uxtb.w	r8, r8
 800aa24:	f89d 001b 	ldrb.w	r0, [sp, #27]
 800aa28:	f011 fa16 	bl	801be58 <_double_byte>
 800aa2c:	ea88 0800 	eor.w	r8, r8, r0
 800aa30:	f88d 800b 	strb.w	r8, [sp, #11]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
 800aa34:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800aa38:	f011 fa0e 	bl	801be58 <_double_byte>
 800aa3c:	4680      	mov	r8, r0
 800aa3e:	f89d 001d 	ldrb.w	r0, [sp, #29]
 800aa42:	f011 fa09 	bl	801be58 <_double_byte>
 800aa46:	4601      	mov	r1, r0
 800aa48:	f89d 001d 	ldrb.w	r0, [sp, #29]
 800aa4c:	f89d 201e 	ldrb.w	r2, [sp, #30]
 800aa50:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800aa54:	4041      	eors	r1, r0
 800aa56:	ea88 0801 	eor.w	r8, r8, r1
 800aa5a:	ea82 0208 	eor.w	r2, r2, r8
 800aa5e:	4053      	eors	r3, r2
 800aa60:	f88d 300c 	strb.w	r3, [sp, #12]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
 800aa64:	f89d 801c 	ldrb.w	r8, [sp, #28]
 800aa68:	f011 f9f6 	bl	801be58 <_double_byte>
 800aa6c:	ea88 0800 	eor.w	r8, r8, r0
 800aa70:	fa5f f888 	uxtb.w	r8, r8
 800aa74:	f89d 001e 	ldrb.w	r0, [sp, #30]
 800aa78:	f011 f9ee 	bl	801be58 <_double_byte>
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	f89d 001e 	ldrb.w	r0, [sp, #30]
 800aa82:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800aa86:	4042      	eors	r2, r0
 800aa88:	ea88 0802 	eor.w	r8, r8, r2
 800aa8c:	ea83 0308 	eor.w	r3, r3, r8
 800aa90:	f88d 300d 	strb.w	r3, [sp, #13]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
 800aa94:	f89d 801c 	ldrb.w	r8, [sp, #28]
 800aa98:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800aa9c:	ea88 0803 	eor.w	r8, r8, r3
 800aaa0:	f011 f9da 	bl	801be58 <_double_byte>
 800aaa4:	ea88 0800 	eor.w	r8, r8, r0
 800aaa8:	fa5f f888 	uxtb.w	r8, r8
 800aaac:	f89d 001f 	ldrb.w	r0, [sp, #31]
 800aab0:	f011 f9d2 	bl	801be58 <_double_byte>
 800aab4:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800aab8:	4058      	eors	r0, r3
 800aaba:	ea88 0800 	eor.w	r8, r8, r0
 800aabe:	f88d 800e 	strb.w	r8, [sp, #14]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
 800aac2:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800aac6:	f011 f9c7 	bl	801be58 <_double_byte>
 800aaca:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800aace:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800aad2:	f89d 801e 	ldrb.w	r8, [sp, #30]
 800aad6:	4050      	eors	r0, r2
 800aad8:	4043      	eors	r3, r0
 800aada:	ea88 0803 	eor.w	r8, r8, r3
 800aade:	fa5f f888 	uxtb.w	r8, r8
 800aae2:	f89d 001f 	ldrb.w	r0, [sp, #31]
 800aae6:	f011 f9b7 	bl	801be58 <_double_byte>
 800aaea:	ea88 0800 	eor.w	r8, r8, r0
 800aaee:	f88d 800f 	strb.w	r8, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
 800aaf2:	2310      	movs	r3, #16
 800aaf4:	466a      	mov	r2, sp
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	eb0d 0003 	add.w	r0, sp, r3
 800aafc:	f011 f99b 	bl	801be36 <_copy>
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
 800ab00:	3401      	adds	r4, #1
 800ab02:	0123      	lsls	r3, r4, #4
 800ab04:	eb05 1204 	add.w	r2, r5, r4, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
 800ab08:	58eb      	ldr	r3, [r5, r3]
 800ab0a:	f89d 1010 	ldrb.w	r1, [sp, #16]
 800ab0e:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
 800ab12:	f88d 1010 	strb.w	r1, [sp, #16]
 800ab16:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800ab1a:	f89d 0011 	ldrb.w	r0, [sp, #17]
 800ab1e:	4041      	eors	r1, r0
 800ab20:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
 800ab24:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800ab28:	f89d 0012 	ldrb.w	r0, [sp, #18]
 800ab2c:	4041      	eors	r1, r0
 800ab2e:	f88d 1012 	strb.w	r1, [sp, #18]
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	f89d 1013 	ldrb.w	r1, [sp, #19]
 800ab38:	404b      	eors	r3, r1
 800ab3a:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
 800ab3e:	6853      	ldr	r3, [r2, #4]
 800ab40:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800ab44:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
 800ab48:	f88d 1014 	strb.w	r1, [sp, #20]
 800ab4c:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800ab50:	f89d 0015 	ldrb.w	r0, [sp, #21]
 800ab54:	4041      	eors	r1, r0
 800ab56:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
 800ab5a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800ab5e:	f89d 0016 	ldrb.w	r0, [sp, #22]
 800ab62:	4041      	eors	r1, r0
 800ab64:	f88d 1016 	strb.w	r1, [sp, #22]
 800ab68:	b2db      	uxtb	r3, r3
 800ab6a:	f89d 1017 	ldrb.w	r1, [sp, #23]
 800ab6e:	404b      	eors	r3, r1
 800ab70:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
 800ab74:	6893      	ldr	r3, [r2, #8]
 800ab76:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800ab7a:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
 800ab7e:	f88d 1018 	strb.w	r1, [sp, #24]
 800ab82:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800ab86:	f89d 0019 	ldrb.w	r0, [sp, #25]
 800ab8a:	4041      	eors	r1, r0
 800ab8c:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
 800ab90:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800ab94:	f89d 001a 	ldrb.w	r0, [sp, #26]
 800ab98:	4041      	eors	r1, r0
 800ab9a:	f88d 101a 	strb.w	r1, [sp, #26]
 800ab9e:	b2db      	uxtb	r3, r3
 800aba0:	f89d 101b 	ldrb.w	r1, [sp, #27]
 800aba4:	404b      	eors	r3, r1
 800aba6:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
 800abaa:	68d3      	ldr	r3, [r2, #12]
 800abac:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800abb0:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
 800abb4:	f88d 201c 	strb.w	r2, [sp, #28]
 800abb8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800abbc:	f89d 101d 	ldrb.w	r1, [sp, #29]
 800abc0:	404a      	eors	r2, r1
 800abc2:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
 800abc6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800abca:	f89d 101e 	ldrb.w	r1, [sp, #30]
 800abce:	404a      	eors	r2, r1
 800abd0:	f88d 201e 	strb.w	r2, [sp, #30]
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800abda:	4053      	eors	r3, r2
 800abdc:	f88d 301f 	strb.w	r3, [sp, #31]
	for (i = 0; i < (Nr - 1); ++i) {
 800abe0:	2c08      	cmp	r4, #8
 800abe2:	d80a      	bhi.n	800abfa <tc_aes_encrypt+0x596>
	for (i = 0; i < (Nb * Nk); ++i) {
 800abe4:	2300      	movs	r3, #0
 800abe6:	2b0f      	cmp	r3, #15
 800abe8:	f63f adc0 	bhi.w	800a76c <tc_aes_encrypt+0x108>
		s[i] = sbox[s[i]];
 800abec:	a904      	add	r1, sp, #16
 800abee:	5cc8      	ldrb	r0, [r1, r3]
 800abf0:	4a6e      	ldr	r2, [pc, #440]	; (800adac <tc_aes_encrypt+0x748>)
 800abf2:	5c10      	ldrb	r0, [r2, r0]
 800abf4:	54c8      	strb	r0, [r1, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
 800abf6:	3301      	adds	r3, #1
 800abf8:	e7f5      	b.n	800abe6 <tc_aes_encrypt+0x582>
 800abfa:	2300      	movs	r3, #0
 800abfc:	e005      	b.n	800ac0a <tc_aes_encrypt+0x5a6>
		s[i] = sbox[s[i]];
 800abfe:	aa04      	add	r2, sp, #16
 800ac00:	5cd1      	ldrb	r1, [r2, r3]
 800ac02:	486a      	ldr	r0, [pc, #424]	; (800adac <tc_aes_encrypt+0x748>)
 800ac04:	5c41      	ldrb	r1, [r0, r1]
 800ac06:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
 800ac08:	3301      	adds	r3, #1
 800ac0a:	2b0f      	cmp	r3, #15
 800ac0c:	d9f7      	bls.n	800abfe <tc_aes_encrypt+0x59a>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
 800ac0e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800ac12:	f88d 3000 	strb.w	r3, [sp]
 800ac16:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800ac1a:	f88d 3001 	strb.w	r3, [sp, #1]
 800ac1e:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800ac22:	f88d 3002 	strb.w	r3, [sp, #2]
 800ac26:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800ac2a:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
 800ac2e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800ac32:	f88d 3004 	strb.w	r3, [sp, #4]
 800ac36:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800ac3a:	f88d 3005 	strb.w	r3, [sp, #5]
 800ac3e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800ac42:	f88d 3006 	strb.w	r3, [sp, #6]
 800ac46:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800ac4a:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
 800ac4e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800ac52:	f88d 3008 	strb.w	r3, [sp, #8]
 800ac56:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800ac5a:	f88d 3009 	strb.w	r3, [sp, #9]
 800ac5e:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800ac62:	f88d 300a 	strb.w	r3, [sp, #10]
 800ac66:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800ac6a:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
 800ac6e:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800ac72:	f88d 300c 	strb.w	r3, [sp, #12]
 800ac76:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800ac7a:	f88d 300d 	strb.w	r3, [sp, #13]
 800ac7e:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800ac82:	f88d 300e 	strb.w	r3, [sp, #14]
 800ac86:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800ac8a:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
 800ac8e:	2310      	movs	r3, #16
 800ac90:	466a      	mov	r2, sp
 800ac92:	4619      	mov	r1, r3
 800ac94:	eb0d 0003 	add.w	r0, sp, r3
 800ac98:	f011 f8cd 	bl	801be36 <_copy>
	}

	sub_bytes(state);
	shift_rows(state);
	add_round_key(state, s->words + Nb*(i+1));
 800ac9c:	1c63      	adds	r3, r4, #1
 800ac9e:	011a      	lsls	r2, r3, #4
 800aca0:	eb06 1303 	add.w	r3, r6, r3, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
 800aca4:	58b2      	ldr	r2, [r6, r2]
 800aca6:	f89d 1010 	ldrb.w	r1, [sp, #16]
 800acaa:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
 800acae:	f88d 1010 	strb.w	r1, [sp, #16]
 800acb2:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800acb6:	f89d 0011 	ldrb.w	r0, [sp, #17]
 800acba:	4041      	eors	r1, r0
 800acbc:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
 800acc0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800acc4:	f89d 0012 	ldrb.w	r0, [sp, #18]
 800acc8:	4041      	eors	r1, r0
 800acca:	f88d 1012 	strb.w	r1, [sp, #18]
 800acce:	b2d2      	uxtb	r2, r2
 800acd0:	f89d 1013 	ldrb.w	r1, [sp, #19]
 800acd4:	404a      	eors	r2, r1
 800acd6:	f88d 2013 	strb.w	r2, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
 800acda:	685a      	ldr	r2, [r3, #4]
 800acdc:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800ace0:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
 800ace4:	f88d 1014 	strb.w	r1, [sp, #20]
 800ace8:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800acec:	f89d 0015 	ldrb.w	r0, [sp, #21]
 800acf0:	4041      	eors	r1, r0
 800acf2:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
 800acf6:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800acfa:	f89d 0016 	ldrb.w	r0, [sp, #22]
 800acfe:	4041      	eors	r1, r0
 800ad00:	f88d 1016 	strb.w	r1, [sp, #22]
 800ad04:	b2d2      	uxtb	r2, r2
 800ad06:	f89d 1017 	ldrb.w	r1, [sp, #23]
 800ad0a:	404a      	eors	r2, r1
 800ad0c:	f88d 2017 	strb.w	r2, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
 800ad10:	689a      	ldr	r2, [r3, #8]
 800ad12:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800ad16:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
 800ad1a:	f88d 1018 	strb.w	r1, [sp, #24]
 800ad1e:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800ad22:	f89d 0019 	ldrb.w	r0, [sp, #25]
 800ad26:	4041      	eors	r1, r0
 800ad28:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
 800ad2c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800ad30:	f89d 001a 	ldrb.w	r0, [sp, #26]
 800ad34:	4041      	eors	r1, r0
 800ad36:	f88d 101a 	strb.w	r1, [sp, #26]
 800ad3a:	b2d2      	uxtb	r2, r2
 800ad3c:	f89d 101b 	ldrb.w	r1, [sp, #27]
 800ad40:	404a      	eors	r2, r1
 800ad42:	f88d 201b 	strb.w	r2, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
 800ad46:	68db      	ldr	r3, [r3, #12]
 800ad48:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800ad4c:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
 800ad50:	f88d 201c 	strb.w	r2, [sp, #28]
 800ad54:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800ad58:	f89d 101d 	ldrb.w	r1, [sp, #29]
 800ad5c:	404a      	eors	r2, r1
 800ad5e:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
 800ad62:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800ad66:	f89d 101e 	ldrb.w	r1, [sp, #30]
 800ad6a:	404a      	eors	r2, r1
 800ad6c:	f88d 201e 	strb.w	r2, [sp, #30]
 800ad70:	b2db      	uxtb	r3, r3
 800ad72:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800ad76:	4053      	eors	r3, r2
 800ad78:	f88d 301f 	strb.w	r3, [sp, #31]

	(void)_copy(out, sizeof(state), state, sizeof(state));
 800ad7c:	2310      	movs	r3, #16
 800ad7e:	eb0d 0203 	add.w	r2, sp, r3
 800ad82:	4619      	mov	r1, r3
 800ad84:	4638      	mov	r0, r7
 800ad86:	f011 f856 	bl	801be36 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
 800ad8a:	2210      	movs	r2, #16
 800ad8c:	2100      	movs	r1, #0
 800ad8e:	eb0d 0002 	add.w	r0, sp, r2
 800ad92:	f011 f85d 	bl	801be50 <_set>

	return TC_CRYPTO_SUCCESS;
 800ad96:	2001      	movs	r0, #1
}
 800ad98:	b008      	add	sp, #32
 800ad9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
 800ad9e:	2000      	movs	r0, #0
}
 800ada0:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 800ada2:	2000      	movs	r0, #0
 800ada4:	e7f8      	b.n	800ad98 <tc_aes_encrypt+0x734>
		return TC_CRYPTO_FAIL;
 800ada6:	2000      	movs	r0, #0
 800ada8:	e7f6      	b.n	800ad98 <tc_aes_encrypt+0x734>
 800adaa:	bf00      	nop
 800adac:	08025bfc 	.word	0x08025bfc

0800adb0 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
 800adb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb4:	b09b      	sub	sp, #108	; 0x6c
	unsigned int t1, t2;
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
 800adb6:	6806      	ldr	r6, [r0, #0]
 800adb8:	9603      	str	r6, [sp, #12]
 800adba:	6842      	ldr	r2, [r0, #4]
 800adbc:	9204      	str	r2, [sp, #16]
 800adbe:	6884      	ldr	r4, [r0, #8]
 800adc0:	9405      	str	r4, [sp, #20]
 800adc2:	68c7      	ldr	r7, [r0, #12]
 800adc4:	9706      	str	r7, [sp, #24]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
 800adc6:	6905      	ldr	r5, [r0, #16]
 800adc8:	9507      	str	r5, [sp, #28]
 800adca:	6943      	ldr	r3, [r0, #20]
 800adcc:	9301      	str	r3, [sp, #4]
 800adce:	6983      	ldr	r3, [r0, #24]
 800add0:	9302      	str	r3, [sp, #8]
 800add2:	69c3      	ldr	r3, [r0, #28]
 800add4:	9308      	str	r3, [sp, #32]
 800add6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800adda:	f8dd 9004 	ldr.w	r9, [sp, #4]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
 800adde:	46ba      	mov	sl, r7
 800ade0:	46a4      	mov	ip, r4
 800ade2:	4696      	mov	lr, r2

	for (i = 0; i < 16; ++i) {
 800ade4:	2700      	movs	r7, #0
 800ade6:	2f0f      	cmp	r7, #15
 800ade8:	d83b      	bhi.n	800ae62 <compress+0xb2>
	n = (((unsigned int)(*((*c)++))) << 24);
 800adea:	780c      	ldrb	r4, [r1, #0]
	n |= ((unsigned int)(*((*c)++)) << 16);
 800adec:	784a      	ldrb	r2, [r1, #1]
 800adee:	0412      	lsls	r2, r2, #16
 800adf0:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
	n |= ((unsigned int)(*((*c)++)) << 8);
 800adf4:	788c      	ldrb	r4, [r1, #2]
 800adf6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
	n |= ((unsigned int)(*((*c)++)));
 800adfa:	78cc      	ldrb	r4, [r1, #3]
 800adfc:	4322      	orrs	r2, r4
		n = BigEndian(&data);
		t1 = work_space[i] = n;
 800adfe:	ac1a      	add	r4, sp, #104	; 0x68
 800ae00:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 800ae04:	f844 2c40 	str.w	r2, [r4, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
 800ae08:	ea4f 24f5 	mov.w	r4, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 800ae0c:	ea84 14b5 	eor.w	r4, r4, r5, ror #6
 800ae10:	ea84 6475 	eor.w	r4, r4, r5, ror #25
 800ae14:	4423      	add	r3, r4
 800ae16:	ea05 0409 	and.w	r4, r5, r9
 800ae1a:	ea28 0b05 	bic.w	fp, r8, r5
 800ae1e:	ea84 040b 	eor.w	r4, r4, fp
 800ae22:	4423      	add	r3, r4
 800ae24:	4c4d      	ldr	r4, [pc, #308]	; (800af5c <compress+0x1ac>)
 800ae26:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
 800ae2a:	4423      	add	r3, r4
 800ae2c:	441a      	add	r2, r3
	return (((a) >> n) | ((a) << (32 - n)));
 800ae2e:	ea4f 3376 	mov.w	r3, r6, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
 800ae32:	ea83 03b6 	eor.w	r3, r3, r6, ror #2
 800ae36:	ea83 53b6 	eor.w	r3, r3, r6, ror #22
 800ae3a:	ea8e 040c 	eor.w	r4, lr, ip
 800ae3e:	4034      	ands	r4, r6
 800ae40:	ea0e 0b0c 	and.w	fp, lr, ip
 800ae44:	ea84 040b 	eor.w	r4, r4, fp
 800ae48:	441c      	add	r4, r3
	for (i = 0; i < 16; ++i) {
 800ae4a:	3701      	adds	r7, #1
	n |= ((unsigned int)(*((*c)++)));
 800ae4c:	3104      	adds	r1, #4
		h = g; g = f; f = e; e = d + t1;
 800ae4e:	4643      	mov	r3, r8
 800ae50:	46c8      	mov	r8, r9
 800ae52:	46a9      	mov	r9, r5
 800ae54:	eb0a 0502 	add.w	r5, sl, r2
		d = c; c = b; b = a; a = t1 + t2;
 800ae58:	46e2      	mov	sl, ip
 800ae5a:	46f4      	mov	ip, lr
 800ae5c:	46b6      	mov	lr, r6
 800ae5e:	1916      	adds	r6, r2, r4
 800ae60:	e7c1      	b.n	800ade6 <compress+0x36>
 800ae62:	9009      	str	r0, [sp, #36]	; 0x24
	}

	for ( ; i < 64; ++i) {
 800ae64:	2f3f      	cmp	r7, #63	; 0x3f
 800ae66:	d85c      	bhi.n	800af22 <compress+0x172>
		s0 = work_space[(i+1)&0x0f];
 800ae68:	1c79      	adds	r1, r7, #1
 800ae6a:	f001 020f 	and.w	r2, r1, #15
 800ae6e:	ac1a      	add	r4, sp, #104	; 0x68
 800ae70:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ae74:	f852 2c40 	ldr.w	r2, [r2, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
 800ae78:	ea4f 44b2 	mov.w	r4, r2, ror #18
		s0 = sigma0(s0);
 800ae7c:	ea84 14f2 	eor.w	r4, r4, r2, ror #7
 800ae80:	ea84 04d2 	eor.w	r4, r4, r2, lsr #3
		s1 = work_space[(i+14)&0x0f];
 800ae84:	f107 020e 	add.w	r2, r7, #14
 800ae88:	f002 020f 	and.w	r2, r2, #15
 800ae8c:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 800ae90:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 800ae94:	f852 bc40 	ldr.w	fp, [r2, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
 800ae98:	ea4f 42fb 	mov.w	r2, fp, ror #19
		s1 = sigma1(s1);
 800ae9c:	ea82 427b 	eor.w	r2, r2, fp, ror #17
 800aea0:	ea82 229b 	eor.w	r2, r2, fp, lsr #10

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 800aea4:	f007 0b0f 	and.w	fp, r7, #15
 800aea8:	4414      	add	r4, r2
 800aeaa:	f107 0209 	add.w	r2, r7, #9
 800aeae:	f002 020f 	and.w	r2, r2, #15
 800aeb2:	a81a      	add	r0, sp, #104	; 0x68
 800aeb4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800aeb8:	f852 2c40 	ldr.w	r2, [r2, #-64]
 800aebc:	4414      	add	r4, r2
 800aebe:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 800aec2:	f85b 2c40 	ldr.w	r2, [fp, #-64]
 800aec6:	4414      	add	r4, r2
 800aec8:	f84b 4c40 	str.w	r4, [fp, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
 800aecc:	ea4f 22f5 	mov.w	r2, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 800aed0:	ea82 12b5 	eor.w	r2, r2, r5, ror #6
 800aed4:	ea82 6275 	eor.w	r2, r2, r5, ror #25
 800aed8:	441a      	add	r2, r3
 800aeda:	ea05 0309 	and.w	r3, r5, r9
 800aede:	ea28 0b05 	bic.w	fp, r8, r5
 800aee2:	ea83 030b 	eor.w	r3, r3, fp
 800aee6:	441a      	add	r2, r3
 800aee8:	4b1c      	ldr	r3, [pc, #112]	; (800af5c <compress+0x1ac>)
 800aeea:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800aeee:	441a      	add	r2, r3
 800aef0:	4422      	add	r2, r4
	return (((a) >> n) | ((a) << (32 - n)));
 800aef2:	ea4f 3476 	mov.w	r4, r6, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
 800aef6:	ea84 04b6 	eor.w	r4, r4, r6, ror #2
 800aefa:	ea84 54b6 	eor.w	r4, r4, r6, ror #22
 800aefe:	ea8e 030c 	eor.w	r3, lr, ip
 800af02:	4033      	ands	r3, r6
 800af04:	ea0e 070c 	and.w	r7, lr, ip
 800af08:	407b      	eors	r3, r7
 800af0a:	441c      	add	r4, r3
	for ( ; i < 64; ++i) {
 800af0c:	460f      	mov	r7, r1
		h = g; g = f; f = e; e = d + t1;
 800af0e:	4643      	mov	r3, r8
 800af10:	46c8      	mov	r8, r9
 800af12:	46a9      	mov	r9, r5
 800af14:	eb0a 0502 	add.w	r5, sl, r2
		d = c; c = b; b = a; a = t1 + t2;
 800af18:	46e2      	mov	sl, ip
 800af1a:	46f4      	mov	ip, lr
 800af1c:	46b6      	mov	lr, r6
 800af1e:	1916      	adds	r6, r2, r4
 800af20:	e7a0      	b.n	800ae64 <compress+0xb4>
 800af22:	9809      	ldr	r0, [sp, #36]	; 0x24
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
 800af24:	9a03      	ldr	r2, [sp, #12]
 800af26:	4416      	add	r6, r2
 800af28:	6006      	str	r6, [r0, #0]
 800af2a:	9a04      	ldr	r2, [sp, #16]
 800af2c:	4472      	add	r2, lr
 800af2e:	6042      	str	r2, [r0, #4]
 800af30:	9a05      	ldr	r2, [sp, #20]
 800af32:	4462      	add	r2, ip
 800af34:	6082      	str	r2, [r0, #8]
 800af36:	9a06      	ldr	r2, [sp, #24]
 800af38:	4452      	add	r2, sl
 800af3a:	60c2      	str	r2, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
 800af3c:	9a07      	ldr	r2, [sp, #28]
 800af3e:	4415      	add	r5, r2
 800af40:	6105      	str	r5, [r0, #16]
 800af42:	9a01      	ldr	r2, [sp, #4]
 800af44:	444a      	add	r2, r9
 800af46:	6142      	str	r2, [r0, #20]
 800af48:	9a02      	ldr	r2, [sp, #8]
 800af4a:	4442      	add	r2, r8
 800af4c:	6182      	str	r2, [r0, #24]
 800af4e:	9a08      	ldr	r2, [sp, #32]
 800af50:	4413      	add	r3, r2
 800af52:	61c3      	str	r3, [r0, #28]
}
 800af54:	b01b      	add	sp, #108	; 0x6c
 800af56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af5a:	bf00      	nop
 800af5c:	08025cfc 	.word	0x08025cfc

0800af60 <tc_sha256_init>:
	if (s == (TCSha256State_t) 0) {
 800af60:	b1e0      	cbz	r0, 800af9c <tc_sha256_init+0x3c>
{
 800af62:	b510      	push	{r4, lr}
 800af64:	4604      	mov	r4, r0
	_set((uint8_t *) s, 0x00, sizeof(*s));
 800af66:	2270      	movs	r2, #112	; 0x70
 800af68:	2100      	movs	r1, #0
 800af6a:	f010 ff71 	bl	801be50 <_set>
	s->iv[0] = 0x6a09e667;
 800af6e:	4b0c      	ldr	r3, [pc, #48]	; (800afa0 <tc_sha256_init+0x40>)
 800af70:	6023      	str	r3, [r4, #0]
	s->iv[1] = 0xbb67ae85;
 800af72:	4b0c      	ldr	r3, [pc, #48]	; (800afa4 <tc_sha256_init+0x44>)
 800af74:	6063      	str	r3, [r4, #4]
	s->iv[2] = 0x3c6ef372;
 800af76:	4b0c      	ldr	r3, [pc, #48]	; (800afa8 <tc_sha256_init+0x48>)
 800af78:	60a3      	str	r3, [r4, #8]
	s->iv[3] = 0xa54ff53a;
 800af7a:	4b0c      	ldr	r3, [pc, #48]	; (800afac <tc_sha256_init+0x4c>)
 800af7c:	60e3      	str	r3, [r4, #12]
	s->iv[4] = 0x510e527f;
 800af7e:	4b0c      	ldr	r3, [pc, #48]	; (800afb0 <tc_sha256_init+0x50>)
 800af80:	6123      	str	r3, [r4, #16]
	s->iv[5] = 0x9b05688c;
 800af82:	4b0c      	ldr	r3, [pc, #48]	; (800afb4 <tc_sha256_init+0x54>)
 800af84:	6163      	str	r3, [r4, #20]
	s->iv[6] = 0x1f83d9ab;
 800af86:	4b0c      	ldr	r3, [pc, #48]	; (800afb8 <tc_sha256_init+0x58>)
 800af88:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
 800af8a:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 800af8e:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 800af92:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 800af96:	61e3      	str	r3, [r4, #28]
	return TC_CRYPTO_SUCCESS;
 800af98:	2001      	movs	r0, #1
}
 800af9a:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
 800af9c:	2000      	movs	r0, #0
}
 800af9e:	4770      	bx	lr
 800afa0:	6a09e667 	.word	0x6a09e667
 800afa4:	bb67ae85 	.word	0xbb67ae85
 800afa8:	3c6ef372 	.word	0x3c6ef372
 800afac:	a54ff53a 	.word	0xa54ff53a
 800afb0:	510e527f 	.word	0x510e527f
 800afb4:	9b05688c 	.word	0x9b05688c
 800afb8:	1f83d9ab 	.word	0x1f83d9ab

0800afbc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 800afbc:	4a09      	ldr	r2, [pc, #36]	; (800afe4 <arch_swap+0x28>)
 800afbe:	6893      	ldr	r3, [r2, #8]
 800afc0:	66d8      	str	r0, [r3, #108]	; 0x6c
	_current->arch.swap_return_value = _k_neg_eagain;
 800afc2:	4909      	ldr	r1, [pc, #36]	; (800afe8 <arch_swap+0x2c>)
 800afc4:	6809      	ldr	r1, [r1, #0]
 800afc6:	6719      	str	r1, [r3, #112]	; 0x70

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800afc8:	4908      	ldr	r1, [pc, #32]	; (800afec <arch_swap+0x30>)
 800afca:	684b      	ldr	r3, [r1, #4]
 800afcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800afd0:	604b      	str	r3, [r1, #4]
 800afd2:	2300      	movs	r3, #0
 800afd4:	f383 8811 	msr	BASEPRI, r3
 800afd8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 800afdc:	6893      	ldr	r3, [r2, #8]
}
 800afde:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800afe0:	4770      	bx	lr
 800afe2:	bf00      	nop
 800afe4:	200046e8 	.word	0x200046e8
 800afe8:	080282c0 	.word	0x080282c0
 800afec:	e000ed00 	.word	0xe000ed00

0800aff0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 800aff0:	490f      	ldr	r1, [pc, #60]	; (800b030 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
 800aff2:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 800aff4:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
 800aff8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 800affa:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 800affe:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 800b002:	2010      	movs	r0, #16
    msr BASEPRI, r0
 800b004:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 800b008:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 800b00c:	4f09      	ldr	r7, [pc, #36]	; (800b034 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 800b00e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 800b012:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
 800b014:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 800b016:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 800b018:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    movs r3, #0
 800b01a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 800b01c:	66d3      	str	r3, [r2, #108]	; 0x6c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 800b01e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 800b022:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
 800b026:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 800b02a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
 800b02e:	4770      	bx	lr
    ldr r1, =_kernel
 800b030:	200046e8 	.word	0x200046e8
    ldr v4, =_SCS_ICSR
 800b034:	e000ed04 	.word	0xe000ed04

0800b038 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
 800b038:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 800b03c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 800b03e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 800b042:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 800b046:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 800b048:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 800b04c:	2902      	cmp	r1, #2
    beq _oops
 800b04e:	d0ff      	beq.n	800b050 <_oops>

0800b050 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 800b050:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 800b052:	f011 fa7e 	bl	801c552 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 800b056:	bd01      	pop	{r0, pc}

0800b058 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 800b058:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	db08      	blt.n	800b070 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b05e:	f000 001f 	and.w	r0, r0, #31
 800b062:	095b      	lsrs	r3, r3, #5
 800b064:	2201      	movs	r2, #1
 800b066:	fa02 f000 	lsl.w	r0, r2, r0
 800b06a:	4a02      	ldr	r2, [pc, #8]	; (800b074 <arch_irq_enable+0x1c>)
 800b06c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 800b070:	4770      	bx	lr
 800b072:	bf00      	nop
 800b074:	e000e100 	.word	0xe000e100

0800b078 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
 800b078:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	db0d      	blt.n	800b09a <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b07e:	f000 001f 	and.w	r0, r0, #31
 800b082:	095b      	lsrs	r3, r3, #5
 800b084:	2201      	movs	r2, #1
 800b086:	fa02 f000 	lsl.w	r0, r2, r0
 800b08a:	3320      	adds	r3, #32
 800b08c:	4a03      	ldr	r2, [pc, #12]	; (800b09c <arch_irq_disable+0x24>)
 800b08e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 800b092:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800b096:	f3bf 8f6f 	isb	sy
}
 800b09a:	4770      	bx	lr
 800b09c:	e000e100 	.word	0xe000e100

0800b0a0 <z_arm_irq_priority_set>:
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
 800b0a0:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 800b0a2:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	db08      	blt.n	800b0ba <z_arm_irq_priority_set+0x1a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b0a8:	0109      	lsls	r1, r1, #4
 800b0aa:	b2c9      	uxtb	r1, r1
 800b0ac:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800b0b0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 800b0b4:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
 800b0b8:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b0ba:	f000 000f 	and.w	r0, r0, #15
 800b0be:	0109      	lsls	r1, r1, #4
 800b0c0:	b2c9      	uxtb	r1, r1
 800b0c2:	4b01      	ldr	r3, [pc, #4]	; (800b0c8 <z_arm_irq_priority_set+0x28>)
 800b0c4:	5419      	strb	r1, [r3, r0]
}
 800b0c6:	4770      	bx	lr
 800b0c8:	e000ed14 	.word	0xe000ed14

0800b0cc <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
 800b0cc:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 800b0ce:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
 800b0d2:	490d      	ldr	r1, [pc, #52]	; (800b108 <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
 800b0d4:	f021 0101 	bic.w	r1, r1, #1
 800b0d8:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
 800b0dc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 800b0e0:	9b01      	ldr	r3, [sp, #4]
 800b0e2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
 800b0e6:	9b02      	ldr	r3, [sp, #8]
 800b0e8:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 800b0ec:	9b03      	ldr	r3, [sp, #12]
 800b0ee:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 800b0f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b0f6:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
 800b0fa:	6584      	str	r4, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	66c3      	str	r3, [r0, #108]	; 0x6c
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 800b100:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b104:	4770      	bx	lr
 800b106:	bf00      	nop
 800b108:	0801a04d 	.word	0x0801a04d

0800b10c <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 800b10c:	b508      	push	{r3, lr}
 800b10e:	4606      	mov	r6, r0
 800b110:	460d      	mov	r5, r1
 800b112:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();
 800b114:	f011 fa0d 	bl	801c532 <z_arm_prepare_switch_to_main>

	_current = main_thread;
 800b118:	4b07      	ldr	r3, [pc, #28]	; (800b138 <arch_switch_to_main_thread+0x2c>)
 800b11a:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 800b11c:	4620      	mov	r0, r4
 800b11e:	f385 8809 	msr	PSP, r5
 800b122:	2100      	movs	r1, #0
 800b124:	b663      	cpsie	if
 800b126:	f381 8811 	msr	BASEPRI, r1
 800b12a:	f3bf 8f6f 	isb	sy
 800b12e:	2200      	movs	r2, #0
 800b130:	2300      	movs	r3, #0
 800b132:	f00e ff8b 	bl	801a04c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 800b136:	bf00      	nop
 800b138:	200046e8 	.word	0x200046e8

0800b13c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 800b13c:	4901      	ldr	r1, [pc, #4]	; (800b144 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 800b13e:	2210      	movs	r2, #16
	str	r2, [r1]
 800b140:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 800b142:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 800b144:	e000ed10 	.word	0xe000ed10

0800b148 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 800b148:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 800b14a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 800b14c:	f380 8811 	msr	BASEPRI, r0
	isb
 800b150:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 800b154:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 800b158:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 800b15a:	b662      	cpsie	i
	isb
 800b15c:	f3bf 8f6f 	isb	sy

	bx	lr
 800b160:	4770      	bx	lr
 800b162:	bf00      	nop

0800b164 <esf_dump>:
#include <kernel.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os);

static void esf_dump(const z_arch_esf_t *esf)
{
 800b164:	b570      	push	{r4, r5, r6, lr}
 800b166:	b082      	sub	sp, #8
 800b168:	4604      	mov	r4, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 800b16a:	2601      	movs	r6, #1
 800b16c:	f04f 0300 	mov.w	r3, #0
 800b170:	f366 0302 	bfi	r3, r6, #0, #3
 800b174:	f36f 03c5 	bfc	r3, #3, #3
 800b178:	4d1c      	ldr	r5, [pc, #112]	; (800b1ec <esf_dump+0x88>)
 800b17a:	4a1d      	ldr	r2, [pc, #116]	; (800b1f0 <esf_dump+0x8c>)
 800b17c:	1aad      	subs	r5, r5, r2
 800b17e:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 800b182:	f365 138f 	bfi	r3, r5, #6, #10
 800b186:	f8ad 3000 	strh.w	r3, [sp]
 800b18a:	6883      	ldr	r3, [r0, #8]
 800b18c:	6842      	ldr	r2, [r0, #4]
 800b18e:	6801      	ldr	r1, [r0, #0]
 800b190:	4818      	ldr	r0, [pc, #96]	; (800b1f4 <esf_dump+0x90>)
 800b192:	f7fb f909 	bl	80063a8 <log_3>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 800b196:	f04f 0300 	mov.w	r3, #0
 800b19a:	f366 0302 	bfi	r3, r6, #0, #3
 800b19e:	f36f 03c5 	bfc	r3, #3, #3
 800b1a2:	f365 138f 	bfi	r3, r5, #6, #10
 800b1a6:	f8ad 3000 	strh.w	r3, [sp]
 800b1aa:	6963      	ldr	r3, [r4, #20]
 800b1ac:	6922      	ldr	r2, [r4, #16]
 800b1ae:	68e1      	ldr	r1, [r4, #12]
 800b1b0:	4811      	ldr	r0, [pc, #68]	; (800b1f8 <esf_dump+0x94>)
 800b1b2:	f7fb f8f9 	bl	80063a8 <log_3>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 800b1b6:	f04f 0200 	mov.w	r2, #0
 800b1ba:	f366 0202 	bfi	r2, r6, #0, #3
 800b1be:	f36f 02c5 	bfc	r2, #3, #3
 800b1c2:	f365 128f 	bfi	r2, r5, #6, #10
 800b1c6:	69e1      	ldr	r1, [r4, #28]
 800b1c8:	480c      	ldr	r0, [pc, #48]	; (800b1fc <esf_dump+0x98>)
 800b1ca:	f7fb f9b9 	bl	8006540 <log_1>
			callee->v4, callee->v5, callee->v6);
		LOG_ERR("r10/v7: 0x%08x  r11/v8: 0x%08x    psp:  0x%08x",
			callee->v7, callee->v8, callee->psp);
	}
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 800b1ce:	f04f 0200 	mov.w	r2, #0
 800b1d2:	f366 0202 	bfi	r2, r6, #0, #3
 800b1d6:	f36f 02c5 	bfc	r2, #3, #3
 800b1da:	f365 128f 	bfi	r2, r5, #6, #10
 800b1de:	69a1      	ldr	r1, [r4, #24]
 800b1e0:	4807      	ldr	r0, [pc, #28]	; (800b200 <esf_dump+0x9c>)
 800b1e2:	f7fb f9ad 	bl	8006540 <log_1>
		esf->basic.pc);
}
 800b1e6:	b002      	add	sp, #8
 800b1e8:	bd70      	pop	{r4, r5, r6, pc}
 800b1ea:	bf00      	nop
 800b1ec:	08022c20 	.word	0x08022c20
 800b1f0:	08022b90 	.word	0x08022b90
 800b1f4:	08025dfc 	.word	0x08025dfc
 800b1f8:	08025e2c 	.word	0x08025e2c
 800b1fc:	08025e5c 	.word	0x08025e5c
 800b200:	08025e6c 	.word	0x08025e6c

0800b204 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 800b204:	bf30      	wfi
    b z_SysNmiOnReset
 800b206:	f7ff bffd 	b.w	800b204 <z_SysNmiOnReset>
 800b20a:	bf00      	nop

0800b20c <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
 800b20c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 800b20e:	4b17      	ldr	r3, [pc, #92]	; (800b26c <z_arm_prep_c+0x60>)
 800b210:	4a17      	ldr	r2, [pc, #92]	; (800b270 <z_arm_prep_c+0x64>)
 800b212:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800b216:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 800b218:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800b21c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 800b220:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b224:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800b228:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
 800b22c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b230:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800b234:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR &= (~(FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk));
 800b238:	4a0e      	ldr	r2, [pc, #56]	; (800b274 <z_arm_prep_c+0x68>)
 800b23a:	6853      	ldr	r3, [r2, #4]
 800b23c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800b240:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 800b242:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800b246:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 800b24a:	2300      	movs	r3, #0
 800b24c:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800b250:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 800b254:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 800b258:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 800b25c:	f00c fe68 	bl	8017f30 <z_bss_zero>
	z_data_copy();
 800b260:	f00c fe72 	bl	8017f48 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 800b264:	f000 fbd8 	bl	800ba18 <z_arm_interrupt_init>
	z_cstart();
 800b268:	f00c feac 	bl	8017fc4 <z_cstart>
 800b26c:	e000ed00 	.word	0xe000ed00
 800b270:	08000000 	.word	0x08000000
 800b274:	e000ef30 	.word	0xe000ef30

0800b278 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 800b278:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 800b27a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 800b27e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 800b282:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 800b286:	4904      	ldr	r1, [pc, #16]	; (800b298 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 800b288:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 800b28a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 800b28c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 800b28e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 800b292:	4902      	ldr	r1, [pc, #8]	; (800b29c <_isr_wrapper+0x24>)
	bx r1
 800b294:	4708      	bx	r1
 800b296:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 800b298:	0802283c 	.word	0x0802283c
	ldr r1, =z_arm_int_exit
 800b29c:	0800b9d9 	.word	0x0800b9d9

0800b2a0 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 800b2a0:	2010      	movs	r0, #16
    msr BASEPRI, r0
 800b2a2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 800b2a6:	4808      	ldr	r0, [pc, #32]	; (800b2c8 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 800b2a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
 800b2ac:	1840      	adds	r0, r0, r1
    msr PSP, r0
 800b2ae:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 800b2b2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 800b2b6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 800b2b8:	4308      	orrs	r0, r1
    msr CONTROL, r0
 800b2ba:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 800b2be:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 800b2c2:	f7ff ffa3 	bl	800b20c <z_arm_prep_c>
 800b2c6:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 800b2c8:	200076e8 	.word	0x200076e8

0800b2cc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 800b2cc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 800b2d0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 800b2d4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 800b2d6:	4672      	mov	r2, lr
	bl z_arm_fault
 800b2d8:	f000 fb14 	bl	800b904 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 800b2dc:	bd01      	pop	{r0, pc}
 800b2de:	bf00      	nop

0800b2e0 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
 800b2e0:	b508      	push	{r3, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
 800b2e2:	f04f 0100 	mov.w	r1, #0
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	f363 0102 	bfi	r1, r3, #0, #3
 800b2ec:	f36f 01c5 	bfc	r1, #3, #3
 800b2f0:	4b4e      	ldr	r3, [pc, #312]	; (800b42c <usage_fault+0x14c>)
 800b2f2:	4a4f      	ldr	r2, [pc, #316]	; (800b430 <usage_fault+0x150>)
 800b2f4:	1a9b      	subs	r3, r3, r2
 800b2f6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b2fa:	f363 118f 	bfi	r1, r3, #6, #10
 800b2fe:	484d      	ldr	r0, [pc, #308]	; (800b434 <usage_fault+0x154>)
 800b300:	f7fb fa8e 	bl	8006820 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 800b304:	4b4c      	ldr	r3, [pc, #304]	; (800b438 <usage_fault+0x158>)
 800b306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b308:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800b30c:	d121      	bne.n	800b352 <usage_fault+0x72>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 800b30e:	4b4a      	ldr	r3, [pc, #296]	; (800b438 <usage_fault+0x158>)
 800b310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b312:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800b316:	d12e      	bne.n	800b376 <usage_fault+0x96>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 800b318:	4b47      	ldr	r3, [pc, #284]	; (800b438 <usage_fault+0x158>)
 800b31a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b31c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800b320:	d13b      	bne.n	800b39a <usage_fault+0xba>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 800b322:	4b45      	ldr	r3, [pc, #276]	; (800b438 <usage_fault+0x158>)
 800b324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b326:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800b32a:	d148      	bne.n	800b3be <usage_fault+0xde>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 800b32c:	4b42      	ldr	r3, [pc, #264]	; (800b438 <usage_fault+0x158>)
 800b32e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b330:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800b334:	d155      	bne.n	800b3e2 <usage_fault+0x102>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 800b336:	4b40      	ldr	r3, [pc, #256]	; (800b438 <usage_fault+0x158>)
 800b338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b33a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800b33e:	d162      	bne.n	800b406 <usage_fault+0x126>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 800b340:	4a3d      	ldr	r2, [pc, #244]	; (800b438 <usage_fault+0x158>)
 800b342:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800b344:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 800b348:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 800b34c:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
 800b34e:	2000      	movs	r0, #0
 800b350:	bd08      	pop	{r3, pc}
		PR_FAULT_INFO("  Division by zero");
 800b352:	f04f 0100 	mov.w	r1, #0
 800b356:	2301      	movs	r3, #1
 800b358:	f363 0102 	bfi	r1, r3, #0, #3
 800b35c:	f36f 01c5 	bfc	r1, #3, #3
 800b360:	4b32      	ldr	r3, [pc, #200]	; (800b42c <usage_fault+0x14c>)
 800b362:	4a33      	ldr	r2, [pc, #204]	; (800b430 <usage_fault+0x150>)
 800b364:	1a9b      	subs	r3, r3, r2
 800b366:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b36a:	f363 118f 	bfi	r1, r3, #6, #10
 800b36e:	4833      	ldr	r0, [pc, #204]	; (800b43c <usage_fault+0x15c>)
 800b370:	f7fb fa56 	bl	8006820 <log_0>
 800b374:	e7cb      	b.n	800b30e <usage_fault+0x2e>
		PR_FAULT_INFO("  Unaligned memory access");
 800b376:	f04f 0100 	mov.w	r1, #0
 800b37a:	2301      	movs	r3, #1
 800b37c:	f363 0102 	bfi	r1, r3, #0, #3
 800b380:	f36f 01c5 	bfc	r1, #3, #3
 800b384:	4b29      	ldr	r3, [pc, #164]	; (800b42c <usage_fault+0x14c>)
 800b386:	4a2a      	ldr	r2, [pc, #168]	; (800b430 <usage_fault+0x150>)
 800b388:	1a9b      	subs	r3, r3, r2
 800b38a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b38e:	f363 118f 	bfi	r1, r3, #6, #10
 800b392:	482b      	ldr	r0, [pc, #172]	; (800b440 <usage_fault+0x160>)
 800b394:	f7fb fa44 	bl	8006820 <log_0>
 800b398:	e7be      	b.n	800b318 <usage_fault+0x38>
		PR_FAULT_INFO("  No coprocessor instructions");
 800b39a:	f04f 0100 	mov.w	r1, #0
 800b39e:	2301      	movs	r3, #1
 800b3a0:	f363 0102 	bfi	r1, r3, #0, #3
 800b3a4:	f36f 01c5 	bfc	r1, #3, #3
 800b3a8:	4b20      	ldr	r3, [pc, #128]	; (800b42c <usage_fault+0x14c>)
 800b3aa:	4a21      	ldr	r2, [pc, #132]	; (800b430 <usage_fault+0x150>)
 800b3ac:	1a9b      	subs	r3, r3, r2
 800b3ae:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b3b2:	f363 118f 	bfi	r1, r3, #6, #10
 800b3b6:	4823      	ldr	r0, [pc, #140]	; (800b444 <usage_fault+0x164>)
 800b3b8:	f7fb fa32 	bl	8006820 <log_0>
 800b3bc:	e7b1      	b.n	800b322 <usage_fault+0x42>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 800b3be:	f04f 0100 	mov.w	r1, #0
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	f363 0102 	bfi	r1, r3, #0, #3
 800b3c8:	f36f 01c5 	bfc	r1, #3, #3
 800b3cc:	4b17      	ldr	r3, [pc, #92]	; (800b42c <usage_fault+0x14c>)
 800b3ce:	4a18      	ldr	r2, [pc, #96]	; (800b430 <usage_fault+0x150>)
 800b3d0:	1a9b      	subs	r3, r3, r2
 800b3d2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b3d6:	f363 118f 	bfi	r1, r3, #6, #10
 800b3da:	481b      	ldr	r0, [pc, #108]	; (800b448 <usage_fault+0x168>)
 800b3dc:	f7fb fa20 	bl	8006820 <log_0>
 800b3e0:	e7a4      	b.n	800b32c <usage_fault+0x4c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
 800b3e2:	f04f 0100 	mov.w	r1, #0
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	f363 0102 	bfi	r1, r3, #0, #3
 800b3ec:	f36f 01c5 	bfc	r1, #3, #3
 800b3f0:	4b0e      	ldr	r3, [pc, #56]	; (800b42c <usage_fault+0x14c>)
 800b3f2:	4a0f      	ldr	r2, [pc, #60]	; (800b430 <usage_fault+0x150>)
 800b3f4:	1a9b      	subs	r3, r3, r2
 800b3f6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b3fa:	f363 118f 	bfi	r1, r3, #6, #10
 800b3fe:	4813      	ldr	r0, [pc, #76]	; (800b44c <usage_fault+0x16c>)
 800b400:	f7fb fa0e 	bl	8006820 <log_0>
 800b404:	e797      	b.n	800b336 <usage_fault+0x56>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 800b406:	f04f 0100 	mov.w	r1, #0
 800b40a:	2301      	movs	r3, #1
 800b40c:	f363 0102 	bfi	r1, r3, #0, #3
 800b410:	f36f 01c5 	bfc	r1, #3, #3
 800b414:	4b05      	ldr	r3, [pc, #20]	; (800b42c <usage_fault+0x14c>)
 800b416:	4a06      	ldr	r2, [pc, #24]	; (800b430 <usage_fault+0x150>)
 800b418:	1a9b      	subs	r3, r3, r2
 800b41a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b41e:	f363 118f 	bfi	r1, r3, #6, #10
 800b422:	480b      	ldr	r0, [pc, #44]	; (800b450 <usage_fault+0x170>)
 800b424:	f7fb f9fc 	bl	8006820 <log_0>
 800b428:	e78a      	b.n	800b340 <usage_fault+0x60>
 800b42a:	bf00      	nop
 800b42c:	08022c20 	.word	0x08022c20
 800b430:	08022b90 	.word	0x08022b90
 800b434:	08025e9c 	.word	0x08025e9c
 800b438:	e000ed00 	.word	0xe000ed00
 800b43c:	08025eb4 	.word	0x08025eb4
 800b440:	08025ec8 	.word	0x08025ec8
 800b444:	08025ee4 	.word	0x08025ee4
 800b448:	08025f04 	.word	0x08025f04
 800b44c:	08025f2c 	.word	0x08025f2c
 800b450:	08025f48 	.word	0x08025f48

0800b454 <debug_monitor>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void debug_monitor(const z_arch_esf_t *esf)
{
 800b454:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	PR_FAULT_INFO(
 800b456:	f04f 0100 	mov.w	r1, #0
 800b45a:	2301      	movs	r3, #1
 800b45c:	f363 0102 	bfi	r1, r3, #0, #3
 800b460:	f36f 01c5 	bfc	r1, #3, #3
 800b464:	4b05      	ldr	r3, [pc, #20]	; (800b47c <debug_monitor+0x28>)
 800b466:	4a06      	ldr	r2, [pc, #24]	; (800b480 <debug_monitor+0x2c>)
 800b468:	1a9b      	subs	r3, r3, r2
 800b46a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b46e:	f363 118f 	bfi	r1, r3, #6, #10
 800b472:	4804      	ldr	r0, [pc, #16]	; (800b484 <debug_monitor+0x30>)
 800b474:	f7fb f9d4 	bl	8006820 <log_0>
		"***** Debug monitor exception (not implemented) *****");
}
 800b478:	bd08      	pop	{r3, pc}
 800b47a:	bf00      	nop
 800b47c:	08022c20 	.word	0x08022c20
 800b480:	08022b90 	.word	0x08022b90
 800b484:	08025f74 	.word	0x08025f74

0800b488 <mem_manage_fault>:
{
 800b488:	b570      	push	{r4, r5, r6, lr}
 800b48a:	4605      	mov	r5, r0
 800b48c:	460e      	mov	r6, r1
 800b48e:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
 800b490:	f04f 0100 	mov.w	r1, #0
 800b494:	2301      	movs	r3, #1
 800b496:	f363 0102 	bfi	r1, r3, #0, #3
 800b49a:	f36f 01c5 	bfc	r1, #3, #3
 800b49e:	4b53      	ldr	r3, [pc, #332]	; (800b5ec <mem_manage_fault+0x164>)
 800b4a0:	4a53      	ldr	r2, [pc, #332]	; (800b5f0 <mem_manage_fault+0x168>)
 800b4a2:	1a9b      	subs	r3, r3, r2
 800b4a4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b4a8:	f363 118f 	bfi	r1, r3, #6, #10
 800b4ac:	4851      	ldr	r0, [pc, #324]	; (800b5f4 <mem_manage_fault+0x16c>)
 800b4ae:	f7fb f9b7 	bl	8006820 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 800b4b2:	4b51      	ldr	r3, [pc, #324]	; (800b5f8 <mem_manage_fault+0x170>)
 800b4b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4b6:	f013 0f10 	tst.w	r3, #16
 800b4ba:	d11f      	bne.n	800b4fc <mem_manage_fault+0x74>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 800b4bc:	4b4e      	ldr	r3, [pc, #312]	; (800b5f8 <mem_manage_fault+0x170>)
 800b4be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4c0:	f013 0f08 	tst.w	r3, #8
 800b4c4:	d12c      	bne.n	800b520 <mem_manage_fault+0x98>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 800b4c6:	4b4c      	ldr	r3, [pc, #304]	; (800b5f8 <mem_manage_fault+0x170>)
 800b4c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4ca:	f013 0f02 	tst.w	r3, #2
 800b4ce:	d139      	bne.n	800b544 <mem_manage_fault+0xbc>
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 800b4d0:	4b49      	ldr	r3, [pc, #292]	; (800b5f8 <mem_manage_fault+0x170>)
 800b4d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4d4:	f013 0f01 	tst.w	r3, #1
 800b4d8:	d164      	bne.n	800b5a4 <mem_manage_fault+0x11c>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 800b4da:	4b47      	ldr	r3, [pc, #284]	; (800b5f8 <mem_manage_fault+0x170>)
 800b4dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4de:	f013 0f20 	tst.w	r3, #32
 800b4e2:	d171      	bne.n	800b5c8 <mem_manage_fault+0x140>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
 800b4e4:	4b44      	ldr	r3, [pc, #272]	; (800b5f8 <mem_manage_fault+0x170>)
 800b4e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 800b4e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b4ea:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 800b4ee:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
 800b4f0:	4628      	mov	r0, r5
 800b4f2:	f011 f83a 	bl	801c56a <memory_fault_recoverable>
 800b4f6:	7020      	strb	r0, [r4, #0]
}
 800b4f8:	2000      	movs	r0, #0
 800b4fa:	bd70      	pop	{r4, r5, r6, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
 800b4fc:	f04f 0100 	mov.w	r1, #0
 800b500:	2301      	movs	r3, #1
 800b502:	f363 0102 	bfi	r1, r3, #0, #3
 800b506:	f36f 01c5 	bfc	r1, #3, #3
 800b50a:	4b38      	ldr	r3, [pc, #224]	; (800b5ec <mem_manage_fault+0x164>)
 800b50c:	4a38      	ldr	r2, [pc, #224]	; (800b5f0 <mem_manage_fault+0x168>)
 800b50e:	1a9b      	subs	r3, r3, r2
 800b510:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b514:	f363 118f 	bfi	r1, r3, #6, #10
 800b518:	4838      	ldr	r0, [pc, #224]	; (800b5fc <mem_manage_fault+0x174>)
 800b51a:	f7fb f981 	bl	8006820 <log_0>
 800b51e:	e7cd      	b.n	800b4bc <mem_manage_fault+0x34>
		PR_FAULT_INFO("  Unstacking error");
 800b520:	f04f 0100 	mov.w	r1, #0
 800b524:	2301      	movs	r3, #1
 800b526:	f363 0102 	bfi	r1, r3, #0, #3
 800b52a:	f36f 01c5 	bfc	r1, #3, #3
 800b52e:	4b2f      	ldr	r3, [pc, #188]	; (800b5ec <mem_manage_fault+0x164>)
 800b530:	4a2f      	ldr	r2, [pc, #188]	; (800b5f0 <mem_manage_fault+0x168>)
 800b532:	1a9b      	subs	r3, r3, r2
 800b534:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b538:	f363 118f 	bfi	r1, r3, #6, #10
 800b53c:	4830      	ldr	r0, [pc, #192]	; (800b600 <mem_manage_fault+0x178>)
 800b53e:	f7fb f96f 	bl	8006820 <log_0>
 800b542:	e7c0      	b.n	800b4c6 <mem_manage_fault+0x3e>
		PR_FAULT_INFO("  Data Access Violation");
 800b544:	f04f 0100 	mov.w	r1, #0
 800b548:	2301      	movs	r3, #1
 800b54a:	f363 0102 	bfi	r1, r3, #0, #3
 800b54e:	f36f 01c5 	bfc	r1, #3, #3
 800b552:	4b26      	ldr	r3, [pc, #152]	; (800b5ec <mem_manage_fault+0x164>)
 800b554:	4a26      	ldr	r2, [pc, #152]	; (800b5f0 <mem_manage_fault+0x168>)
 800b556:	1a9b      	subs	r3, r3, r2
 800b558:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b55c:	f363 118f 	bfi	r1, r3, #6, #10
 800b560:	4828      	ldr	r0, [pc, #160]	; (800b604 <mem_manage_fault+0x17c>)
 800b562:	f7fb f95d 	bl	8006820 <log_0>
		mmfar = SCB->MMFAR;
 800b566:	4b24      	ldr	r3, [pc, #144]	; (800b5f8 <mem_manage_fault+0x170>)
 800b568:	6b59      	ldr	r1, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 800b56a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b56c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b570:	d0ae      	beq.n	800b4d0 <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 800b572:	f04f 0200 	mov.w	r2, #0
 800b576:	2301      	movs	r3, #1
 800b578:	f363 0202 	bfi	r2, r3, #0, #3
 800b57c:	f36f 02c5 	bfc	r2, #3, #3
 800b580:	4b1a      	ldr	r3, [pc, #104]	; (800b5ec <mem_manage_fault+0x164>)
 800b582:	481b      	ldr	r0, [pc, #108]	; (800b5f0 <mem_manage_fault+0x168>)
 800b584:	1a1b      	subs	r3, r3, r0
 800b586:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b58a:	f363 128f 	bfi	r2, r3, #6, #10
 800b58e:	481e      	ldr	r0, [pc, #120]	; (800b608 <mem_manage_fault+0x180>)
 800b590:	f7fa ffd6 	bl	8006540 <log_1>
			if (from_hard_fault) {
 800b594:	2e00      	cmp	r6, #0
 800b596:	d09b      	beq.n	800b4d0 <mem_manage_fault+0x48>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 800b598:	4a17      	ldr	r2, [pc, #92]	; (800b5f8 <mem_manage_fault+0x170>)
 800b59a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800b59c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5a0:	6293      	str	r3, [r2, #40]	; 0x28
 800b5a2:	e795      	b.n	800b4d0 <mem_manage_fault+0x48>
		PR_FAULT_INFO("  Instruction Access Violation");
 800b5a4:	f04f 0100 	mov.w	r1, #0
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	f363 0102 	bfi	r1, r3, #0, #3
 800b5ae:	f36f 01c5 	bfc	r1, #3, #3
 800b5b2:	4b0e      	ldr	r3, [pc, #56]	; (800b5ec <mem_manage_fault+0x164>)
 800b5b4:	4a0e      	ldr	r2, [pc, #56]	; (800b5f0 <mem_manage_fault+0x168>)
 800b5b6:	1a9b      	subs	r3, r3, r2
 800b5b8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b5bc:	f363 118f 	bfi	r1, r3, #6, #10
 800b5c0:	4812      	ldr	r0, [pc, #72]	; (800b60c <mem_manage_fault+0x184>)
 800b5c2:	f7fb f92d 	bl	8006820 <log_0>
 800b5c6:	e788      	b.n	800b4da <mem_manage_fault+0x52>
		PR_FAULT_INFO(
 800b5c8:	f04f 0100 	mov.w	r1, #0
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	f363 0102 	bfi	r1, r3, #0, #3
 800b5d2:	f36f 01c5 	bfc	r1, #3, #3
 800b5d6:	4b05      	ldr	r3, [pc, #20]	; (800b5ec <mem_manage_fault+0x164>)
 800b5d8:	4a05      	ldr	r2, [pc, #20]	; (800b5f0 <mem_manage_fault+0x168>)
 800b5da:	1a9b      	subs	r3, r3, r2
 800b5dc:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b5e0:	f363 118f 	bfi	r1, r3, #6, #10
 800b5e4:	480a      	ldr	r0, [pc, #40]	; (800b610 <mem_manage_fault+0x188>)
 800b5e6:	f7fb f91b 	bl	8006820 <log_0>
 800b5ea:	e77b      	b.n	800b4e4 <mem_manage_fault+0x5c>
 800b5ec:	08022c20 	.word	0x08022c20
 800b5f0:	08022b90 	.word	0x08022b90
 800b5f4:	08025fac 	.word	0x08025fac
 800b5f8:	e000ed00 	.word	0xe000ed00
 800b5fc:	08025fc4 	.word	0x08025fc4
 800b600:	08025ff8 	.word	0x08025ff8
 800b604:	0802600c 	.word	0x0802600c
 800b608:	08026024 	.word	0x08026024
 800b60c:	0802603c 	.word	0x0802603c
 800b610:	0802605c 	.word	0x0802605c

0800b614 <bus_fault>:
{
 800b614:	b570      	push	{r4, r5, r6, lr}
 800b616:	4605      	mov	r5, r0
 800b618:	460e      	mov	r6, r1
 800b61a:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** BUS FAULT *****");
 800b61c:	f04f 0100 	mov.w	r1, #0
 800b620:	2301      	movs	r3, #1
 800b622:	f363 0102 	bfi	r1, r3, #0, #3
 800b626:	f36f 01c5 	bfc	r1, #3, #3
 800b62a:	4b5f      	ldr	r3, [pc, #380]	; (800b7a8 <bus_fault+0x194>)
 800b62c:	4a5f      	ldr	r2, [pc, #380]	; (800b7ac <bus_fault+0x198>)
 800b62e:	1a9b      	subs	r3, r3, r2
 800b630:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b634:	f363 118f 	bfi	r1, r3, #6, #10
 800b638:	485d      	ldr	r0, [pc, #372]	; (800b7b0 <bus_fault+0x19c>)
 800b63a:	f7fb f8f1 	bl	8006820 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 800b63e:	4b5d      	ldr	r3, [pc, #372]	; (800b7b4 <bus_fault+0x1a0>)
 800b640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b642:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800b646:	d124      	bne.n	800b692 <bus_fault+0x7e>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 800b648:	4b5a      	ldr	r3, [pc, #360]	; (800b7b4 <bus_fault+0x1a0>)
 800b64a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b64c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800b650:	d131      	bne.n	800b6b6 <bus_fault+0xa2>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 800b652:	4b58      	ldr	r3, [pc, #352]	; (800b7b4 <bus_fault+0x1a0>)
 800b654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b656:	f413 7f00 	tst.w	r3, #512	; 0x200
 800b65a:	d13e      	bne.n	800b6da <bus_fault+0xc6>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 800b65c:	4b55      	ldr	r3, [pc, #340]	; (800b7b4 <bus_fault+0x1a0>)
 800b65e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b660:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800b664:	d169      	bne.n	800b73a <bus_fault+0x126>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 800b666:	4b53      	ldr	r3, [pc, #332]	; (800b7b4 <bus_fault+0x1a0>)
 800b668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b66a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800b66e:	d176      	bne.n	800b75e <bus_fault+0x14a>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 800b670:	4b50      	ldr	r3, [pc, #320]	; (800b7b4 <bus_fault+0x1a0>)
 800b672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b674:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800b678:	f040 8083 	bne.w	800b782 <bus_fault+0x16e>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 800b67c:	4a4d      	ldr	r2, [pc, #308]	; (800b7b4 <bus_fault+0x1a0>)
 800b67e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800b680:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 800b684:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
 800b686:	4628      	mov	r0, r5
 800b688:	f010 ff6f 	bl	801c56a <memory_fault_recoverable>
 800b68c:	7020      	strb	r0, [r4, #0]
}
 800b68e:	2000      	movs	r0, #0
 800b690:	bd70      	pop	{r4, r5, r6, pc}
		PR_FAULT_INFO("  Stacking error");
 800b692:	f04f 0100 	mov.w	r1, #0
 800b696:	2301      	movs	r3, #1
 800b698:	f363 0102 	bfi	r1, r3, #0, #3
 800b69c:	f36f 01c5 	bfc	r1, #3, #3
 800b6a0:	4b41      	ldr	r3, [pc, #260]	; (800b7a8 <bus_fault+0x194>)
 800b6a2:	4a42      	ldr	r2, [pc, #264]	; (800b7ac <bus_fault+0x198>)
 800b6a4:	1a9b      	subs	r3, r3, r2
 800b6a6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b6aa:	f363 118f 	bfi	r1, r3, #6, #10
 800b6ae:	4842      	ldr	r0, [pc, #264]	; (800b7b8 <bus_fault+0x1a4>)
 800b6b0:	f7fb f8b6 	bl	8006820 <log_0>
 800b6b4:	e7c8      	b.n	800b648 <bus_fault+0x34>
		PR_FAULT_INFO("  Unstacking error");
 800b6b6:	f04f 0100 	mov.w	r1, #0
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	f363 0102 	bfi	r1, r3, #0, #3
 800b6c0:	f36f 01c5 	bfc	r1, #3, #3
 800b6c4:	4b38      	ldr	r3, [pc, #224]	; (800b7a8 <bus_fault+0x194>)
 800b6c6:	4a39      	ldr	r2, [pc, #228]	; (800b7ac <bus_fault+0x198>)
 800b6c8:	1a9b      	subs	r3, r3, r2
 800b6ca:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b6ce:	f363 118f 	bfi	r1, r3, #6, #10
 800b6d2:	483a      	ldr	r0, [pc, #232]	; (800b7bc <bus_fault+0x1a8>)
 800b6d4:	f7fb f8a4 	bl	8006820 <log_0>
 800b6d8:	e7bb      	b.n	800b652 <bus_fault+0x3e>
		PR_FAULT_INFO("  Precise data bus error");
 800b6da:	f04f 0100 	mov.w	r1, #0
 800b6de:	2301      	movs	r3, #1
 800b6e0:	f363 0102 	bfi	r1, r3, #0, #3
 800b6e4:	f36f 01c5 	bfc	r1, #3, #3
 800b6e8:	4b2f      	ldr	r3, [pc, #188]	; (800b7a8 <bus_fault+0x194>)
 800b6ea:	4a30      	ldr	r2, [pc, #192]	; (800b7ac <bus_fault+0x198>)
 800b6ec:	1a9b      	subs	r3, r3, r2
 800b6ee:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b6f2:	f363 118f 	bfi	r1, r3, #6, #10
 800b6f6:	4832      	ldr	r0, [pc, #200]	; (800b7c0 <bus_fault+0x1ac>)
 800b6f8:	f7fb f892 	bl	8006820 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
 800b6fc:	4b2d      	ldr	r3, [pc, #180]	; (800b7b4 <bus_fault+0x1a0>)
 800b6fe:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 800b700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b702:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800b706:	d0a9      	beq.n	800b65c <bus_fault+0x48>
			PR_EXC("  BFAR Address: 0x%x", bfar);
 800b708:	f04f 0200 	mov.w	r2, #0
 800b70c:	2301      	movs	r3, #1
 800b70e:	f363 0202 	bfi	r2, r3, #0, #3
 800b712:	f36f 02c5 	bfc	r2, #3, #3
 800b716:	4b24      	ldr	r3, [pc, #144]	; (800b7a8 <bus_fault+0x194>)
 800b718:	4824      	ldr	r0, [pc, #144]	; (800b7ac <bus_fault+0x198>)
 800b71a:	1a1b      	subs	r3, r3, r0
 800b71c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b720:	f363 128f 	bfi	r2, r3, #6, #10
 800b724:	4827      	ldr	r0, [pc, #156]	; (800b7c4 <bus_fault+0x1b0>)
 800b726:	f7fa ff0b 	bl	8006540 <log_1>
			if (from_hard_fault) {
 800b72a:	2e00      	cmp	r6, #0
 800b72c:	d096      	beq.n	800b65c <bus_fault+0x48>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 800b72e:	4a21      	ldr	r2, [pc, #132]	; (800b7b4 <bus_fault+0x1a0>)
 800b730:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800b732:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b736:	6293      	str	r3, [r2, #40]	; 0x28
 800b738:	e790      	b.n	800b65c <bus_fault+0x48>
		PR_FAULT_INFO("  Imprecise data bus error");
 800b73a:	f04f 0100 	mov.w	r1, #0
 800b73e:	2301      	movs	r3, #1
 800b740:	f363 0102 	bfi	r1, r3, #0, #3
 800b744:	f36f 01c5 	bfc	r1, #3, #3
 800b748:	4b17      	ldr	r3, [pc, #92]	; (800b7a8 <bus_fault+0x194>)
 800b74a:	4a18      	ldr	r2, [pc, #96]	; (800b7ac <bus_fault+0x198>)
 800b74c:	1a9b      	subs	r3, r3, r2
 800b74e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b752:	f363 118f 	bfi	r1, r3, #6, #10
 800b756:	481c      	ldr	r0, [pc, #112]	; (800b7c8 <bus_fault+0x1b4>)
 800b758:	f7fb f862 	bl	8006820 <log_0>
 800b75c:	e783      	b.n	800b666 <bus_fault+0x52>
		PR_FAULT_INFO("  Instruction bus error");
 800b75e:	f04f 0100 	mov.w	r1, #0
 800b762:	2301      	movs	r3, #1
 800b764:	f363 0102 	bfi	r1, r3, #0, #3
 800b768:	f36f 01c5 	bfc	r1, #3, #3
 800b76c:	4b0e      	ldr	r3, [pc, #56]	; (800b7a8 <bus_fault+0x194>)
 800b76e:	4a0f      	ldr	r2, [pc, #60]	; (800b7ac <bus_fault+0x198>)
 800b770:	1a9b      	subs	r3, r3, r2
 800b772:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b776:	f363 118f 	bfi	r1, r3, #6, #10
 800b77a:	4814      	ldr	r0, [pc, #80]	; (800b7cc <bus_fault+0x1b8>)
 800b77c:	f7fb f850 	bl	8006820 <log_0>
 800b780:	e77c      	b.n	800b67c <bus_fault+0x68>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 800b782:	f04f 0100 	mov.w	r1, #0
 800b786:	2301      	movs	r3, #1
 800b788:	f363 0102 	bfi	r1, r3, #0, #3
 800b78c:	f36f 01c5 	bfc	r1, #3, #3
 800b790:	4b05      	ldr	r3, [pc, #20]	; (800b7a8 <bus_fault+0x194>)
 800b792:	4a06      	ldr	r2, [pc, #24]	; (800b7ac <bus_fault+0x198>)
 800b794:	1a9b      	subs	r3, r3, r2
 800b796:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b79a:	f363 118f 	bfi	r1, r3, #6, #10
 800b79e:	480c      	ldr	r0, [pc, #48]	; (800b7d0 <bus_fault+0x1bc>)
 800b7a0:	f7fb f83e 	bl	8006820 <log_0>
 800b7a4:	e76a      	b.n	800b67c <bus_fault+0x68>
 800b7a6:	bf00      	nop
 800b7a8:	08022c20 	.word	0x08022c20
 800b7ac:	08022b90 	.word	0x08022b90
 800b7b0:	0802608c 	.word	0x0802608c
 800b7b4:	e000ed00 	.word	0xe000ed00
 800b7b8:	080260a4 	.word	0x080260a4
 800b7bc:	08025ff8 	.word	0x08025ff8
 800b7c0:	080260b8 	.word	0x080260b8
 800b7c4:	080260d4 	.word	0x080260d4
 800b7c8:	080260ec 	.word	0x080260ec
 800b7cc:	08026108 	.word	0x08026108
 800b7d0:	0802605c 	.word	0x0802605c

0800b7d4 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
 800b7d4:	b570      	push	{r4, r5, r6, lr}
 800b7d6:	4605      	mov	r5, r0
 800b7d8:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** HARD FAULT *****");
 800b7da:	f04f 0100 	mov.w	r1, #0
 800b7de:	2301      	movs	r3, #1
 800b7e0:	f363 0102 	bfi	r1, r3, #0, #3
 800b7e4:	f36f 01c5 	bfc	r1, #3, #3
 800b7e8:	4b2b      	ldr	r3, [pc, #172]	; (800b898 <hard_fault+0xc4>)
 800b7ea:	4a2c      	ldr	r2, [pc, #176]	; (800b89c <hard_fault+0xc8>)
 800b7ec:	1a9b      	subs	r3, r3, r2
 800b7ee:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b7f2:	f363 118f 	bfi	r1, r3, #6, #10
 800b7f6:	482a      	ldr	r0, [pc, #168]	; (800b8a0 <hard_fault+0xcc>)
 800b7f8:	f7fb f812 	bl	8006820 <log_0>
	}
#undef _SVC_OPCODE

	*recoverable = memory_fault_recoverable(esf);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	7023      	strb	r3, [r4, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 800b800:	4b28      	ldr	r3, [pc, #160]	; (800b8a4 <hard_fault+0xd0>)
 800b802:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800b804:	f016 0602 	ands.w	r6, r6, #2
 800b808:	d105      	bne.n	800b816 <hard_fault+0x42>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 800b80a:	4b26      	ldr	r3, [pc, #152]	; (800b8a4 <hard_fault+0xd0>)
 800b80c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800b80e:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
 800b812:	d113      	bne.n	800b83c <hard_fault+0x68>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
 800b814:	bd70      	pop	{r4, r5, r6, pc}
		PR_EXC("  Bus fault on vector table read");
 800b816:	f04f 0100 	mov.w	r1, #0
 800b81a:	2301      	movs	r3, #1
 800b81c:	f363 0102 	bfi	r1, r3, #0, #3
 800b820:	f36f 01c5 	bfc	r1, #3, #3
 800b824:	4b1c      	ldr	r3, [pc, #112]	; (800b898 <hard_fault+0xc4>)
 800b826:	4a1d      	ldr	r2, [pc, #116]	; (800b89c <hard_fault+0xc8>)
 800b828:	1a9b      	subs	r3, r3, r2
 800b82a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b82e:	f363 118f 	bfi	r1, r3, #6, #10
 800b832:	481d      	ldr	r0, [pc, #116]	; (800b8a8 <hard_fault+0xd4>)
 800b834:	f7fa fff4 	bl	8006820 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800b838:	2000      	movs	r0, #0
 800b83a:	e7eb      	b.n	800b814 <hard_fault+0x40>
		PR_EXC("  Fault escalation (see below)");
 800b83c:	f04f 0100 	mov.w	r1, #0
 800b840:	2301      	movs	r3, #1
 800b842:	f363 0102 	bfi	r1, r3, #0, #3
 800b846:	f36f 01c5 	bfc	r1, #3, #3
 800b84a:	4b13      	ldr	r3, [pc, #76]	; (800b898 <hard_fault+0xc4>)
 800b84c:	4a13      	ldr	r2, [pc, #76]	; (800b89c <hard_fault+0xc8>)
 800b84e:	1a9b      	subs	r3, r3, r2
 800b850:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b854:	f363 118f 	bfi	r1, r3, #6, #10
 800b858:	4814      	ldr	r0, [pc, #80]	; (800b8ac <hard_fault+0xd8>)
 800b85a:	f7fa ffe1 	bl	8006820 <log_0>
		if (SCB_MMFSR != 0) {
 800b85e:	4b14      	ldr	r3, [pc, #80]	; (800b8b0 <hard_fault+0xdc>)
 800b860:	781b      	ldrb	r3, [r3, #0]
 800b862:	b943      	cbnz	r3, 800b876 <hard_fault+0xa2>
		} else if (SCB_BFSR != 0) {
 800b864:	4b13      	ldr	r3, [pc, #76]	; (800b8b4 <hard_fault+0xe0>)
 800b866:	781b      	ldrb	r3, [r3, #0]
 800b868:	b95b      	cbnz	r3, 800b882 <hard_fault+0xae>
		} else if (SCB_UFSR != 0) {
 800b86a:	4b13      	ldr	r3, [pc, #76]	; (800b8b8 <hard_fault+0xe4>)
 800b86c:	881b      	ldrh	r3, [r3, #0]
 800b86e:	b29b      	uxth	r3, r3
 800b870:	b96b      	cbnz	r3, 800b88e <hard_fault+0xba>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800b872:	4630      	mov	r0, r6
	return reason;
 800b874:	e7ce      	b.n	800b814 <hard_fault+0x40>
			reason = mem_manage_fault(esf, 1, recoverable);
 800b876:	4622      	mov	r2, r4
 800b878:	2101      	movs	r1, #1
 800b87a:	4628      	mov	r0, r5
 800b87c:	f7ff fe04 	bl	800b488 <mem_manage_fault>
 800b880:	e7c8      	b.n	800b814 <hard_fault+0x40>
			reason = bus_fault(esf, 1, recoverable);
 800b882:	4622      	mov	r2, r4
 800b884:	2101      	movs	r1, #1
 800b886:	4628      	mov	r0, r5
 800b888:	f7ff fec4 	bl	800b614 <bus_fault>
 800b88c:	e7c2      	b.n	800b814 <hard_fault+0x40>
			reason = usage_fault(esf);
 800b88e:	4628      	mov	r0, r5
 800b890:	f7ff fd26 	bl	800b2e0 <usage_fault>
 800b894:	e7be      	b.n	800b814 <hard_fault+0x40>
 800b896:	bf00      	nop
 800b898:	08022c20 	.word	0x08022c20
 800b89c:	08022b90 	.word	0x08022b90
 800b8a0:	08026120 	.word	0x08026120
 800b8a4:	e000ed00 	.word	0xe000ed00
 800b8a8:	08026138 	.word	0x08026138
 800b8ac:	0802615c 	.word	0x0802615c
 800b8b0:	e000ed28 	.word	0xe000ed28
 800b8b4:	e000ed29 	.word	0xe000ed29
 800b8b8:	e000ed2a 	.word	0xe000ed2a

0800b8bc <reserved_exception>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
 800b8bc:	b508      	push	{r3, lr}
 800b8be:	460a      	mov	r2, r1
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
 800b8c0:	f04f 0300 	mov.w	r3, #0
 800b8c4:	2101      	movs	r1, #1
 800b8c6:	f361 0302 	bfi	r3, r1, #0, #3
 800b8ca:	f36f 03c5 	bfc	r3, #3, #3
 800b8ce:	4808      	ldr	r0, [pc, #32]	; (800b8f0 <reserved_exception+0x34>)
 800b8d0:	4908      	ldr	r1, [pc, #32]	; (800b8f4 <reserved_exception+0x38>)
 800b8d2:	1a40      	subs	r0, r0, r1
 800b8d4:	f3c0 00c9 	ubfx	r0, r0, #3, #10
 800b8d8:	f360 138f 	bfi	r3, r0, #6, #10
 800b8dc:	2a0f      	cmp	r2, #15
 800b8de:	dc05      	bgt.n	800b8ec <reserved_exception+0x30>
 800b8e0:	4905      	ldr	r1, [pc, #20]	; (800b8f8 <reserved_exception+0x3c>)
 800b8e2:	3a10      	subs	r2, #16
 800b8e4:	4805      	ldr	r0, [pc, #20]	; (800b8fc <reserved_exception+0x40>)
 800b8e6:	f7fa feab 	bl	8006640 <log_2>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
 800b8ea:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****",
 800b8ec:	4904      	ldr	r1, [pc, #16]	; (800b900 <reserved_exception+0x44>)
 800b8ee:	e7f8      	b.n	800b8e2 <reserved_exception+0x26>
 800b8f0:	08022c20 	.word	0x08022c20
 800b8f4:	08022b90 	.word	0x08022b90
 800b8f8:	0802617c 	.word	0x0802617c
 800b8fc:	080261b0 	.word	0x080261b0
 800b900:	08026194 	.word	0x08026194

0800b904 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 800b904:	b570      	push	{r4, r5, r6, lr}
 800b906:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 800b908:	4b2b      	ldr	r3, [pc, #172]	; (800b9b8 <z_arm_fault+0xb4>)
 800b90a:	685d      	ldr	r5, [r3, #4]
 800b90c:	f3c5 0508 	ubfx	r5, r5, #0, #9
 800b910:	2300      	movs	r3, #0
 800b912:	f383 8811 	msr	BASEPRI, r3
 800b916:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 800b91a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 800b91e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800b922:	d12b      	bne.n	800b97c <z_arm_fault+0x78>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 800b924:	f002 030c 	and.w	r3, r2, #12
 800b928:	2b08      	cmp	r3, #8
 800b92a:	d010      	beq.n	800b94e <z_arm_fault+0x4a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 800b92c:	f012 0f08 	tst.w	r2, #8
 800b930:	d021      	beq.n	800b976 <z_arm_fault+0x72>
			ptr_esf =  (z_arch_esf_t *)psp;
 800b932:	460c      	mov	r4, r1
	*nested_exc = false;
 800b934:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
 800b936:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 800b93a:	4629      	mov	r1, r5
 800b93c:	4620      	mov	r0, r4
 800b93e:	f010 fe16 	bl	801c56e <fault_handle>
 800b942:	4605      	mov	r5, r0
	if (recoverable) {
 800b944:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800b948:	b1db      	cbz	r3, 800b982 <z_arm_fault+0x7e>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
 800b94a:	b00a      	add	sp, #40	; 0x28
 800b94c:	bd70      	pop	{r4, r5, r6, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 800b94e:	f04f 0100 	mov.w	r1, #0
 800b952:	2301      	movs	r3, #1
 800b954:	f363 0102 	bfi	r1, r3, #0, #3
 800b958:	f36f 01c5 	bfc	r1, #3, #3
 800b95c:	4b17      	ldr	r3, [pc, #92]	; (800b9bc <z_arm_fault+0xb8>)
 800b95e:	4a18      	ldr	r2, [pc, #96]	; (800b9c0 <z_arm_fault+0xbc>)
 800b960:	1a9b      	subs	r3, r3, r2
 800b962:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b966:	f363 118f 	bfi	r1, r3, #6, #10
 800b96a:	4816      	ldr	r0, [pc, #88]	; (800b9c4 <z_arm_fault+0xc0>)
 800b96c:	f7fa ff58 	bl	8006820 <log_0>
	*nested_exc = false;
 800b970:	2600      	movs	r6, #0
		return NULL;
 800b972:	4634      	mov	r4, r6
 800b974:	e7df      	b.n	800b936 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
 800b976:	4604      	mov	r4, r0
			*nested_exc = true;
 800b978:	2601      	movs	r6, #1
 800b97a:	e7dc      	b.n	800b936 <z_arm_fault+0x32>
	*nested_exc = false;
 800b97c:	2600      	movs	r6, #0
		return NULL;
 800b97e:	4634      	mov	r4, r6
 800b980:	e7d9      	b.n	800b936 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 800b982:	2220      	movs	r2, #32
 800b984:	4621      	mov	r1, r4
 800b986:	a801      	add	r0, sp, #4
 800b988:	f010 ff91 	bl	801c8ae <memcpy>
	if (nested_exc) {
 800b98c:	b14e      	cbz	r6, 800b9a2 <z_arm_fault+0x9e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 800b98e:	9b08      	ldr	r3, [sp, #32]
 800b990:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b994:	b95a      	cbnz	r2, 800b9ae <z_arm_fault+0xaa>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 800b996:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 800b99a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 800b99e:	9308      	str	r3, [sp, #32]
 800b9a0:	e005      	b.n	800b9ae <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 800b9a2:	9b08      	ldr	r3, [sp, #32]
 800b9a4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800b9a8:	f023 0301 	bic.w	r3, r3, #1
 800b9ac:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
 800b9ae:	a901      	add	r1, sp, #4
 800b9b0:	4628      	mov	r0, r5
 800b9b2:	f010 fdc2 	bl	801c53a <z_arm_fatal_error>
 800b9b6:	e7c8      	b.n	800b94a <z_arm_fault+0x46>
 800b9b8:	e000ed00 	.word	0xe000ed00
 800b9bc:	08022c20 	.word	0x08022c20
 800b9c0:	08022b90 	.word	0x08022b90
 800b9c4:	080261c4 	.word	0x080261c4

0800b9c8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 800b9c8:	4a02      	ldr	r2, [pc, #8]	; (800b9d4 <z_arm_fault_init+0xc>)
 800b9ca:	6953      	ldr	r3, [r2, #20]
 800b9cc:	f043 0310 	orr.w	r3, r3, #16
 800b9d0:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 800b9d2:	4770      	bx	lr
 800b9d4:	e000ed00 	.word	0xe000ed00

0800b9d8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 800b9d8:	4b04      	ldr	r3, [pc, #16]	; (800b9ec <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 800b9da:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 800b9dc:	6a18      	ldr	r0, [r3, #32]
	cmp r0, r1
 800b9de:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 800b9e0:	d003      	beq.n	800b9ea <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 800b9e2:	4903      	ldr	r1, [pc, #12]	; (800b9f0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 800b9e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 800b9e8:	600a      	str	r2, [r1, #0]

0800b9ea <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 800b9ea:	4770      	bx	lr
	ldr r3, =_kernel
 800b9ec:	200046e8 	.word	0x200046e8
	ldr r1, =_SCS_ICSR
 800b9f0:	e000ed04 	.word	0xe000ed04

0800b9f4 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
 800b9f4:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800b9f8:	4905      	ldr	r1, [pc, #20]	; (800ba10 <sys_arch_reboot+0x1c>)
 800b9fa:	68ca      	ldr	r2, [r1, #12]
 800b9fc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800ba00:	4b04      	ldr	r3, [pc, #16]	; (800ba14 <sys_arch_reboot+0x20>)
 800ba02:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800ba04:	60cb      	str	r3, [r1, #12]
 800ba06:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800ba0a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800ba0c:	e7fd      	b.n	800ba0a <sys_arch_reboot+0x16>
 800ba0e:	bf00      	nop
 800ba10:	e000ed00 	.word	0xe000ed00
 800ba14:	05fa0004 	.word	0x05fa0004

0800ba18 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 800ba18:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 800ba1a:	e006      	b.n	800ba2a <z_arm_interrupt_init+0x12>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ba1c:	f002 010f 	and.w	r1, r2, #15
 800ba20:	4b09      	ldr	r3, [pc, #36]	; (800ba48 <z_arm_interrupt_init+0x30>)
 800ba22:	440b      	add	r3, r1
 800ba24:	2110      	movs	r1, #16
 800ba26:	7619      	strb	r1, [r3, #24]
 800ba28:	3201      	adds	r2, #1
 800ba2a:	2a51      	cmp	r2, #81	; 0x51
 800ba2c:	dc0a      	bgt.n	800ba44 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
 800ba2e:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	dbf3      	blt.n	800ba1c <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ba34:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800ba38:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 800ba3c:	2110      	movs	r1, #16
 800ba3e:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
 800ba42:	e7f1      	b.n	800ba28 <z_arm_interrupt_init+0x10>
	}
}
 800ba44:	4770      	bx	lr
 800ba46:	bf00      	nop
 800ba48:	e000ecfc 	.word	0xe000ecfc

0800ba4c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
 800ba4c:	b510      	push	{r4, lr}
 800ba4e:	4604      	mov	r4, r0
	z_thread_single_abort(thread);
 800ba50:	f00c ff42 	bl	80188d8 <z_thread_single_abort>

	if (_current == thread) {
 800ba54:	4b11      	ldr	r3, [pc, #68]	; (800ba9c <z_impl_k_thread_abort+0x50>)
 800ba56:	689b      	ldr	r3, [r3, #8]
 800ba58:	42a3      	cmp	r3, r4
 800ba5a:	d00a      	beq.n	800ba72 <z_impl_k_thread_abort+0x26>
	__asm__ volatile(
 800ba5c:	f04f 0310 	mov.w	r3, #16
 800ba60:	f3ef 8011 	mrs	r0, BASEPRI
 800ba64:	f383 8811 	msr	BASEPRI, r3
 800ba68:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
 800ba6c:	f016 faae 	bl	8021fcc <z_reschedule_irqlock>
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
 800ba70:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba72:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 800ba76:	b12b      	cbz	r3, 800ba84 <z_impl_k_thread_abort+0x38>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800ba78:	4a09      	ldr	r2, [pc, #36]	; (800baa0 <z_impl_k_thread_abort+0x54>)
 800ba7a:	6853      	ldr	r3, [r2, #4]
 800ba7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba80:	6053      	str	r3, [r2, #4]
 800ba82:	e7eb      	b.n	800ba5c <z_impl_k_thread_abort+0x10>
 800ba84:	f04f 0310 	mov.w	r3, #16
 800ba88:	f3ef 8011 	mrs	r0, BASEPRI
 800ba8c:	f383 8811 	msr	BASEPRI, r3
 800ba90:	f3bf 8f6f 	isb	sy

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
	ret = arch_swap(key);
 800ba94:	f7ff fa92 	bl	800afbc <arch_swap>
}

static inline void z_swap_unlocked(void)
{
	(void) z_swap_irqlock(arch_irq_lock());
}
 800ba98:	e7e0      	b.n	800ba5c <z_impl_k_thread_abort+0x10>
 800ba9a:	bf00      	nop
 800ba9c:	200046e8 	.word	0x200046e8
 800baa0:	e000ed00 	.word	0xe000ed00

0800baa4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 800baa4:	4b01      	ldr	r3, [pc, #4]	; (800baac <__stdout_hook_install+0x8>)
 800baa6:	6018      	str	r0, [r3, #0]
}
 800baa8:	4770      	bx	lr
 800baaa:	bf00      	nop
 800baac:	20000b08 	.word	0x20000b08

0800bab0 <sprintf>:
	*(p.ptr) = 0;
	return r;
}

int sprintf(char *_MLIBC_RESTRICT s, const char *_MLIBC_RESTRICT format, ...)
{
 800bab0:	b40e      	push	{r1, r2, r3}
 800bab2:	b500      	push	{lr}
 800bab4:	b084      	sub	sp, #16
 800bab6:	ab05      	add	r3, sp, #20
 800bab8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list vargs;

	struct emitter p;
	int     r;

	p.ptr = s;
 800babc:	9001      	str	r0, [sp, #4]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
 800babe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bac2:	9102      	str	r1, [sp, #8]

	va_start(vargs, format);
 800bac4:	9303      	str	r3, [sp, #12]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
 800bac6:	a901      	add	r1, sp, #4
 800bac8:	4805      	ldr	r0, [pc, #20]	; (800bae0 <sprintf+0x30>)
 800baca:	f7f9 fe67 	bl	800579c <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
 800bace:	9b01      	ldr	r3, [sp, #4]
 800bad0:	2200      	movs	r2, #0
 800bad2:	701a      	strb	r2, [r3, #0]
	return r;
}
 800bad4:	b004      	add	sp, #16
 800bad6:	f85d eb04 	ldr.w	lr, [sp], #4
 800bada:	b003      	add	sp, #12
 800badc:	4770      	bx	lr
 800bade:	bf00      	nop
 800bae0:	0801c93b 	.word	0x0801c93b

0800bae4 <pinmux_stm32_init>:
    {STM32_PIN_PD0, STM32F3_PINMUX_FUNC_PD0_CAN1_RX},
    {STM32_PIN_PD1, STM32F3_PINMUX_FUNC_PD1_CAN1_TX},
#endif
};

static int pinmux_stm32_init(const struct device *port) {
 800bae4:	b508      	push	{r3, lr}
    ARG_UNUSED(port);

    stm32_setup_pins(pinconf, ARRAY_SIZE(pinconf));
 800bae6:	2102      	movs	r1, #2
 800bae8:	4802      	ldr	r0, [pc, #8]	; (800baf4 <pinmux_stm32_init+0x10>)
 800baea:	f7fd f9cd 	bl	8008e88 <stm32_setup_pins>

    return 0;
}
 800baee:	2000      	movs	r0, #0
 800baf0:	bd08      	pop	{r3, pc}
 800baf2:	bf00      	nop
 800baf4:	080261f0 	.word	0x080261f0

0800baf8 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
 800baf8:	2940      	cmp	r1, #64	; 0x40
 800bafa:	bf28      	it	cs
 800bafc:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
 800bafe:	2300      	movs	r3, #0
 800bb00:	428b      	cmp	r3, r1
 800bb02:	d217      	bcs.n	800bb34 <bt_hex_real+0x3c>
{
 800bb04:	b470      	push	{r4, r5, r6}
		str[i * 2]     = hex[b[i] >> 4];
 800bb06:	5cc4      	ldrb	r4, [r0, r3]
 800bb08:	0924      	lsrs	r4, r4, #4
 800bb0a:	005a      	lsls	r2, r3, #1
 800bb0c:	4e0c      	ldr	r6, [pc, #48]	; (800bb40 <bt_hex_real+0x48>)
 800bb0e:	5d34      	ldrb	r4, [r6, r4]
 800bb10:	4d0c      	ldr	r5, [pc, #48]	; (800bb44 <bt_hex_real+0x4c>)
 800bb12:	f805 4013 	strb.w	r4, [r5, r3, lsl #1]
		str[i * 2 + 1] = hex[b[i] & 0xf];
 800bb16:	5cc4      	ldrb	r4, [r0, r3]
 800bb18:	f004 040f 	and.w	r4, r4, #15
 800bb1c:	3201      	adds	r2, #1
 800bb1e:	5d34      	ldrb	r4, [r6, r4]
 800bb20:	54ac      	strb	r4, [r5, r2]
	for (i = 0; i < len; i++) {
 800bb22:	3301      	adds	r3, #1
 800bb24:	428b      	cmp	r3, r1
 800bb26:	d3ee      	bcc.n	800bb06 <bt_hex_real+0xe>
	}

	str[i * 2] = '\0';
 800bb28:	4806      	ldr	r0, [pc, #24]	; (800bb44 <bt_hex_real+0x4c>)
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]

	return str;
}
 800bb30:	bc70      	pop	{r4, r5, r6}
 800bb32:	4770      	bx	lr
	str[i * 2] = '\0';
 800bb34:	4803      	ldr	r0, [pc, #12]	; (800bb44 <bt_hex_real+0x4c>)
 800bb36:	2200      	movs	r2, #0
 800bb38:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
}
 800bb3c:	4770      	bx	lr
 800bb3e:	bf00      	nop
 800bb40:	08026200 	.word	0x08026200
 800bb44:	20004068 	.word	0x20004068

0800bb48 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
 800bb48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb4a:	b08b      	sub	sp, #44	; 0x2c
 800bb4c:	4604      	mov	r4, r0
	switch (addr->type) {
 800bb4e:	7803      	ldrb	r3, [r0, #0]
 800bb50:	2b03      	cmp	r3, #3
 800bb52:	d82c      	bhi.n	800bbae <bt_addr_le_str_real+0x66>
 800bb54:	e8df f003 	tbb	[pc, r3]
 800bb58:	26211c02 	.word	0x26211c02
		strcpy(type, "public");
 800bb5c:	4917      	ldr	r1, [pc, #92]	; (800bbbc <bt_addr_le_str_real+0x74>)
 800bb5e:	a807      	add	r0, sp, #28
 800bb60:	f010 fe2f 	bl	801c7c2 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
 800bb64:	7963      	ldrb	r3, [r4, #5]
 800bb66:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
 800bb68:	78e1      	ldrb	r1, [r4, #3]
 800bb6a:	78a0      	ldrb	r0, [r4, #2]
 800bb6c:	7866      	ldrb	r6, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
 800bb6e:	4d14      	ldr	r5, [pc, #80]	; (800bbc0 <bt_addr_le_str_real+0x78>)
 800bb70:	af07      	add	r7, sp, #28
 800bb72:	9705      	str	r7, [sp, #20]
 800bb74:	9604      	str	r6, [sp, #16]
 800bb76:	9003      	str	r0, [sp, #12]
 800bb78:	9102      	str	r1, [sp, #8]
 800bb7a:	9201      	str	r2, [sp, #4]
 800bb7c:	9300      	str	r3, [sp, #0]
 800bb7e:	79a3      	ldrb	r3, [r4, #6]
 800bb80:	4a10      	ldr	r2, [pc, #64]	; (800bbc4 <bt_addr_le_str_real+0x7c>)
 800bb82:	211e      	movs	r1, #30
 800bb84:	4628      	mov	r0, r5
 800bb86:	f00e fa53 	bl	801a030 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
 800bb8a:	4628      	mov	r0, r5
 800bb8c:	b00b      	add	sp, #44	; 0x2c
 800bb8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
 800bb90:	490d      	ldr	r1, [pc, #52]	; (800bbc8 <bt_addr_le_str_real+0x80>)
 800bb92:	a807      	add	r0, sp, #28
 800bb94:	f010 fe15 	bl	801c7c2 <strcpy>
		break;
 800bb98:	e7e4      	b.n	800bb64 <bt_addr_le_str_real+0x1c>
		strcpy(type, "public-id");
 800bb9a:	490c      	ldr	r1, [pc, #48]	; (800bbcc <bt_addr_le_str_real+0x84>)
 800bb9c:	a807      	add	r0, sp, #28
 800bb9e:	f010 fe10 	bl	801c7c2 <strcpy>
		break;
 800bba2:	e7df      	b.n	800bb64 <bt_addr_le_str_real+0x1c>
		strcpy(type, "random-id");
 800bba4:	490a      	ldr	r1, [pc, #40]	; (800bbd0 <bt_addr_le_str_real+0x88>)
 800bba6:	a807      	add	r0, sp, #28
 800bba8:	f010 fe0b 	bl	801c7c2 <strcpy>
		break;
 800bbac:	e7da      	b.n	800bb64 <bt_addr_le_str_real+0x1c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
 800bbae:	4a09      	ldr	r2, [pc, #36]	; (800bbd4 <bt_addr_le_str_real+0x8c>)
 800bbb0:	210a      	movs	r1, #10
 800bbb2:	a807      	add	r0, sp, #28
 800bbb4:	f00e fa3c 	bl	801a030 <snprintk>
		break;
 800bbb8:	e7d4      	b.n	800bb64 <bt_addr_le_str_real+0x1c>
 800bbba:	bf00      	nop
 800bbbc:	08023c50 	.word	0x08023c50
 800bbc0:	200040ec 	.word	0x200040ec
 800bbc4:	08023c78 	.word	0x08023c78
 800bbc8:	08023c58 	.word	0x08023c58
 800bbcc:	08023c60 	.word	0x08023c60
 800bbd0:	08023c6c 	.word	0x08023c6c
 800bbd4:	08027b48 	.word	0x08027b48

0800bbd8 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
 800bbd8:	b508      	push	{r3, lr}
	int err;
	BT_INFO("Saving ID");
 800bbda:	f04f 0100 	mov.w	r1, #0
 800bbde:	2303      	movs	r3, #3
 800bbe0:	f363 0102 	bfi	r1, r3, #0, #3
 800bbe4:	f36f 01c5 	bfc	r1, #3, #3
 800bbe8:	4b12      	ldr	r3, [pc, #72]	; (800bc34 <save_id+0x5c>)
 800bbea:	4a13      	ldr	r2, [pc, #76]	; (800bc38 <save_id+0x60>)
 800bbec:	1a9b      	subs	r3, r3, r2
 800bbee:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800bbf2:	f363 118f 	bfi	r1, r3, #6, #10
 800bbf6:	4811      	ldr	r0, [pc, #68]	; (800bc3c <save_id+0x64>)
 800bbf8:	f7fa fe12 	bl	8006820 <log_0>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
 800bbfc:	4910      	ldr	r1, [pc, #64]	; (800bc40 <save_id+0x68>)
 800bbfe:	79ca      	ldrb	r2, [r1, #7]
	err = settings_save_one("bt/id", &bt_dev.id_addr,
 800bc00:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800bc04:	480f      	ldr	r0, [pc, #60]	; (800bc44 <save_id+0x6c>)
 800bc06:	f7fc fccf 	bl	80085a8 <settings_save_one>
	if (err) {
 800bc0a:	b900      	cbnz	r0, 800bc0e <save_id+0x36>
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
 800bc0c:	bd08      	pop	{r3, pc}
 800bc0e:	4601      	mov	r1, r0
		BT_ERR("Failed to save ID (err %d)", err);
 800bc10:	f04f 0200 	mov.w	r2, #0
 800bc14:	2301      	movs	r3, #1
 800bc16:	f363 0202 	bfi	r2, r3, #0, #3
 800bc1a:	f36f 02c5 	bfc	r2, #3, #3
 800bc1e:	4b05      	ldr	r3, [pc, #20]	; (800bc34 <save_id+0x5c>)
 800bc20:	4805      	ldr	r0, [pc, #20]	; (800bc38 <save_id+0x60>)
 800bc22:	1a1b      	subs	r3, r3, r0
 800bc24:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800bc28:	f363 128f 	bfi	r2, r3, #6, #10
 800bc2c:	4806      	ldr	r0, [pc, #24]	; (800bc48 <save_id+0x70>)
 800bc2e:	f7fa fc87 	bl	8006540 <log_1>
}
 800bc32:	e7eb      	b.n	800bc0c <save_id+0x34>
 800bc34:	08022be8 	.word	0x08022be8
 800bc38:	08022b90 	.word	0x08022b90
 800bc3c:	0802621c 	.word	0x0802621c
 800bc40:	20000000 	.word	0x20000000
 800bc44:	08026228 	.word	0x08026228
 800bc48:	08026230 	.word	0x08026230

0800bc4c <set>:
{
 800bc4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc4e:	b083      	sub	sp, #12
	if (!name) {
 800bc50:	2800      	cmp	r0, #0
 800bc52:	d03c      	beq.n	800bcce <set+0x82>
 800bc54:	4616      	mov	r6, r2
 800bc56:	461d      	mov	r5, r3
 800bc58:	4604      	mov	r4, r0
	len = settings_name_next(name, &next);
 800bc5a:	a901      	add	r1, sp, #4
 800bc5c:	f00f fe99 	bl	801b992 <settings_name_next>
 800bc60:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
 800bc62:	4941      	ldr	r1, [pc, #260]	; (800bd68 <set+0x11c>)
 800bc64:	4620      	mov	r0, r4
 800bc66:	f010 fdee 	bl	801c846 <strncmp>
 800bc6a:	4607      	mov	r7, r0
 800bc6c:	2800      	cmp	r0, #0
 800bc6e:	d177      	bne.n	800bd60 <set+0x114>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800bc70:	f3bf 8f5b 	dmb	ish
 800bc74:	4b3d      	ldr	r3, [pc, #244]	; (800bd6c <set+0x120>)
 800bc76:	6819      	ldr	r1, [r3, #0]
 800bc78:	f3bf 8f5b 	dmb	ish
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
 800bc7c:	f3c1 0480 	ubfx	r4, r1, #2, #1
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
 800bc80:	f011 0f04 	tst.w	r1, #4
 800bc84:	d137      	bne.n	800bcf6 <set+0xaa>
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
 800bc86:	2207      	movs	r2, #7
 800bc88:	4939      	ldr	r1, [pc, #228]	; (800bd70 <set+0x124>)
 800bc8a:	4628      	mov	r0, r5
 800bc8c:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
 800bc8e:	2806      	cmp	r0, #6
 800bc90:	d857      	bhi.n	800bd42 <set+0xf6>
			if (len < 0) {
 800bc92:	2800      	cmp	r0, #0
 800bc94:	db42      	blt.n	800bd1c <set+0xd0>
				BT_ERR("Invalid length ID address in storage");
 800bc96:	f04f 0100 	mov.w	r1, #0
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	f363 0102 	bfi	r1, r3, #0, #3
 800bca0:	f36f 01c5 	bfc	r1, #3, #3
 800bca4:	4b33      	ldr	r3, [pc, #204]	; (800bd74 <set+0x128>)
 800bca6:	4a34      	ldr	r2, [pc, #208]	; (800bd78 <set+0x12c>)
 800bca8:	1a9b      	subs	r3, r3, r2
 800bcaa:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800bcae:	f363 118f 	bfi	r1, r3, #6, #10
 800bcb2:	4832      	ldr	r0, [pc, #200]	; (800bd7c <set+0x130>)
 800bcb4:	f7fa fdb4 	bl	8006820 <log_0>
			(void)memset(bt_dev.id_addr, 0,
 800bcb8:	4d2d      	ldr	r5, [pc, #180]	; (800bd70 <set+0x124>)
 800bcba:	2207      	movs	r2, #7
 800bcbc:	2100      	movs	r1, #0
 800bcbe:	4628      	mov	r0, r5
 800bcc0:	f010 fe1a 	bl	801c8f8 <memset>
			bt_dev.id_count = 0U;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	71eb      	strb	r3, [r5, #7]
}
 800bcc8:	4620      	mov	r0, r4
 800bcca:	b003      	add	sp, #12
 800bccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("Insufficient number of arguments");
 800bcce:	f04f 0100 	mov.w	r1, #0
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	f363 0102 	bfi	r1, r3, #0, #3
 800bcd8:	f36f 01c5 	bfc	r1, #3, #3
 800bcdc:	4b25      	ldr	r3, [pc, #148]	; (800bd74 <set+0x128>)
 800bcde:	4a26      	ldr	r2, [pc, #152]	; (800bd78 <set+0x12c>)
 800bce0:	1a9b      	subs	r3, r3, r2
 800bce2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800bce6:	f363 118f 	bfi	r1, r3, #6, #10
 800bcea:	4825      	ldr	r0, [pc, #148]	; (800bd80 <set+0x134>)
 800bcec:	f7fa fd98 	bl	8006820 <log_0>
		return -ENOENT;
 800bcf0:	f06f 0401 	mvn.w	r4, #1
 800bcf4:	e7e8      	b.n	800bcc8 <set+0x7c>
			BT_WARN("Ignoring identities stored in flash");
 800bcf6:	f04f 0100 	mov.w	r1, #0
 800bcfa:	2302      	movs	r3, #2
 800bcfc:	f363 0102 	bfi	r1, r3, #0, #3
 800bd00:	f36f 01c5 	bfc	r1, #3, #3
 800bd04:	4b1b      	ldr	r3, [pc, #108]	; (800bd74 <set+0x128>)
 800bd06:	4a1c      	ldr	r2, [pc, #112]	; (800bd78 <set+0x12c>)
 800bd08:	1a9b      	subs	r3, r3, r2
 800bd0a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800bd0e:	f363 118f 	bfi	r1, r3, #6, #10
 800bd12:	481c      	ldr	r0, [pc, #112]	; (800bd84 <set+0x138>)
 800bd14:	f7fa fd84 	bl	8006820 <log_0>
			return 0;
 800bd18:	463c      	mov	r4, r7
 800bd1a:	e7d5      	b.n	800bcc8 <set+0x7c>
				BT_ERR("Failed to read ID address from storage"
 800bd1c:	f04f 0200 	mov.w	r2, #0
 800bd20:	2301      	movs	r3, #1
 800bd22:	f363 0202 	bfi	r2, r3, #0, #3
 800bd26:	f36f 02c5 	bfc	r2, #3, #3
 800bd2a:	4b12      	ldr	r3, [pc, #72]	; (800bd74 <set+0x128>)
 800bd2c:	4912      	ldr	r1, [pc, #72]	; (800bd78 <set+0x12c>)
 800bd2e:	1a5b      	subs	r3, r3, r1
 800bd30:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800bd34:	f363 128f 	bfi	r2, r3, #6, #10
 800bd38:	4601      	mov	r1, r0
 800bd3a:	4813      	ldr	r0, [pc, #76]	; (800bd88 <set+0x13c>)
 800bd3c:	f7fa fc00 	bl	8006540 <log_1>
 800bd40:	e7ba      	b.n	800bcb8 <set+0x6c>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
 800bd42:	4a12      	ldr	r2, [pc, #72]	; (800bd8c <set+0x140>)
 800bd44:	fba2 3200 	umull	r3, r2, r2, r0
 800bd48:	1a80      	subs	r0, r0, r2
 800bd4a:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 800bd4e:	f3c2 0287 	ubfx	r2, r2, #2, #8
 800bd52:	4b07      	ldr	r3, [pc, #28]	; (800bd70 <set+0x124>)
 800bd54:	71da      	strb	r2, [r3, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
 800bd56:	4623      	mov	r3, r4
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	dab5      	bge.n	800bcc8 <set+0x7c>
 800bd5c:	3301      	adds	r3, #1
 800bd5e:	e7fb      	b.n	800bd58 <set+0x10c>
	return -ENOENT;
 800bd60:	f06f 0401 	mvn.w	r4, #1
 800bd64:	e7b0      	b.n	800bcc8 <set+0x7c>
 800bd66:	bf00      	nop
 800bd68:	08026270 	.word	0x08026270
 800bd6c:	20000094 	.word	0x20000094
 800bd70:	20000000 	.word	0x20000000
 800bd74:	08022be8 	.word	0x08022be8
 800bd78:	08022b90 	.word	0x08022b90
 800bd7c:	080262cc 	.word	0x080262cc
 800bd80:	0802624c 	.word	0x0802624c
 800bd84:	08026274 	.word	0x08026274
 800bd88:	08026298 	.word	0x08026298
 800bd8c:	24924925 	.word	0x24924925

0800bd90 <bt_settings_encode_key>:
{
 800bd90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd94:	b088      	sub	sp, #32
 800bd96:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	if (key) {
 800bd98:	b1dc      	cbz	r4, 800bdd2 <bt_settings_encode_key+0x42>
			 addr->a.val[5], addr->a.val[4], addr->a.val[3],
 800bd9a:	799d      	ldrb	r5, [r3, #6]
 800bd9c:	795e      	ldrb	r6, [r3, #5]
 800bd9e:	791f      	ldrb	r7, [r3, #4]
			 addr->a.val[2], addr->a.val[1], addr->a.val[0],
 800bda0:	f893 c003 	ldrb.w	ip, [r3, #3]
 800bda4:	f893 e002 	ldrb.w	lr, [r3, #2]
 800bda8:	f893 8001 	ldrb.w	r8, [r3, #1]
			 addr->type, key);
 800bdac:	781b      	ldrb	r3, [r3, #0]
		snprintk(path, path_size,
 800bdae:	9407      	str	r4, [sp, #28]
 800bdb0:	9306      	str	r3, [sp, #24]
 800bdb2:	f8cd 8014 	str.w	r8, [sp, #20]
 800bdb6:	f8cd e010 	str.w	lr, [sp, #16]
 800bdba:	f8cd c00c 	str.w	ip, [sp, #12]
 800bdbe:	9702      	str	r7, [sp, #8]
 800bdc0:	9601      	str	r6, [sp, #4]
 800bdc2:	9500      	str	r5, [sp, #0]
 800bdc4:	4613      	mov	r3, r2
 800bdc6:	4a0e      	ldr	r2, [pc, #56]	; (800be00 <bt_settings_encode_key+0x70>)
 800bdc8:	f00e f932 	bl	801a030 <snprintk>
}
 800bdcc:	b008      	add	sp, #32
 800bdce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			 addr->a.val[5], addr->a.val[4], addr->a.val[3],
 800bdd2:	799c      	ldrb	r4, [r3, #6]
 800bdd4:	795d      	ldrb	r5, [r3, #5]
 800bdd6:	791e      	ldrb	r6, [r3, #4]
			 addr->a.val[2], addr->a.val[1], addr->a.val[0],
 800bdd8:	78df      	ldrb	r7, [r3, #3]
 800bdda:	f893 c002 	ldrb.w	ip, [r3, #2]
 800bdde:	f893 e001 	ldrb.w	lr, [r3, #1]
			 addr->type);
 800bde2:	781b      	ldrb	r3, [r3, #0]
		snprintk(path, path_size,
 800bde4:	9306      	str	r3, [sp, #24]
 800bde6:	f8cd e014 	str.w	lr, [sp, #20]
 800bdea:	f8cd c010 	str.w	ip, [sp, #16]
 800bdee:	9703      	str	r7, [sp, #12]
 800bdf0:	9602      	str	r6, [sp, #8]
 800bdf2:	9501      	str	r5, [sp, #4]
 800bdf4:	9400      	str	r4, [sp, #0]
 800bdf6:	4613      	mov	r3, r2
 800bdf8:	4a02      	ldr	r2, [pc, #8]	; (800be04 <bt_settings_encode_key+0x74>)
 800bdfa:	f00e f919 	bl	801a030 <snprintk>
}
 800bdfe:	e7e5      	b.n	800bdcc <bt_settings_encode_key+0x3c>
 800be00:	080262f4 	.word	0x080262f4
 800be04:	08026318 	.word	0x08026318

0800be08 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
 800be08:	b508      	push	{r3, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800be0a:	4b0b      	ldr	r3, [pc, #44]	; (800be38 <bt_settings_save_id+0x30>)
 800be0c:	f3bf 8f5b 	dmb	ish
 800be10:	e853 2f00 	ldrex	r2, [r3]
 800be14:	f042 0101 	orr.w	r1, r2, #1
 800be18:	e843 1000 	strex	r0, r1, [r3]
 800be1c:	2800      	cmp	r0, #0
 800be1e:	d1f7      	bne.n	800be10 <bt_settings_save_id+0x8>
 800be20:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 800be24:	f012 0f01 	tst.w	r2, #1
 800be28:	d000      	beq.n	800be2c <bt_settings_save_id+0x24>
	k_work_submit(&save_id_work);
}
 800be2a:	bd08      	pop	{r3, pc}
		k_queue_append(&work_q->queue, work);
 800be2c:	f1a3 0108 	sub.w	r1, r3, #8
 800be30:	4802      	ldr	r0, [pc, #8]	; (800be3c <bt_settings_save_id+0x34>)
 800be32:	f016 f83f 	bl	8021eb4 <k_queue_append>
 800be36:	e7f8      	b.n	800be2a <bt_settings_save_id+0x22>
 800be38:	20000b14 	.word	0x20000b14
 800be3c:	20003310 	.word	0x20003310

0800be40 <commit>:

static int commit(void)
{
 800be40:	b510      	push	{r4, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
 800be42:	4b20      	ldr	r3, [pc, #128]	; (800bec4 <commit+0x84>)
 800be44:	79db      	ldrb	r3, [r3, #7]
 800be46:	b30b      	cbz	r3, 800be8c <commit+0x4c>
		bt_setup_public_id_addr();
	}

	if (!bt_dev.id_count) {
 800be48:	4b1e      	ldr	r3, [pc, #120]	; (800bec4 <commit+0x84>)
 800be4a:	79db      	ldrb	r3, [r3, #7]
 800be4c:	b91b      	cbnz	r3, 800be56 <commit+0x16>
		int err;

		err = bt_setup_random_id_addr();
 800be4e:	f011 f98e 	bl	801d16e <bt_setup_random_id_addr>
		if (err) {
 800be52:	4604      	mov	r4, r0
 800be54:	b9e8      	cbnz	r0, 800be92 <commit+0x52>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800be56:	f3bf 8f5b 	dmb	ish
 800be5a:	4b1b      	ldr	r3, [pc, #108]	; (800bec8 <commit+0x88>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f3bf 8f5b 	dmb	ish
			BT_ERR("Unable to setup an identity address");
			return err;
		}
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
 800be62:	f013 0f02 	tst.w	r3, #2
 800be66:	d026      	beq.n	800beb6 <commit+0x76>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800be68:	4b17      	ldr	r3, [pc, #92]	; (800bec8 <commit+0x88>)
 800be6a:	f3bf 8f5b 	dmb	ish
 800be6e:	e853 4f00 	ldrex	r4, [r3]
 800be72:	f424 4200 	bic.w	r2, r4, #32768	; 0x8000
 800be76:	e843 2100 	strex	r1, r2, [r3]
 800be7a:	2900      	cmp	r1, #0
 800be7c:	d1f7      	bne.n	800be6e <commit+0x2e>
 800be7e:	f3bf 8f5b 	dmb	ish
	}

	/* If any part of the Identity Information of the device has been
	 * generated this Identity needs to be saved persistently.
	 */
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
 800be82:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
 800be86:	d119      	bne.n	800bebc <commit+0x7c>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
 800be88:	4620      	mov	r0, r4
 800be8a:	bd10      	pop	{r4, pc}
		bt_setup_public_id_addr();
 800be8c:	f003 f99e 	bl	800f1cc <bt_setup_public_id_addr>
 800be90:	e7da      	b.n	800be48 <commit+0x8>
			BT_ERR("Unable to setup an identity address");
 800be92:	f04f 0100 	mov.w	r1, #0
 800be96:	2301      	movs	r3, #1
 800be98:	f363 0102 	bfi	r1, r3, #0, #3
 800be9c:	f36f 01c5 	bfc	r1, #3, #3
 800bea0:	4b0a      	ldr	r3, [pc, #40]	; (800becc <commit+0x8c>)
 800bea2:	4a0b      	ldr	r2, [pc, #44]	; (800bed0 <commit+0x90>)
 800bea4:	1a9b      	subs	r3, r3, r2
 800bea6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800beaa:	f363 118f 	bfi	r1, r3, #6, #10
 800beae:	4809      	ldr	r0, [pc, #36]	; (800bed4 <commit+0x94>)
 800beb0:	f7fa fcb6 	bl	8006820 <log_0>
			return err;
 800beb4:	e7e8      	b.n	800be88 <commit+0x48>
		bt_finalize_init();
 800beb6:	f003 f839 	bl	800ef2c <bt_finalize_init>
 800beba:	e7d5      	b.n	800be68 <commit+0x28>
		bt_settings_save_id();
 800bebc:	f7ff ffa4 	bl	800be08 <bt_settings_save_id>
	return 0;
 800bec0:	2400      	movs	r4, #0
 800bec2:	e7e1      	b.n	800be88 <commit+0x48>
 800bec4:	20000000 	.word	0x20000000
 800bec8:	20000094 	.word	0x20000094
 800becc:	08022be8 	.word	0x08022be8
 800bed0:	08022b90 	.word	0x08022b90
 800bed4:	0802633c 	.word	0x0802633c

0800bed8 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
 800bed8:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
 800beda:	f7fc fd39 	bl	8008950 <settings_subsys_init>
	if (err) {
 800bede:	4604      	mov	r4, r0
 800bee0:	b908      	cbnz	r0, 800bee6 <bt_settings_init+0xe>
		BT_ERR("settings_subsys_init failed (err %d)", err);
		return err;
	}

	return 0;
}
 800bee2:	4620      	mov	r0, r4
 800bee4:	bd10      	pop	{r4, pc}
		BT_ERR("settings_subsys_init failed (err %d)", err);
 800bee6:	f04f 0200 	mov.w	r2, #0
 800beea:	2301      	movs	r3, #1
 800beec:	f363 0202 	bfi	r2, r3, #0, #3
 800bef0:	f36f 02c5 	bfc	r2, #3, #3
 800bef4:	4b05      	ldr	r3, [pc, #20]	; (800bf0c <bt_settings_init+0x34>)
 800bef6:	4906      	ldr	r1, [pc, #24]	; (800bf10 <bt_settings_init+0x38>)
 800bef8:	1a5b      	subs	r3, r3, r1
 800befa:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800befe:	f363 128f 	bfi	r2, r3, #6, #10
 800bf02:	4601      	mov	r1, r0
 800bf04:	4803      	ldr	r0, [pc, #12]	; (800bf14 <bt_settings_init+0x3c>)
 800bf06:	f7fa fb1b 	bl	8006540 <log_1>
		return err;
 800bf0a:	e7ea      	b.n	800bee2 <bt_settings_init+0xa>
 800bf0c:	08022be8 	.word	0x08022be8
 800bf10:	08022b90 	.word	0x08022b90
 800bf14:	08026360 	.word	0x08026360

0800bf18 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
 800bf18:	b570      	push	{r4, r5, r6, lr}
 800bf1a:	4605      	mov	r5, r0
 800bf1c:	460c      	mov	r4, r1
	switch (src->type) {
 800bf1e:	7803      	ldrb	r3, [r0, #0]
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	d010      	beq.n	800bf46 <uuid_to_uuid128+0x2e>
 800bf24:	2b02      	cmp	r3, #2
 800bf26:	d020      	beq.n	800bf6a <uuid_to_uuid128+0x52>
 800bf28:	b103      	cbz	r3, 800bf2c <uuid_to_uuid128+0x14>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
 800bf2a:	bd70      	pop	{r4, r5, r6, pc}
		*dst = uuid128_base;
 800bf2c:	4e12      	ldr	r6, [pc, #72]	; (800bf78 <uuid_to_uuid128+0x60>)
 800bf2e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800bf30:	6020      	str	r0, [r4, #0]
 800bf32:	6061      	str	r1, [r4, #4]
 800bf34:	60a2      	str	r2, [r4, #8]
 800bf36:	60e3      	str	r3, [r4, #12]
 800bf38:	7833      	ldrb	r3, [r6, #0]
 800bf3a:	7423      	strb	r3, [r4, #16]
		sys_put_le16(BT_UUID_16(src)->val,
 800bf3c:	886b      	ldrh	r3, [r5, #2]
	dst[0] = val;
 800bf3e:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
 800bf40:	0a1b      	lsrs	r3, r3, #8
 800bf42:	73a3      	strb	r3, [r4, #14]
}
 800bf44:	e7f1      	b.n	800bf2a <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
 800bf46:	4e0c      	ldr	r6, [pc, #48]	; (800bf78 <uuid_to_uuid128+0x60>)
 800bf48:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800bf4a:	6020      	str	r0, [r4, #0]
 800bf4c:	6061      	str	r1, [r4, #4]
 800bf4e:	60a2      	str	r2, [r4, #8]
 800bf50:	60e3      	str	r3, [r4, #12]
 800bf52:	7833      	ldrb	r3, [r6, #0]
 800bf54:	7423      	strb	r3, [r4, #16]
		sys_put_le32(BT_UUID_32(src)->val,
 800bf56:	686b      	ldr	r3, [r5, #4]
	dst[0] = val;
 800bf58:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
 800bf5a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800bf5e:	73a2      	strb	r2, [r4, #14]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
 800bf60:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
 800bf62:	73e2      	strb	r2, [r4, #15]
	dst[1] = val >> 8;
 800bf64:	0e1b      	lsrs	r3, r3, #24
 800bf66:	7423      	strb	r3, [r4, #16]
}
 800bf68:	e7df      	b.n	800bf2a <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
 800bf6a:	2211      	movs	r2, #17
 800bf6c:	4601      	mov	r1, r0
 800bf6e:	4620      	mov	r0, r4
 800bf70:	f010 fc9d 	bl	801c8ae <memcpy>
		return;
 800bf74:	e7d9      	b.n	800bf2a <uuid_to_uuid128+0x12>
 800bf76:	bf00      	nop
 800bf78:	080263bc 	.word	0x080263bc

0800bf7c <bt_uuid_to_str>:
	}
	return true;
}

void bt_uuid_to_str(const struct bt_uuid *uuid, char *str, size_t len)
{
 800bf7c:	b570      	push	{r4, r5, r6, lr}
 800bf7e:	b08a      	sub	sp, #40	; 0x28
 800bf80:	4604      	mov	r4, r0
 800bf82:	460d      	mov	r5, r1
 800bf84:	4616      	mov	r6, r2
	uint32_t tmp1, tmp5;
	uint16_t tmp0, tmp2, tmp3, tmp4;

	switch (uuid->type) {
 800bf86:	7803      	ldrb	r3, [r0, #0]
 800bf88:	2b01      	cmp	r3, #1
 800bf8a:	d00f      	beq.n	800bfac <bt_uuid_to_str+0x30>
 800bf8c:	2b02      	cmp	r3, #2
 800bf8e:	d014      	beq.n	800bfba <bt_uuid_to_str+0x3e>
 800bf90:	b123      	cbz	r3, 800bf9c <bt_uuid_to_str+0x20>

		snprintk(str, len, "%08x-%04x-%04x-%04x-%08x%04x",
			 tmp5, tmp4, tmp3, tmp2, tmp1, tmp0);
		break;
	default:
		(void)memset(str, 0, len);
 800bf92:	2100      	movs	r1, #0
 800bf94:	4628      	mov	r0, r5
 800bf96:	f010 fcaf 	bl	801c8f8 <memset>
		return;
 800bf9a:	e005      	b.n	800bfa8 <bt_uuid_to_str+0x2c>
		snprintk(str, len, "%04x", BT_UUID_16(uuid)->val);
 800bf9c:	8843      	ldrh	r3, [r0, #2]
 800bf9e:	4a23      	ldr	r2, [pc, #140]	; (800c02c <bt_uuid_to_str+0xb0>)
 800bfa0:	4631      	mov	r1, r6
 800bfa2:	4628      	mov	r0, r5
 800bfa4:	f00e f844 	bl	801a030 <snprintk>
	}
}
 800bfa8:	b00a      	add	sp, #40	; 0x28
 800bfaa:	bd70      	pop	{r4, r5, r6, pc}
		snprintk(str, len, "%08x", BT_UUID_32(uuid)->val);
 800bfac:	6843      	ldr	r3, [r0, #4]
 800bfae:	4a20      	ldr	r2, [pc, #128]	; (800c030 <bt_uuid_to_str+0xb4>)
 800bfb0:	4631      	mov	r1, r6
 800bfb2:	4628      	mov	r0, r5
 800bfb4:	f00e f83c 	bl	801a030 <snprintk>
		break;
 800bfb8:	e7f6      	b.n	800bfa8 <bt_uuid_to_str+0x2c>
		memcpy(&tmp0, &BT_UUID_128(uuid)->val[0], sizeof(tmp0));
 800bfba:	2202      	movs	r2, #2
 800bfbc:	1c41      	adds	r1, r0, #1
 800bfbe:	f10d 001e 	add.w	r0, sp, #30
 800bfc2:	f010 fc74 	bl	801c8ae <memcpy>
		memcpy(&tmp1, &BT_UUID_128(uuid)->val[2], sizeof(tmp1));
 800bfc6:	2204      	movs	r2, #4
 800bfc8:	1ce1      	adds	r1, r4, #3
 800bfca:	a809      	add	r0, sp, #36	; 0x24
 800bfcc:	f010 fc6f 	bl	801c8ae <memcpy>
		memcpy(&tmp2, &BT_UUID_128(uuid)->val[6], sizeof(tmp2));
 800bfd0:	2202      	movs	r2, #2
 800bfd2:	1de1      	adds	r1, r4, #7
 800bfd4:	a807      	add	r0, sp, #28
 800bfd6:	f010 fc6a 	bl	801c8ae <memcpy>
		memcpy(&tmp3, &BT_UUID_128(uuid)->val[8], sizeof(tmp3));
 800bfda:	2202      	movs	r2, #2
 800bfdc:	f104 0109 	add.w	r1, r4, #9
 800bfe0:	f10d 001a 	add.w	r0, sp, #26
 800bfe4:	f010 fc63 	bl	801c8ae <memcpy>
		memcpy(&tmp4, &BT_UUID_128(uuid)->val[10], sizeof(tmp4));
 800bfe8:	2202      	movs	r2, #2
 800bfea:	f104 010b 	add.w	r1, r4, #11
 800bfee:	a806      	add	r0, sp, #24
 800bff0:	f010 fc5d 	bl	801c8ae <memcpy>
		memcpy(&tmp5, &BT_UUID_128(uuid)->val[12], sizeof(tmp5));
 800bff4:	2204      	movs	r2, #4
 800bff6:	f104 010d 	add.w	r1, r4, #13
 800bffa:	a808      	add	r0, sp, #32
 800bffc:	f010 fc57 	bl	801c8ae <memcpy>
		snprintk(str, len, "%08x-%04x-%04x-%04x-%08x%04x",
 800c000:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800c004:	9304      	str	r3, [sp, #16]
 800c006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c008:	9303      	str	r3, [sp, #12]
 800c00a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800c00e:	9302      	str	r3, [sp, #8]
 800c010:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800c014:	9301      	str	r3, [sp, #4]
 800c016:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800c01a:	9300      	str	r3, [sp, #0]
 800c01c:	9b08      	ldr	r3, [sp, #32]
 800c01e:	4a05      	ldr	r2, [pc, #20]	; (800c034 <bt_uuid_to_str+0xb8>)
 800c020:	4631      	mov	r1, r6
 800c022:	4628      	mov	r0, r5
 800c024:	f00e f804 	bl	801a030 <snprintk>
		break;
 800c028:	e7be      	b.n	800bfa8 <bt_uuid_to_str+0x2c>
 800c02a:	bf00      	nop
 800c02c:	08027240 	.word	0x08027240
 800c030:	08026394 	.word	0x08026394
 800c034:	0802639c 	.word	0x0802639c

0800c038 <bt_adv_foreach>:
#endif /* CONFIG_BT_BROADCASTER */
#endif /* defined(CONFIG_BT_EXT_ADV) */

static void bt_adv_foreach(void (*func)(struct bt_le_ext_adv *adv, void *data),
			   void *data)
{
 800c038:	b508      	push	{r3, lr}
 800c03a:	4603      	mov	r3, r0
		if (atomic_test_bit(adv_pool[i].flags, BT_ADV_CREATED)) {
			func(&adv_pool[i], data);
		}
	}
#else
	func(&bt_dev.adv, data);
 800c03c:	4801      	ldr	r0, [pc, #4]	; (800c044 <bt_adv_foreach+0xc>)
 800c03e:	4798      	blx	r3
#endif /* defined(CONFIG_BT_EXT_ADV) */
}
 800c040:	bd08      	pop	{r3, pc}
 800c042:	bf00      	nop
 800c044:	20000018 	.word	0x20000018

0800c048 <adv_new_legacy>:
	bt_dev.adv = adv_new();
	return bt_dev.adv;
#else
	return &bt_dev.adv;
#endif
}
 800c048:	4800      	ldr	r0, [pc, #0]	; (800c04c <adv_new_legacy+0x4>)
 800c04a:	4770      	bx	lr
 800c04c:	20000018 	.word	0x20000018

0800c050 <le_dhkey_complete>:

	pub_key_cb = NULL;
}

static void le_dhkey_complete(struct net_buf *buf)
{
 800c050:	b508      	push	{r3, lr}
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
 800c052:	6880      	ldr	r0, [r0, #8]

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
 800c054:	4b06      	ldr	r3, [pc, #24]	; (800c070 <le_dhkey_complete+0x20>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	b133      	cbz	r3, 800c068 <le_dhkey_complete+0x18>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
 800c05a:	7802      	ldrb	r2, [r0, #0]
 800c05c:	b92a      	cbnz	r2, 800c06a <le_dhkey_complete+0x1a>
 800c05e:	3001      	adds	r0, #1
 800c060:	4798      	blx	r3
		dh_key_cb = NULL;
 800c062:	4b03      	ldr	r3, [pc, #12]	; (800c070 <le_dhkey_complete+0x20>)
 800c064:	2200      	movs	r2, #0
 800c066:	601a      	str	r2, [r3, #0]
	}
}
 800c068:	bd08      	pop	{r3, pc}
		dh_key_cb(evt->status ? NULL : evt->dhkey);
 800c06a:	2000      	movs	r0, #0
 800c06c:	e7f8      	b.n	800c060 <le_dhkey_complete+0x10>
 800c06e:	bf00      	nop
 800c070:	20004124 	.word	0x20004124

0800c074 <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
 800c074:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.hci_version = rp->hci_version;
 800c076:	7851      	ldrb	r1, [r2, #1]
 800c078:	4b07      	ldr	r3, [pc, #28]	; (800c098 <read_local_ver_complete+0x24>)
 800c07a:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
 800c07e:	8851      	ldrh	r1, [r2, #2]
 800c080:	8759      	strh	r1, [r3, #58]	; 0x3a
	bt_dev.lmp_version = rp->lmp_version;
 800c082:	7911      	ldrb	r1, [r2, #4]
 800c084:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
 800c088:	f8b2 1007 	ldrh.w	r1, [r2, #7]
 800c08c:	8799      	strh	r1, [r3, #60]	; 0x3c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
 800c08e:	f8b2 2005 	ldrh.w	r2, [r2, #5]
 800c092:	87da      	strh	r2, [r3, #62]	; 0x3e
}
 800c094:	4770      	bx	lr
 800c096:	bf00      	nop
 800c098:	20000000 	.word	0x20000000

0800c09c <le_read_supp_states_complete>:
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
}

static void le_read_supp_states_complete(struct net_buf *buf)
{
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
 800c09c:	6883      	ldr	r3, [r0, #8]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
 800c09e:	7a19      	ldrb	r1, [r3, #8]
 800c0a0:	79da      	ldrb	r2, [r3, #7]
 800c0a2:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
 800c0a6:	7998      	ldrb	r0, [r3, #6]
 800c0a8:	795a      	ldrb	r2, [r3, #5]
 800c0aa:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 *
 *  @return 32-bit integer in host endianness.
 */
static inline uint32_t sys_get_le32(const uint8_t src[4])
{
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
 800c0ae:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	return ((uint16_t)src[1] << 8) | src[0];
 800c0b2:	7918      	ldrb	r0, [r3, #4]
 800c0b4:	78d9      	ldrb	r1, [r3, #3]
 800c0b6:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800c0ba:	7898      	ldrb	r0, [r3, #2]
 800c0bc:	785b      	ldrb	r3, [r3, #1]
 800c0be:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
 800c0c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
 800c0c6:	4903      	ldr	r1, [pc, #12]	; (800c0d4 <le_read_supp_states_complete+0x38>)
 800c0c8:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
 800c0cc:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
}
 800c0d0:	4770      	bx	lr
 800c0d2:	bf00      	nop
 800c0d4:	20000000 	.word	0x20000000

0800c0d8 <le_read_resolving_list_size_complete>:

#if defined(CONFIG_BT_SMP)
static void le_read_resolving_list_size_complete(struct net_buf *buf)
{
	struct bt_hci_rp_le_read_rl_size *rp = (void *)buf->data;
 800c0d8:	6883      	ldr	r3, [r0, #8]

	BT_DBG("Resolving List size %u", rp->rl_size);

	bt_dev.le.rl_size = rp->rl_size;
 800c0da:	785a      	ldrb	r2, [r3, #1]
 800c0dc:	4b01      	ldr	r3, [pc, #4]	; (800c0e4 <le_read_resolving_list_size_complete+0xc>)
 800c0de:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 800c0e2:	4770      	bx	lr
 800c0e4:	20000000 	.word	0x20000000

0800c0e8 <ver_str>:
	return 1U;
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(uint8_t ver)
{
 800c0e8:	b470      	push	{r4, r5, r6}
 800c0ea:	b08d      	sub	sp, #52	; 0x34
 800c0ec:	4606      	mov	r6, r0
	const char * const str[] = {
 800c0ee:	466c      	mov	r4, sp
 800c0f0:	4d0a      	ldr	r5, [pc, #40]	; (800c11c <ver_str+0x34>)
 800c0f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c0f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c0f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c0f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c0fa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c0fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2"
	};

	if (ver < ARRAY_SIZE(str)) {
 800c102:	2e0b      	cmp	r6, #11
 800c104:	d903      	bls.n	800c10e <ver_str+0x26>
		return str[ver];
	}

	return "unknown";
 800c106:	4806      	ldr	r0, [pc, #24]	; (800c120 <ver_str+0x38>)
}
 800c108:	b00d      	add	sp, #52	; 0x34
 800c10a:	bc70      	pop	{r4, r5, r6}
 800c10c:	4770      	bx	lr
		return str[ver];
 800c10e:	ab0c      	add	r3, sp, #48	; 0x30
 800c110:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800c114:	f856 0c30 	ldr.w	r0, [r6, #-48]
 800c118:	e7f6      	b.n	800c108 <ver_str+0x20>
 800c11a:	bf00      	nop
 800c11c:	08022d20 	.word	0x08022d20
 800c120:	08026410 	.word	0x08026410

0800c124 <bt_le_adv_random_addr_check>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800c124:	f3bf 8f5b 	dmb	ish
 800c128:	4b08      	ldr	r3, [pc, #32]	; (800c14c <bt_le_adv_random_addr_check+0x28>)
 800c12a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c12e:	f3bf 8f5b 	dmb	ish
	if (!IS_ENABLED(CONFIG_BT_OBSERVER) ||
 800c132:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800c136:	d001      	beq.n	800c13c <bt_le_adv_random_addr_check+0x18>
}
 800c138:	2001      	movs	r0, #1
 800c13a:	4770      	bx	lr
 800c13c:	f3bf 8f5b 	dmb	ish
 800c140:	4b02      	ldr	r3, [pc, #8]	; (800c14c <bt_le_adv_random_addr_check+0x28>)
 800c142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c146:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
 800c14a:	e7f5      	b.n	800c138 <bt_le_adv_random_addr_check+0x14>
 800c14c:	20000000 	.word	0x20000000

0800c150 <hci_reset_complete>:
	uint8_t status = buf->data[0];
 800c150:	6883      	ldr	r3, [r0, #8]
 800c152:	781b      	ldrb	r3, [r3, #0]
	if (status) {
 800c154:	b9ab      	cbnz	r3, 800c182 <hci_reset_complete+0x32>
	scan_dev_found_cb = NULL;
 800c156:	4b0b      	ldr	r3, [pc, #44]	; (800c184 <hci_reset_complete+0x34>)
 800c158:	2200      	movs	r2, #0
 800c15a:	601a      	str	r2, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800c15c:	f3bf 8f5b 	dmb	ish
 800c160:	4b09      	ldr	r3, [pc, #36]	; (800c188 <hci_reset_complete+0x38>)
 800c162:	f853 2f94 	ldr.w	r2, [r3, #148]!
 800c166:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
 800c16a:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 800c16e:	f3bf 8f5b 	dmb	ish
 800c172:	e853 1f00 	ldrex	r1, [r3]
 800c176:	e843 2000 	strex	r0, r2, [r3]
 800c17a:	2800      	cmp	r0, #0
 800c17c:	d1f9      	bne.n	800c172 <hci_reset_complete+0x22>
 800c17e:	f3bf 8f5b 	dmb	ish
}
 800c182:	4770      	bx	lr
 800c184:	20004178 	.word	0x20004178
 800c188:	20000000 	.word	0x20000000

0800c18c <read_local_features_complete>:
{
 800c18c:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
 800c18e:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
 800c190:	2208      	movs	r2, #8
 800c192:	3101      	adds	r1, #1
 800c194:	4801      	ldr	r0, [pc, #4]	; (800c19c <read_local_features_complete+0x10>)
 800c196:	f010 fb8a 	bl	801c8ae <memcpy>
}
 800c19a:	bd08      	pop	{r3, pc}
 800c19c:	20000040 	.word	0x20000040

0800c1a0 <read_supported_commands_complete>:
{
 800c1a0:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
 800c1a2:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
 800c1a4:	2240      	movs	r2, #64	; 0x40
 800c1a6:	3101      	adds	r1, #1
 800c1a8:	4801      	ldr	r0, [pc, #4]	; (800c1b0 <read_supported_commands_complete+0x10>)
 800c1aa:	f010 fb80 	bl	801c8ae <memcpy>
}
 800c1ae:	bd08      	pop	{r3, pc}
 800c1b0:	20000048 	.word	0x20000048

0800c1b4 <read_le_features_complete>:
{
 800c1b4:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
 800c1b6:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
 800c1b8:	2208      	movs	r2, #8
 800c1ba:	3101      	adds	r1, #1
 800c1bc:	4801      	ldr	r0, [pc, #4]	; (800c1c4 <read_le_features_complete+0x10>)
 800c1be:	f010 fb76 	bl	801c8ae <memcpy>
}
 800c1c2:	bd08      	pop	{r3, pc}
 800c1c4:	20000098 	.word	0x20000098

0800c1c8 <set_data_add>:
	size_t len;
};

static int set_data_add(uint8_t *set_data, uint8_t set_data_len_max,
			const struct bt_ad *ad, size_t ad_len, uint8_t *data_len)
{
 800c1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1cc:	b083      	sub	sp, #12
 800c1ce:	4607      	mov	r7, r0
 800c1d0:	4689      	mov	r9, r1
 800c1d2:	9201      	str	r2, [sp, #4]
 800c1d4:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;

	for (size_t i = 0; i < ad_len; i++) {
 800c1d6:	f04f 0b00 	mov.w	fp, #0
	uint8_t set_data_len = 0;
 800c1da:	465c      	mov	r4, fp
	for (size_t i = 0; i < ad_len; i++) {
 800c1dc:	9b00      	ldr	r3, [sp, #0]
 800c1de:	459b      	cmp	fp, r3
 800c1e0:	d246      	bcs.n	800c270 <set_data_add+0xa8>
		const struct bt_data *data = ad[i].data;
 800c1e2:	9b01      	ldr	r3, [sp, #4]
 800c1e4:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800c1e8:	f853 803b 	ldr.w	r8, [r3, fp, lsl #3]

		for (size_t j = 0; j < ad[i].len; j++) {
 800c1ec:	2500      	movs	r5, #0
 800c1ee:	e011      	b.n	800c214 <set_data_add+0x4c>
				      shortened_len > 0)) {
					BT_ERR("Too big advertising data");
					return -EINVAL;
				}

				type = BT_DATA_NAME_SHORTENED;
 800c1f0:	2008      	movs	r0, #8
				len = shortened_len;
			}

			set_data[set_data_len++] = len + 1;
 800c1f2:	b2d6      	uxtb	r6, r2
 800c1f4:	1c63      	adds	r3, r4, #1
 800c1f6:	b2db      	uxtb	r3, r3
 800c1f8:	f106 0e01 	add.w	lr, r6, #1
 800c1fc:	f807 e00c 	strb.w	lr, [r7, ip]
			set_data[set_data_len++] = type;
 800c200:	3402      	adds	r4, #2
 800c202:	b2e4      	uxtb	r4, r4
 800c204:	54f8      	strb	r0, [r7, r3]

			memcpy(&set_data[set_data_len], data[j].data, len);
 800c206:	6849      	ldr	r1, [r1, #4]
 800c208:	1938      	adds	r0, r7, r4
 800c20a:	f010 fb50 	bl	801c8ae <memcpy>
			set_data_len += len;
 800c20e:	4434      	add	r4, r6
 800c210:	b2e4      	uxtb	r4, r4
		for (size_t j = 0; j < ad[i].len; j++) {
 800c212:	3501      	adds	r5, #1
 800c214:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c218:	42ab      	cmp	r3, r5
 800c21a:	d926      	bls.n	800c26a <set_data_add+0xa2>
			size_t len = data[j].data_len;
 800c21c:	eb08 01c5 	add.w	r1, r8, r5, lsl #3
 800c220:	784a      	ldrb	r2, [r1, #1]
			uint8_t type = data[j].type;
 800c222:	f818 0035 	ldrb.w	r0, [r8, r5, lsl #3]
			if ((set_data_len + len + 2) > set_data_len_max) {
 800c226:	46a4      	mov	ip, r4
 800c228:	18a3      	adds	r3, r4, r2
 800c22a:	3302      	adds	r3, #2
 800c22c:	454b      	cmp	r3, r9
 800c22e:	d9e0      	bls.n	800c1f2 <set_data_add+0x2a>
				ssize_t shortened_len = set_data_len_max -
 800c230:	eba9 0204 	sub.w	r2, r9, r4
 800c234:	3a02      	subs	r2, #2
				if (!(type == BT_DATA_NAME_COMPLETE &&
 800c236:	2809      	cmp	r0, #9
 800c238:	d101      	bne.n	800c23e <set_data_add+0x76>
 800c23a:	2a00      	cmp	r2, #0
 800c23c:	dcd8      	bgt.n	800c1f0 <set_data_add+0x28>
					BT_ERR("Too big advertising data");
 800c23e:	f04f 0100 	mov.w	r1, #0
 800c242:	2301      	movs	r3, #1
 800c244:	f363 0102 	bfi	r1, r3, #0, #3
 800c248:	f36f 01c5 	bfc	r1, #3, #3
 800c24c:	4b0a      	ldr	r3, [pc, #40]	; (800c278 <set_data_add+0xb0>)
 800c24e:	4a0b      	ldr	r2, [pc, #44]	; (800c27c <set_data_add+0xb4>)
 800c250:	1a9b      	subs	r3, r3, r2
 800c252:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800c256:	f363 118f 	bfi	r1, r3, #6, #10
 800c25a:	4809      	ldr	r0, [pc, #36]	; (800c280 <set_data_add+0xb8>)
 800c25c:	f7fa fae0 	bl	8006820 <log_0>
					return -EINVAL;
 800c260:	f06f 0015 	mvn.w	r0, #21
		}
	}

	*data_len = set_data_len;
	return 0;
}
 800c264:	b003      	add	sp, #12
 800c266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < ad_len; i++) {
 800c26a:	f10b 0b01 	add.w	fp, fp, #1
 800c26e:	e7b5      	b.n	800c1dc <set_data_add+0x14>
	*data_len = set_data_len;
 800c270:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c272:	701c      	strb	r4, [r3, #0]
	return 0;
 800c274:	2000      	movs	r0, #0
 800c276:	e7f5      	b.n	800c264 <set_data_add+0x9c>
 800c278:	08022bc8 	.word	0x08022bc8
 800c27c:	08022b90 	.word	0x08022b90
 800c280:	08026418 	.word	0x08026418

0800c284 <le_read_buffer_size_complete>:
{
 800c284:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
 800c286:	6882      	ldr	r2, [r0, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
 800c288:	f8b2 3001 	ldrh.w	r3, [r2, #1]
 800c28c:	b299      	uxth	r1, r3
 800c28e:	4805      	ldr	r0, [pc, #20]	; (800c2a4 <le_read_buffer_size_complete+0x20>)
 800c290:	f8a0 30c4 	strh.w	r3, [r0, #196]	; 0xc4
	if (!bt_dev.le.acl_mtu) {
 800c294:	b901      	cbnz	r1, 800c298 <le_read_buffer_size_complete+0x14>
}
 800c296:	bd08      	pop	{r3, pc}
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
 800c298:	78d1      	ldrb	r1, [r2, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
 800c29a:	460a      	mov	r2, r1
 800c29c:	30c8      	adds	r0, #200	; 0xc8
 800c29e:	f015 ffa9 	bl	80221f4 <z_impl_k_sem_init>
 800c2a2:	e7f8      	b.n	800c296 <le_read_buffer_size_complete+0x12>
 800c2a4:	20000000 	.word	0x20000000

0800c2a8 <read_buffer_size_complete>:
{
 800c2a8:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
 800c2aa:	6882      	ldr	r2, [r0, #8]
	if (bt_dev.le.acl_mtu) {
 800c2ac:	4b07      	ldr	r3, [pc, #28]	; (800c2cc <read_buffer_size_complete+0x24>)
 800c2ae:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c2b2:	b103      	cbz	r3, 800c2b6 <read_buffer_size_complete+0xe>
}
 800c2b4:	bd08      	pop	{r3, pc}
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
 800c2b6:	f8b2 3001 	ldrh.w	r3, [r2, #1]
 800c2ba:	4804      	ldr	r0, [pc, #16]	; (800c2cc <read_buffer_size_complete+0x24>)
 800c2bc:	f8a0 30c4 	strh.w	r3, [r0, #196]	; 0xc4
	pkts = sys_le16_to_cpu(rp->acl_max_num);
 800c2c0:	8891      	ldrh	r1, [r2, #4]
 800c2c2:	460a      	mov	r2, r1
 800c2c4:	30c8      	adds	r0, #200	; 0xc8
 800c2c6:	f015 ff95 	bl	80221f4 <z_impl_k_sem_init>
 800c2ca:	e7f3      	b.n	800c2b4 <read_buffer_size_complete+0xc>
 800c2cc:	20000000 	.word	0x20000000

0800c2d0 <pending_id_keys_update_set>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800c2d0:	4b08      	ldr	r3, [pc, #32]	; (800c2f4 <pending_id_keys_update_set+0x24>)
 800c2d2:	f3bf 8f5b 	dmb	ish
 800c2d6:	e853 2f00 	ldrex	r2, [r3]
 800c2da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c2de:	e843 2c00 	strex	ip, r2, [r3]
 800c2e2:	f1bc 0f00 	cmp.w	ip, #0
 800c2e6:	d1f6      	bne.n	800c2d6 <pending_id_keys_update_set+0x6>
 800c2e8:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
 800c2ec:	7a03      	ldrb	r3, [r0, #8]
 800c2ee:	4319      	orrs	r1, r3
 800c2f0:	7201      	strb	r1, [r0, #8]
}
 800c2f2:	4770      	bx	lr
 800c2f4:	20000094 	.word	0x20000094

0800c2f8 <hci_data_buf_overflow>:
{
 800c2f8:	b508      	push	{r3, lr}
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
 800c2fa:	6881      	ldr	r1, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
 800c2fc:	f04f 0200 	mov.w	r2, #0
 800c300:	2302      	movs	r3, #2
 800c302:	f363 0202 	bfi	r2, r3, #0, #3
 800c306:	f36f 02c5 	bfc	r2, #3, #3
 800c30a:	4b06      	ldr	r3, [pc, #24]	; (800c324 <hci_data_buf_overflow+0x2c>)
 800c30c:	4806      	ldr	r0, [pc, #24]	; (800c328 <hci_data_buf_overflow+0x30>)
 800c30e:	1a1b      	subs	r3, r3, r0
 800c310:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800c314:	f363 128f 	bfi	r2, r3, #6, #10
 800c318:	7809      	ldrb	r1, [r1, #0]
 800c31a:	4804      	ldr	r0, [pc, #16]	; (800c32c <hci_data_buf_overflow+0x34>)
 800c31c:	f7fa f910 	bl	8006540 <log_1>
}
 800c320:	bd08      	pop	{r3, pc}
 800c322:	bf00      	nop
 800c324:	08022bc8 	.word	0x08022bc8
 800c328:	08022b90 	.word	0x08022b90
 800c32c:	08026434 	.word	0x08026434

0800c330 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
 800c330:	b570      	push	{r4, r5, r6, lr}
 800c332:	4605      	mov	r5, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
 800c334:	2400      	movs	r4, #0
 800c336:	4b0a      	ldr	r3, [pc, #40]	; (800c360 <id_find+0x30>)
 800c338:	79db      	ldrb	r3, [r3, #7]
 800c33a:	42a3      	cmp	r3, r4
 800c33c:	d90c      	bls.n	800c358 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
 800c33e:	4626      	mov	r6, r4
 800c340:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 800c344:	2207      	movs	r2, #7
 800c346:	4b06      	ldr	r3, [pc, #24]	; (800c360 <id_find+0x30>)
 800c348:	4419      	add	r1, r3
 800c34a:	4628      	mov	r0, r5
 800c34c:	f010 fa97 	bl	801c87e <memcmp>
 800c350:	b120      	cbz	r0, 800c35c <id_find+0x2c>
	for (id = 0U; id < bt_dev.id_count; id++) {
 800c352:	3401      	adds	r4, #1
 800c354:	b2e4      	uxtb	r4, r4
 800c356:	e7ee      	b.n	800c336 <id_find+0x6>
			return id;
		}
	}

	return -ENOENT;
 800c358:	f06f 0601 	mvn.w	r6, #1
}
 800c35c:	4630      	mov	r0, r6
 800c35e:	bd70      	pop	{r4, r5, r6, pc}
 800c360:	20000000 	.word	0x20000000

0800c364 <valid_adv_ext_param>:
	return err;
}
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */

static bool valid_adv_ext_param(const struct bt_le_adv_param *param)
{
 800c364:	b510      	push	{r4, lr}
 800c366:	b082      	sub	sp, #8
 800c368:	4604      	mov	r4, r0
			/* Extended options require extended advertising. */
			return false;
		}
	}

	if (param->id >= bt_dev.id_count ||
 800c36a:	7800      	ldrb	r0, [r0, #0]
 800c36c:	4b1d      	ldr	r3, [pc, #116]	; (800c3e4 <valid_adv_ext_param+0x80>)
 800c36e:	79db      	ldrb	r3, [r3, #7]
 800c370:	4298      	cmp	r0, r3
 800c372:	d302      	bcc.n	800c37a <valid_adv_ext_param+0x16>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
		return false;
 800c374:	2000      	movs	r0, #0
			return false;
		}
	}

	return true;
}
 800c376:	b002      	add	sp, #8
 800c378:	bd10      	pop	{r4, pc}
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
 800c37a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800c37e:	2300      	movs	r3, #0
 800c380:	9300      	str	r3, [sp, #0]
 800c382:	f8cd 3003 	str.w	r3, [sp, #3]
 800c386:	2207      	movs	r2, #7
 800c388:	4669      	mov	r1, sp
 800c38a:	4b16      	ldr	r3, [pc, #88]	; (800c3e4 <valid_adv_ext_param+0x80>)
 800c38c:	4418      	add	r0, r3
 800c38e:	f010 fa76 	bl	801c87e <memcmp>
	if (param->id >= bt_dev.id_count ||
 800c392:	2800      	cmp	r0, #0
 800c394:	d0ee      	beq.n	800c374 <valid_adv_ext_param+0x10>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
 800c396:	6863      	ldr	r3, [r4, #4]
 800c398:	f013 0f01 	tst.w	r3, #1
 800c39c:	d107      	bne.n	800c3ae <valid_adv_ext_param+0x4a>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
 800c39e:	4a11      	ldr	r2, [pc, #68]	; (800c3e4 <valid_adv_ext_param+0x80>)
 800c3a0:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 800c3a4:	2a08      	cmp	r2, #8
 800c3a6:	d802      	bhi.n	800c3ae <valid_adv_ext_param+0x4a>
		    param->interval_min < 0x00a0) {
 800c3a8:	68a2      	ldr	r2, [r4, #8]
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
 800c3aa:	2a9f      	cmp	r2, #159	; 0x9f
 800c3ac:	d911      	bls.n	800c3d2 <valid_adv_ext_param+0x6e>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
 800c3ae:	f013 0f10 	tst.w	r3, #16
 800c3b2:	d103      	bne.n	800c3bc <valid_adv_ext_param+0x58>
	    !param->peer) {
 800c3b4:	6923      	ldr	r3, [r4, #16]
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
 800c3b6:	b10b      	cbz	r3, 800c3bc <valid_adv_ext_param+0x58>
	return true;
 800c3b8:	2001      	movs	r0, #1
 800c3ba:	e7dc      	b.n	800c376 <valid_adv_ext_param+0x12>
		if (param->interval_min > param->interval_max ||
 800c3bc:	68a3      	ldr	r3, [r4, #8]
 800c3be:	68e2      	ldr	r2, [r4, #12]
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d808      	bhi.n	800c3d6 <valid_adv_ext_param+0x72>
 800c3c4:	2b1f      	cmp	r3, #31
 800c3c6:	d908      	bls.n	800c3da <valid_adv_ext_param+0x76>
		    param->interval_min < 0x0020 ||
 800c3c8:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800c3cc:	d807      	bhi.n	800c3de <valid_adv_ext_param+0x7a>
	return true;
 800c3ce:	2001      	movs	r0, #1
 800c3d0:	e7d1      	b.n	800c376 <valid_adv_ext_param+0x12>
			return false;
 800c3d2:	2000      	movs	r0, #0
 800c3d4:	e7cf      	b.n	800c376 <valid_adv_ext_param+0x12>
			return false;
 800c3d6:	2000      	movs	r0, #0
 800c3d8:	e7cd      	b.n	800c376 <valid_adv_ext_param+0x12>
 800c3da:	2000      	movs	r0, #0
 800c3dc:	e7cb      	b.n	800c376 <valid_adv_ext_param+0x12>
 800c3de:	2000      	movs	r0, #0
 800c3e0:	e7c9      	b.n	800c376 <valid_adv_ext_param+0x12>
 800c3e2:	bf00      	nop
 800c3e4:	20000000 	.word	0x20000000

0800c3e8 <update_sec_level>:
{
 800c3e8:	b510      	push	{r4, lr}
 800c3ea:	4604      	mov	r4, r0
	if (!conn->encrypt) {
 800c3ec:	7ac3      	ldrb	r3, [r0, #11]
 800c3ee:	b17b      	cbz	r3, 800c410 <update_sec_level+0x28>
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
 800c3f0:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 800c3f4:	b193      	cbz	r3, 800c41c <update_sec_level+0x34>
 800c3f6:	7b5a      	ldrb	r2, [r3, #13]
 800c3f8:	f012 0f01 	tst.w	r2, #1
 800c3fc:	d00e      	beq.n	800c41c <update_sec_level+0x34>
		if (conn->le.keys->flags & BT_KEYS_SC &&
 800c3fe:	f012 0f10 	tst.w	r2, #16
 800c402:	d002      	beq.n	800c40a <update_sec_level+0x22>
		    conn->le.keys->enc_size == BT_SMP_MAX_ENC_KEY_SIZE) {
 800c404:	7b1b      	ldrb	r3, [r3, #12]
		if (conn->le.keys->flags & BT_KEYS_SC &&
 800c406:	2b10      	cmp	r3, #16
 800c408:	d005      	beq.n	800c416 <update_sec_level+0x2e>
			conn->sec_level = BT_SECURITY_L3;
 800c40a:	2303      	movs	r3, #3
 800c40c:	7263      	strb	r3, [r4, #9]
 800c40e:	e007      	b.n	800c420 <update_sec_level+0x38>
		conn->sec_level = BT_SECURITY_L1;
 800c410:	2301      	movs	r3, #1
 800c412:	7243      	strb	r3, [r0, #9]
		return;
 800c414:	e008      	b.n	800c428 <update_sec_level+0x40>
			conn->sec_level = BT_SECURITY_L4;
 800c416:	2304      	movs	r3, #4
 800c418:	7243      	strb	r3, [r0, #9]
 800c41a:	e001      	b.n	800c420 <update_sec_level+0x38>
		conn->sec_level = BT_SECURITY_L2;
 800c41c:	2302      	movs	r3, #2
 800c41e:	7263      	strb	r3, [r4, #9]
	if (conn->required_sec_level > conn->sec_level) {
 800c420:	7aa2      	ldrb	r2, [r4, #10]
 800c422:	7a63      	ldrb	r3, [r4, #9]
 800c424:	429a      	cmp	r2, r3
 800c426:	d800      	bhi.n	800c42a <update_sec_level+0x42>
}
 800c428:	bd10      	pop	{r4, pc}
		BT_ERR("Failed to set required security level");
 800c42a:	f04f 0100 	mov.w	r1, #0
 800c42e:	2301      	movs	r3, #1
 800c430:	f363 0102 	bfi	r1, r3, #0, #3
 800c434:	f36f 01c5 	bfc	r1, #3, #3
 800c438:	4b07      	ldr	r3, [pc, #28]	; (800c458 <update_sec_level+0x70>)
 800c43a:	4a08      	ldr	r2, [pc, #32]	; (800c45c <update_sec_level+0x74>)
 800c43c:	1a9b      	subs	r3, r3, r2
 800c43e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800c442:	f363 118f 	bfi	r1, r3, #6, #10
 800c446:	4806      	ldr	r0, [pc, #24]	; (800c460 <update_sec_level+0x78>)
 800c448:	f7fa f9ea 	bl	8006820 <log_0>
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
 800c44c:	2105      	movs	r1, #5
 800c44e:	4620      	mov	r0, r4
 800c450:	f004 fb32 	bl	8010ab8 <bt_conn_disconnect>
 800c454:	e7e8      	b.n	800c428 <update_sec_level+0x40>
 800c456:	bf00      	nop
 800c458:	08022bc8 	.word	0x08022bc8
 800c45c:	08022b90 	.word	0x08022b90
 800c460:	0802645c 	.word	0x0802645c

0800c464 <unpair>:
{
 800c464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c466:	4604      	mov	r4, r0
 800c468:	460d      	mov	r5, r1
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, addr);
 800c46a:	f003 ffd7 	bl	801041c <bt_conn_lookup_addr_le>
	if (conn) {
 800c46e:	b318      	cbz	r0, 800c4b8 <unpair+0x54>
 800c470:	4607      	mov	r7, r0
		if (conn->type == BT_CONN_TYPE_LE) {
 800c472:	7883      	ldrb	r3, [r0, #2]
 800c474:	2b01      	cmp	r3, #1
 800c476:	d019      	beq.n	800c4ac <unpair+0x48>
	struct bt_keys *keys = NULL;
 800c478:	2600      	movs	r6, #0
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
 800c47a:	2113      	movs	r1, #19
 800c47c:	4638      	mov	r0, r7
 800c47e:	f004 fb1b 	bl	8010ab8 <bt_conn_disconnect>
		bt_conn_unref(conn);
 800c482:	4638      	mov	r0, r7
 800c484:	f011 f954 	bl	801d730 <bt_conn_unref>
		if (!keys) {
 800c488:	b1b6      	cbz	r6, 800c4b8 <unpair+0x54>
		if (keys) {
 800c48a:	b116      	cbz	r6, 800c492 <unpair+0x2e>
			bt_keys_clear(keys);
 800c48c:	4630      	mov	r0, r6
 800c48e:	f00a fa15 	bl	80168bc <bt_keys_clear>
	bt_gatt_clear(id, addr);
 800c492:	4629      	mov	r1, r5
 800c494:	4620      	mov	r0, r4
 800c496:	f012 ff65 	bl	801f364 <bt_gatt_clear>
	if (bt_auth && bt_auth->bond_deleted) {
 800c49a:	4b0a      	ldr	r3, [pc, #40]	; (800c4c4 <unpair+0x60>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	b123      	cbz	r3, 800c4aa <unpair+0x46>
 800c4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4a2:	b113      	cbz	r3, 800c4aa <unpair+0x46>
		bt_auth->bond_deleted(id, addr);
 800c4a4:	4629      	mov	r1, r5
 800c4a6:	4620      	mov	r0, r4
 800c4a8:	4798      	blx	r3
}
 800c4aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			keys = conn->le.keys;
 800c4ac:	f8d0 60b4 	ldr.w	r6, [r0, #180]	; 0xb4
			conn->le.keys = NULL;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
 800c4b6:	e7e0      	b.n	800c47a <unpair+0x16>
			keys = bt_keys_find_addr(id, addr);
 800c4b8:	4629      	mov	r1, r5
 800c4ba:	4620      	mov	r0, r4
 800c4bc:	f00a f9e0 	bl	8016880 <bt_keys_find_addr>
 800c4c0:	4606      	mov	r6, r0
 800c4c2:	e7e2      	b.n	800c48a <unpair+0x26>
 800c4c4:	2000417c 	.word	0x2000417c

0800c4c8 <find_pending_connect>:
{
 800c4c8:	b500      	push	{lr}
 800c4ca:	b083      	sub	sp, #12
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_MASTER) {
 800c4cc:	b128      	cbz	r0, 800c4da <find_pending_connect+0x12>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
 800c4ce:	2801      	cmp	r0, #1
 800c4d0:	d007      	beq.n	800c4e2 <find_pending_connect+0x1a>
	return NULL;
 800c4d2:	2000      	movs	r0, #0
}
 800c4d4:	b003      	add	sp, #12
 800c4d6:	f85d fb04 	ldr.w	pc, [sp], #4
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
 800c4da:	2206      	movs	r2, #6
 800c4dc:	f003 ffce 	bl	801047c <bt_conn_lookup_state_le>
		return conn;
 800c4e0:	e7f8      	b.n	800c4d4 <find_pending_connect+0xc>
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
 800c4e2:	2205      	movs	r2, #5
 800c4e4:	4b0b      	ldr	r3, [pc, #44]	; (800c514 <find_pending_connect+0x4c>)
 800c4e6:	f893 0037 	ldrb.w	r0, [r3, #55]	; 0x37
 800c4ea:	f003 ffc7 	bl	801047c <bt_conn_lookup_state_le>
		if (!conn) {
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	d1f0      	bne.n	800c4d4 <find_pending_connect+0xc>
						       BT_ADDR_LE_NONE,
 800c4f2:	4b09      	ldr	r3, [pc, #36]	; (800c518 <find_pending_connect+0x50>)
 800c4f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c4f8:	9000      	str	r0, [sp, #0]
 800c4fa:	f8ad 1004 	strh.w	r1, [sp, #4]
 800c4fe:	0c09      	lsrs	r1, r1, #16
 800c500:	f88d 1006 	strb.w	r1, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
 800c504:	2204      	movs	r2, #4
 800c506:	4669      	mov	r1, sp
 800c508:	4b02      	ldr	r3, [pc, #8]	; (800c514 <find_pending_connect+0x4c>)
 800c50a:	f893 0037 	ldrb.w	r0, [r3, #55]	; 0x37
 800c50e:	f003 ffb5 	bl	801047c <bt_conn_lookup_state_le>
		return conn;
 800c512:	e7df      	b.n	800c4d4 <find_pending_connect+0xc>
 800c514:	20000000 	.word	0x20000000
 800c518:	08022d50 	.word	0x08022d50

0800c51c <le_pkey_complete>:
{
 800c51c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
 800c51e:	6885      	ldr	r5, [r0, #8]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800c520:	4b19      	ldr	r3, [pc, #100]	; (800c588 <le_pkey_complete+0x6c>)
 800c522:	f3bf 8f5b 	dmb	ish
 800c526:	e853 2f00 	ldrex	r2, [r3]
 800c52a:	f022 0210 	bic.w	r2, r2, #16
 800c52e:	e843 2100 	strex	r1, r2, [r3]
 800c532:	2900      	cmp	r1, #0
 800c534:	d1f7      	bne.n	800c526 <le_pkey_complete+0xa>
 800c536:	f3bf 8f5b 	dmb	ish
	if (!evt->status) {
 800c53a:	782b      	ldrb	r3, [r5, #0]
 800c53c:	b113      	cbz	r3, 800c544 <le_pkey_complete+0x28>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
 800c53e:	4b13      	ldr	r3, [pc, #76]	; (800c58c <le_pkey_complete+0x70>)
 800c540:	681c      	ldr	r4, [r3, #0]
 800c542:	e015      	b.n	800c570 <le_pkey_complete+0x54>
		memcpy(pub_key, evt->key, 64);
 800c544:	2240      	movs	r2, #64	; 0x40
 800c546:	1c69      	adds	r1, r5, #1
 800c548:	4811      	ldr	r0, [pc, #68]	; (800c590 <le_pkey_complete+0x74>)
 800c54a:	f010 f9b0 	bl	801c8ae <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800c54e:	4b0e      	ldr	r3, [pc, #56]	; (800c588 <le_pkey_complete+0x6c>)
 800c550:	f3bf 8f5b 	dmb	ish
 800c554:	e853 2f00 	ldrex	r2, [r3]
 800c558:	f042 0208 	orr.w	r2, r2, #8
 800c55c:	e843 2100 	strex	r1, r2, [r3]
 800c560:	2900      	cmp	r1, #0
 800c562:	d1f7      	bne.n	800c554 <le_pkey_complete+0x38>
 800c564:	f3bf 8f5b 	dmb	ish
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
}
 800c568:	e7e9      	b.n	800c53e <le_pkey_complete+0x22>
		cb->func(evt->status ? NULL : pub_key);
 800c56a:	2000      	movs	r0, #0
 800c56c:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
 800c56e:	6864      	ldr	r4, [r4, #4]
 800c570:	b12c      	cbz	r4, 800c57e <le_pkey_complete+0x62>
		cb->func(evt->status ? NULL : pub_key);
 800c572:	6823      	ldr	r3, [r4, #0]
 800c574:	782a      	ldrb	r2, [r5, #0]
 800c576:	2a00      	cmp	r2, #0
 800c578:	d1f7      	bne.n	800c56a <le_pkey_complete+0x4e>
 800c57a:	4805      	ldr	r0, [pc, #20]	; (800c590 <le_pkey_complete+0x74>)
 800c57c:	e7f6      	b.n	800c56c <le_pkey_complete+0x50>
	pub_key_cb = NULL;
 800c57e:	4b03      	ldr	r3, [pc, #12]	; (800c58c <le_pkey_complete+0x70>)
 800c580:	2200      	movs	r2, #0
 800c582:	601a      	str	r2, [r3, #0]
}
 800c584:	bd38      	pop	{r3, r4, r5, pc}
 800c586:	bf00      	nop
 800c588:	20000094 	.word	0x20000094
 800c58c:	20004168 	.word	0x20004168
 800c590:	20004128 	.word	0x20004128

0800c594 <pending_id_keys_update>:
{
 800c594:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800c596:	4b0b      	ldr	r3, [pc, #44]	; (800c5c4 <pending_id_keys_update+0x30>)
 800c598:	f3bf 8f5b 	dmb	ish
 800c59c:	e853 2f00 	ldrex	r2, [r3]
 800c5a0:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
 800c5a4:	e843 1000 	strex	r0, r1, [r3]
 800c5a8:	2800      	cmp	r0, #0
 800c5aa:	d1f7      	bne.n	800c59c <pending_id_keys_update+0x8>
 800c5ac:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
 800c5b0:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800c5b4:	d100      	bne.n	800c5b8 <pending_id_keys_update+0x24>
}
 800c5b6:	bd08      	pop	{r3, pc}
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	4903      	ldr	r1, [pc, #12]	; (800c5c8 <pending_id_keys_update+0x34>)
 800c5bc:	2002      	movs	r0, #2
 800c5be:	f00a f8b9 	bl	8016734 <bt_keys_foreach>
}
 800c5c2:	e7f8      	b.n	800c5b6 <pending_id_keys_update+0x22>
 800c5c4:	20000094 	.word	0x20000094
 800c5c8:	0801ced9 	.word	0x0801ced9

0800c5cc <hci_hardware_error>:
{
 800c5cc:	b508      	push	{r3, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
 800c5ce:	2101      	movs	r1, #1
 800c5d0:	3008      	adds	r0, #8
 800c5d2:	f013 ff84 	bl	80204de <net_buf_simple_pull_mem>
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
 800c5d6:	f04f 0200 	mov.w	r2, #0
 800c5da:	2301      	movs	r3, #1
 800c5dc:	f363 0202 	bfi	r2, r3, #0, #3
 800c5e0:	f36f 02c5 	bfc	r2, #3, #3
 800c5e4:	4b05      	ldr	r3, [pc, #20]	; (800c5fc <hci_hardware_error+0x30>)
 800c5e6:	4906      	ldr	r1, [pc, #24]	; (800c600 <hci_hardware_error+0x34>)
 800c5e8:	1a5b      	subs	r3, r3, r1
 800c5ea:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800c5ee:	f363 128f 	bfi	r2, r3, #6, #10
 800c5f2:	7801      	ldrb	r1, [r0, #0]
 800c5f4:	4803      	ldr	r0, [pc, #12]	; (800c604 <hci_hardware_error+0x38>)
 800c5f6:	f7f9 ffa3 	bl	8006540 <log_1>
}
 800c5fa:	bd08      	pop	{r3, pc}
 800c5fc:	08022bc8 	.word	0x08022bc8
 800c600:	08022b90 	.word	0x08022b90
 800c604:	08026484 	.word	0x08026484

0800c608 <le_data_len_change>:
{
 800c608:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
 800c60a:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
 800c60c:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
 800c60e:	4620      	mov	r0, r4
 800c610:	f003 fefa 	bl	8010408 <bt_conn_lookup_handle>
	if (!conn) {
 800c614:	b110      	cbz	r0, 800c61c <le_data_len_change+0x14>
	bt_conn_unref(conn);
 800c616:	f011 f88b 	bl	801d730 <bt_conn_unref>
}
 800c61a:	bd10      	pop	{r4, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
 800c61c:	f04f 0200 	mov.w	r2, #0
 800c620:	2301      	movs	r3, #1
 800c622:	f363 0202 	bfi	r2, r3, #0, #3
 800c626:	f36f 02c5 	bfc	r2, #3, #3
 800c62a:	4b06      	ldr	r3, [pc, #24]	; (800c644 <le_data_len_change+0x3c>)
 800c62c:	4906      	ldr	r1, [pc, #24]	; (800c648 <le_data_len_change+0x40>)
 800c62e:	1a5b      	subs	r3, r3, r1
 800c630:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800c634:	f363 128f 	bfi	r2, r3, #6, #10
 800c638:	4621      	mov	r1, r4
 800c63a:	4804      	ldr	r0, [pc, #16]	; (800c64c <le_data_len_change+0x44>)
 800c63c:	f7f9 ff80 	bl	8006540 <log_1>
		return;
 800c640:	e7eb      	b.n	800c61a <le_data_len_change+0x12>
 800c642:	bf00      	nop
 800c644:	08022bc8 	.word	0x08022bc8
 800c648:	08022b90 	.word	0x08022b90
 800c64c:	080264a8 	.word	0x080264a8

0800c650 <hci_disconn_complete_prio>:
{
 800c650:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
 800c652:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
 800c654:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
 800c658:	781b      	ldrb	r3, [r3, #0]
 800c65a:	b103      	cbz	r3, 800c65e <hci_disconn_complete_prio+0xe>
}
 800c65c:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
 800c65e:	4620      	mov	r0, r4
 800c660:	f003 fed2 	bl	8010408 <bt_conn_lookup_handle>
	if (!conn) {
 800c664:	4605      	mov	r5, r0
 800c666:	b130      	cbz	r0, 800c676 <hci_disconn_complete_prio+0x26>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
 800c668:	2101      	movs	r1, #1
 800c66a:	f003 ffa1 	bl	80105b0 <bt_conn_set_state>
	bt_conn_unref(conn);
 800c66e:	4628      	mov	r0, r5
 800c670:	f011 f85e 	bl	801d730 <bt_conn_unref>
 800c674:	e7f2      	b.n	800c65c <hci_disconn_complete_prio+0xc>
		BT_ERR("Unable to look up conn with handle %u", handle);
 800c676:	f04f 0200 	mov.w	r2, #0
 800c67a:	2301      	movs	r3, #1
 800c67c:	f363 0202 	bfi	r2, r3, #0, #3
 800c680:	f36f 02c5 	bfc	r2, #3, #3
 800c684:	4b05      	ldr	r3, [pc, #20]	; (800c69c <hci_disconn_complete_prio+0x4c>)
 800c686:	4906      	ldr	r1, [pc, #24]	; (800c6a0 <hci_disconn_complete_prio+0x50>)
 800c688:	1a5b      	subs	r3, r3, r1
 800c68a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800c68e:	f363 128f 	bfi	r2, r3, #6, #10
 800c692:	4621      	mov	r1, r4
 800c694:	4803      	ldr	r0, [pc, #12]	; (800c6a4 <hci_disconn_complete_prio+0x54>)
 800c696:	f7f9 ff53 	bl	8006540 <log_1>
		return;
 800c69a:	e7df      	b.n	800c65c <hci_disconn_complete_prio+0xc>
 800c69c:	08022bc8 	.word	0x08022bc8
 800c6a0:	08022b90 	.word	0x08022b90
 800c6a4:	080264cc 	.word	0x080264cc

0800c6a8 <le_conn_complete_cancel>:
{
 800c6a8:	b510      	push	{r4, lr}
	conn = find_pending_connect(BT_HCI_ROLE_MASTER, NULL);
 800c6aa:	2100      	movs	r1, #0
 800c6ac:	4608      	mov	r0, r1
 800c6ae:	f7ff ff0b 	bl	800c4c8 <find_pending_connect>
	if (!conn) {
 800c6b2:	b188      	cbz	r0, 800c6d8 <le_conn_complete_cancel+0x30>
 800c6b4:	4604      	mov	r4, r0
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
 800c6b6:	2302      	movs	r3, #2
 800c6b8:	7303      	strb	r3, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
 800c6ba:	2100      	movs	r1, #0
 800c6bc:	f003 ff78 	bl	80105b0 <bt_conn_set_state>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800c6c0:	f3bf 8f5b 	dmb	ish
 800c6c4:	6863      	ldr	r3, [r4, #4]
 800c6c6:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
 800c6ca:	f013 0f01 	tst.w	r3, #1
 800c6ce:	d115      	bne.n	800c6fc <le_conn_complete_cancel+0x54>
	bt_conn_unref(conn);
 800c6d0:	4620      	mov	r0, r4
 800c6d2:	f011 f82d 	bl	801d730 <bt_conn_unref>
}
 800c6d6:	bd10      	pop	{r4, pc}
		BT_ERR("No pending master connection");
 800c6d8:	f04f 0100 	mov.w	r1, #0
 800c6dc:	2301      	movs	r3, #1
 800c6de:	f363 0102 	bfi	r1, r3, #0, #3
 800c6e2:	f36f 01c5 	bfc	r1, #3, #3
 800c6e6:	4b08      	ldr	r3, [pc, #32]	; (800c708 <le_conn_complete_cancel+0x60>)
 800c6e8:	4a08      	ldr	r2, [pc, #32]	; (800c70c <le_conn_complete_cancel+0x64>)
 800c6ea:	1a9b      	subs	r3, r3, r2
 800c6ec:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800c6f0:	f363 118f 	bfi	r1, r3, #6, #10
 800c6f4:	4806      	ldr	r0, [pc, #24]	; (800c710 <le_conn_complete_cancel+0x68>)
 800c6f6:	f7fa f893 	bl	8006820 <log_0>
		return;
 800c6fa:	e7ec      	b.n	800c6d6 <le_conn_complete_cancel+0x2e>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
 800c6fc:	2102      	movs	r1, #2
 800c6fe:	4620      	mov	r0, r4
 800c700:	f003 ff56 	bl	80105b0 <bt_conn_set_state>
 800c704:	e7e4      	b.n	800c6d0 <le_conn_complete_cancel+0x28>
 800c706:	bf00      	nop
 800c708:	08022bc8 	.word	0x08022bc8
 800c70c:	08022b90 	.word	0x08022b90
 800c710:	080264f4 	.word	0x080264f4

0800c714 <le_adv_stop_free_conn>:
{
 800c714:	b570      	push	{r4, r5, r6, lr}
 800c716:	b084      	sub	sp, #16
 800c718:	4604      	mov	r4, r0
 800c71a:	460e      	mov	r6, r1
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
 800c71c:	f100 050b 	add.w	r5, r0, #11
 800c720:	2300      	movs	r3, #0
 800c722:	9300      	str	r3, [sp, #0]
 800c724:	f8cd 3003 	str.w	r3, [sp, #3]
 800c728:	2207      	movs	r2, #7
 800c72a:	4669      	mov	r1, sp
 800c72c:	4628      	mov	r0, r5
 800c72e:	f010 f8a6 	bl	801c87e <memcmp>
 800c732:	b9c8      	cbnz	r0, 800c768 <le_adv_stop_free_conn+0x54>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
 800c734:	4b10      	ldr	r3, [pc, #64]	; (800c778 <le_adv_stop_free_conn+0x64>)
 800c736:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c73a:	9002      	str	r0, [sp, #8]
 800c73c:	f8ad 100c 	strh.w	r1, [sp, #12]
 800c740:	0c09      	lsrs	r1, r1, #16
 800c742:	f88d 100e 	strb.w	r1, [sp, #14]
 800c746:	2204      	movs	r2, #4
 800c748:	a902      	add	r1, sp, #8
 800c74a:	7820      	ldrb	r0, [r4, #0]
 800c74c:	f003 fe96 	bl	801047c <bt_conn_lookup_state_le>
 800c750:	4604      	mov	r4, r0
	if (conn) {
 800c752:	b13c      	cbz	r4, 800c764 <le_adv_stop_free_conn+0x50>
		conn->err = status;
 800c754:	7326      	strb	r6, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
 800c756:	2100      	movs	r1, #0
 800c758:	4620      	mov	r0, r4
 800c75a:	f003 ff29 	bl	80105b0 <bt_conn_set_state>
		bt_conn_unref(conn);
 800c75e:	4620      	mov	r0, r4
 800c760:	f010 ffe6 	bl	801d730 <bt_conn_unref>
}
 800c764:	b004      	add	sp, #16
 800c766:	bd70      	pop	{r4, r5, r6, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
 800c768:	2205      	movs	r2, #5
 800c76a:	4629      	mov	r1, r5
 800c76c:	7820      	ldrb	r0, [r4, #0]
 800c76e:	f003 fe85 	bl	801047c <bt_conn_lookup_state_le>
 800c772:	4604      	mov	r4, r0
 800c774:	e7ed      	b.n	800c752 <le_adv_stop_free_conn+0x3e>
 800c776:	bf00      	nop
 800c778:	08022d50 	.word	0x08022d50

0800c77c <hci_cmd_done>:
{
 800c77c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c77e:	b085      	sub	sp, #20
 800c780:	4605      	mov	r5, r0
 800c782:	460e      	mov	r6, r1
 800c784:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
 800c786:	7990      	ldrb	r0, [r2, #6]
 800c788:	f00a f9ec 	bl	8016b64 <net_buf_pool_get>
 800c78c:	4b51      	ldr	r3, [pc, #324]	; (800c8d4 <hci_cmd_done+0x158>)
 800c78e:	4283      	cmp	r3, r0
 800c790:	d01d      	beq.n	800c7ce <hci_cmd_done+0x52>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
 800c792:	f04f 0600 	mov.w	r6, #0
 800c796:	2302      	movs	r3, #2
 800c798:	f363 0602 	bfi	r6, r3, #0, #3
 800c79c:	f36f 06c5 	bfc	r6, #3, #3
 800c7a0:	4b4d      	ldr	r3, [pc, #308]	; (800c8d8 <hci_cmd_done+0x15c>)
 800c7a2:	4a4e      	ldr	r2, [pc, #312]	; (800c8dc <hci_cmd_done+0x160>)
 800c7a4:	1a9b      	subs	r3, r3, r2
 800c7a6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800c7aa:	f363 168f 	bfi	r6, r3, #6, #10
 800c7ae:	9500      	str	r5, [sp, #0]
 800c7b0:	79a0      	ldrb	r0, [r4, #6]
 800c7b2:	9001      	str	r0, [sp, #4]
 800c7b4:	f00a f9d6 	bl	8016b64 <net_buf_pool_get>
 800c7b8:	9002      	str	r0, [sp, #8]
 800c7ba:	4b46      	ldr	r3, [pc, #280]	; (800c8d4 <hci_cmd_done+0x158>)
 800c7bc:	9303      	str	r3, [sp, #12]
 800c7be:	4633      	mov	r3, r6
 800c7c0:	2204      	movs	r2, #4
 800c7c2:	4669      	mov	r1, sp
 800c7c4:	4846      	ldr	r0, [pc, #280]	; (800c8e0 <hci_cmd_done+0x164>)
 800c7c6:	f7f9 ffbf 	bl	8006748 <log_n>
}
 800c7ca:	b005      	add	sp, #20
 800c7cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (cmd(buf)->opcode != opcode) {
 800c7ce:	4620      	mov	r0, r4
 800c7d0:	f00a f9d0 	bl	8016b74 <net_buf_id>
 800c7d4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800c7d8:	4b42      	ldr	r3, [pc, #264]	; (800c8e4 <hci_cmd_done+0x168>)
 800c7da:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c7de:	8843      	ldrh	r3, [r0, #2]
 800c7e0:	42ab      	cmp	r3, r5
 800c7e2:	d129      	bne.n	800c838 <hci_cmd_done+0xbc>
	if (cmd(buf)->state && !status) {
 800c7e4:	4620      	mov	r0, r4
 800c7e6:	f00a f9c5 	bl	8016b74 <net_buf_id>
 800c7ea:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800c7ee:	4b3d      	ldr	r3, [pc, #244]	; (800c8e4 <hci_cmd_done+0x168>)
 800c7f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c7f4:	6843      	ldr	r3, [r0, #4]
 800c7f6:	b10b      	cbz	r3, 800c7fc <hci_cmd_done+0x80>
 800c7f8:	2e00      	cmp	r6, #0
 800c7fa:	d03a      	beq.n	800c872 <hci_cmd_done+0xf6>
	if (cmd(buf)->sync) {
 800c7fc:	4620      	mov	r0, r4
 800c7fe:	f00a f9b9 	bl	8016b74 <net_buf_id>
 800c802:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800c806:	4b37      	ldr	r3, [pc, #220]	; (800c8e4 <hci_cmd_done+0x168>)
 800c808:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c80c:	6883      	ldr	r3, [r0, #8]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d0db      	beq.n	800c7ca <hci_cmd_done+0x4e>
		cmd(buf)->status = status;
 800c812:	4620      	mov	r0, r4
 800c814:	f00a f9ae 	bl	8016b74 <net_buf_id>
 800c818:	4d32      	ldr	r5, [pc, #200]	; (800c8e4 <hci_cmd_done+0x168>)
 800c81a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800c81e:	f805 6020 	strb.w	r6, [r5, r0, lsl #2]
		k_sem_give(cmd(buf)->sync);
 800c822:	4620      	mov	r0, r4
 800c824:	f00a f9a6 	bl	8016b74 <net_buf_id>
 800c828:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800c82c:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 800c830:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
 800c832:	f00c fa09 	bl	8018c48 <z_impl_k_sem_give>
}
 800c836:	e7c8      	b.n	800c7ca <hci_cmd_done+0x4e>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
 800c838:	f04f 0700 	mov.w	r7, #0
 800c83c:	2302      	movs	r3, #2
 800c83e:	f363 0702 	bfi	r7, r3, #0, #3
 800c842:	f36f 07c5 	bfc	r7, #3, #3
 800c846:	4b24      	ldr	r3, [pc, #144]	; (800c8d8 <hci_cmd_done+0x15c>)
 800c848:	4a24      	ldr	r2, [pc, #144]	; (800c8dc <hci_cmd_done+0x160>)
 800c84a:	1a9b      	subs	r3, r3, r2
 800c84c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800c850:	f363 178f 	bfi	r7, r3, #6, #10
 800c854:	4620      	mov	r0, r4
 800c856:	f00a f98d 	bl	8016b74 <net_buf_id>
 800c85a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800c85e:	4b21      	ldr	r3, [pc, #132]	; (800c8e4 <hci_cmd_done+0x168>)
 800c860:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c864:	463b      	mov	r3, r7
 800c866:	8842      	ldrh	r2, [r0, #2]
 800c868:	4629      	mov	r1, r5
 800c86a:	481f      	ldr	r0, [pc, #124]	; (800c8e8 <hci_cmd_done+0x16c>)
 800c86c:	f7f9 fee8 	bl	8006640 <log_2>
 800c870:	e7b8      	b.n	800c7e4 <hci_cmd_done+0x68>
		struct cmd_state_set *update = cmd(buf)->state;
 800c872:	4620      	mov	r0, r4
 800c874:	f00a f97e 	bl	8016b74 <net_buf_id>
 800c878:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800c87c:	4b19      	ldr	r3, [pc, #100]	; (800c8e4 <hci_cmd_done+0x168>)
 800c87e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c882:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
 800c884:	6813      	ldr	r3, [r2, #0]
 800c886:	6851      	ldr	r1, [r2, #4]
 800c888:	7a10      	ldrb	r0, [r2, #8]
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
 800c88a:	f001 051f 	and.w	r5, r1, #31
 800c88e:	2201      	movs	r2, #1
 800c890:	40aa      	lsls	r2, r5

	if (val) {
 800c892:	b170      	cbz	r0, 800c8b2 <hci_cmd_done+0x136>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
 800c894:	0949      	lsrs	r1, r1, #5
 800c896:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800c89a:	f3bf 8f5b 	dmb	ish
 800c89e:	e853 1f00 	ldrex	r1, [r3]
 800c8a2:	4311      	orrs	r1, r2
 800c8a4:	e843 1000 	strex	r0, r1, [r3]
 800c8a8:	2800      	cmp	r0, #0
 800c8aa:	d1f8      	bne.n	800c89e <hci_cmd_done+0x122>
 800c8ac:	f3bf 8f5b 	dmb	ish
 800c8b0:	e7a4      	b.n	800c7fc <hci_cmd_done+0x80>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 800c8b2:	0949      	lsrs	r1, r1, #5
 800c8b4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800c8b8:	43d2      	mvns	r2, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800c8ba:	f3bf 8f5b 	dmb	ish
 800c8be:	e853 1f00 	ldrex	r1, [r3]
 800c8c2:	4011      	ands	r1, r2
 800c8c4:	e843 1000 	strex	r0, r1, [r3]
 800c8c8:	2800      	cmp	r0, #0
 800c8ca:	d1f8      	bne.n	800c8be <hci_cmd_done+0x142>
 800c8cc:	f3bf 8f5b 	dmb	ish
	}
}
 800c8d0:	e794      	b.n	800c7fc <hci_cmd_done+0x80>
 800c8d2:	bf00      	nop
 800c8d4:	20001178 	.word	0x20001178
 800c8d8:	08022bc8 	.word	0x08022bc8
 800c8dc:	08022b90 	.word	0x08022b90
 800c8e0:	08026514 	.word	0x08026514
 800c8e4:	2000410c 	.word	0x2000410c
 800c8e8:	0802654c 	.word	0x0802654c

0800c8ec <hci_cmd_status>:
{
 800c8ec:	b538      	push	{r3, r4, r5, lr}
 800c8ee:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
 800c8f0:	2104      	movs	r1, #4
 800c8f2:	3008      	adds	r0, #8
 800c8f4:	f013 fdf3 	bl	80204de <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
 800c8f8:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
 800c8fa:	4622      	mov	r2, r4
 800c8fc:	7801      	ldrb	r1, [r0, #0]
 800c8fe:	8840      	ldrh	r0, [r0, #2]
 800c900:	f7ff ff3c 	bl	800c77c <hci_cmd_done>
	if (ncmd) {
 800c904:	b905      	cbnz	r5, 800c908 <hci_cmd_status+0x1c>
}
 800c906:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
 800c908:	4801      	ldr	r0, [pc, #4]	; (800c910 <hci_cmd_status+0x24>)
 800c90a:	f00c f99d 	bl	8018c48 <z_impl_k_sem_give>
 800c90e:	e7fa      	b.n	800c906 <hci_cmd_status+0x1a>
 800c910:	200000e8 	.word	0x200000e8

0800c914 <hci_cmd_complete>:
{
 800c914:	b538      	push	{r3, r4, r5, lr}
 800c916:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
 800c918:	2103      	movs	r1, #3
 800c91a:	3008      	adds	r0, #8
 800c91c:	f013 fddf 	bl	80204de <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
 800c920:	7805      	ldrb	r5, [r0, #0]
	status = buf->data[0];
 800c922:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
 800c924:	4622      	mov	r2, r4
 800c926:	7819      	ldrb	r1, [r3, #0]
 800c928:	f8b0 0001 	ldrh.w	r0, [r0, #1]
 800c92c:	f7ff ff26 	bl	800c77c <hci_cmd_done>
	if (ncmd) {
 800c930:	b905      	cbnz	r5, 800c934 <hci_cmd_complete+0x20>
}
 800c932:	bd38      	pop	{r3, r4, r5, pc}
 800c934:	4801      	ldr	r0, [pc, #4]	; (800c93c <hci_cmd_complete+0x28>)
 800c936:	f00c f987 	bl	8018c48 <z_impl_k_sem_give>
 800c93a:	e7fa      	b.n	800c932 <hci_cmd_complete+0x1e>
 800c93c:	200000e8 	.word	0x200000e8

0800c940 <hci_acl>:
{
 800c940:	b570      	push	{r4, r5, r6, lr}
 800c942:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
 800c944:	8983      	ldrh	r3, [r0, #12]
 800c946:	2b03      	cmp	r3, #3
 800c948:	d924      	bls.n	800c994 <hci_acl+0x54>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
 800c94a:	2104      	movs	r1, #4
 800c94c:	f104 0008 	add.w	r0, r4, #8
 800c950:	f013 fdc5 	bl	80204de <net_buf_simple_pull_mem>
	len = sys_le16_to_cpu(hdr->len);
 800c954:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
 800c956:	8800      	ldrh	r0, [r0, #0]
	flags = bt_acl_flags(handle);
 800c958:	0b06      	lsrs	r6, r0, #12
	acl(buf)->handle = bt_acl_handle(handle);
 800c95a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800c95e:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
 800c960:	23ff      	movs	r3, #255	; 0xff
 800c962:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
 800c964:	89a1      	ldrh	r1, [r4, #12]
 800c966:	4291      	cmp	r1, r2
 800c968:	d022      	beq.n	800c9b0 <hci_acl+0x70>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
 800c96a:	f04f 0300 	mov.w	r3, #0
 800c96e:	2001      	movs	r0, #1
 800c970:	f360 0302 	bfi	r3, r0, #0, #3
 800c974:	f36f 03c5 	bfc	r3, #3, #3
 800c978:	4820      	ldr	r0, [pc, #128]	; (800c9fc <hci_acl+0xbc>)
 800c97a:	4d21      	ldr	r5, [pc, #132]	; (800ca00 <hci_acl+0xc0>)
 800c97c:	1b40      	subs	r0, r0, r5
 800c97e:	f3c0 00c9 	ubfx	r0, r0, #3, #10
 800c982:	f360 138f 	bfi	r3, r0, #6, #10
 800c986:	481f      	ldr	r0, [pc, #124]	; (800ca04 <hci_acl+0xc4>)
 800c988:	f7f9 fe5a 	bl	8006640 <log_2>
		net_buf_unref(buf);
 800c98c:	4620      	mov	r0, r4
 800c98e:	f013 fd2b 	bl	80203e8 <net_buf_unref>
}
 800c992:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
 800c994:	f240 530b 	movw	r3, #1291	; 0x50b
 800c998:	4a1b      	ldr	r2, [pc, #108]	; (800ca08 <hci_acl+0xc8>)
 800c99a:	491c      	ldr	r1, [pc, #112]	; (800ca0c <hci_acl+0xcc>)
 800c99c:	481c      	ldr	r0, [pc, #112]	; (800ca10 <hci_acl+0xd0>)
 800c99e:	f00d fb39 	bl	801a014 <printk>
 800c9a2:	4040      	eors	r0, r0
 800c9a4:	f380 8811 	msr	BASEPRI, r0
 800c9a8:	f04f 0003 	mov.w	r0, #3
 800c9ac:	df02      	svc	2
 800c9ae:	e7cc      	b.n	800c94a <hci_acl+0xa>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
 800c9b0:	f003 fd2a 	bl	8010408 <bt_conn_lookup_handle>
	if (!conn) {
 800c9b4:	4605      	mov	r5, r0
 800c9b6:	b158      	cbz	r0, 800c9d0 <hci_acl+0x90>
	acl(buf)->index = bt_conn_index(conn);
 800c9b8:	f004 fa6a 	bl	8010e90 <bt_conn_index>
 800c9bc:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
 800c9be:	4632      	mov	r2, r6
 800c9c0:	4621      	mov	r1, r4
 800c9c2:	4628      	mov	r0, r5
 800c9c4:	f003 fbce 	bl	8010164 <bt_conn_recv>
	bt_conn_unref(conn);
 800c9c8:	4628      	mov	r0, r5
 800c9ca:	f010 feb1 	bl	801d730 <bt_conn_unref>
 800c9ce:	e7e0      	b.n	800c992 <hci_acl+0x52>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
 800c9d0:	f04f 0200 	mov.w	r2, #0
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	f363 0202 	bfi	r2, r3, #0, #3
 800c9da:	f36f 02c5 	bfc	r2, #3, #3
 800c9de:	4b07      	ldr	r3, [pc, #28]	; (800c9fc <hci_acl+0xbc>)
 800c9e0:	4907      	ldr	r1, [pc, #28]	; (800ca00 <hci_acl+0xc0>)
 800c9e2:	1a5b      	subs	r3, r3, r1
 800c9e4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800c9e8:	f363 128f 	bfi	r2, r3, #6, #10
 800c9ec:	8ae1      	ldrh	r1, [r4, #22]
 800c9ee:	4809      	ldr	r0, [pc, #36]	; (800ca14 <hci_acl+0xd4>)
 800c9f0:	f7f9 fda6 	bl	8006540 <log_1>
		net_buf_unref(buf);
 800c9f4:	4620      	mov	r0, r4
 800c9f6:	f013 fcf7 	bl	80203e8 <net_buf_unref>
		return;
 800c9fa:	e7ca      	b.n	800c992 <hci_acl+0x52>
 800c9fc:	08022bc8 	.word	0x08022bc8
 800ca00:	08022b90 	.word	0x08022b90
 800ca04:	080265f0 	.word	0x080265f0
 800ca08:	08026580 	.word	0x08026580
 800ca0c:	080265b4 	.word	0x080265b4
 800ca10:	080265d0 	.word	0x080265d0
 800ca14:	08026614 	.word	0x08026614

0800ca18 <le_phy_update_complete>:
{
 800ca18:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
 800ca1a:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
 800ca1c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
 800ca20:	4630      	mov	r0, r6
 800ca22:	f003 fcf1 	bl	8010408 <bt_conn_lookup_handle>
	if (!conn) {
 800ca26:	b188      	cbz	r0, 800ca4c <le_phy_update_complete+0x34>
 800ca28:	4604      	mov	r4, r0
	conn->le.phy.tx_phy = get_phy(evt->tx_phy);
 800ca2a:	78e8      	ldrb	r0, [r5, #3]
 800ca2c:	f010 f84c 	bl	801cac8 <get_phy>
 800ca30:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
	conn->le.phy.rx_phy = get_phy(evt->rx_phy);
 800ca34:	7928      	ldrb	r0, [r5, #4]
 800ca36:	f010 f847 	bl	801cac8 <get_phy>
 800ca3a:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
	notify_le_phy_updated(conn);
 800ca3e:	4620      	mov	r0, r4
 800ca40:	f003 fae8 	bl	8010014 <notify_le_phy_updated>
	bt_conn_unref(conn);
 800ca44:	4620      	mov	r0, r4
 800ca46:	f010 fe73 	bl	801d730 <bt_conn_unref>
}
 800ca4a:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
 800ca4c:	f04f 0200 	mov.w	r2, #0
 800ca50:	2301      	movs	r3, #1
 800ca52:	f363 0202 	bfi	r2, r3, #0, #3
 800ca56:	f36f 02c5 	bfc	r2, #3, #3
 800ca5a:	4b06      	ldr	r3, [pc, #24]	; (800ca74 <le_phy_update_complete+0x5c>)
 800ca5c:	4906      	ldr	r1, [pc, #24]	; (800ca78 <le_phy_update_complete+0x60>)
 800ca5e:	1a5b      	subs	r3, r3, r1
 800ca60:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800ca64:	f363 128f 	bfi	r2, r3, #6, #10
 800ca68:	4631      	mov	r1, r6
 800ca6a:	4804      	ldr	r0, [pc, #16]	; (800ca7c <le_phy_update_complete+0x64>)
 800ca6c:	f7f9 fd68 	bl	8006540 <log_1>
		return;
 800ca70:	e7eb      	b.n	800ca4a <le_phy_update_complete+0x32>
 800ca72:	bf00      	nop
 800ca74:	08022bc8 	.word	0x08022bc8
 800ca78:	08022b90 	.word	0x08022b90
 800ca7c:	080264a8 	.word	0x080264a8

0800ca80 <slave_update_conn_param>:
{
 800ca80:	b508      	push	{r3, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800ca82:	f3bf 8f5b 	dmb	ish
 800ca86:	6843      	ldr	r3, [r0, #4]
 800ca88:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_UPDATE)) {
 800ca8c:	f413 7f80 	tst.w	r3, #256	; 0x100
 800ca90:	d000      	beq.n	800ca94 <slave_update_conn_param+0x14>
}
 800ca92:	bd08      	pop	{r3, pc}
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
 800ca94:	f24c 3250 	movw	r2, #50000	; 0xc350
 800ca98:	2300      	movs	r3, #0
 800ca9a:	f100 0158 	add.w	r1, r0, #88	; 0x58
 800ca9e:	4802      	ldr	r0, [pc, #8]	; (800caa8 <slave_update_conn_param+0x28>)
 800caa0:	f00c f9e6 	bl	8018e70 <k_delayed_work_submit_to_queue>
 800caa4:	e7f5      	b.n	800ca92 <slave_update_conn_param+0x12>
 800caa6:	bf00      	nop
 800caa8:	20003310 	.word	0x20003310

0800caac <le_conn_update_complete>:
{
 800caac:	b570      	push	{r4, r5, r6, lr}
 800caae:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
 800cab0:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
 800cab2:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
 800cab6:	4630      	mov	r0, r6
 800cab8:	f003 fca6 	bl	8010408 <bt_conn_lookup_handle>
	if (!conn) {
 800cabc:	b148      	cbz	r0, 800cad2 <le_conn_update_complete+0x26>
 800cabe:	4605      	mov	r5, r0
	if (!evt->status) {
 800cac0:	7823      	ldrb	r3, [r4, #0]
 800cac2:	b1cb      	cbz	r3, 800caf8 <le_conn_update_complete+0x4c>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
 800cac4:	2b1a      	cmp	r3, #26
 800cac6:	d026      	beq.n	800cb16 <le_conn_update_complete+0x6a>
	bt_conn_unref(conn);
 800cac8:	4628      	mov	r0, r5
 800caca:	f010 fe31 	bl	801d730 <bt_conn_unref>
}
 800cace:	b002      	add	sp, #8
 800cad0:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
 800cad2:	f04f 0200 	mov.w	r2, #0
 800cad6:	2301      	movs	r3, #1
 800cad8:	f363 0202 	bfi	r2, r3, #0, #3
 800cadc:	f36f 02c5 	bfc	r2, #3, #3
 800cae0:	4b21      	ldr	r3, [pc, #132]	; (800cb68 <le_conn_update_complete+0xbc>)
 800cae2:	4922      	ldr	r1, [pc, #136]	; (800cb6c <le_conn_update_complete+0xc0>)
 800cae4:	1a5b      	subs	r3, r3, r1
 800cae6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800caea:	f363 128f 	bfi	r2, r3, #6, #10
 800caee:	4631      	mov	r1, r6
 800caf0:	481f      	ldr	r0, [pc, #124]	; (800cb70 <le_conn_update_complete+0xc4>)
 800caf2:	f7f9 fd25 	bl	8006540 <log_1>
		return;
 800caf6:	e7ea      	b.n	800cace <le_conn_update_complete+0x22>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
 800caf8:	f8b4 3003 	ldrh.w	r3, [r4, #3]
 800cafc:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
 800cb00:	f8b4 3005 	ldrh.w	r3, [r4, #5]
 800cb04:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
 800cb08:	f8b4 3007 	ldrh.w	r3, [r4, #7]
 800cb0c:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
 800cb10:	f003 fa44 	bl	800ff9c <notify_le_param_updated>
 800cb14:	e7d8      	b.n	800cac8 <le_conn_update_complete+0x1c>
		   conn->role == BT_HCI_ROLE_SLAVE &&
 800cb16:	78c3      	ldrb	r3, [r0, #3]
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
 800cb18:	2b01      	cmp	r3, #1
 800cb1a:	d1d5      	bne.n	800cac8 <le_conn_update_complete+0x1c>
		   !atomic_test_and_set_bit(conn->flags,
 800cb1c:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800cb1e:	f3bf 8f5b 	dmb	ish
 800cb22:	e853 2f00 	ldrex	r2, [r3]
 800cb26:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
 800cb2a:	e843 1000 	strex	r0, r1, [r3]
 800cb2e:	2800      	cmp	r0, #0
 800cb30:	d1f7      	bne.n	800cb22 <le_conn_update_complete+0x76>
 800cb32:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_SLAVE &&
 800cb36:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800cb3a:	d1c5      	bne.n	800cac8 <le_conn_update_complete+0x1c>
		param.interval_min = conn->le.interval_min;
 800cb3c:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
 800cb40:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
 800cb44:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
 800cb48:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
 800cb4c:	f8b5 30a8 	ldrh.w	r3, [r5, #168]	; 0xa8
 800cb50:	f8ad 3004 	strh.w	r3, [sp, #4]
		param.timeout = conn->le.pending_timeout;
 800cb54:	f8b5 30aa 	ldrh.w	r3, [r5, #170]	; 0xaa
 800cb58:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
 800cb5c:	4669      	mov	r1, sp
 800cb5e:	4628      	mov	r0, r5
 800cb60:	f010 ffb0 	bl	801dac4 <bt_l2cap_update_conn_param>
 800cb64:	e7b0      	b.n	800cac8 <le_conn_update_complete+0x1c>
 800cb66:	bf00      	nop
 800cb68:	08022bc8 	.word	0x08022bc8
 800cb6c:	08022b90 	.word	0x08022b90
 800cb70:	080264a8 	.word	0x080264a8

0800cb74 <bt_dev_show_info>:
{
 800cb74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb78:	b086      	sub	sp, #24
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
 800cb7a:	f04f 0400 	mov.w	r4, #0
 800cb7e:	2303      	movs	r3, #3
 800cb80:	f363 0402 	bfi	r4, r3, #0, #3
 800cb84:	f36f 04c5 	bfc	r4, #3, #3
 800cb88:	4b39      	ldr	r3, [pc, #228]	; (800cc70 <bt_dev_show_info+0xfc>)
 800cb8a:	4a3a      	ldr	r2, [pc, #232]	; (800cc74 <bt_dev_show_info+0x100>)
 800cb8c:	1a9b      	subs	r3, r3, r2
 800cb8e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800cb92:	f363 148f 	bfi	r4, r3, #6, #10
 800cb96:	4b38      	ldr	r3, [pc, #224]	; (800cc78 <bt_dev_show_info+0x104>)
 800cb98:	79db      	ldrb	r3, [r3, #7]
 800cb9a:	2b01      	cmp	r3, #1
 800cb9c:	d92c      	bls.n	800cbf8 <bt_dev_show_info+0x84>
 800cb9e:	4e37      	ldr	r6, [pc, #220]	; (800cc7c <bt_dev_show_info+0x108>)
 800cba0:	4835      	ldr	r0, [pc, #212]	; (800cc78 <bt_dev_show_info+0x104>)
 800cba2:	f7fe ffd1 	bl	800bb48 <bt_addr_le_str_real>
 800cba6:	f7f9 fafb 	bl	80061a0 <log_strdup>
 800cbaa:	4602      	mov	r2, r0
 800cbac:	4623      	mov	r3, r4
 800cbae:	4631      	mov	r1, r6
 800cbb0:	4833      	ldr	r0, [pc, #204]	; (800cc80 <bt_dev_show_info+0x10c>)
 800cbb2:	f7f9 fd45 	bl	8006640 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
 800cbb6:	2401      	movs	r4, #1
 800cbb8:	4b2f      	ldr	r3, [pc, #188]	; (800cc78 <bt_dev_show_info+0x104>)
 800cbba:	79db      	ldrb	r3, [r3, #7]
 800cbbc:	42a3      	cmp	r3, r4
 800cbbe:	dd1d      	ble.n	800cbfc <bt_dev_show_info+0x88>
		BT_INFO("Identity[%d]: %s",
 800cbc0:	2303      	movs	r3, #3
 800cbc2:	f363 0502 	bfi	r5, r3, #0, #3
 800cbc6:	f36f 05c5 	bfc	r5, #3, #3
 800cbca:	4b29      	ldr	r3, [pc, #164]	; (800cc70 <bt_dev_show_info+0xfc>)
 800cbcc:	4a29      	ldr	r2, [pc, #164]	; (800cc74 <bt_dev_show_info+0x100>)
 800cbce:	1a9b      	subs	r3, r3, r2
 800cbd0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800cbd4:	f363 158f 	bfi	r5, r3, #6, #10
 800cbd8:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800cbdc:	4826      	ldr	r0, [pc, #152]	; (800cc78 <bt_dev_show_info+0x104>)
 800cbde:	4418      	add	r0, r3
 800cbe0:	f7fe ffb2 	bl	800bb48 <bt_addr_le_str_real>
 800cbe4:	f7f9 fadc 	bl	80061a0 <log_strdup>
 800cbe8:	4602      	mov	r2, r0
 800cbea:	462b      	mov	r3, r5
 800cbec:	4621      	mov	r1, r4
 800cbee:	4825      	ldr	r0, [pc, #148]	; (800cc84 <bt_dev_show_info+0x110>)
 800cbf0:	f7f9 fd26 	bl	8006640 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
 800cbf4:	3401      	adds	r4, #1
 800cbf6:	e7df      	b.n	800cbb8 <bt_dev_show_info+0x44>
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
 800cbf8:	4e23      	ldr	r6, [pc, #140]	; (800cc88 <bt_dev_show_info+0x114>)
 800cbfa:	e7d1      	b.n	800cba0 <bt_dev_show_info+0x2c>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
 800cbfc:	2703      	movs	r7, #3
 800cbfe:	f04f 0500 	mov.w	r5, #0
 800cc02:	f367 0502 	bfi	r5, r7, #0, #3
 800cc06:	f36f 05c5 	bfc	r5, #3, #3
 800cc0a:	4c19      	ldr	r4, [pc, #100]	; (800cc70 <bt_dev_show_info+0xfc>)
 800cc0c:	4b19      	ldr	r3, [pc, #100]	; (800cc74 <bt_dev_show_info+0x100>)
 800cc0e:	1ae4      	subs	r4, r4, r3
 800cc10:	f3c4 04c9 	ubfx	r4, r4, #3, #10
 800cc14:	f364 158f 	bfi	r5, r4, #6, #10
 800cc18:	4e17      	ldr	r6, [pc, #92]	; (800cc78 <bt_dev_show_info+0x104>)
 800cc1a:	f896 8038 	ldrb.w	r8, [r6, #56]	; 0x38
 800cc1e:	4640      	mov	r0, r8
 800cc20:	f7ff fa62 	bl	800c0e8 <ver_str>
 800cc24:	9002      	str	r0, [sp, #8]
 800cc26:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc2a:	8f73      	ldrh	r3, [r6, #58]	; 0x3a
 800cc2c:	9304      	str	r3, [sp, #16]
 800cc2e:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 800cc30:	9305      	str	r3, [sp, #20]
 800cc32:	462b      	mov	r3, r5
 800cc34:	2204      	movs	r2, #4
 800cc36:	a902      	add	r1, sp, #8
 800cc38:	4814      	ldr	r0, [pc, #80]	; (800cc8c <bt_dev_show_info+0x118>)
 800cc3a:	f7f9 fd85 	bl	8006748 <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
 800cc3e:	f04f 0500 	mov.w	r5, #0
 800cc42:	f367 0502 	bfi	r5, r7, #0, #3
 800cc46:	f36f 05c5 	bfc	r5, #3, #3
 800cc4a:	f364 158f 	bfi	r5, r4, #6, #10
 800cc4e:	f896 4039 	ldrb.w	r4, [r6, #57]	; 0x39
 800cc52:	4620      	mov	r0, r4
 800cc54:	f7ff fa48 	bl	800c0e8 <ver_str>
 800cc58:	4601      	mov	r1, r0
 800cc5a:	f8ad 5000 	strh.w	r5, [sp]
 800cc5e:	8fb3      	ldrh	r3, [r6, #60]	; 0x3c
 800cc60:	4622      	mov	r2, r4
 800cc62:	480b      	ldr	r0, [pc, #44]	; (800cc90 <bt_dev_show_info+0x11c>)
 800cc64:	f7f9 fba0 	bl	80063a8 <log_3>
}
 800cc68:	b006      	add	sp, #24
 800cc6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc6e:	bf00      	nop
 800cc70:	08022bc8 	.word	0x08022bc8
 800cc74:	08022b90 	.word	0x08022b90
 800cc78:	20000000 	.word	0x20000000
 800cc7c:	08026638 	.word	0x08026638
 800cc80:	0802663c 	.word	0x0802663c
 800cc84:	0802664c 	.word	0x0802664c
 800cc88:	08024fc0 	.word	0x08024fc0
 800cc8c:	08026660 	.word	0x08026660
 800cc90:	080266a0 	.word	0x080266a0

0800cc94 <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
 800cc94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc96:	b087      	sub	sp, #28
 800cc98:	4604      	mov	r4, r0
 800cc9a:	460e      	mov	r6, r1
	struct adv_id_check_data check_data = {
		.id = adv->id,
 800cc9c:	7803      	ldrb	r3, [r0, #0]
	struct adv_id_check_data check_data = {
 800cc9e:	f88d 3004 	strb.w	r3, [sp, #4]
 800cca2:	2300      	movs	r3, #0
 800cca4:	f88d 3005 	strb.w	r3, [sp, #5]
		.adv_enabled = false
	};
	struct bt_conn *conn;

	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
 800cca8:	a901      	add	r1, sp, #4
 800ccaa:	4825      	ldr	r0, [pc, #148]	; (800cd40 <le_adv_start_add_conn+0xac>)
 800ccac:	f7ff f9c4 	bl	800c038 <bt_adv_foreach>
	if (check_data.adv_enabled) {
 800ccb0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d13a      	bne.n	800cd2e <le_adv_start_add_conn+0x9a>
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
 800ccb8:	4625      	mov	r5, r4
 800ccba:	f815 2b0b 	ldrb.w	r2, [r5], #11
 800ccbe:	4b21      	ldr	r3, [pc, #132]	; (800cd44 <le_adv_start_add_conn+0xb0>)
 800ccc0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	9302      	str	r3, [sp, #8]
 800ccc8:	f8cd 300b 	str.w	r3, [sp, #11]
 800cccc:	2207      	movs	r2, #7
 800ccce:	a902      	add	r1, sp, #8
 800ccd0:	4628      	mov	r0, r5
 800ccd2:	f00f fdd4 	bl	801c87e <memcmp>
 800ccd6:	4607      	mov	r7, r0
 800ccd8:	b9b0      	cbnz	r0, 800cd08 <le_adv_start_add_conn+0x74>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
 800ccda:	4b1b      	ldr	r3, [pc, #108]	; (800cd48 <le_adv_start_add_conn+0xb4>)
 800ccdc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cce0:	9004      	str	r0, [sp, #16]
 800cce2:	f8ad 1014 	strh.w	r1, [sp, #20]
 800cce6:	0c09      	lsrs	r1, r1, #16
 800cce8:	f88d 1016 	strb.w	r1, [sp, #22]
 800ccec:	a904      	add	r1, sp, #16
 800ccee:	7820      	ldrb	r0, [r4, #0]
 800ccf0:	f010 fcab 	bl	801d64a <bt_conn_add_le>
		if (!conn) {
 800ccf4:	4604      	mov	r4, r0
 800ccf6:	b120      	cbz	r0, 800cd02 <le_adv_start_add_conn+0x6e>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
 800ccf8:	2104      	movs	r1, #4
 800ccfa:	f003 fc59 	bl	80105b0 <bt_conn_set_state>
		*out_conn = conn;
 800ccfe:	6034      	str	r4, [r6, #0]
		return 0;
 800cd00:	e012      	b.n	800cd28 <le_adv_start_add_conn+0x94>
			return -ENOMEM;
 800cd02:	f06f 070b 	mvn.w	r7, #11
 800cd06:	e00f      	b.n	800cd28 <le_adv_start_add_conn+0x94>
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
 800cd08:	4629      	mov	r1, r5
 800cd0a:	7820      	ldrb	r0, [r4, #0]
 800cd0c:	f003 fbfc 	bl	8010508 <bt_conn_exists_le>
 800cd10:	b980      	cbnz	r0, 800cd34 <le_adv_start_add_conn+0xa0>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
 800cd12:	4629      	mov	r1, r5
 800cd14:	7820      	ldrb	r0, [r4, #0]
 800cd16:	f010 fc98 	bl	801d64a <bt_conn_add_le>
	if (!conn) {
 800cd1a:	4604      	mov	r4, r0
 800cd1c:	b168      	cbz	r0, 800cd3a <le_adv_start_add_conn+0xa6>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
 800cd1e:	2105      	movs	r1, #5
 800cd20:	f003 fc46 	bl	80105b0 <bt_conn_set_state>
	*out_conn = conn;
 800cd24:	6034      	str	r4, [r6, #0]
	return 0;
 800cd26:	2700      	movs	r7, #0
}
 800cd28:	4638      	mov	r0, r7
 800cd2a:	b007      	add	sp, #28
 800cd2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
 800cd2e:	f06f 0722 	mvn.w	r7, #34	; 0x22
 800cd32:	e7f9      	b.n	800cd28 <le_adv_start_add_conn+0x94>
		return -EINVAL;
 800cd34:	f06f 0715 	mvn.w	r7, #21
 800cd38:	e7f6      	b.n	800cd28 <le_adv_start_add_conn+0x94>
		return -ENOMEM;
 800cd3a:	f06f 070b 	mvn.w	r7, #11
 800cd3e:	e7f3      	b.n	800cd28 <le_adv_start_add_conn+0x94>
 800cd40:	0801cb4d 	.word	0x0801cb4d
 800cd44:	20000000 	.word	0x20000000
 800cd48:	08022d50 	.word	0x08022d50

0800cd4c <hci_num_completed_packets>:
{
 800cd4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
 800cd50:	f8d0 8008 	ldr.w	r8, [r0, #8]
	for (i = 0; i < evt->num_handles; i++) {
 800cd54:	2700      	movs	r7, #0
 800cd56:	e082      	b.n	800ce5e <hci_num_completed_packets+0x112>
	__asm__ volatile(
 800cd58:	f38b 8811 	msr	BASEPRI, fp
 800cd5c:	f3bf 8f6f 	isb	sy
			BT_ERR("No connection for handle %u", handle);
 800cd60:	2301      	movs	r3, #1
 800cd62:	f363 0a02 	bfi	sl, r3, #0, #3
 800cd66:	f36f 0ac5 	bfc	sl, #3, #3
 800cd6a:	4b50      	ldr	r3, [pc, #320]	; (800ceac <hci_num_completed_packets+0x160>)
 800cd6c:	4a50      	ldr	r2, [pc, #320]	; (800ceb0 <hci_num_completed_packets+0x164>)
 800cd6e:	1a9b      	subs	r3, r3, r2
 800cd70:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800cd74:	f363 1a8f 	bfi	sl, r3, #6, #10
 800cd78:	4652      	mov	r2, sl
 800cd7a:	4629      	mov	r1, r5
 800cd7c:	484d      	ldr	r0, [pc, #308]	; (800ceb4 <hci_num_completed_packets+0x168>)
 800cd7e:	f7f9 fbdf 	bl	8006540 <log_1>
			continue;
 800cd82:	e06b      	b.n	800ce5c <hci_num_completed_packets+0x110>
				conn->pending_no_cb--;
 800cd84:	3b01      	subs	r3, #1
 800cd86:	61e3      	str	r3, [r4, #28]
 800cd88:	f382 8811 	msr	BASEPRI, r2
 800cd8c:	f3bf 8f6f 	isb	sy
				k_sem_give(bt_conn_get_pkts(conn));
 800cd90:	4620      	mov	r0, r4
 800cd92:	f003 f86b 	bl	800fe6c <bt_conn_get_pkts>
 800cd96:	f00b ff57 	bl	8018c48 <z_impl_k_sem_give>
				continue;
 800cd9a:	e034      	b.n	800ce06 <hci_num_completed_packets+0xba>
	list->tail = node;
 800cd9c:	61a1      	str	r1, [r4, #24]
 800cd9e:	f382 8811 	msr	BASEPRI, r2
 800cda2:	f3bf 8f6f 	isb	sy
			if (!node) {
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d045      	beq.n	800ce36 <hci_num_completed_packets+0xea>
	__asm__ volatile(
 800cdaa:	f04f 0210 	mov.w	r2, #16
 800cdae:	f3ef 8111 	mrs	r1, BASEPRI
 800cdb2:	f382 8811 	msr	BASEPRI, r2
 800cdb6:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
 800cdba:	68da      	ldr	r2, [r3, #12]
 800cdbc:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	60da      	str	r2, [r3, #12]
	parent->next = child;
 800cdc2:	601a      	str	r2, [r3, #0]
	return list->tail;
 800cdc4:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
 800cdc6:	2a00      	cmp	r2, #0
 800cdc8:	d067      	beq.n	800ce9a <hci_num_completed_packets+0x14e>
	parent->next = child;
 800cdca:	6013      	str	r3, [r2, #0]
	list->tail = node;
 800cdcc:	6263      	str	r3, [r4, #36]	; 0x24
	__asm__ volatile(
 800cdce:	f381 8811 	msr	BASEPRI, r1
 800cdd2:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
 800cdd6:	f104 0128 	add.w	r1, r4, #40	; 0x28
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 800cdda:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800cdde:	f3bf 8f5b 	dmb	ish
 800cde2:	e853 2f00 	ldrex	r2, [r3]
 800cde6:	f042 0001 	orr.w	r0, r2, #1
 800cdea:	e843 0600 	strex	r6, r0, [r3]
 800cdee:	2e00      	cmp	r6, #0
 800cdf0:	d1f7      	bne.n	800cde2 <hci_num_completed_packets+0x96>
 800cdf2:	f3bf 8f5b 	dmb	ish
 800cdf6:	f012 0f01 	tst.w	r2, #1
 800cdfa:	d051      	beq.n	800cea0 <hci_num_completed_packets+0x154>
			k_sem_give(bt_conn_get_pkts(conn));
 800cdfc:	4620      	mov	r0, r4
 800cdfe:	f003 f835 	bl	800fe6c <bt_conn_get_pkts>
 800ce02:	f00b ff21 	bl	8018c48 <z_impl_k_sem_give>
{
 800ce06:	462e      	mov	r6, r5
		while (count--) {
 800ce08:	1e75      	subs	r5, r6, #1
 800ce0a:	b2ad      	uxth	r5, r5
 800ce0c:	b31e      	cbz	r6, 800ce56 <hci_num_completed_packets+0x10a>
	__asm__ volatile(
 800ce0e:	f04f 0310 	mov.w	r3, #16
 800ce12:	f3ef 8211 	mrs	r2, BASEPRI
 800ce16:	f383 8811 	msr	BASEPRI, r3
 800ce1a:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
 800ce1e:	69e3      	ldr	r3, [r4, #28]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d1af      	bne.n	800cd84 <hci_num_completed_packets+0x38>
	return list->head;
 800ce24:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d0b9      	beq.n	800cd9e <hci_num_completed_packets+0x52>
	return node->next;
 800ce2a:	6819      	ldr	r1, [r3, #0]
	list->head = node;
 800ce2c:	6161      	str	r1, [r4, #20]
	return list->tail;
 800ce2e:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 800ce30:	4283      	cmp	r3, r0
 800ce32:	d1b4      	bne.n	800cd9e <hci_num_completed_packets+0x52>
 800ce34:	e7b2      	b.n	800cd9c <hci_num_completed_packets+0x50>
				BT_ERR("packets count mismatch");
 800ce36:	2301      	movs	r3, #1
 800ce38:	f363 0902 	bfi	r9, r3, #0, #3
 800ce3c:	f36f 09c5 	bfc	r9, #3, #3
 800ce40:	4b1a      	ldr	r3, [pc, #104]	; (800ceac <hci_num_completed_packets+0x160>)
 800ce42:	4a1b      	ldr	r2, [pc, #108]	; (800ceb0 <hci_num_completed_packets+0x164>)
 800ce44:	1a9b      	subs	r3, r3, r2
 800ce46:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800ce4a:	f363 198f 	bfi	r9, r3, #6, #10
 800ce4e:	4649      	mov	r1, r9
 800ce50:	4819      	ldr	r0, [pc, #100]	; (800ceb8 <hci_num_completed_packets+0x16c>)
 800ce52:	f7f9 fce5 	bl	8006820 <log_0>
		bt_conn_unref(conn);
 800ce56:	4620      	mov	r0, r4
 800ce58:	f010 fc6a 	bl	801d730 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
 800ce5c:	3701      	adds	r7, #1
 800ce5e:	f898 3000 	ldrb.w	r3, [r8]
 800ce62:	429f      	cmp	r7, r3
 800ce64:	da20      	bge.n	800cea8 <hci_num_completed_packets+0x15c>
		handle = sys_le16_to_cpu(evt->h[i].handle);
 800ce66:	eb08 0387 	add.w	r3, r8, r7, lsl #2
 800ce6a:	f8b3 5001 	ldrh.w	r5, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
 800ce6e:	f8b3 6003 	ldrh.w	r6, [r3, #3]
 800ce72:	f04f 0310 	mov.w	r3, #16
 800ce76:	f3ef 8b11 	mrs	fp, BASEPRI
 800ce7a:	f383 8811 	msr	BASEPRI, r3
 800ce7e:	f3bf 8f6f 	isb	sy
		conn = bt_conn_lookup_handle(handle);
 800ce82:	4628      	mov	r0, r5
 800ce84:	f003 fac0 	bl	8010408 <bt_conn_lookup_handle>
		if (!conn) {
 800ce88:	4604      	mov	r4, r0
 800ce8a:	2800      	cmp	r0, #0
 800ce8c:	f43f af64 	beq.w	800cd58 <hci_num_completed_packets+0xc>
	__asm__ volatile(
 800ce90:	f38b 8811 	msr	BASEPRI, fp
 800ce94:	f3bf 8f6f 	isb	sy
}
 800ce98:	e7b6      	b.n	800ce08 <hci_num_completed_packets+0xbc>
	list->tail = node;
 800ce9a:	6263      	str	r3, [r4, #36]	; 0x24
	list->head = node;
 800ce9c:	6223      	str	r3, [r4, #32]
}
 800ce9e:	e796      	b.n	800cdce <hci_num_completed_packets+0x82>
		k_queue_append(&work_q->queue, work);
 800cea0:	4806      	ldr	r0, [pc, #24]	; (800cebc <hci_num_completed_packets+0x170>)
 800cea2:	f015 f807 	bl	8021eb4 <k_queue_append>
 800cea6:	e7a9      	b.n	800cdfc <hci_num_completed_packets+0xb0>
}
 800cea8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceac:	08022bc8 	.word	0x08022bc8
 800ceb0:	08022b90 	.word	0x08022b90
 800ceb4:	080266c8 	.word	0x080266c8
 800ceb8:	080266e4 	.word	0x080266e4
 800cebc:	20003310 	.word	0x20003310

0800cec0 <hci_le_meta_event>:
{
 800cec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cec2:	b083      	sub	sp, #12
 800cec4:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
 800cec6:	2101      	movs	r1, #1
 800cec8:	3008      	adds	r0, #8
 800ceca:	f013 fb08 	bl	80204de <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
 800cece:	7805      	ldrb	r5, [r0, #0]
	for (i = 0; i < num_handlers; i++) {
 800ced0:	2300      	movs	r3, #0
 800ced2:	2b0a      	cmp	r3, #10
 800ced4:	d824      	bhi.n	800cf20 <hci_le_meta_event+0x60>
		const struct event_handler *handler = &handlers[i];
 800ced6:	4a21      	ldr	r2, [pc, #132]	; (800cf5c <hci_le_meta_event+0x9c>)
 800ced8:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
		if (handler->event != event) {
 800cedc:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800cee0:	4295      	cmp	r5, r2
 800cee2:	d108      	bne.n	800cef6 <hci_le_meta_event+0x36>
		if (buf->len < handler->min_len) {
 800cee4:	89a1      	ldrh	r1, [r4, #12]
 800cee6:	7843      	ldrb	r3, [r0, #1]
 800cee8:	4299      	cmp	r1, r3
 800ceea:	d306      	bcc.n	800cefa <hci_le_meta_event+0x3a>
		handler->handler(buf);
 800ceec:	6843      	ldr	r3, [r0, #4]
 800ceee:	4620      	mov	r0, r4
 800cef0:	4798      	blx	r3
}
 800cef2:	b003      	add	sp, #12
 800cef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < num_handlers; i++) {
 800cef6:	3301      	adds	r3, #1
 800cef8:	e7eb      	b.n	800ced2 <hci_le_meta_event+0x12>
			BT_ERR("Too small (%u bytes) event 0x%02x",
 800cefa:	f04f 0300 	mov.w	r3, #0
 800cefe:	2201      	movs	r2, #1
 800cf00:	f362 0302 	bfi	r3, r2, #0, #3
 800cf04:	f36f 03c5 	bfc	r3, #3, #3
 800cf08:	4a15      	ldr	r2, [pc, #84]	; (800cf60 <hci_le_meta_event+0xa0>)
 800cf0a:	4816      	ldr	r0, [pc, #88]	; (800cf64 <hci_le_meta_event+0xa4>)
 800cf0c:	1a12      	subs	r2, r2, r0
 800cf0e:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 800cf12:	f362 138f 	bfi	r3, r2, #6, #10
 800cf16:	462a      	mov	r2, r5
 800cf18:	4813      	ldr	r0, [pc, #76]	; (800cf68 <hci_le_meta_event+0xa8>)
 800cf1a:	f7f9 fb91 	bl	8006640 <log_2>
			return;
 800cf1e:	e7e8      	b.n	800cef2 <hci_le_meta_event+0x32>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
 800cf20:	f04f 0600 	mov.w	r6, #0
 800cf24:	2302      	movs	r3, #2
 800cf26:	f363 0602 	bfi	r6, r3, #0, #3
 800cf2a:	f36f 06c5 	bfc	r6, #3, #3
 800cf2e:	4b0c      	ldr	r3, [pc, #48]	; (800cf60 <hci_le_meta_event+0xa0>)
 800cf30:	4a0c      	ldr	r2, [pc, #48]	; (800cf64 <hci_le_meta_event+0xa4>)
 800cf32:	1a9b      	subs	r3, r3, r2
 800cf34:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800cf38:	f363 168f 	bfi	r6, r3, #6, #10
 800cf3c:	89a7      	ldrh	r7, [r4, #12]
 800cf3e:	4639      	mov	r1, r7
 800cf40:	68a0      	ldr	r0, [r4, #8]
 800cf42:	f7fe fdd9 	bl	800baf8 <bt_hex_real>
 800cf46:	f7f9 f92b 	bl	80061a0 <log_strdup>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	f8ad 6000 	strh.w	r6, [sp]
 800cf50:	463a      	mov	r2, r7
 800cf52:	4629      	mov	r1, r5
 800cf54:	4805      	ldr	r0, [pc, #20]	; (800cf6c <hci_le_meta_event+0xac>)
 800cf56:	f7f9 fa27 	bl	80063a8 <log_3>
}
 800cf5a:	e7ca      	b.n	800cef2 <hci_le_meta_event+0x32>
 800cf5c:	08026ce4 	.word	0x08026ce4
 800cf60:	08022bc8 	.word	0x08022bc8
 800cf64:	08022b90 	.word	0x08022b90
 800cf68:	080266fc 	.word	0x080266fc
 800cf6c:	08026720 	.word	0x08026720

0800cf70 <hci_event>:
{
 800cf70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf72:	b083      	sub	sp, #12
 800cf74:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
 800cf76:	8983      	ldrh	r3, [r0, #12]
 800cf78:	2b01      	cmp	r3, #1
 800cf7a:	d916      	bls.n	800cfaa <hci_event+0x3a>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
 800cf7c:	2102      	movs	r1, #2
 800cf7e:	f104 0008 	add.w	r0, r4, #8
 800cf82:	f013 faac 	bl	80204de <net_buf_simple_pull_mem>
 800cf86:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
 800cf88:	7803      	ldrb	r3, [r0, #0]
	switch (evt) {
 800cf8a:	3b05      	subs	r3, #5
 800cf8c:	2b15      	cmp	r3, #21
 800cf8e:	d81c      	bhi.n	800cfca <hci_event+0x5a>
 800cf90:	e8df f003 	tbb	[pc, r3]
 800cf94:	1b1b1b19 	.word	0x1b1b1b19
 800cf98:	1b1b1b1b 	.word	0x1b1b1b1b
 800cf9c:	1b36361b 	.word	0x1b36361b
 800cfa0:	1b361b1b 	.word	0x1b361b1b
 800cfa4:	1b1b1b1b 	.word	0x1b1b1b1b
 800cfa8:	361b      	.short	0x361b
	BT_ASSERT(buf->len >= sizeof(*hdr));
 800cfaa:	f241 33f8 	movw	r3, #5112	; 0x13f8
 800cfae:	4a36      	ldr	r2, [pc, #216]	; (800d088 <hci_event+0x118>)
 800cfb0:	4936      	ldr	r1, [pc, #216]	; (800d08c <hci_event+0x11c>)
 800cfb2:	4837      	ldr	r0, [pc, #220]	; (800d090 <hci_event+0x120>)
 800cfb4:	f00d f82e 	bl	801a014 <printk>
 800cfb8:	4040      	eors	r0, r0
 800cfba:	f380 8811 	msr	BASEPRI, r0
 800cfbe:	f04f 0003 	mov.w	r0, #3
 800cfc2:	df02      	svc	2
 800cfc4:	e7da      	b.n	800cf7c <hci_event+0xc>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
 800cfc6:	2303      	movs	r3, #3
 800cfc8:	e000      	b.n	800cfcc <hci_event+0x5c>
		return BT_HCI_EVT_FLAG_RECV;
 800cfca:	2302      	movs	r3, #2
 800cfcc:	f013 0f02 	tst.w	r3, #2
 800cfd0:	d018      	beq.n	800d004 <hci_event+0x94>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
 800cfd2:	782d      	ldrb	r5, [r5, #0]
	for (i = 0; i < num_handlers; i++) {
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	2b05      	cmp	r3, #5
 800cfd8:	d837      	bhi.n	800d04a <hci_event+0xda>
		const struct event_handler *handler = &handlers[i];
 800cfda:	4a2e      	ldr	r2, [pc, #184]	; (800d094 <hci_event+0x124>)
 800cfdc:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
		if (handler->event != event) {
 800cfe0:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800cfe4:	4295      	cmp	r5, r2
 800cfe6:	d11b      	bne.n	800d020 <hci_event+0xb0>
		if (buf->len < handler->min_len) {
 800cfe8:	89a1      	ldrh	r1, [r4, #12]
 800cfea:	7843      	ldrb	r3, [r0, #1]
 800cfec:	4299      	cmp	r1, r3
 800cfee:	d319      	bcc.n	800d024 <hci_event+0xb4>
		handler->handler(buf);
 800cff0:	6843      	ldr	r3, [r0, #4]
 800cff2:	4620      	mov	r0, r4
 800cff4:	4798      	blx	r3
	net_buf_unref(buf);
 800cff6:	4620      	mov	r0, r4
 800cff8:	f013 f9f6 	bl	80203e8 <net_buf_unref>
}
 800cffc:	b003      	add	sp, #12
 800cffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_HCI_EVT_FLAG_RECV_PRIO;
 800d000:	2301      	movs	r3, #1
 800d002:	e7e3      	b.n	800cfcc <hci_event+0x5c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
 800d004:	f241 33fc 	movw	r3, #5116	; 0x13fc
 800d008:	4a1f      	ldr	r2, [pc, #124]	; (800d088 <hci_event+0x118>)
 800d00a:	4923      	ldr	r1, [pc, #140]	; (800d098 <hci_event+0x128>)
 800d00c:	4820      	ldr	r0, [pc, #128]	; (800d090 <hci_event+0x120>)
 800d00e:	f00d f801 	bl	801a014 <printk>
 800d012:	4040      	eors	r0, r0
 800d014:	f380 8811 	msr	BASEPRI, r0
 800d018:	f04f 0003 	mov.w	r0, #3
 800d01c:	df02      	svc	2
 800d01e:	e7d8      	b.n	800cfd2 <hci_event+0x62>
	for (i = 0; i < num_handlers; i++) {
 800d020:	3301      	adds	r3, #1
 800d022:	e7d8      	b.n	800cfd6 <hci_event+0x66>
			BT_ERR("Too small (%u bytes) event 0x%02x",
 800d024:	f04f 0300 	mov.w	r3, #0
 800d028:	2201      	movs	r2, #1
 800d02a:	f362 0302 	bfi	r3, r2, #0, #3
 800d02e:	f36f 03c5 	bfc	r3, #3, #3
 800d032:	4a1a      	ldr	r2, [pc, #104]	; (800d09c <hci_event+0x12c>)
 800d034:	481a      	ldr	r0, [pc, #104]	; (800d0a0 <hci_event+0x130>)
 800d036:	1a12      	subs	r2, r2, r0
 800d038:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 800d03c:	f362 138f 	bfi	r3, r2, #6, #10
 800d040:	462a      	mov	r2, r5
 800d042:	4818      	ldr	r0, [pc, #96]	; (800d0a4 <hci_event+0x134>)
 800d044:	f7f9 fafc 	bl	8006640 <log_2>
			return;
 800d048:	e7d5      	b.n	800cff6 <hci_event+0x86>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
 800d04a:	f04f 0600 	mov.w	r6, #0
 800d04e:	2302      	movs	r3, #2
 800d050:	f363 0602 	bfi	r6, r3, #0, #3
 800d054:	f36f 06c5 	bfc	r6, #3, #3
 800d058:	4b10      	ldr	r3, [pc, #64]	; (800d09c <hci_event+0x12c>)
 800d05a:	4a11      	ldr	r2, [pc, #68]	; (800d0a0 <hci_event+0x130>)
 800d05c:	1a9b      	subs	r3, r3, r2
 800d05e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800d062:	f363 168f 	bfi	r6, r3, #6, #10
 800d066:	89a7      	ldrh	r7, [r4, #12]
 800d068:	4639      	mov	r1, r7
 800d06a:	68a0      	ldr	r0, [r4, #8]
 800d06c:	f7fe fd44 	bl	800baf8 <bt_hex_real>
 800d070:	f7f9 f896 	bl	80061a0 <log_strdup>
 800d074:	4603      	mov	r3, r0
 800d076:	f8ad 6000 	strh.w	r6, [sp]
 800d07a:	463a      	mov	r2, r7
 800d07c:	4629      	mov	r1, r5
 800d07e:	480a      	ldr	r0, [pc, #40]	; (800d0a8 <hci_event+0x138>)
 800d080:	f7f9 f992 	bl	80063a8 <log_3>
 800d084:	e7b7      	b.n	800cff6 <hci_event+0x86>
 800d086:	bf00      	nop
 800d088:	08026580 	.word	0x08026580
 800d08c:	080265b4 	.word	0x080265b4
 800d090:	080265d0 	.word	0x080265d0
 800d094:	08026d8c 	.word	0x08026d8c
 800d098:	08026744 	.word	0x08026744
 800d09c:	08022bc8 	.word	0x08022bc8
 800d0a0:	08022b90 	.word	0x08022b90
 800d0a4:	080266fc 	.word	0x080266fc
 800d0a8:	08026720 	.word	0x08026720

0800d0ac <bt_hci_cmd_create>:
{
 800d0ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0b0:	4682      	mov	sl, r0
 800d0b2:	460e      	mov	r6, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
 800d0b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d0b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0bc:	4817      	ldr	r0, [pc, #92]	; (800d11c <bt_hci_cmd_create+0x70>)
 800d0be:	f013 f95a 	bl	8020376 <net_buf_alloc_fixed>
 800d0c2:	4604      	mov	r4, r0
	net_buf_reserve(buf, BT_BUF_RESERVE);
 800d0c4:	f100 0808 	add.w	r8, r0, #8
 800d0c8:	2100      	movs	r1, #0
 800d0ca:	4640      	mov	r0, r8
 800d0cc:	f013 f97b 	bl	80203c6 <net_buf_simple_reserve>
	*(uint8_t *)net_buf_user_data(buf) = type;
 800d0d0:	2700      	movs	r7, #0
 800d0d2:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
 800d0d4:	4620      	mov	r0, r4
 800d0d6:	f009 fd4d 	bl	8016b74 <net_buf_id>
 800d0da:	4d11      	ldr	r5, [pc, #68]	; (800d120 <bt_hci_cmd_create+0x74>)
 800d0dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800d0e0:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800d0e4:	f8a0 a002 	strh.w	sl, [r0, #2]
	cmd(buf)->sync = NULL;
 800d0e8:	4620      	mov	r0, r4
 800d0ea:	f009 fd43 	bl	8016b74 <net_buf_id>
 800d0ee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800d0f2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800d0f6:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
 800d0f8:	4620      	mov	r0, r4
 800d0fa:	f009 fd3b 	bl	8016b74 <net_buf_id>
 800d0fe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800d102:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 800d106:	606f      	str	r7, [r5, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
 800d108:	2103      	movs	r1, #3
 800d10a:	4640      	mov	r0, r8
 800d10c:	f013 f9b6 	bl	802047c <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
 800d110:	f8a0 a000 	strh.w	sl, [r0]
	hdr->param_len = param_len;
 800d114:	7086      	strb	r6, [r0, #2]
}
 800d116:	4620      	mov	r0, r4
 800d118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d11c:	20001178 	.word	0x20001178
 800d120:	2000410c 	.word	0x2000410c

0800d124 <bt_hci_cmd_send_sync>:
{
 800d124:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d126:	b087      	sub	sp, #28
 800d128:	4606      	mov	r6, r0
 800d12a:	4615      	mov	r5, r2
	if (!buf) {
 800d12c:	460c      	mov	r4, r1
 800d12e:	b359      	cbz	r1, 800d188 <bt_hci_cmd_send_sync+0x64>
	return z_impl_k_sem_init(sem, initial_count, limit);
 800d130:	2201      	movs	r2, #1
 800d132:	2100      	movs	r1, #0
 800d134:	4668      	mov	r0, sp
 800d136:	f015 f85d 	bl	80221f4 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
 800d13a:	4620      	mov	r0, r4
 800d13c:	f009 fd1a 	bl	8016b74 <net_buf_id>
 800d140:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800d144:	4b2f      	ldr	r3, [pc, #188]	; (800d204 <bt_hci_cmd_send_sync+0xe0>)
 800d146:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d14a:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
 800d14e:	4620      	mov	r0, r4
 800d150:	f013 f970 	bl	8020434 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
 800d154:	4621      	mov	r1, r4
 800d156:	482c      	ldr	r0, [pc, #176]	; (800d208 <bt_hci_cmd_send_sync+0xe4>)
 800d158:	f013 f939 	bl	80203ce <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
 800d15c:	4a2b      	ldr	r2, [pc, #172]	; (800d20c <bt_hci_cmd_send_sync+0xe8>)
 800d15e:	2300      	movs	r3, #0
 800d160:	4668      	mov	r0, sp
 800d162:	f00b fd99 	bl	8018c98 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
 800d166:	4607      	mov	r7, r0
 800d168:	b9b0      	cbnz	r0, 800d198 <bt_hci_cmd_send_sync+0x74>
	status = cmd(buf)->status;
 800d16a:	4620      	mov	r0, r4
 800d16c:	f009 fd02 	bl	8016b74 <net_buf_id>
 800d170:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800d174:	4b23      	ldr	r3, [pc, #140]	; (800d204 <bt_hci_cmd_send_sync+0xe0>)
 800d176:	f813 7020 	ldrb.w	r7, [r3, r0, lsl #2]
	if (status) {
 800d17a:	b9ff      	cbnz	r7, 800d1bc <bt_hci_cmd_send_sync+0x98>
	if (rsp) {
 800d17c:	2d00      	cmp	r5, #0
 800d17e:	d03b      	beq.n	800d1f8 <bt_hci_cmd_send_sync+0xd4>
		*rsp = buf;
 800d180:	602c      	str	r4, [r5, #0]
	return 0;
 800d182:	2000      	movs	r0, #0
}
 800d184:	b007      	add	sp, #28
 800d186:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf = bt_hci_cmd_create(opcode, 0);
 800d188:	f7ff ff90 	bl	800d0ac <bt_hci_cmd_create>
		if (!buf) {
 800d18c:	4604      	mov	r4, r0
 800d18e:	2800      	cmp	r0, #0
 800d190:	d1ce      	bne.n	800d130 <bt_hci_cmd_send_sync+0xc>
			return -ENOBUFS;
 800d192:	f06f 0036 	mvn.w	r0, #54	; 0x36
 800d196:	e7f5      	b.n	800d184 <bt_hci_cmd_send_sync+0x60>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
 800d198:	f240 1377 	movw	r3, #375	; 0x177
 800d19c:	4a1c      	ldr	r2, [pc, #112]	; (800d210 <bt_hci_cmd_send_sync+0xec>)
 800d19e:	491d      	ldr	r1, [pc, #116]	; (800d214 <bt_hci_cmd_send_sync+0xf0>)
 800d1a0:	481d      	ldr	r0, [pc, #116]	; (800d218 <bt_hci_cmd_send_sync+0xf4>)
 800d1a2:	f00c ff37 	bl	801a014 <printk>
 800d1a6:	4639      	mov	r1, r7
 800d1a8:	481c      	ldr	r0, [pc, #112]	; (800d21c <bt_hci_cmd_send_sync+0xf8>)
 800d1aa:	f00c ff33 	bl	801a014 <printk>
 800d1ae:	4040      	eors	r0, r0
 800d1b0:	f380 8811 	msr	BASEPRI, r0
 800d1b4:	f04f 0003 	mov.w	r0, #3
 800d1b8:	df02      	svc	2
 800d1ba:	e7d6      	b.n	800d16a <bt_hci_cmd_send_sync+0x46>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
 800d1bc:	f04f 0300 	mov.w	r3, #0
 800d1c0:	2202      	movs	r2, #2
 800d1c2:	f362 0302 	bfi	r3, r2, #0, #3
 800d1c6:	f36f 03c5 	bfc	r3, #3, #3
 800d1ca:	4a15      	ldr	r2, [pc, #84]	; (800d220 <bt_hci_cmd_send_sync+0xfc>)
 800d1cc:	4915      	ldr	r1, [pc, #84]	; (800d224 <bt_hci_cmd_send_sync+0x100>)
 800d1ce:	1a52      	subs	r2, r2, r1
 800d1d0:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 800d1d4:	f362 138f 	bfi	r3, r2, #6, #10
 800d1d8:	463a      	mov	r2, r7
 800d1da:	4631      	mov	r1, r6
 800d1dc:	4812      	ldr	r0, [pc, #72]	; (800d228 <bt_hci_cmd_send_sync+0x104>)
 800d1de:	f7f9 fa2f 	bl	8006640 <log_2>
		net_buf_unref(buf);
 800d1e2:	4620      	mov	r0, r4
 800d1e4:	f013 f900 	bl	80203e8 <net_buf_unref>
		switch (status) {
 800d1e8:	2f09      	cmp	r7, #9
 800d1ea:	d002      	beq.n	800d1f2 <bt_hci_cmd_send_sync+0xce>
			return -EIO;
 800d1ec:	f06f 0004 	mvn.w	r0, #4
 800d1f0:	e7c8      	b.n	800d184 <bt_hci_cmd_send_sync+0x60>
			return -ECONNREFUSED;
 800d1f2:	f06f 003c 	mvn.w	r0, #60	; 0x3c
 800d1f6:	e7c5      	b.n	800d184 <bt_hci_cmd_send_sync+0x60>
		net_buf_unref(buf);
 800d1f8:	4620      	mov	r0, r4
 800d1fa:	f013 f8f5 	bl	80203e8 <net_buf_unref>
	return 0;
 800d1fe:	2000      	movs	r0, #0
 800d200:	e7c0      	b.n	800d184 <bt_hci_cmd_send_sync+0x60>
 800d202:	bf00      	nop
 800d204:	2000410c 	.word	0x2000410c
 800d208:	20000104 	.word	0x20000104
 800d20c:	000186a0 	.word	0x000186a0
 800d210:	08026580 	.word	0x08026580
 800d214:	08026774 	.word	0x08026774
 800d218:	080265d0 	.word	0x080265d0
 800d21c:	08026780 	.word	0x08026780
 800d220:	08022bc8 	.word	0x08022bc8
 800d224:	08022b90 	.word	0x08022b90
 800d228:	080267a0 	.word	0x080267a0

0800d22c <set_flow_control>:
{
 800d22c:	b538      	push	{r3, r4, r5, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
 800d22e:	4b27      	ldr	r3, [pc, #156]	; (800d2cc <set_flow_control+0xa0>)
 800d230:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d234:	f013 0f20 	tst.w	r3, #32
 800d238:	d02e      	beq.n	800d298 <set_flow_control+0x6c>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
 800d23a:	2107      	movs	r1, #7
 800d23c:	f640 4033 	movw	r0, #3123	; 0xc33
 800d240:	f7ff ff34 	bl	800d0ac <bt_hci_cmd_create>
	if (!buf) {
 800d244:	4605      	mov	r5, r0
 800d246:	b3d0      	cbz	r0, 800d2be <set_flow_control+0x92>
	hbs = net_buf_add(buf, sizeof(*hbs));
 800d248:	2107      	movs	r1, #7
 800d24a:	3008      	adds	r0, #8
 800d24c:	f013 f916 	bl	802047c <net_buf_simple_add>
 800d250:	4604      	mov	r4, r0
	(void)memset(hbs, 0, sizeof(*hbs));
 800d252:	2207      	movs	r2, #7
 800d254:	2100      	movs	r1, #0
 800d256:	f00f fb4f 	bl	801c8f8 <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
 800d25a:	2200      	movs	r2, #0
 800d25c:	2345      	movs	r3, #69	; 0x45
 800d25e:	7023      	strb	r3, [r4, #0]
 800d260:	7062      	strb	r2, [r4, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
 800d262:	2306      	movs	r3, #6
 800d264:	70e3      	strb	r3, [r4, #3]
 800d266:	7122      	strb	r2, [r4, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
 800d268:	4629      	mov	r1, r5
 800d26a:	f640 4033 	movw	r0, #3123	; 0xc33
 800d26e:	f7ff ff59 	bl	800d124 <bt_hci_cmd_send_sync>
	if (err) {
 800d272:	bb18      	cbnz	r0, 800d2bc <set_flow_control+0x90>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
 800d274:	2101      	movs	r1, #1
 800d276:	f640 4031 	movw	r0, #3121	; 0xc31
 800d27a:	f7ff ff17 	bl	800d0ac <bt_hci_cmd_create>
	if (!buf) {
 800d27e:	4604      	mov	r4, r0
 800d280:	b300      	cbz	r0, 800d2c4 <set_flow_control+0x98>
	net_buf_add_u8(buf, BT_HCI_CTL_TO_HOST_FLOW_ENABLE);
 800d282:	2101      	movs	r1, #1
 800d284:	3008      	adds	r0, #8
 800d286:	f013 f90a 	bl	802049e <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
 800d28a:	2200      	movs	r2, #0
 800d28c:	4621      	mov	r1, r4
 800d28e:	f640 4031 	movw	r0, #3121	; 0xc31
 800d292:	f7ff ff47 	bl	800d124 <bt_hci_cmd_send_sync>
 800d296:	e011      	b.n	800d2bc <set_flow_control+0x90>
		BT_WARN("Controller to host flow control not supported");
 800d298:	f04f 0100 	mov.w	r1, #0
 800d29c:	2302      	movs	r3, #2
 800d29e:	f363 0102 	bfi	r1, r3, #0, #3
 800d2a2:	f36f 01c5 	bfc	r1, #3, #3
 800d2a6:	4b0a      	ldr	r3, [pc, #40]	; (800d2d0 <set_flow_control+0xa4>)
 800d2a8:	4a0a      	ldr	r2, [pc, #40]	; (800d2d4 <set_flow_control+0xa8>)
 800d2aa:	1a9b      	subs	r3, r3, r2
 800d2ac:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800d2b0:	f363 118f 	bfi	r1, r3, #6, #10
 800d2b4:	4808      	ldr	r0, [pc, #32]	; (800d2d8 <set_flow_control+0xac>)
 800d2b6:	f7f9 fab3 	bl	8006820 <log_0>
		return 0;
 800d2ba:	2000      	movs	r0, #0
}
 800d2bc:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
 800d2be:	f06f 0036 	mvn.w	r0, #54	; 0x36
 800d2c2:	e7fb      	b.n	800d2bc <set_flow_control+0x90>
		return -ENOBUFS;
 800d2c4:	f06f 0036 	mvn.w	r0, #54	; 0x36
 800d2c8:	e7f8      	b.n	800d2bc <set_flow_control+0x90>
 800d2ca:	bf00      	nop
 800d2cc:	20000000 	.word	0x20000000
 800d2d0:	08022bc8 	.word	0x08022bc8
 800d2d4:	08022b90 	.word	0x08022b90
 800d2d8:	080267bc 	.word	0x080267bc

0800d2dc <common_init>:
{
 800d2dc:	b500      	push	{lr}
 800d2de:	b083      	sub	sp, #12
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
 800d2e0:	4b26      	ldr	r3, [pc, #152]	; (800d37c <common_init+0xa0>)
 800d2e2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800d2e6:	689b      	ldr	r3, [r3, #8]
 800d2e8:	f013 0f01 	tst.w	r3, #1
 800d2ec:	d10d      	bne.n	800d30a <common_init+0x2e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
 800d2ee:	aa01      	add	r2, sp, #4
 800d2f0:	2100      	movs	r1, #0
 800d2f2:	f640 4003 	movw	r0, #3075	; 0xc03
 800d2f6:	f7ff ff15 	bl	800d124 <bt_hci_cmd_send_sync>
		if (err) {
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	b968      	cbnz	r0, 800d31a <common_init+0x3e>
		hci_reset_complete(rsp);
 800d2fe:	9801      	ldr	r0, [sp, #4]
 800d300:	f7fe ff26 	bl	800c150 <hci_reset_complete>
		net_buf_unref(rsp);
 800d304:	9801      	ldr	r0, [sp, #4]
 800d306:	f013 f86f 	bl	80203e8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
 800d30a:	aa01      	add	r2, sp, #4
 800d30c:	2100      	movs	r1, #0
 800d30e:	f241 0003 	movw	r0, #4099	; 0x1003
 800d312:	f7ff ff07 	bl	800d124 <bt_hci_cmd_send_sync>
	if (err) {
 800d316:	4603      	mov	r3, r0
 800d318:	b118      	cbz	r0, 800d322 <common_init+0x46>
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	b003      	add	sp, #12
 800d31e:	f85d fb04 	ldr.w	pc, [sp], #4
	read_local_features_complete(rsp);
 800d322:	9801      	ldr	r0, [sp, #4]
 800d324:	f7fe ff32 	bl	800c18c <read_local_features_complete>
	net_buf_unref(rsp);
 800d328:	9801      	ldr	r0, [sp, #4]
 800d32a:	f013 f85d 	bl	80203e8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
 800d32e:	aa01      	add	r2, sp, #4
 800d330:	2100      	movs	r1, #0
 800d332:	f241 0001 	movw	r0, #4097	; 0x1001
 800d336:	f7ff fef5 	bl	800d124 <bt_hci_cmd_send_sync>
	if (err) {
 800d33a:	4603      	mov	r3, r0
 800d33c:	2800      	cmp	r0, #0
 800d33e:	d1ec      	bne.n	800d31a <common_init+0x3e>
	read_local_ver_complete(rsp);
 800d340:	9801      	ldr	r0, [sp, #4]
 800d342:	f7fe fe97 	bl	800c074 <read_local_ver_complete>
	net_buf_unref(rsp);
 800d346:	9801      	ldr	r0, [sp, #4]
 800d348:	f013 f84e 	bl	80203e8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
 800d34c:	aa01      	add	r2, sp, #4
 800d34e:	2100      	movs	r1, #0
 800d350:	f241 0002 	movw	r0, #4098	; 0x1002
 800d354:	f7ff fee6 	bl	800d124 <bt_hci_cmd_send_sync>
	if (err) {
 800d358:	4603      	mov	r3, r0
 800d35a:	2800      	cmp	r0, #0
 800d35c:	d1dd      	bne.n	800d31a <common_init+0x3e>
	read_supported_commands_complete(rsp);
 800d35e:	9801      	ldr	r0, [sp, #4]
 800d360:	f7fe ff1e 	bl	800c1a0 <read_supported_commands_complete>
	net_buf_unref(rsp);
 800d364:	9801      	ldr	r0, [sp, #4]
 800d366:	f013 f83f 	bl	80203e8 <net_buf_unref>
		err = prng_init();
 800d36a:	f002 fcb5 	bl	800fcd8 <prng_init>
		if (err) {
 800d36e:	4603      	mov	r3, r0
 800d370:	2800      	cmp	r0, #0
 800d372:	d1d2      	bne.n	800d31a <common_init+0x3e>
	err = set_flow_control();
 800d374:	f7ff ff5a 	bl	800d22c <set_flow_control>
 800d378:	4603      	mov	r3, r0
	if (err) {
 800d37a:	e7ce      	b.n	800d31a <common_init+0x3e>
 800d37c:	20000000 	.word	0x20000000

0800d380 <hci_le_read_max_data_len>:
{
 800d380:	b570      	push	{r4, r5, r6, lr}
 800d382:	b082      	sub	sp, #8
 800d384:	4605      	mov	r5, r0
 800d386:	460c      	mov	r4, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
 800d388:	aa01      	add	r2, sp, #4
 800d38a:	2100      	movs	r1, #0
 800d38c:	f242 002f 	movw	r0, #8239	; 0x202f
 800d390:	f7ff fec8 	bl	800d124 <bt_hci_cmd_send_sync>
	if (err) {
 800d394:	4606      	mov	r6, r0
 800d396:	b960      	cbnz	r0, 800d3b2 <hci_le_read_max_data_len+0x32>
	rp = (void *)rsp->data;
 800d398:	9801      	ldr	r0, [sp, #4]
 800d39a:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
 800d39c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
 800d3a0:	802a      	strh	r2, [r5, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
 800d3a2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800d3a6:	8023      	strh	r3, [r4, #0]
	net_buf_unref(rsp);
 800d3a8:	f013 f81e 	bl	80203e8 <net_buf_unref>
}
 800d3ac:	4630      	mov	r0, r6
 800d3ae:	b002      	add	sp, #8
 800d3b0:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Failed to read DLE max data len");
 800d3b2:	f04f 0100 	mov.w	r1, #0
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	f363 0102 	bfi	r1, r3, #0, #3
 800d3bc:	f36f 01c5 	bfc	r1, #3, #3
 800d3c0:	4b05      	ldr	r3, [pc, #20]	; (800d3d8 <hci_le_read_max_data_len+0x58>)
 800d3c2:	4a06      	ldr	r2, [pc, #24]	; (800d3dc <hci_le_read_max_data_len+0x5c>)
 800d3c4:	1a9b      	subs	r3, r3, r2
 800d3c6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800d3ca:	f363 118f 	bfi	r1, r3, #6, #10
 800d3ce:	4804      	ldr	r0, [pc, #16]	; (800d3e0 <hci_le_read_max_data_len+0x60>)
 800d3d0:	f7f9 fa26 	bl	8006820 <log_0>
		return err;
 800d3d4:	e7ea      	b.n	800d3ac <hci_le_read_max_data_len+0x2c>
 800d3d6:	bf00      	nop
 800d3d8:	08022bc8 	.word	0x08022bc8
 800d3dc:	08022b90 	.word	0x08022b90
 800d3e0:	080267ec 	.word	0x080267ec

0800d3e4 <le_set_event_mask>:
{
 800d3e4:	b570      	push	{r4, r5, r6, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
 800d3e6:	2108      	movs	r1, #8
 800d3e8:	f242 0001 	movw	r0, #8193	; 0x2001
 800d3ec:	f7ff fe5e 	bl	800d0ac <bt_hci_cmd_create>
	if (!buf) {
 800d3f0:	2800      	cmp	r0, #0
 800d3f2:	d04b      	beq.n	800d48c <le_set_event_mask+0xa8>
 800d3f4:	4604      	mov	r4, r0
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
 800d3f6:	2108      	movs	r1, #8
 800d3f8:	4408      	add	r0, r1
 800d3fa:	f013 f83f 	bl	802047c <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
 800d3fe:	4b25      	ldr	r3, [pc, #148]	; (800d494 <le_set_event_mask+0xb0>)
 800d400:	f893 1098 	ldrb.w	r1, [r3, #152]	; 0x98
		if ((IS_ENABLED(CONFIG_BT_SMP) &&
 800d404:	f011 0f40 	tst.w	r1, #64	; 0x40
 800d408:	d03a      	beq.n	800d480 <le_set_event_mask+0x9c>
			mask |= BT_EVT_MASK_LE_ENH_CONN_COMPLETE;
 800d40a:	f240 2602 	movw	r6, #514	; 0x202
 800d40e:	2500      	movs	r5, #0
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
 800d410:	f046 030c 	orr.w	r3, r6, #12
 800d414:	462a      	mov	r2, r5
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
 800d416:	f011 0f02 	tst.w	r1, #2
 800d41a:	d001      	beq.n	800d420 <le_set_event_mask+0x3c>
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
 800d41c:	f046 032c 	orr.w	r3, r6, #44	; 0x2c
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
 800d420:	f011 0f20 	tst.w	r1, #32
 800d424:	d001      	beq.n	800d42a <le_set_event_mask+0x46>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
 800d426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
		    (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
 800d42a:	4d1a      	ldr	r5, [pc, #104]	; (800d494 <le_set_event_mask+0xb0>)
 800d42c:	f895 5099 	ldrb.w	r5, [r5, #153]	; 0x99
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
 800d430:	f015 0f09 	tst.w	r5, #9
 800d434:	d001      	beq.n	800d43a <le_set_event_mask+0x56>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
 800d436:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_SMP) &&
 800d43a:	f011 0f01 	tst.w	r1, #1
 800d43e:	d001      	beq.n	800d444 <le_set_event_mask+0x60>
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
 800d440:	f043 0310 	orr.w	r3, r3, #16
	    (BT_CMD_TEST(bt_dev.supported_commands, 34, 1)) &&
 800d444:	4913      	ldr	r1, [pc, #76]	; (800d494 <le_set_event_mask+0xb0>)
 800d446:	f891 106a 	ldrb.w	r1, [r1, #106]	; 0x6a
	if (IS_ENABLED(CONFIG_BT_ECC) &&
 800d44a:	f001 0106 	and.w	r1, r1, #6
 800d44e:	2906      	cmp	r1, #6
 800d450:	d019      	beq.n	800d486 <le_set_event_mask+0xa2>
	dst[0] = val;
 800d452:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
 800d454:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800d458:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
 800d45a:	0c19      	lsrs	r1, r3, #16
	dst[0] = val;
 800d45c:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
 800d45e:	0e1b      	lsrs	r3, r3, #24
 800d460:	70c3      	strb	r3, [r0, #3]
	dst[0] = val;
 800d462:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
 800d464:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800d468:	7143      	strb	r3, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
 800d46a:	0c13      	lsrs	r3, r2, #16
	dst[0] = val;
 800d46c:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
 800d46e:	0e12      	lsrs	r2, r2, #24
 800d470:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
 800d472:	2200      	movs	r2, #0
 800d474:	4621      	mov	r1, r4
 800d476:	f242 0001 	movw	r0, #8193	; 0x2001
 800d47a:	f7ff fe53 	bl	800d124 <bt_hci_cmd_send_sync>
}
 800d47e:	bd70      	pop	{r4, r5, r6, pc}
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
 800d480:	2603      	movs	r6, #3
 800d482:	2500      	movs	r5, #0
 800d484:	e7c4      	b.n	800d410 <le_set_event_mask+0x2c>
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
 800d486:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800d48a:	e7e2      	b.n	800d452 <le_set_event_mask+0x6e>
		return -ENOBUFS;
 800d48c:	f06f 0036 	mvn.w	r0, #54	; 0x36
 800d490:	e7f5      	b.n	800d47e <le_set_event_mask+0x9a>
 800d492:	bf00      	nop
 800d494:	20000000 	.word	0x20000000

0800d498 <le_init>:
{
 800d498:	b510      	push	{r4, lr}
 800d49a:	b082      	sub	sp, #8
	if (!BT_FEAT_LE(bt_dev.features)) {
 800d49c:	4b5b      	ldr	r3, [pc, #364]	; (800d60c <le_init+0x174>)
 800d49e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d4a2:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d4a6:	d00a      	beq.n	800d4be <le_init+0x26>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
 800d4a8:	aa01      	add	r2, sp, #4
 800d4aa:	2100      	movs	r1, #0
 800d4ac:	f242 0003 	movw	r0, #8195	; 0x2003
 800d4b0:	f7ff fe38 	bl	800d124 <bt_hci_cmd_send_sync>
	if (err) {
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	b1b0      	cbz	r0, 800d4e6 <le_init+0x4e>
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	b002      	add	sp, #8
 800d4bc:	bd10      	pop	{r4, pc}
		BT_ERR("Non-LE capable controller detected!");
 800d4be:	f04f 0100 	mov.w	r1, #0
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	f363 0102 	bfi	r1, r3, #0, #3
 800d4c8:	f36f 01c5 	bfc	r1, #3, #3
 800d4cc:	4b50      	ldr	r3, [pc, #320]	; (800d610 <le_init+0x178>)
 800d4ce:	4a51      	ldr	r2, [pc, #324]	; (800d614 <le_init+0x17c>)
 800d4d0:	1a9b      	subs	r3, r3, r2
 800d4d2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800d4d6:	f363 118f 	bfi	r1, r3, #6, #10
 800d4da:	484f      	ldr	r0, [pc, #316]	; (800d618 <le_init+0x180>)
 800d4dc:	f7f9 f9a0 	bl	8006820 <log_0>
		return -ENODEV;
 800d4e0:	f06f 0312 	mvn.w	r3, #18
 800d4e4:	e7e8      	b.n	800d4b8 <le_init+0x20>
	read_le_features_complete(rsp);
 800d4e6:	9801      	ldr	r0, [sp, #4]
 800d4e8:	f7fe fe64 	bl	800c1b4 <read_le_features_complete>
	net_buf_unref(rsp);
 800d4ec:	9801      	ldr	r0, [sp, #4]
 800d4ee:	f012 ff7b 	bl	80203e8 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
 800d4f2:	aa01      	add	r2, sp, #4
 800d4f4:	2100      	movs	r1, #0
 800d4f6:	f242 0002 	movw	r0, #8194	; 0x2002
 800d4fa:	f7ff fe13 	bl	800d124 <bt_hci_cmd_send_sync>
		if (err) {
 800d4fe:	4603      	mov	r3, r0
 800d500:	2800      	cmp	r0, #0
 800d502:	d1d9      	bne.n	800d4b8 <le_init+0x20>
		le_read_buffer_size_complete(rsp);
 800d504:	9801      	ldr	r0, [sp, #4]
 800d506:	f7fe febd 	bl	800c284 <le_read_buffer_size_complete>
		net_buf_unref(rsp);
 800d50a:	9801      	ldr	r0, [sp, #4]
 800d50c:	f012 ff6c 	bl	80203e8 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
 800d510:	4b3e      	ldr	r3, [pc, #248]	; (800d60c <le_init+0x174>)
 800d512:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d516:	f013 0f20 	tst.w	r3, #32
 800d51a:	d024      	beq.n	800d566 <le_init+0xce>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
 800d51c:	4b3b      	ldr	r3, [pc, #236]	; (800d60c <le_init+0x174>)
 800d51e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800d522:	f013 0f08 	tst.w	r3, #8
 800d526:	d137      	bne.n	800d598 <le_init+0x100>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
 800d528:	4b38      	ldr	r3, [pc, #224]	; (800d60c <le_init+0x174>)
 800d52a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
	if (IS_ENABLED(CONFIG_BT_CONN) &&
 800d52e:	f013 0f20 	tst.w	r3, #32
 800d532:	d141      	bne.n	800d5b8 <le_init+0x120>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
 800d534:	4b35      	ldr	r3, [pc, #212]	; (800d60c <le_init+0x174>)
 800d536:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d53a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d53e:	d00e      	beq.n	800d55e <le_init+0xc6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
 800d540:	aa01      	add	r2, sp, #4
 800d542:	2100      	movs	r1, #0
 800d544:	f242 002a 	movw	r0, #8234	; 0x202a
 800d548:	f7ff fdec 	bl	800d124 <bt_hci_cmd_send_sync>
		if (err) {
 800d54c:	4603      	mov	r3, r0
 800d54e:	2800      	cmp	r0, #0
 800d550:	d1b2      	bne.n	800d4b8 <le_init+0x20>
		le_read_resolving_list_size_complete(rsp);
 800d552:	9801      	ldr	r0, [sp, #4]
 800d554:	f7fe fdc0 	bl	800c0d8 <le_read_resolving_list_size_complete>
		net_buf_unref(rsp);
 800d558:	9801      	ldr	r0, [sp, #4]
 800d55a:	f012 ff45 	bl	80203e8 <net_buf_unref>
	return  le_set_event_mask();
 800d55e:	f7ff ff41 	bl	800d3e4 <le_set_event_mask>
 800d562:	4603      	mov	r3, r0
 800d564:	e7a8      	b.n	800d4b8 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
 800d566:	2102      	movs	r1, #2
 800d568:	f640 406d 	movw	r0, #3181	; 0xc6d
 800d56c:	f7ff fd9e 	bl	800d0ac <bt_hci_cmd_create>
		if (!buf) {
 800d570:	4604      	mov	r4, r0
 800d572:	2800      	cmp	r0, #0
 800d574:	d047      	beq.n	800d606 <le_init+0x16e>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
 800d576:	2102      	movs	r1, #2
 800d578:	3008      	adds	r0, #8
 800d57a:	f012 ff7f 	bl	802047c <net_buf_simple_add>
		cp_le->le = 0x01;
 800d57e:	2301      	movs	r3, #1
 800d580:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
 800d582:	2200      	movs	r2, #0
 800d584:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
 800d586:	4621      	mov	r1, r4
 800d588:	f640 406d 	movw	r0, #3181	; 0xc6d
 800d58c:	f7ff fdca 	bl	800d124 <bt_hci_cmd_send_sync>
		if (err) {
 800d590:	4603      	mov	r3, r0
 800d592:	2800      	cmp	r0, #0
 800d594:	d0c2      	beq.n	800d51c <le_init+0x84>
 800d596:	e78f      	b.n	800d4b8 <le_init+0x20>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
 800d598:	aa01      	add	r2, sp, #4
 800d59a:	2100      	movs	r1, #0
 800d59c:	f242 001c 	movw	r0, #8220	; 0x201c
 800d5a0:	f7ff fdc0 	bl	800d124 <bt_hci_cmd_send_sync>
		if (err) {
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	2800      	cmp	r0, #0
 800d5a8:	d186      	bne.n	800d4b8 <le_init+0x20>
		le_read_supp_states_complete(rsp);
 800d5aa:	9801      	ldr	r0, [sp, #4]
 800d5ac:	f7fe fd76 	bl	800c09c <le_read_supp_states_complete>
		net_buf_unref(rsp);
 800d5b0:	9801      	ldr	r0, [sp, #4]
 800d5b2:	f012 ff19 	bl	80203e8 <net_buf_unref>
 800d5b6:	e7b7      	b.n	800d528 <le_init+0x90>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
 800d5b8:	f10d 0102 	add.w	r1, sp, #2
 800d5bc:	4668      	mov	r0, sp
 800d5be:	f7ff fedf 	bl	800d380 <hci_le_read_max_data_len>
		if (err) {
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	2800      	cmp	r0, #0
 800d5c6:	f47f af77 	bne.w	800d4b8 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
 800d5ca:	2104      	movs	r1, #4
 800d5cc:	f242 0024 	movw	r0, #8228	; 0x2024
 800d5d0:	f7ff fd6c 	bl	800d0ac <bt_hci_cmd_create>
		if (!buf) {
 800d5d4:	4604      	mov	r4, r0
 800d5d6:	b198      	cbz	r0, 800d600 <le_init+0x168>
		cp = net_buf_add(buf, sizeof(*cp));
 800d5d8:	2104      	movs	r1, #4
 800d5da:	3008      	adds	r0, #8
 800d5dc:	f012 ff4e 	bl	802047c <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
 800d5e0:	f8bd 3000 	ldrh.w	r3, [sp]
 800d5e4:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
 800d5e6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800d5ea:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	4621      	mov	r1, r4
 800d5f0:	f242 0024 	movw	r0, #8228	; 0x2024
 800d5f4:	f7ff fd96 	bl	800d124 <bt_hci_cmd_send_sync>
		if (err) {
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	2800      	cmp	r0, #0
 800d5fc:	d09a      	beq.n	800d534 <le_init+0x9c>
 800d5fe:	e75b      	b.n	800d4b8 <le_init+0x20>
			return -ENOBUFS;
 800d600:	f06f 0336 	mvn.w	r3, #54	; 0x36
 800d604:	e758      	b.n	800d4b8 <le_init+0x20>
			return -ENOBUFS;
 800d606:	f06f 0336 	mvn.w	r3, #54	; 0x36
 800d60a:	e755      	b.n	800d4b8 <le_init+0x20>
 800d60c:	20000000 	.word	0x20000000
 800d610:	08022bc8 	.word	0x08022bc8
 800d614:	08022b90 	.word	0x08022b90
 800d618:	0802680c 	.word	0x0802680c

0800d61c <br_init>:
{
 800d61c:	b510      	push	{r4, lr}
 800d61e:	b082      	sub	sp, #8
	if (bt_dev.le.acl_mtu) {
 800d620:	4b0b      	ldr	r3, [pc, #44]	; (800d650 <br_init+0x34>)
 800d622:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800d626:	b11b      	cbz	r3, 800d630 <br_init+0x14>
		return 0;
 800d628:	2400      	movs	r4, #0
}
 800d62a:	4620      	mov	r0, r4
 800d62c:	b002      	add	sp, #8
 800d62e:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
 800d630:	aa01      	add	r2, sp, #4
 800d632:	2100      	movs	r1, #0
 800d634:	f241 0005 	movw	r0, #4101	; 0x1005
 800d638:	f7ff fd74 	bl	800d124 <bt_hci_cmd_send_sync>
	if (err) {
 800d63c:	4604      	mov	r4, r0
 800d63e:	2800      	cmp	r0, #0
 800d640:	d1f3      	bne.n	800d62a <br_init+0xe>
	read_buffer_size_complete(rsp);
 800d642:	9801      	ldr	r0, [sp, #4]
 800d644:	f7fe fe30 	bl	800c2a8 <read_buffer_size_complete>
	net_buf_unref(rsp);
 800d648:	9801      	ldr	r0, [sp, #4]
 800d64a:	f012 fecd 	bl	80203e8 <net_buf_unref>
	return 0;
 800d64e:	e7ec      	b.n	800d62a <br_init+0xe>
 800d650:	20000000 	.word	0x20000000

0800d654 <set_event_mask>:
{
 800d654:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
 800d656:	2108      	movs	r1, #8
 800d658:	f640 4001 	movw	r0, #3073	; 0xc01
 800d65c:	f7ff fd26 	bl	800d0ac <bt_hci_cmd_create>
	if (!buf) {
 800d660:	b338      	cbz	r0, 800d6b2 <set_event_mask+0x5e>
 800d662:	4604      	mov	r4, r0
	ev = net_buf_add(buf, sizeof(*ev));
 800d664:	2108      	movs	r1, #8
 800d666:	4408      	add	r0, r1
 800d668:	f012 ff08 	bl	802047c <net_buf_simple_add>
	    BT_FEAT_LE_ENCR(bt_dev.le.features)) {
 800d66c:	4b12      	ldr	r3, [pc, #72]	; (800d6b8 <set_event_mask+0x64>)
 800d66e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
	if (IS_ENABLED(CONFIG_BT_SMP) &&
 800d672:	f013 0f01 	tst.w	r3, #1
 800d676:	d119      	bne.n	800d6ac <set_event_mask+0x58>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
 800d678:	4a10      	ldr	r2, [pc, #64]	; (800d6bc <set_event_mask+0x68>)
 800d67a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
	sys_put_le16(val, dst);
 800d67e:	b291      	uxth	r1, r2
	dst[0] = val;
 800d680:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
 800d682:	0a09      	lsrs	r1, r1, #8
 800d684:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
 800d686:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
 800d688:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
 800d68a:	0e12      	lsrs	r2, r2, #24
 800d68c:	70c2      	strb	r2, [r0, #3]
	sys_put_le16(val, dst);
 800d68e:	b29a      	uxth	r2, r3
	dst[0] = val;
 800d690:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
 800d692:	0a12      	lsrs	r2, r2, #8
 800d694:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
 800d696:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
 800d698:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
 800d69a:	0e1b      	lsrs	r3, r3, #24
 800d69c:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
 800d69e:	2200      	movs	r2, #0
 800d6a0:	4621      	mov	r1, r4
 800d6a2:	f640 4001 	movw	r0, #3073	; 0xc01
 800d6a6:	f7ff fd3d 	bl	800d124 <bt_hci_cmd_send_sync>
}
 800d6aa:	bd10      	pop	{r4, pc}
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
 800d6ac:	4a04      	ldr	r2, [pc, #16]	; (800d6c0 <set_event_mask+0x6c>)
 800d6ae:	4b05      	ldr	r3, [pc, #20]	; (800d6c4 <set_event_mask+0x70>)
 800d6b0:	e7e5      	b.n	800d67e <set_event_mask+0x2a>
		return -ENOBUFS;
 800d6b2:	f06f 0036 	mvn.w	r0, #54	; 0x36
 800d6b6:	e7f8      	b.n	800d6aa <set_event_mask+0x56>
 800d6b8:	20000000 	.word	0x20000000
 800d6bc:	02008810 	.word	0x02008810
 800d6c0:	02008890 	.word	0x02008890
 800d6c4:	20008000 	.word	0x20008000

0800d6c8 <hci_init>:
{
 800d6c8:	b508      	push	{r3, lr}
	err = common_init();
 800d6ca:	f7ff fe07 	bl	800d2dc <common_init>
	if (err) {
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	b108      	cbz	r0, 800d6d6 <hci_init+0xe>
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	bd08      	pop	{r3, pc}
	err = le_init();
 800d6d6:	f7ff fedf 	bl	800d498 <le_init>
	if (err) {
 800d6da:	4603      	mov	r3, r0
 800d6dc:	2800      	cmp	r0, #0
 800d6de:	d1f8      	bne.n	800d6d2 <hci_init+0xa>
	if (BT_FEAT_BREDR(bt_dev.features)) {
 800d6e0:	4b07      	ldr	r3, [pc, #28]	; (800d700 <hci_init+0x38>)
 800d6e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d6e6:	f013 0f20 	tst.w	r3, #32
 800d6ea:	d104      	bne.n	800d6f6 <hci_init+0x2e>
		err = br_init();
 800d6ec:	f7ff ff96 	bl	800d61c <br_init>
		if (err) {
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	2800      	cmp	r0, #0
 800d6f4:	d1ed      	bne.n	800d6d2 <hci_init+0xa>
	err = set_event_mask();
 800d6f6:	f7ff ffad 	bl	800d654 <set_event_mask>
 800d6fa:	4603      	mov	r3, r0
	if (err) {
 800d6fc:	e7e9      	b.n	800d6d2 <hci_init+0xa>
 800d6fe:	bf00      	nop
 800d700:	20000000 	.word	0x20000000

0800d704 <set_random_address>:
{
 800d704:	b570      	push	{r4, r5, r6, lr}
 800d706:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
 800d708:	2206      	movs	r2, #6
 800d70a:	4915      	ldr	r1, [pc, #84]	; (800d760 <set_random_address+0x5c>)
 800d70c:	f00f f8b7 	bl	801c87e <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
 800d710:	4605      	mov	r5, r0
 800d712:	b908      	cbnz	r0, 800d718 <set_random_address+0x14>
}
 800d714:	4628      	mov	r0, r5
 800d716:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
 800d718:	2106      	movs	r1, #6
 800d71a:	f242 0005 	movw	r0, #8197	; 0x2005
 800d71e:	f7ff fcc5 	bl	800d0ac <bt_hci_cmd_create>
	if (!buf) {
 800d722:	4605      	mov	r5, r0
 800d724:	b1c0      	cbz	r0, 800d758 <set_random_address+0x54>
	net_buf_add_mem(buf, addr, sizeof(*addr));
 800d726:	2206      	movs	r2, #6
 800d728:	4621      	mov	r1, r4
 800d72a:	3008      	adds	r0, #8
 800d72c:	f012 feac 	bl	8020488 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
 800d730:	2200      	movs	r2, #0
 800d732:	4629      	mov	r1, r5
 800d734:	f242 0005 	movw	r0, #8197	; 0x2005
 800d738:	f7ff fcf4 	bl	800d124 <bt_hci_cmd_send_sync>
	if (err) {
 800d73c:	4605      	mov	r5, r0
 800d73e:	2800      	cmp	r0, #0
 800d740:	d1e8      	bne.n	800d714 <set_random_address+0x10>
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
 800d742:	4e08      	ldr	r6, [pc, #32]	; (800d764 <set_random_address+0x60>)
 800d744:	2206      	movs	r2, #6
 800d746:	4621      	mov	r1, r4
 800d748:	f106 0031 	add.w	r0, r6, #49	; 0x31
 800d74c:	f00f f8af 	bl	801c8ae <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
 800d750:	2301      	movs	r3, #1
 800d752:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
	return 0;
 800d756:	e7dd      	b.n	800d714 <set_random_address+0x10>
		return -ENOBUFS;
 800d758:	f06f 0536 	mvn.w	r5, #54	; 0x36
 800d75c:	e7da      	b.n	800d714 <set_random_address+0x10>
 800d75e:	bf00      	nop
 800d760:	20000031 	.word	0x20000031
 800d764:	20000000 	.word	0x20000000

0800d768 <le_create_conn_set_random_addr>:
{
 800d768:	b510      	push	{r4, lr}
 800d76a:	460c      	mov	r4, r1
		if (addr->type == BT_ADDR_LE_RANDOM) {
 800d76c:	4b07      	ldr	r3, [pc, #28]	; (800d78c <le_create_conn_set_random_addr+0x24>)
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	2b01      	cmp	r3, #1
 800d772:	d004      	beq.n	800d77e <le_create_conn_set_random_addr+0x16>
		*own_addr_type = addr->type;
 800d774:	4b05      	ldr	r3, [pc, #20]	; (800d78c <le_create_conn_set_random_addr+0x24>)
 800d776:	781b      	ldrb	r3, [r3, #0]
 800d778:	7023      	strb	r3, [r4, #0]
	return 0;
 800d77a:	2000      	movs	r0, #0
}
 800d77c:	bd10      	pop	{r4, pc}
			err = set_random_address(&addr->a);
 800d77e:	4804      	ldr	r0, [pc, #16]	; (800d790 <le_create_conn_set_random_addr+0x28>)
 800d780:	f7ff ffc0 	bl	800d704 <set_random_address>
			if (err) {
 800d784:	2800      	cmp	r0, #0
 800d786:	d0f5      	beq.n	800d774 <le_create_conn_set_random_addr+0xc>
 800d788:	e7f8      	b.n	800d77c <le_create_conn_set_random_addr+0x14>
 800d78a:	bf00      	nop
 800d78c:	20000000 	.word	0x20000000
 800d790:	20000001 	.word	0x20000001

0800d794 <set_le_adv_enable_legacy>:
{
 800d794:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d796:	b085      	sub	sp, #20
 800d798:	4605      	mov	r5, r0
 800d79a:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
 800d79c:	2101      	movs	r1, #1
 800d79e:	f242 000a 	movw	r0, #8202	; 0x200a
 800d7a2:	f7ff fc83 	bl	800d0ac <bt_hci_cmd_create>
	if (!buf) {
 800d7a6:	b318      	cbz	r0, 800d7f0 <set_le_adv_enable_legacy+0x5c>
 800d7a8:	4606      	mov	r6, r0
	if (enable) {
 800d7aa:	b1e4      	cbz	r4, 800d7e6 <set_le_adv_enable_legacy+0x52>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
 800d7ac:	2101      	movs	r1, #1
 800d7ae:	3008      	adds	r0, #8
 800d7b0:	f012 fe75 	bl	802049e <net_buf_simple_add_u8>
	cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
 800d7b4:	af01      	add	r7, sp, #4
 800d7b6:	4623      	mov	r3, r4
 800d7b8:	2206      	movs	r2, #6
 800d7ba:	f105 0114 	add.w	r1, r5, #20
 800d7be:	4638      	mov	r0, r7
 800d7c0:	f00f f9f4 	bl	801cbac <cmd_state_set_init>
	cmd(buf)->state = &state;
 800d7c4:	4630      	mov	r0, r6
 800d7c6:	f009 f9d5 	bl	8016b74 <net_buf_id>
 800d7ca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800d7ce:	4b0a      	ldr	r3, [pc, #40]	; (800d7f8 <set_le_adv_enable_legacy+0x64>)
 800d7d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d7d4:	6047      	str	r7, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	4631      	mov	r1, r6
 800d7da:	f242 000a 	movw	r0, #8202	; 0x200a
 800d7de:	f7ff fca1 	bl	800d124 <bt_hci_cmd_send_sync>
}
 800d7e2:	b005      	add	sp, #20
 800d7e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
 800d7e6:	2100      	movs	r1, #0
 800d7e8:	3008      	adds	r0, #8
 800d7ea:	f012 fe58 	bl	802049e <net_buf_simple_add_u8>
 800d7ee:	e7e1      	b.n	800d7b4 <set_le_adv_enable_legacy+0x20>
		return -ENOBUFS;
 800d7f0:	f06f 0036 	mvn.w	r0, #54	; 0x36
 800d7f4:	e7f5      	b.n	800d7e2 <set_le_adv_enable_legacy+0x4e>
 800d7f6:	bf00      	nop
 800d7f8:	2000410c 	.word	0x2000410c

0800d7fc <le_set_privacy_mode>:
{
 800d7fc:	b510      	push	{r4, lr}
 800d7fe:	b082      	sub	sp, #8
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
 800d800:	4b1b      	ldr	r3, [pc, #108]	; (800d870 <le_set_privacy_mode+0x74>)
 800d802:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800d806:	f013 0f04 	tst.w	r3, #4
 800d80a:	d01b      	beq.n	800d844 <le_set_privacy_mode+0x48>
 800d80c:	460c      	mov	r4, r1
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
 800d80e:	2207      	movs	r2, #7
 800d810:	4601      	mov	r1, r0
 800d812:	4668      	mov	r0, sp
 800d814:	f00f f84b 	bl	801c8ae <memcpy>
	cp.mode = mode;
 800d818:	f88d 4007 	strb.w	r4, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
 800d81c:	2108      	movs	r1, #8
 800d81e:	f242 004e 	movw	r0, #8270	; 0x204e
 800d822:	f7ff fc43 	bl	800d0ac <bt_hci_cmd_create>
	if (!buf) {
 800d826:	4604      	mov	r4, r0
 800d828:	b1f8      	cbz	r0, 800d86a <le_set_privacy_mode+0x6e>
	net_buf_add_mem(buf, &cp, sizeof(cp));
 800d82a:	2208      	movs	r2, #8
 800d82c:	4669      	mov	r1, sp
 800d82e:	4410      	add	r0, r2
 800d830:	f012 fe2a 	bl	8020488 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
 800d834:	2200      	movs	r2, #0
 800d836:	4621      	mov	r1, r4
 800d838:	f242 004e 	movw	r0, #8270	; 0x204e
 800d83c:	f7ff fc72 	bl	800d124 <bt_hci_cmd_send_sync>
}
 800d840:	b002      	add	sp, #8
 800d842:	bd10      	pop	{r4, pc}
		BT_WARN("Set privacy mode command is not supported");
 800d844:	f04f 0100 	mov.w	r1, #0
 800d848:	2302      	movs	r3, #2
 800d84a:	f363 0102 	bfi	r1, r3, #0, #3
 800d84e:	f36f 01c5 	bfc	r1, #3, #3
 800d852:	4b08      	ldr	r3, [pc, #32]	; (800d874 <le_set_privacy_mode+0x78>)
 800d854:	4a08      	ldr	r2, [pc, #32]	; (800d878 <le_set_privacy_mode+0x7c>)
 800d856:	1a9b      	subs	r3, r3, r2
 800d858:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800d85c:	f363 118f 	bfi	r1, r3, #6, #10
 800d860:	4806      	ldr	r0, [pc, #24]	; (800d87c <le_set_privacy_mode+0x80>)
 800d862:	f7f8 ffdd 	bl	8006820 <log_0>
		return 0;
 800d866:	2000      	movs	r0, #0
 800d868:	e7ea      	b.n	800d840 <le_set_privacy_mode+0x44>
		return -ENOBUFS;
 800d86a:	f06f 0036 	mvn.w	r0, #54	; 0x36
 800d86e:	e7e7      	b.n	800d840 <le_set_privacy_mode+0x44>
 800d870:	20000000 	.word	0x20000000
 800d874:	08022bc8 	.word	0x08022bc8
 800d878:	08022b90 	.word	0x08022b90
 800d87c:	08026830 	.word	0x08026830

0800d880 <set_le_scan_enable_legacy>:
{
 800d880:	b570      	push	{r4, r5, r6, lr}
 800d882:	b084      	sub	sp, #16
 800d884:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
 800d886:	2102      	movs	r1, #2
 800d888:	f242 000c 	movw	r0, #8204	; 0x200c
 800d88c:	f7ff fc0e 	bl	800d0ac <bt_hci_cmd_create>
	if (!buf) {
 800d890:	b378      	cbz	r0, 800d8f2 <set_le_scan_enable_legacy+0x72>
 800d892:	4605      	mov	r5, r0
	cp = net_buf_add(buf, sizeof(*cp));
 800d894:	2102      	movs	r1, #2
 800d896:	3008      	adds	r0, #8
 800d898:	f012 fdf0 	bl	802047c <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
 800d89c:	2c01      	cmp	r4, #1
 800d89e:	d01d      	beq.n	800d8dc <set_le_scan_enable_legacy+0x5c>
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	7043      	strb	r3, [r0, #1]
	cp->enable = enable;
 800d8a4:	7004      	strb	r4, [r0, #0]
	cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
 800d8a6:	ae01      	add	r6, sp, #4
 800d8a8:	2c01      	cmp	r4, #1
 800d8aa:	bf14      	ite	ne
 800d8ac:	2300      	movne	r3, #0
 800d8ae:	2301      	moveq	r3, #1
 800d8b0:	2205      	movs	r2, #5
 800d8b2:	4911      	ldr	r1, [pc, #68]	; (800d8f8 <set_le_scan_enable_legacy+0x78>)
 800d8b4:	4630      	mov	r0, r6
 800d8b6:	f00f f979 	bl	801cbac <cmd_state_set_init>
	cmd(buf)->state = &state;
 800d8ba:	4628      	mov	r0, r5
 800d8bc:	f009 f95a 	bl	8016b74 <net_buf_id>
 800d8c0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800d8c4:	4b0d      	ldr	r3, [pc, #52]	; (800d8fc <set_le_scan_enable_legacy+0x7c>)
 800d8c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d8ca:	6046      	str	r6, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	4629      	mov	r1, r5
 800d8d0:	f242 000c 	movw	r0, #8204	; 0x200c
 800d8d4:	f7ff fc26 	bl	800d124 <bt_hci_cmd_send_sync>
}
 800d8d8:	b004      	add	sp, #16
 800d8da:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800d8dc:	f3bf 8f5b 	dmb	ish
 800d8e0:	4b07      	ldr	r3, [pc, #28]	; (800d900 <set_le_scan_enable_legacy+0x80>)
 800d8e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d8e6:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
 800d8ea:	f3c3 2300 	ubfx	r3, r3, #8, #1
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
 800d8ee:	7043      	strb	r3, [r0, #1]
 800d8f0:	e7d8      	b.n	800d8a4 <set_le_scan_enable_legacy+0x24>
		return -ENOBUFS;
 800d8f2:	f06f 0036 	mvn.w	r0, #54	; 0x36
 800d8f6:	e7ef      	b.n	800d8d8 <set_le_scan_enable_legacy+0x58>
 800d8f8:	20000094 	.word	0x20000094
 800d8fc:	2000410c 	.word	0x2000410c
 800d900:	20000000 	.word	0x20000000

0800d904 <le_adv_set_random_addr>:
{
 800d904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d908:	4606      	mov	r6, r0
 800d90a:	460d      	mov	r5, r1
 800d90c:	461f      	mov	r7, r3
	id_addr = &bt_dev.id_addr[adv->id];
 800d90e:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
 800d910:	f011 0f01 	tst.w	r1, #1
 800d914:	d027      	beq.n	800d966 <le_adv_set_random_addr+0x62>
 800d916:	4690      	mov	r8, r2
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
 800d918:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800d91c:	4a36      	ldr	r2, [pc, #216]	; (800d9f8 <le_adv_set_random_addr+0xf4>)
 800d91e:	5cd3      	ldrb	r3, [r2, r3]
 800d920:	2b01      	cmp	r3, #1
 800d922:	d015      	beq.n	800d950 <le_adv_set_random_addr+0x4c>
			*own_addr_type = id_addr->type;
 800d924:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800d928:	4b33      	ldr	r3, [pc, #204]	; (800d9f8 <le_adv_set_random_addr+0xf4>)
 800d92a:	5d1b      	ldrb	r3, [r3, r4]
 800d92c:	703b      	strb	r3, [r7, #0]
		if (dir_adv) {
 800d92e:	f1b8 0f00 	cmp.w	r8, #0
 800d932:	d05b      	beq.n	800d9ec <le_adv_set_random_addr+0xe8>
			    BT_FEAT_LE_PRIVACY(bt_dev.le.features) &&
 800d934:	4a30      	ldr	r2, [pc, #192]	; (800d9f8 <le_adv_set_random_addr+0xf4>)
 800d936:	f892 2098 	ldrb.w	r2, [r2, #152]	; 0x98
			if (IS_ENABLED(CONFIG_BT_SMP) &&
 800d93a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800d93e:	d057      	beq.n	800d9f0 <le_adv_set_random_addr+0xec>
			    BT_FEAT_LE_PRIVACY(bt_dev.le.features) &&
 800d940:	f015 0f20 	tst.w	r5, #32
 800d944:	d056      	beq.n	800d9f4 <le_adv_set_random_addr+0xf0>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
 800d946:	f043 0302 	orr.w	r3, r3, #2
 800d94a:	703b      	strb	r3, [r7, #0]
	return 0;
 800d94c:	2600      	movs	r6, #0
 800d94e:	e019      	b.n	800d984 <le_adv_set_random_addr+0x80>
				err = set_adv_random_address(adv, &id_addr->a);
 800d950:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800d954:	4611      	mov	r1, r2
 800d956:	4419      	add	r1, r3
 800d958:	3101      	adds	r1, #1
 800d95a:	f00f f93f 	bl	801cbdc <set_adv_random_address>
				if (err) {
 800d95e:	4606      	mov	r6, r0
 800d960:	2800      	cmp	r0, #0
 800d962:	d0df      	beq.n	800d924 <le_adv_set_random_addr+0x20>
 800d964:	e00e      	b.n	800d984 <le_adv_set_random_addr+0x80>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
 800d966:	f011 0f04 	tst.w	r1, #4
 800d96a:	d017      	beq.n	800d99c <le_adv_set_random_addr+0x98>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
 800d96c:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800d970:	4a21      	ldr	r2, [pc, #132]	; (800d9f8 <le_adv_set_random_addr+0xf4>)
 800d972:	5cd3      	ldrb	r3, [r2, r3]
 800d974:	2b01      	cmp	r3, #1
 800d976:	d008      	beq.n	800d98a <le_adv_set_random_addr+0x86>
	int err = 0;
 800d978:	2600      	movs	r6, #0
			*own_addr_type = id_addr->type;
 800d97a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800d97e:	4b1e      	ldr	r3, [pc, #120]	; (800d9f8 <le_adv_set_random_addr+0xf4>)
 800d980:	5d1b      	ldrb	r3, [r3, r4]
 800d982:	703b      	strb	r3, [r7, #0]
}
 800d984:	4630      	mov	r0, r6
 800d986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = set_adv_random_address(adv, &id_addr->a);
 800d98a:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800d98e:	4611      	mov	r1, r2
 800d990:	4419      	add	r1, r3
 800d992:	3101      	adds	r1, #1
 800d994:	f00f f922 	bl	801cbdc <set_adv_random_address>
 800d998:	4606      	mov	r6, r0
 800d99a:	e7ee      	b.n	800d97a <le_adv_set_random_addr+0x76>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800d99c:	f3bf 8f5b 	dmb	ish
 800d9a0:	4b15      	ldr	r3, [pc, #84]	; (800d9f8 <le_adv_set_random_addr+0xf4>)
 800d9a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d9a6:	f3bf 8f5b 	dmb	ish
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
 800d9aa:	f013 0f20 	tst.w	r3, #32
 800d9ae:	d10c      	bne.n	800d9ca <le_adv_set_random_addr+0xc6>
			bool scan_enabled = false;
 800d9b0:	2400      	movs	r4, #0
			err = le_adv_set_private_addr(adv);
 800d9b2:	4630      	mov	r0, r6
 800d9b4:	f00f f917 	bl	801cbe6 <le_adv_set_private_addr>
 800d9b8:	4606      	mov	r6, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	703b      	strb	r3, [r7, #0]
			if (scan_enabled) {
 800d9be:	2c00      	cmp	r4, #0
 800d9c0:	d0e0      	beq.n	800d984 <le_adv_set_random_addr+0x80>
				set_le_scan_enable(true);
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f00f f9a8 	bl	801cd18 <set_le_scan_enable>
		if (err) {
 800d9c8:	e7dc      	b.n	800d984 <le_adv_set_random_addr+0x80>
 800d9ca:	f3bf 8f5b 	dmb	ish
 800d9ce:	4b0a      	ldr	r3, [pc, #40]	; (800d9f8 <le_adv_set_random_addr+0xf4>)
 800d9d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d9d4:	f3bf 8f5b 	dmb	ish
			    atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
 800d9d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d9dc:	d101      	bne.n	800d9e2 <le_adv_set_random_addr+0xde>
			bool scan_enabled = false;
 800d9de:	2400      	movs	r4, #0
 800d9e0:	e7e7      	b.n	800d9b2 <le_adv_set_random_addr+0xae>
				set_le_scan_enable(false);
 800d9e2:	2000      	movs	r0, #0
 800d9e4:	f00f f998 	bl	801cd18 <set_le_scan_enable>
				scan_enabled = true;
 800d9e8:	2401      	movs	r4, #1
 800d9ea:	e7e2      	b.n	800d9b2 <le_adv_set_random_addr+0xae>
	return 0;
 800d9ec:	2600      	movs	r6, #0
 800d9ee:	e7c9      	b.n	800d984 <le_adv_set_random_addr+0x80>
 800d9f0:	2600      	movs	r6, #0
 800d9f2:	e7c7      	b.n	800d984 <le_adv_set_random_addr+0x80>
 800d9f4:	2600      	movs	r6, #0
 800d9f6:	e7c5      	b.n	800d984 <le_adv_set_random_addr+0x80>
 800d9f8:	20000000 	.word	0x20000000

0800d9fc <bt_read_public_addr>:
{
 800d9fc:	b530      	push	{r4, r5, lr}
 800d9fe:	b087      	sub	sp, #28
 800da00:	4605      	mov	r5, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
 800da02:	aa01      	add	r2, sp, #4
 800da04:	2100      	movs	r1, #0
 800da06:	f241 0009 	movw	r0, #4105	; 0x1009
 800da0a:	f7ff fb8b 	bl	800d124 <bt_hci_cmd_send_sync>
	if (err) {
 800da0e:	b9f0      	cbnz	r0, 800da4e <bt_read_public_addr+0x52>
	rp = (void *)rsp->data;
 800da10:	9b01      	ldr	r3, [sp, #4]
 800da12:	689c      	ldr	r4, [r3, #8]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
 800da14:	3401      	adds	r4, #1
 800da16:	2300      	movs	r3, #0
 800da18:	9302      	str	r3, [sp, #8]
 800da1a:	f8ad 300c 	strh.w	r3, [sp, #12]
	return memcmp(a, b, sizeof(*a));
 800da1e:	2206      	movs	r2, #6
 800da20:	a902      	add	r1, sp, #8
 800da22:	4620      	mov	r0, r4
 800da24:	f00e ff2b 	bl	801c87e <memcmp>
 800da28:	b158      	cbz	r0, 800da42 <bt_read_public_addr+0x46>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
 800da2a:	4b18      	ldr	r3, [pc, #96]	; (800da8c <bt_read_public_addr+0x90>)
 800da2c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800da30:	9004      	str	r0, [sp, #16]
 800da32:	f8ad 1014 	strh.w	r1, [sp, #20]
 800da36:	2206      	movs	r2, #6
 800da38:	a904      	add	r1, sp, #16
 800da3a:	4620      	mov	r0, r4
 800da3c:	f00e ff1f 	bl	801c87e <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
 800da40:	b9c0      	cbnz	r0, 800da74 <bt_read_public_addr+0x78>
		net_buf_unref(rsp);
 800da42:	9801      	ldr	r0, [sp, #4]
 800da44:	f012 fcd0 	bl	80203e8 <net_buf_unref>
		return 0U;
 800da48:	2000      	movs	r0, #0
}
 800da4a:	b007      	add	sp, #28
 800da4c:	bd30      	pop	{r4, r5, pc}
		BT_WARN("Failed to read public address");
 800da4e:	f04f 0100 	mov.w	r1, #0
 800da52:	2302      	movs	r3, #2
 800da54:	f363 0102 	bfi	r1, r3, #0, #3
 800da58:	f36f 01c5 	bfc	r1, #3, #3
 800da5c:	4b0c      	ldr	r3, [pc, #48]	; (800da90 <bt_read_public_addr+0x94>)
 800da5e:	4a0d      	ldr	r2, [pc, #52]	; (800da94 <bt_read_public_addr+0x98>)
 800da60:	1a9b      	subs	r3, r3, r2
 800da62:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800da66:	f363 118f 	bfi	r1, r3, #6, #10
 800da6a:	480b      	ldr	r0, [pc, #44]	; (800da98 <bt_read_public_addr+0x9c>)
 800da6c:	f7f8 fed8 	bl	8006820 <log_0>
		return 0U;
 800da70:	2000      	movs	r0, #0
 800da72:	e7ea      	b.n	800da4a <bt_read_public_addr+0x4e>
	memcpy(dst, src, sizeof(*dst));
 800da74:	2206      	movs	r2, #6
 800da76:	4621      	mov	r1, r4
 800da78:	1c68      	adds	r0, r5, #1
 800da7a:	f00e ff18 	bl	801c8ae <memcpy>
	addr->type = BT_ADDR_LE_PUBLIC;
 800da7e:	2300      	movs	r3, #0
 800da80:	702b      	strb	r3, [r5, #0]
	net_buf_unref(rsp);
 800da82:	9801      	ldr	r0, [sp, #4]
 800da84:	f012 fcb0 	bl	80203e8 <net_buf_unref>
	return 1U;
 800da88:	2001      	movs	r0, #1
 800da8a:	e7de      	b.n	800da4a <bt_read_public_addr+0x4e>
 800da8c:	08022d58 	.word	0x08022d58
 800da90:	08022bc8 	.word	0x08022bc8
 800da94:	08022b90 	.word	0x08022b90
 800da98:	0802685c 	.word	0x0802685c

0800da9c <bt_adv_lookup_legacy>:
}
 800da9c:	4800      	ldr	r0, [pc, #0]	; (800daa0 <bt_adv_lookup_legacy+0x4>)
 800da9e:	4770      	bx	lr
 800daa0:	20000018 	.word	0x20000018

0800daa4 <le_scan_set_random_addr>:
{
 800daa4:	b570      	push	{r4, r5, r6, lr}
 800daa6:	4605      	mov	r5, r0
 800daa8:	460c      	mov	r4, r1
		*own_addr_type = bt_dev.id_addr[0].type;
 800daaa:	4b14      	ldr	r3, [pc, #80]	; (800dafc <le_scan_set_random_addr+0x58>)
 800daac:	781b      	ldrb	r3, [r3, #0]
 800daae:	700b      	strb	r3, [r1, #0]
		    !is_adv_using_rand_addr()) {
 800dab0:	f00f f994 	bl	801cddc <is_adv_using_rand_addr>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
 800dab4:	b110      	cbz	r0, 800dabc <le_scan_set_random_addr+0x18>
	return 0;
 800dab6:	2600      	movs	r6, #0
}
 800dab8:	4630      	mov	r0, r6
 800daba:	bd70      	pop	{r4, r5, r6, pc}
			err = le_set_private_addr(BT_ID_DEFAULT);
 800dabc:	f00f f87a 	bl	801cbb4 <le_set_private_addr>
			if (err) {
 800dac0:	4606      	mov	r6, r0
 800dac2:	b1b8      	cbz	r0, 800daf4 <le_scan_set_random_addr+0x50>
				if (active_scan || !is_adv_using_rand_addr()) {
 800dac4:	2d00      	cmp	r5, #0
 800dac6:	d1f7      	bne.n	800dab8 <le_scan_set_random_addr+0x14>
 800dac8:	f00f f988 	bl	801cddc <is_adv_using_rand_addr>
 800dacc:	2800      	cmp	r0, #0
 800dace:	d0f3      	beq.n	800dab8 <le_scan_set_random_addr+0x14>
					BT_WARN("Ignoring failure to set "
 800dad0:	f04f 0200 	mov.w	r2, #0
 800dad4:	2302      	movs	r3, #2
 800dad6:	f363 0202 	bfi	r2, r3, #0, #3
 800dada:	f36f 02c5 	bfc	r2, #3, #3
 800dade:	4b08      	ldr	r3, [pc, #32]	; (800db00 <le_scan_set_random_addr+0x5c>)
 800dae0:	4908      	ldr	r1, [pc, #32]	; (800db04 <le_scan_set_random_addr+0x60>)
 800dae2:	1a5b      	subs	r3, r3, r1
 800dae4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800dae8:	f363 128f 	bfi	r2, r3, #6, #10
 800daec:	4631      	mov	r1, r6
 800daee:	4806      	ldr	r0, [pc, #24]	; (800db08 <le_scan_set_random_addr+0x64>)
 800daf0:	f7f8 fd26 	bl	8006540 <log_1>
			*own_addr_type = BT_ADDR_LE_RANDOM;
 800daf4:	2301      	movs	r3, #1
 800daf6:	7023      	strb	r3, [r4, #0]
	return 0;
 800daf8:	2600      	movs	r6, #0
 800dafa:	e7dd      	b.n	800dab8 <le_scan_set_random_addr+0x14>
 800dafc:	20000000 	.word	0x20000000
 800db00:	08022bc8 	.word	0x08022bc8
 800db04:	08022b90 	.word	0x08022b90
 800db08:	0802687c 	.word	0x0802687c

0800db0c <start_le_scan_legacy>:
{
 800db0c:	b570      	push	{r4, r5, r6, lr}
 800db0e:	b082      	sub	sp, #8
 800db10:	4604      	mov	r4, r0
 800db12:	460e      	mov	r6, r1
 800db14:	4615      	mov	r5, r2
	(void)memset(&set_param, 0, sizeof(set_param));
 800db16:	2207      	movs	r2, #7
 800db18:	2100      	movs	r1, #0
 800db1a:	4668      	mov	r0, sp
 800db1c:	f00e feec 	bl	801c8f8 <memset>
	set_param.scan_type = scan_type;
 800db20:	f88d 4000 	strb.w	r4, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
 800db24:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
 800db28:	f8ad 5003 	strh.w	r5, [sp, #3]
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
 800db2c:	2300      	movs	r3, #0
 800db2e:	f88d 3006 	strb.w	r3, [sp, #6]
	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
 800db32:	2c01      	cmp	r4, #1
 800db34:	bf14      	ite	ne
 800db36:	2400      	movne	r4, #0
 800db38:	2401      	moveq	r4, #1
	err = le_scan_set_random_addr(active_scan, &set_param.addr_type);
 800db3a:	f10d 0105 	add.w	r1, sp, #5
 800db3e:	4620      	mov	r0, r4
 800db40:	f7ff ffb0 	bl	800daa4 <le_scan_set_random_addr>
	if (err) {
 800db44:	b108      	cbz	r0, 800db4a <start_le_scan_legacy+0x3e>
}
 800db46:	b002      	add	sp, #8
 800db48:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
 800db4a:	2107      	movs	r1, #7
 800db4c:	f242 000b 	movw	r0, #8203	; 0x200b
 800db50:	f7ff faac 	bl	800d0ac <bt_hci_cmd_create>
	if (!buf) {
 800db54:	4605      	mov	r5, r0
 800db56:	b370      	cbz	r0, 800dbb6 <start_le_scan_legacy+0xaa>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
 800db58:	2207      	movs	r2, #7
 800db5a:	4669      	mov	r1, sp
 800db5c:	3008      	adds	r0, #8
 800db5e:	f012 fc93 	bl	8020488 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
 800db62:	2200      	movs	r2, #0
 800db64:	4629      	mov	r1, r5
 800db66:	f242 000b 	movw	r0, #8203	; 0x200b
 800db6a:	f7ff fadb 	bl	800d124 <bt_hci_cmd_send_sync>
	if (err) {
 800db6e:	2800      	cmp	r0, #0
 800db70:	d1e9      	bne.n	800db46 <start_le_scan_legacy+0x3a>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
 800db72:	2001      	movs	r0, #1
 800db74:	f00f f8d0 	bl	801cd18 <set_le_scan_enable>
	if (err) {
 800db78:	2800      	cmp	r0, #0
 800db7a:	d1e4      	bne.n	800db46 <start_le_scan_legacy+0x3a>
	if (val) {
 800db7c:	b16c      	cbz	r4, 800db9a <start_le_scan_legacy+0x8e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800db7e:	4b0f      	ldr	r3, [pc, #60]	; (800dbbc <start_le_scan_legacy+0xb0>)
 800db80:	f3bf 8f5b 	dmb	ish
 800db84:	e853 2f00 	ldrex	r2, [r3]
 800db88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800db8c:	e843 2100 	strex	r1, r2, [r3]
 800db90:	2900      	cmp	r1, #0
 800db92:	d1f7      	bne.n	800db84 <start_le_scan_legacy+0x78>
 800db94:	f3bf 8f5b 	dmb	ish
 800db98:	e7d5      	b.n	800db46 <start_le_scan_legacy+0x3a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800db9a:	4b08      	ldr	r3, [pc, #32]	; (800dbbc <start_le_scan_legacy+0xb0>)
 800db9c:	f3bf 8f5b 	dmb	ish
 800dba0:	e853 2f00 	ldrex	r2, [r3]
 800dba4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dba8:	e843 2100 	strex	r1, r2, [r3]
 800dbac:	2900      	cmp	r1, #0
 800dbae:	d1f7      	bne.n	800dba0 <start_le_scan_legacy+0x94>
 800dbb0:	f3bf 8f5b 	dmb	ish
}
 800dbb4:	e7c7      	b.n	800db46 <start_le_scan_legacy+0x3a>
		return -ENOBUFS;
 800dbb6:	f06f 0036 	mvn.w	r0, #54	; 0x36
 800dbba:	e7c4      	b.n	800db46 <start_le_scan_legacy+0x3a>
 800dbbc:	20000094 	.word	0x20000094

0800dbc0 <le_conn_complete_adv_timeout>:
{
 800dbc0:	b510      	push	{r4, lr}
		struct bt_le_ext_adv *adv = bt_adv_lookup_legacy();
 800dbc2:	f7ff ff6b 	bl	800da9c <bt_adv_lookup_legacy>
		atomic_clear_bit(adv->flags, BT_ADV_ENABLED);
 800dbc6:	3014      	adds	r0, #20
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800dbc8:	f3bf 8f5b 	dmb	ish
 800dbcc:	e850 3f00 	ldrex	r3, [r0]
 800dbd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dbd4:	e840 3200 	strex	r2, r3, [r0]
 800dbd8:	2a00      	cmp	r2, #0
 800dbda:	d1f7      	bne.n	800dbcc <le_conn_complete_adv_timeout+0xc>
 800dbdc:	f3bf 8f5b 	dmb	ish
		conn = find_pending_connect(BT_HCI_ROLE_SLAVE, NULL);
 800dbe0:	2100      	movs	r1, #0
 800dbe2:	2001      	movs	r0, #1
 800dbe4:	f7fe fc70 	bl	800c4c8 <find_pending_connect>
		if (!conn) {
 800dbe8:	4604      	mov	r4, r0
 800dbea:	b140      	cbz	r0, 800dbfe <le_conn_complete_adv_timeout+0x3e>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
 800dbec:	233c      	movs	r3, #60	; 0x3c
 800dbee:	7303      	strb	r3, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
 800dbf0:	2100      	movs	r1, #0
 800dbf2:	f002 fcdd 	bl	80105b0 <bt_conn_set_state>
		bt_conn_unref(conn);
 800dbf6:	4620      	mov	r0, r4
 800dbf8:	f00f fd9a 	bl	801d730 <bt_conn_unref>
}
 800dbfc:	bd10      	pop	{r4, pc}
			BT_ERR("No pending slave connection");
 800dbfe:	f04f 0100 	mov.w	r1, #0
 800dc02:	2301      	movs	r3, #1
 800dc04:	f363 0102 	bfi	r1, r3, #0, #3
 800dc08:	f36f 01c5 	bfc	r1, #3, #3
 800dc0c:	4b05      	ldr	r3, [pc, #20]	; (800dc24 <le_conn_complete_adv_timeout+0x64>)
 800dc0e:	4a06      	ldr	r2, [pc, #24]	; (800dc28 <le_conn_complete_adv_timeout+0x68>)
 800dc10:	1a9b      	subs	r3, r3, r2
 800dc12:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800dc16:	f363 118f 	bfi	r1, r3, #6, #10
 800dc1a:	4804      	ldr	r0, [pc, #16]	; (800dc2c <le_conn_complete_adv_timeout+0x6c>)
 800dc1c:	f7f8 fe00 	bl	8006820 <log_0>
			return;
 800dc20:	e7ec      	b.n	800dbfc <le_conn_complete_adv_timeout+0x3c>
 800dc22:	bf00      	nop
 800dc24:	08022bc8 	.word	0x08022bc8
 800dc28:	08022b90 	.word	0x08022b90
 800dc2c:	080268b4 	.word	0x080268b4

0800dc30 <bt_le_create_conn_legacy>:
{
 800dc30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc32:	b085      	sub	sp, #20
 800dc34:	4605      	mov	r5, r0
	err = le_create_conn_set_random_addr(use_filter, &own_addr_type);
 800dc36:	f10d 0103 	add.w	r1, sp, #3
 800dc3a:	2000      	movs	r0, #0
 800dc3c:	f7ff fd94 	bl	800d768 <le_create_conn_set_random_addr>
	if (err) {
 800dc40:	b108      	cbz	r0, 800dc46 <bt_le_create_conn_legacy+0x16>
}
 800dc42:	b005      	add	sp, #20
 800dc44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
 800dc46:	2119      	movs	r1, #25
 800dc48:	f242 000d 	movw	r0, #8205	; 0x200d
 800dc4c:	f7ff fa2e 	bl	800d0ac <bt_hci_cmd_create>
	if (!buf) {
 800dc50:	4606      	mov	r6, r0
 800dc52:	2800      	cmp	r0, #0
 800dc54:	d04a      	beq.n	800dcec <bt_le_create_conn_legacy+0xbc>
	cp = net_buf_add(buf, sizeof(*cp));
 800dc56:	2119      	movs	r1, #25
 800dc58:	3008      	adds	r0, #8
 800dc5a:	f012 fc0f 	bl	802047c <net_buf_simple_add>
 800dc5e:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
 800dc60:	2219      	movs	r2, #25
 800dc62:	2100      	movs	r1, #0
 800dc64:	f00e fe48 	bl	801c8f8 <memset>
	cp->own_addr_type = own_addr_type;
 800dc68:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800dc6c:	7323      	strb	r3, [r4, #12]
		const bt_addr_le_t *peer_addr = &conn->le.dst;
 800dc6e:	f105 0188 	add.w	r1, r5, #136	; 0x88
		if (!bt_dev.le.rl_size ||
 800dc72:	4b20      	ldr	r3, [pc, #128]	; (800dcf4 <bt_le_create_conn_legacy+0xc4>)
 800dc74:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800dc78:	b123      	cbz	r3, 800dc84 <bt_le_create_conn_legacy+0x54>
		    bt_dev.le.rl_entries > bt_dev.le.rl_size) {
 800dc7a:	4a1e      	ldr	r2, [pc, #120]	; (800dcf4 <bt_le_create_conn_legacy+0xc4>)
 800dc7c:	f892 20e1 	ldrb.w	r2, [r2, #225]	; 0xe1
		if (!bt_dev.le.rl_size ||
 800dc80:	4293      	cmp	r3, r2
 800dc82:	d201      	bcs.n	800dc88 <bt_le_create_conn_legacy+0x58>
			peer_addr = &conn->le.resp_addr;
 800dc84:	f105 0196 	add.w	r1, r5, #150	; 0x96
	memcpy(dst, src, sizeof(*dst));
 800dc88:	2207      	movs	r2, #7
 800dc8a:	1d60      	adds	r0, r4, #5
 800dc8c:	f00e fe0f 	bl	801c8ae <memcpy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
 800dc90:	2700      	movs	r7, #0
 800dc92:	7127      	strb	r7, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
 800dc94:	4917      	ldr	r1, [pc, #92]	; (800dcf4 <bt_le_create_conn_legacy+0xc4>)
 800dc96:	898b      	ldrh	r3, [r1, #12]
 800dc98:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
 800dc9a:	89cb      	ldrh	r3, [r1, #14]
 800dc9c:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
 800dc9e:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
 800dca2:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
 800dca6:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
 800dcaa:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
 800dcae:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 800dcb2:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
 800dcb6:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 800dcba:	f8a4 3013 	strh.w	r3, [r4, #19]
	cmd_state_set_init(&state, bt_dev.flags, BT_DEV_INITIATING, true);
 800dcbe:	ac01      	add	r4, sp, #4
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	220b      	movs	r2, #11
 800dcc4:	3194      	adds	r1, #148	; 0x94
 800dcc6:	4620      	mov	r0, r4
 800dcc8:	f00e ff70 	bl	801cbac <cmd_state_set_init>
	cmd(buf)->state = &state;
 800dccc:	4630      	mov	r0, r6
 800dcce:	f008 ff51 	bl	8016b74 <net_buf_id>
 800dcd2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800dcd6:	4b08      	ldr	r3, [pc, #32]	; (800dcf8 <bt_le_create_conn_legacy+0xc8>)
 800dcd8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dcdc:	6044      	str	r4, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
 800dcde:	463a      	mov	r2, r7
 800dce0:	4631      	mov	r1, r6
 800dce2:	f242 000d 	movw	r0, #8205	; 0x200d
 800dce6:	f7ff fa1d 	bl	800d124 <bt_hci_cmd_send_sync>
 800dcea:	e7aa      	b.n	800dc42 <bt_le_create_conn_legacy+0x12>
		return -ENOBUFS;
 800dcec:	f06f 0036 	mvn.w	r0, #54	; 0x36
 800dcf0:	e7a7      	b.n	800dc42 <bt_le_create_conn_legacy+0x12>
 800dcf2:	bf00      	nop
 800dcf4:	20000000 	.word	0x20000000
 800dcf8:	2000410c 	.word	0x2000410c

0800dcfc <bt_le_create_conn_cancel>:
{
 800dcfc:	b530      	push	{r4, r5, lr}
 800dcfe:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
 800dd00:	2100      	movs	r1, #0
 800dd02:	f242 000e 	movw	r0, #8206	; 0x200e
 800dd06:	f7ff f9d1 	bl	800d0ac <bt_hci_cmd_create>
 800dd0a:	4604      	mov	r4, r0
	cmd_state_set_init(&state, bt_dev.flags, BT_DEV_INITIATING, false);
 800dd0c:	ad01      	add	r5, sp, #4
 800dd0e:	2300      	movs	r3, #0
 800dd10:	220b      	movs	r2, #11
 800dd12:	490a      	ldr	r1, [pc, #40]	; (800dd3c <bt_le_create_conn_cancel+0x40>)
 800dd14:	4628      	mov	r0, r5
 800dd16:	f00e ff49 	bl	801cbac <cmd_state_set_init>
	cmd(buf)->state = &state;
 800dd1a:	4620      	mov	r0, r4
 800dd1c:	f008 ff2a 	bl	8016b74 <net_buf_id>
 800dd20:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800dd24:	4b06      	ldr	r3, [pc, #24]	; (800dd40 <bt_le_create_conn_cancel+0x44>)
 800dd26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dd2a:	6045      	str	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	4621      	mov	r1, r4
 800dd30:	f242 000e 	movw	r0, #8206	; 0x200e
 800dd34:	f7ff f9f6 	bl	800d124 <bt_hci_cmd_send_sync>
}
 800dd38:	b005      	add	sp, #20
 800dd3a:	bd30      	pop	{r4, r5, pc}
 800dd3c:	20000094 	.word	0x20000094
 800dd40:	2000410c 	.word	0x2000410c

0800dd44 <bt_unpair>:
{
 800dd44:	b510      	push	{r4, lr}
 800dd46:	b084      	sub	sp, #16
 800dd48:	f88d 0007 	strb.w	r0, [sp, #7]
	if (id >= CONFIG_BT_ID_MAX) {
 800dd4c:	b9e0      	cbnz	r0, 800dd88 <bt_unpair+0x44>
 800dd4e:	460c      	mov	r4, r1
	if (IS_ENABLED(CONFIG_BT_SMP) &&
 800dd50:	b149      	cbz	r1, 800dd66 <bt_unpair+0x22>
	    (!addr || !bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
 800dd52:	2300      	movs	r3, #0
 800dd54:	9302      	str	r3, [sp, #8]
 800dd56:	f8cd 300b 	str.w	r3, [sp, #11]
	return memcmp(a, b, sizeof(*a));
 800dd5a:	2207      	movs	r2, #7
 800dd5c:	a902      	add	r1, sp, #8
 800dd5e:	4620      	mov	r0, r4
 800dd60:	f00e fd8d 	bl	801c87e <memcmp>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
 800dd64:	b948      	cbnz	r0, 800dd7a <bt_unpair+0x36>
		bt_foreach_bond(id, unpair_remote, &id);
 800dd66:	f10d 0207 	add.w	r2, sp, #7
 800dd6a:	4909      	ldr	r1, [pc, #36]	; (800dd90 <bt_unpair+0x4c>)
 800dd6c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800dd70:	f008 fcbc 	bl	80166ec <bt_foreach_bond>
		return 0;
 800dd74:	2000      	movs	r0, #0
}
 800dd76:	b004      	add	sp, #16
 800dd78:	bd10      	pop	{r4, pc}
	unpair(id, addr);
 800dd7a:	4621      	mov	r1, r4
 800dd7c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800dd80:	f7fe fb70 	bl	800c464 <unpair>
	return 0;
 800dd84:	2000      	movs	r0, #0
 800dd86:	e7f6      	b.n	800dd76 <bt_unpair+0x32>
		return -EINVAL;
 800dd88:	f06f 0015 	mvn.w	r0, #21
 800dd8c:	e7f3      	b.n	800dd76 <bt_unpair+0x32>
 800dd8e:	bf00      	nop
 800dd90:	0801cb9f 	.word	0x0801cb9f

0800dd94 <hci_encrypt_key_refresh_complete>:
{
 800dd94:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
 800dd96:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
 800dd98:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
 800dd9c:	4630      	mov	r0, r6
 800dd9e:	f002 fb33 	bl	8010408 <bt_conn_lookup_handle>
	if (!conn) {
 800dda2:	b170      	cbz	r0, 800ddc2 <hci_encrypt_key_refresh_complete+0x2e>
 800dda4:	4604      	mov	r4, r0
	if (evt->status) {
 800dda6:	782e      	ldrb	r6, [r5, #0]
 800dda8:	b9f6      	cbnz	r6, 800dde8 <hci_encrypt_key_refresh_complete+0x54>
	if (conn->type == BT_CONN_TYPE_LE) {
 800ddaa:	7883      	ldrb	r3, [r0, #2]
 800ddac:	2b01      	cmp	r3, #1
 800ddae:	d027      	beq.n	800de00 <hci_encrypt_key_refresh_complete+0x6c>
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	7829      	ldrb	r1, [r5, #0]
 800ddb4:	4620      	mov	r0, r4
 800ddb6:	f002 f991 	bl	80100dc <bt_conn_security_changed>
	bt_conn_unref(conn);
 800ddba:	4620      	mov	r0, r4
 800ddbc:	f00f fcb8 	bl	801d730 <bt_conn_unref>
}
 800ddc0:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to look up conn with handle %u", handle);
 800ddc2:	f04f 0200 	mov.w	r2, #0
 800ddc6:	2301      	movs	r3, #1
 800ddc8:	f363 0202 	bfi	r2, r3, #0, #3
 800ddcc:	f36f 02c5 	bfc	r2, #3, #3
 800ddd0:	4b0e      	ldr	r3, [pc, #56]	; (800de0c <hci_encrypt_key_refresh_complete+0x78>)
 800ddd2:	490f      	ldr	r1, [pc, #60]	; (800de10 <hci_encrypt_key_refresh_complete+0x7c>)
 800ddd4:	1a5b      	subs	r3, r3, r1
 800ddd6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800ddda:	f363 128f 	bfi	r2, r3, #6, #10
 800ddde:	4631      	mov	r1, r6
 800dde0:	480c      	ldr	r0, [pc, #48]	; (800de14 <hci_encrypt_key_refresh_complete+0x80>)
 800dde2:	f7f8 fbad 	bl	8006540 <log_1>
		return;
 800dde6:	e7eb      	b.n	800ddc0 <hci_encrypt_key_refresh_complete+0x2c>
		bt_conn_security_changed(conn, evt->status,
 800dde8:	4630      	mov	r0, r6
 800ddea:	f00f f850 	bl	801ce8e <bt_security_err_get>
 800ddee:	4602      	mov	r2, r0
 800ddf0:	4631      	mov	r1, r6
 800ddf2:	4620      	mov	r0, r4
 800ddf4:	f002 f972 	bl	80100dc <bt_conn_security_changed>
		bt_conn_unref(conn);
 800ddf8:	4620      	mov	r0, r4
 800ddfa:	f00f fc99 	bl	801d730 <bt_conn_unref>
		return;
 800ddfe:	e7df      	b.n	800ddc0 <hci_encrypt_key_refresh_complete+0x2c>
		bt_smp_update_keys(conn);
 800de00:	f008 fb62 	bl	80164c8 <bt_smp_update_keys>
		update_sec_level(conn);
 800de04:	4620      	mov	r0, r4
 800de06:	f7fe faef 	bl	800c3e8 <update_sec_level>
 800de0a:	e7d1      	b.n	800ddb0 <hci_encrypt_key_refresh_complete+0x1c>
 800de0c:	08022bc8 	.word	0x08022bc8
 800de10:	08022b90 	.word	0x08022b90
 800de14:	080264cc 	.word	0x080264cc

0800de18 <hci_encrypt_change>:
{
 800de18:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
 800de1a:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
 800de1c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
 800de20:	4630      	mov	r0, r6
 800de22:	f002 faf1 	bl	8010408 <bt_conn_lookup_handle>
	if (!conn) {
 800de26:	b180      	cbz	r0, 800de4a <hci_encrypt_change+0x32>
 800de28:	4604      	mov	r4, r0
	if (evt->status) {
 800de2a:	782e      	ldrb	r6, [r5, #0]
 800de2c:	bb06      	cbnz	r6, 800de70 <hci_encrypt_change+0x58>
	conn->encrypt = evt->encrypt;
 800de2e:	78eb      	ldrb	r3, [r5, #3]
 800de30:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
 800de32:	7882      	ldrb	r2, [r0, #2]
 800de34:	2a01      	cmp	r2, #1
 800de36:	d027      	beq.n	800de88 <hci_encrypt_change+0x70>
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
 800de38:	2200      	movs	r2, #0
 800de3a:	7829      	ldrb	r1, [r5, #0]
 800de3c:	4620      	mov	r0, r4
 800de3e:	f002 f94d 	bl	80100dc <bt_conn_security_changed>
	bt_conn_unref(conn);
 800de42:	4620      	mov	r0, r4
 800de44:	f00f fc74 	bl	801d730 <bt_conn_unref>
}
 800de48:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to look up conn with handle %u", handle);
 800de4a:	f04f 0200 	mov.w	r2, #0
 800de4e:	2301      	movs	r3, #1
 800de50:	f363 0202 	bfi	r2, r3, #0, #3
 800de54:	f36f 02c5 	bfc	r2, #3, #3
 800de58:	4b0f      	ldr	r3, [pc, #60]	; (800de98 <hci_encrypt_change+0x80>)
 800de5a:	4910      	ldr	r1, [pc, #64]	; (800de9c <hci_encrypt_change+0x84>)
 800de5c:	1a5b      	subs	r3, r3, r1
 800de5e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800de62:	f363 128f 	bfi	r2, r3, #6, #10
 800de66:	4631      	mov	r1, r6
 800de68:	480d      	ldr	r0, [pc, #52]	; (800dea0 <hci_encrypt_change+0x88>)
 800de6a:	f7f8 fb69 	bl	8006540 <log_1>
		return;
 800de6e:	e7eb      	b.n	800de48 <hci_encrypt_change+0x30>
		bt_conn_security_changed(conn, evt->status,
 800de70:	4630      	mov	r0, r6
 800de72:	f00f f80c 	bl	801ce8e <bt_security_err_get>
 800de76:	4602      	mov	r2, r0
 800de78:	4631      	mov	r1, r6
 800de7a:	4620      	mov	r0, r4
 800de7c:	f002 f92e 	bl	80100dc <bt_conn_security_changed>
		bt_conn_unref(conn);
 800de80:	4620      	mov	r0, r4
 800de82:	f00f fc55 	bl	801d730 <bt_conn_unref>
		return;
 800de86:	e7df      	b.n	800de48 <hci_encrypt_change+0x30>
		if (conn->encrypt) {
 800de88:	b91b      	cbnz	r3, 800de92 <hci_encrypt_change+0x7a>
		update_sec_level(conn);
 800de8a:	4620      	mov	r0, r4
 800de8c:	f7fe faac 	bl	800c3e8 <update_sec_level>
 800de90:	e7d2      	b.n	800de38 <hci_encrypt_change+0x20>
			bt_smp_update_keys(conn);
 800de92:	f008 fb19 	bl	80164c8 <bt_smp_update_keys>
 800de96:	e7f8      	b.n	800de8a <hci_encrypt_change+0x72>
 800de98:	08022bc8 	.word	0x08022bc8
 800de9c:	08022b90 	.word	0x08022b90
 800dea0:	080264cc 	.word	0x080264cc

0800dea4 <bt_id_add>:
{
 800dea4:	b570      	push	{r4, r5, r6, lr}
 800dea6:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
 800dea8:	4b6b      	ldr	r3, [pc, #428]	; (800e058 <bt_id_add+0x1b4>)
 800deaa:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800deae:	b123      	cbz	r3, 800deba <bt_id_add+0x16>
 800deb0:	4a69      	ldr	r2, [pc, #420]	; (800e058 <bt_id_add+0x1b4>)
 800deb2:	f892 20e1 	ldrb.w	r2, [r2, #225]	; 0xe1
 800deb6:	4293      	cmp	r3, r2
 800deb8:	d20a      	bcs.n	800ded0 <bt_id_add+0x2c>
		bt_dev.le.rl_entries++;
 800deba:	4a67      	ldr	r2, [pc, #412]	; (800e058 <bt_id_add+0x1b4>)
 800debc:	f892 30e1 	ldrb.w	r3, [r2, #225]	; 0xe1
 800dec0:	3301      	adds	r3, #1
 800dec2:	f882 30e1 	strb.w	r3, [r2, #225]	; 0xe1
		keys->state |= BT_KEYS_ID_ADDED;
 800dec6:	7a23      	ldrb	r3, [r4, #8]
 800dec8:	f043 0304 	orr.w	r3, r3, #4
 800decc:	7223      	strb	r3, [r4, #8]
}
 800dece:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
 800ded0:	2206      	movs	r2, #6
 800ded2:	2100      	movs	r1, #0
 800ded4:	4608      	mov	r0, r1
 800ded6:	f002 fad1 	bl	801047c <bt_conn_lookup_state_le>
	if (conn) {
 800deda:	4605      	mov	r5, r0
 800dedc:	b138      	cbz	r0, 800deee <bt_id_add+0x4a>
		pending_id_keys_update_set(keys, BT_KEYS_ID_PENDING_ADD);
 800dede:	2101      	movs	r1, #1
 800dee0:	4620      	mov	r0, r4
 800dee2:	f7fe f9f5 	bl	800c2d0 <pending_id_keys_update_set>
		bt_conn_unref(conn);
 800dee6:	4628      	mov	r0, r5
 800dee8:	f00f fc22 	bl	801d730 <bt_conn_unref>
		return;
 800deec:	e7ef      	b.n	800dece <bt_id_add+0x2a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800deee:	f3bf 8f5b 	dmb	ish
 800def2:	4b59      	ldr	r3, [pc, #356]	; (800e058 <bt_id_add+0x1b4>)
 800def4:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
 800def8:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
 800defc:	f3c5 1540 	ubfx	r5, r5, #5, #1
	bt_adv_foreach(adv_pause_enabled, NULL);
 800df00:	2100      	movs	r1, #0
 800df02:	4856      	ldr	r0, [pc, #344]	; (800e05c <bt_id_add+0x1b8>)
 800df04:	f7fe f898 	bl	800c038 <bt_adv_foreach>
	if (scan_enabled) {
 800df08:	bb6d      	cbnz	r5, 800df66 <bt_id_add+0xc2>
	if (bt_dev.le.rl_entries) {
 800df0a:	4b53      	ldr	r3, [pc, #332]	; (800e058 <bt_id_add+0x1b4>)
 800df0c:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800df10:	bb6b      	cbnz	r3, 800df6e <bt_id_add+0xca>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
 800df12:	4b51      	ldr	r3, [pc, #324]	; (800e058 <bt_id_add+0x1b4>)
 800df14:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
 800df18:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800df1c:	429a      	cmp	r2, r3
 800df1e:	d03d      	beq.n	800df9c <bt_id_add+0xf8>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
 800df20:	1c66      	adds	r6, r4, #1
 800df22:	4622      	mov	r2, r4
 800df24:	f812 0b2a 	ldrb.w	r0, [r2], #42
 800df28:	4631      	mov	r1, r6
 800df2a:	f00e fea8 	bl	801cc7e <hci_id_add>
	if (err) {
 800df2e:	2800      	cmp	r0, #0
 800df30:	d169      	bne.n	800e006 <bt_id_add+0x162>
	bt_dev.le.rl_entries++;
 800df32:	4a49      	ldr	r2, [pc, #292]	; (800e058 <bt_id_add+0x1b4>)
 800df34:	f892 30e1 	ldrb.w	r3, [r2, #225]	; 0xe1
 800df38:	3301      	adds	r3, #1
 800df3a:	f882 30e1 	strb.w	r3, [r2, #225]	; 0xe1
	keys->state |= BT_KEYS_ID_ADDED;
 800df3e:	7a23      	ldrb	r3, [r4, #8]
 800df40:	f043 0304 	orr.w	r3, r3, #4
 800df44:	7223      	strb	r3, [r4, #8]
	err = le_set_privacy_mode(&keys->addr, BT_HCI_LE_PRIVACY_MODE_DEVICE);
 800df46:	2101      	movs	r1, #1
 800df48:	4630      	mov	r0, r6
 800df4a:	f7ff fc57 	bl	800d7fc <le_set_privacy_mode>
	if (err) {
 800df4e:	2800      	cmp	r0, #0
 800df50:	d16b      	bne.n	800e02a <bt_id_add+0x186>
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
 800df52:	2001      	movs	r0, #1
 800df54:	f00e fec9 	bl	801ccea <addr_res_enable>
	if (scan_enabled) {
 800df58:	2d00      	cmp	r5, #0
 800df5a:	d178      	bne.n	800e04e <bt_id_add+0x1aa>
	bt_adv_foreach(adv_unpause_enabled, NULL);
 800df5c:	2100      	movs	r1, #0
 800df5e:	4840      	ldr	r0, [pc, #256]	; (800e060 <bt_id_add+0x1bc>)
 800df60:	f7fe f86a 	bl	800c038 <bt_adv_foreach>
 800df64:	e7b3      	b.n	800dece <bt_id_add+0x2a>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
 800df66:	2000      	movs	r0, #0
 800df68:	f00e fed6 	bl	801cd18 <set_le_scan_enable>
 800df6c:	e7cd      	b.n	800df0a <bt_id_add+0x66>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
 800df6e:	2000      	movs	r0, #0
 800df70:	f00e febb 	bl	801ccea <addr_res_enable>
		if (err) {
 800df74:	2800      	cmp	r0, #0
 800df76:	d0cc      	beq.n	800df12 <bt_id_add+0x6e>
			BT_WARN("Failed to disable address resolution");
 800df78:	f04f 0100 	mov.w	r1, #0
 800df7c:	2302      	movs	r3, #2
 800df7e:	f363 0102 	bfi	r1, r3, #0, #3
 800df82:	f36f 01c5 	bfc	r1, #3, #3
 800df86:	4b37      	ldr	r3, [pc, #220]	; (800e064 <bt_id_add+0x1c0>)
 800df88:	4a37      	ldr	r2, [pc, #220]	; (800e068 <bt_id_add+0x1c4>)
 800df8a:	1a9b      	subs	r3, r3, r2
 800df8c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800df90:	f363 118f 	bfi	r1, r3, #6, #10
 800df94:	4835      	ldr	r0, [pc, #212]	; (800e06c <bt_id_add+0x1c8>)
 800df96:	f7f8 fc43 	bl	8006820 <log_0>
			goto done;
 800df9a:	e7da      	b.n	800df52 <bt_id_add+0xae>
		BT_WARN("Resolving list size exceeded. Switching to host.");
 800df9c:	f04f 0100 	mov.w	r1, #0
 800dfa0:	2302      	movs	r3, #2
 800dfa2:	f363 0102 	bfi	r1, r3, #0, #3
 800dfa6:	f36f 01c5 	bfc	r1, #3, #3
 800dfaa:	4b2e      	ldr	r3, [pc, #184]	; (800e064 <bt_id_add+0x1c0>)
 800dfac:	4a2e      	ldr	r2, [pc, #184]	; (800e068 <bt_id_add+0x1c4>)
 800dfae:	1a9b      	subs	r3, r3, r2
 800dfb0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800dfb4:	f363 118f 	bfi	r1, r3, #6, #10
 800dfb8:	482d      	ldr	r0, [pc, #180]	; (800e070 <bt_id_add+0x1cc>)
 800dfba:	f7f8 fc31 	bl	8006820 <log_0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	4611      	mov	r1, r2
 800dfc2:	f242 0029 	movw	r0, #8233	; 0x2029
 800dfc6:	f7ff f8ad 	bl	800d124 <bt_hci_cmd_send_sync>
		if (err) {
 800dfca:	b950      	cbnz	r0, 800dfe2 <bt_id_add+0x13e>
		bt_dev.le.rl_entries++;
 800dfcc:	4a22      	ldr	r2, [pc, #136]	; (800e058 <bt_id_add+0x1b4>)
 800dfce:	f892 30e1 	ldrb.w	r3, [r2, #225]	; 0xe1
 800dfd2:	3301      	adds	r3, #1
 800dfd4:	f882 30e1 	strb.w	r3, [r2, #225]	; 0xe1
		keys->state |= BT_KEYS_ID_ADDED;
 800dfd8:	7a23      	ldrb	r3, [r4, #8]
 800dfda:	f043 0304 	orr.w	r3, r3, #4
 800dfde:	7223      	strb	r3, [r4, #8]
		goto done;
 800dfe0:	e7b7      	b.n	800df52 <bt_id_add+0xae>
			BT_ERR("Failed to clear resolution list");
 800dfe2:	f04f 0100 	mov.w	r1, #0
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	f363 0102 	bfi	r1, r3, #0, #3
 800dfec:	f36f 01c5 	bfc	r1, #3, #3
 800dff0:	4b1c      	ldr	r3, [pc, #112]	; (800e064 <bt_id_add+0x1c0>)
 800dff2:	4a1d      	ldr	r2, [pc, #116]	; (800e068 <bt_id_add+0x1c4>)
 800dff4:	1a9b      	subs	r3, r3, r2
 800dff6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800dffa:	f363 118f 	bfi	r1, r3, #6, #10
 800dffe:	481d      	ldr	r0, [pc, #116]	; (800e074 <bt_id_add+0x1d0>)
 800e000:	f7f8 fc0e 	bl	8006820 <log_0>
			goto done;
 800e004:	e7a5      	b.n	800df52 <bt_id_add+0xae>
		BT_ERR("Failed to add IRK to controller");
 800e006:	f04f 0100 	mov.w	r1, #0
 800e00a:	2301      	movs	r3, #1
 800e00c:	f363 0102 	bfi	r1, r3, #0, #3
 800e010:	f36f 01c5 	bfc	r1, #3, #3
 800e014:	4b13      	ldr	r3, [pc, #76]	; (800e064 <bt_id_add+0x1c0>)
 800e016:	4a14      	ldr	r2, [pc, #80]	; (800e068 <bt_id_add+0x1c4>)
 800e018:	1a9b      	subs	r3, r3, r2
 800e01a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800e01e:	f363 118f 	bfi	r1, r3, #6, #10
 800e022:	4815      	ldr	r0, [pc, #84]	; (800e078 <bt_id_add+0x1d4>)
 800e024:	f7f8 fbfc 	bl	8006820 <log_0>
		goto done;
 800e028:	e793      	b.n	800df52 <bt_id_add+0xae>
		BT_ERR("Failed to set privacy mode");
 800e02a:	f04f 0100 	mov.w	r1, #0
 800e02e:	2301      	movs	r3, #1
 800e030:	f363 0102 	bfi	r1, r3, #0, #3
 800e034:	f36f 01c5 	bfc	r1, #3, #3
 800e038:	4b0a      	ldr	r3, [pc, #40]	; (800e064 <bt_id_add+0x1c0>)
 800e03a:	4a0b      	ldr	r2, [pc, #44]	; (800e068 <bt_id_add+0x1c4>)
 800e03c:	1a9b      	subs	r3, r3, r2
 800e03e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800e042:	f363 118f 	bfi	r1, r3, #6, #10
 800e046:	480d      	ldr	r0, [pc, #52]	; (800e07c <bt_id_add+0x1d8>)
 800e048:	f7f8 fbea 	bl	8006820 <log_0>
		goto done;
 800e04c:	e781      	b.n	800df52 <bt_id_add+0xae>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
 800e04e:	2001      	movs	r0, #1
 800e050:	f00e fe62 	bl	801cd18 <set_le_scan_enable>
 800e054:	e782      	b.n	800df5c <bt_id_add+0xb8>
 800e056:	bf00      	nop
 800e058:	20000000 	.word	0x20000000
 800e05c:	0801cc49 	.word	0x0801cc49
 800e060:	0801cc19 	.word	0x0801cc19
 800e064:	08022bc8 	.word	0x08022bc8
 800e068:	08022b90 	.word	0x08022b90
 800e06c:	080268d0 	.word	0x080268d0
 800e070:	080268f8 	.word	0x080268f8
 800e074:	0802692c 	.word	0x0802692c
 800e078:	0802694c 	.word	0x0802694c
 800e07c:	0802696c 	.word	0x0802696c

0800e080 <bt_id_del>:
{
 800e080:	b538      	push	{r3, r4, r5, lr}
 800e082:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size ||
 800e084:	4b4b      	ldr	r3, [pc, #300]	; (800e1b4 <bt_id_del+0x134>)
 800e086:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800e08a:	b12b      	cbz	r3, 800e098 <bt_id_del+0x18>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
 800e08c:	4a49      	ldr	r2, [pc, #292]	; (800e1b4 <bt_id_del+0x134>)
 800e08e:	f892 20e1 	ldrb.w	r2, [r2, #225]	; 0xe1
 800e092:	3301      	adds	r3, #1
	if (!bt_dev.le.rl_size ||
 800e094:	429a      	cmp	r2, r3
 800e096:	dd0a      	ble.n	800e0ae <bt_id_del+0x2e>
		bt_dev.le.rl_entries--;
 800e098:	4a46      	ldr	r2, [pc, #280]	; (800e1b4 <bt_id_del+0x134>)
 800e09a:	f892 30e1 	ldrb.w	r3, [r2, #225]	; 0xe1
 800e09e:	3b01      	subs	r3, #1
 800e0a0:	f882 30e1 	strb.w	r3, [r2, #225]	; 0xe1
		keys->state &= ~BT_KEYS_ID_ADDED;
 800e0a4:	7a23      	ldrb	r3, [r4, #8]
 800e0a6:	f023 0304 	bic.w	r3, r3, #4
 800e0aa:	7223      	strb	r3, [r4, #8]
}
 800e0ac:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
 800e0ae:	2206      	movs	r2, #6
 800e0b0:	2100      	movs	r1, #0
 800e0b2:	4608      	mov	r0, r1
 800e0b4:	f002 f9e2 	bl	801047c <bt_conn_lookup_state_le>
	if (conn) {
 800e0b8:	4605      	mov	r5, r0
 800e0ba:	b138      	cbz	r0, 800e0cc <bt_id_del+0x4c>
		pending_id_keys_update_set(keys, BT_KEYS_ID_PENDING_DEL);
 800e0bc:	2102      	movs	r1, #2
 800e0be:	4620      	mov	r0, r4
 800e0c0:	f7fe f906 	bl	800c2d0 <pending_id_keys_update_set>
		bt_conn_unref(conn);
 800e0c4:	4628      	mov	r0, r5
 800e0c6:	f00f fb33 	bl	801d730 <bt_conn_unref>
		return;
 800e0ca:	e7ef      	b.n	800e0ac <bt_id_del+0x2c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800e0cc:	f3bf 8f5b 	dmb	ish
 800e0d0:	4b38      	ldr	r3, [pc, #224]	; (800e1b4 <bt_id_del+0x134>)
 800e0d2:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
 800e0d6:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
 800e0da:	f3c5 1540 	ubfx	r5, r5, #5, #1
	bt_adv_foreach(adv_pause_enabled, NULL);
 800e0de:	2100      	movs	r1, #0
 800e0e0:	4835      	ldr	r0, [pc, #212]	; (800e1b8 <bt_id_del+0x138>)
 800e0e2:	f7fd ffa9 	bl	800c038 <bt_adv_foreach>
	if (scan_enabled) {
 800e0e6:	bb35      	cbnz	r5, 800e136 <bt_id_del+0xb6>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
 800e0e8:	2000      	movs	r0, #0
 800e0ea:	f00e fdfe 	bl	801ccea <addr_res_enable>
	if (err) {
 800e0ee:	4601      	mov	r1, r0
 800e0f0:	bb28      	cbnz	r0, 800e13e <bt_id_del+0xbe>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
 800e0f2:	4a30      	ldr	r2, [pc, #192]	; (800e1b4 <bt_id_del+0x134>)
 800e0f4:	f892 30e1 	ldrb.w	r3, [r2, #225]	; 0xe1
 800e0f8:	f892 20e0 	ldrb.w	r2, [r2, #224]	; 0xe0
 800e0fc:	4293      	cmp	r3, r2
 800e0fe:	d830      	bhi.n	800e162 <bt_id_del+0xe2>
	err = hci_id_del(&keys->addr);
 800e100:	1c60      	adds	r0, r4, #1
 800e102:	f00e fe0d 	bl	801cd20 <hci_id_del>
	if (err) {
 800e106:	2800      	cmp	r0, #0
 800e108:	d139      	bne.n	800e17e <bt_id_del+0xfe>
	bt_dev.le.rl_entries--;
 800e10a:	4a2a      	ldr	r2, [pc, #168]	; (800e1b4 <bt_id_del+0x134>)
 800e10c:	f892 30e1 	ldrb.w	r3, [r2, #225]	; 0xe1
 800e110:	3b01      	subs	r3, #1
 800e112:	f882 30e1 	strb.w	r3, [r2, #225]	; 0xe1
	keys->state &= ~BT_KEYS_ID_ADDED;
 800e116:	7a23      	ldrb	r3, [r4, #8]
 800e118:	f023 0304 	bic.w	r3, r3, #4
 800e11c:	7223      	strb	r3, [r4, #8]
	if (bt_dev.le.rl_entries) {
 800e11e:	4b25      	ldr	r3, [pc, #148]	; (800e1b4 <bt_id_del+0x134>)
 800e120:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800e124:	2b00      	cmp	r3, #0
 800e126:	d13c      	bne.n	800e1a2 <bt_id_del+0x122>
	if (scan_enabled) {
 800e128:	2d00      	cmp	r5, #0
 800e12a:	d13e      	bne.n	800e1aa <bt_id_del+0x12a>
	bt_adv_foreach(adv_unpause_enabled, NULL);
 800e12c:	2100      	movs	r1, #0
 800e12e:	4823      	ldr	r0, [pc, #140]	; (800e1bc <bt_id_del+0x13c>)
 800e130:	f7fd ff82 	bl	800c038 <bt_adv_foreach>
 800e134:	e7ba      	b.n	800e0ac <bt_id_del+0x2c>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
 800e136:	2000      	movs	r0, #0
 800e138:	f00e fdee 	bl	801cd18 <set_le_scan_enable>
 800e13c:	e7d4      	b.n	800e0e8 <bt_id_del+0x68>
		BT_ERR("Disabling address resolution failed (err %d)", err);
 800e13e:	f04f 0200 	mov.w	r2, #0
 800e142:	2301      	movs	r3, #1
 800e144:	f363 0202 	bfi	r2, r3, #0, #3
 800e148:	f36f 02c5 	bfc	r2, #3, #3
 800e14c:	4b1c      	ldr	r3, [pc, #112]	; (800e1c0 <bt_id_del+0x140>)
 800e14e:	481d      	ldr	r0, [pc, #116]	; (800e1c4 <bt_id_del+0x144>)
 800e150:	1a1b      	subs	r3, r3, r0
 800e152:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800e156:	f363 128f 	bfi	r2, r3, #6, #10
 800e15a:	481b      	ldr	r0, [pc, #108]	; (800e1c8 <bt_id_del+0x148>)
 800e15c:	f7f8 f9f0 	bl	8006540 <log_1>
		goto done;
 800e160:	e7dd      	b.n	800e11e <bt_id_del+0x9e>
		bt_dev.le.rl_entries--;
 800e162:	3b01      	subs	r3, #1
 800e164:	4a13      	ldr	r2, [pc, #76]	; (800e1b4 <bt_id_del+0x134>)
 800e166:	f882 30e1 	strb.w	r3, [r2, #225]	; 0xe1
		keys->state &= ~BT_KEYS_ID_ADDED;
 800e16a:	7a23      	ldrb	r3, [r4, #8]
 800e16c:	f023 0304 	bic.w	r3, r3, #4
 800e170:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
 800e172:	2200      	movs	r2, #0
 800e174:	4915      	ldr	r1, [pc, #84]	; (800e1cc <bt_id_del+0x14c>)
 800e176:	2002      	movs	r0, #2
 800e178:	f008 fadc 	bl	8016734 <bt_keys_foreach>
		goto done;
 800e17c:	e7cf      	b.n	800e11e <bt_id_del+0x9e>
		BT_ERR("Failed to remove IRK from controller");
 800e17e:	f04f 0100 	mov.w	r1, #0
 800e182:	2301      	movs	r3, #1
 800e184:	f363 0102 	bfi	r1, r3, #0, #3
 800e188:	f36f 01c5 	bfc	r1, #3, #3
 800e18c:	4b0c      	ldr	r3, [pc, #48]	; (800e1c0 <bt_id_del+0x140>)
 800e18e:	4a0d      	ldr	r2, [pc, #52]	; (800e1c4 <bt_id_del+0x144>)
 800e190:	1a9b      	subs	r3, r3, r2
 800e192:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800e196:	f363 118f 	bfi	r1, r3, #6, #10
 800e19a:	480d      	ldr	r0, [pc, #52]	; (800e1d0 <bt_id_del+0x150>)
 800e19c:	f7f8 fb40 	bl	8006820 <log_0>
		goto done;
 800e1a0:	e7bd      	b.n	800e11e <bt_id_del+0x9e>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
 800e1a2:	2001      	movs	r0, #1
 800e1a4:	f00e fda1 	bl	801ccea <addr_res_enable>
 800e1a8:	e7be      	b.n	800e128 <bt_id_del+0xa8>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
 800e1aa:	2001      	movs	r0, #1
 800e1ac:	f00e fdb4 	bl	801cd18 <set_le_scan_enable>
 800e1b0:	e7bc      	b.n	800e12c <bt_id_del+0xac>
 800e1b2:	bf00      	nop
 800e1b4:	20000000 	.word	0x20000000
 800e1b8:	0801cc49 	.word	0x0801cc49
 800e1bc:	0801cc19 	.word	0x0801cc19
 800e1c0:	08022bc8 	.word	0x08022bc8
 800e1c4:	08022b90 	.word	0x08022b90
 800e1c8:	08026988 	.word	0x08026988
 800e1cc:	0801cccf 	.word	0x0801cccf
 800e1d0:	080269b8 	.word	0x080269b8

0800e1d4 <bt_le_scan_update>:
{
 800e1d4:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800e1d6:	f3bf 8f5b 	dmb	ish
 800e1da:	4b22      	ldr	r3, [pc, #136]	; (800e264 <bt_le_scan_update+0x90>)
 800e1dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e1e0:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
 800e1e4:	f3c3 1480 	ubfx	r4, r3, #6, #1
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
 800e1e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e1ec:	d002      	beq.n	800e1f4 <bt_le_scan_update+0x20>
		return 0;
 800e1ee:	2400      	movs	r4, #0
}
 800e1f0:	4620      	mov	r0, r4
 800e1f2:	bd38      	pop	{r3, r4, r5, pc}
 800e1f4:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800e1f6:	f3bf 8f5b 	dmb	ish
 800e1fa:	4b1a      	ldr	r3, [pc, #104]	; (800e264 <bt_le_scan_update+0x90>)
 800e1fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e200:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
 800e204:	f013 0f20 	tst.w	r3, #32
 800e208:	d003      	beq.n	800e212 <bt_le_scan_update+0x3e>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
 800e20a:	2000      	movs	r0, #0
 800e20c:	f00e fd84 	bl	801cd18 <set_le_scan_enable>
		if (err) {
 800e210:	bb28      	cbnz	r0, 800e25e <bt_le_scan_update+0x8a>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
 800e212:	2206      	movs	r2, #6
 800e214:	2100      	movs	r1, #0
 800e216:	4608      	mov	r0, r1
 800e218:	f002 f930 	bl	801047c <bt_conn_lookup_state_le>
		if (conn) {
 800e21c:	b110      	cbz	r0, 800e224 <bt_le_scan_update+0x50>
			bt_conn_unref(conn);
 800e21e:	f00f fa87 	bl	801d730 <bt_conn_unref>
			return 0;
 800e222:	e7e5      	b.n	800e1f0 <bt_le_scan_update+0x1c>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
 800e224:	2202      	movs	r2, #2
 800e226:	2100      	movs	r1, #0
 800e228:	4608      	mov	r0, r1
 800e22a:	f002 f927 	bl	801047c <bt_conn_lookup_state_le>
		if (conn) {
 800e22e:	4603      	mov	r3, r0
 800e230:	2800      	cmp	r0, #0
 800e232:	d0dd      	beq.n	800e1f0 <bt_le_scan_update+0x1c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800e234:	4a0c      	ldr	r2, [pc, #48]	; (800e268 <bt_le_scan_update+0x94>)
 800e236:	f3bf 8f5b 	dmb	ish
 800e23a:	e852 1f00 	ldrex	r1, [r2]
 800e23e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800e242:	e842 1000 	strex	r0, r1, [r2]
 800e246:	2800      	cmp	r0, #0
 800e248:	d1f7      	bne.n	800e23a <bt_le_scan_update+0x66>
 800e24a:	f3bf 8f5b 	dmb	ish
			bt_conn_unref(conn);
 800e24e:	4618      	mov	r0, r3
 800e250:	f00f fa6e 	bl	801d730 <bt_conn_unref>
			return start_passive_scan(fast_scan);
 800e254:	4628      	mov	r0, r5
 800e256:	f00e fdd3 	bl	801ce00 <start_passive_scan>
 800e25a:	4604      	mov	r4, r0
 800e25c:	e7c8      	b.n	800e1f0 <bt_le_scan_update+0x1c>
			return err;
 800e25e:	4604      	mov	r4, r0
 800e260:	e7c6      	b.n	800e1f0 <bt_le_scan_update+0x1c>
 800e262:	bf00      	nop
 800e264:	20000000 	.word	0x20000000
 800e268:	20000094 	.word	0x20000094

0800e26c <hci_disconn_complete>:
{
 800e26c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
 800e26e:	6884      	ldr	r4, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
 800e270:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	if (evt->status) {
 800e274:	7823      	ldrb	r3, [r4, #0]
 800e276:	b103      	cbz	r3, 800e27a <hci_disconn_complete+0xe>
}
 800e278:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_lookup_handle(handle);
 800e27a:	4630      	mov	r0, r6
 800e27c:	f002 f8c4 	bl	8010408 <bt_conn_lookup_handle>
	if (!conn) {
 800e280:	4605      	mov	r5, r0
 800e282:	b168      	cbz	r0, 800e2a0 <hci_disconn_complete+0x34>
	conn->err = evt->reason;
 800e284:	78e3      	ldrb	r3, [r4, #3]
 800e286:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
 800e288:	2100      	movs	r1, #0
 800e28a:	f002 f991 	bl	80105b0 <bt_conn_set_state>
	conn->handle = 0U;
 800e28e:	2300      	movs	r3, #0
 800e290:	802b      	strh	r3, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
 800e292:	78ab      	ldrb	r3, [r5, #2]
 800e294:	2b01      	cmp	r3, #1
 800e296:	d016      	beq.n	800e2c6 <hci_disconn_complete+0x5a>
		bt_conn_unref(conn);
 800e298:	4628      	mov	r0, r5
 800e29a:	f00f fa49 	bl	801d730 <bt_conn_unref>
		return;
 800e29e:	e7eb      	b.n	800e278 <hci_disconn_complete+0xc>
		BT_ERR("Unable to look up conn with handle %u", handle);
 800e2a0:	f04f 0200 	mov.w	r2, #0
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	f363 0202 	bfi	r2, r3, #0, #3
 800e2aa:	f36f 02c5 	bfc	r2, #3, #3
 800e2ae:	4b10      	ldr	r3, [pc, #64]	; (800e2f0 <hci_disconn_complete+0x84>)
 800e2b0:	4910      	ldr	r1, [pc, #64]	; (800e2f4 <hci_disconn_complete+0x88>)
 800e2b2:	1a5b      	subs	r3, r3, r1
 800e2b4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800e2b8:	f363 128f 	bfi	r2, r3, #6, #10
 800e2bc:	4631      	mov	r1, r6
 800e2be:	480e      	ldr	r0, [pc, #56]	; (800e2f8 <hci_disconn_complete+0x8c>)
 800e2c0:	f7f8 f93e 	bl	8006540 <log_1>
		return;
 800e2c4:	e7d8      	b.n	800e278 <hci_disconn_complete+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800e2c6:	f3bf 8f5b 	dmb	ish
 800e2ca:	686b      	ldr	r3, [r5, #4]
 800e2cc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
 800e2d0:	f013 0f01 	tst.w	r3, #1
 800e2d4:	d103      	bne.n	800e2de <hci_disconn_complete+0x72>
	bt_conn_unref(conn);
 800e2d6:	4628      	mov	r0, r5
 800e2d8:	f00f fa2a 	bl	801d730 <bt_conn_unref>
 800e2dc:	e7cc      	b.n	800e278 <hci_disconn_complete+0xc>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
 800e2de:	2102      	movs	r1, #2
 800e2e0:	4628      	mov	r0, r5
 800e2e2:	f002 f965 	bl	80105b0 <bt_conn_set_state>
		bt_le_scan_update(false);
 800e2e6:	2000      	movs	r0, #0
 800e2e8:	f7ff ff74 	bl	800e1d4 <bt_le_scan_update>
 800e2ec:	e7f3      	b.n	800e2d6 <hci_disconn_complete+0x6a>
 800e2ee:	bf00      	nop
 800e2f0:	08022bc8 	.word	0x08022bc8
 800e2f4:	08022b90 	.word	0x08022b90
 800e2f8:	080264cc 	.word	0x080264cc

0800e2fc <check_pending_conn>:
{
 800e2fc:	b538      	push	{r3, r4, r5, lr}
 800e2fe:	f3bf 8f5b 	dmb	ish
 800e302:	4b21      	ldr	r3, [pc, #132]	; (800e388 <check_pending_conn+0x8c>)
 800e304:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e308:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
 800e30c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e310:	d103      	bne.n	800e31a <check_pending_conn+0x1e>
 800e312:	460c      	mov	r4, r1
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
 800e314:	f012 0f01 	tst.w	r2, #1
 800e318:	d100      	bne.n	800e31c <check_pending_conn+0x20>
}
 800e31a:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
 800e31c:	2202      	movs	r2, #2
 800e31e:	4601      	mov	r1, r0
 800e320:	2000      	movs	r0, #0
 800e322:	f002 f8ab 	bl	801047c <bt_conn_lookup_state_le>
	if (!conn) {
 800e326:	4605      	mov	r5, r0
 800e328:	2800      	cmp	r0, #0
 800e32a:	d0f6      	beq.n	800e31a <check_pending_conn+0x1e>
 800e32c:	f3bf 8f5b 	dmb	ish
 800e330:	4b15      	ldr	r3, [pc, #84]	; (800e388 <check_pending_conn+0x8c>)
 800e332:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e336:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
 800e33a:	f013 0f20 	tst.w	r3, #32
 800e33e:	d003      	beq.n	800e348 <check_pending_conn+0x4c>
	    set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE)) {
 800e340:	2000      	movs	r0, #0
 800e342:	f00e fce9 	bl	801cd18 <set_le_scan_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
 800e346:	b948      	cbnz	r0, 800e35c <check_pending_conn+0x60>
	memcpy(dst, src, sizeof(*dst));
 800e348:	2207      	movs	r2, #7
 800e34a:	4621      	mov	r1, r4
 800e34c:	f105 0096 	add.w	r0, r5, #150	; 0x96
 800e350:	f00e faad 	bl	801c8ae <memcpy>
	if (bt_le_create_conn(conn)) {
 800e354:	4628      	mov	r0, r5
 800e356:	f00e fd6b 	bl	801ce30 <bt_le_create_conn>
 800e35a:	b160      	cbz	r0, 800e376 <check_pending_conn+0x7a>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
 800e35c:	231f      	movs	r3, #31
 800e35e:	732b      	strb	r3, [r5, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
 800e360:	2100      	movs	r1, #0
 800e362:	4628      	mov	r0, r5
 800e364:	f002 f924 	bl	80105b0 <bt_conn_set_state>
	bt_conn_unref(conn);
 800e368:	4628      	mov	r0, r5
 800e36a:	f00f f9e1 	bl	801d730 <bt_conn_unref>
	bt_le_scan_update(false);
 800e36e:	2000      	movs	r0, #0
 800e370:	f7ff ff30 	bl	800e1d4 <bt_le_scan_update>
 800e374:	e7d1      	b.n	800e31a <check_pending_conn+0x1e>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
 800e376:	2106      	movs	r1, #6
 800e378:	4628      	mov	r0, r5
 800e37a:	f002 f919 	bl	80105b0 <bt_conn_set_state>
	bt_conn_unref(conn);
 800e37e:	4628      	mov	r0, r5
 800e380:	f00f f9d6 	bl	801d730 <bt_conn_unref>
	return;
 800e384:	e7c9      	b.n	800e31a <check_pending_conn+0x1e>
 800e386:	bf00      	nop
 800e388:	20000000 	.word	0x20000000

0800e38c <le_adv_recv>:
{
 800e38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e390:	b087      	sub	sp, #28
 800e392:	9001      	str	r0, [sp, #4]
 800e394:	468a      	mov	sl, r1
 800e396:	4615      	mov	r5, r2
 800e398:	469b      	mov	fp, r3
 800e39a:	f3bf 8f5b 	dmb	ish
 800e39e:	4b3d      	ldr	r3, [pc, #244]	; (800e494 <le_adv_recv+0x108>)
 800e3a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e3a4:	f3bf 8f5b 	dmb	ish
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
 800e3a8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e3ac:	d003      	beq.n	800e3b6 <le_adv_recv+0x2a>
	    (info->adv_props & BT_HCI_LE_ADV_PROP_DIRECT)) {
 800e3ae:	890b      	ldrh	r3, [r1, #8]
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
 800e3b0:	f013 0f04 	tst.w	r3, #4
 800e3b4:	d16a      	bne.n	800e48c <le_adv_recv+0x100>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
 800e3b6:	9b01      	ldr	r3, [sp, #4]
 800e3b8:	781a      	ldrb	r2, [r3, #0]
 800e3ba:	1e93      	subs	r3, r2, #2
 800e3bc:	b2db      	uxtb	r3, r3
 800e3be:	2b01      	cmp	r3, #1
 800e3c0:	d92c      	bls.n	800e41c <le_adv_recv+0x90>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
 800e3c2:	2aff      	cmp	r2, #255	; 0xff
 800e3c4:	d035      	beq.n	800e432 <le_adv_recv+0xa6>
		bt_addr_le_copy(&id_addr,
 800e3c6:	9901      	ldr	r1, [sp, #4]
 800e3c8:	2000      	movs	r0, #0
 800e3ca:	f00e fcfe 	bl	801cdca <bt_lookup_id_addr>
 800e3ce:	4601      	mov	r1, r0
 800e3d0:	2207      	movs	r2, #7
 800e3d2:	a802      	add	r0, sp, #8
 800e3d4:	f00e fa6b 	bl	801c8ae <memcpy>
	info->addr = &id_addr;
 800e3d8:	ab02      	add	r3, sp, #8
 800e3da:	f8ca 3000 	str.w	r3, [sl]
	if (scan_dev_found_cb) {
 800e3de:	4b2e      	ldr	r3, [pc, #184]	; (800e498 <le_adv_recv+0x10c>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	b1b3      	cbz	r3, 800e412 <le_adv_recv+0x86>
		net_buf_simple_save(&buf->b, &state);
 800e3e4:	f105 0708 	add.w	r7, r5, #8
 * @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
 800e3e8:	4638      	mov	r0, r7
 800e3ea:	f012 f890 	bl	802050e <net_buf_simple_headroom>
 800e3ee:	b284      	uxth	r4, r0
	state->len = buf->len;
 800e3f0:	89ae      	ldrh	r6, [r5, #12]
		buf->len = len;
 800e3f2:	f8a5 b00c 	strh.w	fp, [r5, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
 800e3f6:	4b28      	ldr	r3, [pc, #160]	; (800e498 <le_adv_recv+0x10c>)
 800e3f8:	f8d3 8000 	ldr.w	r8, [r3]
 800e3fc:	463b      	mov	r3, r7
 800e3fe:	f89a 2007 	ldrb.w	r2, [sl, #7]
 800e402:	f99a 1005 	ldrsb.w	r1, [sl, #5]
 800e406:	a802      	add	r0, sp, #8
 800e408:	47c0      	blx	r8
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
 800e40a:	692b      	ldr	r3, [r5, #16]
 800e40c:	4423      	add	r3, r4
 800e40e:	60ab      	str	r3, [r5, #8]
	buf->len = state->len;
 800e410:	81ae      	strh	r6, [r5, #12]
	return list->head;
 800e412:	4b22      	ldr	r3, [pc, #136]	; (800e49c <le_adv_recv+0x110>)
 800e414:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&scan_cbs, listener, node) {
 800e416:	b1bc      	cbz	r4, 800e448 <le_adv_recv+0xbc>
 800e418:	3c08      	subs	r4, #8
 800e41a:	e015      	b.n	800e448 <le_adv_recv+0xbc>
 800e41c:	2207      	movs	r2, #7
 800e41e:	9901      	ldr	r1, [sp, #4]
 800e420:	a802      	add	r0, sp, #8
 800e422:	f00e fa44 	bl	801c8ae <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
 800e426:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800e42a:	3b02      	subs	r3, #2
 800e42c:	f88d 3008 	strb.w	r3, [sp, #8]
 800e430:	e7d2      	b.n	800e3d8 <le_adv_recv+0x4c>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
 800e432:	2300      	movs	r3, #0
 800e434:	9304      	str	r3, [sp, #16]
 800e436:	f8cd 3013 	str.w	r3, [sp, #19]
 800e43a:	2207      	movs	r2, #7
 800e43c:	a904      	add	r1, sp, #16
 800e43e:	a802      	add	r0, sp, #8
 800e440:	f00e fa35 	bl	801c8ae <memcpy>
 800e444:	e7c8      	b.n	800e3d8 <le_adv_recv+0x4c>
	SYS_SLIST_FOR_EACH_CONTAINER(&scan_cbs, listener, node) {
 800e446:	4634      	mov	r4, r6
 800e448:	b1d4      	cbz	r4, 800e480 <le_adv_recv+0xf4>
		net_buf_simple_save(&buf->b, &state);
 800e44a:	f105 0808 	add.w	r8, r5, #8
	state->offset = net_buf_simple_headroom(buf);
 800e44e:	4640      	mov	r0, r8
 800e450:	f012 f85d 	bl	802050e <net_buf_simple_headroom>
 800e454:	b287      	uxth	r7, r0
	state->len = buf->len;
 800e456:	f8b5 900c 	ldrh.w	r9, [r5, #12]
		buf->len = len;
 800e45a:	f8a5 b00c 	strh.w	fp, [r5, #12]
		listener->recv(info, &buf->b);
 800e45e:	4626      	mov	r6, r4
 800e460:	f856 3b08 	ldr.w	r3, [r6], #8
 800e464:	4641      	mov	r1, r8
 800e466:	4650      	mov	r0, sl
 800e468:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
 800e46a:	6928      	ldr	r0, [r5, #16]
 800e46c:	4438      	add	r0, r7
 800e46e:	60a8      	str	r0, [r5, #8]
	buf->len = state->len;
 800e470:	f8a5 900c 	strh.w	r9, [r5, #12]
Z_GENLIST_PEEK_NEXT(slist, snode)
 800e474:	2e00      	cmp	r6, #0
 800e476:	d0e6      	beq.n	800e446 <le_adv_recv+0xba>
	return node->next;
 800e478:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&scan_cbs, listener, node) {
 800e47a:	b10c      	cbz	r4, 800e480 <le_adv_recv+0xf4>
 800e47c:	3c08      	subs	r4, #8
 800e47e:	e7e3      	b.n	800e448 <le_adv_recv+0xbc>
	check_pending_conn(&id_addr, addr, info->adv_props);
 800e480:	f89a 2008 	ldrb.w	r2, [sl, #8]
 800e484:	9901      	ldr	r1, [sp, #4]
 800e486:	a802      	add	r0, sp, #8
 800e488:	f7ff ff38 	bl	800e2fc <check_pending_conn>
}
 800e48c:	b007      	add	sp, #28
 800e48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e492:	bf00      	nop
 800e494:	20000000 	.word	0x20000000
 800e498:	20004178 	.word	0x20004178
 800e49c:	20004170 	.word	0x20004170

0800e4a0 <le_adv_report>:
{
 800e4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4a2:	b085      	sub	sp, #20
 800e4a4:	4605      	mov	r5, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
 800e4a6:	f100 0608 	add.w	r6, r0, #8
 800e4aa:	4630      	mov	r0, r6
 800e4ac:	f012 f81f 	bl	80204ee <net_buf_simple_pull_u8>
	while (num_reports--) {
 800e4b0:	1e43      	subs	r3, r0, #1
 800e4b2:	b2df      	uxtb	r7, r3
 800e4b4:	2800      	cmp	r0, #0
 800e4b6:	d03e      	beq.n	800e536 <le_adv_report+0x96>
		if (buf->len < sizeof(*evt)) {
 800e4b8:	89ab      	ldrh	r3, [r5, #12]
 800e4ba:	2b08      	cmp	r3, #8
 800e4bc:	d92a      	bls.n	800e514 <le_adv_report+0x74>
		evt = net_buf_pull_mem(buf, sizeof(*evt));
 800e4be:	2109      	movs	r1, #9
 800e4c0:	4630      	mov	r0, r6
 800e4c2:	f012 f80c 	bl	80204de <net_buf_simple_pull_mem>
 800e4c6:	4604      	mov	r4, r0
		adv_info.rssi = evt->data[evt->length];
 800e4c8:	7a03      	ldrb	r3, [r0, #8]
 800e4ca:	4403      	add	r3, r0
 800e4cc:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800e4d0:	f88d 3005 	strb.w	r3, [sp, #5]
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	f88d 300c 	strb.w	r3, [sp, #12]
		adv_info.secondary_phy = 0;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	f88d 300d 	strb.w	r3, [sp, #13]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
 800e4e0:	237f      	movs	r3, #127	; 0x7f
 800e4e2:	f88d 3006 	strb.w	r3, [sp, #6]
		adv_info.sid = BT_GAP_SID_INVALID;
 800e4e6:	23ff      	movs	r3, #255	; 0xff
 800e4e8:	f88d 3004 	strb.w	r3, [sp, #4]
		adv_info.adv_type = evt->evt_type;
 800e4ec:	7800      	ldrb	r0, [r0, #0]
 800e4ee:	f88d 0007 	strb.w	r0, [sp, #7]
		adv_info.adv_props = get_adv_props(evt->evt_type);
 800e4f2:	f00e faf4 	bl	801cade <get_adv_props>
 800e4f6:	f8ad 0008 	strh.w	r0, [sp, #8]
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
 800e4fa:	7a23      	ldrb	r3, [r4, #8]
 800e4fc:	462a      	mov	r2, r5
 800e4fe:	4669      	mov	r1, sp
 800e500:	1c60      	adds	r0, r4, #1
 800e502:	f7ff ff43 	bl	800e38c <le_adv_recv>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
 800e506:	7a21      	ldrb	r1, [r4, #8]
 800e508:	3101      	adds	r1, #1
 800e50a:	4630      	mov	r0, r6
 800e50c:	f011 ffdf 	bl	80204ce <net_buf_simple_pull>
	while (num_reports--) {
 800e510:	4638      	mov	r0, r7
 800e512:	e7cd      	b.n	800e4b0 <le_adv_report+0x10>
			BT_ERR("Unexpected end of buffer");
 800e514:	f04f 0100 	mov.w	r1, #0
 800e518:	2301      	movs	r3, #1
 800e51a:	f363 0102 	bfi	r1, r3, #0, #3
 800e51e:	f36f 01c5 	bfc	r1, #3, #3
 800e522:	4b06      	ldr	r3, [pc, #24]	; (800e53c <le_adv_report+0x9c>)
 800e524:	4a06      	ldr	r2, [pc, #24]	; (800e540 <le_adv_report+0xa0>)
 800e526:	1a9b      	subs	r3, r3, r2
 800e528:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800e52c:	f363 118f 	bfi	r1, r3, #6, #10
 800e530:	4804      	ldr	r0, [pc, #16]	; (800e544 <le_adv_report+0xa4>)
 800e532:	f7f8 f975 	bl	8006820 <log_0>
}
 800e536:	b005      	add	sp, #20
 800e538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e53a:	bf00      	nop
 800e53c:	08022bc8 	.word	0x08022bc8
 800e540:	08022b90 	.word	0x08022b90
 800e544:	080269e0 	.word	0x080269e0

0800e548 <bt_data_parse>:
{
 800e548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e54a:	b083      	sub	sp, #12
 800e54c:	4604      	mov	r4, r0
 800e54e:	460f      	mov	r7, r1
 800e550:	4616      	mov	r6, r2
	while (ad->len > 1) {
 800e552:	e016      	b.n	800e582 <bt_data_parse+0x3a>
			BT_WARN("Malformed data");
 800e554:	f04f 0100 	mov.w	r1, #0
 800e558:	2302      	movs	r3, #2
 800e55a:	f363 0102 	bfi	r1, r3, #0, #3
 800e55e:	f36f 01c5 	bfc	r1, #3, #3
 800e562:	4b16      	ldr	r3, [pc, #88]	; (800e5bc <bt_data_parse+0x74>)
 800e564:	4a16      	ldr	r2, [pc, #88]	; (800e5c0 <bt_data_parse+0x78>)
 800e566:	1a9b      	subs	r3, r3, r2
 800e568:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800e56c:	f363 118f 	bfi	r1, r3, #6, #10
 800e570:	4814      	ldr	r0, [pc, #80]	; (800e5c4 <bt_data_parse+0x7c>)
 800e572:	f7f8 f955 	bl	8006820 <log_0>
}
 800e576:	b003      	add	sp, #12
 800e578:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_simple_pull(ad, len - 1);
 800e57a:	1e69      	subs	r1, r5, #1
 800e57c:	4620      	mov	r0, r4
 800e57e:	f011 ffa6 	bl	80204ce <net_buf_simple_pull>
	while (ad->len > 1) {
 800e582:	88a3      	ldrh	r3, [r4, #4]
 800e584:	2b01      	cmp	r3, #1
 800e586:	d9f6      	bls.n	800e576 <bt_data_parse+0x2e>
		len = net_buf_simple_pull_u8(ad);
 800e588:	4620      	mov	r0, r4
 800e58a:	f011 ffb0 	bl	80204ee <net_buf_simple_pull_u8>
		if (len == 0U) {
 800e58e:	4605      	mov	r5, r0
 800e590:	2800      	cmp	r0, #0
 800e592:	d0f0      	beq.n	800e576 <bt_data_parse+0x2e>
		if (len > ad->len) {
 800e594:	b283      	uxth	r3, r0
 800e596:	88a2      	ldrh	r2, [r4, #4]
 800e598:	4293      	cmp	r3, r2
 800e59a:	d8db      	bhi.n	800e554 <bt_data_parse+0xc>
		data.type = net_buf_simple_pull_u8(ad);
 800e59c:	4620      	mov	r0, r4
 800e59e:	f011 ffa6 	bl	80204ee <net_buf_simple_pull_u8>
 800e5a2:	f88d 0000 	strb.w	r0, [sp]
		data.data_len = len - 1;
 800e5a6:	1e6b      	subs	r3, r5, #1
 800e5a8:	f88d 3001 	strb.w	r3, [sp, #1]
		data.data = ad->data;
 800e5ac:	6823      	ldr	r3, [r4, #0]
 800e5ae:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
 800e5b0:	4631      	mov	r1, r6
 800e5b2:	4668      	mov	r0, sp
 800e5b4:	47b8      	blx	r7
 800e5b6:	2800      	cmp	r0, #0
 800e5b8:	d1df      	bne.n	800e57a <bt_data_parse+0x32>
 800e5ba:	e7dc      	b.n	800e576 <bt_data_parse+0x2e>
 800e5bc:	08022bc8 	.word	0x08022bc8
 800e5c0:	08022b90 	.word	0x08022b90
 800e5c4:	080269fc 	.word	0x080269fc

0800e5c8 <id_create>:
{
 800e5c8:	b530      	push	{r4, r5, lr}
 800e5ca:	b085      	sub	sp, #20
 800e5cc:	4604      	mov	r4, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
 800e5ce:	460d      	mov	r5, r1
 800e5d0:	b149      	cbz	r1, 800e5e6 <id_create+0x1e>
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	9302      	str	r3, [sp, #8]
 800e5d6:	f8cd 300b 	str.w	r3, [sp, #11]
	return memcmp(a, b, sizeof(*a));
 800e5da:	2207      	movs	r2, #7
 800e5dc:	a902      	add	r1, sp, #8
 800e5de:	4628      	mov	r0, r5
 800e5e0:	f00e f94d 	bl	801c87e <memcmp>
 800e5e4:	bb10      	cbnz	r0, 800e62c <id_create+0x64>
			bt_addr_le_create_static(&new_addr);
 800e5e6:	4668      	mov	r0, sp
 800e5e8:	f00e fc8b 	bl	801cf02 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
 800e5ec:	4668      	mov	r0, sp
 800e5ee:	f7fd fe9f 	bl	800c330 <id_find>
 800e5f2:	2800      	cmp	r0, #0
 800e5f4:	daf7      	bge.n	800e5e6 <id_create+0x1e>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
 800e5f6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800e5fa:	4b12      	ldr	r3, [pc, #72]	; (800e644 <id_create+0x7c>)
 800e5fc:	441c      	add	r4, r3
	memcpy(dst, src, sizeof(*dst));
 800e5fe:	2207      	movs	r2, #7
 800e600:	4669      	mov	r1, sp
 800e602:	4620      	mov	r0, r4
 800e604:	f00e f953 	bl	801c8ae <memcpy>
		if (addr) {
 800e608:	b125      	cbz	r5, 800e614 <id_create+0x4c>
 800e60a:	2207      	movs	r2, #7
 800e60c:	4621      	mov	r1, r4
 800e60e:	4628      	mov	r0, r5
 800e610:	f00e f94d 	bl	801c8ae <memcpy>
 800e614:	f3bf 8f5b 	dmb	ish
 800e618:	4b0a      	ldr	r3, [pc, #40]	; (800e644 <id_create+0x7c>)
 800e61a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e61e:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
 800e622:	f013 0f02 	tst.w	r3, #2
 800e626:	d10a      	bne.n	800e63e <id_create+0x76>
}
 800e628:	b005      	add	sp, #20
 800e62a:	bd30      	pop	{r4, r5, pc}
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
 800e62c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800e630:	2207      	movs	r2, #7
 800e632:	4629      	mov	r1, r5
 800e634:	4803      	ldr	r0, [pc, #12]	; (800e644 <id_create+0x7c>)
 800e636:	4420      	add	r0, r4
 800e638:	f00e f939 	bl	801c8ae <memcpy>
}
 800e63c:	e7ea      	b.n	800e614 <id_create+0x4c>
		bt_settings_save_id();
 800e63e:	f7fd fbe3 	bl	800be08 <bt_settings_save_id>
}
 800e642:	e7f1      	b.n	800e628 <id_create+0x60>
 800e644:	20000000 	.word	0x20000000

0800e648 <bt_send>:
{
 800e648:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
 800e64a:	4b03      	ldr	r3, [pc, #12]	; (800e658 <bt_send+0x10>)
 800e64c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800e650:	691b      	ldr	r3, [r3, #16]
 800e652:	4798      	blx	r3
}
 800e654:	bd08      	pop	{r3, pc}
 800e656:	bf00      	nop
 800e658:	20000000 	.word	0x20000000

0800e65c <bt_hci_cmd_send>:
{
 800e65c:	b538      	push	{r3, r4, r5, lr}
 800e65e:	4604      	mov	r4, r0
	if (!buf) {
 800e660:	460d      	mov	r5, r1
 800e662:	b151      	cbz	r1, 800e67a <bt_hci_cmd_send+0x1e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
 800e664:	f640 4335 	movw	r3, #3125	; 0xc35
 800e668:	429c      	cmp	r4, r3
 800e66a:	d00e      	beq.n	800e68a <bt_hci_cmd_send+0x2e>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
 800e66c:	4629      	mov	r1, r5
 800e66e:	4815      	ldr	r0, [pc, #84]	; (800e6c4 <bt_hci_cmd_send+0x68>)
 800e670:	f011 fead 	bl	80203ce <net_buf_put>
	return 0;
 800e674:	2400      	movs	r4, #0
}
 800e676:	4620      	mov	r0, r4
 800e678:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_hci_cmd_create(opcode, 0);
 800e67a:	f7fe fd17 	bl	800d0ac <bt_hci_cmd_create>
		if (!buf) {
 800e67e:	4605      	mov	r5, r0
 800e680:	2800      	cmp	r0, #0
 800e682:	d1ef      	bne.n	800e664 <bt_hci_cmd_send+0x8>
			return -ENOBUFS;
 800e684:	f06f 0436 	mvn.w	r4, #54	; 0x36
 800e688:	e7f5      	b.n	800e676 <bt_hci_cmd_send+0x1a>
		err = bt_send(buf);
 800e68a:	4628      	mov	r0, r5
 800e68c:	f7ff ffdc 	bl	800e648 <bt_send>
		if (err) {
 800e690:	4604      	mov	r4, r0
 800e692:	2800      	cmp	r0, #0
 800e694:	d0ef      	beq.n	800e676 <bt_hci_cmd_send+0x1a>
			BT_ERR("Unable to send to driver (err %d)", err);
 800e696:	f04f 0200 	mov.w	r2, #0
 800e69a:	2301      	movs	r3, #1
 800e69c:	f363 0202 	bfi	r2, r3, #0, #3
 800e6a0:	f36f 02c5 	bfc	r2, #3, #3
 800e6a4:	4b08      	ldr	r3, [pc, #32]	; (800e6c8 <bt_hci_cmd_send+0x6c>)
 800e6a6:	4909      	ldr	r1, [pc, #36]	; (800e6cc <bt_hci_cmd_send+0x70>)
 800e6a8:	1a5b      	subs	r3, r3, r1
 800e6aa:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800e6ae:	f363 128f 	bfi	r2, r3, #6, #10
 800e6b2:	4601      	mov	r1, r0
 800e6b4:	4806      	ldr	r0, [pc, #24]	; (800e6d0 <bt_hci_cmd_send+0x74>)
 800e6b6:	f7f7 ff43 	bl	8006540 <log_1>
			net_buf_unref(buf);
 800e6ba:	4628      	mov	r0, r5
 800e6bc:	f011 fe94 	bl	80203e8 <net_buf_unref>
		return err;
 800e6c0:	e7d9      	b.n	800e676 <bt_hci_cmd_send+0x1a>
 800e6c2:	bf00      	nop
 800e6c4:	20000104 	.word	0x20000104
 800e6c8:	08022bc8 	.word	0x08022bc8
 800e6cc:	08022b90 	.word	0x08022b90
 800e6d0:	08026a0c 	.word	0x08026a0c

0800e6d4 <le_ltk_reply>:
{
 800e6d4:	b570      	push	{r4, r5, r6, lr}
 800e6d6:	4605      	mov	r5, r0
 800e6d8:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
 800e6da:	2112      	movs	r1, #18
 800e6dc:	f242 001a 	movw	r0, #8218	; 0x201a
 800e6e0:	f7fe fce4 	bl	800d0ac <bt_hci_cmd_create>
	if (!buf) {
 800e6e4:	b180      	cbz	r0, 800e708 <le_ltk_reply+0x34>
 800e6e6:	4606      	mov	r6, r0
	cp = net_buf_add(buf, sizeof(*cp));
 800e6e8:	2112      	movs	r1, #18
 800e6ea:	3008      	adds	r0, #8
 800e6ec:	f011 fec6 	bl	802047c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
 800e6f0:	f820 5b02 	strh.w	r5, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
 800e6f4:	2210      	movs	r2, #16
 800e6f6:	4621      	mov	r1, r4
 800e6f8:	f00e f8d9 	bl	801c8ae <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
 800e6fc:	4631      	mov	r1, r6
 800e6fe:	f242 001a 	movw	r0, #8218	; 0x201a
 800e702:	f7ff ffab 	bl	800e65c <bt_hci_cmd_send>
}
 800e706:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Out of command buffers");
 800e708:	f04f 0100 	mov.w	r1, #0
 800e70c:	2301      	movs	r3, #1
 800e70e:	f363 0102 	bfi	r1, r3, #0, #3
 800e712:	f36f 01c5 	bfc	r1, #3, #3
 800e716:	4b05      	ldr	r3, [pc, #20]	; (800e72c <le_ltk_reply+0x58>)
 800e718:	4a05      	ldr	r2, [pc, #20]	; (800e730 <le_ltk_reply+0x5c>)
 800e71a:	1a9b      	subs	r3, r3, r2
 800e71c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800e720:	f363 118f 	bfi	r1, r3, #6, #10
 800e724:	4803      	ldr	r0, [pc, #12]	; (800e734 <le_ltk_reply+0x60>)
 800e726:	f7f8 f87b 	bl	8006820 <log_0>
		return;
 800e72a:	e7ec      	b.n	800e706 <le_ltk_reply+0x32>
 800e72c:	08022bc8 	.word	0x08022bc8
 800e730:	08022b90 	.word	0x08022b90
 800e734:	08026a30 	.word	0x08026a30

0800e738 <le_ltk_neg_reply>:
{
 800e738:	b538      	push	{r3, r4, r5, lr}
 800e73a:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
 800e73c:	2102      	movs	r1, #2
 800e73e:	f242 001b 	movw	r0, #8219	; 0x201b
 800e742:	f7fe fcb3 	bl	800d0ac <bt_hci_cmd_create>
	if (!buf) {
 800e746:	b158      	cbz	r0, 800e760 <le_ltk_neg_reply+0x28>
 800e748:	4605      	mov	r5, r0
	cp = net_buf_add(buf, sizeof(*cp));
 800e74a:	2102      	movs	r1, #2
 800e74c:	3008      	adds	r0, #8
 800e74e:	f011 fe95 	bl	802047c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
 800e752:	8004      	strh	r4, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
 800e754:	4629      	mov	r1, r5
 800e756:	f242 001b 	movw	r0, #8219	; 0x201b
 800e75a:	f7ff ff7f 	bl	800e65c <bt_hci_cmd_send>
}
 800e75e:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Out of command buffers");
 800e760:	f04f 0100 	mov.w	r1, #0
 800e764:	2301      	movs	r3, #1
 800e766:	f363 0102 	bfi	r1, r3, #0, #3
 800e76a:	f36f 01c5 	bfc	r1, #3, #3
 800e76e:	4b05      	ldr	r3, [pc, #20]	; (800e784 <le_ltk_neg_reply+0x4c>)
 800e770:	4a05      	ldr	r2, [pc, #20]	; (800e788 <le_ltk_neg_reply+0x50>)
 800e772:	1a9b      	subs	r3, r3, r2
 800e774:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800e778:	f363 118f 	bfi	r1, r3, #6, #10
 800e77c:	4803      	ldr	r0, [pc, #12]	; (800e78c <le_ltk_neg_reply+0x54>)
 800e77e:	f7f8 f84f 	bl	8006820 <log_0>
		return;
 800e782:	e7ec      	b.n	800e75e <le_ltk_neg_reply+0x26>
 800e784:	08022bc8 	.word	0x08022bc8
 800e788:	08022b90 	.word	0x08022b90
 800e78c:	08026a30 	.word	0x08026a30

0800e790 <le_ltk_request>:
{
 800e790:	b570      	push	{r4, r5, r6, lr}
 800e792:	b086      	sub	sp, #24
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
 800e794:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
 800e796:	8825      	ldrh	r5, [r4, #0]
	conn = bt_conn_lookup_handle(handle);
 800e798:	4628      	mov	r0, r5
 800e79a:	f001 fe35 	bl	8010408 <bt_conn_lookup_handle>
	if (!conn) {
 800e79e:	b1a0      	cbz	r0, 800e7ca <le_ltk_request+0x3a>
 800e7a0:	4606      	mov	r6, r0
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
 800e7a2:	f8d4 2002 	ldr.w	r2, [r4, #2]
 800e7a6:	f8d4 3006 	ldr.w	r3, [r4, #6]
 800e7aa:	a902      	add	r1, sp, #8
 800e7ac:	9101      	str	r1, [sp, #4]
 800e7ae:	8961      	ldrh	r1, [r4, #10]
 800e7b0:	9100      	str	r1, [sp, #0]
 800e7b2:	f011 fc04 	bl	801ffbe <bt_smp_request_ltk>
 800e7b6:	b1d8      	cbz	r0, 800e7f0 <le_ltk_request+0x60>
		le_ltk_reply(handle, ltk);
 800e7b8:	a902      	add	r1, sp, #8
 800e7ba:	4628      	mov	r0, r5
 800e7bc:	f7ff ff8a 	bl	800e6d4 <le_ltk_reply>
	bt_conn_unref(conn);
 800e7c0:	4630      	mov	r0, r6
 800e7c2:	f00e ffb5 	bl	801d730 <bt_conn_unref>
}
 800e7c6:	b006      	add	sp, #24
 800e7c8:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
 800e7ca:	f04f 0200 	mov.w	r2, #0
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	f363 0202 	bfi	r2, r3, #0, #3
 800e7d4:	f36f 02c5 	bfc	r2, #3, #3
 800e7d8:	4b07      	ldr	r3, [pc, #28]	; (800e7f8 <le_ltk_request+0x68>)
 800e7da:	4908      	ldr	r1, [pc, #32]	; (800e7fc <le_ltk_request+0x6c>)
 800e7dc:	1a5b      	subs	r3, r3, r1
 800e7de:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800e7e2:	f363 128f 	bfi	r2, r3, #6, #10
 800e7e6:	4629      	mov	r1, r5
 800e7e8:	4805      	ldr	r0, [pc, #20]	; (800e800 <le_ltk_request+0x70>)
 800e7ea:	f7f7 fea9 	bl	8006540 <log_1>
		return;
 800e7ee:	e7ea      	b.n	800e7c6 <le_ltk_request+0x36>
		le_ltk_neg_reply(handle);
 800e7f0:	4628      	mov	r0, r5
 800e7f2:	f7ff ffa1 	bl	800e738 <le_ltk_neg_reply>
 800e7f6:	e7e3      	b.n	800e7c0 <le_ltk_request+0x30>
 800e7f8:	08022bc8 	.word	0x08022bc8
 800e7fc:	08022b90 	.word	0x08022b90
 800e800:	080264a8 	.word	0x080264a8

0800e804 <le_conn_param_neg_reply>:
{
 800e804:	b570      	push	{r4, r5, r6, lr}
 800e806:	4605      	mov	r5, r0
 800e808:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
 800e80a:	2103      	movs	r1, #3
 800e80c:	f242 0021 	movw	r0, #8225	; 0x2021
 800e810:	f7fe fc4c 	bl	800d0ac <bt_hci_cmd_create>
	if (!buf) {
 800e814:	b160      	cbz	r0, 800e830 <le_conn_param_neg_reply+0x2c>
 800e816:	4606      	mov	r6, r0
	cp = net_buf_add(buf, sizeof(*cp));
 800e818:	2103      	movs	r1, #3
 800e81a:	3008      	adds	r0, #8
 800e81c:	f011 fe2e 	bl	802047c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
 800e820:	8005      	strh	r5, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
 800e822:	7084      	strb	r4, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
 800e824:	4631      	mov	r1, r6
 800e826:	f242 0021 	movw	r0, #8225	; 0x2021
 800e82a:	f7ff ff17 	bl	800e65c <bt_hci_cmd_send>
}
 800e82e:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to allocate buffer");
 800e830:	f04f 0100 	mov.w	r1, #0
 800e834:	2301      	movs	r3, #1
 800e836:	f363 0102 	bfi	r1, r3, #0, #3
 800e83a:	f36f 01c5 	bfc	r1, #3, #3
 800e83e:	4b05      	ldr	r3, [pc, #20]	; (800e854 <le_conn_param_neg_reply+0x50>)
 800e840:	4a05      	ldr	r2, [pc, #20]	; (800e858 <le_conn_param_neg_reply+0x54>)
 800e842:	1a9b      	subs	r3, r3, r2
 800e844:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800e848:	f363 118f 	bfi	r1, r3, #6, #10
 800e84c:	4803      	ldr	r0, [pc, #12]	; (800e85c <le_conn_param_neg_reply+0x58>)
 800e84e:	f7f7 ffe7 	bl	8006820 <log_0>
		return;
 800e852:	e7ec      	b.n	800e82e <le_conn_param_neg_reply+0x2a>
 800e854:	08022bc8 	.word	0x08022bc8
 800e858:	08022b90 	.word	0x08022b90
 800e85c:	08026a48 	.word	0x08026a48

0800e860 <le_conn_param_req>:
{
 800e860:	b530      	push	{r4, r5, lr}
 800e862:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
 800e864:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
 800e866:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
 800e868:	885a      	ldrh	r2, [r3, #2]
 800e86a:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
 800e86e:	889a      	ldrh	r2, [r3, #4]
 800e870:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
 800e874:	88da      	ldrh	r2, [r3, #6]
 800e876:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
 800e87a:	891b      	ldrh	r3, [r3, #8]
 800e87c:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
 800e880:	4620      	mov	r0, r4
 800e882:	f001 fdc1 	bl	8010408 <bt_conn_lookup_handle>
	if (!conn) {
 800e886:	b168      	cbz	r0, 800e8a4 <le_conn_param_req+0x44>
 800e888:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
 800e88a:	4669      	mov	r1, sp
 800e88c:	f001 fbd4 	bl	8010038 <le_param_req>
 800e890:	b9f8      	cbnz	r0, 800e8d2 <le_conn_param_req+0x72>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
 800e892:	211e      	movs	r1, #30
 800e894:	4620      	mov	r0, r4
 800e896:	f7ff ffb5 	bl	800e804 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
 800e89a:	4628      	mov	r0, r5
 800e89c:	f00e ff48 	bl	801d730 <bt_conn_unref>
}
 800e8a0:	b003      	add	sp, #12
 800e8a2:	bd30      	pop	{r4, r5, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
 800e8a4:	f04f 0200 	mov.w	r2, #0
 800e8a8:	2301      	movs	r3, #1
 800e8aa:	f363 0202 	bfi	r2, r3, #0, #3
 800e8ae:	f36f 02c5 	bfc	r2, #3, #3
 800e8b2:	4b0a      	ldr	r3, [pc, #40]	; (800e8dc <le_conn_param_req+0x7c>)
 800e8b4:	490a      	ldr	r1, [pc, #40]	; (800e8e0 <le_conn_param_req+0x80>)
 800e8b6:	1a5b      	subs	r3, r3, r1
 800e8b8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800e8bc:	f363 128f 	bfi	r2, r3, #6, #10
 800e8c0:	4621      	mov	r1, r4
 800e8c2:	4808      	ldr	r0, [pc, #32]	; (800e8e4 <le_conn_param_req+0x84>)
 800e8c4:	f7f7 fe3c 	bl	8006540 <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
 800e8c8:	2102      	movs	r1, #2
 800e8ca:	4620      	mov	r0, r4
 800e8cc:	f7ff ff9a 	bl	800e804 <le_conn_param_neg_reply>
		return;
 800e8d0:	e7e6      	b.n	800e8a0 <le_conn_param_req+0x40>
		le_conn_param_req_reply(handle, &param);
 800e8d2:	4669      	mov	r1, sp
 800e8d4:	4620      	mov	r0, r4
 800e8d6:	f00e fb7b 	bl	801cfd0 <le_conn_param_req_reply>
 800e8da:	e7de      	b.n	800e89a <le_conn_param_req+0x3a>
 800e8dc:	08022bc8 	.word	0x08022bc8
 800e8e0:	08022b90 	.word	0x08022b90
 800e8e4:	080264a8 	.word	0x080264a8

0800e8e8 <conn_auto_initiate>:
	if (conn->state != BT_CONN_CONNECTED) {
 800e8e8:	7b43      	ldrb	r3, [r0, #13]
 800e8ea:	2b07      	cmp	r3, #7
 800e8ec:	d000      	beq.n	800e8f0 <conn_auto_initiate+0x8>
 800e8ee:	4770      	bx	lr
{
 800e8f0:	b510      	push	{r4, lr}
 800e8f2:	b082      	sub	sp, #8
 800e8f4:	4604      	mov	r4, r0
 800e8f6:	f3bf 8f5b 	dmb	ish
 800e8fa:	6843      	ldr	r3, [r0, #4]
 800e8fc:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
 800e900:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800e904:	d10b      	bne.n	800e91e <conn_auto_initiate+0x36>
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
 800e906:	78c3      	ldrb	r3, [r0, #3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
 800e908:	b12b      	cbz	r3, 800e916 <conn_auto_initiate+0x2e>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
 800e90a:	4b21      	ldr	r3, [pc, #132]	; (800e990 <conn_auto_initiate+0xa8>)
 800e90c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
 800e910:	f013 0f08 	tst.w	r3, #8
 800e914:	d003      	beq.n	800e91e <conn_auto_initiate+0x36>
		err = hci_le_read_remote_features(conn);
 800e916:	4620      	mov	r0, r4
 800e918:	f00e fb7f 	bl	801d01a <hci_le_read_remote_features>
		if (!err) {
 800e91c:	b178      	cbz	r0, 800e93e <conn_auto_initiate+0x56>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
 800e91e:	4b1c      	ldr	r3, [pc, #112]	; (800e990 <conn_auto_initiate+0xa8>)
 800e920:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
 800e924:	f013 0f20 	tst.w	r3, #32
 800e928:	d006      	beq.n	800e938 <conn_auto_initiate+0x50>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
 800e92a:	4b19      	ldr	r3, [pc, #100]	; (800e990 <conn_auto_initiate+0xa8>)
 800e92c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800e930:	689b      	ldr	r3, [r3, #8]
 800e932:	f013 0f02 	tst.w	r3, #2
 800e936:	d104      	bne.n	800e942 <conn_auto_initiate+0x5a>
	    conn->role == BT_CONN_ROLE_SLAVE) {
 800e938:	78e3      	ldrb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
 800e93a:	2b01      	cmp	r3, #1
 800e93c:	d024      	beq.n	800e988 <conn_auto_initiate+0xa0>
}
 800e93e:	b002      	add	sp, #8
 800e940:	bd10      	pop	{r4, pc}
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
 800e942:	f10d 0106 	add.w	r1, sp, #6
 800e946:	a801      	add	r0, sp, #4
 800e948:	f7fe fd1a 	bl	800d380 <hci_le_read_max_data_len>
			if (!err) {
 800e94c:	2800      	cmp	r0, #0
 800e94e:	d1f3      	bne.n	800e938 <conn_auto_initiate+0x50>
				err = bt_le_set_data_len(conn,
 800e950:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e954:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800e958:	4620      	mov	r0, r4
 800e95a:	f00e faf9 	bl	801cf50 <bt_le_set_data_len>
				if (err) {
 800e95e:	4601      	mov	r1, r0
 800e960:	2800      	cmp	r0, #0
 800e962:	d0e9      	beq.n	800e938 <conn_auto_initiate+0x50>
					BT_ERR("Failed to set data len (%d)", err);
 800e964:	f04f 0200 	mov.w	r2, #0
 800e968:	2301      	movs	r3, #1
 800e96a:	f363 0202 	bfi	r2, r3, #0, #3
 800e96e:	f36f 02c5 	bfc	r2, #3, #3
 800e972:	4b08      	ldr	r3, [pc, #32]	; (800e994 <conn_auto_initiate+0xac>)
 800e974:	4808      	ldr	r0, [pc, #32]	; (800e998 <conn_auto_initiate+0xb0>)
 800e976:	1a1b      	subs	r3, r3, r0
 800e978:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800e97c:	f363 128f 	bfi	r2, r3, #6, #10
 800e980:	4806      	ldr	r0, [pc, #24]	; (800e99c <conn_auto_initiate+0xb4>)
 800e982:	f7f7 fddd 	bl	8006540 <log_1>
 800e986:	e7d7      	b.n	800e938 <conn_auto_initiate+0x50>
		slave_update_conn_param(conn);
 800e988:	4620      	mov	r0, r4
 800e98a:	f7fe f879 	bl	800ca80 <slave_update_conn_param>
 800e98e:	e7d6      	b.n	800e93e <conn_auto_initiate+0x56>
 800e990:	20000000 	.word	0x20000000
 800e994:	08022bc8 	.word	0x08022bc8
 800e998:	08022b90 	.word	0x08022b90
 800e99c:	08026a64 	.word	0x08026a64

0800e9a0 <le_remote_feat_complete>:
{
 800e9a0:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
 800e9a2:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
 800e9a4:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
 800e9a8:	4630      	mov	r0, r6
 800e9aa:	f001 fd2d 	bl	8010408 <bt_conn_lookup_handle>
	if (!conn) {
 800e9ae:	b1b0      	cbz	r0, 800e9de <le_remote_feat_complete+0x3e>
 800e9b0:	4604      	mov	r4, r0
	if (!evt->status) {
 800e9b2:	782b      	ldrb	r3, [r5, #0]
 800e9b4:	b333      	cbz	r3, 800ea04 <le_remote_feat_complete+0x64>
	atomic_set_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH);
 800e9b6:	1d23      	adds	r3, r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800e9b8:	f3bf 8f5b 	dmb	ish
 800e9bc:	e853 2f00 	ldrex	r2, [r3]
 800e9c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e9c4:	e843 2100 	strex	r1, r2, [r3]
 800e9c8:	2900      	cmp	r1, #0
 800e9ca:	d1f7      	bne.n	800e9bc <le_remote_feat_complete+0x1c>
 800e9cc:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
 800e9d0:	4620      	mov	r0, r4
 800e9d2:	f7ff ff89 	bl	800e8e8 <conn_auto_initiate>
	bt_conn_unref(conn);
 800e9d6:	4620      	mov	r0, r4
 800e9d8:	f00e feaa 	bl	801d730 <bt_conn_unref>
}
 800e9dc:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
 800e9de:	f04f 0200 	mov.w	r2, #0
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	f363 0202 	bfi	r2, r3, #0, #3
 800e9e8:	f36f 02c5 	bfc	r2, #3, #3
 800e9ec:	4b08      	ldr	r3, [pc, #32]	; (800ea10 <le_remote_feat_complete+0x70>)
 800e9ee:	4909      	ldr	r1, [pc, #36]	; (800ea14 <le_remote_feat_complete+0x74>)
 800e9f0:	1a5b      	subs	r3, r3, r1
 800e9f2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800e9f6:	f363 128f 	bfi	r2, r3, #6, #10
 800e9fa:	4631      	mov	r1, r6
 800e9fc:	4806      	ldr	r0, [pc, #24]	; (800ea18 <le_remote_feat_complete+0x78>)
 800e9fe:	f7f7 fd9f 	bl	8006540 <log_1>
		return;
 800ea02:	e7eb      	b.n	800e9dc <le_remote_feat_complete+0x3c>
		memcpy(conn->le.features, evt->features,
 800ea04:	2208      	movs	r2, #8
 800ea06:	1ce9      	adds	r1, r5, #3
 800ea08:	30ac      	adds	r0, #172	; 0xac
 800ea0a:	f00d ff50 	bl	801c8ae <memcpy>
 800ea0e:	e7d2      	b.n	800e9b6 <le_remote_feat_complete+0x16>
 800ea10:	08022bc8 	.word	0x08022bc8
 800ea14:	08022b90 	.word	0x08022b90
 800ea18:	080264a8 	.word	0x080264a8

0800ea1c <report_completed_packet>:
{
 800ea1c:	b570      	push	{r4, r5, r6, lr}
 800ea1e:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
 800ea20:	8ac5      	ldrh	r5, [r0, #22]
 *
 * @param buf Buffer to destroy.
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 800ea22:	7980      	ldrb	r0, [r0, #6]
 800ea24:	f008 f89e 	bl	8016b64 <net_buf_pool_get>

	k_lifo_put(&pool->free, buf);
 800ea28:	4621      	mov	r1, r4
 800ea2a:	f013 fa4a 	bl	8021ec2 <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
 800ea2e:	4b38      	ldr	r3, [pc, #224]	; (800eb10 <report_completed_packet+0xf4>)
 800ea30:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ea34:	f013 0f20 	tst.w	r3, #32
 800ea38:	d100      	bne.n	800ea3c <report_completed_packet+0x20>
}
 800ea3a:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_lookup_index(acl(buf)->index);
 800ea3c:	7d60      	ldrb	r0, [r4, #21]
 800ea3e:	f002 fa33 	bl	8010ea8 <bt_conn_lookup_index>
	if (!conn) {
 800ea42:	4606      	mov	r6, r0
 800ea44:	b350      	cbz	r0, 800ea9c <report_completed_packet+0x80>
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
 800ea46:	7b43      	ldrb	r3, [r0, #13]
 800ea48:	2b01      	cmp	r3, #1
 800ea4a:	d005      	beq.n	800ea58 <report_completed_packet+0x3c>
 800ea4c:	b25a      	sxtb	r2, r3
 800ea4e:	b3c2      	cbz	r2, 800eac2 <report_completed_packet+0xa6>
 800ea50:	3b07      	subs	r3, #7
 800ea52:	b2db      	uxtb	r3, r3
 800ea54:	2b01      	cmp	r3, #1
 800ea56:	d834      	bhi.n	800eac2 <report_completed_packet+0xa6>
	bt_conn_unref(conn);
 800ea58:	4630      	mov	r0, r6
 800ea5a:	f00e fe69 	bl	801d730 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
 800ea5e:	2105      	movs	r1, #5
 800ea60:	f640 4035 	movw	r0, #3125	; 0xc35
 800ea64:	f7fe fb22 	bl	800d0ac <bt_hci_cmd_create>
	if (!buf) {
 800ea68:	4604      	mov	r4, r0
 800ea6a:	2800      	cmp	r0, #0
 800ea6c:	d03e      	beq.n	800eaec <report_completed_packet+0xd0>
	cp = net_buf_add(buf, sizeof(*cp));
 800ea6e:	f100 0608 	add.w	r6, r0, #8
 800ea72:	2101      	movs	r1, #1
 800ea74:	4630      	mov	r0, r6
 800ea76:	f011 fd01 	bl	802047c <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	7003      	strb	r3, [r0, #0]
	hc = net_buf_add(buf, sizeof(*hc));
 800ea7e:	2104      	movs	r1, #4
 800ea80:	4630      	mov	r0, r6
 800ea82:	f011 fcfb 	bl	802047c <net_buf_simple_add>
	hc->handle = sys_cpu_to_le16(handle);
 800ea86:	8005      	strh	r5, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
 800ea88:	2301      	movs	r3, #1
 800ea8a:	7083      	strb	r3, [r0, #2]
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
 800ea90:	4621      	mov	r1, r4
 800ea92:	f640 4035 	movw	r0, #3125	; 0xc35
 800ea96:	f7ff fde1 	bl	800e65c <bt_hci_cmd_send>
 800ea9a:	e7ce      	b.n	800ea3a <report_completed_packet+0x1e>
		BT_WARN("Unable to look up conn with index 0x%02x",
 800ea9c:	f04f 0200 	mov.w	r2, #0
 800eaa0:	2302      	movs	r3, #2
 800eaa2:	f363 0202 	bfi	r2, r3, #0, #3
 800eaa6:	f36f 02c5 	bfc	r2, #3, #3
 800eaaa:	4b1a      	ldr	r3, [pc, #104]	; (800eb14 <report_completed_packet+0xf8>)
 800eaac:	491a      	ldr	r1, [pc, #104]	; (800eb18 <report_completed_packet+0xfc>)
 800eaae:	1a5b      	subs	r3, r3, r1
 800eab0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800eab4:	f363 128f 	bfi	r2, r3, #6, #10
 800eab8:	7d61      	ldrb	r1, [r4, #21]
 800eaba:	4818      	ldr	r0, [pc, #96]	; (800eb1c <report_completed_packet+0x100>)
 800eabc:	f7f7 fd40 	bl	8006540 <log_1>
		return;
 800eac0:	e7bb      	b.n	800ea3a <report_completed_packet+0x1e>
		BT_WARN("Not reporting packet for non-connected conn");
 800eac2:	f04f 0100 	mov.w	r1, #0
 800eac6:	2302      	movs	r3, #2
 800eac8:	f363 0102 	bfi	r1, r3, #0, #3
 800eacc:	f36f 01c5 	bfc	r1, #3, #3
 800ead0:	4b10      	ldr	r3, [pc, #64]	; (800eb14 <report_completed_packet+0xf8>)
 800ead2:	4a11      	ldr	r2, [pc, #68]	; (800eb18 <report_completed_packet+0xfc>)
 800ead4:	1a9b      	subs	r3, r3, r2
 800ead6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800eada:	f363 118f 	bfi	r1, r3, #6, #10
 800eade:	4810      	ldr	r0, [pc, #64]	; (800eb20 <report_completed_packet+0x104>)
 800eae0:	f7f7 fe9e 	bl	8006820 <log_0>
		bt_conn_unref(conn);
 800eae4:	4630      	mov	r0, r6
 800eae6:	f00e fe23 	bl	801d730 <bt_conn_unref>
		return;
 800eaea:	e7a6      	b.n	800ea3a <report_completed_packet+0x1e>
		BT_ERR("Unable to allocate new HCI command");
 800eaec:	f04f 0100 	mov.w	r1, #0
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	f363 0102 	bfi	r1, r3, #0, #3
 800eaf6:	f36f 01c5 	bfc	r1, #3, #3
 800eafa:	4b06      	ldr	r3, [pc, #24]	; (800eb14 <report_completed_packet+0xf8>)
 800eafc:	4a06      	ldr	r2, [pc, #24]	; (800eb18 <report_completed_packet+0xfc>)
 800eafe:	1a9b      	subs	r3, r3, r2
 800eb00:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800eb04:	f363 118f 	bfi	r1, r3, #6, #10
 800eb08:	4806      	ldr	r0, [pc, #24]	; (800eb24 <report_completed_packet+0x108>)
 800eb0a:	f7f7 fe89 	bl	8006820 <log_0>
		return;
 800eb0e:	e794      	b.n	800ea3a <report_completed_packet+0x1e>
 800eb10:	20000000 	.word	0x20000000
 800eb14:	08022bc8 	.word	0x08022bc8
 800eb18:	08022b90 	.word	0x08022b90
 800eb1c:	08026a80 	.word	0x08026a80
 800eb20:	08026aac 	.word	0x08026aac
 800eb24:	08026ad8 	.word	0x08026ad8

0800eb28 <send_cmd>:
{
 800eb28:	b538      	push	{r3, r4, r5, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	4838      	ldr	r0, [pc, #224]	; (800ec10 <send_cmd+0xe8>)
 800eb30:	f011 fc28 	bl	8020384 <net_buf_get>
	BT_ASSERT(buf);
 800eb34:	4604      	mov	r4, r0
 800eb36:	b378      	cbz	r0, 800eb98 <send_cmd+0x70>
 800eb38:	4d36      	ldr	r5, [pc, #216]	; (800ec14 <send_cmd+0xec>)
 800eb3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eb3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eb42:	f105 00e8 	add.w	r0, r5, #232	; 0xe8
 800eb46:	f00a f8a7 	bl	8018c98 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
 800eb4a:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 800eb4e:	b1bb      	cbz	r3, 800eb80 <send_cmd+0x58>
		BT_ERR("Uncleared pending sent_cmd");
 800eb50:	f04f 0100 	mov.w	r1, #0
 800eb54:	2301      	movs	r3, #1
 800eb56:	f363 0102 	bfi	r1, r3, #0, #3
 800eb5a:	f36f 01c5 	bfc	r1, #3, #3
 800eb5e:	4b2e      	ldr	r3, [pc, #184]	; (800ec18 <send_cmd+0xf0>)
 800eb60:	4a2e      	ldr	r2, [pc, #184]	; (800ec1c <send_cmd+0xf4>)
 800eb62:	1a9b      	subs	r3, r3, r2
 800eb64:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800eb68:	f363 118f 	bfi	r1, r3, #6, #10
 800eb6c:	482c      	ldr	r0, [pc, #176]	; (800ec20 <send_cmd+0xf8>)
 800eb6e:	f7f7 fe57 	bl	8006820 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
 800eb72:	f8d5 0100 	ldr.w	r0, [r5, #256]	; 0x100
 800eb76:	f011 fc37 	bl	80203e8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
	bt_dev.sent_cmd = net_buf_ref(buf);
 800eb80:	4620      	mov	r0, r4
 800eb82:	f011 fc57 	bl	8020434 <net_buf_ref>
 800eb86:	4b23      	ldr	r3, [pc, #140]	; (800ec14 <send_cmd+0xec>)
 800eb88:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	err = bt_send(buf);
 800eb8c:	4620      	mov	r0, r4
 800eb8e:	f7ff fd5b 	bl	800e648 <bt_send>
	if (err) {
 800eb92:	4601      	mov	r1, r0
 800eb94:	b970      	cbnz	r0, 800ebb4 <send_cmd+0x8c>
}
 800eb96:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
 800eb98:	f241 430b 	movw	r3, #5131	; 0x140b
 800eb9c:	4a21      	ldr	r2, [pc, #132]	; (800ec24 <send_cmd+0xfc>)
 800eb9e:	4922      	ldr	r1, [pc, #136]	; (800ec28 <send_cmd+0x100>)
 800eba0:	4822      	ldr	r0, [pc, #136]	; (800ec2c <send_cmd+0x104>)
 800eba2:	f00b fa37 	bl	801a014 <printk>
 800eba6:	4040      	eors	r0, r0
 800eba8:	f380 8811 	msr	BASEPRI, r0
 800ebac:	f04f 0003 	mov.w	r0, #3
 800ebb0:	df02      	svc	2
 800ebb2:	e7c1      	b.n	800eb38 <send_cmd+0x10>
		BT_ERR("Unable to send to driver (err %d)", err);
 800ebb4:	f04f 0200 	mov.w	r2, #0
 800ebb8:	2301      	movs	r3, #1
 800ebba:	f363 0202 	bfi	r2, r3, #0, #3
 800ebbe:	f36f 02c5 	bfc	r2, #3, #3
 800ebc2:	4b15      	ldr	r3, [pc, #84]	; (800ec18 <send_cmd+0xf0>)
 800ebc4:	4815      	ldr	r0, [pc, #84]	; (800ec1c <send_cmd+0xf4>)
 800ebc6:	1a1b      	subs	r3, r3, r0
 800ebc8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800ebcc:	f363 128f 	bfi	r2, r3, #6, #10
 800ebd0:	4817      	ldr	r0, [pc, #92]	; (800ec30 <send_cmd+0x108>)
 800ebd2:	f7f7 fcb5 	bl	8006540 <log_1>
	z_impl_k_sem_give(sem);
 800ebd6:	4d0f      	ldr	r5, [pc, #60]	; (800ec14 <send_cmd+0xec>)
 800ebd8:	f105 00e8 	add.w	r0, r5, #232	; 0xe8
 800ebdc:	f00a f834 	bl	8018c48 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
 800ebe0:	4620      	mov	r0, r4
 800ebe2:	f007 ffc7 	bl	8016b74 <net_buf_id>
 800ebe6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800ebea:	4b12      	ldr	r3, [pc, #72]	; (800ec34 <send_cmd+0x10c>)
 800ebec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ebf0:	4622      	mov	r2, r4
 800ebf2:	211f      	movs	r1, #31
 800ebf4:	8840      	ldrh	r0, [r0, #2]
 800ebf6:	f7fd fdc1 	bl	800c77c <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
 800ebfa:	f8d5 0100 	ldr.w	r0, [r5, #256]	; 0x100
 800ebfe:	f011 fbf3 	bl	80203e8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
 800ec02:	2300      	movs	r3, #0
 800ec04:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
		net_buf_unref(buf);
 800ec08:	4620      	mov	r0, r4
 800ec0a:	f011 fbed 	bl	80203e8 <net_buf_unref>
 800ec0e:	e7c2      	b.n	800eb96 <send_cmd+0x6e>
 800ec10:	20000104 	.word	0x20000104
 800ec14:	20000000 	.word	0x20000000
 800ec18:	08022bc8 	.word	0x08022bc8
 800ec1c:	08022b90 	.word	0x08022b90
 800ec20:	08026afc 	.word	0x08026afc
 800ec24:	08026580 	.word	0x08026580
 800ec28:	08027dc0 	.word	0x08027dc0
 800ec2c:	080265d0 	.word	0x080265d0
 800ec30:	08026a0c 	.word	0x08026a0c
 800ec34:	2000410c 	.word	0x2000410c

0800ec38 <process_events>:
{
 800ec38:	b570      	push	{r4, r5, r6, lr}
 800ec3a:	4604      	mov	r4, r0
 800ec3c:	460d      	mov	r5, r1
	BT_DBG("count %d", count);
 800ec3e:	e014      	b.n	800ec6a <process_events+0x32>
				send_cmd();
 800ec40:	f7ff ff72 	bl	800eb28 <send_cmd>
 800ec44:	e00f      	b.n	800ec66 <process_events+0x2e>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
 800ec46:	2302      	movs	r3, #2
 800ec48:	f363 0602 	bfi	r6, r3, #0, #3
 800ec4c:	f36f 06c5 	bfc	r6, #3, #3
 800ec50:	4b0f      	ldr	r3, [pc, #60]	; (800ec90 <process_events+0x58>)
 800ec52:	4a10      	ldr	r2, [pc, #64]	; (800ec94 <process_events+0x5c>)
 800ec54:	1a9b      	subs	r3, r3, r2
 800ec56:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800ec5a:	f363 168f 	bfi	r6, r3, #6, #10
 800ec5e:	4632      	mov	r2, r6
 800ec60:	480d      	ldr	r0, [pc, #52]	; (800ec98 <process_events+0x60>)
 800ec62:	f7f7 fc6d 	bl	8006540 <log_1>
	for (; count; ev++, count--) {
 800ec66:	3414      	adds	r4, #20
 800ec68:	3d01      	subs	r5, #1
 800ec6a:	b185      	cbz	r5, 800ec8e <process_events+0x56>
		switch (ev->state) {
 800ec6c:	68e1      	ldr	r1, [r4, #12]
 800ec6e:	f3c1 3104 	ubfx	r1, r1, #12, #5
 800ec72:	2901      	cmp	r1, #1
 800ec74:	d9f7      	bls.n	800ec66 <process_events+0x2e>
 800ec76:	2904      	cmp	r1, #4
 800ec78:	d1e5      	bne.n	800ec46 <process_events+0xe>
			if (ev->tag == BT_EVENT_CMD_TX) {
 800ec7a:	7b23      	ldrb	r3, [r4, #12]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d0df      	beq.n	800ec40 <process_events+0x8>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
 800ec80:	2b01      	cmp	r3, #1
 800ec82:	d1f0      	bne.n	800ec66 <process_events+0x2e>
					conn = CONTAINER_OF(ev->fifo,
 800ec84:	6920      	ldr	r0, [r4, #16]
					bt_conn_process_tx(conn);
 800ec86:	3834      	subs	r0, #52	; 0x34
 800ec88:	f002 f89c 	bl	8010dc4 <bt_conn_process_tx>
 800ec8c:	e7eb      	b.n	800ec66 <process_events+0x2e>
}
 800ec8e:	bd70      	pop	{r4, r5, r6, pc}
 800ec90:	08022bc8 	.word	0x08022bc8
 800ec94:	08022b90 	.word	0x08022b90
 800ec98:	08026b18 	.word	0x08026b18

0800ec9c <hci_tx_thread>:
{
 800ec9c:	b538      	push	{r3, r4, r5, lr}
 800ec9e:	e005      	b.n	800ecac <hci_tx_thread+0x10>
		process_events(events, ev_count);
 800eca0:	4621      	mov	r1, r4
 800eca2:	4813      	ldr	r0, [pc, #76]	; (800ecf0 <hci_tx_thread+0x54>)
 800eca4:	f7ff ffc8 	bl	800ec38 <process_events>
	z_impl_k_yield();
 800eca8:	f009 ff1c 	bl	8018ae4 <z_impl_k_yield>
		events[0].state = K_POLL_STATE_NOT_READY;
 800ecac:	4d10      	ldr	r5, [pc, #64]	; (800ecf0 <hci_tx_thread+0x54>)
 800ecae:	68eb      	ldr	r3, [r5, #12]
 800ecb0:	f36f 3310 	bfc	r3, #12, #5
 800ecb4:	60eb      	str	r3, [r5, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
 800ecb6:	f105 0014 	add.w	r0, r5, #20
 800ecba:	f001 fb81 	bl	80103c0 <bt_conn_prepare_events>
 800ecbe:	1c44      	adds	r4, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
 800ecc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ecc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ecc8:	4621      	mov	r1, r4
 800ecca:	4628      	mov	r0, r5
 800eccc:	f00a fb16 	bl	80192fc <z_impl_k_poll>
		BT_ASSERT(err == 0);
 800ecd0:	2800      	cmp	r0, #0
 800ecd2:	d0e5      	beq.n	800eca0 <hci_tx_thread+0x4>
 800ecd4:	f241 436e 	movw	r3, #5230	; 0x146e
 800ecd8:	4a06      	ldr	r2, [pc, #24]	; (800ecf4 <hci_tx_thread+0x58>)
 800ecda:	4907      	ldr	r1, [pc, #28]	; (800ecf8 <hci_tx_thread+0x5c>)
 800ecdc:	4807      	ldr	r0, [pc, #28]	; (800ecfc <hci_tx_thread+0x60>)
 800ecde:	f00b f999 	bl	801a014 <printk>
 800ece2:	4040      	eors	r0, r0
 800ece4:	f380 8811 	msr	BASEPRI, r0
 800ece8:	f04f 0003 	mov.w	r0, #3
 800ecec:	df02      	svc	2
 800ecee:	e7d7      	b.n	800eca0 <hci_tx_thread+0x4>
 800ecf0:	20000b18 	.word	0x20000b18
 800ecf4:	08026580 	.word	0x08026580
 800ecf8:	08026774 	.word	0x08026774
 800ecfc:	080265d0 	.word	0x080265d0

0800ed00 <hci_event_prio>:
{
 800ed00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed04:	b084      	sub	sp, #16
 800ed06:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
 800ed08:	f100 0508 	add.w	r5, r0, #8
	state->offset = net_buf_simple_headroom(buf);
 800ed0c:	4628      	mov	r0, r5
 800ed0e:	f011 fbfe 	bl	802050e <net_buf_simple_headroom>
 800ed12:	f8ad 000c 	strh.w	r0, [sp, #12]
	state->len = buf->len;
 800ed16:	89a3      	ldrh	r3, [r4, #12]
 800ed18:	f8ad 300e 	strh.w	r3, [sp, #14]
	BT_ASSERT(buf->len >= sizeof(*hdr));
 800ed1c:	2b01      	cmp	r3, #1
 800ed1e:	d915      	bls.n	800ed4c <hci_event_prio+0x4c>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
 800ed20:	2102      	movs	r1, #2
 800ed22:	4628      	mov	r0, r5
 800ed24:	f011 fbdb 	bl	80204de <net_buf_simple_pull_mem>
 800ed28:	4605      	mov	r5, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
 800ed2a:	7803      	ldrb	r3, [r0, #0]
	switch (evt) {
 800ed2c:	3b05      	subs	r3, #5
 800ed2e:	2b15      	cmp	r3, #21
 800ed30:	d81c      	bhi.n	800ed6c <hci_event_prio+0x6c>
 800ed32:	e8df f003 	tbb	[pc, r3]
 800ed36:	1b19      	.short	0x1b19
 800ed38:	1b1b1b1b 	.word	0x1b1b1b1b
 800ed3c:	3f1b1b1b 	.word	0x3f1b1b1b
 800ed40:	1b1b1b3f 	.word	0x1b1b1b3f
 800ed44:	1b1b1b3f 	.word	0x1b1b1b3f
 800ed48:	3f1b1b1b 	.word	0x3f1b1b1b
	BT_ASSERT(buf->len >= sizeof(*hdr));
 800ed4c:	f641 03c4 	movw	r3, #6340	; 0x18c4
 800ed50:	4a3c      	ldr	r2, [pc, #240]	; (800ee44 <hci_event_prio+0x144>)
 800ed52:	493d      	ldr	r1, [pc, #244]	; (800ee48 <hci_event_prio+0x148>)
 800ed54:	483d      	ldr	r0, [pc, #244]	; (800ee4c <hci_event_prio+0x14c>)
 800ed56:	f00b f95d 	bl	801a014 <printk>
 800ed5a:	4040      	eors	r0, r0
 800ed5c:	f380 8811 	msr	BASEPRI, r0
 800ed60:	f04f 0003 	mov.w	r0, #3
 800ed64:	df02      	svc	2
 800ed66:	e7db      	b.n	800ed20 <hci_event_prio+0x20>
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
 800ed68:	2603      	movs	r6, #3
 800ed6a:	e000      	b.n	800ed6e <hci_event_prio+0x6e>
		return BT_HCI_EVT_FLAG_RECV;
 800ed6c:	2602      	movs	r6, #2
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
 800ed6e:	f016 0f01 	tst.w	r6, #1
 800ed72:	d021      	beq.n	800edb8 <hci_event_prio+0xb8>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
 800ed74:	782d      	ldrb	r5, [r5, #0]
	for (i = 0; i < num_handlers; i++) {
 800ed76:	2300      	movs	r3, #0
 800ed78:	2b04      	cmp	r3, #4
 800ed7a:	d840      	bhi.n	800edfe <hci_event_prio+0xfe>
		const struct event_handler *handler = &handlers[i];
 800ed7c:	4a34      	ldr	r2, [pc, #208]	; (800ee50 <hci_event_prio+0x150>)
 800ed7e:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
		if (handler->event != event) {
 800ed82:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800ed86:	4295      	cmp	r5, r2
 800ed88:	d124      	bne.n	800edd4 <hci_event_prio+0xd4>
		if (buf->len < handler->min_len) {
 800ed8a:	89a1      	ldrh	r1, [r4, #12]
 800ed8c:	7843      	ldrb	r3, [r0, #1]
 800ed8e:	4299      	cmp	r1, r3
 800ed90:	d322      	bcc.n	800edd8 <hci_event_prio+0xd8>
		handler->handler(buf);
 800ed92:	6843      	ldr	r3, [r0, #4]
 800ed94:	4620      	mov	r0, r4
 800ed96:	4798      	blx	r3
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
 800ed98:	f016 0f02 	tst.w	r6, #2
 800ed9c:	d04e      	beq.n	800ee3c <hci_event_prio+0x13c>
	buf->data = buf->__buf + state->offset;
 800ed9e:	6923      	ldr	r3, [r4, #16]
 800eda0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800eda4:	4413      	add	r3, r2
 800eda6:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
 800eda8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800edac:	81a3      	strh	r3, [r4, #12]
}
 800edae:	b004      	add	sp, #16
 800edb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_EVT_FLAG_RECV_PRIO;
 800edb4:	2601      	movs	r6, #1
 800edb6:	e7da      	b.n	800ed6e <hci_event_prio+0x6e>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
 800edb8:	f641 03c8 	movw	r3, #6344	; 0x18c8
 800edbc:	4a21      	ldr	r2, [pc, #132]	; (800ee44 <hci_event_prio+0x144>)
 800edbe:	4925      	ldr	r1, [pc, #148]	; (800ee54 <hci_event_prio+0x154>)
 800edc0:	4822      	ldr	r0, [pc, #136]	; (800ee4c <hci_event_prio+0x14c>)
 800edc2:	f00b f927 	bl	801a014 <printk>
 800edc6:	4040      	eors	r0, r0
 800edc8:	f380 8811 	msr	BASEPRI, r0
 800edcc:	f04f 0003 	mov.w	r0, #3
 800edd0:	df02      	svc	2
 800edd2:	e7cf      	b.n	800ed74 <hci_event_prio+0x74>
	for (i = 0; i < num_handlers; i++) {
 800edd4:	3301      	adds	r3, #1
 800edd6:	e7cf      	b.n	800ed78 <hci_event_prio+0x78>
			BT_ERR("Too small (%u bytes) event 0x%02x",
 800edd8:	f04f 0300 	mov.w	r3, #0
 800eddc:	2201      	movs	r2, #1
 800edde:	f362 0302 	bfi	r3, r2, #0, #3
 800ede2:	f36f 03c5 	bfc	r3, #3, #3
 800ede6:	4a1c      	ldr	r2, [pc, #112]	; (800ee58 <hci_event_prio+0x158>)
 800ede8:	481c      	ldr	r0, [pc, #112]	; (800ee5c <hci_event_prio+0x15c>)
 800edea:	1a12      	subs	r2, r2, r0
 800edec:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 800edf0:	f362 138f 	bfi	r3, r2, #6, #10
 800edf4:	462a      	mov	r2, r5
 800edf6:	481a      	ldr	r0, [pc, #104]	; (800ee60 <hci_event_prio+0x160>)
 800edf8:	f7f7 fc22 	bl	8006640 <log_2>
			return;
 800edfc:	e7cc      	b.n	800ed98 <hci_event_prio+0x98>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
 800edfe:	f04f 0700 	mov.w	r7, #0
 800ee02:	2302      	movs	r3, #2
 800ee04:	f363 0702 	bfi	r7, r3, #0, #3
 800ee08:	f36f 07c5 	bfc	r7, #3, #3
 800ee0c:	4b12      	ldr	r3, [pc, #72]	; (800ee58 <hci_event_prio+0x158>)
 800ee0e:	4a13      	ldr	r2, [pc, #76]	; (800ee5c <hci_event_prio+0x15c>)
 800ee10:	1a9b      	subs	r3, r3, r2
 800ee12:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800ee16:	f363 178f 	bfi	r7, r3, #6, #10
 800ee1a:	f8b4 800c 	ldrh.w	r8, [r4, #12]
 800ee1e:	4641      	mov	r1, r8
 800ee20:	68a0      	ldr	r0, [r4, #8]
 800ee22:	f7fc fe69 	bl	800baf8 <bt_hex_real>
 800ee26:	f7f7 f9bb 	bl	80061a0 <log_strdup>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	f8ad 7000 	strh.w	r7, [sp]
 800ee30:	4642      	mov	r2, r8
 800ee32:	4629      	mov	r1, r5
 800ee34:	480b      	ldr	r0, [pc, #44]	; (800ee64 <hci_event_prio+0x164>)
 800ee36:	f7f7 fab7 	bl	80063a8 <log_3>
 800ee3a:	e7ad      	b.n	800ed98 <hci_event_prio+0x98>
		net_buf_unref(buf);
 800ee3c:	4620      	mov	r0, r4
 800ee3e:	f011 fad3 	bl	80203e8 <net_buf_unref>
}
 800ee42:	e7b4      	b.n	800edae <hci_event_prio+0xae>
 800ee44:	08026580 	.word	0x08026580
 800ee48:	080265b4 	.word	0x080265b4
 800ee4c:	080265d0 	.word	0x080265d0
 800ee50:	08026dbc 	.word	0x08026dbc
 800ee54:	08026b3c 	.word	0x08026b3c
 800ee58:	08022bc8 	.word	0x08022bc8
 800ee5c:	08022b90 	.word	0x08022b90
 800ee60:	080266fc 	.word	0x080266fc
 800ee64:	08026720 	.word	0x08026720

0800ee68 <bt_recv>:
{
 800ee68:	b510      	push	{r4, lr}
 800ee6a:	4604      	mov	r4, r0
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
 800ee6c:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
 800ee6e:	2901      	cmp	r1, #1
 800ee70:	d005      	beq.n	800ee7e <bt_recv+0x16>
 800ee72:	2903      	cmp	r1, #3
 800ee74:	d107      	bne.n	800ee86 <bt_recv+0x1e>
		hci_acl(buf);
 800ee76:	f7fd fd63 	bl	800c940 <hci_acl>
		return 0;
 800ee7a:	2000      	movs	r0, #0
}
 800ee7c:	bd10      	pop	{r4, pc}
		hci_event(buf);
 800ee7e:	f7fe f877 	bl	800cf70 <hci_event>
		return 0;
 800ee82:	2000      	movs	r0, #0
 800ee84:	e7fa      	b.n	800ee7c <bt_recv+0x14>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
 800ee86:	f04f 0200 	mov.w	r2, #0
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	f363 0202 	bfi	r2, r3, #0, #3
 800ee90:	f36f 02c5 	bfc	r2, #3, #3
 800ee94:	4b07      	ldr	r3, [pc, #28]	; (800eeb4 <bt_recv+0x4c>)
 800ee96:	4808      	ldr	r0, [pc, #32]	; (800eeb8 <bt_recv+0x50>)
 800ee98:	1a1b      	subs	r3, r3, r0
 800ee9a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800ee9e:	f363 128f 	bfi	r2, r3, #6, #10
 800eea2:	4806      	ldr	r0, [pc, #24]	; (800eebc <bt_recv+0x54>)
 800eea4:	f7f7 fb4c 	bl	8006540 <log_1>
		net_buf_unref(buf);
 800eea8:	4620      	mov	r0, r4
 800eeaa:	f011 fa9d 	bl	80203e8 <net_buf_unref>
		return -EINVAL;
 800eeae:	f06f 0015 	mvn.w	r0, #21
 800eeb2:	e7e3      	b.n	800ee7c <bt_recv+0x14>
 800eeb4:	08022bc8 	.word	0x08022bc8
 800eeb8:	08022b90 	.word	0x08022b90
 800eebc:	08026b58 	.word	0x08026b58

0800eec0 <bt_recv_prio>:
{
 800eec0:	b510      	push	{r4, lr}
 800eec2:	4604      	mov	r4, r0
 800eec4:	7d03      	ldrb	r3, [r0, #20]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
 800eec6:	2b01      	cmp	r3, #1
 800eec8:	d104      	bne.n	800eed4 <bt_recv_prio+0x14>
	hci_event_prio(buf);
 800eeca:	4620      	mov	r0, r4
 800eecc:	f7ff ff18 	bl	800ed00 <hci_event_prio>
}
 800eed0:	2000      	movs	r0, #0
 800eed2:	bd10      	pop	{r4, pc}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
 800eed4:	f641 130b 	movw	r3, #6411	; 0x190b
 800eed8:	4a05      	ldr	r2, [pc, #20]	; (800eef0 <bt_recv_prio+0x30>)
 800eeda:	4906      	ldr	r1, [pc, #24]	; (800eef4 <bt_recv_prio+0x34>)
 800eedc:	4806      	ldr	r0, [pc, #24]	; (800eef8 <bt_recv_prio+0x38>)
 800eede:	f00b f899 	bl	801a014 <printk>
 800eee2:	4040      	eors	r0, r0
 800eee4:	f380 8811 	msr	BASEPRI, r0
 800eee8:	f04f 0003 	mov.w	r0, #3
 800eeec:	df02      	svc	2
 800eeee:	e7ec      	b.n	800eeca <bt_recv_prio+0xa>
 800eef0:	08026580 	.word	0x08026580
 800eef4:	08026b6c 	.word	0x08026b6c
 800eef8:	080265d0 	.word	0x080265d0

0800eefc <bt_hci_driver_register>:
	if (bt_dev.drv) {
 800eefc:	4b0a      	ldr	r3, [pc, #40]	; (800ef28 <bt_hci_driver_register+0x2c>)
 800eefe:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800ef02:	b943      	cbnz	r3, 800ef16 <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
 800ef04:	68c3      	ldr	r3, [r0, #12]
 800ef06:	b14b      	cbz	r3, 800ef1c <bt_hci_driver_register+0x20>
 800ef08:	6903      	ldr	r3, [r0, #16]
 800ef0a:	b153      	cbz	r3, 800ef22 <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
 800ef0c:	4b06      	ldr	r3, [pc, #24]	; (800ef28 <bt_hci_driver_register+0x2c>)
 800ef0e:	f8c3 011c 	str.w	r0, [r3, #284]	; 0x11c
	return 0;
 800ef12:	2000      	movs	r0, #0
 800ef14:	4770      	bx	lr
		return -EALREADY;
 800ef16:	f06f 0044 	mvn.w	r0, #68	; 0x44
 800ef1a:	4770      	bx	lr
		return -EINVAL;
 800ef1c:	f06f 0015 	mvn.w	r0, #21
 800ef20:	4770      	bx	lr
 800ef22:	f06f 0015 	mvn.w	r0, #21
}
 800ef26:	4770      	bx	lr
 800ef28:	20000000 	.word	0x20000000

0800ef2c <bt_finalize_init>:
{
 800ef2c:	b508      	push	{r3, lr}
 800ef2e:	4b09      	ldr	r3, [pc, #36]	; (800ef54 <bt_finalize_init+0x28>)
 800ef30:	f3bf 8f5b 	dmb	ish
 800ef34:	e853 2f00 	ldrex	r2, [r3]
 800ef38:	f042 0202 	orr.w	r2, r2, #2
 800ef3c:	e843 2100 	strex	r1, r2, [r3]
 800ef40:	2900      	cmp	r1, #0
 800ef42:	d1f7      	bne.n	800ef34 <bt_finalize_init+0x8>
 800ef44:	f3bf 8f5b 	dmb	ish
		bt_le_scan_update(false);
 800ef48:	2000      	movs	r0, #0
 800ef4a:	f7ff f943 	bl	800e1d4 <bt_le_scan_update>
	bt_dev_show_info();
 800ef4e:	f7fd fe11 	bl	800cb74 <bt_dev_show_info>
}
 800ef52:	bd08      	pop	{r3, pc}
 800ef54:	20000094 	.word	0x20000094

0800ef58 <bt_init>:
{
 800ef58:	b510      	push	{r4, lr}
	err = hci_init();
 800ef5a:	f7fe fbb5 	bl	800d6c8 <hci_init>
	if (err) {
 800ef5e:	4604      	mov	r4, r0
 800ef60:	b9a8      	cbnz	r0, 800ef8e <bt_init+0x36>
		err = bt_conn_init();
 800ef62:	f001 ffbf 	bl	8010ee4 <bt_conn_init>
		if (err) {
 800ef66:	4604      	mov	r4, r0
 800ef68:	b988      	cbnz	r0, 800ef8e <bt_init+0x36>
		if (!bt_dev.id_count) {
 800ef6a:	4b13      	ldr	r3, [pc, #76]	; (800efb8 <bt_init+0x60>)
 800ef6c:	79db      	ldrb	r3, [r3, #7]
 800ef6e:	b183      	cbz	r3, 800ef92 <bt_init+0x3a>
 800ef70:	4b12      	ldr	r3, [pc, #72]	; (800efbc <bt_init+0x64>)
 800ef72:	f3bf 8f5b 	dmb	ish
 800ef76:	e853 2f00 	ldrex	r2, [r3]
 800ef7a:	f042 0204 	orr.w	r2, r2, #4
 800ef7e:	e843 2100 	strex	r1, r2, [r3]
 800ef82:	2900      	cmp	r1, #0
 800ef84:	d1f7      	bne.n	800ef76 <bt_init+0x1e>
 800ef86:	f3bf 8f5b 	dmb	ish
	bt_finalize_init();
 800ef8a:	f7ff ffcf 	bl	800ef2c <bt_finalize_init>
}
 800ef8e:	4620      	mov	r0, r4
 800ef90:	bd10      	pop	{r4, pc}
			BT_INFO("No ID address. App must call settings_load()");
 800ef92:	f04f 0100 	mov.w	r1, #0
 800ef96:	2303      	movs	r3, #3
 800ef98:	f363 0102 	bfi	r1, r3, #0, #3
 800ef9c:	f36f 01c5 	bfc	r1, #3, #3
 800efa0:	4b07      	ldr	r3, [pc, #28]	; (800efc0 <bt_init+0x68>)
 800efa2:	4a08      	ldr	r2, [pc, #32]	; (800efc4 <bt_init+0x6c>)
 800efa4:	1a9b      	subs	r3, r3, r2
 800efa6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800efaa:	f363 118f 	bfi	r1, r3, #6, #10
 800efae:	4806      	ldr	r0, [pc, #24]	; (800efc8 <bt_init+0x70>)
 800efb0:	f7f7 fc36 	bl	8006820 <log_0>
			return 0;
 800efb4:	e7eb      	b.n	800ef8e <bt_init+0x36>
 800efb6:	bf00      	nop
 800efb8:	20000000 	.word	0x20000000
 800efbc:	20000094 	.word	0x20000094
 800efc0:	08022bc8 	.word	0x08022bc8
 800efc4:	08022b90 	.word	0x08022b90
 800efc8:	08026b90 	.word	0x08026b90

0800efcc <init_work>:
{
 800efcc:	b508      	push	{r3, lr}
	err = bt_init();
 800efce:	f7ff ffc3 	bl	800ef58 <bt_init>
	if (ready_cb) {
 800efd2:	4b02      	ldr	r3, [pc, #8]	; (800efdc <init_work+0x10>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	b103      	cbz	r3, 800efda <init_work+0xe>
		ready_cb(err);
 800efd8:	4798      	blx	r3
}
 800efda:	bd08      	pop	{r3, pc}
 800efdc:	2000416c 	.word	0x2000416c

0800efe0 <bt_enable>:
{
 800efe0:	b530      	push	{r4, r5, lr}
 800efe2:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.drv) {
 800efe4:	4b42      	ldr	r3, [pc, #264]	; (800f0f0 <bt_enable+0x110>)
 800efe6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800efea:	2b00      	cmp	r3, #0
 800efec:	d04b      	beq.n	800f086 <bt_enable+0xa6>
 800efee:	4605      	mov	r5, r0
 800eff0:	4b40      	ldr	r3, [pc, #256]	; (800f0f4 <bt_enable+0x114>)
 800eff2:	f3bf 8f5b 	dmb	ish
 800eff6:	e853 2f00 	ldrex	r2, [r3]
 800effa:	f042 0101 	orr.w	r1, r2, #1
 800effe:	e843 1000 	strex	r0, r1, [r3]
 800f002:	2800      	cmp	r0, #0
 800f004:	d1f7      	bne.n	800eff6 <bt_enable+0x16>
 800f006:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
 800f00a:	f012 0f01 	tst.w	r2, #1
 800f00e:	d16b      	bne.n	800f0e8 <bt_enable+0x108>
		err = bt_settings_init();
 800f010:	f7fc ff62 	bl	800bed8 <bt_settings_init>
		if (err) {
 800f014:	4604      	mov	r4, r0
 800f016:	2800      	cmp	r0, #0
 800f018:	d132      	bne.n	800f080 <bt_enable+0xa0>
	ready_cb = cb;
 800f01a:	4b37      	ldr	r3, [pc, #220]	; (800f0f8 <bt_enable+0x118>)
 800f01c:	601d      	str	r5, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 800f01e:	4c37      	ldr	r4, [pc, #220]	; (800f0fc <bt_enable+0x11c>)
 800f020:	2200      	movs	r2, #0
 800f022:	2300      	movs	r3, #0
 800f024:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f028:	2300      	movs	r3, #0
 800f02a:	9304      	str	r3, [sp, #16]
 800f02c:	f06f 0208 	mvn.w	r2, #8
 800f030:	9203      	str	r2, [sp, #12]
 800f032:	9302      	str	r3, [sp, #8]
 800f034:	9301      	str	r3, [sp, #4]
 800f036:	9300      	str	r3, [sp, #0]
 800f038:	4b31      	ldr	r3, [pc, #196]	; (800f100 <bt_enable+0x120>)
 800f03a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f03e:	4931      	ldr	r1, [pc, #196]	; (800f104 <bt_enable+0x124>)
 800f040:	4620      	mov	r0, r4
 800f042:	f013 f906 	bl	8022252 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
 800f046:	4930      	ldr	r1, [pc, #192]	; (800f108 <bt_enable+0x128>)
 800f048:	4620      	mov	r0, r4
 800f04a:	f013 f8f1 	bl	8022230 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
 800f04e:	4b28      	ldr	r3, [pc, #160]	; (800f0f0 <bt_enable+0x110>)
 800f050:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800f054:	68db      	ldr	r3, [r3, #12]
 800f056:	4798      	blx	r3
	if (err) {
 800f058:	4604      	mov	r4, r0
 800f05a:	bb40      	cbnz	r0, 800f0ae <bt_enable+0xce>
	if (!cb) {
 800f05c:	2d00      	cmp	r5, #0
 800f05e:	d039      	beq.n	800f0d4 <bt_enable+0xf4>
 800f060:	4b2a      	ldr	r3, [pc, #168]	; (800f10c <bt_enable+0x12c>)
 800f062:	f3bf 8f5b 	dmb	ish
 800f066:	e853 2f00 	ldrex	r2, [r3]
 800f06a:	f042 0101 	orr.w	r1, r2, #1
 800f06e:	e843 1000 	strex	r0, r1, [r3]
 800f072:	2800      	cmp	r0, #0
 800f074:	d1f7      	bne.n	800f066 <bt_enable+0x86>
 800f076:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 800f07a:	f012 0f01 	tst.w	r2, #1
 800f07e:	d02d      	beq.n	800f0dc <bt_enable+0xfc>
}
 800f080:	4620      	mov	r0, r4
 800f082:	b009      	add	sp, #36	; 0x24
 800f084:	bd30      	pop	{r4, r5, pc}
		BT_ERR("No HCI driver registered");
 800f086:	f04f 0100 	mov.w	r1, #0
 800f08a:	2301      	movs	r3, #1
 800f08c:	f363 0102 	bfi	r1, r3, #0, #3
 800f090:	f36f 01c5 	bfc	r1, #3, #3
 800f094:	4b1e      	ldr	r3, [pc, #120]	; (800f110 <bt_enable+0x130>)
 800f096:	4a1f      	ldr	r2, [pc, #124]	; (800f114 <bt_enable+0x134>)
 800f098:	1a9b      	subs	r3, r3, r2
 800f09a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800f09e:	f363 118f 	bfi	r1, r3, #6, #10
 800f0a2:	481d      	ldr	r0, [pc, #116]	; (800f118 <bt_enable+0x138>)
 800f0a4:	f7f7 fbbc 	bl	8006820 <log_0>
		return -ENODEV;
 800f0a8:	f06f 0412 	mvn.w	r4, #18
 800f0ac:	e7e8      	b.n	800f080 <bt_enable+0xa0>
		BT_ERR("HCI driver open failed (%d)", err);
 800f0ae:	f04f 0200 	mov.w	r2, #0
 800f0b2:	2301      	movs	r3, #1
 800f0b4:	f363 0202 	bfi	r2, r3, #0, #3
 800f0b8:	f36f 02c5 	bfc	r2, #3, #3
 800f0bc:	4b14      	ldr	r3, [pc, #80]	; (800f110 <bt_enable+0x130>)
 800f0be:	4915      	ldr	r1, [pc, #84]	; (800f114 <bt_enable+0x134>)
 800f0c0:	1a5b      	subs	r3, r3, r1
 800f0c2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800f0c6:	f363 128f 	bfi	r2, r3, #6, #10
 800f0ca:	4601      	mov	r1, r0
 800f0cc:	4813      	ldr	r0, [pc, #76]	; (800f11c <bt_enable+0x13c>)
 800f0ce:	f7f7 fa37 	bl	8006540 <log_1>
		return err;
 800f0d2:	e7d5      	b.n	800f080 <bt_enable+0xa0>
		return bt_init();
 800f0d4:	f7ff ff40 	bl	800ef58 <bt_init>
 800f0d8:	4604      	mov	r4, r0
 800f0da:	e7d1      	b.n	800f080 <bt_enable+0xa0>
		k_queue_append(&work_q->queue, work);
 800f0dc:	f1a3 0108 	sub.w	r1, r3, #8
 800f0e0:	480f      	ldr	r0, [pc, #60]	; (800f120 <bt_enable+0x140>)
 800f0e2:	f012 fee7 	bl	8021eb4 <k_queue_append>
}
 800f0e6:	e7cb      	b.n	800f080 <bt_enable+0xa0>
		return -EALREADY;
 800f0e8:	f06f 0444 	mvn.w	r4, #68	; 0x44
 800f0ec:	e7c8      	b.n	800f080 <bt_enable+0xa0>
 800f0ee:	bf00      	nop
 800f0f0:	20000000 	.word	0x20000000
 800f0f4:	20000094 	.word	0x20000094
 800f0f8:	2000416c 	.word	0x2000416c
 800f0fc:	20001b90 	.word	0x20001b90
 800f100:	0800ec9d 	.word	0x0800ec9d
 800f104:	20006fa8 	.word	0x20006fa8
 800f108:	08026bdc 	.word	0x08026bdc
 800f10c:	20000090 	.word	0x20000090
 800f110:	08022bc8 	.word	0x08022bc8
 800f114:	08022b90 	.word	0x08022b90
 800f118:	08026bc0 	.word	0x08026bc0
 800f11c:	08026be4 	.word	0x08026be4
 800f120:	20003310 	.word	0x20003310

0800f124 <bt_get_name>:
}
 800f124:	4800      	ldr	r0, [pc, #0]	; (800f128 <bt_get_name+0x4>)
 800f126:	4770      	bx	lr
 800f128:	0802416c 	.word	0x0802416c

0800f12c <bt_id_create>:
{
 800f12c:	b570      	push	{r4, r5, r6, lr}
 800f12e:	b082      	sub	sp, #8
 800f130:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
 800f132:	4605      	mov	r5, r0
 800f134:	b348      	cbz	r0, 800f18a <bt_id_create+0x5e>
 800f136:	2300      	movs	r3, #0
 800f138:	9300      	str	r3, [sp, #0]
 800f13a:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
 800f13e:	2207      	movs	r2, #7
 800f140:	4669      	mov	r1, sp
 800f142:	f00d fb9c 	bl	801c87e <memcmp>
 800f146:	b300      	cbz	r0, 800f18a <bt_id_create+0x5e>
		if (addr->type != BT_ADDR_LE_RANDOM ||
 800f148:	782b      	ldrb	r3, [r5, #0]
 800f14a:	2b01      	cmp	r3, #1
 800f14c:	d104      	bne.n	800f158 <bt_id_create+0x2c>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
 800f14e:	79ab      	ldrb	r3, [r5, #6]
		if (addr->type != BT_ADDR_LE_RANDOM ||
 800f150:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f154:	2bc0      	cmp	r3, #192	; 0xc0
 800f156:	d013      	beq.n	800f180 <bt_id_create+0x54>
			BT_ERR("Only static random identity address supported");
 800f158:	f04f 0100 	mov.w	r1, #0
 800f15c:	2301      	movs	r3, #1
 800f15e:	f363 0102 	bfi	r1, r3, #0, #3
 800f162:	f36f 01c5 	bfc	r1, #3, #3
 800f166:	4b15      	ldr	r3, [pc, #84]	; (800f1bc <bt_id_create+0x90>)
 800f168:	4a15      	ldr	r2, [pc, #84]	; (800f1c0 <bt_id_create+0x94>)
 800f16a:	1a9b      	subs	r3, r3, r2
 800f16c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800f170:	f363 118f 	bfi	r1, r3, #6, #10
 800f174:	4813      	ldr	r0, [pc, #76]	; (800f1c4 <bt_id_create+0x98>)
 800f176:	f7f7 fb53 	bl	8006820 <log_0>
			return -EINVAL;
 800f17a:	f06f 0615 	mvn.w	r6, #21
 800f17e:	e010      	b.n	800f1a2 <bt_id_create+0x76>
		if (id_find(addr) >= 0) {
 800f180:	4628      	mov	r0, r5
 800f182:	f7fd f8d5 	bl	800c330 <id_find>
 800f186:	2800      	cmp	r0, #0
 800f188:	da0e      	bge.n	800f1a8 <bt_id_create+0x7c>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
 800f18a:	b984      	cbnz	r4, 800f1ae <bt_id_create+0x82>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
 800f18c:	4b0e      	ldr	r3, [pc, #56]	; (800f1c8 <bt_id_create+0x9c>)
 800f18e:	79d8      	ldrb	r0, [r3, #7]
 800f190:	2801      	cmp	r0, #1
 800f192:	d00f      	beq.n	800f1b4 <bt_id_create+0x88>
	new_id = bt_dev.id_count++;
 800f194:	1c42      	adds	r2, r0, #1
 800f196:	71da      	strb	r2, [r3, #7]
 800f198:	4606      	mov	r6, r0
	id_create(new_id, addr, irk);
 800f19a:	4622      	mov	r2, r4
 800f19c:	4629      	mov	r1, r5
 800f19e:	f7ff fa13 	bl	800e5c8 <id_create>
}
 800f1a2:	4630      	mov	r0, r6
 800f1a4:	b002      	add	sp, #8
 800f1a6:	bd70      	pop	{r4, r5, r6, pc}
			return -EALREADY;
 800f1a8:	f06f 0644 	mvn.w	r6, #68	; 0x44
 800f1ac:	e7f9      	b.n	800f1a2 <bt_id_create+0x76>
		return -EINVAL;
 800f1ae:	f06f 0615 	mvn.w	r6, #21
 800f1b2:	e7f6      	b.n	800f1a2 <bt_id_create+0x76>
		return -ENOMEM;
 800f1b4:	f06f 060b 	mvn.w	r6, #11
 800f1b8:	e7f3      	b.n	800f1a2 <bt_id_create+0x76>
 800f1ba:	bf00      	nop
 800f1bc:	08022bc8 	.word	0x08022bc8
 800f1c0:	08022b90 	.word	0x08022b90
 800f1c4:	08026c00 	.word	0x08026c00
 800f1c8:	20000000 	.word	0x20000000

0800f1cc <bt_setup_public_id_addr>:
{
 800f1cc:	b500      	push	{lr}
 800f1ce:	b083      	sub	sp, #12
	bt_dev.id_count = bt_read_public_addr(&addr);
 800f1d0:	4668      	mov	r0, sp
 800f1d2:	f7fe fc13 	bl	800d9fc <bt_read_public_addr>
 800f1d6:	4b06      	ldr	r3, [pc, #24]	; (800f1f0 <bt_setup_public_id_addr+0x24>)
 800f1d8:	71d8      	strb	r0, [r3, #7]
	if (!bt_dev.id_count) {
 800f1da:	b910      	cbnz	r0, 800f1e2 <bt_setup_public_id_addr+0x16>
}
 800f1dc:	b003      	add	sp, #12
 800f1de:	f85d fb04 	ldr.w	pc, [sp], #4
	id_create(BT_ID_DEFAULT, &addr, irk);
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	4669      	mov	r1, sp
 800f1e6:	4610      	mov	r0, r2
 800f1e8:	f7ff f9ee 	bl	800e5c8 <id_create>
 800f1ec:	e7f6      	b.n	800f1dc <bt_setup_public_id_addr+0x10>
 800f1ee:	bf00      	nop
 800f1f0:	20000000 	.word	0x20000000

0800f1f4 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
 800f1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1f8:	b08d      	sub	sp, #52	; 0x34
 800f1fa:	469a      	mov	sl, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	9305      	str	r3, [sp, #20]
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
 800f200:	690f      	ldr	r7, [r1, #16]
 800f202:	1afe      	subs	r6, r7, r3
 800f204:	bf18      	it	ne
 800f206:	2601      	movne	r6, #1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800f208:	f3bf 8f5b 	dmb	ish
 800f20c:	4bc0      	ldr	r3, [pc, #768]	; (800f510 <bt_le_adv_start_legacy+0x31c>)
 800f20e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f212:	f3bf 8f5b 	dmb	ish
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
 800f216:	f013 0f02 	tst.w	r3, #2
 800f21a:	f000 819d 	beq.w	800f558 <bt_le_adv_start_legacy+0x364>
 800f21e:	4605      	mov	r5, r0
 800f220:	460c      	mov	r4, r1
 800f222:	4691      	mov	r9, r2
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
 800f224:	4608      	mov	r0, r1
 800f226:	f00d fca9 	bl	801cb7c <valid_adv_param>
 800f22a:	2800      	cmp	r0, #0
 800f22c:	f000 8197 	beq.w	800f55e <bt_le_adv_start_legacy+0x36a>
		return -EINVAL;
	}

	if (!bt_le_adv_random_addr_check(param)) {
 800f230:	4620      	mov	r0, r4
 800f232:	f7fc ff77 	bl	800c124 <bt_le_adv_random_addr_check>
 800f236:	4683      	mov	fp, r0
 800f238:	2800      	cmp	r0, #0
 800f23a:	f000 8193 	beq.w	800f564 <bt_le_adv_start_legacy+0x370>
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
 800f23e:	f105 0814 	add.w	r8, r5, #20
 800f242:	f3bf 8f5b 	dmb	ish
 800f246:	696b      	ldr	r3, [r5, #20]
 800f248:	f3bf 8f5b 	dmb	ish
 800f24c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f250:	f040 818b 	bne.w	800f56a <bt_le_adv_start_legacy+0x376>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
 800f254:	220f      	movs	r2, #15
 800f256:	2100      	movs	r1, #0
 800f258:	a806      	add	r0, sp, #24
 800f25a:	f00d fb4d 	bl	801c8f8 <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
 800f25e:	68a3      	ldr	r3, [r4, #8]
 800f260:	f8ad 3018 	strh.w	r3, [sp, #24]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
 800f264:	68e3      	ldr	r3, [r4, #12]
 800f266:	f8ad 301a 	strh.w	r3, [sp, #26]
	set_param.channel_map  = 0x07;
 800f26a:	2307      	movs	r3, #7
 800f26c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	set_param.filter_policy = get_filter_policy(param->options);
 800f270:	7920      	ldrb	r0, [r4, #4]
 800f272:	f00d fc46 	bl	801cb02 <get_filter_policy>
 800f276:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26

	if (adv->id != param->id) {
 800f27a:	782a      	ldrb	r2, [r5, #0]
 800f27c:	7823      	ldrb	r3, [r4, #0]
 800f27e:	429a      	cmp	r2, r3
 800f280:	d00c      	beq.n	800f29c <bt_le_adv_start_legacy+0xa8>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800f282:	4ba4      	ldr	r3, [pc, #656]	; (800f514 <bt_le_adv_start_legacy+0x320>)
 800f284:	f3bf 8f5b 	dmb	ish
 800f288:	e853 2f00 	ldrex	r2, [r3]
 800f28c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f290:	e843 2100 	strex	r1, r2, [r3]
 800f294:	2900      	cmp	r1, #0
 800f296:	d1f7      	bne.n	800f288 <bt_le_adv_start_legacy+0x94>
 800f298:	f3bf 8f5b 	dmb	ish
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
 800f29c:	7823      	ldrb	r3, [r4, #0]
 800f29e:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
 800f2a0:	4a9b      	ldr	r2, [pc, #620]	; (800f510 <bt_le_adv_start_legacy+0x31c>)
 800f2a2:	f882 3037 	strb.w	r3, [r2, #55]	; 0x37

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
 800f2a6:	f10d 031d 	add.w	r3, sp, #29
 800f2aa:	4632      	mov	r2, r6
 800f2ac:	6861      	ldr	r1, [r4, #4]
 800f2ae:	4628      	mov	r0, r5
 800f2b0:	f7fe fb28 	bl	800d904 <le_adv_set_random_addr>
				     &set_param.own_addr_type);
	if (err) {
 800f2b4:	4606      	mov	r6, r0
 800f2b6:	2800      	cmp	r0, #0
 800f2b8:	f040 80db 	bne.w	800f472 <bt_le_adv_start_legacy+0x27e>
		return err;
	}

	if (dir_adv) {
 800f2bc:	b1bf      	cbz	r7, 800f2ee <bt_le_adv_start_legacy+0xfa>
	memcpy(dst, src, sizeof(*dst));
 800f2be:	2207      	movs	r2, #7
 800f2c0:	6921      	ldr	r1, [r4, #16]
 800f2c2:	f105 000b 	add.w	r0, r5, #11
 800f2c6:	f00d faf2 	bl	801c8ae <memcpy>
		bt_addr_le_copy(&adv->target_addr, param->peer);
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
 800f2ca:	6863      	ldr	r3, [r4, #4]
 800f2cc:	f013 0f01 	tst.w	r3, #1
 800f2d0:	d020      	beq.n	800f314 <bt_le_adv_start_legacy+0x120>
		scannable = true;

		if (dir_adv) {
 800f2d2:	b1df      	cbz	r7, 800f30c <bt_le_adv_start_legacy+0x118>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
 800f2d4:	f013 0f10 	tst.w	r3, #16
 800f2d8:	d014      	beq.n	800f304 <bt_le_adv_start_legacy+0x110>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
 800f2da:	2304      	movs	r3, #4
 800f2dc:	f88d 301c 	strb.w	r3, [sp, #28]
 800f2e0:	2207      	movs	r2, #7
 800f2e2:	6921      	ldr	r1, [r4, #16]
 800f2e4:	f10d 001e 	add.w	r0, sp, #30
 800f2e8:	f00d fae1 	bl	801c8ae <memcpy>
}
 800f2ec:	e01b      	b.n	800f326 <bt_le_adv_start_legacy+0x132>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	930a      	str	r3, [sp, #40]	; 0x28
 800f2f2:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b
	memcpy(dst, src, sizeof(*dst));
 800f2f6:	2207      	movs	r2, #7
 800f2f8:	a90a      	add	r1, sp, #40	; 0x28
 800f2fa:	f105 000b 	add.w	r0, r5, #11
 800f2fe:	f00d fad6 	bl	801c8ae <memcpy>
 800f302:	e7e2      	b.n	800f2ca <bt_le_adv_start_legacy+0xd6>
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
 800f304:	2301      	movs	r3, #1
 800f306:	f88d 301c 	strb.w	r3, [sp, #28]
 800f30a:	e7e9      	b.n	800f2e0 <bt_le_adv_start_legacy+0xec>
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
		} else {
			set_param.type = BT_HCI_ADV_IND;
 800f30c:	2300      	movs	r3, #0
 800f30e:	f88d 301c 	strb.w	r3, [sp, #28]
 800f312:	e008      	b.n	800f326 <bt_le_adv_start_legacy+0x132>
		}
	} else {
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
 800f314:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f316:	b37a      	cbz	r2, 800f378 <bt_le_adv_start_legacy+0x184>
 800f318:	2601      	movs	r6, #1

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
 800f31a:	f016 0b01 	ands.w	fp, r6, #1
 800f31e:	d030      	beq.n	800f382 <bt_le_adv_start_legacy+0x18e>
 800f320:	2302      	movs	r3, #2
 800f322:	f88d 301c 	strb.w	r3, [sp, #28]
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
 800f326:	210f      	movs	r1, #15
 800f328:	f242 0006 	movw	r0, #8198	; 0x2006
 800f32c:	f7fd febe 	bl	800d0ac <bt_hci_cmd_create>
	if (!buf) {
 800f330:	4606      	mov	r6, r0
 800f332:	2800      	cmp	r0, #0
 800f334:	f000 811c 	beq.w	800f570 <bt_le_adv_start_legacy+0x37c>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));
 800f338:	220f      	movs	r2, #15
 800f33a:	a906      	add	r1, sp, #24
 800f33c:	3008      	adds	r0, #8
 800f33e:	f011 f8a3 	bl	8020488 <net_buf_simple_add_mem>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
 800f342:	2200      	movs	r2, #0
 800f344:	4631      	mov	r1, r6
 800f346:	f242 0006 	movw	r0, #8198	; 0x2006
 800f34a:	f7fd feeb 	bl	800d124 <bt_hci_cmd_send_sync>
	if (err) {
 800f34e:	4606      	mov	r6, r0
 800f350:	2800      	cmp	r0, #0
 800f352:	f040 808e 	bne.w	800f472 <bt_le_adv_start_legacy+0x27e>
		return err;
	}

	if (!dir_adv) {
 800f356:	b1b7      	cbz	r7, 800f386 <bt_le_adv_start_legacy+0x192>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
 800f358:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
 800f35a:	f013 0f01 	tst.w	r3, #1
 800f35e:	d02c      	beq.n	800f3ba <bt_le_adv_start_legacy+0x1c6>
		err = le_adv_start_add_conn(adv, &conn);
 800f360:	a905      	add	r1, sp, #20
 800f362:	4628      	mov	r0, r5
 800f364:	f7fd fc96 	bl	800cc94 <le_adv_start_add_conn>
		if (err) {
 800f368:	b338      	cbz	r0, 800f3ba <bt_le_adv_start_legacy+0x1c6>
			if (err == -ENOMEM && !dir_adv &&
 800f36a:	f110 0f0c 	cmn.w	r0, #12
 800f36e:	f040 8102 	bne.w	800f576 <bt_le_adv_start_legacy+0x382>
 800f372:	b1e7      	cbz	r7, 800f3ae <bt_le_adv_start_legacy+0x1ba>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
				goto set_adv_state;
			}

			return err;
 800f374:	4606      	mov	r6, r0
 800f376:	e07c      	b.n	800f472 <bt_le_adv_start_legacy+0x27e>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
 800f378:	f013 0f08 	tst.w	r3, #8
 800f37c:	d0cd      	beq.n	800f31a <bt_le_adv_start_legacy+0x126>
 800f37e:	2601      	movs	r6, #1
 800f380:	e7cb      	b.n	800f31a <bt_le_adv_start_legacy+0x126>
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
 800f382:	2303      	movs	r3, #3
 800f384:	e7cd      	b.n	800f322 <bt_le_adv_start_legacy+0x12e>
				    param->options & BT_LE_ADV_OPT_USE_NAME);
 800f386:	6863      	ldr	r3, [r4, #4]
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
 800f388:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800f38c:	9303      	str	r3, [sp, #12]
 800f38e:	f8cd b008 	str.w	fp, [sp, #8]
 800f392:	2300      	movs	r3, #0
 800f394:	9301      	str	r3, [sp, #4]
 800f396:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f398:	9300      	str	r3, [sp, #0]
 800f39a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f39c:	4652      	mov	r2, sl
 800f39e:	4649      	mov	r1, r9
 800f3a0:	4628      	mov	r0, r5
 800f3a2:	f00d fe53 	bl	801d04c <le_adv_update>
		if (err) {
 800f3a6:	2800      	cmp	r0, #0
 800f3a8:	d0d6      	beq.n	800f358 <bt_le_adv_start_legacy+0x164>
			return err;
 800f3aa:	4606      	mov	r6, r0
 800f3ac:	e061      	b.n	800f472 <bt_le_adv_start_legacy+0x27e>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
 800f3ae:	6862      	ldr	r2, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
 800f3b0:	f012 0f02 	tst.w	r2, #2
 800f3b4:	d00c      	beq.n	800f3d0 <bt_le_adv_start_legacy+0x1dc>
			return err;
 800f3b6:	4606      	mov	r6, r0
 800f3b8:	e05b      	b.n	800f472 <bt_le_adv_start_legacy+0x27e>
		}
	}

	err = set_le_adv_enable(adv, true);
 800f3ba:	2101      	movs	r1, #1
 800f3bc:	4628      	mov	r0, r5
 800f3be:	f00d fc27 	bl	801cc10 <set_le_adv_enable>
	if (err) {
 800f3c2:	4605      	mov	r5, r0
 800f3c4:	2800      	cmp	r0, #0
 800f3c6:	d158      	bne.n	800f47a <bt_le_adv_start_legacy+0x286>
		}

		return err;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
 800f3c8:	9805      	ldr	r0, [sp, #20]
 800f3ca:	b108      	cbz	r0, 800f3d0 <bt_le_adv_start_legacy+0x1dc>
		/* If undirected connectable advertiser we have created a
		 * connection object that we don't yet give to the application.
		 * Since we don't give the application a reference to manage in
		 * this case, we need to release this reference here
		 */
		bt_conn_unref(conn);
 800f3cc:	f00e f9b0 	bl	801d730 <bt_conn_unref>
	}

set_adv_state:
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
 800f3d0:	2f00      	cmp	r7, #0
 800f3d2:	d06d      	beq.n	800f4b0 <bt_le_adv_start_legacy+0x2bc>
 800f3d4:	4633      	mov	r3, r6
	if (val) {
 800f3d6:	f013 0f01 	tst.w	r3, #1
 800f3da:	d071      	beq.n	800f4c0 <bt_le_adv_start_legacy+0x2cc>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800f3dc:	f3bf 8f5b 	dmb	ish
 800f3e0:	e858 3f00 	ldrex	r3, [r8]
 800f3e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f3e8:	e848 3200 	strex	r2, r3, [r8]
 800f3ec:	2a00      	cmp	r2, #0
 800f3ee:	d1f7      	bne.n	800f3e0 <bt_le_adv_start_legacy+0x1ec>
 800f3f0:	f3bf 8f5b 	dmb	ish
			  !(param->options & BT_LE_ADV_OPT_ONE_TIME));

	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
			  param->options & BT_LE_ADV_OPT_USE_NAME);
 800f3f4:	6863      	ldr	r3, [r4, #4]
	if (val) {
 800f3f6:	f013 0f08 	tst.w	r3, #8
 800f3fa:	d06e      	beq.n	800f4da <bt_le_adv_start_legacy+0x2e6>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800f3fc:	f3bf 8f5b 	dmb	ish
 800f400:	e858 3f00 	ldrex	r3, [r8]
 800f404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f408:	e848 3200 	strex	r2, r3, [r8]
 800f40c:	2a00      	cmp	r2, #0
 800f40e:	d1f7      	bne.n	800f400 <bt_le_adv_start_legacy+0x20c>
 800f410:	f3bf 8f5b 	dmb	ish

	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
			  param->options & BT_LE_ADV_OPT_CONNECTABLE);
 800f414:	6863      	ldr	r3, [r4, #4]
	if (val) {
 800f416:	f013 0f01 	tst.w	r3, #1
 800f41a:	d06b      	beq.n	800f4f4 <bt_le_adv_start_legacy+0x300>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800f41c:	f3bf 8f5b 	dmb	ish
 800f420:	e858 3f00 	ldrex	r3, [r8]
 800f424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f428:	e848 3200 	strex	r2, r3, [r8]
 800f42c:	2a00      	cmp	r2, #0
 800f42e:	d1f7      	bne.n	800f420 <bt_le_adv_start_legacy+0x22c>
 800f430:	f3bf 8f5b 	dmb	ish
	if (val) {
 800f434:	f1bb 0f00 	cmp.w	fp, #0
 800f438:	d074      	beq.n	800f524 <bt_le_adv_start_legacy+0x330>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800f43a:	f3bf 8f5b 	dmb	ish
 800f43e:	e858 3f00 	ldrex	r3, [r8]
 800f442:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f446:	e848 3200 	strex	r2, r3, [r8]
 800f44a:	2a00      	cmp	r2, #0
 800f44c:	d1f7      	bne.n	800f43e <bt_le_adv_start_legacy+0x24a>
 800f44e:	f3bf 8f5b 	dmb	ish

	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);
 800f452:	6863      	ldr	r3, [r4, #4]
	if (val) {
 800f454:	f013 0f04 	tst.w	r3, #4
 800f458:	d071      	beq.n	800f53e <bt_le_adv_start_legacy+0x34a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800f45a:	f3bf 8f5b 	dmb	ish
 800f45e:	e858 3f00 	ldrex	r3, [r8]
 800f462:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f466:	e848 3200 	strex	r2, r3, [r8]
 800f46a:	2a00      	cmp	r2, #0
 800f46c:	d1f7      	bne.n	800f45e <bt_le_adv_start_legacy+0x26a>
 800f46e:	f3bf 8f5b 	dmb	ish

	return 0;
}
 800f472:	4630      	mov	r0, r6
 800f474:	b00d      	add	sp, #52	; 0x34
 800f476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		BT_ERR("Failed to start advertiser");
 800f47a:	f04f 0100 	mov.w	r1, #0
 800f47e:	2301      	movs	r3, #1
 800f480:	f363 0102 	bfi	r1, r3, #0, #3
 800f484:	f36f 01c5 	bfc	r1, #3, #3
 800f488:	4b23      	ldr	r3, [pc, #140]	; (800f518 <bt_le_adv_start_legacy+0x324>)
 800f48a:	4a24      	ldr	r2, [pc, #144]	; (800f51c <bt_le_adv_start_legacy+0x328>)
 800f48c:	1a9b      	subs	r3, r3, r2
 800f48e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800f492:	f363 118f 	bfi	r1, r3, #6, #10
 800f496:	4822      	ldr	r0, [pc, #136]	; (800f520 <bt_le_adv_start_legacy+0x32c>)
 800f498:	f7f7 f9c2 	bl	8006820 <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
 800f49c:	9805      	ldr	r0, [sp, #20]
 800f49e:	b128      	cbz	r0, 800f4ac <bt_le_adv_start_legacy+0x2b8>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
 800f4a0:	2100      	movs	r1, #0
 800f4a2:	f001 f885 	bl	80105b0 <bt_conn_set_state>
			bt_conn_unref(conn);
 800f4a6:	9805      	ldr	r0, [sp, #20]
 800f4a8:	f00e f942 	bl	801d730 <bt_conn_unref>
		return err;
 800f4ac:	462e      	mov	r6, r5
 800f4ae:	e7e0      	b.n	800f472 <bt_le_adv_start_legacy+0x27e>
			  !(param->options & BT_LE_ADV_OPT_ONE_TIME));
 800f4b0:	6863      	ldr	r3, [r4, #4]
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
 800f4b2:	f013 0f02 	tst.w	r3, #2
 800f4b6:	d001      	beq.n	800f4bc <bt_le_adv_start_legacy+0x2c8>
 800f4b8:	4633      	mov	r3, r6
 800f4ba:	e78c      	b.n	800f3d6 <bt_le_adv_start_legacy+0x1e2>
 800f4bc:	2301      	movs	r3, #1
 800f4be:	e78a      	b.n	800f3d6 <bt_le_adv_start_legacy+0x1e2>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800f4c0:	f3bf 8f5b 	dmb	ish
 800f4c4:	e858 3f00 	ldrex	r3, [r8]
 800f4c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f4cc:	e848 3200 	strex	r2, r3, [r8]
 800f4d0:	2a00      	cmp	r2, #0
 800f4d2:	d1f7      	bne.n	800f4c4 <bt_le_adv_start_legacy+0x2d0>
 800f4d4:	f3bf 8f5b 	dmb	ish
 800f4d8:	e78c      	b.n	800f3f4 <bt_le_adv_start_legacy+0x200>
 800f4da:	f3bf 8f5b 	dmb	ish
 800f4de:	e858 3f00 	ldrex	r3, [r8]
 800f4e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f4e6:	e848 3200 	strex	r2, r3, [r8]
 800f4ea:	2a00      	cmp	r2, #0
 800f4ec:	d1f7      	bne.n	800f4de <bt_le_adv_start_legacy+0x2ea>
 800f4ee:	f3bf 8f5b 	dmb	ish
 800f4f2:	e78f      	b.n	800f414 <bt_le_adv_start_legacy+0x220>
 800f4f4:	f3bf 8f5b 	dmb	ish
 800f4f8:	e858 3f00 	ldrex	r3, [r8]
 800f4fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f500:	e848 3200 	strex	r2, r3, [r8]
 800f504:	2a00      	cmp	r2, #0
 800f506:	d1f7      	bne.n	800f4f8 <bt_le_adv_start_legacy+0x304>
 800f508:	f3bf 8f5b 	dmb	ish
 800f50c:	e792      	b.n	800f434 <bt_le_adv_start_legacy+0x240>
 800f50e:	bf00      	nop
 800f510:	20000000 	.word	0x20000000
 800f514:	20000094 	.word	0x20000094
 800f518:	08022bc8 	.word	0x08022bc8
 800f51c:	08022b90 	.word	0x08022b90
 800f520:	08026c30 	.word	0x08026c30
 800f524:	f3bf 8f5b 	dmb	ish
 800f528:	e858 3f00 	ldrex	r3, [r8]
 800f52c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f530:	e848 3200 	strex	r2, r3, [r8]
 800f534:	2a00      	cmp	r2, #0
 800f536:	d1f7      	bne.n	800f528 <bt_le_adv_start_legacy+0x334>
 800f538:	f3bf 8f5b 	dmb	ish
 800f53c:	e789      	b.n	800f452 <bt_le_adv_start_legacy+0x25e>
 800f53e:	f3bf 8f5b 	dmb	ish
 800f542:	e858 3f00 	ldrex	r3, [r8]
 800f546:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f54a:	e848 3200 	strex	r2, r3, [r8]
 800f54e:	2a00      	cmp	r2, #0
 800f550:	d1f7      	bne.n	800f542 <bt_le_adv_start_legacy+0x34e>
 800f552:	f3bf 8f5b 	dmb	ish
}
 800f556:	e78c      	b.n	800f472 <bt_le_adv_start_legacy+0x27e>
		return -EAGAIN;
 800f558:	f06f 060a 	mvn.w	r6, #10
 800f55c:	e789      	b.n	800f472 <bt_le_adv_start_legacy+0x27e>
		return -EINVAL;
 800f55e:	f06f 0615 	mvn.w	r6, #21
 800f562:	e786      	b.n	800f472 <bt_le_adv_start_legacy+0x27e>
		return -EINVAL;
 800f564:	f06f 0615 	mvn.w	r6, #21
 800f568:	e783      	b.n	800f472 <bt_le_adv_start_legacy+0x27e>
		return -EALREADY;
 800f56a:	f06f 0644 	mvn.w	r6, #68	; 0x44
 800f56e:	e780      	b.n	800f472 <bt_le_adv_start_legacy+0x27e>
		return -ENOBUFS;
 800f570:	f06f 0636 	mvn.w	r6, #54	; 0x36
 800f574:	e77d      	b.n	800f472 <bt_le_adv_start_legacy+0x27e>
			return err;
 800f576:	4606      	mov	r6, r0
 800f578:	e77b      	b.n	800f472 <bt_le_adv_start_legacy+0x27e>
 800f57a:	bf00      	nop

0800f57c <bt_le_adv_stop>:

	return err;
}

int bt_le_adv_stop(void)
{
 800f57c:	b538      	push	{r3, r4, r5, lr}
	struct bt_le_ext_adv *adv = bt_adv_lookup_legacy();
 800f57e:	f7fe fa8d 	bl	800da9c <bt_adv_lookup_legacy>
	int err;

	if (!adv) {
 800f582:	b1d0      	cbz	r0, 800f5ba <bt_le_adv_stop+0x3e>
 800f584:	4604      	mov	r4, r0
	}

	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);
 800f586:	f100 0314 	add.w	r3, r0, #20
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800f58a:	f3bf 8f5b 	dmb	ish
 800f58e:	e853 2f00 	ldrex	r2, [r3]
 800f592:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f596:	e843 2100 	strex	r1, r2, [r3]
 800f59a:	2900      	cmp	r1, #0
 800f59c:	d1f7      	bne.n	800f58e <bt_le_adv_stop+0x12>
 800f59e:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800f5a2:	f3bf 8f5b 	dmb	ish
 800f5a6:	6963      	ldr	r3, [r4, #20]
 800f5a8:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
 800f5ac:	f3c3 1580 	ubfx	r5, r3, #6, #1

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
 800f5b0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f5b4:	d114      	bne.n	800f5e0 <bt_le_adv_stop+0x64>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
 800f5b6:	4628      	mov	r0, r5
 800f5b8:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("No valid legacy adv");
 800f5ba:	f04f 0100 	mov.w	r1, #0
 800f5be:	2301      	movs	r3, #1
 800f5c0:	f363 0102 	bfi	r1, r3, #0, #3
 800f5c4:	f36f 01c5 	bfc	r1, #3, #3
 800f5c8:	4b1b      	ldr	r3, [pc, #108]	; (800f638 <bt_le_adv_stop+0xbc>)
 800f5ca:	4a1c      	ldr	r2, [pc, #112]	; (800f63c <bt_le_adv_stop+0xc0>)
 800f5cc:	1a9b      	subs	r3, r3, r2
 800f5ce:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800f5d2:	f363 118f 	bfi	r1, r3, #6, #10
 800f5d6:	481a      	ldr	r0, [pc, #104]	; (800f640 <bt_le_adv_stop+0xc4>)
 800f5d8:	f7f7 f922 	bl	8006820 <log_0>
		return 0;
 800f5dc:	2500      	movs	r5, #0
 800f5de:	e7ea      	b.n	800f5b6 <bt_le_adv_stop+0x3a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800f5e0:	f3bf 8f5b 	dmb	ish
 800f5e4:	6963      	ldr	r3, [r4, #20]
 800f5e6:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
 800f5ea:	f413 7f80 	tst.w	r3, #256	; 0x100
 800f5ee:	d114      	bne.n	800f61a <bt_le_adv_stop+0x9e>
		err = set_le_adv_enable_legacy(adv, false);
 800f5f0:	2100      	movs	r1, #0
 800f5f2:	4620      	mov	r0, r4
 800f5f4:	f7fe f8ce 	bl	800d794 <set_le_adv_enable_legacy>
		if (err) {
 800f5f8:	4605      	mov	r5, r0
 800f5fa:	2800      	cmp	r0, #0
 800f5fc:	d1db      	bne.n	800f5b6 <bt_le_adv_stop+0x3a>
 800f5fe:	f3bf 8f5b 	dmb	ish
 800f602:	4b10      	ldr	r3, [pc, #64]	; (800f644 <bt_le_adv_stop+0xc8>)
 800f604:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f608:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
 800f60c:	f3c3 1240 	ubfx	r2, r3, #5, #1
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
 800f610:	f013 0f20 	tst.w	r3, #32
 800f614:	d106      	bne.n	800f624 <bt_le_adv_stop+0xa8>
	return 0;
 800f616:	4615      	mov	r5, r2
 800f618:	e7cd      	b.n	800f5b6 <bt_le_adv_stop+0x3a>
		le_adv_stop_free_conn(adv, 0);
 800f61a:	2100      	movs	r1, #0
 800f61c:	4620      	mov	r0, r4
 800f61e:	f7fd f879 	bl	800c714 <le_adv_stop_free_conn>
 800f622:	e7e5      	b.n	800f5f0 <bt_le_adv_stop+0x74>
			set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
 800f624:	f00d fb78 	bl	801cd18 <set_le_scan_enable>
			le_set_private_addr(BT_ID_DEFAULT);
 800f628:	2000      	movs	r0, #0
 800f62a:	f00d fac3 	bl	801cbb4 <le_set_private_addr>
			set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
 800f62e:	2001      	movs	r0, #1
 800f630:	f00d fb72 	bl	801cd18 <set_le_scan_enable>
 800f634:	e7bf      	b.n	800f5b6 <bt_le_adv_stop+0x3a>
 800f636:	bf00      	nop
 800f638:	08022bc8 	.word	0x08022bc8
 800f63c:	08022b90 	.word	0x08022b90
 800f640:	08026c4c 	.word	0x08026c4c
 800f644:	20000000 	.word	0x20000000

0800f648 <enh_conn_complete>:
{
 800f648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f64a:	b085      	sub	sp, #20
 800f64c:	4604      	mov	r4, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
 800f64e:	f8b0 6001 	ldrh.w	r6, [r0, #1]
	pending_id_keys_update();
 800f652:	f7fc ff9f 	bl	800c594 <pending_id_keys_update>
	if (evt->status) {
 800f656:	7820      	ldrb	r0, [r4, #0]
 800f658:	b300      	cbz	r0, 800f69c <enh_conn_complete+0x54>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
 800f65a:	283c      	cmp	r0, #60	; 0x3c
 800f65c:	d015      	beq.n	800f68a <enh_conn_complete+0x42>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
 800f65e:	2802      	cmp	r0, #2
 800f660:	d016      	beq.n	800f690 <enh_conn_complete+0x48>
		BT_WARN("Unexpected status 0x%02x", evt->status);
 800f662:	f04f 0200 	mov.w	r2, #0
 800f666:	2302      	movs	r3, #2
 800f668:	f363 0202 	bfi	r2, r3, #0, #3
 800f66c:	f36f 02c5 	bfc	r2, #3, #3
 800f670:	4b73      	ldr	r3, [pc, #460]	; (800f840 <enh_conn_complete+0x1f8>)
 800f672:	4974      	ldr	r1, [pc, #464]	; (800f844 <enh_conn_complete+0x1fc>)
 800f674:	1a5b      	subs	r3, r3, r1
 800f676:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800f67a:	f363 128f 	bfi	r2, r3, #6, #10
 800f67e:	4601      	mov	r1, r0
 800f680:	4871      	ldr	r0, [pc, #452]	; (800f848 <enh_conn_complete+0x200>)
 800f682:	f7f6 ff5d 	bl	8006540 <log_1>
}
 800f686:	b005      	add	sp, #20
 800f688:	bdf0      	pop	{r4, r5, r6, r7, pc}
			le_conn_complete_adv_timeout();
 800f68a:	f7fe fa99 	bl	800dbc0 <le_conn_complete_adv_timeout>
			return;
 800f68e:	e7fa      	b.n	800f686 <enh_conn_complete+0x3e>
			le_conn_complete_cancel();
 800f690:	f7fd f80a 	bl	800c6a8 <le_conn_complete_cancel>
			bt_le_scan_update(false);
 800f694:	2000      	movs	r0, #0
 800f696:	f7fe fd9d 	bl	800e1d4 <bt_le_scan_update>
			return;
 800f69a:	e7f4      	b.n	800f686 <enh_conn_complete+0x3e>
 800f69c:	b2b7      	uxth	r7, r6
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
 800f69e:	7923      	ldrb	r3, [r4, #4]
 800f6a0:	3b02      	subs	r3, #2
 800f6a2:	b2db      	uxtb	r3, r3
 800f6a4:	2b01      	cmp	r3, #1
 800f6a6:	d95b      	bls.n	800f760 <enh_conn_complete+0x118>
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
 800f6a8:	78e3      	ldrb	r3, [r4, #3]
 800f6aa:	2b01      	cmp	r3, #1
 800f6ac:	d06d      	beq.n	800f78a <enh_conn_complete+0x142>
				bt_lookup_id_addr(id, &evt->peer_addr));
 800f6ae:	1d25      	adds	r5, r4, #4
		bt_addr_le_copy(&id_addr,
 800f6b0:	4629      	mov	r1, r5
 800f6b2:	f00d fb8a 	bl	801cdca <bt_lookup_id_addr>
 800f6b6:	4601      	mov	r1, r0
 800f6b8:	2207      	movs	r2, #7
 800f6ba:	4668      	mov	r0, sp
 800f6bc:	f00d f8f7 	bl	801c8ae <memcpy>
 800f6c0:	2207      	movs	r2, #7
 800f6c2:	4629      	mov	r1, r5
 800f6c4:	a802      	add	r0, sp, #8
 800f6c6:	f00d f8f2 	bl	801c8ae <memcpy>
	conn = find_pending_connect(evt->role, &id_addr);
 800f6ca:	4669      	mov	r1, sp
 800f6cc:	78e0      	ldrb	r0, [r4, #3]
 800f6ce:	f7fc fefb 	bl	800c4c8 <find_pending_connect>
 800f6d2:	4605      	mov	r5, r0
	    evt->role == BT_HCI_ROLE_SLAVE &&
 800f6d4:	78e3      	ldrb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
 800f6d6:	2b01      	cmp	r3, #1
 800f6d8:	d05b      	beq.n	800f792 <enh_conn_complete+0x14a>
	    evt->role == BT_HCI_ROLE_MASTER) {
 800f6da:	78e3      	ldrb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
 800f6dc:	b963      	cbnz	r3, 800f6f8 <enh_conn_complete+0xb0>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800f6de:	4b5b      	ldr	r3, [pc, #364]	; (800f84c <enh_conn_complete+0x204>)
 800f6e0:	f3bf 8f5b 	dmb	ish
 800f6e4:	e853 2f00 	ldrex	r2, [r3]
 800f6e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f6ec:	e843 2100 	strex	r1, r2, [r3]
 800f6f0:	2900      	cmp	r1, #0
 800f6f2:	d1f7      	bne.n	800f6e4 <enh_conn_complete+0x9c>
 800f6f4:	f3bf 8f5b 	dmb	ish
	if (!conn) {
 800f6f8:	2d00      	cmp	r5, #0
 800f6fa:	d05a      	beq.n	800f7b2 <enh_conn_complete+0x16a>
	conn->handle = handle;
 800f6fc:	4628      	mov	r0, r5
 800f6fe:	f820 6b88 	strh.w	r6, [r0], #136
 800f702:	2207      	movs	r2, #7
 800f704:	4669      	mov	r1, sp
 800f706:	f00d f8d2 	bl	801c8ae <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
 800f70a:	f8b4 3017 	ldrh.w	r3, [r4, #23]
 800f70e:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
 800f712:	f8b4 3019 	ldrh.w	r3, [r4, #25]
 800f716:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
 800f71a:	f8b4 301b 	ldrh.w	r3, [r4, #27]
 800f71e:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
 800f722:	78e3      	ldrb	r3, [r4, #3]
 800f724:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
 800f726:	2200      	movs	r2, #0
 800f728:	732a      	strb	r2, [r5, #12]
	conn->le.phy.tx_phy = BT_GAP_LE_PHY_1M;
 800f72a:	2201      	movs	r2, #1
 800f72c:	f885 20b8 	strb.w	r2, [r5, #184]	; 0xb8
	conn->le.phy.rx_phy = BT_GAP_LE_PHY_1M;
 800f730:	f885 20b9 	strb.w	r2, [r5, #185]	; 0xb9
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
 800f734:	4293      	cmp	r3, r2
 800f736:	d057      	beq.n	800f7e8 <enh_conn_complete+0x1a0>
	    conn->role == BT_HCI_ROLE_MASTER) {
 800f738:	78eb      	ldrb	r3, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d06e      	beq.n	800f81c <enh_conn_complete+0x1d4>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
 800f73e:	2107      	movs	r1, #7
 800f740:	4628      	mov	r0, r5
 800f742:	f000 ff35 	bl	80105b0 <bt_conn_set_state>
	conn_auto_initiate(conn);
 800f746:	4628      	mov	r0, r5
 800f748:	f7ff f8ce 	bl	800e8e8 <conn_auto_initiate>
	bt_conn_unref(conn);
 800f74c:	4628      	mov	r0, r5
 800f74e:	f00d ffef 	bl	801d730 <bt_conn_unref>
	    conn->role == BT_HCI_ROLE_MASTER) {
 800f752:	78eb      	ldrb	r3, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
 800f754:	2b00      	cmp	r3, #0
 800f756:	d196      	bne.n	800f686 <enh_conn_complete+0x3e>
		bt_le_scan_update(false);
 800f758:	2000      	movs	r0, #0
 800f75a:	f7fe fd3b 	bl	800e1d4 <bt_le_scan_update>
 800f75e:	e792      	b.n	800f686 <enh_conn_complete+0x3e>
 800f760:	2207      	movs	r2, #7
 800f762:	1d21      	adds	r1, r4, #4
 800f764:	4668      	mov	r0, sp
 800f766:	f00d f8a2 	bl	801c8ae <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
 800f76a:	f89d 3000 	ldrb.w	r3, [sp]
 800f76e:	3b02      	subs	r3, #2
 800f770:	f88d 3000 	strb.w	r3, [sp]
	memcpy(dst, src, sizeof(*dst));
 800f774:	2206      	movs	r2, #6
 800f776:	f104 0111 	add.w	r1, r4, #17
 800f77a:	f10d 0009 	add.w	r0, sp, #9
 800f77e:	f00d f896 	bl	801c8ae <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
 800f782:	2301      	movs	r3, #1
 800f784:	f88d 3008 	strb.w	r3, [sp, #8]
 800f788:	e79f      	b.n	800f6ca <enh_conn_complete+0x82>
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
 800f78a:	4b31      	ldr	r3, [pc, #196]	; (800f850 <enh_conn_complete+0x208>)
 800f78c:	f893 0037 	ldrb.w	r0, [r3, #55]	; 0x37
 800f790:	e78d      	b.n	800f6ae <enh_conn_complete+0x66>
		struct bt_le_ext_adv *adv = bt_adv_lookup_legacy();
 800f792:	f7fe f983 	bl	800da9c <bt_adv_lookup_legacy>
		atomic_clear_bit(adv->flags, BT_ADV_ENABLED);
 800f796:	3014      	adds	r0, #20
 800f798:	f3bf 8f5b 	dmb	ish
 800f79c:	e850 3f00 	ldrex	r3, [r0]
 800f7a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f7a4:	e840 3200 	strex	r2, r3, [r0]
 800f7a8:	2a00      	cmp	r2, #0
 800f7aa:	d1f7      	bne.n	800f79c <enh_conn_complete+0x154>
 800f7ac:	f3bf 8f5b 	dmb	ish
}
 800f7b0:	e793      	b.n	800f6da <enh_conn_complete+0x92>
		BT_ERR("No pending conn for peer %s",
 800f7b2:	2301      	movs	r3, #1
 800f7b4:	f363 0502 	bfi	r5, r3, #0, #3
 800f7b8:	f36f 05c5 	bfc	r5, #3, #3
 800f7bc:	4b20      	ldr	r3, [pc, #128]	; (800f840 <enh_conn_complete+0x1f8>)
 800f7be:	4a21      	ldr	r2, [pc, #132]	; (800f844 <enh_conn_complete+0x1fc>)
 800f7c0:	1a9b      	subs	r3, r3, r2
 800f7c2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800f7c6:	f363 158f 	bfi	r5, r3, #6, #10
 800f7ca:	1d20      	adds	r0, r4, #4
 800f7cc:	f7fc f9bc 	bl	800bb48 <bt_addr_le_str_real>
 800f7d0:	f7f6 fce6 	bl	80061a0 <log_strdup>
 800f7d4:	4601      	mov	r1, r0
 800f7d6:	462a      	mov	r2, r5
 800f7d8:	481e      	ldr	r0, [pc, #120]	; (800f854 <enh_conn_complete+0x20c>)
 800f7da:	f7f6 feb1 	bl	8006540 <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
 800f7de:	211f      	movs	r1, #31
 800f7e0:	4638      	mov	r0, r7
 800f7e2:	f00d fb9c 	bl	801cf1e <bt_hci_disconnect>
		return;
 800f7e6:	e74e      	b.n	800f686 <enh_conn_complete+0x3e>
	memcpy(dst, src, sizeof(*dst));
 800f7e8:	2207      	movs	r2, #7
 800f7ea:	a902      	add	r1, sp, #8
 800f7ec:	f105 008f 	add.w	r0, r5, #143	; 0x8f
 800f7f0:	f00d f85d 	bl	801c8ae <memcpy>
						&bt_dev.id_addr[conn->id]);
 800f7f4:	7a29      	ldrb	r1, [r5, #8]
 800f7f6:	4c16      	ldr	r4, [pc, #88]	; (800f850 <enh_conn_complete+0x208>)
 800f7f8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800f7fc:	2207      	movs	r2, #7
 800f7fe:	4421      	add	r1, r4
 800f800:	f105 0096 	add.w	r0, r5, #150	; 0x96
 800f804:	f00d f853 	bl	801c8ae <memcpy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
 800f808:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800f80c:	2200      	movs	r2, #0
 800f80e:	f001 0340 	and.w	r3, r1, #64	; 0x40
 800f812:	4313      	orrs	r3, r2
 800f814:	d090      	beq.n	800f738 <enh_conn_complete+0xf0>
			bt_le_adv_resume();
 800f816:	f00d fcd2 	bl	801d1be <bt_le_adv_resume>
 800f81a:	e78d      	b.n	800f738 <enh_conn_complete+0xf0>
 800f81c:	2207      	movs	r2, #7
 800f81e:	a902      	add	r1, sp, #8
 800f820:	f105 0096 	add.w	r0, r5, #150	; 0x96
 800f824:	f00d f843 	bl	801c8ae <memcpy>
					&bt_dev.id_addr[conn->id]);
 800f828:	7a29      	ldrb	r1, [r5, #8]
 800f82a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800f82e:	2207      	movs	r2, #7
 800f830:	4b07      	ldr	r3, [pc, #28]	; (800f850 <enh_conn_complete+0x208>)
 800f832:	4419      	add	r1, r3
 800f834:	f105 008f 	add.w	r0, r5, #143	; 0x8f
 800f838:	f00d f839 	bl	801c8ae <memcpy>
}
 800f83c:	e77f      	b.n	800f73e <enh_conn_complete+0xf6>
 800f83e:	bf00      	nop
 800f840:	08022bc8 	.word	0x08022bc8
 800f844:	08022b90 	.word	0x08022b90
 800f848:	08026c60 	.word	0x08026c60
 800f84c:	20000094 	.word	0x20000094
 800f850:	20000000 	.word	0x20000000
 800f854:	08026c7c 	.word	0x08026c7c

0800f858 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
 800f858:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800f85a:	f3bf 8f5b 	dmb	ish
 800f85e:	4b44      	ldr	r3, [pc, #272]	; (800f970 <bt_le_scan_start+0x118>)
 800f860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f864:	f3bf 8f5b 	dmb	ish
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
 800f868:	f013 0f02 	tst.w	r3, #2
 800f86c:	d070      	beq.n	800f950 <bt_le_scan_start+0xf8>
 800f86e:	4604      	mov	r4, r0
 800f870:	460d      	mov	r5, r1
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
 800f872:	f00d f948 	bl	801cb06 <valid_le_scan_param>
 800f876:	2800      	cmp	r0, #0
 800f878:	d06d      	beq.n	800f956 <bt_le_scan_start+0xfe>
		return -EINVAL;
	}

	if (param->type && !bt_le_scan_random_addr_check()) {
 800f87a:	7823      	ldrb	r3, [r4, #0]
 800f87c:	b11b      	cbz	r3, 800f886 <bt_le_scan_start+0x2e>
 800f87e:	f00d facb 	bl	801ce18 <bt_le_scan_random_addr_check>
 800f882:	2800      	cmp	r0, #0
 800f884:	d06a      	beq.n	800f95c <bt_le_scan_start+0x104>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800f886:	4b3b      	ldr	r3, [pc, #236]	; (800f974 <bt_le_scan_start+0x11c>)
 800f888:	f3bf 8f5b 	dmb	ish
 800f88c:	e853 2f00 	ldrex	r2, [r3]
 800f890:	f042 0140 	orr.w	r1, r2, #64	; 0x40
 800f894:	e843 1000 	strex	r0, r1, [r3]
 800f898:	2800      	cmp	r0, #0
 800f89a:	d1f7      	bne.n	800f88c <bt_le_scan_start+0x34>
 800f89c:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
 800f8a0:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f8a4:	d15d      	bne.n	800f962 <bt_le_scan_start+0x10a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800f8a6:	f3bf 8f5b 	dmb	ish
 800f8aa:	3b94      	subs	r3, #148	; 0x94
 800f8ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f8b0:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
 800f8b4:	f013 0f20 	tst.w	r3, #32
 800f8b8:	d003      	beq.n	800f8c2 <bt_le_scan_start+0x6a>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
 800f8ba:	2000      	movs	r0, #0
 800f8bc:	f00d fa2c 	bl	801cd18 <set_le_scan_enable>
		if (err) {
 800f8c0:	b9e0      	cbnz	r0, 800f8fc <bt_le_scan_start+0xa4>
			return err;
		}
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
			  param->options & BT_LE_SCAN_OPT_FILTER_DUPLICATE);
 800f8c2:	6863      	ldr	r3, [r4, #4]
	if (val) {
 800f8c4:	f013 0f01 	tst.w	r3, #1
 800f8c8:	d026      	beq.n	800f918 <bt_le_scan_start+0xc0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800f8ca:	4b2a      	ldr	r3, [pc, #168]	; (800f974 <bt_le_scan_start+0x11c>)
 800f8cc:	f3bf 8f5b 	dmb	ish
 800f8d0:	e853 2f00 	ldrex	r2, [r3]
 800f8d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f8d8:	e843 2100 	strex	r1, r2, [r3]
 800f8dc:	2900      	cmp	r1, #0
 800f8de:	d1f7      	bne.n	800f8d0 <bt_le_scan_start+0x78>
 800f8e0:	f3bf 8f5b 	dmb	ish
			phy_coded = &param_coded;
		}

		err = start_le_scan_ext(phy_1m, phy_coded, param->timeout);
	} else {
		if (param->timeout) {
 800f8e4:	89a3      	ldrh	r3, [r4, #12]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d13e      	bne.n	800f968 <bt_le_scan_start+0x110>
			return -ENOTSUP;
		}

		err = start_le_scan_legacy(param->type, param->interval,
 800f8ea:	8962      	ldrh	r2, [r4, #10]
 800f8ec:	8921      	ldrh	r1, [r4, #8]
 800f8ee:	7820      	ldrb	r0, [r4, #0]
 800f8f0:	f7fe f90c 	bl	800db0c <start_le_scan_legacy>
					   param->window);
	}

	if (err) {
 800f8f4:	b9f0      	cbnz	r0, 800f934 <bt_le_scan_start+0xdc>
		atomic_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN);
		return err;
	}

	scan_dev_found_cb = cb;
 800f8f6:	4b20      	ldr	r3, [pc, #128]	; (800f978 <bt_le_scan_start+0x120>)
 800f8f8:	601d      	str	r5, [r3, #0]

	return 0;
}
 800f8fa:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800f8fc:	4b1d      	ldr	r3, [pc, #116]	; (800f974 <bt_le_scan_start+0x11c>)
 800f8fe:	f3bf 8f5b 	dmb	ish
 800f902:	e853 2f00 	ldrex	r2, [r3]
 800f906:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f90a:	e843 2100 	strex	r1, r2, [r3]
 800f90e:	2900      	cmp	r1, #0
 800f910:	d1f7      	bne.n	800f902 <bt_le_scan_start+0xaa>
 800f912:	f3bf 8f5b 	dmb	ish
			return err;
 800f916:	e7f0      	b.n	800f8fa <bt_le_scan_start+0xa2>
 800f918:	4b16      	ldr	r3, [pc, #88]	; (800f974 <bt_le_scan_start+0x11c>)
 800f91a:	f3bf 8f5b 	dmb	ish
 800f91e:	e853 2f00 	ldrex	r2, [r3]
 800f922:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f926:	e843 2100 	strex	r1, r2, [r3]
 800f92a:	2900      	cmp	r1, #0
 800f92c:	d1f7      	bne.n	800f91e <bt_le_scan_start+0xc6>
 800f92e:	f3bf 8f5b 	dmb	ish
 800f932:	e7d7      	b.n	800f8e4 <bt_le_scan_start+0x8c>
 800f934:	4b0f      	ldr	r3, [pc, #60]	; (800f974 <bt_le_scan_start+0x11c>)
 800f936:	f3bf 8f5b 	dmb	ish
 800f93a:	e853 2f00 	ldrex	r2, [r3]
 800f93e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f942:	e843 2100 	strex	r1, r2, [r3]
 800f946:	2900      	cmp	r1, #0
 800f948:	d1f7      	bne.n	800f93a <bt_le_scan_start+0xe2>
 800f94a:	f3bf 8f5b 	dmb	ish
		return err;
 800f94e:	e7d4      	b.n	800f8fa <bt_le_scan_start+0xa2>
		return -EAGAIN;
 800f950:	f06f 000a 	mvn.w	r0, #10
 800f954:	e7d1      	b.n	800f8fa <bt_le_scan_start+0xa2>
		return -EINVAL;
 800f956:	f06f 0015 	mvn.w	r0, #21
 800f95a:	e7ce      	b.n	800f8fa <bt_le_scan_start+0xa2>
		return -EINVAL;
 800f95c:	f06f 0015 	mvn.w	r0, #21
 800f960:	e7cb      	b.n	800f8fa <bt_le_scan_start+0xa2>
		return -EALREADY;
 800f962:	f06f 0044 	mvn.w	r0, #68	; 0x44
 800f966:	e7c8      	b.n	800f8fa <bt_le_scan_start+0xa2>
			return -ENOTSUP;
 800f968:	f06f 0022 	mvn.w	r0, #34	; 0x22
 800f96c:	e7c5      	b.n	800f8fa <bt_le_scan_start+0xa2>
 800f96e:	bf00      	nop
 800f970:	20000000 	.word	0x20000000
 800f974:	20000094 	.word	0x20000094
 800f978:	20004178 	.word	0x20004178

0800f97c <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
 800f97c:	b508      	push	{r3, lr}
 800f97e:	4b0c      	ldr	r3, [pc, #48]	; (800f9b0 <bt_le_scan_stop+0x34>)
 800f980:	f3bf 8f5b 	dmb	ish
 800f984:	e853 2f00 	ldrex	r2, [r3]
 800f988:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 800f98c:	e843 1000 	strex	r0, r1, [r3]
 800f990:	2800      	cmp	r0, #0
 800f992:	d1f7      	bne.n	800f984 <bt_le_scan_stop+0x8>
 800f994:	f3bf 8f5b 	dmb	ish
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
 800f998:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f99c:	d005      	beq.n	800f9aa <bt_le_scan_stop+0x2e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
 800f99e:	2000      	movs	r0, #0
 800f9a0:	4b04      	ldr	r3, [pc, #16]	; (800f9b4 <bt_le_scan_stop+0x38>)
 800f9a2:	6018      	str	r0, [r3, #0]
#if defined(CONFIG_BT_SMP)
		pending_id_keys_update();
#endif
	}

	return bt_le_scan_update(false);
 800f9a4:	f7fe fc16 	bl	800e1d4 <bt_le_scan_update>
}
 800f9a8:	bd08      	pop	{r3, pc}
		return -EALREADY;
 800f9aa:	f06f 0044 	mvn.w	r0, #68	; 0x44
 800f9ae:	e7fb      	b.n	800f9a8 <bt_le_scan_stop+0x2c>
 800f9b0:	20000094 	.word	0x20000094
 800f9b4:	20004178 	.word	0x20004178

0800f9b8 <bt_buf_get_rx>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
				    buf, NULL);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
 800f9b8:	b538      	push	{r3, r4, r5, lr}
 800f9ba:	4605      	mov	r5, r0
	if (IS_ENABLED(CONFIG_BT_ISO) && type == BT_BUF_ISO_IN) {
		return bt_iso_get_rx(timeout);
	}

#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	if (type == BT_BUF_EVT) {
 800f9bc:	2801      	cmp	r0, #1
 800f9be:	d00c      	beq.n	800f9da <bt_buf_get_rx+0x22>
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
 800f9c0:	4808      	ldr	r0, [pc, #32]	; (800f9e4 <bt_buf_get_rx+0x2c>)
 800f9c2:	f010 fcd8 	bl	8020376 <net_buf_alloc_fixed>
 800f9c6:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
 800f9c8:	b12c      	cbz	r4, 800f9d6 <bt_buf_get_rx+0x1e>
		net_buf_reserve(buf, BT_BUF_RESERVE);
 800f9ca:	2100      	movs	r1, #0
 800f9cc:	f104 0008 	add.w	r0, r4, #8
 800f9d0:	f010 fcf9 	bl	80203c6 <net_buf_simple_reserve>
	*(uint8_t *)net_buf_user_data(buf) = type;
 800f9d4:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
 800f9d6:	4620      	mov	r0, r4
 800f9d8:	bd38      	pop	{r3, r4, r5, pc}
		buf = net_buf_alloc(&hci_rx_pool, timeout);
 800f9da:	4803      	ldr	r0, [pc, #12]	; (800f9e8 <bt_buf_get_rx+0x30>)
 800f9dc:	f010 fccb 	bl	8020376 <net_buf_alloc_fixed>
 800f9e0:	4604      	mov	r4, r0
 800f9e2:	e7f1      	b.n	800f9c8 <bt_buf_get_rx+0x10>
 800f9e4:	200010b0 	.word	0x200010b0
 800f9e8:	200011a0 	.word	0x200011a0

0800f9ec <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
 800f9ec:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 800f9ee:	f04f 0310 	mov.w	r3, #16
 800f9f2:	f3ef 8211 	mrs	r2, BASEPRI
 800f9f6:	f383 8811 	msr	BASEPRI, r3
 800f9fa:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
 800f9fe:	4b0e      	ldr	r3, [pc, #56]	; (800fa38 <bt_buf_get_cmd_complete+0x4c>)
 800fa00:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
	bt_dev.sent_cmd = NULL;
 800fa04:	2500      	movs	r5, #0
 800fa06:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	__asm__ volatile(
 800fa0a:	f382 8811 	msr	BASEPRI, r2
 800fa0e:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
 800fa12:	b14c      	cbz	r4, 800fa28 <bt_buf_get_cmd_complete+0x3c>
 800fa14:	2301      	movs	r3, #1
 800fa16:	7523      	strb	r3, [r4, #20]
		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0U;
 800fa18:	4629      	mov	r1, r5
 800fa1a:	81a5      	strh	r5, [r4, #12]
		net_buf_reserve(buf, BT_BUF_RESERVE);
 800fa1c:	f104 0008 	add.w	r0, r4, #8
 800fa20:	f010 fcd1 	bl	80203c6 <net_buf_simple_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
 800fa24:	4620      	mov	r0, r4
 800fa26:	bd38      	pop	{r3, r4, r5, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
 800fa28:	4602      	mov	r2, r0
 800fa2a:	460b      	mov	r3, r1
 800fa2c:	2001      	movs	r0, #1
 800fa2e:	f7ff ffc3 	bl	800f9b8 <bt_buf_get_rx>
 800fa32:	4604      	mov	r4, r0
 800fa34:	e7f6      	b.n	800fa24 <bt_buf_get_cmd_complete+0x38>
 800fa36:	bf00      	nop
 800fa38:	20000000 	.word	0x20000000

0800fa3c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable, k_timeout_t timeout)
{
 800fa3c:	b510      	push	{r4, lr}
	switch (evt) {
 800fa3e:	280f      	cmp	r0, #15
 800fa40:	d90d      	bls.n	800fa5e <bt_buf_get_evt+0x22>
 800fa42:	2813      	cmp	r0, #19
 800fa44:	d10d      	bne.n	800fa62 <bt_buf_get_evt+0x26>
#if defined(CONFIG_BT_CONN)
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		{
			struct net_buf *buf;

			buf = net_buf_alloc(&num_complete_pool, timeout);
 800fa46:	4814      	ldr	r0, [pc, #80]	; (800fa98 <bt_buf_get_evt+0x5c>)
 800fa48:	f010 fc95 	bl	8020376 <net_buf_alloc_fixed>
			if (buf) {
 800fa4c:	4604      	mov	r4, r0
 800fa4e:	b198      	cbz	r0, 800fa78 <bt_buf_get_evt+0x3c>
				net_buf_reserve(buf, BT_BUF_RESERVE);
 800fa50:	2100      	movs	r1, #0
 800fa52:	3008      	adds	r0, #8
 800fa54:	f010 fcb7 	bl	80203c6 <net_buf_simple_reserve>
 800fa58:	2301      	movs	r3, #1
 800fa5a:	7523      	strb	r3, [r4, #20]
}
 800fa5c:	e00c      	b.n	800fa78 <bt_buf_get_evt+0x3c>
	switch (evt) {
 800fa5e:	280e      	cmp	r0, #14
 800fa60:	d205      	bcs.n	800fa6e <bt_buf_get_evt+0x32>
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return bt_buf_get_cmd_complete(timeout);
	default:
#if defined(CONFIG_BT_DISCARDABLE_BUF_COUNT)
		if (discardable) {
 800fa62:	b959      	cbnz	r1, 800fa7c <bt_buf_get_evt+0x40>

			return buf;
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
 800fa64:	2001      	movs	r0, #1
 800fa66:	f7ff ffa7 	bl	800f9b8 <bt_buf_get_rx>
 800fa6a:	4604      	mov	r4, r0
 800fa6c:	e004      	b.n	800fa78 <bt_buf_get_evt+0x3c>
		return bt_buf_get_cmd_complete(timeout);
 800fa6e:	4610      	mov	r0, r2
 800fa70:	4619      	mov	r1, r3
 800fa72:	f7ff ffbb 	bl	800f9ec <bt_buf_get_cmd_complete>
 800fa76:	4604      	mov	r4, r0
	}
}
 800fa78:	4620      	mov	r0, r4
 800fa7a:	bd10      	pop	{r4, pc}
			buf = net_buf_alloc(&discardable_pool, timeout);
 800fa7c:	4807      	ldr	r0, [pc, #28]	; (800fa9c <bt_buf_get_evt+0x60>)
 800fa7e:	f010 fc7a 	bl	8020376 <net_buf_alloc_fixed>
			if (buf) {
 800fa82:	4604      	mov	r4, r0
 800fa84:	2800      	cmp	r0, #0
 800fa86:	d0f7      	beq.n	800fa78 <bt_buf_get_evt+0x3c>
				net_buf_reserve(buf, BT_BUF_RESERVE);
 800fa88:	2100      	movs	r1, #0
 800fa8a:	3008      	adds	r0, #8
 800fa8c:	f010 fc9b 	bl	80203c6 <net_buf_simple_reserve>
	*(uint8_t *)net_buf_user_data(buf) = type;
 800fa90:	2301      	movs	r3, #1
 800fa92:	7523      	strb	r3, [r4, #20]
			return buf;
 800fa94:	e7f0      	b.n	800fa78 <bt_buf_get_evt+0x3c>
 800fa96:	bf00      	nop
 800fa98:	200011c8 	.word	0x200011c8
 800fa9c:	20001128 	.word	0x20001128

0800faa0 <bt_pub_key_gen>:
}
#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
 800faa0:	b510      	push	{r4, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
 800faa2:	4b34      	ldr	r3, [pc, #208]	; (800fb74 <bt_pub_key_gen+0xd4>)
 800faa4:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800faa8:	f003 0306 	and.w	r3, r3, #6
 800faac:	2b06      	cmp	r3, #6
 800faae:	d115      	bne.n	800fadc <bt_pub_key_gen+0x3c>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
		return -ENOTSUP;
	}

	new_cb->_next = pub_key_cb;
 800fab0:	4b31      	ldr	r3, [pc, #196]	; (800fb78 <bt_pub_key_gen+0xd8>)
 800fab2:	681a      	ldr	r2, [r3, #0]
 800fab4:	6042      	str	r2, [r0, #4]
	pub_key_cb = new_cb;
 800fab6:	6018      	str	r0, [r3, #0]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800fab8:	4b30      	ldr	r3, [pc, #192]	; (800fb7c <bt_pub_key_gen+0xdc>)
 800faba:	f3bf 8f5b 	dmb	ish
 800fabe:	e853 2f00 	ldrex	r2, [r3]
 800fac2:	f042 0110 	orr.w	r1, r2, #16
 800fac6:	e843 1000 	strex	r0, r1, [r3]
 800faca:	2800      	cmp	r0, #0
 800facc:	d1f7      	bne.n	800fabe <bt_pub_key_gen+0x1e>
 800face:	f3bf 8f5b 	dmb	ish

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
 800fad2:	f012 0f10 	tst.w	r2, #16
 800fad6:	d015      	beq.n	800fb04 <bt_pub_key_gen+0x64>
		return 0;
 800fad8:	2400      	movs	r4, #0
 800fada:	e027      	b.n	800fb2c <bt_pub_key_gen+0x8c>
		BT_WARN("ECC HCI commands not available");
 800fadc:	f04f 0100 	mov.w	r1, #0
 800fae0:	2302      	movs	r3, #2
 800fae2:	f363 0102 	bfi	r1, r3, #0, #3
 800fae6:	f36f 01c5 	bfc	r1, #3, #3
 800faea:	4b25      	ldr	r3, [pc, #148]	; (800fb80 <bt_pub_key_gen+0xe0>)
 800faec:	4a25      	ldr	r2, [pc, #148]	; (800fb84 <bt_pub_key_gen+0xe4>)
 800faee:	1a9b      	subs	r3, r3, r2
 800faf0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800faf4:	f363 118f 	bfi	r1, r3, #6, #10
 800faf8:	4823      	ldr	r0, [pc, #140]	; (800fb88 <bt_pub_key_gen+0xe8>)
 800fafa:	f7f6 fe91 	bl	8006820 <log_0>
		return -ENOTSUP;
 800fafe:	f06f 0422 	mvn.w	r4, #34	; 0x22
 800fb02:	e013      	b.n	800fb2c <bt_pub_key_gen+0x8c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800fb04:	f3bf 8f5b 	dmb	ish
 800fb08:	e853 2f00 	ldrex	r2, [r3]
 800fb0c:	f022 0208 	bic.w	r2, r2, #8
 800fb10:	e843 2100 	strex	r1, r2, [r3]
 800fb14:	2900      	cmp	r1, #0
 800fb16:	d1f7      	bne.n	800fb08 <bt_pub_key_gen+0x68>
 800fb18:	f3bf 8f5b 	dmb	ish
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	4611      	mov	r1, r2
 800fb20:	f242 0025 	movw	r0, #8229	; 0x2025
 800fb24:	f7fd fafe 	bl	800d124 <bt_hci_cmd_send_sync>
	if (err) {
 800fb28:	4604      	mov	r4, r0
 800fb2a:	b908      	cbnz	r0, 800fb30 <bt_pub_key_gen+0x90>
		pub_key_cb = NULL;
		return err;
	}

	return 0;
}
 800fb2c:	4620      	mov	r0, r4
 800fb2e:	bd10      	pop	{r4, pc}
		BT_ERR("Sending LE P256 Public Key command failed");
 800fb30:	f04f 0100 	mov.w	r1, #0
 800fb34:	2301      	movs	r3, #1
 800fb36:	f363 0102 	bfi	r1, r3, #0, #3
 800fb3a:	f36f 01c5 	bfc	r1, #3, #3
 800fb3e:	4b10      	ldr	r3, [pc, #64]	; (800fb80 <bt_pub_key_gen+0xe0>)
 800fb40:	4a10      	ldr	r2, [pc, #64]	; (800fb84 <bt_pub_key_gen+0xe4>)
 800fb42:	1a9b      	subs	r3, r3, r2
 800fb44:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800fb48:	f363 118f 	bfi	r1, r3, #6, #10
 800fb4c:	480f      	ldr	r0, [pc, #60]	; (800fb8c <bt_pub_key_gen+0xec>)
 800fb4e:	f7f6 fe67 	bl	8006820 <log_0>
 800fb52:	4b0a      	ldr	r3, [pc, #40]	; (800fb7c <bt_pub_key_gen+0xdc>)
 800fb54:	f3bf 8f5b 	dmb	ish
 800fb58:	e853 2f00 	ldrex	r2, [r3]
 800fb5c:	f022 0210 	bic.w	r2, r2, #16
 800fb60:	e843 2100 	strex	r1, r2, [r3]
 800fb64:	2900      	cmp	r1, #0
 800fb66:	d1f7      	bne.n	800fb58 <bt_pub_key_gen+0xb8>
 800fb68:	f3bf 8f5b 	dmb	ish
		pub_key_cb = NULL;
 800fb6c:	4b02      	ldr	r3, [pc, #8]	; (800fb78 <bt_pub_key_gen+0xd8>)
 800fb6e:	2200      	movs	r2, #0
 800fb70:	601a      	str	r2, [r3, #0]
		return err;
 800fb72:	e7db      	b.n	800fb2c <bt_pub_key_gen+0x8c>
 800fb74:	20000000 	.word	0x20000000
 800fb78:	20004168 	.word	0x20004168
 800fb7c:	20000094 	.word	0x20000094
 800fb80:	08022bc8 	.word	0x08022bc8
 800fb84:	08022b90 	.word	0x08022b90
 800fb88:	08026c98 	.word	0x08026c98
 800fb8c:	08026cb8 	.word	0x08026cb8

0800fb90 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800fb90:	f3bf 8f5b 	dmb	ish
 800fb94:	4b05      	ldr	r3, [pc, #20]	; (800fbac <bt_pub_key_get+0x1c>)
 800fb96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fb9a:	f3bf 8f5b 	dmb	ish

const uint8_t *bt_pub_key_get(void)
{
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
 800fb9e:	f013 0f08 	tst.w	r3, #8
 800fba2:	d001      	beq.n	800fba8 <bt_pub_key_get+0x18>
		return pub_key;
 800fba4:	4802      	ldr	r0, [pc, #8]	; (800fbb0 <bt_pub_key_get+0x20>)
	}

	return NULL;
}
 800fba6:	4770      	bx	lr
	return NULL;
 800fba8:	2000      	movs	r0, #0
 800fbaa:	4770      	bx	lr
 800fbac:	20000000 	.word	0x20000000
 800fbb0:	20004128 	.word	0x20004128

0800fbb4 <bt_dh_key_gen>:

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
 800fbb4:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
 800fbb6:	4b20      	ldr	r3, [pc, #128]	; (800fc38 <bt_dh_key_gen+0x84>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	bb6b      	cbnz	r3, 800fc18 <bt_dh_key_gen+0x64>
 800fbbc:	4605      	mov	r5, r0
 800fbbe:	f3bf 8f5b 	dmb	ish
 800fbc2:	4b1e      	ldr	r3, [pc, #120]	; (800fc3c <bt_dh_key_gen+0x88>)
 800fbc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fbc8:	f3bf 8f5b 	dmb	ish
 800fbcc:	f013 0f10 	tst.w	r3, #16
 800fbd0:	d122      	bne.n	800fc18 <bt_dh_key_gen+0x64>
 800fbd2:	f3bf 8f5b 	dmb	ish
 800fbd6:	4b19      	ldr	r3, [pc, #100]	; (800fc3c <bt_dh_key_gen+0x88>)
 800fbd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fbdc:	f3bf 8f5b 	dmb	ish
		return -EBUSY;
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
 800fbe0:	f013 0f08 	tst.w	r3, #8
 800fbe4:	d025      	beq.n	800fc32 <bt_dh_key_gen+0x7e>
		return -EADDRNOTAVAIL;
	}

	dh_key_cb = cb;
 800fbe6:	4b14      	ldr	r3, [pc, #80]	; (800fc38 <bt_dh_key_gen+0x84>)
 800fbe8:	6019      	str	r1, [r3, #0]

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
 800fbea:	2140      	movs	r1, #64	; 0x40
 800fbec:	f242 0026 	movw	r0, #8230	; 0x2026
 800fbf0:	f7fd fa5c 	bl	800d0ac <bt_hci_cmd_create>
	if (!buf) {
 800fbf4:	4604      	mov	r4, r0
 800fbf6:	b190      	cbz	r0, 800fc1e <bt_dh_key_gen+0x6a>
		dh_key_cb = NULL;
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
 800fbf8:	2140      	movs	r1, #64	; 0x40
 800fbfa:	3008      	adds	r0, #8
 800fbfc:	f010 fc3e 	bl	802047c <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
 800fc00:	2240      	movs	r2, #64	; 0x40
 800fc02:	4629      	mov	r1, r5
 800fc04:	f00c fe53 	bl	801c8ae <memcpy>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
 800fc08:	2200      	movs	r2, #0
 800fc0a:	4621      	mov	r1, r4
 800fc0c:	f242 0026 	movw	r0, #8230	; 0x2026
 800fc10:	f7fd fa88 	bl	800d124 <bt_hci_cmd_send_sync>
	if (err) {
 800fc14:	b948      	cbnz	r0, 800fc2a <bt_dh_key_gen+0x76>
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
 800fc16:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
 800fc18:	f06f 000f 	mvn.w	r0, #15
 800fc1c:	e7fb      	b.n	800fc16 <bt_dh_key_gen+0x62>
		dh_key_cb = NULL;
 800fc1e:	4b06      	ldr	r3, [pc, #24]	; (800fc38 <bt_dh_key_gen+0x84>)
 800fc20:	2200      	movs	r2, #0
 800fc22:	601a      	str	r2, [r3, #0]
		return -ENOBUFS;
 800fc24:	f06f 0036 	mvn.w	r0, #54	; 0x36
 800fc28:	e7f5      	b.n	800fc16 <bt_dh_key_gen+0x62>
		dh_key_cb = NULL;
 800fc2a:	4b03      	ldr	r3, [pc, #12]	; (800fc38 <bt_dh_key_gen+0x84>)
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	601a      	str	r2, [r3, #0]
		return err;
 800fc30:	e7f1      	b.n	800fc16 <bt_dh_key_gen+0x62>
		return -EADDRNOTAVAIL;
 800fc32:	f06f 0030 	mvn.w	r0, #48	; 0x30
 800fc36:	e7ee      	b.n	800fc16 <bt_dh_key_gen+0x62>
 800fc38:	20004124 	.word	0x20004124
 800fc3c:	20000000 	.word	0x20000000

0800fc40 <prng_reseed>:
#include "hci_core.h"

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
{
 800fc40:	b530      	push	{r4, r5, lr}
 800fc42:	b08f      	sub	sp, #60	; 0x3c
 800fc44:	4605      	mov	r5, r0
	uint8_t seed[32];
	int64_t extra;
	size_t i;
	int ret;

	for (i = 0; i < (sizeof(seed) / 8); i++) {
 800fc46:	2400      	movs	r4, #0
 800fc48:	2c03      	cmp	r4, #3
 800fc4a:	d815      	bhi.n	800fc78 <prng_reseed+0x38>
		struct bt_hci_rp_le_rand *rp;
		struct net_buf *rsp;

		ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
 800fc4c:	aa03      	add	r2, sp, #12
 800fc4e:	2100      	movs	r1, #0
 800fc50:	f242 0018 	movw	r0, #8216	; 0x2018
 800fc54:	f7fd fa66 	bl	800d124 <bt_hci_cmd_send_sync>
		if (ret) {
 800fc58:	4603      	mov	r3, r0
 800fc5a:	b9f8      	cbnz	r0, 800fc9c <prng_reseed+0x5c>
			return ret;
		}

		rp = (void *)rsp->data;
 800fc5c:	9b03      	ldr	r3, [sp, #12]
 800fc5e:	6899      	ldr	r1, [r3, #8]
		memcpy(&seed[i * 8], rp->rand, 8);
 800fc60:	2208      	movs	r2, #8
 800fc62:	3101      	adds	r1, #1
 800fc64:	ab06      	add	r3, sp, #24
 800fc66:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
 800fc6a:	f00c fe20 	bl	801c8ae <memcpy>

		net_buf_unref(rsp);
 800fc6e:	9803      	ldr	r0, [sp, #12]
 800fc70:	f010 fbba 	bl	80203e8 <net_buf_unref>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
 800fc74:	3401      	adds	r4, #1
 800fc76:	e7e7      	b.n	800fc48 <prng_reseed+0x8>
	return z_impl_k_uptime_ticks();
 800fc78:	f012 fc10 	bl	802249c <z_impl_k_uptime_ticks>
 800fc7c:	220a      	movs	r2, #10
 800fc7e:	2300      	movs	r3, #0
 800fc80:	f7f0 fa82 	bl	8000188 <__aeabi_uldivmod>
	}

	extra = k_uptime_get();
 800fc84:	e9cd 0104 	strd	r0, r1, [sp, #16]

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
 800fc88:	2308      	movs	r3, #8
 800fc8a:	9300      	str	r3, [sp, #0]
 800fc8c:	ab04      	add	r3, sp, #16
 800fc8e:	2220      	movs	r2, #32
 800fc90:	a906      	add	r1, sp, #24
 800fc92:	4628      	mov	r0, r5
 800fc94:	f00c fbd0 	bl	801c438 <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
 800fc98:	b118      	cbz	r0, 800fca2 <prng_reseed+0x62>
		BT_ERR("Failed to re-seed PRNG");
		return -EIO;
	}

	return 0;
 800fc9a:	2300      	movs	r3, #0
}
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	b00f      	add	sp, #60	; 0x3c
 800fca0:	bd30      	pop	{r4, r5, pc}
		BT_ERR("Failed to re-seed PRNG");
 800fca2:	f04f 0100 	mov.w	r1, #0
 800fca6:	2301      	movs	r3, #1
 800fca8:	f363 0102 	bfi	r1, r3, #0, #3
 800fcac:	f36f 01c5 	bfc	r1, #3, #3
 800fcb0:	4b06      	ldr	r3, [pc, #24]	; (800fccc <prng_reseed+0x8c>)
 800fcb2:	4a07      	ldr	r2, [pc, #28]	; (800fcd0 <prng_reseed+0x90>)
 800fcb4:	1a9b      	subs	r3, r3, r2
 800fcb6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800fcba:	f363 118f 	bfi	r1, r3, #6, #10
 800fcbe:	4805      	ldr	r0, [pc, #20]	; (800fcd4 <prng_reseed+0x94>)
 800fcc0:	f7f6 fdae 	bl	8006820 <log_0>
		return -EIO;
 800fcc4:	f06f 0304 	mvn.w	r3, #4
 800fcc8:	e7e8      	b.n	800fc9c <prng_reseed+0x5c>
 800fcca:	bf00      	nop
 800fccc:	08022ba8 	.word	0x08022ba8
 800fcd0:	08022b90 	.word	0x08022b90
 800fcd4:	08026de4 	.word	0x08026de4

0800fcd8 <prng_init>:
	struct bt_hci_rp_le_rand *rp;
	struct net_buf *rsp;
	int ret;

	/* Check first that HCI_LE_Rand is supported */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
 800fcd8:	4b1b      	ldr	r3, [pc, #108]	; (800fd48 <prng_init+0x70>)
 800fcda:	f993 3063 	ldrsb.w	r3, [r3, #99]	; 0x63
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	da2e      	bge.n	800fd40 <prng_init+0x68>
{
 800fce2:	b510      	push	{r4, lr}
 800fce4:	b082      	sub	sp, #8
		return -ENOTSUP;
	}

	ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
 800fce6:	aa01      	add	r2, sp, #4
 800fce8:	2100      	movs	r1, #0
 800fcea:	f242 0018 	movw	r0, #8216	; 0x2018
 800fcee:	f7fd fa19 	bl	800d124 <bt_hci_cmd_send_sync>
	if (ret) {
 800fcf2:	b108      	cbz	r0, 800fcf8 <prng_init+0x20>
		return -EIO;
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
 800fcf4:	b002      	add	sp, #8
 800fcf6:	bd10      	pop	{r4, pc}
	rp = (void *)rsp->data;
 800fcf8:	9b01      	ldr	r3, [sp, #4]
 800fcfa:	6899      	ldr	r1, [r3, #8]
	ret = tc_hmac_prng_init(&prng, rp->rand, sizeof(rp->rand));
 800fcfc:	2208      	movs	r2, #8
 800fcfe:	3101      	adds	r1, #1
 800fd00:	4812      	ldr	r0, [pc, #72]	; (800fd4c <prng_init+0x74>)
 800fd02:	f00c fb76 	bl	801c3f2 <tc_hmac_prng_init>
 800fd06:	4604      	mov	r4, r0
	net_buf_unref(rsp);
 800fd08:	9801      	ldr	r0, [sp, #4]
 800fd0a:	f010 fb6d 	bl	80203e8 <net_buf_unref>
	if (ret == TC_CRYPTO_FAIL) {
 800fd0e:	b11c      	cbz	r4, 800fd18 <prng_init+0x40>
	return prng_reseed(&prng);
 800fd10:	480e      	ldr	r0, [pc, #56]	; (800fd4c <prng_init+0x74>)
 800fd12:	f7ff ff95 	bl	800fc40 <prng_reseed>
 800fd16:	e7ed      	b.n	800fcf4 <prng_init+0x1c>
		BT_ERR("Failed to initialize PRNG");
 800fd18:	f04f 0100 	mov.w	r1, #0
 800fd1c:	2301      	movs	r3, #1
 800fd1e:	f363 0102 	bfi	r1, r3, #0, #3
 800fd22:	f36f 01c5 	bfc	r1, #3, #3
 800fd26:	4b0a      	ldr	r3, [pc, #40]	; (800fd50 <prng_init+0x78>)
 800fd28:	4a0a      	ldr	r2, [pc, #40]	; (800fd54 <prng_init+0x7c>)
 800fd2a:	1a9b      	subs	r3, r3, r2
 800fd2c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800fd30:	f363 118f 	bfi	r1, r3, #6, #10
 800fd34:	4808      	ldr	r0, [pc, #32]	; (800fd58 <prng_init+0x80>)
 800fd36:	f7f6 fd73 	bl	8006820 <log_0>
		return -EIO;
 800fd3a:	f06f 0004 	mvn.w	r0, #4
 800fd3e:	e7d9      	b.n	800fcf4 <prng_init+0x1c>
		return -ENOTSUP;
 800fd40:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 800fd44:	4770      	bx	lr
 800fd46:	bf00      	nop
 800fd48:	20000000 	.word	0x20000000
 800fd4c:	20001c08 	.word	0x20001c08
 800fd50:	08022ba8 	.word	0x08022ba8
 800fd54:	08022b90 	.word	0x08022b90
 800fd58:	08026dfc 	.word	0x08026dfc

0800fd5c <bt_rand>:

int bt_rand(void *buf, size_t len)
{
 800fd5c:	b538      	push	{r3, r4, r5, lr}
 800fd5e:	4604      	mov	r4, r0
 800fd60:	460d      	mov	r5, r1
	int ret;

	ret = tc_hmac_prng_generate(buf, len, &prng);
 800fd62:	4a0c      	ldr	r2, [pc, #48]	; (800fd94 <bt_rand+0x38>)
 800fd64:	f00c fb8a 	bl	801c47c <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
 800fd68:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800fd6c:	d003      	beq.n	800fd76 <bt_rand+0x1a>
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
	}

	if (ret == TC_CRYPTO_SUCCESS) {
 800fd6e:	2801      	cmp	r0, #1
 800fd70:	d10c      	bne.n	800fd8c <bt_rand+0x30>
		return 0;
 800fd72:	2000      	movs	r0, #0
	}

	return -EIO;
}
 800fd74:	bd38      	pop	{r3, r4, r5, pc}
		ret = prng_reseed(&prng);
 800fd76:	4807      	ldr	r0, [pc, #28]	; (800fd94 <bt_rand+0x38>)
 800fd78:	f7ff ff62 	bl	800fc40 <prng_reseed>
		if (ret) {
 800fd7c:	2800      	cmp	r0, #0
 800fd7e:	d1f9      	bne.n	800fd74 <bt_rand+0x18>
		ret = tc_hmac_prng_generate(buf, len, &prng);
 800fd80:	4a04      	ldr	r2, [pc, #16]	; (800fd94 <bt_rand+0x38>)
 800fd82:	4629      	mov	r1, r5
 800fd84:	4620      	mov	r0, r4
 800fd86:	f00c fb79 	bl	801c47c <tc_hmac_prng_generate>
 800fd8a:	e7f0      	b.n	800fd6e <bt_rand+0x12>
	return -EIO;
 800fd8c:	f06f 0004 	mvn.w	r0, #4
 800fd90:	e7f0      	b.n	800fd74 <bt_rand+0x18>
 800fd92:	bf00      	nop
 800fd94:	20001c08 	.word	0x20001c08

0800fd98 <notify_disconnected>:
		bt_gatt_connected(conn);
	}
}

static void notify_disconnected(struct bt_conn *conn)
{
 800fd98:	b538      	push	{r3, r4, r5, lr}
 800fd9a:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
 800fd9c:	4b06      	ldr	r3, [pc, #24]	; (800fdb8 <notify_disconnected+0x20>)
 800fd9e:	681c      	ldr	r4, [r3, #0]
 800fda0:	e000      	b.n	800fda4 <notify_disconnected+0xc>
 800fda2:	69e4      	ldr	r4, [r4, #28]
 800fda4:	b134      	cbz	r4, 800fdb4 <notify_disconnected+0x1c>
		if (cb->disconnected) {
 800fda6:	6863      	ldr	r3, [r4, #4]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d0fa      	beq.n	800fda2 <notify_disconnected+0xa>
			cb->disconnected(conn, conn->err);
 800fdac:	7b29      	ldrb	r1, [r5, #12]
 800fdae:	4628      	mov	r0, r5
 800fdb0:	4798      	blx	r3
 800fdb2:	e7f6      	b.n	800fda2 <notify_disconnected+0xa>
		}
	}
}
 800fdb4:	bd38      	pop	{r3, r4, r5, pc}
 800fdb6:	bf00      	nop
 800fdb8:	20004180 	.word	0x20004180

0800fdbc <create_param_setup>:

	return true;
}

static void create_param_setup(const struct bt_conn_le_create_param *param)
{
 800fdbc:	b430      	push	{r4, r5}
	bt_dev.create_param = *param;
 800fdbe:	4d0c      	ldr	r5, [pc, #48]	; (800fdf0 <create_param_setup+0x34>)
 800fdc0:	f105 0408 	add.w	r4, r5, #8
 800fdc4:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 800fdc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	bt_dev.create_param.timeout =
		(bt_dev.create_param.timeout != 0) ?
 800fdca:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
 800fdcc:	b90b      	cbnz	r3, 800fdd2 <create_param_setup+0x16>
 800fdce:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800fdd2:	4a07      	ldr	r2, [pc, #28]	; (800fdf0 <create_param_setup+0x34>)
 800fdd4:	8293      	strh	r3, [r2, #20]
		bt_dev.create_param.timeout :
		(MSEC_PER_SEC / 10) * CONFIG_BT_CREATE_CONN_TIMEOUT;

	bt_dev.create_param.interval_coded =
		(bt_dev.create_param.interval_coded != 0) ?
 800fdd6:	8a13      	ldrh	r3, [r2, #16]
	bt_dev.create_param.interval_coded =
 800fdd8:	b903      	cbnz	r3, 800fddc <create_param_setup+0x20>
 800fdda:	8993      	ldrh	r3, [r2, #12]
 800fddc:	4a04      	ldr	r2, [pc, #16]	; (800fdf0 <create_param_setup+0x34>)
 800fdde:	8213      	strh	r3, [r2, #16]
		bt_dev.create_param.interval_coded :
		bt_dev.create_param.interval;

	bt_dev.create_param.window_coded =
		(bt_dev.create_param.window_coded != 0) ?
 800fde0:	8a53      	ldrh	r3, [r2, #18]
	bt_dev.create_param.window_coded =
 800fde2:	b903      	cbnz	r3, 800fde6 <create_param_setup+0x2a>
 800fde4:	89d3      	ldrh	r3, [r2, #14]
 800fde6:	4a02      	ldr	r2, [pc, #8]	; (800fdf0 <create_param_setup+0x34>)
 800fde8:	8253      	strh	r3, [r2, #18]
		bt_dev.create_param.window_coded :
		bt_dev.create_param.window;
}
 800fdea:	bc30      	pop	{r4, r5}
 800fdec:	4770      	bx	lr
 800fdee:	bf00      	nop
 800fdf0:	20000000 	.word	0x20000000

0800fdf4 <tx_free>:
{
 800fdf4:	b508      	push	{r3, lr}
 800fdf6:	4601      	mov	r1, r0
	tx->cb = NULL;
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	6043      	str	r3, [r0, #4]
	tx->user_data = NULL;
 800fdfc:	6083      	str	r3, [r0, #8]
	tx->pending_no_cb = 0U;
 800fdfe:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
 800fe00:	4801      	ldr	r0, [pc, #4]	; (800fe08 <tx_free+0x14>)
 800fe02:	f012 f857 	bl	8021eb4 <k_queue_append>
}
 800fe06:	bd08      	pop	{r3, pc}
 800fe08:	20001098 	.word	0x20001098

0800fe0c <conn_tx_alloc>:
{
 800fe0c:	b508      	push	{r3, lr}
	return z_impl_k_current_get();
 800fe0e:	f008 ff15 	bl	8018c3c <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
 800fe12:	4b08      	ldr	r3, [pc, #32]	; (800fe34 <conn_tx_alloc+0x28>)
 800fe14:	4283      	cmp	r3, r0
 800fe16:	d007      	beq.n	800fe28 <conn_tx_alloc+0x1c>
	return z_impl_k_queue_get(queue, timeout);
 800fe18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fe1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fe20:	4805      	ldr	r0, [pc, #20]	; (800fe38 <conn_tx_alloc+0x2c>)
 800fe22:	f008 fb0f 	bl	8018444 <z_impl_k_queue_get>
}
 800fe26:	bd08      	pop	{r3, pc}
 800fe28:	2200      	movs	r2, #0
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	4802      	ldr	r0, [pc, #8]	; (800fe38 <conn_tx_alloc+0x2c>)
 800fe2e:	f008 fb09 	bl	8018444 <z_impl_k_queue_get>
 800fe32:	e7f8      	b.n	800fe26 <conn_tx_alloc+0x1a>
 800fe34:	20003328 	.word	0x20003328
 800fe38:	20001098 	.word	0x20001098

0800fe3c <notify_connected>:
{
 800fe3c:	b538      	push	{r3, r4, r5, lr}
 800fe3e:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
 800fe40:	4b09      	ldr	r3, [pc, #36]	; (800fe68 <notify_connected+0x2c>)
 800fe42:	681c      	ldr	r4, [r3, #0]
 800fe44:	e000      	b.n	800fe48 <notify_connected+0xc>
 800fe46:	69e4      	ldr	r4, [r4, #28]
 800fe48:	b134      	cbz	r4, 800fe58 <notify_connected+0x1c>
		if (cb->connected) {
 800fe4a:	6823      	ldr	r3, [r4, #0]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d0fa      	beq.n	800fe46 <notify_connected+0xa>
			cb->connected(conn, conn->err);
 800fe50:	7b29      	ldrb	r1, [r5, #12]
 800fe52:	4628      	mov	r0, r5
 800fe54:	4798      	blx	r3
 800fe56:	e7f6      	b.n	800fe46 <notify_connected+0xa>
	if (!conn->err) {
 800fe58:	7b2b      	ldrb	r3, [r5, #12]
 800fe5a:	b103      	cbz	r3, 800fe5e <notify_connected+0x22>
}
 800fe5c:	bd38      	pop	{r3, r4, r5, pc}
		bt_gatt_connected(conn);
 800fe5e:	4628      	mov	r0, r5
 800fe60:	f004 fc3e 	bl	80146e0 <bt_gatt_connected>
}
 800fe64:	e7fa      	b.n	800fe5c <notify_connected+0x20>
 800fe66:	bf00      	nop
 800fe68:	20004180 	.word	0x20004180

0800fe6c <bt_conn_get_pkts>:
}
 800fe6c:	4800      	ldr	r0, [pc, #0]	; (800fe70 <bt_conn_get_pkts+0x4>)
 800fe6e:	4770      	bx	lr
 800fe70:	200000c8 	.word	0x200000c8

0800fe74 <send_frag>:
{
 800fe74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe78:	4605      	mov	r5, r0
 800fe7a:	460e      	mov	r6, r1
 800fe7c:	4691      	mov	r9, r2
 800fe7e:	461c      	mov	r4, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
 800fe80:	694f      	ldr	r7, [r1, #20]
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
 800fe82:	f7ff fff3 	bl	800fe6c <bt_conn_get_pkts>
 800fe86:	4680      	mov	r8, r0
	return z_impl_k_sem_take(sem, timeout);
 800fe88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fe8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fe90:	f008 ff02 	bl	8018c98 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
 800fe94:	7b6b      	ldrb	r3, [r5, #13]
 800fe96:	2b07      	cmp	r3, #7
 800fe98:	d15a      	bne.n	800ff50 <send_frag+0xdc>
	__asm__ volatile(
 800fe9a:	f04f 0210 	mov.w	r2, #16
 800fe9e:	f3ef 8311 	mrs	r3, BASEPRI
 800fea2:	f382 8811 	msr	BASEPRI, r2
 800fea6:	f3bf 8f6f 	isb	sy
	if (tx) {
 800feaa:	b1af      	cbz	r7, 800fed8 <send_frag+0x64>
	parent->next = child;
 800feac:	2200      	movs	r2, #0
 800feae:	603a      	str	r2, [r7, #0]
	return list->tail;
 800feb0:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_APPEND(slist, snode)
 800feb2:	b172      	cbz	r2, 800fed2 <send_frag+0x5e>
	parent->next = child;
 800feb4:	6017      	str	r7, [r2, #0]
	list->tail = node;
 800feb6:	61af      	str	r7, [r5, #24]
	__asm__ volatile(
 800feb8:	f383 8811 	msr	BASEPRI, r3
 800febc:	f3bf 8f6f 	isb	sy
		err = send_acl(conn, buf, flags);
 800fec0:	464a      	mov	r2, r9
 800fec2:	4631      	mov	r1, r6
 800fec4:	4628      	mov	r0, r5
 800fec6:	f00d fa82 	bl	801d3ce <send_acl>
	if (err) {
 800feca:	4601      	mov	r1, r0
 800fecc:	b988      	cbnz	r0, 800fef2 <send_frag+0x7e>
	return true;
 800fece:	2001      	movs	r0, #1
 800fed0:	e047      	b.n	800ff62 <send_frag+0xee>
 800fed2:	61af      	str	r7, [r5, #24]
	list->head = node;
 800fed4:	616f      	str	r7, [r5, #20]
}
 800fed6:	e7ef      	b.n	800feb8 <send_frag+0x44>
	return list->tail;
 800fed8:	69aa      	ldr	r2, [r5, #24]
		if (tail_tx) {
 800feda:	b13a      	cbz	r2, 800feec <send_frag+0x78>
			pending_no_cb = &tail_tx->pending_no_cb;
 800fedc:	f102 0a0c 	add.w	sl, r2, #12
		(*pending_no_cb)++;
 800fee0:	f8da 2000 	ldr.w	r2, [sl]
 800fee4:	3201      	adds	r2, #1
 800fee6:	f8ca 2000 	str.w	r2, [sl]
 800feea:	e7e5      	b.n	800feb8 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
 800feec:	f105 0a1c 	add.w	sl, r5, #28
 800fef0:	e7f6      	b.n	800fee0 <send_frag+0x6c>
		BT_ERR("Unable to send to driver (err %d)", err);
 800fef2:	f04f 0200 	mov.w	r2, #0
 800fef6:	2301      	movs	r3, #1
 800fef8:	f363 0202 	bfi	r2, r3, #0, #3
 800fefc:	f36f 02c5 	bfc	r2, #3, #3
 800ff00:	4b23      	ldr	r3, [pc, #140]	; (800ff90 <send_frag+0x11c>)
 800ff02:	4824      	ldr	r0, [pc, #144]	; (800ff94 <send_frag+0x120>)
 800ff04:	1a1b      	subs	r3, r3, r0
 800ff06:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800ff0a:	f363 128f 	bfi	r2, r3, #6, #10
 800ff0e:	4822      	ldr	r0, [pc, #136]	; (800ff98 <send_frag+0x124>)
 800ff10:	f7f6 fb16 	bl	8006540 <log_1>
	__asm__ volatile(
 800ff14:	f04f 0310 	mov.w	r3, #16
 800ff18:	f3ef 8011 	mrs	r0, BASEPRI
 800ff1c:	f383 8811 	msr	BASEPRI, r3
 800ff20:	f3bf 8f6f 	isb	sy
		if (tx) {
 800ff24:	b347      	cbz	r7, 800ff78 <send_frag+0x104>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
 800ff26:	4639      	mov	r1, r7
	return list->head;
 800ff28:	696b      	ldr	r3, [r5, #20]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	b163      	cbz	r3, 800ff48 <send_frag+0xd4>
 800ff2e:	4299      	cmp	r1, r3
 800ff30:	d002      	beq.n	800ff38 <send_frag+0xc4>
 800ff32:	461a      	mov	r2, r3
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	e7f9      	b.n	800ff2c <send_frag+0xb8>
Z_GENLIST_REMOVE(slist, snode)
 800ff38:	b1aa      	cbz	r2, 800ff66 <send_frag+0xf2>
	return node->next;
 800ff3a:	683b      	ldr	r3, [r7, #0]
	parent->next = child;
 800ff3c:	6013      	str	r3, [r2, #0]
	return list->tail;
 800ff3e:	69ab      	ldr	r3, [r5, #24]
Z_GENLIST_REMOVE(slist, snode)
 800ff40:	429f      	cmp	r7, r3
 800ff42:	d017      	beq.n	800ff74 <send_frag+0x100>
	parent->next = child;
 800ff44:	2300      	movs	r3, #0
 800ff46:	603b      	str	r3, [r7, #0]
	__asm__ volatile(
 800ff48:	f380 8811 	msr	BASEPRI, r0
 800ff4c:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
 800ff50:	4640      	mov	r0, r8
 800ff52:	f008 fe79 	bl	8018c48 <z_impl_k_sem_give>
	if (tx) {
 800ff56:	b117      	cbz	r7, 800ff5e <send_frag+0xea>
		tx_free(tx);
 800ff58:	4638      	mov	r0, r7
 800ff5a:	f7ff ff4b 	bl	800fdf4 <tx_free>
	if (always_consume) {
 800ff5e:	b98c      	cbnz	r4, 800ff84 <send_frag+0x110>
	return false;
 800ff60:	4620      	mov	r0, r4
}
 800ff62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next;
 800ff66:	683b      	ldr	r3, [r7, #0]
	list->head = node;
 800ff68:	616b      	str	r3, [r5, #20]
	return list->tail;
 800ff6a:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_REMOVE(slist, snode)
 800ff6c:	4297      	cmp	r7, r2
 800ff6e:	d1e9      	bne.n	800ff44 <send_frag+0xd0>
	list->tail = node;
 800ff70:	61ab      	str	r3, [r5, #24]
}
 800ff72:	e7e7      	b.n	800ff44 <send_frag+0xd0>
	list->tail = node;
 800ff74:	61aa      	str	r2, [r5, #24]
}
 800ff76:	e7e5      	b.n	800ff44 <send_frag+0xd0>
			(*pending_no_cb)--;
 800ff78:	f8da 3000 	ldr.w	r3, [sl]
 800ff7c:	3b01      	subs	r3, #1
 800ff7e:	f8ca 3000 	str.w	r3, [sl]
 800ff82:	e7e1      	b.n	800ff48 <send_frag+0xd4>
		net_buf_unref(buf);
 800ff84:	4630      	mov	r0, r6
 800ff86:	f010 fa2f 	bl	80203e8 <net_buf_unref>
	return false;
 800ff8a:	2000      	movs	r0, #0
 800ff8c:	e7e9      	b.n	800ff62 <send_frag+0xee>
 800ff8e:	bf00      	nop
 800ff90:	08022ba0 	.word	0x08022ba0
 800ff94:	08022b90 	.word	0x08022b90
 800ff98:	08026a0c 	.word	0x08026a0c

0800ff9c <notify_le_param_updated>:
{
 800ff9c:	b570      	push	{r4, r5, r6, lr}
 800ff9e:	4605      	mov	r5, r0
 800ffa0:	f3bf 8f5b 	dmb	ish
 800ffa4:	6843      	ldr	r3, [r0, #4]
 800ffa6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
 800ffaa:	f413 7f00 	tst.w	r3, #512	; 0x200
 800ffae:	d010      	beq.n	800ffd2 <notify_le_param_updated+0x36>
 800ffb0:	1d02      	adds	r2, r0, #4
	    conn->le.interval >= conn->le.interval_min &&
 800ffb2:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
 800ffb6:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
 800ffba:	428b      	cmp	r3, r1
 800ffbc:	d309      	bcc.n	800ffd2 <notify_le_param_updated+0x36>
	    conn->le.interval <= conn->le.interval_max &&
 800ffbe:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
	    conn->le.interval >= conn->le.interval_min &&
 800ffc2:	428b      	cmp	r3, r1
 800ffc4:	d805      	bhi.n	800ffd2 <notify_le_param_updated+0x36>
	    conn->le.latency == conn->le.pending_latency &&
 800ffc6:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
 800ffca:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
 800ffce:	4299      	cmp	r1, r3
 800ffd0:	d002      	beq.n	800ffd8 <notify_le_param_updated+0x3c>
	for (cb = callback_list; cb; cb = cb->_next) {
 800ffd2:	4b0f      	ldr	r3, [pc, #60]	; (8010010 <notify_le_param_updated+0x74>)
 800ffd4:	681c      	ldr	r4, [r3, #0]
 800ffd6:	e00d      	b.n	800fff4 <notify_le_param_updated+0x58>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800ffd8:	f3bf 8f5b 	dmb	ish
 800ffdc:	e852 3f00 	ldrex	r3, [r2]
 800ffe0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ffe4:	e842 3100 	strex	r1, r3, [r2]
 800ffe8:	2900      	cmp	r1, #0
 800ffea:	d1f7      	bne.n	800ffdc <notify_le_param_updated+0x40>
 800ffec:	f3bf 8f5b 	dmb	ish
}
 800fff0:	e7ef      	b.n	800ffd2 <notify_le_param_updated+0x36>
 800fff2:	69e4      	ldr	r4, [r4, #28]
 800fff4:	b15c      	cbz	r4, 801000e <notify_le_param_updated+0x72>
		if (cb->le_param_updated) {
 800fff6:	68e6      	ldr	r6, [r4, #12]
 800fff8:	2e00      	cmp	r6, #0
 800fffa:	d0fa      	beq.n	800fff2 <notify_le_param_updated+0x56>
			cb->le_param_updated(conn, conn->le.interval,
 800fffc:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8010000:	f8b5 20a4 	ldrh.w	r2, [r5, #164]	; 0xa4
 8010004:	f8b5 109e 	ldrh.w	r1, [r5, #158]	; 0x9e
 8010008:	4628      	mov	r0, r5
 801000a:	47b0      	blx	r6
 801000c:	e7f1      	b.n	800fff2 <notify_le_param_updated+0x56>
}
 801000e:	bd70      	pop	{r4, r5, r6, pc}
 8010010:	20004180 	.word	0x20004180

08010014 <notify_le_phy_updated>:
{
 8010014:	b538      	push	{r3, r4, r5, lr}
 8010016:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
 8010018:	4b06      	ldr	r3, [pc, #24]	; (8010034 <notify_le_phy_updated+0x20>)
 801001a:	681c      	ldr	r4, [r3, #0]
 801001c:	e000      	b.n	8010020 <notify_le_phy_updated+0xc>
 801001e:	69e4      	ldr	r4, [r4, #28]
 8010020:	b13c      	cbz	r4, 8010032 <notify_le_phy_updated+0x1e>
		if (cb->le_phy_updated) {
 8010022:	69a3      	ldr	r3, [r4, #24]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d0fa      	beq.n	801001e <notify_le_phy_updated+0xa>
			cb->le_phy_updated(conn, &conn->le.phy);
 8010028:	f105 01b8 	add.w	r1, r5, #184	; 0xb8
 801002c:	4628      	mov	r0, r5
 801002e:	4798      	blx	r3
 8010030:	e7f5      	b.n	801001e <notify_le_phy_updated+0xa>
}
 8010032:	bd38      	pop	{r3, r4, r5, pc}
 8010034:	20004180 	.word	0x20004180

08010038 <le_param_req>:
{
 8010038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801003a:	4606      	mov	r6, r0
 801003c:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
 801003e:	4608      	mov	r0, r1
 8010040:	f00c fefa 	bl	801ce38 <bt_le_conn_params_valid>
 8010044:	4607      	mov	r7, r0
 8010046:	b198      	cbz	r0, 8010070 <le_param_req+0x38>
	for (cb = callback_list; cb; cb = cb->_next) {
 8010048:	4b0a      	ldr	r3, [pc, #40]	; (8010074 <le_param_req+0x3c>)
 801004a:	681c      	ldr	r4, [r3, #0]
 801004c:	e000      	b.n	8010050 <le_param_req+0x18>
 801004e:	69e4      	ldr	r4, [r4, #28]
 8010050:	b174      	cbz	r4, 8010070 <le_param_req+0x38>
		if (!cb->le_param_req) {
 8010052:	68a3      	ldr	r3, [r4, #8]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d0fa      	beq.n	801004e <le_param_req+0x16>
		if (!cb->le_param_req(conn, param)) {
 8010058:	4629      	mov	r1, r5
 801005a:	4630      	mov	r0, r6
 801005c:	4798      	blx	r3
 801005e:	b130      	cbz	r0, 801006e <le_param_req+0x36>
		if (!bt_le_conn_params_valid(param)) {
 8010060:	4628      	mov	r0, r5
 8010062:	f00c fee9 	bl	801ce38 <bt_le_conn_params_valid>
 8010066:	2800      	cmp	r0, #0
 8010068:	d1f1      	bne.n	801004e <le_param_req+0x16>
			return false;
 801006a:	4607      	mov	r7, r0
 801006c:	e000      	b.n	8010070 <le_param_req+0x38>
			return false;
 801006e:	4607      	mov	r7, r0
}
 8010070:	4638      	mov	r0, r7
 8010072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010074:	20004180 	.word	0x20004180

08010078 <acl_conn_new>:
{
 8010078:	b510      	push	{r4, lr}
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
 801007a:	2106      	movs	r1, #6
 801007c:	4807      	ldr	r0, [pc, #28]	; (801009c <acl_conn_new+0x24>)
 801007e:	f00d fa09 	bl	801d494 <bt_conn_new>
	if (!conn) {
 8010082:	4604      	mov	r4, r0
 8010084:	b140      	cbz	r0, 8010098 <acl_conn_new+0x20>
	k_delayed_work_init(&conn->update_work, conn_update_timeout);
 8010086:	4906      	ldr	r1, [pc, #24]	; (80100a0 <acl_conn_new+0x28>)
 8010088:	3058      	adds	r0, #88	; 0x58
 801008a:	f012 f971 	bl	8022370 <k_delayed_work_init>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 801008e:	2300      	movs	r3, #0
 8010090:	62a3      	str	r3, [r4, #40]	; 0x28
 8010092:	4a04      	ldr	r2, [pc, #16]	; (80100a4 <acl_conn_new+0x2c>)
 8010094:	62e2      	str	r2, [r4, #44]	; 0x2c
 8010096:	6323      	str	r3, [r4, #48]	; 0x30
}
 8010098:	4620      	mov	r0, r4
 801009a:	bd10      	pop	{r4, pc}
 801009c:	20001d40 	.word	0x20001d40
 80100a0:	08010bc1 	.word	0x08010bc1
 80100a4:	0801d3c5 	.word	0x0801d3c5

080100a8 <bt_conn_identity_resolved>:
{
 80100a8:	b570      	push	{r4, r5, r6, lr}
 80100aa:	4605      	mov	r5, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
 80100ac:	78c3      	ldrb	r3, [r0, #3]
 80100ae:	b923      	cbnz	r3, 80100ba <bt_conn_identity_resolved+0x12>
		rpa = &conn->le.resp_addr;
 80100b0:	f100 0696 	add.w	r6, r0, #150	; 0x96
	for (cb = callback_list; cb; cb = cb->_next) {
 80100b4:	4b08      	ldr	r3, [pc, #32]	; (80100d8 <bt_conn_identity_resolved+0x30>)
 80100b6:	681c      	ldr	r4, [r3, #0]
 80100b8:	e003      	b.n	80100c2 <bt_conn_identity_resolved+0x1a>
		rpa = &conn->le.init_addr;
 80100ba:	f100 068f 	add.w	r6, r0, #143	; 0x8f
 80100be:	e7f9      	b.n	80100b4 <bt_conn_identity_resolved+0xc>
	for (cb = callback_list; cb; cb = cb->_next) {
 80100c0:	69e4      	ldr	r4, [r4, #28]
 80100c2:	b144      	cbz	r4, 80100d6 <bt_conn_identity_resolved+0x2e>
		if (cb->identity_resolved) {
 80100c4:	6923      	ldr	r3, [r4, #16]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d0fa      	beq.n	80100c0 <bt_conn_identity_resolved+0x18>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
 80100ca:	f105 0288 	add.w	r2, r5, #136	; 0x88
 80100ce:	4631      	mov	r1, r6
 80100d0:	4628      	mov	r0, r5
 80100d2:	4798      	blx	r3
 80100d4:	e7f4      	b.n	80100c0 <bt_conn_identity_resolved+0x18>
}
 80100d6:	bd70      	pop	{r4, r5, r6, pc}
 80100d8:	20004180 	.word	0x20004180

080100dc <bt_conn_security_changed>:
{
 80100dc:	b570      	push	{r4, r5, r6, lr}
 80100de:	4605      	mov	r5, r0
 80100e0:	460c      	mov	r4, r1
 80100e2:	4616      	mov	r6, r2
	reset_pairing(conn);
 80100e4:	f00d f933 	bl	801d34e <reset_pairing>
	bt_l2cap_security_changed(conn, hci_err);
 80100e8:	4621      	mov	r1, r4
 80100ea:	4628      	mov	r0, r5
 80100ec:	f00d fc5d 	bl	801d9aa <bt_l2cap_security_changed>
	for (cb = callback_list; cb; cb = cb->_next) {
 80100f0:	4b06      	ldr	r3, [pc, #24]	; (801010c <bt_conn_security_changed+0x30>)
 80100f2:	681c      	ldr	r4, [r3, #0]
 80100f4:	e000      	b.n	80100f8 <bt_conn_security_changed+0x1c>
 80100f6:	69e4      	ldr	r4, [r4, #28]
 80100f8:	b13c      	cbz	r4, 801010a <bt_conn_security_changed+0x2e>
		if (cb->security_changed) {
 80100fa:	6963      	ldr	r3, [r4, #20]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d0fa      	beq.n	80100f6 <bt_conn_security_changed+0x1a>
			cb->security_changed(conn, conn->sec_level, err);
 8010100:	4632      	mov	r2, r6
 8010102:	7a69      	ldrb	r1, [r5, #9]
 8010104:	4628      	mov	r0, r5
 8010106:	4798      	blx	r3
 8010108:	e7f5      	b.n	80100f6 <bt_conn_security_changed+0x1a>
}
 801010a:	bd70      	pop	{r4, r5, r6, pc}
 801010c:	20004180 	.word	0x20004180

08010110 <bt_conn_cb_register>:
	cb->_next = callback_list;
 8010110:	4b02      	ldr	r3, [pc, #8]	; (801011c <bt_conn_cb_register+0xc>)
 8010112:	681a      	ldr	r2, [r3, #0]
 8010114:	61c2      	str	r2, [r0, #28]
	callback_list = cb;
 8010116:	6018      	str	r0, [r3, #0]
}
 8010118:	4770      	bx	lr
 801011a:	bf00      	nop
 801011c:	20004180 	.word	0x20004180

08010120 <conn_cleanup>:
{
 8010120:	b538      	push	{r3, r4, r5, lr}
 8010122:	4605      	mov	r5, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
 8010124:	e004      	b.n	8010130 <conn_cleanup+0x10>
			tx_free(tx_data(buf)->tx);
 8010126:	f7ff fe65 	bl	800fdf4 <tx_free>
		net_buf_unref(buf);
 801012a:	4620      	mov	r0, r4
 801012c:	f010 f95c 	bl	80203e8 <net_buf_unref>
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
 8010130:	2200      	movs	r2, #0
 8010132:	2300      	movs	r3, #0
 8010134:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8010138:	f010 f924 	bl	8020384 <net_buf_get>
 801013c:	4604      	mov	r4, r0
 801013e:	b118      	cbz	r0, 8010148 <conn_cleanup+0x28>
		if (tx_data(buf)->tx) {
 8010140:	6960      	ldr	r0, [r4, #20]
 8010142:	2800      	cmp	r0, #0
 8010144:	d1ef      	bne.n	8010126 <conn_cleanup+0x6>
 8010146:	e7f0      	b.n	801012a <conn_cleanup+0xa>
	bt_conn_reset_rx_state(conn);
 8010148:	4628      	mov	r0, r5
 801014a:	f00d fa41 	bl	801d5d0 <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
 801014e:	2200      	movs	r2, #0
 8010150:	2300      	movs	r3, #0
 8010152:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8010156:	4802      	ldr	r0, [pc, #8]	; (8010160 <conn_cleanup+0x40>)
 8010158:	f008 fe8a 	bl	8018e70 <k_delayed_work_submit_to_queue>
}
 801015c:	bd38      	pop	{r3, r4, r5, pc}
 801015e:	bf00      	nop
 8010160:	20003310 	.word	0x20003310

08010164 <bt_conn_recv>:
{
 8010164:	b570      	push	{r4, r5, r6, lr}
 8010166:	4604      	mov	r4, r0
 8010168:	460e      	mov	r6, r1
 801016a:	4615      	mov	r5, r2
	tx_notify(conn);
 801016c:	f00d f905 	bl	801d37a <tx_notify>
	switch (flags) {
 8010170:	2d01      	cmp	r5, #1
 8010172:	d02c      	beq.n	80101ce <bt_conn_recv+0x6a>
 8010174:	2d02      	cmp	r5, #2
 8010176:	d171      	bne.n	801025c <bt_conn_recv+0xf8>
		if (conn->rx) {
 8010178:	6923      	ldr	r3, [r4, #16]
 801017a:	b19b      	cbz	r3, 80101a4 <bt_conn_recv+0x40>
			BT_ERR("Unexpected first L2CAP frame");
 801017c:	f04f 0100 	mov.w	r1, #0
 8010180:	2301      	movs	r3, #1
 8010182:	f363 0102 	bfi	r1, r3, #0, #3
 8010186:	f36f 01c5 	bfc	r1, #3, #3
 801018a:	4b4c      	ldr	r3, [pc, #304]	; (80102bc <bt_conn_recv+0x158>)
 801018c:	4a4c      	ldr	r2, [pc, #304]	; (80102c0 <bt_conn_recv+0x15c>)
 801018e:	1a9b      	subs	r3, r3, r2
 8010190:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8010194:	f363 118f 	bfi	r1, r3, #6, #10
 8010198:	484a      	ldr	r0, [pc, #296]	; (80102c4 <bt_conn_recv+0x160>)
 801019a:	f7f6 fb41 	bl	8006820 <log_0>
			bt_conn_reset_rx_state(conn);
 801019e:	4620      	mov	r0, r4
 80101a0:	f00d fa16 	bl	801d5d0 <bt_conn_reset_rx_state>
		conn->rx = buf;
 80101a4:	6126      	str	r6, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
 80101a6:	6921      	ldr	r1, [r4, #16]
 80101a8:	8988      	ldrh	r0, [r1, #12]
 80101aa:	2801      	cmp	r0, #1
 80101ac:	d96e      	bls.n	801028c <bt_conn_recv+0x128>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
 80101ae:	688b      	ldr	r3, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
 80101b0:	785d      	ldrb	r5, [r3, #1]
 80101b2:	781a      	ldrb	r2, [r3, #0]
 80101b4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80101b8:	3204      	adds	r2, #4
 80101ba:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
 80101bc:	4282      	cmp	r2, r0
 80101be:	d865      	bhi.n	801028c <bt_conn_recv+0x128>
	if (conn->rx->len > acl_total_len) {
 80101c0:	d365      	bcc.n	801028e <bt_conn_recv+0x12a>
	conn->rx = NULL;
 80101c2:	2300      	movs	r3, #0
 80101c4:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf);
 80101c6:	4620      	mov	r0, r4
 80101c8:	f001 f8de 	bl	8011388 <bt_l2cap_recv>
 80101cc:	e05e      	b.n	801028c <bt_conn_recv+0x128>
		if (!conn->rx) {
 80101ce:	6920      	ldr	r0, [r4, #16]
 80101d0:	b180      	cbz	r0, 80101f4 <bt_conn_recv+0x90>
		if (!buf->len) {
 80101d2:	89b5      	ldrh	r5, [r6, #12]
 80101d4:	b335      	cbz	r5, 8010224 <bt_conn_recv+0xc0>
		if (buf->len > net_buf_tailroom(conn->rx)) {
 80101d6:	3008      	adds	r0, #8
 80101d8:	f010 f99d 	bl	8020516 <net_buf_simple_tailroom>
 80101dc:	4285      	cmp	r5, r0
 80101de:	d825      	bhi.n	801022c <bt_conn_recv+0xc8>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
 80101e0:	6920      	ldr	r0, [r4, #16]
 80101e2:	89b2      	ldrh	r2, [r6, #12]
 80101e4:	68b1      	ldr	r1, [r6, #8]
 80101e6:	3008      	adds	r0, #8
 80101e8:	f010 f94e 	bl	8020488 <net_buf_simple_add_mem>
		net_buf_unref(buf);
 80101ec:	4630      	mov	r0, r6
 80101ee:	f010 f8fb 	bl	80203e8 <net_buf_unref>
		break;
 80101f2:	e7d8      	b.n	80101a6 <bt_conn_recv+0x42>
			BT_ERR("Unexpected L2CAP continuation");
 80101f4:	f04f 0100 	mov.w	r1, #0
 80101f8:	2301      	movs	r3, #1
 80101fa:	f363 0102 	bfi	r1, r3, #0, #3
 80101fe:	f36f 01c5 	bfc	r1, #3, #3
 8010202:	4b2e      	ldr	r3, [pc, #184]	; (80102bc <bt_conn_recv+0x158>)
 8010204:	4a2e      	ldr	r2, [pc, #184]	; (80102c0 <bt_conn_recv+0x15c>)
 8010206:	1a9b      	subs	r3, r3, r2
 8010208:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 801020c:	f363 118f 	bfi	r1, r3, #6, #10
 8010210:	482d      	ldr	r0, [pc, #180]	; (80102c8 <bt_conn_recv+0x164>)
 8010212:	f7f6 fb05 	bl	8006820 <log_0>
			bt_conn_reset_rx_state(conn);
 8010216:	4620      	mov	r0, r4
 8010218:	f00d f9da 	bl	801d5d0 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
 801021c:	4630      	mov	r0, r6
 801021e:	f010 f8e3 	bl	80203e8 <net_buf_unref>
			return;
 8010222:	e033      	b.n	801028c <bt_conn_recv+0x128>
			net_buf_unref(buf);
 8010224:	4630      	mov	r0, r6
 8010226:	f010 f8df 	bl	80203e8 <net_buf_unref>
			return;
 801022a:	e02f      	b.n	801028c <bt_conn_recv+0x128>
			BT_ERR("Not enough buffer space for L2CAP data");
 801022c:	f04f 0100 	mov.w	r1, #0
 8010230:	2301      	movs	r3, #1
 8010232:	f363 0102 	bfi	r1, r3, #0, #3
 8010236:	f36f 01c5 	bfc	r1, #3, #3
 801023a:	4b20      	ldr	r3, [pc, #128]	; (80102bc <bt_conn_recv+0x158>)
 801023c:	4a20      	ldr	r2, [pc, #128]	; (80102c0 <bt_conn_recv+0x15c>)
 801023e:	1a9b      	subs	r3, r3, r2
 8010240:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8010244:	f363 118f 	bfi	r1, r3, #6, #10
 8010248:	4820      	ldr	r0, [pc, #128]	; (80102cc <bt_conn_recv+0x168>)
 801024a:	f7f6 fae9 	bl	8006820 <log_0>
			bt_conn_reset_rx_state(conn);
 801024e:	4620      	mov	r0, r4
 8010250:	f00d f9be 	bl	801d5d0 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
 8010254:	4630      	mov	r0, r6
 8010256:	f010 f8c7 	bl	80203e8 <net_buf_unref>
			return;
 801025a:	e017      	b.n	801028c <bt_conn_recv+0x128>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
 801025c:	f04f 0200 	mov.w	r2, #0
 8010260:	2301      	movs	r3, #1
 8010262:	f363 0202 	bfi	r2, r3, #0, #3
 8010266:	f36f 02c5 	bfc	r2, #3, #3
 801026a:	4b14      	ldr	r3, [pc, #80]	; (80102bc <bt_conn_recv+0x158>)
 801026c:	4914      	ldr	r1, [pc, #80]	; (80102c0 <bt_conn_recv+0x15c>)
 801026e:	1a5b      	subs	r3, r3, r1
 8010270:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8010274:	f363 128f 	bfi	r2, r3, #6, #10
 8010278:	4629      	mov	r1, r5
 801027a:	4815      	ldr	r0, [pc, #84]	; (80102d0 <bt_conn_recv+0x16c>)
 801027c:	f7f6 f960 	bl	8006540 <log_1>
		bt_conn_reset_rx_state(conn);
 8010280:	4620      	mov	r0, r4
 8010282:	f00d f9a5 	bl	801d5d0 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
 8010286:	4630      	mov	r0, r6
 8010288:	f010 f8ae 	bl	80203e8 <net_buf_unref>
}
 801028c:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("ACL len mismatch (%u > %u)",
 801028e:	f04f 0300 	mov.w	r3, #0
 8010292:	2101      	movs	r1, #1
 8010294:	f361 0302 	bfi	r3, r1, #0, #3
 8010298:	f36f 03c5 	bfc	r3, #3, #3
 801029c:	4907      	ldr	r1, [pc, #28]	; (80102bc <bt_conn_recv+0x158>)
 801029e:	4d08      	ldr	r5, [pc, #32]	; (80102c0 <bt_conn_recv+0x15c>)
 80102a0:	1b49      	subs	r1, r1, r5
 80102a2:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 80102a6:	f361 138f 	bfi	r3, r1, #6, #10
 80102aa:	4601      	mov	r1, r0
 80102ac:	4809      	ldr	r0, [pc, #36]	; (80102d4 <bt_conn_recv+0x170>)
 80102ae:	f7f6 f9c7 	bl	8006640 <log_2>
		bt_conn_reset_rx_state(conn);
 80102b2:	4620      	mov	r0, r4
 80102b4:	f00d f98c 	bl	801d5d0 <bt_conn_reset_rx_state>
		return;
 80102b8:	e7e8      	b.n	801028c <bt_conn_recv+0x128>
 80102ba:	bf00      	nop
 80102bc:	08022ba0 	.word	0x08022ba0
 80102c0:	08022b90 	.word	0x08022b90
 80102c4:	08026e24 	.word	0x08026e24
 80102c8:	08026e44 	.word	0x08026e44
 80102cc:	08026e64 	.word	0x08026e64
 80102d0:	08026e8c 	.word	0x08026e8c
 80102d4:	08026eac 	.word	0x08026eac

080102d8 <bt_conn_send_cb>:
{
 80102d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102dc:	460d      	mov	r5, r1
 80102de:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
 80102e0:	7b43      	ldrb	r3, [r0, #13]
 80102e2:	2b07      	cmp	r3, #7
 80102e4:	d117      	bne.n	8010316 <bt_conn_send_cb+0x3e>
 80102e6:	4604      	mov	r4, r0
 80102e8:	4616      	mov	r6, r2
	if (cb) {
 80102ea:	2a00      	cmp	r2, #0
 80102ec:	d05b      	beq.n	80103a6 <bt_conn_send_cb+0xce>
		tx = conn_tx_alloc();
 80102ee:	f7ff fd8d 	bl	800fe0c <conn_tx_alloc>
		if (!tx) {
 80102f2:	4680      	mov	r8, r0
 80102f4:	b330      	cbz	r0, 8010344 <bt_conn_send_cb+0x6c>
		if (conn->state != BT_CONN_CONNECTED) {
 80102f6:	7b63      	ldrb	r3, [r4, #13]
 80102f8:	2b07      	cmp	r3, #7
 80102fa:	d13a      	bne.n	8010372 <bt_conn_send_cb+0x9a>
		tx->cb = cb;
 80102fc:	6046      	str	r6, [r0, #4]
		tx->user_data = user_data;
 80102fe:	6087      	str	r7, [r0, #8]
		tx->pending_no_cb = 0U;
 8010300:	2300      	movs	r3, #0
 8010302:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
 8010304:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
 8010306:	4629      	mov	r1, r5
 8010308:	f104 0034 	add.w	r0, r4, #52	; 0x34
 801030c:	f010 f85f 	bl	80203ce <net_buf_put>
	return 0;
 8010310:	2000      	movs	r0, #0
}
 8010312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_ERR("not connected!");
 8010316:	f04f 0100 	mov.w	r1, #0
 801031a:	2301      	movs	r3, #1
 801031c:	f363 0102 	bfi	r1, r3, #0, #3
 8010320:	f36f 01c5 	bfc	r1, #3, #3
 8010324:	4b21      	ldr	r3, [pc, #132]	; (80103ac <bt_conn_send_cb+0xd4>)
 8010326:	4a22      	ldr	r2, [pc, #136]	; (80103b0 <bt_conn_send_cb+0xd8>)
 8010328:	1a9b      	subs	r3, r3, r2
 801032a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 801032e:	f363 118f 	bfi	r1, r3, #6, #10
 8010332:	4820      	ldr	r0, [pc, #128]	; (80103b4 <bt_conn_send_cb+0xdc>)
 8010334:	f7f6 fa74 	bl	8006820 <log_0>
		net_buf_unref(buf);
 8010338:	4628      	mov	r0, r5
 801033a:	f010 f855 	bl	80203e8 <net_buf_unref>
		return -ENOTCONN;
 801033e:	f06f 0038 	mvn.w	r0, #56	; 0x38
 8010342:	e7e6      	b.n	8010312 <bt_conn_send_cb+0x3a>
			BT_ERR("Unable to allocate TX context");
 8010344:	f04f 0100 	mov.w	r1, #0
 8010348:	2301      	movs	r3, #1
 801034a:	f363 0102 	bfi	r1, r3, #0, #3
 801034e:	f36f 01c5 	bfc	r1, #3, #3
 8010352:	4b16      	ldr	r3, [pc, #88]	; (80103ac <bt_conn_send_cb+0xd4>)
 8010354:	4a16      	ldr	r2, [pc, #88]	; (80103b0 <bt_conn_send_cb+0xd8>)
 8010356:	1a9b      	subs	r3, r3, r2
 8010358:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 801035c:	f363 118f 	bfi	r1, r3, #6, #10
 8010360:	4815      	ldr	r0, [pc, #84]	; (80103b8 <bt_conn_send_cb+0xe0>)
 8010362:	f7f6 fa5d 	bl	8006820 <log_0>
			net_buf_unref(buf);
 8010366:	4628      	mov	r0, r5
 8010368:	f010 f83e 	bl	80203e8 <net_buf_unref>
			return -ENOBUFS;
 801036c:	f06f 0036 	mvn.w	r0, #54	; 0x36
 8010370:	e7cf      	b.n	8010312 <bt_conn_send_cb+0x3a>
			BT_WARN("Disconnected while allocating context");
 8010372:	f04f 0100 	mov.w	r1, #0
 8010376:	2302      	movs	r3, #2
 8010378:	f363 0102 	bfi	r1, r3, #0, #3
 801037c:	f36f 01c5 	bfc	r1, #3, #3
 8010380:	4b0a      	ldr	r3, [pc, #40]	; (80103ac <bt_conn_send_cb+0xd4>)
 8010382:	4a0b      	ldr	r2, [pc, #44]	; (80103b0 <bt_conn_send_cb+0xd8>)
 8010384:	1a9b      	subs	r3, r3, r2
 8010386:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 801038a:	f363 118f 	bfi	r1, r3, #6, #10
 801038e:	480b      	ldr	r0, [pc, #44]	; (80103bc <bt_conn_send_cb+0xe4>)
 8010390:	f7f6 fa46 	bl	8006820 <log_0>
			net_buf_unref(buf);
 8010394:	4628      	mov	r0, r5
 8010396:	f010 f827 	bl	80203e8 <net_buf_unref>
			tx_free(tx);
 801039a:	4640      	mov	r0, r8
 801039c:	f7ff fd2a 	bl	800fdf4 <tx_free>
			return -ENOTCONN;
 80103a0:	f06f 0038 	mvn.w	r0, #56	; 0x38
 80103a4:	e7b5      	b.n	8010312 <bt_conn_send_cb+0x3a>
		tx_data(buf)->tx = NULL;
 80103a6:	2300      	movs	r3, #0
 80103a8:	614b      	str	r3, [r1, #20]
 80103aa:	e7ac      	b.n	8010306 <bt_conn_send_cb+0x2e>
 80103ac:	08022ba0 	.word	0x08022ba0
 80103b0:	08022b90 	.word	0x08022b90
 80103b4:	08026ec8 	.word	0x08026ec8
 80103b8:	08026ed8 	.word	0x08026ed8
 80103bc:	08026ef8 	.word	0x08026ef8

080103c0 <bt_conn_prepare_events>:
{
 80103c0:	b570      	push	{r4, r5, r6, lr}
 80103c2:	4606      	mov	r6, r0
	conn_change.signaled = 0U;
 80103c4:	4b0e      	ldr	r3, [pc, #56]	; (8010400 <bt_conn_prepare_events+0x40>)
 80103c6:	2400      	movs	r4, #0
 80103c8:	609c      	str	r4, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
 80103ca:	4622      	mov	r2, r4
 80103cc:	2101      	movs	r1, #1
 80103ce:	f012 f915 	bl	80225fc <k_poll_event_init>
 80103d2:	2501      	movs	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
 80103d4:	e000      	b.n	80103d8 <bt_conn_prepare_events+0x18>
 80103d6:	3401      	adds	r4, #1
 80103d8:	2c05      	cmp	r4, #5
 80103da:	dc0e      	bgt.n	80103fa <bt_conn_prepare_events+0x3a>
		conn = &acl_conns[i];
 80103dc:	eb04 0044 	add.w	r0, r4, r4, lsl #1
		if (!conn_prepare_events(conn, &events[ev_count])) {
 80103e0:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 80103e4:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 80103e8:	4b06      	ldr	r3, [pc, #24]	; (8010404 <bt_conn_prepare_events+0x44>)
 80103ea:	eb03 1080 	add.w	r0, r3, r0, lsl #6
 80103ee:	f00d f8f8 	bl	801d5e2 <conn_prepare_events>
 80103f2:	2800      	cmp	r0, #0
 80103f4:	d1ef      	bne.n	80103d6 <bt_conn_prepare_events+0x16>
			ev_count++;
 80103f6:	3501      	adds	r5, #1
 80103f8:	e7ed      	b.n	80103d6 <bt_conn_prepare_events+0x16>
}
 80103fa:	4628      	mov	r0, r5
 80103fc:	bd70      	pop	{r4, r5, r6, pc}
 80103fe:	bf00      	nop
 8010400:	20000bb8 	.word	0x20000bb8
 8010404:	20001d40 	.word	0x20001d40

08010408 <bt_conn_lookup_handle>:
{
 8010408:	b508      	push	{r3, lr}
 801040a:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
 801040c:	2106      	movs	r1, #6
 801040e:	4802      	ldr	r0, [pc, #8]	; (8010418 <bt_conn_lookup_handle+0x10>)
 8010410:	f00d f969 	bl	801d6e6 <conn_lookup_handle>
}
 8010414:	bd08      	pop	{r3, pc}
 8010416:	bf00      	nop
 8010418:	20001d40 	.word	0x20001d40

0801041c <bt_conn_lookup_addr_le>:
{
 801041c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801041e:	4606      	mov	r6, r0
 8010420:	460d      	mov	r5, r1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
 8010422:	2400      	movs	r4, #0
 8010424:	e000      	b.n	8010428 <bt_conn_lookup_addr_le+0xc>
 8010426:	3401      	adds	r4, #1
 8010428:	2c05      	cmp	r4, #5
 801042a:	dc22      	bgt.n	8010472 <bt_conn_lookup_addr_le+0x56>
		if (!atomic_get(&acl_conns[i].ref)) {
 801042c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8010430:	019b      	lsls	r3, r3, #6
 8010432:	3350      	adds	r3, #80	; 0x50
 8010434:	4a10      	ldr	r2, [pc, #64]	; (8010478 <bt_conn_lookup_addr_le+0x5c>)
 8010436:	4413      	add	r3, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8010438:	f3bf 8f5b 	dmb	ish
 801043c:	685b      	ldr	r3, [r3, #4]
 801043e:	f3bf 8f5b 	dmb	ish
 8010442:	2b00      	cmp	r3, #0
 8010444:	d0ef      	beq.n	8010426 <bt_conn_lookup_addr_le+0xa>
		if (acl_conns[i].type != BT_CONN_TYPE_LE) {
 8010446:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801044a:	eb02 1383 	add.w	r3, r2, r3, lsl #6
 801044e:	789b      	ldrb	r3, [r3, #2]
 8010450:	2b01      	cmp	r3, #1
 8010452:	d1e8      	bne.n	8010426 <bt_conn_lookup_addr_le+0xa>
		if (bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
 8010454:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8010458:	eb02 1787 	add.w	r7, r2, r7, lsl #6
 801045c:	462a      	mov	r2, r5
 801045e:	4631      	mov	r1, r6
 8010460:	4638      	mov	r0, r7
 8010462:	f00d f90b 	bl	801d67c <bt_conn_is_peer_addr_le>
 8010466:	2800      	cmp	r0, #0
 8010468:	d0dd      	beq.n	8010426 <bt_conn_lookup_addr_le+0xa>
			return bt_conn_ref(&acl_conns[i]);
 801046a:	4638      	mov	r0, r7
 801046c:	f00d f92d 	bl	801d6ca <bt_conn_ref>
 8010470:	e000      	b.n	8010474 <bt_conn_lookup_addr_le+0x58>
	return NULL;
 8010472:	2000      	movs	r0, #0
}
 8010474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010476:	bf00      	nop
 8010478:	20001d40 	.word	0x20001d40

0801047c <bt_conn_lookup_state_le>:
{
 801047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801047e:	4607      	mov	r7, r0
 8010480:	460d      	mov	r5, r1
 8010482:	4616      	mov	r6, r2
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
 8010484:	2400      	movs	r4, #0
 8010486:	e008      	b.n	801049a <bt_conn_lookup_state_le+0x1e>
		if (acl_conns[i].state == state && acl_conns[i].id == id) {
 8010488:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801048c:	4a1d      	ldr	r2, [pc, #116]	; (8010504 <bt_conn_lookup_state_le+0x88>)
 801048e:	eb02 1383 	add.w	r3, r2, r3, lsl #6
 8010492:	7b5b      	ldrb	r3, [r3, #13]
 8010494:	42b3      	cmp	r3, r6
 8010496:	d024      	beq.n	80104e2 <bt_conn_lookup_state_le+0x66>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
 8010498:	3401      	adds	r4, #1
 801049a:	2c05      	cmp	r4, #5
 801049c:	dc2f      	bgt.n	80104fe <bt_conn_lookup_state_le+0x82>
		if (!atomic_get(&acl_conns[i].ref)) {
 801049e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80104a2:	019b      	lsls	r3, r3, #6
 80104a4:	3350      	adds	r3, #80	; 0x50
 80104a6:	4a17      	ldr	r2, [pc, #92]	; (8010504 <bt_conn_lookup_state_le+0x88>)
 80104a8:	4413      	add	r3, r2
 80104aa:	f3bf 8f5b 	dmb	ish
 80104ae:	685b      	ldr	r3, [r3, #4]
 80104b0:	f3bf 8f5b 	dmb	ish
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d0ef      	beq.n	8010498 <bt_conn_lookup_state_le+0x1c>
		if (acl_conns[i].type != BT_CONN_TYPE_LE) {
 80104b8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80104bc:	eb02 1383 	add.w	r3, r2, r3, lsl #6
 80104c0:	789b      	ldrb	r3, [r3, #2]
 80104c2:	2b01      	cmp	r3, #1
 80104c4:	d1e8      	bne.n	8010498 <bt_conn_lookup_state_le+0x1c>
		if (peer && !bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
 80104c6:	2d00      	cmp	r5, #0
 80104c8:	d0de      	beq.n	8010488 <bt_conn_lookup_state_le+0xc>
 80104ca:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 80104ce:	462a      	mov	r2, r5
 80104d0:	4639      	mov	r1, r7
 80104d2:	4b0c      	ldr	r3, [pc, #48]	; (8010504 <bt_conn_lookup_state_le+0x88>)
 80104d4:	eb03 1080 	add.w	r0, r3, r0, lsl #6
 80104d8:	f00d f8d0 	bl	801d67c <bt_conn_is_peer_addr_le>
 80104dc:	2800      	cmp	r0, #0
 80104de:	d1d3      	bne.n	8010488 <bt_conn_lookup_state_le+0xc>
 80104e0:	e7da      	b.n	8010498 <bt_conn_lookup_state_le+0x1c>
		if (acl_conns[i].state == state && acl_conns[i].id == id) {
 80104e2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80104e6:	eb02 1383 	add.w	r3, r2, r3, lsl #6
 80104ea:	7a1b      	ldrb	r3, [r3, #8]
 80104ec:	42bb      	cmp	r3, r7
 80104ee:	d1d3      	bne.n	8010498 <bt_conn_lookup_state_le+0x1c>
			return bt_conn_ref(&acl_conns[i]);
 80104f0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80104f4:	eb02 1084 	add.w	r0, r2, r4, lsl #6
 80104f8:	f00d f8e7 	bl	801d6ca <bt_conn_ref>
 80104fc:	e000      	b.n	8010500 <bt_conn_lookup_state_le+0x84>
	return NULL;
 80104fe:	2000      	movs	r0, #0
}
 8010500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010502:	bf00      	nop
 8010504:	20001d40 	.word	0x20001d40

08010508 <bt_conn_exists_le>:
{
 8010508:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
 801050a:	f7ff ff87 	bl	801041c <bt_conn_lookup_addr_le>
	if (conn) {
 801050e:	b908      	cbnz	r0, 8010514 <bt_conn_exists_le+0xc>
	return false;
 8010510:	2000      	movs	r0, #0
}
 8010512:	bd10      	pop	{r4, pc}
 8010514:	4604      	mov	r4, r0
		BT_WARN("Found valid connection in %s state",
 8010516:	f04f 0200 	mov.w	r2, #0
 801051a:	2302      	movs	r3, #2
 801051c:	f363 0202 	bfi	r2, r3, #0, #3
 8010520:	f36f 02c5 	bfc	r2, #3, #3
 8010524:	4b15      	ldr	r3, [pc, #84]	; (801057c <bt_conn_exists_le+0x74>)
 8010526:	4916      	ldr	r1, [pc, #88]	; (8010580 <bt_conn_exists_le+0x78>)
 8010528:	1a5b      	subs	r3, r3, r1
 801052a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 801052e:	f363 128f 	bfi	r2, r3, #6, #10
 8010532:	7b43      	ldrb	r3, [r0, #13]
	switch (state) {
 8010534:	2b08      	cmp	r3, #8
 8010536:	d81d      	bhi.n	8010574 <bt_conn_exists_le+0x6c>
 8010538:	e8df f003 	tbb	[pc, r3]
 801053c:	140e1e05 	.word	0x140e1e05
 8010540:	18161012 	.word	0x18161012
 8010544:	1a          	.byte	0x1a
 8010545:	00          	.byte	0x00
		BT_WARN("Found valid connection in %s state",
 8010546:	490f      	ldr	r1, [pc, #60]	; (8010584 <bt_conn_exists_le+0x7c>)
 8010548:	480f      	ldr	r0, [pc, #60]	; (8010588 <bt_conn_exists_le+0x80>)
 801054a:	f7f5 fff9 	bl	8006540 <log_1>
		bt_conn_unref(conn);
 801054e:	4620      	mov	r0, r4
 8010550:	f00d f8ee 	bl	801d730 <bt_conn_unref>
		return true;
 8010554:	2001      	movs	r0, #1
 8010556:	e7dc      	b.n	8010512 <bt_conn_exists_le+0xa>
		return "connect-scan";
 8010558:	490c      	ldr	r1, [pc, #48]	; (801058c <bt_conn_exists_le+0x84>)
 801055a:	e7f5      	b.n	8010548 <bt_conn_exists_le+0x40>
		return "connect-dir-adv";
 801055c:	490c      	ldr	r1, [pc, #48]	; (8010590 <bt_conn_exists_le+0x88>)
 801055e:	e7f3      	b.n	8010548 <bt_conn_exists_le+0x40>
		return "connect-adv";
 8010560:	490c      	ldr	r1, [pc, #48]	; (8010594 <bt_conn_exists_le+0x8c>)
 8010562:	e7f1      	b.n	8010548 <bt_conn_exists_le+0x40>
		return "connect-auto";
 8010564:	490c      	ldr	r1, [pc, #48]	; (8010598 <bt_conn_exists_le+0x90>)
 8010566:	e7ef      	b.n	8010548 <bt_conn_exists_le+0x40>
		return "connect";
 8010568:	490c      	ldr	r1, [pc, #48]	; (801059c <bt_conn_exists_le+0x94>)
 801056a:	e7ed      	b.n	8010548 <bt_conn_exists_le+0x40>
		return "connected";
 801056c:	490c      	ldr	r1, [pc, #48]	; (80105a0 <bt_conn_exists_le+0x98>)
 801056e:	e7eb      	b.n	8010548 <bt_conn_exists_le+0x40>
		return "disconnect";
 8010570:	490c      	ldr	r1, [pc, #48]	; (80105a4 <bt_conn_exists_le+0x9c>)
 8010572:	e7e9      	b.n	8010548 <bt_conn_exists_le+0x40>
		return "(unknown)";
 8010574:	490c      	ldr	r1, [pc, #48]	; (80105a8 <bt_conn_exists_le+0xa0>)
 8010576:	e7e7      	b.n	8010548 <bt_conn_exists_le+0x40>
		return "disconnect-complete";
 8010578:	490c      	ldr	r1, [pc, #48]	; (80105ac <bt_conn_exists_le+0xa4>)
 801057a:	e7e5      	b.n	8010548 <bt_conn_exists_le+0x40>
 801057c:	08022ba0 	.word	0x08022ba0
 8010580:	08022b90 	.word	0x08022b90
 8010584:	08026f90 	.word	0x08026f90
 8010588:	08026fa0 	.word	0x08026fa0
 801058c:	08026f40 	.word	0x08026f40
 8010590:	08026f50 	.word	0x08026f50
 8010594:	08026f60 	.word	0x08026f60
 8010598:	08026f6c 	.word	0x08026f6c
 801059c:	08026f7c 	.word	0x08026f7c
 80105a0:	08027288 	.word	0x08027288
 80105a4:	08026f84 	.word	0x08026f84
 80105a8:	08026f20 	.word	0x08026f20
 80105ac:	08026f2c 	.word	0x08026f2c

080105b0 <bt_conn_set_state>:
{
 80105b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105b2:	460e      	mov	r6, r1
	if (conn->state == state) {
 80105b4:	7b45      	ldrb	r5, [r0, #13]
 80105b6:	428d      	cmp	r5, r1
 80105b8:	d014      	beq.n	80105e4 <bt_conn_set_state+0x34>
 80105ba:	4604      	mov	r4, r0
	conn->state = state;
 80105bc:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
 80105be:	2d00      	cmp	r5, #0
 80105c0:	d03e      	beq.n	8010640 <bt_conn_set_state+0x90>
 80105c2:	2d06      	cmp	r5, #6
 80105c4:	d03f      	beq.n	8010646 <bt_conn_set_state+0x96>
	switch (conn->state) {
 80105c6:	7b63      	ldrb	r3, [r4, #13]
 80105c8:	2b08      	cmp	r3, #8
 80105ca:	f200 80dd 	bhi.w	8010788 <bt_conn_set_state+0x1d8>
 80105ce:	e8df f013 	tbh	[pc, r3, lsl #1]
 80105d2:	0057      	.short	0x0057
 80105d4:	00da00d7 	.word	0x00da00d7
 80105d8:	00da00da 	.word	0x00da00da
 80105dc:	00bd00da 	.word	0x00bd00da
 80105e0:	00da0041 	.word	0x00da0041
		BT_WARN("no transition %s", state2str(state));
 80105e4:	f04f 0200 	mov.w	r2, #0
 80105e8:	2302      	movs	r3, #2
 80105ea:	f363 0202 	bfi	r2, r3, #0, #3
 80105ee:	f36f 02c5 	bfc	r2, #3, #3
 80105f2:	4b6f      	ldr	r3, [pc, #444]	; (80107b0 <bt_conn_set_state+0x200>)
 80105f4:	496f      	ldr	r1, [pc, #444]	; (80107b4 <bt_conn_set_state+0x204>)
 80105f6:	1a5b      	subs	r3, r3, r1
 80105f8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80105fc:	f363 128f 	bfi	r2, r3, #6, #10
	switch (state) {
 8010600:	2e08      	cmp	r6, #8
 8010602:	d819      	bhi.n	8010638 <bt_conn_set_state+0x88>
 8010604:	e8df f006 	tbb	[pc, r6]
 8010608:	100a1a05 	.word	0x100a1a05
 801060c:	14120c0e 	.word	0x14120c0e
 8010610:	16          	.byte	0x16
 8010611:	00          	.byte	0x00
		BT_WARN("no transition %s", state2str(state));
 8010612:	4969      	ldr	r1, [pc, #420]	; (80107b8 <bt_conn_set_state+0x208>)
 8010614:	4869      	ldr	r0, [pc, #420]	; (80107bc <bt_conn_set_state+0x20c>)
 8010616:	f7f5 ff93 	bl	8006540 <log_1>
		return;
 801061a:	e0b4      	b.n	8010786 <bt_conn_set_state+0x1d6>
		return "connect-scan";
 801061c:	4968      	ldr	r1, [pc, #416]	; (80107c0 <bt_conn_set_state+0x210>)
 801061e:	e7f9      	b.n	8010614 <bt_conn_set_state+0x64>
		return "connect-dir-adv";
 8010620:	4968      	ldr	r1, [pc, #416]	; (80107c4 <bt_conn_set_state+0x214>)
 8010622:	e7f7      	b.n	8010614 <bt_conn_set_state+0x64>
		return "connect-adv";
 8010624:	4968      	ldr	r1, [pc, #416]	; (80107c8 <bt_conn_set_state+0x218>)
 8010626:	e7f5      	b.n	8010614 <bt_conn_set_state+0x64>
		return "connect-auto";
 8010628:	4968      	ldr	r1, [pc, #416]	; (80107cc <bt_conn_set_state+0x21c>)
 801062a:	e7f3      	b.n	8010614 <bt_conn_set_state+0x64>
		return "connect";
 801062c:	4968      	ldr	r1, [pc, #416]	; (80107d0 <bt_conn_set_state+0x220>)
 801062e:	e7f1      	b.n	8010614 <bt_conn_set_state+0x64>
		return "connected";
 8010630:	4968      	ldr	r1, [pc, #416]	; (80107d4 <bt_conn_set_state+0x224>)
 8010632:	e7ef      	b.n	8010614 <bt_conn_set_state+0x64>
		return "disconnect";
 8010634:	4968      	ldr	r1, [pc, #416]	; (80107d8 <bt_conn_set_state+0x228>)
 8010636:	e7ed      	b.n	8010614 <bt_conn_set_state+0x64>
		return "(unknown)";
 8010638:	4968      	ldr	r1, [pc, #416]	; (80107dc <bt_conn_set_state+0x22c>)
 801063a:	e7eb      	b.n	8010614 <bt_conn_set_state+0x64>
		return "disconnect-complete";
 801063c:	4968      	ldr	r1, [pc, #416]	; (80107e0 <bt_conn_set_state+0x230>)
 801063e:	e7e9      	b.n	8010614 <bt_conn_set_state+0x64>
		bt_conn_ref(conn);
 8010640:	f00d f843 	bl	801d6ca <bt_conn_ref>
		break;
 8010644:	e7bf      	b.n	80105c6 <bt_conn_set_state+0x16>
		    conn->type == BT_CONN_TYPE_LE) {
 8010646:	7883      	ldrb	r3, [r0, #2]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
 8010648:	2b01      	cmp	r3, #1
 801064a:	d1bc      	bne.n	80105c6 <bt_conn_set_state+0x16>
			k_delayed_work_cancel(&conn->update_work);
 801064c:	3058      	adds	r0, #88	; 0x58
 801064e:	f011 fe97 	bl	8022380 <k_delayed_work_cancel>
 8010652:	e7b8      	b.n	80105c6 <bt_conn_set_state+0x16>
		if (conn->type == BT_CONN_TYPE_SCO) {
 8010654:	78a3      	ldrb	r3, [r4, #2]
 8010656:	2b04      	cmp	r3, #4
 8010658:	f000 8095 	beq.w	8010786 <bt_conn_set_state+0x1d6>
		k_fifo_init(&conn->tx_queue);
 801065c:	f104 0034 	add.w	r0, r4, #52	; 0x34
	z_impl_k_queue_init(queue);
 8010660:	f011 fc1c 	bl	8021e9c <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
 8010664:	2100      	movs	r1, #0
 8010666:	485f      	ldr	r0, [pc, #380]	; (80107e4 <bt_conn_set_state+0x234>)
 8010668:	f009 f852 	bl	8019710 <z_impl_k_poll_signal_raise>
	list->head = NULL;
 801066c:	2300      	movs	r3, #0
 801066e:	64e3      	str	r3, [r4, #76]	; 0x4c
	list->tail = NULL;
 8010670:	6523      	str	r3, [r4, #80]	; 0x50
		bt_l2cap_connected(conn);
 8010672:	4620      	mov	r0, r4
 8010674:	f000 fd34 	bl	80110e0 <bt_l2cap_connected>
		notify_connected(conn);
 8010678:	4620      	mov	r0, r4
 801067a:	f7ff fbdf 	bl	800fe3c <notify_connected>
		break;
 801067e:	e082      	b.n	8010786 <bt_conn_set_state+0x1d6>
		if (conn->type == BT_CONN_TYPE_SCO) {
 8010680:	78a3      	ldrb	r3, [r4, #2]
 8010682:	2b04      	cmp	r3, #4
 8010684:	d008      	beq.n	8010698 <bt_conn_set_state+0xe8>
		switch (old_state) {
 8010686:	2d08      	cmp	r5, #8
 8010688:	d87d      	bhi.n	8010786 <bt_conn_set_state+0x1d6>
 801068a:	e8df f005 	tbb	[pc, r5]
 801068e:	094c      	.short	0x094c
 8010690:	3a484430 	.word	0x3a484430
 8010694:	4c26      	.short	0x4c26
 8010696:	4c          	.byte	0x4c
 8010697:	00          	.byte	0x00
			bt_conn_unref(conn);
 8010698:	4620      	mov	r0, r4
 801069a:	f00d f849 	bl	801d730 <bt_conn_unref>
			break;
 801069e:	e072      	b.n	8010786 <bt_conn_set_state+0x1d6>
			tx_notify(conn);
 80106a0:	4620      	mov	r0, r4
 80106a2:	f00c fe6a 	bl	801d37a <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
 80106a6:	78a3      	ldrb	r3, [r4, #2]
 80106a8:	2b01      	cmp	r3, #1
 80106aa:	d011      	beq.n	80106d0 <bt_conn_set_state+0x120>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
 80106ac:	3404      	adds	r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 80106ae:	f3bf 8f5b 	dmb	ish
 80106b2:	e854 3f00 	ldrex	r3, [r4]
 80106b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106ba:	e844 3200 	strex	r2, r3, [r4]
 80106be:	2a00      	cmp	r2, #0
 80106c0:	d1f7      	bne.n	80106b2 <bt_conn_set_state+0x102>
 80106c2:	f3bf 8f5b 	dmb	ish
 80106c6:	2100      	movs	r1, #0
 80106c8:	4846      	ldr	r0, [pc, #280]	; (80107e4 <bt_conn_set_state+0x234>)
 80106ca:	f009 f821 	bl	8019710 <z_impl_k_poll_signal_raise>
 80106ce:	e05a      	b.n	8010786 <bt_conn_set_state+0x1d6>
				k_delayed_work_cancel(&conn->update_work);
 80106d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80106d4:	f011 fe54 	bl	8022380 <k_delayed_work_cancel>
 80106d8:	e7e8      	b.n	80106ac <bt_conn_set_state+0xfc>
			if (conn->err) {
 80106da:	7b23      	ldrb	r3, [r4, #12]
 80106dc:	b91b      	cbnz	r3, 80106e6 <bt_conn_set_state+0x136>
			bt_conn_unref(conn);
 80106de:	4620      	mov	r0, r4
 80106e0:	f00d f826 	bl	801d730 <bt_conn_unref>
			break;
 80106e4:	e04f      	b.n	8010786 <bt_conn_set_state+0x1d6>
				notify_connected(conn);
 80106e6:	4620      	mov	r0, r4
 80106e8:	f7ff fba8 	bl	800fe3c <notify_connected>
 80106ec:	e7f7      	b.n	80106de <bt_conn_set_state+0x12e>
			if (conn->err) {
 80106ee:	7b23      	ldrb	r3, [r4, #12]
 80106f0:	b91b      	cbnz	r3, 80106fa <bt_conn_set_state+0x14a>
			bt_conn_unref(conn);
 80106f2:	4620      	mov	r0, r4
 80106f4:	f00d f81c 	bl	801d730 <bt_conn_unref>
			break;
 80106f8:	e045      	b.n	8010786 <bt_conn_set_state+0x1d6>
				notify_connected(conn);
 80106fa:	4620      	mov	r0, r4
 80106fc:	f7ff fb9e 	bl	800fe3c <notify_connected>
 8010700:	e7f7      	b.n	80106f2 <bt_conn_set_state+0x142>
			if (conn->err) {
 8010702:	7b23      	ldrb	r3, [r4, #12]
 8010704:	b91b      	cbnz	r3, 801070e <bt_conn_set_state+0x15e>
			bt_conn_unref(conn);
 8010706:	4620      	mov	r0, r4
 8010708:	f00d f812 	bl	801d730 <bt_conn_unref>
			break;
 801070c:	e03b      	b.n	8010786 <bt_conn_set_state+0x1d6>
				notify_connected(conn);
 801070e:	4620      	mov	r0, r4
 8010710:	f7ff fb94 	bl	800fe3c <notify_connected>
 8010714:	e7f7      	b.n	8010706 <bt_conn_set_state+0x156>
			bt_conn_unref(conn);
 8010716:	4620      	mov	r0, r4
 8010718:	f00d f80a 	bl	801d730 <bt_conn_unref>
			break;
 801071c:	e033      	b.n	8010786 <bt_conn_set_state+0x1d6>
			bt_conn_unref(conn);
 801071e:	4620      	mov	r0, r4
 8010720:	f00d f806 	bl	801d730 <bt_conn_unref>
			break;
 8010724:	e02f      	b.n	8010786 <bt_conn_set_state+0x1d6>
			BT_WARN("Invalid (%u) old state", state);
 8010726:	f04f 0200 	mov.w	r2, #0
 801072a:	2302      	movs	r3, #2
 801072c:	f363 0202 	bfi	r2, r3, #0, #3
 8010730:	f36f 02c5 	bfc	r2, #3, #3
 8010734:	4b1e      	ldr	r3, [pc, #120]	; (80107b0 <bt_conn_set_state+0x200>)
 8010736:	491f      	ldr	r1, [pc, #124]	; (80107b4 <bt_conn_set_state+0x204>)
 8010738:	1a5b      	subs	r3, r3, r1
 801073a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 801073e:	f363 128f 	bfi	r2, r3, #6, #10
 8010742:	4631      	mov	r1, r6
 8010744:	4828      	ldr	r0, [pc, #160]	; (80107e8 <bt_conn_set_state+0x238>)
 8010746:	f7f5 fefb 	bl	8006540 <log_1>
 801074a:	e01c      	b.n	8010786 <bt_conn_set_state+0x1d6>
		if (conn->type == BT_CONN_TYPE_SCO) {
 801074c:	78a3      	ldrb	r3, [r4, #2]
 801074e:	2b04      	cmp	r3, #4
 8010750:	d019      	beq.n	8010786 <bt_conn_set_state+0x1d6>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
 8010752:	2b01      	cmp	r3, #1
 8010754:	d117      	bne.n	8010786 <bt_conn_set_state+0x1d6>
				K_MSEC(10 * bt_dev.create_param.timeout));
 8010756:	4b25      	ldr	r3, [pc, #148]	; (80107ec <bt_conn_set_state+0x23c>)
 8010758:	8a9b      	ldrh	r3, [r3, #20]
 801075a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801075e:	005b      	lsls	r3, r3, #1
 8010760:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010764:	17df      	asrs	r7, r3, #31
			return t * (to_hz / from_hz);
 8010766:	009a      	lsls	r2, r3, #2
 8010768:	00b9      	lsls	r1, r7, #2
 801076a:	18d2      	adds	r2, r2, r3
 801076c:	eb41 0307 	adc.w	r3, r1, r7
 8010770:	1892      	adds	r2, r2, r2
 8010772:	415b      	adcs	r3, r3
 8010774:	f104 0158 	add.w	r1, r4, #88	; 0x58
 8010778:	481d      	ldr	r0, [pc, #116]	; (80107f0 <bt_conn_set_state+0x240>)
 801077a:	f008 fb79 	bl	8018e70 <k_delayed_work_submit_to_queue>
 801077e:	e002      	b.n	8010786 <bt_conn_set_state+0x1d6>
		process_unack_tx(conn);
 8010780:	4620      	mov	r0, r4
 8010782:	f00c fe46 	bl	801d412 <process_unack_tx>
}
 8010786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		BT_WARN("no valid (%u) state was set", state);
 8010788:	f04f 0200 	mov.w	r2, #0
 801078c:	2302      	movs	r3, #2
 801078e:	f363 0202 	bfi	r2, r3, #0, #3
 8010792:	f36f 02c5 	bfc	r2, #3, #3
 8010796:	4b06      	ldr	r3, [pc, #24]	; (80107b0 <bt_conn_set_state+0x200>)
 8010798:	4906      	ldr	r1, [pc, #24]	; (80107b4 <bt_conn_set_state+0x204>)
 801079a:	1a5b      	subs	r3, r3, r1
 801079c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80107a0:	f363 128f 	bfi	r2, r3, #6, #10
 80107a4:	4631      	mov	r1, r6
 80107a6:	4813      	ldr	r0, [pc, #76]	; (80107f4 <bt_conn_set_state+0x244>)
 80107a8:	f7f5 feca 	bl	8006540 <log_1>
 80107ac:	e7eb      	b.n	8010786 <bt_conn_set_state+0x1d6>
 80107ae:	bf00      	nop
 80107b0:	08022ba0 	.word	0x08022ba0
 80107b4:	08022b90 	.word	0x08022b90
 80107b8:	08026f90 	.word	0x08026f90
 80107bc:	08026fc4 	.word	0x08026fc4
 80107c0:	08026f40 	.word	0x08026f40
 80107c4:	08026f50 	.word	0x08026f50
 80107c8:	08026f60 	.word	0x08026f60
 80107cc:	08026f6c 	.word	0x08026f6c
 80107d0:	08026f7c 	.word	0x08026f7c
 80107d4:	08027288 	.word	0x08027288
 80107d8:	08026f84 	.word	0x08026f84
 80107dc:	08026f20 	.word	0x08026f20
 80107e0:	08026f2c 	.word	0x08026f2c
 80107e4:	20000bb8 	.word	0x20000bb8
 80107e8:	08026fd8 	.word	0x08026fd8
 80107ec:	20000000 	.word	0x20000000
 80107f0:	20003310 	.word	0x20003310
 80107f4:	08026ff0 	.word	0x08026ff0

080107f8 <bt_conn_get_info>:
	info->type = conn->type;
 80107f8:	7883      	ldrb	r3, [r0, #2]
 80107fa:	700b      	strb	r3, [r1, #0]
	info->role = conn->role;
 80107fc:	78c3      	ldrb	r3, [r0, #3]
 80107fe:	704b      	strb	r3, [r1, #1]
	info->id = conn->id;
 8010800:	7a03      	ldrb	r3, [r0, #8]
 8010802:	708b      	strb	r3, [r1, #2]
	switch (conn->type) {
 8010804:	7883      	ldrb	r3, [r0, #2]
 8010806:	2b01      	cmp	r3, #1
 8010808:	d124      	bne.n	8010854 <bt_conn_get_info+0x5c>
		info->le.dst = &conn->le.dst;
 801080a:	f100 0388 	add.w	r3, r0, #136	; 0x88
 801080e:	608b      	str	r3, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
 8010810:	7a03      	ldrb	r3, [r0, #8]
 8010812:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8010816:	4a11      	ldr	r2, [pc, #68]	; (801085c <bt_conn_get_info+0x64>)
 8010818:	4413      	add	r3, r2
 801081a:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_MASTER) {
 801081c:	78c3      	ldrb	r3, [r0, #3]
 801081e:	b993      	cbnz	r3, 8010846 <bt_conn_get_info+0x4e>
			info->le.local = &conn->le.init_addr;
 8010820:	f100 038f 	add.w	r3, r0, #143	; 0x8f
 8010824:	60cb      	str	r3, [r1, #12]
			info->le.remote = &conn->le.resp_addr;
 8010826:	f100 0396 	add.w	r3, r0, #150	; 0x96
 801082a:	610b      	str	r3, [r1, #16]
		info->le.interval = conn->le.interval;
 801082c:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
 8010830:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
 8010832:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
 8010836:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
 8010838:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 801083c:	830b      	strh	r3, [r1, #24]
		info->le.phy = &conn->le.phy;
 801083e:	30b8      	adds	r0, #184	; 0xb8
 8010840:	61c8      	str	r0, [r1, #28]
		return 0;
 8010842:	2000      	movs	r0, #0
 8010844:	4770      	bx	lr
			info->le.local = &conn->le.resp_addr;
 8010846:	f100 0396 	add.w	r3, r0, #150	; 0x96
 801084a:	60cb      	str	r3, [r1, #12]
			info->le.remote = &conn->le.init_addr;
 801084c:	f100 038f 	add.w	r3, r0, #143	; 0x8f
 8010850:	610b      	str	r3, [r1, #16]
 8010852:	e7eb      	b.n	801082c <bt_conn_get_info+0x34>
	return -EINVAL;
 8010854:	f06f 0015 	mvn.w	r0, #21
}
 8010858:	4770      	bx	lr
 801085a:	bf00      	nop
 801085c:	20000000 	.word	0x20000000

08010860 <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
 8010860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010862:	b083      	sub	sp, #12
 8010864:	461f      	mov	r7, r3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8010866:	f3bf 8f5b 	dmb	ish
 801086a:	4b52      	ldr	r3, [pc, #328]	; (80109b4 <bt_conn_le_create+0x154>)
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	f3bf 8f5b 	dmb	ish
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
 8010872:	f013 0f02 	tst.w	r3, #2
 8010876:	f000 8085 	beq.w	8010984 <bt_conn_le_create+0x124>
 801087a:	4604      	mov	r4, r0
 801087c:	460e      	mov	r6, r1
 801087e:	4615      	mov	r5, r2
		return -EAGAIN;
	}

	if (!bt_le_conn_params_valid(conn_param)) {
 8010880:	4610      	mov	r0, r2
 8010882:	f00c fad9 	bl	801ce38 <bt_le_conn_params_valid>
 8010886:	2800      	cmp	r0, #0
 8010888:	d07f      	beq.n	801098a <bt_conn_le_create+0x12a>
		return -EINVAL;
	}

	if (!create_param_validate(create_param)) {
 801088a:	4630      	mov	r0, r6
 801088c:	f00c fd6f 	bl	801d36e <create_param_validate>
 8010890:	2800      	cmp	r0, #0
 8010892:	d07d      	beq.n	8010990 <bt_conn_le_create+0x130>
 8010894:	f3bf 8f5b 	dmb	ish
 8010898:	4b46      	ldr	r3, [pc, #280]	; (80109b4 <bt_conn_le_create+0x154>)
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
 80108a0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80108a4:	d177      	bne.n	8010996 <bt_conn_le_create+0x136>
 80108a6:	f3bf 8f5b 	dmb	ish
 80108aa:	4b42      	ldr	r3, [pc, #264]	; (80109b4 <bt_conn_le_create+0x154>)
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
 80108b2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80108b6:	d171      	bne.n	801099c <bt_conn_le_create+0x13c>
		return -EALREADY;
	}

	if (!bt_le_scan_random_addr_check()) {
 80108b8:	f00c faae 	bl	801ce18 <bt_le_scan_random_addr_check>
 80108bc:	2800      	cmp	r0, #0
 80108be:	d070      	beq.n	80109a2 <bt_conn_le_create+0x142>
		return -EINVAL;
	}

	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
 80108c0:	4621      	mov	r1, r4
 80108c2:	2000      	movs	r0, #0
 80108c4:	f7ff fe20 	bl	8010508 <bt_conn_exists_le>
 80108c8:	2800      	cmp	r0, #0
 80108ca:	d16d      	bne.n	80109a8 <bt_conn_le_create+0x148>
		return -EINVAL;
	}

	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
 80108cc:	7820      	ldrb	r0, [r4, #0]
 80108ce:	3802      	subs	r0, #2
 80108d0:	b2c0      	uxtb	r0, r0
 80108d2:	2801      	cmp	r0, #1
 80108d4:	d92b      	bls.n	801092e <bt_conn_le_create+0xce>
	    peer->type == BT_ADDR_LE_RANDOM_ID) {
		bt_addr_le_copy(&dst, peer);
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
	} else {
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
 80108d6:	4621      	mov	r1, r4
 80108d8:	2000      	movs	r0, #0
 80108da:	f00c fa76 	bl	801cdca <bt_lookup_id_addr>
 80108de:	4601      	mov	r1, r0
	memcpy(dst, src, sizeof(*dst));
 80108e0:	2207      	movs	r2, #7
 80108e2:	4668      	mov	r0, sp
 80108e4:	f00b ffe3 	bl	801c8ae <memcpy>
	}

	/* Only default identity supported for now */
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
 80108e8:	4669      	mov	r1, sp
 80108ea:	2000      	movs	r0, #0
 80108ec:	f00c fead 	bl	801d64a <bt_conn_add_le>
	if (!conn) {
 80108f0:	4604      	mov	r4, r0
 80108f2:	2800      	cmp	r0, #0
 80108f4:	d05b      	beq.n	80109ae <bt_conn_le_create+0x14e>
		return -ENOMEM;
	}

	bt_conn_set_param_le(conn, conn_param);
 80108f6:	4629      	mov	r1, r5
 80108f8:	f00c fd2c 	bl	801d354 <bt_conn_set_param_le>
	create_param_setup(create_param);
 80108fc:	4630      	mov	r0, r6
 80108fe:	f7ff fa5d 	bl	800fdbc <create_param_setup>

#if defined(CONFIG_BT_SMP)
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
 8010902:	4b2d      	ldr	r3, [pc, #180]	; (80109b8 <bt_conn_le_create+0x158>)
 8010904:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8010908:	b123      	cbz	r3, 8010914 <bt_conn_le_create+0xb4>
 801090a:	4a2b      	ldr	r2, [pc, #172]	; (80109b8 <bt_conn_le_create+0x158>)
 801090c:	f892 20e1 	ldrb.w	r2, [r2, #225]	; 0xe1
 8010910:	4293      	cmp	r3, r2
 8010912:	d21f      	bcs.n	8010954 <bt_conn_le_create+0xf4>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
 8010914:	2102      	movs	r1, #2
 8010916:	4620      	mov	r0, r4
 8010918:	f7ff fe4a 	bl	80105b0 <bt_conn_set_state>

		err = bt_le_scan_update(true);
 801091c:	2001      	movs	r0, #1
 801091e:	f7fd fc59 	bl	800e1d4 <bt_le_scan_update>
		if (err) {
 8010922:	4605      	mov	r5, r0
 8010924:	b970      	cbnz	r0, 8010944 <bt_conn_le_create+0xe4>
			bt_conn_unref(conn);

			return err;
		}

		*ret_conn = conn;
 8010926:	603c      	str	r4, [r7, #0]
		return err;
	}

	*ret_conn = conn;
	return 0;
}
 8010928:	4628      	mov	r0, r5
 801092a:	b003      	add	sp, #12
 801092c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801092e:	2207      	movs	r2, #7
 8010930:	4621      	mov	r1, r4
 8010932:	4668      	mov	r0, sp
 8010934:	f00b ffbb 	bl	801c8ae <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
 8010938:	f89d 3000 	ldrb.w	r3, [sp]
 801093c:	3b02      	subs	r3, #2
 801093e:	f88d 3000 	strb.w	r3, [sp]
 8010942:	e7d1      	b.n	80108e8 <bt_conn_le_create+0x88>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
 8010944:	2100      	movs	r1, #0
 8010946:	4620      	mov	r0, r4
 8010948:	f7ff fe32 	bl	80105b0 <bt_conn_set_state>
			bt_conn_unref(conn);
 801094c:	4620      	mov	r0, r4
 801094e:	f00c feef 	bl	801d730 <bt_conn_unref>
			return err;
 8010952:	e7e9      	b.n	8010928 <bt_conn_le_create+0xc8>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
 8010954:	2106      	movs	r1, #6
 8010956:	4620      	mov	r0, r4
 8010958:	f7ff fe2a 	bl	80105b0 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
 801095c:	4620      	mov	r0, r4
 801095e:	f00c fa67 	bl	801ce30 <bt_le_create_conn>
	if (err) {
 8010962:	4605      	mov	r5, r0
 8010964:	b908      	cbnz	r0, 801096a <bt_conn_le_create+0x10a>
	*ret_conn = conn;
 8010966:	603c      	str	r4, [r7, #0]
	return 0;
 8010968:	e7de      	b.n	8010928 <bt_conn_le_create+0xc8>
		conn->err = 0;
 801096a:	2600      	movs	r6, #0
 801096c:	7326      	strb	r6, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
 801096e:	4631      	mov	r1, r6
 8010970:	4620      	mov	r0, r4
 8010972:	f7ff fe1d 	bl	80105b0 <bt_conn_set_state>
		bt_conn_unref(conn);
 8010976:	4620      	mov	r0, r4
 8010978:	f00c feda 	bl	801d730 <bt_conn_unref>
		bt_le_scan_update(false);
 801097c:	4630      	mov	r0, r6
 801097e:	f7fd fc29 	bl	800e1d4 <bt_le_scan_update>
		return err;
 8010982:	e7d1      	b.n	8010928 <bt_conn_le_create+0xc8>
		return -EAGAIN;
 8010984:	f06f 050a 	mvn.w	r5, #10
 8010988:	e7ce      	b.n	8010928 <bt_conn_le_create+0xc8>
		return -EINVAL;
 801098a:	f06f 0515 	mvn.w	r5, #21
 801098e:	e7cb      	b.n	8010928 <bt_conn_le_create+0xc8>
		return -EINVAL;
 8010990:	f06f 0515 	mvn.w	r5, #21
 8010994:	e7c8      	b.n	8010928 <bt_conn_le_create+0xc8>
		return -EINVAL;
 8010996:	f06f 0515 	mvn.w	r5, #21
 801099a:	e7c5      	b.n	8010928 <bt_conn_le_create+0xc8>
		return -EALREADY;
 801099c:	f06f 0544 	mvn.w	r5, #68	; 0x44
 80109a0:	e7c2      	b.n	8010928 <bt_conn_le_create+0xc8>
		return -EINVAL;
 80109a2:	f06f 0515 	mvn.w	r5, #21
 80109a6:	e7bf      	b.n	8010928 <bt_conn_le_create+0xc8>
		return -EINVAL;
 80109a8:	f06f 0515 	mvn.w	r5, #21
 80109ac:	e7bc      	b.n	8010928 <bt_conn_le_create+0xc8>
		return -ENOMEM;
 80109ae:	f06f 050b 	mvn.w	r5, #11
 80109b2:	e7b9      	b.n	8010928 <bt_conn_le_create+0xc8>
 80109b4:	20000094 	.word	0x20000094
 80109b8:	20000000 	.word	0x20000000

080109bc <bt_le_set_auto_conn>:
 80109bc:	f3bf 8f5b 	dmb	ish
 80109c0:	4b3c      	ldr	r3, [pc, #240]	; (8010ab4 <bt_le_set_auto_conn+0xf8>)
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	f3bf 8f5b 	dmb	ish
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
 80109c8:	f013 0f02 	tst.w	r3, #2
 80109cc:	d068      	beq.n	8010aa0 <bt_le_set_auto_conn+0xe4>
{
 80109ce:	b570      	push	{r4, r5, r6, lr}
 80109d0:	4606      	mov	r6, r0
 80109d2:	460c      	mov	r4, r1
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
 80109d4:	b121      	cbz	r1, 80109e0 <bt_le_set_auto_conn+0x24>
 80109d6:	4608      	mov	r0, r1
 80109d8:	f00c fa2e 	bl	801ce38 <bt_le_conn_params_valid>
 80109dc:	2800      	cmp	r0, #0
 80109de:	d062      	beq.n	8010aa6 <bt_le_set_auto_conn+0xea>
		return -EINVAL;
	}

	if (!bt_le_scan_random_addr_check()) {
 80109e0:	f00c fa1a 	bl	801ce18 <bt_le_scan_random_addr_check>
 80109e4:	2800      	cmp	r0, #0
 80109e6:	d061      	beq.n	8010aac <bt_le_set_auto_conn+0xf0>
		return -EINVAL;
	}

	/* Only default identity is supported */
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
 80109e8:	4631      	mov	r1, r6
 80109ea:	2000      	movs	r0, #0
 80109ec:	f7ff fd16 	bl	801041c <bt_conn_lookup_addr_le>
	if (!conn) {
 80109f0:	4605      	mov	r5, r0
 80109f2:	b1d8      	cbz	r0, 8010a2c <bt_le_set_auto_conn+0x70>
		if (!conn) {
			return -ENOMEM;
		}
	}

	if (param) {
 80109f4:	b33c      	cbz	r4, 8010a46 <bt_le_set_auto_conn+0x8a>
		bt_conn_set_param_le(conn, param);
 80109f6:	4621      	mov	r1, r4
 80109f8:	4628      	mov	r0, r5
 80109fa:	f00c fcab 	bl	801d354 <bt_conn_set_param_le>

		if (!atomic_test_and_set_bit(conn->flags,
 80109fe:	1d2b      	adds	r3, r5, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8010a00:	f3bf 8f5b 	dmb	ish
 8010a04:	e853 2f00 	ldrex	r2, [r3]
 8010a08:	f042 0101 	orr.w	r1, r2, #1
 8010a0c:	e843 1000 	strex	r0, r1, [r3]
 8010a10:	2800      	cmp	r0, #0
 8010a12:	d1f7      	bne.n	8010a04 <bt_le_set_auto_conn+0x48>
 8010a14:	f3bf 8f5b 	dmb	ish
 8010a18:	f012 0f01 	tst.w	r2, #1
 8010a1c:	d00f      	beq.n	8010a3e <bt_le_set_auto_conn+0x82>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
 8010a1e:	7b6b      	ldrb	r3, [r5, #13]
 8010a20:	b363      	cbz	r3, 8010a7c <bt_le_set_auto_conn+0xc0>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
		}
		bt_le_scan_update(false);
	}

	bt_conn_unref(conn);
 8010a22:	4628      	mov	r0, r5
 8010a24:	f00c fe84 	bl	801d730 <bt_conn_unref>

	return 0;
 8010a28:	2000      	movs	r0, #0
}
 8010a2a:	bd70      	pop	{r4, r5, r6, pc}
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
 8010a2c:	4631      	mov	r1, r6
 8010a2e:	f00c fe0c 	bl	801d64a <bt_conn_add_le>
		if (!conn) {
 8010a32:	4605      	mov	r5, r0
 8010a34:	2800      	cmp	r0, #0
 8010a36:	d1dd      	bne.n	80109f4 <bt_le_set_auto_conn+0x38>
			return -ENOMEM;
 8010a38:	f06f 000b 	mvn.w	r0, #11
 8010a3c:	e7f5      	b.n	8010a2a <bt_le_set_auto_conn+0x6e>
			bt_conn_ref(conn);
 8010a3e:	4628      	mov	r0, r5
 8010a40:	f00c fe43 	bl	801d6ca <bt_conn_ref>
 8010a44:	e7eb      	b.n	8010a1e <bt_le_set_auto_conn+0x62>
		if (atomic_test_and_clear_bit(conn->flags,
 8010a46:	1d2b      	adds	r3, r5, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8010a48:	f3bf 8f5b 	dmb	ish
 8010a4c:	e853 2f00 	ldrex	r2, [r3]
 8010a50:	f022 0101 	bic.w	r1, r2, #1
 8010a54:	e843 1000 	strex	r0, r1, [r3]
 8010a58:	2800      	cmp	r0, #0
 8010a5a:	d1f7      	bne.n	8010a4c <bt_le_set_auto_conn+0x90>
 8010a5c:	f3bf 8f5b 	dmb	ish
 8010a60:	f012 0f01 	tst.w	r2, #1
 8010a64:	d0db      	beq.n	8010a1e <bt_le_set_auto_conn+0x62>
			bt_conn_unref(conn);
 8010a66:	4628      	mov	r0, r5
 8010a68:	f00c fe62 	bl	801d730 <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
 8010a6c:	7b6b      	ldrb	r3, [r5, #13]
 8010a6e:	2b02      	cmp	r3, #2
 8010a70:	d1d5      	bne.n	8010a1e <bt_le_set_auto_conn+0x62>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
 8010a72:	2100      	movs	r1, #0
 8010a74:	4628      	mov	r0, r5
 8010a76:	f7ff fd9b 	bl	80105b0 <bt_conn_set_state>
 8010a7a:	e7d0      	b.n	8010a1e <bt_le_set_auto_conn+0x62>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8010a7c:	f3bf 8f5b 	dmb	ish
 8010a80:	4b0c      	ldr	r3, [pc, #48]	; (8010ab4 <bt_le_set_auto_conn+0xf8>)
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
 8010a88:	f013 0f02 	tst.w	r3, #2
 8010a8c:	d0c9      	beq.n	8010a22 <bt_le_set_auto_conn+0x66>
		if (param) {
 8010a8e:	b11c      	cbz	r4, 8010a98 <bt_le_set_auto_conn+0xdc>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
 8010a90:	2102      	movs	r1, #2
 8010a92:	4628      	mov	r0, r5
 8010a94:	f7ff fd8c 	bl	80105b0 <bt_conn_set_state>
		bt_le_scan_update(false);
 8010a98:	2000      	movs	r0, #0
 8010a9a:	f7fd fb9b 	bl	800e1d4 <bt_le_scan_update>
 8010a9e:	e7c0      	b.n	8010a22 <bt_le_set_auto_conn+0x66>
		return -EAGAIN;
 8010aa0:	f06f 000a 	mvn.w	r0, #10
}
 8010aa4:	4770      	bx	lr
		return -EINVAL;
 8010aa6:	f06f 0015 	mvn.w	r0, #21
 8010aaa:	e7be      	b.n	8010a2a <bt_le_set_auto_conn+0x6e>
		return -EINVAL;
 8010aac:	f06f 0015 	mvn.w	r0, #21
 8010ab0:	e7bb      	b.n	8010a2a <bt_le_set_auto_conn+0x6e>
 8010ab2:	bf00      	nop
 8010ab4:	20000094 	.word	0x20000094

08010ab8 <bt_conn_disconnect>:
{
 8010ab8:	b538      	push	{r3, r4, r5, lr}
 8010aba:	4604      	mov	r4, r0
 8010abc:	460d      	mov	r5, r1
	    conn->type == BT_CONN_TYPE_LE) {
 8010abe:	7883      	ldrb	r3, [r0, #2]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
 8010ac0:	2b01      	cmp	r3, #1
 8010ac2:	d009      	beq.n	8010ad8 <bt_conn_disconnect+0x20>
	switch (conn->state) {
 8010ac4:	7b63      	ldrb	r3, [r4, #13]
 8010ac6:	3b02      	subs	r3, #2
 8010ac8:	2b06      	cmp	r3, #6
 8010aca:	d83b      	bhi.n	8010b44 <bt_conn_disconnect+0x8c>
 8010acc:	e8df f003 	tbb	[pc, r3]
 8010ad0:	153a3a0b 	.word	0x153a3a0b
 8010ad4:	352e      	.short	0x352e
 8010ad6:	09          	.byte	0x09
 8010ad7:	00          	.byte	0x00
		bt_le_set_auto_conn(&conn->le.dst, NULL);
 8010ad8:	2100      	movs	r1, #0
 8010ada:	3088      	adds	r0, #136	; 0x88
 8010adc:	f7ff ff6e 	bl	80109bc <bt_le_set_auto_conn>
 8010ae0:	e7f0      	b.n	8010ac4 <bt_conn_disconnect+0xc>
	switch (conn->state) {
 8010ae2:	2000      	movs	r0, #0
 8010ae4:	e008      	b.n	8010af8 <bt_conn_disconnect+0x40>
		conn->err = reason;
 8010ae6:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
 8010ae8:	2100      	movs	r1, #0
 8010aea:	4620      	mov	r0, r4
 8010aec:	f7ff fd60 	bl	80105b0 <bt_conn_set_state>
			bt_le_scan_update(false);
 8010af0:	2000      	movs	r0, #0
 8010af2:	f7fd fb6f 	bl	800e1d4 <bt_le_scan_update>
		return 0;
 8010af6:	2000      	movs	r0, #0
}
 8010af8:	bd38      	pop	{r3, r4, r5, pc}
		BT_WARN("Deprecated: Use bt_le_adv_stop instead");
 8010afa:	f04f 0100 	mov.w	r1, #0
 8010afe:	2302      	movs	r3, #2
 8010b00:	f363 0102 	bfi	r1, r3, #0, #3
 8010b04:	f36f 01c5 	bfc	r1, #3, #3
 8010b08:	4b10      	ldr	r3, [pc, #64]	; (8010b4c <bt_conn_disconnect+0x94>)
 8010b0a:	4a11      	ldr	r2, [pc, #68]	; (8010b50 <bt_conn_disconnect+0x98>)
 8010b0c:	1a9b      	subs	r3, r3, r2
 8010b0e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8010b12:	f363 118f 	bfi	r1, r3, #6, #10
 8010b16:	480f      	ldr	r0, [pc, #60]	; (8010b54 <bt_conn_disconnect+0x9c>)
 8010b18:	f7f5 fe82 	bl	8006820 <log_0>
		conn->err = reason;
 8010b1c:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
 8010b1e:	2100      	movs	r1, #0
 8010b20:	4620      	mov	r0, r4
 8010b22:	f7ff fd45 	bl	80105b0 <bt_conn_set_state>
			return bt_le_adv_stop();
 8010b26:	f7fe fd29 	bl	800f57c <bt_le_adv_stop>
 8010b2a:	e7e5      	b.n	8010af8 <bt_conn_disconnect+0x40>
			k_delayed_work_cancel(&conn->update_work);
 8010b2c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010b30:	f011 fc26 	bl	8022380 <k_delayed_work_cancel>
			return bt_le_create_conn_cancel();
 8010b34:	f7fd f8e2 	bl	800dcfc <bt_le_create_conn_cancel>
 8010b38:	e7de      	b.n	8010af8 <bt_conn_disconnect+0x40>
		return conn_disconnect(conn, reason);
 8010b3a:	4629      	mov	r1, r5
 8010b3c:	4620      	mov	r0, r4
 8010b3e:	f00c fe0f 	bl	801d760 <conn_disconnect>
 8010b42:	e7d9      	b.n	8010af8 <bt_conn_disconnect+0x40>
		return -ENOTCONN;
 8010b44:	f06f 0038 	mvn.w	r0, #56	; 0x38
 8010b48:	e7d6      	b.n	8010af8 <bt_conn_disconnect+0x40>
 8010b4a:	bf00      	nop
 8010b4c:	08022ba0 	.word	0x08022ba0
 8010b50:	08022b90 	.word	0x08022b90
 8010b54:	0802700c 	.word	0x0802700c

08010b58 <send_conn_le_param_update>:
{
 8010b58:	b538      	push	{r3, r4, r5, lr}
 8010b5a:	4604      	mov	r4, r0
 8010b5c:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
 8010b5e:	4608      	mov	r0, r1
 8010b60:	f00c f96a 	bl	801ce38 <bt_le_conn_params_valid>
 8010b64:	b330      	cbz	r0, 8010bb4 <send_conn_le_param_update+0x5c>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
 8010b66:	4b15      	ldr	r3, [pc, #84]	; (8010bbc <send_conn_le_param_update+0x64>)
 8010b68:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010b6c:	f013 0f02 	tst.w	r3, #2
 8010b70:	d004      	beq.n	8010b7c <send_conn_le_param_update+0x24>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
 8010b72:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
 8010b76:	f013 0f02 	tst.w	r3, #2
 8010b7a:	d10d      	bne.n	8010b98 <send_conn_le_param_update+0x40>
	     (conn->role == BT_HCI_ROLE_MASTER)) {
 8010b7c:	78e3      	ldrb	r3, [r4, #3]
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
 8010b7e:	b9a3      	cbnz	r3, 8010baa <send_conn_le_param_update+0x52>
		rc = bt_conn_le_conn_update(conn, param);
 8010b80:	4629      	mov	r1, r5
 8010b82:	4620      	mov	r0, r4
 8010b84:	f00c fe1f 	bl	801d7c6 <bt_conn_le_conn_update>
		if (rc == 0) {
 8010b88:	b998      	cbnz	r0, 8010bb2 <send_conn_le_param_update+0x5a>
			conn->le.pending_latency = param->latency;
 8010b8a:	88ab      	ldrh	r3, [r5, #4]
 8010b8c:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
 8010b90:	88eb      	ldrh	r3, [r5, #6]
 8010b92:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
		return rc;
 8010b96:	e00c      	b.n	8010bb2 <send_conn_le_param_update+0x5a>
 8010b98:	f3bf 8f5b 	dmb	ish
 8010b9c:	6863      	ldr	r3, [r4, #4]
 8010b9e:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
 8010ba2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8010ba6:	d1e9      	bne.n	8010b7c <send_conn_le_param_update+0x24>
 8010ba8:	e7ea      	b.n	8010b80 <send_conn_le_param_update+0x28>
	return bt_l2cap_update_conn_param(conn, param);
 8010baa:	4629      	mov	r1, r5
 8010bac:	4620      	mov	r0, r4
 8010bae:	f00c ff89 	bl	801dac4 <bt_l2cap_update_conn_param>
}
 8010bb2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 8010bb4:	f06f 0015 	mvn.w	r0, #21
 8010bb8:	e7fb      	b.n	8010bb2 <send_conn_le_param_update+0x5a>
 8010bba:	bf00      	nop
 8010bbc:	20000000 	.word	0x20000000

08010bc0 <conn_update_timeout>:
{
 8010bc0:	b530      	push	{r4, r5, lr}
 8010bc2:	b085      	sub	sp, #20
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, update_work);
 8010bc4:	f1a0 0458 	sub.w	r4, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
 8010bc8:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
 8010bcc:	b3cb      	cbz	r3, 8010c42 <conn_update_timeout+0x82>
	if (conn->type != BT_CONN_TYPE_LE) {
 8010bce:	f810 3c56 	ldrb.w	r3, [r0, #-86]
 8010bd2:	2b01      	cmp	r3, #1
 8010bd4:	d133      	bne.n	8010c3e <conn_update_timeout+0x7e>
	    conn->role == BT_CONN_ROLE_MASTER) {
 8010bd6:	f810 3c55 	ldrb.w	r3, [r0, #-85]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
 8010bda:	b3e3      	cbz	r3, 8010c56 <conn_update_timeout+0x96>
		if (atomic_test_and_clear_bit(conn->flags,
 8010bdc:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8010be0:	f3bf 8f5b 	dmb	ish
 8010be4:	e855 3f00 	ldrex	r3, [r5]
 8010be8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8010bec:	e845 2100 	strex	r1, r2, [r5]
 8010bf0:	2900      	cmp	r1, #0
 8010bf2:	d1f7      	bne.n	8010be4 <conn_update_timeout+0x24>
 8010bf4:	f3bf 8f5b 	dmb	ish
 8010bf8:	f413 7f00 	tst.w	r3, #512	; 0x200
 8010bfc:	d02e      	beq.n	8010c5c <conn_update_timeout+0x9c>
			param = BT_LE_CONN_PARAM(conn->le.interval_min,
 8010bfe:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
 8010c02:	f8ad 3000 	strh.w	r3, [sp]
 8010c06:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
 8010c0a:	f8ad 3002 	strh.w	r3, [sp, #2]
 8010c0e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8010c12:	f8ad 3004 	strh.w	r3, [sp, #4]
 8010c16:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8010c1a:	f8ad 3006 	strh.w	r3, [sp, #6]
			send_conn_le_param_update(conn, param);
 8010c1e:	4669      	mov	r1, sp
 8010c20:	4620      	mov	r0, r4
 8010c22:	f7ff ff99 	bl	8010b58 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8010c26:	f3bf 8f5b 	dmb	ish
 8010c2a:	e855 3f00 	ldrex	r3, [r5]
 8010c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010c32:	e845 3200 	strex	r2, r3, [r5]
 8010c36:	2a00      	cmp	r2, #0
 8010c38:	d1f7      	bne.n	8010c2a <conn_update_timeout+0x6a>
 8010c3a:	f3bf 8f5b 	dmb	ish
}
 8010c3e:	b005      	add	sp, #20
 8010c40:	bd30      	pop	{r4, r5, pc}
		bt_l2cap_disconnected(conn);
 8010c42:	4620      	mov	r0, r4
 8010c44:	f00c fe90 	bl	801d968 <bt_l2cap_disconnected>
		notify_disconnected(conn);
 8010c48:	4620      	mov	r0, r4
 8010c4a:	f7ff f8a5 	bl	800fd98 <notify_disconnected>
		bt_conn_unref(conn);
 8010c4e:	4620      	mov	r0, r4
 8010c50:	f00c fd6e 	bl	801d730 <bt_conn_unref>
		return;
 8010c54:	e7f3      	b.n	8010c3e <conn_update_timeout+0x7e>
		bt_le_create_conn_cancel();
 8010c56:	f7fd f851 	bl	800dcfc <bt_le_create_conn_cancel>
		return;
 8010c5a:	e7f0      	b.n	8010c3e <conn_update_timeout+0x7e>
			param = BT_LE_CONN_PARAM(
 8010c5c:	4a05      	ldr	r2, [pc, #20]	; (8010c74 <conn_update_timeout+0xb4>)
 8010c5e:	ab02      	add	r3, sp, #8
 8010c60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c64:	e883 0003 	stmia.w	r3, {r0, r1}
			send_conn_le_param_update(conn, param);
 8010c68:	4619      	mov	r1, r3
 8010c6a:	4620      	mov	r0, r4
 8010c6c:	f7ff ff74 	bl	8010b58 <send_conn_le_param_update>
 8010c70:	e7d9      	b.n	8010c26 <conn_update_timeout+0x66>
 8010c72:	bf00      	nop
 8010c74:	08022d60 	.word	0x08022d60

08010c78 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
 8010c78:	b538      	push	{r3, r4, r5, lr}
 8010c7a:	460c      	mov	r4, r1
	 * PDU must not be allocated from ISR as we block with 'K_FOREVER'
	 * during the allocation
	 */
	__ASSERT_NO_MSG(!k_is_in_isr());

	if (!pool) {
 8010c7c:	4601      	mov	r1, r0
 8010c7e:	b150      	cbz	r0, 8010c96 <bt_conn_create_pdu_timeout+0x1e>
	} else {
#if defined(CONFIG_NET_BUF_LOG)
		buf = net_buf_alloc_fixed_debug(pool, timeout, func,
							line);
#else
		buf = net_buf_alloc(pool, timeout);
 8010c80:	4608      	mov	r0, r1
 8010c82:	f00f fb78 	bl	8020376 <net_buf_alloc_fixed>
#endif
	}

	if (!buf) {
 8010c86:	4605      	mov	r5, r0
 8010c88:	b138      	cbz	r0, 8010c9a <bt_conn_create_pdu_timeout+0x22>
		BT_WARN("Unable to allocate buffer within timeout");
		return NULL;
	}

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);
 8010c8a:	1d21      	adds	r1, r4, #4
 8010c8c:	3008      	adds	r0, #8
 8010c8e:	f00f fb9a 	bl	80203c6 <net_buf_simple_reserve>

	return buf;
}
 8010c92:	4628      	mov	r0, r5
 8010c94:	bd38      	pop	{r3, r4, r5, pc}
		pool = &acl_tx_pool;
 8010c96:	490a      	ldr	r1, [pc, #40]	; (8010cc0 <bt_conn_create_pdu_timeout+0x48>)
 8010c98:	e7f2      	b.n	8010c80 <bt_conn_create_pdu_timeout+0x8>
		BT_WARN("Unable to allocate buffer within timeout");
 8010c9a:	f04f 0100 	mov.w	r1, #0
 8010c9e:	2302      	movs	r3, #2
 8010ca0:	f363 0102 	bfi	r1, r3, #0, #3
 8010ca4:	f36f 01c5 	bfc	r1, #3, #3
 8010ca8:	4b06      	ldr	r3, [pc, #24]	; (8010cc4 <bt_conn_create_pdu_timeout+0x4c>)
 8010caa:	4a07      	ldr	r2, [pc, #28]	; (8010cc8 <bt_conn_create_pdu_timeout+0x50>)
 8010cac:	1a9b      	subs	r3, r3, r2
 8010cae:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8010cb2:	f363 118f 	bfi	r1, r3, #6, #10
 8010cb6:	4805      	ldr	r0, [pc, #20]	; (8010ccc <bt_conn_create_pdu_timeout+0x54>)
 8010cb8:	f7f5 fdb2 	bl	8006820 <log_0>
		return NULL;
 8010cbc:	e7e9      	b.n	8010c92 <bt_conn_create_pdu_timeout+0x1a>
 8010cbe:	bf00      	nop
 8010cc0:	200010d8 	.word	0x200010d8
 8010cc4:	08022ba0 	.word	0x08022ba0
 8010cc8:	08022b90 	.word	0x08022b90
 8010ccc:	08027034 	.word	0x08027034

08010cd0 <bt_conn_create_frag_timeout>:
{
 8010cd0:	b508      	push	{r3, lr}
 8010cd2:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
 8010cd4:	4801      	ldr	r0, [pc, #4]	; (8010cdc <bt_conn_create_frag_timeout+0xc>)
 8010cd6:	f7ff ffcf 	bl	8010c78 <bt_conn_create_pdu_timeout>
}
 8010cda:	bd08      	pop	{r3, pc}
 8010cdc:	20001150 	.word	0x20001150

08010ce0 <create_frag>:
{
 8010ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ce2:	4606      	mov	r6, r0
 8010ce4:	460d      	mov	r5, r1
		frag = bt_conn_create_frag(0);
 8010ce6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010cea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010cee:	2000      	movs	r0, #0
 8010cf0:	f7ff ffee 	bl	8010cd0 <bt_conn_create_frag_timeout>
 8010cf4:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
 8010cf6:	7b73      	ldrb	r3, [r6, #13]
 8010cf8:	2b07      	cmp	r3, #7
 8010cfa:	d11a      	bne.n	8010d32 <create_frag+0x52>
	tx_data(frag)->tx = NULL;
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	6143      	str	r3, [r0, #20]
	return bt_dev.le.acl_mtu;
 8010d00:	4b10      	ldr	r3, [pc, #64]	; (8010d44 <create_frag+0x64>)
 8010d02:	f8b3 60c4 	ldrh.w	r6, [r3, #196]	; 0xc4
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
 8010d06:	f100 0708 	add.w	r7, r0, #8
 8010d0a:	4638      	mov	r0, r7
 8010d0c:	f00f fc03 	bl	8020516 <net_buf_simple_tailroom>
 8010d10:	4286      	cmp	r6, r0
 8010d12:	d212      	bcs.n	8010d3a <create_frag+0x5a>
	return bt_dev.le.acl_mtu;
 8010d14:	4b0b      	ldr	r3, [pc, #44]	; (8010d44 <create_frag+0x64>)
 8010d16:	f8b3 60c4 	ldrh.w	r6, [r3, #196]	; 0xc4
	net_buf_add_mem(frag, buf->data, frag_len);
 8010d1a:	4632      	mov	r2, r6
 8010d1c:	f855 1f08 	ldr.w	r1, [r5, #8]!
 8010d20:	4638      	mov	r0, r7
 8010d22:	f00f fbb1 	bl	8020488 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
 8010d26:	4631      	mov	r1, r6
 8010d28:	4628      	mov	r0, r5
 8010d2a:	f00f fbd0 	bl	80204ce <net_buf_simple_pull>
}
 8010d2e:	4620      	mov	r0, r4
 8010d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(frag);
 8010d32:	f00f fb59 	bl	80203e8 <net_buf_unref>
		return NULL;
 8010d36:	2400      	movs	r4, #0
 8010d38:	e7f9      	b.n	8010d2e <create_frag+0x4e>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
 8010d3a:	4638      	mov	r0, r7
 8010d3c:	f00f fbeb 	bl	8020516 <net_buf_simple_tailroom>
 8010d40:	b286      	uxth	r6, r0
 8010d42:	e7ea      	b.n	8010d1a <create_frag+0x3a>
 8010d44:	20000000 	.word	0x20000000

08010d48 <send_buf>:
{
 8010d48:	b538      	push	{r3, r4, r5, lr}
 8010d4a:	4605      	mov	r5, r0
 8010d4c:	460c      	mov	r4, r1
	if (buf->len <= conn_mtu(conn)) {
 8010d4e:	898b      	ldrh	r3, [r1, #12]
	return bt_dev.le.acl_mtu;
 8010d50:	4a1b      	ldr	r2, [pc, #108]	; (8010dc0 <send_buf+0x78>)
 8010d52:	f8b2 20c4 	ldrh.w	r2, [r2, #196]	; 0xc4
	if (buf->len <= conn_mtu(conn)) {
 8010d56:	429a      	cmp	r2, r3
 8010d58:	d21f      	bcs.n	8010d9a <send_buf+0x52>
	frag = create_frag(conn, buf);
 8010d5a:	f7ff ffc1 	bl	8010ce0 <create_frag>
	if (!frag) {
 8010d5e:	4601      	mov	r1, r0
 8010d60:	b350      	cbz	r0, 8010db8 <send_buf+0x70>
	if (!send_frag(conn, frag, FRAG_START, true)) {
 8010d62:	2301      	movs	r3, #1
 8010d64:	2200      	movs	r2, #0
 8010d66:	4628      	mov	r0, r5
 8010d68:	f7ff f884 	bl	800fe74 <send_frag>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	b1c8      	cbz	r0, 8010da4 <send_buf+0x5c>
	while (buf->len > conn_mtu(conn)) {
 8010d70:	89a3      	ldrh	r3, [r4, #12]
	return bt_dev.le.acl_mtu;
 8010d72:	4a13      	ldr	r2, [pc, #76]	; (8010dc0 <send_buf+0x78>)
 8010d74:	f8b2 20c4 	ldrh.w	r2, [r2, #196]	; 0xc4
	while (buf->len > conn_mtu(conn)) {
 8010d78:	429a      	cmp	r2, r3
 8010d7a:	d215      	bcs.n	8010da8 <send_buf+0x60>
		frag = create_frag(conn, buf);
 8010d7c:	4621      	mov	r1, r4
 8010d7e:	4628      	mov	r0, r5
 8010d80:	f7ff ffae 	bl	8010ce0 <create_frag>
		if (!frag) {
 8010d84:	4601      	mov	r1, r0
 8010d86:	b1c8      	cbz	r0, 8010dbc <send_buf+0x74>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
 8010d88:	2301      	movs	r3, #1
 8010d8a:	461a      	mov	r2, r3
 8010d8c:	4628      	mov	r0, r5
 8010d8e:	f7ff f871 	bl	800fe74 <send_frag>
 8010d92:	4603      	mov	r3, r0
 8010d94:	2800      	cmp	r0, #0
 8010d96:	d1eb      	bne.n	8010d70 <send_buf+0x28>
 8010d98:	e004      	b.n	8010da4 <send_buf+0x5c>
		return send_frag(conn, buf, FRAG_SINGLE, false);
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	2202      	movs	r2, #2
 8010d9e:	f7ff f869 	bl	800fe74 <send_frag>
 8010da2:	4603      	mov	r3, r0
}
 8010da4:	4618      	mov	r0, r3
 8010da6:	bd38      	pop	{r3, r4, r5, pc}
	return send_frag(conn, buf, FRAG_END, false);
 8010da8:	2300      	movs	r3, #0
 8010daa:	2203      	movs	r2, #3
 8010dac:	4621      	mov	r1, r4
 8010dae:	4628      	mov	r0, r5
 8010db0:	f7ff f860 	bl	800fe74 <send_frag>
 8010db4:	4603      	mov	r3, r0
 8010db6:	e7f5      	b.n	8010da4 <send_buf+0x5c>
		return false;
 8010db8:	2300      	movs	r3, #0
 8010dba:	e7f3      	b.n	8010da4 <send_buf+0x5c>
			return false;
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	e7f1      	b.n	8010da4 <send_buf+0x5c>
 8010dc0:	20000000 	.word	0x20000000

08010dc4 <bt_conn_process_tx>:
{
 8010dc4:	b538      	push	{r3, r4, r5, lr}
 8010dc6:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
 8010dc8:	7b43      	ldrb	r3, [r0, #13]
 8010dca:	b97b      	cbnz	r3, 8010dec <bt_conn_process_tx+0x28>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
 8010dcc:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8010dce:	f3bf 8f5b 	dmb	ish
 8010dd2:	e853 2f00 	ldrex	r2, [r3]
 8010dd6:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 8010dda:	e843 1000 	strex	r0, r1, [r3]
 8010dde:	2800      	cmp	r0, #0
 8010de0:	d1f7      	bne.n	8010dd2 <bt_conn_process_tx+0xe>
 8010de2:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
 8010de6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8010dea:	d10d      	bne.n	8010e08 <bt_conn_process_tx+0x44>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
 8010dec:	2200      	movs	r2, #0
 8010dee:	2300      	movs	r3, #0
 8010df0:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8010df4:	f00f fac6 	bl	8020384 <net_buf_get>
	BT_ASSERT(buf);
 8010df8:	4605      	mov	r5, r0
 8010dfa:	b148      	cbz	r0, 8010e10 <bt_conn_process_tx+0x4c>
	if (!send_buf(conn, buf)) {
 8010dfc:	4629      	mov	r1, r5
 8010dfe:	4620      	mov	r0, r4
 8010e00:	f7ff ffa2 	bl	8010d48 <send_buf>
 8010e04:	b190      	cbz	r0, 8010e2c <bt_conn_process_tx+0x68>
}
 8010e06:	bd38      	pop	{r3, r4, r5, pc}
		conn_cleanup(conn);
 8010e08:	4620      	mov	r0, r4
 8010e0a:	f7ff f989 	bl	8010120 <conn_cleanup>
		return;
 8010e0e:	e7fa      	b.n	8010e06 <bt_conn_process_tx+0x42>
	BT_ASSERT(buf);
 8010e10:	f240 5356 	movw	r3, #1366	; 0x556
 8010e14:	4a07      	ldr	r2, [pc, #28]	; (8010e34 <bt_conn_process_tx+0x70>)
 8010e16:	4908      	ldr	r1, [pc, #32]	; (8010e38 <bt_conn_process_tx+0x74>)
 8010e18:	4808      	ldr	r0, [pc, #32]	; (8010e3c <bt_conn_process_tx+0x78>)
 8010e1a:	f009 f8fb 	bl	801a014 <printk>
 8010e1e:	4040      	eors	r0, r0
 8010e20:	f380 8811 	msr	BASEPRI, r0
 8010e24:	f04f 0003 	mov.w	r0, #3
 8010e28:	df02      	svc	2
 8010e2a:	e7e7      	b.n	8010dfc <bt_conn_process_tx+0x38>
		net_buf_unref(buf);
 8010e2c:	4628      	mov	r0, r5
 8010e2e:	f00f fadb 	bl	80203e8 <net_buf_unref>
 8010e32:	e7e8      	b.n	8010e06 <bt_conn_process_tx+0x42>
 8010e34:	08027060 	.word	0x08027060
 8010e38:	08027dc0 	.word	0x08027dc0
 8010e3c:	080265d0 	.word	0x080265d0

08010e40 <bt_conn_auth_cb_register>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
 8010e40:	4603      	mov	r3, r0
 8010e42:	b140      	cbz	r0, 8010e56 <bt_conn_auth_cb_register+0x16>
		bt_auth = NULL;
		return 0;
	}

	if (bt_auth) {
 8010e44:	4a11      	ldr	r2, [pc, #68]	; (8010e8c <bt_conn_auth_cb_register+0x4c>)
 8010e46:	6812      	ldr	r2, [r2, #0]
 8010e48:	b9a2      	cbnz	r2, 8010e74 <bt_conn_auth_cb_register+0x34>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
 8010e4a:	6942      	ldr	r2, [r0, #20]
 8010e4c:	b132      	cbz	r2, 8010e5c <bt_conn_auth_cb_register+0x1c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
 8010e4e:	4a0f      	ldr	r2, [pc, #60]	; (8010e8c <bt_conn_auth_cb_register+0x4c>)
 8010e50:	6013      	str	r3, [r2, #0]
	return 0;
 8010e52:	2000      	movs	r0, #0
 8010e54:	4770      	bx	lr
		bt_auth = NULL;
 8010e56:	4b0d      	ldr	r3, [pc, #52]	; (8010e8c <bt_conn_auth_cb_register+0x4c>)
 8010e58:	6018      	str	r0, [r3, #0]
		return 0;
 8010e5a:	4770      	bx	lr
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
 8010e5c:	6842      	ldr	r2, [r0, #4]
	if (!cb->cancel &&
 8010e5e:	b962      	cbnz	r2, 8010e7a <bt_conn_auth_cb_register+0x3a>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
 8010e60:	6882      	ldr	r2, [r0, #8]
 8010e62:	b96a      	cbnz	r2, 8010e80 <bt_conn_auth_cb_register+0x40>
 8010e64:	68c2      	ldr	r2, [r0, #12]
 8010e66:	b972      	cbnz	r2, 8010e86 <bt_conn_auth_cb_register+0x46>
	     cb->pairing_confirm)) {
 8010e68:	6982      	ldr	r2, [r0, #24]
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
 8010e6a:	2a00      	cmp	r2, #0
 8010e6c:	d0ef      	beq.n	8010e4e <bt_conn_auth_cb_register+0xe>
		return -EINVAL;
 8010e6e:	f06f 0015 	mvn.w	r0, #21
}
 8010e72:	4770      	bx	lr
		return -EALREADY;
 8010e74:	f06f 0044 	mvn.w	r0, #68	; 0x44
 8010e78:	4770      	bx	lr
		return -EINVAL;
 8010e7a:	f06f 0015 	mvn.w	r0, #21
 8010e7e:	4770      	bx	lr
 8010e80:	f06f 0015 	mvn.w	r0, #21
 8010e84:	4770      	bx	lr
 8010e86:	f06f 0015 	mvn.w	r0, #21
 8010e8a:	4770      	bx	lr
 8010e8c:	2000417c 	.word	0x2000417c

08010e90 <bt_conn_index>:
		__ASSERT(index < CONFIG_BT_MAX_SCO_CONN,
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
 8010e90:	4b03      	ldr	r3, [pc, #12]	; (8010ea0 <bt_conn_index+0x10>)
 8010e92:	1ac0      	subs	r0, r0, r3
 8010e94:	1180      	asrs	r0, r0, #6
 8010e96:	4b03      	ldr	r3, [pc, #12]	; (8010ea4 <bt_conn_index+0x14>)
 8010e98:	fb03 f000 	mul.w	r0, r3, r0
		__ASSERT(index < CONFIG_BT_MAX_CONN, "Invalid bt_conn pointer");
		break;
	}

	return index;
}
 8010e9c:	b2c0      	uxtb	r0, r0
 8010e9e:	4770      	bx	lr
 8010ea0:	20001d40 	.word	0x20001d40
 8010ea4:	aaaaaaab 	.word	0xaaaaaaab

08010ea8 <bt_conn_lookup_index>:

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	struct bt_conn *conn;

	if (index >= ARRAY_SIZE(acl_conns)) {
 8010ea8:	2805      	cmp	r0, #5
 8010eaa:	d814      	bhi.n	8010ed6 <bt_conn_lookup_index+0x2e>
{
 8010eac:	b508      	push	{r3, lr}
 8010eae:	4603      	mov	r3, r0
		return NULL;
	}

	conn = &acl_conns[index];
 8010eb0:	4a0b      	ldr	r2, [pc, #44]	; (8010ee0 <bt_conn_lookup_index+0x38>)
 8010eb2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8010eb6:	eb02 1080 	add.w	r0, r2, r0, lsl #6

	if (!atomic_get(&conn->ref)) {
 8010eba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010ebe:	019b      	lsls	r3, r3, #6
 8010ec0:	3350      	adds	r3, #80	; 0x50
 8010ec2:	4413      	add	r3, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8010ec4:	f3bf 8f5b 	dmb	ish
 8010ec8:	685b      	ldr	r3, [r3, #4]
 8010eca:	f3bf 8f5b 	dmb	ish
 8010ece:	b123      	cbz	r3, 8010eda <bt_conn_lookup_index+0x32>
		return NULL;
	}

	return bt_conn_ref(conn);
 8010ed0:	f00c fbfb 	bl	801d6ca <bt_conn_ref>
}
 8010ed4:	bd08      	pop	{r3, pc}
		return NULL;
 8010ed6:	2000      	movs	r0, #0
}
 8010ed8:	4770      	bx	lr
		return NULL;
 8010eda:	2000      	movs	r0, #0
 8010edc:	e7fa      	b.n	8010ed4 <bt_conn_lookup_index+0x2c>
 8010ede:	bf00      	nop
 8010ee0:	20001d40 	.word	0x20001d40

08010ee4 <bt_conn_init>:

int bt_conn_init(void)
{
 8010ee4:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
 8010ee6:	2400      	movs	r4, #0
 8010ee8:	e006      	b.n	8010ef8 <bt_conn_init+0x14>
		k_fifo_put(&free_tx, &conn_tx[i]);
 8010eea:	491b      	ldr	r1, [pc, #108]	; (8010f58 <bt_conn_init+0x74>)
 8010eec:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8010ef0:	481a      	ldr	r0, [pc, #104]	; (8010f5c <bt_conn_init+0x78>)
 8010ef2:	f010 ffdf 	bl	8021eb4 <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
 8010ef6:	3401      	adds	r4, #1
 8010ef8:	2c02      	cmp	r4, #2
 8010efa:	ddf6      	ble.n	8010eea <bt_conn_init+0x6>
	}

	bt_att_init();
 8010efc:	f00d fb04 	bl	801e508 <bt_att_init>

	err = bt_smp_init();
 8010f00:	f005 fb8a 	bl	8016618 <bt_smp_init>
	if (err) {
 8010f04:	4605      	mov	r5, r0
 8010f06:	b108      	cbz	r0, 8010f0c <bt_conn_init+0x28>
#endif /* !defined(CONFIG_BT_WHITELIST) */
		}
	}

	return 0;
}
 8010f08:	4628      	mov	r0, r5
 8010f0a:	bd38      	pop	{r3, r4, r5, pc}
	bt_l2cap_init();
 8010f0c:	f00c fe02 	bl	801db14 <bt_l2cap_init>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
 8010f10:	462c      	mov	r4, r5
 8010f12:	e005      	b.n	8010f20 <bt_conn_init+0x3c>
				conn->id = BT_ID_DEFAULT;
 8010f14:	2200      	movs	r2, #0
 8010f16:	7202      	strb	r2, [r0, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
 8010f18:	2102      	movs	r1, #2
 8010f1a:	f7ff fb49 	bl	80105b0 <bt_conn_set_state>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
 8010f1e:	3401      	adds	r4, #1
 8010f20:	2c05      	cmp	r4, #5
 8010f22:	dcf1      	bgt.n	8010f08 <bt_conn_init+0x24>
			struct bt_conn *conn = &acl_conns[i];
 8010f24:	4a0e      	ldr	r2, [pc, #56]	; (8010f60 <bt_conn_init+0x7c>)
 8010f26:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8010f2a:	eb02 1080 	add.w	r0, r2, r0, lsl #6
			if (!atomic_get(&conn->ref)) {
 8010f2e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8010f32:	019b      	lsls	r3, r3, #6
 8010f34:	3350      	adds	r3, #80	; 0x50
 8010f36:	4413      	add	r3, r2
 8010f38:	f3bf 8f5b 	dmb	ish
 8010f3c:	685b      	ldr	r3, [r3, #4]
 8010f3e:	f3bf 8f5b 	dmb	ish
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d0eb      	beq.n	8010f1e <bt_conn_init+0x3a>
 8010f46:	f3bf 8f5b 	dmb	ish
 8010f4a:	6843      	ldr	r3, [r0, #4]
 8010f4c:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(conn->flags,
 8010f50:	f013 0f01 	tst.w	r3, #1
 8010f54:	d0e3      	beq.n	8010f1e <bt_conn_init+0x3a>
 8010f56:	e7dd      	b.n	8010f14 <bt_conn_init+0x30>
 8010f58:	20004184 	.word	0x20004184
 8010f5c:	20001098 	.word	0x20001098
 8010f60:	20001d40 	.word	0x20001d40

08010f64 <get_ident>:

static uint8_t get_ident(void)
{
	static uint8_t ident;

	ident++;
 8010f64:	4a05      	ldr	r2, [pc, #20]	; (8010f7c <get_ident+0x18>)
 8010f66:	7813      	ldrb	r3, [r2, #0]
 8010f68:	3301      	adds	r3, #1
 8010f6a:	b2db      	uxtb	r3, r3
 8010f6c:	7013      	strb	r3, [r2, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
 8010f6e:	b90b      	cbnz	r3, 8010f74 <get_ident+0x10>
		ident++;
 8010f70:	3301      	adds	r3, #1
 8010f72:	7013      	strb	r3, [r2, #0]
	}

	return ident;
}
 8010f74:	4b01      	ldr	r3, [pc, #4]	; (8010f7c <get_ident+0x18>)
 8010f76:	7818      	ldrb	r0, [r3, #0]
 8010f78:	4770      	bx	lr
 8010f7a:	bf00      	nop
 8010f7c:	2000596d 	.word	0x2000596d

08010f80 <le_conn_param_rsp>:

	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
}

static void le_conn_param_rsp(struct bt_l2cap *l2cap, struct net_buf *buf)
{
 8010f80:	b508      	push	{r3, lr}
	struct bt_l2cap_conn_param_rsp *rsp = (void *)buf->data;

	if (buf->len < sizeof(*rsp)) {
 8010f82:	898b      	ldrh	r3, [r1, #12]
 8010f84:	2b01      	cmp	r3, #1
 8010f86:	d900      	bls.n	8010f8a <le_conn_param_rsp+0xa>
		BT_ERR("Too small LE conn param rsp");
		return;
	}

	BT_DBG("LE conn param rsp result %u", sys_le16_to_cpu(rsp->result));
}
 8010f88:	bd08      	pop	{r3, pc}
		BT_ERR("Too small LE conn param rsp");
 8010f8a:	f04f 0100 	mov.w	r1, #0
 8010f8e:	2301      	movs	r3, #1
 8010f90:	f363 0102 	bfi	r1, r3, #0, #3
 8010f94:	f36f 01c5 	bfc	r1, #3, #3
 8010f98:	4b05      	ldr	r3, [pc, #20]	; (8010fb0 <le_conn_param_rsp+0x30>)
 8010f9a:	4a06      	ldr	r2, [pc, #24]	; (8010fb4 <le_conn_param_rsp+0x34>)
 8010f9c:	1a9b      	subs	r3, r3, r2
 8010f9e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8010fa2:	f363 118f 	bfi	r1, r3, #6, #10
 8010fa6:	4804      	ldr	r0, [pc, #16]	; (8010fb8 <le_conn_param_rsp+0x38>)
 8010fa8:	f7f5 fc3a 	bl	8006820 <log_0>
		return;
 8010fac:	e7ec      	b.n	8010f88 <le_conn_param_rsp+0x8>
 8010fae:	bf00      	nop
 8010fb0:	08022bd8 	.word	0x08022bd8
 8010fb4:	08022b90 	.word	0x08022b90
 8010fb8:	080270b8 	.word	0x080270b8

08010fbc <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
 8010fbc:	b510      	push	{r4, lr}
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	2b05      	cmp	r3, #5
 8010fc2:	dc10      	bgt.n	8010fe6 <l2cap_accept+0x2a>
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
 8010fc4:	22b8      	movs	r2, #184	; 0xb8
 8010fc6:	fb02 f203 	mul.w	r2, r2, r3
 8010fca:	4c11      	ldr	r4, [pc, #68]	; (8011010 <l2cap_accept+0x54>)
 8010fcc:	58a2      	ldr	r2, [r4, r2]
 8010fce:	b10a      	cbz	r2, 8010fd4 <l2cap_accept+0x18>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
 8010fd0:	3301      	adds	r3, #1
 8010fd2:	e7f5      	b.n	8010fc0 <l2cap_accept+0x4>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
 8010fd4:	4a0e      	ldr	r2, [pc, #56]	; (8011010 <l2cap_accept+0x54>)
 8010fd6:	20b8      	movs	r0, #184	; 0xb8
 8010fd8:	fb00 2303 	mla	r3, r0, r3, r2
 8010fdc:	4a0d      	ldr	r2, [pc, #52]	; (8011014 <l2cap_accept+0x58>)
 8010fde:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
 8010fe0:	600b      	str	r3, [r1, #0]

		return 0;
 8010fe2:	2000      	movs	r0, #0
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
 8010fe4:	bd10      	pop	{r4, pc}
	BT_ERR("No available L2CAP context for conn %p", conn);
 8010fe6:	f04f 0200 	mov.w	r2, #0
 8010fea:	2301      	movs	r3, #1
 8010fec:	f363 0202 	bfi	r2, r3, #0, #3
 8010ff0:	f36f 02c5 	bfc	r2, #3, #3
 8010ff4:	4b08      	ldr	r3, [pc, #32]	; (8011018 <l2cap_accept+0x5c>)
 8010ff6:	4909      	ldr	r1, [pc, #36]	; (801101c <l2cap_accept+0x60>)
 8010ff8:	1a5b      	subs	r3, r3, r1
 8010ffa:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8010ffe:	f363 128f 	bfi	r2, r3, #6, #10
 8011002:	4601      	mov	r1, r0
 8011004:	4806      	ldr	r0, [pc, #24]	; (8011020 <l2cap_accept+0x64>)
 8011006:	f7f5 fa9b 	bl	8006540 <log_1>
	return -ENOMEM;
 801100a:	f06f 000b 	mvn.w	r0, #11
 801100e:	e7e9      	b.n	8010fe4 <l2cap_accept+0x28>
 8011010:	200021c0 	.word	0x200021c0
 8011014:	08027264 	.word	0x08027264
 8011018:	08022bd8 	.word	0x08022bd8
 801101c:	08022b90 	.word	0x08022b90
 8011020:	080270d4 	.word	0x080270d4

08011024 <l2cap_rtx_timeout>:
{
 8011024:	b538      	push	{r3, r4, r5, lr}
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
 8011026:	f1a0 0410 	sub.w	r4, r0, #16
	struct bt_conn *conn = chan->chan.conn;
 801102a:	f850 5c10 	ldr.w	r5, [r0, #-16]
	BT_ERR("chan %p timeout", chan);
 801102e:	f04f 0200 	mov.w	r2, #0
 8011032:	2301      	movs	r3, #1
 8011034:	f363 0202 	bfi	r2, r3, #0, #3
 8011038:	f36f 02c5 	bfc	r2, #3, #3
 801103c:	4b09      	ldr	r3, [pc, #36]	; (8011064 <l2cap_rtx_timeout+0x40>)
 801103e:	490a      	ldr	r1, [pc, #40]	; (8011068 <l2cap_rtx_timeout+0x44>)
 8011040:	1a5b      	subs	r3, r3, r1
 8011042:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8011046:	f363 128f 	bfi	r2, r3, #6, #10
 801104a:	4621      	mov	r1, r4
 801104c:	4807      	ldr	r0, [pc, #28]	; (801106c <l2cap_rtx_timeout+0x48>)
 801104e:	f7f5 fa77 	bl	8006540 <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
 8011052:	4621      	mov	r1, r4
 8011054:	4628      	mov	r0, r5
 8011056:	f00c fc3a 	bl	801d8ce <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
 801105a:	4620      	mov	r0, r4
 801105c:	f00c fc60 	bl	801d920 <bt_l2cap_chan_del>
}
 8011060:	bd38      	pop	{r3, r4, r5, pc}
 8011062:	bf00      	nop
 8011064:	08022bd8 	.word	0x08022bd8
 8011068:	08022b90 	.word	0x08022b90
 801106c:	080270fc 	.word	0x080270fc

08011070 <l2cap_chan_add>:
{
 8011070:	b570      	push	{r4, r5, r6, lr}
	if (!ch) {
 8011072:	b1d9      	cbz	r1, 80110ac <l2cap_chan_add+0x3c>
 8011074:	4604      	mov	r4, r0
 8011076:	4615      	mov	r5, r2
 8011078:	460e      	mov	r6, r1
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
 801107a:	4915      	ldr	r1, [pc, #84]	; (80110d0 <l2cap_chan_add+0x60>)
 801107c:	f106 0010 	add.w	r0, r6, #16
 8011080:	f011 f976 	bl	8022370 <k_delayed_work_init>
	atomic_clear(chan->status);
 8011084:	f106 0340 	add.w	r3, r6, #64	; 0x40
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8011088:	2200      	movs	r2, #0
 801108a:	f3bf 8f5b 	dmb	ish
 801108e:	e853 1f00 	ldrex	r1, [r3]
 8011092:	e843 2000 	strex	r0, r2, [r3]
 8011096:	2800      	cmp	r0, #0
 8011098:	d1f9      	bne.n	801108e <l2cap_chan_add+0x1e>
 801109a:	f3bf 8f5b 	dmb	ish
	bt_l2cap_chan_add(conn, chan, destroy);
 801109e:	462a      	mov	r2, r5
 80110a0:	4631      	mov	r1, r6
 80110a2:	4620      	mov	r0, r4
 80110a4:	f00c fc4f 	bl	801d946 <bt_l2cap_chan_add>
	return true;
 80110a8:	2001      	movs	r0, #1
}
 80110aa:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to allocate L2CAP CID");
 80110ac:	2301      	movs	r3, #1
 80110ae:	f363 0102 	bfi	r1, r3, #0, #3
 80110b2:	f36f 01c5 	bfc	r1, #3, #3
 80110b6:	4b07      	ldr	r3, [pc, #28]	; (80110d4 <l2cap_chan_add+0x64>)
 80110b8:	4a07      	ldr	r2, [pc, #28]	; (80110d8 <l2cap_chan_add+0x68>)
 80110ba:	1a9b      	subs	r3, r3, r2
 80110bc:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80110c0:	f363 118f 	bfi	r1, r3, #6, #10
 80110c4:	4805      	ldr	r0, [pc, #20]	; (80110dc <l2cap_chan_add+0x6c>)
 80110c6:	f7f5 fbab 	bl	8006820 <log_0>
		return false;
 80110ca:	2000      	movs	r0, #0
 80110cc:	e7ed      	b.n	80110aa <l2cap_chan_add+0x3a>
 80110ce:	bf00      	nop
 80110d0:	08011025 	.word	0x08011025
 80110d4:	08022bd8 	.word	0x08022bd8
 80110d8:	08022b90 	.word	0x08022b90
 80110dc:	0802710c 	.word	0x0802710c

080110e0 <bt_l2cap_connected>:
{
 80110e0:	b530      	push	{r4, r5, lr}
 80110e2:	b083      	sub	sp, #12
 80110e4:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
 80110e6:	4c1a      	ldr	r4, [pc, #104]	; (8011150 <bt_l2cap_connected+0x70>)
 80110e8:	e000      	b.n	80110ec <bt_l2cap_connected+0xc>
 80110ea:	340c      	adds	r4, #12
 80110ec:	4b19      	ldr	r3, [pc, #100]	; (8011154 <bt_l2cap_connected+0x74>)
 80110ee:	429c      	cmp	r4, r3
 80110f0:	d22c      	bcs.n	801114c <bt_l2cap_connected+0x6c>
		if (fchan->accept(conn, &chan) < 0) {
 80110f2:	6863      	ldr	r3, [r4, #4]
 80110f4:	a901      	add	r1, sp, #4
 80110f6:	4628      	mov	r0, r5
 80110f8:	4798      	blx	r3
 80110fa:	2800      	cmp	r0, #0
 80110fc:	dbf5      	blt.n	80110ea <bt_l2cap_connected+0xa>
		ch = BT_L2CAP_LE_CHAN(chan);
 80110fe:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
 8011100:	8823      	ldrh	r3, [r4, #0]
 8011102:	f8a1 3048 	strh.w	r3, [r1, #72]	; 0x48
		ch->tx.cid = fchan->cid;
 8011106:	f8a1 3054 	strh.w	r3, [r1, #84]	; 0x54
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
 801110a:	68a2      	ldr	r2, [r4, #8]
 801110c:	4628      	mov	r0, r5
 801110e:	f7ff ffaf 	bl	8011070 <l2cap_chan_add>
 8011112:	b1d8      	cbz	r0, 801114c <bt_l2cap_connected+0x6c>
		if (chan->ops->connected) {
 8011114:	9801      	ldr	r0, [sp, #4]
 8011116:	6843      	ldr	r3, [r0, #4]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	b103      	cbz	r3, 801111e <bt_l2cap_connected+0x3e>
			chan->ops->connected(chan);
 801111c:	4798      	blx	r3
		atomic_set_bit(chan->status, BT_L2CAP_STATUS_OUT);
 801111e:	9b01      	ldr	r3, [sp, #4]
 8011120:	3340      	adds	r3, #64	; 0x40
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8011122:	f3bf 8f5b 	dmb	ish
 8011126:	e853 2f00 	ldrex	r2, [r3]
 801112a:	f042 0201 	orr.w	r2, r2, #1
 801112e:	e843 2100 	strex	r1, r2, [r3]
 8011132:	2900      	cmp	r1, #0
 8011134:	d1f7      	bne.n	8011126 <bt_l2cap_connected+0x46>
 8011136:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
 801113a:	9801      	ldr	r0, [sp, #4]
 801113c:	6843      	ldr	r3, [r0, #4]
 801113e:	699b      	ldr	r3, [r3, #24]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d0d2      	beq.n	80110ea <bt_l2cap_connected+0xa>
			chan->ops->status(chan, chan->status);
 8011144:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8011148:	4798      	blx	r3
 801114a:	e7ce      	b.n	80110ea <bt_l2cap_connected+0xa>
}
 801114c:	b003      	add	sp, #12
 801114e:	bd30      	pop	{r4, r5, pc}
 8011150:	08022acc 	.word	0x08022acc
 8011154:	08022af0 	.word	0x08022af0

08011158 <l2cap_create_le_sig_pdu>:
{
 8011158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801115a:	460c      	mov	r4, r1
 801115c:	4616      	mov	r6, r2
 801115e:	461d      	mov	r5, r3
	if (code == BT_L2CAP_DISCONN_REQ) {
 8011160:	2906      	cmp	r1, #6
 8011162:	d011      	beq.n	8011188 <l2cap_create_le_sig_pdu+0x30>
	struct net_buf_pool *pool = NULL;
 8011164:	2000      	movs	r0, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
 8011166:	f644 6220 	movw	r2, #20000	; 0x4e20
 801116a:	2300      	movs	r3, #0
 801116c:	2100      	movs	r1, #0
 801116e:	f00c fc41 	bl	801d9f4 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
 8011172:	4607      	mov	r7, r0
 8011174:	b150      	cbz	r0, 801118c <l2cap_create_le_sig_pdu+0x34>
	hdr = net_buf_add(buf, sizeof(*hdr));
 8011176:	2104      	movs	r1, #4
 8011178:	3008      	adds	r0, #8
 801117a:	f00f f97f 	bl	802047c <net_buf_simple_add>
	hdr->code = code;
 801117e:	7004      	strb	r4, [r0, #0]
	hdr->ident = ident;
 8011180:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
 8011182:	8045      	strh	r5, [r0, #2]
}
 8011184:	4638      	mov	r0, r7
 8011186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pool = &disc_pool;
 8011188:	480a      	ldr	r0, [pc, #40]	; (80111b4 <l2cap_create_le_sig_pdu+0x5c>)
 801118a:	e7ec      	b.n	8011166 <l2cap_create_le_sig_pdu+0xe>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
 801118c:	f04f 0200 	mov.w	r2, #0
 8011190:	2301      	movs	r3, #1
 8011192:	f363 0202 	bfi	r2, r3, #0, #3
 8011196:	f36f 02c5 	bfc	r2, #3, #3
 801119a:	4b07      	ldr	r3, [pc, #28]	; (80111b8 <l2cap_create_le_sig_pdu+0x60>)
 801119c:	4907      	ldr	r1, [pc, #28]	; (80111bc <l2cap_create_le_sig_pdu+0x64>)
 801119e:	1a5b      	subs	r3, r3, r1
 80111a0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80111a4:	f363 128f 	bfi	r2, r3, #6, #10
 80111a8:	4621      	mov	r1, r4
 80111aa:	4805      	ldr	r0, [pc, #20]	; (80111c0 <l2cap_create_le_sig_pdu+0x68>)
 80111ac:	f7f5 f9c8 	bl	8006540 <log_1>
		return NULL;
 80111b0:	e7e8      	b.n	8011184 <l2cap_create_le_sig_pdu+0x2c>
 80111b2:	bf00      	nop
 80111b4:	20001100 	.word	0x20001100
 80111b8:	08022bd8 	.word	0x08022bd8
 80111bc:	08022b90 	.word	0x08022b90
 80111c0:	0802712c 	.word	0x0802712c

080111c4 <le_conn_param_update_req>:
{
 80111c4:	b570      	push	{r4, r5, r6, lr}
 80111c6:	b084      	sub	sp, #16
 80111c8:	4614      	mov	r4, r2
	struct bt_conn *conn = l2cap->chan.chan.conn;
 80111ca:	6805      	ldr	r5, [r0, #0]
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
 80111cc:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*req)) {
 80111ce:	8992      	ldrh	r2, [r2, #12]
 80111d0:	2a07      	cmp	r2, #7
 80111d2:	d931      	bls.n	8011238 <le_conn_param_update_req+0x74>
	if (conn->role != BT_HCI_ROLE_MASTER) {
 80111d4:	78ea      	ldrb	r2, [r5, #3]
 80111d6:	2a00      	cmp	r2, #0
 80111d8:	d140      	bne.n	801125c <le_conn_param_update_req+0x98>
	param.interval_min = sys_le16_to_cpu(req->min_interval);
 80111da:	881a      	ldrh	r2, [r3, #0]
 80111dc:	f8ad 2008 	strh.w	r2, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
 80111e0:	885a      	ldrh	r2, [r3, #2]
 80111e2:	f8ad 200a 	strh.w	r2, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
 80111e6:	889a      	ldrh	r2, [r3, #4]
 80111e8:	f8ad 200c 	strh.w	r2, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
 80111ec:	88db      	ldrh	r3, [r3, #6]
 80111ee:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
 80111f2:	2302      	movs	r3, #2
 80111f4:	460a      	mov	r2, r1
 80111f6:	2113      	movs	r1, #19
 80111f8:	4620      	mov	r0, r4
 80111fa:	f7ff ffad 	bl	8011158 <l2cap_create_le_sig_pdu>
	if (!buf) {
 80111fe:	4606      	mov	r6, r0
 8011200:	b390      	cbz	r0, 8011268 <le_conn_param_update_req+0xa4>
	accepted = le_param_req(conn, &param);
 8011202:	a902      	add	r1, sp, #8
 8011204:	4628      	mov	r0, r5
 8011206:	f7fe ff17 	bl	8010038 <le_param_req>
 801120a:	4604      	mov	r4, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
 801120c:	2102      	movs	r1, #2
 801120e:	f106 0008 	add.w	r0, r6, #8
 8011212:	f00f f933 	bl	802047c <net_buf_simple_add>
	if (accepted) {
 8011216:	b34c      	cbz	r4, 801126c <le_conn_param_update_req+0xa8>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
 8011218:	2300      	movs	r3, #0
 801121a:	7003      	strb	r3, [r0, #0]
 801121c:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
 801121e:	2300      	movs	r3, #0
 8011220:	9300      	str	r3, [sp, #0]
 8011222:	4632      	mov	r2, r6
 8011224:	2105      	movs	r1, #5
 8011226:	4628      	mov	r0, r5
 8011228:	f00c fbe9 	bl	801d9fe <bt_l2cap_send_cb>
	if (accepted) {
 801122c:	b1e4      	cbz	r4, 8011268 <le_conn_param_update_req+0xa4>
		bt_conn_le_conn_update(conn, &param);
 801122e:	a902      	add	r1, sp, #8
 8011230:	4628      	mov	r0, r5
 8011232:	f00c fac8 	bl	801d7c6 <bt_conn_le_conn_update>
 8011236:	e017      	b.n	8011268 <le_conn_param_update_req+0xa4>
		BT_ERR("Too small LE conn update param req");
 8011238:	f04f 0100 	mov.w	r1, #0
 801123c:	2301      	movs	r3, #1
 801123e:	f363 0102 	bfi	r1, r3, #0, #3
 8011242:	f36f 01c5 	bfc	r1, #3, #3
 8011246:	4b0c      	ldr	r3, [pc, #48]	; (8011278 <le_conn_param_update_req+0xb4>)
 8011248:	4a0c      	ldr	r2, [pc, #48]	; (801127c <le_conn_param_update_req+0xb8>)
 801124a:	1a9b      	subs	r3, r3, r2
 801124c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8011250:	f363 118f 	bfi	r1, r3, #6, #10
 8011254:	480a      	ldr	r0, [pc, #40]	; (8011280 <le_conn_param_update_req+0xbc>)
 8011256:	f7f5 fae3 	bl	8006820 <log_0>
		return;
 801125a:	e005      	b.n	8011268 <le_conn_param_update_req+0xa4>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
 801125c:	2200      	movs	r2, #0
 801125e:	9200      	str	r2, [sp, #0]
 8011260:	4613      	mov	r3, r2
 8011262:	4628      	mov	r0, r5
 8011264:	f00c fbe0 	bl	801da28 <l2cap_send_reject>
}
 8011268:	b004      	add	sp, #16
 801126a:	bd70      	pop	{r4, r5, r6, pc}
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
 801126c:	2301      	movs	r3, #1
 801126e:	7003      	strb	r3, [r0, #0]
 8011270:	2300      	movs	r3, #0
 8011272:	7043      	strb	r3, [r0, #1]
 8011274:	e7d3      	b.n	801121e <le_conn_param_update_req+0x5a>
 8011276:	bf00      	nop
 8011278:	08022bd8 	.word	0x08022bd8
 801127c:	08022b90 	.word	0x08022b90
 8011280:	08027154 	.word	0x08027154

08011284 <l2cap_recv>:
{
 8011284:	b570      	push	{r4, r5, r6, lr}
 8011286:	b082      	sub	sp, #8
	if (buf->len < sizeof(*hdr)) {
 8011288:	898b      	ldrh	r3, [r1, #12]
 801128a:	2b03      	cmp	r3, #3
 801128c:	d92f      	bls.n	80112ee <l2cap_recv+0x6a>
 801128e:	4606      	mov	r6, r0
 8011290:	460c      	mov	r4, r1
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
 8011292:	2104      	movs	r1, #4
 8011294:	f104 0008 	add.w	r0, r4, #8
 8011298:	f00f f921 	bl	80204de <net_buf_simple_pull_mem>
 801129c:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
 801129e:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
 80112a0:	89a1      	ldrh	r1, [r4, #12]
 80112a2:	4291      	cmp	r1, r2
 80112a4:	d137      	bne.n	8011316 <l2cap_recv+0x92>
	if (!hdr->ident) {
 80112a6:	7841      	ldrb	r1, [r0, #1]
 80112a8:	2900      	cmp	r1, #0
 80112aa:	d046      	beq.n	801133a <l2cap_recv+0xb6>
	switch (hdr->code) {
 80112ac:	7803      	ldrb	r3, [r0, #0]
 80112ae:	2b12      	cmp	r3, #18
 80112b0:	d058      	beq.n	8011364 <l2cap_recv+0xe0>
 80112b2:	2b13      	cmp	r3, #19
 80112b4:	d051      	beq.n	801135a <l2cap_recv+0xd6>
 80112b6:	2b01      	cmp	r3, #1
 80112b8:	d02a      	beq.n	8011310 <l2cap_recv+0x8c>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
 80112ba:	f04f 0200 	mov.w	r2, #0
 80112be:	2102      	movs	r1, #2
 80112c0:	f361 0202 	bfi	r2, r1, #0, #3
 80112c4:	f36f 02c5 	bfc	r2, #3, #3
 80112c8:	4929      	ldr	r1, [pc, #164]	; (8011370 <l2cap_recv+0xec>)
 80112ca:	482a      	ldr	r0, [pc, #168]	; (8011374 <l2cap_recv+0xf0>)
 80112cc:	1a09      	subs	r1, r1, r0
 80112ce:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 80112d2:	f361 128f 	bfi	r2, r1, #6, #10
 80112d6:	4619      	mov	r1, r3
 80112d8:	4827      	ldr	r0, [pc, #156]	; (8011378 <l2cap_recv+0xf4>)
 80112da:	f7f5 f931 	bl	8006540 <log_1>
		l2cap_send_reject(chan->conn, hdr->ident,
 80112de:	7869      	ldrb	r1, [r5, #1]
 80112e0:	2200      	movs	r2, #0
 80112e2:	9200      	str	r2, [sp, #0]
 80112e4:	4613      	mov	r3, r2
 80112e6:	6830      	ldr	r0, [r6, #0]
 80112e8:	f00c fb9e 	bl	801da28 <l2cap_send_reject>
		break;
 80112ec:	e010      	b.n	8011310 <l2cap_recv+0x8c>
		BT_ERR("Too small L2CAP signaling PDU");
 80112ee:	f04f 0100 	mov.w	r1, #0
 80112f2:	2301      	movs	r3, #1
 80112f4:	f363 0102 	bfi	r1, r3, #0, #3
 80112f8:	f36f 01c5 	bfc	r1, #3, #3
 80112fc:	4b1c      	ldr	r3, [pc, #112]	; (8011370 <l2cap_recv+0xec>)
 80112fe:	4a1d      	ldr	r2, [pc, #116]	; (8011374 <l2cap_recv+0xf0>)
 8011300:	1a9b      	subs	r3, r3, r2
 8011302:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8011306:	f363 118f 	bfi	r1, r3, #6, #10
 801130a:	481c      	ldr	r0, [pc, #112]	; (801137c <l2cap_recv+0xf8>)
 801130c:	f7f5 fa88 	bl	8006820 <log_0>
}
 8011310:	2000      	movs	r0, #0
 8011312:	b002      	add	sp, #8
 8011314:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
 8011316:	f04f 0300 	mov.w	r3, #0
 801131a:	2001      	movs	r0, #1
 801131c:	f360 0302 	bfi	r3, r0, #0, #3
 8011320:	f36f 03c5 	bfc	r3, #3, #3
 8011324:	4812      	ldr	r0, [pc, #72]	; (8011370 <l2cap_recv+0xec>)
 8011326:	4c13      	ldr	r4, [pc, #76]	; (8011374 <l2cap_recv+0xf0>)
 8011328:	1b00      	subs	r0, r0, r4
 801132a:	f3c0 00c9 	ubfx	r0, r0, #3, #10
 801132e:	f360 138f 	bfi	r3, r0, #6, #10
 8011332:	4813      	ldr	r0, [pc, #76]	; (8011380 <l2cap_recv+0xfc>)
 8011334:	f7f5 f984 	bl	8006640 <log_2>
		return 0;
 8011338:	e7ea      	b.n	8011310 <l2cap_recv+0x8c>
		BT_ERR("Invalid ident value in L2CAP PDU");
 801133a:	2301      	movs	r3, #1
 801133c:	f363 0102 	bfi	r1, r3, #0, #3
 8011340:	f36f 01c5 	bfc	r1, #3, #3
 8011344:	4b0a      	ldr	r3, [pc, #40]	; (8011370 <l2cap_recv+0xec>)
 8011346:	4a0b      	ldr	r2, [pc, #44]	; (8011374 <l2cap_recv+0xf0>)
 8011348:	1a9b      	subs	r3, r3, r2
 801134a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 801134e:	f363 118f 	bfi	r1, r3, #6, #10
 8011352:	480c      	ldr	r0, [pc, #48]	; (8011384 <l2cap_recv+0x100>)
 8011354:	f7f5 fa64 	bl	8006820 <log_0>
		return 0;
 8011358:	e7da      	b.n	8011310 <l2cap_recv+0x8c>
		le_conn_param_rsp(l2cap, buf);
 801135a:	4621      	mov	r1, r4
 801135c:	4630      	mov	r0, r6
 801135e:	f7ff fe0f 	bl	8010f80 <le_conn_param_rsp>
		break;
 8011362:	e7d5      	b.n	8011310 <l2cap_recv+0x8c>
			le_conn_param_update_req(l2cap, hdr->ident, buf);
 8011364:	4622      	mov	r2, r4
 8011366:	4630      	mov	r0, r6
 8011368:	f7ff ff2c 	bl	80111c4 <le_conn_param_update_req>
			break;
 801136c:	e7d0      	b.n	8011310 <l2cap_recv+0x8c>
 801136e:	bf00      	nop
 8011370:	08022bd8 	.word	0x08022bd8
 8011374:	08022b90 	.word	0x08022b90
 8011378:	080271e0 	.word	0x080271e0
 801137c:	08027178 	.word	0x08027178
 8011380:	08027198 	.word	0x08027198
 8011384:	080271bc 	.word	0x080271bc

08011388 <bt_l2cap_recv>:
{
 8011388:	b570      	push	{r4, r5, r6, lr}
 801138a:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
 801138c:	898b      	ldrh	r3, [r1, #12]
 801138e:	2b03      	cmp	r3, #3
 8011390:	d90f      	bls.n	80113b2 <bt_l2cap_recv+0x2a>
 8011392:	4605      	mov	r5, r0
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
 8011394:	2104      	movs	r1, #4
 8011396:	f104 0008 	add.w	r0, r4, #8
 801139a:	f00f f8a0 	bl	80204de <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
 801139e:	8846      	ldrh	r6, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
 80113a0:	4631      	mov	r1, r6
 80113a2:	4628      	mov	r0, r5
 80113a4:	f00c fb7b 	bl	801da9e <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
 80113a8:	b1c0      	cbz	r0, 80113dc <bt_l2cap_recv+0x54>
	l2cap_chan_recv(chan, buf);
 80113aa:	4621      	mov	r1, r4
 80113ac:	f00c fa86 	bl	801d8bc <l2cap_chan_recv>
}
 80113b0:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Too small L2CAP PDU received");
 80113b2:	f04f 0100 	mov.w	r1, #0
 80113b6:	2301      	movs	r3, #1
 80113b8:	f363 0102 	bfi	r1, r3, #0, #3
 80113bc:	f36f 01c5 	bfc	r1, #3, #3
 80113c0:	4b11      	ldr	r3, [pc, #68]	; (8011408 <bt_l2cap_recv+0x80>)
 80113c2:	4a12      	ldr	r2, [pc, #72]	; (801140c <bt_l2cap_recv+0x84>)
 80113c4:	1a9b      	subs	r3, r3, r2
 80113c6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80113ca:	f363 118f 	bfi	r1, r3, #6, #10
 80113ce:	4810      	ldr	r0, [pc, #64]	; (8011410 <bt_l2cap_recv+0x88>)
 80113d0:	f7f5 fa26 	bl	8006820 <log_0>
		net_buf_unref(buf);
 80113d4:	4620      	mov	r0, r4
 80113d6:	f00f f807 	bl	80203e8 <net_buf_unref>
		return;
 80113da:	e7e9      	b.n	80113b0 <bt_l2cap_recv+0x28>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
 80113dc:	f04f 0200 	mov.w	r2, #0
 80113e0:	2302      	movs	r3, #2
 80113e2:	f363 0202 	bfi	r2, r3, #0, #3
 80113e6:	f36f 02c5 	bfc	r2, #3, #3
 80113ea:	4b07      	ldr	r3, [pc, #28]	; (8011408 <bt_l2cap_recv+0x80>)
 80113ec:	4907      	ldr	r1, [pc, #28]	; (801140c <bt_l2cap_recv+0x84>)
 80113ee:	1a5b      	subs	r3, r3, r1
 80113f0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80113f4:	f363 128f 	bfi	r2, r3, #6, #10
 80113f8:	4631      	mov	r1, r6
 80113fa:	4806      	ldr	r0, [pc, #24]	; (8011414 <bt_l2cap_recv+0x8c>)
 80113fc:	f7f5 f8a0 	bl	8006540 <log_1>
		net_buf_unref(buf);
 8011400:	4620      	mov	r0, r4
 8011402:	f00e fff1 	bl	80203e8 <net_buf_unref>
		return;
 8011406:	e7d3      	b.n	80113b0 <bt_l2cap_recv+0x28>
 8011408:	08022bd8 	.word	0x08022bd8
 801140c:	08022b90 	.word	0x08022b90
 8011410:	08027200 	.word	0x08027200
 8011414:	08027220 	.word	0x08027220

08011418 <att_cfm_sent>:
		return NULL;
	}
}

static void att_cfm_sent(struct bt_conn *conn, void *user_data)
{
 8011418:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
 801141a:	4b03      	ldr	r3, [pc, #12]	; (8011428 <att_cfm_sent+0x10>)
 801141c:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
 8011420:	f00c fb79 	bl	801db16 <att_sent>
}
 8011424:	bd08      	pop	{r3, pc}
 8011426:	bf00      	nop
 8011428:	0801dd57 	.word	0x0801dd57

0801142c <att_rsp_sent>:

static void att_rsp_sent(struct bt_conn *conn, void *user_data)
{
 801142c:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
 801142e:	4b03      	ldr	r3, [pc, #12]	; (801143c <att_rsp_sent+0x10>)
 8011430:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
 8011434:	f00c fb6f 	bl	801db16 <att_sent>
}
 8011438:	bd08      	pop	{r3, pc}
 801143a:	bf00      	nop
 801143c:	0801dd73 	.word	0x0801dd73

08011440 <att_req_sent>:

static void att_req_sent(struct bt_conn *conn, void *user_data)
{
 8011440:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
 8011442:	4b03      	ldr	r3, [pc, #12]	; (8011450 <att_req_sent+0x10>)
 8011444:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
 8011448:	f00c fb65 	bl	801db16 <att_sent>
}
 801144c:	bd08      	pop	{r3, pc}
 801144e:	bf00      	nop
 8011450:	080117d5 	.word	0x080117d5

08011454 <att_cb>:

static bt_conn_tx_cb_t att_cb(bt_att_chan_sent_t cb)
{
	if (cb == chan_rsp_sent) {
 8011454:	4b08      	ldr	r3, [pc, #32]	; (8011478 <att_cb+0x24>)
 8011456:	4298      	cmp	r0, r3
 8011458:	d009      	beq.n	801146e <att_cb+0x1a>
		return att_rsp_sent;
	} else if (cb == chan_cfm_sent) {
 801145a:	4b08      	ldr	r3, [pc, #32]	; (801147c <att_cb+0x28>)
 801145c:	4298      	cmp	r0, r3
 801145e:	d008      	beq.n	8011472 <att_cb+0x1e>
		return att_cfm_sent;
	} else if (cb == chan_req_sent) {
 8011460:	4b07      	ldr	r3, [pc, #28]	; (8011480 <att_cb+0x2c>)
 8011462:	4298      	cmp	r0, r3
 8011464:	d001      	beq.n	801146a <att_cb+0x16>
		return att_req_sent;
	} else {
		return att_sent;
 8011466:	4807      	ldr	r0, [pc, #28]	; (8011484 <att_cb+0x30>)
	}
}
 8011468:	4770      	bx	lr
		return att_req_sent;
 801146a:	4807      	ldr	r0, [pc, #28]	; (8011488 <att_cb+0x34>)
 801146c:	4770      	bx	lr
		return att_rsp_sent;
 801146e:	4807      	ldr	r0, [pc, #28]	; (801148c <att_cb+0x38>)
 8011470:	4770      	bx	lr
		return att_cfm_sent;
 8011472:	4807      	ldr	r0, [pc, #28]	; (8011490 <att_cb+0x3c>)
 8011474:	4770      	bx	lr
 8011476:	bf00      	nop
 8011478:	0801dd73 	.word	0x0801dd73
 801147c:	0801dd57 	.word	0x0801dd57
 8011480:	080117d5 	.word	0x080117d5
 8011484:	0801db17 	.word	0x0801db17
 8011488:	08011441 	.word	0x08011441
 801148c:	0801142d 	.word	0x0801142d
 8011490:	08011419 	.word	0x08011419

08011494 <chan_cb>:
{
 8011494:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
 8011496:	6883      	ldr	r3, [r0, #8]
 8011498:	7818      	ldrb	r0, [r3, #0]
 801149a:	f00c fb86 	bl	801dbaa <att_op_get_type>
 801149e:	3801      	subs	r0, #1
 80114a0:	2804      	cmp	r0, #4
 80114a2:	d808      	bhi.n	80114b6 <chan_cb+0x22>
 80114a4:	e8df f000 	tbb	[pc, r0]
 80114a8:	09070305 	.word	0x09070305
 80114ac:	05          	.byte	0x05
 80114ad:	00          	.byte	0x00
 80114ae:	4804      	ldr	r0, [pc, #16]	; (80114c0 <chan_cb+0x2c>)
 80114b0:	e000      	b.n	80114b4 <chan_cb+0x20>
		return chan_req_sent;
 80114b2:	4804      	ldr	r0, [pc, #16]	; (80114c4 <chan_cb+0x30>)
}
 80114b4:	bd08      	pop	{r3, pc}
		return NULL;
 80114b6:	2000      	movs	r0, #0
 80114b8:	e7fc      	b.n	80114b4 <chan_cb+0x20>
		return chan_cfm_sent;
 80114ba:	4803      	ldr	r0, [pc, #12]	; (80114c8 <chan_cb+0x34>)
 80114bc:	e7fa      	b.n	80114b4 <chan_cb+0x20>
 80114be:	bf00      	nop
 80114c0:	0801dd73 	.word	0x0801dd73
 80114c4:	080117d5 	.word	0x080117d5
 80114c8:	0801dd57 	.word	0x0801dd57

080114cc <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
 80114cc:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
 80114ce:	7b43      	ldrb	r3, [r0, #13]
 80114d0:	2b07      	cmp	r3, #7
 80114d2:	d111      	bne.n	80114f8 <att_get+0x2c>
		BT_WARN("Not connected");
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
 80114d4:	2104      	movs	r1, #4
 80114d6:	f00c fae2 	bl	801da9e <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
 80114da:	4604      	mov	r4, r0
 80114dc:	b1f8      	cbz	r0, 801151e <att_get+0x52>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80114de:	f3bf 8f5b 	dmb	ish
 80114e2:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
 80114e6:	f3bf 8f5b 	dmb	ish
		BT_ERR("Unable to find ATT channel");
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
 80114ea:	f013 0f04 	tst.w	r3, #4
 80114ee:	d128      	bne.n	8011542 <att_get+0x76>
		BT_WARN("ATT channel flagged as disconnected");
		return NULL;
	}

	return att_chan->att;
 80114f0:	f850 4c08 	ldr.w	r4, [r0, #-8]
}
 80114f4:	4620      	mov	r0, r4
 80114f6:	bd10      	pop	{r4, pc}
		BT_WARN("Not connected");
 80114f8:	f04f 0100 	mov.w	r1, #0
 80114fc:	2302      	movs	r3, #2
 80114fe:	f363 0102 	bfi	r1, r3, #0, #3
 8011502:	f36f 01c5 	bfc	r1, #3, #3
 8011506:	4b18      	ldr	r3, [pc, #96]	; (8011568 <att_get+0x9c>)
 8011508:	4a18      	ldr	r2, [pc, #96]	; (801156c <att_get+0xa0>)
 801150a:	1a9b      	subs	r3, r3, r2
 801150c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8011510:	f363 118f 	bfi	r1, r3, #6, #10
 8011514:	4816      	ldr	r0, [pc, #88]	; (8011570 <att_get+0xa4>)
 8011516:	f7f5 f983 	bl	8006820 <log_0>
		return NULL;
 801151a:	2400      	movs	r4, #0
 801151c:	e7ea      	b.n	80114f4 <att_get+0x28>
		BT_ERR("Unable to find ATT channel");
 801151e:	f04f 0100 	mov.w	r1, #0
 8011522:	2301      	movs	r3, #1
 8011524:	f363 0102 	bfi	r1, r3, #0, #3
 8011528:	f36f 01c5 	bfc	r1, #3, #3
 801152c:	4b0e      	ldr	r3, [pc, #56]	; (8011568 <att_get+0x9c>)
 801152e:	4a0f      	ldr	r2, [pc, #60]	; (801156c <att_get+0xa0>)
 8011530:	1a9b      	subs	r3, r3, r2
 8011532:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8011536:	f363 118f 	bfi	r1, r3, #6, #10
 801153a:	480e      	ldr	r0, [pc, #56]	; (8011574 <att_get+0xa8>)
 801153c:	f7f5 f970 	bl	8006820 <log_0>
		return NULL;
 8011540:	e7d8      	b.n	80114f4 <att_get+0x28>
		BT_WARN("ATT channel flagged as disconnected");
 8011542:	f04f 0100 	mov.w	r1, #0
 8011546:	2302      	movs	r3, #2
 8011548:	f363 0102 	bfi	r1, r3, #0, #3
 801154c:	f36f 01c5 	bfc	r1, #3, #3
 8011550:	4b05      	ldr	r3, [pc, #20]	; (8011568 <att_get+0x9c>)
 8011552:	4a06      	ldr	r2, [pc, #24]	; (801156c <att_get+0xa0>)
 8011554:	1a9b      	subs	r3, r3, r2
 8011556:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 801155a:	f363 118f 	bfi	r1, r3, #6, #10
 801155e:	4806      	ldr	r0, [pc, #24]	; (8011578 <att_get+0xac>)
 8011560:	f7f5 f95e 	bl	8006820 <log_0>
		return NULL;
 8011564:	2400      	movs	r4, #0
 8011566:	e7c5      	b.n	80114f4 <att_get+0x28>
 8011568:	08022b98 	.word	0x08022b98
 801156c:	08022b90 	.word	0x08022b90
 8011570:	08027284 	.word	0x08027284
 8011574:	08027294 	.word	0x08027294
 8011578:	080272b0 	.word	0x080272b0

0801157c <att_chan_new>:

	k_mem_slab_free(&chan_slab, (void **)&chan);
}

static struct bt_att_chan *att_chan_new(struct bt_att *att, atomic_val_t flags)
{
 801157c:	b570      	push	{r4, r5, r6, lr}
 801157e:	b082      	sub	sp, #8
 8011580:	4605      	mov	r5, r0
 8011582:	460e      	mov	r6, r1
	return list->head;
 8011584:	6a43      	ldr	r3, [r0, #36]	; 0x24
	#endif /* CONFIG_BT_SMP */
		.released = bt_att_released,
	};
	struct bt_att_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
 8011586:	b10b      	cbz	r3, 801158c <att_chan_new+0x10>
 8011588:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801158c:	9301      	str	r3, [sp, #4]
	int quota = 0;
 801158e:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
 8011590:	e015      	b.n	80115be <att_chan_new+0x42>
		if (chan->att == att) {
			quota++;
 8011592:	3101      	adds	r1, #1
 8011594:	e018      	b.n	80115c8 <att_chan_new+0x4c>
		}

		if (quota == ATT_CHAN_MAX) {
			BT_ERR("Maximum number of channels reached: %d", quota);
 8011596:	f04f 0200 	mov.w	r2, #0
 801159a:	2301      	movs	r3, #1
 801159c:	f363 0202 	bfi	r2, r3, #0, #3
 80115a0:	f36f 02c5 	bfc	r2, #3, #3
 80115a4:	4b2e      	ldr	r3, [pc, #184]	; (8011660 <att_chan_new+0xe4>)
 80115a6:	482f      	ldr	r0, [pc, #188]	; (8011664 <att_chan_new+0xe8>)
 80115a8:	1a1b      	subs	r3, r3, r0
 80115aa:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80115ae:	f363 128f 	bfi	r2, r3, #6, #10
 80115b2:	482d      	ldr	r0, [pc, #180]	; (8011668 <att_chan_new+0xec>)
 80115b4:	f7f4 ffc4 	bl	8006540 <log_1>
			return NULL;
 80115b8:	2400      	movs	r4, #0
 80115ba:	e03a      	b.n	8011632 <att_chan_new+0xb6>
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
 80115bc:	9301      	str	r3, [sp, #4]
 80115be:	9c01      	ldr	r4, [sp, #4]
 80115c0:	b174      	cbz	r4, 80115e0 <att_chan_new+0x64>
		if (chan->att == att) {
 80115c2:	6823      	ldr	r3, [r4, #0]
 80115c4:	42ab      	cmp	r3, r5
 80115c6:	d0e4      	beq.n	8011592 <att_chan_new+0x16>
		if (quota == ATT_CHAN_MAX) {
 80115c8:	2901      	cmp	r1, #1
 80115ca:	d0e4      	beq.n	8011596 <att_chan_new+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
 80115cc:	f514 7396 	adds.w	r3, r4, #300	; 0x12c
 80115d0:	d0f4      	beq.n	80115bc <att_chan_new+0x40>
	return node->next;
 80115d2:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d0f0      	beq.n	80115bc <att_chan_new+0x40>
 80115da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80115de:	e7ed      	b.n	80115bc <att_chan_new+0x40>
		}
	}

	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
 80115e0:	2200      	movs	r2, #0
 80115e2:	2300      	movs	r3, #0
 80115e4:	a901      	add	r1, sp, #4
 80115e6:	4821      	ldr	r0, [pc, #132]	; (801166c <att_chan_new+0xf0>)
 80115e8:	f006 fd48 	bl	801807c <k_mem_slab_alloc>
 80115ec:	bb20      	cbnz	r0, 8011638 <att_chan_new+0xbc>
		BT_ERR("No available ATT channel for conn %p", att->conn);
		return NULL;
	}

	(void)memset(chan, 0, sizeof(*chan));
 80115ee:	f44f 7298 	mov.w	r2, #304	; 0x130
 80115f2:	2100      	movs	r1, #0
 80115f4:	9801      	ldr	r0, [sp, #4]
 80115f6:	f00b f97f 	bl	801c8f8 <memset>
	chan->chan.chan.ops = &ops;
 80115fa:	9801      	ldr	r0, [sp, #4]
 80115fc:	4b1c      	ldr	r3, [pc, #112]	; (8011670 <att_chan_new+0xf4>)
 80115fe:	60c3      	str	r3, [r0, #12]
	k_fifo_init(&chan->tx_queue);
 8011600:	30c8      	adds	r0, #200	; 0xc8
	z_impl_k_queue_init(queue);
 8011602:	f010 fc4b 	bl	8021e9c <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
 8011606:	9801      	ldr	r0, [sp, #4]
 8011608:	f500 7088 	add.w	r0, r0, #272	; 0x110
	return z_impl_k_sem_init(sem, initial_count, limit);
 801160c:	2203      	movs	r2, #3
 801160e:	4611      	mov	r1, r2
 8011610:	f010 fdf0 	bl	80221f4 <z_impl_k_sem_init>
	atomic_set(chan->flags, flags);
 8011614:	9b01      	ldr	r3, [sp, #4]
 8011616:	33c0      	adds	r3, #192	; 0xc0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8011618:	f3bf 8f5b 	dmb	ish
 801161c:	e853 2f00 	ldrex	r2, [r3]
 8011620:	e843 6100 	strex	r1, r6, [r3]
 8011624:	2900      	cmp	r1, #0
 8011626:	d1f9      	bne.n	801161c <att_chan_new+0xa0>
 8011628:	f3bf 8f5b 	dmb	ish
	chan->att = att;
 801162c:	9b01      	ldr	r3, [sp, #4]
 801162e:	601d      	str	r5, [r3, #0]

	return chan;
 8011630:	9c01      	ldr	r4, [sp, #4]
}
 8011632:	4620      	mov	r0, r4
 8011634:	b002      	add	sp, #8
 8011636:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("No available ATT channel for conn %p", att->conn);
 8011638:	f04f 0200 	mov.w	r2, #0
 801163c:	2301      	movs	r3, #1
 801163e:	f363 0202 	bfi	r2, r3, #0, #3
 8011642:	f36f 02c5 	bfc	r2, #3, #3
 8011646:	4b06      	ldr	r3, [pc, #24]	; (8011660 <att_chan_new+0xe4>)
 8011648:	4906      	ldr	r1, [pc, #24]	; (8011664 <att_chan_new+0xe8>)
 801164a:	1a5b      	subs	r3, r3, r1
 801164c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8011650:	f363 128f 	bfi	r2, r3, #6, #10
 8011654:	6829      	ldr	r1, [r5, #0]
 8011656:	4807      	ldr	r0, [pc, #28]	; (8011674 <att_chan_new+0xf8>)
 8011658:	f7f4 ff72 	bl	8006540 <log_1>
		return NULL;
 801165c:	e7e9      	b.n	8011632 <att_chan_new+0xb6>
 801165e:	bf00      	nop
 8011660:	08022b98 	.word	0x08022b98
 8011664:	08022b90 	.word	0x08022b90
 8011668:	080272d4 	.word	0x080272d4
 801166c:	20000f3c 	.word	0x20000f3c
 8011670:	20000bc8 	.word	0x20000bc8
 8011674:	080272fc 	.word	0x080272fc

08011678 <bt_att_accept>:

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
 8011678:	b570      	push	{r4, r5, r6, lr}
 801167a:	b082      	sub	sp, #8
 801167c:	4606      	mov	r6, r0
 801167e:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
 8011680:	2200      	movs	r2, #0
 8011682:	2300      	movs	r3, #0
 8011684:	a901      	add	r1, sp, #4
 8011686:	4819      	ldr	r0, [pc, #100]	; (80116ec <bt_att_accept+0x74>)
 8011688:	f006 fcf8 	bl	801807c <k_mem_slab_alloc>
 801168c:	b9b0      	cbnz	r0, 80116bc <bt_att_accept+0x44>
 801168e:	4605      	mov	r5, r0
		BT_ERR("No available ATT context for conn %p", conn);
		return -ENOMEM;
	}

	(void)memset(att, 0, sizeof(*att));
 8011690:	222c      	movs	r2, #44	; 0x2c
 8011692:	2100      	movs	r1, #0
 8011694:	9801      	ldr	r0, [sp, #4]
 8011696:	f00b f92f 	bl	801c8f8 <memset>
	att->conn = conn;
 801169a:	9b01      	ldr	r3, [sp, #4]
 801169c:	601e      	str	r6, [r3, #0]
	sys_slist_init(&att->reqs);
 801169e:	9801      	ldr	r0, [sp, #4]
	list->head = NULL;
 80116a0:	2100      	movs	r1, #0
 80116a2:	6041      	str	r1, [r0, #4]
	list->tail = NULL;
 80116a4:	6081      	str	r1, [r0, #8]
	list->head = NULL;
 80116a6:	6241      	str	r1, [r0, #36]	; 0x24
	list->tail = NULL;
 80116a8:	6281      	str	r1, [r0, #40]	; 0x28
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
 80116aa:	f7ff ff67 	bl	801157c <att_chan_new>
	if (!chan) {
 80116ae:	4603      	mov	r3, r0
 80116b0:	b1c8      	cbz	r0, 80116e6 <bt_att_accept+0x6e>
		return -ENOMEM;
	}

	*ch = &chan->chan.chan;
 80116b2:	3308      	adds	r3, #8
 80116b4:	6023      	str	r3, [r4, #0]

	return 0;
}
 80116b6:	4628      	mov	r0, r5
 80116b8:	b002      	add	sp, #8
 80116ba:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("No available ATT context for conn %p", conn);
 80116bc:	f04f 0200 	mov.w	r2, #0
 80116c0:	2301      	movs	r3, #1
 80116c2:	f363 0202 	bfi	r2, r3, #0, #3
 80116c6:	f36f 02c5 	bfc	r2, #3, #3
 80116ca:	4b09      	ldr	r3, [pc, #36]	; (80116f0 <bt_att_accept+0x78>)
 80116cc:	4909      	ldr	r1, [pc, #36]	; (80116f4 <bt_att_accept+0x7c>)
 80116ce:	1a5b      	subs	r3, r3, r1
 80116d0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80116d4:	f363 128f 	bfi	r2, r3, #6, #10
 80116d8:	4631      	mov	r1, r6
 80116da:	4807      	ldr	r0, [pc, #28]	; (80116f8 <bt_att_accept+0x80>)
 80116dc:	f7f4 ff30 	bl	8006540 <log_1>
		return -ENOMEM;
 80116e0:	f06f 050b 	mvn.w	r5, #11
 80116e4:	e7e7      	b.n	80116b6 <bt_att_accept+0x3e>
		return -ENOMEM;
 80116e6:	f06f 050b 	mvn.w	r5, #11
 80116ea:	e7e4      	b.n	80116b6 <bt_att_accept+0x3e>
 80116ec:	20000f20 	.word	0x20000f20
 80116f0:	08022b98 	.word	0x08022b98
 80116f4:	08022b90 	.word	0x08022b90
 80116f8:	08027324 	.word	0x08027324

080116fc <bt_att_released>:
{
 80116fc:	b500      	push	{lr}
 80116fe:	b083      	sub	sp, #12
	struct bt_att_chan *chan = ATT_CHAN(ch);
 8011700:	3808      	subs	r0, #8
 8011702:	9001      	str	r0, [sp, #4]
	k_mem_slab_free(&chan_slab, (void **)&chan);
 8011704:	a901      	add	r1, sp, #4
 8011706:	4803      	ldr	r0, [pc, #12]	; (8011714 <bt_att_released+0x18>)
 8011708:	f006 fcee 	bl	80180e8 <k_mem_slab_free>
}
 801170c:	b003      	add	sp, #12
 801170e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011712:	bf00      	nop
 8011714:	20000f3c 	.word	0x20000f3c

08011718 <chan_send>:
{
 8011718:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801171c:	b083      	sub	sp, #12
 801171e:	4605      	mov	r5, r0
 8011720:	460c      	mov	r4, r1
 8011722:	4616      	mov	r6, r2
	hdr = (void *)buf->data;
 8011724:	688b      	ldr	r3, [r1, #8]
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
 8011726:	781b      	ldrb	r3, [r3, #0]
 8011728:	2bd2      	cmp	r3, #210	; 0xd2
 801172a:	d028      	beq.n	801177e <chan_send+0x66>
	state->offset = net_buf_simple_headroom(buf);
 801172c:	f104 0008 	add.w	r0, r4, #8
 8011730:	f00e feed 	bl	802050e <net_buf_simple_headroom>
 8011734:	b287      	uxth	r7, r0
	state->len = buf->len;
 8011736:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	chan->sent = cb ? cb : chan_cb(buf);
 801173a:	2e00      	cmp	r6, #0
 801173c:	d03b      	beq.n	80117b6 <chan_send+0x9e>
 801173e:	f8c5 6128 	str.w	r6, [r5, #296]	; 0x128
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
 8011742:	682b      	ldr	r3, [r5, #0]
 8011744:	f8d3 9000 	ldr.w	r9, [r3]
 8011748:	4620      	mov	r0, r4
 801174a:	f00e fe73 	bl	8020434 <net_buf_ref>
 801174e:	4606      	mov	r6, r0
 8011750:	f8d5 0128 	ldr.w	r0, [r5, #296]	; 0x128
 8011754:	f7ff fe7e 	bl	8011454 <att_cb>
 8011758:	4603      	mov	r3, r0
				&chan->chan.chan);
 801175a:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
 801175c:	9500      	str	r5, [sp, #0]
 801175e:	4632      	mov	r2, r6
 8011760:	2104      	movs	r1, #4
 8011762:	4648      	mov	r0, r9
 8011764:	f00c f94b 	bl	801d9fe <bt_l2cap_send_cb>
	if (!err) {
 8011768:	4681      	mov	r9, r0
 801176a:	b348      	cbz	r0, 80117c0 <chan_send+0xa8>
	buf->data = buf->__buf + state->offset;
 801176c:	6920      	ldr	r0, [r4, #16]
 801176e:	4438      	add	r0, r7
 8011770:	60a0      	str	r0, [r4, #8]
	buf->len = state->len;
 8011772:	f8a4 800c 	strh.w	r8, [r4, #12]
}
 8011776:	4648      	mov	r0, r9
 8011778:	b003      	add	sp, #12
 801177a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = bt_smp_sign(chan->att->conn, buf);
 801177e:	6803      	ldr	r3, [r0, #0]
 8011780:	6818      	ldr	r0, [r3, #0]
 8011782:	f00e fcb1 	bl	80200e8 <bt_smp_sign>
		if (err) {
 8011786:	4681      	mov	r9, r0
 8011788:	2800      	cmp	r0, #0
 801178a:	d0cf      	beq.n	801172c <chan_send+0x14>
			BT_ERR("Error signing data");
 801178c:	f04f 0100 	mov.w	r1, #0
 8011790:	2301      	movs	r3, #1
 8011792:	f363 0102 	bfi	r1, r3, #0, #3
 8011796:	f36f 01c5 	bfc	r1, #3, #3
 801179a:	4b0b      	ldr	r3, [pc, #44]	; (80117c8 <chan_send+0xb0>)
 801179c:	4a0b      	ldr	r2, [pc, #44]	; (80117cc <chan_send+0xb4>)
 801179e:	1a9b      	subs	r3, r3, r2
 80117a0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80117a4:	f363 118f 	bfi	r1, r3, #6, #10
 80117a8:	4809      	ldr	r0, [pc, #36]	; (80117d0 <chan_send+0xb8>)
 80117aa:	f7f5 f839 	bl	8006820 <log_0>
			net_buf_unref(buf);
 80117ae:	4620      	mov	r0, r4
 80117b0:	f00e fe1a 	bl	80203e8 <net_buf_unref>
			return err;
 80117b4:	e7df      	b.n	8011776 <chan_send+0x5e>
	chan->sent = cb ? cb : chan_cb(buf);
 80117b6:	4620      	mov	r0, r4
 80117b8:	f7ff fe6c 	bl	8011494 <chan_cb>
 80117bc:	4606      	mov	r6, r0
 80117be:	e7be      	b.n	801173e <chan_send+0x26>
		net_buf_unref(buf);
 80117c0:	4620      	mov	r0, r4
 80117c2:	f00e fe11 	bl	80203e8 <net_buf_unref>
		return 0;
 80117c6:	e7d6      	b.n	8011776 <chan_send+0x5e>
 80117c8:	08022b98 	.word	0x08022b98
 80117cc:	08022b90 	.word	0x08022b90
 80117d0:	0802734c 	.word	0x0802734c

080117d4 <chan_req_sent>:
{
 80117d4:	b508      	push	{r3, lr}
	if (chan->req) {
 80117d6:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
 80117da:	b133      	cbz	r3, 80117ea <chan_req_sent+0x16>
 80117dc:	4a03      	ldr	r2, [pc, #12]	; (80117ec <chan_req_sent+0x18>)
 80117de:	2300      	movs	r3, #0
 80117e0:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
 80117e4:	4802      	ldr	r0, [pc, #8]	; (80117f0 <chan_req_sent+0x1c>)
 80117e6:	f007 fb43 	bl	8018e70 <k_delayed_work_submit_to_queue>
}
 80117ea:	bd08      	pop	{r3, pc}
 80117ec:	000493e0 	.word	0x000493e0
 80117f0:	20003310 	.word	0x20003310

080117f4 <read_group_cb>:
{
 80117f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117f6:	b085      	sub	sp, #20
 80117f8:	4605      	mov	r5, r0
 80117fa:	460e      	mov	r6, r1
 80117fc:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
 80117fe:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
 8011800:	2300      	movs	r3, #0
 8011802:	f88d 3008 	strb.w	r3, [sp, #8]
 8011806:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 801180a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801180e:	a902      	add	r1, sp, #8
 8011810:	6800      	ldr	r0, [r0, #0]
 8011812:	f00b f912 	bl	801ca3a <bt_uuid_cmp>
 8011816:	b158      	cbz	r0, 8011830 <read_group_cb+0x3c>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
 8011818:	2300      	movs	r3, #0
 801181a:	f88d 300c 	strb.w	r3, [sp, #12]
 801181e:	f642 0301 	movw	r3, #10241	; 0x2801
 8011822:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011826:	a903      	add	r1, sp, #12
 8011828:	6828      	ldr	r0, [r5, #0]
 801182a:	f00b f906 	bl	801ca3a <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
 801182e:	bb30      	cbnz	r0, 801187e <read_group_cb+0x8a>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
 8011830:	6861      	ldr	r1, [r4, #4]
 8011832:	6828      	ldr	r0, [r5, #0]
 8011834:	f00b f901 	bl	801ca3a <bt_uuid_cmp>
 8011838:	bb48      	cbnz	r0, 801188e <read_group_cb+0x9a>
	if (data->rsp->len &&
 801183a:	68e3      	ldr	r3, [r4, #12]
 801183c:	781a      	ldrb	r2, [r3, #0]
 801183e:	b132      	cbz	r2, 801184e <read_group_cb+0x5a>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
 8011840:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8011844:	68a1      	ldr	r1, [r4, #8]
 8011846:	8989      	ldrh	r1, [r1, #12]
 8011848:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
 801184a:	4293      	cmp	r3, r2
 801184c:	db24      	blt.n	8011898 <read_group_cb+0xa4>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
 801184e:	68a0      	ldr	r0, [r4, #8]
 8011850:	2104      	movs	r1, #4
 8011852:	3008      	adds	r0, #8
 8011854:	f00e fe12 	bl	802047c <net_buf_simple_add>
 8011858:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
 801185a:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
 801185c:	6923      	ldr	r3, [r4, #16]
 801185e:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
 8011860:	9401      	str	r4, [sp, #4]
 8011862:	4b10      	ldr	r3, [pc, #64]	; (80118a4 <read_group_cb+0xb0>)
 8011864:	9300      	str	r3, [sp, #0]
 8011866:	2300      	movs	r3, #0
 8011868:	68a2      	ldr	r2, [r4, #8]
 801186a:	4629      	mov	r1, r5
 801186c:	4638      	mov	r0, r7
 801186e:	f00c fbe8 	bl	801e042 <att_chan_read>
	if (read < 0) {
 8011872:	2800      	cmp	r0, #0
 8011874:	db12      	blt.n	801189c <read_group_cb+0xa8>
	if (!data->group) {
 8011876:	6923      	ldr	r3, [r4, #16]
 8011878:	b193      	cbz	r3, 80118a0 <read_group_cb+0xac>
	return BT_GATT_ITER_CONTINUE;
 801187a:	2001      	movs	r0, #1
 801187c:	e00a      	b.n	8011894 <read_group_cb+0xa0>
		if (data->group &&
 801187e:	6923      	ldr	r3, [r4, #16]
 8011880:	b11b      	cbz	r3, 801188a <read_group_cb+0x96>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
 8011882:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
 8011884:	42b2      	cmp	r2, r6
 8011886:	d200      	bcs.n	801188a <read_group_cb+0x96>
			data->group->end_handle = sys_cpu_to_le16(handle);
 8011888:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
 801188a:	2001      	movs	r0, #1
 801188c:	e002      	b.n	8011894 <read_group_cb+0xa0>
		data->group = NULL;
 801188e:	2300      	movs	r3, #0
 8011890:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
 8011892:	2001      	movs	r0, #1
}
 8011894:	b005      	add	sp, #20
 8011896:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ITER_STOP;
 8011898:	2000      	movs	r0, #0
 801189a:	e7fb      	b.n	8011894 <read_group_cb+0xa0>
		return BT_GATT_ITER_STOP;
 801189c:	2000      	movs	r0, #0
 801189e:	e7f9      	b.n	8011894 <read_group_cb+0xa0>
		return BT_GATT_ITER_STOP;
 80118a0:	2000      	movs	r0, #0
 80118a2:	e7f7      	b.n	8011894 <read_group_cb+0xa0>
 80118a4:	0801db7d 	.word	0x0801db7d

080118a8 <read_type_cb>:
{
 80118a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80118ac:	b083      	sub	sp, #12
 80118ae:	4606      	mov	r6, r0
 80118b0:	4688      	mov	r8, r1
 80118b2:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
 80118b4:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
 80118b6:	68bd      	ldr	r5, [r7, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
 80118b8:	6851      	ldr	r1, [r2, #4]
 80118ba:	6800      	ldr	r0, [r0, #0]
 80118bc:	f00b f8bd 	bl	801ca3a <bt_uuid_cmp>
 80118c0:	b120      	cbz	r0, 80118cc <read_type_cb+0x24>
		return BT_GATT_ITER_CONTINUE;
 80118c2:	2501      	movs	r5, #1
}
 80118c4:	4628      	mov	r0, r5
 80118c6:	b003      	add	sp, #12
 80118c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
 80118cc:	2215      	movs	r2, #21
 80118ce:	4631      	mov	r1, r6
 80118d0:	4628      	mov	r0, r5
 80118d2:	f00d fbf3 	bl	801f0bc <bt_gatt_check_perm>
 80118d6:	4605      	mov	r5, r0
 80118d8:	7520      	strb	r0, [r4, #20]
	if (data->err) {
 80118da:	b130      	cbz	r0, 80118ea <read_type_cb+0x42>
		if (data->rsp->len) {
 80118dc:	68e3      	ldr	r3, [r4, #12]
 80118de:	781b      	ldrb	r3, [r3, #0]
 80118e0:	b10b      	cbz	r3, 80118e6 <read_type_cb+0x3e>
			data->err = 0x00;
 80118e2:	2300      	movs	r3, #0
 80118e4:	7523      	strb	r3, [r4, #20]
		return BT_GATT_ITER_STOP;
 80118e6:	2500      	movs	r5, #0
 80118e8:	e7ec      	b.n	80118c4 <read_type_cb+0x1c>
	data->err = 0x00;
 80118ea:	f04f 0900 	mov.w	r9, #0
 80118ee:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(net_buf_frag_last(data->buf),
 80118f2:	68a0      	ldr	r0, [r4, #8]
 80118f4:	f00e fda2 	bl	802043c <net_buf_frag_last>
 80118f8:	2102      	movs	r1, #2
 80118fa:	3008      	adds	r0, #8
 80118fc:	f00e fdbe 	bl	802047c <net_buf_simple_add>
 8011900:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
 8011902:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
 8011906:	9401      	str	r4, [sp, #4]
 8011908:	4b11      	ldr	r3, [pc, #68]	; (8011950 <read_type_cb+0xa8>)
 801190a:	9300      	str	r3, [sp, #0]
 801190c:	464b      	mov	r3, r9
 801190e:	68a2      	ldr	r2, [r4, #8]
 8011910:	4631      	mov	r1, r6
 8011912:	4638      	mov	r0, r7
 8011914:	f00c fb95 	bl	801e042 <att_chan_read>
	if (read < 0) {
 8011918:	2800      	cmp	r0, #0
 801191a:	db07      	blt.n	801192c <read_type_cb+0x84>
	if (!data->item) {
 801191c:	6923      	ldr	r3, [r4, #16]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d0d0      	beq.n	80118c4 <read_type_cb+0x1c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
 8011922:	f8b7 505e 	ldrh.w	r5, [r7, #94]	; 0x5e
 8011926:	68a3      	ldr	r3, [r4, #8]
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
 8011928:	2200      	movs	r2, #0

	while (buf) {
 801192a:	e006      	b.n	801193a <read_type_cb+0x92>
		data->err = err_to_att(read);
 801192c:	f00c f909 	bl	801db42 <err_to_att>
 8011930:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
 8011932:	e7c7      	b.n	80118c4 <read_type_cb+0x1c>
		bytes += buf->len;
 8011934:	8999      	ldrh	r1, [r3, #12]
 8011936:	440a      	add	r2, r1
		buf = buf->frags;
 8011938:	681b      	ldr	r3, [r3, #0]
	while (buf) {
 801193a:	2b00      	cmp	r3, #0
 801193c:	d1fa      	bne.n	8011934 <read_type_cb+0x8c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
 801193e:	1aaa      	subs	r2, r5, r2
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
 8011940:	68e3      	ldr	r3, [r4, #12]
 8011942:	781d      	ldrb	r5, [r3, #0]
 8011944:	42aa      	cmp	r2, r5
 8011946:	bf94      	ite	ls
 8011948:	2500      	movls	r5, #0
 801194a:	2501      	movhi	r5, #1
 801194c:	e7ba      	b.n	80118c4 <read_type_cb+0x1c>
 801194e:	bf00      	nop
 8011950:	0801db53 	.word	0x0801db53

08011954 <find_type_cb>:
{
 8011954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011958:	b093      	sub	sp, #76	; 0x4c
 801195a:	4606      	mov	r6, r0
 801195c:	460f      	mov	r7, r1
 801195e:	4615      	mov	r5, r2
	struct bt_att_chan *chan = data->chan;
 8011960:	f8d2 8000 	ldr.w	r8, [r2]
	struct bt_conn *conn = chan->chan.chan.conn;
 8011964:	f8d8 9008 	ldr.w	r9, [r8, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
 8011968:	2300      	movs	r3, #0
 801196a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 801196e:	f642 0301 	movw	r3, #10241	; 0x2801
 8011972:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8011976:	a910      	add	r1, sp, #64	; 0x40
 8011978:	6800      	ldr	r0, [r0, #0]
 801197a:	f00b f85e 	bl	801ca3a <bt_uuid_cmp>
 801197e:	b928      	cbnz	r0, 801198c <find_type_cb+0x38>
	data->group = NULL;
 8011980:	2300      	movs	r3, #0
 8011982:	60ab      	str	r3, [r5, #8]
	return BT_GATT_ITER_CONTINUE;
 8011984:	2001      	movs	r0, #1
}
 8011986:	b013      	add	sp, #76	; 0x4c
 8011988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
 801198c:	2300      	movs	r3, #0
 801198e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 8011992:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8011996:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 801199a:	a911      	add	r1, sp, #68	; 0x44
 801199c:	6830      	ldr	r0, [r6, #0]
 801199e:	f00b f84c 	bl	801ca3a <bt_uuid_cmp>
 80119a2:	b928      	cbnz	r0, 80119b0 <find_type_cb+0x5c>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
 80119a4:	f8b8 105e 	ldrh.w	r1, [r8, #94]	; 0x5e
 80119a8:	6868      	ldr	r0, [r5, #4]
 80119aa:	4603      	mov	r3, r0
	size_t bytes = 0;
 80119ac:	2400      	movs	r4, #0
	while (buf) {
 80119ae:	e00a      	b.n	80119c6 <find_type_cb+0x72>
		if (data->group &&
 80119b0:	68ab      	ldr	r3, [r5, #8]
 80119b2:	b11b      	cbz	r3, 80119bc <find_type_cb+0x68>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
 80119b4:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
 80119b6:	42ba      	cmp	r2, r7
 80119b8:	d200      	bcs.n	80119bc <find_type_cb+0x68>
			data->group->end_handle = sys_cpu_to_le16(handle);
 80119ba:	805f      	strh	r7, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
 80119bc:	2001      	movs	r0, #1
 80119be:	e7e2      	b.n	8011986 <find_type_cb+0x32>
		bytes += buf->len;
 80119c0:	899a      	ldrh	r2, [r3, #12]
 80119c2:	4414      	add	r4, r2
		buf = buf->frags;
 80119c4:	681b      	ldr	r3, [r3, #0]
	while (buf) {
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d1fa      	bne.n	80119c0 <find_type_cb+0x6c>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
 80119ca:	1b0c      	subs	r4, r1, r4
 80119cc:	2c03      	cmp	r4, #3
 80119ce:	d801      	bhi.n	80119d4 <find_type_cb+0x80>
		return BT_GATT_ITER_STOP;
 80119d0:	2000      	movs	r0, #0
 80119d2:	e7d8      	b.n	8011986 <find_type_cb+0x32>
	frag = net_buf_frag_last(data->buf);
 80119d4:	f00e fd32 	bl	802043c <net_buf_frag_last>
 80119d8:	4604      	mov	r4, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
 80119da:	f8b8 a05e 	ldrh.w	sl, [r8, #94]	; 0x5e
 80119de:	686b      	ldr	r3, [r5, #4]
	size_t bytes = 0;
 80119e0:	2200      	movs	r2, #0
	while (buf) {
 80119e2:	b11b      	cbz	r3, 80119ec <find_type_cb+0x98>
		bytes += buf->len;
 80119e4:	8999      	ldrh	r1, [r3, #12]
 80119e6:	440a      	add	r2, r1
		buf = buf->frags;
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	e7fa      	b.n	80119e2 <find_type_cb+0x8e>
 80119ec:	ebaa 0a02 	sub.w	sl, sl, r2
 80119f0:	f104 0b08 	add.w	fp, r4, #8
 80119f4:	4658      	mov	r0, fp
 80119f6:	f00e fd8e 	bl	8020516 <net_buf_simple_tailroom>
 80119fa:	4582      	cmp	sl, r0
 80119fc:	d22b      	bcs.n	8011a56 <find_type_cb+0x102>
 80119fe:	f8b8 005e 	ldrh.w	r0, [r8, #94]	; 0x5e
 8011a02:	686b      	ldr	r3, [r5, #4]
	size_t bytes = 0;
 8011a04:	2200      	movs	r2, #0
	while (buf) {
 8011a06:	e002      	b.n	8011a0e <find_type_cb+0xba>
		bytes += buf->len;
 8011a08:	8999      	ldrh	r1, [r3, #12]
 8011a0a:	440a      	add	r2, r1
		buf = buf->frags;
 8011a0c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d1fa      	bne.n	8011a08 <find_type_cb+0xb4>
 8011a12:	1a80      	subs	r0, r0, r2
	if (!len) {
 8011a14:	b318      	cbz	r0, 8011a5e <find_type_cb+0x10a>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
 8011a16:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	9300      	str	r3, [sp, #0]
 8011a1e:	2310      	movs	r3, #16
 8011a20:	aa0c      	add	r2, sp, #48	; 0x30
 8011a22:	4631      	mov	r1, r6
 8011a24:	4648      	mov	r0, r9
 8011a26:	47c0      	blx	r8
	if (read < 0) {
 8011a28:	1e06      	subs	r6, r0, #0
 8011a2a:	dba9      	blt.n	8011980 <find_type_cb+0x2c>
	if (read != data->value_len) {
 8011a2c:	7c2a      	ldrb	r2, [r5, #16]
 8011a2e:	42b2      	cmp	r2, r6
 8011a30:	d04b      	beq.n	8011aca <find_type_cb+0x176>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
 8011a32:	68e9      	ldr	r1, [r5, #12]
 8011a34:	a807      	add	r0, sp, #28
 8011a36:	f00b f81e 	bl	801ca76 <bt_uuid_create>
 8011a3a:	b300      	cbz	r0, 8011a7e <find_type_cb+0x12a>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
 8011a3c:	b2f2      	uxtb	r2, r6
 8011a3e:	a90c      	add	r1, sp, #48	; 0x30
 8011a40:	a802      	add	r0, sp, #8
 8011a42:	f00b f818 	bl	801ca76 <bt_uuid_create>
 8011a46:	b368      	cbz	r0, 8011aa4 <find_type_cb+0x150>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
 8011a48:	a902      	add	r1, sp, #8
 8011a4a:	a807      	add	r0, sp, #28
 8011a4c:	f00a fff5 	bl	801ca3a <bt_uuid_cmp>
 8011a50:	2800      	cmp	r0, #0
 8011a52:	d042      	beq.n	8011ada <find_type_cb+0x186>
 8011a54:	e794      	b.n	8011980 <find_type_cb+0x2c>
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
 8011a56:	4658      	mov	r0, fp
 8011a58:	f00e fd5d 	bl	8020516 <net_buf_simple_tailroom>
 8011a5c:	e7da      	b.n	8011a14 <find_type_cb+0xc0>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
 8011a5e:	686b      	ldr	r3, [r5, #4]
 8011a60:	7998      	ldrb	r0, [r3, #6]
 8011a62:	f005 f87f 	bl	8016b64 <net_buf_pool_get>
 8011a66:	2200      	movs	r2, #0
 8011a68:	2300      	movs	r3, #0
 8011a6a:	f00e fc84 	bl	8020376 <net_buf_alloc_fixed>
		if (!frag) {
 8011a6e:	4604      	mov	r4, r0
 8011a70:	2800      	cmp	r0, #0
 8011a72:	d088      	beq.n	8011986 <find_type_cb+0x32>
		net_buf_frag_add(data->buf, frag);
 8011a74:	4601      	mov	r1, r0
 8011a76:	6868      	ldr	r0, [r5, #4]
 8011a78:	f00e fcf1 	bl	802045e <net_buf_frag_add>
 8011a7c:	e7cb      	b.n	8011a16 <find_type_cb+0xc2>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
 8011a7e:	f04f 0200 	mov.w	r2, #0
 8011a82:	2302      	movs	r3, #2
 8011a84:	f363 0202 	bfi	r2, r3, #0, #3
 8011a88:	f36f 02c5 	bfc	r2, #3, #3
 8011a8c:	4b19      	ldr	r3, [pc, #100]	; (8011af4 <find_type_cb+0x1a0>)
 8011a8e:	491a      	ldr	r1, [pc, #104]	; (8011af8 <find_type_cb+0x1a4>)
 8011a90:	1a5b      	subs	r3, r3, r1
 8011a92:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8011a96:	f363 128f 	bfi	r2, r3, #6, #10
 8011a9a:	7c29      	ldrb	r1, [r5, #16]
 8011a9c:	4817      	ldr	r0, [pc, #92]	; (8011afc <find_type_cb+0x1a8>)
 8011a9e:	f7f4 fd4f 	bl	8006540 <log_1>
			goto skip;
 8011aa2:	e76d      	b.n	8011980 <find_type_cb+0x2c>
			BT_WARN("Unable to create UUID: size %d", read);
 8011aa4:	f04f 0200 	mov.w	r2, #0
 8011aa8:	2302      	movs	r3, #2
 8011aaa:	f363 0202 	bfi	r2, r3, #0, #3
 8011aae:	f36f 02c5 	bfc	r2, #3, #3
 8011ab2:	4b10      	ldr	r3, [pc, #64]	; (8011af4 <find_type_cb+0x1a0>)
 8011ab4:	4910      	ldr	r1, [pc, #64]	; (8011af8 <find_type_cb+0x1a4>)
 8011ab6:	1a5b      	subs	r3, r3, r1
 8011ab8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8011abc:	f363 128f 	bfi	r2, r3, #6, #10
 8011ac0:	4631      	mov	r1, r6
 8011ac2:	480f      	ldr	r0, [pc, #60]	; (8011b00 <find_type_cb+0x1ac>)
 8011ac4:	f7f4 fd3c 	bl	8006540 <log_1>
			goto skip;
 8011ac8:	e75a      	b.n	8011980 <find_type_cb+0x2c>
	} else if (memcmp(data->value, uuid, read)) {
 8011aca:	4632      	mov	r2, r6
 8011acc:	a90c      	add	r1, sp, #48	; 0x30
 8011ace:	68e8      	ldr	r0, [r5, #12]
 8011ad0:	f00a fed5 	bl	801c87e <memcmp>
 8011ad4:	2800      	cmp	r0, #0
 8011ad6:	f47f af53 	bne.w	8011980 <find_type_cb+0x2c>
	data->err = 0x00;
 8011ada:	2300      	movs	r3, #0
 8011adc:	746b      	strb	r3, [r5, #17]
	data->group = net_buf_add(frag, sizeof(*data->group));
 8011ade:	2104      	movs	r1, #4
 8011ae0:	f104 0008 	add.w	r0, r4, #8
 8011ae4:	f00e fcca 	bl	802047c <net_buf_simple_add>
 8011ae8:	60a8      	str	r0, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
 8011aea:	8007      	strh	r7, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
 8011aec:	68ab      	ldr	r3, [r5, #8]
 8011aee:	805f      	strh	r7, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
 8011af0:	2001      	movs	r0, #1
 8011af2:	e748      	b.n	8011986 <find_type_cb+0x32>
 8011af4:	08022b98 	.word	0x08022b98
 8011af8:	08022b90 	.word	0x08022b90
 8011afc:	08027360 	.word	0x08027360
 8011b00:	08027380 	.word	0x08027380

08011b04 <bt_att_connected>:
{
 8011b04:	b538      	push	{r3, r4, r5, lr}
 8011b06:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = att_get_fixed_chan(chan->conn);
 8011b08:	4605      	mov	r5, r0
 8011b0a:	f855 0908 	ldr.w	r0, [r5], #-8
 8011b0e:	f00c fbca 	bl	801e2a6 <att_get_fixed_chan>
	att_chan_attach(att, att_chan);
 8011b12:	4629      	mov	r1, r5
 8011b14:	6800      	ldr	r0, [r0, #0]
 8011b16:	f00c f8c9 	bl	801dcac <att_chan_attach>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8011b1a:	f3bf 8f5b 	dmb	ish
 8011b1e:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8011b22:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
 8011b26:	f013 0f08 	tst.w	r3, #8
 8011b2a:	d104      	bne.n	8011b36 <bt_att_connected+0x32>
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
 8011b2c:	2317      	movs	r3, #23
 8011b2e:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
 8011b32:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
 8011b36:	4903      	ldr	r1, [pc, #12]	; (8011b44 <bt_att_connected+0x40>)
 8011b38:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
 8011b3c:	f010 fc18 	bl	8022370 <k_delayed_work_init>
}
 8011b40:	bd38      	pop	{r3, r4, r5, pc}
 8011b42:	bf00      	nop
 8011b44:	08012529 	.word	0x08012529

08011b48 <bt_att_chan_create_pdu>:
{
 8011b48:	b538      	push	{r3, r4, r5, lr}
 8011b4a:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
 8011b4c:	3201      	adds	r2, #1
 8011b4e:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 8011b52:	428a      	cmp	r2, r1
 8011b54:	d810      	bhi.n	8011b78 <bt_att_chan_create_pdu+0x30>
	switch (att_op_get_type(op)) {
 8011b56:	4628      	mov	r0, r5
 8011b58:	f00c f827 	bl	801dbaa <att_op_get_type>
 8011b5c:	2802      	cmp	r0, #2
 8011b5e:	d01e      	beq.n	8011b9e <bt_att_chan_create_pdu+0x56>
 8011b60:	2804      	cmp	r0, #4
 8011b62:	d01c      	beq.n	8011b9e <bt_att_chan_create_pdu+0x56>
		buf = bt_l2cap_create_pdu(NULL, 0);
 8011b64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011b68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011b6c:	2100      	movs	r1, #0
 8011b6e:	4608      	mov	r0, r1
 8011b70:	f00b ff40 	bl	801d9f4 <bt_l2cap_create_pdu_timeout>
 8011b74:	4604      	mov	r4, r0
 8011b76:	e019      	b.n	8011bac <bt_att_chan_create_pdu+0x64>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
 8011b78:	f04f 0300 	mov.w	r3, #0
 8011b7c:	2002      	movs	r0, #2
 8011b7e:	f360 0302 	bfi	r3, r0, #0, #3
 8011b82:	f36f 03c5 	bfc	r3, #3, #3
 8011b86:	4817      	ldr	r0, [pc, #92]	; (8011be4 <bt_att_chan_create_pdu+0x9c>)
 8011b88:	4c17      	ldr	r4, [pc, #92]	; (8011be8 <bt_att_chan_create_pdu+0xa0>)
 8011b8a:	1b00      	subs	r0, r0, r4
 8011b8c:	f3c0 00c9 	ubfx	r0, r0, #3, #10
 8011b90:	f360 138f 	bfi	r3, r0, #6, #10
 8011b94:	4815      	ldr	r0, [pc, #84]	; (8011bec <bt_att_chan_create_pdu+0xa4>)
 8011b96:	f7f4 fd53 	bl	8006640 <log_2>
		return NULL;
 8011b9a:	2400      	movs	r4, #0
 8011b9c:	e00d      	b.n	8011bba <bt_att_chan_create_pdu+0x72>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
 8011b9e:	4a14      	ldr	r2, [pc, #80]	; (8011bf0 <bt_att_chan_create_pdu+0xa8>)
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	2100      	movs	r1, #0
 8011ba4:	4608      	mov	r0, r1
 8011ba6:	f00b ff25 	bl	801d9f4 <bt_l2cap_create_pdu_timeout>
 8011baa:	4604      	mov	r4, r0
	if (!buf) {
 8011bac:	b13c      	cbz	r4, 8011bbe <bt_att_chan_create_pdu+0x76>
	hdr = net_buf_add(buf, sizeof(*hdr));
 8011bae:	2101      	movs	r1, #1
 8011bb0:	f104 0008 	add.w	r0, r4, #8
 8011bb4:	f00e fc62 	bl	802047c <net_buf_simple_add>
	hdr->code = op;
 8011bb8:	7005      	strb	r5, [r0, #0]
}
 8011bba:	4620      	mov	r0, r4
 8011bbc:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
 8011bbe:	f04f 0200 	mov.w	r2, #0
 8011bc2:	2301      	movs	r3, #1
 8011bc4:	f363 0202 	bfi	r2, r3, #0, #3
 8011bc8:	f36f 02c5 	bfc	r2, #3, #3
 8011bcc:	4b05      	ldr	r3, [pc, #20]	; (8011be4 <bt_att_chan_create_pdu+0x9c>)
 8011bce:	4906      	ldr	r1, [pc, #24]	; (8011be8 <bt_att_chan_create_pdu+0xa0>)
 8011bd0:	1a5b      	subs	r3, r3, r1
 8011bd2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8011bd6:	f363 128f 	bfi	r2, r3, #6, #10
 8011bda:	4629      	mov	r1, r5
 8011bdc:	4805      	ldr	r0, [pc, #20]	; (8011bf4 <bt_att_chan_create_pdu+0xac>)
 8011bde:	f7f4 fcaf 	bl	8006540 <log_1>
		return NULL;
 8011be2:	e7ea      	b.n	8011bba <bt_att_chan_create_pdu+0x72>
 8011be4:	08022b98 	.word	0x08022b98
 8011be8:	08022b90 	.word	0x08022b90
 8011bec:	080273a0 	.word	0x080273a0
 8011bf0:	000493e0 	.word	0x000493e0
 8011bf4:	0802712c 	.word	0x0802712c

08011bf8 <att_indicate>:
{
 8011bf8:	b570      	push	{r4, r5, r6, lr}
 8011bfa:	4605      	mov	r5, r0
 8011bfc:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
 8011bfe:	f101 0008 	add.w	r0, r1, #8
 8011c02:	f00e fc7c 	bl	80204fe <net_buf_simple_pull_le16>
 8011c06:	4601      	mov	r1, r0
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
 8011c08:	682e      	ldr	r6, [r5, #0]
 8011c0a:	89a3      	ldrh	r3, [r4, #12]
 8011c0c:	68a2      	ldr	r2, [r4, #8]
 8011c0e:	6830      	ldr	r0, [r6, #0]
 8011c10:	f00d fb25 	bl	801f25e <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
 8011c14:	2200      	movs	r2, #0
 8011c16:	211e      	movs	r1, #30
 8011c18:	4628      	mov	r0, r5
 8011c1a:	f7ff ff95 	bl	8011b48 <bt_att_chan_create_pdu>
	if (!buf) {
 8011c1e:	b120      	cbz	r0, 8011c2a <att_indicate+0x32>
 8011c20:	4601      	mov	r1, r0
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
 8011c22:	4a03      	ldr	r2, [pc, #12]	; (8011c30 <att_indicate+0x38>)
 8011c24:	4628      	mov	r0, r5
 8011c26:	f00c f9b2 	bl	801df8e <bt_att_chan_send_rsp>
}
 8011c2a:	2000      	movs	r0, #0
 8011c2c:	bd70      	pop	{r4, r5, r6, pc}
 8011c2e:	bf00      	nop
 8011c30:	0801dd57 	.word	0x0801dd57

08011c34 <send_err_rsp>:
	if (!req) {
 8011c34:	b901      	cbnz	r1, 8011c38 <send_err_rsp+0x4>
 8011c36:	4770      	bx	lr
{
 8011c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c3c:	4606      	mov	r6, r0
 8011c3e:	4615      	mov	r5, r2
 8011c40:	461c      	mov	r4, r3
 8011c42:	460f      	mov	r7, r1
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
 8011c44:	2204      	movs	r2, #4
 8011c46:	2101      	movs	r1, #1
 8011c48:	f7ff ff7e 	bl	8011b48 <bt_att_chan_create_pdu>
	if (!buf) {
 8011c4c:	4680      	mov	r8, r0
 8011c4e:	b160      	cbz	r0, 8011c6a <send_err_rsp+0x36>
	rsp = net_buf_add(buf, sizeof(*rsp));
 8011c50:	2104      	movs	r1, #4
 8011c52:	3008      	adds	r0, #8
 8011c54:	f00e fc12 	bl	802047c <net_buf_simple_add>
	rsp->request = req;
 8011c58:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
 8011c5a:	f8a0 5001 	strh.w	r5, [r0, #1]
	rsp->error = err;
 8011c5e:	70c4      	strb	r4, [r0, #3]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
 8011c60:	4a03      	ldr	r2, [pc, #12]	; (8011c70 <send_err_rsp+0x3c>)
 8011c62:	4641      	mov	r1, r8
 8011c64:	4630      	mov	r0, r6
 8011c66:	f00c f992 	bl	801df8e <bt_att_chan_send_rsp>
}
 8011c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c6e:	bf00      	nop
 8011c70:	0801dd73 	.word	0x0801dd73

08011c74 <bt_att_recv>:
{
 8011c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
 8011c78:	898b      	ldrh	r3, [r1, #12]
 8011c7a:	b1a3      	cbz	r3, 8011ca6 <bt_att_recv+0x32>
 8011c7c:	4607      	mov	r7, r0
 8011c7e:	460e      	mov	r6, r1
 8011c80:	f1a0 0808 	sub.w	r8, r0, #8
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
 8011c84:	2101      	movs	r1, #1
 8011c86:	f106 0008 	add.w	r0, r6, #8
 8011c8a:	f00e fc28 	bl	80204de <net_buf_simple_pull_mem>
 8011c8e:	4605      	mov	r5, r0
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
 8011c90:	2300      	movs	r3, #0
 8011c92:	2b1b      	cmp	r3, #27
 8011c94:	d831      	bhi.n	8011cfa <bt_att_recv+0x86>
		if (hdr->code == handlers[i].op) {
 8011c96:	782c      	ldrb	r4, [r5, #0]
 8011c98:	4a59      	ldr	r2, [pc, #356]	; (8011e00 <bt_att_recv+0x18c>)
 8011c9a:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8011c9e:	4294      	cmp	r4, r2
 8011ca0:	d013      	beq.n	8011cca <bt_att_recv+0x56>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
 8011ca2:	3301      	adds	r3, #1
 8011ca4:	e7f5      	b.n	8011c92 <bt_att_recv+0x1e>
		BT_ERR("Too small ATT PDU received");
 8011ca6:	f04f 0100 	mov.w	r1, #0
 8011caa:	2301      	movs	r3, #1
 8011cac:	f363 0102 	bfi	r1, r3, #0, #3
 8011cb0:	f36f 01c5 	bfc	r1, #3, #3
 8011cb4:	4b53      	ldr	r3, [pc, #332]	; (8011e04 <bt_att_recv+0x190>)
 8011cb6:	4a54      	ldr	r2, [pc, #336]	; (8011e08 <bt_att_recv+0x194>)
 8011cb8:	1a9b      	subs	r3, r3, r2
 8011cba:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8011cbe:	f363 118f 	bfi	r1, r3, #6, #10
 8011cc2:	4852      	ldr	r0, [pc, #328]	; (8011e0c <bt_att_recv+0x198>)
 8011cc4:	f7f4 fdac 	bl	8006820 <log_0>
		return 0;
 8011cc8:	e014      	b.n	8011cf4 <bt_att_recv+0x80>
			handler = &handlers[i];
 8011cca:	4c4d      	ldr	r4, [pc, #308]	; (8011e00 <bt_att_recv+0x18c>)
 8011ccc:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
	if (!handler) {
 8011cd0:	b1ac      	cbz	r4, 8011cfe <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
 8011cd2:	78a3      	ldrb	r3, [r4, #2]
 8011cd4:	2b01      	cmp	r3, #1
 8011cd6:	d031      	beq.n	8011d3c <bt_att_recv+0xc8>
		} else if (handler->type == ATT_INDICATION &&
 8011cd8:	78a3      	ldrb	r3, [r4, #2]
 8011cda:	2b05      	cmp	r3, #5
 8011cdc:	d051      	beq.n	8011d82 <bt_att_recv+0x10e>
	if (buf->len < handler->expect_len) {
 8011cde:	89b1      	ldrh	r1, [r6, #12]
 8011ce0:	7863      	ldrb	r3, [r4, #1]
 8011ce2:	4299      	cmp	r1, r3
 8011ce4:	d36f      	bcc.n	8011dc6 <bt_att_recv+0x152>
		err = handler->func(att_chan, buf);
 8011ce6:	6863      	ldr	r3, [r4, #4]
 8011ce8:	4631      	mov	r1, r6
 8011cea:	4640      	mov	r0, r8
 8011cec:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
 8011cee:	78a3      	ldrb	r3, [r4, #2]
 8011cf0:	2b01      	cmp	r3, #1
 8011cf2:	d07c      	beq.n	8011dee <bt_att_recv+0x17a>
}
 8011cf4:	2000      	movs	r0, #0
 8011cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
 8011cfa:	2400      	movs	r4, #0
 8011cfc:	e7e8      	b.n	8011cd0 <bt_att_recv+0x5c>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
 8011cfe:	f04f 0200 	mov.w	r2, #0
 8011d02:	2302      	movs	r3, #2
 8011d04:	f363 0202 	bfi	r2, r3, #0, #3
 8011d08:	f36f 02c5 	bfc	r2, #3, #3
 8011d0c:	4b3d      	ldr	r3, [pc, #244]	; (8011e04 <bt_att_recv+0x190>)
 8011d0e:	493e      	ldr	r1, [pc, #248]	; (8011e08 <bt_att_recv+0x194>)
 8011d10:	1a5b      	subs	r3, r3, r1
 8011d12:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8011d16:	f363 128f 	bfi	r2, r3, #6, #10
 8011d1a:	7829      	ldrb	r1, [r5, #0]
 8011d1c:	483c      	ldr	r0, [pc, #240]	; (8011e10 <bt_att_recv+0x19c>)
 8011d1e:	f7f4 fc0f 	bl	8006540 <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
 8011d22:	782c      	ldrb	r4, [r5, #0]
 8011d24:	4620      	mov	r0, r4
 8011d26:	f00b ff40 	bl	801dbaa <att_op_get_type>
 8011d2a:	2800      	cmp	r0, #0
 8011d2c:	d0e2      	beq.n	8011cf4 <bt_att_recv+0x80>
			send_err_rsp(att_chan, hdr->code, 0,
 8011d2e:	2306      	movs	r3, #6
 8011d30:	2200      	movs	r2, #0
 8011d32:	4621      	mov	r1, r4
 8011d34:	4640      	mov	r0, r8
 8011d36:	f7ff ff7d 	bl	8011c34 <send_err_rsp>
		return 0;
 8011d3a:	e7db      	b.n	8011cf4 <bt_att_recv+0x80>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
 8011d3c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8011d40:	f3bf 8f5b 	dmb	ish
 8011d44:	e853 2f00 	ldrex	r2, [r3]
 8011d48:	f042 0101 	orr.w	r1, r2, #1
 8011d4c:	e843 1000 	strex	r0, r1, [r3]
 8011d50:	2800      	cmp	r0, #0
 8011d52:	d1f7      	bne.n	8011d44 <bt_att_recv+0xd0>
 8011d54:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
 8011d58:	f012 0f01 	tst.w	r2, #1
 8011d5c:	d0bc      	beq.n	8011cd8 <bt_att_recv+0x64>
			BT_WARN("Ignoring unexpected request");
 8011d5e:	f04f 0100 	mov.w	r1, #0
 8011d62:	2302      	movs	r3, #2
 8011d64:	f363 0102 	bfi	r1, r3, #0, #3
 8011d68:	f36f 01c5 	bfc	r1, #3, #3
 8011d6c:	4b25      	ldr	r3, [pc, #148]	; (8011e04 <bt_att_recv+0x190>)
 8011d6e:	4a26      	ldr	r2, [pc, #152]	; (8011e08 <bt_att_recv+0x194>)
 8011d70:	1a9b      	subs	r3, r3, r2
 8011d72:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8011d76:	f363 118f 	bfi	r1, r3, #6, #10
 8011d7a:	4826      	ldr	r0, [pc, #152]	; (8011e14 <bt_att_recv+0x1a0>)
 8011d7c:	f7f4 fd50 	bl	8006820 <log_0>
			return 0;
 8011d80:	e7b8      	b.n	8011cf4 <bt_att_recv+0x80>
			   atomic_test_and_set_bit(att_chan->flags,
 8011d82:	37b8      	adds	r7, #184	; 0xb8
 8011d84:	f3bf 8f5b 	dmb	ish
 8011d88:	e857 3f00 	ldrex	r3, [r7]
 8011d8c:	f043 0202 	orr.w	r2, r3, #2
 8011d90:	e847 2100 	strex	r1, r2, [r7]
 8011d94:	2900      	cmp	r1, #0
 8011d96:	d1f7      	bne.n	8011d88 <bt_att_recv+0x114>
 8011d98:	f3bf 8f5b 	dmb	ish
		} else if (handler->type == ATT_INDICATION &&
 8011d9c:	f013 0f02 	tst.w	r3, #2
 8011da0:	d09d      	beq.n	8011cde <bt_att_recv+0x6a>
			BT_WARN("Ignoring unexpected indication");
 8011da2:	f04f 0100 	mov.w	r1, #0
 8011da6:	2302      	movs	r3, #2
 8011da8:	f363 0102 	bfi	r1, r3, #0, #3
 8011dac:	f36f 01c5 	bfc	r1, #3, #3
 8011db0:	4b14      	ldr	r3, [pc, #80]	; (8011e04 <bt_att_recv+0x190>)
 8011db2:	4a15      	ldr	r2, [pc, #84]	; (8011e08 <bt_att_recv+0x194>)
 8011db4:	1a9b      	subs	r3, r3, r2
 8011db6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8011dba:	f363 118f 	bfi	r1, r3, #6, #10
 8011dbe:	4816      	ldr	r0, [pc, #88]	; (8011e18 <bt_att_recv+0x1a4>)
 8011dc0:	f7f4 fd2e 	bl	8006820 <log_0>
			return 0;
 8011dc4:	e796      	b.n	8011cf4 <bt_att_recv+0x80>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
 8011dc6:	f04f 0300 	mov.w	r3, #0
 8011dca:	2201      	movs	r2, #1
 8011dcc:	f362 0302 	bfi	r3, r2, #0, #3
 8011dd0:	f36f 03c5 	bfc	r3, #3, #3
 8011dd4:	4a0b      	ldr	r2, [pc, #44]	; (8011e04 <bt_att_recv+0x190>)
 8011dd6:	480c      	ldr	r0, [pc, #48]	; (8011e08 <bt_att_recv+0x194>)
 8011dd8:	1a12      	subs	r2, r2, r0
 8011dda:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8011dde:	f362 138f 	bfi	r3, r2, #6, #10
 8011de2:	782a      	ldrb	r2, [r5, #0]
 8011de4:	480d      	ldr	r0, [pc, #52]	; (8011e1c <bt_att_recv+0x1a8>)
 8011de6:	f7f4 fc2b 	bl	8006640 <log_2>
		err = BT_ATT_ERR_INVALID_PDU;
 8011dea:	2004      	movs	r0, #4
 8011dec:	e77f      	b.n	8011cee <bt_att_recv+0x7a>
	if (handler->type == ATT_REQUEST && err) {
 8011dee:	2800      	cmp	r0, #0
 8011df0:	d080      	beq.n	8011cf4 <bt_att_recv+0x80>
		send_err_rsp(att_chan, hdr->code, 0, err);
 8011df2:	4603      	mov	r3, r0
 8011df4:	2200      	movs	r2, #0
 8011df6:	7829      	ldrb	r1, [r5, #0]
 8011df8:	4640      	mov	r0, r8
 8011dfa:	f7ff ff1b 	bl	8011c34 <send_err_rsp>
 8011dfe:	e779      	b.n	8011cf4 <bt_att_recv+0x80>
 8011e00:	080274a4 	.word	0x080274a4
 8011e04:	08022b98 	.word	0x08022b98
 8011e08:	08022b90 	.word	0x08022b90
 8011e0c:	080273c8 	.word	0x080273c8
 8011e10:	080273e4 	.word	0x080273e4
 8011e14:	08027400 	.word	0x08027400
 8011e18:	0802741c 	.word	0x0802741c
 8011e1c:	0802743c 	.word	0x0802743c

08011e20 <att_write_rsp>:
{
 8011e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e24:	b08a      	sub	sp, #40	; 0x28
 8011e26:	4604      	mov	r4, r0
 8011e28:	4617      	mov	r7, r2
 8011e2a:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
 8011e2c:	6803      	ldr	r3, [r0, #0]
 8011e2e:	4688      	mov	r8, r1
 8011e30:	3900      	subs	r1, #0
 8011e32:	bf18      	it	ne
 8011e34:	2101      	movne	r1, #1
 8011e36:	6818      	ldr	r0, [r3, #0]
 8011e38:	f00d fa47 	bl	801f2ca <bt_gatt_change_aware>
 8011e3c:	2800      	cmp	r0, #0
 8011e3e:	d04f      	beq.n	8011ee0 <att_write_rsp+0xc0>
	if (!handle) {
 8011e40:	b925      	cbnz	r5, 8011e4c <att_write_rsp+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
 8011e42:	2601      	movs	r6, #1
}
 8011e44:	4630      	mov	r0, r6
 8011e46:	b00a      	add	sp, #40	; 0x28
 8011e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(&data, 0, sizeof(data));
 8011e4c:	2218      	movs	r2, #24
 8011e4e:	2100      	movs	r1, #0
 8011e50:	a804      	add	r0, sp, #16
 8011e52:	f00a fd51 	bl	801c8f8 <memset>
	if (rsp) {
 8011e56:	b13f      	cbz	r7, 8011e68 <att_write_rsp+0x48>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
 8011e58:	2200      	movs	r2, #0
 8011e5a:	4639      	mov	r1, r7
 8011e5c:	4620      	mov	r0, r4
 8011e5e:	f7ff fe73 	bl	8011b48 <bt_att_chan_create_pdu>
 8011e62:	9005      	str	r0, [sp, #20]
		if (!data.buf) {
 8011e64:	2800      	cmp	r0, #0
 8011e66:	d03d      	beq.n	8011ee4 <att_write_rsp+0xc4>
	data.conn = chan->att->conn;
 8011e68:	6823      	ldr	r3, [r4, #0]
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	9304      	str	r3, [sp, #16]
	data.req = req;
 8011e6e:	f88d 8018 	strb.w	r8, [sp, #24]
	data.offset = offset;
 8011e72:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8011e76:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	data.value = value;
 8011e7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011e7c:	9307      	str	r3, [sp, #28]
	data.len = len;
 8011e7e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8011e82:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
 8011e86:	2301      	movs	r3, #1
 8011e88:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
 8011e8c:	ab04      	add	r3, sp, #16
 8011e8e:	9302      	str	r3, [sp, #8]
 8011e90:	4b15      	ldr	r3, [pc, #84]	; (8011ee8 <att_write_rsp+0xc8>)
 8011e92:	9301      	str	r3, [sp, #4]
 8011e94:	2200      	movs	r2, #0
 8011e96:	9200      	str	r2, [sp, #0]
 8011e98:	4613      	mov	r3, r2
 8011e9a:	4629      	mov	r1, r5
 8011e9c:	4628      	mov	r0, r5
 8011e9e:	f001 fe4b 	bl	8013b38 <bt_gatt_foreach_attr_type>
	if (data.err) {
 8011ea2:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
 8011ea6:	b93e      	cbnz	r6, 8011eb8 <att_write_rsp+0x98>
	if (data.buf) {
 8011ea8:	9905      	ldr	r1, [sp, #20]
 8011eaa:	2900      	cmp	r1, #0
 8011eac:	d0ca      	beq.n	8011e44 <att_write_rsp+0x24>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
 8011eae:	4a0f      	ldr	r2, [pc, #60]	; (8011eec <att_write_rsp+0xcc>)
 8011eb0:	4620      	mov	r0, r4
 8011eb2:	f00c f86c 	bl	801df8e <bt_att_chan_send_rsp>
 8011eb6:	e7c5      	b.n	8011e44 <att_write_rsp+0x24>
		if (rsp) {
 8011eb8:	b927      	cbnz	r7, 8011ec4 <att_write_rsp+0xa4>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
 8011eba:	f1b8 0f18 	cmp.w	r8, #24
 8011ebe:	d00c      	beq.n	8011eda <att_write_rsp+0xba>
 8011ec0:	2600      	movs	r6, #0
 8011ec2:	e7bf      	b.n	8011e44 <att_write_rsp+0x24>
			net_buf_unref(data.buf);
 8011ec4:	9805      	ldr	r0, [sp, #20]
 8011ec6:	f00e fa8f 	bl	80203e8 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
 8011eca:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8011ece:	462a      	mov	r2, r5
 8011ed0:	4641      	mov	r1, r8
 8011ed2:	4620      	mov	r0, r4
 8011ed4:	f7ff feae 	bl	8011c34 <send_err_rsp>
 8011ed8:	e7ef      	b.n	8011eba <att_write_rsp+0x9a>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
 8011eda:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
 8011ede:	e7b1      	b.n	8011e44 <att_write_rsp+0x24>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
 8011ee0:	2612      	movs	r6, #18
 8011ee2:	e7af      	b.n	8011e44 <att_write_rsp+0x24>
			return BT_ATT_ERR_UNLIKELY;
 8011ee4:	260e      	movs	r6, #14
 8011ee6:	e7ad      	b.n	8011e44 <att_write_rsp+0x24>
 8011ee8:	0801dfed 	.word	0x0801dfed
 8011eec:	0801dd73 	.word	0x0801dd73

08011ef0 <bt_att_create_pdu>:
{
 8011ef0:	b570      	push	{r4, r5, r6, lr}
 8011ef2:	460e      	mov	r6, r1
 8011ef4:	4615      	mov	r5, r2
	att = att_get(conn);
 8011ef6:	f7ff fae9 	bl	80114cc <att_get>
	if (!att) {
 8011efa:	4604      	mov	r4, r0
 8011efc:	b360      	cbz	r0, 8011f58 <bt_att_create_pdu+0x68>
	return list->head;
 8011efe:	6a44      	ldr	r4, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
 8011f00:	b15c      	cbz	r4, 8011f1a <bt_att_create_pdu+0x2a>
 8011f02:	f5b4 7496 	subs.w	r4, r4, #300	; 0x12c
 8011f06:	d00a      	beq.n	8011f1e <bt_att_create_pdu+0x2e>
Z_GENLIST_PEEK_NEXT(slist, snode)
 8011f08:	f514 7096 	adds.w	r0, r4, #300	; 0x12c
 8011f0c:	d00c      	beq.n	8011f28 <bt_att_create_pdu+0x38>
	return node->next;
 8011f0e:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 8011f12:	b148      	cbz	r0, 8011f28 <bt_att_create_pdu+0x38>
 8011f14:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8011f18:	e006      	b.n	8011f28 <bt_att_create_pdu+0x38>
 8011f1a:	4620      	mov	r0, r4
 8011f1c:	e004      	b.n	8011f28 <bt_att_create_pdu+0x38>
 8011f1e:	4620      	mov	r0, r4
 8011f20:	e002      	b.n	8011f28 <bt_att_create_pdu+0x38>
 8011f22:	4603      	mov	r3, r0
 8011f24:	4604      	mov	r4, r0
 8011f26:	4618      	mov	r0, r3
 8011f28:	b1c4      	cbz	r4, 8011f5c <bt_att_create_pdu+0x6c>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
 8011f2a:	1c6b      	adds	r3, r5, #1
 8011f2c:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 8011f30:	4293      	cmp	r3, r2
 8011f32:	d90b      	bls.n	8011f4c <bt_att_create_pdu+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
 8011f34:	2800      	cmp	r0, #0
 8011f36:	d0f4      	beq.n	8011f22 <bt_att_create_pdu+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
 8011f38:	f510 7396 	adds.w	r3, r0, #300	; 0x12c
 8011f3c:	d0f2      	beq.n	8011f24 <bt_att_create_pdu+0x34>
	return node->next;
 8011f3e:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d0ee      	beq.n	8011f24 <bt_att_create_pdu+0x34>
 8011f46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011f4a:	e7eb      	b.n	8011f24 <bt_att_create_pdu+0x34>
		return bt_att_chan_create_pdu(chan, op, len);
 8011f4c:	462a      	mov	r2, r5
 8011f4e:	4631      	mov	r1, r6
 8011f50:	4620      	mov	r0, r4
 8011f52:	f7ff fdf9 	bl	8011b48 <bt_att_chan_create_pdu>
 8011f56:	4604      	mov	r4, r0
}
 8011f58:	4620      	mov	r0, r4
 8011f5a:	bd70      	pop	{r4, r5, r6, pc}
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
 8011f5c:	f04f 0200 	mov.w	r2, #0
 8011f60:	2302      	movs	r3, #2
 8011f62:	f363 0202 	bfi	r2, r3, #0, #3
 8011f66:	f36f 02c5 	bfc	r2, #3, #3
 8011f6a:	4b06      	ldr	r3, [pc, #24]	; (8011f84 <bt_att_create_pdu+0x94>)
 8011f6c:	4906      	ldr	r1, [pc, #24]	; (8011f88 <bt_att_create_pdu+0x98>)
 8011f6e:	1a5b      	subs	r3, r3, r1
 8011f70:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8011f74:	f363 128f 	bfi	r2, r3, #6, #10
 8011f78:	1c69      	adds	r1, r5, #1
 8011f7a:	4804      	ldr	r0, [pc, #16]	; (8011f8c <bt_att_create_pdu+0x9c>)
 8011f7c:	f7f4 fae0 	bl	8006540 <log_1>
	return NULL;
 8011f80:	e7ea      	b.n	8011f58 <bt_att_create_pdu+0x68>
 8011f82:	bf00      	nop
 8011f84:	08022b98 	.word	0x08022b98
 8011f88:	08022b90 	.word	0x08022b90
 8011f8c:	0802745c 	.word	0x0802745c

08011f90 <att_read_group_rsp>:
{
 8011f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f94:	b08a      	sub	sp, #40	; 0x28
 8011f96:	4604      	mov	r4, r0
 8011f98:	460f      	mov	r7, r1
 8011f9a:	4615      	mov	r5, r2
 8011f9c:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
 8011f9e:	f8d0 8008 	ldr.w	r8, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
 8011fa2:	2214      	movs	r2, #20
 8011fa4:	2100      	movs	r1, #0
 8011fa6:	eb0d 0002 	add.w	r0, sp, r2
 8011faa:	f00a fca5 	bl	801c8f8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
 8011fae:	2201      	movs	r2, #1
 8011fb0:	2111      	movs	r1, #17
 8011fb2:	4640      	mov	r0, r8
 8011fb4:	f7ff ff9c 	bl	8011ef0 <bt_att_create_pdu>
 8011fb8:	9007      	str	r0, [sp, #28]
	if (!data.buf) {
 8011fba:	b350      	cbz	r0, 8012012 <att_read_group_rsp+0x82>
	data.chan = chan;
 8011fbc:	9405      	str	r4, [sp, #20]
	data.uuid = uuid;
 8011fbe:	9706      	str	r7, [sp, #24]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
 8011fc0:	2101      	movs	r1, #1
 8011fc2:	3008      	adds	r0, #8
 8011fc4:	f00e fa5a 	bl	802047c <net_buf_simple_add>
 8011fc8:	9008      	str	r0, [sp, #32]
	data.rsp->len = 0U;
 8011fca:	2200      	movs	r2, #0
 8011fcc:	7002      	strb	r2, [r0, #0]
	data.group = NULL;
 8011fce:	9209      	str	r2, [sp, #36]	; 0x24
 8011fd0:	ab05      	add	r3, sp, #20
 8011fd2:	9302      	str	r3, [sp, #8]
 8011fd4:	4b10      	ldr	r3, [pc, #64]	; (8012018 <att_read_group_rsp+0x88>)
 8011fd6:	9301      	str	r3, [sp, #4]
 8011fd8:	9200      	str	r2, [sp, #0]
 8011fda:	4613      	mov	r3, r2
 8011fdc:	4631      	mov	r1, r6
 8011fde:	4628      	mov	r0, r5
 8011fe0:	f001 fdaa 	bl	8013b38 <bt_gatt_foreach_attr_type>
	if (!data.rsp->len) {
 8011fe4:	9b08      	ldr	r3, [sp, #32]
 8011fe6:	781e      	ldrb	r6, [r3, #0]
 8011fe8:	b14e      	cbz	r6, 8011ffe <att_read_group_rsp+0x6e>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
 8011fea:	4a0c      	ldr	r2, [pc, #48]	; (801201c <att_read_group_rsp+0x8c>)
 8011fec:	9907      	ldr	r1, [sp, #28]
 8011fee:	4620      	mov	r0, r4
 8011ff0:	f00b ffcd 	bl	801df8e <bt_att_chan_send_rsp>
	return 0;
 8011ff4:	2600      	movs	r6, #0
}
 8011ff6:	4630      	mov	r0, r6
 8011ff8:	b00a      	add	sp, #40	; 0x28
 8011ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
 8011ffe:	9807      	ldr	r0, [sp, #28]
 8012000:	f00e f9f2 	bl	80203e8 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
 8012004:	230a      	movs	r3, #10
 8012006:	462a      	mov	r2, r5
 8012008:	2110      	movs	r1, #16
 801200a:	4620      	mov	r0, r4
 801200c:	f7ff fe12 	bl	8011c34 <send_err_rsp>
		return 0;
 8012010:	e7f1      	b.n	8011ff6 <att_read_group_rsp+0x66>
		return BT_ATT_ERR_UNLIKELY;
 8012012:	260e      	movs	r6, #14
 8012014:	e7ef      	b.n	8011ff6 <att_read_group_rsp+0x66>
 8012016:	bf00      	nop
 8012018:	080117f5 	.word	0x080117f5
 801201c:	0801dd73 	.word	0x0801dd73

08012020 <att_read_mult_req>:
{
 8012020:	b570      	push	{r4, r5, r6, lr}
 8012022:	b08a      	sub	sp, #40	; 0x28
 8012024:	4606      	mov	r6, r0
 8012026:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
 8012028:	6884      	ldr	r4, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
 801202a:	2214      	movs	r2, #20
 801202c:	2100      	movs	r1, #0
 801202e:	eb0d 0002 	add.w	r0, sp, r2
 8012032:	f00a fc61 	bl	801c8f8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
 8012036:	2200      	movs	r2, #0
 8012038:	210f      	movs	r1, #15
 801203a:	4620      	mov	r0, r4
 801203c:	f7ff ff58 	bl	8011ef0 <bt_att_create_pdu>
 8012040:	9007      	str	r0, [sp, #28]
	if (!data.buf) {
 8012042:	b368      	cbz	r0, 80120a0 <att_read_mult_req+0x80>
	data.chan = chan;
 8012044:	9605      	str	r6, [sp, #20]
	while (buf->len >= sizeof(uint16_t)) {
 8012046:	89ab      	ldrh	r3, [r5, #12]
 8012048:	2b01      	cmp	r3, #1
 801204a:	d921      	bls.n	8012090 <att_read_mult_req+0x70>
		handle = net_buf_pull_le16(buf);
 801204c:	f105 0008 	add.w	r0, r5, #8
 8012050:	f00e fa55 	bl	80204fe <net_buf_simple_pull_le16>
 8012054:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
 8012056:	2301      	movs	r3, #1
 8012058:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801205c:	ab05      	add	r3, sp, #20
 801205e:	9302      	str	r3, [sp, #8]
 8012060:	4b10      	ldr	r3, [pc, #64]	; (80120a4 <att_read_mult_req+0x84>)
 8012062:	9301      	str	r3, [sp, #4]
 8012064:	2200      	movs	r2, #0
 8012066:	9200      	str	r2, [sp, #0]
 8012068:	4613      	mov	r3, r2
 801206a:	4601      	mov	r1, r0
 801206c:	f001 fd64 	bl	8013b38 <bt_gatt_foreach_attr_type>
		if (data.err) {
 8012070:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8012074:	2b00      	cmp	r3, #0
 8012076:	d0e6      	beq.n	8012046 <att_read_mult_req+0x26>
			net_buf_unref(data.buf);
 8012078:	9807      	ldr	r0, [sp, #28]
 801207a:	f00e f9b5 	bl	80203e8 <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_REQ, handle,
 801207e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8012082:	4622      	mov	r2, r4
 8012084:	210e      	movs	r1, #14
 8012086:	4630      	mov	r0, r6
 8012088:	f7ff fdd4 	bl	8011c34 <send_err_rsp>
			return 0;
 801208c:	2000      	movs	r0, #0
 801208e:	e005      	b.n	801209c <att_read_mult_req+0x7c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
 8012090:	4a05      	ldr	r2, [pc, #20]	; (80120a8 <att_read_mult_req+0x88>)
 8012092:	9907      	ldr	r1, [sp, #28]
 8012094:	4630      	mov	r0, r6
 8012096:	f00b ff7a 	bl	801df8e <bt_att_chan_send_rsp>
	return 0;
 801209a:	2000      	movs	r0, #0
}
 801209c:	b00a      	add	sp, #40	; 0x28
 801209e:	bd70      	pop	{r4, r5, r6, pc}
		return BT_ATT_ERR_UNLIKELY;
 80120a0:	200e      	movs	r0, #14
 80120a2:	e7fb      	b.n	801209c <att_read_mult_req+0x7c>
 80120a4:	0801e199 	.word	0x0801e199
 80120a8:	0801dd73 	.word	0x0801dd73

080120ac <att_read_rsp>:
{
 80120ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120b0:	b08a      	sub	sp, #40	; 0x28
 80120b2:	4604      	mov	r4, r0
 80120b4:	4688      	mov	r8, r1
 80120b6:	4616      	mov	r6, r2
 80120b8:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
 80120ba:	6887      	ldr	r7, [r0, #8]
	if (!bt_gatt_change_aware(conn, true)) {
 80120bc:	2101      	movs	r1, #1
 80120be:	4638      	mov	r0, r7
 80120c0:	f00d f903 	bl	801f2ca <bt_gatt_change_aware>
 80120c4:	2800      	cmp	r0, #0
 80120c6:	d03a      	beq.n	801213e <att_read_rsp+0x92>
	if (!handle) {
 80120c8:	b925      	cbnz	r5, 80120d4 <att_read_rsp+0x28>
		return BT_ATT_ERR_INVALID_HANDLE;
 80120ca:	2601      	movs	r6, #1
}
 80120cc:	4630      	mov	r0, r6
 80120ce:	b00a      	add	sp, #40	; 0x28
 80120d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(&data, 0, sizeof(data));
 80120d4:	2214      	movs	r2, #20
 80120d6:	2100      	movs	r1, #0
 80120d8:	eb0d 0002 	add.w	r0, sp, r2
 80120dc:	f00a fc0c 	bl	801c8f8 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
 80120e0:	2200      	movs	r2, #0
 80120e2:	4631      	mov	r1, r6
 80120e4:	4638      	mov	r0, r7
 80120e6:	f7ff ff03 	bl	8011ef0 <bt_att_create_pdu>
 80120ea:	9007      	str	r0, [sp, #28]
	if (!data.buf) {
 80120ec:	b348      	cbz	r0, 8012142 <att_read_rsp+0x96>
	data.chan = chan;
 80120ee:	9405      	str	r4, [sp, #20]
	data.offset = offset;
 80120f0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80120f4:	f8ad 3018 	strh.w	r3, [sp, #24]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
 80120f8:	2301      	movs	r3, #1
 80120fa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80120fe:	ab05      	add	r3, sp, #20
 8012100:	9302      	str	r3, [sp, #8]
 8012102:	4b11      	ldr	r3, [pc, #68]	; (8012148 <att_read_rsp+0x9c>)
 8012104:	9301      	str	r3, [sp, #4]
 8012106:	2200      	movs	r2, #0
 8012108:	9200      	str	r2, [sp, #0]
 801210a:	4613      	mov	r3, r2
 801210c:	4629      	mov	r1, r5
 801210e:	4628      	mov	r0, r5
 8012110:	f001 fd12 	bl	8013b38 <bt_gatt_foreach_attr_type>
	if (data.err) {
 8012114:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
 8012118:	b92e      	cbnz	r6, 8012126 <att_read_rsp+0x7a>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
 801211a:	4a0c      	ldr	r2, [pc, #48]	; (801214c <att_read_rsp+0xa0>)
 801211c:	9907      	ldr	r1, [sp, #28]
 801211e:	4620      	mov	r0, r4
 8012120:	f00b ff35 	bl	801df8e <bt_att_chan_send_rsp>
	return 0;
 8012124:	e7d2      	b.n	80120cc <att_read_rsp+0x20>
		net_buf_unref(data.buf);
 8012126:	9807      	ldr	r0, [sp, #28]
 8012128:	f00e f95e 	bl	80203e8 <net_buf_unref>
		send_err_rsp(chan, op, handle, data.err);
 801212c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8012130:	462a      	mov	r2, r5
 8012132:	4641      	mov	r1, r8
 8012134:	4620      	mov	r0, r4
 8012136:	f7ff fd7d 	bl	8011c34 <send_err_rsp>
		return 0;
 801213a:	2600      	movs	r6, #0
 801213c:	e7c6      	b.n	80120cc <att_read_rsp+0x20>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
 801213e:	2612      	movs	r6, #18
 8012140:	e7c4      	b.n	80120cc <att_read_rsp+0x20>
		return BT_ATT_ERR_UNLIKELY;
 8012142:	260e      	movs	r6, #14
 8012144:	e7c2      	b.n	80120cc <att_read_rsp+0x20>
 8012146:	bf00      	nop
 8012148:	0801e199 	.word	0x0801e199
 801214c:	0801dd73 	.word	0x0801dd73

08012150 <att_read_type_rsp>:
{
 8012150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012154:	b08a      	sub	sp, #40	; 0x28
 8012156:	4604      	mov	r4, r0
 8012158:	460f      	mov	r7, r1
 801215a:	4615      	mov	r5, r2
 801215c:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
 801215e:	f8d0 8008 	ldr.w	r8, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
 8012162:	2218      	movs	r2, #24
 8012164:	2100      	movs	r1, #0
 8012166:	a804      	add	r0, sp, #16
 8012168:	f00a fbc6 	bl	801c8f8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
 801216c:	2201      	movs	r2, #1
 801216e:	2109      	movs	r1, #9
 8012170:	4640      	mov	r0, r8
 8012172:	f7ff febd 	bl	8011ef0 <bt_att_create_pdu>
 8012176:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
 8012178:	b368      	cbz	r0, 80121d6 <att_read_type_rsp+0x86>
	data.chan = chan;
 801217a:	9404      	str	r4, [sp, #16]
	data.uuid = uuid;
 801217c:	9705      	str	r7, [sp, #20]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
 801217e:	2101      	movs	r1, #1
 8012180:	3008      	adds	r0, #8
 8012182:	f00e f97b 	bl	802047c <net_buf_simple_add>
 8012186:	9007      	str	r0, [sp, #28]
	data.rsp->len = 0U;
 8012188:	2200      	movs	r2, #0
 801218a:	7002      	strb	r2, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
 801218c:	230a      	movs	r3, #10
 801218e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8012192:	ab04      	add	r3, sp, #16
 8012194:	9302      	str	r3, [sp, #8]
 8012196:	4b11      	ldr	r3, [pc, #68]	; (80121dc <att_read_type_rsp+0x8c>)
 8012198:	9301      	str	r3, [sp, #4]
 801219a:	9200      	str	r2, [sp, #0]
 801219c:	4613      	mov	r3, r2
 801219e:	4631      	mov	r1, r6
 80121a0:	4628      	mov	r0, r5
 80121a2:	f001 fcc9 	bl	8013b38 <bt_gatt_foreach_attr_type>
	if (data.err) {
 80121a6:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
 80121aa:	b946      	cbnz	r6, 80121be <att_read_type_rsp+0x6e>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
 80121ac:	4a0c      	ldr	r2, [pc, #48]	; (80121e0 <att_read_type_rsp+0x90>)
 80121ae:	9906      	ldr	r1, [sp, #24]
 80121b0:	4620      	mov	r0, r4
 80121b2:	f00b feec 	bl	801df8e <bt_att_chan_send_rsp>
}
 80121b6:	4630      	mov	r0, r6
 80121b8:	b00a      	add	sp, #40	; 0x28
 80121ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
 80121be:	9806      	ldr	r0, [sp, #24]
 80121c0:	f00e f912 	bl	80203e8 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, start_handle,
 80121c4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80121c8:	462a      	mov	r2, r5
 80121ca:	2108      	movs	r1, #8
 80121cc:	4620      	mov	r0, r4
 80121ce:	f7ff fd31 	bl	8011c34 <send_err_rsp>
		return 0;
 80121d2:	2600      	movs	r6, #0
 80121d4:	e7ef      	b.n	80121b6 <att_read_type_rsp+0x66>
		return BT_ATT_ERR_UNLIKELY;
 80121d6:	260e      	movs	r6, #14
 80121d8:	e7ed      	b.n	80121b6 <att_read_type_rsp+0x66>
 80121da:	bf00      	nop
 80121dc:	080118a9 	.word	0x080118a9
 80121e0:	0801dd73 	.word	0x0801dd73

080121e4 <att_find_type_rsp>:
{
 80121e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121e8:	b08a      	sub	sp, #40	; 0x28
 80121ea:	4604      	mov	r4, r0
 80121ec:	460d      	mov	r5, r1
 80121ee:	4616      	mov	r6, r2
 80121f0:	461f      	mov	r7, r3
	struct bt_conn *conn = chan->chan.chan.conn;
 80121f2:	f8d0 8008 	ldr.w	r8, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
 80121f6:	2214      	movs	r2, #20
 80121f8:	2100      	movs	r1, #0
 80121fa:	eb0d 0002 	add.w	r0, sp, r2
 80121fe:	f00a fb7b 	bl	801c8f8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
 8012202:	2200      	movs	r2, #0
 8012204:	2107      	movs	r1, #7
 8012206:	4640      	mov	r0, r8
 8012208:	f7ff fe72 	bl	8011ef0 <bt_att_create_pdu>
 801220c:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
 801220e:	b360      	cbz	r0, 801226a <att_find_type_rsp+0x86>
	data.chan = chan;
 8012210:	9405      	str	r4, [sp, #20]
	data.group = NULL;
 8012212:	2200      	movs	r2, #0
 8012214:	9207      	str	r2, [sp, #28]
	data.value = value;
 8012216:	9708      	str	r7, [sp, #32]
	data.value_len = value_len;
 8012218:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801221c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
 8012220:	230a      	movs	r3, #10
 8012222:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8012226:	ab05      	add	r3, sp, #20
 8012228:	9302      	str	r3, [sp, #8]
 801222a:	4b11      	ldr	r3, [pc, #68]	; (8012270 <att_find_type_rsp+0x8c>)
 801222c:	9301      	str	r3, [sp, #4]
 801222e:	9200      	str	r2, [sp, #0]
 8012230:	4613      	mov	r3, r2
 8012232:	4631      	mov	r1, r6
 8012234:	4628      	mov	r0, r5
 8012236:	f001 fc7f 	bl	8013b38 <bt_gatt_foreach_attr_type>
	if (data.err) {
 801223a:	f89d 6025 	ldrb.w	r6, [sp, #37]	; 0x25
 801223e:	b946      	cbnz	r6, 8012252 <att_find_type_rsp+0x6e>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
 8012240:	4a0c      	ldr	r2, [pc, #48]	; (8012274 <att_find_type_rsp+0x90>)
 8012242:	9906      	ldr	r1, [sp, #24]
 8012244:	4620      	mov	r0, r4
 8012246:	f00b fea2 	bl	801df8e <bt_att_chan_send_rsp>
}
 801224a:	4630      	mov	r0, r6
 801224c:	b00a      	add	sp, #40	; 0x28
 801224e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
 8012252:	9806      	ldr	r0, [sp, #24]
 8012254:	f00e f8c8 	bl	80203e8 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
 8012258:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 801225c:	462a      	mov	r2, r5
 801225e:	2106      	movs	r1, #6
 8012260:	4620      	mov	r0, r4
 8012262:	f7ff fce7 	bl	8011c34 <send_err_rsp>
		return 0;
 8012266:	2600      	movs	r6, #0
 8012268:	e7ef      	b.n	801224a <att_find_type_rsp+0x66>
		return BT_ATT_ERR_UNLIKELY;
 801226a:	260e      	movs	r6, #14
 801226c:	e7ed      	b.n	801224a <att_find_type_rsp+0x66>
 801226e:	bf00      	nop
 8012270:	08011955 	.word	0x08011955
 8012274:	0801dd73 	.word	0x0801dd73

08012278 <att_find_info_rsp>:
{
 8012278:	b5f0      	push	{r4, r5, r6, r7, lr}
 801227a:	b089      	sub	sp, #36	; 0x24
 801227c:	4604      	mov	r4, r0
 801227e:	460f      	mov	r7, r1
 8012280:	4616      	mov	r6, r2
	struct bt_conn *conn = chan->chan.chan.conn;
 8012282:	6885      	ldr	r5, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
 8012284:	2210      	movs	r2, #16
 8012286:	2100      	movs	r1, #0
 8012288:	eb0d 0002 	add.w	r0, sp, r2
 801228c:	f00a fb34 	bl	801c8f8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
 8012290:	2200      	movs	r2, #0
 8012292:	2105      	movs	r1, #5
 8012294:	4628      	mov	r0, r5
 8012296:	f7ff fe2b 	bl	8011ef0 <bt_att_create_pdu>
 801229a:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
 801229c:	b300      	cbz	r0, 80122e0 <att_find_info_rsp+0x68>
	data.chan = chan;
 801229e:	9404      	str	r4, [sp, #16]
 80122a0:	ab04      	add	r3, sp, #16
 80122a2:	9302      	str	r3, [sp, #8]
 80122a4:	4b0f      	ldr	r3, [pc, #60]	; (80122e4 <att_find_info_rsp+0x6c>)
 80122a6:	9301      	str	r3, [sp, #4]
 80122a8:	2200      	movs	r2, #0
 80122aa:	9200      	str	r2, [sp, #0]
 80122ac:	4613      	mov	r3, r2
 80122ae:	4631      	mov	r1, r6
 80122b0:	4638      	mov	r0, r7
 80122b2:	f001 fc41 	bl	8013b38 <bt_gatt_foreach_attr_type>
	if (!data.rsp) {
 80122b6:	9b06      	ldr	r3, [sp, #24]
 80122b8:	b13b      	cbz	r3, 80122ca <att_find_info_rsp+0x52>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
 80122ba:	4a0b      	ldr	r2, [pc, #44]	; (80122e8 <att_find_info_rsp+0x70>)
 80122bc:	9905      	ldr	r1, [sp, #20]
 80122be:	4620      	mov	r0, r4
 80122c0:	f00b fe65 	bl	801df8e <bt_att_chan_send_rsp>
	return 0;
 80122c4:	2000      	movs	r0, #0
}
 80122c6:	b009      	add	sp, #36	; 0x24
 80122c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(data.buf);
 80122ca:	9805      	ldr	r0, [sp, #20]
 80122cc:	f00e f88c 	bl	80203e8 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, start_handle,
 80122d0:	230a      	movs	r3, #10
 80122d2:	463a      	mov	r2, r7
 80122d4:	2104      	movs	r1, #4
 80122d6:	4620      	mov	r0, r4
 80122d8:	f7ff fcac 	bl	8011c34 <send_err_rsp>
		return 0;
 80122dc:	2000      	movs	r0, #0
 80122de:	e7f2      	b.n	80122c6 <att_find_info_rsp+0x4e>
		return BT_ATT_ERR_UNLIKELY;
 80122e0:	200e      	movs	r0, #14
 80122e2:	e7f0      	b.n	80122c6 <att_find_info_rsp+0x4e>
 80122e4:	0801e1ef 	.word	0x0801e1ef
 80122e8:	0801dd73 	.word	0x0801dd73

080122ec <att_mtu_req>:
{
 80122ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122ee:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
 80122f0:	6803      	ldr	r3, [r0, #0]
 80122f2:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80122f4:	f3bf 8f5b 	dmb	ish
 80122f8:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 80122fc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
 8012300:	f013 0f08 	tst.w	r3, #8
 8012304:	d11f      	bne.n	8012346 <att_mtu_req+0x5a>
	req = (void *)buf->data;
 8012306:	688b      	ldr	r3, [r1, #8]
	mtu_client = sys_le16_to_cpu(req->mtu);
 8012308:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
 801230a:	2e16      	cmp	r6, #22
 801230c:	d91d      	bls.n	801234a <att_mtu_req+0x5e>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
 801230e:	2202      	movs	r2, #2
 8012310:	2103      	movs	r1, #3
 8012312:	f7ff fded 	bl	8011ef0 <bt_att_create_pdu>
	if (!pdu) {
 8012316:	4607      	mov	r7, r0
 8012318:	b1c8      	cbz	r0, 801234e <att_mtu_req+0x62>
	rsp = net_buf_add(pdu, sizeof(*rsp));
 801231a:	2102      	movs	r1, #2
 801231c:	3008      	adds	r0, #8
 801231e:	f00e f8ad 	bl	802047c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
 8012322:	2500      	movs	r5, #0
 8012324:	2341      	movs	r3, #65	; 0x41
 8012326:	7003      	strb	r3, [r0, #0]
 8012328:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
 801232a:	4a0a      	ldr	r2, [pc, #40]	; (8012354 <att_mtu_req+0x68>)
 801232c:	4639      	mov	r1, r7
 801232e:	4620      	mov	r0, r4
 8012330:	f00b fe2d 	bl	801df8e <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
 8012334:	2e41      	cmp	r6, #65	; 0x41
 8012336:	bf28      	it	cs
 8012338:	2641      	movcs	r6, #65	; 0x41
 801233a:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
 801233e:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
	return 0;
 8012342:	4628      	mov	r0, r5
}
 8012344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
 8012346:	2006      	movs	r0, #6
 8012348:	e7fc      	b.n	8012344 <att_mtu_req+0x58>
		return BT_ATT_ERR_INVALID_PDU;
 801234a:	2004      	movs	r0, #4
 801234c:	e7fa      	b.n	8012344 <att_mtu_req+0x58>
		return BT_ATT_ERR_UNLIKELY;
 801234e:	200e      	movs	r0, #14
 8012350:	e7f8      	b.n	8012344 <att_mtu_req+0x58>
 8012352:	bf00      	nop
 8012354:	0801dd73 	.word	0x0801dd73

08012358 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
 8012358:	b500      	push	{lr}
 801235a:	b083      	sub	sp, #12
 801235c:	4602      	mov	r2, r0
 801235e:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;
 8012360:	2100      	movs	r1, #0
 8012362:	9101      	str	r1, [sp, #4]

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
 8012364:	a901      	add	r1, sp, #4
 8012366:	4807      	ldr	r0, [pc, #28]	; (8012384 <bt_att_req_alloc+0x2c>)
 8012368:	f005 fe88 	bl	801807c <k_mem_slab_alloc>
 801236c:	b940      	cbnz	r0, 8012380 <bt_att_req_alloc+0x28>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
 801236e:	221c      	movs	r2, #28
 8012370:	2100      	movs	r1, #0
 8012372:	9801      	ldr	r0, [sp, #4]
 8012374:	f00a fac0 	bl	801c8f8 <memset>

	return req;
 8012378:	9801      	ldr	r0, [sp, #4]
}
 801237a:	b003      	add	sp, #12
 801237c:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
 8012380:	2000      	movs	r0, #0
 8012382:	e7fa      	b.n	801237a <bt_att_req_alloc+0x22>
 8012384:	20000f58 	.word	0x20000f58

08012388 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
 8012388:	b500      	push	{lr}
 801238a:	b083      	sub	sp, #12
 801238c:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
 801238e:	a901      	add	r1, sp, #4
 8012390:	4802      	ldr	r0, [pc, #8]	; (801239c <bt_att_req_free+0x14>)
 8012392:	f005 fea9 	bl	80180e8 <k_mem_slab_free>
}
 8012396:	b003      	add	sp, #12
 8012398:	f85d fb04 	ldr.w	pc, [sp], #4
 801239c:	20000f58 	.word	0x20000f58

080123a0 <att_handle_rsp>:
{
 80123a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123a4:	b082      	sub	sp, #8
 80123a6:	4604      	mov	r4, r0
 80123a8:	460e      	mov	r6, r1
 80123aa:	4617      	mov	r7, r2
 80123ac:	461d      	mov	r5, r3
	k_delayed_work_cancel(&chan->timeout_work);
 80123ae:	30e0      	adds	r0, #224	; 0xe0
 80123b0:	f00f ffe6 	bl	8022380 <k_delayed_work_cancel>
	if (!chan->req) {
 80123b4:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 80123b8:	b363      	cbz	r3, 8012414 <att_handle_rsp+0x74>
	if (chan->req == &cancel) {
 80123ba:	4a23      	ldr	r2, [pc, #140]	; (8012448 <att_handle_rsp+0xa8>)
 80123bc:	4293      	cmp	r3, r2
 80123be:	d03d      	beq.n	801243c <att_handle_rsp+0x9c>
	if (chan->req->buf) {
 80123c0:	6918      	ldr	r0, [r3, #16]
 80123c2:	b128      	cbz	r0, 80123d0 <att_handle_rsp+0x30>
		net_buf_unref(chan->req->buf);
 80123c4:	f00e f810 	bl	80203e8 <net_buf_unref>
		chan->req->buf = NULL;
 80123c8:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 80123cc:	2200      	movs	r2, #0
 80123ce:	611a      	str	r2, [r3, #16]
	func = chan->req->func;
 80123d0:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 80123d4:	f8d3 8004 	ldr.w	r8, [r3, #4]
	chan->req->func = NULL;
 80123d8:	f04f 0900 	mov.w	r9, #0
 80123dc:	f8c3 9004 	str.w	r9, [r3, #4]
	params = chan->req->user_data;
 80123e0:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 80123e4:	f8d0 a018 	ldr.w	sl, [r0, #24]
	att_req_destroy(chan->req);
 80123e8:	f00c f892 	bl	801e510 <att_req_destroy>
	chan->req = NULL;
 80123ec:	f8c4 90c4 	str.w	r9, [r4, #196]	; 0xc4
	att_process(chan->att);
 80123f0:	6820      	ldr	r0, [r4, #0]
 80123f2:	f00b fd11 	bl	801de18 <att_process>
	if (func) {
 80123f6:	f1b8 0f00 	cmp.w	r8, #0
 80123fa:	d007      	beq.n	801240c <att_handle_rsp+0x6c>
		func(chan->att->conn, err, pdu, len, params);
 80123fc:	6823      	ldr	r3, [r4, #0]
 80123fe:	6818      	ldr	r0, [r3, #0]
 8012400:	f8cd a000 	str.w	sl, [sp]
 8012404:	463b      	mov	r3, r7
 8012406:	4632      	mov	r2, r6
 8012408:	4629      	mov	r1, r5
 801240a:	47c0      	blx	r8
}
 801240c:	2000      	movs	r0, #0
 801240e:	b002      	add	sp, #8
 8012410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		BT_WARN("No pending ATT request");
 8012414:	f04f 0100 	mov.w	r1, #0
 8012418:	2302      	movs	r3, #2
 801241a:	f363 0102 	bfi	r1, r3, #0, #3
 801241e:	f36f 01c5 	bfc	r1, #3, #3
 8012422:	4b0a      	ldr	r3, [pc, #40]	; (801244c <att_handle_rsp+0xac>)
 8012424:	4a0a      	ldr	r2, [pc, #40]	; (8012450 <att_handle_rsp+0xb0>)
 8012426:	1a9b      	subs	r3, r3, r2
 8012428:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 801242c:	f363 118f 	bfi	r1, r3, #6, #10
 8012430:	4808      	ldr	r0, [pc, #32]	; (8012454 <att_handle_rsp+0xb4>)
 8012432:	f7f4 f9f5 	bl	8006820 <log_0>
	bt_att_func_t func = NULL;
 8012436:	f04f 0800 	mov.w	r8, #0
		goto process;
 801243a:	e7d9      	b.n	80123f0 <att_handle_rsp+0x50>
		chan->req = NULL;
 801243c:	2300      	movs	r3, #0
 801243e:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	bt_att_func_t func = NULL;
 8012442:	4698      	mov	r8, r3
		goto process;
 8012444:	e7d4      	b.n	80123f0 <att_handle_rsp+0x50>
 8012446:	bf00      	nop
 8012448:	200041b4 	.word	0x200041b4
 801244c:	08022b98 	.word	0x08022b98
 8012450:	08022b90 	.word	0x08022b90
 8012454:	08027478 	.word	0x08027478

08012458 <att_error_rsp>:
{
 8012458:	b538      	push	{r3, r4, r5, lr}
 801245a:	4604      	mov	r4, r0
	rsp = (void *)buf->data;
 801245c:	6888      	ldr	r0, [r1, #8]
	if (!chan->req || chan->req == &cancel) {
 801245e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8012462:	b30b      	cbz	r3, 80124a8 <att_error_rsp+0x50>
 8012464:	4a12      	ldr	r2, [pc, #72]	; (80124b0 <att_error_rsp+0x58>)
 8012466:	4293      	cmp	r3, r2
 8012468:	d020      	beq.n	80124ac <att_error_rsp+0x54>
	if (chan->req->buf) {
 801246a:	691a      	ldr	r2, [r3, #16]
 801246c:	b12a      	cbz	r2, 801247a <att_error_rsp+0x22>
	buf->data = buf->__buf + state->offset;
 801246e:	6911      	ldr	r1, [r2, #16]
 8012470:	899d      	ldrh	r5, [r3, #12]
 8012472:	4429      	add	r1, r5
 8012474:	6091      	str	r1, [r2, #8]
	buf->len = state->len;
 8012476:	89db      	ldrh	r3, [r3, #14]
 8012478:	8193      	strh	r3, [r2, #12]
	err = rsp->error;
 801247a:	78c5      	ldrb	r5, [r0, #3]
	if (chan->req->retrying) {
 801247c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8012480:	7d1b      	ldrb	r3, [r3, #20]
 8012482:	b133      	cbz	r3, 8012492 <att_error_rsp+0x3a>
	return att_handle_rsp(chan, NULL, 0, err);
 8012484:	462b      	mov	r3, r5
 8012486:	2200      	movs	r2, #0
 8012488:	4611      	mov	r1, r2
 801248a:	4620      	mov	r0, r4
 801248c:	f7ff ff88 	bl	80123a0 <att_handle_rsp>
}
 8012490:	bd38      	pop	{r3, r4, r5, pc}
	if (!att_change_security(chan->chan.chan.conn, err)) {
 8012492:	4629      	mov	r1, r5
 8012494:	68a0      	ldr	r0, [r4, #8]
 8012496:	f00b fd87 	bl	801dfa8 <att_change_security>
 801249a:	2800      	cmp	r0, #0
 801249c:	d1f2      	bne.n	8012484 <att_error_rsp+0x2c>
		chan->req->retrying = true;
 801249e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 80124a2:	2201      	movs	r2, #1
 80124a4:	751a      	strb	r2, [r3, #20]
		return 0;
 80124a6:	e7f3      	b.n	8012490 <att_error_rsp+0x38>
		err = BT_ATT_ERR_UNLIKELY;
 80124a8:	250e      	movs	r5, #14
 80124aa:	e7eb      	b.n	8012484 <att_error_rsp+0x2c>
 80124ac:	250e      	movs	r5, #14
 80124ae:	e7e9      	b.n	8012484 <att_error_rsp+0x2c>
 80124b0:	200041b4 	.word	0x200041b4

080124b4 <att_reset>:
{
 80124b4:	b570      	push	{r4, r5, r6, lr}
 80124b6:	b084      	sub	sp, #16
 80124b8:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
 80124ba:	2200      	movs	r2, #0
 80124bc:	2300      	movs	r3, #0
 80124be:	9803      	ldr	r0, [sp, #12]
 80124c0:	300c      	adds	r0, #12
 80124c2:	f00d ff5f 	bl	8020384 <net_buf_get>
 80124c6:	4603      	mov	r3, r0
 80124c8:	b118      	cbz	r0, 80124d2 <att_reset+0x1e>
		net_buf_unref(buf);
 80124ca:	4618      	mov	r0, r3
 80124cc:	f00d ff8c 	bl	80203e8 <net_buf_unref>
 80124d0:	e7f3      	b.n	80124ba <att_reset+0x6>
	att->conn = NULL;
 80124d2:	9b03      	ldr	r3, [sp, #12]
 80124d4:	2200      	movs	r2, #0
 80124d6:	601a      	str	r2, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
 80124d8:	9b03      	ldr	r3, [sp, #12]
	return list->head;
 80124da:	685d      	ldr	r5, [r3, #4]
 80124dc:	b11d      	cbz	r5, 80124e6 <att_reset+0x32>
 80124de:	462c      	mov	r4, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
 80124e0:	b135      	cbz	r5, 80124f0 <att_reset+0x3c>
	return node->next;
 80124e2:	682c      	ldr	r4, [r5, #0]
 80124e4:	e004      	b.n	80124f0 <att_reset+0x3c>
 80124e6:	462c      	mov	r4, r5
 80124e8:	e002      	b.n	80124f0 <att_reset+0x3c>
 80124ea:	4623      	mov	r3, r4
 80124ec:	4625      	mov	r5, r4
 80124ee:	461c      	mov	r4, r3
 80124f0:	b195      	cbz	r5, 8012518 <att_reset+0x64>
		if (req->func) {
 80124f2:	686e      	ldr	r6, [r5, #4]
 80124f4:	b136      	cbz	r6, 8012504 <att_reset+0x50>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
 80124f6:	69ab      	ldr	r3, [r5, #24]
 80124f8:	9300      	str	r3, [sp, #0]
 80124fa:	2300      	movs	r3, #0
 80124fc:	461a      	mov	r2, r3
 80124fe:	210e      	movs	r1, #14
 8012500:	4618      	mov	r0, r3
 8012502:	47b0      	blx	r6
		att_req_destroy(req);
 8012504:	4628      	mov	r0, r5
 8012506:	f00c f803 	bl	801e510 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
 801250a:	2c00      	cmp	r4, #0
 801250c:	d0ed      	beq.n	80124ea <att_reset+0x36>
 801250e:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 8012510:	2c00      	cmp	r4, #0
 8012512:	d0eb      	beq.n	80124ec <att_reset+0x38>
	return node->next;
 8012514:	6823      	ldr	r3, [r4, #0]
 8012516:	e7e9      	b.n	80124ec <att_reset+0x38>
	k_mem_slab_free(&att_slab, (void **)&att);
 8012518:	a903      	add	r1, sp, #12
 801251a:	4802      	ldr	r0, [pc, #8]	; (8012524 <att_reset+0x70>)
 801251c:	f005 fde4 	bl	80180e8 <k_mem_slab_free>
}
 8012520:	b004      	add	sp, #16
 8012522:	bd70      	pop	{r4, r5, r6, pc}
 8012524:	20000f20 	.word	0x20000f20

08012528 <att_timeout>:
{
 8012528:	b570      	push	{r4, r5, r6, lr}
 801252a:	4604      	mov	r4, r0
	struct bt_att_chan *chan = CONTAINER_OF(work, struct bt_att_chan,
 801252c:	f1a0 06e0 	sub.w	r6, r0, #224	; 0xe0
	struct bt_att *att = chan->att;
 8012530:	f850 5ce0 	ldr.w	r5, [r0, #-224]
	BT_ERR("ATT Timeout");
 8012534:	f04f 0100 	mov.w	r1, #0
 8012538:	2301      	movs	r3, #1
 801253a:	f363 0102 	bfi	r1, r3, #0, #3
 801253e:	f36f 01c5 	bfc	r1, #3, #3
 8012542:	4b0d      	ldr	r3, [pc, #52]	; (8012578 <att_timeout+0x50>)
 8012544:	4a0d      	ldr	r2, [pc, #52]	; (801257c <att_timeout+0x54>)
 8012546:	1a9b      	subs	r3, r3, r2
 8012548:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 801254c:	f363 118f 	bfi	r1, r3, #6, #10
 8012550:	480b      	ldr	r0, [pc, #44]	; (8012580 <att_timeout+0x58>)
 8012552:	f7f4 f965 	bl	8006820 <log_0>
	att_chan_detach(chan);
 8012556:	4630      	mov	r0, r6
 8012558:	f00c f878 	bl	801e64c <att_chan_detach>
	return list->head;
 801255c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (!sys_slist_is_empty(&att->chans)) {
 801255e:	b103      	cbz	r3, 8012562 <att_timeout+0x3a>
}
 8012560:	bd70      	pop	{r4, r5, r6, pc}
	att_reset(att);
 8012562:	4628      	mov	r0, r5
 8012564:	f7ff ffa6 	bl	80124b4 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
 8012568:	f854 0cd8 	ldr.w	r0, [r4, #-216]
 801256c:	f002 f9a0 	bl	80148b0 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
 8012570:	2300      	movs	r3, #0
 8012572:	f844 3cd8 	str.w	r3, [r4, #-216]
 8012576:	e7f3      	b.n	8012560 <att_timeout+0x38>
 8012578:	08022b98 	.word	0x08022b98
 801257c:	08022b90 	.word	0x08022b90
 8012580:	08027490 	.word	0x08027490

08012584 <bt_att_chan_req_cancel>:
	return 0;
}

static bool bt_att_chan_req_cancel(struct bt_att_chan *chan,
				   struct bt_att_req *req)
{
 8012584:	b508      	push	{r3, lr}
	if (chan->req != req) {
 8012586:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
 801258a:	428b      	cmp	r3, r1
 801258c:	d001      	beq.n	8012592 <bt_att_chan_req_cancel+0xe>
		return false;
 801258e:	2000      	movs	r0, #0
	chan->req = &cancel;

	att_req_destroy(req);

	return true;
}
 8012590:	bd08      	pop	{r3, pc}
	chan->req = &cancel;
 8012592:	4b04      	ldr	r3, [pc, #16]	; (80125a4 <bt_att_chan_req_cancel+0x20>)
 8012594:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
	att_req_destroy(req);
 8012598:	4608      	mov	r0, r1
 801259a:	f00b ffb9 	bl	801e510 <att_req_destroy>
	return true;
 801259e:	2001      	movs	r0, #1
 80125a0:	e7f6      	b.n	8012590 <bt_att_chan_req_cancel+0xc>
 80125a2:	bf00      	nop
 80125a4:	200041b4 	.word	0x200041b4

080125a8 <db_hash_store>:

	return BT_GATT_ITER_CONTINUE;
}

static void db_hash_store(void)
{
 80125a8:	b508      	push	{r3, lr}
	int err;

	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
 80125aa:	2210      	movs	r2, #16
 80125ac:	490c      	ldr	r1, [pc, #48]	; (80125e0 <db_hash_store+0x38>)
 80125ae:	480d      	ldr	r0, [pc, #52]	; (80125e4 <db_hash_store+0x3c>)
 80125b0:	f7f5 fffa 	bl	80085a8 <settings_save_one>
	if (err) {
 80125b4:	b900      	cbnz	r0, 80125b8 <db_hash_store+0x10>
		BT_ERR("Failed to save Database Hash (err %d)", err);
	}

	BT_DBG("Database Hash stored");
}
 80125b6:	bd08      	pop	{r3, pc}
 80125b8:	4601      	mov	r1, r0
		BT_ERR("Failed to save Database Hash (err %d)", err);
 80125ba:	f04f 0200 	mov.w	r2, #0
 80125be:	2301      	movs	r3, #1
 80125c0:	f363 0202 	bfi	r2, r3, #0, #3
 80125c4:	f36f 02c5 	bfc	r2, #3, #3
 80125c8:	4b07      	ldr	r3, [pc, #28]	; (80125e8 <db_hash_store+0x40>)
 80125ca:	4808      	ldr	r0, [pc, #32]	; (80125ec <db_hash_store+0x44>)
 80125cc:	1a1b      	subs	r3, r3, r0
 80125ce:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80125d2:	f363 128f 	bfi	r2, r3, #6, #10
 80125d6:	4806      	ldr	r0, [pc, #24]	; (80125f0 <db_hash_store+0x48>)
 80125d8:	f7f3 ffb2 	bl	8006540 <log_1>
}
 80125dc:	e7eb      	b.n	80125b6 <db_hash_store+0xe>
 80125de:	bf00      	nop
 80125e0:	20004290 	.word	0x20004290
 80125e4:	08027584 	.word	0x08027584
 80125e8:	08022bc0 	.word	0x08022bc0
 80125ec:	08022b90 	.word	0x08022b90
 80125f0:	0802758c 	.word	0x0802758c

080125f4 <db_hash_set>:

static uint8_t stored_hash[16];

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
 80125f4:	b510      	push	{r4, lr}
 80125f6:	4614      	mov	r4, r2
	ssize_t len;

	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
 80125f8:	2210      	movs	r2, #16
 80125fa:	490d      	ldr	r1, [pc, #52]	; (8012630 <db_hash_set+0x3c>)
 80125fc:	4618      	mov	r0, r3
 80125fe:	47a0      	blx	r4
	if (len < 0) {
 8012600:	1e04      	subs	r4, r0, #0
 8012602:	db02      	blt.n	801260a <db_hash_set+0x16>
		return len;
	}

	BT_HEXDUMP_DBG(stored_hash, sizeof(stored_hash), "Stored Hash: ");

	return 0;
 8012604:	2400      	movs	r4, #0
}
 8012606:	4620      	mov	r0, r4
 8012608:	bd10      	pop	{r4, pc}
		BT_ERR("Failed to decode value (err %zd)", len);
 801260a:	f04f 0200 	mov.w	r2, #0
 801260e:	2301      	movs	r3, #1
 8012610:	f363 0202 	bfi	r2, r3, #0, #3
 8012614:	f36f 02c5 	bfc	r2, #3, #3
 8012618:	4b06      	ldr	r3, [pc, #24]	; (8012634 <db_hash_set+0x40>)
 801261a:	4907      	ldr	r1, [pc, #28]	; (8012638 <db_hash_set+0x44>)
 801261c:	1a5b      	subs	r3, r3, r1
 801261e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8012622:	f363 128f 	bfi	r2, r3, #6, #10
 8012626:	4621      	mov	r1, r4
 8012628:	4804      	ldr	r0, [pc, #16]	; (801263c <db_hash_set+0x48>)
 801262a:	f7f3 ff89 	bl	8006540 <log_1>
		return len;
 801262e:	e7ea      	b.n	8012606 <db_hash_set+0x12>
 8012630:	200043ac 	.word	0x200043ac
 8012634:	08022bc0 	.word	0x08022bc0
 8012638:	08022b90 	.word	0x08022b90
 801263c:	080275b4 	.word	0x080275b4

08012640 <find_cf_cfg>:
{
 8012640:	b570      	push	{r4, r5, r6, lr}
 8012642:	b082      	sub	sp, #8
 8012644:	4606      	mov	r6, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
 8012646:	2400      	movs	r4, #0
 8012648:	e00b      	b.n	8012662 <find_cf_cfg+0x22>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
 801264a:	4628      	mov	r0, r5
 801264c:	2300      	movs	r3, #0
 801264e:	9300      	str	r3, [sp, #0]
 8012650:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
 8012654:	2207      	movs	r2, #7
 8012656:	4669      	mov	r1, sp
 8012658:	3001      	adds	r0, #1
 801265a:	f00a f910 	bl	801c87e <memcmp>
 801265e:	b1a0      	cbz	r0, 801268a <find_cf_cfg+0x4a>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
 8012660:	3401      	adds	r4, #1
 8012662:	2c0b      	cmp	r4, #11
 8012664:	dc10      	bgt.n	8012688 <find_cf_cfg+0x48>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
 8012666:	4d0a      	ldr	r5, [pc, #40]	; (8012690 <find_cf_cfg+0x50>)
 8012668:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (!conn) {
 801266c:	2e00      	cmp	r6, #0
 801266e:	d0ec      	beq.n	801264a <find_cf_cfg+0xa>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
 8012670:	4907      	ldr	r1, [pc, #28]	; (8012690 <find_cf_cfg+0x50>)
 8012672:	0123      	lsls	r3, r4, #4
 8012674:	eb01 1204 	add.w	r2, r1, r4, lsl #4
 8012678:	3201      	adds	r2, #1
 801267a:	5cc9      	ldrb	r1, [r1, r3]
 801267c:	4630      	mov	r0, r6
 801267e:	f00a fffd 	bl	801d67c <bt_conn_is_peer_addr_le>
 8012682:	2800      	cmp	r0, #0
 8012684:	d0ec      	beq.n	8012660 <find_cf_cfg+0x20>
 8012686:	e000      	b.n	801268a <find_cf_cfg+0x4a>
	return NULL;
 8012688:	2500      	movs	r5, #0
}
 801268a:	4628      	mov	r0, r5
 801268c:	b002      	add	sp, #8
 801268e:	bd70      	pop	{r4, r5, r6, pc}
 8012690:	200041d0 	.word	0x200041d0

08012694 <find_sc_cfg>:
{
 8012694:	b570      	push	{r4, r5, r6, lr}
 8012696:	4605      	mov	r5, r0
 8012698:	460e      	mov	r6, r1
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
 801269a:	2400      	movs	r4, #0
 801269c:	e000      	b.n	80126a0 <find_sc_cfg+0xc>
 801269e:	3401      	adds	r4, #1
 80126a0:	2c0b      	cmp	r4, #11
 80126a2:	d817      	bhi.n	80126d4 <find_sc_cfg+0x40>
		if (id == sc_cfg[i].id &&
 80126a4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80126a8:	4a0b      	ldr	r2, [pc, #44]	; (80126d8 <find_sc_cfg+0x44>)
 80126aa:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80126ae:	429d      	cmp	r5, r3
 80126b0:	d1f5      	bne.n	801269e <find_sc_cfg+0xa>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
 80126b2:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 80126b6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80126ba:	2207      	movs	r2, #7
 80126bc:	4631      	mov	r1, r6
 80126be:	3001      	adds	r0, #1
 80126c0:	f00a f8dd 	bl	801c87e <memcmp>
		if (id == sc_cfg[i].id &&
 80126c4:	2800      	cmp	r0, #0
 80126c6:	d1ea      	bne.n	801269e <find_sc_cfg+0xa>
			return &sc_cfg[i];
 80126c8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80126cc:	4802      	ldr	r0, [pc, #8]	; (80126d8 <find_sc_cfg+0x44>)
 80126ce:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80126d2:	e000      	b.n	80126d6 <find_sc_cfg+0x42>
	return NULL;
 80126d4:	2000      	movs	r0, #0
}
 80126d6:	bd70      	pop	{r4, r5, r6, pc}
 80126d8:	200042a4 	.word	0x200042a4

080126dc <gatt_sub_find>:
{
 80126dc:	b570      	push	{r4, r5, r6, lr}
 80126de:	b082      	sub	sp, #8
 80126e0:	4606      	mov	r6, r0
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
 80126e2:	2400      	movs	r4, #0
 80126e4:	e00b      	b.n	80126fe <gatt_sub_find+0x22>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
 80126e6:	4628      	mov	r0, r5
 80126e8:	2300      	movs	r3, #0
 80126ea:	9300      	str	r3, [sp, #0]
 80126ec:	f8cd 3003 	str.w	r3, [sp, #3]
 80126f0:	2207      	movs	r2, #7
 80126f2:	4669      	mov	r1, sp
 80126f4:	3001      	adds	r0, #1
 80126f6:	f00a f8c2 	bl	801c87e <memcmp>
 80126fa:	b1a0      	cbz	r0, 8012726 <gatt_sub_find+0x4a>
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
 80126fc:	3401      	adds	r4, #1
 80126fe:	2c0b      	cmp	r4, #11
 8012700:	dc10      	bgt.n	8012724 <gatt_sub_find+0x48>
		struct gatt_sub *sub = &subscriptions[i];
 8012702:	4d0a      	ldr	r5, [pc, #40]	; (801272c <gatt_sub_find+0x50>)
 8012704:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (!conn) {
 8012708:	2e00      	cmp	r6, #0
 801270a:	d0ec      	beq.n	80126e6 <gatt_sub_find+0xa>
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
 801270c:	4907      	ldr	r1, [pc, #28]	; (801272c <gatt_sub_find+0x50>)
 801270e:	0123      	lsls	r3, r4, #4
 8012710:	eb01 1204 	add.w	r2, r1, r4, lsl #4
 8012714:	3201      	adds	r2, #1
 8012716:	5cc9      	ldrb	r1, [r1, r3]
 8012718:	4630      	mov	r0, r6
 801271a:	f00a ffaf 	bl	801d67c <bt_conn_is_peer_addr_le>
 801271e:	2800      	cmp	r0, #0
 8012720:	d0ec      	beq.n	80126fc <gatt_sub_find+0x20>
 8012722:	e000      	b.n	8012726 <gatt_sub_find+0x4a>
	return NULL;
 8012724:	2500      	movs	r5, #0
}
 8012726:	4628      	mov	r0, r5
 8012728:	b002      	add	sp, #8
 801272a:	bd70      	pop	{r4, r5, r6, pc}
 801272c:	200043bc 	.word	0x200043bc

08012730 <ccc_save>:
{
 8012730:	b538      	push	{r3, r4, r5, lr}
 8012732:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
 8012734:	6882      	ldr	r2, [r0, #8]
 8012736:	4b0d      	ldr	r3, [pc, #52]	; (801276c <ccc_save+0x3c>)
 8012738:	429a      	cmp	r2, r3
 801273a:	d001      	beq.n	8012740 <ccc_save+0x10>
}
 801273c:	2001      	movs	r0, #1
 801273e:	bd38      	pop	{r3, r4, r5, pc}
 8012740:	460d      	mov	r5, r1
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
 8012742:	7922      	ldrb	r2, [r4, #4]
 8012744:	6821      	ldr	r1, [r4, #0]
 8012746:	68c0      	ldr	r0, [r0, #12]
 8012748:	f00c f9c4 	bl	801ead4 <ccc_find_cfg>
	if (!cfg) {
 801274c:	2800      	cmp	r0, #0
 801274e:	d0f5      	beq.n	801273c <ccc_save+0xc>
	save->store[save->count].handle = handle;
 8012750:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8012754:	1c9a      	adds	r2, r3, #2
 8012756:	f824 5022 	strh.w	r5, [r4, r2, lsl #2]
	save->store[save->count].value = cfg->value;
 801275a:	8901      	ldrh	r1, [r0, #8]
 801275c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012760:	8051      	strh	r1, [r2, #2]
	save->count++;
 8012762:	3301      	adds	r3, #1
 8012764:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	return BT_GATT_ITER_CONTINUE;
 8012768:	e7e8      	b.n	801273c <ccc_save+0xc>
 801276a:	bf00      	nop
 801276c:	080127e9 	.word	0x080127e9

08012770 <find_cf_cfg_by_addr>:
{
 8012770:	b570      	push	{r4, r5, r6, lr}
 8012772:	4605      	mov	r5, r0
 8012774:	460e      	mov	r6, r1
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
 8012776:	2400      	movs	r4, #0
 8012778:	e000      	b.n	801277c <find_cf_cfg_by_addr+0xc>
 801277a:	3401      	adds	r4, #1
 801277c:	2c0b      	cmp	r4, #11
 801277e:	dc11      	bgt.n	80127a4 <find_cf_cfg_by_addr+0x34>
			if (id == cf_cfg[i].id &&
 8012780:	0123      	lsls	r3, r4, #4
 8012782:	4a09      	ldr	r2, [pc, #36]	; (80127a8 <find_cf_cfg_by_addr+0x38>)
 8012784:	5cd3      	ldrb	r3, [r2, r3]
 8012786:	42ab      	cmp	r3, r5
 8012788:	d1f7      	bne.n	801277a <find_cf_cfg_by_addr+0xa>
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
 801278a:	eb02 1104 	add.w	r1, r2, r4, lsl #4
 801278e:	2207      	movs	r2, #7
 8012790:	3101      	adds	r1, #1
 8012792:	4630      	mov	r0, r6
 8012794:	f00a f873 	bl	801c87e <memcmp>
			if (id == cf_cfg[i].id &&
 8012798:	2800      	cmp	r0, #0
 801279a:	d1ee      	bne.n	801277a <find_cf_cfg_by_addr+0xa>
				return &cf_cfg[i];
 801279c:	4802      	ldr	r0, [pc, #8]	; (80127a8 <find_cf_cfg_by_addr+0x38>)
 801279e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80127a2:	e000      	b.n	80127a6 <find_cf_cfg_by_addr+0x36>
	return NULL;
 80127a4:	2000      	movs	r0, #0
}
 80127a6:	bd70      	pop	{r4, r5, r6, pc}
 80127a8:	200041d0 	.word	0x200041d0

080127ac <find_gatt_sub>:

}


static struct gatt_sub *find_gatt_sub(uint8_t id, const bt_addr_le_t *addr)
{
 80127ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127ae:	4605      	mov	r5, r0
 80127b0:	460f      	mov	r7, r1
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
 80127b2:	2400      	movs	r4, #0
 80127b4:	e000      	b.n	80127b8 <find_gatt_sub+0xc>
 80127b6:	3401      	adds	r4, #1
 80127b8:	2c0b      	cmp	r4, #11
 80127ba:	dc0f      	bgt.n	80127dc <find_gatt_sub+0x30>
		struct gatt_sub *sub = &subscriptions[i];
 80127bc:	4a09      	ldr	r2, [pc, #36]	; (80127e4 <find_gatt_sub+0x38>)
 80127be:	0123      	lsls	r3, r4, #4
 80127c0:	eb02 1604 	add.w	r6, r2, r4, lsl #4

		if (id == sub->id &&
 80127c4:	5cd3      	ldrb	r3, [r2, r3]
 80127c6:	42ab      	cmp	r3, r5
 80127c8:	d1f5      	bne.n	80127b6 <find_gatt_sub+0xa>
		    !bt_addr_le_cmp(addr, &sub->peer)) {
 80127ca:	4631      	mov	r1, r6
 80127cc:	2207      	movs	r2, #7
 80127ce:	3101      	adds	r1, #1
 80127d0:	4638      	mov	r0, r7
 80127d2:	f00a f854 	bl	801c87e <memcmp>
		if (id == sub->id &&
 80127d6:	2800      	cmp	r0, #0
 80127d8:	d1ed      	bne.n	80127b6 <find_gatt_sub+0xa>
 80127da:	e000      	b.n	80127de <find_gatt_sub+0x32>
			return sub;
		}
	}

	return NULL;
 80127dc:	2600      	movs	r6, #0
}
 80127de:	4630      	mov	r0, r6
 80127e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127e2:	bf00      	nop
 80127e4:	200043bc 	.word	0x200043bc

080127e8 <bt_gatt_attr_write_ccc>:
{
 80127e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80127ec:	461c      	mov	r4, r3
 80127ee:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
 80127f2:	68cf      	ldr	r7, [r1, #12]
	if (offset) {
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d158      	bne.n	80128aa <bt_gatt_attr_write_ccc+0xc2>
 80127f8:	4681      	mov	r9, r0
 80127fa:	460e      	mov	r6, r1
	if (!len || len > sizeof(uint16_t)) {
 80127fc:	1e63      	subs	r3, r4, #1
 80127fe:	b29b      	uxth	r3, r3
 8012800:	2b01      	cmp	r3, #1
 8012802:	d855      	bhi.n	80128b0 <bt_gatt_attr_write_ccc+0xc8>
	if (len < sizeof(uint16_t)) {
 8012804:	2c01      	cmp	r4, #1
 8012806:	d91d      	bls.n	8012844 <bt_gatt_attr_write_ccc+0x5c>
 8012808:	7853      	ldrb	r3, [r2, #1]
 801280a:	7815      	ldrb	r5, [r2, #0]
 801280c:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
 8012810:	4639      	mov	r1, r7
 8012812:	4648      	mov	r0, r9
 8012814:	f00c f933 	bl	801ea7e <find_ccc_cfg>
	if (!cfg) {
 8012818:	4680      	mov	r8, r0
 801281a:	b1a8      	cbz	r0, 8012848 <bt_gatt_attr_write_ccc+0x60>
	if (ccc->cfg_write) {
 801281c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801281e:	b143      	cbz	r3, 8012832 <bt_gatt_attr_write_ccc+0x4a>
		ssize_t write = ccc->cfg_write(conn, attr, value);
 8012820:	462a      	mov	r2, r5
 8012822:	4631      	mov	r1, r6
 8012824:	4648      	mov	r0, r9
 8012826:	4798      	blx	r3
		if (write < 0) {
 8012828:	2800      	cmp	r0, #0
 801282a:	db09      	blt.n	8012840 <bt_gatt_attr_write_ccc+0x58>
		if (write != sizeof(value) && write != 1) {
 801282c:	3801      	subs	r0, #1
 801282e:	2801      	cmp	r0, #1
 8012830:	d841      	bhi.n	80128b6 <bt_gatt_attr_write_ccc+0xce>
	cfg->value = value;
 8012832:	f8a8 5008 	strh.w	r5, [r8, #8]
	if (cfg->value != ccc->value) {
 8012836:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012838:	429d      	cmp	r5, r3
 801283a:	d12d      	bne.n	8012898 <bt_gatt_attr_write_ccc+0xb0>
	if (!value) {
 801283c:	b38d      	cbz	r5, 80128a2 <bt_gatt_attr_write_ccc+0xba>
	return len;
 801283e:	4620      	mov	r0, r4
}
 8012840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		value = *(uint8_t *)buf;
 8012844:	7815      	ldrb	r5, [r2, #0]
 8012846:	e7e3      	b.n	8012810 <bt_gatt_attr_write_ccc+0x28>
		if (!value) {
 8012848:	b90d      	cbnz	r5, 801284e <bt_gatt_attr_write_ccc+0x66>
			return len;
 801284a:	4620      	mov	r0, r4
 801284c:	e7f8      	b.n	8012840 <bt_gatt_attr_write_ccc+0x58>
		cfg = find_ccc_cfg(NULL, ccc);
 801284e:	4639      	mov	r1, r7
 8012850:	2000      	movs	r0, #0
 8012852:	f00c f914 	bl	801ea7e <find_ccc_cfg>
		if (!cfg) {
 8012856:	4680      	mov	r8, r0
 8012858:	b150      	cbz	r0, 8012870 <bt_gatt_attr_write_ccc+0x88>
	memcpy(dst, src, sizeof(*dst));
 801285a:	2207      	movs	r2, #7
 801285c:	f109 0188 	add.w	r1, r9, #136	; 0x88
 8012860:	3001      	adds	r0, #1
 8012862:	f00a f824 	bl	801c8ae <memcpy>
		cfg->id = conn->id;
 8012866:	f899 3008 	ldrb.w	r3, [r9, #8]
 801286a:	f888 3000 	strb.w	r3, [r8]
 801286e:	e7d5      	b.n	801281c <bt_gatt_attr_write_ccc+0x34>
			BT_WARN("No space to store CCC cfg");
 8012870:	f04f 0100 	mov.w	r1, #0
 8012874:	2302      	movs	r3, #2
 8012876:	f363 0102 	bfi	r1, r3, #0, #3
 801287a:	f36f 01c5 	bfc	r1, #3, #3
 801287e:	4b0f      	ldr	r3, [pc, #60]	; (80128bc <bt_gatt_attr_write_ccc+0xd4>)
 8012880:	4a0f      	ldr	r2, [pc, #60]	; (80128c0 <bt_gatt_attr_write_ccc+0xd8>)
 8012882:	1a9b      	subs	r3, r3, r2
 8012884:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8012888:	f363 118f 	bfi	r1, r3, #6, #10
 801288c:	480d      	ldr	r0, [pc, #52]	; (80128c4 <bt_gatt_attr_write_ccc+0xdc>)
 801288e:	f7f3 ffc7 	bl	8006820 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
 8012892:	f06f 0010 	mvn.w	r0, #16
 8012896:	e7d3      	b.n	8012840 <bt_gatt_attr_write_ccc+0x58>
		gatt_ccc_changed(attr, ccc);
 8012898:	4639      	mov	r1, r7
 801289a:	4630      	mov	r0, r6
 801289c:	f00c f859 	bl	801e952 <gatt_ccc_changed>
 80128a0:	e7cc      	b.n	801283c <bt_gatt_attr_write_ccc+0x54>
		clear_ccc_cfg(cfg);
 80128a2:	4640      	mov	r0, r8
 80128a4:	f00c f937 	bl	801eb16 <clear_ccc_cfg>
 80128a8:	e7c9      	b.n	801283e <bt_gatt_attr_write_ccc+0x56>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
 80128aa:	f06f 0006 	mvn.w	r0, #6
 80128ae:	e7c7      	b.n	8012840 <bt_gatt_attr_write_ccc+0x58>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
 80128b0:	f06f 000c 	mvn.w	r0, #12
 80128b4:	e7c4      	b.n	8012840 <bt_gatt_attr_write_ccc+0x58>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
 80128b6:	f06f 000d 	mvn.w	r0, #13
 80128ba:	e7c1      	b.n	8012840 <bt_gatt_attr_write_ccc+0x58>
 80128bc:	08022bc0 	.word	0x08022bc0
 80128c0:	08022b90 	.word	0x08022b90
 80128c4:	080275d8 	.word	0x080275d8

080128c8 <parse_service>:
{
 80128c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128cc:	b08f      	sub	sp, #60	; 0x3c
 80128ce:	4682      	mov	sl, r0
 80128d0:	4689      	mov	r9, r1
 80128d2:	4616      	mov	r6, r2
	switch (rsp->len) {
 80128d4:	7809      	ldrb	r1, [r1, #0]
 80128d6:	2906      	cmp	r1, #6
 80128d8:	d01c      	beq.n	8012914 <parse_service+0x4c>
 80128da:	2914      	cmp	r1, #20
 80128dc:	d023      	beq.n	8012926 <parse_service+0x5e>
		BT_ERR("Invalid data len %u", rsp->len);
 80128de:	f04f 0200 	mov.w	r2, #0
 80128e2:	2301      	movs	r3, #1
 80128e4:	f363 0202 	bfi	r2, r3, #0, #3
 80128e8:	f36f 02c5 	bfc	r2, #3, #3
 80128ec:	4b3b      	ldr	r3, [pc, #236]	; (80129dc <parse_service+0x114>)
 80128ee:	483c      	ldr	r0, [pc, #240]	; (80129e0 <parse_service+0x118>)
 80128f0:	1a1b      	subs	r3, r3, r0
 80128f2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80128f6:	f363 128f 	bfi	r2, r3, #6, #10
 80128fa:	483a      	ldr	r0, [pc, #232]	; (80129e4 <parse_service+0x11c>)
 80128fc:	f7f3 fe20 	bl	8006540 <log_1>
	params->func(conn, NULL, params);
 8012900:	6873      	ldr	r3, [r6, #4]
 8012902:	4632      	mov	r2, r6
 8012904:	2100      	movs	r1, #0
 8012906:	4650      	mov	r0, sl
 8012908:	4798      	blx	r3
	return 0;
 801290a:	2700      	movs	r7, #0
}
 801290c:	4638      	mov	r0, r7
 801290e:	b00f      	add	sp, #60	; 0x3c
 8012910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		u.uuid.type = BT_UUID_TYPE_16;
 8012914:	2200      	movs	r2, #0
 8012916:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
	for (length--, pdu = rsp->data; length >= rsp->len;
 801291a:	3b01      	subs	r3, #1
 801291c:	b29c      	uxth	r4, r3
 801291e:	f109 0501 	add.w	r5, r9, #1
	uint16_t start_handle, end_handle = 0U;
 8012922:	2700      	movs	r7, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
 8012924:	e02a      	b.n	801297c <parse_service+0xb4>
		u.uuid.type = BT_UUID_TYPE_128;
 8012926:	2202      	movs	r2, #2
 8012928:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
		break;
 801292c:	e7f5      	b.n	801291a <parse_service+0x52>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
 801292e:	2202      	movs	r2, #2
 8012930:	1d29      	adds	r1, r5, #4
 8012932:	f10d 0026 	add.w	r0, sp, #38	; 0x26
 8012936:	f009 ffba 	bl	801c8ae <memcpy>
			break;
 801293a:	e03d      	b.n	80129b8 <parse_service+0xf0>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
 801293c:	2210      	movs	r2, #16
 801293e:	1d29      	adds	r1, r5, #4
 8012940:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 8012944:	f009 ffb3 	bl	801c8ae <memcpy>
			break;
 8012948:	e036      	b.n	80129b8 <parse_service+0xf0>
			uuid_svc.val = BT_UUID_16(BT_UUID_GATT_SECONDARY)->val;
 801294a:	f642 0301 	movw	r3, #10241	; 0x2801
 801294e:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.end_handle = end_handle;
 8012952:	f8ad b00c 	strh.w	fp, [sp, #12]
		value.uuid = &u.uuid;
 8012956:	ab09      	add	r3, sp, #36	; 0x24
 8012958:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
 801295a:	ab01      	add	r3, sp, #4
 801295c:	9304      	str	r3, [sp, #16]
		attr.handle = start_handle;
 801295e:	f8ad 8020 	strh.w	r8, [sp, #32]
		attr.user_data = &value;
 8012962:	ab02      	add	r3, sp, #8
 8012964:	9307      	str	r3, [sp, #28]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
 8012966:	6873      	ldr	r3, [r6, #4]
 8012968:	4632      	mov	r2, r6
 801296a:	a904      	add	r1, sp, #16
 801296c:	4650      	mov	r0, sl
 801296e:	4798      	blx	r3
 8012970:	b368      	cbz	r0, 80129ce <parse_service+0x106>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
 8012972:	f899 3000 	ldrb.w	r3, [r9]
 8012976:	1ae4      	subs	r4, r4, r3
 8012978:	b2a4      	uxth	r4, r4
 801297a:	441d      	add	r5, r3
	for (length--, pdu = rsp->data; length >= rsp->len;
 801297c:	f899 3000 	ldrb.w	r3, [r9]
 8012980:	429c      	cmp	r4, r3
 8012982:	d326      	bcc.n	80129d2 <parse_service+0x10a>
		struct bt_gatt_attr attr = {};
 8012984:	2300      	movs	r3, #0
 8012986:	9304      	str	r3, [sp, #16]
 8012988:	9305      	str	r3, [sp, #20]
 801298a:	9306      	str	r3, [sp, #24]
 801298c:	9307      	str	r3, [sp, #28]
 801298e:	9308      	str	r3, [sp, #32]
		start_handle = sys_le16_to_cpu(data->start_handle);
 8012990:	f8b5 8000 	ldrh.w	r8, [r5]
 8012994:	fa1f f388 	uxth.w	r3, r8
		if (!start_handle) {
 8012998:	2b00      	cmp	r3, #0
 801299a:	d0b1      	beq.n	8012900 <parse_service+0x38>
		end_handle = sys_le16_to_cpu(data->end_handle);
 801299c:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 80129a0:	fa1f f78b 	uxth.w	r7, fp
		if (!end_handle || end_handle < start_handle) {
 80129a4:	2f00      	cmp	r7, #0
 80129a6:	d0ab      	beq.n	8012900 <parse_service+0x38>
 80129a8:	42bb      	cmp	r3, r7
 80129aa:	d8a9      	bhi.n	8012900 <parse_service+0x38>
		switch (u.uuid.type) {
 80129ac:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d0bc      	beq.n	801292e <parse_service+0x66>
 80129b4:	2b02      	cmp	r3, #2
 80129b6:	d0c1      	beq.n	801293c <parse_service+0x74>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
 80129b8:	2300      	movs	r3, #0
 80129ba:	f88d 3004 	strb.w	r3, [sp, #4]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
 80129be:	7c33      	ldrb	r3, [r6, #16]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d1c2      	bne.n	801294a <parse_service+0x82>
			uuid_svc.val = BT_UUID_16(BT_UUID_GATT_PRIMARY)->val;
 80129c4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80129c8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80129cc:	e7c1      	b.n	8012952 <parse_service+0x8a>
			return 0;
 80129ce:	2700      	movs	r7, #0
 80129d0:	e79c      	b.n	801290c <parse_service+0x44>
	if (length == 0U && end_handle) {
 80129d2:	2c00      	cmp	r4, #0
 80129d4:	d194      	bne.n	8012900 <parse_service+0x38>
 80129d6:	2f00      	cmp	r7, #0
 80129d8:	d092      	beq.n	8012900 <parse_service+0x38>
 80129da:	e797      	b.n	801290c <parse_service+0x44>
 80129dc:	08022bc0 	.word	0x08022bc0
 80129e0:	08022b90 	.word	0x08022b90
 80129e4:	080275f4 	.word	0x080275f4

080129e8 <cf_write>:
{
 80129e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129ec:	461d      	mov	r5, r3
 80129ee:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
 80129f2:	2b01      	cmp	r3, #1
 80129f4:	d840      	bhi.n	8012a78 <cf_write+0x90>
 80129f6:	4606      	mov	r6, r0
 80129f8:	4690      	mov	r8, r2
	if (offset + len > sizeof(cfg->data)) {
 80129fa:	462f      	mov	r7, r5
 80129fc:	442b      	add	r3, r5
 80129fe:	2b01      	cmp	r3, #1
 8012a00:	d83d      	bhi.n	8012a7e <cf_write+0x96>
	cfg = find_cf_cfg(conn);
 8012a02:	f7ff fe1d 	bl	8012640 <find_cf_cfg>
	if (!cfg) {
 8012a06:	4604      	mov	r4, r0
 8012a08:	b1f0      	cbz	r0, 8012a48 <cf_write+0x60>
	if (!cfg) {
 8012a0a:	b30c      	cbz	r4, 8012a50 <cf_write+0x68>
	if (!cf_set_value(cfg, value, len)) {
 8012a0c:	462a      	mov	r2, r5
 8012a0e:	4641      	mov	r1, r8
 8012a10:	4620      	mov	r0, r4
 8012a12:	f00b ff69 	bl	801e8e8 <cf_set_value>
 8012a16:	b3a8      	cbz	r0, 8012a84 <cf_write+0x9c>
 8012a18:	2207      	movs	r2, #7
 8012a1a:	f106 0188 	add.w	r1, r6, #136	; 0x88
 8012a1e:	1c60      	adds	r0, r4, #1
 8012a20:	f009 ff45 	bl	801c8ae <memcpy>
	cfg->id = conn->id;
 8012a24:	7a33      	ldrb	r3, [r6, #8]
 8012a26:	f804 3b0c 	strb.w	r3, [r4], #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8012a2a:	f3bf 8f5b 	dmb	ish
 8012a2e:	e854 3f00 	ldrex	r3, [r4]
 8012a32:	f043 0301 	orr.w	r3, r3, #1
 8012a36:	e844 3200 	strex	r2, r3, [r4]
 8012a3a:	2a00      	cmp	r2, #0
 8012a3c:	d1f7      	bne.n	8012a2e <cf_write+0x46>
 8012a3e:	f3bf 8f5b 	dmb	ish
}
 8012a42:	4638      	mov	r0, r7
 8012a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_cf_cfg(NULL);
 8012a48:	f7ff fdfa 	bl	8012640 <find_cf_cfg>
 8012a4c:	4604      	mov	r4, r0
 8012a4e:	e7dc      	b.n	8012a0a <cf_write+0x22>
		BT_WARN("No space to store Client Supported Features");
 8012a50:	f04f 0100 	mov.w	r1, #0
 8012a54:	2302      	movs	r3, #2
 8012a56:	f363 0102 	bfi	r1, r3, #0, #3
 8012a5a:	f36f 01c5 	bfc	r1, #3, #3
 8012a5e:	4b0b      	ldr	r3, [pc, #44]	; (8012a8c <cf_write+0xa4>)
 8012a60:	4a0b      	ldr	r2, [pc, #44]	; (8012a90 <cf_write+0xa8>)
 8012a62:	1a9b      	subs	r3, r3, r2
 8012a64:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8012a68:	f363 118f 	bfi	r1, r3, #6, #10
 8012a6c:	4809      	ldr	r0, [pc, #36]	; (8012a94 <cf_write+0xac>)
 8012a6e:	f7f3 fed7 	bl	8006820 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
 8012a72:	f06f 0710 	mvn.w	r7, #16
 8012a76:	e7e4      	b.n	8012a42 <cf_write+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
 8012a78:	f06f 0706 	mvn.w	r7, #6
 8012a7c:	e7e1      	b.n	8012a42 <cf_write+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
 8012a7e:	f06f 070c 	mvn.w	r7, #12
 8012a82:	e7de      	b.n	8012a42 <cf_write+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
 8012a84:	f06f 0712 	mvn.w	r7, #18
 8012a88:	e7db      	b.n	8012a42 <cf_write+0x5a>
 8012a8a:	bf00      	nop
 8012a8c:	08022bc0 	.word	0x08022bc0
 8012a90:	08022b90 	.word	0x08022b90
 8012a94:	08027608 	.word	0x08027608

08012a98 <sc_store>:
{
 8012a98:	b530      	push	{r4, r5, lr}
 8012a9a:	b08d      	sub	sp, #52	; 0x34
 8012a9c:	4604      	mov	r4, r0
	if (cfg->id) {
 8012a9e:	7802      	ldrb	r2, [r0, #0]
 8012aa0:	b1aa      	cbz	r2, 8012ace <sc_store+0x36>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
 8012aa2:	ad02      	add	r5, sp, #8
 8012aa4:	2104      	movs	r1, #4
 8012aa6:	4628      	mov	r0, r5
 8012aa8:	f7f2 fb84 	bl	80051b4 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
 8012aac:	9500      	str	r5, [sp, #0]
 8012aae:	1c63      	adds	r3, r4, #1
 8012ab0:	4a14      	ldr	r2, [pc, #80]	; (8012b04 <sc_store+0x6c>)
 8012ab2:	2124      	movs	r1, #36	; 0x24
 8012ab4:	a803      	add	r0, sp, #12
 8012ab6:	f7f9 f96b 	bl	800bd90 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
 8012aba:	2204      	movs	r2, #4
 8012abc:	f104 0108 	add.w	r1, r4, #8
 8012ac0:	a803      	add	r0, sp, #12
 8012ac2:	f7f5 fd71 	bl	80085a8 <settings_save_one>
	if (err) {
 8012ac6:	4601      	mov	r1, r0
 8012ac8:	b950      	cbnz	r0, 8012ae0 <sc_store+0x48>
}
 8012aca:	b00d      	add	sp, #52	; 0x34
 8012acc:	bd30      	pop	{r4, r5, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
 8012ace:	2300      	movs	r3, #0
 8012ad0:	9300      	str	r3, [sp, #0]
 8012ad2:	1c43      	adds	r3, r0, #1
 8012ad4:	4a0b      	ldr	r2, [pc, #44]	; (8012b04 <sc_store+0x6c>)
 8012ad6:	2124      	movs	r1, #36	; 0x24
 8012ad8:	a803      	add	r0, sp, #12
 8012ada:	f7f9 f959 	bl	800bd90 <bt_settings_encode_key>
 8012ade:	e7ec      	b.n	8012aba <sc_store+0x22>
		BT_ERR("failed to store SC (err %d)", err);
 8012ae0:	f04f 0200 	mov.w	r2, #0
 8012ae4:	2301      	movs	r3, #1
 8012ae6:	f363 0202 	bfi	r2, r3, #0, #3
 8012aea:	f36f 02c5 	bfc	r2, #3, #3
 8012aee:	4b06      	ldr	r3, [pc, #24]	; (8012b08 <sc_store+0x70>)
 8012af0:	4806      	ldr	r0, [pc, #24]	; (8012b0c <sc_store+0x74>)
 8012af2:	1a1b      	subs	r3, r3, r0
 8012af4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8012af8:	f363 128f 	bfi	r2, r3, #6, #10
 8012afc:	4804      	ldr	r0, [pc, #16]	; (8012b10 <sc_store+0x78>)
 8012afe:	f7f3 fd1f 	bl	8006540 <log_1>
		return;
 8012b02:	e7e2      	b.n	8012aca <sc_store+0x32>
 8012b04:	08027634 	.word	0x08027634
 8012b08:	08022bc0 	.word	0x08022bc0
 8012b0c:	08022b90 	.word	0x08022b90
 8012b10:	08027638 	.word	0x08027638

08012b14 <sc_save>:
{
 8012b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b18:	b082      	sub	sp, #8
 8012b1a:	4607      	mov	r7, r0
 8012b1c:	4688      	mov	r8, r1
 8012b1e:	4616      	mov	r6, r2
 8012b20:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
 8012b22:	f7ff fdb7 	bl	8012694 <find_sc_cfg>
	if (!cfg) {
 8012b26:	4604      	mov	r4, r0
 8012b28:	b1a8      	cbz	r0, 8012b56 <sc_save+0x42>
	if (!(cfg->data.start || cfg->data.end)) {
 8012b2a:	8923      	ldrh	r3, [r4, #8]
 8012b2c:	b90b      	cbnz	r3, 8012b32 <sc_save+0x1e>
 8012b2e:	8963      	ldrh	r3, [r4, #10]
 8012b30:	b393      	cbz	r3, 8012b98 <sc_save+0x84>
	modified = update_range(&cfg->data.start, &cfg->data.end, start, end);
 8012b32:	462b      	mov	r3, r5
 8012b34:	4632      	mov	r2, r6
 8012b36:	f104 010a 	add.w	r1, r4, #10
 8012b3a:	f104 0008 	add.w	r0, r4, #8
 8012b3e:	f00b febe 	bl	801e8be <update_range>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
 8012b42:	b128      	cbz	r0, 8012b50 <sc_save+0x3c>
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
 8012b44:	4621      	mov	r1, r4
 8012b46:	f811 0b01 	ldrb.w	r0, [r1], #1
 8012b4a:	f00a fb16 	bl	801d17a <bt_addr_le_is_bonded>
 8012b4e:	bb30      	cbnz	r0, 8012b9e <sc_save+0x8a>
}
 8012b50:	b002      	add	sp, #8
 8012b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
 8012b56:	9000      	str	r0, [sp, #0]
 8012b58:	f8cd 0003 	str.w	r0, [sp, #3]
 8012b5c:	4669      	mov	r1, sp
 8012b5e:	f7ff fd99 	bl	8012694 <find_sc_cfg>
		if (!cfg) {
 8012b62:	4604      	mov	r4, r0
 8012b64:	b130      	cbz	r0, 8012b74 <sc_save+0x60>
		cfg->id = id;
 8012b66:	f800 7b01 	strb.w	r7, [r0], #1
 8012b6a:	2207      	movs	r2, #7
 8012b6c:	4641      	mov	r1, r8
 8012b6e:	f009 fe9e 	bl	801c8ae <memcpy>
 8012b72:	e7da      	b.n	8012b2a <sc_save+0x16>
			BT_ERR("unable to save SC: no cfg left");
 8012b74:	f04f 0100 	mov.w	r1, #0
 8012b78:	2301      	movs	r3, #1
 8012b7a:	f363 0102 	bfi	r1, r3, #0, #3
 8012b7e:	f36f 01c5 	bfc	r1, #3, #3
 8012b82:	4b09      	ldr	r3, [pc, #36]	; (8012ba8 <sc_save+0x94>)
 8012b84:	4a09      	ldr	r2, [pc, #36]	; (8012bac <sc_save+0x98>)
 8012b86:	1a9b      	subs	r3, r3, r2
 8012b88:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8012b8c:	f363 118f 	bfi	r1, r3, #6, #10
 8012b90:	4807      	ldr	r0, [pc, #28]	; (8012bb0 <sc_save+0x9c>)
 8012b92:	f7f3 fe45 	bl	8006820 <log_0>
			return;
 8012b96:	e7db      	b.n	8012b50 <sc_save+0x3c>
		cfg->data.start = start;
 8012b98:	8126      	strh	r6, [r4, #8]
		cfg->data.end = end;
 8012b9a:	8165      	strh	r5, [r4, #10]
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
 8012b9c:	e7d2      	b.n	8012b44 <sc_save+0x30>
		sc_store(cfg);
 8012b9e:	4620      	mov	r0, r4
 8012ba0:	f7ff ff7a 	bl	8012a98 <sc_store>
 8012ba4:	e7d4      	b.n	8012b50 <sc_save+0x3c>
 8012ba6:	bf00      	nop
 8012ba8:	08022bc0 	.word	0x08022bc0
 8012bac:	08022b90 	.word	0x08022b90
 8012bb0:	08027654 	.word	0x08027654

08012bb4 <bt_gatt_store_cf>:
{
 8012bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012bb6:	b08d      	sub	sp, #52	; 0x34
 8012bb8:	4604      	mov	r4, r0
	cfg = find_cf_cfg(conn);
 8012bba:	f7ff fd41 	bl	8012640 <find_cf_cfg>
	if (!cfg) {
 8012bbe:	4605      	mov	r5, r0
 8012bc0:	b348      	cbz	r0, 8012c16 <bt_gatt_store_cf+0x62>
		str = (char *)cfg->data;
 8012bc2:	f100 0608 	add.w	r6, r0, #8
		if (conn->id) {
 8012bc6:	7a22      	ldrb	r2, [r4, #8]
 8012bc8:	b9b2      	cbnz	r2, 8012bf8 <bt_gatt_store_cf+0x44>
		len = sizeof(cfg->data);
 8012bca:	2701      	movs	r7, #1
	if (!cfg || !conn->id) {
 8012bcc:	b10d      	cbz	r5, 8012bd2 <bt_gatt_store_cf+0x1e>
 8012bce:	7a23      	ldrb	r3, [r4, #8]
 8012bd0:	b943      	cbnz	r3, 8012be4 <bt_gatt_store_cf+0x30>
		bt_settings_encode_key(key, sizeof(key), "cf",
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	9300      	str	r3, [sp, #0]
 8012bd6:	f104 0388 	add.w	r3, r4, #136	; 0x88
 8012bda:	4a1a      	ldr	r2, [pc, #104]	; (8012c44 <bt_gatt_store_cf+0x90>)
 8012bdc:	2124      	movs	r1, #36	; 0x24
 8012bde:	a803      	add	r0, sp, #12
 8012be0:	f7f9 f8d6 	bl	800bd90 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
 8012be4:	463a      	mov	r2, r7
 8012be6:	4631      	mov	r1, r6
 8012be8:	a803      	add	r0, sp, #12
 8012bea:	f7f5 fcdd 	bl	80085a8 <settings_save_one>
	if (err) {
 8012bee:	4604      	mov	r4, r0
 8012bf0:	b9a0      	cbnz	r0, 8012c1c <bt_gatt_store_cf+0x68>
}
 8012bf2:	4620      	mov	r0, r4
 8012bf4:	b00d      	add	sp, #52	; 0x34
 8012bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			u8_to_dec(id_str, sizeof(id_str), conn->id);
 8012bf8:	af02      	add	r7, sp, #8
 8012bfa:	2104      	movs	r1, #4
 8012bfc:	4638      	mov	r0, r7
 8012bfe:	f7f2 fad9 	bl	80051b4 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
 8012c02:	9700      	str	r7, [sp, #0]
 8012c04:	f104 0388 	add.w	r3, r4, #136	; 0x88
 8012c08:	4a0e      	ldr	r2, [pc, #56]	; (8012c44 <bt_gatt_store_cf+0x90>)
 8012c0a:	2124      	movs	r1, #36	; 0x24
 8012c0c:	a803      	add	r0, sp, #12
 8012c0e:	f7f9 f8bf 	bl	800bd90 <bt_settings_encode_key>
		len = sizeof(cfg->data);
 8012c12:	2701      	movs	r7, #1
 8012c14:	e7da      	b.n	8012bcc <bt_gatt_store_cf+0x18>
		str = NULL;
 8012c16:	4606      	mov	r6, r0
		len = 0;
 8012c18:	2700      	movs	r7, #0
 8012c1a:	e7d7      	b.n	8012bcc <bt_gatt_store_cf+0x18>
		BT_ERR("Failed to store Client Features (err %d)", err);
 8012c1c:	f04f 0200 	mov.w	r2, #0
 8012c20:	2301      	movs	r3, #1
 8012c22:	f363 0202 	bfi	r2, r3, #0, #3
 8012c26:	f36f 02c5 	bfc	r2, #3, #3
 8012c2a:	4b07      	ldr	r3, [pc, #28]	; (8012c48 <bt_gatt_store_cf+0x94>)
 8012c2c:	4907      	ldr	r1, [pc, #28]	; (8012c4c <bt_gatt_store_cf+0x98>)
 8012c2e:	1a5b      	subs	r3, r3, r1
 8012c30:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8012c34:	f363 128f 	bfi	r2, r3, #6, #10
 8012c38:	4601      	mov	r1, r0
 8012c3a:	4805      	ldr	r0, [pc, #20]	; (8012c50 <bt_gatt_store_cf+0x9c>)
 8012c3c:	f7f3 fc80 	bl	8006540 <log_1>
		return err;
 8012c40:	e7d7      	b.n	8012bf2 <bt_gatt_store_cf+0x3e>
 8012c42:	bf00      	nop
 8012c44:	08027674 	.word	0x08027674
 8012c48:	08022bc0 	.word	0x08022bc0
 8012c4c:	08022b90 	.word	0x08022b90
 8012c50:	08027678 	.word	0x08027678

08012c54 <bt_gatt_clear_sc>:
{
 8012c54:	b530      	push	{r4, r5, lr}
 8012c56:	b08d      	sub	sp, #52	; 0x34
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
 8012c58:	f7ff fd1c 	bl	8012694 <find_sc_cfg>
	if (!cfg) {
 8012c5c:	b1b0      	cbz	r0, 8012c8c <bt_gatt_clear_sc+0x38>
 8012c5e:	4604      	mov	r4, r0
		if (cfg->id) {
 8012c60:	7802      	ldrb	r2, [r0, #0]
 8012c62:	b1b2      	cbz	r2, 8012c92 <bt_gatt_clear_sc+0x3e>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
 8012c64:	ad02      	add	r5, sp, #8
 8012c66:	2104      	movs	r1, #4
 8012c68:	4628      	mov	r0, r5
 8012c6a:	f7f2 faa3 	bl	80051b4 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
 8012c6e:	9500      	str	r5, [sp, #0]
 8012c70:	1c63      	adds	r3, r4, #1
 8012c72:	4a15      	ldr	r2, [pc, #84]	; (8012cc8 <bt_gatt_clear_sc+0x74>)
 8012c74:	2124      	movs	r1, #36	; 0x24
 8012c76:	a803      	add	r0, sp, #12
 8012c78:	f7f9 f88a 	bl	800bd90 <bt_settings_encode_key>
		err = settings_delete(key);
 8012c7c:	a803      	add	r0, sp, #12
 8012c7e:	f008 fe57 	bl	801b930 <settings_delete>
		if (err) {
 8012c82:	4601      	mov	r1, r0
 8012c84:	b970      	cbnz	r0, 8012ca4 <bt_gatt_clear_sc+0x50>
	clear_sc_cfg(cfg);
 8012c86:	4620      	mov	r0, r4
 8012c88:	f00b ffde 	bl	801ec48 <clear_sc_cfg>
}
 8012c8c:	2000      	movs	r0, #0
 8012c8e:	b00d      	add	sp, #52	; 0x34
 8012c90:	bd30      	pop	{r4, r5, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
 8012c92:	2300      	movs	r3, #0
 8012c94:	9300      	str	r3, [sp, #0]
 8012c96:	1c43      	adds	r3, r0, #1
 8012c98:	4a0b      	ldr	r2, [pc, #44]	; (8012cc8 <bt_gatt_clear_sc+0x74>)
 8012c9a:	2124      	movs	r1, #36	; 0x24
 8012c9c:	a803      	add	r0, sp, #12
 8012c9e:	f7f9 f877 	bl	800bd90 <bt_settings_encode_key>
 8012ca2:	e7eb      	b.n	8012c7c <bt_gatt_clear_sc+0x28>
			BT_ERR("failed to delete SC (err %d)", err);
 8012ca4:	f04f 0200 	mov.w	r2, #0
 8012ca8:	2301      	movs	r3, #1
 8012caa:	f363 0202 	bfi	r2, r3, #0, #3
 8012cae:	f36f 02c5 	bfc	r2, #3, #3
 8012cb2:	4b06      	ldr	r3, [pc, #24]	; (8012ccc <bt_gatt_clear_sc+0x78>)
 8012cb4:	4806      	ldr	r0, [pc, #24]	; (8012cd0 <bt_gatt_clear_sc+0x7c>)
 8012cb6:	1a1b      	subs	r3, r3, r0
 8012cb8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8012cbc:	f363 128f 	bfi	r2, r3, #6, #10
 8012cc0:	4804      	ldr	r0, [pc, #16]	; (8012cd4 <bt_gatt_clear_sc+0x80>)
 8012cc2:	f7f3 fc3d 	bl	8006540 <log_1>
 8012cc6:	e7de      	b.n	8012c86 <bt_gatt_clear_sc+0x32>
 8012cc8:	08027634 	.word	0x08027634
 8012ccc:	08022bc0 	.word	0x08022bc0
 8012cd0:	08022b90 	.word	0x08022b90
 8012cd4:	080276a4 	.word	0x080276a4

08012cd8 <sc_clear>:
{
 8012cd8:	b538      	push	{r3, r4, r5, lr}
 8012cda:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
 8012cdc:	f100 0588 	add.w	r5, r0, #136	; 0x88
 8012ce0:	4629      	mov	r1, r5
 8012ce2:	7a00      	ldrb	r0, [r0, #8]
 8012ce4:	f00a fa49 	bl	801d17a <bt_addr_le_is_bonded>
 8012ce8:	b1c0      	cbz	r0, 8012d1c <sc_clear+0x44>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
 8012cea:	4629      	mov	r1, r5
 8012cec:	7a20      	ldrb	r0, [r4, #8]
 8012cee:	f7ff ffb1 	bl	8012c54 <bt_gatt_clear_sc>
		if (err) {
 8012cf2:	4601      	mov	r1, r0
 8012cf4:	b900      	cbnz	r0, 8012cf8 <sc_clear+0x20>
}
 8012cf6:	bd38      	pop	{r3, r4, r5, pc}
			BT_ERR("Failed to clear SC %d", err);
 8012cf8:	f04f 0200 	mov.w	r2, #0
 8012cfc:	2301      	movs	r3, #1
 8012cfe:	f363 0202 	bfi	r2, r3, #0, #3
 8012d02:	f36f 02c5 	bfc	r2, #3, #3
 8012d06:	4b0a      	ldr	r3, [pc, #40]	; (8012d30 <sc_clear+0x58>)
 8012d08:	480a      	ldr	r0, [pc, #40]	; (8012d34 <sc_clear+0x5c>)
 8012d0a:	1a1b      	subs	r3, r3, r0
 8012d0c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8012d10:	f363 128f 	bfi	r2, r3, #6, #10
 8012d14:	4808      	ldr	r0, [pc, #32]	; (8012d38 <sc_clear+0x60>)
 8012d16:	f7f3 fc13 	bl	8006540 <log_1>
 8012d1a:	e7ec      	b.n	8012cf6 <sc_clear+0x1e>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
 8012d1c:	4629      	mov	r1, r5
 8012d1e:	7a20      	ldrb	r0, [r4, #8]
 8012d20:	f7ff fcb8 	bl	8012694 <find_sc_cfg>
		if (cfg) {
 8012d24:	2800      	cmp	r0, #0
 8012d26:	d0e6      	beq.n	8012cf6 <sc_clear+0x1e>
			clear_sc_cfg(cfg);
 8012d28:	f00b ff8e 	bl	801ec48 <clear_sc_cfg>
}
 8012d2c:	e7e3      	b.n	8012cf6 <sc_clear+0x1e>
 8012d2e:	bf00      	nop
 8012d30:	08022bc0 	.word	0x08022bc0
 8012d34:	08022b90 	.word	0x08022b90
 8012d38:	080276c4 	.word	0x080276c4

08012d3c <remove_peer_from_attr>:
{
 8012d3c:	b508      	push	{r3, lr}
 8012d3e:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
 8012d40:	6881      	ldr	r1, [r0, #8]
 8012d42:	4a08      	ldr	r2, [pc, #32]	; (8012d64 <remove_peer_from_attr+0x28>)
 8012d44:	4291      	cmp	r1, r2
 8012d46:	d001      	beq.n	8012d4c <remove_peer_from_attr+0x10>
}
 8012d48:	2001      	movs	r0, #1
 8012d4a:	bd08      	pop	{r3, pc}
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
 8012d4c:	791a      	ldrb	r2, [r3, #4]
 8012d4e:	6819      	ldr	r1, [r3, #0]
 8012d50:	68c0      	ldr	r0, [r0, #12]
 8012d52:	f00b febf 	bl	801ead4 <ccc_find_cfg>
	if (cfg) {
 8012d56:	2800      	cmp	r0, #0
 8012d58:	d0f6      	beq.n	8012d48 <remove_peer_from_attr+0xc>
		memset(cfg, 0, sizeof(*cfg));
 8012d5a:	220a      	movs	r2, #10
 8012d5c:	2100      	movs	r1, #0
 8012d5e:	f009 fdcb 	bl	801c8f8 <memset>
 8012d62:	e7f1      	b.n	8012d48 <remove_peer_from_attr+0xc>
 8012d64:	080127e9 	.word	0x080127e9

08012d68 <sc_indicate_rsp>:
{
 8012d68:	b510      	push	{r4, lr}
 8012d6a:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8012d6c:	4b1a      	ldr	r3, [pc, #104]	; (8012dd8 <sc_indicate_rsp+0x70>)
 8012d6e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8012d72:	f3bf 8f5b 	dmb	ish
 8012d76:	e852 1f00 	ldrex	r1, [r2]
 8012d7a:	f021 0102 	bic.w	r1, r1, #2
 8012d7e:	e842 1000 	strex	r0, r1, [r2]
 8012d82:	2800      	cmp	r0, #0
 8012d84:	d1f7      	bne.n	8012d76 <sc_indicate_rsp+0xe>
 8012d86:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8012d8a:	f3bf 8f5b 	dmb	ish
 8012d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012d90:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
 8012d94:	f013 0f01 	tst.w	r3, #1
 8012d98:	d116      	bne.n	8012dc8 <sc_indicate_rsp+0x60>
	cfg = find_cf_cfg(conn);
 8012d9a:	4620      	mov	r0, r4
 8012d9c:	f7ff fc50 	bl	8012640 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
 8012da0:	4603      	mov	r3, r0
 8012da2:	b180      	cbz	r0, 8012dc6 <sc_indicate_rsp+0x5e>
 8012da4:	7a02      	ldrb	r2, [r0, #8]
 8012da6:	f012 0f01 	tst.w	r2, #1
 8012daa:	d00c      	beq.n	8012dc6 <sc_indicate_rsp+0x5e>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
 8012dac:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8012dae:	f3bf 8f5b 	dmb	ish
 8012db2:	e853 2f00 	ldrex	r2, [r3]
 8012db6:	f042 0201 	orr.w	r2, r2, #1
 8012dba:	e843 2100 	strex	r1, r2, [r3]
 8012dbe:	2900      	cmp	r1, #0
 8012dc0:	d1f7      	bne.n	8012db2 <sc_indicate_rsp+0x4a>
 8012dc2:	f3bf 8f5b 	dmb	ish
}
 8012dc6:	bd10      	pop	{r4, pc}
 8012dc8:	2200      	movs	r2, #0
 8012dca:	2300      	movs	r3, #0
 8012dcc:	4903      	ldr	r1, [pc, #12]	; (8012ddc <sc_indicate_rsp+0x74>)
 8012dce:	4804      	ldr	r0, [pc, #16]	; (8012de0 <sc_indicate_rsp+0x78>)
 8012dd0:	f006 f84e 	bl	8018e70 <k_delayed_work_submit_to_queue>
 8012dd4:	e7e1      	b.n	8012d9a <sc_indicate_rsp+0x32>
 8012dd6:	bf00      	nop
 8012dd8:	20002640 	.word	0x20002640
 8012ddc:	20002658 	.word	0x20002658
 8012de0:	20003310 	.word	0x20003310

08012de4 <sc_commit>:
{
 8012de4:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8012de6:	4b10      	ldr	r3, [pc, #64]	; (8012e28 <sc_commit+0x44>)
 8012de8:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8012dec:	f3bf 8f5b 	dmb	ish
 8012df0:	e852 1f00 	ldrex	r1, [r2]
 8012df4:	f021 0102 	bic.w	r1, r1, #2
 8012df8:	e842 1000 	strex	r0, r1, [r2]
 8012dfc:	2800      	cmp	r0, #0
 8012dfe:	d1f7      	bne.n	8012df0 <sc_commit+0xc>
 8012e00:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8012e04:	f3bf 8f5b 	dmb	ish
 8012e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012e0a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
 8012e0e:	f013 0f01 	tst.w	r3, #1
 8012e12:	d101      	bne.n	8012e18 <sc_commit+0x34>
}
 8012e14:	2000      	movs	r0, #0
 8012e16:	bd08      	pop	{r3, pc}
 8012e18:	2264      	movs	r2, #100	; 0x64
 8012e1a:	2300      	movs	r3, #0
 8012e1c:	4903      	ldr	r1, [pc, #12]	; (8012e2c <sc_commit+0x48>)
 8012e1e:	4804      	ldr	r0, [pc, #16]	; (8012e30 <sc_commit+0x4c>)
 8012e20:	f006 f826 	bl	8018e70 <k_delayed_work_submit_to_queue>
 8012e24:	e7f6      	b.n	8012e14 <sc_commit+0x30>
 8012e26:	bf00      	nop
 8012e28:	20002640 	.word	0x20002640
 8012e2c:	20002658 	.word	0x20002658
 8012e30:	20003310 	.word	0x20003310

08012e34 <sc_indicate>:
{
 8012e34:	b510      	push	{r4, lr}
 8012e36:	4602      	mov	r2, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8012e38:	4c17      	ldr	r4, [pc, #92]	; (8012e98 <sc_indicate+0x64>)
 8012e3a:	f3bf 8f5b 	dmb	ish
 8012e3e:	e854 3f00 	ldrex	r3, [r4]
 8012e42:	f043 0001 	orr.w	r0, r3, #1
 8012e46:	e844 0c00 	strex	ip, r0, [r4]
 8012e4a:	f1bc 0f00 	cmp.w	ip, #0
 8012e4e:	d1f6      	bne.n	8012e3e <sc_indicate+0xa>
 8012e50:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
 8012e54:	f013 0f01 	tst.w	r3, #1
 8012e58:	d10d      	bne.n	8012e76 <sc_indicate+0x42>
		gatt_sc.start = start;
 8012e5a:	f1a4 0348 	sub.w	r3, r4, #72	; 0x48
 8012e5e:	829a      	strh	r2, [r3, #20]
		gatt_sc.end = end;
 8012e60:	82d9      	strh	r1, [r3, #22]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8012e62:	f3bf 8f5b 	dmb	ish
 8012e66:	4b0d      	ldr	r3, [pc, #52]	; (8012e9c <sc_indicate+0x68>)
 8012e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012e6a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
 8012e6e:	f013 0f02 	tst.w	r3, #2
 8012e72:	d00a      	beq.n	8012e8a <sc_indicate+0x56>
}
 8012e74:	bd10      	pop	{r4, pc}
	if (!update_range(&gatt_sc.start, &gatt_sc.end, start, end)) {
 8012e76:	4809      	ldr	r0, [pc, #36]	; (8012e9c <sc_indicate+0x68>)
 8012e78:	460b      	mov	r3, r1
 8012e7a:	f100 0116 	add.w	r1, r0, #22
 8012e7e:	3014      	adds	r0, #20
 8012e80:	f00b fd1d 	bl	801e8be <update_range>
 8012e84:	2800      	cmp	r0, #0
 8012e86:	d1ec      	bne.n	8012e62 <sc_indicate+0x2e>
 8012e88:	e7f4      	b.n	8012e74 <sc_indicate+0x40>
 8012e8a:	2264      	movs	r2, #100	; 0x64
 8012e8c:	2300      	movs	r3, #0
 8012e8e:	4904      	ldr	r1, [pc, #16]	; (8012ea0 <sc_indicate+0x6c>)
 8012e90:	4804      	ldr	r0, [pc, #16]	; (8012ea4 <sc_indicate+0x70>)
 8012e92:	f005 ffed 	bl	8018e70 <k_delayed_work_submit_to_queue>
 8012e96:	e7ed      	b.n	8012e74 <sc_indicate+0x40>
 8012e98:	20002688 	.word	0x20002688
 8012e9c:	20002640 	.word	0x20002640
 8012ea0:	20002658 	.word	0x20002658
 8012ea4:	20003310 	.word	0x20003310

08012ea8 <parse_characteristic>:
{
 8012ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012eac:	b08e      	sub	sp, #56	; 0x38
 8012eae:	4681      	mov	r9, r0
 8012eb0:	460f      	mov	r7, r1
 8012eb2:	4616      	mov	r6, r2
	switch (rsp->len) {
 8012eb4:	7809      	ldrb	r1, [r1, #0]
 8012eb6:	2907      	cmp	r1, #7
 8012eb8:	d01d      	beq.n	8012ef6 <parse_characteristic+0x4e>
 8012eba:	2915      	cmp	r1, #21
 8012ebc:	d024      	beq.n	8012f08 <parse_characteristic+0x60>
		BT_ERR("Invalid data len %u", rsp->len);
 8012ebe:	f04f 0200 	mov.w	r2, #0
 8012ec2:	2301      	movs	r3, #1
 8012ec4:	f363 0202 	bfi	r2, r3, #0, #3
 8012ec8:	f36f 02c5 	bfc	r2, #3, #3
 8012ecc:	4b3a      	ldr	r3, [pc, #232]	; (8012fb8 <parse_characteristic+0x110>)
 8012ece:	483b      	ldr	r0, [pc, #236]	; (8012fbc <parse_characteristic+0x114>)
 8012ed0:	1a1b      	subs	r3, r3, r0
 8012ed2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8012ed6:	f363 128f 	bfi	r2, r3, #6, #10
 8012eda:	4839      	ldr	r0, [pc, #228]	; (8012fc0 <parse_characteristic+0x118>)
 8012edc:	f7f3 fb30 	bl	8006540 <log_1>
	params->func(conn, NULL, params);
 8012ee0:	6873      	ldr	r3, [r6, #4]
 8012ee2:	4632      	mov	r2, r6
 8012ee4:	2100      	movs	r1, #0
 8012ee6:	4648      	mov	r0, r9
 8012ee8:	4798      	blx	r3
	return 0;
 8012eea:	f04f 0800 	mov.w	r8, #0
}
 8012eee:	4640      	mov	r0, r8
 8012ef0:	b00e      	add	sp, #56	; 0x38
 8012ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		u.uuid.type = BT_UUID_TYPE_16;
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	f88d 2004 	strb.w	r2, [sp, #4]
	for (length--, pdu = rsp->data; length >= rsp->len;
 8012efc:	3b01      	subs	r3, #1
 8012efe:	b29c      	uxth	r4, r3
 8012f00:	1c7d      	adds	r5, r7, #1
	uint16_t handle = 0U;
 8012f02:	f04f 0800 	mov.w	r8, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
 8012f06:	e035      	b.n	8012f74 <parse_characteristic+0xcc>
		u.uuid.type = BT_UUID_TYPE_128;
 8012f08:	2202      	movs	r2, #2
 8012f0a:	f88d 2004 	strb.w	r2, [sp, #4]
		break;
 8012f0e:	e7f5      	b.n	8012efc <parse_characteristic+0x54>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
 8012f10:	f8b5 3005 	ldrh.w	r3, [r5, #5]
 8012f14:	f8ad 3006 	strh.w	r3, [sp, #6]
			break;
 8012f18:	e03c      	b.n	8012f94 <parse_characteristic+0xec>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
 8012f1a:	2210      	movs	r2, #16
 8012f1c:	1d69      	adds	r1, r5, #5
 8012f1e:	f10d 0005 	add.w	r0, sp, #5
 8012f22:	f009 fcc4 	bl	801c8ae <memcpy>
			break;
 8012f26:	e035      	b.n	8012f94 <parse_characteristic+0xec>
		attr = (&(struct bt_gatt_attr)BT_GATT_CHRC(&u.uuid,
 8012f28:	2300      	movs	r3, #0
 8012f2a:	f88d 3018 	strb.w	r3, [sp, #24]
 8012f2e:	f642 0203 	movw	r2, #10243	; 0x2803
 8012f32:	f8ad 201a 	strh.w	r2, [sp, #26]
 8012f36:	aa06      	add	r2, sp, #24
 8012f38:	9209      	str	r2, [sp, #36]	; 0x24
 8012f3a:	4a22      	ldr	r2, [pc, #136]	; (8012fc4 <parse_characteristic+0x11c>)
 8012f3c:	920a      	str	r2, [sp, #40]	; 0x28
 8012f3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012f40:	ab01      	add	r3, sp, #4
 8012f42:	9307      	str	r3, [sp, #28]
 8012f44:	f8b5 3003 	ldrh.w	r3, [r5, #3]
 8012f48:	f8ad 3020 	strh.w	r3, [sp, #32]
 8012f4c:	78ab      	ldrb	r3, [r5, #2]
 8012f4e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 8012f52:	ab07      	add	r3, sp, #28
 8012f54:	930c      	str	r3, [sp, #48]	; 0x30
 8012f56:	2301      	movs	r3, #1
 8012f58:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
		attr->handle = handle;
 8012f5c:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
 8012f60:	6873      	ldr	r3, [r6, #4]
 8012f62:	4632      	mov	r2, r6
 8012f64:	a909      	add	r1, sp, #36	; 0x24
 8012f66:	4648      	mov	r0, r9
 8012f68:	4798      	blx	r3
 8012f6a:	b1e0      	cbz	r0, 8012fa6 <parse_characteristic+0xfe>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
 8012f6c:	783b      	ldrb	r3, [r7, #0]
 8012f6e:	1ae4      	subs	r4, r4, r3
 8012f70:	b2a4      	uxth	r4, r4
 8012f72:	441d      	add	r5, r3
	for (length--, pdu = rsp->data; length >= rsp->len;
 8012f74:	783b      	ldrb	r3, [r7, #0]
 8012f76:	429c      	cmp	r4, r3
 8012f78:	d318      	bcc.n	8012fac <parse_characteristic+0x104>
		handle = sys_le16_to_cpu(data->handle);
 8012f7a:	f8b5 a000 	ldrh.w	sl, [r5]
 8012f7e:	fa1f f88a 	uxth.w	r8, sl
		if (!handle) {
 8012f82:	f1b8 0f00 	cmp.w	r8, #0
 8012f86:	d0ab      	beq.n	8012ee0 <parse_characteristic+0x38>
		switch (u.uuid.type) {
 8012f88:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d0bf      	beq.n	8012f10 <parse_characteristic+0x68>
 8012f90:	2b02      	cmp	r3, #2
 8012f92:	d0c2      	beq.n	8012f1a <parse_characteristic+0x72>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
 8012f94:	6831      	ldr	r1, [r6, #0]
 8012f96:	2900      	cmp	r1, #0
 8012f98:	d0c6      	beq.n	8012f28 <parse_characteristic+0x80>
 8012f9a:	a801      	add	r0, sp, #4
 8012f9c:	f009 fd4d 	bl	801ca3a <bt_uuid_cmp>
 8012fa0:	2800      	cmp	r0, #0
 8012fa2:	d0c1      	beq.n	8012f28 <parse_characteristic+0x80>
 8012fa4:	e7e2      	b.n	8012f6c <parse_characteristic+0xc4>
			return 0;
 8012fa6:	f04f 0800 	mov.w	r8, #0
 8012faa:	e7a0      	b.n	8012eee <parse_characteristic+0x46>
	if (length == 0U && handle) {
 8012fac:	2c00      	cmp	r4, #0
 8012fae:	d197      	bne.n	8012ee0 <parse_characteristic+0x38>
 8012fb0:	f1b8 0f00 	cmp.w	r8, #0
 8012fb4:	d094      	beq.n	8012ee0 <parse_characteristic+0x38>
 8012fb6:	e79a      	b.n	8012eee <parse_characteristic+0x46>
 8012fb8:	08022bc0 	.word	0x08022bc0
 8012fbc:	08022b90 	.word	0x08022b90
 8012fc0:	080275f4 	.word	0x080275f4
 8012fc4:	0801f051 	.word	0x0801f051

08012fc8 <disconnected_cb>:
{
 8012fc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fcc:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
 8012fce:	6882      	ldr	r2, [r0, #8]
 8012fd0:	4b2c      	ldr	r3, [pc, #176]	; (8013084 <disconnected_cb+0xbc>)
 8012fd2:	429a      	cmp	r2, r3
 8012fd4:	d002      	beq.n	8012fdc <disconnected_cb+0x14>
}
 8012fd6:	2001      	movs	r0, #1
 8012fd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fdc:	4680      	mov	r8, r0
	ccc = attr->user_data;
 8012fde:	68c6      	ldr	r6, [r0, #12]
	if (!ccc->value) {
 8012fe0:	8fb3      	ldrh	r3, [r6, #60]	; 0x3c
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d0f7      	beq.n	8012fd6 <disconnected_cb+0xe>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
 8012fe6:	2400      	movs	r4, #0
	value_used = false;
 8012fe8:	46a2      	mov	sl, r4
 8012fea:	e003      	b.n	8012ff4 <disconnected_cb+0x2c>
				bt_conn_unref(tmp);
 8012fec:	4618      	mov	r0, r3
 8012fee:	f00a fb9f 	bl	801d730 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
 8012ff2:	3401      	adds	r4, #1
 8012ff4:	2c05      	cmp	r4, #5
 8012ff6:	d839      	bhi.n	801306c <disconnected_cb+0xa4>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
 8012ff8:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 8012ffc:	eb06 0545 	add.w	r5, r6, r5, lsl #1
		if (!cfg->value) {
 8013000:	892b      	ldrh	r3, [r5, #8]
 8013002:	2b00      	cmp	r3, #0
 8013004:	d0f5      	beq.n	8012ff2 <disconnected_cb+0x2a>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
 8013006:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 801300a:	f105 0901 	add.w	r9, r5, #1
 801300e:	464a      	mov	r2, r9
 8013010:	f816 1013 	ldrb.w	r1, [r6, r3, lsl #1]
 8013014:	4638      	mov	r0, r7
 8013016:	f00a fb31 	bl	801d67c <bt_conn_is_peer_addr_le>
 801301a:	b978      	cbnz	r0, 801303c <disconnected_cb+0x74>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
 801301c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8013020:	4649      	mov	r1, r9
 8013022:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
 8013026:	f7fd f9f9 	bl	801041c <bt_conn_lookup_addr_le>
			if (tmp) {
 801302a:	4603      	mov	r3, r0
 801302c:	2800      	cmp	r0, #0
 801302e:	d0e0      	beq.n	8012ff2 <disconnected_cb+0x2a>
				if (tmp->state == BT_CONN_CONNECTED) {
 8013030:	7b42      	ldrb	r2, [r0, #13]
 8013032:	2a07      	cmp	r2, #7
 8013034:	d1da      	bne.n	8012fec <disconnected_cb+0x24>
					value_used = true;
 8013036:	f04f 0a01 	mov.w	sl, #1
 801303a:	e7d7      	b.n	8012fec <disconnected_cb+0x24>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
 801303c:	f107 0b88 	add.w	fp, r7, #136	; 0x88
 8013040:	4659      	mov	r1, fp
 8013042:	7a38      	ldrb	r0, [r7, #8]
 8013044:	f00a f899 	bl	801d17a <bt_addr_le_is_bonded>
 8013048:	b950      	cbnz	r0, 8013060 <disconnected_cb+0x98>
				if (ccc == &sc_ccc) {
 801304a:	4b0f      	ldr	r3, [pc, #60]	; (8013088 <disconnected_cb+0xc0>)
 801304c:	429e      	cmp	r6, r3
 801304e:	d003      	beq.n	8013058 <disconnected_cb+0x90>
				clear_ccc_cfg(cfg);
 8013050:	4628      	mov	r0, r5
 8013052:	f00b fd60 	bl	801eb16 <clear_ccc_cfg>
 8013056:	e7cc      	b.n	8012ff2 <disconnected_cb+0x2a>
					sc_clear(conn);
 8013058:	4638      	mov	r0, r7
 801305a:	f7ff fe3d 	bl	8012cd8 <sc_clear>
 801305e:	e7f7      	b.n	8013050 <disconnected_cb+0x88>
 8013060:	2207      	movs	r2, #7
 8013062:	4659      	mov	r1, fp
 8013064:	4648      	mov	r0, r9
 8013066:	f009 fc22 	bl	801c8ae <memcpy>
}
 801306a:	e7c2      	b.n	8012ff2 <disconnected_cb+0x2a>
	if (!value_used) {
 801306c:	f1ba 0f00 	cmp.w	sl, #0
 8013070:	d1b1      	bne.n	8012fd6 <disconnected_cb+0xe>
		ccc->value = 0U;
 8013072:	2300      	movs	r3, #0
 8013074:	87b3      	strh	r3, [r6, #60]	; 0x3c
		if (ccc->cfg_changed) {
 8013076:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8013078:	2b00      	cmp	r3, #0
 801307a:	d0ac      	beq.n	8012fd6 <disconnected_cb+0xe>
			ccc->cfg_changed(attr, ccc->value);
 801307c:	2100      	movs	r1, #0
 801307e:	4640      	mov	r0, r8
 8013080:	4798      	blx	r3
 8013082:	e7a8      	b.n	8012fd6 <disconnected_cb+0xe>
 8013084:	080127e9 	.word	0x080127e9
 8013088:	20000c74 	.word	0x20000c74

0801308c <gatt_send>:
{
 801308c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013090:	4607      	mov	r7, r0
 8013092:	460d      	mov	r5, r1
	if (params) {
 8013094:	b1f3      	cbz	r3, 80130d4 <gatt_send+0x48>
 8013096:	4616      	mov	r6, r2
 8013098:	4698      	mov	r8, r3
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
 801309a:	481b      	ldr	r0, [pc, #108]	; (8013108 <gatt_send+0x7c>)
 801309c:	2100      	movs	r1, #0
 801309e:	f7ff f95b 	bl	8012358 <bt_att_req_alloc>
		if (!req) {
 80130a2:	4604      	mov	r4, r0
 80130a4:	b178      	cbz	r0, 80130c6 <gatt_send+0x3a>
		req->buf = buf;
 80130a6:	6105      	str	r5, [r0, #16]
		req->func = func;
 80130a8:	6046      	str	r6, [r0, #4]
		req->destroy = destroy;
 80130aa:	9b06      	ldr	r3, [sp, #24]
 80130ac:	6083      	str	r3, [r0, #8]
		req->user_data = params;
 80130ae:	f8c0 8018 	str.w	r8, [r0, #24]
		err = bt_att_req_send(conn, req);
 80130b2:	4601      	mov	r1, r0
 80130b4:	4638      	mov	r0, r7
 80130b6:	f00b fb6e 	bl	801e796 <bt_att_req_send>
		if (err) {
 80130ba:	4605      	mov	r5, r0
 80130bc:	b930      	cbnz	r0, 80130cc <gatt_send+0x40>
	if (err) {
 80130be:	b97d      	cbnz	r5, 80130e0 <gatt_send+0x54>
}
 80130c0:	4628      	mov	r0, r5
 80130c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -ENOMEM;
 80130c6:	f06f 050b 	mvn.w	r5, #11
 80130ca:	e7f9      	b.n	80130c0 <gatt_send+0x34>
			bt_att_req_free(req);
 80130cc:	4620      	mov	r0, r4
 80130ce:	f7ff f95b 	bl	8012388 <bt_att_req_free>
 80130d2:	e7f4      	b.n	80130be <gatt_send+0x32>
		err = bt_att_send(conn, buf, NULL, NULL);
 80130d4:	2300      	movs	r3, #0
 80130d6:	461a      	mov	r2, r3
 80130d8:	f00b fb0c 	bl	801e6f4 <bt_att_send>
 80130dc:	4605      	mov	r5, r0
 80130de:	e7ee      	b.n	80130be <gatt_send+0x32>
		BT_ERR("Error sending ATT PDU: %d", err);
 80130e0:	f04f 0200 	mov.w	r2, #0
 80130e4:	2301      	movs	r3, #1
 80130e6:	f363 0202 	bfi	r2, r3, #0, #3
 80130ea:	f36f 02c5 	bfc	r2, #3, #3
 80130ee:	4b07      	ldr	r3, [pc, #28]	; (801310c <gatt_send+0x80>)
 80130f0:	4907      	ldr	r1, [pc, #28]	; (8013110 <gatt_send+0x84>)
 80130f2:	1a5b      	subs	r3, r3, r1
 80130f4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80130f8:	f363 128f 	bfi	r2, r3, #6, #10
 80130fc:	4629      	mov	r1, r5
 80130fe:	4805      	ldr	r0, [pc, #20]	; (8013114 <gatt_send+0x88>)
 8013100:	f7f3 fa1e 	bl	8006540 <log_1>
 8013104:	e7dc      	b.n	80130c0 <gatt_send+0x34>
 8013106:	bf00      	nop
 8013108:	000493e0 	.word	0x000493e0
 801310c:	08022bc0 	.word	0x08022bc0
 8013110:	08022b90 	.word	0x08022b90
 8013114:	080276dc 	.word	0x080276dc

08013118 <gatt_indicate>:
{
 8013118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801311c:	b083      	sub	sp, #12
 801311e:	4607      	mov	r7, r0
 8013120:	4688      	mov	r8, r1
 8013122:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
 8013124:	8a12      	ldrh	r2, [r2, #16]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
 8013126:	3202      	adds	r2, #2
 8013128:	211d      	movs	r1, #29
 801312a:	f7fe fee1 	bl	8011ef0 <bt_att_create_pdu>
	if (!buf) {
 801312e:	b1f8      	cbz	r0, 8013170 <gatt_indicate+0x58>
 8013130:	4681      	mov	r9, r0
	ind = net_buf_add(buf, sizeof(*ind));
 8013132:	f100 0608 	add.w	r6, r0, #8
 8013136:	2102      	movs	r1, #2
 8013138:	4630      	mov	r0, r6
 801313a:	f00d f99f 	bl	802047c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
 801313e:	4605      	mov	r5, r0
 8013140:	f825 8b02 	strh.w	r8, [r5], #2
	net_buf_add(buf, params->len);
 8013144:	8a21      	ldrh	r1, [r4, #16]
 8013146:	4630      	mov	r0, r6
 8013148:	f00d f998 	bl	802047c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
 801314c:	8a22      	ldrh	r2, [r4, #16]
 801314e:	68e1      	ldr	r1, [r4, #12]
 8013150:	4628      	mov	r0, r5
 8013152:	f009 fbac 	bl	801c8ae <memcpy>
	if (!params->func) {
 8013156:	68a3      	ldr	r3, [r4, #8]
 8013158:	b1f3      	cbz	r3, 8013198 <gatt_indicate+0x80>
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
 801315a:	2300      	movs	r3, #0
 801315c:	9300      	str	r3, [sp, #0]
 801315e:	4623      	mov	r3, r4
 8013160:	4a11      	ldr	r2, [pc, #68]	; (80131a8 <gatt_indicate+0x90>)
 8013162:	4649      	mov	r1, r9
 8013164:	4638      	mov	r0, r7
 8013166:	f7ff ff91 	bl	801308c <gatt_send>
}
 801316a:	b003      	add	sp, #12
 801316c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_WARN("No buffer available to send indication");
 8013170:	f04f 0100 	mov.w	r1, #0
 8013174:	2302      	movs	r3, #2
 8013176:	f363 0102 	bfi	r1, r3, #0, #3
 801317a:	f36f 01c5 	bfc	r1, #3, #3
 801317e:	4b0b      	ldr	r3, [pc, #44]	; (80131ac <gatt_indicate+0x94>)
 8013180:	4a0b      	ldr	r2, [pc, #44]	; (80131b0 <gatt_indicate+0x98>)
 8013182:	1a9b      	subs	r3, r3, r2
 8013184:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8013188:	f363 118f 	bfi	r1, r3, #6, #10
 801318c:	4809      	ldr	r0, [pc, #36]	; (80131b4 <gatt_indicate+0x9c>)
 801318e:	f7f3 fb47 	bl	8006820 <log_0>
		return -ENOMEM;
 8013192:	f06f 000b 	mvn.w	r0, #11
 8013196:	e7e8      	b.n	801316a <gatt_indicate+0x52>
		return gatt_send(conn, buf, NULL, NULL, NULL);
 8013198:	2200      	movs	r2, #0
 801319a:	9200      	str	r2, [sp, #0]
 801319c:	4613      	mov	r3, r2
 801319e:	4649      	mov	r1, r9
 80131a0:	4638      	mov	r0, r7
 80131a2:	f7ff ff73 	bl	801308c <gatt_send>
 80131a6:	e7e0      	b.n	801316a <gatt_indicate+0x52>
 80131a8:	0801e985 	.word	0x0801e985
 80131ac:	08022bc0 	.word	0x08022bc0
 80131b0:	08022b90 	.word	0x08022b90
 80131b4:	080276f8 	.word	0x080276f8

080131b8 <read_included_uuid>:
{
 80131b8:	b570      	push	{r4, r5, r6, lr}
 80131ba:	b082      	sub	sp, #8
 80131bc:	4605      	mov	r5, r0
 80131be:	460c      	mov	r4, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
 80131c0:	2202      	movs	r2, #2
 80131c2:	210a      	movs	r1, #10
 80131c4:	f7fe fe94 	bl	8011ef0 <bt_att_create_pdu>
	if (!buf) {
 80131c8:	b180      	cbz	r0, 80131ec <read_included_uuid+0x34>
 80131ca:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
 80131cc:	2102      	movs	r1, #2
 80131ce:	3008      	adds	r0, #8
 80131d0:	f00d f954 	bl	802047c <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
 80131d4:	8963      	ldrh	r3, [r4, #10]
 80131d6:	8003      	strh	r3, [r0, #0]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
 80131d8:	2300      	movs	r3, #0
 80131da:	9300      	str	r3, [sp, #0]
 80131dc:	4623      	mov	r3, r4
 80131de:	4a05      	ldr	r2, [pc, #20]	; (80131f4 <read_included_uuid+0x3c>)
 80131e0:	4631      	mov	r1, r6
 80131e2:	4628      	mov	r0, r5
 80131e4:	f7ff ff52 	bl	801308c <gatt_send>
}
 80131e8:	b002      	add	sp, #8
 80131ea:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
 80131ec:	f06f 000b 	mvn.w	r0, #11
 80131f0:	e7fa      	b.n	80131e8 <read_included_uuid+0x30>
 80131f2:	bf00      	nop
 80131f4:	0801421d 	.word	0x0801421d

080131f8 <parse_include>:
{
 80131f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80131fc:	b08e      	sub	sp, #56	; 0x38
 80131fe:	4680      	mov	r8, r0
 8013200:	460f      	mov	r7, r1
 8013202:	4616      	mov	r6, r2
	switch (rsp->len) {
 8013204:	7809      	ldrb	r1, [r1, #0]
 8013206:	2906      	cmp	r1, #6
 8013208:	d00a      	beq.n	8013220 <parse_include+0x28>
 801320a:	2908      	cmp	r1, #8
 801320c:	d10c      	bne.n	8013228 <parse_include+0x30>
		u.uuid.type = BT_UUID_TYPE_16;
 801320e:	2200      	movs	r2, #0
 8013210:	f88d 2004 	strb.w	r2, [sp, #4]
	for (length--, pdu = rsp->data; length >= rsp->len;
 8013214:	3b01      	subs	r3, #1
 8013216:	b29c      	uxth	r4, r3
 8013218:	f107 0901 	add.w	r9, r7, #1
	uint16_t handle = 0U;
 801321c:	2500      	movs	r5, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
 801321e:	e048      	b.n	80132b2 <parse_include+0xba>
		u.uuid.type = BT_UUID_TYPE_128;
 8013220:	2202      	movs	r2, #2
 8013222:	f88d 2004 	strb.w	r2, [sp, #4]
		break;
 8013226:	e7f5      	b.n	8013214 <parse_include+0x1c>
		BT_ERR("Invalid data len %u", rsp->len);
 8013228:	f04f 0200 	mov.w	r2, #0
 801322c:	2301      	movs	r3, #1
 801322e:	f363 0202 	bfi	r2, r3, #0, #3
 8013232:	f36f 02c5 	bfc	r2, #3, #3
 8013236:	4b33      	ldr	r3, [pc, #204]	; (8013304 <parse_include+0x10c>)
 8013238:	4833      	ldr	r0, [pc, #204]	; (8013308 <parse_include+0x110>)
 801323a:	1a1b      	subs	r3, r3, r0
 801323c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8013240:	f363 128f 	bfi	r2, r3, #6, #10
 8013244:	4831      	ldr	r0, [pc, #196]	; (801330c <parse_include+0x114>)
 8013246:	f7f3 f97b 	bl	8006540 <log_1>
	params->func(conn, NULL, params);
 801324a:	6873      	ldr	r3, [r6, #4]
 801324c:	4632      	mov	r2, r6
 801324e:	2100      	movs	r1, #0
 8013250:	4640      	mov	r0, r8
 8013252:	4798      	blx	r3
	return 0;
 8013254:	2500      	movs	r5, #0
 8013256:	e00e      	b.n	8013276 <parse_include+0x7e>
			value.uuid = &u.uuid;
 8013258:	ab01      	add	r3, sp, #4
 801325a:	9306      	str	r3, [sp, #24]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
 801325c:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 8013260:	f8ad 3006 	strh.w	r3, [sp, #6]
			break;
 8013264:	e03e      	b.n	80132e4 <parse_include+0xec>
			params->_included.attr_handle = handle;
 8013266:	8135      	strh	r5, [r6, #8]
			params->_included.start_handle = value.start_handle;
 8013268:	8171      	strh	r1, [r6, #10]
			params->_included.end_handle = value.end_handle;
 801326a:	81b2      	strh	r2, [r6, #12]
			return read_included_uuid(conn, params);
 801326c:	4631      	mov	r1, r6
 801326e:	4640      	mov	r0, r8
 8013270:	f7ff ffa2 	bl	80131b8 <read_included_uuid>
 8013274:	b285      	uxth	r5, r0
}
 8013276:	4628      	mov	r0, r5
 8013278:	b00e      	add	sp, #56	; 0x38
 801327a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		attr = (&(struct bt_gatt_attr) {
 801327e:	2300      	movs	r3, #0
 8013280:	930a      	str	r3, [sp, #40]	; 0x28
 8013282:	930b      	str	r3, [sp, #44]	; 0x2c
 8013284:	930d      	str	r3, [sp, #52]	; 0x34
			.uuid = BT_UUID_GATT_INCLUDE,
 8013286:	f88d 3020 	strb.w	r3, [sp, #32]
 801328a:	f642 0302 	movw	r3, #10242	; 0x2802
 801328e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		attr = (&(struct bt_gatt_attr) {
 8013292:	ab08      	add	r3, sp, #32
 8013294:	9309      	str	r3, [sp, #36]	; 0x24
 8013296:	ab06      	add	r3, sp, #24
 8013298:	930c      	str	r3, [sp, #48]	; 0x30
		attr->handle = handle;
 801329a:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
 801329e:	6873      	ldr	r3, [r6, #4]
 80132a0:	4632      	mov	r2, r6
 80132a2:	a909      	add	r1, sp, #36	; 0x24
 80132a4:	4640      	mov	r0, r8
 80132a6:	4798      	blx	r3
 80132a8:	b328      	cbz	r0, 80132f6 <parse_include+0xfe>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
 80132aa:	783a      	ldrb	r2, [r7, #0]
 80132ac:	1aa4      	subs	r4, r4, r2
 80132ae:	b2a4      	uxth	r4, r4
 80132b0:	4491      	add	r9, r2
	for (length--, pdu = rsp->data; length >= rsp->len;
 80132b2:	783b      	ldrb	r3, [r7, #0]
 80132b4:	429c      	cmp	r4, r3
 80132b6:	d320      	bcc.n	80132fa <parse_include+0x102>
		handle = sys_le16_to_cpu(data->handle);
 80132b8:	f8b9 a000 	ldrh.w	sl, [r9]
 80132bc:	fa1f f58a 	uxth.w	r5, sl
		if (!handle) {
 80132c0:	2d00      	cmp	r5, #0
 80132c2:	d0c2      	beq.n	801324a <parse_include+0x52>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
 80132c4:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 80132c8:	b299      	uxth	r1, r3
 80132ca:	f8ad 301c 	strh.w	r3, [sp, #28]
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
 80132ce:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 80132d2:	b29a      	uxth	r2, r3
 80132d4:	f8ad 301e 	strh.w	r3, [sp, #30]
		switch (u.uuid.type) {
 80132d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d0bb      	beq.n	8013258 <parse_include+0x60>
 80132e0:	2b02      	cmp	r3, #2
 80132e2:	d0c0      	beq.n	8013266 <parse_include+0x6e>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
 80132e4:	6831      	ldr	r1, [r6, #0]
 80132e6:	2900      	cmp	r1, #0
 80132e8:	d0c9      	beq.n	801327e <parse_include+0x86>
 80132ea:	a801      	add	r0, sp, #4
 80132ec:	f009 fba5 	bl	801ca3a <bt_uuid_cmp>
 80132f0:	2800      	cmp	r0, #0
 80132f2:	d0c4      	beq.n	801327e <parse_include+0x86>
 80132f4:	e7d9      	b.n	80132aa <parse_include+0xb2>
			return 0;
 80132f6:	2500      	movs	r5, #0
 80132f8:	e7bd      	b.n	8013276 <parse_include+0x7e>
	if (length == 0U && handle) {
 80132fa:	2c00      	cmp	r4, #0
 80132fc:	d1a5      	bne.n	801324a <parse_include+0x52>
 80132fe:	2d00      	cmp	r5, #0
 8013300:	d0a3      	beq.n	801324a <parse_include+0x52>
 8013302:	e7b8      	b.n	8013276 <parse_include+0x7e>
 8013304:	08022bc0 	.word	0x08022bc0
 8013308:	08022b90 	.word	0x08022b90
 801330c:	080275f4 	.word	0x080275f4

08013310 <gatt_find_info>:
{
 8013310:	b570      	push	{r4, r5, r6, lr}
 8013312:	b082      	sub	sp, #8
 8013314:	4606      	mov	r6, r0
 8013316:	460c      	mov	r4, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_REQ, sizeof(*req));
 8013318:	2204      	movs	r2, #4
 801331a:	4611      	mov	r1, r2
 801331c:	f7fe fde8 	bl	8011ef0 <bt_att_create_pdu>
	if (!buf) {
 8013320:	b190      	cbz	r0, 8013348 <gatt_find_info+0x38>
 8013322:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
 8013324:	2104      	movs	r1, #4
 8013326:	3008      	adds	r0, #8
 8013328:	f00d f8a8 	bl	802047c <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
 801332c:	8923      	ldrh	r3, [r4, #8]
 801332e:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
 8013330:	89e3      	ldrh	r3, [r4, #14]
 8013332:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
 8013334:	2300      	movs	r3, #0
 8013336:	9300      	str	r3, [sp, #0]
 8013338:	4623      	mov	r3, r4
 801333a:	4a05      	ldr	r2, [pc, #20]	; (8013350 <gatt_find_info+0x40>)
 801333c:	4629      	mov	r1, r5
 801333e:	4630      	mov	r0, r6
 8013340:	f7ff fea4 	bl	801308c <gatt_send>
}
 8013344:	b002      	add	sp, #8
 8013346:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
 8013348:	f06f 000b 	mvn.w	r0, #11
 801334c:	e7fa      	b.n	8013344 <gatt_find_info+0x34>
 801334e:	bf00      	nop
 8013350:	080142d1 	.word	0x080142d1

08013354 <gatt_notify>:
{
 8013354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013358:	4606      	mov	r6, r0
 801335a:	460f      	mov	r7, r1
 801335c:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
 801335e:	8992      	ldrh	r2, [r2, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
 8013360:	3202      	adds	r2, #2
 8013362:	211b      	movs	r1, #27
 8013364:	f7fe fdc4 	bl	8011ef0 <bt_att_create_pdu>
	if (!buf) {
 8013368:	b1d0      	cbz	r0, 80133a0 <gatt_notify+0x4c>
 801336a:	4680      	mov	r8, r0
	nfy = net_buf_add(buf, sizeof(*nfy));
 801336c:	f100 0908 	add.w	r9, r0, #8
 8013370:	2102      	movs	r1, #2
 8013372:	4648      	mov	r0, r9
 8013374:	f00d f882 	bl	802047c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
 8013378:	4605      	mov	r5, r0
 801337a:	f825 7b02 	strh.w	r7, [r5], #2
	net_buf_add(buf, params->len);
 801337e:	89a1      	ldrh	r1, [r4, #12]
 8013380:	4648      	mov	r0, r9
 8013382:	f00d f87b 	bl	802047c <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
 8013386:	89a2      	ldrh	r2, [r4, #12]
 8013388:	68a1      	ldr	r1, [r4, #8]
 801338a:	4628      	mov	r0, r5
 801338c:	f009 fa8f 	bl	801c8ae <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
 8013390:	6963      	ldr	r3, [r4, #20]
 8013392:	6922      	ldr	r2, [r4, #16]
 8013394:	4641      	mov	r1, r8
 8013396:	4630      	mov	r0, r6
 8013398:	f00b f9ac 	bl	801e6f4 <bt_att_send>
}
 801339c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		BT_WARN("No buffer available to send notification");
 80133a0:	f04f 0100 	mov.w	r1, #0
 80133a4:	2302      	movs	r3, #2
 80133a6:	f363 0102 	bfi	r1, r3, #0, #3
 80133aa:	f36f 01c5 	bfc	r1, #3, #3
 80133ae:	4b06      	ldr	r3, [pc, #24]	; (80133c8 <gatt_notify+0x74>)
 80133b0:	4a06      	ldr	r2, [pc, #24]	; (80133cc <gatt_notify+0x78>)
 80133b2:	1a9b      	subs	r3, r3, r2
 80133b4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80133b8:	f363 118f 	bfi	r1, r3, #6, #10
 80133bc:	4804      	ldr	r0, [pc, #16]	; (80133d0 <gatt_notify+0x7c>)
 80133be:	f7f3 fa2f 	bl	8006820 <log_0>
		return -ENOMEM;
 80133c2:	f06f 000b 	mvn.w	r0, #11
 80133c6:	e7e9      	b.n	801339c <gatt_notify+0x48>
 80133c8:	08022bc0 	.word	0x08022bc0
 80133cc:	08022b90 	.word	0x08022b90
 80133d0:	08027720 	.word	0x08027720

080133d4 <notify_cb>:
{
 80133d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80133d8:	b083      	sub	sp, #12
 80133da:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
 80133dc:	6882      	ldr	r2, [r0, #8]
 80133de:	4b42      	ldr	r3, [pc, #264]	; (80134e8 <notify_cb+0x114>)
 80133e0:	429a      	cmp	r2, r3
 80133e2:	d003      	beq.n	80133ec <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
 80133e4:	2001      	movs	r0, #1
}
 80133e6:	b003      	add	sp, #12
 80133e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133ec:	4607      	mov	r7, r0
	ccc = attr->user_data;
 80133ee:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
 80133f0:	4b3e      	ldr	r3, [pc, #248]	; (80134ec <notify_cb+0x118>)
 80133f2:	429e      	cmp	r6, r3
 80133f4:	d031      	beq.n	801345a <notify_cb+0x86>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
 80133f6:	2400      	movs	r4, #0
 80133f8:	e047      	b.n	801348a <notify_cb+0xb6>
				sc = (struct sc_data *)data->ind_params->data;
 80133fa:	692b      	ldr	r3, [r5, #16]
 80133fc:	68da      	ldr	r2, [r3, #12]
				sc_save(cfg->id, &cfg->peer,
 80133fe:	eb08 0048 	add.w	r0, r8, r8, lsl #1
 8013402:	8853      	ldrh	r3, [r2, #2]
 8013404:	8812      	ldrh	r2, [r2, #0]
 8013406:	4621      	mov	r1, r4
 8013408:	4c39      	ldr	r4, [pc, #228]	; (80134f0 <notify_cb+0x11c>)
 801340a:	f814 0020 	ldrb.w	r0, [r4, r0, lsl #2]
 801340e:	f7ff fb81 	bl	8012b14 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
 8013412:	f108 0801 	add.w	r8, r8, #1
 8013416:	f1b8 0f0b 	cmp.w	r8, #11
 801341a:	d8ec      	bhi.n	80133f6 <notify_cb+0x22>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
 801341c:	eb08 0448 	add.w	r4, r8, r8, lsl #1
 8013420:	4b33      	ldr	r3, [pc, #204]	; (80134f0 <notify_cb+0x11c>)
 8013422:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013426:	3401      	adds	r4, #1
 8013428:	2300      	movs	r3, #0
 801342a:	9300      	str	r3, [sp, #0]
 801342c:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
 8013430:	2207      	movs	r2, #7
 8013432:	4669      	mov	r1, sp
 8013434:	4620      	mov	r0, r4
 8013436:	f009 fa22 	bl	801c87e <memcmp>
 801343a:	2800      	cmp	r0, #0
 801343c:	d0e9      	beq.n	8013412 <notify_cb+0x3e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
 801343e:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8013442:	2207      	movs	r2, #7
 8013444:	4621      	mov	r1, r4
 8013446:	482a      	ldr	r0, [pc, #168]	; (80134f0 <notify_cb+0x11c>)
 8013448:	f810 0023 	ldrb.w	r0, [r0, r3, lsl #2]
 801344c:	f7fd f816 	bl	801047c <bt_conn_lookup_state_le>
			if (!conn) {
 8013450:	2800      	cmp	r0, #0
 8013452:	d0d2      	beq.n	80133fa <notify_cb+0x26>
			bt_conn_unref(conn);
 8013454:	f00a f96c 	bl	801d730 <bt_conn_unref>
 8013458:	e7db      	b.n	8013412 <notify_cb+0x3e>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
 801345a:	f04f 0800 	mov.w	r8, #0
 801345e:	e7da      	b.n	8013416 <notify_cb+0x42>
			bt_conn_unref(conn);
 8013460:	f00a f966 	bl	801d730 <bt_conn_unref>
			continue;
 8013464:	e010      	b.n	8013488 <notify_cb+0xb4>
		if (data->type == BT_GATT_CCC_INDICATE) {
 8013466:	89ab      	ldrh	r3, [r5, #12]
 8013468:	2b02      	cmp	r3, #2
 801346a:	d032      	beq.n	80134d2 <notify_cb+0xfe>
			err = gatt_notify(conn, data->handle, data->nfy_params);
 801346c:	692a      	ldr	r2, [r5, #16]
 801346e:	88a9      	ldrh	r1, [r5, #4]
 8013470:	4640      	mov	r0, r8
 8013472:	f7ff ff6f 	bl	8013354 <gatt_notify>
 8013476:	4681      	mov	r9, r0
		bt_conn_unref(conn);
 8013478:	4640      	mov	r0, r8
 801347a:	f00a f959 	bl	801d730 <bt_conn_unref>
		if (err < 0) {
 801347e:	f1b9 0f00 	cmp.w	r9, #0
 8013482:	db2f      	blt.n	80134e4 <notify_cb+0x110>
		data->err = 0;
 8013484:	2300      	movs	r3, #0
 8013486:	60ab      	str	r3, [r5, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
 8013488:	3401      	adds	r4, #1
 801348a:	2c05      	cmp	r4, #5
 801348c:	d828      	bhi.n	80134e0 <notify_cb+0x10c>
		if (cfg->value != data->type) {
 801348e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8013492:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8013496:	891a      	ldrh	r2, [r3, #8]
 8013498:	89ab      	ldrh	r3, [r5, #12]
 801349a:	429a      	cmp	r2, r3
 801349c:	d1f4      	bne.n	8013488 <notify_cb+0xb4>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
 801349e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80134a2:	eb06 0143 	add.w	r1, r6, r3, lsl #1
 80134a6:	3101      	adds	r1, #1
 80134a8:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
 80134ac:	f7fc ffb6 	bl	801041c <bt_conn_lookup_addr_le>
		if (!conn) {
 80134b0:	4680      	mov	r8, r0
 80134b2:	2800      	cmp	r0, #0
 80134b4:	d0e8      	beq.n	8013488 <notify_cb+0xb4>
		if (conn->state != BT_CONN_CONNECTED) {
 80134b6:	7b43      	ldrb	r3, [r0, #13]
 80134b8:	2b07      	cmp	r3, #7
 80134ba:	d1d1      	bne.n	8013460 <notify_cb+0x8c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
 80134bc:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d0d1      	beq.n	8013466 <notify_cb+0x92>
 80134c2:	4639      	mov	r1, r7
 80134c4:	4798      	blx	r3
 80134c6:	2800      	cmp	r0, #0
 80134c8:	d1cd      	bne.n	8013466 <notify_cb+0x92>
			bt_conn_unref(conn);
 80134ca:	4640      	mov	r0, r8
 80134cc:	f00a f930 	bl	801d730 <bt_conn_unref>
			continue;
 80134d0:	e7da      	b.n	8013488 <notify_cb+0xb4>
			err = gatt_indicate(conn, data->handle,
 80134d2:	692a      	ldr	r2, [r5, #16]
 80134d4:	88a9      	ldrh	r1, [r5, #4]
 80134d6:	4640      	mov	r0, r8
 80134d8:	f7ff fe1e 	bl	8013118 <gatt_indicate>
 80134dc:	4681      	mov	r9, r0
 80134de:	e7cb      	b.n	8013478 <notify_cb+0xa4>
	return BT_GATT_ITER_CONTINUE;
 80134e0:	2001      	movs	r0, #1
 80134e2:	e780      	b.n	80133e6 <notify_cb+0x12>
			return BT_GATT_ITER_STOP;
 80134e4:	2000      	movs	r0, #0
 80134e6:	e77e      	b.n	80133e6 <notify_cb+0x12>
 80134e8:	080127e9 	.word	0x080127e9
 80134ec:	20000c74 	.word	0x20000c74
 80134f0:	200042a4 	.word	0x200042a4

080134f4 <gatt_read_group>:
{
 80134f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134f6:	b083      	sub	sp, #12
 80134f8:	4607      	mov	r7, r0
 80134fa:	460c      	mov	r4, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_REQ, sizeof(*req));
 80134fc:	2204      	movs	r2, #4
 80134fe:	2110      	movs	r1, #16
 8013500:	f7fe fcf6 	bl	8011ef0 <bt_att_create_pdu>
	if (!buf) {
 8013504:	b308      	cbz	r0, 801354a <gatt_read_group+0x56>
 8013506:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
 8013508:	f100 0608 	add.w	r6, r0, #8
 801350c:	2104      	movs	r1, #4
 801350e:	4630      	mov	r0, r6
 8013510:	f00c ffb4 	bl	802047c <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
 8013514:	8923      	ldrh	r3, [r4, #8]
 8013516:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
 8013518:	89e3      	ldrh	r3, [r4, #14]
 801351a:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
 801351c:	7c23      	ldrb	r3, [r4, #16]
 801351e:	b973      	cbnz	r3, 801353e <gatt_read_group+0x4a>
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_PRIMARY)->val);
 8013520:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8013524:	4630      	mov	r0, r6
 8013526:	f00c ffc1 	bl	80204ac <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_group_rsp, params, NULL);
 801352a:	2300      	movs	r3, #0
 801352c:	9300      	str	r3, [sp, #0]
 801352e:	4623      	mov	r3, r4
 8013530:	4a07      	ldr	r2, [pc, #28]	; (8013550 <gatt_read_group+0x5c>)
 8013532:	4629      	mov	r1, r5
 8013534:	4638      	mov	r0, r7
 8013536:	f7ff fda9 	bl	801308c <gatt_send>
}
 801353a:	b003      	add	sp, #12
 801353c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_SECONDARY)->val);
 801353e:	f642 0101 	movw	r1, #10241	; 0x2801
 8013542:	4630      	mov	r0, r6
 8013544:	f00c ffb2 	bl	80204ac <net_buf_simple_add_le16>
 8013548:	e7ef      	b.n	801352a <gatt_read_group+0x36>
		return -ENOMEM;
 801354a:	f06f 000b 	mvn.w	r0, #11
 801354e:	e7f4      	b.n	801353a <gatt_read_group+0x46>
 8013550:	0801f1eb 	.word	0x0801f1eb

08013554 <gatt_read_type>:
{
 8013554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013556:	b083      	sub	sp, #12
 8013558:	4607      	mov	r7, r0
 801355a:	460c      	mov	r4, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
 801355c:	2204      	movs	r2, #4
 801355e:	2108      	movs	r1, #8
 8013560:	f7fe fcc6 	bl	8011ef0 <bt_att_create_pdu>
	if (!buf) {
 8013564:	b310      	cbz	r0, 80135ac <gatt_read_type+0x58>
 8013566:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
 8013568:	f100 0608 	add.w	r6, r0, #8
 801356c:	2104      	movs	r1, #4
 801356e:	4630      	mov	r0, r6
 8013570:	f00c ff84 	bl	802047c <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
 8013574:	8923      	ldrh	r3, [r4, #8]
 8013576:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
 8013578:	89e3      	ldrh	r3, [r4, #14]
 801357a:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
 801357c:	7c23      	ldrb	r3, [r4, #16]
 801357e:	2b02      	cmp	r3, #2
 8013580:	d00e      	beq.n	80135a0 <gatt_read_type+0x4c>
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_CHRC)->val);
 8013582:	f642 0103 	movw	r1, #10243	; 0x2803
 8013586:	4630      	mov	r0, r6
 8013588:	f00c ff90 	bl	80204ac <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_type_rsp, params, NULL);
 801358c:	2300      	movs	r3, #0
 801358e:	9300      	str	r3, [sp, #0]
 8013590:	4623      	mov	r3, r4
 8013592:	4a08      	ldr	r2, [pc, #32]	; (80135b4 <gatt_read_type+0x60>)
 8013594:	4629      	mov	r1, r5
 8013596:	4638      	mov	r0, r7
 8013598:	f7ff fd78 	bl	801308c <gatt_send>
}
 801359c:	b003      	add	sp, #12
 801359e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_INCLUDE)->val);
 80135a0:	f642 0102 	movw	r1, #10242	; 0x2802
 80135a4:	4630      	mov	r0, r6
 80135a6:	f00c ff81 	bl	80204ac <net_buf_simple_add_le16>
 80135aa:	e7ef      	b.n	801358c <gatt_read_type+0x38>
		return -ENOMEM;
 80135ac:	f06f 000b 	mvn.w	r0, #11
 80135b0:	e7f4      	b.n	801359c <gatt_read_type+0x48>
 80135b2:	bf00      	nop
 80135b4:	0801f219 	.word	0x0801f219

080135b8 <add_subscriptions>:
{
 80135b8:	b530      	push	{r4, r5, lr}
 80135ba:	b083      	sub	sp, #12
 80135bc:	4605      	mov	r5, r0
	sub = gatt_sub_find(conn);
 80135be:	f7ff f88d 	bl	80126dc <gatt_sub_find>
	if (!sub) {
 80135c2:	b318      	cbz	r0, 801360c <add_subscriptions+0x54>
 80135c4:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
 80135c6:	b174      	cbz	r4, 80135e6 <add_subscriptions+0x2e>
 80135c8:	3c14      	subs	r4, #20
 80135ca:	e00c      	b.n	80135e6 <add_subscriptions+0x2e>
			gatt_write_ccc(conn, params->ccc_handle, params->value,
 80135cc:	89a2      	ldrh	r2, [r4, #12]
 80135ce:	8961      	ldrh	r1, [r4, #10]
 80135d0:	9400      	str	r4, [sp, #0]
 80135d2:	4b0f      	ldr	r3, [pc, #60]	; (8013610 <add_subscriptions+0x58>)
 80135d4:	4628      	mov	r0, r5
 80135d6:	f00b fc06 	bl	801ede6 <gatt_write_ccc>
Z_GENLIST_PEEK_NEXT(slist, snode)
 80135da:	f114 0314 	adds.w	r3, r4, #20
 80135de:	d013      	beq.n	8013608 <add_subscriptions+0x50>
	return node->next;
 80135e0:	6964      	ldr	r4, [r4, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
 80135e2:	b19c      	cbz	r4, 801360c <add_subscriptions+0x54>
 80135e4:	3c14      	subs	r4, #20
 80135e6:	b18c      	cbz	r4, 801360c <add_subscriptions+0x54>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
 80135e8:	f105 0188 	add.w	r1, r5, #136	; 0x88
 80135ec:	7a28      	ldrb	r0, [r5, #8]
 80135ee:	f009 fdc4 	bl	801d17a <bt_addr_le_is_bonded>
 80135f2:	2800      	cmp	r0, #0
 80135f4:	d0f1      	beq.n	80135da <add_subscriptions+0x22>
 80135f6:	f3bf 8f5b 	dmb	ish
 80135fa:	6923      	ldr	r3, [r4, #16]
 80135fc:	f3bf 8f5b 	dmb	ish
 8013600:	f013 0f02 	tst.w	r3, #2
 8013604:	d1e9      	bne.n	80135da <add_subscriptions+0x22>
 8013606:	e7e1      	b.n	80135cc <add_subscriptions+0x14>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
 8013608:	461c      	mov	r4, r3
 801360a:	e7ec      	b.n	80135e6 <add_subscriptions+0x2e>
}
 801360c:	b003      	add	sp, #12
 801360e:	bd30      	pop	{r4, r5, pc}
 8013610:	0801ed13 	.word	0x0801ed13

08013614 <gatt_find_type>:
{
 8013614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013616:	b083      	sub	sp, #12
 8013618:	4605      	mov	r5, r0
 801361a:	460c      	mov	r4, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_REQ, sizeof(*req));
 801361c:	2206      	movs	r2, #6
 801361e:	4611      	mov	r1, r2
 8013620:	f7fe fc66 	bl	8011ef0 <bt_att_create_pdu>
	if (!buf) {
 8013624:	2800      	cmp	r0, #0
 8013626:	d042      	beq.n	80136ae <gatt_find_type+0x9a>
 8013628:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
 801362a:	f100 0708 	add.w	r7, r0, #8
 801362e:	2106      	movs	r1, #6
 8013630:	4638      	mov	r0, r7
 8013632:	f00c ff23 	bl	802047c <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
 8013636:	8923      	ldrh	r3, [r4, #8]
 8013638:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
 801363a:	89e3      	ldrh	r3, [r4, #14]
 801363c:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
 801363e:	7c23      	ldrb	r3, [r4, #16]
 8013640:	b9f3      	cbnz	r3, 8013680 <gatt_find_type+0x6c>
		uuid_val = BT_UUID_16(BT_UUID_GATT_PRIMARY)->val;
 8013642:	f44f 5320 	mov.w	r3, #10240	; 0x2800
	req->type = sys_cpu_to_le16(uuid_val);
 8013646:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
 8013648:	6823      	ldr	r3, [r4, #0]
 801364a:	7819      	ldrb	r1, [r3, #0]
 801364c:	b1d9      	cbz	r1, 8013686 <gatt_find_type+0x72>
 801364e:	2902      	cmp	r1, #2
 8013650:	d027      	beq.n	80136a2 <gatt_find_type+0x8e>
		BT_ERR("Unknown UUID type %u", params->uuid->type);
 8013652:	f04f 0200 	mov.w	r2, #0
 8013656:	2301      	movs	r3, #1
 8013658:	f363 0202 	bfi	r2, r3, #0, #3
 801365c:	f36f 02c5 	bfc	r2, #3, #3
 8013660:	4b14      	ldr	r3, [pc, #80]	; (80136b4 <gatt_find_type+0xa0>)
 8013662:	4815      	ldr	r0, [pc, #84]	; (80136b8 <gatt_find_type+0xa4>)
 8013664:	1a1b      	subs	r3, r3, r0
 8013666:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 801366a:	f363 128f 	bfi	r2, r3, #6, #10
 801366e:	4813      	ldr	r0, [pc, #76]	; (80136bc <gatt_find_type+0xa8>)
 8013670:	f7f2 ff66 	bl	8006540 <log_1>
		net_buf_unref(buf);
 8013674:	4630      	mov	r0, r6
 8013676:	f00c feb7 	bl	80203e8 <net_buf_unref>
		return -EINVAL;
 801367a:	f06f 0015 	mvn.w	r0, #21
 801367e:	e00e      	b.n	801369e <gatt_find_type+0x8a>
		uuid_val = BT_UUID_16(BT_UUID_GATT_SECONDARY)->val;
 8013680:	f642 0301 	movw	r3, #10241	; 0x2801
 8013684:	e7df      	b.n	8013646 <gatt_find_type+0x32>
		net_buf_add_le16(buf, BT_UUID_16(params->uuid)->val);
 8013686:	8859      	ldrh	r1, [r3, #2]
 8013688:	4638      	mov	r0, r7
 801368a:	f00c ff0f 	bl	80204ac <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_find_type_rsp, params, NULL);
 801368e:	2300      	movs	r3, #0
 8013690:	9300      	str	r3, [sp, #0]
 8013692:	4623      	mov	r3, r4
 8013694:	4a0a      	ldr	r2, [pc, #40]	; (80136c0 <gatt_find_type+0xac>)
 8013696:	4631      	mov	r1, r6
 8013698:	4628      	mov	r0, r5
 801369a:	f7ff fcf7 	bl	801308c <gatt_send>
}
 801369e:	b003      	add	sp, #12
 80136a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_add_mem(buf, BT_UUID_128(params->uuid)->val, 16);
 80136a2:	2210      	movs	r2, #16
 80136a4:	1c59      	adds	r1, r3, #1
 80136a6:	4638      	mov	r0, r7
 80136a8:	f00c feee 	bl	8020488 <net_buf_simple_add_mem>
		break;
 80136ac:	e7ef      	b.n	801368e <gatt_find_type+0x7a>
		return -ENOMEM;
 80136ae:	f06f 000b 	mvn.w	r0, #11
 80136b2:	e7f4      	b.n	801369e <gatt_find_type+0x8a>
 80136b4:	08022bc0 	.word	0x08022bc0
 80136b8:	08022b90 	.word	0x08022b90
 80136bc:	0802774c 	.word	0x0802774c
 80136c0:	0801f155 	.word	0x0801f155

080136c4 <ccc_set_direct>:
{
 80136c4:	b570      	push	{r4, r5, r6, lr}
 80136c6:	b082      	sub	sp, #8
 80136c8:	460c      	mov	r4, r1
 80136ca:	4615      	mov	r5, r2
 80136cc:	461e      	mov	r6, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
 80136ce:	aa01      	add	r2, sp, #4
 80136d0:	4910      	ldr	r1, [pc, #64]	; (8013714 <ccc_set_direct+0x50>)
 80136d2:	9806      	ldr	r0, [sp, #24]
 80136d4:	f008 f932 	bl	801b93c <settings_name_steq>
 80136d8:	b138      	cbz	r0, 80136ea <ccc_set_direct+0x26>
		return ccc_set(name, len, read_cb, cb_arg);
 80136da:	4633      	mov	r3, r6
 80136dc:	462a      	mov	r2, r5
 80136de:	4621      	mov	r1, r4
 80136e0:	9801      	ldr	r0, [sp, #4]
 80136e2:	f00b f95a 	bl	801e99a <ccc_set>
}
 80136e6:	b002      	add	sp, #8
 80136e8:	bd70      	pop	{r4, r5, r6, pc}
			BT_ERR("Invalid key");
 80136ea:	f04f 0100 	mov.w	r1, #0
 80136ee:	2301      	movs	r3, #1
 80136f0:	f363 0102 	bfi	r1, r3, #0, #3
 80136f4:	f36f 01c5 	bfc	r1, #3, #3
 80136f8:	4b07      	ldr	r3, [pc, #28]	; (8013718 <ccc_set_direct+0x54>)
 80136fa:	4a08      	ldr	r2, [pc, #32]	; (801371c <ccc_set_direct+0x58>)
 80136fc:	1a9b      	subs	r3, r3, r2
 80136fe:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8013702:	f363 118f 	bfi	r1, r3, #6, #10
 8013706:	4806      	ldr	r0, [pc, #24]	; (8013720 <ccc_set_direct+0x5c>)
 8013708:	f7f3 f88a 	bl	8006820 <log_0>
			return -EINVAL;
 801370c:	f06f 0015 	mvn.w	r0, #21
 8013710:	e7e9      	b.n	80136e6 <ccc_set_direct+0x22>
 8013712:	bf00      	nop
 8013714:	08027764 	.word	0x08027764
 8013718:	08022bc0 	.word	0x08022bc0
 801371c:	08022b90 	.word	0x08022b90
 8013720:	0802776c 	.word	0x0802776c

08013724 <sc_set>:
{
 8013724:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013728:	b087      	sub	sp, #28
	if (!name) {
 801372a:	b348      	cbz	r0, 8013780 <sc_set+0x5c>
 801372c:	460c      	mov	r4, r1
 801372e:	4615      	mov	r5, r2
 8013730:	461e      	mov	r6, r3
 8013732:	4607      	mov	r7, r0
	err = bt_settings_decode_key(name, &addr);
 8013734:	a902      	add	r1, sp, #8
 8013736:	f009 f943 	bl	801c9c0 <bt_settings_decode_key>
	if (err) {
 801373a:	4680      	mov	r8, r0
 801373c:	2800      	cmp	r0, #0
 801373e:	d133      	bne.n	80137a8 <sc_set+0x84>
	settings_name_next(name, &next);
 8013740:	a901      	add	r1, sp, #4
 8013742:	4638      	mov	r0, r7
 8013744:	f008 f925 	bl	801b992 <settings_name_next>
	if (!next) {
 8013748:	9801      	ldr	r0, [sp, #4]
 801374a:	2800      	cmp	r0, #0
 801374c:	d045      	beq.n	80137da <sc_set+0xb6>
		id = strtol(next, NULL, 10);
 801374e:	220a      	movs	r2, #10
 8013750:	2100      	movs	r1, #0
 8013752:	f008 ff30 	bl	801c5b6 <strtol>
 8013756:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
 8013758:	a902      	add	r1, sp, #8
 801375a:	4638      	mov	r0, r7
 801375c:	f7fe ff9a 	bl	8012694 <find_sc_cfg>
	if (!cfg && len_rd) {
 8013760:	4681      	mov	r9, r0
 8013762:	2800      	cmp	r0, #0
 8013764:	d03b      	beq.n	80137de <sc_set+0xba>
	if (len_rd) {
 8013766:	2c00      	cmp	r4, #0
 8013768:	d072      	beq.n	8013850 <sc_set+0x12c>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
 801376a:	2204      	movs	r2, #4
 801376c:	f109 0108 	add.w	r1, r9, #8
 8013770:	4630      	mov	r0, r6
 8013772:	47a8      	blx	r5
		if (len < 0) {
 8013774:	1e04      	subs	r4, r0, #0
 8013776:	db57      	blt.n	8013828 <sc_set+0x104>
}
 8013778:	4640      	mov	r0, r8
 801377a:	b007      	add	sp, #28
 801377c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_ERR("Insufficient number of arguments");
 8013780:	f04f 0100 	mov.w	r1, #0
 8013784:	2301      	movs	r3, #1
 8013786:	f363 0102 	bfi	r1, r3, #0, #3
 801378a:	f36f 01c5 	bfc	r1, #3, #3
 801378e:	4b35      	ldr	r3, [pc, #212]	; (8013864 <sc_set+0x140>)
 8013790:	4a35      	ldr	r2, [pc, #212]	; (8013868 <sc_set+0x144>)
 8013792:	1a9b      	subs	r3, r3, r2
 8013794:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8013798:	f363 118f 	bfi	r1, r3, #6, #10
 801379c:	4833      	ldr	r0, [pc, #204]	; (801386c <sc_set+0x148>)
 801379e:	f7f3 f83f 	bl	8006820 <log_0>
		return -EINVAL;
 80137a2:	f06f 0815 	mvn.w	r8, #21
 80137a6:	e7e7      	b.n	8013778 <sc_set+0x54>
		BT_ERR("Unable to decode address %s", log_strdup(name));
 80137a8:	f04f 0400 	mov.w	r4, #0
 80137ac:	2301      	movs	r3, #1
 80137ae:	f363 0402 	bfi	r4, r3, #0, #3
 80137b2:	f36f 04c5 	bfc	r4, #3, #3
 80137b6:	4b2b      	ldr	r3, [pc, #172]	; (8013864 <sc_set+0x140>)
 80137b8:	4a2b      	ldr	r2, [pc, #172]	; (8013868 <sc_set+0x144>)
 80137ba:	1a9b      	subs	r3, r3, r2
 80137bc:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80137c0:	f363 148f 	bfi	r4, r3, #6, #10
 80137c4:	4638      	mov	r0, r7
 80137c6:	f7f2 fceb 	bl	80061a0 <log_strdup>
 80137ca:	4601      	mov	r1, r0
 80137cc:	4622      	mov	r2, r4
 80137ce:	4828      	ldr	r0, [pc, #160]	; (8013870 <sc_set+0x14c>)
 80137d0:	f7f2 feb6 	bl	8006540 <log_1>
		return -EINVAL;
 80137d4:	f06f 0815 	mvn.w	r8, #21
 80137d8:	e7ce      	b.n	8013778 <sc_set+0x54>
		id = BT_ID_DEFAULT;
 80137da:	2700      	movs	r7, #0
 80137dc:	e7bc      	b.n	8013758 <sc_set+0x34>
	if (!cfg && len_rd) {
 80137de:	2c00      	cmp	r4, #0
 80137e0:	d0c1      	beq.n	8013766 <sc_set+0x42>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
 80137e2:	9004      	str	r0, [sp, #16]
 80137e4:	f8cd 0013 	str.w	r0, [sp, #19]
 80137e8:	a904      	add	r1, sp, #16
 80137ea:	f7fe ff53 	bl	8012694 <find_sc_cfg>
		if (!cfg) {
 80137ee:	4681      	mov	r9, r0
 80137f0:	b130      	cbz	r0, 8013800 <sc_set+0xdc>
		cfg->id = id;
 80137f2:	f800 7b01 	strb.w	r7, [r0], #1
	memcpy(dst, src, sizeof(*dst));
 80137f6:	2207      	movs	r2, #7
 80137f8:	a902      	add	r1, sp, #8
 80137fa:	f009 f858 	bl	801c8ae <memcpy>
 80137fe:	e7b2      	b.n	8013766 <sc_set+0x42>
			BT_ERR("Unable to restore SC: no cfg left");
 8013800:	f04f 0100 	mov.w	r1, #0
 8013804:	2301      	movs	r3, #1
 8013806:	f363 0102 	bfi	r1, r3, #0, #3
 801380a:	f36f 01c5 	bfc	r1, #3, #3
 801380e:	4b15      	ldr	r3, [pc, #84]	; (8013864 <sc_set+0x140>)
 8013810:	4a15      	ldr	r2, [pc, #84]	; (8013868 <sc_set+0x144>)
 8013812:	1a9b      	subs	r3, r3, r2
 8013814:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8013818:	f363 118f 	bfi	r1, r3, #6, #10
 801381c:	4815      	ldr	r0, [pc, #84]	; (8013874 <sc_set+0x150>)
 801381e:	f7f2 ffff 	bl	8006820 <log_0>
			return -ENOMEM;
 8013822:	f06f 080b 	mvn.w	r8, #11
 8013826:	e7a7      	b.n	8013778 <sc_set+0x54>
			BT_ERR("Failed to decode value (err %zd)", len);
 8013828:	f04f 0200 	mov.w	r2, #0
 801382c:	2301      	movs	r3, #1
 801382e:	f363 0202 	bfi	r2, r3, #0, #3
 8013832:	f36f 02c5 	bfc	r2, #3, #3
 8013836:	4b0b      	ldr	r3, [pc, #44]	; (8013864 <sc_set+0x140>)
 8013838:	490b      	ldr	r1, [pc, #44]	; (8013868 <sc_set+0x144>)
 801383a:	1a5b      	subs	r3, r3, r1
 801383c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8013840:	f363 128f 	bfi	r2, r3, #6, #10
 8013844:	4621      	mov	r1, r4
 8013846:	480c      	ldr	r0, [pc, #48]	; (8013878 <sc_set+0x154>)
 8013848:	f7f2 fe7a 	bl	8006540 <log_1>
			return len;
 801384c:	46a0      	mov	r8, r4
 801384e:	e793      	b.n	8013778 <sc_set+0x54>
	} else if (cfg) {
 8013850:	f1b9 0f00 	cmp.w	r9, #0
 8013854:	d090      	beq.n	8013778 <sc_set+0x54>
		memset(cfg, 0, sizeof(*cfg));
 8013856:	220c      	movs	r2, #12
 8013858:	2100      	movs	r1, #0
 801385a:	4648      	mov	r0, r9
 801385c:	f009 f84c 	bl	801c8f8 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
 8013860:	e78a      	b.n	8013778 <sc_set+0x54>
 8013862:	bf00      	nop
 8013864:	08022bc0 	.word	0x08022bc0
 8013868:	08022b90 	.word	0x08022b90
 801386c:	0802624c 	.word	0x0802624c
 8013870:	08027778 	.word	0x08027778
 8013874:	08027794 	.word	0x08027794
 8013878:	080275b4 	.word	0x080275b4

0801387c <cf_set>:
{
 801387c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013880:	b085      	sub	sp, #20
	if (!name) {
 8013882:	b348      	cbz	r0, 80138d8 <cf_set+0x5c>
 8013884:	460c      	mov	r4, r1
 8013886:	4615      	mov	r5, r2
 8013888:	461e      	mov	r6, r3
 801388a:	4607      	mov	r7, r0
	err = bt_settings_decode_key(name, &addr);
 801388c:	a902      	add	r1, sp, #8
 801388e:	f009 f897 	bl	801c9c0 <bt_settings_decode_key>
	if (err) {
 8013892:	4680      	mov	r8, r0
 8013894:	2800      	cmp	r0, #0
 8013896:	d133      	bne.n	8013900 <cf_set+0x84>
	settings_name_next(name, &next);
 8013898:	a901      	add	r1, sp, #4
 801389a:	4638      	mov	r0, r7
 801389c:	f008 f879 	bl	801b992 <settings_name_next>
	if (!next) {
 80138a0:	9801      	ldr	r0, [sp, #4]
 80138a2:	2800      	cmp	r0, #0
 80138a4:	d045      	beq.n	8013932 <cf_set+0xb6>
		id = strtol(next, NULL, 10);
 80138a6:	220a      	movs	r2, #10
 80138a8:	2100      	movs	r1, #0
 80138aa:	f008 fe84 	bl	801c5b6 <strtol>
 80138ae:	b2c7      	uxtb	r7, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
 80138b0:	a902      	add	r1, sp, #8
 80138b2:	4638      	mov	r0, r7
 80138b4:	f7fe ff5c 	bl	8012770 <find_cf_cfg_by_addr>
	if (!cfg) {
 80138b8:	4681      	mov	r9, r0
 80138ba:	2800      	cmp	r0, #0
 80138bc:	d03b      	beq.n	8013936 <cf_set+0xba>
	if (len_rd) {
 80138be:	2c00      	cmp	r4, #0
 80138c0:	d06c      	beq.n	801399c <cf_set+0x120>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
 80138c2:	2201      	movs	r2, #1
 80138c4:	f109 0108 	add.w	r1, r9, #8
 80138c8:	4630      	mov	r0, r6
 80138ca:	47a8      	blx	r5
		if (len < 0) {
 80138cc:	1e04      	subs	r4, r0, #0
 80138ce:	db51      	blt.n	8013974 <cf_set+0xf8>
}
 80138d0:	4640      	mov	r0, r8
 80138d2:	b005      	add	sp, #20
 80138d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_ERR("Insufficient number of arguments");
 80138d8:	f04f 0100 	mov.w	r1, #0
 80138dc:	2301      	movs	r3, #1
 80138de:	f363 0102 	bfi	r1, r3, #0, #3
 80138e2:	f36f 01c5 	bfc	r1, #3, #3
 80138e6:	4b2f      	ldr	r3, [pc, #188]	; (80139a4 <cf_set+0x128>)
 80138e8:	4a2f      	ldr	r2, [pc, #188]	; (80139a8 <cf_set+0x12c>)
 80138ea:	1a9b      	subs	r3, r3, r2
 80138ec:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80138f0:	f363 118f 	bfi	r1, r3, #6, #10
 80138f4:	482d      	ldr	r0, [pc, #180]	; (80139ac <cf_set+0x130>)
 80138f6:	f7f2 ff93 	bl	8006820 <log_0>
		return -EINVAL;
 80138fa:	f06f 0815 	mvn.w	r8, #21
 80138fe:	e7e7      	b.n	80138d0 <cf_set+0x54>
		BT_ERR("Unable to decode address %s", log_strdup(name));
 8013900:	f04f 0400 	mov.w	r4, #0
 8013904:	2301      	movs	r3, #1
 8013906:	f363 0402 	bfi	r4, r3, #0, #3
 801390a:	f36f 04c5 	bfc	r4, #3, #3
 801390e:	4b25      	ldr	r3, [pc, #148]	; (80139a4 <cf_set+0x128>)
 8013910:	4a25      	ldr	r2, [pc, #148]	; (80139a8 <cf_set+0x12c>)
 8013912:	1a9b      	subs	r3, r3, r2
 8013914:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8013918:	f363 148f 	bfi	r4, r3, #6, #10
 801391c:	4638      	mov	r0, r7
 801391e:	f7f2 fc3f 	bl	80061a0 <log_strdup>
 8013922:	4601      	mov	r1, r0
 8013924:	4622      	mov	r2, r4
 8013926:	4822      	ldr	r0, [pc, #136]	; (80139b0 <cf_set+0x134>)
 8013928:	f7f2 fe0a 	bl	8006540 <log_1>
		return -EINVAL;
 801392c:	f06f 0815 	mvn.w	r8, #21
 8013930:	e7ce      	b.n	80138d0 <cf_set+0x54>
		id = BT_ID_DEFAULT;
 8013932:	2700      	movs	r7, #0
 8013934:	e7bc      	b.n	80138b0 <cf_set+0x34>
		cfg = find_cf_cfg(NULL);
 8013936:	f7fe fe83 	bl	8012640 <find_cf_cfg>
		if (!cfg) {
 801393a:	4681      	mov	r9, r0
 801393c:	b130      	cbz	r0, 801394c <cf_set+0xd0>
		cfg->id = id;
 801393e:	f800 7b01 	strb.w	r7, [r0], #1
 8013942:	2207      	movs	r2, #7
 8013944:	a902      	add	r1, sp, #8
 8013946:	f008 ffb2 	bl	801c8ae <memcpy>
}
 801394a:	e7b8      	b.n	80138be <cf_set+0x42>
			BT_ERR("Unable to restore CF: no cfg left");
 801394c:	f04f 0100 	mov.w	r1, #0
 8013950:	2301      	movs	r3, #1
 8013952:	f363 0102 	bfi	r1, r3, #0, #3
 8013956:	f36f 01c5 	bfc	r1, #3, #3
 801395a:	4b12      	ldr	r3, [pc, #72]	; (80139a4 <cf_set+0x128>)
 801395c:	4a12      	ldr	r2, [pc, #72]	; (80139a8 <cf_set+0x12c>)
 801395e:	1a9b      	subs	r3, r3, r2
 8013960:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8013964:	f363 118f 	bfi	r1, r3, #6, #10
 8013968:	4812      	ldr	r0, [pc, #72]	; (80139b4 <cf_set+0x138>)
 801396a:	f7f2 ff59 	bl	8006820 <log_0>
			return -ENOMEM;
 801396e:	f06f 080b 	mvn.w	r8, #11
 8013972:	e7ad      	b.n	80138d0 <cf_set+0x54>
			BT_ERR("Failed to decode value (err %zd)", len);
 8013974:	f04f 0200 	mov.w	r2, #0
 8013978:	2301      	movs	r3, #1
 801397a:	f363 0202 	bfi	r2, r3, #0, #3
 801397e:	f36f 02c5 	bfc	r2, #3, #3
 8013982:	4b08      	ldr	r3, [pc, #32]	; (80139a4 <cf_set+0x128>)
 8013984:	4908      	ldr	r1, [pc, #32]	; (80139a8 <cf_set+0x12c>)
 8013986:	1a5b      	subs	r3, r3, r1
 8013988:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 801398c:	f363 128f 	bfi	r2, r3, #6, #10
 8013990:	4621      	mov	r1, r4
 8013992:	4809      	ldr	r0, [pc, #36]	; (80139b8 <cf_set+0x13c>)
 8013994:	f7f2 fdd4 	bl	8006540 <log_1>
			return len;
 8013998:	46a0      	mov	r8, r4
 801399a:	e799      	b.n	80138d0 <cf_set+0x54>
		clear_cf_cfg(cfg);
 801399c:	4648      	mov	r0, r9
 801399e:	f00b fa58 	bl	801ee52 <clear_cf_cfg>
 80139a2:	e795      	b.n	80138d0 <cf_set+0x54>
 80139a4:	08022bc0 	.word	0x08022bc0
 80139a8:	08022b90 	.word	0x08022b90
 80139ac:	0802624c 	.word	0x0802624c
 80139b0:	08027778 	.word	0x08027778
 80139b4:	080277b8 	.word	0x080277b8
 80139b8:	080275b4 	.word	0x080275b4

080139bc <bt_gatt_clear_cf>:
{
 80139bc:	b570      	push	{r4, r5, r6, lr}
 80139be:	b08c      	sub	sp, #48	; 0x30
 80139c0:	4604      	mov	r4, r0
 80139c2:	460d      	mov	r5, r1
	cfg = find_cf_cfg_by_addr(id, addr);
 80139c4:	f7fe fed4 	bl	8012770 <find_cf_cfg_by_addr>
	if (cfg) {
 80139c8:	b108      	cbz	r0, 80139ce <bt_gatt_clear_cf+0x12>
		clear_cf_cfg(cfg);
 80139ca:	f00b fa42 	bl	801ee52 <clear_cf_cfg>
		if (id) {
 80139ce:	b18c      	cbz	r4, 80139f4 <bt_gatt_clear_cf+0x38>
			u8_to_dec(id_str, sizeof(id_str), id);
 80139d0:	ae02      	add	r6, sp, #8
 80139d2:	4622      	mov	r2, r4
 80139d4:	2104      	movs	r1, #4
 80139d6:	4630      	mov	r0, r6
 80139d8:	f7f1 fbec 	bl	80051b4 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
 80139dc:	9600      	str	r6, [sp, #0]
 80139de:	462b      	mov	r3, r5
 80139e0:	4a09      	ldr	r2, [pc, #36]	; (8013a08 <bt_gatt_clear_cf+0x4c>)
 80139e2:	2124      	movs	r1, #36	; 0x24
 80139e4:	a803      	add	r0, sp, #12
 80139e6:	f7f8 f9d3 	bl	800bd90 <bt_settings_encode_key>
		return settings_delete(key);
 80139ea:	a803      	add	r0, sp, #12
 80139ec:	f007 ffa0 	bl	801b930 <settings_delete>
}
 80139f0:	b00c      	add	sp, #48	; 0x30
 80139f2:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "cf",
 80139f4:	2300      	movs	r3, #0
 80139f6:	9300      	str	r3, [sp, #0]
 80139f8:	462b      	mov	r3, r5
 80139fa:	4a03      	ldr	r2, [pc, #12]	; (8013a08 <bt_gatt_clear_cf+0x4c>)
 80139fc:	2124      	movs	r1, #36	; 0x24
 80139fe:	a803      	add	r0, sp, #12
 8013a00:	f7f8 f9c6 	bl	800bd90 <bt_settings_encode_key>
 8013a04:	e7f1      	b.n	80139ea <bt_gatt_clear_cf+0x2e>
 8013a06:	bf00      	nop
 8013a08:	08027674 	.word	0x08027674

08013a0c <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8013a0c:	4b1d      	ldr	r3, [pc, #116]	; (8013a84 <bt_gatt_init+0x78>)
 8013a0e:	2201      	movs	r2, #1
 8013a10:	f3bf 8f5b 	dmb	ish
 8013a14:	e853 1f00 	ldrex	r1, [r3]
 8013a18:	2900      	cmp	r1, #0
 8013a1a:	d103      	bne.n	8013a24 <bt_gatt_init+0x18>
 8013a1c:	e843 2000 	strex	r0, r2, [r3]
 8013a20:	2800      	cmp	r0, #0
 8013a22:	d1f7      	bne.n	8013a14 <bt_gatt_init+0x8>
 8013a24:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
 8013a28:	d102      	bne.n	8013a30 <bt_gatt_init+0x24>
{
 8013a2a:	b510      	push	{r4, lr}
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
 8013a2c:	4b16      	ldr	r3, [pc, #88]	; (8013a88 <bt_gatt_init+0x7c>)
 8013a2e:	e006      	b.n	8013a3e <bt_gatt_init+0x32>
 8013a30:	4770      	bx	lr
		last_static_handle += svc->attr_count;
 8013a32:	685a      	ldr	r2, [r3, #4]
 8013a34:	4915      	ldr	r1, [pc, #84]	; (8013a8c <bt_gatt_init+0x80>)
 8013a36:	8808      	ldrh	r0, [r1, #0]
 8013a38:	4402      	add	r2, r0
 8013a3a:	800a      	strh	r2, [r1, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
 8013a3c:	3308      	adds	r3, #8
 8013a3e:	4a14      	ldr	r2, [pc, #80]	; (8013a90 <bt_gatt_init+0x84>)
 8013a40:	4293      	cmp	r3, r2
 8013a42:	d3f6      	bcc.n	8013a32 <bt_gatt_init+0x26>
	k_delayed_work_init(&db_hash_work, db_hash_process);
 8013a44:	4c13      	ldr	r4, [pc, #76]	; (8013a94 <bt_gatt_init+0x88>)
 8013a46:	4914      	ldr	r1, [pc, #80]	; (8013a98 <bt_gatt_init+0x8c>)
 8013a48:	4620      	mov	r0, r4
 8013a4a:	f00e fc91 	bl	8022370 <k_delayed_work_init>
 8013a4e:	2264      	movs	r2, #100	; 0x64
 8013a50:	2300      	movs	r3, #0
 8013a52:	4621      	mov	r1, r4
 8013a54:	4811      	ldr	r0, [pc, #68]	; (8013a9c <bt_gatt_init+0x90>)
 8013a56:	f005 fa0b 	bl	8018e70 <k_delayed_work_submit_to_queue>
		k_delayed_work_init(&gatt_sc.work, sc_process);
 8013a5a:	4c11      	ldr	r4, [pc, #68]	; (8013aa0 <bt_gatt_init+0x94>)
 8013a5c:	4911      	ldr	r1, [pc, #68]	; (8013aa4 <bt_gatt_init+0x98>)
 8013a5e:	f104 0018 	add.w	r0, r4, #24
 8013a62:	f00e fc85 	bl	8022370 <k_delayed_work_init>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8013a66:	3448      	adds	r4, #72	; 0x48
 8013a68:	f3bf 8f5b 	dmb	ish
 8013a6c:	e854 3f00 	ldrex	r3, [r4]
 8013a70:	f043 0302 	orr.w	r3, r3, #2
 8013a74:	e844 3200 	strex	r2, r3, [r4]
 8013a78:	2a00      	cmp	r2, #0
 8013a7a:	d1f7      	bne.n	8013a6c <bt_gatt_init+0x60>
 8013a7c:	f3bf 8f5b 	dmb	ish
}
 8013a80:	bd10      	pop	{r4, pc}
 8013a82:	bf00      	nop
 8013a84:	200042a0 	.word	0x200042a0
 8013a88:	08022af0 	.word	0x08022af0
 8013a8c:	20005960 	.word	0x20005960
 8013a90:	08022b18 	.word	0x08022b18
 8013a94:	20002610 	.word	0x20002610
 8013a98:	0801f0b3 	.word	0x0801f0b3
 8013a9c:	20003310 	.word	0x20003310
 8013aa0:	20002640 	.word	0x20002640
 8013aa4:	08013f4d 	.word	0x08013f4d

08013aa8 <bt_gatt_attr_get_handle>:
	if (!attr) {
 8013aa8:	b328      	cbz	r0, 8013af6 <bt_gatt_attr_get_handle+0x4e>
{
 8013aaa:	b4f0      	push	{r4, r5, r6, r7}
 8013aac:	4606      	mov	r6, r0
	if (attr->handle) {
 8013aae:	8a00      	ldrh	r0, [r0, #16]
 8013ab0:	bb20      	cbnz	r0, 8013afc <bt_gatt_attr_get_handle+0x54>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
 8013ab2:	4d13      	ldr	r5, [pc, #76]	; (8013b00 <bt_gatt_attr_get_handle+0x58>)
	uint16_t handle = 1;
 8013ab4:	2201      	movs	r2, #1
 8013ab6:	e003      	b.n	8013ac0 <bt_gatt_attr_get_handle+0x18>
			handle += static_svc->attr_count;
 8013ab8:	686b      	ldr	r3, [r5, #4]
 8013aba:	441a      	add	r2, r3
 8013abc:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
 8013abe:	3508      	adds	r5, #8
 8013ac0:	4b10      	ldr	r3, [pc, #64]	; (8013b04 <bt_gatt_attr_get_handle+0x5c>)
 8013ac2:	429d      	cmp	r5, r3
 8013ac4:	d21a      	bcs.n	8013afc <bt_gatt_attr_get_handle+0x54>
		if ((attr < &static_svc->attrs[0]) ||
 8013ac6:	682c      	ldr	r4, [r5, #0]
 8013ac8:	42b4      	cmp	r4, r6
 8013aca:	d8f5      	bhi.n	8013ab8 <bt_gatt_attr_get_handle+0x10>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
 8013acc:	686f      	ldr	r7, [r5, #4]
 8013ace:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 8013ad2:	009b      	lsls	r3, r3, #2
 8013ad4:	3b14      	subs	r3, #20
 8013ad6:	4423      	add	r3, r4
		if ((attr < &static_svc->attrs[0]) ||
 8013ad8:	42b3      	cmp	r3, r6
 8013ada:	d3ed      	bcc.n	8013ab8 <bt_gatt_attr_get_handle+0x10>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
 8013adc:	2300      	movs	r3, #0
 8013ade:	429f      	cmp	r7, r3
 8013ae0:	d9ed      	bls.n	8013abe <bt_gatt_attr_get_handle+0x16>
			if (attr == &static_svc->attrs[i]) {
 8013ae2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8013ae6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8013aea:	42b1      	cmp	r1, r6
 8013aec:	d005      	beq.n	8013afa <bt_gatt_attr_get_handle+0x52>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
 8013aee:	3301      	adds	r3, #1
 8013af0:	3201      	adds	r2, #1
 8013af2:	b292      	uxth	r2, r2
 8013af4:	e7f3      	b.n	8013ade <bt_gatt_attr_get_handle+0x36>
		return 0;
 8013af6:	2000      	movs	r0, #0
}
 8013af8:	4770      	bx	lr
				return handle;
 8013afa:	4610      	mov	r0, r2
}
 8013afc:	bcf0      	pop	{r4, r5, r6, r7}
 8013afe:	4770      	bx	lr
 8013b00:	08022af0 	.word	0x08022af0
 8013b04:	08022b18 	.word	0x08022b18

08013b08 <bt_gatt_attr_value_handle>:
	if ((attr != NULL)
 8013b08:	b188      	cbz	r0, 8013b2e <bt_gatt_attr_value_handle+0x26>
{
 8013b0a:	b508      	push	{r3, lr}
 8013b0c:	4603      	mov	r3, r0
	    && (attr->read == bt_gatt_attr_read_chrc)) {
 8013b0e:	6841      	ldr	r1, [r0, #4]
 8013b10:	4a08      	ldr	r2, [pc, #32]	; (8013b34 <bt_gatt_attr_value_handle+0x2c>)
 8013b12:	4291      	cmp	r1, r2
 8013b14:	d001      	beq.n	8013b1a <bt_gatt_attr_value_handle+0x12>
	uint16_t handle = 0;
 8013b16:	2000      	movs	r0, #0
}
 8013b18:	bd08      	pop	{r3, pc}
		struct bt_gatt_chrc *chrc = attr->user_data;
 8013b1a:	68c2      	ldr	r2, [r0, #12]
		handle = chrc->value_handle;
 8013b1c:	8890      	ldrh	r0, [r2, #4]
		if (handle == 0) {
 8013b1e:	2800      	cmp	r0, #0
 8013b20:	d1fa      	bne.n	8013b18 <bt_gatt_attr_value_handle+0x10>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
 8013b22:	4618      	mov	r0, r3
 8013b24:	f7ff ffc0 	bl	8013aa8 <bt_gatt_attr_get_handle>
 8013b28:	3001      	adds	r0, #1
 8013b2a:	b280      	uxth	r0, r0
 8013b2c:	e7f4      	b.n	8013b18 <bt_gatt_attr_value_handle+0x10>
	uint16_t handle = 0;
 8013b2e:	2000      	movs	r0, #0
}
 8013b30:	4770      	bx	lr
 8013b32:	bf00      	nop
 8013b34:	0801f051 	.word	0x0801f051

08013b38 <bt_gatt_foreach_attr_type>:
{
 8013b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b3c:	b089      	sub	sp, #36	; 0x24
 8013b3e:	4607      	mov	r7, r0
 8013b40:	468a      	mov	sl, r1
 8013b42:	4690      	mov	r8, r2
 8013b44:	4699      	mov	r9, r3
 8013b46:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
	if (!num_matches) {
 8013b4a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013b4e:	b91b      	cbnz	r3, 8013b58 <bt_gatt_foreach_attr_type+0x20>
		num_matches = UINT16_MAX;
 8013b50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013b54:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
	if (start_handle <= last_static_handle) {
 8013b58:	4b19      	ldr	r3, [pc, #100]	; (8013bc0 <bt_gatt_foreach_attr_type+0x88>)
 8013b5a:	881b      	ldrh	r3, [r3, #0]
 8013b5c:	42bb      	cmp	r3, r7
 8013b5e:	d22c      	bcs.n	8013bba <bt_gatt_foreach_attr_type+0x82>
}
 8013b60:	b009      	add	sp, #36	; 0x24
 8013b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				handle += static_svc->attr_count;
 8013b66:	b294      	uxth	r4, r2
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
 8013b68:	3608      	adds	r6, #8
 8013b6a:	4b16      	ldr	r3, [pc, #88]	; (8013bc4 <bt_gatt_foreach_attr_type+0x8c>)
 8013b6c:	429e      	cmp	r6, r3
 8013b6e:	d2f7      	bcs.n	8013b60 <bt_gatt_foreach_attr_type+0x28>
			if (handle + static_svc->attr_count < start_handle) {
 8013b70:	6873      	ldr	r3, [r6, #4]
 8013b72:	18e2      	adds	r2, r4, r3
 8013b74:	42ba      	cmp	r2, r7
 8013b76:	d3f6      	bcc.n	8013b66 <bt_gatt_foreach_attr_type+0x2e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
 8013b78:	2500      	movs	r5, #0
 8013b7a:	9707      	str	r7, [sp, #28]
 8013b7c:	6873      	ldr	r3, [r6, #4]
 8013b7e:	42ab      	cmp	r3, r5
 8013b80:	d919      	bls.n	8013bb6 <bt_gatt_foreach_attr_type+0x7e>
				if (gatt_foreach_iter(&static_svc->attrs[i],
 8013b82:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8013b86:	f8cd b010 	str.w	fp, [sp, #16]
 8013b8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013b8c:	9303      	str	r3, [sp, #12]
 8013b8e:	ab12      	add	r3, sp, #72	; 0x48
 8013b90:	9302      	str	r3, [sp, #8]
 8013b92:	f8cd 9004 	str.w	r9, [sp, #4]
 8013b96:	f8cd 8000 	str.w	r8, [sp]
 8013b9a:	4653      	mov	r3, sl
 8013b9c:	9a07      	ldr	r2, [sp, #28]
 8013b9e:	4621      	mov	r1, r4
 8013ba0:	6837      	ldr	r7, [r6, #0]
 8013ba2:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8013ba6:	f00b f8f3 	bl	801ed90 <gatt_foreach_iter>
 8013baa:	2800      	cmp	r0, #0
 8013bac:	d0d8      	beq.n	8013b60 <bt_gatt_foreach_attr_type+0x28>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
 8013bae:	3501      	adds	r5, #1
 8013bb0:	3401      	adds	r4, #1
 8013bb2:	b2a4      	uxth	r4, r4
 8013bb4:	e7e2      	b.n	8013b7c <bt_gatt_foreach_attr_type+0x44>
 8013bb6:	9f07      	ldr	r7, [sp, #28]
 8013bb8:	e7d6      	b.n	8013b68 <bt_gatt_foreach_attr_type+0x30>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
 8013bba:	4e03      	ldr	r6, [pc, #12]	; (8013bc8 <bt_gatt_foreach_attr_type+0x90>)
		uint16_t handle = 1;
 8013bbc:	2401      	movs	r4, #1
 8013bbe:	e7d4      	b.n	8013b6a <bt_gatt_foreach_attr_type+0x32>
 8013bc0:	20005960 	.word	0x20005960
 8013bc4:	08022b18 	.word	0x08022b18
 8013bc8:	08022af0 	.word	0x08022af0

08013bcc <db_hash_gen>:
{
 8013bcc:	b570      	push	{r4, r5, r6, lr}
 8013bce:	b0cc      	sub	sp, #304	; 0x130
 8013bd0:	4606      	mov	r6, r0
	uint8_t key[16] = {};
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	9348      	str	r3, [sp, #288]	; 0x120
 8013bd6:	9349      	str	r3, [sp, #292]	; 0x124
 8013bd8:	934a      	str	r3, [sp, #296]	; 0x128
 8013bda:	934b      	str	r3, [sp, #300]	; 0x12c
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
 8013bdc:	aa1c      	add	r2, sp, #112	; 0x70
 8013bde:	a948      	add	r1, sp, #288	; 0x120
 8013be0:	a804      	add	r0, sp, #16
 8013be2:	f008 f97d 	bl	801bee0 <tc_cmac_setup>
 8013be6:	b190      	cbz	r0, 8013c0e <db_hash_gen+0x42>
 8013be8:	ac04      	add	r4, sp, #16
 8013bea:	9402      	str	r4, [sp, #8]
 8013bec:	4b22      	ldr	r3, [pc, #136]	; (8013c78 <db_hash_gen+0xac>)
 8013bee:	9301      	str	r3, [sp, #4]
 8013bf0:	2200      	movs	r2, #0
 8013bf2:	9200      	str	r2, [sp, #0]
 8013bf4:	4613      	mov	r3, r2
 8013bf6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013bfa:	2001      	movs	r0, #1
 8013bfc:	f7ff ff9c 	bl	8013b38 <bt_gatt_foreach_attr_type>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
 8013c00:	4621      	mov	r1, r4
 8013c02:	481e      	ldr	r0, [pc, #120]	; (8013c7c <db_hash_gen+0xb0>)
 8013c04:	f008 fa07 	bl	801c016 <tc_cmac_final>
 8013c08:	b198      	cbz	r0, 8013c32 <db_hash_gen+0x66>
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	e02b      	b.n	8013c66 <db_hash_gen+0x9a>
		BT_ERR("Unable to setup AES CMAC");
 8013c0e:	f04f 0100 	mov.w	r1, #0
 8013c12:	2301      	movs	r3, #1
 8013c14:	f363 0102 	bfi	r1, r3, #0, #3
 8013c18:	f36f 01c5 	bfc	r1, #3, #3
 8013c1c:	4b18      	ldr	r3, [pc, #96]	; (8013c80 <db_hash_gen+0xb4>)
 8013c1e:	4a19      	ldr	r2, [pc, #100]	; (8013c84 <db_hash_gen+0xb8>)
 8013c20:	1a9b      	subs	r3, r3, r2
 8013c22:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8013c26:	f363 118f 	bfi	r1, r3, #6, #10
 8013c2a:	4817      	ldr	r0, [pc, #92]	; (8013c88 <db_hash_gen+0xbc>)
 8013c2c:	f7f2 fdf8 	bl	8006820 <log_0>
		return;
 8013c30:	e01c      	b.n	8013c6c <db_hash_gen+0xa0>
		BT_ERR("Unable to calculate hash");
 8013c32:	f04f 0100 	mov.w	r1, #0
 8013c36:	2301      	movs	r3, #1
 8013c38:	f363 0102 	bfi	r1, r3, #0, #3
 8013c3c:	f36f 01c5 	bfc	r1, #3, #3
 8013c40:	4b0f      	ldr	r3, [pc, #60]	; (8013c80 <db_hash_gen+0xb4>)
 8013c42:	4a10      	ldr	r2, [pc, #64]	; (8013c84 <db_hash_gen+0xb8>)
 8013c44:	1a9b      	subs	r3, r3, r2
 8013c46:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8013c4a:	f363 118f 	bfi	r1, r3, #6, #10
 8013c4e:	480f      	ldr	r0, [pc, #60]	; (8013c8c <db_hash_gen+0xc0>)
 8013c50:	f7f2 fde6 	bl	8006820 <log_0>
		return;
 8013c54:	e00a      	b.n	8013c6c <db_hash_gen+0xa0>
		uint8_t tmp = ((uint8_t *)buf)[i];
 8013c56:	4a09      	ldr	r2, [pc, #36]	; (8013c7c <db_hash_gen+0xb0>)
 8013c58:	5cd4      	ldrb	r4, [r2, r3]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
 8013c5a:	f1c3 010f 	rsb	r1, r3, #15
 8013c5e:	5c55      	ldrb	r5, [r2, r1]
 8013c60:	54d5      	strb	r5, [r2, r3]
		((uint8_t *)buf)[length - 1 - i] = tmp;
 8013c62:	5454      	strb	r4, [r2, r1]
	for (i = 0; i < (length/2); i++) {
 8013c64:	3301      	adds	r3, #1
 8013c66:	2b07      	cmp	r3, #7
 8013c68:	d9f5      	bls.n	8013c56 <db_hash_gen+0x8a>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
 8013c6a:	b90e      	cbnz	r6, 8013c70 <db_hash_gen+0xa4>
}
 8013c6c:	b04c      	add	sp, #304	; 0x130
 8013c6e:	bd70      	pop	{r4, r5, r6, pc}
		db_hash_store();
 8013c70:	f7fe fc9a 	bl	80125a8 <db_hash_store>
 8013c74:	e7fa      	b.n	8013c6c <db_hash_gen+0xa0>
 8013c76:	bf00      	nop
 8013c78:	0801e99f 	.word	0x0801e99f
 8013c7c:	20004290 	.word	0x20004290
 8013c80:	08022bc0 	.word	0x08022bc0
 8013c84:	08022b90 	.word	0x08022b90
 8013c88:	080277dc 	.word	0x080277dc
 8013c8c:	080277f8 	.word	0x080277f8

08013c90 <db_hash_commit>:
{
 8013c90:	b510      	push	{r4, lr}
	err = k_delayed_work_cancel(&db_hash_work);
 8013c92:	4814      	ldr	r0, [pc, #80]	; (8013ce4 <db_hash_commit+0x54>)
 8013c94:	f00e fb74 	bl	8022380 <k_delayed_work_cancel>
	if (!err) {
 8013c98:	b168      	cbz	r0, 8013cb6 <db_hash_commit+0x26>
	if (!memcmp(stored_hash, db_hash, sizeof(stored_hash))) {
 8013c9a:	2210      	movs	r2, #16
 8013c9c:	4912      	ldr	r1, [pc, #72]	; (8013ce8 <db_hash_commit+0x58>)
 8013c9e:	4813      	ldr	r0, [pc, #76]	; (8013cec <db_hash_commit+0x5c>)
 8013ca0:	f008 fded 	bl	801c87e <memcmp>
 8013ca4:	b150      	cbz	r0, 8013cbc <db_hash_commit+0x2c>
	sc_indicate(0x0001, 0xffff);
 8013ca6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013caa:	2001      	movs	r0, #1
 8013cac:	f7ff f8c2 	bl	8012e34 <sc_indicate>
	db_hash_store();
 8013cb0:	f7fe fc7a 	bl	80125a8 <db_hash_store>
	return 0;
 8013cb4:	e014      	b.n	8013ce0 <db_hash_commit+0x50>
		db_hash_gen(false);
 8013cb6:	f7ff ff89 	bl	8013bcc <db_hash_gen>
 8013cba:	e7ee      	b.n	8013c9a <db_hash_commit+0xa>
		k_delayed_work_cancel(&gatt_sc.work);
 8013cbc:	4c0c      	ldr	r4, [pc, #48]	; (8013cf0 <db_hash_commit+0x60>)
 8013cbe:	f104 0018 	add.w	r0, r4, #24
 8013cc2:	f00e fb5d 	bl	8022380 <k_delayed_work_cancel>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8013cc6:	3448      	adds	r4, #72	; 0x48
 8013cc8:	f3bf 8f5b 	dmb	ish
 8013ccc:	e854 3f00 	ldrex	r3, [r4]
 8013cd0:	f023 0301 	bic.w	r3, r3, #1
 8013cd4:	e844 3200 	strex	r2, r3, [r4]
 8013cd8:	2a00      	cmp	r2, #0
 8013cda:	d1f7      	bne.n	8013ccc <db_hash_commit+0x3c>
 8013cdc:	f3bf 8f5b 	dmb	ish
}
 8013ce0:	2000      	movs	r0, #0
 8013ce2:	bd10      	pop	{r4, pc}
 8013ce4:	20002610 	.word	0x20002610
 8013ce8:	20004290 	.word	0x20004290
 8013cec:	200043ac 	.word	0x200043ac
 8013cf0:	20002640 	.word	0x20002640

08013cf4 <bt_gatt_clear_ccc>:
{
 8013cf4:	b570      	push	{r4, r5, r6, lr}
 8013cf6:	b090      	sub	sp, #64	; 0x40
 8013cf8:	4604      	mov	r4, r0
 8013cfa:	460d      	mov	r5, r1
	struct addr_with_id addr_with_id = {
 8013cfc:	910e      	str	r1, [sp, #56]	; 0x38
 8013cfe:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
 8013d02:	ab0e      	add	r3, sp, #56	; 0x38
 8013d04:	9302      	str	r3, [sp, #8]
 8013d06:	4b13      	ldr	r3, [pc, #76]	; (8013d54 <bt_gatt_clear_ccc+0x60>)
 8013d08:	9301      	str	r3, [sp, #4]
 8013d0a:	2200      	movs	r2, #0
 8013d0c:	9200      	str	r2, [sp, #0]
 8013d0e:	4613      	mov	r3, r2
 8013d10:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013d14:	2001      	movs	r0, #1
 8013d16:	f7ff ff0f 	bl	8013b38 <bt_gatt_foreach_attr_type>
		if (id) {
 8013d1a:	b18c      	cbz	r4, 8013d40 <bt_gatt_clear_ccc+0x4c>
			u8_to_dec(id_str, sizeof(id_str), id);
 8013d1c:	ae04      	add	r6, sp, #16
 8013d1e:	4622      	mov	r2, r4
 8013d20:	2104      	movs	r1, #4
 8013d22:	4630      	mov	r0, r6
 8013d24:	f7f1 fa46 	bl	80051b4 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
 8013d28:	9600      	str	r6, [sp, #0]
 8013d2a:	462b      	mov	r3, r5
 8013d2c:	4a0a      	ldr	r2, [pc, #40]	; (8013d58 <bt_gatt_clear_ccc+0x64>)
 8013d2e:	2124      	movs	r1, #36	; 0x24
 8013d30:	a805      	add	r0, sp, #20
 8013d32:	f7f8 f82d 	bl	800bd90 <bt_settings_encode_key>
		return settings_delete(key);
 8013d36:	a805      	add	r0, sp, #20
 8013d38:	f007 fdfa 	bl	801b930 <settings_delete>
}
 8013d3c:	b010      	add	sp, #64	; 0x40
 8013d3e:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
 8013d40:	2300      	movs	r3, #0
 8013d42:	9300      	str	r3, [sp, #0]
 8013d44:	462b      	mov	r3, r5
 8013d46:	4a04      	ldr	r2, [pc, #16]	; (8013d58 <bt_gatt_clear_ccc+0x64>)
 8013d48:	2124      	movs	r1, #36	; 0x24
 8013d4a:	a805      	add	r0, sp, #20
 8013d4c:	f7f8 f820 	bl	800bd90 <bt_settings_encode_key>
 8013d50:	e7f1      	b.n	8013d36 <bt_gatt_clear_ccc+0x42>
 8013d52:	bf00      	nop
 8013d54:	08012d3d 	.word	0x08012d3d
 8013d58:	08027814 	.word	0x08027814

08013d5c <gatt_find_by_uuid>:
{
 8013d5c:	b510      	push	{r4, lr}
 8013d5e:	b084      	sub	sp, #16
 8013d60:	4604      	mov	r4, r0
 8013d62:	460a      	mov	r2, r1
	found->attr = NULL;
 8013d64:	2300      	movs	r3, #0
 8013d66:	6003      	str	r3, [r0, #0]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
 8013d68:	9002      	str	r0, [sp, #8]
 8013d6a:	4907      	ldr	r1, [pc, #28]	; (8013d88 <gatt_find_by_uuid+0x2c>)
 8013d6c:	9101      	str	r1, [sp, #4]
 8013d6e:	2101      	movs	r1, #1
 8013d70:	9100      	str	r1, [sp, #0]
 8013d72:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013d76:	8880      	ldrh	r0, [r0, #4]
 8013d78:	f7ff fede 	bl	8013b38 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
 8013d7c:	6820      	ldr	r0, [r4, #0]
}
 8013d7e:	3800      	subs	r0, #0
 8013d80:	bf18      	it	ne
 8013d82:	2001      	movne	r0, #1
 8013d84:	b004      	add	sp, #16
 8013d86:	bd10      	pop	{r4, pc}
 8013d88:	0801e993 	.word	0x0801e993

08013d8c <bt_gatt_notify_cb>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8013d8c:	f3bf 8f5b 	dmb	ish
 8013d90:	4b34      	ldr	r3, [pc, #208]	; (8013e64 <bt_gatt_notify_cb+0xd8>)
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
 8013d98:	f013 0f02 	tst.w	r3, #2
 8013d9c:	d055      	beq.n	8013e4a <bt_gatt_notify_cb+0xbe>
{
 8013d9e:	b530      	push	{r4, r5, lr}
 8013da0:	b08d      	sub	sp, #52	; 0x34
 8013da2:	4604      	mov	r4, r0
 8013da4:	460d      	mov	r5, r1
	data.attr = params->attr;
 8013da6:	6848      	ldr	r0, [r1, #4]
 8013da8:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
 8013daa:	b114      	cbz	r4, 8013db2 <bt_gatt_notify_cb+0x26>
 8013dac:	7b63      	ldrb	r3, [r4, #13]
 8013dae:	2b07      	cmp	r3, #7
 8013db0:	d14e      	bne.n	8013e50 <bt_gatt_notify_cb+0xc4>
	data.handle = bt_gatt_attr_get_handle(data.attr);
 8013db2:	f7ff fe79 	bl	8013aa8 <bt_gatt_attr_get_handle>
 8013db6:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
 8013dba:	2800      	cmp	r0, #0
 8013dbc:	d04b      	beq.n	8013e56 <bt_gatt_notify_cb+0xca>
	if (params->uuid) {
 8013dbe:	6829      	ldr	r1, [r5, #0]
 8013dc0:	b121      	cbz	r1, 8013dcc <bt_gatt_notify_cb+0x40>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
 8013dc2:	a805      	add	r0, sp, #20
 8013dc4:	f7ff ffca 	bl	8013d5c <gatt_find_by_uuid>
 8013dc8:	2800      	cmp	r0, #0
 8013dca:	d047      	beq.n	8013e5c <bt_gatt_notify_cb+0xd0>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
 8013dcc:	9b05      	ldr	r3, [sp, #20]
 8013dce:	6818      	ldr	r0, [r3, #0]
 8013dd0:	2300      	movs	r3, #0
 8013dd2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8013dd6:	f642 0303 	movw	r3, #10243	; 0x2803
 8013dda:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8013dde:	a90b      	add	r1, sp, #44	; 0x2c
 8013de0:	f008 fe2b 	bl	801ca3a <bt_uuid_cmp>
 8013de4:	b948      	cbnz	r0, 8013dfa <bt_gatt_notify_cb+0x6e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
 8013de6:	9805      	ldr	r0, [sp, #20]
 8013de8:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
 8013dea:	799b      	ldrb	r3, [r3, #6]
 8013dec:	f013 0f10 	tst.w	r3, #16
 8013df0:	d00c      	beq.n	8013e0c <bt_gatt_notify_cb+0x80>
		data.handle = bt_gatt_attr_value_handle(data.attr);
 8013df2:	f7ff fe89 	bl	8013b08 <bt_gatt_attr_value_handle>
 8013df6:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
 8013dfa:	b154      	cbz	r4, 8013e12 <bt_gatt_notify_cb+0x86>
		return gatt_notify(conn, data.handle, params);
 8013dfc:	462a      	mov	r2, r5
 8013dfe:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8013e02:	4620      	mov	r0, r4
 8013e04:	f7ff faa6 	bl	8013354 <gatt_notify>
}
 8013e08:	b00d      	add	sp, #52	; 0x34
 8013e0a:	bd30      	pop	{r4, r5, pc}
			return -EINVAL;
 8013e0c:	f06f 0015 	mvn.w	r0, #21
 8013e10:	e7fa      	b.n	8013e08 <bt_gatt_notify_cb+0x7c>
	data.err = -ENOTCONN;
 8013e12:	f06f 0338 	mvn.w	r3, #56	; 0x38
 8013e16:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
 8013e18:	2201      	movs	r2, #1
 8013e1a:	f8ad 2020 	strh.w	r2, [sp, #32]
	data.nfy_params = params;
 8013e1e:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
 8013e20:	2300      	movs	r3, #0
 8013e22:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8013e26:	f642 1102 	movw	r1, #10498	; 0x2902
 8013e2a:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
 8013e2e:	a905      	add	r1, sp, #20
 8013e30:	9102      	str	r1, [sp, #8]
 8013e32:	490d      	ldr	r1, [pc, #52]	; (8013e68 <bt_gatt_notify_cb+0xdc>)
 8013e34:	9101      	str	r1, [sp, #4]
 8013e36:	9200      	str	r2, [sp, #0]
 8013e38:	aa0a      	add	r2, sp, #40	; 0x28
 8013e3a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013e3e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8013e42:	f7ff fe79 	bl	8013b38 <bt_gatt_foreach_attr_type>
	return data.err;
 8013e46:	9807      	ldr	r0, [sp, #28]
 8013e48:	e7de      	b.n	8013e08 <bt_gatt_notify_cb+0x7c>
		return -EAGAIN;
 8013e4a:	f06f 000a 	mvn.w	r0, #10
}
 8013e4e:	4770      	bx	lr
		return -ENOTCONN;
 8013e50:	f06f 0038 	mvn.w	r0, #56	; 0x38
 8013e54:	e7d8      	b.n	8013e08 <bt_gatt_notify_cb+0x7c>
		return -ENOENT;
 8013e56:	f06f 0001 	mvn.w	r0, #1
 8013e5a:	e7d5      	b.n	8013e08 <bt_gatt_notify_cb+0x7c>
			return -ENOENT;
 8013e5c:	f06f 0001 	mvn.w	r0, #1
 8013e60:	e7d2      	b.n	8013e08 <bt_gatt_notify_cb+0x7c>
 8013e62:	bf00      	nop
 8013e64:	20000094 	.word	0x20000094
 8013e68:	080133d5 	.word	0x080133d5

08013e6c <bt_gatt_indicate>:
 8013e6c:	f3bf 8f5b 	dmb	ish
 8013e70:	4b34      	ldr	r3, [pc, #208]	; (8013f44 <bt_gatt_indicate+0xd8>)
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
 8013e78:	f013 0f02 	tst.w	r3, #2
 8013e7c:	d056      	beq.n	8013f2c <bt_gatt_indicate+0xc0>
{
 8013e7e:	b530      	push	{r4, r5, lr}
 8013e80:	b08d      	sub	sp, #52	; 0x34
 8013e82:	4604      	mov	r4, r0
 8013e84:	460d      	mov	r5, r1
	data.attr = params->attr;
 8013e86:	6848      	ldr	r0, [r1, #4]
 8013e88:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
 8013e8a:	b114      	cbz	r4, 8013e92 <bt_gatt_indicate+0x26>
 8013e8c:	7b63      	ldrb	r3, [r4, #13]
 8013e8e:	2b07      	cmp	r3, #7
 8013e90:	d14f      	bne.n	8013f32 <bt_gatt_indicate+0xc6>
	data.handle = bt_gatt_attr_get_handle(data.attr);
 8013e92:	f7ff fe09 	bl	8013aa8 <bt_gatt_attr_get_handle>
 8013e96:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
 8013e9a:	2800      	cmp	r0, #0
 8013e9c:	d04c      	beq.n	8013f38 <bt_gatt_indicate+0xcc>
	if (params->uuid) {
 8013e9e:	6829      	ldr	r1, [r5, #0]
 8013ea0:	b121      	cbz	r1, 8013eac <bt_gatt_indicate+0x40>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
 8013ea2:	a805      	add	r0, sp, #20
 8013ea4:	f7ff ff5a 	bl	8013d5c <gatt_find_by_uuid>
 8013ea8:	2800      	cmp	r0, #0
 8013eaa:	d048      	beq.n	8013f3e <bt_gatt_indicate+0xd2>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
 8013eac:	9b05      	ldr	r3, [sp, #20]
 8013eae:	6818      	ldr	r0, [r3, #0]
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8013eb6:	f642 0303 	movw	r3, #10243	; 0x2803
 8013eba:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8013ebe:	a90b      	add	r1, sp, #44	; 0x2c
 8013ec0:	f008 fdbb 	bl	801ca3a <bt_uuid_cmp>
 8013ec4:	b948      	cbnz	r0, 8013eda <bt_gatt_indicate+0x6e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
 8013ec6:	9805      	ldr	r0, [sp, #20]
 8013ec8:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
 8013eca:	799b      	ldrb	r3, [r3, #6]
 8013ecc:	f013 0f20 	tst.w	r3, #32
 8013ed0:	d00c      	beq.n	8013eec <bt_gatt_indicate+0x80>
		data.handle = bt_gatt_attr_value_handle(data.attr);
 8013ed2:	f7ff fe19 	bl	8013b08 <bt_gatt_attr_value_handle>
 8013ed6:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
 8013eda:	b154      	cbz	r4, 8013ef2 <bt_gatt_indicate+0x86>
		return gatt_indicate(conn, data.handle, params);
 8013edc:	462a      	mov	r2, r5
 8013ede:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8013ee2:	4620      	mov	r0, r4
 8013ee4:	f7ff f918 	bl	8013118 <gatt_indicate>
}
 8013ee8:	b00d      	add	sp, #52	; 0x34
 8013eea:	bd30      	pop	{r4, r5, pc}
			return -EINVAL;
 8013eec:	f06f 0015 	mvn.w	r0, #21
 8013ef0:	e7fa      	b.n	8013ee8 <bt_gatt_indicate+0x7c>
	data.err = -ENOTCONN;
 8013ef2:	f06f 0338 	mvn.w	r3, #56	; 0x38
 8013ef6:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
 8013ef8:	2302      	movs	r3, #2
 8013efa:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.ind_params = params;
 8013efe:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
 8013f00:	2300      	movs	r3, #0
 8013f02:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8013f06:	f642 1202 	movw	r2, #10498	; 0x2902
 8013f0a:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8013f0e:	aa05      	add	r2, sp, #20
 8013f10:	9202      	str	r2, [sp, #8]
 8013f12:	4a0d      	ldr	r2, [pc, #52]	; (8013f48 <bt_gatt_indicate+0xdc>)
 8013f14:	9201      	str	r2, [sp, #4]
 8013f16:	2201      	movs	r2, #1
 8013f18:	9200      	str	r2, [sp, #0]
 8013f1a:	aa0a      	add	r2, sp, #40	; 0x28
 8013f1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013f20:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8013f24:	f7ff fe08 	bl	8013b38 <bt_gatt_foreach_attr_type>
	return data.err;
 8013f28:	9807      	ldr	r0, [sp, #28]
 8013f2a:	e7dd      	b.n	8013ee8 <bt_gatt_indicate+0x7c>
		return -EAGAIN;
 8013f2c:	f06f 000a 	mvn.w	r0, #10
}
 8013f30:	4770      	bx	lr
		return -ENOTCONN;
 8013f32:	f06f 0038 	mvn.w	r0, #56	; 0x38
 8013f36:	e7d7      	b.n	8013ee8 <bt_gatt_indicate+0x7c>
		return -ENOENT;
 8013f38:	f06f 0001 	mvn.w	r0, #1
 8013f3c:	e7d4      	b.n	8013ee8 <bt_gatt_indicate+0x7c>
			return -ENOENT;
 8013f3e:	f06f 0001 	mvn.w	r0, #1
 8013f42:	e7d1      	b.n	8013ee8 <bt_gatt_indicate+0x7c>
 8013f44:	20000094 	.word	0x20000094
 8013f48:	080133d5 	.word	0x080133d5

08013f4c <sc_process>:
{
 8013f4c:	b510      	push	{r4, lr}
 8013f4e:	b082      	sub	sp, #8
 8013f50:	4603      	mov	r3, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
 8013f52:	f830 2c04 	ldrh.w	r2, [r0, #-4]
 8013f56:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
 8013f5a:	f830 2c02 	ldrh.w	r2, [r0, #-2]
 8013f5e:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
 8013f62:	f1a0 0118 	sub.w	r1, r0, #24
 8013f66:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8013f6a:	f3bf 8f5b 	dmb	ish
 8013f6e:	e854 2f00 	ldrex	r2, [r4]
 8013f72:	f022 0201 	bic.w	r2, r2, #1
 8013f76:	e844 2000 	strex	r0, r2, [r4]
 8013f7a:	2800      	cmp	r0, #0
 8013f7c:	d1f7      	bne.n	8013f6e <sc_process+0x22>
 8013f7e:	f3bf 8f5b 	dmb	ish
	sc->start = 0U;
 8013f82:	2000      	movs	r0, #0
 8013f84:	f823 0c04 	strh.w	r0, [r3, #-4]
	sc->end = 0U;
 8013f88:	f823 0c02 	strh.w	r0, [r3, #-2]
	sc->params.attr = &_1_gatt_svc.attrs[2];
 8013f8c:	4a0e      	ldr	r2, [pc, #56]	; (8013fc8 <sc_process+0x7c>)
 8013f8e:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
 8013f92:	4a0e      	ldr	r2, [pc, #56]	; (8013fcc <sc_process+0x80>)
 8013f94:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
 8013f98:	aa01      	add	r2, sp, #4
 8013f9a:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
 8013f9e:	2204      	movs	r2, #4
 8013fa0:	f823 2c08 	strh.w	r2, [r3, #-8]
	if (bt_gatt_indicate(NULL, &sc->params)) {
 8013fa4:	f7ff ff62 	bl	8013e6c <bt_gatt_indicate>
 8013fa8:	b108      	cbz	r0, 8013fae <sc_process+0x62>
}
 8013faa:	b002      	add	sp, #8
 8013fac:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8013fae:	f3bf 8f5b 	dmb	ish
 8013fb2:	e854 3f00 	ldrex	r3, [r4]
 8013fb6:	f043 0302 	orr.w	r3, r3, #2
 8013fba:	e844 3200 	strex	r2, r3, [r4]
 8013fbe:	2a00      	cmp	r2, #0
 8013fc0:	d1f7      	bne.n	8013fb2 <sc_process+0x66>
 8013fc2:	f3bf 8f5b 	dmb	ish
 8013fc6:	e7f0      	b.n	8013faa <sc_process+0x5e>
 8013fc8:	080278f8 	.word	0x080278f8
 8013fcc:	08012d69 	.word	0x08012d69

08013fd0 <sc_restore>:
{
 8013fd0:	b530      	push	{r4, r5, lr}
 8013fd2:	b083      	sub	sp, #12
 8013fd4:	4604      	mov	r4, r0
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
 8013fd6:	f100 0188 	add.w	r1, r0, #136	; 0x88
 8013fda:	7a00      	ldrb	r0, [r0, #8]
 8013fdc:	f7fe fb5a 	bl	8012694 <find_sc_cfg>
	if (!cfg) {
 8013fe0:	b308      	cbz	r0, 8014026 <sc_restore+0x56>
 8013fe2:	4605      	mov	r5, r0
	if (!(cfg->data.start || cfg->data.end)) {
 8013fe4:	8903      	ldrh	r3, [r0, #8]
 8013fe6:	b90b      	cbnz	r3, 8013fec <sc_restore+0x1c>
 8013fe8:	8942      	ldrh	r2, [r0, #10]
 8013fea:	b1e2      	cbz	r2, 8014026 <sc_restore+0x56>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
 8013fec:	f8ad 3004 	strh.w	r3, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
 8013ff0:	896b      	ldrh	r3, [r5, #10]
 8013ff2:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
 8013ff6:	4620      	mov	r0, r4
 8013ff8:	f7fc ff4a 	bl	8010e90 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
 8013ffc:	4914      	ldr	r1, [pc, #80]	; (8014050 <sc_restore+0x80>)
 8013ffe:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8014002:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014006:	4a13      	ldr	r2, [pc, #76]	; (8014054 <sc_restore+0x84>)
 8014008:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
 801400a:	4a13      	ldr	r2, [pc, #76]	; (8014058 <sc_restore+0x88>)
 801400c:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
 801400e:	aa01      	add	r2, sp, #4
 8014010:	60da      	str	r2, [r3, #12]
	sc_restore_params[index].len = sizeof(sc_range);
 8014012:	2204      	movs	r2, #4
 8014014:	821a      	strh	r2, [r3, #16]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
 8014016:	4619      	mov	r1, r3
 8014018:	4620      	mov	r0, r4
 801401a:	f7ff ff27 	bl	8013e6c <bt_gatt_indicate>
 801401e:	b920      	cbnz	r0, 801402a <sc_restore+0x5a>
	sc_reset(cfg);
 8014020:	4628      	mov	r0, r5
 8014022:	f00a fe26 	bl	801ec72 <sc_reset>
}
 8014026:	b003      	add	sp, #12
 8014028:	bd30      	pop	{r4, r5, pc}
		BT_ERR("SC restore indication failed");
 801402a:	f04f 0100 	mov.w	r1, #0
 801402e:	2301      	movs	r3, #1
 8014030:	f363 0102 	bfi	r1, r3, #0, #3
 8014034:	f36f 01c5 	bfc	r1, #3, #3
 8014038:	4b08      	ldr	r3, [pc, #32]	; (801405c <sc_restore+0x8c>)
 801403a:	4a09      	ldr	r2, [pc, #36]	; (8014060 <sc_restore+0x90>)
 801403c:	1a9b      	subs	r3, r3, r2
 801403e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8014042:	f363 118f 	bfi	r1, r3, #6, #10
 8014046:	4807      	ldr	r0, [pc, #28]	; (8014064 <sc_restore+0x94>)
 8014048:	f7f2 fbea 	bl	8006820 <log_0>
 801404c:	e7e8      	b.n	8014020 <sc_restore+0x50>
 801404e:	bf00      	nop
 8014050:	20004334 	.word	0x20004334
 8014054:	080278f8 	.word	0x080278f8
 8014058:	0801ec1b 	.word	0x0801ec1b
 801405c:	08022bc0 	.word	0x08022bc0
 8014060:	08022b90 	.word	0x08022b90
 8014064:	08027818 	.word	0x08027818

08014068 <update_ccc>:
{
 8014068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801406c:	4616      	mov	r6, r2
	struct bt_conn *conn = data->conn;
 801406e:	f8d2 8000 	ldr.w	r8, [r2]
	if (attr->write != bt_gatt_attr_write_ccc) {
 8014072:	6882      	ldr	r2, [r0, #8]
 8014074:	4b2a      	ldr	r3, [pc, #168]	; (8014120 <update_ccc+0xb8>)
 8014076:	429a      	cmp	r2, r3
 8014078:	d002      	beq.n	8014080 <update_ccc+0x18>
}
 801407a:	2001      	movs	r0, #1
 801407c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014080:	4605      	mov	r5, r0
	ccc = attr->user_data;
 8014082:	68c7      	ldr	r7, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
 8014084:	2400      	movs	r4, #0
 8014086:	e01a      	b.n	80140be <update_ccc+0x56>
				BT_WARN("CCC %p not writable", attr);
 8014088:	2302      	movs	r3, #2
 801408a:	f363 0902 	bfi	r9, r3, #0, #3
 801408e:	f36f 09c5 	bfc	r9, #3, #3
 8014092:	4b24      	ldr	r3, [pc, #144]	; (8014124 <update_ccc+0xbc>)
 8014094:	4a24      	ldr	r2, [pc, #144]	; (8014128 <update_ccc+0xc0>)
 8014096:	1a9b      	subs	r3, r3, r2
 8014098:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 801409c:	f363 198f 	bfi	r9, r3, #6, #10
 80140a0:	464a      	mov	r2, r9
 80140a2:	4629      	mov	r1, r5
 80140a4:	4821      	ldr	r0, [pc, #132]	; (801412c <update_ccc+0xc4>)
 80140a6:	f7f2 fa4b 	bl	8006540 <log_1>
				continue;
 80140aa:	e007      	b.n	80140bc <update_ccc+0x54>
				sec = BT_SECURITY_L3;
 80140ac:	f04f 0a03 	mov.w	sl, #3
 80140b0:	e026      	b.n	8014100 <update_ccc+0x98>
				if (data->sec < sec) {
 80140b2:	7933      	ldrb	r3, [r6, #4]
 80140b4:	459a      	cmp	sl, r3
 80140b6:	d901      	bls.n	80140bc <update_ccc+0x54>
					data->sec = sec;
 80140b8:	f886 a004 	strb.w	sl, [r6, #4]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
 80140bc:	3401      	adds	r4, #1
 80140be:	2c05      	cmp	r4, #5
 80140c0:	d8db      	bhi.n	801407a <update_ccc+0x12>
		if (!cfg->value ||
 80140c2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80140c6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80140ca:	891b      	ldrh	r3, [r3, #8]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d0f5      	beq.n	80140bc <update_ccc+0x54>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
 80140d0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80140d4:	eb07 0243 	add.w	r2, r7, r3, lsl #1
 80140d8:	3201      	adds	r2, #1
 80140da:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
 80140de:	4640      	mov	r0, r8
 80140e0:	f009 facc 	bl	801d67c <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
 80140e4:	2800      	cmp	r0, #0
 80140e6:	d0e9      	beq.n	80140bc <update_ccc+0x54>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
 80140e8:	222a      	movs	r2, #42	; 0x2a
 80140ea:	4629      	mov	r1, r5
 80140ec:	4640      	mov	r0, r8
 80140ee:	f00a ffe5 	bl	801f0bc <bt_gatt_check_perm>
		if (err) {
 80140f2:	b150      	cbz	r0, 801410a <update_ccc+0xa2>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
 80140f4:	2803      	cmp	r0, #3
 80140f6:	d0c7      	beq.n	8014088 <update_ccc+0x20>
			if (err == BT_ATT_ERR_AUTHENTICATION) {
 80140f8:	2805      	cmp	r0, #5
 80140fa:	d0d7      	beq.n	80140ac <update_ccc+0x44>
			sec = BT_SECURITY_L2;
 80140fc:	f04f 0a02 	mov.w	sl, #2
			    bt_conn_get_security(conn) < sec) {
 8014100:	4640      	mov	r0, r8
 8014102:	f009 fa63 	bl	801d5cc <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
 8014106:	4582      	cmp	sl, r0
 8014108:	d8d3      	bhi.n	80140b2 <update_ccc+0x4a>
		gatt_ccc_changed(attr, ccc);
 801410a:	4639      	mov	r1, r7
 801410c:	4628      	mov	r0, r5
 801410e:	f00a fc20 	bl	801e952 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
 8014112:	4b07      	ldr	r3, [pc, #28]	; (8014130 <update_ccc+0xc8>)
 8014114:	429f      	cmp	r7, r3
 8014116:	d1b0      	bne.n	801407a <update_ccc+0x12>
			sc_restore(conn);
 8014118:	4640      	mov	r0, r8
 801411a:	f7ff ff59 	bl	8013fd0 <sc_restore>
 801411e:	e7ac      	b.n	801407a <update_ccc+0x12>
 8014120:	080127e9 	.word	0x080127e9
 8014124:	08022bc0 	.word	0x08022bc0
 8014128:	08022b90 	.word	0x08022b90
 801412c:	08027838 	.word	0x08027838
 8014130:	20000c74 	.word	0x20000c74

08014134 <bt_gatt_discover>:
	if (conn->state != BT_CONN_CONNECTED) {
 8014134:	7b43      	ldrb	r3, [r0, #13]
 8014136:	2b07      	cmp	r3, #7
 8014138:	d167      	bne.n	801420a <bt_gatt_discover+0xd6>
{
 801413a:	b530      	push	{r4, r5, lr}
 801413c:	b085      	sub	sp, #20
 801413e:	4605      	mov	r5, r0
 8014140:	460c      	mov	r4, r1
	switch (params->type) {
 8014142:	7c09      	ldrb	r1, [r1, #16]
 8014144:	2905      	cmp	r1, #5
 8014146:	d84c      	bhi.n	80141e2 <bt_gatt_discover+0xae>
 8014148:	e8df f001 	tbb	[pc, r1]
 801414c:	0d0d0303 	.word	0x0d0d0303
 8014150:	4211      	.short	0x4211
		if (params->uuid) {
 8014152:	6823      	ldr	r3, [r4, #0]
 8014154:	b11b      	cbz	r3, 801415e <bt_gatt_discover+0x2a>
			return gatt_find_type(conn, params);
 8014156:	4621      	mov	r1, r4
 8014158:	f7ff fa5c 	bl	8013614 <gatt_find_type>
 801415c:	e03c      	b.n	80141d8 <bt_gatt_discover+0xa4>
		return gatt_read_group(conn, params);
 801415e:	4621      	mov	r1, r4
 8014160:	f7ff f9c8 	bl	80134f4 <gatt_read_group>
 8014164:	e038      	b.n	80141d8 <bt_gatt_discover+0xa4>
		return gatt_read_type(conn, params);
 8014166:	4621      	mov	r1, r4
 8014168:	f7ff f9f4 	bl	8013554 <gatt_read_type>
 801416c:	e034      	b.n	80141d8 <bt_gatt_discover+0xa4>
		if (params->uuid &&
 801416e:	6820      	ldr	r0, [r4, #0]
 8014170:	b370      	cbz	r0, 80141d0 <bt_gatt_discover+0x9c>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
 8014172:	2300      	movs	r3, #0
 8014174:	f88d 3000 	strb.w	r3, [sp]
 8014178:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 801417c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8014180:	4669      	mov	r1, sp
 8014182:	f008 fc5a 	bl	801ca3a <bt_uuid_cmp>
		if (params->uuid &&
 8014186:	b348      	cbz	r0, 80141dc <bt_gatt_discover+0xa8>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
 8014188:	2300      	movs	r3, #0
 801418a:	f88d 3004 	strb.w	r3, [sp, #4]
 801418e:	f642 0301 	movw	r3, #10241	; 0x2801
 8014192:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014196:	a901      	add	r1, sp, #4
 8014198:	6820      	ldr	r0, [r4, #0]
 801419a:	f008 fc4e 	bl	801ca3a <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
 801419e:	b1e8      	cbz	r0, 80141dc <bt_gatt_discover+0xa8>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
 80141a0:	2300      	movs	r3, #0
 80141a2:	f88d 3008 	strb.w	r3, [sp, #8]
 80141a6:	f642 0302 	movw	r3, #10242	; 0x2802
 80141aa:	f8ad 300a 	strh.w	r3, [sp, #10]
 80141ae:	a902      	add	r1, sp, #8
 80141b0:	6820      	ldr	r0, [r4, #0]
 80141b2:	f008 fc42 	bl	801ca3a <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
 80141b6:	b188      	cbz	r0, 80141dc <bt_gatt_discover+0xa8>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
 80141b8:	2300      	movs	r3, #0
 80141ba:	f88d 300c 	strb.w	r3, [sp, #12]
 80141be:	f642 0303 	movw	r3, #10243	; 0x2803
 80141c2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80141c6:	a903      	add	r1, sp, #12
 80141c8:	6820      	ldr	r0, [r4, #0]
 80141ca:	f008 fc36 	bl	801ca3a <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
 80141ce:	b128      	cbz	r0, 80141dc <bt_gatt_discover+0xa8>
		return gatt_find_info(conn, params);
 80141d0:	4621      	mov	r1, r4
 80141d2:	4628      	mov	r0, r5
 80141d4:	f7ff f89c 	bl	8013310 <gatt_find_info>
}
 80141d8:	b005      	add	sp, #20
 80141da:	bd30      	pop	{r4, r5, pc}
			return -EINVAL;
 80141dc:	f06f 0015 	mvn.w	r0, #21
 80141e0:	e7fa      	b.n	80141d8 <bt_gatt_discover+0xa4>
		BT_ERR("Invalid discovery type: %u", params->type);
 80141e2:	f04f 0200 	mov.w	r2, #0
 80141e6:	2301      	movs	r3, #1
 80141e8:	f363 0202 	bfi	r2, r3, #0, #3
 80141ec:	f36f 02c5 	bfc	r2, #3, #3
 80141f0:	4b07      	ldr	r3, [pc, #28]	; (8014210 <bt_gatt_discover+0xdc>)
 80141f2:	4808      	ldr	r0, [pc, #32]	; (8014214 <bt_gatt_discover+0xe0>)
 80141f4:	1a1b      	subs	r3, r3, r0
 80141f6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80141fa:	f363 128f 	bfi	r2, r3, #6, #10
 80141fe:	4806      	ldr	r0, [pc, #24]	; (8014218 <bt_gatt_discover+0xe4>)
 8014200:	f7f2 f99e 	bl	8006540 <log_1>
	return -EINVAL;
 8014204:	f06f 0015 	mvn.w	r0, #21
 8014208:	e7e6      	b.n	80141d8 <bt_gatt_discover+0xa4>
		return -ENOTCONN;
 801420a:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
 801420e:	4770      	bx	lr
 8014210:	08022bc0 	.word	0x08022bc0
 8014214:	08022b90 	.word	0x08022b90
 8014218:	0802784c 	.word	0x0802784c

0801421c <read_included_uuid_cb>:
{
 801421c:	b530      	push	{r4, r5, lr}
 801421e:	b08f      	sub	sp, #60	; 0x3c
 8014220:	4605      	mov	r5, r0
 8014222:	9c12      	ldr	r4, [sp, #72]	; 0x48
	if (length != 16U) {
 8014224:	2b10      	cmp	r3, #16
 8014226:	d018      	beq.n	801425a <read_included_uuid_cb+0x3e>
		BT_ERR("Invalid data len %u", length);
 8014228:	f04f 0200 	mov.w	r2, #0
 801422c:	2101      	movs	r1, #1
 801422e:	f361 0202 	bfi	r2, r1, #0, #3
 8014232:	f36f 02c5 	bfc	r2, #3, #3
 8014236:	4923      	ldr	r1, [pc, #140]	; (80142c4 <read_included_uuid_cb+0xa8>)
 8014238:	4823      	ldr	r0, [pc, #140]	; (80142c8 <read_included_uuid_cb+0xac>)
 801423a:	1a09      	subs	r1, r1, r0
 801423c:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 8014240:	f361 128f 	bfi	r2, r1, #6, #10
 8014244:	4619      	mov	r1, r3
 8014246:	4821      	ldr	r0, [pc, #132]	; (80142cc <read_included_uuid_cb+0xb0>)
 8014248:	f7f2 f97a 	bl	8006540 <log_1>
		params->func(conn, NULL, params);
 801424c:	6863      	ldr	r3, [r4, #4]
 801424e:	4622      	mov	r2, r4
 8014250:	2100      	movs	r1, #0
 8014252:	4628      	mov	r0, r5
 8014254:	4798      	blx	r3
}
 8014256:	b00f      	add	sp, #60	; 0x3c
 8014258:	bd30      	pop	{r4, r5, pc}
 801425a:	4611      	mov	r1, r2
	value.start_handle = params->_included.start_handle;
 801425c:	8962      	ldrh	r2, [r4, #10]
 801425e:	f8ad 201c 	strh.w	r2, [sp, #28]
	value.end_handle = params->_included.end_handle;
 8014262:	89a2      	ldrh	r2, [r4, #12]
 8014264:	f8ad 201e 	strh.w	r2, [sp, #30]
	value.uuid = &u.uuid;
 8014268:	aa01      	add	r2, sp, #4
 801426a:	9206      	str	r2, [sp, #24]
	u.uuid.type = BT_UUID_TYPE_128;
 801426c:	2202      	movs	r2, #2
 801426e:	f88d 2004 	strb.w	r2, [sp, #4]
	memcpy(u.u128.val, pdu, length);
 8014272:	461a      	mov	r2, r3
 8014274:	f10d 0005 	add.w	r0, sp, #5
 8014278:	f008 fb19 	bl	801c8ae <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
 801427c:	6821      	ldr	r1, [r4, #0]
 801427e:	b119      	cbz	r1, 8014288 <read_included_uuid_cb+0x6c>
 8014280:	a801      	add	r0, sp, #4
 8014282:	f008 fbda 	bl	801ca3a <bt_uuid_cmp>
 8014286:	b9b8      	cbnz	r0, 80142b8 <read_included_uuid_cb+0x9c>
	attr = (&(struct bt_gatt_attr) {
 8014288:	2300      	movs	r3, #0
 801428a:	930a      	str	r3, [sp, #40]	; 0x28
 801428c:	930b      	str	r3, [sp, #44]	; 0x2c
 801428e:	930d      	str	r3, [sp, #52]	; 0x34
		.uuid = BT_UUID_GATT_INCLUDE,
 8014290:	f88d 3020 	strb.w	r3, [sp, #32]
 8014294:	f642 0302 	movw	r3, #10242	; 0x2802
 8014298:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	attr = (&(struct bt_gatt_attr) {
 801429c:	ab08      	add	r3, sp, #32
 801429e:	9309      	str	r3, [sp, #36]	; 0x24
 80142a0:	ab06      	add	r3, sp, #24
 80142a2:	930c      	str	r3, [sp, #48]	; 0x30
	attr->handle = params->_included.attr_handle;
 80142a4:	8923      	ldrh	r3, [r4, #8]
 80142a6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
 80142aa:	6863      	ldr	r3, [r4, #4]
 80142ac:	4622      	mov	r2, r4
 80142ae:	a909      	add	r1, sp, #36	; 0x24
 80142b0:	4628      	mov	r0, r5
 80142b2:	4798      	blx	r3
 80142b4:	2800      	cmp	r0, #0
 80142b6:	d0ce      	beq.n	8014256 <read_included_uuid_cb+0x3a>
	gatt_discover_next(conn, params->start_handle, params);
 80142b8:	4622      	mov	r2, r4
 80142ba:	8921      	ldrh	r1, [r4, #8]
 80142bc:	4628      	mov	r0, r5
 80142be:	f00a ff2e 	bl	801f11e <gatt_discover_next>
	return;
 80142c2:	e7c8      	b.n	8014256 <read_included_uuid_cb+0x3a>
 80142c4:	08022bc0 	.word	0x08022bc0
 80142c8:	08022b90 	.word	0x08022b90
 80142cc:	080275f4 	.word	0x080275f4

080142d0 <gatt_find_info_rsp>:
{
 80142d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142d4:	b08f      	sub	sp, #60	; 0x3c
 80142d6:	4680      	mov	r8, r0
 80142d8:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (err) {
 80142da:	b9a9      	cbnz	r1, 8014308 <gatt_find_info_rsp+0x38>
	switch (rsp->format) {
 80142dc:	7811      	ldrb	r1, [r2, #0]
 80142de:	2901      	cmp	r1, #1
 80142e0:	d01a      	beq.n	8014318 <gatt_find_info_rsp+0x48>
 80142e2:	2902      	cmp	r1, #2
 80142e4:	d028      	beq.n	8014338 <gatt_find_info_rsp+0x68>
		BT_ERR("Invalid format %u", rsp->format);
 80142e6:	f04f 0200 	mov.w	r2, #0
 80142ea:	2301      	movs	r3, #1
 80142ec:	f363 0202 	bfi	r2, r3, #0, #3
 80142f0:	f36f 02c5 	bfc	r2, #3, #3
 80142f4:	4b4f      	ldr	r3, [pc, #316]	; (8014434 <gatt_find_info_rsp+0x164>)
 80142f6:	4850      	ldr	r0, [pc, #320]	; (8014438 <gatt_find_info_rsp+0x168>)
 80142f8:	1a1b      	subs	r3, r3, r0
 80142fa:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80142fe:	f363 128f 	bfi	r2, r3, #6, #10
 8014302:	484e      	ldr	r0, [pc, #312]	; (801443c <gatt_find_info_rsp+0x16c>)
 8014304:	f7f2 f91c 	bl	8006540 <log_1>
	params->func(conn, NULL, params);
 8014308:	6873      	ldr	r3, [r6, #4]
 801430a:	4632      	mov	r2, r6
 801430c:	2100      	movs	r1, #0
 801430e:	4640      	mov	r0, r8
 8014310:	4798      	blx	r3
}
 8014312:	b00f      	add	sp, #60	; 0x3c
 8014314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		u.uuid.type = BT_UUID_TYPE_16;
 8014318:	2100      	movs	r1, #0
 801431a:	f88d 1000 	strb.w	r1, [sp]
		len = sizeof(*info.i16);
 801431e:	f04f 0a04 	mov.w	sl, #4
	length--;
 8014322:	3b01      	subs	r3, #1
 8014324:	b29c      	uxth	r4, r3
	if (length < len) {
 8014326:	4554      	cmp	r4, sl
 8014328:	d3ee      	bcc.n	8014308 <gatt_find_info_rsp+0x38>
	for (i = length / len, pdu = rsp->info; i != 0;
 801432a:	fbb4 f4fa 	udiv	r4, r4, sl
 801432e:	1c55      	adds	r5, r2, #1
	bool skip = false;
 8014330:	f04f 0900 	mov.w	r9, #0
	uint16_t handle = 0U;
 8014334:	46cb      	mov	fp, r9
	for (i = length / len, pdu = rsp->info; i != 0;
 8014336:	e026      	b.n	8014386 <gatt_find_info_rsp+0xb6>
		u.uuid.type = BT_UUID_TYPE_128;
 8014338:	2102      	movs	r1, #2
 801433a:	f88d 1000 	strb.w	r1, [sp]
		len = sizeof(*info.i128);
 801433e:	f04f 0a12 	mov.w	sl, #18
		break;
 8014342:	e7ee      	b.n	8014322 <gatt_find_info_rsp+0x52>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
 8014344:	886b      	ldrh	r3, [r5, #2]
 8014346:	f8ad 3002 	strh.w	r3, [sp, #2]
			break;
 801434a:	e02a      	b.n	80143a2 <gatt_find_info_rsp+0xd2>
			memcpy(u.u128.val, info.i128->uuid, 16);
 801434c:	2210      	movs	r2, #16
 801434e:	1ca9      	adds	r1, r5, #2
 8014350:	f10d 0001 	add.w	r0, sp, #1
 8014354:	f008 faab 	bl	801c8ae <memcpy>
			break;
 8014358:	e023      	b.n	80143a2 <gatt_find_info_rsp+0xd2>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
 801435a:	7c33      	ldrb	r3, [r6, #16]
 801435c:	2b04      	cmp	r3, #4
 801435e:	d029      	beq.n	80143b4 <gatt_find_info_rsp+0xe4>
			BT_GATT_DESCRIPTOR(&u.uuid, 0, NULL, NULL, NULL));
 8014360:	f8cd d014 	str.w	sp, [sp, #20]
 8014364:	2300      	movs	r3, #0
 8014366:	9306      	str	r3, [sp, #24]
 8014368:	9307      	str	r3, [sp, #28]
 801436a:	9308      	str	r3, [sp, #32]
 801436c:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		attr->handle = handle;
 8014370:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
 8014374:	6873      	ldr	r3, [r6, #4]
 8014376:	4632      	mov	r2, r6
 8014378:	a905      	add	r1, sp, #20
 801437a:	4640      	mov	r0, r8
 801437c:	4798      	blx	r3
 801437e:	2800      	cmp	r0, #0
 8014380:	d0c7      	beq.n	8014312 <gatt_find_info_rsp+0x42>
	     i--, pdu = (const uint8_t *)pdu + len) {
 8014382:	3c01      	subs	r4, #1
 8014384:	4455      	add	r5, sl
	for (i = length / len, pdu = rsp->info; i != 0;
 8014386:	2c00      	cmp	r4, #0
 8014388:	d04e      	beq.n	8014428 <gatt_find_info_rsp+0x158>
		handle = sys_le16_to_cpu(info.i16->handle);
 801438a:	882f      	ldrh	r7, [r5, #0]
 801438c:	fa1f fb87 	uxth.w	fp, r7
		if (skip) {
 8014390:	f1b9 0f00 	cmp.w	r9, #0
 8014394:	d145      	bne.n	8014422 <gatt_find_info_rsp+0x152>
		switch (u.uuid.type) {
 8014396:	f89d 3000 	ldrb.w	r3, [sp]
 801439a:	2b00      	cmp	r3, #0
 801439c:	d0d2      	beq.n	8014344 <gatt_find_info_rsp+0x74>
 801439e:	2b02      	cmp	r3, #2
 80143a0:	d0d4      	beq.n	801434c <gatt_find_info_rsp+0x7c>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
 80143a2:	6831      	ldr	r1, [r6, #0]
 80143a4:	2900      	cmp	r1, #0
 80143a6:	d0d8      	beq.n	801435a <gatt_find_info_rsp+0x8a>
 80143a8:	4668      	mov	r0, sp
 80143aa:	f008 fb46 	bl	801ca3a <bt_uuid_cmp>
 80143ae:	2800      	cmp	r0, #0
 80143b0:	d0d3      	beq.n	801435a <gatt_find_info_rsp+0x8a>
 80143b2:	e7e6      	b.n	8014382 <gatt_find_info_rsp+0xb2>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
 80143b4:	2300      	movs	r3, #0
 80143b6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80143ba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80143be:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80143c2:	a90a      	add	r1, sp, #40	; 0x28
 80143c4:	4668      	mov	r0, sp
 80143c6:	f008 fb38 	bl	801ca3a <bt_uuid_cmp>
 80143ca:	2800      	cmp	r0, #0
 80143cc:	d0d9      	beq.n	8014382 <gatt_find_info_rsp+0xb2>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
 80143ce:	2300      	movs	r3, #0
 80143d0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80143d4:	f642 0301 	movw	r3, #10241	; 0x2801
 80143d8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80143dc:	a90b      	add	r1, sp, #44	; 0x2c
 80143de:	4668      	mov	r0, sp
 80143e0:	f008 fb2b 	bl	801ca3a <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
 80143e4:	2800      	cmp	r0, #0
 80143e6:	d0cc      	beq.n	8014382 <gatt_find_info_rsp+0xb2>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
 80143e8:	2300      	movs	r3, #0
 80143ea:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 80143ee:	f642 0302 	movw	r3, #10242	; 0x2802
 80143f2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80143f6:	a90c      	add	r1, sp, #48	; 0x30
 80143f8:	4668      	mov	r0, sp
 80143fa:	f008 fb1e 	bl	801ca3a <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
 80143fe:	2800      	cmp	r0, #0
 8014400:	d0bf      	beq.n	8014382 <gatt_find_info_rsp+0xb2>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
 8014402:	2300      	movs	r3, #0
 8014404:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8014408:	f642 0303 	movw	r3, #10243	; 0x2803
 801440c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8014410:	a90d      	add	r1, sp, #52	; 0x34
 8014412:	4668      	mov	r0, sp
 8014414:	f008 fb11 	bl	801ca3a <bt_uuid_cmp>
 8014418:	2800      	cmp	r0, #0
 801441a:	d1a1      	bne.n	8014360 <gatt_find_info_rsp+0x90>
				skip = true;
 801441c:	f04f 0901 	mov.w	r9, #1
 8014420:	e7af      	b.n	8014382 <gatt_find_info_rsp+0xb2>
			skip = false;
 8014422:	f04f 0900 	mov.w	r9, #0
 8014426:	e7ac      	b.n	8014382 <gatt_find_info_rsp+0xb2>
	gatt_discover_next(conn, handle, params);
 8014428:	4632      	mov	r2, r6
 801442a:	4659      	mov	r1, fp
 801442c:	4640      	mov	r0, r8
 801442e:	f00a fe76 	bl	801f11e <gatt_discover_next>
	return;
 8014432:	e76e      	b.n	8014312 <gatt_find_info_rsp+0x42>
 8014434:	08022bc0 	.word	0x08022bc0
 8014438:	08022b90 	.word	0x08022b90
 801443c:	08027868 	.word	0x08027868

08014440 <bt_gatt_subscribe>:
{
 8014440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014442:	b083      	sub	sp, #12
	if (conn->state != BT_CONN_CONNECTED) {
 8014444:	7b43      	ldrb	r3, [r0, #13]
 8014446:	2b07      	cmp	r3, #7
 8014448:	d14a      	bne.n	80144e0 <bt_gatt_subscribe+0xa0>
 801444a:	4605      	mov	r5, r0
 801444c:	460c      	mov	r4, r1
	sub = gatt_sub_add(conn);
 801444e:	f00a fb72 	bl	801eb36 <gatt_sub_add>
	if (!sub) {
 8014452:	4606      	mov	r6, r0
 8014454:	2800      	cmp	r0, #0
 8014456:	d046      	beq.n	80144e6 <bt_gatt_subscribe+0xa6>
	return list->head;
 8014458:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
 801445a:	b103      	cbz	r3, 801445e <bt_gatt_subscribe+0x1e>
 801445c:	3b14      	subs	r3, #20
 801445e:	2000      	movs	r0, #0
 8014460:	e011      	b.n	8014486 <bt_gatt_subscribe+0x46>
			gatt_sub_remove(conn, sub, NULL, NULL);
 8014462:	2300      	movs	r3, #0
 8014464:	461a      	mov	r2, r3
 8014466:	4631      	mov	r1, r6
 8014468:	4628      	mov	r0, r5
 801446a:	f00a fb7a 	bl	801eb62 <gatt_sub_remove>
			return -EALREADY;
 801446e:	f06f 0744 	mvn.w	r7, #68	; 0x44
}
 8014472:	4638      	mov	r0, r7
 8014474:	b003      	add	sp, #12
 8014476:	bdf0      	pop	{r4, r5, r6, r7, pc}
		    tmp->value >= params->value) {
 8014478:	8999      	ldrh	r1, [r3, #12]
 801447a:	89a2      	ldrh	r2, [r4, #12]
		if (tmp->value_handle == params->value_handle &&
 801447c:	4291      	cmp	r1, r2
 801447e:	d309      	bcc.n	8014494 <bt_gatt_subscribe+0x54>
			has_subscription = true;
 8014480:	2001      	movs	r0, #1
 8014482:	e007      	b.n	8014494 <bt_gatt_subscribe+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
 8014484:	4613      	mov	r3, r2
 8014486:	b16b      	cbz	r3, 80144a4 <bt_gatt_subscribe+0x64>
		if (tmp == params) {
 8014488:	42a3      	cmp	r3, r4
 801448a:	d0ea      	beq.n	8014462 <bt_gatt_subscribe+0x22>
		if (tmp->value_handle == params->value_handle &&
 801448c:	8919      	ldrh	r1, [r3, #8]
 801448e:	8922      	ldrh	r2, [r4, #8]
 8014490:	4291      	cmp	r1, r2
 8014492:	d0f1      	beq.n	8014478 <bt_gatt_subscribe+0x38>
Z_GENLIST_PEEK_NEXT(slist, snode)
 8014494:	f113 0214 	adds.w	r2, r3, #20
 8014498:	d0f4      	beq.n	8014484 <bt_gatt_subscribe+0x44>
	return node->next;
 801449a:	695b      	ldr	r3, [r3, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
 801449c:	2b00      	cmp	r3, #0
 801449e:	d0f2      	beq.n	8014486 <bt_gatt_subscribe+0x46>
 80144a0:	3b14      	subs	r3, #20
 80144a2:	e7f0      	b.n	8014486 <bt_gatt_subscribe+0x46>
	if (!has_subscription) {
 80144a4:	b140      	cbz	r0, 80144b8 <bt_gatt_subscribe+0x78>
	sys_slist_prepend(&sub->list, &params->node);
 80144a6:	f104 0314 	add.w	r3, r4, #20
	return list->head;
 80144aa:	68b2      	ldr	r2, [r6, #8]
	parent->next = child;
 80144ac:	6162      	str	r2, [r4, #20]
	list->head = node;
 80144ae:	60b3      	str	r3, [r6, #8]
	return list->tail;
 80144b0:	68f2      	ldr	r2, [r6, #12]
Z_GENLIST_PREPEND(slist, snode)
 80144b2:	b192      	cbz	r2, 80144da <bt_gatt_subscribe+0x9a>
	return 0;
 80144b4:	2700      	movs	r7, #0
 80144b6:	e7dc      	b.n	8014472 <bt_gatt_subscribe+0x32>
		err = gatt_write_ccc(conn, params->ccc_handle, params->value,
 80144b8:	9400      	str	r4, [sp, #0]
 80144ba:	4b0c      	ldr	r3, [pc, #48]	; (80144ec <bt_gatt_subscribe+0xac>)
 80144bc:	89a2      	ldrh	r2, [r4, #12]
 80144be:	8961      	ldrh	r1, [r4, #10]
 80144c0:	4628      	mov	r0, r5
 80144c2:	f00a fc90 	bl	801ede6 <gatt_write_ccc>
		if (err) {
 80144c6:	4607      	mov	r7, r0
 80144c8:	2800      	cmp	r0, #0
 80144ca:	d0ec      	beq.n	80144a6 <bt_gatt_subscribe+0x66>
			gatt_sub_remove(conn, sub, NULL, NULL);
 80144cc:	2300      	movs	r3, #0
 80144ce:	461a      	mov	r2, r3
 80144d0:	4631      	mov	r1, r6
 80144d2:	4628      	mov	r0, r5
 80144d4:	f00a fb45 	bl	801eb62 <gatt_sub_remove>
			return err;
 80144d8:	e7cb      	b.n	8014472 <bt_gatt_subscribe+0x32>
	list->tail = node;
 80144da:	60f3      	str	r3, [r6, #12]
	return 0;
 80144dc:	2700      	movs	r7, #0
}
 80144de:	e7c8      	b.n	8014472 <bt_gatt_subscribe+0x32>
		return -ENOTCONN;
 80144e0:	f06f 0738 	mvn.w	r7, #56	; 0x38
 80144e4:	e7c5      	b.n	8014472 <bt_gatt_subscribe+0x32>
		return -ENOMEM;
 80144e6:	f06f 070b 	mvn.w	r7, #11
 80144ea:	e7c2      	b.n	8014472 <bt_gatt_subscribe+0x32>
 80144ec:	0801ed13 	.word	0x0801ed13

080144f0 <bt_gatt_unsubscribe>:
	if (conn->state != BT_CONN_CONNECTED) {
 80144f0:	7b43      	ldrb	r3, [r0, #13]
 80144f2:	2b07      	cmp	r3, #7
 80144f4:	d171      	bne.n	80145da <bt_gatt_unsubscribe+0xea>
{
 80144f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80144fa:	b083      	sub	sp, #12
 80144fc:	4607      	mov	r7, r0
 80144fe:	460d      	mov	r5, r1
	sub = gatt_sub_find(conn);
 8014500:	f7fe f8ec 	bl	80126dc <gatt_sub_find>
	if (!sub) {
 8014504:	4681      	mov	r9, r0
 8014506:	2800      	cmp	r0, #0
 8014508:	d06a      	beq.n	80145e0 <bt_gatt_unsubscribe+0xf0>
	return list->head;
 801450a:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
 801450c:	b393      	cbz	r3, 8014574 <bt_gatt_unsubscribe+0x84>
 801450e:	3b14      	subs	r3, #20
 8014510:	d035      	beq.n	801457e <bt_gatt_unsubscribe+0x8e>
Z_GENLIST_PEEK_NEXT(slist, snode)
 8014512:	f113 0414 	adds.w	r4, r3, #20
 8014516:	d02e      	beq.n	8014576 <bt_gatt_unsubscribe+0x86>
	return node->next;
 8014518:	695c      	ldr	r4, [r3, #20]
 801451a:	b364      	cbz	r4, 8014576 <bt_gatt_unsubscribe+0x86>
 801451c:	3c14      	subs	r4, #20
 801451e:	e02a      	b.n	8014576 <bt_gatt_unsubscribe+0x86>
			sys_slist_remove(&sub->list, prev, &tmp->node);
 8014520:	f103 0214 	add.w	r2, r3, #20
Z_GENLIST_REMOVE(slist, snode)
 8014524:	b18e      	cbz	r6, 801454a <bt_gatt_unsubscribe+0x5a>
	return node->next;
 8014526:	6959      	ldr	r1, [r3, #20]
	parent->next = child;
 8014528:	6031      	str	r1, [r6, #0]
	return list->tail;
 801452a:	f8d9 100c 	ldr.w	r1, [r9, #12]
Z_GENLIST_REMOVE(slist, snode)
 801452e:	428a      	cmp	r2, r1
 8014530:	d015      	beq.n	801455e <bt_gatt_unsubscribe+0x6e>
	parent->next = child;
 8014532:	2200      	movs	r2, #0
 8014534:	615a      	str	r2, [r3, #20]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8014536:	f3bf 8f5b 	dmb	ish
 801453a:	692b      	ldr	r3, [r5, #16]
 801453c:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(params->flags,
 8014540:	f013 0f04 	tst.w	r3, #4
 8014544:	d10e      	bne.n	8014564 <bt_gatt_unsubscribe+0x74>
			found = true;
 8014546:	2101      	movs	r1, #1
			continue;
 8014548:	e027      	b.n	801459a <bt_gatt_unsubscribe+0xaa>
	return node->next;
 801454a:	6959      	ldr	r1, [r3, #20]
	list->head = node;
 801454c:	f8c9 1008 	str.w	r1, [r9, #8]
	return list->tail;
 8014550:	f8d9 000c 	ldr.w	r0, [r9, #12]
Z_GENLIST_REMOVE(slist, snode)
 8014554:	4282      	cmp	r2, r0
 8014556:	d1ec      	bne.n	8014532 <bt_gatt_unsubscribe+0x42>
	list->tail = node;
 8014558:	f8c9 100c 	str.w	r1, [r9, #12]
}
 801455c:	e7e9      	b.n	8014532 <bt_gatt_unsubscribe+0x42>
	list->tail = node;
 801455e:	f8c9 600c 	str.w	r6, [r9, #12]
}
 8014562:	e7e6      	b.n	8014532 <bt_gatt_unsubscribe+0x42>
				bt_gatt_cancel(conn, params);
 8014564:	4629      	mov	r1, r5
 8014566:	4638      	mov	r0, r7
 8014568:	f00a fe75 	bl	801f256 <bt_gatt_cancel>
 801456c:	e7eb      	b.n	8014546 <bt_gatt_unsubscribe+0x56>
			has_subscription = true;
 801456e:	f04f 0801 	mov.w	r8, #1
 8014572:	e012      	b.n	801459a <bt_gatt_unsubscribe+0xaa>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
 8014574:	461c      	mov	r4, r3
 8014576:	2600      	movs	r6, #0
 8014578:	4631      	mov	r1, r6
 801457a:	46b0      	mov	r8, r6
 801457c:	e004      	b.n	8014588 <bt_gatt_unsubscribe+0x98>
 801457e:	461c      	mov	r4, r3
 8014580:	e7f9      	b.n	8014576 <bt_gatt_unsubscribe+0x86>
 8014582:	4622      	mov	r2, r4
 8014584:	4623      	mov	r3, r4
 8014586:	4614      	mov	r4, r2
 8014588:	b18b      	cbz	r3, 80145ae <bt_gatt_unsubscribe+0xbe>
		if (params == tmp) {
 801458a:	42ab      	cmp	r3, r5
 801458c:	d0c8      	beq.n	8014520 <bt_gatt_unsubscribe+0x30>
			prev = &tmp->node;
 801458e:	f103 0614 	add.w	r6, r3, #20
		if (tmp->value_handle == params->value_handle) {
 8014592:	891a      	ldrh	r2, [r3, #8]
 8014594:	892b      	ldrh	r3, [r5, #8]
 8014596:	429a      	cmp	r2, r3
 8014598:	d0e9      	beq.n	801456e <bt_gatt_unsubscribe+0x7e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
 801459a:	2c00      	cmp	r4, #0
 801459c:	d0f1      	beq.n	8014582 <bt_gatt_unsubscribe+0x92>
Z_GENLIST_PEEK_NEXT(slist, snode)
 801459e:	f114 0214 	adds.w	r2, r4, #20
 80145a2:	d0ef      	beq.n	8014584 <bt_gatt_unsubscribe+0x94>
	return node->next;
 80145a4:	6962      	ldr	r2, [r4, #20]
 80145a6:	2a00      	cmp	r2, #0
 80145a8:	d0ec      	beq.n	8014584 <bt_gatt_unsubscribe+0x94>
 80145aa:	3a14      	subs	r2, #20
 80145ac:	e7ea      	b.n	8014584 <bt_gatt_unsubscribe+0x94>
	if (!found) {
 80145ae:	b1d1      	cbz	r1, 80145e6 <bt_gatt_unsubscribe+0xf6>
	if (has_subscription) {
 80145b0:	f1b8 0f00 	cmp.w	r8, #0
 80145b4:	d008      	beq.n	80145c8 <bt_gatt_unsubscribe+0xd8>
		params->notify(conn, params, NULL, 0);
 80145b6:	682c      	ldr	r4, [r5, #0]
 80145b8:	461a      	mov	r2, r3
 80145ba:	4629      	mov	r1, r5
 80145bc:	4638      	mov	r0, r7
 80145be:	47a0      	blx	r4
		return 0;
 80145c0:	2000      	movs	r0, #0
}
 80145c2:	b003      	add	sp, #12
 80145c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	params->value = 0x0000;
 80145c8:	2200      	movs	r2, #0
 80145ca:	81aa      	strh	r2, [r5, #12]
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
 80145cc:	9500      	str	r5, [sp, #0]
 80145ce:	4b07      	ldr	r3, [pc, #28]	; (80145ec <bt_gatt_unsubscribe+0xfc>)
 80145d0:	8969      	ldrh	r1, [r5, #10]
 80145d2:	4638      	mov	r0, r7
 80145d4:	f00a fc07 	bl	801ede6 <gatt_write_ccc>
 80145d8:	e7f3      	b.n	80145c2 <bt_gatt_unsubscribe+0xd2>
		return -ENOTCONN;
 80145da:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
 80145de:	4770      	bx	lr
		return -EINVAL;
 80145e0:	f06f 0015 	mvn.w	r0, #21
 80145e4:	e7ed      	b.n	80145c2 <bt_gatt_unsubscribe+0xd2>
		return -EINVAL;
 80145e6:	f06f 0015 	mvn.w	r0, #21
 80145ea:	e7ea      	b.n	80145c2 <bt_gatt_unsubscribe+0xd2>
 80145ec:	0801ed13 	.word	0x0801ed13

080145f0 <bt_gatt_mult_notification>:
{
 80145f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145f4:	b087      	sub	sp, #28
 80145f6:	4682      	mov	sl, r0
 80145f8:	460c      	mov	r4, r1
 80145fa:	4617      	mov	r7, r2
	sub = gatt_sub_find(conn);
 80145fc:	f7fe f86e 	bl	80126dc <gatt_sub_find>
	if (!sub) {
 8014600:	b1c8      	cbz	r0, 8014636 <bt_gatt_mult_notification+0x46>
 8014602:	4683      	mov	fp, r0
	net_buf_simple_init_with_data(&buf, (void *)data, length);
 8014604:	463a      	mov	r2, r7
 8014606:	4621      	mov	r1, r4
 8014608:	a803      	add	r0, sp, #12
 801460a:	f00b fed6 	bl	80203ba <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
 801460e:	e040      	b.n	8014692 <bt_gatt_mult_notification+0xa2>
			BT_ERR("Invalid data len %u > %u", len, length);
 8014610:	f04f 0300 	mov.w	r3, #0
 8014614:	2201      	movs	r2, #1
 8014616:	f362 0302 	bfi	r3, r2, #0, #3
 801461a:	f36f 03c5 	bfc	r3, #3, #3
 801461e:	4a2d      	ldr	r2, [pc, #180]	; (80146d4 <bt_gatt_mult_notification+0xe4>)
 8014620:	492d      	ldr	r1, [pc, #180]	; (80146d8 <bt_gatt_mult_notification+0xe8>)
 8014622:	1a52      	subs	r2, r2, r1
 8014624:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8014628:	f362 138f 	bfi	r3, r2, #6, #10
 801462c:	463a      	mov	r2, r7
 801462e:	4649      	mov	r1, r9
 8014630:	482a      	ldr	r0, [pc, #168]	; (80146dc <bt_gatt_mult_notification+0xec>)
 8014632:	f7f2 f805 	bl	8006640 <log_2>
}
 8014636:	b007      	add	sp, #28
 8014638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
 801463c:	462c      	mov	r4, r5
 801463e:	9701      	str	r7, [sp, #4]
 8014640:	e00f      	b.n	8014662 <bt_gatt_mult_notification+0x72>
 8014642:	462c      	mov	r4, r5
 8014644:	9701      	str	r7, [sp, #4]
 8014646:	e00c      	b.n	8014662 <bt_gatt_mult_notification+0x72>
				bt_gatt_unsubscribe(conn, params);
 8014648:	4629      	mov	r1, r5
 801464a:	4650      	mov	r0, sl
 801464c:	f7ff ff50 	bl	80144f0 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
 8014650:	b1a4      	cbz	r4, 801467c <bt_gatt_mult_notification+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
 8014652:	f114 0314 	adds.w	r3, r4, #20
 8014656:	d002      	beq.n	801465e <bt_gatt_mult_notification+0x6e>
	return node->next;
 8014658:	6963      	ldr	r3, [r4, #20]
 801465a:	b103      	cbz	r3, 801465e <bt_gatt_mult_notification+0x6e>
 801465c:	3b14      	subs	r3, #20
 801465e:	4625      	mov	r5, r4
 8014660:	461c      	mov	r4, r3
 8014662:	b18d      	cbz	r5, 8014688 <bt_gatt_mult_notification+0x98>
			if (handle != params->value_handle) {
 8014664:	892b      	ldrh	r3, [r5, #8]
 8014666:	4598      	cmp	r8, r3
 8014668:	d1f2      	bne.n	8014650 <bt_gatt_mult_notification+0x60>
			if (params->notify(conn, params, nfy->value, len) ==
 801466a:	464b      	mov	r3, r9
 801466c:	1d32      	adds	r2, r6, #4
 801466e:	4629      	mov	r1, r5
 8014670:	4650      	mov	r0, sl
 8014672:	682f      	ldr	r7, [r5, #0]
 8014674:	47b8      	blx	r7
 8014676:	2800      	cmp	r0, #0
 8014678:	d1ea      	bne.n	8014650 <bt_gatt_mult_notification+0x60>
 801467a:	e7e5      	b.n	8014648 <bt_gatt_mult_notification+0x58>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
 801467c:	4623      	mov	r3, r4
 801467e:	e7ee      	b.n	801465e <bt_gatt_mult_notification+0x6e>
 8014680:	9701      	str	r7, [sp, #4]
 8014682:	e7ee      	b.n	8014662 <bt_gatt_mult_notification+0x72>
 8014684:	9701      	str	r7, [sp, #4]
 8014686:	e7ec      	b.n	8014662 <bt_gatt_mult_notification+0x72>
 8014688:	9f01      	ldr	r7, [sp, #4]
		net_buf_simple_pull_mem(&buf, len);
 801468a:	4649      	mov	r1, r9
 801468c:	a803      	add	r0, sp, #12
 801468e:	f00b ff26 	bl	80204de <net_buf_simple_pull_mem>
	while (buf.len > sizeof(*nfy)) {
 8014692:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8014696:	2b04      	cmp	r3, #4
 8014698:	d9cd      	bls.n	8014636 <bt_gatt_mult_notification+0x46>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
 801469a:	2104      	movs	r1, #4
 801469c:	a803      	add	r0, sp, #12
 801469e:	f00b ff1e 	bl	80204de <net_buf_simple_pull_mem>
 80146a2:	4606      	mov	r6, r0
		handle = sys_cpu_to_le16(nfy->handle);
 80146a4:	f8b0 8000 	ldrh.w	r8, [r0]
		len = sys_cpu_to_le16(nfy->len);
 80146a8:	f8b0 9002 	ldrh.w	r9, [r0, #2]
		if (len > buf.len) {
 80146ac:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80146b0:	4599      	cmp	r9, r3
 80146b2:	d8ad      	bhi.n	8014610 <bt_gatt_mult_notification+0x20>
	return list->head;
 80146b4:	f8db 5008 	ldr.w	r5, [fp, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
 80146b8:	2d00      	cmp	r5, #0
 80146ba:	d0bf      	beq.n	801463c <bt_gatt_mult_notification+0x4c>
 80146bc:	3d14      	subs	r5, #20
 80146be:	d0c0      	beq.n	8014642 <bt_gatt_mult_notification+0x52>
Z_GENLIST_PEEK_NEXT(slist, snode)
 80146c0:	f115 0414 	adds.w	r4, r5, #20
 80146c4:	d0dc      	beq.n	8014680 <bt_gatt_mult_notification+0x90>
	return node->next;
 80146c6:	696c      	ldr	r4, [r5, #20]
 80146c8:	2c00      	cmp	r4, #0
 80146ca:	d0db      	beq.n	8014684 <bt_gatt_mult_notification+0x94>
 80146cc:	3c14      	subs	r4, #20
 80146ce:	9701      	str	r7, [sp, #4]
 80146d0:	e7c7      	b.n	8014662 <bt_gatt_mult_notification+0x72>
 80146d2:	bf00      	nop
 80146d4:	08022bc0 	.word	0x08022bc0
 80146d8:	08022b90 	.word	0x08022b90
 80146dc:	0802787c 	.word	0x0802787c

080146e0 <bt_gatt_connected>:
{
 80146e0:	b570      	push	{r4, r5, r6, lr}
 80146e2:	b090      	sub	sp, #64	; 0x40
 80146e4:	4604      	mov	r4, r0
	data.conn = conn;
 80146e6:	900e      	str	r0, [sp, #56]	; 0x38
	data.sec = BT_SECURITY_L1;
 80146e8:	2301      	movs	r3, #1
 80146ea:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
 80146ee:	f100 0588 	add.w	r5, r0, #136	; 0x88
 80146f2:	4629      	mov	r1, r5
 80146f4:	7a00      	ldrb	r0, [r0, #8]
 80146f6:	f008 fd40 	bl	801d17a <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
 80146fa:	b190      	cbz	r0, 8014722 <bt_gatt_connected+0x42>
		if (conn->id) {
 80146fc:	7a22      	ldrb	r2, [r4, #8]
 80146fe:	b342      	cbz	r2, 8014752 <bt_gatt_connected+0x72>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
 8014700:	ae04      	add	r6, sp, #16
 8014702:	2104      	movs	r1, #4
 8014704:	4630      	mov	r0, r6
 8014706:	f7f0 fd55 	bl	80051b4 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
 801470a:	9600      	str	r6, [sp, #0]
 801470c:	462b      	mov	r3, r5
 801470e:	4a17      	ldr	r2, [pc, #92]	; (801476c <bt_gatt_connected+0x8c>)
 8014710:	2124      	movs	r1, #36	; 0x24
 8014712:	a805      	add	r0, sp, #20
 8014714:	f7f7 fb3c 	bl	800bd90 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
 8014718:	aa05      	add	r2, sp, #20
 801471a:	4915      	ldr	r1, [pc, #84]	; (8014770 <bt_gatt_connected+0x90>)
 801471c:	4610      	mov	r0, r2
 801471e:	f7f3 ffa9 	bl	8008674 <settings_load_subtree_direct>
 8014722:	ab0e      	add	r3, sp, #56	; 0x38
 8014724:	9302      	str	r3, [sp, #8]
 8014726:	4b13      	ldr	r3, [pc, #76]	; (8014774 <bt_gatt_connected+0x94>)
 8014728:	9301      	str	r3, [sp, #4]
 801472a:	2200      	movs	r2, #0
 801472c:	9200      	str	r2, [sp, #0]
 801472e:	4613      	mov	r3, r2
 8014730:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014734:	2001      	movs	r0, #1
 8014736:	f7ff f9ff 	bl	8013b38 <bt_gatt_foreach_attr_type>
	    bt_conn_get_security(conn) < data.sec) {
 801473a:	4620      	mov	r0, r4
 801473c:	f008 ff46 	bl	801d5cc <bt_conn_get_security>
 8014740:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
	if (IS_ENABLED(CONFIG_BT_SMP) &&
 8014744:	4288      	cmp	r0, r1
 8014746:	d30d      	bcc.n	8014764 <bt_gatt_connected+0x84>
	add_subscriptions(conn);
 8014748:	4620      	mov	r0, r4
 801474a:	f7fe ff35 	bl	80135b8 <add_subscriptions>
}
 801474e:	b010      	add	sp, #64	; 0x40
 8014750:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
 8014752:	2300      	movs	r3, #0
 8014754:	9300      	str	r3, [sp, #0]
 8014756:	462b      	mov	r3, r5
 8014758:	4a04      	ldr	r2, [pc, #16]	; (801476c <bt_gatt_connected+0x8c>)
 801475a:	2124      	movs	r1, #36	; 0x24
 801475c:	a805      	add	r0, sp, #20
 801475e:	f7f7 fb17 	bl	800bd90 <bt_settings_encode_key>
 8014762:	e7d9      	b.n	8014718 <bt_gatt_connected+0x38>
		bt_conn_set_security(conn, data.sec);
 8014764:	4620      	mov	r0, r4
 8014766:	f008 fef9 	bl	801d55c <bt_conn_set_security>
 801476a:	e7ed      	b.n	8014748 <bt_gatt_connected+0x68>
 801476c:	08027814 	.word	0x08027814
 8014770:	080136c5 	.word	0x080136c5
 8014774:	08014069 	.word	0x08014069

08014778 <bt_gatt_encrypt_change>:
{
 8014778:	b500      	push	{lr}
 801477a:	b087      	sub	sp, #28
	data.conn = conn;
 801477c:	9004      	str	r0, [sp, #16]
	data.sec = BT_SECURITY_L1;
 801477e:	2001      	movs	r0, #1
 8014780:	f88d 0014 	strb.w	r0, [sp, #20]
 8014784:	ab04      	add	r3, sp, #16
 8014786:	9302      	str	r3, [sp, #8]
 8014788:	4b05      	ldr	r3, [pc, #20]	; (80147a0 <bt_gatt_encrypt_change+0x28>)
 801478a:	9301      	str	r3, [sp, #4]
 801478c:	2200      	movs	r2, #0
 801478e:	9200      	str	r2, [sp, #0]
 8014790:	4613      	mov	r3, r2
 8014792:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014796:	f7ff f9cf 	bl	8013b38 <bt_gatt_foreach_attr_type>
}
 801479a:	b007      	add	sp, #28
 801479c:	f85d fb04 	ldr.w	pc, [sp], #4
 80147a0:	08014069 	.word	0x08014069

080147a4 <db_hash_read>:
{
 80147a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80147a6:	b085      	sub	sp, #20
 80147a8:	4604      	mov	r4, r0
 80147aa:	460d      	mov	r5, r1
 80147ac:	4616      	mov	r6, r2
 80147ae:	461f      	mov	r7, r3
	err = k_delayed_work_cancel(&db_hash_work);
 80147b0:	480d      	ldr	r0, [pc, #52]	; (80147e8 <db_hash_read+0x44>)
 80147b2:	f00d fde5 	bl	8022380 <k_delayed_work_cancel>
	if (!err) {
 80147b6:	b190      	cbz	r0, 80147de <db_hash_read+0x3a>
	bt_gatt_change_aware(conn, true);
 80147b8:	2101      	movs	r1, #1
 80147ba:	4620      	mov	r0, r4
 80147bc:	f00a fd85 	bl	801f2ca <bt_gatt_change_aware>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
 80147c0:	2310      	movs	r3, #16
 80147c2:	9302      	str	r3, [sp, #8]
 80147c4:	4b09      	ldr	r3, [pc, #36]	; (80147ec <db_hash_read+0x48>)
 80147c6:	9301      	str	r3, [sp, #4]
 80147c8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80147cc:	9300      	str	r3, [sp, #0]
 80147ce:	463b      	mov	r3, r7
 80147d0:	4632      	mov	r2, r6
 80147d2:	4629      	mov	r1, r5
 80147d4:	4620      	mov	r0, r4
 80147d6:	f00a fb7f 	bl	801eed8 <bt_gatt_attr_read>
}
 80147da:	b005      	add	sp, #20
 80147dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		db_hash_gen(true);
 80147de:	2001      	movs	r0, #1
 80147e0:	f7ff f9f4 	bl	8013bcc <db_hash_gen>
 80147e4:	e7e8      	b.n	80147b8 <db_hash_read+0x14>
 80147e6:	bf00      	nop
 80147e8:	20002610 	.word	0x20002610
 80147ec:	20004290 	.word	0x20004290

080147f0 <bt_gatt_store_ccc>:
{
 80147f0:	b570      	push	{r4, r5, r6, lr}
 80147f2:	b0c2      	sub	sp, #264	; 0x108
 80147f4:	4604      	mov	r4, r0
 80147f6:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
 80147f8:	910f      	str	r1, [sp, #60]	; 0x3c
	save.addr_with_id.id = id;
 80147fa:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
	save.count = 0;
 80147fe:	2200      	movs	r2, #0
 8014800:	9241      	str	r2, [sp, #260]	; 0x104
 8014802:	ab0f      	add	r3, sp, #60	; 0x3c
 8014804:	9302      	str	r3, [sp, #8]
 8014806:	4b25      	ldr	r3, [pc, #148]	; (801489c <bt_gatt_store_ccc+0xac>)
 8014808:	9301      	str	r3, [sp, #4]
 801480a:	9200      	str	r2, [sp, #0]
 801480c:	4613      	mov	r3, r2
 801480e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014812:	2001      	movs	r0, #1
 8014814:	f7ff f990 	bl	8013b38 <bt_gatt_foreach_attr_type>
	if (id) {
 8014818:	b18c      	cbz	r4, 801483e <bt_gatt_store_ccc+0x4e>
		u8_to_dec(id_str, sizeof(id_str), id);
 801481a:	ae05      	add	r6, sp, #20
 801481c:	4622      	mov	r2, r4
 801481e:	2104      	movs	r1, #4
 8014820:	4630      	mov	r0, r6
 8014822:	f7f0 fcc7 	bl	80051b4 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
 8014826:	9600      	str	r6, [sp, #0]
 8014828:	462b      	mov	r3, r5
 801482a:	4a1d      	ldr	r2, [pc, #116]	; (80148a0 <bt_gatt_store_ccc+0xb0>)
 801482c:	2124      	movs	r1, #36	; 0x24
 801482e:	a806      	add	r0, sp, #24
 8014830:	f7f7 faae 	bl	800bd90 <bt_settings_encode_key>
	if (save.count) {
 8014834:	9c41      	ldr	r4, [sp, #260]	; 0x104
 8014836:	b15c      	cbz	r4, 8014850 <bt_gatt_store_ccc+0x60>
		len = save.count * sizeof(*save.store);
 8014838:	00a4      	lsls	r4, r4, #2
		str = (char *)save.store;
 801483a:	a911      	add	r1, sp, #68	; 0x44
 801483c:	e009      	b.n	8014852 <bt_gatt_store_ccc+0x62>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
 801483e:	2300      	movs	r3, #0
 8014840:	9300      	str	r3, [sp, #0]
 8014842:	462b      	mov	r3, r5
 8014844:	4a16      	ldr	r2, [pc, #88]	; (80148a0 <bt_gatt_store_ccc+0xb0>)
 8014846:	2124      	movs	r1, #36	; 0x24
 8014848:	a806      	add	r0, sp, #24
 801484a:	f7f7 faa1 	bl	800bd90 <bt_settings_encode_key>
 801484e:	e7f1      	b.n	8014834 <bt_gatt_store_ccc+0x44>
		str = NULL;
 8014850:	2100      	movs	r1, #0
	err = settings_save_one(key, str, len);
 8014852:	4622      	mov	r2, r4
 8014854:	a806      	add	r0, sp, #24
 8014856:	f7f3 fea7 	bl	80085a8 <settings_save_one>
	if (err) {
 801485a:	4605      	mov	r5, r0
 801485c:	b918      	cbnz	r0, 8014866 <bt_gatt_store_ccc+0x76>
	if (len) {
 801485e:	b9d4      	cbnz	r4, 8014896 <bt_gatt_store_ccc+0xa6>
}
 8014860:	4628      	mov	r0, r5
 8014862:	b042      	add	sp, #264	; 0x108
 8014864:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Failed to store CCCs (err %d)", err);
 8014866:	f04f 0200 	mov.w	r2, #0
 801486a:	2301      	movs	r3, #1
 801486c:	f363 0202 	bfi	r2, r3, #0, #3
 8014870:	f36f 02c5 	bfc	r2, #3, #3
 8014874:	4b0b      	ldr	r3, [pc, #44]	; (80148a4 <bt_gatt_store_ccc+0xb4>)
 8014876:	490c      	ldr	r1, [pc, #48]	; (80148a8 <bt_gatt_store_ccc+0xb8>)
 8014878:	1a5b      	subs	r3, r3, r1
 801487a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 801487e:	f363 128f 	bfi	r2, r3, #6, #10
 8014882:	4601      	mov	r1, r0
 8014884:	4809      	ldr	r0, [pc, #36]	; (80148ac <bt_gatt_store_ccc+0xbc>)
 8014886:	f7f1 fe5b 	bl	8006540 <log_1>
		return err;
 801488a:	e7e9      	b.n	8014860 <bt_gatt_store_ccc+0x70>
		for (size_t i = 0; i < save.count; i++) {
 801488c:	3301      	adds	r3, #1
 801488e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014890:	429a      	cmp	r2, r3
 8014892:	d8fb      	bhi.n	801488c <bt_gatt_store_ccc+0x9c>
 8014894:	e7e4      	b.n	8014860 <bt_gatt_store_ccc+0x70>
 8014896:	2300      	movs	r3, #0
 8014898:	e7f9      	b.n	801488e <bt_gatt_store_ccc+0x9e>
 801489a:	bf00      	nop
 801489c:	08012731 	.word	0x08012731
 80148a0:	08027814 	.word	0x08027814
 80148a4:	08022bc0 	.word	0x08022bc0
 80148a8:	08022b90 	.word	0x08022b90
 80148ac:	08027898 	.word	0x08027898

080148b0 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
 80148b0:	b530      	push	{r4, r5, lr}
 80148b2:	b087      	sub	sp, #28
 80148b4:	4604      	mov	r4, r0
 80148b6:	9002      	str	r0, [sp, #8]
 80148b8:	4b1b      	ldr	r3, [pc, #108]	; (8014928 <bt_gatt_disconnected+0x78>)
 80148ba:	9301      	str	r3, [sp, #4]
 80148bc:	2200      	movs	r2, #0
 80148be:	9200      	str	r2, [sp, #0]
 80148c0:	4613      	mov	r3, r2
 80148c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80148c6:	2001      	movs	r0, #1
 80148c8:	f7ff f936 	bl	8013b38 <bt_gatt_foreach_attr_type>
		k_delayed_work_cancel(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
 80148cc:	f104 0588 	add.w	r5, r4, #136	; 0x88
 80148d0:	4629      	mov	r1, r5
 80148d2:	7a20      	ldrb	r0, [r4, #8]
 80148d4:	f008 fc51 	bl	801d17a <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
 80148d8:	b960      	cbnz	r0, 80148f4 <bt_gatt_disconnected+0x44>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
 80148da:	4629      	mov	r1, r5
 80148dc:	7a20      	ldrb	r0, [r4, #8]
 80148de:	f008 fc4c 	bl	801d17a <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
 80148e2:	b978      	cbnz	r0, 8014904 <bt_gatt_disconnected+0x54>
				     remove_peer_from_attr,
				     &addr_with_id);
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	remove_subscriptions(conn);
 80148e4:	4620      	mov	r0, r4
 80148e6:	f00a f9cf 	bl	801ec88 <remove_subscriptions>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
 80148ea:	4620      	mov	r0, r4
 80148ec:	f00a fad0 	bl	801ee90 <remove_cf_cfg>
#endif
}
 80148f0:	b007      	add	sp, #28
 80148f2:	bd30      	pop	{r4, r5, pc}
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
 80148f4:	4629      	mov	r1, r5
 80148f6:	7a20      	ldrb	r0, [r4, #8]
 80148f8:	f7ff ff7a 	bl	80147f0 <bt_gatt_store_ccc>
		bt_gatt_store_cf(conn);
 80148fc:	4620      	mov	r0, r4
 80148fe:	f7fe f959 	bl	8012bb4 <bt_gatt_store_cf>
 8014902:	e7ea      	b.n	80148da <bt_gatt_disconnected+0x2a>
		struct addr_with_id addr_with_id = {
 8014904:	9504      	str	r5, [sp, #16]
			.id = conn->id,
 8014906:	7a23      	ldrb	r3, [r4, #8]
		struct addr_with_id addr_with_id = {
 8014908:	f88d 3014 	strb.w	r3, [sp, #20]
 801490c:	ab04      	add	r3, sp, #16
 801490e:	9302      	str	r3, [sp, #8]
 8014910:	4b06      	ldr	r3, [pc, #24]	; (801492c <bt_gatt_disconnected+0x7c>)
 8014912:	9301      	str	r3, [sp, #4]
 8014914:	2200      	movs	r2, #0
 8014916:	9200      	str	r2, [sp, #0]
 8014918:	4613      	mov	r3, r2
 801491a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801491e:	2001      	movs	r0, #1
 8014920:	f7ff f90a 	bl	8013b38 <bt_gatt_foreach_attr_type>
 8014924:	e7de      	b.n	80148e4 <bt_gatt_disconnected+0x34>
 8014926:	bf00      	nop
 8014928:	08012fc9 	.word	0x08012fc9
 801492c:	08012d3d 	.word	0x08012d3d

08014930 <le_sc_supported>:
	 */
	if (IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		return false;
	}

	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
 8014930:	4b04      	ldr	r3, [pc, #16]	; (8014944 <le_sc_supported+0x14>)
 8014932:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
 8014936:	f000 0006 	and.w	r0, r0, #6
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}
 801493a:	2806      	cmp	r0, #6
 801493c:	bf14      	ite	ne
 801493e:	2000      	movne	r0, #0
 8014940:	2001      	moveq	r0, #1
 8014942:	4770      	bx	lr
 8014944:	20000000 	.word	0x20000000

08014948 <get_io_capa>:

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
 8014948:	4b11      	ldr	r3, [pc, #68]	; (8014990 <get_io_capa+0x48>)
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	b1bb      	cbz	r3, 801497e <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
 801494e:	685a      	ldr	r2, [r3, #4]
 8014950:	b132      	cbz	r2, 8014960 <get_io_capa+0x18>
 8014952:	6899      	ldr	r1, [r3, #8]
 8014954:	b121      	cbz	r1, 8014960 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
 8014956:	68d9      	ldr	r1, [r3, #12]
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
 8014958:	b999      	cbnz	r1, 8014982 <get_io_capa+0x3a>
	    (bt_auth->passkey_confirm || !sc_supported)) {
 801495a:	490e      	ldr	r1, [pc, #56]	; (8014994 <get_io_capa+0x4c>)
 801495c:	7809      	ldrb	r1, [r1, #0]
 801495e:	b191      	cbz	r1, 8014986 <get_io_capa+0x3e>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
 8014960:	490c      	ldr	r1, [pc, #48]	; (8014994 <get_io_capa+0x4c>)
 8014962:	7809      	ldrb	r1, [r1, #0]
 8014964:	b121      	cbz	r1, 8014970 <get_io_capa+0x28>
 8014966:	b11a      	cbz	r2, 8014970 <get_io_capa+0x28>
	    bt_auth->passkey_confirm) {
 8014968:	68d9      	ldr	r1, [r3, #12]
	if (sc_supported && bt_auth->passkey_display &&
 801496a:	b109      	cbz	r1, 8014970 <get_io_capa+0x28>
		return BT_SMP_IO_DISPLAY_YESNO;
 801496c:	2001      	movs	r0, #1
 801496e:	4770      	bx	lr
	}

	if (bt_auth->passkey_entry) {
 8014970:	689b      	ldr	r3, [r3, #8]
 8014972:	b953      	cbnz	r3, 801498a <get_io_capa+0x42>
		} else {
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
 8014974:	b10a      	cbz	r2, 801497a <get_io_capa+0x32>
		return BT_SMP_IO_DISPLAY_ONLY;
 8014976:	2000      	movs	r0, #0
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
	}
}
 8014978:	4770      	bx	lr
		return BT_SMP_IO_NO_INPUT_OUTPUT;
 801497a:	2003      	movs	r0, #3
 801497c:	4770      	bx	lr
 801497e:	2003      	movs	r0, #3
 8014980:	4770      	bx	lr
		return BT_SMP_IO_KEYBOARD_DISPLAY;
 8014982:	2004      	movs	r0, #4
 8014984:	4770      	bx	lr
 8014986:	2004      	movs	r0, #4
 8014988:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
 801498a:	2002      	movs	r0, #2
 801498c:	4770      	bx	lr
 801498e:	bf00      	nop
 8014990:	2000417c 	.word	0x2000417c
 8014994:	2000596f 	.word	0x2000596f

08014998 <get_pair_method>:

	return true;
}

static uint8_t get_pair_method(struct bt_smp *smp, uint8_t remote_io)
{
 8014998:	b510      	push	{r4, lr}
 801499a:	460c      	mov	r4, r1
	struct bt_smp_pairing *req, *rsp;

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
 801499c:	f890 30c4 	ldrb.w	r3, [r0, #196]	; 0xc4
 80149a0:	f890 20cb 	ldrb.w	r2, [r0, #203]	; 0xcb
 80149a4:	ea03 0102 	and.w	r1, r3, r2
 80149a8:	f011 0f08 	tst.w	r1, #8
 80149ac:	d007      	beq.n	80149be <get_pair_method+0x26>
		/* if one side has OOB data use OOB */
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
 80149ae:	f890 10c3 	ldrb.w	r1, [r0, #195]	; 0xc3
 80149b2:	f890 00ca 	ldrb.w	r0, [r0, #202]	; 0xca
 80149b6:	4301      	orrs	r1, r0
 80149b8:	f011 0f01 	tst.w	r1, #1
 80149bc:	d10e      	bne.n	80149dc <get_pair_method+0x44>
			return LE_SC_OOB;
		}
	}

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
 80149be:	2c04      	cmp	r4, #4
 80149c0:	d80e      	bhi.n	80149e0 <get_pair_method+0x48>
		return JUST_WORKS;
	}

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
 80149c2:	ea43 0002 	orr.w	r0, r3, r2
 80149c6:	f010 0004 	ands.w	r0, r0, #4
 80149ca:	d006      	beq.n	80149da <get_pair_method+0x42>
		return JUST_WORKS;
	}

	return gen_method_sc[remote_io][get_io_capa()];
 80149cc:	f7ff ffbc 	bl	8014948 <get_io_capa>
 80149d0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80149d4:	4903      	ldr	r1, [pc, #12]	; (80149e4 <get_pair_method+0x4c>)
 80149d6:	440c      	add	r4, r1
 80149d8:	5c20      	ldrb	r0, [r4, r0]
#else
	return JUST_WORKS;
#endif
}
 80149da:	bd10      	pop	{r4, pc}
			return LE_SC_OOB;
 80149dc:	2005      	movs	r0, #5
 80149de:	e7fc      	b.n	80149da <get_pair_method+0x42>
		return JUST_WORKS;
 80149e0:	2000      	movs	r0, #0
 80149e2:	e7fa      	b.n	80149da <get_pair_method+0x42>
 80149e4:	08027c04 	.word	0x08027c04

080149e8 <smp_pairing_accept_query>:

static uint8_t smp_pairing_accept_query(struct bt_conn *conn,
				    struct bt_smp_pairing *pairing)
{
#if defined(CONFIG_BT_SMP_APP_PAIRING_ACCEPT)
	if (bt_auth && bt_auth->pairing_accept) {
 80149e8:	4b12      	ldr	r3, [pc, #72]	; (8014a34 <smp_pairing_accept_query+0x4c>)
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	b1eb      	cbz	r3, 8014a2a <smp_pairing_accept_query+0x42>
 80149ee:	681a      	ldr	r2, [r3, #0]
 80149f0:	b1ea      	cbz	r2, 8014a2e <smp_pairing_accept_query+0x46>
{
 80149f2:	b500      	push	{lr}
 80149f4:	b083      	sub	sp, #12
		const struct bt_conn_pairing_feat feat = {
			.io_capability = pairing->io_capability,
 80149f6:	780a      	ldrb	r2, [r1, #0]
		const struct bt_conn_pairing_feat feat = {
 80149f8:	f88d 2000 	strb.w	r2, [sp]
			.oob_data_flag = pairing->oob_flag,
 80149fc:	784a      	ldrb	r2, [r1, #1]
		const struct bt_conn_pairing_feat feat = {
 80149fe:	f88d 2001 	strb.w	r2, [sp, #1]
			.auth_req = pairing->auth_req,
 8014a02:	788a      	ldrb	r2, [r1, #2]
		const struct bt_conn_pairing_feat feat = {
 8014a04:	f88d 2002 	strb.w	r2, [sp, #2]
			.max_enc_key_size = pairing->max_key_size,
 8014a08:	78ca      	ldrb	r2, [r1, #3]
		const struct bt_conn_pairing_feat feat = {
 8014a0a:	f88d 2003 	strb.w	r2, [sp, #3]
			.init_key_dist = pairing->init_key_dist,
 8014a0e:	790a      	ldrb	r2, [r1, #4]
		const struct bt_conn_pairing_feat feat = {
 8014a10:	f88d 2004 	strb.w	r2, [sp, #4]
			.resp_key_dist = pairing->resp_key_dist
 8014a14:	794a      	ldrb	r2, [r1, #5]
		const struct bt_conn_pairing_feat feat = {
 8014a16:	f88d 2005 	strb.w	r2, [sp, #5]
		};

		return smp_err_get(bt_auth->pairing_accept(conn, &feat));
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	4669      	mov	r1, sp
 8014a1e:	4798      	blx	r3
 8014a20:	f00a fcd3 	bl	801f3ca <smp_err_get>
	}
#endif /* CONFIG_BT_SMP_APP_PAIRING_ACCEPT */
	return 0;
}
 8014a24:	b003      	add	sp, #12
 8014a26:	f85d fb04 	ldr.w	pc, [sp], #4
	return 0;
 8014a2a:	2000      	movs	r0, #0
 8014a2c:	4770      	bx	lr
 8014a2e:	2000      	movs	r0, #0
}
 8014a30:	4770      	bx	lr
 8014a32:	bf00      	nop
 8014a34:	2000417c 	.word	0x2000417c

08014a38 <get_auth>:
{
	oobd_present = enable;
}

static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
{
 8014a38:	b510      	push	{r4, lr}
	if (sc_supported) {
 8014a3a:	4b0d      	ldr	r3, [pc, #52]	; (8014a70 <get_auth+0x38>)
 8014a3c:	781b      	ldrb	r3, [r3, #0]
 8014a3e:	b16b      	cbz	r3, 8014a5c <get_auth+0x24>
		auth &= BT_SMP_AUTH_MASK_SC;
 8014a40:	f001 040f 	and.w	r4, r1, #15
	} else {
		auth &= BT_SMP_AUTH_MASK;
	}

	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
 8014a44:	f7ff ff80 	bl	8014948 <get_io_capa>
 8014a48:	2803      	cmp	r0, #3
 8014a4a:	d00a      	beq.n	8014a62 <get_auth+0x2a>
	    (!IS_ENABLED(CONFIG_BT_SMP_ENFORCE_MITM) &&
	    (conn->required_sec_level < BT_SECURITY_L3))) {
		auth &= ~(BT_SMP_AUTH_MITM);
	} else {
		auth |= BT_SMP_AUTH_MITM;
 8014a4c:	f044 0004 	orr.w	r0, r4, #4
	}

	if (bondable) {
 8014a50:	4b08      	ldr	r3, [pc, #32]	; (8014a74 <get_auth+0x3c>)
 8014a52:	781b      	ldrb	r3, [r3, #0]
 8014a54:	b143      	cbz	r3, 8014a68 <get_auth+0x30>
		auth |= BT_SMP_AUTH_BONDING;
 8014a56:	f040 0001 	orr.w	r0, r0, #1
	} else {
		auth &= ~BT_SMP_AUTH_BONDING;
	}

	return auth;
}
 8014a5a:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
 8014a5c:	f001 0407 	and.w	r4, r1, #7
 8014a60:	e7f0      	b.n	8014a44 <get_auth+0xc>
		auth &= ~(BT_SMP_AUTH_MITM);
 8014a62:	f004 000b 	and.w	r0, r4, #11
 8014a66:	e7f3      	b.n	8014a50 <get_auth+0x18>
		auth &= ~BT_SMP_AUTH_BONDING;
 8014a68:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 8014a6c:	e7f5      	b.n	8014a5a <get_auth+0x22>
 8014a6e:	bf00      	nop
 8014a70:	2000596f 	.word	0x2000596f
 8014a74:	20000ce5 	.word	0x20000ce5

08014a78 <sec_level_reachable>:

static bool sec_level_reachable(struct bt_conn *conn)
{
 8014a78:	b508      	push	{r3, lr}
	switch (conn->required_sec_level) {
 8014a7a:	7a83      	ldrb	r3, [r0, #10]
 8014a7c:	2b03      	cmp	r3, #3
 8014a7e:	d015      	beq.n	8014aac <sec_level_reachable+0x34>
 8014a80:	d807      	bhi.n	8014a92 <sec_level_reachable+0x1a>
 8014a82:	3b01      	subs	r3, #1
 8014a84:	b2db      	uxtb	r3, r3
 8014a86:	2b01      	cmp	r3, #1
 8014a88:	d801      	bhi.n	8014a8e <sec_level_reachable+0x16>
 8014a8a:	2001      	movs	r0, #1
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
	default:
		return false;
	}
}
 8014a8c:	bd08      	pop	{r3, pc}
		return false;
 8014a8e:	2000      	movs	r0, #0
 8014a90:	e7fc      	b.n	8014a8c <sec_level_reachable+0x14>
	switch (conn->required_sec_level) {
 8014a92:	2b04      	cmp	r3, #4
 8014a94:	d108      	bne.n	8014aa8 <sec_level_reachable+0x30>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
 8014a96:	f7ff ff57 	bl	8014948 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
 8014a9a:	2803      	cmp	r0, #3
 8014a9c:	d017      	beq.n	8014ace <sec_level_reachable+0x56>
 8014a9e:	4b12      	ldr	r3, [pc, #72]	; (8014ae8 <sec_level_reachable+0x70>)
 8014aa0:	781b      	ldrb	r3, [r3, #0]
 8014aa2:	b9f3      	cbnz	r3, 8014ae2 <sec_level_reachable+0x6a>
 8014aa4:	2000      	movs	r0, #0
 8014aa6:	e7f1      	b.n	8014a8c <sec_level_reachable+0x14>
		return false;
 8014aa8:	2000      	movs	r0, #0
 8014aaa:	e7ef      	b.n	8014a8c <sec_level_reachable+0x14>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
 8014aac:	f7ff ff4c 	bl	8014948 <get_io_capa>
 8014ab0:	2803      	cmp	r0, #3
 8014ab2:	d001      	beq.n	8014ab8 <sec_level_reachable+0x40>
 8014ab4:	2001      	movs	r0, #1
 8014ab6:	e7e9      	b.n	8014a8c <sec_level_reachable+0x14>
		       (bt_auth && bt_auth->oob_data_request);
 8014ab8:	4b0c      	ldr	r3, [pc, #48]	; (8014aec <sec_level_reachable+0x74>)
 8014aba:	681b      	ldr	r3, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
 8014abc:	b12b      	cbz	r3, 8014aca <sec_level_reachable+0x52>
		       (bt_auth && bt_auth->oob_data_request);
 8014abe:	691b      	ldr	r3, [r3, #16]
 8014ac0:	b10b      	cbz	r3, 8014ac6 <sec_level_reachable+0x4e>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
 8014ac2:	2001      	movs	r0, #1
 8014ac4:	e7e2      	b.n	8014a8c <sec_level_reachable+0x14>
 8014ac6:	2000      	movs	r0, #0
 8014ac8:	e7e0      	b.n	8014a8c <sec_level_reachable+0x14>
 8014aca:	2000      	movs	r0, #0
 8014acc:	e7de      	b.n	8014a8c <sec_level_reachable+0x14>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
 8014ace:	4b07      	ldr	r3, [pc, #28]	; (8014aec <sec_level_reachable+0x74>)
 8014ad0:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
 8014ad2:	b123      	cbz	r3, 8014ade <sec_level_reachable+0x66>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
 8014ad4:	691b      	ldr	r3, [r3, #16]
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d1e1      	bne.n	8014a9e <sec_level_reachable+0x26>
 8014ada:	2000      	movs	r0, #0
 8014adc:	e7d6      	b.n	8014a8c <sec_level_reachable+0x14>
 8014ade:	2000      	movs	r0, #0
 8014ae0:	e7d4      	b.n	8014a8c <sec_level_reachable+0x14>
 8014ae2:	2001      	movs	r0, #1
 8014ae4:	e7d2      	b.n	8014a8c <sec_level_reachable+0x14>
 8014ae6:	bf00      	nop
 8014ae8:	2000596f 	.word	0x2000596f
 8014aec:	2000417c 	.word	0x2000417c

08014af0 <smp_chan_get>:

static struct bt_smp *smp_chan_get(struct bt_conn *conn)
{
 8014af0:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
 8014af2:	2106      	movs	r1, #6
 8014af4:	f008 ffd3 	bl	801da9e <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
 8014af8:	4604      	mov	r4, r0
 8014afa:	b108      	cbz	r0, 8014b00 <smp_chan_get+0x10>
		BT_ERR("Unable to find SMP channel");
		return NULL;
	}

	return CONTAINER_OF(chan, struct bt_smp, chan);
}
 8014afc:	4620      	mov	r0, r4
 8014afe:	bd10      	pop	{r4, pc}
		BT_ERR("Unable to find SMP channel");
 8014b00:	f04f 0100 	mov.w	r1, #0
 8014b04:	2301      	movs	r3, #1
 8014b06:	f363 0102 	bfi	r1, r3, #0, #3
 8014b0a:	f36f 01c5 	bfc	r1, #3, #3
 8014b0e:	4b05      	ldr	r3, [pc, #20]	; (8014b24 <smp_chan_get+0x34>)
 8014b10:	4a05      	ldr	r2, [pc, #20]	; (8014b28 <smp_chan_get+0x38>)
 8014b12:	1a9b      	subs	r3, r3, r2
 8014b14:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8014b18:	f363 118f 	bfi	r1, r3, #6, #10
 8014b1c:	4803      	ldr	r0, [pc, #12]	; (8014b2c <smp_chan_get+0x3c>)
 8014b1e:	f7f1 fe7f 	bl	8006820 <log_0>
		return NULL;
 8014b22:	e7eb      	b.n	8014afc <smp_chan_get+0xc>
 8014b24:	08022bf0 	.word	0x08022bf0
 8014b28:	08022b90 	.word	0x08022b90
 8014b2c:	080279fc 	.word	0x080279fc

08014b30 <smp_create_pdu>:
{
 8014b30:	b570      	push	{r4, r5, r6, lr}
 8014b32:	460d      	mov	r5, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
 8014b34:	f100 06bc 	add.w	r6, r0, #188	; 0xbc
 8014b38:	f3bf 8f5b 	dmb	ish
 8014b3c:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8014b40:	f3bf 8f5b 	dmb	ish
 8014b44:	f013 0f10 	tst.w	r3, #16
 8014b48:	d00e      	beq.n	8014b68 <smp_create_pdu+0x38>
		timeout = K_NO_WAIT;
 8014b4a:	2200      	movs	r2, #0
 8014b4c:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
 8014b4e:	2100      	movs	r1, #0
 8014b50:	4608      	mov	r0, r1
 8014b52:	f008 ff4f 	bl	801d9f4 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
 8014b56:	4604      	mov	r4, r0
 8014b58:	b148      	cbz	r0, 8014b6e <smp_create_pdu+0x3e>
	hdr = net_buf_add(buf, sizeof(*hdr));
 8014b5a:	2101      	movs	r1, #1
 8014b5c:	3008      	adds	r0, #8
 8014b5e:	f00b fc8d 	bl	802047c <net_buf_simple_add>
	hdr->code = op;
 8014b62:	7005      	strb	r5, [r0, #0]
}
 8014b64:	4620      	mov	r0, r4
 8014b66:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
 8014b68:	4a07      	ldr	r2, [pc, #28]	; (8014b88 <smp_create_pdu+0x58>)
 8014b6a:	2300      	movs	r3, #0
 8014b6c:	e7ef      	b.n	8014b4e <smp_create_pdu+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8014b6e:	f3bf 8f5b 	dmb	ish
 8014b72:	e856 3f00 	ldrex	r3, [r6]
 8014b76:	f043 0310 	orr.w	r3, r3, #16
 8014b7a:	e846 3200 	strex	r2, r3, [r6]
 8014b7e:	2a00      	cmp	r2, #0
 8014b80:	d1f7      	bne.n	8014b72 <smp_create_pdu+0x42>
 8014b82:	f3bf 8f5b 	dmb	ish
		return NULL;
 8014b86:	e7ed      	b.n	8014b64 <smp_create_pdu+0x34>
 8014b88:	000493e0 	.word	0x000493e0

08014b8c <sc_smp_check_confirm>:
#endif /* CONFIG_BT_PERIPHERAL */
	}
}

static uint8_t sc_smp_check_confirm(struct bt_smp *smp)
{
 8014b8c:	b510      	push	{r4, lr}
 8014b8e:	b086      	sub	sp, #24
 8014b90:	4604      	mov	r4, r0
	uint8_t cfm[16];
	uint8_t r;

	switch (smp->method) {
 8014b92:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
 8014b96:	2b05      	cmp	r3, #5
 8014b98:	d826      	bhi.n	8014be8 <sc_smp_check_confirm+0x5c>
 8014b9a:	e8df f003 	tbb	[pc, r3]
 8014b9e:	0510      	.short	0x0510
 8014ba0:	03251005 	.word	0x03251005
 8014ba4:	2000      	movs	r0, #0
 8014ba6:	e01d      	b.n	8014be4 <sc_smp_check_confirm+0x58>
		 * bit of Z is set equal to one and the least
		 * significant bit is made up from one bit of the
		 * passkey e.g. if the passkey bit is 1, then Z = 0x81
		 * and if the passkey bit is 0, then Z = 0x80.
		 */
		r = (smp->passkey >> smp->passkey_round) & 0x01;
 8014ba8:	f8d0 3190 	ldr.w	r3, [r0, #400]	; 0x190
 8014bac:	f890 2194 	ldrb.w	r2, [r0, #404]	; 0x194
 8014bb0:	40d3      	lsrs	r3, r2
 8014bb2:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
 8014bb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014bba:	b2db      	uxtb	r3, r3
		break;
 8014bbc:	e000      	b.n	8014bc0 <sc_smp_check_confirm+0x34>
	switch (smp->method) {
 8014bbe:	2300      	movs	r3, #0
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}

	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
 8014bc0:	aa02      	add	r2, sp, #8
 8014bc2:	9200      	str	r2, [sp, #0]
 8014bc4:	f104 02ef 	add.w	r2, r4, #239	; 0xef
 8014bc8:	490a      	ldr	r1, [pc, #40]	; (8014bf4 <sc_smp_check_confirm+0x68>)
 8014bca:	6809      	ldr	r1, [r1, #0]
 8014bcc:	f204 100f 	addw	r0, r4, #271	; 0x10f
 8014bd0:	f00a fcfa 	bl	801f5c8 <smp_f4>
 8014bd4:	b950      	cbnz	r0, 8014bec <sc_smp_check_confirm+0x60>
	}

	BT_DBG("pcnf %s", bt_hex(smp->pcnf, 16));
	BT_DBG("cfm %s", bt_hex(cfm, 16));

	if (memcmp(smp->pcnf, cfm, 16)) {
 8014bd6:	2210      	movs	r2, #16
 8014bd8:	a902      	add	r1, sp, #8
 8014bda:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
 8014bde:	f007 fe4e 	bl	801c87e <memcmp>
 8014be2:	b928      	cbnz	r0, 8014bf0 <sc_smp_check_confirm+0x64>
		return BT_SMP_ERR_CONFIRM_FAILED;
	}

	return 0;
}
 8014be4:	b006      	add	sp, #24
 8014be6:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
 8014be8:	2008      	movs	r0, #8
 8014bea:	e7fb      	b.n	8014be4 <sc_smp_check_confirm+0x58>
		return BT_SMP_ERR_UNSPECIFIED;
 8014bec:	2008      	movs	r0, #8
 8014bee:	e7f9      	b.n	8014be4 <sc_smp_check_confirm+0x58>
		return BT_SMP_ERR_CONFIRM_FAILED;
 8014bf0:	2004      	movs	r0, #4
 8014bf2:	e7f7      	b.n	8014be4 <sc_smp_check_confirm+0x58>
 8014bf4:	2000447c 	.word	0x2000447c

08014bf8 <smp_f5>:
{
 8014bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014bfc:	b09b      	sub	sp, #108	; 0x6c
 8014bfe:	4604      	mov	r4, r0
 8014c00:	460f      	mov	r7, r1
 8014c02:	4616      	mov	r6, r2
 8014c04:	461d      	mov	r5, r3
 8014c06:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 8014c0a:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
	uint8_t m[53] = { 0x00, /* counter */
 8014c0e:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8014c12:	f8df e124 	ldr.w	lr, [pc, #292]	; 8014d38 <smp_f5+0x140>
 8014c16:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014c1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014c1e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014c22:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014c26:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014c2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014c2e:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014c32:	f84c 0b04 	str.w	r0, [ip], #4
 8014c36:	f88c 1000 	strb.w	r1, [ip]
	psrc += length - 1;
 8014c3a:	f104 001f 	add.w	r0, r4, #31
	uint8_t *pdst = (uint8_t *)dst;
 8014c3e:	466b      	mov	r3, sp
	for (; length > 0; length--) {
 8014c40:	2220      	movs	r2, #32
 8014c42:	b12a      	cbz	r2, 8014c50 <smp_f5+0x58>
		*pdst++ = *psrc--;
 8014c44:	f810 1901 	ldrb.w	r1, [r0], #-1
 8014c48:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
 8014c4c:	3a01      	subs	r2, #1
 8014c4e:	e7f8      	b.n	8014c42 <smp_f5+0x4a>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
 8014c50:	ab08      	add	r3, sp, #32
 8014c52:	2220      	movs	r2, #32
 8014c54:	4669      	mov	r1, sp
 8014c56:	4837      	ldr	r0, [pc, #220]	; (8014d34 <smp_f5+0x13c>)
 8014c58:	f00a fc94 	bl	801f584 <bt_smp_aes_cmac>
	if (err) {
 8014c5c:	4684      	mov	ip, r0
 8014c5e:	2800      	cmp	r0, #0
 8014c60:	d164      	bne.n	8014d2c <smp_f5+0x134>
	psrc += length - 1;
 8014c62:	370f      	adds	r7, #15
	uint8_t *pdst = (uint8_t *)dst;
 8014c64:	f10d 0335 	add.w	r3, sp, #53	; 0x35
	for (; length > 0; length--) {
 8014c68:	2210      	movs	r2, #16
 8014c6a:	e004      	b.n	8014c76 <smp_f5+0x7e>
		*pdst++ = *psrc--;
 8014c6c:	f817 1901 	ldrb.w	r1, [r7], #-1
 8014c70:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
 8014c74:	3a01      	subs	r2, #1
 8014c76:	2a00      	cmp	r2, #0
 8014c78:	d1f8      	bne.n	8014c6c <smp_f5+0x74>
	psrc += length - 1;
 8014c7a:	360f      	adds	r6, #15
	uint8_t *pdst = (uint8_t *)dst;
 8014c7c:	f10d 0345 	add.w	r3, sp, #69	; 0x45
	for (; length > 0; length--) {
 8014c80:	2210      	movs	r2, #16
 8014c82:	b12a      	cbz	r2, 8014c90 <smp_f5+0x98>
		*pdst++ = *psrc--;
 8014c84:	f816 1901 	ldrb.w	r1, [r6], #-1
 8014c88:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
 8014c8c:	3a01      	subs	r2, #1
 8014c8e:	e7f8      	b.n	8014c82 <smp_f5+0x8a>
	m[37] = a1->type;
 8014c90:	f815 3b06 	ldrb.w	r3, [r5], #6
 8014c94:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	uint8_t *pdst = (uint8_t *)dst;
 8014c98:	f10d 0356 	add.w	r3, sp, #86	; 0x56
	for (; length > 0; length--) {
 8014c9c:	2206      	movs	r2, #6
 8014c9e:	b12a      	cbz	r2, 8014cac <smp_f5+0xb4>
		*pdst++ = *psrc--;
 8014ca0:	f815 1901 	ldrb.w	r1, [r5], #-1
 8014ca4:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
 8014ca8:	3a01      	subs	r2, #1
 8014caa:	e7f8      	b.n	8014c9e <smp_f5+0xa6>
	m[44] = a2->type;
 8014cac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014cae:	f813 2b06 	ldrb.w	r2, [r3], #6
 8014cb2:	f88d 205c 	strb.w	r2, [sp, #92]	; 0x5c
	uint8_t *pdst = (uint8_t *)dst;
 8014cb6:	f10d 025d 	add.w	r2, sp, #93	; 0x5d
	for (; length > 0; length--) {
 8014cba:	2406      	movs	r4, #6
 8014cbc:	e004      	b.n	8014cc8 <smp_f5+0xd0>
		*pdst++ = *psrc--;
 8014cbe:	f813 1901 	ldrb.w	r1, [r3], #-1
 8014cc2:	f802 1b01 	strb.w	r1, [r2], #1
	for (; length > 0; length--) {
 8014cc6:	3c01      	subs	r4, #1
 8014cc8:	2c00      	cmp	r4, #0
 8014cca:	d1f8      	bne.n	8014cbe <smp_f5+0xc6>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
 8014ccc:	4643      	mov	r3, r8
 8014cce:	2235      	movs	r2, #53	; 0x35
 8014cd0:	a90c      	add	r1, sp, #48	; 0x30
 8014cd2:	a808      	add	r0, sp, #32
 8014cd4:	f00a fc56 	bl	801f584 <bt_smp_aes_cmac>
	if (err) {
 8014cd8:	4684      	mov	ip, r0
 8014cda:	bb38      	cbnz	r0, 8014d2c <smp_f5+0x134>
	for (i = 0; i < (length/2); i++) {
 8014cdc:	4623      	mov	r3, r4
 8014cde:	e00a      	b.n	8014cf6 <smp_f5+0xfe>
		uint8_t tmp = ((uint8_t *)buf)[i];
 8014ce0:	f818 1003 	ldrb.w	r1, [r8, r3]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
 8014ce4:	f1c3 020f 	rsb	r2, r3, #15
 8014ce8:	f818 0002 	ldrb.w	r0, [r8, r2]
 8014cec:	f808 0003 	strb.w	r0, [r8, r3]
		((uint8_t *)buf)[length - 1 - i] = tmp;
 8014cf0:	f808 1002 	strb.w	r1, [r8, r2]
	for (i = 0; i < (length/2); i++) {
 8014cf4:	3301      	adds	r3, #1
 8014cf6:	2b07      	cmp	r3, #7
 8014cf8:	d9f2      	bls.n	8014ce0 <smp_f5+0xe8>
	m[0] = 0x01;
 8014cfa:	2301      	movs	r3, #1
 8014cfc:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
 8014d00:	464b      	mov	r3, r9
 8014d02:	2235      	movs	r2, #53	; 0x35
 8014d04:	a90c      	add	r1, sp, #48	; 0x30
 8014d06:	a808      	add	r0, sp, #32
 8014d08:	f00a fc3c 	bl	801f584 <bt_smp_aes_cmac>
	if (err) {
 8014d0c:	4684      	mov	ip, r0
 8014d0e:	b968      	cbnz	r0, 8014d2c <smp_f5+0x134>
 8014d10:	2c07      	cmp	r4, #7
 8014d12:	d80b      	bhi.n	8014d2c <smp_f5+0x134>
		uint8_t tmp = ((uint8_t *)buf)[i];
 8014d14:	f819 2004 	ldrb.w	r2, [r9, r4]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
 8014d18:	f1c4 030f 	rsb	r3, r4, #15
 8014d1c:	f819 1003 	ldrb.w	r1, [r9, r3]
 8014d20:	f809 1004 	strb.w	r1, [r9, r4]
		((uint8_t *)buf)[length - 1 - i] = tmp;
 8014d24:	f809 2003 	strb.w	r2, [r9, r3]
	for (i = 0; i < (length/2); i++) {
 8014d28:	3401      	adds	r4, #1
 8014d2a:	e7f1      	b.n	8014d10 <smp_f5+0x118>
}
 8014d2c:	4660      	mov	r0, ip
 8014d2e:	b01b      	add	sp, #108	; 0x6c
 8014d30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d34:	08027cb0 	.word	0x08027cb0
 8014d38:	08022d68 	.word	0x08022d68

08014d3c <smp_g2>:
{
 8014d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d3e:	b099      	sub	sp, #100	; 0x64
 8014d40:	9c1e      	ldr	r4, [sp, #120]	; 0x78
	psrc += length - 1;
 8014d42:	301f      	adds	r0, #31
	uint8_t *pdst = (uint8_t *)dst;
 8014d44:	ad04      	add	r5, sp, #16
	for (; length > 0; length--) {
 8014d46:	2620      	movs	r6, #32
 8014d48:	b12e      	cbz	r6, 8014d56 <smp_g2+0x1a>
		*pdst++ = *psrc--;
 8014d4a:	f810 7901 	ldrb.w	r7, [r0], #-1
 8014d4e:	f805 7b01 	strb.w	r7, [r5], #1
	for (; length > 0; length--) {
 8014d52:	3e01      	subs	r6, #1
 8014d54:	e7f8      	b.n	8014d48 <smp_g2+0xc>
	psrc += length - 1;
 8014d56:	311f      	adds	r1, #31
	uint8_t *pdst = (uint8_t *)dst;
 8014d58:	a80c      	add	r0, sp, #48	; 0x30
	for (; length > 0; length--) {
 8014d5a:	2520      	movs	r5, #32
 8014d5c:	b12d      	cbz	r5, 8014d6a <smp_g2+0x2e>
		*pdst++ = *psrc--;
 8014d5e:	f811 6901 	ldrb.w	r6, [r1], #-1
 8014d62:	f800 6b01 	strb.w	r6, [r0], #1
	for (; length > 0; length--) {
 8014d66:	3d01      	subs	r5, #1
 8014d68:	e7f8      	b.n	8014d5c <smp_g2+0x20>
	psrc += length - 1;
 8014d6a:	330f      	adds	r3, #15
	uint8_t *pdst = (uint8_t *)dst;
 8014d6c:	a914      	add	r1, sp, #80	; 0x50
	for (; length > 0; length--) {
 8014d6e:	2010      	movs	r0, #16
 8014d70:	b128      	cbz	r0, 8014d7e <smp_g2+0x42>
		*pdst++ = *psrc--;
 8014d72:	f813 5901 	ldrb.w	r5, [r3], #-1
 8014d76:	f801 5b01 	strb.w	r5, [r1], #1
	for (; length > 0; length--) {
 8014d7a:	3801      	subs	r0, #1
 8014d7c:	e7f8      	b.n	8014d70 <smp_g2+0x34>
	psrc += length - 1;
 8014d7e:	320f      	adds	r2, #15
	uint8_t *pdst = (uint8_t *)dst;
 8014d80:	466b      	mov	r3, sp
	for (; length > 0; length--) {
 8014d82:	2110      	movs	r1, #16
 8014d84:	e004      	b.n	8014d90 <smp_g2+0x54>
		*pdst++ = *psrc--;
 8014d86:	f812 0901 	ldrb.w	r0, [r2], #-1
 8014d8a:	f803 0b01 	strb.w	r0, [r3], #1
	for (; length > 0; length--) {
 8014d8e:	3901      	subs	r1, #1
 8014d90:	2900      	cmp	r1, #0
 8014d92:	d1f8      	bne.n	8014d86 <smp_g2+0x4a>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
 8014d94:	466b      	mov	r3, sp
 8014d96:	2250      	movs	r2, #80	; 0x50
 8014d98:	a904      	add	r1, sp, #16
 8014d9a:	4668      	mov	r0, sp
 8014d9c:	f00a fbf2 	bl	801f584 <bt_smp_aes_cmac>
	if (err) {
 8014da0:	4605      	mov	r5, r0
 8014da2:	b110      	cbz	r0, 8014daa <smp_g2+0x6e>
}
 8014da4:	4628      	mov	r0, r5
 8014da6:	b019      	add	sp, #100	; 0x64
 8014da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(passkey, xs + 12, 4);
 8014daa:	2204      	movs	r2, #4
 8014dac:	a903      	add	r1, sp, #12
 8014dae:	4620      	mov	r0, r4
 8014db0:	f007 fd7d 	bl	801c8ae <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
 8014db4:	6822      	ldr	r2, [r4, #0]
 8014db6:	0a13      	lsrs	r3, r2, #8
 8014db8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014dbc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8014dc0:	0211      	lsls	r1, r2, #8
 8014dc2:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8014dc6:	430b      	orrs	r3, r1
 8014dc8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8014dcc:	4a04      	ldr	r2, [pc, #16]	; (8014de0 <smp_g2+0xa4>)
 8014dce:	fba2 1203 	umull	r1, r2, r2, r3
 8014dd2:	0c92      	lsrs	r2, r2, #18
 8014dd4:	4903      	ldr	r1, [pc, #12]	; (8014de4 <smp_g2+0xa8>)
 8014dd6:	fb01 3212 	mls	r2, r1, r2, r3
 8014dda:	6022      	str	r2, [r4, #0]
	return 0;
 8014ddc:	e7e2      	b.n	8014da4 <smp_g2+0x68>
 8014dde:	bf00      	nop
 8014de0:	431bde83 	.word	0x431bde83
 8014de4:	000f4240 	.word	0x000f4240

08014de8 <smp_send>:
{
 8014de8:	b510      	push	{r4, lr}
 8014dea:	b082      	sub	sp, #8
 8014dec:	4604      	mov	r4, r0
 8014dee:	4613      	mov	r3, r2
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
 8014df0:	2200      	movs	r2, #0
 8014df2:	9200      	str	r2, [sp, #0]
 8014df4:	460a      	mov	r2, r1
 8014df6:	2106      	movs	r1, #6
 8014df8:	6800      	ldr	r0, [r0, #0]
 8014dfa:	f008 fe00 	bl	801d9fe <bt_l2cap_send_cb>
 8014dfe:	4a04      	ldr	r2, [pc, #16]	; (8014e10 <smp_send+0x28>)
 8014e00:	2300      	movs	r3, #0
 8014e02:	f504 71d4 	add.w	r1, r4, #424	; 0x1a8
 8014e06:	4803      	ldr	r0, [pc, #12]	; (8014e14 <smp_send+0x2c>)
 8014e08:	f004 f832 	bl	8018e70 <k_delayed_work_submit_to_queue>
}
 8014e0c:	b002      	add	sp, #8
 8014e0e:	bd10      	pop	{r4, pc}
 8014e10:	000493e0 	.word	0x000493e0
 8014e14:	20003310 	.word	0x20003310

08014e18 <smp_send_pairing_confirm>:
{
 8014e18:	b570      	push	{r4, r5, r6, lr}
 8014e1a:	b082      	sub	sp, #8
 8014e1c:	4605      	mov	r5, r0
	switch (smp->method) {
 8014e1e:	f890 40c0 	ldrb.w	r4, [r0, #192]	; 0xc0
 8014e22:	2c02      	cmp	r4, #2
 8014e24:	d804      	bhi.n	8014e30 <smp_send_pairing_confirm+0x18>
 8014e26:	b263      	sxtb	r3, r4
 8014e28:	b933      	cbnz	r3, 8014e38 <smp_send_pairing_confirm+0x20>
 8014e2a:	b18c      	cbz	r4, 8014e50 <smp_send_pairing_confirm+0x38>
 8014e2c:	2008      	movs	r0, #8
 8014e2e:	e039      	b.n	8014ea4 <smp_send_pairing_confirm+0x8c>
 8014e30:	2c03      	cmp	r4, #3
 8014e32:	d00c      	beq.n	8014e4e <smp_send_pairing_confirm+0x36>
 8014e34:	2008      	movs	r0, #8
 8014e36:	e035      	b.n	8014ea4 <smp_send_pairing_confirm+0x8c>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
 8014e38:	f8d0 4190 	ldr.w	r4, [r0, #400]	; 0x190
 8014e3c:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
 8014e40:	40dc      	lsrs	r4, r3
 8014e42:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
 8014e46:	f064 047f 	orn	r4, r4, #127	; 0x7f
 8014e4a:	b2e4      	uxtb	r4, r4
		break;
 8014e4c:	e000      	b.n	8014e50 <smp_send_pairing_confirm+0x38>
	switch (smp->method) {
 8014e4e:	2400      	movs	r4, #0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
 8014e50:	2210      	movs	r2, #16
 8014e52:	2103      	movs	r1, #3
 8014e54:	4628      	mov	r0, r5
 8014e56:	f7ff fe6b 	bl	8014b30 <smp_create_pdu>
	if (!buf) {
 8014e5a:	4606      	mov	r6, r0
 8014e5c:	b348      	cbz	r0, 8014eb2 <smp_send_pairing_confirm+0x9a>
	req = net_buf_add(buf, sizeof(*req));
 8014e5e:	2110      	movs	r1, #16
 8014e60:	3008      	adds	r0, #8
 8014e62:	f00b fb0b 	bl	802047c <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
 8014e66:	9000      	str	r0, [sp, #0]
 8014e68:	4623      	mov	r3, r4
 8014e6a:	f105 02df 	add.w	r2, r5, #223	; 0xdf
 8014e6e:	f205 110f 	addw	r1, r5, #271	; 0x10f
 8014e72:	4811      	ldr	r0, [pc, #68]	; (8014eb8 <smp_send_pairing_confirm+0xa0>)
 8014e74:	6800      	ldr	r0, [r0, #0]
 8014e76:	f00a fba7 	bl	801f5c8 <smp_f4>
 8014e7a:	b9a8      	cbnz	r0, 8014ea8 <smp_send_pairing_confirm+0x90>
	smp_send(smp, buf, NULL, NULL);
 8014e7c:	2300      	movs	r3, #0
 8014e7e:	461a      	mov	r2, r3
 8014e80:	4631      	mov	r1, r6
 8014e82:	4628      	mov	r0, r5
 8014e84:	f7ff ffb0 	bl	8014de8 <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
 8014e88:	35bc      	adds	r5, #188	; 0xbc
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8014e8a:	f3bf 8f5b 	dmb	ish
 8014e8e:	e855 3f00 	ldrex	r3, [r5]
 8014e92:	f023 0301 	bic.w	r3, r3, #1
 8014e96:	e845 3200 	strex	r2, r3, [r5]
 8014e9a:	2a00      	cmp	r2, #0
 8014e9c:	d1f7      	bne.n	8014e8e <smp_send_pairing_confirm+0x76>
 8014e9e:	f3bf 8f5b 	dmb	ish
	return 0;
 8014ea2:	2000      	movs	r0, #0
}
 8014ea4:	b002      	add	sp, #8
 8014ea6:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
 8014ea8:	4630      	mov	r0, r6
 8014eaa:	f00b fa9d 	bl	80203e8 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
 8014eae:	2008      	movs	r0, #8
 8014eb0:	e7f8      	b.n	8014ea4 <smp_send_pairing_confirm+0x8c>
		return BT_SMP_ERR_UNSPECIFIED;
 8014eb2:	2008      	movs	r0, #8
 8014eb4:	e7f6      	b.n	8014ea4 <smp_send_pairing_confirm+0x8c>
 8014eb6:	bf00      	nop
 8014eb8:	2000447c 	.word	0x2000447c

08014ebc <sc_send_public_key>:
{
 8014ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ebe:	4604      	mov	r4, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
 8014ec0:	2240      	movs	r2, #64	; 0x40
 8014ec2:	210c      	movs	r1, #12
 8014ec4:	f7ff fe34 	bl	8014b30 <smp_create_pdu>
	if (!req_buf) {
 8014ec8:	b1c0      	cbz	r0, 8014efc <sc_send_public_key+0x40>
 8014eca:	4606      	mov	r6, r0
	req = net_buf_add(req_buf, sizeof(*req));
 8014ecc:	2140      	movs	r1, #64	; 0x40
 8014ece:	3008      	adds	r0, #8
 8014ed0:	f00b fad4 	bl	802047c <net_buf_simple_add>
 8014ed4:	4605      	mov	r5, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
 8014ed6:	4f0a      	ldr	r7, [pc, #40]	; (8014f00 <sc_send_public_key+0x44>)
 8014ed8:	2220      	movs	r2, #32
 8014eda:	6839      	ldr	r1, [r7, #0]
 8014edc:	f007 fce7 	bl	801c8ae <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
 8014ee0:	6839      	ldr	r1, [r7, #0]
 8014ee2:	2220      	movs	r2, #32
 8014ee4:	4411      	add	r1, r2
 8014ee6:	18a8      	adds	r0, r5, r2
 8014ee8:	f007 fce1 	bl	801c8ae <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
 8014eec:	2300      	movs	r3, #0
 8014eee:	461a      	mov	r2, r3
 8014ef0:	4631      	mov	r1, r6
 8014ef2:	4620      	mov	r0, r4
 8014ef4:	f7ff ff78 	bl	8014de8 <smp_send>
	return 0;
 8014ef8:	2000      	movs	r0, #0
}
 8014efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
 8014efc:	2008      	movs	r0, #8
 8014efe:	e7fc      	b.n	8014efa <sc_send_public_key+0x3e>
 8014f00:	2000447c 	.word	0x2000447c

08014f04 <smp_pairing_complete>:
{
 8014f04:	b570      	push	{r4, r5, r6, lr}
 8014f06:	4604      	mov	r4, r0
	if (!status) {
 8014f08:	b389      	cbz	r1, 8014f6e <smp_pairing_complete+0x6a>
 8014f0a:	460d      	mov	r5, r1
		uint8_t auth_err = auth_err_get(status);
 8014f0c:	4608      	mov	r0, r1
 8014f0e:	f00a fa42 	bl	801f396 <auth_err_get>
 8014f12:	4606      	mov	r6, r0
		if (smp->chan.chan.conn->le.keys &&
 8014f14:	6823      	ldr	r3, [r4, #0]
 8014f16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014f1a:	b19b      	cbz	r3, 8014f44 <smp_pairing_complete+0x40>
		    (!smp->chan.chan.conn->le.keys->enc_size ||
 8014f1c:	7b1b      	ldrb	r3, [r3, #12]
		if (smp->chan.chan.conn->le.keys &&
 8014f1e:	b143      	cbz	r3, 8014f32 <smp_pairing_complete+0x2e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8014f20:	f3bf 8f5b 	dmb	ish
 8014f24:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8014f28:	f3bf 8f5b 	dmb	ish
		    (!smp->chan.chan.conn->le.keys->enc_size ||
 8014f2c:	f013 0f04 	tst.w	r3, #4
 8014f30:	d008      	beq.n	8014f44 <smp_pairing_complete+0x40>
			bt_keys_clear(smp->chan.chan.conn->le.keys);
 8014f32:	6823      	ldr	r3, [r4, #0]
 8014f34:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8014f38:	f001 fcc0 	bl	80168bc <bt_keys_clear>
			smp->chan.chan.conn->le.keys = NULL;
 8014f3c:	6823      	ldr	r3, [r4, #0]
 8014f3e:	2200      	movs	r2, #0
 8014f40:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8014f44:	f3bf 8f5b 	dmb	ish
 8014f48:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8014f4c:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
 8014f50:	f013 0f04 	tst.w	r3, #4
 8014f54:	d027      	beq.n	8014fa6 <smp_pairing_complete+0xa2>
		if (bt_auth && bt_auth->pairing_failed) {
 8014f56:	4b17      	ldr	r3, [pc, #92]	; (8014fb4 <smp_pairing_complete+0xb0>)
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	b123      	cbz	r3, 8014f66 <smp_pairing_complete+0x62>
 8014f5c:	6a1b      	ldr	r3, [r3, #32]
 8014f5e:	b113      	cbz	r3, 8014f66 <smp_pairing_complete+0x62>
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
 8014f60:	4631      	mov	r1, r6
 8014f62:	6820      	ldr	r0, [r4, #0]
 8014f64:	4798      	blx	r3
	smp_reset(smp);
 8014f66:	4620      	mov	r0, r4
 8014f68:	f00a faca 	bl	801f500 <smp_reset>
}
 8014f6c:	bd70      	pop	{r4, r5, r6, pc}
 8014f6e:	f3bf 8f5b 	dmb	ish
 8014f72:	f8d0 50bc 	ldr.w	r5, [r0, #188]	; 0xbc
 8014f76:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
 8014f7a:	f415 5f80 	tst.w	r5, #4096	; 0x1000
 8014f7e:	f3c5 3500 	ubfx	r5, r5, #12, #1
		if (bond_flag) {
 8014f82:	d10a      	bne.n	8014f9a <smp_pairing_complete+0x96>
		if (bt_auth && bt_auth->pairing_complete) {
 8014f84:	4b0b      	ldr	r3, [pc, #44]	; (8014fb4 <smp_pairing_complete+0xb0>)
 8014f86:	681b      	ldr	r3, [r3, #0]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d0ec      	beq.n	8014f66 <smp_pairing_complete+0x62>
 8014f8c:	69db      	ldr	r3, [r3, #28]
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d0e9      	beq.n	8014f66 <smp_pairing_complete+0x62>
			bt_auth->pairing_complete(smp->chan.chan.conn,
 8014f92:	4629      	mov	r1, r5
 8014f94:	6820      	ldr	r0, [r4, #0]
 8014f96:	4798      	blx	r3
 8014f98:	e7e5      	b.n	8014f66 <smp_pairing_complete+0x62>
			bt_keys_store(smp->chan.chan.conn->le.keys);
 8014f9a:	6803      	ldr	r3, [r0, #0]
 8014f9c:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8014fa0:	f001 fd94 	bl	8016acc <bt_keys_store>
 8014fa4:	e7ee      	b.n	8014f84 <smp_pairing_complete+0x80>
			bt_conn_security_changed(smp->chan.chan.conn, status,
 8014fa6:	4632      	mov	r2, r6
 8014fa8:	4629      	mov	r1, r5
 8014faa:	6820      	ldr	r0, [r4, #0]
 8014fac:	f7fb f896 	bl	80100dc <bt_conn_security_changed>
 8014fb0:	e7d1      	b.n	8014f56 <smp_pairing_complete+0x52>
 8014fb2:	bf00      	nop
 8014fb4:	2000417c 	.word	0x2000417c

08014fb8 <bt_smp_dhkey_ready>:
{
 8014fb8:	b510      	push	{r4, lr}
 8014fba:	4601      	mov	r1, r0
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
 8014fbc:	2400      	movs	r4, #0
 8014fbe:	2c05      	cmp	r4, #5
 8014fc0:	dc20      	bgt.n	8015004 <bt_smp_dhkey_ready+0x4c>
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
 8014fc2:	f44f 73ec 	mov.w	r3, #472	; 0x1d8
 8014fc6:	fb03 f304 	mul.w	r3, r3, r4
 8014fca:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 8014fce:	4b3a      	ldr	r3, [pc, #232]	; (80150b8 <bt_smp_dhkey_ready+0x100>)
 8014fd0:	4413      	add	r3, r2
 8014fd2:	3304      	adds	r3, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8014fd4:	f3bf 8f5b 	dmb	ish
 8014fd8:	e853 2f00 	ldrex	r2, [r3]
 8014fdc:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 8014fe0:	e843 0c00 	strex	ip, r0, [r3]
 8014fe4:	f1bc 0f00 	cmp.w	ip, #0
 8014fe8:	d1f6      	bne.n	8014fd8 <bt_smp_dhkey_ready+0x20>
 8014fea:	f3bf 8f5b 	dmb	ish
 8014fee:	f012 0f80 	tst.w	r2, #128	; 0x80
 8014ff2:	d101      	bne.n	8014ff8 <bt_smp_dhkey_ready+0x40>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
 8014ff4:	3401      	adds	r4, #1
 8014ff6:	e7e2      	b.n	8014fbe <bt_smp_dhkey_ready+0x6>
			smp = &bt_smp_pool[i];
 8014ff8:	4b2f      	ldr	r3, [pc, #188]	; (80150b8 <bt_smp_dhkey_ready+0x100>)
 8014ffa:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8014ffe:	fb02 3404 	mla	r4, r2, r4, r3
			break;
 8015002:	e000      	b.n	8015006 <bt_smp_dhkey_ready+0x4e>
	struct bt_smp *smp = NULL;
 8015004:	2400      	movs	r4, #0
	if (!smp) {
 8015006:	2c00      	cmp	r4, #0
 8015008:	d03e      	beq.n	8015088 <bt_smp_dhkey_ready+0xd0>
	if (!dhkey) {
 801500a:	b361      	cbz	r1, 8015066 <bt_smp_dhkey_ready+0xae>
	memcpy(smp->dhkey, dhkey, 32);
 801500c:	2220      	movs	r2, #32
 801500e:	f204 104f 	addw	r0, r4, #335	; 0x14f
 8015012:	f007 fc4c 	bl	801c8ae <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
 8015016:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 801501a:	f3bf 8f5b 	dmb	ish
 801501e:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
 8015022:	f3bf 8f5b 	dmb	ish
 8015026:	f412 7f00 	tst.w	r2, #512	; 0x200
 801502a:	d121      	bne.n	8015070 <bt_smp_dhkey_ready+0xb8>
 801502c:	f3bf 8f5b 	dmb	ish
 8015030:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
 8015034:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
 8015038:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 801503c:	d125      	bne.n	801508a <bt_smp_dhkey_ready+0xd2>
 801503e:	f3bf 8f5b 	dmb	ish
 8015042:	681b      	ldr	r3, [r3, #0]
 8015044:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
 8015048:	f413 7f80 	tst.w	r3, #256	; 0x100
 801504c:	d01c      	beq.n	8015088 <bt_smp_dhkey_ready+0xd0>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
 801504e:	6823      	ldr	r3, [r4, #0]
 8015050:	78db      	ldrb	r3, [r3, #3]
 8015052:	b33b      	cbz	r3, 80150a4 <bt_smp_dhkey_ready+0xec>
		err = compute_and_check_and_send_slave_dhcheck(smp);
 8015054:	4620      	mov	r0, r4
 8015056:	f00a fbe6 	bl	801f826 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
 801505a:	4601      	mov	r1, r0
 801505c:	b1a0      	cbz	r0, 8015088 <bt_smp_dhkey_ready+0xd0>
			smp_error(smp, err);
 801505e:	4620      	mov	r0, r4
 8015060:	f00a fd1c 	bl	801fa9c <smp_error>
 8015064:	e010      	b.n	8015088 <bt_smp_dhkey_ready+0xd0>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
 8015066:	210b      	movs	r1, #11
 8015068:	4620      	mov	r0, r4
 801506a:	f00a fd17 	bl	801fa9c <smp_error>
		return;
 801506e:	e00b      	b.n	8015088 <bt_smp_dhkey_ready+0xd0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8015070:	f3bf 8f5b 	dmb	ish
 8015074:	e853 2f00 	ldrex	r2, [r3]
 8015078:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801507c:	e843 2100 	strex	r1, r2, [r3]
 8015080:	2900      	cmp	r1, #0
 8015082:	d1f7      	bne.n	8015074 <bt_smp_dhkey_ready+0xbc>
 8015084:	f3bf 8f5b 	dmb	ish
}
 8015088:	bd10      	pop	{r4, pc}
 801508a:	f3bf 8f5b 	dmb	ish
 801508e:	e853 2f00 	ldrex	r2, [r3]
 8015092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015096:	e843 2100 	strex	r1, r2, [r3]
 801509a:	2900      	cmp	r1, #0
 801509c:	d1f7      	bne.n	801508e <bt_smp_dhkey_ready+0xd6>
 801509e:	f3bf 8f5b 	dmb	ish
		return;
 80150a2:	e7f1      	b.n	8015088 <bt_smp_dhkey_ready+0xd0>
			err = compute_and_send_master_dhcheck(smp);
 80150a4:	4620      	mov	r0, r4
 80150a6:	f00a fb5a 	bl	801f75e <compute_and_send_master_dhcheck>
			if (err) {
 80150aa:	4601      	mov	r1, r0
 80150ac:	2800      	cmp	r0, #0
 80150ae:	d0eb      	beq.n	8015088 <bt_smp_dhkey_ready+0xd0>
				smp_error(smp, err);
 80150b0:	4620      	mov	r0, r4
 80150b2:	f00a fcf3 	bl	801fa9c <smp_error>
			return;
 80150b6:	e7e7      	b.n	8015088 <bt_smp_dhkey_ready+0xd0>
 80150b8:	20002690 	.word	0x20002690

080150bc <smp_timeout>:
{
 80150bc:	b538      	push	{r3, r4, r5, lr}
 80150be:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
 80150c0:	f5a0 75d4 	sub.w	r5, r0, #424	; 0x1a8
	BT_ERR("SMP Timeout");
 80150c4:	f04f 0100 	mov.w	r1, #0
 80150c8:	2301      	movs	r3, #1
 80150ca:	f363 0102 	bfi	r1, r3, #0, #3
 80150ce:	f36f 01c5 	bfc	r1, #3, #3
 80150d2:	4b0e      	ldr	r3, [pc, #56]	; (801510c <smp_timeout+0x50>)
 80150d4:	4a0e      	ldr	r2, [pc, #56]	; (8015110 <smp_timeout+0x54>)
 80150d6:	1a9b      	subs	r3, r3, r2
 80150d8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80150dc:	f363 118f 	bfi	r1, r3, #6, #10
 80150e0:	480c      	ldr	r0, [pc, #48]	; (8015114 <smp_timeout+0x58>)
 80150e2:	f7f1 fb9d 	bl	8006820 <log_0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
 80150e6:	2108      	movs	r1, #8
 80150e8:	4628      	mov	r0, r5
 80150ea:	f7ff ff0b 	bl	8014f04 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
 80150ee:	3cec      	subs	r4, #236	; 0xec
 80150f0:	f3bf 8f5b 	dmb	ish
 80150f4:	e854 3f00 	ldrex	r3, [r4]
 80150f8:	f043 0310 	orr.w	r3, r3, #16
 80150fc:	e844 3200 	strex	r2, r3, [r4]
 8015100:	2a00      	cmp	r2, #0
 8015102:	d1f7      	bne.n	80150f4 <smp_timeout+0x38>
 8015104:	f3bf 8f5b 	dmb	ish
}
 8015108:	bd38      	pop	{r3, r4, r5, pc}
 801510a:	bf00      	nop
 801510c:	08022bf0 	.word	0x08022bf0
 8015110:	08022b90 	.word	0x08022b90
 8015114:	08027a18 	.word	0x08027a18

08015118 <display_passkey>:
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
	return 0;
}

static uint8_t display_passkey(struct bt_smp *smp)
{
 8015118:	b510      	push	{r4, lr}
 801511a:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		smp->passkey = fixed_passkey;
	} else {
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
 801511c:	2104      	movs	r1, #4
 801511e:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 8015122:	f7fa fe1b 	bl	800fd5c <bt_rand>
 8015126:	bb48      	cbnz	r0, 801517c <display_passkey+0x64>
			return BT_SMP_ERR_UNSPECIFIED;
		}

		smp->passkey %= 1000000;
 8015128:	f8d4 2190 	ldr.w	r2, [r4, #400]	; 0x190
 801512c:	4b14      	ldr	r3, [pc, #80]	; (8015180 <display_passkey+0x68>)
 801512e:	fba3 1302 	umull	r1, r3, r3, r2
 8015132:	0c9b      	lsrs	r3, r3, #18
 8015134:	4913      	ldr	r1, [pc, #76]	; (8015184 <display_passkey+0x6c>)
 8015136:	fb01 2313 	mls	r3, r1, r3, r2
 801513a:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
	}

	smp->passkey_round = 0U;
 801513e:	2300      	movs	r3, #0
 8015140:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194

	if (bt_auth && bt_auth->passkey_display) {
 8015144:	4b10      	ldr	r3, [pc, #64]	; (8015188 <display_passkey+0x70>)
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	b1b3      	cbz	r3, 8015178 <display_passkey+0x60>
 801514a:	685b      	ldr	r3, [r3, #4]
 801514c:	b1a3      	cbz	r3, 8015178 <display_passkey+0x60>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
 801514e:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
 8015152:	f3bf 8f5b 	dmb	ish
 8015156:	e853 2f00 	ldrex	r2, [r3]
 801515a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801515e:	e843 2100 	strex	r1, r2, [r3]
 8015162:	2900      	cmp	r1, #0
 8015164:	d1f7      	bne.n	8015156 <display_passkey+0x3e>
 8015166:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
 801516a:	4b07      	ldr	r3, [pc, #28]	; (8015188 <display_passkey+0x70>)
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	685b      	ldr	r3, [r3, #4]
 8015170:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
 8015174:	6820      	ldr	r0, [r4, #0]
 8015176:	4798      	blx	r3
	}

	smp->passkey = sys_cpu_to_le32(smp->passkey);

	return 0;
 8015178:	2000      	movs	r0, #0
}
 801517a:	bd10      	pop	{r4, pc}
			return BT_SMP_ERR_UNSPECIFIED;
 801517c:	2008      	movs	r0, #8
 801517e:	e7fc      	b.n	801517a <display_passkey+0x62>
 8015180:	431bde83 	.word	0x431bde83
 8015184:	000f4240 	.word	0x000f4240
 8015188:	2000417c 	.word	0x2000417c

0801518c <smp_pairing_random>:
{
 801518c:	b570      	push	{r4, r5, r6, lr}
 801518e:	b084      	sub	sp, #16
 8015190:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
 8015192:	f100 06ef 	add.w	r6, r0, #239	; 0xef
 8015196:	2210      	movs	r2, #16
 8015198:	6889      	ldr	r1, [r1, #8]
 801519a:	4630      	mov	r0, r6
 801519c:	f007 fb87 	bl	801c8ae <memcpy>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
 80151a0:	6823      	ldr	r3, [r4, #0]
 80151a2:	78db      	ldrb	r3, [r3, #3]
 80151a4:	b163      	cbz	r3, 80151c0 <smp_pairing_random+0x34>
	switch (smp->method) {
 80151a6:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 80151aa:	2b05      	cmp	r3, #5
 80151ac:	f200 8144 	bhi.w	8015438 <smp_pairing_random+0x2ac>
 80151b0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80151b4:	00ce00ab 	.word	0x00ce00ab
 80151b8:	008900ce 	.word	0x008900ce
 80151bc:	01130142 	.word	0x01130142
		err = sc_smp_check_confirm(smp);
 80151c0:	4620      	mov	r0, r4
 80151c2:	f7ff fce3 	bl	8014b8c <sc_smp_check_confirm>
		if (err) {
 80151c6:	4605      	mov	r5, r0
 80151c8:	2800      	cmp	r0, #0
 80151ca:	f040 80be 	bne.w	801534a <smp_pairing_random+0x1be>
		switch (smp->method) {
 80151ce:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 80151d2:	2b05      	cmp	r3, #5
 80151d4:	f200 812e 	bhi.w	8015434 <smp_pairing_random+0x2a8>
 80151d8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80151dc:	0035003d 	.word	0x0035003d
 80151e0:	00060035 	.word	0x00060035
 80151e4:	003d012c 	.word	0x003d012c
			if (smp_g2(sc_public_key, smp->pkey, smp->prnd,
 80151e8:	ab03      	add	r3, sp, #12
 80151ea:	9300      	str	r3, [sp, #0]
 80151ec:	4633      	mov	r3, r6
 80151ee:	f104 02df 	add.w	r2, r4, #223	; 0xdf
 80151f2:	f204 110f 	addw	r1, r4, #271	; 0x10f
 80151f6:	4895      	ldr	r0, [pc, #596]	; (801544c <smp_pairing_random+0x2c0>)
 80151f8:	6800      	ldr	r0, [r0, #0]
 80151fa:	f7ff fd9f 	bl	8014d3c <smp_g2>
 80151fe:	b108      	cbz	r0, 8015204 <smp_pairing_random+0x78>
				return BT_SMP_ERR_UNSPECIFIED;
 8015200:	2508      	movs	r5, #8
 8015202:	e0a2      	b.n	801534a <smp_pairing_random+0x1be>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
 8015204:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
 8015208:	f3bf 8f5b 	dmb	ish
 801520c:	e853 2f00 	ldrex	r2, [r3]
 8015210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015214:	e843 2100 	strex	r1, r2, [r3]
 8015218:	2900      	cmp	r1, #0
 801521a:	d1f7      	bne.n	801520c <smp_pairing_random+0x80>
 801521c:	f3bf 8f5b 	dmb	ish
 8015220:	f3bf 8f5b 	dmb	ish
 8015224:	e853 2f00 	ldrex	r2, [r3]
 8015228:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801522c:	e843 2100 	strex	r1, r2, [r3]
 8015230:	2900      	cmp	r1, #0
 8015232:	d1f7      	bne.n	8015224 <smp_pairing_random+0x98>
 8015234:	f3bf 8f5b 	dmb	ish
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
 8015238:	4b85      	ldr	r3, [pc, #532]	; (8015450 <smp_pairing_random+0x2c4>)
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	68db      	ldr	r3, [r3, #12]
 801523e:	9903      	ldr	r1, [sp, #12]
 8015240:	6820      	ldr	r0, [r4, #0]
 8015242:	4798      	blx	r3
			return 0;
 8015244:	e081      	b.n	801534a <smp_pairing_random+0x1be>
			smp->passkey_round++;
 8015246:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
 801524a:	3301      	adds	r3, #1
 801524c:	b2db      	uxtb	r3, r3
 801524e:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194
			if (smp->passkey_round == 20U) {
 8015252:	2b14      	cmp	r3, #20
 8015254:	d117      	bne.n	8015286 <smp_pairing_random+0xfa>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
 8015256:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 801525a:	f3bf 8f5b 	dmb	ish
 801525e:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
 8015262:	f3bf 8f5b 	dmb	ish
 8015266:	f012 0f80 	tst.w	r2, #128	; 0x80
 801526a:	d027      	beq.n	80152bc <smp_pairing_random+0x130>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 801526c:	f3bf 8f5b 	dmb	ish
 8015270:	e853 2f00 	ldrex	r2, [r3]
 8015274:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015278:	e843 2100 	strex	r1, r2, [r3]
 801527c:	2900      	cmp	r1, #0
 801527e:	d1f7      	bne.n	8015270 <smp_pairing_random+0xe4>
 8015280:	f3bf 8f5b 	dmb	ish
			return 0;
 8015284:	e061      	b.n	801534a <smp_pairing_random+0x1be>
			if (bt_rand(smp->prnd, 16)) {
 8015286:	2110      	movs	r1, #16
 8015288:	f104 00df 	add.w	r0, r4, #223	; 0xdf
 801528c:	f7fa fd66 	bl	800fd5c <bt_rand>
 8015290:	b108      	cbz	r0, 8015296 <smp_pairing_random+0x10a>
				return BT_SMP_ERR_UNSPECIFIED;
 8015292:	2508      	movs	r5, #8
 8015294:	e059      	b.n	801534a <smp_pairing_random+0x1be>
			atomic_set_bit(&smp->allowed_cmds,
 8015296:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
 801529a:	f3bf 8f5b 	dmb	ish
 801529e:	e853 2f00 	ldrex	r2, [r3]
 80152a2:	f042 0208 	orr.w	r2, r2, #8
 80152a6:	e843 2100 	strex	r1, r2, [r3]
 80152aa:	2900      	cmp	r1, #0
 80152ac:	d1f7      	bne.n	801529e <smp_pairing_random+0x112>
 80152ae:	f3bf 8f5b 	dmb	ish
			return smp_send_pairing_confirm(smp);
 80152b2:	4620      	mov	r0, r4
 80152b4:	f7ff fdb0 	bl	8014e18 <smp_send_pairing_confirm>
 80152b8:	4605      	mov	r5, r0
 80152ba:	e046      	b.n	801534a <smp_pairing_random+0x1be>
		return compute_and_send_master_dhcheck(smp);
 80152bc:	4620      	mov	r0, r4
 80152be:	f00a fa4e 	bl	801f75e <compute_and_send_master_dhcheck>
 80152c2:	4605      	mov	r5, r0
 80152c4:	e041      	b.n	801534a <smp_pairing_random+0x1be>
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
 80152c6:	ab03      	add	r3, sp, #12
 80152c8:	9300      	str	r3, [sp, #0]
 80152ca:	f104 03df 	add.w	r3, r4, #223	; 0xdf
 80152ce:	4632      	mov	r2, r6
 80152d0:	495e      	ldr	r1, [pc, #376]	; (801544c <smp_pairing_random+0x2c0>)
 80152d2:	6809      	ldr	r1, [r1, #0]
 80152d4:	f204 100f 	addw	r0, r4, #271	; 0x10f
 80152d8:	f7ff fd30 	bl	8014d3c <smp_g2>
 80152dc:	2800      	cmp	r0, #0
 80152de:	f040 80ad 	bne.w	801543c <smp_pairing_random+0x2b0>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
 80152e2:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
 80152e6:	f3bf 8f5b 	dmb	ish
 80152ea:	e853 2f00 	ldrex	r2, [r3]
 80152ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80152f2:	e843 2100 	strex	r1, r2, [r3]
 80152f6:	2900      	cmp	r1, #0
 80152f8:	d1f7      	bne.n	80152ea <smp_pairing_random+0x15e>
 80152fa:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
 80152fe:	4b54      	ldr	r3, [pc, #336]	; (8015450 <smp_pairing_random+0x2c4>)
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	68db      	ldr	r3, [r3, #12]
 8015304:	9903      	ldr	r1, [sp, #12]
 8015306:	6820      	ldr	r0, [r4, #0]
 8015308:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
 801530a:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
 801530e:	f3bf 8f5b 	dmb	ish
 8015312:	e853 2f00 	ldrex	r2, [r3]
 8015316:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801531a:	e843 2100 	strex	r1, r2, [r3]
 801531e:	2900      	cmp	r1, #0
 8015320:	d1f7      	bne.n	8015312 <smp_pairing_random+0x186>
 8015322:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
 8015326:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
 801532a:	f3bf 8f5b 	dmb	ish
 801532e:	e853 2f00 	ldrex	r2, [r3]
 8015332:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8015336:	e843 2100 	strex	r1, r2, [r3]
 801533a:	2900      	cmp	r1, #0
 801533c:	d1f7      	bne.n	801532e <smp_pairing_random+0x1a2>
 801533e:	f3bf 8f5b 	dmb	ish
	return smp_send_pairing_random(smp);
 8015342:	4620      	mov	r0, r4
 8015344:	f00a fb06 	bl	801f954 <smp_send_pairing_random>
 8015348:	4605      	mov	r5, r0
}
 801534a:	4628      	mov	r0, r5
 801534c:	b004      	add	sp, #16
 801534e:	bd70      	pop	{r4, r5, r6, pc}
		err = sc_smp_check_confirm(smp);
 8015350:	4620      	mov	r0, r4
 8015352:	f7ff fc1b 	bl	8014b8c <sc_smp_check_confirm>
		if (err) {
 8015356:	4605      	mov	r5, r0
 8015358:	2800      	cmp	r0, #0
 801535a:	d1f6      	bne.n	801534a <smp_pairing_random+0x1be>
		atomic_set_bit(&smp->allowed_cmds,
 801535c:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
 8015360:	f3bf 8f5b 	dmb	ish
 8015364:	e856 3f00 	ldrex	r3, [r6]
 8015368:	f043 0308 	orr.w	r3, r3, #8
 801536c:	e846 3200 	strex	r2, r3, [r6]
 8015370:	2a00      	cmp	r2, #0
 8015372:	d1f7      	bne.n	8015364 <smp_pairing_random+0x1d8>
 8015374:	f3bf 8f5b 	dmb	ish
		err = smp_send_pairing_random(smp);
 8015378:	4620      	mov	r0, r4
 801537a:	f00a faeb 	bl	801f954 <smp_send_pairing_random>
		if (err) {
 801537e:	4605      	mov	r5, r0
 8015380:	2800      	cmp	r0, #0
 8015382:	d1e2      	bne.n	801534a <smp_pairing_random+0x1be>
		smp->passkey_round++;
 8015384:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
 8015388:	3301      	adds	r3, #1
 801538a:	b2db      	uxtb	r3, r3
 801538c:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194
		if (smp->passkey_round == 20U) {
 8015390:	2b14      	cmp	r3, #20
 8015392:	d008      	beq.n	80153a6 <smp_pairing_random+0x21a>
		if (bt_rand(smp->prnd, 16)) {
 8015394:	2110      	movs	r1, #16
 8015396:	f104 00df 	add.w	r0, r4, #223	; 0xdf
 801539a:	f7fa fcdf 	bl	800fd5c <bt_rand>
 801539e:	2800      	cmp	r0, #0
 80153a0:	d0d3      	beq.n	801534a <smp_pairing_random+0x1be>
			return BT_SMP_ERR_UNSPECIFIED;
 80153a2:	2508      	movs	r5, #8
 80153a4:	e7d1      	b.n	801534a <smp_pairing_random+0x1be>
 80153a6:	f3bf 8f5b 	dmb	ish
 80153aa:	e856 3f00 	ldrex	r3, [r6]
 80153ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80153b2:	e846 3200 	strex	r2, r3, [r6]
 80153b6:	2a00      	cmp	r2, #0
 80153b8:	d1f7      	bne.n	80153aa <smp_pairing_random+0x21e>
 80153ba:	f3bf 8f5b 	dmb	ish
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
 80153be:	34bc      	adds	r4, #188	; 0xbc
 80153c0:	f3bf 8f5b 	dmb	ish
 80153c4:	e854 3f00 	ldrex	r3, [r4]
 80153c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80153cc:	e844 3200 	strex	r2, r3, [r4]
 80153d0:	2a00      	cmp	r2, #0
 80153d2:	d1f7      	bne.n	80153c4 <smp_pairing_random+0x238>
 80153d4:	f3bf 8f5b 	dmb	ish
			return 0;
 80153d8:	e7b7      	b.n	801534a <smp_pairing_random+0x1be>
		if (bt_rand(smp->prnd, 16)) {
 80153da:	2110      	movs	r1, #16
 80153dc:	f104 00df 	add.w	r0, r4, #223	; 0xdf
 80153e0:	f7fa fcbc 	bl	800fd5c <bt_rand>
 80153e4:	bb60      	cbnz	r0, 8015440 <smp_pairing_random+0x2b4>
		if (bt_auth && bt_auth->oob_data_request) {
 80153e6:	4b1a      	ldr	r3, [pc, #104]	; (8015450 <smp_pairing_random+0x2c4>)
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	b35b      	cbz	r3, 8015444 <smp_pairing_random+0x2b8>
 80153ec:	691b      	ldr	r3, [r3, #16]
 80153ee:	b35b      	cbz	r3, 8015448 <smp_pairing_random+0x2bc>
			struct bt_conn_oob_info info = {
 80153f0:	4b18      	ldr	r3, [pc, #96]	; (8015454 <smp_pairing_random+0x2c8>)
 80153f2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80153f4:	f8ad 3008 	strh.w	r3, [sp, #8]
			le_sc_oob_config_set(smp, &info);
 80153f8:	a902      	add	r1, sp, #8
 80153fa:	4620      	mov	r0, r4
 80153fc:	f00a f80f 	bl	801f41e <le_sc_oob_config_set>
			smp->oobd_local = NULL;
 8015400:	2500      	movs	r5, #0
 8015402:	f8c4 5198 	str.w	r5, [r4, #408]	; 0x198
			smp->oobd_remote = NULL;
 8015406:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
 801540a:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
 801540e:	f3bf 8f5b 	dmb	ish
 8015412:	e853 2f00 	ldrex	r2, [r3]
 8015416:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801541a:	e843 2100 	strex	r1, r2, [r3]
 801541e:	2900      	cmp	r1, #0
 8015420:	d1f7      	bne.n	8015412 <smp_pairing_random+0x286>
 8015422:	f3bf 8f5b 	dmb	ish
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
 8015426:	4b0a      	ldr	r3, [pc, #40]	; (8015450 <smp_pairing_random+0x2c4>)
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	691b      	ldr	r3, [r3, #16]
 801542c:	a902      	add	r1, sp, #8
 801542e:	6820      	ldr	r0, [r4, #0]
 8015430:	4798      	blx	r3
			return 0;
 8015432:	e78a      	b.n	801534a <smp_pairing_random+0x1be>
		switch (smp->method) {
 8015434:	2508      	movs	r5, #8
 8015436:	e788      	b.n	801534a <smp_pairing_random+0x1be>
	switch (smp->method) {
 8015438:	2508      	movs	r5, #8
 801543a:	e786      	b.n	801534a <smp_pairing_random+0x1be>
			return BT_SMP_ERR_UNSPECIFIED;
 801543c:	2508      	movs	r5, #8
 801543e:	e784      	b.n	801534a <smp_pairing_random+0x1be>
			return BT_SMP_ERR_UNSPECIFIED;
 8015440:	2508      	movs	r5, #8
 8015442:	e782      	b.n	801534a <smp_pairing_random+0x1be>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
 8015444:	2502      	movs	r5, #2
 8015446:	e780      	b.n	801534a <smp_pairing_random+0x1be>
 8015448:	2502      	movs	r5, #2
 801544a:	e77e      	b.n	801534a <smp_pairing_random+0x1be>
 801544c:	2000447c 	.word	0x2000447c
 8015450:	2000417c 	.word	0x2000417c
 8015454:	08022d68 	.word	0x08022d68

08015458 <smp_pairing_rsp>:
{
 8015458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
 801545a:	6806      	ldr	r6, [r0, #0]
	struct bt_smp_pairing *rsp = (void *)buf->data;
 801545c:	688d      	ldr	r5, [r1, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
 801545e:	78eb      	ldrb	r3, [r5, #3]
 8015460:	3b07      	subs	r3, #7
 8015462:	b2db      	uxtb	r3, r3
 8015464:	2b09      	cmp	r3, #9
 8015466:	f200 80e3 	bhi.w	8015630 <smp_pairing_rsp+0x1d8>
 801546a:	4604      	mov	r4, r0
	smp->local_dist &= rsp->init_key_dist;
 801546c:	792b      	ldrb	r3, [r5, #4]
 801546e:	f890 21a0 	ldrb.w	r2, [r0, #416]	; 0x1a0
 8015472:	4013      	ands	r3, r2
 8015474:	f880 31a0 	strb.w	r3, [r0, #416]	; 0x1a0
	smp->remote_dist &= rsp->resp_key_dist;
 8015478:	796b      	ldrb	r3, [r5, #5]
 801547a:	f890 21a1 	ldrb.w	r2, [r0, #417]	; 0x1a1
 801547e:	4013      	ands	r3, r2
 8015480:	f880 31a1 	strb.w	r3, [r0, #417]	; 0x1a1
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
 8015484:	2302      	movs	r3, #2
 8015486:	f880 30c8 	strb.w	r3, [r0, #200]	; 0xc8
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
 801548a:	2206      	movs	r2, #6
 801548c:	4629      	mov	r1, r5
 801548e:	30c9      	adds	r0, #201	; 0xc9
 8015490:	f007 fa0d 	bl	801c8ae <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
 8015494:	78ab      	ldrb	r3, [r5, #2]
 8015496:	f013 0f08 	tst.w	r3, #8
 801549a:	d012      	beq.n	80154c2 <smp_pairing_rsp+0x6a>
	    (req->auth_req & BT_SMP_AUTH_SC)) {
 801549c:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
 80154a0:	f013 0f08 	tst.w	r3, #8
 80154a4:	d00d      	beq.n	80154c2 <smp_pairing_rsp+0x6a>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
 80154a6:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
 80154aa:	f3bf 8f5b 	dmb	ish
 80154ae:	e853 2f00 	ldrex	r2, [r3]
 80154b2:	f042 0220 	orr.w	r2, r2, #32
 80154b6:	e843 2100 	strex	r1, r2, [r3]
 80154ba:	2900      	cmp	r1, #0
 80154bc:	d1f7      	bne.n	80154ae <smp_pairing_rsp+0x56>
 80154be:	f3bf 8f5b 	dmb	ish
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
 80154c2:	78ab      	ldrb	r3, [r5, #2]
 80154c4:	f013 0f20 	tst.w	r3, #32
 80154c8:	d012      	beq.n	80154f0 <smp_pairing_rsp+0x98>
	    (req->auth_req & BT_SMP_AUTH_CT2)) {
 80154ca:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
 80154ce:	f013 0f20 	tst.w	r3, #32
 80154d2:	d00d      	beq.n	80154f0 <smp_pairing_rsp+0x98>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
 80154d4:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
 80154d8:	f3bf 8f5b 	dmb	ish
 80154dc:	e853 2f00 	ldrex	r2, [r3]
 80154e0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80154e4:	e843 2100 	strex	r1, r2, [r3]
 80154e8:	2900      	cmp	r1, #0
 80154ea:	d1f7      	bne.n	80154dc <smp_pairing_rsp+0x84>
 80154ec:	f3bf 8f5b 	dmb	ish
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
 80154f0:	78ab      	ldrb	r3, [r5, #2]
 80154f2:	f013 0f01 	tst.w	r3, #1
 80154f6:	d012      	beq.n	801551e <smp_pairing_rsp+0xc6>
	    (req->auth_req & BT_SMP_AUTH_BONDING)) {
 80154f8:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
 80154fc:	f013 0f01 	tst.w	r3, #1
 8015500:	d00d      	beq.n	801551e <smp_pairing_rsp+0xc6>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
 8015502:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
 8015506:	f3bf 8f5b 	dmb	ish
 801550a:	e853 2f00 	ldrex	r2, [r3]
 801550e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8015512:	e843 2100 	strex	r1, r2, [r3]
 8015516:	2900      	cmp	r1, #0
 8015518:	d1f7      	bne.n	801550a <smp_pairing_rsp+0xb2>
 801551a:	f3bf 8f5b 	dmb	ish
	smp->method = get_pair_method(smp, rsp->io_capability);
 801551e:	7829      	ldrb	r1, [r5, #0]
 8015520:	4620      	mov	r0, r4
 8015522:	f7ff fa39 	bl	8014998 <get_pair_method>
 8015526:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	if (!update_keys_check(smp)) {
 801552a:	4620      	mov	r0, r4
 801552c:	f00a fbca 	bl	801fcc4 <update_keys_check>
 8015530:	2800      	cmp	r0, #0
 8015532:	d07f      	beq.n	8015634 <smp_pairing_rsp+0x1dc>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
 8015534:	f104 07bc 	add.w	r7, r4, #188	; 0xbc
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8015538:	f3bf 8f5b 	dmb	ish
 801553c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8015540:	f3bf 8f5b 	dmb	ish
 8015544:	f013 0f20 	tst.w	r3, #32
 8015548:	d076      	beq.n	8015638 <smp_pairing_rsp+0x1e0>
	     conn->required_sec_level == BT_SECURITY_L4) &&
 801554a:	7ab3      	ldrb	r3, [r6, #10]
	if ((IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) ||
 801554c:	2b04      	cmp	r3, #4
 801554e:	d039      	beq.n	80155c4 <smp_pairing_rsp+0x16c>
	if ((IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) ||
 8015550:	2b04      	cmp	r3, #4
 8015552:	d104      	bne.n	801555e <smp_pairing_rsp+0x106>
	     get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
 8015554:	4620      	mov	r0, r4
 8015556:	f009 ff4b 	bl	801f3f0 <get_encryption_key_size>
	     conn->required_sec_level == BT_SECURITY_L4) &&
 801555a:	2810      	cmp	r0, #16
 801555c:	d16e      	bne.n	801563c <smp_pairing_rsp+0x1e4>
	smp->local_dist &= SEND_KEYS_SC;
 801555e:	2300      	movs	r3, #0
 8015560:	f884 31a0 	strb.w	r3, [r4, #416]	; 0x1a0
	smp->remote_dist &= RECV_KEYS_SC;
 8015564:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
 8015568:	f003 0302 	and.w	r3, r3, #2
 801556c:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
		err = smp_pairing_accept_query(smp->chan.chan.conn, rsp);
 8015570:	4629      	mov	r1, r5
 8015572:	6820      	ldr	r0, [r4, #0]
 8015574:	f7ff fa38 	bl	80149e8 <smp_pairing_accept_query>
		if (err) {
 8015578:	bb18      	cbnz	r0, 80155c2 <smp_pairing_rsp+0x16a>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
 801557a:	f894 50c0 	ldrb.w	r5, [r4, #192]	; 0xc0
 801557e:	b33d      	cbz	r5, 80155d0 <smp_pairing_rsp+0x178>
	if (!sc_public_key) {
 8015580:	4b2f      	ldr	r3, [pc, #188]	; (8015640 <smp_pairing_rsp+0x1e8>)
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	2b00      	cmp	r3, #0
 8015586:	d046      	beq.n	8015616 <smp_pairing_rsp+0x1be>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
 8015588:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 801558c:	f3bf 8f5b 	dmb	ish
 8015590:	e853 2f00 	ldrex	r2, [r3]
 8015594:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8015598:	e843 2100 	strex	r1, r2, [r3]
 801559c:	2900      	cmp	r1, #0
 801559e:	d1f7      	bne.n	8015590 <smp_pairing_rsp+0x138>
 80155a0:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 80155a4:	f3bf 8f5b 	dmb	ish
 80155a8:	e853 2f00 	ldrex	r2, [r3]
 80155ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80155b0:	e843 2100 	strex	r1, r2, [r3]
 80155b4:	2900      	cmp	r1, #0
 80155b6:	d1f7      	bne.n	80155a8 <smp_pairing_rsp+0x150>
 80155b8:	f3bf 8f5b 	dmb	ish
	return sc_send_public_key(smp);
 80155bc:	4620      	mov	r0, r4
 80155be:	f7ff fc7d 	bl	8014ebc <sc_send_public_key>
}
 80155c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	     smp->method == JUST_WORKS) {
 80155c4:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
	     conn->required_sec_level == BT_SECURITY_L4) &&
 80155c8:	2a00      	cmp	r2, #0
 80155ca:	d1c1      	bne.n	8015550 <smp_pairing_rsp+0xf8>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
 80155cc:	2003      	movs	r0, #3
 80155ce:	e7f8      	b.n	80155c2 <smp_pairing_rsp+0x16a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80155d0:	f3bf 8f5b 	dmb	ish
 80155d4:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 80155d8:	f3bf 8f5b 	dmb	ish
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
 80155dc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80155e0:	d0ce      	beq.n	8015580 <smp_pairing_rsp+0x128>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
 80155e2:	4b18      	ldr	r3, [pc, #96]	; (8015644 <smp_pairing_rsp+0x1ec>)
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d0ca      	beq.n	8015580 <smp_pairing_rsp+0x128>
	    bt_auth && bt_auth->pairing_confirm) {
 80155ea:	699b      	ldr	r3, [r3, #24]
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d0c7      	beq.n	8015580 <smp_pairing_rsp+0x128>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 80155f0:	f3bf 8f5b 	dmb	ish
 80155f4:	e857 3f00 	ldrex	r3, [r7]
 80155f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80155fc:	e847 3200 	strex	r2, r3, [r7]
 8015600:	2a00      	cmp	r2, #0
 8015602:	d1f7      	bne.n	80155f4 <smp_pairing_rsp+0x19c>
 8015604:	f3bf 8f5b 	dmb	ish
		bt_auth->pairing_confirm(smp->chan.chan.conn);
 8015608:	4b0e      	ldr	r3, [pc, #56]	; (8015644 <smp_pairing_rsp+0x1ec>)
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	699b      	ldr	r3, [r3, #24]
 801560e:	6820      	ldr	r0, [r4, #0]
 8015610:	4798      	blx	r3
		return 0;
 8015612:	4628      	mov	r0, r5
 8015614:	e7d5      	b.n	80155c2 <smp_pairing_rsp+0x16a>
 8015616:	f3bf 8f5b 	dmb	ish
 801561a:	e857 3f00 	ldrex	r3, [r7]
 801561e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015622:	e847 3200 	strex	r2, r3, [r7]
 8015626:	2a00      	cmp	r2, #0
 8015628:	d1f7      	bne.n	801561a <smp_pairing_rsp+0x1c2>
 801562a:	f3bf 8f5b 	dmb	ish
		return 0;
 801562e:	e7c8      	b.n	80155c2 <smp_pairing_rsp+0x16a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
 8015630:	2006      	movs	r0, #6
 8015632:	e7c6      	b.n	80155c2 <smp_pairing_rsp+0x16a>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
 8015634:	2003      	movs	r0, #3
 8015636:	e7c4      	b.n	80155c2 <smp_pairing_rsp+0x16a>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
 8015638:	2003      	movs	r0, #3
 801563a:	e7c2      	b.n	80155c2 <smp_pairing_rsp+0x16a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
 801563c:	2006      	movs	r0, #6
 801563e:	e7c0      	b.n	80155c2 <smp_pairing_rsp+0x16a>
 8015640:	2000447c 	.word	0x2000447c
 8015644:	2000417c 	.word	0x2000417c

08015648 <smp_init>:
{
 8015648:	b538      	push	{r3, r4, r5, lr}
 801564a:	4604      	mov	r4, r0
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
 801564c:	22f0      	movs	r2, #240	; 0xf0
 801564e:	2100      	movs	r1, #0
 8015650:	30b8      	adds	r0, #184	; 0xb8
 8015652:	f007 f951 	bl	801c8f8 <memset>
	if (bt_rand(smp->prnd, 16)) {
 8015656:	2110      	movs	r1, #16
 8015658:	f104 00df 	add.w	r0, r4, #223	; 0xdf
 801565c:	f7fa fb7e 	bl	800fd5c <bt_rand>
 8015660:	b998      	cbnz	r0, 801568a <smp_init+0x42>
 8015662:	4605      	mov	r5, r0
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
 8015664:	34b8      	adds	r4, #184	; 0xb8
 8015666:	f3bf 8f5b 	dmb	ish
 801566a:	e854 3f00 	ldrex	r3, [r4]
 801566e:	f043 0320 	orr.w	r3, r3, #32
 8015672:	e844 3200 	strex	r2, r3, [r4]
 8015676:	2a00      	cmp	r2, #0
 8015678:	d1f7      	bne.n	801566a <smp_init+0x22>
 801567a:	f3bf 8f5b 	dmb	ish
	sc_public_key = bt_pub_key_get();
 801567e:	f7fa fa87 	bl	800fb90 <bt_pub_key_get>
 8015682:	4b03      	ldr	r3, [pc, #12]	; (8015690 <smp_init+0x48>)
 8015684:	6018      	str	r0, [r3, #0]
}
 8015686:	4628      	mov	r0, r5
 8015688:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
 801568a:	2508      	movs	r5, #8
 801568c:	e7fb      	b.n	8015686 <smp_init+0x3e>
 801568e:	bf00      	nop
 8015690:	2000447c 	.word	0x2000447c

08015694 <smp_send_pairing_req>:
{
 8015694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015698:	4606      	mov	r6, r0
	smp = smp_chan_get(conn);
 801569a:	f7ff fa29 	bl	8014af0 <smp_chan_get>
	if (!smp) {
 801569e:	2800      	cmp	r0, #0
 80156a0:	f000 8093 	beq.w	80157ca <smp_send_pairing_req+0x136>
 80156a4:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
 80156a6:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80156aa:	f3bf 8f5b 	dmb	ish
 80156ae:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 80156b2:	f3bf 8f5b 	dmb	ish
 80156b6:	f013 0f10 	tst.w	r3, #16
 80156ba:	f040 8089 	bne.w	80157d0 <smp_send_pairing_req+0x13c>
 80156be:	f3bf 8f5b 	dmb	ish
 80156c2:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 80156c6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
 80156ca:	f013 0f08 	tst.w	r3, #8
 80156ce:	f040 8082 	bne.w	80157d6 <smp_send_pairing_req+0x142>
 80156d2:	f3bf 8f5b 	dmb	ish
 80156d6:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 80156da:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
 80156de:	f013 0f02 	tst.w	r3, #2
 80156e2:	d17b      	bne.n	80157dc <smp_send_pairing_req+0x148>
	if (!sec_level_reachable(conn)) {
 80156e4:	4630      	mov	r0, r6
 80156e6:	f7ff f9c7 	bl	8014a78 <sec_level_reachable>
 80156ea:	2800      	cmp	r0, #0
 80156ec:	d079      	beq.n	80157e2 <smp_send_pairing_req+0x14e>
	if (!conn->le.keys) {
 80156ee:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d05d      	beq.n	80157b2 <smp_send_pairing_req+0x11e>
	if (smp_init(smp)) {
 80156f6:	4620      	mov	r0, r4
 80156f8:	f7ff ffa6 	bl	8015648 <smp_init>
 80156fc:	4680      	mov	r8, r0
 80156fe:	2800      	cmp	r0, #0
 8015700:	d172      	bne.n	80157e8 <smp_send_pairing_req+0x154>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
 8015702:	2206      	movs	r2, #6
 8015704:	2101      	movs	r1, #1
 8015706:	4620      	mov	r0, r4
 8015708:	f7ff fa12 	bl	8014b30 <smp_create_pdu>
	if (!req_buf) {
 801570c:	4681      	mov	r9, r0
 801570e:	2800      	cmp	r0, #0
 8015710:	d06d      	beq.n	80157ee <smp_send_pairing_req+0x15a>
	req = net_buf_add(req_buf, sizeof(*req));
 8015712:	2106      	movs	r1, #6
 8015714:	3008      	adds	r0, #8
 8015716:	f00a feb1 	bl	802047c <net_buf_simple_add>
 801571a:	4605      	mov	r5, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
 801571c:	2109      	movs	r1, #9
 801571e:	4630      	mov	r0, r6
 8015720:	f7ff f98a 	bl	8014a38 <get_auth>
 8015724:	70a8      	strb	r0, [r5, #2]
	req->io_capability = get_io_capa();
 8015726:	f7ff f90f 	bl	8014948 <get_io_capa>
 801572a:	7028      	strb	r0, [r5, #0]
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
 801572c:	4b31      	ldr	r3, [pc, #196]	; (80157f4 <smp_send_pairing_req+0x160>)
 801572e:	781b      	ldrb	r3, [r3, #0]
 8015730:	706b      	strb	r3, [r5, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
 8015732:	2310      	movs	r3, #16
 8015734:	70eb      	strb	r3, [r5, #3]
	req->init_key_dist = SEND_KEYS;
 8015736:	2301      	movs	r3, #1
 8015738:	712b      	strb	r3, [r5, #4]
	req->resp_key_dist = RECV_KEYS;
 801573a:	2203      	movs	r2, #3
 801573c:	716a      	strb	r2, [r5, #5]
	smp->local_dist = SEND_KEYS;
 801573e:	f884 31a0 	strb.w	r3, [r4, #416]	; 0x1a0
	smp->remote_dist = RECV_KEYS;
 8015742:	f884 21a1 	strb.w	r2, [r4, #417]	; 0x1a1
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
 8015746:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	memcpy(smp->preq + 1, req, sizeof(*req));
 801574a:	2206      	movs	r2, #6
 801574c:	4629      	mov	r1, r5
 801574e:	f104 00c2 	add.w	r0, r4, #194	; 0xc2
 8015752:	f007 f8ac 	bl	801c8ae <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
 8015756:	2300      	movs	r3, #0
 8015758:	461a      	mov	r2, r3
 801575a:	4649      	mov	r1, r9
 801575c:	4620      	mov	r0, r4
 801575e:	f7ff fb43 	bl	8014de8 <smp_send>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
 8015762:	34b8      	adds	r4, #184	; 0xb8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8015764:	f3bf 8f5b 	dmb	ish
 8015768:	e854 3f00 	ldrex	r3, [r4]
 801576c:	f043 0304 	orr.w	r3, r3, #4
 8015770:	e844 3200 	strex	r2, r3, [r4]
 8015774:	2a00      	cmp	r2, #0
 8015776:	d1f7      	bne.n	8015768 <smp_send_pairing_req+0xd4>
 8015778:	f3bf 8f5b 	dmb	ish
 801577c:	f3bf 8f5b 	dmb	ish
 8015780:	e854 3f00 	ldrex	r3, [r4]
 8015784:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015788:	e844 3200 	strex	r2, r3, [r4]
 801578c:	2a00      	cmp	r2, #0
 801578e:	d1f7      	bne.n	8015780 <smp_send_pairing_req+0xec>
 8015790:	f3bf 8f5b 	dmb	ish
 8015794:	f3bf 8f5b 	dmb	ish
 8015798:	e857 3f00 	ldrex	r3, [r7]
 801579c:	f043 0308 	orr.w	r3, r3, #8
 80157a0:	e847 3200 	strex	r2, r3, [r7]
 80157a4:	2a00      	cmp	r2, #0
 80157a6:	d1f7      	bne.n	8015798 <smp_send_pairing_req+0x104>
 80157a8:	f3bf 8f5b 	dmb	ish
}
 80157ac:	4640      	mov	r0, r8
 80157ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
 80157b2:	f106 0188 	add.w	r1, r6, #136	; 0x88
 80157b6:	7a30      	ldrb	r0, [r6, #8]
 80157b8:	f000 ff58 	bl	801666c <bt_keys_get_addr>
 80157bc:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
		if (!conn->le.keys) {
 80157c0:	2800      	cmp	r0, #0
 80157c2:	d198      	bne.n	80156f6 <smp_send_pairing_req+0x62>
			return -ENOMEM;
 80157c4:	f06f 080b 	mvn.w	r8, #11
 80157c8:	e7f0      	b.n	80157ac <smp_send_pairing_req+0x118>
		return -ENOTCONN;
 80157ca:	f06f 0838 	mvn.w	r8, #56	; 0x38
 80157ce:	e7ed      	b.n	80157ac <smp_send_pairing_req+0x118>
		return -EIO;
 80157d0:	f06f 0804 	mvn.w	r8, #4
 80157d4:	e7ea      	b.n	80157ac <smp_send_pairing_req+0x118>
		return -EBUSY;
 80157d6:	f06f 080f 	mvn.w	r8, #15
 80157da:	e7e7      	b.n	80157ac <smp_send_pairing_req+0x118>
		return -EBUSY;
 80157dc:	f06f 080f 	mvn.w	r8, #15
 80157e0:	e7e4      	b.n	80157ac <smp_send_pairing_req+0x118>
		return -EINVAL;
 80157e2:	f06f 0815 	mvn.w	r8, #21
 80157e6:	e7e1      	b.n	80157ac <smp_send_pairing_req+0x118>
		return -ENOBUFS;
 80157e8:	f06f 0836 	mvn.w	r8, #54	; 0x36
 80157ec:	e7de      	b.n	80157ac <smp_send_pairing_req+0x118>
		return -ENOBUFS;
 80157ee:	f06f 0836 	mvn.w	r8, #54	; 0x36
 80157f2:	e7db      	b.n	80157ac <smp_send_pairing_req+0x118>
 80157f4:	2000596e 	.word	0x2000596e

080157f8 <smp_pairing_req>:
{
 80157f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
 80157fc:	6806      	ldr	r6, [r0, #0]
	struct bt_smp_pairing *req = (void *)buf->data;
 80157fe:	688d      	ldr	r5, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
 8015800:	78eb      	ldrb	r3, [r5, #3]
 8015802:	3b07      	subs	r3, #7
 8015804:	b2db      	uxtb	r3, r3
 8015806:	2b09      	cmp	r3, #9
 8015808:	f200 8109 	bhi.w	8015a1e <smp_pairing_req+0x226>
 801580c:	4604      	mov	r4, r0
	if (!conn->le.keys) {
 801580e:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
 8015812:	2b00      	cmp	r3, #0
 8015814:	f000 80dd 	beq.w	80159d2 <smp_pairing_req+0x1da>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
 8015818:	f104 08bc 	add.w	r8, r4, #188	; 0xbc
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 801581c:	f3bf 8f5b 	dmb	ish
 8015820:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8015824:	f3bf 8f5b 	dmb	ish
 8015828:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 801582c:	d105      	bne.n	801583a <smp_pairing_req+0x42>
		int ret = smp_init(smp);
 801582e:	4620      	mov	r0, r4
 8015830:	f7ff ff0a 	bl	8015648 <smp_init>
		if (ret) {
 8015834:	2800      	cmp	r0, #0
 8015836:	f040 80d8 	bne.w	80159ea <smp_pairing_req+0x1f2>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
 801583a:	2301      	movs	r3, #1
 801583c:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	memcpy(smp->preq + 1, req, sizeof(*req));
 8015840:	2206      	movs	r2, #6
 8015842:	4629      	mov	r1, r5
 8015844:	f104 00c2 	add.w	r0, r4, #194	; 0xc2
 8015848:	f007 f831 	bl	801c8ae <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
 801584c:	2302      	movs	r3, #2
 801584e:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	rsp->auth_req = get_auth(conn, req->auth_req);
 8015852:	78a9      	ldrb	r1, [r5, #2]
 8015854:	4630      	mov	r0, r6
 8015856:	f7ff f8ef 	bl	8014a38 <get_auth>
 801585a:	4607      	mov	r7, r0
 801585c:	f884 00cb 	strb.w	r0, [r4, #203]	; 0xcb
	rsp->io_capability = get_io_capa();
 8015860:	f7ff f872 	bl	8014948 <get_io_capa>
 8015864:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
 8015868:	4b71      	ldr	r3, [pc, #452]	; (8015a30 <smp_pairing_req+0x238>)
 801586a:	781b      	ldrb	r3, [r3, #0]
 801586c:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
 8015870:	2310      	movs	r3, #16
 8015872:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
 8015876:	792b      	ldrb	r3, [r5, #4]
 8015878:	f003 0303 	and.w	r3, r3, #3
 801587c:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
 8015880:	796b      	ldrb	r3, [r5, #5]
 8015882:	f003 0301 	and.w	r3, r3, #1
 8015886:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
 801588a:	f017 0f08 	tst.w	r7, #8
 801588e:	d018      	beq.n	80158c2 <smp_pairing_req+0xca>
	    (req->auth_req & BT_SMP_AUTH_SC)) {
 8015890:	78ab      	ldrb	r3, [r5, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
 8015892:	f013 0f08 	tst.w	r3, #8
 8015896:	d014      	beq.n	80158c2 <smp_pairing_req+0xca>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8015898:	f3bf 8f5b 	dmb	ish
 801589c:	e858 3f00 	ldrex	r3, [r8]
 80158a0:	f043 0320 	orr.w	r3, r3, #32
 80158a4:	e848 3200 	strex	r2, r3, [r8]
 80158a8:	2a00      	cmp	r2, #0
 80158aa:	d1f7      	bne.n	801589c <smp_pairing_req+0xa4>
 80158ac:	f3bf 8f5b 	dmb	ish
		rsp->init_key_dist &= RECV_KEYS_SC;
 80158b0:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
 80158b4:	f003 0302 	and.w	r3, r3, #2
 80158b8:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
		rsp->resp_key_dist &= SEND_KEYS_SC;
 80158bc:	2300      	movs	r3, #0
 80158be:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
 80158c2:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
 80158c6:	f013 0f20 	tst.w	r3, #32
 80158ca:	d00f      	beq.n	80158ec <smp_pairing_req+0xf4>
	    (req->auth_req & BT_SMP_AUTH_CT2)) {
 80158cc:	78ab      	ldrb	r3, [r5, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
 80158ce:	f013 0f20 	tst.w	r3, #32
 80158d2:	d00b      	beq.n	80158ec <smp_pairing_req+0xf4>
 80158d4:	f3bf 8f5b 	dmb	ish
 80158d8:	e858 3f00 	ldrex	r3, [r8]
 80158dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80158e0:	e848 3200 	strex	r2, r3, [r8]
 80158e4:	2a00      	cmp	r2, #0
 80158e6:	d1f7      	bne.n	80158d8 <smp_pairing_req+0xe0>
 80158e8:	f3bf 8f5b 	dmb	ish
	smp->local_dist = rsp->resp_key_dist;
 80158ec:	f894 30ce 	ldrb.w	r3, [r4, #206]	; 0xce
 80158f0:	f884 31a0 	strb.w	r3, [r4, #416]	; 0x1a0
	smp->remote_dist = rsp->init_key_dist;
 80158f4:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
 80158f8:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
 80158fc:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
 8015900:	f013 0f01 	tst.w	r3, #1
 8015904:	d00f      	beq.n	8015926 <smp_pairing_req+0x12e>
	    (req->auth_req & BT_SMP_AUTH_BONDING)) {
 8015906:	78ab      	ldrb	r3, [r5, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
 8015908:	f013 0f01 	tst.w	r3, #1
 801590c:	d00b      	beq.n	8015926 <smp_pairing_req+0x12e>
 801590e:	f3bf 8f5b 	dmb	ish
 8015912:	e858 3f00 	ldrex	r3, [r8]
 8015916:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801591a:	e848 3200 	strex	r2, r3, [r8]
 801591e:	2a00      	cmp	r2, #0
 8015920:	d1f7      	bne.n	8015912 <smp_pairing_req+0x11a>
 8015922:	f3bf 8f5b 	dmb	ish
 8015926:	f3bf 8f5b 	dmb	ish
 801592a:	e858 3f00 	ldrex	r3, [r8]
 801592e:	f043 0308 	orr.w	r3, r3, #8
 8015932:	e848 3200 	strex	r2, r3, [r8]
 8015936:	2a00      	cmp	r2, #0
 8015938:	d1f7      	bne.n	801592a <smp_pairing_req+0x132>
 801593a:	f3bf 8f5b 	dmb	ish
	smp->method = get_pair_method(smp, req->io_capability);
 801593e:	7829      	ldrb	r1, [r5, #0]
 8015940:	4620      	mov	r0, r4
 8015942:	f7ff f829 	bl	8014998 <get_pair_method>
 8015946:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	if (!update_keys_check(smp)) {
 801594a:	4620      	mov	r0, r4
 801594c:	f00a f9ba 	bl	801fcc4 <update_keys_check>
 8015950:	2800      	cmp	r0, #0
 8015952:	d066      	beq.n	8015a22 <smp_pairing_req+0x22a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8015954:	f3bf 8f5b 	dmb	ish
 8015958:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 801595c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
 8015960:	f013 0f20 	tst.w	r3, #32
 8015964:	d05f      	beq.n	8015a26 <smp_pairing_req+0x22e>
	     conn->required_sec_level == BT_SECURITY_L4) &&
 8015966:	7ab3      	ldrb	r3, [r6, #10]
	if ((IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) ||
 8015968:	2b04      	cmp	r3, #4
 801596a:	d040      	beq.n	80159ee <smp_pairing_req+0x1f6>
	if ((IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) ||
 801596c:	2b04      	cmp	r3, #4
 801596e:	d104      	bne.n	801597a <smp_pairing_req+0x182>
	       get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
 8015970:	4620      	mov	r0, r4
 8015972:	f009 fd3d 	bl	801f3f0 <get_encryption_key_size>
	     conn->required_sec_level == BT_SECURITY_L4) &&
 8015976:	2810      	cmp	r0, #16
 8015978:	d157      	bne.n	8015a2a <smp_pairing_req+0x232>
		err = smp_pairing_accept_query(smp->chan.chan.conn, req);
 801597a:	4629      	mov	r1, r5
 801597c:	6820      	ldr	r0, [r4, #0]
 801597e:	f7ff f833 	bl	80149e8 <smp_pairing_accept_query>
		if (err) {
 8015982:	4605      	mov	r5, r0
 8015984:	bb10      	cbnz	r0, 80159cc <smp_pairing_req+0x1d4>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
 8015986:	f894 50c0 	ldrb.w	r5, [r4, #192]	; 0xc0
 801598a:	b96d      	cbnz	r5, 80159a8 <smp_pairing_req+0x1b0>
 801598c:	f3bf 8f5b 	dmb	ish
 8015990:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8015994:	f3bf 8f5b 	dmb	ish
 8015998:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 801599c:	d104      	bne.n	80159a8 <smp_pairing_req+0x1b0>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
 801599e:	4b25      	ldr	r3, [pc, #148]	; (8015a34 <smp_pairing_req+0x23c>)
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	b10b      	cbz	r3, 80159a8 <smp_pairing_req+0x1b0>
	    bt_auth && bt_auth->pairing_confirm) {
 80159a4:	699b      	ldr	r3, [r3, #24]
 80159a6:	bb43      	cbnz	r3, 80159fa <smp_pairing_req+0x202>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
 80159a8:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 80159ac:	f3bf 8f5b 	dmb	ish
 80159b0:	e853 2f00 	ldrex	r2, [r3]
 80159b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80159b8:	e843 2100 	strex	r1, r2, [r3]
 80159bc:	2900      	cmp	r1, #0
 80159be:	d1f7      	bne.n	80159b0 <smp_pairing_req+0x1b8>
 80159c0:	f3bf 8f5b 	dmb	ish
	return send_pairing_rsp(smp);
 80159c4:	4620      	mov	r0, r4
 80159c6:	f00a f84e 	bl	801fa66 <send_pairing_rsp>
 80159ca:	4605      	mov	r5, r0
}
 80159cc:	4628      	mov	r0, r5
 80159ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
 80159d2:	f106 0188 	add.w	r1, r6, #136	; 0x88
 80159d6:	7a30      	ldrb	r0, [r6, #8]
 80159d8:	f000 fe48 	bl	801666c <bt_keys_get_addr>
 80159dc:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
		if (!conn->le.keys) {
 80159e0:	2800      	cmp	r0, #0
 80159e2:	f47f af19 	bne.w	8015818 <smp_pairing_req+0x20>
			return BT_SMP_ERR_UNSPECIFIED;
 80159e6:	2508      	movs	r5, #8
 80159e8:	e7f0      	b.n	80159cc <smp_pairing_req+0x1d4>
			return ret;
 80159ea:	b2c5      	uxtb	r5, r0
 80159ec:	e7ee      	b.n	80159cc <smp_pairing_req+0x1d4>
		smp->method == JUST_WORKS) {
 80159ee:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
	     conn->required_sec_level == BT_SECURITY_L4) &&
 80159f2:	2a00      	cmp	r2, #0
 80159f4:	d1ba      	bne.n	801596c <smp_pairing_req+0x174>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
 80159f6:	2503      	movs	r5, #3
 80159f8:	e7e8      	b.n	80159cc <smp_pairing_req+0x1d4>
 80159fa:	f3bf 8f5b 	dmb	ish
 80159fe:	e858 3f00 	ldrex	r3, [r8]
 8015a02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8015a06:	e848 3200 	strex	r2, r3, [r8]
 8015a0a:	2a00      	cmp	r2, #0
 8015a0c:	d1f7      	bne.n	80159fe <smp_pairing_req+0x206>
 8015a0e:	f3bf 8f5b 	dmb	ish
		bt_auth->pairing_confirm(smp->chan.chan.conn);
 8015a12:	4b08      	ldr	r3, [pc, #32]	; (8015a34 <smp_pairing_req+0x23c>)
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	699b      	ldr	r3, [r3, #24]
 8015a18:	6820      	ldr	r0, [r4, #0]
 8015a1a:	4798      	blx	r3
		return 0;
 8015a1c:	e7d6      	b.n	80159cc <smp_pairing_req+0x1d4>
		return BT_SMP_ERR_ENC_KEY_SIZE;
 8015a1e:	2506      	movs	r5, #6
 8015a20:	e7d4      	b.n	80159cc <smp_pairing_req+0x1d4>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
 8015a22:	2503      	movs	r5, #3
 8015a24:	e7d2      	b.n	80159cc <smp_pairing_req+0x1d4>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
 8015a26:	2503      	movs	r5, #3
 8015a28:	e7d0      	b.n	80159cc <smp_pairing_req+0x1d4>
		return BT_SMP_ERR_ENC_KEY_SIZE;
 8015a2a:	2506      	movs	r5, #6
 8015a2c:	e7ce      	b.n	80159cc <smp_pairing_req+0x1d4>
 8015a2e:	bf00      	nop
 8015a30:	2000596e 	.word	0x2000596e
 8015a34:	2000417c 	.word	0x2000417c

08015a38 <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
 8015a38:	b510      	push	{r4, lr}
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
 8015a3a:	2300      	movs	r3, #0
 8015a3c:	2b05      	cmp	r3, #5
 8015a3e:	dc12      	bgt.n	8015a66 <bt_smp_accept+0x2e>
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
 8015a40:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8015a44:	fb02 f203 	mul.w	r2, r2, r3
 8015a48:	4c11      	ldr	r4, [pc, #68]	; (8015a90 <bt_smp_accept+0x58>)
 8015a4a:	58a2      	ldr	r2, [r4, r2]
 8015a4c:	b10a      	cbz	r2, 8015a52 <bt_smp_accept+0x1a>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
 8015a4e:	3301      	adds	r3, #1
 8015a50:	e7f4      	b.n	8015a3c <bt_smp_accept+0x4>
			continue;
		}

		smp->chan.chan.ops = &ops;
 8015a52:	4a0f      	ldr	r2, [pc, #60]	; (8015a90 <bt_smp_accept+0x58>)
 8015a54:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 8015a58:	fb00 2303 	mla	r3, r0, r3, r2
 8015a5c:	4a0d      	ldr	r2, [pc, #52]	; (8015a94 <bt_smp_accept+0x5c>)
 8015a5e:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan.chan;
 8015a60:	600b      	str	r3, [r1, #0]

		return 0;
 8015a62:	2000      	movs	r0, #0
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
 8015a64:	bd10      	pop	{r4, pc}
	BT_ERR("No available SMP context for conn %p", conn);
 8015a66:	f04f 0200 	mov.w	r2, #0
 8015a6a:	2301      	movs	r3, #1
 8015a6c:	f363 0202 	bfi	r2, r3, #0, #3
 8015a70:	f36f 02c5 	bfc	r2, #3, #3
 8015a74:	4b08      	ldr	r3, [pc, #32]	; (8015a98 <bt_smp_accept+0x60>)
 8015a76:	4909      	ldr	r1, [pc, #36]	; (8015a9c <bt_smp_accept+0x64>)
 8015a78:	1a5b      	subs	r3, r3, r1
 8015a7a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8015a7e:	f363 128f 	bfi	r2, r3, #6, #10
 8015a82:	4601      	mov	r1, r0
 8015a84:	4806      	ldr	r0, [pc, #24]	; (8015aa0 <bt_smp_accept+0x68>)
 8015a86:	f7f0 fd5b 	bl	8006540 <log_1>
	return -ENOMEM;
 8015a8a:	f06f 000b 	mvn.w	r0, #11
 8015a8e:	e7e9      	b.n	8015a64 <bt_smp_accept+0x2c>
 8015a90:	20002690 	.word	0x20002690
 8015a94:	08027c90 	.word	0x08027c90
 8015a98:	08022bf0 	.word	0x08022bf0
 8015a9c:	08022b90 	.word	0x08022b90
 8015aa0:	08027a24 	.word	0x08027a24

08015aa4 <smp_security_request>:
{
 8015aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015aa6:	b083      	sub	sp, #12
	struct bt_conn *conn = smp->chan.chan.conn;
 8015aa8:	4604      	mov	r4, r0
 8015aaa:	f854 5bbc 	ldr.w	r5, [r4], #188
	struct bt_smp_security_request *req = (void *)buf->data;
 8015aae:	688a      	ldr	r2, [r1, #8]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8015ab0:	f3bf 8f5b 	dmb	ish
 8015ab4:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8015ab8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
 8015abc:	f013 0f08 	tst.w	r3, #8
 8015ac0:	d002      	beq.n	8015ac8 <smp_security_request+0x24>
		return 0;
 8015ac2:	2000      	movs	r0, #0
}
 8015ac4:	b003      	add	sp, #12
 8015ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ac8:	f3bf 8f5b 	dmb	ish
 8015acc:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8015ad0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
 8015ad4:	f013 0f02 	tst.w	r3, #2
 8015ad8:	f040 80a0 	bne.w	8015c1c <smp_security_request+0x178>
	if (sc_supported) {
 8015adc:	4b53      	ldr	r3, [pc, #332]	; (8015c2c <smp_security_request+0x188>)
 8015ade:	781b      	ldrb	r3, [r3, #0]
 8015ae0:	b37b      	cbz	r3, 8015b42 <smp_security_request+0x9e>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
 8015ae2:	7816      	ldrb	r6, [r2, #0]
 8015ae4:	f006 060f 	and.w	r6, r6, #15
	if (IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
 8015ae8:	f016 0f08 	tst.w	r6, #8
 8015aec:	f000 8098 	beq.w	8015c20 <smp_security_request+0x17c>
	if (conn->le.keys) {
 8015af0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
 8015af4:	b34b      	cbz	r3, 8015b4a <smp_security_request+0xa6>
		if (!(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
 8015af6:	89db      	ldrh	r3, [r3, #14]
 8015af8:	f013 0f24 	tst.w	r3, #36	; 0x24
 8015afc:	d07b      	beq.n	8015bf6 <smp_security_request+0x152>
	if (!conn->le.keys) {
 8015afe:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
 8015b02:	2900      	cmp	r1, #0
 8015b04:	d077      	beq.n	8015bf6 <smp_security_request+0x152>
	if ((auth & BT_SMP_AUTH_MITM) &&
 8015b06:	f016 0f04 	tst.w	r6, #4
 8015b0a:	d044      	beq.n	8015b96 <smp_security_request+0xf2>
	    !(conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
 8015b0c:	7b4b      	ldrb	r3, [r1, #13]
	if ((auth & BT_SMP_AUTH_MITM) &&
 8015b0e:	f013 0f01 	tst.w	r3, #1
 8015b12:	d140      	bne.n	8015b96 <smp_security_request+0xf2>
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
 8015b14:	f7fe ff18 	bl	8014948 <get_io_capa>
 8015b18:	2803      	cmp	r0, #3
 8015b1a:	d029      	beq.n	8015b70 <smp_security_request+0xcc>
			BT_INFO("New auth requirements: 0x%x, repairing",
 8015b1c:	f04f 0200 	mov.w	r2, #0
 8015b20:	2303      	movs	r3, #3
 8015b22:	f363 0202 	bfi	r2, r3, #0, #3
 8015b26:	f36f 02c5 	bfc	r2, #3, #3
 8015b2a:	4b41      	ldr	r3, [pc, #260]	; (8015c30 <smp_security_request+0x18c>)
 8015b2c:	4941      	ldr	r1, [pc, #260]	; (8015c34 <smp_security_request+0x190>)
 8015b2e:	1a5b      	subs	r3, r3, r1
 8015b30:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8015b34:	f363 128f 	bfi	r2, r3, #6, #10
 8015b38:	4631      	mov	r1, r6
 8015b3a:	483f      	ldr	r0, [pc, #252]	; (8015c38 <smp_security_request+0x194>)
 8015b3c:	f7f0 fd00 	bl	8006540 <log_1>
			goto pair;
 8015b40:	e059      	b.n	8015bf6 <smp_security_request+0x152>
		auth = req->auth_req & BT_SMP_AUTH_MASK;
 8015b42:	7816      	ldrb	r6, [r2, #0]
 8015b44:	f006 0607 	and.w	r6, r6, #7
 8015b48:	e7ce      	b.n	8015ae8 <smp_security_request+0x44>
					     &conn->le.dst);
 8015b4a:	f105 0788 	add.w	r7, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
 8015b4e:	463a      	mov	r2, r7
 8015b50:	7a29      	ldrb	r1, [r5, #8]
 8015b52:	2020      	movs	r0, #32
 8015b54:	f000 fe10 	bl	8016778 <bt_keys_find>
 8015b58:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
 8015b5c:	2800      	cmp	r0, #0
 8015b5e:	d1ce      	bne.n	8015afe <smp_security_request+0x5a>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK, conn->id,
 8015b60:	463a      	mov	r2, r7
 8015b62:	7a29      	ldrb	r1, [r5, #8]
 8015b64:	2004      	movs	r0, #4
 8015b66:	f000 fe07 	bl	8016778 <bt_keys_find>
 8015b6a:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
 8015b6e:	e7c6      	b.n	8015afe <smp_security_request+0x5a>
		BT_WARN("Unsupported auth requirements: 0x%x, repairing",
 8015b70:	f04f 0200 	mov.w	r2, #0
 8015b74:	2302      	movs	r3, #2
 8015b76:	f363 0202 	bfi	r2, r3, #0, #3
 8015b7a:	f36f 02c5 	bfc	r2, #3, #3
 8015b7e:	4b2c      	ldr	r3, [pc, #176]	; (8015c30 <smp_security_request+0x18c>)
 8015b80:	492c      	ldr	r1, [pc, #176]	; (8015c34 <smp_security_request+0x190>)
 8015b82:	1a5b      	subs	r3, r3, r1
 8015b84:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8015b88:	f363 128f 	bfi	r2, r3, #6, #10
 8015b8c:	4631      	mov	r1, r6
 8015b8e:	482b      	ldr	r0, [pc, #172]	; (8015c3c <smp_security_request+0x198>)
 8015b90:	f7f0 fcd6 	bl	8006540 <log_1>
		goto pair;
 8015b94:	e02f      	b.n	8015bf6 <smp_security_request+0x152>
	    !(conn->le.keys->keys & BT_KEYS_LTK_P256)) {
 8015b96:	89cb      	ldrh	r3, [r1, #14]
	if ((auth & BT_SMP_AUTH_SC) &&
 8015b98:	f013 0f20 	tst.w	r3, #32
 8015b9c:	d019      	beq.n	8015bd2 <smp_security_request+0x12e>
					conn->le.keys->enc_size) < 0) {
 8015b9e:	7b0b      	ldrb	r3, [r1, #12]
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
 8015ba0:	9300      	str	r3, [sp, #0]
 8015ba2:	f101 031a 	add.w	r3, r1, #26
 8015ba6:	f101 0218 	add.w	r2, r1, #24
 8015baa:	3110      	adds	r1, #16
 8015bac:	4628      	mov	r0, r5
 8015bae:	f007 fc97 	bl	801d4e0 <bt_conn_le_start_encryption>
 8015bb2:	2800      	cmp	r0, #0
 8015bb4:	db36      	blt.n	8015c24 <smp_security_request+0x180>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8015bb6:	f3bf 8f5b 	dmb	ish
 8015bba:	e854 3f00 	ldrex	r3, [r4]
 8015bbe:	f043 0302 	orr.w	r3, r3, #2
 8015bc2:	e844 3200 	strex	r2, r3, [r4]
 8015bc6:	2a00      	cmp	r2, #0
 8015bc8:	d1f7      	bne.n	8015bba <smp_security_request+0x116>
 8015bca:	f3bf 8f5b 	dmb	ish
	return 0;
 8015bce:	2000      	movs	r0, #0
 8015bd0:	e778      	b.n	8015ac4 <smp_security_request+0x20>
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
 8015bd2:	f04f 0200 	mov.w	r2, #0
 8015bd6:	2303      	movs	r3, #3
 8015bd8:	f363 0202 	bfi	r2, r3, #0, #3
 8015bdc:	f36f 02c5 	bfc	r2, #3, #3
 8015be0:	4b13      	ldr	r3, [pc, #76]	; (8015c30 <smp_security_request+0x18c>)
 8015be2:	4914      	ldr	r1, [pc, #80]	; (8015c34 <smp_security_request+0x190>)
 8015be4:	1a5b      	subs	r3, r3, r1
 8015be6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8015bea:	f363 128f 	bfi	r2, r3, #6, #10
 8015bee:	4631      	mov	r1, r6
 8015bf0:	4811      	ldr	r0, [pc, #68]	; (8015c38 <smp_security_request+0x194>)
 8015bf2:	f7f0 fca5 	bl	8006540 <log_1>
	if (smp_send_pairing_req(conn) < 0) {
 8015bf6:	4628      	mov	r0, r5
 8015bf8:	f7ff fd4c 	bl	8015694 <smp_send_pairing_req>
 8015bfc:	2800      	cmp	r0, #0
 8015bfe:	db13      	blt.n	8015c28 <smp_security_request+0x184>
 8015c00:	f3bf 8f5b 	dmb	ish
 8015c04:	e854 3f00 	ldrex	r3, [r4]
 8015c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015c0c:	e844 3200 	strex	r2, r3, [r4]
 8015c10:	2a00      	cmp	r2, #0
 8015c12:	d1f7      	bne.n	8015c04 <smp_security_request+0x160>
 8015c14:	f3bf 8f5b 	dmb	ish
	return 0;
 8015c18:	2000      	movs	r0, #0
 8015c1a:	e753      	b.n	8015ac4 <smp_security_request+0x20>
		return 0;
 8015c1c:	2000      	movs	r0, #0
 8015c1e:	e751      	b.n	8015ac4 <smp_security_request+0x20>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
 8015c20:	2003      	movs	r0, #3
 8015c22:	e74f      	b.n	8015ac4 <smp_security_request+0x20>
		return BT_SMP_ERR_UNSPECIFIED;
 8015c24:	2008      	movs	r0, #8
 8015c26:	e74d      	b.n	8015ac4 <smp_security_request+0x20>
		return BT_SMP_ERR_UNSPECIFIED;
 8015c28:	2008      	movs	r0, #8
 8015c2a:	e74b      	b.n	8015ac4 <smp_security_request+0x20>
 8015c2c:	2000596f 	.word	0x2000596f
 8015c30:	08022bf0 	.word	0x08022bf0
 8015c34:	08022b90 	.word	0x08022b90
 8015c38:	08027a4c 	.word	0x08027a4c
 8015c3c:	08027a74 	.word	0x08027a74

08015c40 <bt_smp_distribute_keys>:
	struct bt_conn *conn = smp->chan.chan.conn;
 8015c40:	6800      	ldr	r0, [r0, #0]
	struct bt_keys *keys = conn->le.keys;
 8015c42:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
	if (!keys) {
 8015c46:	b10b      	cbz	r3, 8015c4c <bt_smp_distribute_keys+0xc>
	return 0;
 8015c48:	2000      	movs	r0, #0
}
 8015c4a:	4770      	bx	lr
{
 8015c4c:	b510      	push	{r4, lr}
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
 8015c4e:	f04f 0400 	mov.w	r4, #0
 8015c52:	2301      	movs	r3, #1
 8015c54:	f363 0402 	bfi	r4, r3, #0, #3
 8015c58:	f36f 04c5 	bfc	r4, #3, #3
 8015c5c:	4b09      	ldr	r3, [pc, #36]	; (8015c84 <bt_smp_distribute_keys+0x44>)
 8015c5e:	4a0a      	ldr	r2, [pc, #40]	; (8015c88 <bt_smp_distribute_keys+0x48>)
 8015c60:	1a9b      	subs	r3, r3, r2
 8015c62:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8015c66:	f363 148f 	bfi	r4, r3, #6, #10
 8015c6a:	3088      	adds	r0, #136	; 0x88
 8015c6c:	f7f5 ff6c 	bl	800bb48 <bt_addr_le_str_real>
 8015c70:	f7f0 fa96 	bl	80061a0 <log_strdup>
 8015c74:	4601      	mov	r1, r0
 8015c76:	4622      	mov	r2, r4
 8015c78:	4804      	ldr	r0, [pc, #16]	; (8015c8c <bt_smp_distribute_keys+0x4c>)
 8015c7a:	f7f0 fc61 	bl	8006540 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
 8015c7e:	2008      	movs	r0, #8
}
 8015c80:	bd10      	pop	{r4, pc}
 8015c82:	bf00      	nop
 8015c84:	08022bf0 	.word	0x08022bf0
 8015c88:	08022b90 	.word	0x08022b90
 8015c8c:	08027aa4 	.word	0x08027aa4

08015c90 <smp_pairing_failed>:
{
 8015c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c92:	4605      	mov	r5, r0
	struct bt_conn *conn = smp->chan.chan.conn;
 8015c94:	4604      	mov	r4, r0
 8015c96:	f854 7bbc 	ldr.w	r7, [r4], #188
	struct bt_smp_pairing_fail *req = (void *)buf->data;
 8015c9a:	688e      	ldr	r6, [r1, #8]
	BT_ERR("reason 0x%x", req->reason);
 8015c9c:	f04f 0200 	mov.w	r2, #0
 8015ca0:	2301      	movs	r3, #1
 8015ca2:	f363 0202 	bfi	r2, r3, #0, #3
 8015ca6:	f36f 02c5 	bfc	r2, #3, #3
 8015caa:	4b1b      	ldr	r3, [pc, #108]	; (8015d18 <smp_pairing_failed+0x88>)
 8015cac:	491b      	ldr	r1, [pc, #108]	; (8015d1c <smp_pairing_failed+0x8c>)
 8015cae:	1a5b      	subs	r3, r3, r1
 8015cb0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8015cb4:	f363 128f 	bfi	r2, r3, #6, #10
 8015cb8:	7831      	ldrb	r1, [r6, #0]
 8015cba:	4819      	ldr	r0, [pc, #100]	; (8015d20 <smp_pairing_failed+0x90>)
 8015cbc:	f7f0 fc40 	bl	8006540 <log_1>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8015cc0:	f3bf 8f5b 	dmb	ish
 8015cc4:	e854 3f00 	ldrex	r3, [r4]
 8015cc8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8015ccc:	e844 2100 	strex	r1, r2, [r4]
 8015cd0:	2900      	cmp	r1, #0
 8015cd2:	d1f7      	bne.n	8015cc4 <smp_pairing_failed+0x34>
 8015cd4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
 8015cd8:	f413 7f00 	tst.w	r3, #512	; 0x200
 8015cdc:	d007      	beq.n	8015cee <smp_pairing_failed+0x5e>
		if (bt_auth && bt_auth->cancel) {
 8015cde:	4b11      	ldr	r3, [pc, #68]	; (8015d24 <smp_pairing_failed+0x94>)
 8015ce0:	681b      	ldr	r3, [r3, #0]
 8015ce2:	b19b      	cbz	r3, 8015d0c <smp_pairing_failed+0x7c>
 8015ce4:	695b      	ldr	r3, [r3, #20]
 8015ce6:	b18b      	cbz	r3, 8015d0c <smp_pairing_failed+0x7c>
			bt_auth->cancel(conn);
 8015ce8:	4638      	mov	r0, r7
 8015cea:	4798      	blx	r3
 8015cec:	e00e      	b.n	8015d0c <smp_pairing_failed+0x7c>
 8015cee:	f3bf 8f5b 	dmb	ish
 8015cf2:	e854 3f00 	ldrex	r3, [r4]
 8015cf6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8015cfa:	e844 2100 	strex	r1, r2, [r4]
 8015cfe:	2900      	cmp	r1, #0
 8015d00:	d1f7      	bne.n	8015cf2 <smp_pairing_failed+0x62>
 8015d02:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
 8015d06:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8015d0a:	d1e8      	bne.n	8015cde <smp_pairing_failed+0x4e>
	smp_pairing_complete(smp, req->reason);
 8015d0c:	7831      	ldrb	r1, [r6, #0]
 8015d0e:	4628      	mov	r0, r5
 8015d10:	f7ff f8f8 	bl	8014f04 <smp_pairing_complete>
}
 8015d14:	2000      	movs	r0, #0
 8015d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d18:	08022bf0 	.word	0x08022bf0
 8015d1c:	08022b90 	.word	0x08022b90
 8015d20:	08027abc 	.word	0x08027abc
 8015d24:	2000417c 	.word	0x2000417c

08015d28 <bt_smp_recv>:
{
 8015d28:	b570      	push	{r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
 8015d2a:	898b      	ldrh	r3, [r1, #12]
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d045      	beq.n	8015dbc <bt_smp_recv+0x94>
 8015d30:	4605      	mov	r5, r0
 8015d32:	460c      	mov	r4, r1
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
 8015d34:	2101      	movs	r1, #1
 8015d36:	f104 0008 	add.w	r0, r4, #8
 8015d3a:	f00a fbd0 	bl	80204de <net_buf_simple_pull_mem>
 8015d3e:	4606      	mov	r6, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8015d40:	f3bf 8f5b 	dmb	ish
 8015d44:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
 8015d48:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
 8015d4c:	f013 0f10 	tst.w	r3, #16
 8015d50:	d147      	bne.n	8015de2 <bt_smp_recv+0xba>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
 8015d52:	7801      	ldrb	r1, [r0, #0]
 8015d54:	290d      	cmp	r1, #13
 8015d56:	d857      	bhi.n	8015e08 <bt_smp_recv+0xe0>
 8015d58:	4b4e      	ldr	r3, [pc, #312]	; (8015e94 <bt_smp_recv+0x16c>)
 8015d5a:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d052      	beq.n	8015e08 <bt_smp_recv+0xe0>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
 8015d62:	f105 03b8 	add.w	r3, r5, #184	; 0xb8
	atomic_val_t mask = ATOMIC_MASK(bit);
 8015d66:	f001 001f 	and.w	r0, r1, #31
 8015d6a:	2201      	movs	r2, #1
 8015d6c:	4082      	lsls	r2, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 8015d6e:	0949      	lsrs	r1, r1, #5
 8015d70:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8015d74:	43d0      	mvns	r0, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8015d76:	f3bf 8f5b 	dmb	ish
 8015d7a:	e851 3f00 	ldrex	r3, [r1]
 8015d7e:	ea03 0c00 	and.w	ip, r3, r0
 8015d82:	e841 ce00 	strex	lr, ip, [r1]
 8015d86:	f1be 0f00 	cmp.w	lr, #0
 8015d8a:	d1f6      	bne.n	8015d7a <bt_smp_recv+0x52>
 8015d8c:	f3bf 8f5b 	dmb	ish
 8015d90:	421a      	tst	r2, r3
 8015d92:	d04f      	beq.n	8015e34 <bt_smp_recv+0x10c>
	if (buf->len != handlers[hdr->code].expect_len) {
 8015d94:	89a1      	ldrh	r1, [r4, #12]
 8015d96:	7832      	ldrb	r2, [r6, #0]
 8015d98:	4b3e      	ldr	r3, [pc, #248]	; (8015e94 <bt_smp_recv+0x16c>)
 8015d9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015d9e:	791b      	ldrb	r3, [r3, #4]
 8015da0:	4299      	cmp	r1, r3
 8015da2:	d161      	bne.n	8015e68 <bt_smp_recv+0x140>
	err = handlers[hdr->code].func(smp, buf);
 8015da4:	4b3b      	ldr	r3, [pc, #236]	; (8015e94 <bt_smp_recv+0x16c>)
 8015da6:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8015daa:	4621      	mov	r1, r4
 8015dac:	4628      	mov	r0, r5
 8015dae:	4798      	blx	r3
	if (err) {
 8015db0:	4601      	mov	r1, r0
 8015db2:	b1a0      	cbz	r0, 8015dde <bt_smp_recv+0xb6>
		smp_error(smp, err);
 8015db4:	4628      	mov	r0, r5
 8015db6:	f009 fe71 	bl	801fa9c <smp_error>
 8015dba:	e010      	b.n	8015dde <bt_smp_recv+0xb6>
		BT_ERR("Too small SMP PDU received");
 8015dbc:	f04f 0100 	mov.w	r1, #0
 8015dc0:	2301      	movs	r3, #1
 8015dc2:	f363 0102 	bfi	r1, r3, #0, #3
 8015dc6:	f36f 01c5 	bfc	r1, #3, #3
 8015dca:	4b33      	ldr	r3, [pc, #204]	; (8015e98 <bt_smp_recv+0x170>)
 8015dcc:	4a33      	ldr	r2, [pc, #204]	; (8015e9c <bt_smp_recv+0x174>)
 8015dce:	1a9b      	subs	r3, r3, r2
 8015dd0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8015dd4:	f363 118f 	bfi	r1, r3, #6, #10
 8015dd8:	4831      	ldr	r0, [pc, #196]	; (8015ea0 <bt_smp_recv+0x178>)
 8015dda:	f7f0 fd21 	bl	8006820 <log_0>
}
 8015dde:	2000      	movs	r0, #0
 8015de0:	bd70      	pop	{r4, r5, r6, pc}
		BT_WARN("SMP command (code 0x%02x) received after timeout",
 8015de2:	f04f 0200 	mov.w	r2, #0
 8015de6:	2302      	movs	r3, #2
 8015de8:	f363 0202 	bfi	r2, r3, #0, #3
 8015dec:	f36f 02c5 	bfc	r2, #3, #3
 8015df0:	4b29      	ldr	r3, [pc, #164]	; (8015e98 <bt_smp_recv+0x170>)
 8015df2:	492a      	ldr	r1, [pc, #168]	; (8015e9c <bt_smp_recv+0x174>)
 8015df4:	1a5b      	subs	r3, r3, r1
 8015df6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8015dfa:	f363 128f 	bfi	r2, r3, #6, #10
 8015dfe:	7801      	ldrb	r1, [r0, #0]
 8015e00:	4828      	ldr	r0, [pc, #160]	; (8015ea4 <bt_smp_recv+0x17c>)
 8015e02:	f7f0 fb9d 	bl	8006540 <log_1>
		return 0;
 8015e06:	e7ea      	b.n	8015dde <bt_smp_recv+0xb6>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
 8015e08:	f04f 0200 	mov.w	r2, #0
 8015e0c:	2302      	movs	r3, #2
 8015e0e:	f363 0202 	bfi	r2, r3, #0, #3
 8015e12:	f36f 02c5 	bfc	r2, #3, #3
 8015e16:	4b20      	ldr	r3, [pc, #128]	; (8015e98 <bt_smp_recv+0x170>)
 8015e18:	4820      	ldr	r0, [pc, #128]	; (8015e9c <bt_smp_recv+0x174>)
 8015e1a:	1a1b      	subs	r3, r3, r0
 8015e1c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8015e20:	f363 128f 	bfi	r2, r3, #6, #10
 8015e24:	4820      	ldr	r0, [pc, #128]	; (8015ea8 <bt_smp_recv+0x180>)
 8015e26:	f7f0 fb8b 	bl	8006540 <log_1>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
 8015e2a:	2107      	movs	r1, #7
 8015e2c:	4628      	mov	r0, r5
 8015e2e:	f009 fe35 	bl	801fa9c <smp_error>
		return 0;
 8015e32:	e7d4      	b.n	8015dde <bt_smp_recv+0xb6>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
 8015e34:	f04f 0200 	mov.w	r2, #0
 8015e38:	2302      	movs	r3, #2
 8015e3a:	f363 0202 	bfi	r2, r3, #0, #3
 8015e3e:	f36f 02c5 	bfc	r2, #3, #3
 8015e42:	4b15      	ldr	r3, [pc, #84]	; (8015e98 <bt_smp_recv+0x170>)
 8015e44:	4915      	ldr	r1, [pc, #84]	; (8015e9c <bt_smp_recv+0x174>)
 8015e46:	1a5b      	subs	r3, r3, r1
 8015e48:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8015e4c:	f363 128f 	bfi	r2, r3, #6, #10
 8015e50:	7831      	ldrb	r1, [r6, #0]
 8015e52:	4816      	ldr	r0, [pc, #88]	; (8015eac <bt_smp_recv+0x184>)
 8015e54:	f7f0 fb74 	bl	8006540 <log_1>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
 8015e58:	7833      	ldrb	r3, [r6, #0]
 8015e5a:	2b05      	cmp	r3, #5
 8015e5c:	d0bf      	beq.n	8015dde <bt_smp_recv+0xb6>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
 8015e5e:	2108      	movs	r1, #8
 8015e60:	4628      	mov	r0, r5
 8015e62:	f009 fe1b 	bl	801fa9c <smp_error>
		return 0;
 8015e66:	e7ba      	b.n	8015dde <bt_smp_recv+0xb6>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
 8015e68:	f04f 0300 	mov.w	r3, #0
 8015e6c:	2001      	movs	r0, #1
 8015e6e:	f360 0302 	bfi	r3, r0, #0, #3
 8015e72:	f36f 03c5 	bfc	r3, #3, #3
 8015e76:	4808      	ldr	r0, [pc, #32]	; (8015e98 <bt_smp_recv+0x170>)
 8015e78:	4c08      	ldr	r4, [pc, #32]	; (8015e9c <bt_smp_recv+0x174>)
 8015e7a:	1b00      	subs	r0, r0, r4
 8015e7c:	f3c0 00c9 	ubfx	r0, r0, #3, #10
 8015e80:	f360 138f 	bfi	r3, r0, #6, #10
 8015e84:	480a      	ldr	r0, [pc, #40]	; (8015eb0 <bt_smp_recv+0x188>)
 8015e86:	f7f0 fbdb 	bl	8006640 <log_2>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
 8015e8a:	210a      	movs	r1, #10
 8015e8c:	4628      	mov	r0, r5
 8015e8e:	f009 fe05 	bl	801fa9c <smp_error>
		return 0;
 8015e92:	e7a4      	b.n	8015dde <bt_smp_recv+0xb6>
 8015e94:	08027c20 	.word	0x08027c20
 8015e98:	08022bf0 	.word	0x08022bf0
 8015e9c:	08022b90 	.word	0x08022b90
 8015ea0:	08027ac8 	.word	0x08027ac8
 8015ea4:	08027ae4 	.word	0x08027ae4
 8015ea8:	08027b18 	.word	0x08027b18
 8015eac:	08027b34 	.word	0x08027b34
 8015eb0:	0802743c 	.word	0x0802743c

08015eb4 <generate_dhkey>:
{
 8015eb4:	b510      	push	{r4, lr}
 8015eb6:	4604      	mov	r4, r0
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
 8015eb8:	490a      	ldr	r1, [pc, #40]	; (8015ee4 <generate_dhkey+0x30>)
 8015eba:	f200 100f 	addw	r0, r0, #271	; 0x10f
 8015ebe:	f7f9 fe79 	bl	800fbb4 <bt_dh_key_gen>
 8015ec2:	b968      	cbnz	r0, 8015ee0 <generate_dhkey+0x2c>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
 8015ec4:	34bc      	adds	r4, #188	; 0xbc
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8015ec6:	f3bf 8f5b 	dmb	ish
 8015eca:	e854 3f00 	ldrex	r3, [r4]
 8015ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015ed2:	e844 3200 	strex	r2, r3, [r4]
 8015ed6:	2a00      	cmp	r2, #0
 8015ed8:	d1f7      	bne.n	8015eca <generate_dhkey+0x16>
 8015eda:	f3bf 8f5b 	dmb	ish
}
 8015ede:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
 8015ee0:	2008      	movs	r0, #8
 8015ee2:	e7fc      	b.n	8015ede <generate_dhkey+0x2a>
 8015ee4:	08014fb9 	.word	0x08014fb9

08015ee8 <smp_public_key_slave>:
{
 8015ee8:	b510      	push	{r4, lr}
 8015eea:	4604      	mov	r4, r0
	err = sc_send_public_key(smp);
 8015eec:	f7fe ffe6 	bl	8014ebc <sc_send_public_key>
	if (err) {
 8015ef0:	4603      	mov	r3, r0
 8015ef2:	2800      	cmp	r0, #0
 8015ef4:	d155      	bne.n	8015fa2 <smp_public_key_slave+0xba>
	switch (smp->method) {
 8015ef6:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 8015efa:	2b05      	cmp	r3, #5
 8015efc:	d862      	bhi.n	8015fc4 <smp_public_key_slave+0xdc>
 8015efe:	e8df f003 	tbb	[pc, r3]
 8015f02:	2b03      	.short	0x2b03
 8015f04:	52610317 	.word	0x52610317
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
 8015f08:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
 8015f0c:	f3bf 8f5b 	dmb	ish
 8015f10:	e853 2f00 	ldrex	r2, [r3]
 8015f14:	f042 0210 	orr.w	r2, r2, #16
 8015f18:	e843 2100 	strex	r1, r2, [r3]
 8015f1c:	2900      	cmp	r1, #0
 8015f1e:	d1f7      	bne.n	8015f10 <smp_public_key_slave+0x28>
 8015f20:	f3bf 8f5b 	dmb	ish
		err = smp_send_pairing_confirm(smp);
 8015f24:	4620      	mov	r0, r4
 8015f26:	f7fe ff77 	bl	8014e18 <smp_send_pairing_confirm>
		if (err) {
 8015f2a:	4603      	mov	r3, r0
 8015f2c:	b3a8      	cbz	r0, 8015f9a <smp_public_key_slave+0xb2>
 8015f2e:	e038      	b.n	8015fa2 <smp_public_key_slave+0xba>
		err = display_passkey(smp);
 8015f30:	4620      	mov	r0, r4
 8015f32:	f7ff f8f1 	bl	8015118 <display_passkey>
		if (err) {
 8015f36:	4603      	mov	r3, r0
 8015f38:	bb98      	cbnz	r0, 8015fa2 <smp_public_key_slave+0xba>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
 8015f3a:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
 8015f3e:	f3bf 8f5b 	dmb	ish
 8015f42:	e853 2f00 	ldrex	r2, [r3]
 8015f46:	f042 0208 	orr.w	r2, r2, #8
 8015f4a:	e843 2100 	strex	r1, r2, [r3]
 8015f4e:	2900      	cmp	r1, #0
 8015f50:	d1f7      	bne.n	8015f42 <smp_public_key_slave+0x5a>
 8015f52:	f3bf 8f5b 	dmb	ish
}
 8015f56:	e020      	b.n	8015f9a <smp_public_key_slave+0xb2>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
 8015f58:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8015f5c:	f3bf 8f5b 	dmb	ish
 8015f60:	e853 2f00 	ldrex	r2, [r3]
 8015f64:	f042 0208 	orr.w	r2, r2, #8
 8015f68:	e843 2100 	strex	r1, r2, [r3]
 8015f6c:	2900      	cmp	r1, #0
 8015f6e:	d1f7      	bne.n	8015f60 <smp_public_key_slave+0x78>
 8015f70:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
 8015f74:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
 8015f78:	f3bf 8f5b 	dmb	ish
 8015f7c:	e853 2f00 	ldrex	r2, [r3]
 8015f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015f84:	e843 2100 	strex	r1, r2, [r3]
 8015f88:	2900      	cmp	r1, #0
 8015f8a:	d1f7      	bne.n	8015f7c <smp_public_key_slave+0x94>
 8015f8c:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_entry(smp->chan.chan.conn);
 8015f90:	4b0d      	ldr	r3, [pc, #52]	; (8015fc8 <smp_public_key_slave+0xe0>)
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	689b      	ldr	r3, [r3, #8]
 8015f96:	6820      	ldr	r0, [r4, #0]
 8015f98:	4798      	blx	r3
	return generate_dhkey(smp);
 8015f9a:	4620      	mov	r0, r4
 8015f9c:	f7ff ff8a 	bl	8015eb4 <generate_dhkey>
 8015fa0:	4603      	mov	r3, r0
}
 8015fa2:	4618      	mov	r0, r3
 8015fa4:	bd10      	pop	{r4, pc}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
 8015fa6:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
 8015faa:	f3bf 8f5b 	dmb	ish
 8015fae:	e853 2f00 	ldrex	r2, [r3]
 8015fb2:	f042 0210 	orr.w	r2, r2, #16
 8015fb6:	e843 2100 	strex	r1, r2, [r3]
 8015fba:	2900      	cmp	r1, #0
 8015fbc:	d1f7      	bne.n	8015fae <smp_public_key_slave+0xc6>
 8015fbe:	f3bf 8f5b 	dmb	ish
}
 8015fc2:	e7ea      	b.n	8015f9a <smp_public_key_slave+0xb2>
	switch (smp->method) {
 8015fc4:	2308      	movs	r3, #8
 8015fc6:	e7ec      	b.n	8015fa2 <smp_public_key_slave+0xba>
 8015fc8:	2000417c 	.word	0x2000417c

08015fcc <smp_public_key>:
{
 8015fcc:	b570      	push	{r4, r5, r6, lr}
 8015fce:	b082      	sub	sp, #8
 8015fd0:	4604      	mov	r4, r0
	struct bt_smp_public_key *req = (void *)buf->data;
 8015fd2:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
 8015fd4:	f200 150f 	addw	r5, r0, #271	; 0x10f
 8015fd8:	2220      	movs	r2, #32
 8015fda:	4631      	mov	r1, r6
 8015fdc:	4628      	mov	r0, r5
 8015fde:	f006 fc66 	bl	801c8ae <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
 8015fe2:	2220      	movs	r2, #32
 8015fe4:	18b1      	adds	r1, r6, r2
 8015fe6:	f204 102f 	addw	r0, r4, #303	; 0x12f
 8015fea:	f006 fc60 	bl	801c8ae <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
 8015fee:	2240      	movs	r2, #64	; 0x40
 8015ff0:	4963      	ldr	r1, [pc, #396]	; (8016180 <smp_public_key+0x1b4>)
 8015ff2:	4628      	mov	r0, r5
 8015ff4:	f006 fc43 	bl	801c87e <memcmp>
 8015ff8:	bb20      	cbnz	r0, 8016044 <smp_public_key+0x78>
		BT_INFO("Remote is using Debug Public key");
 8015ffa:	f04f 0100 	mov.w	r1, #0
 8015ffe:	2303      	movs	r3, #3
 8016000:	f363 0102 	bfi	r1, r3, #0, #3
 8016004:	f36f 01c5 	bfc	r1, #3, #3
 8016008:	4b5e      	ldr	r3, [pc, #376]	; (8016184 <smp_public_key+0x1b8>)
 801600a:	4a5f      	ldr	r2, [pc, #380]	; (8016188 <smp_public_key+0x1bc>)
 801600c:	1a9b      	subs	r3, r3, r2
 801600e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8016012:	f363 118f 	bfi	r1, r3, #6, #10
 8016016:	485d      	ldr	r0, [pc, #372]	; (801618c <smp_public_key+0x1c0>)
 8016018:	f7f0 fc02 	bl	8006820 <log_0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
 801601c:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8016020:	f3bf 8f5b 	dmb	ish
 8016024:	e853 2f00 	ldrex	r2, [r3]
 8016028:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801602c:	e843 2100 	strex	r1, r2, [r3]
 8016030:	2900      	cmp	r1, #0
 8016032:	d1f7      	bne.n	8016024 <smp_public_key+0x58>
 8016034:	f3bf 8f5b 	dmb	ish
		if (!update_debug_keys_check(smp)) {
 8016038:	4620      	mov	r0, r4
 801603a:	f009 fe23 	bl	801fc84 <update_debug_keys_check>
 801603e:	2800      	cmp	r0, #0
 8016040:	f000 8094 	beq.w	801616c <smp_public_key+0x1a0>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
 8016044:	6823      	ldr	r3, [r4, #0]
 8016046:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
 8016048:	2b00      	cmp	r3, #0
 801604a:	d178      	bne.n	801613e <smp_public_key+0x172>
		switch (smp->method) {
 801604c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 8016050:	2b05      	cmp	r3, #5
 8016052:	f200 808d 	bhi.w	8016170 <smp_public_key+0x1a4>
 8016056:	e8df f003 	tbb	[pc, r3]
 801605a:	2e03      	.short	0x2e03
 801605c:	428b0315 	.word	0x428b0315
			atomic_set_bit(&smp->allowed_cmds,
 8016060:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
 8016064:	f3bf 8f5b 	dmb	ish
 8016068:	e853 2f00 	ldrex	r2, [r3]
 801606c:	f042 0208 	orr.w	r2, r2, #8
 8016070:	e843 2100 	strex	r1, r2, [r3]
 8016074:	2900      	cmp	r1, #0
 8016076:	d1f7      	bne.n	8016068 <smp_public_key+0x9c>
 8016078:	f3bf 8f5b 	dmb	ish
		return generate_dhkey(smp);
 801607c:	4620      	mov	r0, r4
 801607e:	f7ff ff19 	bl	8015eb4 <generate_dhkey>
 8016082:	e062      	b.n	801614a <smp_public_key+0x17e>
			err = display_passkey(smp);
 8016084:	4620      	mov	r0, r4
 8016086:	f7ff f847 	bl	8015118 <display_passkey>
			if (err) {
 801608a:	2800      	cmp	r0, #0
 801608c:	d15d      	bne.n	801614a <smp_public_key+0x17e>
			atomic_set_bit(&smp->allowed_cmds,
 801608e:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
 8016092:	f3bf 8f5b 	dmb	ish
 8016096:	e853 2f00 	ldrex	r2, [r3]
 801609a:	f042 0208 	orr.w	r2, r2, #8
 801609e:	e843 2100 	strex	r1, r2, [r3]
 80160a2:	2900      	cmp	r1, #0
 80160a4:	d1f7      	bne.n	8016096 <smp_public_key+0xca>
 80160a6:	f3bf 8f5b 	dmb	ish
			err = smp_send_pairing_confirm(smp);
 80160aa:	4620      	mov	r0, r4
 80160ac:	f7fe feb4 	bl	8014e18 <smp_send_pairing_confirm>
			if (err) {
 80160b0:	2800      	cmp	r0, #0
 80160b2:	d14a      	bne.n	801614a <smp_public_key+0x17e>
 80160b4:	e7e2      	b.n	801607c <smp_public_key+0xb0>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
 80160b6:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
 80160ba:	f3bf 8f5b 	dmb	ish
 80160be:	e853 2f00 	ldrex	r2, [r3]
 80160c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80160c6:	e843 2100 	strex	r1, r2, [r3]
 80160ca:	2900      	cmp	r1, #0
 80160cc:	d1f7      	bne.n	80160be <smp_public_key+0xf2>
 80160ce:	f3bf 8f5b 	dmb	ish
			bt_auth->passkey_entry(smp->chan.chan.conn);
 80160d2:	4b2f      	ldr	r3, [pc, #188]	; (8016190 <smp_public_key+0x1c4>)
 80160d4:	681b      	ldr	r3, [r3, #0]
 80160d6:	689b      	ldr	r3, [r3, #8]
 80160d8:	6820      	ldr	r0, [r4, #0]
 80160da:	4798      	blx	r3
			break;
 80160dc:	e7ce      	b.n	801607c <smp_public_key+0xb0>
			if (bt_rand(smp->prnd, 16)) {
 80160de:	2110      	movs	r1, #16
 80160e0:	f104 00df 	add.w	r0, r4, #223	; 0xdf
 80160e4:	f7f9 fe3a 	bl	800fd5c <bt_rand>
 80160e8:	2800      	cmp	r0, #0
 80160ea:	d143      	bne.n	8016174 <smp_public_key+0x1a8>
			if (bt_auth && bt_auth->oob_data_request) {
 80160ec:	4b28      	ldr	r3, [pc, #160]	; (8016190 <smp_public_key+0x1c4>)
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d041      	beq.n	8016178 <smp_public_key+0x1ac>
 80160f4:	691b      	ldr	r3, [r3, #16]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d040      	beq.n	801617c <smp_public_key+0x1b0>
				struct bt_conn_oob_info info = {
 80160fa:	4b26      	ldr	r3, [pc, #152]	; (8016194 <smp_public_key+0x1c8>)
 80160fc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80160fe:	f8ad 3004 	strh.w	r3, [sp, #4]
				le_sc_oob_config_set(smp, &info);
 8016102:	a901      	add	r1, sp, #4
 8016104:	4620      	mov	r0, r4
 8016106:	f009 f98a 	bl	801f41e <le_sc_oob_config_set>
				smp->oobd_local = NULL;
 801610a:	2300      	movs	r3, #0
 801610c:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
				smp->oobd_remote = NULL;
 8016110:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
				atomic_set_bit(smp->flags,
 8016114:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
 8016118:	f3bf 8f5b 	dmb	ish
 801611c:	e853 2f00 	ldrex	r2, [r3]
 8016120:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8016124:	e843 2100 	strex	r1, r2, [r3]
 8016128:	2900      	cmp	r1, #0
 801612a:	d1f7      	bne.n	801611c <smp_public_key+0x150>
 801612c:	f3bf 8f5b 	dmb	ish
				bt_auth->oob_data_request(smp->chan.chan.conn,
 8016130:	4b17      	ldr	r3, [pc, #92]	; (8016190 <smp_public_key+0x1c4>)
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	691b      	ldr	r3, [r3, #16]
 8016136:	a901      	add	r1, sp, #4
 8016138:	6820      	ldr	r0, [r4, #0]
 801613a:	4798      	blx	r3
			break;
 801613c:	e79e      	b.n	801607c <smp_public_key+0xb0>
	if (!sc_public_key) {
 801613e:	4b16      	ldr	r3, [pc, #88]	; (8016198 <smp_public_key+0x1cc>)
 8016140:	681b      	ldr	r3, [r3, #0]
 8016142:	b123      	cbz	r3, 801614e <smp_public_key+0x182>
	err = smp_public_key_slave(smp);
 8016144:	4620      	mov	r0, r4
 8016146:	f7ff fecf 	bl	8015ee8 <smp_public_key_slave>
}
 801614a:	b002      	add	sp, #8
 801614c:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
 801614e:	34bc      	adds	r4, #188	; 0xbc
 8016150:	f3bf 8f5b 	dmb	ish
 8016154:	e854 3f00 	ldrex	r3, [r4]
 8016158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801615c:	e844 3200 	strex	r2, r3, [r4]
 8016160:	2a00      	cmp	r2, #0
 8016162:	d1f7      	bne.n	8016154 <smp_public_key+0x188>
 8016164:	f3bf 8f5b 	dmb	ish
		return 0;
 8016168:	2000      	movs	r0, #0
 801616a:	e7ee      	b.n	801614a <smp_public_key+0x17e>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
 801616c:	2003      	movs	r0, #3
 801616e:	e7ec      	b.n	801614a <smp_public_key+0x17e>
		switch (smp->method) {
 8016170:	2008      	movs	r0, #8
 8016172:	e7ea      	b.n	801614a <smp_public_key+0x17e>
				return BT_SMP_ERR_UNSPECIFIED;
 8016174:	2008      	movs	r0, #8
 8016176:	e7e8      	b.n	801614a <smp_public_key+0x17e>
				return BT_SMP_ERR_OOB_NOT_AVAIL;
 8016178:	2002      	movs	r0, #2
 801617a:	e7e6      	b.n	801614a <smp_public_key+0x17e>
 801617c:	2002      	movs	r0, #2
 801617e:	e7e4      	b.n	801614a <smp_public_key+0x17e>
 8016180:	08027cc0 	.word	0x08027cc0
 8016184:	08022bf0 	.word	0x08022bf0
 8016188:	08022b90 	.word	0x08022b90
 801618c:	08027b50 	.word	0x08027b50
 8016190:	2000417c 	.word	0x2000417c
 8016194:	08022d68 	.word	0x08022d68
 8016198:	2000447c 	.word	0x2000447c

0801619c <smp_ident_info>:
{
 801619c:	b570      	push	{r4, r5, r6, lr}
 801619e:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80161a0:	f3bf 8f5b 	dmb	ish
 80161a4:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 80161a8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
 80161ac:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80161b0:	d00e      	beq.n	80161d0 <smp_ident_info+0x34>
		struct bt_smp_ident_info *req = (void *)buf->data;
 80161b2:	688e      	ldr	r6, [r1, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
 80161b4:	6803      	ldr	r3, [r0, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
 80161b6:	f103 0588 	add.w	r5, r3, #136	; 0x88
 80161ba:	462a      	mov	r2, r5
 80161bc:	7a19      	ldrb	r1, [r3, #8]
 80161be:	2002      	movs	r0, #2
 80161c0:	f009 fffc 	bl	80201bc <bt_keys_get_type>
		if (!keys) {
 80161c4:	b198      	cbz	r0, 80161ee <smp_ident_info+0x52>
		memcpy(keys->irk.val, req->irk, 16);
 80161c6:	2210      	movs	r2, #16
 80161c8:	4631      	mov	r1, r6
 80161ca:	302a      	adds	r0, #42	; 0x2a
 80161cc:	f006 fb6f 	bl	801c8ae <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
 80161d0:	34b8      	adds	r4, #184	; 0xb8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 80161d2:	f3bf 8f5b 	dmb	ish
 80161d6:	e854 3f00 	ldrex	r3, [r4]
 80161da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80161de:	e844 3200 	strex	r2, r3, [r4]
 80161e2:	2a00      	cmp	r2, #0
 80161e4:	d1f7      	bne.n	80161d6 <smp_ident_info+0x3a>
 80161e6:	f3bf 8f5b 	dmb	ish
	return 0;
 80161ea:	2000      	movs	r0, #0
}
 80161ec:	bd70      	pop	{r4, r5, r6, pc}
			BT_ERR("Unable to get keys for %s",
 80161ee:	f04f 0400 	mov.w	r4, #0
 80161f2:	2301      	movs	r3, #1
 80161f4:	f363 0402 	bfi	r4, r3, #0, #3
 80161f8:	f36f 04c5 	bfc	r4, #3, #3
 80161fc:	4b09      	ldr	r3, [pc, #36]	; (8016224 <smp_ident_info+0x88>)
 80161fe:	4a0a      	ldr	r2, [pc, #40]	; (8016228 <smp_ident_info+0x8c>)
 8016200:	1a9b      	subs	r3, r3, r2
 8016202:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8016206:	f363 148f 	bfi	r4, r3, #6, #10
 801620a:	4628      	mov	r0, r5
 801620c:	f7f5 fc9c 	bl	800bb48 <bt_addr_le_str_real>
 8016210:	f7ef ffc6 	bl	80061a0 <log_strdup>
 8016214:	4601      	mov	r1, r0
 8016216:	4622      	mov	r2, r4
 8016218:	4804      	ldr	r0, [pc, #16]	; (801622c <smp_ident_info+0x90>)
 801621a:	f7f0 f991 	bl	8006540 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
 801621e:	2008      	movs	r0, #8
 8016220:	e7e4      	b.n	80161ec <smp_ident_info+0x50>
 8016222:	bf00      	nop
 8016224:	08022bf0 	.word	0x08022bf0
 8016228:	08022b90 	.word	0x08022b90
 801622c:	08027b74 	.word	0x08027b74

08016230 <smp_ident_addr_info>:
{
 8016230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016234:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
 8016236:	6805      	ldr	r5, [r0, #0]
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
 8016238:	688e      	ldr	r6, [r1, #8]
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
 801623a:	7833      	ldrb	r3, [r6, #0]
 801623c:	b123      	cbz	r3, 8016248 <smp_ident_addr_info+0x18>
		return true;
	}

	return BT_ADDR_IS_STATIC(&addr->a);
 801623e:	79b3      	ldrb	r3, [r6, #6]
 8016240:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	if (!bt_addr_le_is_identity(&req->addr)) {
 8016244:	2bc0      	cmp	r3, #192	; 0xc0
 8016246:	d12e      	bne.n	80162a6 <smp_ident_addr_info+0x76>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8016248:	f3bf 8f5b 	dmb	ish
 801624c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8016250:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
 8016254:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8016258:	d153      	bne.n	8016302 <smp_ident_addr_info+0xd2>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
 801625a:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
 801625e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8016262:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
 8016266:	f013 0f04 	tst.w	r3, #4
 801626a:	d00d      	beq.n	8016288 <smp_ident_addr_info+0x58>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
 801626c:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8016270:	f3bf 8f5b 	dmb	ish
 8016274:	e853 2f00 	ldrex	r2, [r3]
 8016278:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801627c:	e843 2100 	strex	r1, r2, [r3]
 8016280:	2900      	cmp	r1, #0
 8016282:	d1f7      	bne.n	8016274 <smp_ident_addr_info+0x44>
 8016284:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
 8016288:	78eb      	ldrb	r3, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
 801628a:	b923      	cbnz	r3, 8016296 <smp_ident_addr_info+0x66>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
 801628c:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
 8016290:	2b00      	cmp	r3, #0
 8016292:	f000 808a 	beq.w	80163aa <smp_ident_addr_info+0x17a>
	if (!smp->local_dist && !smp->remote_dist) {
 8016296:	f8b4 31a0 	ldrh.w	r3, [r4, #416]	; 0x1a0
 801629a:	2b00      	cmp	r3, #0
 801629c:	f000 808c 	beq.w	80163b8 <smp_ident_addr_info+0x188>
	return 0;
 80162a0:	2000      	movs	r0, #0
}
 80162a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
 80162a6:	f04f 0801 	mov.w	r8, #1
 80162aa:	f04f 0700 	mov.w	r7, #0
 80162ae:	f368 0702 	bfi	r7, r8, #0, #3
 80162b2:	f36f 07c5 	bfc	r7, #3, #3
 80162b6:	4c43      	ldr	r4, [pc, #268]	; (80163c4 <smp_ident_addr_info+0x194>)
 80162b8:	4b43      	ldr	r3, [pc, #268]	; (80163c8 <smp_ident_addr_info+0x198>)
 80162ba:	1ae4      	subs	r4, r4, r3
 80162bc:	f3c4 04c9 	ubfx	r4, r4, #3, #10
 80162c0:	f364 178f 	bfi	r7, r4, #6, #10
 80162c4:	4630      	mov	r0, r6
 80162c6:	f7f5 fc3f 	bl	800bb48 <bt_addr_le_str_real>
 80162ca:	f7ef ff69 	bl	80061a0 <log_strdup>
 80162ce:	4601      	mov	r1, r0
 80162d0:	463a      	mov	r2, r7
 80162d2:	483e      	ldr	r0, [pc, #248]	; (80163cc <smp_ident_addr_info+0x19c>)
 80162d4:	f7f0 f934 	bl	8006540 <log_1>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
 80162d8:	f04f 0600 	mov.w	r6, #0
 80162dc:	f368 0602 	bfi	r6, r8, #0, #3
 80162e0:	f36f 06c5 	bfc	r6, #3, #3
 80162e4:	f364 168f 	bfi	r6, r4, #6, #10
 80162e8:	f105 0088 	add.w	r0, r5, #136	; 0x88
 80162ec:	f7f5 fc2c 	bl	800bb48 <bt_addr_le_str_real>
 80162f0:	f7ef ff56 	bl	80061a0 <log_strdup>
 80162f4:	4601      	mov	r1, r0
 80162f6:	4632      	mov	r2, r6
 80162f8:	4835      	ldr	r0, [pc, #212]	; (80163d0 <smp_ident_addr_info+0x1a0>)
 80162fa:	f7f0 f921 	bl	8006540 <log_1>
		return BT_SMP_ERR_INVALID_PARAMS;
 80162fe:	200a      	movs	r0, #10
 8016300:	e7cf      	b.n	80162a2 <smp_ident_addr_info+0x72>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
 8016302:	f105 0888 	add.w	r8, r5, #136	; 0x88
 8016306:	4642      	mov	r2, r8
 8016308:	7a29      	ldrb	r1, [r5, #8]
 801630a:	2002      	movs	r0, #2
 801630c:	f009 ff56 	bl	80201bc <bt_keys_get_type>
		if (!keys) {
 8016310:	4607      	mov	r7, r0
 8016312:	b178      	cbz	r0, 8016334 <smp_ident_addr_info+0x104>
		if (conn->role == BT_HCI_ROLE_MASTER) {
 8016314:	78eb      	ldrb	r3, [r5, #3]
 8016316:	bb3b      	cbnz	r3, 8016368 <smp_ident_addr_info+0x138>
			dst = &conn->le.resp_addr;
 8016318:	f105 0196 	add.w	r1, r5, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
 801631c:	780b      	ldrb	r3, [r1, #0]
 801631e:	2b01      	cmp	r3, #1
 8016320:	d104      	bne.n	801632c <smp_ident_addr_info+0xfc>
	return BT_ADDR_IS_RPA(&addr->a);
 8016322:	798b      	ldrb	r3, [r1, #6]
 8016324:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
		if (bt_addr_le_is_rpa(dst)) {
 8016328:	2b40      	cmp	r3, #64	; 0x40
 801632a:	d020      	beq.n	801636e <smp_ident_addr_info+0x13e>
		bt_id_add(keys);
 801632c:	4638      	mov	r0, r7
 801632e:	f7f7 fdb9 	bl	800dea4 <bt_id_add>
 8016332:	e792      	b.n	801625a <smp_ident_addr_info+0x2a>
			BT_ERR("Unable to get keys for %s",
 8016334:	f04f 0400 	mov.w	r4, #0
 8016338:	2301      	movs	r3, #1
 801633a:	f363 0402 	bfi	r4, r3, #0, #3
 801633e:	f36f 04c5 	bfc	r4, #3, #3
 8016342:	4b20      	ldr	r3, [pc, #128]	; (80163c4 <smp_ident_addr_info+0x194>)
 8016344:	4a20      	ldr	r2, [pc, #128]	; (80163c8 <smp_ident_addr_info+0x198>)
 8016346:	1a9b      	subs	r3, r3, r2
 8016348:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 801634c:	f363 148f 	bfi	r4, r3, #6, #10
 8016350:	4640      	mov	r0, r8
 8016352:	f7f5 fbf9 	bl	800bb48 <bt_addr_le_str_real>
 8016356:	f7ef ff23 	bl	80061a0 <log_strdup>
 801635a:	4601      	mov	r1, r0
 801635c:	4622      	mov	r2, r4
 801635e:	481d      	ldr	r0, [pc, #116]	; (80163d4 <smp_ident_addr_info+0x1a4>)
 8016360:	f7f0 f8ee 	bl	8006540 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
 8016364:	2008      	movs	r0, #8
 8016366:	e79c      	b.n	80162a2 <smp_ident_addr_info+0x72>
			dst = &conn->le.init_addr;
 8016368:	f105 018f 	add.w	r1, r5, #143	; 0x8f
 801636c:	e7d6      	b.n	801631c <smp_ident_addr_info+0xec>
	memcpy(dst, src, sizeof(*dst));
 801636e:	2206      	movs	r2, #6
 8016370:	3101      	adds	r1, #1
 8016372:	f107 003a 	add.w	r0, r7, #58	; 0x3a
 8016376:	f006 fa9a 	bl	801c8ae <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
 801637a:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
 801637e:	2b00      	cmp	r3, #0
 8016380:	d0d4      	beq.n	801632c <smp_ident_addr_info+0xfc>
	return BT_ADDR_IS_STATIC(&addr->a);
 8016382:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
 8016386:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
 801638a:	2bc0      	cmp	r3, #192	; 0xc0
 801638c:	d0ce      	beq.n	801632c <smp_ident_addr_info+0xfc>
	memcpy(dst, src, sizeof(*dst));
 801638e:	2207      	movs	r2, #7
 8016390:	4631      	mov	r1, r6
 8016392:	1c78      	adds	r0, r7, #1
 8016394:	f006 fa8b 	bl	801c8ae <memcpy>
 8016398:	2207      	movs	r2, #7
 801639a:	4631      	mov	r1, r6
 801639c:	4640      	mov	r0, r8
 801639e:	f006 fa86 	bl	801c8ae <memcpy>
				bt_conn_identity_resolved(conn);
 80163a2:	4628      	mov	r0, r5
 80163a4:	f7f9 fe80 	bl	80100a8 <bt_conn_identity_resolved>
 80163a8:	e7c0      	b.n	801632c <smp_ident_addr_info+0xfc>
		err = bt_smp_distribute_keys(smp);
 80163aa:	4620      	mov	r0, r4
 80163ac:	f7ff fc48 	bl	8015c40 <bt_smp_distribute_keys>
		if (err) {
 80163b0:	2800      	cmp	r0, #0
 80163b2:	f43f af70 	beq.w	8016296 <smp_ident_addr_info+0x66>
 80163b6:	e774      	b.n	80162a2 <smp_ident_addr_info+0x72>
		smp_pairing_complete(smp, 0);
 80163b8:	2100      	movs	r1, #0
 80163ba:	4620      	mov	r0, r4
 80163bc:	f7fe fda2 	bl	8014f04 <smp_pairing_complete>
	return 0;
 80163c0:	2000      	movs	r0, #0
 80163c2:	e76e      	b.n	80162a2 <smp_ident_addr_info+0x72>
 80163c4:	08022bf0 	.word	0x08022bf0
 80163c8:	08022b90 	.word	0x08022b90
 80163cc:	08027b90 	.word	0x08027b90
 80163d0:	08027ba4 	.word	0x08027ba4
 80163d4:	08027b74 	.word	0x08027b74

080163d8 <bt_smp_connected>:
{
 80163d8:	b510      	push	{r4, lr}
 80163da:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
 80163dc:	4904      	ldr	r1, [pc, #16]	; (80163f0 <bt_smp_connected+0x18>)
 80163de:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
 80163e2:	f00b ffc5 	bl	8022370 <k_delayed_work_init>
	smp_reset(smp);
 80163e6:	4620      	mov	r0, r4
 80163e8:	f009 f88a 	bl	801f500 <smp_reset>
}
 80163ec:	bd10      	pop	{r4, pc}
 80163ee:	bf00      	nop
 80163f0:	080150bd 	.word	0x080150bd

080163f4 <bt_smp_pkey_ready>:
{
 80163f4:	b538      	push	{r3, r4, r5, lr}
	sc_public_key = pkey;
 80163f6:	4b2e      	ldr	r3, [pc, #184]	; (80164b0 <bt_smp_pkey_ready+0xbc>)
 80163f8:	6018      	str	r0, [r3, #0]
	if (!pkey) {
 80163fa:	b120      	cbz	r0, 8016406 <bt_smp_pkey_ready+0x12>
	z_impl_k_sem_give(sem);
 80163fc:	482d      	ldr	r0, [pc, #180]	; (80164b4 <bt_smp_pkey_ready+0xc0>)
 80163fe:	f002 fc23 	bl	8018c48 <z_impl_k_sem_give>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
 8016402:	2400      	movs	r4, #0
 8016404:	e02b      	b.n	801645e <bt_smp_pkey_ready+0x6a>
		BT_WARN("Public key not available");
 8016406:	f04f 0100 	mov.w	r1, #0
 801640a:	2302      	movs	r3, #2
 801640c:	f363 0102 	bfi	r1, r3, #0, #3
 8016410:	f36f 01c5 	bfc	r1, #3, #3
 8016414:	4b28      	ldr	r3, [pc, #160]	; (80164b8 <bt_smp_pkey_ready+0xc4>)
 8016416:	4a29      	ldr	r2, [pc, #164]	; (80164bc <bt_smp_pkey_ready+0xc8>)
 8016418:	1a9b      	subs	r3, r3, r2
 801641a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 801641e:	f363 118f 	bfi	r1, r3, #6, #10
 8016422:	4827      	ldr	r0, [pc, #156]	; (80164c0 <bt_smp_pkey_ready+0xcc>)
 8016424:	f7f0 f9fc 	bl	8006820 <log_0>
}
 8016428:	bd38      	pop	{r3, r4, r5, pc}
			err = sc_send_public_key(smp);
 801642a:	4628      	mov	r0, r5
 801642c:	f7fe fd46 	bl	8014ebc <sc_send_public_key>
			if (err) {
 8016430:	4601      	mov	r1, r0
 8016432:	2800      	cmp	r0, #0
 8016434:	d137      	bne.n	80164a6 <bt_smp_pkey_ready+0xb2>
			atomic_set_bit(&smp->allowed_cmds,
 8016436:	f44f 73ec 	mov.w	r3, #472	; 0x1d8
 801643a:	fb03 f304 	mul.w	r3, r3, r4
 801643e:	33b8      	adds	r3, #184	; 0xb8
 8016440:	4a20      	ldr	r2, [pc, #128]	; (80164c4 <bt_smp_pkey_ready+0xd0>)
 8016442:	4413      	add	r3, r2
 8016444:	f3bf 8f5b 	dmb	ish
 8016448:	e853 2f00 	ldrex	r2, [r3]
 801644c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8016450:	e843 2100 	strex	r1, r2, [r3]
 8016454:	2900      	cmp	r1, #0
 8016456:	d1f7      	bne.n	8016448 <bt_smp_pkey_ready+0x54>
 8016458:	f3bf 8f5b 	dmb	ish
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
 801645c:	3401      	adds	r4, #1
 801645e:	2c05      	cmp	r4, #5
 8016460:	dce2      	bgt.n	8016428 <bt_smp_pkey_ready+0x34>
		struct bt_smp *smp = &bt_smp_pool[i];
 8016462:	4a18      	ldr	r2, [pc, #96]	; (80164c4 <bt_smp_pkey_ready+0xd0>)
 8016464:	f44f 73ec 	mov.w	r3, #472	; 0x1d8
 8016468:	fb03 f304 	mul.w	r3, r3, r4
 801646c:	18d5      	adds	r5, r2, r3
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
 801646e:	33b8      	adds	r3, #184	; 0xb8
 8016470:	4413      	add	r3, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8016472:	f3bf 8f5b 	dmb	ish
 8016476:	685b      	ldr	r3, [r3, #4]
 8016478:	f3bf 8f5b 	dmb	ish
 801647c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8016480:	d0ec      	beq.n	801645c <bt_smp_pkey_ready+0x68>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
 8016482:	f44f 73ec 	mov.w	r3, #472	; 0x1d8
 8016486:	fb03 f304 	mul.w	r3, r3, r4
 801648a:	58d3      	ldr	r3, [r2, r3]
 801648c:	78db      	ldrb	r3, [r3, #3]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
 801648e:	2b00      	cmp	r3, #0
 8016490:	d0cb      	beq.n	801642a <bt_smp_pkey_ready+0x36>
		err = smp_public_key_slave(smp);
 8016492:	4628      	mov	r0, r5
 8016494:	f7ff fd28 	bl	8015ee8 <smp_public_key_slave>
		if (err) {
 8016498:	4601      	mov	r1, r0
 801649a:	2800      	cmp	r0, #0
 801649c:	d0de      	beq.n	801645c <bt_smp_pkey_ready+0x68>
			smp_error(smp, err);
 801649e:	4628      	mov	r0, r5
 80164a0:	f009 fafc 	bl	801fa9c <smp_error>
 80164a4:	e7da      	b.n	801645c <bt_smp_pkey_ready+0x68>
				smp_error(smp, err);
 80164a6:	4628      	mov	r0, r5
 80164a8:	f009 faf8 	bl	801fa9c <smp_error>
 80164ac:	e7c3      	b.n	8016436 <bt_smp_pkey_ready+0x42>
 80164ae:	bf00      	nop
 80164b0:	2000447c 	.word	0x2000447c
 80164b4:	20001080 	.word	0x20001080
 80164b8:	08022bf0 	.word	0x08022bf0
 80164bc:	08022b90 	.word	0x08022b90
 80164c0:	08027bac 	.word	0x08027bac
 80164c4:	20002690 	.word	0x20002690

080164c8 <bt_smp_update_keys>:
{
 80164c8:	b570      	push	{r4, r5, r6, lr}
 80164ca:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
 80164cc:	f7fe fb10 	bl	8014af0 <smp_chan_get>
	if (!smp) {
 80164d0:	2800      	cmp	r0, #0
 80164d2:	d06f      	beq.n	80165b4 <bt_smp_update_keys+0xec>
 80164d4:	4605      	mov	r5, r0
 80164d6:	f3bf 8f5b 	dmb	ish
 80164da:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 80164de:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
 80164e2:	f013 0f08 	tst.w	r3, #8
 80164e6:	d065      	beq.n	80165b4 <bt_smp_update_keys+0xec>
	if (conn->le.keys) {
 80164e8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 80164ec:	b108      	cbz	r0, 80164f2 <bt_smp_update_keys+0x2a>
		bt_keys_clear(conn->le.keys);
 80164ee:	f000 f9e5 	bl	80168bc <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
 80164f2:	f104 0688 	add.w	r6, r4, #136	; 0x88
 80164f6:	4631      	mov	r1, r6
 80164f8:	7a20      	ldrb	r0, [r4, #8]
 80164fa:	f000 f8b7 	bl	801666c <bt_keys_get_addr>
 80164fe:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
 8016502:	b1d8      	cbz	r0, 801653c <bt_smp_update_keys+0x74>
 8016504:	f3bf 8f5b 	dmb	ish
 8016508:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
 801650c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
 8016510:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8016514:	d005      	beq.n	8016522 <bt_smp_update_keys+0x5a>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
 8016516:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 801651a:	7b53      	ldrb	r3, [r2, #13]
 801651c:	f043 0302 	orr.w	r3, r3, #2
 8016520:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
 8016522:	f895 30c0 	ldrb.w	r3, [r5, #192]	; 0xc0
 8016526:	2b03      	cmp	r3, #3
 8016528:	d825      	bhi.n	8016576 <bt_smp_update_keys+0xae>
 801652a:	b25b      	sxtb	r3, r3
 801652c:	bb3b      	cbnz	r3, 801657e <bt_smp_update_keys+0xb6>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
 801652e:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 8016532:	7b53      	ldrb	r3, [r2, #13]
 8016534:	f023 0301 	bic.w	r3, r3, #1
 8016538:	7353      	strb	r3, [r2, #13]
		break;
 801653a:	e026      	b.n	801658a <bt_smp_update_keys+0xc2>
		BT_ERR("Unable to get keys for %s",
 801653c:	f04f 0400 	mov.w	r4, #0
 8016540:	2301      	movs	r3, #1
 8016542:	f363 0402 	bfi	r4, r3, #0, #3
 8016546:	f36f 04c5 	bfc	r4, #3, #3
 801654a:	4b30      	ldr	r3, [pc, #192]	; (801660c <bt_smp_update_keys+0x144>)
 801654c:	4a30      	ldr	r2, [pc, #192]	; (8016610 <bt_smp_update_keys+0x148>)
 801654e:	1a9b      	subs	r3, r3, r2
 8016550:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8016554:	f363 148f 	bfi	r4, r3, #6, #10
 8016558:	4630      	mov	r0, r6
 801655a:	f7f5 faf5 	bl	800bb48 <bt_addr_le_str_real>
 801655e:	f7ef fe1f 	bl	80061a0 <log_strdup>
 8016562:	4601      	mov	r1, r0
 8016564:	4622      	mov	r2, r4
 8016566:	482b      	ldr	r0, [pc, #172]	; (8016614 <bt_smp_update_keys+0x14c>)
 8016568:	f7ef ffea 	bl	8006540 <log_1>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
 801656c:	2108      	movs	r1, #8
 801656e:	4628      	mov	r0, r5
 8016570:	f009 fa94 	bl	801fa9c <smp_error>
		return;
 8016574:	e01e      	b.n	80165b4 <bt_smp_update_keys+0xec>
	switch (smp->method) {
 8016576:	3b05      	subs	r3, #5
 8016578:	b2db      	uxtb	r3, r3
 801657a:	2b01      	cmp	r3, #1
 801657c:	d8d7      	bhi.n	801652e <bt_smp_update_keys+0x66>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
 801657e:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 8016582:	7b53      	ldrb	r3, [r2, #13]
 8016584:	f043 0301 	orr.w	r3, r3, #1
 8016588:	7353      	strb	r3, [r2, #13]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
 801658a:	f8d4 60b4 	ldr.w	r6, [r4, #180]	; 0xb4
 801658e:	4628      	mov	r0, r5
 8016590:	f008 ff2e 	bl	801f3f0 <get_encryption_key_size>
 8016594:	7330      	strb	r0, [r6, #12]
 8016596:	f3bf 8f5b 	dmb	ish
 801659a:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
 801659e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
 80165a2:	f013 0f20 	tst.w	r3, #32
 80165a6:	d106      	bne.n	80165b6 <bt_smp_update_keys+0xee>
		conn->le.keys->flags &= ~BT_KEYS_SC;
 80165a8:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 80165ac:	7b53      	ldrb	r3, [r2, #13]
 80165ae:	f023 0310 	bic.w	r3, r3, #16
 80165b2:	7353      	strb	r3, [r2, #13]
}
 80165b4:	bd70      	pop	{r4, r5, r6, pc}
		conn->le.keys->flags |= BT_KEYS_SC;
 80165b6:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 80165ba:	7b53      	ldrb	r3, [r2, #13]
 80165bc:	f043 0310 	orr.w	r3, r3, #16
 80165c0:	7353      	strb	r3, [r2, #13]
 80165c2:	f3bf 8f5b 	dmb	ish
 80165c6:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
 80165ca:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
 80165ce:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80165d2:	d0ef      	beq.n	80165b4 <bt_smp_update_keys+0xec>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
 80165d4:	2120      	movs	r1, #32
 80165d6:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 80165da:	f009 fdeb 	bl	80201b4 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
 80165de:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 80165e2:	2210      	movs	r2, #16
 80165e4:	f105 01ff 	add.w	r1, r5, #255	; 0xff
 80165e8:	301a      	adds	r0, #26
 80165ea:	f006 f960 	bl	801c8ae <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
 80165ee:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 80165f2:	2208      	movs	r2, #8
 80165f4:	2100      	movs	r1, #0
 80165f6:	3010      	adds	r0, #16
 80165f8:	f006 f97e 	bl	801c8f8 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
 80165fc:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8016600:	2202      	movs	r2, #2
 8016602:	2100      	movs	r1, #0
 8016604:	3018      	adds	r0, #24
 8016606:	f006 f977 	bl	801c8f8 <memset>
 801660a:	e7d3      	b.n	80165b4 <bt_smp_update_keys+0xec>
 801660c:	08022bf0 	.word	0x08022bf0
 8016610:	08022b90 	.word	0x08022b90
 8016614:	08027b74 	.word	0x08027b74

08016618 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
 8016618:	b508      	push	{r3, lr}
	static struct bt_pub_key_cb pub_key_cb = {
		.func           = bt_smp_pkey_ready,
	};

	sc_supported = le_sc_supported();
 801661a:	f7fe f989 	bl	8014930 <le_sc_supported>
 801661e:	4b0e      	ldr	r3, [pc, #56]	; (8016658 <bt_smp_init+0x40>)
 8016620:	7018      	strb	r0, [r3, #0]
	if (IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) && !sc_supported) {
 8016622:	b120      	cbz	r0, 801662e <bt_smp_init+0x16>
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
 8016624:	480d      	ldr	r0, [pc, #52]	; (801665c <bt_smp_init+0x44>)
 8016626:	f7f9 fa3b 	bl	800faa0 <bt_pub_key_gen>
	}

	return smp_self_test();
 801662a:	2000      	movs	r0, #0
}
 801662c:	bd08      	pop	{r3, pc}
		BT_ERR("SC Pair Only Mode selected but LE SC not supported");
 801662e:	f04f 0100 	mov.w	r1, #0
 8016632:	2301      	movs	r3, #1
 8016634:	f363 0102 	bfi	r1, r3, #0, #3
 8016638:	f36f 01c5 	bfc	r1, #3, #3
 801663c:	4b08      	ldr	r3, [pc, #32]	; (8016660 <bt_smp_init+0x48>)
 801663e:	4a09      	ldr	r2, [pc, #36]	; (8016664 <bt_smp_init+0x4c>)
 8016640:	1a9b      	subs	r3, r3, r2
 8016642:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8016646:	f363 118f 	bfi	r1, r3, #6, #10
 801664a:	4807      	ldr	r0, [pc, #28]	; (8016668 <bt_smp_init+0x50>)
 801664c:	f7f0 f8e8 	bl	8006820 <log_0>
		return -ENOENT;
 8016650:	f06f 0001 	mvn.w	r0, #1
 8016654:	e7ea      	b.n	801662c <bt_smp_init+0x14>
 8016656:	bf00      	nop
 8016658:	2000596f 	.word	0x2000596f
 801665c:	20000cc0 	.word	0x20000cc0
 8016660:	08022bf0 	.word	0x08022bf0
 8016664:	08022b90 	.word	0x08022b90
 8016668:	08027bc8 	.word	0x08027bc8

0801666c <bt_keys_get_addr>:
static uint32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
 801666c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016670:	b082      	sub	sp, #8
 8016672:	4605      	mov	r5, r0
 8016674:	4688      	mov	r8, r1
	struct bt_keys *keys;
	int i;
	size_t first_free_slot = ARRAY_SIZE(key_pool);
 8016676:	2606      	movs	r6, #6

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
 8016678:	2400      	movs	r4, #0
 801667a:	e008      	b.n	801668e <bt_keys_get_addr+0x22>
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
 801667c:	4638      	mov	r0, r7
	return memcmp(a, b, sizeof(*a));
 801667e:	2207      	movs	r2, #7
 8016680:	4641      	mov	r1, r8
 8016682:	3001      	adds	r0, #1
 8016684:	f006 f8fb 	bl	801c87e <memcmp>
 8016688:	b950      	cbnz	r0, 80166a0 <bt_keys_get_addr+0x34>
 801668a:	e01e      	b.n	80166ca <bt_keys_get_addr+0x5e>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
 801668c:	3401      	adds	r4, #1
 801668e:	2c05      	cmp	r4, #5
 8016690:	dc18      	bgt.n	80166c4 <bt_keys_get_addr+0x58>
		keys = &key_pool[i];
 8016692:	4a15      	ldr	r2, [pc, #84]	; (80166e8 <bt_keys_get_addr+0x7c>)
 8016694:	01a3      	lsls	r3, r4, #6
 8016696:	eb02 1784 	add.w	r7, r2, r4, lsl #6
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
 801669a:	5cd3      	ldrb	r3, [r2, r3]
 801669c:	42ab      	cmp	r3, r5
 801669e:	d0ed      	beq.n	801667c <bt_keys_get_addr+0x10>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
 80166a0:	2e06      	cmp	r6, #6
 80166a2:	d1f3      	bne.n	801668c <bt_keys_get_addr+0x20>
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
 80166a4:	4810      	ldr	r0, [pc, #64]	; (80166e8 <bt_keys_get_addr+0x7c>)
 80166a6:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 80166aa:	2300      	movs	r3, #0
 80166ac:	9300      	str	r3, [sp, #0]
 80166ae:	f8cd 3003 	str.w	r3, [sp, #3]
 80166b2:	2207      	movs	r2, #7
 80166b4:	4669      	mov	r1, sp
 80166b6:	3001      	adds	r0, #1
 80166b8:	f006 f8e1 	bl	801c87e <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
 80166bc:	2800      	cmp	r0, #0
 80166be:	d1e5      	bne.n	801668c <bt_keys_get_addr+0x20>
			first_free_slot = i;
 80166c0:	4626      	mov	r6, r4
 80166c2:	e7e3      	b.n	801668c <bt_keys_get_addr+0x20>
			first_free_slot = oldest - &key_pool[0];
		}
	}

#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
 80166c4:	2e05      	cmp	r6, #5
 80166c6:	d904      	bls.n	80166d2 <bt_keys_get_addr+0x66>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
 80166c8:	2700      	movs	r7, #0
}
 80166ca:	4638      	mov	r0, r7
 80166cc:	b002      	add	sp, #8
 80166ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		keys = &key_pool[first_free_slot];
 80166d2:	4b05      	ldr	r3, [pc, #20]	; (80166e8 <bt_keys_get_addr+0x7c>)
 80166d4:	01b2      	lsls	r2, r6, #6
 80166d6:	eb03 1786 	add.w	r7, r3, r6, lsl #6
		keys->id = id;
 80166da:	549d      	strb	r5, [r3, r2]
	memcpy(dst, src, sizeof(*dst));
 80166dc:	2207      	movs	r2, #7
 80166de:	4641      	mov	r1, r8
 80166e0:	1c78      	adds	r0, r7, #1
 80166e2:	f006 f8e4 	bl	801c8ae <memcpy>
		return keys;
 80166e6:	e7f0      	b.n	80166ca <bt_keys_get_addr+0x5e>
 80166e8:	20004480 	.word	0x20004480

080166ec <bt_foreach_bond>:

void bt_foreach_bond(uint8_t id, void (*func)(const struct bt_bond_info *info,
					   void *user_data),
		     void *user_data)
{
 80166ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166ee:	b083      	sub	sp, #12
 80166f0:	4605      	mov	r5, r0
 80166f2:	460f      	mov	r7, r1
 80166f4:	4616      	mov	r6, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
 80166f6:	2400      	movs	r4, #0
 80166f8:	e00a      	b.n	8016710 <bt_foreach_bond+0x24>
		struct bt_keys *keys = &key_pool[i];

		if (keys->keys && keys->id == id) {
			struct bt_bond_info info;

			bt_addr_le_copy(&info.addr, &keys->addr);
 80166fa:	eb02 1184 	add.w	r1, r2, r4, lsl #6
 80166fe:	2207      	movs	r2, #7
 8016700:	3101      	adds	r1, #1
 8016702:	4668      	mov	r0, sp
 8016704:	f006 f8d3 	bl	801c8ae <memcpy>
			func(&info, user_data);
 8016708:	4631      	mov	r1, r6
 801670a:	4668      	mov	r0, sp
 801670c:	47b8      	blx	r7
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
 801670e:	3401      	adds	r4, #1
 8016710:	2c05      	cmp	r4, #5
 8016712:	dc0b      	bgt.n	801672c <bt_foreach_bond+0x40>
		if (keys->keys && keys->id == id) {
 8016714:	4b06      	ldr	r3, [pc, #24]	; (8016730 <bt_foreach_bond+0x44>)
 8016716:	eb03 1384 	add.w	r3, r3, r4, lsl #6
 801671a:	89db      	ldrh	r3, [r3, #14]
 801671c:	2b00      	cmp	r3, #0
 801671e:	d0f6      	beq.n	801670e <bt_foreach_bond+0x22>
 8016720:	01a3      	lsls	r3, r4, #6
 8016722:	4a03      	ldr	r2, [pc, #12]	; (8016730 <bt_foreach_bond+0x44>)
 8016724:	5cd3      	ldrb	r3, [r2, r3]
 8016726:	42ab      	cmp	r3, r5
 8016728:	d1f1      	bne.n	801670e <bt_foreach_bond+0x22>
 801672a:	e7e6      	b.n	80166fa <bt_foreach_bond+0xe>
		}
	}
}
 801672c:	b003      	add	sp, #12
 801672e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016730:	20004480 	.word	0x20004480

08016734 <bt_keys_foreach>:

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
 8016734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016736:	4605      	mov	r5, r0
 8016738:	460f      	mov	r7, r1
 801673a:	4616      	mov	r6, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
 801673c:	2400      	movs	r4, #0
 801673e:	e000      	b.n	8016742 <bt_keys_foreach+0xe>
 8016740:	3401      	adds	r4, #1
 8016742:	2c05      	cmp	r4, #5
 8016744:	dc0b      	bgt.n	801675e <bt_keys_foreach+0x2a>
		if ((key_pool[i].keys & type)) {
 8016746:	4b06      	ldr	r3, [pc, #24]	; (8016760 <bt_keys_foreach+0x2c>)
 8016748:	eb03 1384 	add.w	r3, r3, r4, lsl #6
 801674c:	89db      	ldrh	r3, [r3, #14]
 801674e:	422b      	tst	r3, r5
 8016750:	d0f6      	beq.n	8016740 <bt_keys_foreach+0xc>
			func(&key_pool[i], data);
 8016752:	4631      	mov	r1, r6
 8016754:	4802      	ldr	r0, [pc, #8]	; (8016760 <bt_keys_foreach+0x2c>)
 8016756:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 801675a:	47b8      	blx	r7
 801675c:	e7f0      	b.n	8016740 <bt_keys_foreach+0xc>
		}
	}
}
 801675e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016760:	20004480 	.word	0x20004480

08016764 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
 8016764:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
 8016766:	2200      	movs	r2, #0
 8016768:	4902      	ldr	r1, [pc, #8]	; (8016774 <keys_commit+0x10>)
 801676a:	2002      	movs	r0, #2
 801676c:	f7ff ffe2 	bl	8016734 <bt_keys_foreach>
	}

	return 0;
}
 8016770:	2000      	movs	r0, #0
 8016772:	bd08      	pop	{r3, pc}
 8016774:	080201ad 	.word	0x080201ad

08016778 <bt_keys_find>:
{
 8016778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801677a:	4605      	mov	r5, r0
 801677c:	460e      	mov	r6, r1
 801677e:	4617      	mov	r7, r2
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
 8016780:	2400      	movs	r4, #0
 8016782:	e000      	b.n	8016786 <bt_keys_find+0xe>
 8016784:	3401      	adds	r4, #1
 8016786:	2c05      	cmp	r4, #5
 8016788:	dc17      	bgt.n	80167ba <bt_keys_find+0x42>
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
 801678a:	4b0d      	ldr	r3, [pc, #52]	; (80167c0 <bt_keys_find+0x48>)
 801678c:	eb03 1384 	add.w	r3, r3, r4, lsl #6
 8016790:	89db      	ldrh	r3, [r3, #14]
 8016792:	421d      	tst	r5, r3
 8016794:	d0f6      	beq.n	8016784 <bt_keys_find+0xc>
 8016796:	01a3      	lsls	r3, r4, #6
 8016798:	4a09      	ldr	r2, [pc, #36]	; (80167c0 <bt_keys_find+0x48>)
 801679a:	5cd3      	ldrb	r3, [r2, r3]
 801679c:	429e      	cmp	r6, r3
 801679e:	d1f1      	bne.n	8016784 <bt_keys_find+0xc>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
 80167a0:	eb02 1084 	add.w	r0, r2, r4, lsl #6
	return memcmp(a, b, sizeof(*a));
 80167a4:	2207      	movs	r2, #7
 80167a6:	4639      	mov	r1, r7
 80167a8:	3001      	adds	r0, #1
 80167aa:	f006 f868 	bl	801c87e <memcmp>
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
 80167ae:	2800      	cmp	r0, #0
 80167b0:	d1e8      	bne.n	8016784 <bt_keys_find+0xc>
			return &key_pool[i];
 80167b2:	4803      	ldr	r0, [pc, #12]	; (80167c0 <bt_keys_find+0x48>)
 80167b4:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 80167b8:	e000      	b.n	80167bc <bt_keys_find+0x44>
	return NULL;
 80167ba:	2000      	movs	r0, #0
}
 80167bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167be:	bf00      	nop
 80167c0:	20004480 	.word	0x20004480

080167c4 <bt_keys_find_irk>:
{
 80167c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
 80167c6:	780b      	ldrb	r3, [r1, #0]
 80167c8:	2b01      	cmp	r3, #1
 80167ca:	d154      	bne.n	8016876 <bt_keys_find_irk+0xb2>
 80167cc:	4605      	mov	r5, r0
 80167ce:	460e      	mov	r6, r1
	return BT_ADDR_IS_RPA(&addr->a);
 80167d0:	798b      	ldrb	r3, [r1, #6]
 80167d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	if (!bt_addr_le_is_rpa(addr)) {
 80167d6:	2b40      	cmp	r3, #64	; 0x40
 80167d8:	d101      	bne.n	80167de <bt_keys_find_irk+0x1a>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
 80167da:	2400      	movs	r4, #0
 80167dc:	e002      	b.n	80167e4 <bt_keys_find_irk+0x20>
		return NULL;
 80167de:	2000      	movs	r0, #0
 80167e0:	e04a      	b.n	8016878 <bt_keys_find_irk+0xb4>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
 80167e2:	3401      	adds	r4, #1
 80167e4:	2c05      	cmp	r4, #5
 80167e6:	dc1b      	bgt.n	8016820 <bt_keys_find_irk+0x5c>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
 80167e8:	4b24      	ldr	r3, [pc, #144]	; (801687c <bt_keys_find_irk+0xb8>)
 80167ea:	eb03 1384 	add.w	r3, r3, r4, lsl #6
 80167ee:	89db      	ldrh	r3, [r3, #14]
 80167f0:	f013 0f02 	tst.w	r3, #2
 80167f4:	d0f5      	beq.n	80167e2 <bt_keys_find_irk+0x1e>
		if (key_pool[i].id == id &&
 80167f6:	01a3      	lsls	r3, r4, #6
 80167f8:	4a20      	ldr	r2, [pc, #128]	; (801687c <bt_keys_find_irk+0xb8>)
 80167fa:	5cd3      	ldrb	r3, [r2, r3]
 80167fc:	42ab      	cmp	r3, r5
 80167fe:	d1f0      	bne.n	80167e2 <bt_keys_find_irk+0x1e>
		    !bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
 8016800:	01a1      	lsls	r1, r4, #6
 8016802:	f101 0338 	add.w	r3, r1, #56	; 0x38
 8016806:	4611      	mov	r1, r2
 8016808:	4419      	add	r1, r3
	return memcmp(a, b, sizeof(*a));
 801680a:	2206      	movs	r2, #6
 801680c:	3102      	adds	r1, #2
 801680e:	1c70      	adds	r0, r6, #1
 8016810:	f006 f835 	bl	801c87e <memcmp>
		if (key_pool[i].id == id &&
 8016814:	2800      	cmp	r0, #0
 8016816:	d1e4      	bne.n	80167e2 <bt_keys_find_irk+0x1e>
			return &key_pool[i];
 8016818:	4818      	ldr	r0, [pc, #96]	; (801687c <bt_keys_find_irk+0xb8>)
 801681a:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 801681e:	e02b      	b.n	8016878 <bt_keys_find_irk+0xb4>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
 8016820:	2400      	movs	r4, #0
 8016822:	e000      	b.n	8016826 <bt_keys_find_irk+0x62>
 8016824:	3401      	adds	r4, #1
 8016826:	2c05      	cmp	r4, #5
 8016828:	dc23      	bgt.n	8016872 <bt_keys_find_irk+0xae>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
 801682a:	4b14      	ldr	r3, [pc, #80]	; (801687c <bt_keys_find_irk+0xb8>)
 801682c:	eb03 1384 	add.w	r3, r3, r4, lsl #6
 8016830:	89db      	ldrh	r3, [r3, #14]
 8016832:	f013 0f02 	tst.w	r3, #2
 8016836:	d0f5      	beq.n	8016824 <bt_keys_find_irk+0x60>
		if (key_pool[i].id != id) {
 8016838:	01a3      	lsls	r3, r4, #6
 801683a:	4a10      	ldr	r2, [pc, #64]	; (801687c <bt_keys_find_irk+0xb8>)
 801683c:	5cd3      	ldrb	r3, [r2, r3]
 801683e:	42ab      	cmp	r3, r5
 8016840:	d1f0      	bne.n	8016824 <bt_keys_find_irk+0x60>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
 8016842:	01a0      	lsls	r0, r4, #6
 8016844:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8016848:	4610      	mov	r0, r2
 801684a:	4418      	add	r0, r3
 801684c:	1c77      	adds	r7, r6, #1
 801684e:	4639      	mov	r1, r7
 8016850:	3002      	adds	r0, #2
 8016852:	f006 f8a1 	bl	801c998 <bt_rpa_irk_matches>
 8016856:	2800      	cmp	r0, #0
 8016858:	d0e4      	beq.n	8016824 <bt_keys_find_irk+0x60>
			bt_addr_copy(&key_pool[i].irk.rpa, &addr->a);
 801685a:	4d08      	ldr	r5, [pc, #32]	; (801687c <bt_keys_find_irk+0xb8>)
 801685c:	01a4      	lsls	r4, r4, #6
 801685e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8016862:	4428      	add	r0, r5
	memcpy(dst, src, sizeof(*dst));
 8016864:	2206      	movs	r2, #6
 8016866:	4639      	mov	r1, r7
 8016868:	3002      	adds	r0, #2
 801686a:	f006 f820 	bl	801c8ae <memcpy>
			return &key_pool[i];
 801686e:	1928      	adds	r0, r5, r4
 8016870:	e002      	b.n	8016878 <bt_keys_find_irk+0xb4>
	return NULL;
 8016872:	2000      	movs	r0, #0
 8016874:	e000      	b.n	8016878 <bt_keys_find_irk+0xb4>
		return NULL;
 8016876:	2000      	movs	r0, #0
}
 8016878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801687a:	bf00      	nop
 801687c:	20004480 	.word	0x20004480

08016880 <bt_keys_find_addr>:
{
 8016880:	b570      	push	{r4, r5, r6, lr}
 8016882:	4605      	mov	r5, r0
 8016884:	460e      	mov	r6, r1
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
 8016886:	2400      	movs	r4, #0
 8016888:	e000      	b.n	801688c <bt_keys_find_addr+0xc>
 801688a:	3401      	adds	r4, #1
 801688c:	2c05      	cmp	r4, #5
 801688e:	dc11      	bgt.n	80168b4 <bt_keys_find_addr+0x34>
		if (key_pool[i].id == id &&
 8016890:	01a3      	lsls	r3, r4, #6
 8016892:	4a09      	ldr	r2, [pc, #36]	; (80168b8 <bt_keys_find_addr+0x38>)
 8016894:	5cd3      	ldrb	r3, [r2, r3]
 8016896:	429d      	cmp	r5, r3
 8016898:	d1f7      	bne.n	801688a <bt_keys_find_addr+0xa>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
 801689a:	eb02 1084 	add.w	r0, r2, r4, lsl #6
	return memcmp(a, b, sizeof(*a));
 801689e:	2207      	movs	r2, #7
 80168a0:	4631      	mov	r1, r6
 80168a2:	3001      	adds	r0, #1
 80168a4:	f005 ffeb 	bl	801c87e <memcmp>
		if (key_pool[i].id == id &&
 80168a8:	2800      	cmp	r0, #0
 80168aa:	d1ee      	bne.n	801688a <bt_keys_find_addr+0xa>
			return &key_pool[i];
 80168ac:	4802      	ldr	r0, [pc, #8]	; (80168b8 <bt_keys_find_addr+0x38>)
 80168ae:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 80168b2:	e000      	b.n	80168b6 <bt_keys_find_addr+0x36>
	return NULL;
 80168b4:	2000      	movs	r0, #0
}
 80168b6:	bd70      	pop	{r4, r5, r6, pc}
 80168b8:	20004480 	.word	0x20004480

080168bc <bt_keys_clear>:
{
 80168bc:	b530      	push	{r4, r5, lr}
 80168be:	b08d      	sub	sp, #52	; 0x34
 80168c0:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
 80168c2:	7a03      	ldrb	r3, [r0, #8]
 80168c4:	f013 0f04 	tst.w	r3, #4
 80168c8:	d117      	bne.n	80168fa <bt_keys_clear+0x3e>
		if (keys->id) {
 80168ca:	7822      	ldrb	r2, [r4, #0]
 80168cc:	b1c2      	cbz	r2, 8016900 <bt_keys_clear+0x44>
			u8_to_dec(id, sizeof(id), keys->id);
 80168ce:	ad02      	add	r5, sp, #8
 80168d0:	2104      	movs	r1, #4
 80168d2:	4628      	mov	r0, r5
 80168d4:	f7ee fc6e 	bl	80051b4 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
 80168d8:	9500      	str	r5, [sp, #0]
 80168da:	1c63      	adds	r3, r4, #1
 80168dc:	4a0d      	ldr	r2, [pc, #52]	; (8016914 <bt_keys_clear+0x58>)
 80168de:	2124      	movs	r1, #36	; 0x24
 80168e0:	a803      	add	r0, sp, #12
 80168e2:	f7f5 fa55 	bl	800bd90 <bt_settings_encode_key>
		settings_delete(key);
 80168e6:	a803      	add	r0, sp, #12
 80168e8:	f005 f822 	bl	801b930 <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
 80168ec:	2240      	movs	r2, #64	; 0x40
 80168ee:	2100      	movs	r1, #0
 80168f0:	4620      	mov	r0, r4
 80168f2:	f006 f801 	bl	801c8f8 <memset>
}
 80168f6:	b00d      	add	sp, #52	; 0x34
 80168f8:	bd30      	pop	{r4, r5, pc}
		bt_id_del(keys);
 80168fa:	f7f7 fbc1 	bl	800e080 <bt_id_del>
 80168fe:	e7e4      	b.n	80168ca <bt_keys_clear+0xe>
			bt_settings_encode_key(key, sizeof(key), "keys",
 8016900:	2300      	movs	r3, #0
 8016902:	9300      	str	r3, [sp, #0]
 8016904:	1c63      	adds	r3, r4, #1
 8016906:	4a03      	ldr	r2, [pc, #12]	; (8016914 <bt_keys_clear+0x58>)
 8016908:	2124      	movs	r1, #36	; 0x24
 801690a:	a803      	add	r0, sp, #12
 801690c:	f7f5 fa40 	bl	800bd90 <bt_settings_encode_key>
 8016910:	e7e9      	b.n	80168e6 <bt_keys_clear+0x2a>
 8016912:	bf00      	nop
 8016914:	08027d00 	.word	0x08027d00

08016918 <keys_set>:
{
 8016918:	b570      	push	{r4, r5, r6, lr}
 801691a:	b090      	sub	sp, #64	; 0x40
	if (!name) {
 801691c:	b368      	cbz	r0, 801697a <keys_set+0x62>
 801691e:	4614      	mov	r4, r2
 8016920:	4605      	mov	r5, r0
	len = read_cb(cb_arg, val, sizeof(val));
 8016922:	2234      	movs	r2, #52	; 0x34
 8016924:	a901      	add	r1, sp, #4
 8016926:	4618      	mov	r0, r3
 8016928:	47a0      	blx	r4
	if (len < 0) {
 801692a:	1e04      	subs	r4, r0, #0
 801692c:	db39      	blt.n	80169a2 <keys_set+0x8a>
	err = bt_settings_decode_key(name, &addr);
 801692e:	a90e      	add	r1, sp, #56	; 0x38
 8016930:	4628      	mov	r0, r5
 8016932:	f006 f845 	bl	801c9c0 <bt_settings_decode_key>
	if (err) {
 8016936:	4606      	mov	r6, r0
 8016938:	2800      	cmp	r0, #0
 801693a:	d147      	bne.n	80169cc <keys_set+0xb4>
	settings_name_next(name, &next);
 801693c:	4669      	mov	r1, sp
 801693e:	4628      	mov	r0, r5
 8016940:	f005 f827 	bl	801b992 <settings_name_next>
	if (!next) {
 8016944:	9800      	ldr	r0, [sp, #0]
 8016946:	2800      	cmp	r0, #0
 8016948:	d055      	beq.n	80169f6 <keys_set+0xde>
		id = strtol(next, NULL, 10);
 801694a:	220a      	movs	r2, #10
 801694c:	2100      	movs	r1, #0
 801694e:	f005 fe32 	bl	801c5b6 <strtol>
 8016952:	b2c0      	uxtb	r0, r0
	if (!len) {
 8016954:	2c00      	cmp	r4, #0
 8016956:	d050      	beq.n	80169fa <keys_set+0xe2>
	keys = bt_keys_get_addr(id, &addr);
 8016958:	a90e      	add	r1, sp, #56	; 0x38
 801695a:	f7ff fe87 	bl	801666c <bt_keys_get_addr>
	if (!keys) {
 801695e:	4605      	mov	r5, r0
 8016960:	2800      	cmp	r0, #0
 8016962:	d06f      	beq.n	8016a44 <keys_set+0x12c>
	if (len != BT_KEYS_STORAGE_LEN) {
 8016964:	2c34      	cmp	r4, #52	; 0x34
 8016966:	f040 8088 	bne.w	8016a7a <keys_set+0x162>
		memcpy(keys->storage_start, val, len);
 801696a:	4622      	mov	r2, r4
 801696c:	a901      	add	r1, sp, #4
 801696e:	300c      	adds	r0, #12
 8016970:	f005 ff9d 	bl	801c8ae <memcpy>
}
 8016974:	4630      	mov	r0, r6
 8016976:	b010      	add	sp, #64	; 0x40
 8016978:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Insufficient number of arguments");
 801697a:	f04f 0100 	mov.w	r1, #0
 801697e:	2301      	movs	r3, #1
 8016980:	f363 0102 	bfi	r1, r3, #0, #3
 8016984:	f36f 01c5 	bfc	r1, #3, #3
 8016988:	4b48      	ldr	r3, [pc, #288]	; (8016aac <keys_set+0x194>)
 801698a:	4a49      	ldr	r2, [pc, #292]	; (8016ab0 <keys_set+0x198>)
 801698c:	1a9b      	subs	r3, r3, r2
 801698e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8016992:	f363 118f 	bfi	r1, r3, #6, #10
 8016996:	4847      	ldr	r0, [pc, #284]	; (8016ab4 <keys_set+0x19c>)
 8016998:	f7ef ff42 	bl	8006820 <log_0>
		return -EINVAL;
 801699c:	f06f 0615 	mvn.w	r6, #21
 80169a0:	e7e8      	b.n	8016974 <keys_set+0x5c>
		BT_ERR("Failed to read value (err %zd)", len);
 80169a2:	f04f 0200 	mov.w	r2, #0
 80169a6:	2301      	movs	r3, #1
 80169a8:	f363 0202 	bfi	r2, r3, #0, #3
 80169ac:	f36f 02c5 	bfc	r2, #3, #3
 80169b0:	4b3e      	ldr	r3, [pc, #248]	; (8016aac <keys_set+0x194>)
 80169b2:	493f      	ldr	r1, [pc, #252]	; (8016ab0 <keys_set+0x198>)
 80169b4:	1a5b      	subs	r3, r3, r1
 80169b6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80169ba:	f363 128f 	bfi	r2, r3, #6, #10
 80169be:	4621      	mov	r1, r4
 80169c0:	483d      	ldr	r0, [pc, #244]	; (8016ab8 <keys_set+0x1a0>)
 80169c2:	f7ef fdbd 	bl	8006540 <log_1>
		return -EINVAL;
 80169c6:	f06f 0615 	mvn.w	r6, #21
 80169ca:	e7d3      	b.n	8016974 <keys_set+0x5c>
		BT_ERR("Unable to decode address %s", name);
 80169cc:	f04f 0200 	mov.w	r2, #0
 80169d0:	2301      	movs	r3, #1
 80169d2:	f363 0202 	bfi	r2, r3, #0, #3
 80169d6:	f36f 02c5 	bfc	r2, #3, #3
 80169da:	4b34      	ldr	r3, [pc, #208]	; (8016aac <keys_set+0x194>)
 80169dc:	4934      	ldr	r1, [pc, #208]	; (8016ab0 <keys_set+0x198>)
 80169de:	1a5b      	subs	r3, r3, r1
 80169e0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80169e4:	f363 128f 	bfi	r2, r3, #6, #10
 80169e8:	4629      	mov	r1, r5
 80169ea:	4834      	ldr	r0, [pc, #208]	; (8016abc <keys_set+0x1a4>)
 80169ec:	f7ef fda8 	bl	8006540 <log_1>
		return -EINVAL;
 80169f0:	f06f 0615 	mvn.w	r6, #21
 80169f4:	e7be      	b.n	8016974 <keys_set+0x5c>
		id = BT_ID_DEFAULT;
 80169f6:	2000      	movs	r0, #0
 80169f8:	e7ac      	b.n	8016954 <keys_set+0x3c>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
 80169fa:	aa0e      	add	r2, sp, #56	; 0x38
 80169fc:	4601      	mov	r1, r0
 80169fe:	203f      	movs	r0, #63	; 0x3f
 8016a00:	f7ff feba 	bl	8016778 <bt_keys_find>
		if (keys) {
 8016a04:	b128      	cbz	r0, 8016a12 <keys_set+0xfa>
			(void)memset(keys, 0, sizeof(*keys));
 8016a06:	2240      	movs	r2, #64	; 0x40
 8016a08:	2100      	movs	r1, #0
 8016a0a:	f005 ff75 	bl	801c8f8 <memset>
		return 0;
 8016a0e:	4626      	mov	r6, r4
 8016a10:	e7b0      	b.n	8016974 <keys_set+0x5c>
			BT_WARN("Unable to find deleted keys for %s",
 8016a12:	f04f 0500 	mov.w	r5, #0
 8016a16:	2302      	movs	r3, #2
 8016a18:	f363 0502 	bfi	r5, r3, #0, #3
 8016a1c:	f36f 05c5 	bfc	r5, #3, #3
 8016a20:	4b22      	ldr	r3, [pc, #136]	; (8016aac <keys_set+0x194>)
 8016a22:	4a23      	ldr	r2, [pc, #140]	; (8016ab0 <keys_set+0x198>)
 8016a24:	1a9b      	subs	r3, r3, r2
 8016a26:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8016a2a:	f363 158f 	bfi	r5, r3, #6, #10
 8016a2e:	a80e      	add	r0, sp, #56	; 0x38
 8016a30:	f7f5 f88a 	bl	800bb48 <bt_addr_le_str_real>
 8016a34:	f7ef fbb4 	bl	80061a0 <log_strdup>
 8016a38:	4601      	mov	r1, r0
 8016a3a:	462a      	mov	r2, r5
 8016a3c:	4820      	ldr	r0, [pc, #128]	; (8016ac0 <keys_set+0x1a8>)
 8016a3e:	f7ef fd7f 	bl	8006540 <log_1>
 8016a42:	e7e4      	b.n	8016a0e <keys_set+0xf6>
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
 8016a44:	f04f 0400 	mov.w	r4, #0
 8016a48:	2301      	movs	r3, #1
 8016a4a:	f363 0402 	bfi	r4, r3, #0, #3
 8016a4e:	f36f 04c5 	bfc	r4, #3, #3
 8016a52:	4b16      	ldr	r3, [pc, #88]	; (8016aac <keys_set+0x194>)
 8016a54:	4a16      	ldr	r2, [pc, #88]	; (8016ab0 <keys_set+0x198>)
 8016a56:	1a9b      	subs	r3, r3, r2
 8016a58:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8016a5c:	f363 148f 	bfi	r4, r3, #6, #10
 8016a60:	a80e      	add	r0, sp, #56	; 0x38
 8016a62:	f7f5 f871 	bl	800bb48 <bt_addr_le_str_real>
 8016a66:	f7ef fb9b 	bl	80061a0 <log_strdup>
 8016a6a:	4601      	mov	r1, r0
 8016a6c:	4622      	mov	r2, r4
 8016a6e:	4815      	ldr	r0, [pc, #84]	; (8016ac4 <keys_set+0x1ac>)
 8016a70:	f7ef fd66 	bl	8006540 <log_1>
		return -ENOMEM;
 8016a74:	f06f 060b 	mvn.w	r6, #11
 8016a78:	e77c      	b.n	8016974 <keys_set+0x5c>
			BT_ERR("Invalid key length %zd != %zu", len,
 8016a7a:	f04f 0300 	mov.w	r3, #0
 8016a7e:	2201      	movs	r2, #1
 8016a80:	f362 0302 	bfi	r3, r2, #0, #3
 8016a84:	f36f 03c5 	bfc	r3, #3, #3
 8016a88:	4a08      	ldr	r2, [pc, #32]	; (8016aac <keys_set+0x194>)
 8016a8a:	4909      	ldr	r1, [pc, #36]	; (8016ab0 <keys_set+0x198>)
 8016a8c:	1a52      	subs	r2, r2, r1
 8016a8e:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8016a92:	f362 138f 	bfi	r3, r2, #6, #10
 8016a96:	2234      	movs	r2, #52	; 0x34
 8016a98:	4621      	mov	r1, r4
 8016a9a:	480b      	ldr	r0, [pc, #44]	; (8016ac8 <keys_set+0x1b0>)
 8016a9c:	f7ef fdd0 	bl	8006640 <log_2>
			bt_keys_clear(keys);
 8016aa0:	4628      	mov	r0, r5
 8016aa2:	f7ff ff0b 	bl	80168bc <bt_keys_clear>
			return -EINVAL;
 8016aa6:	f06f 0615 	mvn.w	r6, #21
 8016aaa:	e763      	b.n	8016974 <keys_set+0x5c>
 8016aac:	08022bd0 	.word	0x08022bd0
 8016ab0:	08022b90 	.word	0x08022b90
 8016ab4:	0802624c 	.word	0x0802624c
 8016ab8:	08027d08 	.word	0x08027d08
 8016abc:	08027778 	.word	0x08027778
 8016ac0:	08027d28 	.word	0x08027d28
 8016ac4:	08027d4c 	.word	0x08027d4c
 8016ac8:	08027d6c 	.word	0x08027d6c

08016acc <bt_keys_store>:
{
 8016acc:	b530      	push	{r4, r5, lr}
 8016ace:	b08d      	sub	sp, #52	; 0x34
 8016ad0:	4604      	mov	r4, r0
	if (keys->id) {
 8016ad2:	7802      	ldrb	r2, [r0, #0]
 8016ad4:	b1b2      	cbz	r2, 8016b04 <bt_keys_store+0x38>
		u8_to_dec(id, sizeof(id), keys->id);
 8016ad6:	ad02      	add	r5, sp, #8
 8016ad8:	2104      	movs	r1, #4
 8016ada:	4628      	mov	r0, r5
 8016adc:	f7ee fb6a 	bl	80051b4 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
 8016ae0:	9500      	str	r5, [sp, #0]
 8016ae2:	1c63      	adds	r3, r4, #1
 8016ae4:	4a15      	ldr	r2, [pc, #84]	; (8016b3c <bt_keys_store+0x70>)
 8016ae6:	2124      	movs	r1, #36	; 0x24
 8016ae8:	a803      	add	r0, sp, #12
 8016aea:	f7f5 f951 	bl	800bd90 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
 8016aee:	2234      	movs	r2, #52	; 0x34
 8016af0:	f104 010c 	add.w	r1, r4, #12
 8016af4:	a803      	add	r0, sp, #12
 8016af6:	f7f1 fd57 	bl	80085a8 <settings_save_one>
	if (err) {
 8016afa:	4604      	mov	r4, r0
 8016afc:	b958      	cbnz	r0, 8016b16 <bt_keys_store+0x4a>
}
 8016afe:	4620      	mov	r0, r4
 8016b00:	b00d      	add	sp, #52	; 0x34
 8016b02:	bd30      	pop	{r4, r5, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
 8016b04:	2300      	movs	r3, #0
 8016b06:	9300      	str	r3, [sp, #0]
 8016b08:	1c43      	adds	r3, r0, #1
 8016b0a:	4a0c      	ldr	r2, [pc, #48]	; (8016b3c <bt_keys_store+0x70>)
 8016b0c:	2124      	movs	r1, #36	; 0x24
 8016b0e:	a803      	add	r0, sp, #12
 8016b10:	f7f5 f93e 	bl	800bd90 <bt_settings_encode_key>
 8016b14:	e7eb      	b.n	8016aee <bt_keys_store+0x22>
		BT_ERR("Failed to save keys (err %d)", err);
 8016b16:	f04f 0200 	mov.w	r2, #0
 8016b1a:	2301      	movs	r3, #1
 8016b1c:	f363 0202 	bfi	r2, r3, #0, #3
 8016b20:	f36f 02c5 	bfc	r2, #3, #3
 8016b24:	4b06      	ldr	r3, [pc, #24]	; (8016b40 <bt_keys_store+0x74>)
 8016b26:	4907      	ldr	r1, [pc, #28]	; (8016b44 <bt_keys_store+0x78>)
 8016b28:	1a5b      	subs	r3, r3, r1
 8016b2a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8016b2e:	f363 128f 	bfi	r2, r3, #6, #10
 8016b32:	4601      	mov	r1, r0
 8016b34:	4804      	ldr	r0, [pc, #16]	; (8016b48 <bt_keys_store+0x7c>)
 8016b36:	f7ef fd03 	bl	8006540 <log_1>
		return err;
 8016b3a:	e7e0      	b.n	8016afe <bt_keys_store+0x32>
 8016b3c:	08027d00 	.word	0x08027d00
 8016b40:	08022bd0 	.word	0x08022bd0
 8016b44:	08022b90 	.word	0x08022b90
 8016b48:	08027d8c 	.word	0x08027d8c

08016b4c <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
 8016b4c:	4b03      	ldr	r3, [pc, #12]	; (8016b5c <pool_id+0x10>)
 8016b4e:	1ac0      	subs	r0, r0, r3
 8016b50:	10c0      	asrs	r0, r0, #3
}
 8016b52:	4b03      	ldr	r3, [pc, #12]	; (8016b60 <pool_id+0x14>)
 8016b54:	fb03 f000 	mul.w	r0, r3, r0
 8016b58:	4770      	bx	lr
 8016b5a:	bf00      	nop
 8016b5c:	200010b0 	.word	0x200010b0
 8016b60:	cccccccd 	.word	0xcccccccd

08016b64 <net_buf_pool_get>:
	return &_net_buf_pool_list[id];
 8016b64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
}
 8016b68:	4b01      	ldr	r3, [pc, #4]	; (8016b70 <net_buf_pool_get+0xc>)
 8016b6a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8016b6e:	4770      	bx	lr
 8016b70:	200010b0 	.word	0x200010b0

08016b74 <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
 8016b74:	b510      	push	{r4, lr}
 8016b76:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 8016b78:	7980      	ldrb	r0, [r0, #6]
 8016b7a:	f7ff fff3 	bl	8016b64 <net_buf_pool_get>

	return buf - pool->__bufs;
 8016b7e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8016b80:	1a24      	subs	r4, r4, r0
 8016b82:	10e4      	asrs	r4, r4, #3
}
 8016b84:	4801      	ldr	r0, [pc, #4]	; (8016b8c <net_buf_id+0x18>)
 8016b86:	fb00 f004 	mul.w	r0, r0, r4
 8016b8a:	bd10      	pop	{r4, pc}
 8016b8c:	aaaaaaab 	.word	0xaaaaaaab

08016b90 <hid_do_status_cb>:
#endif

static void hid_do_status_cb(struct hid_device_info *dev_data,
			     enum usb_dc_status_code status,
			     const uint8_t *param)
{
 8016b90:	b510      	push	{r4, lr}
 8016b92:	4604      	mov	r4, r0
	switch (status) {
 8016b94:	290a      	cmp	r1, #10
 8016b96:	f200 80a6 	bhi.w	8016ce6 <hid_do_status_cb+0x156>
 8016b9a:	e8df f001 	tbb	[pc, r1]
 8016b9e:	1806      	.short	0x1806
 8016ba0:	68533f2d 	.word	0x68533f2d
 8016ba4:	a4a4a47c 	.word	0xa4a4a47c
 8016ba8:	17          	.byte	0x17
 8016ba9:	00          	.byte	0x00
	case USB_DC_ERROR:
		LOG_INF("Device error");
 8016baa:	f04f 0100 	mov.w	r1, #0
 8016bae:	2303      	movs	r3, #3
 8016bb0:	f363 0102 	bfi	r1, r3, #0, #3
 8016bb4:	f36f 01c5 	bfc	r1, #3, #3
 8016bb8:	4b54      	ldr	r3, [pc, #336]	; (8016d0c <hid_do_status_cb+0x17c>)
 8016bba:	4a55      	ldr	r2, [pc, #340]	; (8016d10 <hid_do_status_cb+0x180>)
 8016bbc:	1a9b      	subs	r3, r3, r2
 8016bbe:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8016bc2:	f363 118f 	bfi	r1, r3, #6, #10
 8016bc6:	4853      	ldr	r0, [pc, #332]	; (8016d14 <hid_do_status_cb+0x184>)
 8016bc8:	f7ef fe2a 	bl	8006820 <log_0>
	default:
		LOG_INF("Unknown event");
		break;
	}

}
 8016bcc:	bd10      	pop	{r4, pc}
		LOG_INF("Device reset detected");
 8016bce:	f04f 0100 	mov.w	r1, #0
 8016bd2:	2303      	movs	r3, #3
 8016bd4:	f363 0102 	bfi	r1, r3, #0, #3
 8016bd8:	f36f 01c5 	bfc	r1, #3, #3
 8016bdc:	4b4b      	ldr	r3, [pc, #300]	; (8016d0c <hid_do_status_cb+0x17c>)
 8016bde:	4a4c      	ldr	r2, [pc, #304]	; (8016d10 <hid_do_status_cb+0x180>)
 8016be0:	1a9b      	subs	r3, r3, r2
 8016be2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8016be6:	f363 118f 	bfi	r1, r3, #6, #10
 8016bea:	484b      	ldr	r0, [pc, #300]	; (8016d18 <hid_do_status_cb+0x188>)
 8016bec:	f7ef fe18 	bl	8006820 <log_0>
		dev_data->configured = false;
 8016bf0:	2300      	movs	r3, #0
 8016bf2:	7323      	strb	r3, [r4, #12]
		dev_data->suspended = false;
 8016bf4:	7363      	strb	r3, [r4, #13]
		break;
 8016bf6:	e7e9      	b.n	8016bcc <hid_do_status_cb+0x3c>
		LOG_INF("Device connected");
 8016bf8:	f04f 0100 	mov.w	r1, #0
 8016bfc:	2303      	movs	r3, #3
 8016bfe:	f363 0102 	bfi	r1, r3, #0, #3
 8016c02:	f36f 01c5 	bfc	r1, #3, #3
 8016c06:	4b41      	ldr	r3, [pc, #260]	; (8016d0c <hid_do_status_cb+0x17c>)
 8016c08:	4a41      	ldr	r2, [pc, #260]	; (8016d10 <hid_do_status_cb+0x180>)
 8016c0a:	1a9b      	subs	r3, r3, r2
 8016c0c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8016c10:	f363 118f 	bfi	r1, r3, #6, #10
 8016c14:	4841      	ldr	r0, [pc, #260]	; (8016d1c <hid_do_status_cb+0x18c>)
 8016c16:	f7ef fe03 	bl	8006820 <log_0>
 8016c1a:	e7d7      	b.n	8016bcc <hid_do_status_cb+0x3c>
		LOG_INF("Device configured");
 8016c1c:	f04f 0100 	mov.w	r1, #0
 8016c20:	2303      	movs	r3, #3
 8016c22:	f363 0102 	bfi	r1, r3, #0, #3
 8016c26:	f36f 01c5 	bfc	r1, #3, #3
 8016c2a:	4b38      	ldr	r3, [pc, #224]	; (8016d0c <hid_do_status_cb+0x17c>)
 8016c2c:	4a38      	ldr	r2, [pc, #224]	; (8016d10 <hid_do_status_cb+0x180>)
 8016c2e:	1a9b      	subs	r3, r3, r2
 8016c30:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8016c34:	f363 118f 	bfi	r1, r3, #6, #10
 8016c38:	4839      	ldr	r0, [pc, #228]	; (8016d20 <hid_do_status_cb+0x190>)
 8016c3a:	f7ef fdf1 	bl	8006820 <log_0>
		dev_data->configured = true;
 8016c3e:	2301      	movs	r3, #1
 8016c40:	7323      	strb	r3, [r4, #12]
		break;
 8016c42:	e7c3      	b.n	8016bcc <hid_do_status_cb+0x3c>
		LOG_INF("Device disconnected");
 8016c44:	f04f 0100 	mov.w	r1, #0
 8016c48:	2303      	movs	r3, #3
 8016c4a:	f363 0102 	bfi	r1, r3, #0, #3
 8016c4e:	f36f 01c5 	bfc	r1, #3, #3
 8016c52:	4b2e      	ldr	r3, [pc, #184]	; (8016d0c <hid_do_status_cb+0x17c>)
 8016c54:	4a2e      	ldr	r2, [pc, #184]	; (8016d10 <hid_do_status_cb+0x180>)
 8016c56:	1a9b      	subs	r3, r3, r2
 8016c58:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8016c5c:	f363 118f 	bfi	r1, r3, #6, #10
 8016c60:	4830      	ldr	r0, [pc, #192]	; (8016d24 <hid_do_status_cb+0x194>)
 8016c62:	f7ef fddd 	bl	8006820 <log_0>
		dev_data->configured = false;
 8016c66:	2300      	movs	r3, #0
 8016c68:	7323      	strb	r3, [r4, #12]
		dev_data->suspended = false;
 8016c6a:	7363      	strb	r3, [r4, #13]
		break;
 8016c6c:	e7ae      	b.n	8016bcc <hid_do_status_cb+0x3c>
		LOG_INF("Device suspended");
 8016c6e:	f04f 0100 	mov.w	r1, #0
 8016c72:	2303      	movs	r3, #3
 8016c74:	f363 0102 	bfi	r1, r3, #0, #3
 8016c78:	f36f 01c5 	bfc	r1, #3, #3
 8016c7c:	4b23      	ldr	r3, [pc, #140]	; (8016d0c <hid_do_status_cb+0x17c>)
 8016c7e:	4a24      	ldr	r2, [pc, #144]	; (8016d10 <hid_do_status_cb+0x180>)
 8016c80:	1a9b      	subs	r3, r3, r2
 8016c82:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8016c86:	f363 118f 	bfi	r1, r3, #6, #10
 8016c8a:	4827      	ldr	r0, [pc, #156]	; (8016d28 <hid_do_status_cb+0x198>)
 8016c8c:	f7ef fdc8 	bl	8006820 <log_0>
		dev_data->suspended = true;
 8016c90:	2301      	movs	r3, #1
 8016c92:	7363      	strb	r3, [r4, #13]
		break;
 8016c94:	e79a      	b.n	8016bcc <hid_do_status_cb+0x3c>
		LOG_INF("Device resumed");
 8016c96:	f04f 0100 	mov.w	r1, #0
 8016c9a:	2303      	movs	r3, #3
 8016c9c:	f363 0102 	bfi	r1, r3, #0, #3
 8016ca0:	f36f 01c5 	bfc	r1, #3, #3
 8016ca4:	4b19      	ldr	r3, [pc, #100]	; (8016d0c <hid_do_status_cb+0x17c>)
 8016ca6:	4a1a      	ldr	r2, [pc, #104]	; (8016d10 <hid_do_status_cb+0x180>)
 8016ca8:	1a9b      	subs	r3, r3, r2
 8016caa:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8016cae:	f363 118f 	bfi	r1, r3, #6, #10
 8016cb2:	481e      	ldr	r0, [pc, #120]	; (8016d2c <hid_do_status_cb+0x19c>)
 8016cb4:	f7ef fdb4 	bl	8006820 <log_0>
		if (dev_data->suspended) {
 8016cb8:	7b63      	ldrb	r3, [r4, #13]
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d086      	beq.n	8016bcc <hid_do_status_cb+0x3c>
			LOG_INF("from suspend");
 8016cbe:	f04f 0100 	mov.w	r1, #0
 8016cc2:	2303      	movs	r3, #3
 8016cc4:	f363 0102 	bfi	r1, r3, #0, #3
 8016cc8:	f36f 01c5 	bfc	r1, #3, #3
 8016ccc:	4b0f      	ldr	r3, [pc, #60]	; (8016d0c <hid_do_status_cb+0x17c>)
 8016cce:	4a10      	ldr	r2, [pc, #64]	; (8016d10 <hid_do_status_cb+0x180>)
 8016cd0:	1a9b      	subs	r3, r3, r2
 8016cd2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8016cd6:	f363 118f 	bfi	r1, r3, #6, #10
 8016cda:	4815      	ldr	r0, [pc, #84]	; (8016d30 <hid_do_status_cb+0x1a0>)
 8016cdc:	f7ef fda0 	bl	8006820 <log_0>
			dev_data->suspended = false;
 8016ce0:	2300      	movs	r3, #0
 8016ce2:	7363      	strb	r3, [r4, #13]
 8016ce4:	e772      	b.n	8016bcc <hid_do_status_cb+0x3c>
		LOG_INF("Unknown event");
 8016ce6:	f04f 0100 	mov.w	r1, #0
 8016cea:	2303      	movs	r3, #3
 8016cec:	f363 0102 	bfi	r1, r3, #0, #3
 8016cf0:	f36f 01c5 	bfc	r1, #3, #3
 8016cf4:	4b05      	ldr	r3, [pc, #20]	; (8016d0c <hid_do_status_cb+0x17c>)
 8016cf6:	4a06      	ldr	r2, [pc, #24]	; (8016d10 <hid_do_status_cb+0x180>)
 8016cf8:	1a9b      	subs	r3, r3, r2
 8016cfa:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8016cfe:	f363 118f 	bfi	r1, r3, #6, #10
 8016d02:	480c      	ldr	r0, [pc, #48]	; (8016d34 <hid_do_status_cb+0x1a4>)
 8016d04:	f7ef fd8c 	bl	8006820 <log_0>
}
 8016d08:	e760      	b.n	8016bcc <hid_do_status_cb+0x3c>
 8016d0a:	bf00      	nop
 8016d0c:	08022c50 	.word	0x08022c50
 8016d10:	08022b90 	.word	0x08022b90
 8016d14:	08027dd0 	.word	0x08027dd0
 8016d18:	08027de0 	.word	0x08027de0
 8016d1c:	08027df8 	.word	0x08027df8
 8016d20:	08027e0c 	.word	0x08027e0c
 8016d24:	08027e20 	.word	0x08027e20
 8016d28:	08027e34 	.word	0x08027e34
 8016d2c:	08027e48 	.word	0x08027e48
 8016d30:	08027e58 	.word	0x08027e58
 8016d34:	08027e68 	.word	0x08027e68

08016d38 <hid_int_in>:

	return -EINVAL;
}

static void hid_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
 8016d38:	b538      	push	{r3, r4, r5, lr}
 8016d3a:	4604      	mov	r4, r0
 8016d3c:	460d      	mov	r5, r1
	struct hid_device_info *dev_data;
	struct usb_dev_data *common;

	common = usb_get_dev_data_by_ep(&usb_hid_devlist, ep);
 8016d3e:	4601      	mov	r1, r0
 8016d40:	4810      	ldr	r0, [pc, #64]	; (8016d84 <hid_int_in+0x4c>)
 8016d42:	f004 fd71 	bl	801b828 <usb_get_dev_data_by_ep>
	if (common == NULL) {
 8016d46:	b148      	cbz	r0, 8016d5c <hid_int_in+0x24>
		return;
	}

	dev_data = CONTAINER_OF(common, struct hid_device_info, common);

	if (ep_status != USB_DC_EP_DATA_IN || dev_data->ops == NULL ||
 8016d48:	2d02      	cmp	r5, #2
 8016d4a:	d106      	bne.n	8016d5a <hid_int_in+0x22>
 8016d4c:	f850 2c08 	ldr.w	r2, [r0, #-8]
 8016d50:	b11a      	cbz	r2, 8016d5a <hid_int_in+0x22>
	    dev_data->ops->int_in_ready == NULL) {
 8016d52:	6a12      	ldr	r2, [r2, #32]
	if (ep_status != USB_DC_EP_DATA_IN || dev_data->ops == NULL ||
 8016d54:	b10a      	cbz	r2, 8016d5a <hid_int_in+0x22>
		return;
	}

	dev_data->ops->int_in_ready(common->dev);
 8016d56:	6800      	ldr	r0, [r0, #0]
 8016d58:	4790      	blx	r2
}
 8016d5a:	bd38      	pop	{r3, r4, r5, pc}
		LOG_WRN("Device data not found for endpoint %u", ep);
 8016d5c:	f04f 0200 	mov.w	r2, #0
 8016d60:	2302      	movs	r3, #2
 8016d62:	f363 0202 	bfi	r2, r3, #0, #3
 8016d66:	f36f 02c5 	bfc	r2, #3, #3
 8016d6a:	4b07      	ldr	r3, [pc, #28]	; (8016d88 <hid_int_in+0x50>)
 8016d6c:	4907      	ldr	r1, [pc, #28]	; (8016d8c <hid_int_in+0x54>)
 8016d6e:	1a5b      	subs	r3, r3, r1
 8016d70:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8016d74:	f363 128f 	bfi	r2, r3, #6, #10
 8016d78:	4621      	mov	r1, r4
 8016d7a:	4805      	ldr	r0, [pc, #20]	; (8016d90 <hid_int_in+0x58>)
 8016d7c:	f7ef fbe0 	bl	8006540 <log_1>
		return;
 8016d80:	e7eb      	b.n	8016d5a <hid_int_in+0x22>
 8016d82:	bf00      	nop
 8016d84:	20004618 	.word	0x20004618
 8016d88:	08022c50 	.word	0x08022c50
 8016d8c:	08022b90 	.word	0x08022b90
 8016d90:	08027e78 	.word	0x08027e78

08016d94 <hid_custom_handle_req>:
{
 8016d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d98:	4616      	mov	r6, r2
	if (REQTYPE_GET_DIR(setup->bmRequestType) == REQTYPE_DIR_TO_HOST &&
 8016d9a:	7803      	ldrb	r3, [r0, #0]
 8016d9c:	09da      	lsrs	r2, r3, #7
 8016d9e:	d05d      	beq.n	8016e5c <hid_custom_handle_req+0xc8>
 8016da0:	460d      	mov	r5, r1
 8016da2:	f003 031f 	and.w	r3, r3, #31
 8016da6:	2b01      	cmp	r3, #1
 8016da8:	d15b      	bne.n	8016e62 <hid_custom_handle_req+0xce>
					setup->bRequest == REQ_GET_DESCRIPTOR) {
 8016daa:	7843      	ldrb	r3, [r0, #1]
					REQTYPE_RECIP_INTERFACE &&
 8016dac:	2b06      	cmp	r3, #6
 8016dae:	d15b      	bne.n	8016e68 <hid_custom_handle_req+0xd4>
		uint8_t value = (uint8_t)(setup->wValue >> 8);
 8016db0:	8844      	ldrh	r4, [r0, #2]
 8016db2:	0a24      	lsrs	r4, r4, #8
		uint8_t iface_num = (uint8_t)setup->wIndex;
 8016db4:	f890 8004 	ldrb.w	r8, [r0, #4]
		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
 8016db8:	4641      	mov	r1, r8
 8016dba:	482d      	ldr	r0, [pc, #180]	; (8016e70 <hid_custom_handle_req+0xdc>)
 8016dbc:	f004 fd20 	bl	801b800 <usb_get_dev_data_by_iface>
		if (common == NULL) {
 8016dc0:	4607      	mov	r7, r0
 8016dc2:	b130      	cbz	r0, 8016dd2 <hid_custom_handle_req+0x3e>
		switch (value) {
 8016dc4:	2c21      	cmp	r4, #33	; 0x21
 8016dc6:	d019      	beq.n	8016dfc <hid_custom_handle_req+0x68>
 8016dc8:	2c22      	cmp	r4, #34	; 0x22
 8016dca:	d025      	beq.n	8016e18 <hid_custom_handle_req+0x84>
 8016dcc:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8016dd0:	e020      	b.n	8016e14 <hid_custom_handle_req+0x80>
			LOG_WRN("Device data not found for interface %u",
 8016dd2:	f04f 0200 	mov.w	r2, #0
 8016dd6:	2302      	movs	r3, #2
 8016dd8:	f363 0202 	bfi	r2, r3, #0, #3
 8016ddc:	f36f 02c5 	bfc	r2, #3, #3
 8016de0:	4b24      	ldr	r3, [pc, #144]	; (8016e74 <hid_custom_handle_req+0xe0>)
 8016de2:	4925      	ldr	r1, [pc, #148]	; (8016e78 <hid_custom_handle_req+0xe4>)
 8016de4:	1a5b      	subs	r3, r3, r1
 8016de6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8016dea:	f363 128f 	bfi	r2, r3, #6, #10
 8016dee:	4641      	mov	r1, r8
 8016df0:	4822      	ldr	r0, [pc, #136]	; (8016e7c <hid_custom_handle_req+0xe8>)
 8016df2:	f7ef fba5 	bl	8006540 <log_1>
			return -EINVAL;
 8016df6:	f06f 0015 	mvn.w	r0, #21
 8016dfa:	e00b      	b.n	8016e14 <hid_custom_handle_req+0x80>
			cfg = common->dev->config;
 8016dfc:	6803      	ldr	r3, [r0, #0]
 8016dfe:	685b      	ldr	r3, [r3, #4]
			*len = MIN(*len, hid_desc->if0_hid.bLength);
 8016e00:	685b      	ldr	r3, [r3, #4]
 8016e02:	f813 2f09 	ldrb.w	r2, [r3, #9]!
 8016e06:	6829      	ldr	r1, [r5, #0]
 8016e08:	428a      	cmp	r2, r1
 8016e0a:	bfa8      	it	ge
 8016e0c:	460a      	movge	r2, r1
 8016e0e:	602a      	str	r2, [r5, #0]
			*data = (uint8_t *)&hid_desc->if0_hid;
 8016e10:	6033      	str	r3, [r6, #0]
		return 0;
 8016e12:	2000      	movs	r0, #0
}
 8016e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (*len != dev_data->report_size) {
 8016e18:	6829      	ldr	r1, [r5, #0]
 8016e1a:	f850 3c0c 	ldr.w	r3, [r0, #-12]
 8016e1e:	4299      	cmp	r1, r3
 8016e20:	d103      	bne.n	8016e2a <hid_custom_handle_req+0x96>
			*data = (uint8_t *)dev_data->report_desc;
 8016e22:	f857 3c10 	ldr.w	r3, [r7, #-16]
 8016e26:	6033      	str	r3, [r6, #0]
			break;
 8016e28:	e7f3      	b.n	8016e12 <hid_custom_handle_req+0x7e>
				LOG_WRN("len %d doesn't match "
 8016e2a:	f04f 0200 	mov.w	r2, #0
 8016e2e:	2302      	movs	r3, #2
 8016e30:	f363 0202 	bfi	r2, r3, #0, #3
 8016e34:	f36f 02c5 	bfc	r2, #3, #3
 8016e38:	4b0e      	ldr	r3, [pc, #56]	; (8016e74 <hid_custom_handle_req+0xe0>)
 8016e3a:	480f      	ldr	r0, [pc, #60]	; (8016e78 <hid_custom_handle_req+0xe4>)
 8016e3c:	1a1b      	subs	r3, r3, r0
 8016e3e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8016e42:	f363 128f 	bfi	r2, r3, #6, #10
 8016e46:	480e      	ldr	r0, [pc, #56]	; (8016e80 <hid_custom_handle_req+0xec>)
 8016e48:	f7ef fb7a 	bl	8006540 <log_1>
				*len = MIN(*len, dev_data->report_size);
 8016e4c:	f857 3c0c 	ldr.w	r3, [r7, #-12]
 8016e50:	682a      	ldr	r2, [r5, #0]
 8016e52:	4293      	cmp	r3, r2
 8016e54:	bf28      	it	cs
 8016e56:	4613      	movcs	r3, r2
 8016e58:	602b      	str	r3, [r5, #0]
 8016e5a:	e7e2      	b.n	8016e22 <hid_custom_handle_req+0x8e>
	return -EINVAL;
 8016e5c:	f06f 0015 	mvn.w	r0, #21
 8016e60:	e7d8      	b.n	8016e14 <hid_custom_handle_req+0x80>
 8016e62:	f06f 0015 	mvn.w	r0, #21
 8016e66:	e7d5      	b.n	8016e14 <hid_custom_handle_req+0x80>
 8016e68:	f06f 0015 	mvn.w	r0, #21
 8016e6c:	e7d2      	b.n	8016e14 <hid_custom_handle_req+0x80>
 8016e6e:	bf00      	nop
 8016e70:	20004618 	.word	0x20004618
 8016e74:	08022c50 	.word	0x08022c50
 8016e78:	08022b90 	.word	0x08022b90
 8016e7c:	08027ea0 	.word	0x08027ea0
 8016e80:	08027ec8 	.word	0x08027ec8

08016e84 <hid_class_handle_req>:
{
 8016e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e88:	4604      	mov	r4, r0
 8016e8a:	460d      	mov	r5, r1
 8016e8c:	4617      	mov	r7, r2
	common = usb_get_dev_data_by_iface(&usb_hid_devlist,
 8016e8e:	7901      	ldrb	r1, [r0, #4]
 8016e90:	4866      	ldr	r0, [pc, #408]	; (801702c <hid_class_handle_req+0x1a8>)
 8016e92:	f004 fcb5 	bl	801b800 <usb_get_dev_data_by_iface>
	if (common == NULL) {
 8016e96:	b310      	cbz	r0, 8016ede <hid_class_handle_req+0x5a>
 8016e98:	4603      	mov	r3, r0
	dev_data = CONTAINER_OF(common, struct hid_device_info, common);
 8016e9a:	4606      	mov	r6, r0
	dev = common->dev;
 8016e9c:	f856 0910 	ldr.w	r0, [r6], #-16
	if (REQTYPE_GET_DIR(setup->bmRequestType) == REQTYPE_DIR_TO_HOST) {
 8016ea0:	7822      	ldrb	r2, [r4, #0]
 8016ea2:	09d2      	lsrs	r2, r2, #7
 8016ea4:	d06c      	beq.n	8016f80 <hid_class_handle_req+0xfc>
		switch (setup->bRequest) {
 8016ea6:	7861      	ldrb	r1, [r4, #1]
 8016ea8:	2902      	cmp	r1, #2
 8016eaa:	d02d      	beq.n	8016f08 <hid_class_handle_req+0x84>
 8016eac:	2903      	cmp	r1, #3
 8016eae:	d053      	beq.n	8016f58 <hid_class_handle_req+0xd4>
 8016eb0:	2901      	cmp	r1, #1
 8016eb2:	d03d      	beq.n	8016f30 <hid_class_handle_req+0xac>
			LOG_ERR("Unhandled request 0x%02x", setup->bRequest);
 8016eb4:	f04f 0200 	mov.w	r2, #0
 8016eb8:	2301      	movs	r3, #1
 8016eba:	f363 0202 	bfi	r2, r3, #0, #3
 8016ebe:	f36f 02c5 	bfc	r2, #3, #3
 8016ec2:	4b5b      	ldr	r3, [pc, #364]	; (8017030 <hid_class_handle_req+0x1ac>)
 8016ec4:	485b      	ldr	r0, [pc, #364]	; (8017034 <hid_class_handle_req+0x1b0>)
 8016ec6:	1a1b      	subs	r3, r3, r0
 8016ec8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8016ecc:	f363 128f 	bfi	r2, r3, #6, #10
 8016ed0:	4859      	ldr	r0, [pc, #356]	; (8017038 <hid_class_handle_req+0x1b4>)
 8016ed2:	f7ef fb35 	bl	8006540 <log_1>
	return -ENOTSUP;
 8016ed6:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 8016eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_WRN("Device data not found for interface %u",
 8016ede:	f04f 0200 	mov.w	r2, #0
 8016ee2:	2302      	movs	r3, #2
 8016ee4:	f363 0202 	bfi	r2, r3, #0, #3
 8016ee8:	f36f 02c5 	bfc	r2, #3, #3
 8016eec:	4b50      	ldr	r3, [pc, #320]	; (8017030 <hid_class_handle_req+0x1ac>)
 8016eee:	4951      	ldr	r1, [pc, #324]	; (8017034 <hid_class_handle_req+0x1b0>)
 8016ef0:	1a5b      	subs	r3, r3, r1
 8016ef2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8016ef6:	f363 128f 	bfi	r2, r3, #6, #10
 8016efa:	88a1      	ldrh	r1, [r4, #4]
 8016efc:	484f      	ldr	r0, [pc, #316]	; (801703c <hid_class_handle_req+0x1b8>)
 8016efe:	f7ef fb1f 	bl	8006540 <log_1>
		return -ENODEV;
 8016f02:	f06f 0012 	mvn.w	r0, #18
 8016f06:	e7e8      	b.n	8016eda <hid_class_handle_req+0x56>
			if (dev_data->ops && dev_data->ops->get_idle) {
 8016f08:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8016f0c:	b14b      	cbz	r3, 8016f22 <hid_class_handle_req+0x9e>
 8016f0e:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8016f12:	f1b8 0f00 	cmp.w	r8, #0
 8016f16:	d004      	beq.n	8016f22 <hid_class_handle_req+0x9e>
				return dev_data->ops->get_idle(dev, setup, len,
 8016f18:	463b      	mov	r3, r7
 8016f1a:	462a      	mov	r2, r5
 8016f1c:	4621      	mov	r1, r4
 8016f1e:	47c0      	blx	r8
 8016f20:	e7db      	b.n	8016eda <hid_class_handle_req+0x56>
				return hid_on_get_idle(dev_data, setup, len,
 8016f22:	463b      	mov	r3, r7
 8016f24:	462a      	mov	r2, r5
 8016f26:	4621      	mov	r1, r4
 8016f28:	4630      	mov	r0, r6
 8016f2a:	f009 fafd 	bl	8020528 <hid_on_get_idle>
 8016f2e:	e7d4      	b.n	8016eda <hid_class_handle_req+0x56>
			if (dev_data->ops && dev_data->ops->get_report) {
 8016f30:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8016f34:	b14b      	cbz	r3, 8016f4a <hid_class_handle_req+0xc6>
 8016f36:	f8d3 8000 	ldr.w	r8, [r3]
 8016f3a:	f1b8 0f00 	cmp.w	r8, #0
 8016f3e:	d004      	beq.n	8016f4a <hid_class_handle_req+0xc6>
				return dev_data->ops->get_report(dev, setup,
 8016f40:	463b      	mov	r3, r7
 8016f42:	462a      	mov	r2, r5
 8016f44:	4621      	mov	r1, r4
 8016f46:	47c0      	blx	r8
 8016f48:	e7c7      	b.n	8016eda <hid_class_handle_req+0x56>
				return hid_on_get_report(dev_data, setup, len,
 8016f4a:	463b      	mov	r3, r7
 8016f4c:	462a      	mov	r2, r5
 8016f4e:	4621      	mov	r1, r4
 8016f50:	4630      	mov	r0, r6
 8016f52:	f009 faec 	bl	802052e <hid_on_get_report>
 8016f56:	e7c0      	b.n	8016eda <hid_class_handle_req+0x56>
			if (dev_data->ops && dev_data->ops->get_protocol) {
 8016f58:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8016f5c:	b14b      	cbz	r3, 8016f72 <hid_class_handle_req+0xee>
 8016f5e:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8016f62:	f1b8 0f00 	cmp.w	r8, #0
 8016f66:	d004      	beq.n	8016f72 <hid_class_handle_req+0xee>
				return dev_data->ops->get_protocol(dev, setup,
 8016f68:	463b      	mov	r3, r7
 8016f6a:	462a      	mov	r2, r5
 8016f6c:	4621      	mov	r1, r4
 8016f6e:	47c0      	blx	r8
 8016f70:	e7b3      	b.n	8016eda <hid_class_handle_req+0x56>
				return hid_on_get_protocol(dev_data, setup, len,
 8016f72:	463b      	mov	r3, r7
 8016f74:	462a      	mov	r2, r5
 8016f76:	4621      	mov	r1, r4
 8016f78:	4630      	mov	r0, r6
 8016f7a:	f009 fadb 	bl	8020534 <hid_on_get_protocol>
 8016f7e:	e7ac      	b.n	8016eda <hid_class_handle_req+0x56>
		switch (setup->bRequest) {
 8016f80:	7861      	ldrb	r1, [r4, #1]
 8016f82:	290a      	cmp	r1, #10
 8016f84:	d017      	beq.n	8016fb6 <hid_class_handle_req+0x132>
 8016f86:	290b      	cmp	r1, #11
 8016f88:	d03d      	beq.n	8017006 <hid_class_handle_req+0x182>
 8016f8a:	2909      	cmp	r1, #9
 8016f8c:	d027      	beq.n	8016fde <hid_class_handle_req+0x15a>
			LOG_ERR("Unhandled request 0x%02x", setup->bRequest);
 8016f8e:	f04f 0200 	mov.w	r2, #0
 8016f92:	2301      	movs	r3, #1
 8016f94:	f363 0202 	bfi	r2, r3, #0, #3
 8016f98:	f36f 02c5 	bfc	r2, #3, #3
 8016f9c:	4b24      	ldr	r3, [pc, #144]	; (8017030 <hid_class_handle_req+0x1ac>)
 8016f9e:	4825      	ldr	r0, [pc, #148]	; (8017034 <hid_class_handle_req+0x1b0>)
 8016fa0:	1a1b      	subs	r3, r3, r0
 8016fa2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8016fa6:	f363 128f 	bfi	r2, r3, #6, #10
 8016faa:	4823      	ldr	r0, [pc, #140]	; (8017038 <hid_class_handle_req+0x1b4>)
 8016fac:	f7ef fac8 	bl	8006540 <log_1>
	return -ENOTSUP;
 8016fb0:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8016fb4:	e791      	b.n	8016eda <hid_class_handle_req+0x56>
			if (dev_data->ops && dev_data->ops->set_idle) {
 8016fb6:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8016fba:	b14b      	cbz	r3, 8016fd0 <hid_class_handle_req+0x14c>
 8016fbc:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8016fc0:	f1b8 0f00 	cmp.w	r8, #0
 8016fc4:	d004      	beq.n	8016fd0 <hid_class_handle_req+0x14c>
				return dev_data->ops->set_idle(dev, setup, len,
 8016fc6:	463b      	mov	r3, r7
 8016fc8:	462a      	mov	r2, r5
 8016fca:	4621      	mov	r1, r4
 8016fcc:	47c0      	blx	r8
 8016fce:	e784      	b.n	8016eda <hid_class_handle_req+0x56>
				return hid_on_set_idle(dev_data, setup, len,
 8016fd0:	463b      	mov	r3, r7
 8016fd2:	462a      	mov	r2, r5
 8016fd4:	4621      	mov	r1, r4
 8016fd6:	4630      	mov	r0, r6
 8016fd8:	f009 faaf 	bl	802053a <hid_on_set_idle>
 8016fdc:	e77d      	b.n	8016eda <hid_class_handle_req+0x56>
			if (dev_data->ops && dev_data->ops->set_report) {
 8016fde:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8016fe2:	b14b      	cbz	r3, 8016ff8 <hid_class_handle_req+0x174>
 8016fe4:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8016fe8:	f1b8 0f00 	cmp.w	r8, #0
 8016fec:	d004      	beq.n	8016ff8 <hid_class_handle_req+0x174>
				return dev_data->ops->set_report(dev, setup,
 8016fee:	463b      	mov	r3, r7
 8016ff0:	462a      	mov	r2, r5
 8016ff2:	4621      	mov	r1, r4
 8016ff4:	47c0      	blx	r8
 8016ff6:	e770      	b.n	8016eda <hid_class_handle_req+0x56>
				return hid_on_set_report(dev_data, setup, len,
 8016ff8:	463b      	mov	r3, r7
 8016ffa:	462a      	mov	r2, r5
 8016ffc:	4621      	mov	r1, r4
 8016ffe:	4630      	mov	r0, r6
 8017000:	f009 fa9e 	bl	8020540 <hid_on_set_report>
 8017004:	e769      	b.n	8016eda <hid_class_handle_req+0x56>
			if (dev_data->ops && dev_data->ops->set_protocol) {
 8017006:	f853 3c08 	ldr.w	r3, [r3, #-8]
 801700a:	b14b      	cbz	r3, 8017020 <hid_class_handle_req+0x19c>
 801700c:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8017010:	f1b8 0f00 	cmp.w	r8, #0
 8017014:	d004      	beq.n	8017020 <hid_class_handle_req+0x19c>
				return dev_data->ops->set_protocol(dev, setup,
 8017016:	463b      	mov	r3, r7
 8017018:	462a      	mov	r2, r5
 801701a:	4621      	mov	r1, r4
 801701c:	47c0      	blx	r8
 801701e:	e75c      	b.n	8016eda <hid_class_handle_req+0x56>
				return hid_on_set_protocol(dev, dev_data,
 8017020:	4622      	mov	r2, r4
 8017022:	4631      	mov	r1, r6
 8017024:	f009 fa8f 	bl	8020546 <hid_on_set_protocol>
 8017028:	e757      	b.n	8016eda <hid_class_handle_req+0x56>
 801702a:	bf00      	nop
 801702c:	20004618 	.word	0x20004618
 8017030:	08022c50 	.word	0x08022c50
 8017034:	08022b90 	.word	0x08022b90
 8017038:	08027ef4 	.word	0x08027ef4
 801703c:	08027ea0 	.word	0x08027ea0

08017040 <hid_status_cb>:
{
 8017040:	b570      	push	{r4, r5, r6, lr}
 8017042:	4604      	mov	r4, r0
 8017044:	460d      	mov	r5, r1
 8017046:	4616      	mov	r6, r2
	common = usb_get_dev_data_by_cfg(&usb_hid_devlist, cfg);
 8017048:	4601      	mov	r1, r0
 801704a:	480e      	ldr	r0, [pc, #56]	; (8017084 <hid_status_cb+0x44>)
 801704c:	f004 fbc6 	bl	801b7dc <usb_get_dev_data_by_cfg>
	if (common == NULL) {
 8017050:	b128      	cbz	r0, 801705e <hid_status_cb+0x1e>
	hid_do_status_cb(dev_data, status, param);
 8017052:	4632      	mov	r2, r6
 8017054:	4629      	mov	r1, r5
 8017056:	3810      	subs	r0, #16
 8017058:	f7ff fd9a 	bl	8016b90 <hid_do_status_cb>
}
 801705c:	bd70      	pop	{r4, r5, r6, pc}
		LOG_WRN("Device data not found for cfg %p", cfg);
 801705e:	f04f 0200 	mov.w	r2, #0
 8017062:	2302      	movs	r3, #2
 8017064:	f363 0202 	bfi	r2, r3, #0, #3
 8017068:	f36f 02c5 	bfc	r2, #3, #3
 801706c:	4b06      	ldr	r3, [pc, #24]	; (8017088 <hid_status_cb+0x48>)
 801706e:	4907      	ldr	r1, [pc, #28]	; (801708c <hid_status_cb+0x4c>)
 8017070:	1a5b      	subs	r3, r3, r1
 8017072:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8017076:	f363 128f 	bfi	r2, r3, #6, #10
 801707a:	4621      	mov	r1, r4
 801707c:	4804      	ldr	r0, [pc, #16]	; (8017090 <hid_status_cb+0x50>)
 801707e:	f7ef fa5f 	bl	8006540 <log_1>
		return;
 8017082:	e7eb      	b.n	801705c <hid_status_cb+0x1c>
 8017084:	20004618 	.word	0x20004618
 8017088:	08022c50 	.word	0x08022c50
 801708c:	08022b90 	.word	0x08022b90
 8017090:	08027f10 	.word	0x08027f10

08017094 <usb_hid_register_device>:
	return 0;
}

void usb_hid_register_device(const struct device *dev, const uint8_t *desc,
			     size_t size, const struct hid_ops *ops)
{
 8017094:	b410      	push	{r4}
	struct hid_device_info *dev_data = dev->data;
 8017096:	68c4      	ldr	r4, [r0, #12]

	dev_data->report_desc = desc;
 8017098:	6021      	str	r1, [r4, #0]
	dev_data->report_size = size;
 801709a:	6062      	str	r2, [r4, #4]

	dev_data->ops = ops;
 801709c:	60a3      	str	r3, [r4, #8]
	dev_data->common.dev = dev;
 801709e:	6120      	str	r0, [r4, #16]

	sys_slist_append(&usb_hid_devlist, &dev_data->common.node);
 80170a0:	f104 0314 	add.w	r3, r4, #20
	parent->next = child;
 80170a4:	2200      	movs	r2, #0
 80170a6:	6162      	str	r2, [r4, #20]
	return list->tail;
 80170a8:	4a06      	ldr	r2, [pc, #24]	; (80170c4 <usb_hid_register_device+0x30>)
 80170aa:	6852      	ldr	r2, [r2, #4]
Z_GENLIST_APPEND(slist, snode)
 80170ac:	b12a      	cbz	r2, 80170ba <usb_hid_register_device+0x26>
	parent->next = child;
 80170ae:	6013      	str	r3, [r2, #0]
	list->tail = node;
 80170b0:	4a04      	ldr	r2, [pc, #16]	; (80170c4 <usb_hid_register_device+0x30>)
 80170b2:	6053      	str	r3, [r2, #4]

	LOG_DBG("Added dev_data %p dev %p to devlist %p", dev_data, dev,
		&usb_hid_devlist);
}
 80170b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80170b8:	4770      	bx	lr
 80170ba:	4a02      	ldr	r2, [pc, #8]	; (80170c4 <usb_hid_register_device+0x30>)
 80170bc:	6053      	str	r3, [r2, #4]
	list->head = node;
 80170be:	6013      	str	r3, [r2, #0]
}
 80170c0:	e7f8      	b.n	80170b4 <usb_hid_register_device+0x20>
 80170c2:	bf00      	nop
 80170c4:	20004618 	.word	0x20004618

080170c8 <hid_int_ep_write>:

int hid_int_ep_write(const struct device *dev, const uint8_t *data, uint32_t data_len,
		     uint32_t *bytes_ret)
{
 80170c8:	b538      	push	{r3, r4, r5, lr}
	const struct usb_cfg_data *cfg = dev->config;
 80170ca:	6845      	ldr	r5, [r0, #4]
	struct hid_device_info *hid_dev_data = dev->data;
 80170cc:	68c0      	ldr	r0, [r0, #12]

	if (hid_dev_data->configured && !hid_dev_data->suspended) {
 80170ce:	7b04      	ldrb	r4, [r0, #12]
 80170d0:	b134      	cbz	r4, 80170e0 <hid_int_ep_write+0x18>
 80170d2:	7b40      	ldrb	r0, [r0, #13]
 80170d4:	b920      	cbnz	r0, 80170e0 <hid_int_ep_write+0x18>
		return usb_write(cfg->endpoint[HID_INT_IN_EP_IDX].ep_addr, data,
 80170d6:	6a28      	ldr	r0, [r5, #32]
 80170d8:	7900      	ldrb	r0, [r0, #4]
 80170da:	f7f0 fd6b 	bl	8007bb4 <usb_write>
	} else {
		LOG_WRN("Device is not configured");
		return -EAGAIN;
	}

}
 80170de:	bd38      	pop	{r3, r4, r5, pc}
		LOG_WRN("Device is not configured");
 80170e0:	f04f 0100 	mov.w	r1, #0
 80170e4:	2302      	movs	r3, #2
 80170e6:	f363 0102 	bfi	r1, r3, #0, #3
 80170ea:	f36f 01c5 	bfc	r1, #3, #3
 80170ee:	4b06      	ldr	r3, [pc, #24]	; (8017108 <hid_int_ep_write+0x40>)
 80170f0:	4a06      	ldr	r2, [pc, #24]	; (801710c <hid_int_ep_write+0x44>)
 80170f2:	1a9b      	subs	r3, r3, r2
 80170f4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80170f8:	f363 118f 	bfi	r1, r3, #6, #10
 80170fc:	4804      	ldr	r0, [pc, #16]	; (8017110 <hid_int_ep_write+0x48>)
 80170fe:	f7ef fb8f 	bl	8006820 <log_0>
		return -EAGAIN;
 8017102:	f06f 000a 	mvn.w	r0, #10
 8017106:	e7ea      	b.n	80170de <hid_int_ep_write+0x16>
 8017108:	08022c50 	.word	0x08022c50
 801710c:	08022b90 	.word	0x08022b90
 8017110:	08027f34 	.word	0x08027f34

08017114 <gpio_stm32_set_exti_source>:
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
#endif
}

static void gpio_stm32_set_exti_source(int port, int pin)
{
 8017114:	b410      	push	{r4}
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8017116:	424a      	negs	r2, r1
 8017118:	f001 0303 	and.w	r3, r1, #3
 801711c:	f002 0203 	and.w	r2, r2, #3
 8017120:	bf58      	it	pl
 8017122:	4253      	negpl	r3, r2
 8017124:	3304      	adds	r3, #4
 8017126:	009a      	lsls	r2, r3, #2
 8017128:	230f      	movs	r3, #15
 801712a:	4093      	lsls	r3, r2
 801712c:	460a      	mov	r2, r1
 801712e:	2900      	cmp	r1, #0
 8017130:	db18      	blt.n	8017164 <gpio_stm32_set_exti_source+0x50>
 8017132:	ea43 03a2 	orr.w	r3, r3, r2, asr #2
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8017136:	b2dc      	uxtb	r4, r3
 8017138:	1ca1      	adds	r1, r4, #2
 801713a:	4a0c      	ldr	r2, [pc, #48]	; (801716c <gpio_stm32_set_exti_source+0x58>)
 801713c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8017140:	0c1a      	lsrs	r2, r3, #16
 8017142:	ea21 4313 	bic.w	r3, r1, r3, lsr #16
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017146:	fa92 f2a2 	rbit	r2, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 801714a:	b16a      	cbz	r2, 8017168 <gpio_stm32_set_exti_source+0x54>
  {
    return 32U;
  }
  return __builtin_clz(value);
 801714c:	fab2 f282 	clz	r2, r2
 8017150:	fa00 f202 	lsl.w	r2, r0, r2
 8017154:	431a      	orrs	r2, r3
 8017156:	3402      	adds	r4, #2
 8017158:	4b04      	ldr	r3, [pc, #16]	; (801716c <gpio_stm32_set_exti_source+0x58>)
 801715a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	LL_EXTI_SetEXTISource(port, line);
#else
	LL_SYSCFG_SetEXTISource(port, line);
#endif
	z_stm32_hsem_unlock(CFG_HW_EXTI_SEMID);
}
 801715e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017162:	4770      	bx	lr
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8017164:	1cca      	adds	r2, r1, #3
 8017166:	e7e4      	b.n	8017132 <gpio_stm32_set_exti_source+0x1e>
    return 32U;
 8017168:	2220      	movs	r2, #32
 801716a:	e7f1      	b.n	8017150 <gpio_stm32_set_exti_source+0x3c>
 801716c:	40010000 	.word	0x40010000

08017170 <gpio_stm32_get_exti_source>:
 8017170:	4242      	negs	r2, r0
 8017172:	f000 0303 	and.w	r3, r0, #3
 8017176:	f002 0203 	and.w	r2, r2, #3
 801717a:	bf58      	it	pl
 801717c:	4253      	negpl	r3, r2
 801717e:	3304      	adds	r3, #4
 8017180:	009a      	lsls	r2, r3, #2
 8017182:	230f      	movs	r3, #15
 8017184:	4093      	lsls	r3, r2
 8017186:	4602      	mov	r2, r0
 8017188:	2800      	cmp	r0, #0
 801718a:	db10      	blt.n	80171ae <gpio_stm32_get_exti_source+0x3e>
 801718c:	ea43 00a2 	orr.w	r0, r3, r2, asr #2
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U)) >> POSITION_VAL(Line >> 16U));
 8017190:	b2c3      	uxtb	r3, r0
 8017192:	3302      	adds	r3, #2
 8017194:	4a08      	ldr	r2, [pc, #32]	; (80171b8 <gpio_stm32_get_exti_source+0x48>)
 8017196:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801719a:	0c03      	lsrs	r3, r0, #16
 801719c:	ea02 4010 	and.w	r0, r2, r0, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80171a0:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80171a4:	b12b      	cbz	r3, 80171b2 <gpio_stm32_get_exti_source+0x42>
  return __builtin_clz(value);
 80171a6:	fab3 f383 	clz	r3, r3
		port = STM32_PORTH;
	}
#endif

	return port;
}
 80171aa:	40d8      	lsrs	r0, r3
 80171ac:	4770      	bx	lr
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80171ae:	1cc2      	adds	r2, r0, #3
 80171b0:	e7ec      	b.n	801718c <gpio_stm32_get_exti_source+0x1c>
    return 32U;
 80171b2:	2320      	movs	r3, #32
 80171b4:	e7f9      	b.n	80171aa <gpio_stm32_get_exti_source+0x3a>
 80171b6:	bf00      	nop
 80171b8:	40010000 	.word	0x40010000

080171bc <gpio_stm32_enable_int>:

/**
 * @brief Enable EXTI of the specific line
 */
static int gpio_stm32_enable_int(int port, int pin)
{
 80171bc:	b570      	push	{r4, r5, r6, lr}
 80171be:	b082      	sub	sp, #8
 80171c0:	4604      	mov	r4, r0
 80171c2:	460d      	mov	r5, r1
 80171c4:	480a      	ldr	r0, [pc, #40]	; (80171f0 <gpio_stm32_enable_int+0x34>)
 80171c6:	f000 fd43 	bl	8017c50 <z_impl_device_get_binding>
 80171ca:	4603      	mov	r3, r0
	defined(CONFIG_SOC_SERIES_STM32H7X) || \
	defined(CONFIG_SOC_SERIES_STM32L1X) || \
	defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32G4X)
	const struct device *clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);
	struct stm32_pclken pclken = {
 80171cc:	4909      	ldr	r1, [pc, #36]	; (80171f4 <gpio_stm32_enable_int+0x38>)
 80171ce:	466a      	mov	r2, sp
 80171d0:	c903      	ldmia	r1, {r0, r1}
 80171d2:	e882 0003 	stmia.w	r2, {r0, r1}
	const struct clock_control_driver_api *api =
 80171d6:	6899      	ldr	r1, [r3, #8]
	return api->on(dev, sys);
 80171d8:	680e      	ldr	r6, [r1, #0]
 80171da:	4611      	mov	r1, r2
 80171dc:	4618      	mov	r0, r3
 80171de:	47b0      	blx	r6
	};
	/* Enable SYSCFG clock */
	clock_control_on(clk, (clock_control_subsys_t *) &pclken);
#endif

	gpio_stm32_set_exti_source(port, pin);
 80171e0:	4629      	mov	r1, r5
 80171e2:	4620      	mov	r0, r4
 80171e4:	f7ff ff96 	bl	8017114 <gpio_stm32_set_exti_source>

	return 0;
}
 80171e8:	2000      	movs	r0, #0
 80171ea:	b002      	add	sp, #8
 80171ec:	bd70      	pop	{r4, r5, r6, pc}
 80171ee:	bf00      	nop
 80171f0:	08025714 	.word	0x08025714
 80171f4:	08022da4 	.word	0x08022da4

080171f8 <gpio_stm32_pin_interrupt_configure>:

static int gpio_stm32_pin_interrupt_configure(const struct device *dev,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
 80171f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171fa:	460c      	mov	r4, r1
 80171fc:	4611      	mov	r1, r2
	const struct gpio_stm32_config *cfg = dev->config;
 80171fe:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 8017200:	68c2      	ldr	r2, [r0, #12]
	int edge = 0;
	int err = 0;

	if (mode == GPIO_INT_MODE_DISABLED) {
 8017202:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8017206:	d01f      	beq.n	8017248 <gpio_stm32_pin_interrupt_configure+0x50>
 8017208:	461d      	mov	r5, r3
		/* else: No irq source configured for pin. Nothing to disable */
		goto exit;
	}

	/* Level trigger interrupts not supported */
	if (mode == GPIO_INT_MODE_LEVEL) {
 801720a:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 801720e:	d034      	beq.n	801727a <gpio_stm32_pin_interrupt_configure+0x82>
		err = -ENOTSUP;
		goto exit;
	}

	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 8017210:	491d      	ldr	r1, [pc, #116]	; (8017288 <gpio_stm32_pin_interrupt_configure+0x90>)
 8017212:	4620      	mov	r0, r4
 8017214:	f7f1 fd2a 	bl	8008c6c <stm32_exti_set_callback>
 8017218:	4606      	mov	r6, r0
 801721a:	bb88      	cbnz	r0, 8017280 <gpio_stm32_pin_interrupt_configure+0x88>
		err = -EBUSY;
		goto exit;
	}

	gpio_stm32_enable_int(cfg->port, pin);
 801721c:	4621      	mov	r1, r4
 801721e:	68b8      	ldr	r0, [r7, #8]
 8017220:	f7ff ffcc 	bl	80171bc <gpio_stm32_enable_int>

	switch (trig) {
 8017224:	f5b5 2f80 	cmp.w	r5, #262144	; 0x40000
 8017228:	d023      	beq.n	8017272 <gpio_stm32_pin_interrupt_configure+0x7a>
 801722a:	f5b5 2fc0 	cmp.w	r5, #393216	; 0x60000
 801722e:	d022      	beq.n	8017276 <gpio_stm32_pin_interrupt_configure+0x7e>
 8017230:	f5b5 3f00 	cmp.w	r5, #131072	; 0x20000
 8017234:	d01b      	beq.n	801726e <gpio_stm32_pin_interrupt_configure+0x76>
 8017236:	4631      	mov	r1, r6
	case GPIO_INT_TRIG_BOTH:
		edge = STM32_EXTI_TRIG_BOTH;
		break;
	}

	stm32_exti_trigger(pin, edge);
 8017238:	4620      	mov	r0, r4
 801723a:	f7f1 fcdf 	bl	8008bfc <stm32_exti_trigger>

	stm32_exti_enable(pin);
 801723e:	4620      	mov	r0, r4
 8017240:	f7f1 fcc0 	bl	8008bc4 <stm32_exti_enable>

exit:
	return err;
}
 8017244:	4630      	mov	r0, r6
 8017246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8017248:	4620      	mov	r0, r4
 801724a:	f7ff ff91 	bl	8017170 <gpio_stm32_get_exti_source>
 801724e:	68bb      	ldr	r3, [r7, #8]
 8017250:	4298      	cmp	r0, r3
 8017252:	d001      	beq.n	8017258 <gpio_stm32_pin_interrupt_configure+0x60>
	int err = 0;
 8017254:	2600      	movs	r6, #0
		goto exit;
 8017256:	e7f5      	b.n	8017244 <gpio_stm32_pin_interrupt_configure+0x4c>
			stm32_exti_disable(pin);
 8017258:	4620      	mov	r0, r4
 801725a:	f7f1 fcc3 	bl	8008be4 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 801725e:	4620      	mov	r0, r4
 8017260:	f7f1 fd16 	bl	8008c90 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 8017264:	2100      	movs	r1, #0
 8017266:	4620      	mov	r0, r4
 8017268:	f7f1 fcc8 	bl	8008bfc <stm32_exti_trigger>
 801726c:	e7f2      	b.n	8017254 <gpio_stm32_pin_interrupt_configure+0x5c>
		edge = STM32_EXTI_TRIG_FALLING;
 801726e:	2102      	movs	r1, #2
 8017270:	e7e2      	b.n	8017238 <gpio_stm32_pin_interrupt_configure+0x40>
		edge = STM32_EXTI_TRIG_RISING;
 8017272:	2101      	movs	r1, #1
 8017274:	e7e0      	b.n	8017238 <gpio_stm32_pin_interrupt_configure+0x40>
		edge = STM32_EXTI_TRIG_BOTH;
 8017276:	2103      	movs	r1, #3
 8017278:	e7de      	b.n	8017238 <gpio_stm32_pin_interrupt_configure+0x40>
		err = -ENOTSUP;
 801727a:	f06f 0622 	mvn.w	r6, #34	; 0x22
 801727e:	e7e1      	b.n	8017244 <gpio_stm32_pin_interrupt_configure+0x4c>
		err = -EBUSY;
 8017280:	f06f 060f 	mvn.w	r6, #15
	return err;
 8017284:	e7de      	b.n	8017244 <gpio_stm32_pin_interrupt_configure+0x4c>
 8017286:	bf00      	nop
 8017288:	0802056f 	.word	0x0802056f

0801728c <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *device)
{
 801728c:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = device->config;
 801728e:	6844      	ldr	r4, [r0, #4]
	struct gpio_stm32_data *data = device->data;
 8017290:	68c3      	ldr	r3, [r0, #12]

	data->dev = device;
 8017292:	6058      	str	r0, [r3, #4]
 8017294:	4806      	ldr	r0, [pc, #24]	; (80172b0 <gpio_stm32_init+0x24>)
 8017296:	f000 fcdb 	bl	8017c50 <z_impl_device_get_binding>
	const struct clock_control_driver_api *api =
 801729a:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 801729c:	681b      	ldr	r3, [r3, #0]
 801729e:	f104 010c 	add.w	r1, r4, #12
 80172a2:	4798      	blx	r3

	/* enable clock for subsystem */
	const struct device *clk =
		device_get_binding(STM32_CLOCK_CONTROL_NAME);

	if (clock_control_on(clk,
 80172a4:	b900      	cbnz	r0, 80172a8 <gpio_stm32_init+0x1c>
		z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);
	}
#endif  /* PWR_CR2_IOSV */

	return 0;
}
 80172a6:	bd10      	pop	{r4, pc}
		return -EIO;
 80172a8:	f06f 0004 	mvn.w	r0, #4
 80172ac:	e7fb      	b.n	80172a6 <gpio_stm32_init+0x1a>
 80172ae:	bf00      	nop
 80172b0:	08025714 	.word	0x08025714

080172b4 <UTILS_PLL_IsBusy>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80172b4:	4b04      	ldr	r3, [pc, #16]	; (80172c8 <UTILS_PLL_IsBusy+0x14>)
 80172b6:	681b      	ldr	r3, [r3, #0]
static ErrorStatus UTILS_PLL_IsBusy(void)
{
  ErrorStatus status = SUCCESS;

  /* Check if PLL is busy*/
  if (LL_RCC_PLL_IsReady() != 0U)
 80172b8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80172bc:	d101      	bne.n	80172c2 <UTILS_PLL_IsBusy+0xe>
  ErrorStatus status = SUCCESS;
 80172be:	2000      	movs	r0, #0
 80172c0:	4770      	bx	lr
  {
    /* PLL configuration cannot be modified */
    status = ERROR;
 80172c2:	2001      	movs	r0, #1
  }

  return status;
}
 80172c4:	4770      	bx	lr
 80172c6:	bf00      	nop
 80172c8:	40021000 	.word	0x40021000

080172cc <LL_SetSystemCoreClock>:
  SystemCoreClock = HCLKFrequency;
 80172cc:	4b01      	ldr	r3, [pc, #4]	; (80172d4 <LL_SetSystemCoreClock+0x8>)
 80172ce:	6018      	str	r0, [r3, #0]
}
 80172d0:	4770      	bx	lr
 80172d2:	bf00      	nop
 80172d4:	20000cd0 	.word	0x20000cd0

080172d8 <LL_SetFlashLatency>:
  if (Frequency == 0U)
 80172d8:	b1c8      	cbz	r0, 801730e <LL_SetFlashLatency+0x36>
    if (Frequency > UTILS_LATENCY2_FREQ)
 80172da:	4a0e      	ldr	r2, [pc, #56]	; (8017314 <LL_SetFlashLatency+0x3c>)
 80172dc:	4290      	cmp	r0, r2
 80172de:	d804      	bhi.n	80172ea <LL_SetFlashLatency+0x12>
      if (Frequency > UTILS_LATENCY1_FREQ)
 80172e0:	4a0d      	ldr	r2, [pc, #52]	; (8017318 <LL_SetFlashLatency+0x40>)
 80172e2:	4290      	cmp	r0, r2
 80172e4:	d80f      	bhi.n	8017306 <LL_SetFlashLatency+0x2e>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 80172e6:	2100      	movs	r1, #0
 80172e8:	e000      	b.n	80172ec <LL_SetFlashLatency+0x14>
      latency = LL_FLASH_LATENCY_2;
 80172ea:	2102      	movs	r1, #2
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80172ec:	4a0b      	ldr	r2, [pc, #44]	; (801731c <LL_SetFlashLatency+0x44>)
 80172ee:	6813      	ldr	r3, [r2, #0]
 80172f0:	f023 0307 	bic.w	r3, r3, #7
 80172f4:	430b      	orrs	r3, r1
 80172f6:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80172f8:	6813      	ldr	r3, [r2, #0]
 80172fa:	f003 0307 	and.w	r3, r3, #7
    if (LL_FLASH_GetLatency() != latency)
 80172fe:	4299      	cmp	r1, r3
 8017300:	d003      	beq.n	801730a <LL_SetFlashLatency+0x32>
      status = ERROR;
 8017302:	2001      	movs	r0, #1
}
 8017304:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_1;
 8017306:	2101      	movs	r1, #1
 8017308:	e7f0      	b.n	80172ec <LL_SetFlashLatency+0x14>
  ErrorStatus status = SUCCESS;
 801730a:	2000      	movs	r0, #0
 801730c:	4770      	bx	lr
    status = ERROR;
 801730e:	2001      	movs	r0, #1
 8017310:	4770      	bx	lr
 8017312:	bf00      	nop
 8017314:	02dc6c00 	.word	0x02dc6c00
 8017318:	016e3600 	.word	0x016e3600
 801731c:	40022000 	.word	0x40022000

08017320 <UTILS_EnablePLLAndSwitchSystem>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: No problem to switch system to PLL
  *          - ERROR: Problem to switch system to PLL
  */
static ErrorStatus UTILS_EnablePLLAndSwitchSystem(uint32_t SYSCLK_Frequency, LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
{
 8017320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017322:	4604      	mov	r4, r0
 8017324:	460d      	mov	r5, r1
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate current SYSCLK frequency */
  sysclk_frequency_current = (SystemCoreClock << AHBPrescTable[LL_RCC_GetAHBPrescaler() >> RCC_POSITION_HPRE]);
 8017326:	4b2e      	ldr	r3, [pc, #184]	; (80173e0 <UTILS_EnablePLLAndSwitchSystem+0xc0>)
 8017328:	681e      	ldr	r6, [r3, #0]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 801732a:	4b2e      	ldr	r3, [pc, #184]	; (80173e4 <UTILS_EnablePLLAndSwitchSystem+0xc4>)
 801732c:	685a      	ldr	r2, [r3, #4]
 801732e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017332:	23f0      	movs	r3, #240	; 0xf0
 8017334:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8017338:	2b00      	cmp	r3, #0
 801733a:	d038      	beq.n	80173ae <UTILS_EnablePLLAndSwitchSystem+0x8e>
  return __builtin_clz(value);
 801733c:	fab3 f383 	clz	r3, r3
 8017340:	fa22 f303 	lsr.w	r3, r2, r3
 8017344:	4a28      	ldr	r2, [pc, #160]	; (80173e8 <UTILS_EnablePLLAndSwitchSystem+0xc8>)
 8017346:	5cd3      	ldrb	r3, [r2, r3]
 8017348:	409e      	lsls	r6, r3

  /* Increasing the number of wait states because of higher CPU frequency */
  if (sysclk_frequency_current < SYSCLK_Frequency)
 801734a:	42a6      	cmp	r6, r4
 801734c:	d331      	bcc.n	80173b2 <UTILS_EnablePLLAndSwitchSystem+0x92>
  ErrorStatus status = SUCCESS;
 801734e:	2700      	movs	r7, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8017350:	4a24      	ldr	r2, [pc, #144]	; (80173e4 <UTILS_EnablePLLAndSwitchSystem+0xc4>)
 8017352:	6813      	ldr	r3, [r2, #0]
 8017354:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8017358:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 801735a:	4b22      	ldr	r3, [pc, #136]	; (80173e4 <UTILS_EnablePLLAndSwitchSystem+0xc4>)
 801735c:	681b      	ldr	r3, [r3, #0]
  /* Update system clock configuration */
  if (status == SUCCESS)
  {
    /* Enable PLL */
    LL_RCC_PLL_Enable();
    while (LL_RCC_PLL_IsReady() != 1U)
 801735e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8017362:	d0fa      	beq.n	801735a <UTILS_EnablePLLAndSwitchSystem+0x3a>
    {
      /* Wait for PLL ready */
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
 8017364:	682b      	ldr	r3, [r5, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8017366:	4a1f      	ldr	r2, [pc, #124]	; (80173e4 <UTILS_EnablePLLAndSwitchSystem+0xc4>)
 8017368:	6851      	ldr	r1, [r2, #4]
 801736a:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 801736e:	430b      	orrs	r3, r1
 8017370:	6053      	str	r3, [r2, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8017372:	6853      	ldr	r3, [r2, #4]
 8017374:	f023 0303 	bic.w	r3, r3, #3
 8017378:	f043 0302 	orr.w	r3, r3, #2
 801737c:	6053      	str	r3, [r2, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 801737e:	4b19      	ldr	r3, [pc, #100]	; (80173e4 <UTILS_EnablePLLAndSwitchSystem+0xc4>)
 8017380:	685b      	ldr	r3, [r3, #4]
 8017382:	f003 030c 	and.w	r3, r3, #12
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8017386:	2b08      	cmp	r3, #8
 8017388:	d1f9      	bne.n	801737e <UTILS_EnablePLLAndSwitchSystem+0x5e>
    {
      /* Wait for system clock switch to PLL */
    }

    /* Set APB1 & APB2 prescaler*/
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
 801738a:	686a      	ldr	r2, [r5, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 801738c:	4b15      	ldr	r3, [pc, #84]	; (80173e4 <UTILS_EnablePLLAndSwitchSystem+0xc4>)
 801738e:	6859      	ldr	r1, [r3, #4]
 8017390:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8017394:	430a      	orrs	r2, r1
 8017396:	605a      	str	r2, [r3, #4]
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
 8017398:	68aa      	ldr	r2, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 801739a:	6859      	ldr	r1, [r3, #4]
 801739c:	f421 5160 	bic.w	r1, r1, #14336	; 0x3800
 80173a0:	430a      	orrs	r2, r1
 80173a2:	605a      	str	r2, [r3, #4]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (sysclk_frequency_current > SYSCLK_Frequency)
 80173a4:	42a6      	cmp	r6, r4
 80173a6:	d80b      	bhi.n	80173c0 <UTILS_EnablePLLAndSwitchSystem+0xa0>
    /* Set FLASH latency to lowest latency */
    status = LL_SetFlashLatency(SYSCLK_Frequency);
  }

  /* Update SystemCoreClock variable */
  if (status == SUCCESS)
 80173a8:	b17f      	cbz	r7, 80173ca <UTILS_EnablePLLAndSwitchSystem+0xaa>
  {
    LL_SetSystemCoreClock(__LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider));
  }

  return status;
}
 80173aa:	4638      	mov	r0, r7
 80173ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return 32U;
 80173ae:	2320      	movs	r3, #32
 80173b0:	e7c6      	b.n	8017340 <UTILS_EnablePLLAndSwitchSystem+0x20>
    status = LL_SetFlashLatency(SYSCLK_Frequency);
 80173b2:	4620      	mov	r0, r4
 80173b4:	f7ff ff90 	bl	80172d8 <LL_SetFlashLatency>
  if (status == SUCCESS)
 80173b8:	4607      	mov	r7, r0
 80173ba:	2800      	cmp	r0, #0
 80173bc:	d1f2      	bne.n	80173a4 <UTILS_EnablePLLAndSwitchSystem+0x84>
 80173be:	e7c7      	b.n	8017350 <UTILS_EnablePLLAndSwitchSystem+0x30>
    status = LL_SetFlashLatency(SYSCLK_Frequency);
 80173c0:	4620      	mov	r0, r4
 80173c2:	f7ff ff89 	bl	80172d8 <LL_SetFlashLatency>
 80173c6:	4607      	mov	r7, r0
 80173c8:	e7ee      	b.n	80173a8 <UTILS_EnablePLLAndSwitchSystem+0x88>
    LL_SetSystemCoreClock(__LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider));
 80173ca:	682b      	ldr	r3, [r5, #0]
 80173cc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80173d0:	4a05      	ldr	r2, [pc, #20]	; (80173e8 <UTILS_EnablePLLAndSwitchSystem+0xc8>)
 80173d2:	5cd0      	ldrb	r0, [r2, r3]
 80173d4:	fa24 f000 	lsr.w	r0, r4, r0
 80173d8:	f7ff ff78 	bl	80172cc <LL_SetSystemCoreClock>
 80173dc:	e7e5      	b.n	80173aa <UTILS_EnablePLLAndSwitchSystem+0x8a>
 80173de:	bf00      	nop
 80173e0:	20000cd0 	.word	0x20000cd0
 80173e4:	40021000 	.word	0x40021000
 80173e8:	08028034 	.word	0x08028034

080173ec <LL_PLL_ConfigSystemClock_HSE>:
{
 80173ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80173ee:	4606      	mov	r6, r0
 80173f0:	460f      	mov	r7, r1
 80173f2:	4614      	mov	r4, r2
 80173f4:	461d      	mov	r5, r3
  if (UTILS_PLL_IsBusy() == SUCCESS)
 80173f6:	f7ff ff5d 	bl	80172b4 <UTILS_PLL_IsBusy>
 80173fa:	2800      	cmp	r0, #0
 80173fc:	d134      	bne.n	8017468 <LL_PLL_ConfigSystemClock_HSE+0x7c>
    pllfreq = UTILS_GetPLLOutputFrequency(HSEFrequency, UTILS_PLLInitStruct);
 80173fe:	4621      	mov	r1, r4
 8017400:	4630      	mov	r0, r6
 8017402:	f00a fba2 	bl	8021b4a <UTILS_GetPLLOutputFrequency>
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8017406:	4b19      	ldr	r3, [pc, #100]	; (801746c <LL_PLL_ConfigSystemClock_HSE+0x80>)
 8017408:	681b      	ldr	r3, [r3, #0]
    if (LL_RCC_HSE_IsReady() != 1U)
 801740a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 801740e:	d110      	bne.n	8017432 <LL_PLL_ConfigSystemClock_HSE+0x46>
      if (HSEBypass == LL_UTILS_HSEBYPASS_ON)
 8017410:	2f01      	cmp	r7, #1
 8017412:	d023      	beq.n	801745c <LL_PLL_ConfigSystemClock_HSE+0x70>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8017414:	4a15      	ldr	r2, [pc, #84]	; (801746c <LL_PLL_ConfigSystemClock_HSE+0x80>)
 8017416:	6813      	ldr	r3, [r2, #0]
 8017418:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801741c:	6013      	str	r3, [r2, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 801741e:	4a13      	ldr	r2, [pc, #76]	; (801746c <LL_PLL_ConfigSystemClock_HSE+0x80>)
 8017420:	6813      	ldr	r3, [r2, #0]
 8017422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017426:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8017428:	4910      	ldr	r1, [pc, #64]	; (801746c <LL_PLL_ConfigSystemClock_HSE+0x80>)
 801742a:	6809      	ldr	r1, [r1, #0]
      while (LL_RCC_HSE_IsReady() != 1U)
 801742c:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8017430:	d0fa      	beq.n	8017428 <LL_PLL_ConfigSystemClock_HSE+0x3c>
    LL_RCC_PLL_ConfigDomain_SYS((RCC_CFGR_PLLSRC_HSE_PREDIV | UTILS_PLLInitStruct->Prediv), UTILS_PLLInitStruct->PLLMul);
 8017432:	6863      	ldr	r3, [r4, #4]
 8017434:	6824      	ldr	r4, [r4, #0]
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 8017436:	490d      	ldr	r1, [pc, #52]	; (801746c <LL_PLL_ConfigSystemClock_HSE+0x80>)
 8017438:	684a      	ldr	r2, [r1, #4]
 801743a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 801743e:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8017442:	4322      	orrs	r2, r4
 8017444:	604a      	str	r2, [r1, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 8017446:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8017448:	f022 020f 	bic.w	r2, r2, #15
 801744c:	f003 030f 	and.w	r3, r3, #15
 8017450:	4313      	orrs	r3, r2
 8017452:	62cb      	str	r3, [r1, #44]	; 0x2c
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8017454:	4629      	mov	r1, r5
 8017456:	f7ff ff63 	bl	8017320 <UTILS_EnablePLLAndSwitchSystem>
}
 801745a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 801745c:	4a03      	ldr	r2, [pc, #12]	; (801746c <LL_PLL_ConfigSystemClock_HSE+0x80>)
 801745e:	6813      	ldr	r3, [r2, #0]
 8017460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8017464:	6013      	str	r3, [r2, #0]
}
 8017466:	e7da      	b.n	801741e <LL_PLL_ConfigSystemClock_HSE+0x32>
    status = ERROR;
 8017468:	2001      	movs	r0, #1
 801746a:	e7f6      	b.n	801745a <LL_PLL_ConfigSystemClock_HSE+0x6e>
 801746c:	40021000 	.word	0x40021000

08017470 <kscan_gpio_configure_0>:
    };                                                                                             \
    DEVICE_AND_API_INIT(kscan_gpio_##n, DT_INST_LABEL(n), kscan_gpio_init_##n,                     \
                        &kscan_gpio_data_##n, &kscan_gpio_config_##n, APPLICATION,                 \
                        CONFIG_APPLICATION_INIT_PRIORITY, &gpio_driver_api_##n);

DT_INST_FOREACH_STATUS_OKAY(GPIO_INST_INIT)
 8017470:	b508      	push	{r3, lr}
 8017472:	68c3      	ldr	r3, [r0, #12]
 8017474:	b1a9      	cbz	r1, 80174a2 <kscan_gpio_configure_0+0x32>
 8017476:	6019      	str	r1, [r3, #0]
 8017478:	f04f 0300 	mov.w	r3, #0
 801747c:	2204      	movs	r2, #4
 801747e:	f362 0302 	bfi	r3, r2, #0, #3
 8017482:	f36f 03c5 	bfc	r3, #3, #3
 8017486:	4a08      	ldr	r2, [pc, #32]	; (80174a8 <kscan_gpio_configure_0+0x38>)
 8017488:	4908      	ldr	r1, [pc, #32]	; (80174ac <kscan_gpio_configure_0+0x3c>)
 801748a:	1a52      	subs	r2, r2, r1
 801748c:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8017490:	f362 138f 	bfi	r3, r2, #6, #10
 8017494:	2200      	movs	r2, #0
 8017496:	4906      	ldr	r1, [pc, #24]	; (80174b0 <kscan_gpio_configure_0+0x40>)
 8017498:	4806      	ldr	r0, [pc, #24]	; (80174b4 <kscan_gpio_configure_0+0x44>)
 801749a:	f7ef f8d1 	bl	8006640 <log_2>
 801749e:	2000      	movs	r0, #0
 80174a0:	bd08      	pop	{r3, pc}
 80174a2:	f06f 0015 	mvn.w	r0, #21
 80174a6:	e7fb      	b.n	80174a0 <kscan_gpio_configure_0+0x30>
 80174a8:	08022c60 	.word	0x08022c60
 80174ac:	08022b90 	.word	0x08022b90
 80174b0:	080281fc 	.word	0x080281fc
 80174b4:	08028044 	.word	0x08028044

080174b8 <kscan_gpio_config_interrupts>:
                                        gpio_flags_t flags) {
 80174b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80174bc:	4681      	mov	r9, r0
 80174be:	4688      	mov	r8, r1
 80174c0:	4617      	mov	r7, r2
 80174c2:	461e      	mov	r6, r3
    for (int i = 0; i < len; i++) {
 80174c4:	2400      	movs	r4, #0
 80174c6:	e009      	b.n	80174dc <kscan_gpio_config_interrupts+0x24>
 80174c8:	4632      	mov	r2, r6
	}

	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));

	return api->pin_interrupt_configure(port, pin, mode, trig);
 80174ca:	699d      	ldr	r5, [r3, #24]
 80174cc:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
 80174d0:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
 80174d4:	47a8      	blx	r5
        if (err) {
 80174d6:	4605      	mov	r5, r0
 80174d8:	b9c0      	cbnz	r0, 801750c <kscan_gpio_config_interrupts+0x54>
    for (int i = 0; i < len; i++) {
 80174da:	3401      	adds	r4, #1
 80174dc:	42bc      	cmp	r4, r7
 80174de:	d227      	bcs.n	8017530 <kscan_gpio_config_interrupts+0x78>
        const struct device *dev = devices[i];
 80174e0:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
        const struct kscan_gpio_item_config *cfg = &configs[i];
 80174e4:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80174e8:	eb08 0585 	add.w	r5, r8, r5, lsl #2
        int err = gpio_pin_interrupt_configure(dev, cfg->pin, flags);
 80174ec:	7929      	ldrb	r1, [r5, #4]
	const struct gpio_driver_api *api =
 80174ee:	6883      	ldr	r3, [r0, #8]
	const struct gpio_driver_data *const data =
 80174f0:	68c2      	ldr	r2, [r0, #12]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 80174f2:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 80174f6:	d0e7      	beq.n	80174c8 <kscan_gpio_config_interrupts+0x10>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 80174f8:	6815      	ldr	r5, [r2, #0]
 80174fa:	2201      	movs	r2, #1
 80174fc:	408a      	lsls	r2, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 80174fe:	4215      	tst	r5, r2
 8017500:	d002      	beq.n	8017508 <kscan_gpio_config_interrupts+0x50>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
 8017502:	f486 22c0 	eor.w	r2, r6, #393216	; 0x60000
 8017506:	e7e0      	b.n	80174ca <kscan_gpio_config_interrupts+0x12>
 8017508:	4632      	mov	r2, r6
 801750a:	e7de      	b.n	80174ca <kscan_gpio_config_interrupts+0x12>
            LOG_ERR("Unable to enable matrix GPIO interrupt");
 801750c:	f04f 0100 	mov.w	r1, #0
 8017510:	2301      	movs	r3, #1
 8017512:	f363 0102 	bfi	r1, r3, #0, #3
 8017516:	f36f 01c5 	bfc	r1, #3, #3
 801751a:	4b07      	ldr	r3, [pc, #28]	; (8017538 <kscan_gpio_config_interrupts+0x80>)
 801751c:	4a07      	ldr	r2, [pc, #28]	; (801753c <kscan_gpio_config_interrupts+0x84>)
 801751e:	1a9b      	subs	r3, r3, r2
 8017520:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8017524:	f363 118f 	bfi	r1, r3, #6, #10
 8017528:	4805      	ldr	r0, [pc, #20]	; (8017540 <kscan_gpio_config_interrupts+0x88>)
 801752a:	f7ef f979 	bl	8006820 <log_0>
            return err;
 801752e:	e000      	b.n	8017532 <kscan_gpio_config_interrupts+0x7a>
    return 0;
 8017530:	2500      	movs	r5, #0
}
 8017532:	4628      	mov	r0, r5
 8017534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017538:	08022c60 	.word	0x08022c60
 801753c:	08022b90 	.word	0x08022b90
 8017540:	0802805c 	.word	0x0802805c

08017544 <kscan_gpio_irq_callback_handler_0>:
DT_INST_FOREACH_STATUS_OKAY(GPIO_INST_INIT)
 8017544:	b510      	push	{r4, lr}
 8017546:	460c      	mov	r4, r1
 8017548:	68c8      	ldr	r0, [r1, #12]
 801754a:	f00a fb34 	bl	8021bb6 <kscan_gpio_disable_interrupts_0>
 801754e:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8017552:	f00a ff15 	bl	8022380 <k_delayed_work_cancel>
 8017556:	2232      	movs	r2, #50	; 0x32
 8017558:	2300      	movs	r3, #0
 801755a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801755e:	4802      	ldr	r0, [pc, #8]	; (8017568 <kscan_gpio_irq_callback_handler_0+0x24>)
 8017560:	f001 fc86 	bl	8018e70 <k_delayed_work_submit_to_queue>
 8017564:	bd10      	pop	{r4, pc}
 8017566:	bf00      	nop
 8017568:	20003310 	.word	0x20003310

0801756c <kscan_gpio_set_output_state_0>:
 801756c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017570:	b083      	sub	sp, #12
 8017572:	4606      	mov	r6, r0
 8017574:	460f      	mov	r7, r1
 8017576:	2400      	movs	r4, #0
 8017578:	e00b      	b.n	8017592 <kscan_gpio_set_output_state_0+0x26>
 801757a:	463b      	mov	r3, r7

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (value != 0)	{
 801757c:	b31b      	cbz	r3, 80175c6 <kscan_gpio_set_output_state_0+0x5a>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 801757e:	2301      	movs	r3, #1
 8017580:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 8017584:	f8d9 3008 	ldr.w	r3, [r9, #8]
	return api->port_set_bits_raw(port, pins);
 8017588:	68db      	ldr	r3, [r3, #12]
 801758a:	4648      	mov	r0, r9
 801758c:	4798      	blx	r3
 801758e:	bb18      	cbnz	r0, 80175d8 <kscan_gpio_set_output_state_0+0x6c>
 8017590:	3401      	adds	r4, #1
 8017592:	2c05      	cmp	r4, #5
 8017594:	dc35      	bgt.n	8017602 <kscan_gpio_set_output_state_0+0x96>
 8017596:	4630      	mov	r0, r6
 8017598:	f00a faf1 	bl	8021b7e <kscan_gpio_output_devices_0>
 801759c:	f850 9024 	ldr.w	r9, [r0, r4, lsl #2]
 80175a0:	4630      	mov	r0, r6
 80175a2:	f00a faef 	bl	8021b84 <kscan_gpio_output_configs_0>
 80175a6:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80175aa:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80175ae:	7929      	ldrb	r1, [r5, #4]
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
			       int value)
{
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
 80175b0:	f8d9 300c 	ldr.w	r3, [r9, #12]

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 80175b4:	681a      	ldr	r2, [r3, #0]
 80175b6:	2301      	movs	r3, #1
 80175b8:	408b      	lsls	r3, r1
 80175ba:	421a      	tst	r2, r3
 80175bc:	d0dd      	beq.n	801757a <kscan_gpio_set_output_state_0+0xe>
		value = (value != 0) ? 0 : 1;
 80175be:	fab7 f387 	clz	r3, r7
 80175c2:	095b      	lsrs	r3, r3, #5
 80175c4:	e7da      	b.n	801757c <kscan_gpio_set_output_state_0+0x10>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 80175c6:	2301      	movs	r3, #1
 80175c8:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 80175cc:	f8d9 3008 	ldr.w	r3, [r9, #8]
	return api->port_clear_bits_raw(port, pins);
 80175d0:	691b      	ldr	r3, [r3, #16]
 80175d2:	4648      	mov	r0, r9
 80175d4:	4798      	blx	r3
 80175d6:	e7da      	b.n	801758e <kscan_gpio_set_output_state_0+0x22>
 80175d8:	2204      	movs	r2, #4
 80175da:	f362 0802 	bfi	r8, r2, #0, #3
 80175de:	f36f 08c5 	bfc	r8, #3, #3
 80175e2:	4a09      	ldr	r2, [pc, #36]	; (8017608 <kscan_gpio_set_output_state_0+0x9c>)
 80175e4:	4909      	ldr	r1, [pc, #36]	; (801760c <kscan_gpio_set_output_state_0+0xa0>)
 80175e6:	1a52      	subs	r2, r2, r1
 80175e8:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 80175ec:	f362 188f 	bfi	r8, r2, #6, #10
 80175f0:	792a      	ldrb	r2, [r5, #4]
 80175f2:	f8ad 8000 	strh.w	r8, [sp]
 80175f6:	4603      	mov	r3, r0
 80175f8:	4905      	ldr	r1, [pc, #20]	; (8017610 <kscan_gpio_set_output_state_0+0xa4>)
 80175fa:	4806      	ldr	r0, [pc, #24]	; (8017614 <kscan_gpio_set_output_state_0+0xa8>)
 80175fc:	f7ee fed4 	bl	80063a8 <log_3>
 8017600:	e7c6      	b.n	8017590 <kscan_gpio_set_output_state_0+0x24>
 8017602:	b003      	add	sp, #12
 8017604:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017608:	08022c60 	.word	0x08022c60
 801760c:	08022b90 	.word	0x08022b90
 8017610:	080281c8 	.word	0x080281c8
 8017614:	08028084 	.word	0x08028084

08017618 <kscan_gpio_read_0>:
 8017618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801761c:	b089      	sub	sp, #36	; 0x24
 801761e:	4606      	mov	r6, r0
 8017620:	f8d0 b00c 	ldr.w	fp, [r0, #12]
 8017624:	2100      	movs	r1, #0
 8017626:	f7ff ffa1 	bl	801756c <kscan_gpio_set_output_state_0>
 801762a:	f04f 0800 	mov.w	r8, #0
 801762e:	f8cd b008 	str.w	fp, [sp, #8]
 8017632:	f8ad 700e 	strh.w	r7, [sp, #14]
 8017636:	e056      	b.n	80176e6 <kscan_gpio_read_0+0xce>
		value = (value != 0) ? 0 : 1;
 8017638:	2300      	movs	r3, #0
 801763a:	e06e      	b.n	801771a <kscan_gpio_read_0+0x102>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 801763c:	2301      	movs	r3, #1
 801763e:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 8017642:	f8d9 3008 	ldr.w	r3, [r9, #8]
	return api->port_clear_bits_raw(port, pins);
 8017646:	691b      	ldr	r3, [r3, #16]
 8017648:	4648      	mov	r0, r9
 801764a:	4798      	blx	r3
 801764c:	e06f      	b.n	801772e <kscan_gpio_read_0+0x116>
 801764e:	2b00      	cmp	r3, #0
 8017650:	bfd4      	ite	le
 8017652:	2300      	movle	r3, #0
 8017654:	2301      	movgt	r3, #1
 8017656:	4642      	mov	r2, r8
 8017658:	4639      	mov	r1, r7
 801765a:	4875      	ldr	r0, [pc, #468]	; (8017830 <kscan_gpio_read_0+0x218>)
 801765c:	f00a fa95 	bl	8021b8a <kscan_gpio_set_matrix_state_0>
 8017660:	3401      	adds	r4, #1
 8017662:	2c03      	cmp	r4, #3
 8017664:	dc28      	bgt.n	80176b8 <kscan_gpio_read_0+0xa0>
 8017666:	4630      	mov	r0, r6
 8017668:	f00a fa84 	bl	8021b74 <kscan_gpio_input_devices_0>
 801766c:	4627      	mov	r7, r4
 801766e:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 8017672:	4630      	mov	r0, r6
 8017674:	f00a fa81 	bl	8021b7a <kscan_gpio_input_configs_0>
 8017678:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801767c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8017680:	f890 a004 	ldrb.w	sl, [r0, #4]
	const struct gpio_driver_data *const data =
 8017684:	f8d5 b00c 	ldr.w	fp, [r5, #12]
	const struct gpio_driver_api *api =
 8017688:	68ab      	ldr	r3, [r5, #8]
	return api->port_get_raw(port, value);
 801768a:	685b      	ldr	r3, [r3, #4]
 801768c:	a904      	add	r1, sp, #16
 801768e:	4628      	mov	r0, r5
 8017690:	4798      	blx	r3
	if (ret == 0) {
 8017692:	4603      	mov	r3, r0
 8017694:	b920      	cbnz	r0, 80176a0 <kscan_gpio_read_0+0x88>
		*value ^= data->invert;
 8017696:	f8db 1000 	ldr.w	r1, [fp]
 801769a:	9a04      	ldr	r2, [sp, #16]
 801769c:	404a      	eors	r2, r1
 801769e:	9204      	str	r2, [sp, #16]
	if (ret == 0) {
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d1d4      	bne.n	801764e <kscan_gpio_read_0+0x36>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 80176a4:	2301      	movs	r3, #1
 80176a6:	fa03 fa0a 	lsl.w	sl, r3, sl
 80176aa:	9b04      	ldr	r3, [sp, #16]
 80176ac:	ea1a 0f03 	tst.w	sl, r3
 80176b0:	bf14      	ite	ne
 80176b2:	2301      	movne	r3, #1
 80176b4:	2300      	moveq	r3, #0
 80176b6:	e7ca      	b.n	801764e <kscan_gpio_read_0+0x36>
 80176b8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80176bc:	9b00      	ldr	r3, [sp, #0]
 80176be:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
 80176c0:	f8d9 300c 	ldr.w	r3, [r9, #12]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 80176c4:	681a      	ldr	r2, [r3, #0]
 80176c6:	2301      	movs	r3, #1
 80176c8:	408b      	lsls	r3, r1
 80176ca:	421a      	tst	r2, r3
 80176cc:	d134      	bne.n	8017738 <kscan_gpio_read_0+0x120>
 80176ce:	2300      	movs	r3, #0
	if (value != 0)	{
 80176d0:	b3a3      	cbz	r3, 801773c <kscan_gpio_read_0+0x124>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 80176d2:	2301      	movs	r3, #1
 80176d4:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 80176d8:	f8d9 3008 	ldr.w	r3, [r9, #8]
	return api->port_set_bits_raw(port, pins);
 80176dc:	68db      	ldr	r3, [r3, #12]
 80176de:	4648      	mov	r0, r9
 80176e0:	4798      	blx	r3
 80176e2:	f108 0801 	add.w	r8, r8, #1
 80176e6:	f1b8 0f05 	cmp.w	r8, #5
 80176ea:	dc30      	bgt.n	801774e <kscan_gpio_read_0+0x136>
 80176ec:	4630      	mov	r0, r6
 80176ee:	f00a fa46 	bl	8021b7e <kscan_gpio_output_devices_0>
 80176f2:	4645      	mov	r5, r8
 80176f4:	f850 9028 	ldr.w	r9, [r0, r8, lsl #2]
 80176f8:	4630      	mov	r0, r6
 80176fa:	f00a fa43 	bl	8021b84 <kscan_gpio_output_configs_0>
 80176fe:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8017702:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8017706:	9300      	str	r3, [sp, #0]
 8017708:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
 801770a:	f8d9 300c 	ldr.w	r3, [r9, #12]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 801770e:	681a      	ldr	r2, [r3, #0]
 8017710:	2301      	movs	r3, #1
 8017712:	408b      	lsls	r3, r1
 8017714:	421a      	tst	r2, r3
 8017716:	d18f      	bne.n	8017638 <kscan_gpio_read_0+0x20>
 8017718:	2301      	movs	r3, #1
	if (value != 0)	{
 801771a:	2b00      	cmp	r3, #0
 801771c:	d08e      	beq.n	801763c <kscan_gpio_read_0+0x24>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 801771e:	2301      	movs	r3, #1
 8017720:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 8017724:	f8d9 3008 	ldr.w	r3, [r9, #8]
	return api->port_set_bits_raw(port, pins);
 8017728:	68db      	ldr	r3, [r3, #12]
 801772a:	4648      	mov	r0, r9
 801772c:	4798      	blx	r3
 801772e:	2400      	movs	r4, #0
 8017730:	f8cd 8004 	str.w	r8, [sp, #4]
 8017734:	46a8      	mov	r8, r5
	return ret;
 8017736:	e794      	b.n	8017662 <kscan_gpio_read_0+0x4a>
		value = (value != 0) ? 0 : 1;
 8017738:	2301      	movs	r3, #1
 801773a:	e7c9      	b.n	80176d0 <kscan_gpio_read_0+0xb8>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 801773c:	2301      	movs	r3, #1
 801773e:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 8017742:	f8d9 3008 	ldr.w	r3, [r9, #8]
	return api->port_clear_bits_raw(port, pins);
 8017746:	691b      	ldr	r3, [r3, #16]
 8017748:	4648      	mov	r0, r9
 801774a:	4798      	blx	r3
 801774c:	e7c9      	b.n	80176e2 <kscan_gpio_read_0+0xca>
 801774e:	f8dd b008 	ldr.w	fp, [sp, #8]
 8017752:	f8bd 700e 	ldrh.w	r7, [sp, #14]
 8017756:	2101      	movs	r1, #1
 8017758:	4630      	mov	r0, r6
 801775a:	f7ff ff07 	bl	801756c <kscan_gpio_set_output_state_0>
 801775e:	f04f 0800 	mov.w	r8, #0
 8017762:	46c2      	mov	sl, r8
 8017764:	4645      	mov	r5, r8
 8017766:	46b0      	mov	r8, r6
 8017768:	e047      	b.n	80177fa <kscan_gpio_read_0+0x1e2>
 801776a:	2701      	movs	r7, #1
 801776c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8017770:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 8017774:	4423      	add	r3, r4
 8017776:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801777a:	42b3      	cmp	r3, r6
 801777c:	d028      	beq.n	80177d0 <kscan_gpio_read_0+0x1b8>
 801777e:	2304      	movs	r3, #4
 8017780:	f363 0902 	bfi	r9, r3, #0, #3
 8017784:	f36f 09c5 	bfc	r9, #3, #3
 8017788:	4b2a      	ldr	r3, [pc, #168]	; (8017834 <kscan_gpio_read_0+0x21c>)
 801778a:	4a2b      	ldr	r2, [pc, #172]	; (8017838 <kscan_gpio_read_0+0x220>)
 801778c:	1a9b      	subs	r3, r3, r2
 801778e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8017792:	f363 198f 	bfi	r9, r3, #6, #10
 8017796:	4b29      	ldr	r3, [pc, #164]	; (801783c <kscan_gpio_read_0+0x224>)
 8017798:	9304      	str	r3, [sp, #16]
 801779a:	9500      	str	r5, [sp, #0]
 801779c:	9505      	str	r5, [sp, #20]
 801779e:	46a2      	mov	sl, r4
 80177a0:	9406      	str	r4, [sp, #24]
 80177a2:	b32e      	cbz	r6, 80177f0 <kscan_gpio_read_0+0x1d8>
 80177a4:	4b26      	ldr	r3, [pc, #152]	; (8017840 <kscan_gpio_read_0+0x228>)
 80177a6:	9307      	str	r3, [sp, #28]
 80177a8:	464b      	mov	r3, r9
 80177aa:	2204      	movs	r2, #4
 80177ac:	a904      	add	r1, sp, #16
 80177ae:	4825      	ldr	r0, [pc, #148]	; (8017844 <kscan_gpio_read_0+0x22c>)
 80177b0:	f7ee ffca 	bl	8006748 <log_n>
 80177b4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80177b8:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 80177bc:	4423      	add	r3, r4
 80177be:	f883 6038 	strb.w	r6, [r3, #56]	; 0x38
 80177c2:	4633      	mov	r3, r6
 80177c4:	4652      	mov	r2, sl
 80177c6:	9900      	ldr	r1, [sp, #0]
 80177c8:	4640      	mov	r0, r8
 80177ca:	f8db 6000 	ldr.w	r6, [fp]
 80177ce:	47b0      	blx	r6
 80177d0:	3401      	adds	r4, #1
 80177d2:	2c05      	cmp	r4, #5
 80177d4:	dc0e      	bgt.n	80177f4 <kscan_gpio_read_0+0x1dc>
 80177d6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80177da:	4a15      	ldr	r2, [pc, #84]	; (8017830 <kscan_gpio_read_0+0x218>)
 80177dc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80177e0:	5d1e      	ldrb	r6, [r3, r4]
 80177e2:	2f00      	cmp	r7, #0
 80177e4:	d1c1      	bne.n	801776a <kscan_gpio_read_0+0x152>
 80177e6:	b10e      	cbz	r6, 80177ec <kscan_gpio_read_0+0x1d4>
 80177e8:	2701      	movs	r7, #1
 80177ea:	e7bf      	b.n	801776c <kscan_gpio_read_0+0x154>
 80177ec:	2700      	movs	r7, #0
 80177ee:	e7bd      	b.n	801776c <kscan_gpio_read_0+0x154>
 80177f0:	4b15      	ldr	r3, [pc, #84]	; (8017848 <kscan_gpio_read_0+0x230>)
 80177f2:	e7d8      	b.n	80177a6 <kscan_gpio_read_0+0x18e>
 80177f4:	46ba      	mov	sl, r7
 80177f6:	464f      	mov	r7, r9
 80177f8:	3501      	adds	r5, #1
 80177fa:	2d03      	cmp	r5, #3
 80177fc:	dc03      	bgt.n	8017806 <kscan_gpio_read_0+0x1ee>
 80177fe:	2400      	movs	r4, #0
 8017800:	46b9      	mov	r9, r7
 8017802:	4657      	mov	r7, sl
 8017804:	e7e5      	b.n	80177d2 <kscan_gpio_read_0+0x1ba>
 8017806:	4654      	mov	r4, sl
 8017808:	b174      	cbz	r4, 8017828 <kscan_gpio_read_0+0x210>
 801780a:	f10b 0408 	add.w	r4, fp, #8
 801780e:	4620      	mov	r0, r4
 8017810:	f00a fdb6 	bl	8022380 <k_delayed_work_cancel>
 8017814:	2232      	movs	r2, #50	; 0x32
 8017816:	2300      	movs	r3, #0
 8017818:	4621      	mov	r1, r4
 801781a:	480c      	ldr	r0, [pc, #48]	; (801784c <kscan_gpio_read_0+0x234>)
 801781c:	f001 fb28 	bl	8018e70 <k_delayed_work_submit_to_queue>
 8017820:	2000      	movs	r0, #0
 8017822:	b009      	add	sp, #36	; 0x24
 8017824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017828:	4640      	mov	r0, r8
 801782a:	f00a f9b4 	bl	8021b96 <kscan_gpio_enable_interrupts_0>
 801782e:	e7f7      	b.n	8017820 <kscan_gpio_read_0+0x208>
 8017830:	200046d0 	.word	0x200046d0
 8017834:	08022c60 	.word	0x08022c60
 8017838:	08022b90 	.word	0x08022b90
 801783c:	080281e8 	.word	0x080281e8
 8017840:	08027438 	.word	0x08027438
 8017844:	080280ac 	.word	0x080280ac
 8017848:	080280a8 	.word	0x080280a8
 801784c:	20003310 	.word	0x20003310

08017850 <kscan_gpio_init_0>:
 8017850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017854:	b089      	sub	sp, #36	; 0x24
 8017856:	4683      	mov	fp, r0
 8017858:	68c3      	ldr	r3, [r0, #12]
 801785a:	9306      	str	r3, [sp, #24]
 801785c:	f00a f98a 	bl	8021b74 <kscan_gpio_input_devices_0>
 8017860:	9004      	str	r0, [sp, #16]
 8017862:	f04f 0800 	mov.w	r8, #0
 8017866:	f8cd b00c 	str.w	fp, [sp, #12]
 801786a:	e062      	b.n	8017932 <kscan_gpio_init_0+0xe2>
 801786c:	f04f 0100 	mov.w	r1, #0
 8017870:	2301      	movs	r3, #1
 8017872:	f363 0102 	bfi	r1, r3, #0, #3
 8017876:	f36f 01c5 	bfc	r1, #3, #3
 801787a:	4bc1      	ldr	r3, [pc, #772]	; (8017b80 <kscan_gpio_init_0+0x330>)
 801787c:	4ac1      	ldr	r2, [pc, #772]	; (8017b84 <kscan_gpio_init_0+0x334>)
 801787e:	1a9b      	subs	r3, r3, r2
 8017880:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8017884:	f363 118f 	bfi	r1, r3, #6, #10
 8017888:	48bf      	ldr	r0, [pc, #764]	; (8017b88 <kscan_gpio_init_0+0x338>)
 801788a:	f7ee ffc9 	bl	8006820 <log_0>
 801788e:	f06f 0315 	mvn.w	r3, #21
 8017892:	461c      	mov	r4, r3
 8017894:	e194      	b.n	8017bc0 <kscan_gpio_init_0+0x370>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8017896:	2201      	movs	r2, #1
 8017898:	9902      	ldr	r1, [sp, #8]
 801789a:	fa02 f101 	lsl.w	r1, r2, r1
 801789e:	f8db 2000 	ldr.w	r2, [fp]
 80178a2:	ea22 0201 	bic.w	r2, r2, r1
 80178a6:	f8cb 2000 	str.w	r2, [fp]
 80178aa:	e088      	b.n	80179be <kscan_gpio_init_0+0x16e>
	return api->pin_interrupt_configure(port, pin, mode, trig);
 80178ac:	699e      	ldr	r6, [r3, #24]
 80178ae:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
 80178b2:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
 80178b6:	9902      	ldr	r1, [sp, #8]
 80178b8:	4620      	mov	r0, r4
 80178ba:	47b0      	blx	r6
 80178bc:	4603      	mov	r3, r0
 80178be:	2b00      	cmp	r3, #0
 80178c0:	f040 8098 	bne.w	80179f4 <kscan_gpio_init_0+0x1a4>
 80178c4:	2304      	movs	r3, #4
 80178c6:	f363 0902 	bfi	r9, r3, #0, #3
 80178ca:	f36f 09c5 	bfc	r9, #3, #3
 80178ce:	4bac      	ldr	r3, [pc, #688]	; (8017b80 <kscan_gpio_init_0+0x330>)
 80178d0:	4aac      	ldr	r2, [pc, #688]	; (8017b84 <kscan_gpio_init_0+0x334>)
 80178d2:	1a9b      	subs	r3, r3, r2
 80178d4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80178d8:	f363 198f 	bfi	r9, r3, #6, #10
 80178dc:	f89a 2004 	ldrb.w	r2, [sl, #4]
 80178e0:	59eb      	ldr	r3, [r5, r7]
 80178e2:	f8ad 9000 	strh.w	r9, [sp]
 80178e6:	49a9      	ldr	r1, [pc, #676]	; (8017b8c <kscan_gpio_init_0+0x33c>)
 80178e8:	48a9      	ldr	r0, [pc, #676]	; (8017b90 <kscan_gpio_init_0+0x340>)
 80178ea:	f7ee fd5d 	bl	80063a8 <log_3>
 80178ee:	9b06      	ldr	r3, [sp, #24]
 80178f0:	f103 0208 	add.w	r2, r3, #8
 80178f4:	49a7      	ldr	r1, [pc, #668]	; (8017b94 <kscan_gpio_init_0+0x344>)
 80178f6:	eb08 0088 	add.w	r0, r8, r8, lsl #2
 80178fa:	eb01 0380 	add.w	r3, r1, r0, lsl #2
 80178fe:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
 8017902:	9a03      	ldr	r2, [sp, #12]
 8017904:	611a      	str	r2, [r3, #16]
 8017906:	1d19      	adds	r1, r3, #4
 8017908:	f89a 0004 	ldrb.w	r0, [sl, #4]
 801790c:	2201      	movs	r2, #1
 801790e:	4082      	lsls	r2, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
 8017910:	48a1      	ldr	r0, [pc, #644]	; (8017b98 <kscan_gpio_init_0+0x348>)
 8017912:	6098      	str	r0, [r3, #8]
	callback->pin_mask = pin_mask;
 8017914:	60da      	str	r2, [r3, #12]
 8017916:	9b04      	ldr	r3, [sp, #16]
 8017918:	9a05      	ldr	r2, [sp, #20]
 801791a:	5898      	ldr	r0, [r3, r2]
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
 801791c:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
 801791e:	69db      	ldr	r3, [r3, #28]
 8017920:	2b00      	cmp	r3, #0
 8017922:	f000 8091 	beq.w	8017a48 <kscan_gpio_init_0+0x1f8>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
 8017926:	2201      	movs	r2, #1
 8017928:	4798      	blx	r3
 801792a:	2800      	cmp	r0, #0
 801792c:	d179      	bne.n	8017a22 <kscan_gpio_init_0+0x1d2>
 801792e:	f108 0801 	add.w	r8, r8, #1
 8017932:	f1b8 0f03 	cmp.w	r8, #3
 8017936:	f300 808b 	bgt.w	8017a50 <kscan_gpio_init_0+0x200>
 801793a:	9803      	ldr	r0, [sp, #12]
 801793c:	f00a f91d 	bl	8021b7a <kscan_gpio_input_configs_0>
 8017940:	4605      	mov	r5, r0
 8017942:	eb08 0a48 	add.w	sl, r8, r8, lsl #1
 8017946:	ea4f 078a 	mov.w	r7, sl, lsl #2
 801794a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 801794e:	59c0      	ldr	r0, [r0, r7]
 8017950:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8017954:	9305      	str	r3, [sp, #20]
 8017956:	f000 f97b 	bl	8017c50 <z_impl_device_get_binding>
 801795a:	4604      	mov	r4, r0
 801795c:	9b04      	ldr	r3, [sp, #16]
 801795e:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8017962:	2800      	cmp	r0, #0
 8017964:	d082      	beq.n	801786c <kscan_gpio_init_0+0x1c>
 8017966:	f89a 3004 	ldrb.w	r3, [sl, #4]
 801796a:	9302      	str	r3, [sp, #8]
 801796c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8017970:	f443 7680 	orr.w	r6, r3, #256	; 0x100
	const struct gpio_driver_api *api =
 8017974:	6882      	ldr	r2, [r0, #8]
 8017976:	9207      	str	r2, [sp, #28]
	struct gpio_driver_data *data =
 8017978:	f8d0 b00c 	ldr.w	fp, [r0, #12]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 801797c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8017980:	d007      	beq.n	8017992 <kscan_gpio_init_0+0x142>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8017982:	f416 6f40 	tst.w	r6, #3072	; 0xc00
 8017986:	d004      	beq.n	8017992 <kscan_gpio_init_0+0x142>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8017988:	f016 0f01 	tst.w	r6, #1
 801798c:	d001      	beq.n	8017992 <kscan_gpio_init_0+0x142>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
 801798e:	f486 56e0 	eor.w	r6, r6, #7168	; 0x1c00
	const struct gpio_driver_api *api =
 8017992:	68a3      	ldr	r3, [r4, #8]
	return api->pin_configure(port, pin, flags);
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	4632      	mov	r2, r6
 8017998:	9902      	ldr	r1, [sp, #8]
 801799a:	4620      	mov	r0, r4
 801799c:	4798      	blx	r3
	if (ret != 0) {
 801799e:	4603      	mov	r3, r0
 80179a0:	2800      	cmp	r0, #0
 80179a2:	d18c      	bne.n	80178be <kscan_gpio_init_0+0x6e>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 80179a4:	f016 0f01 	tst.w	r6, #1
 80179a8:	f43f af75 	beq.w	8017896 <kscan_gpio_init_0+0x46>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80179ac:	2201      	movs	r2, #1
 80179ae:	9902      	ldr	r1, [sp, #8]
 80179b0:	fa02 f101 	lsl.w	r1, r2, r1
 80179b4:	f8db 2000 	ldr.w	r2, [fp]
 80179b8:	430a      	orrs	r2, r1
 80179ba:	f8cb 2000 	str.w	r2, [fp]
	if (((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U)
 80179be:	f416 4fc0 	tst.w	r6, #24576	; 0x6000
 80179c2:	f43f af7c 	beq.w	80178be <kscan_gpio_init_0+0x6e>
	    && (api->pin_interrupt_configure != NULL)) {
 80179c6:	9a07      	ldr	r2, [sp, #28]
 80179c8:	6992      	ldr	r2, [r2, #24]
 80179ca:	2a00      	cmp	r2, #0
 80179cc:	f43f af77 	beq.w	80178be <kscan_gpio_init_0+0x6e>
		flags &= ~GPIO_INT_DEBOUNCE;
 80179d0:	f426 2200 	bic.w	r2, r6, #524288	; 0x80000
	const struct gpio_driver_api *api =
 80179d4:	68a3      	ldr	r3, [r4, #8]
	const struct gpio_driver_data *const data =
 80179d6:	68e1      	ldr	r1, [r4, #12]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 80179d8:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 80179dc:	f43f af66 	beq.w	80178ac <kscan_gpio_init_0+0x5c>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 80179e0:	6808      	ldr	r0, [r1, #0]
 80179e2:	2101      	movs	r1, #1
 80179e4:	9e02      	ldr	r6, [sp, #8]
 80179e6:	40b1      	lsls	r1, r6
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 80179e8:	4208      	tst	r0, r1
 80179ea:	f43f af5f 	beq.w	80178ac <kscan_gpio_init_0+0x5c>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
 80179ee:	f482 22c0 	eor.w	r2, r2, #393216	; 0x60000
 80179f2:	e75b      	b.n	80178ac <kscan_gpio_init_0+0x5c>
 80179f4:	461c      	mov	r4, r3
 80179f6:	f04f 0300 	mov.w	r3, #0
 80179fa:	2201      	movs	r2, #1
 80179fc:	f362 0302 	bfi	r3, r2, #0, #3
 8017a00:	f36f 03c5 	bfc	r3, #3, #3
 8017a04:	4a5e      	ldr	r2, [pc, #376]	; (8017b80 <kscan_gpio_init_0+0x330>)
 8017a06:	495f      	ldr	r1, [pc, #380]	; (8017b84 <kscan_gpio_init_0+0x334>)
 8017a08:	1a52      	subs	r2, r2, r1
 8017a0a:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8017a0e:	f362 138f 	bfi	r3, r2, #6, #10
 8017a12:	f8da 2000 	ldr.w	r2, [sl]
 8017a16:	f89a 1004 	ldrb.w	r1, [sl, #4]
 8017a1a:	4860      	ldr	r0, [pc, #384]	; (8017b9c <kscan_gpio_init_0+0x34c>)
 8017a1c:	f7ee fe10 	bl	8006640 <log_2>
 8017a20:	e0ce      	b.n	8017bc0 <kscan_gpio_init_0+0x370>
 8017a22:	4604      	mov	r4, r0
 8017a24:	f04f 0100 	mov.w	r1, #0
 8017a28:	2301      	movs	r3, #1
 8017a2a:	f363 0102 	bfi	r1, r3, #0, #3
 8017a2e:	f36f 01c5 	bfc	r1, #3, #3
 8017a32:	4b53      	ldr	r3, [pc, #332]	; (8017b80 <kscan_gpio_init_0+0x330>)
 8017a34:	4a53      	ldr	r2, [pc, #332]	; (8017b84 <kscan_gpio_init_0+0x334>)
 8017a36:	1a9b      	subs	r3, r3, r2
 8017a38:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8017a3c:	f363 118f 	bfi	r1, r3, #6, #10
 8017a40:	4857      	ldr	r0, [pc, #348]	; (8017ba0 <kscan_gpio_init_0+0x350>)
 8017a42:	f7ee feed 	bl	8006820 <log_0>
 8017a46:	e0bb      	b.n	8017bc0 <kscan_gpio_init_0+0x370>
		return -ENOTSUP;
 8017a48:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8017a4c:	461c      	mov	r4, r3
 8017a4e:	e7e9      	b.n	8017a24 <kscan_gpio_init_0+0x1d4>
 8017a50:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8017a54:	4658      	mov	r0, fp
 8017a56:	f00a f892 	bl	8021b7e <kscan_gpio_output_devices_0>
 8017a5a:	9002      	str	r0, [sp, #8]
 8017a5c:	2600      	movs	r6, #0
 8017a5e:	e02a      	b.n	8017ab6 <kscan_gpio_init_0+0x266>
 8017a60:	f04f 0100 	mov.w	r1, #0
 8017a64:	2301      	movs	r3, #1
 8017a66:	f363 0102 	bfi	r1, r3, #0, #3
 8017a6a:	f36f 01c5 	bfc	r1, #3, #3
 8017a6e:	4b44      	ldr	r3, [pc, #272]	; (8017b80 <kscan_gpio_init_0+0x330>)
 8017a70:	4a44      	ldr	r2, [pc, #272]	; (8017b84 <kscan_gpio_init_0+0x334>)
 8017a72:	1a9b      	subs	r3, r3, r2
 8017a74:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8017a78:	f363 118f 	bfi	r1, r3, #6, #10
 8017a7c:	4849      	ldr	r0, [pc, #292]	; (8017ba4 <kscan_gpio_init_0+0x354>)
 8017a7e:	f7ee fecf 	bl	8006820 <log_0>
 8017a82:	f06f 0315 	mvn.w	r3, #21
 8017a86:	461c      	mov	r4, r3
 8017a88:	e09a      	b.n	8017bc0 <kscan_gpio_init_0+0x370>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8017a8a:	2201      	movs	r2, #1
 8017a8c:	fa02 f108 	lsl.w	r1, r2, r8
 8017a90:	f8d9 2000 	ldr.w	r2, [r9]
 8017a94:	ea22 0201 	bic.w	r2, r2, r1
 8017a98:	f8c9 2000 	str.w	r2, [r9]
 8017a9c:	e043      	b.n	8017b26 <kscan_gpio_init_0+0x2d6>
	return api->pin_interrupt_configure(port, pin, mode, trig);
 8017a9e:	699d      	ldr	r5, [r3, #24]
 8017aa0:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
 8017aa4:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
 8017aa8:	4641      	mov	r1, r8
 8017aaa:	4620      	mov	r0, r4
 8017aac:	47a8      	blx	r5
 8017aae:	4603      	mov	r3, r0
 8017ab0:	2b00      	cmp	r3, #0
 8017ab2:	d14f      	bne.n	8017b54 <kscan_gpio_init_0+0x304>
 8017ab4:	3601      	adds	r6, #1
 8017ab6:	2e05      	cmp	r6, #5
 8017ab8:	dc78      	bgt.n	8017bac <kscan_gpio_init_0+0x35c>
 8017aba:	4658      	mov	r0, fp
 8017abc:	f00a f862 	bl	8021b84 <kscan_gpio_output_configs_0>
 8017ac0:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8017ac4:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 8017ac8:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8017acc:	f000 f8c0 	bl	8017c50 <z_impl_device_get_binding>
 8017ad0:	4604      	mov	r4, r0
 8017ad2:	9b02      	ldr	r3, [sp, #8]
 8017ad4:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8017ad8:	2800      	cmp	r0, #0
 8017ada:	d0c1      	beq.n	8017a60 <kscan_gpio_init_0+0x210>
 8017adc:	f897 8004 	ldrb.w	r8, [r7, #4]
 8017ae0:	68bd      	ldr	r5, [r7, #8]
 8017ae2:	f445 55d0 	orr.w	r5, r5, #6656	; 0x1a00
	const struct gpio_driver_api *api =
 8017ae6:	f8d0 a008 	ldr.w	sl, [r0, #8]
	struct gpio_driver_data *data =
 8017aea:	f8d0 900c 	ldr.w	r9, [r0, #12]
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8017aee:	f415 6f40 	tst.w	r5, #3072	; 0xc00
 8017af2:	d004      	beq.n	8017afe <kscan_gpio_init_0+0x2ae>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8017af4:	f015 0f01 	tst.w	r5, #1
 8017af8:	d001      	beq.n	8017afe <kscan_gpio_init_0+0x2ae>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
 8017afa:	f485 55e0 	eor.w	r5, r5, #7168	; 0x1c00
	const struct gpio_driver_api *api =
 8017afe:	68a3      	ldr	r3, [r4, #8]
	return api->pin_configure(port, pin, flags);
 8017b00:	681b      	ldr	r3, [r3, #0]
 8017b02:	462a      	mov	r2, r5
 8017b04:	4641      	mov	r1, r8
 8017b06:	4620      	mov	r0, r4
 8017b08:	4798      	blx	r3
	if (ret != 0) {
 8017b0a:	4603      	mov	r3, r0
 8017b0c:	2800      	cmp	r0, #0
 8017b0e:	d1cf      	bne.n	8017ab0 <kscan_gpio_init_0+0x260>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8017b10:	f015 0f01 	tst.w	r5, #1
 8017b14:	d0b9      	beq.n	8017a8a <kscan_gpio_init_0+0x23a>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8017b16:	2201      	movs	r2, #1
 8017b18:	fa02 f108 	lsl.w	r1, r2, r8
 8017b1c:	f8d9 2000 	ldr.w	r2, [r9]
 8017b20:	430a      	orrs	r2, r1
 8017b22:	f8c9 2000 	str.w	r2, [r9]
	if (((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U)
 8017b26:	f415 4fc0 	tst.w	r5, #24576	; 0x6000
 8017b2a:	d0c1      	beq.n	8017ab0 <kscan_gpio_init_0+0x260>
	    && (api->pin_interrupt_configure != NULL)) {
 8017b2c:	f8da 2018 	ldr.w	r2, [sl, #24]
 8017b30:	2a00      	cmp	r2, #0
 8017b32:	d0bd      	beq.n	8017ab0 <kscan_gpio_init_0+0x260>
		flags &= ~GPIO_INT_DEBOUNCE;
 8017b34:	f425 2200 	bic.w	r2, r5, #524288	; 0x80000
	const struct gpio_driver_api *api =
 8017b38:	68a3      	ldr	r3, [r4, #8]
	const struct gpio_driver_data *const data =
 8017b3a:	68e1      	ldr	r1, [r4, #12]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 8017b3c:	f415 4f00 	tst.w	r5, #32768	; 0x8000
 8017b40:	d0ad      	beq.n	8017a9e <kscan_gpio_init_0+0x24e>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 8017b42:	6808      	ldr	r0, [r1, #0]
 8017b44:	2101      	movs	r1, #1
 8017b46:	fa01 f108 	lsl.w	r1, r1, r8
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 8017b4a:	4208      	tst	r0, r1
 8017b4c:	d0a7      	beq.n	8017a9e <kscan_gpio_init_0+0x24e>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
 8017b4e:	f482 22c0 	eor.w	r2, r2, #393216	; 0x60000
 8017b52:	e7a4      	b.n	8017a9e <kscan_gpio_init_0+0x24e>
 8017b54:	461c      	mov	r4, r3
 8017b56:	f04f 0300 	mov.w	r3, #0
 8017b5a:	2201      	movs	r2, #1
 8017b5c:	f362 0302 	bfi	r3, r2, #0, #3
 8017b60:	f36f 03c5 	bfc	r3, #3, #3
 8017b64:	4a06      	ldr	r2, [pc, #24]	; (8017b80 <kscan_gpio_init_0+0x330>)
 8017b66:	4907      	ldr	r1, [pc, #28]	; (8017b84 <kscan_gpio_init_0+0x334>)
 8017b68:	1a52      	subs	r2, r2, r1
 8017b6a:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8017b6e:	f362 138f 	bfi	r3, r2, #6, #10
 8017b72:	683a      	ldr	r2, [r7, #0]
 8017b74:	7939      	ldrb	r1, [r7, #4]
 8017b76:	480c      	ldr	r0, [pc, #48]	; (8017ba8 <kscan_gpio_init_0+0x358>)
 8017b78:	f7ee fd62 	bl	8006640 <log_2>
 8017b7c:	e020      	b.n	8017bc0 <kscan_gpio_init_0+0x370>
 8017b7e:	bf00      	nop
 8017b80:	08022c60 	.word	0x08022c60
 8017b84:	08022b90 	.word	0x08022b90
 8017b88:	080280d0 	.word	0x080280d0
 8017b8c:	08028214 	.word	0x08028214
 8017b90:	08028120 	.word	0x08028120
 8017b94:	20004680 	.word	0x20004680
 8017b98:	08017545 	.word	0x08017545
 8017b9c:	080280f4 	.word	0x080280f4
 8017ba0:	08028148 	.word	0x08028148
 8017ba4:	08028178 	.word	0x08028178
 8017ba8:	0802819c 	.word	0x0802819c
 8017bac:	9b06      	ldr	r3, [sp, #24]
 8017bae:	f8c3 b078 	str.w	fp, [r3, #120]	; 0x78
 8017bb2:	4905      	ldr	r1, [pc, #20]	; (8017bc8 <kscan_gpio_init_0+0x378>)
 8017bb4:	f103 0008 	add.w	r0, r3, #8
 8017bb8:	f00a fbda 	bl	8022370 <k_delayed_work_init>
 8017bbc:	2300      	movs	r3, #0
 8017bbe:	461c      	mov	r4, r3
 8017bc0:	4620      	mov	r0, r4
 8017bc2:	b009      	add	sp, #36	; 0x24
 8017bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bc8:	08021bf3 	.word	0x08021bf3

08017bcc <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
 8017bcc:	b570      	push	{r4, r5, r6, lr}
 8017bce:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8017bd0:	4b11      	ldr	r3, [pc, #68]	; (8017c18 <z_sys_init_run_level+0x4c>)
 8017bd2:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8017bd6:	e000      	b.n	8017bda <z_sys_init_run_level+0xe>
 8017bd8:	3508      	adds	r5, #8
 8017bda:	1c73      	adds	r3, r6, #1
 8017bdc:	4a0e      	ldr	r2, [pc, #56]	; (8017c18 <z_sys_init_run_level+0x4c>)
 8017bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017be2:	42ab      	cmp	r3, r5
 8017be4:	d917      	bls.n	8017c16 <z_sys_init_run_level+0x4a>
		const struct device *dev = entry->dev;
 8017be6:	686c      	ldr	r4, [r5, #4]

		if (dev != NULL) {
			z_object_init(dev);
		}

		if ((entry->init(dev) != 0) && (dev != NULL)) {
 8017be8:	682b      	ldr	r3, [r5, #0]
 8017bea:	4620      	mov	r0, r4
 8017bec:	4798      	blx	r3
 8017bee:	2800      	cmp	r0, #0
 8017bf0:	d0f2      	beq.n	8017bd8 <z_sys_init_run_level+0xc>
 8017bf2:	2c00      	cmp	r4, #0
 8017bf4:	d0f0      	beq.n	8017bd8 <z_sys_init_run_level+0xc>
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
 8017bf6:	4909      	ldr	r1, [pc, #36]	; (8017c1c <z_sys_init_run_level+0x50>)
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
 8017bf8:	4b09      	ldr	r3, [pc, #36]	; (8017c20 <z_sys_init_run_level+0x54>)
 8017bfa:	1ae4      	subs	r4, r4, r3
 8017bfc:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
 8017bfe:	0960      	lsrs	r0, r4, #5
 8017c00:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
 8017c04:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
 8017c08:	2201      	movs	r2, #1
 8017c0a:	fa02 f404 	lsl.w	r4, r2, r4
 8017c0e:	431c      	orrs	r4, r3
 8017c10:	f841 4020 	str.w	r4, [r1, r0, lsl #2]
}
 8017c14:	e7e0      	b.n	8017bd8 <z_sys_init_run_level+0xc>
		}
	}
}
 8017c16:	bd70      	pop	{r4, r5, r6, pc}
 8017c18:	080282ac 	.word	0x080282ac
 8017c1c:	20000ea8 	.word	0x20000ea8
 8017c20:	20000ce8 	.word	0x20000ce8

08017c24 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
 8017c24:	4b08      	ldr	r3, [pc, #32]	; (8017c48 <z_device_ready+0x24>)
 8017c26:	1ac0      	subs	r0, r0, r3
 8017c28:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
 8017c2a:	0942      	lsrs	r2, r0, #5
 8017c2c:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
 8017c30:	4b06      	ldr	r3, [pc, #24]	; (8017c4c <z_device_ready+0x28>)
 8017c32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
 8017c36:	2301      	movs	r3, #1
 8017c38:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
 8017c3c:	4202      	tst	r2, r0
}
 8017c3e:	bf0c      	ite	eq
 8017c40:	4618      	moveq	r0, r3
 8017c42:	2000      	movne	r0, #0
 8017c44:	4770      	bx	lr
 8017c46:	bf00      	nop
 8017c48:	20000ce8 	.word	0x20000ce8
 8017c4c:	20000ea8 	.word	0x20000ea8

08017c50 <z_impl_device_get_binding>:
{
 8017c50:	b538      	push	{r3, r4, r5, lr}
 8017c52:	4605      	mov	r5, r0
	for (dev = __device_start; dev != __device_end; dev++) {
 8017c54:	4c11      	ldr	r4, [pc, #68]	; (8017c9c <z_impl_device_get_binding+0x4c>)
 8017c56:	e000      	b.n	8017c5a <z_impl_device_get_binding+0xa>
 8017c58:	3410      	adds	r4, #16
 8017c5a:	4b11      	ldr	r3, [pc, #68]	; (8017ca0 <z_impl_device_get_binding+0x50>)
 8017c5c:	429c      	cmp	r4, r3
 8017c5e:	d008      	beq.n	8017c72 <z_impl_device_get_binding+0x22>
		if (z_device_ready(dev) && (dev->name == name)) {
 8017c60:	4620      	mov	r0, r4
 8017c62:	f7ff ffdf 	bl	8017c24 <z_device_ready>
 8017c66:	2800      	cmp	r0, #0
 8017c68:	d0f6      	beq.n	8017c58 <z_impl_device_get_binding+0x8>
 8017c6a:	6823      	ldr	r3, [r4, #0]
 8017c6c:	42ab      	cmp	r3, r5
 8017c6e:	d1f3      	bne.n	8017c58 <z_impl_device_get_binding+0x8>
 8017c70:	e012      	b.n	8017c98 <z_impl_device_get_binding+0x48>
	for (dev = __device_start; dev != __device_end; dev++) {
 8017c72:	4c0a      	ldr	r4, [pc, #40]	; (8017c9c <z_impl_device_get_binding+0x4c>)
 8017c74:	e000      	b.n	8017c78 <z_impl_device_get_binding+0x28>
 8017c76:	3410      	adds	r4, #16
 8017c78:	4b09      	ldr	r3, [pc, #36]	; (8017ca0 <z_impl_device_get_binding+0x50>)
 8017c7a:	429c      	cmp	r4, r3
 8017c7c:	d00b      	beq.n	8017c96 <z_impl_device_get_binding+0x46>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 8017c7e:	4620      	mov	r0, r4
 8017c80:	f7ff ffd0 	bl	8017c24 <z_device_ready>
 8017c84:	2800      	cmp	r0, #0
 8017c86:	d0f6      	beq.n	8017c76 <z_impl_device_get_binding+0x26>
 8017c88:	6821      	ldr	r1, [r4, #0]
 8017c8a:	4628      	mov	r0, r5
 8017c8c:	f004 fdd1 	bl	801c832 <strcmp>
 8017c90:	2800      	cmp	r0, #0
 8017c92:	d1f0      	bne.n	8017c76 <z_impl_device_get_binding+0x26>
 8017c94:	e000      	b.n	8017c98 <z_impl_device_get_binding+0x48>
	return NULL;
 8017c96:	2400      	movs	r4, #0
}
 8017c98:	4620      	mov	r0, r4
 8017c9a:	bd38      	pop	{r3, r4, r5, pc}
 8017c9c:	20000ce8 	.word	0x20000ce8
 8017ca0:	20000ea8 	.word	0x20000ea8

08017ca4 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
 8017ca4:	4b01      	ldr	r3, [pc, #4]	; (8017cac <z_impl_z_errno+0x8>)
 8017ca6:	6898      	ldr	r0, [r3, #8]
}
 8017ca8:	3064      	adds	r0, #100	; 0x64
 8017caa:	4770      	bx	lr
 8017cac:	200046e8 	.word	0x200046e8

08017cb0 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
 8017cb0:	2804      	cmp	r0, #4
 8017cb2:	d80c      	bhi.n	8017cce <reason_to_str+0x1e>
 8017cb4:	e8df f000 	tbb	[pc, r0]
 8017cb8:	07050d03 	.word	0x07050d03
 8017cbc:	09          	.byte	0x09
 8017cbd:	00          	.byte	0x00
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
 8017cbe:	4806      	ldr	r0, [pc, #24]	; (8017cd8 <reason_to_str+0x28>)
 8017cc0:	4770      	bx	lr
		return "Stack overflow";
 8017cc2:	4806      	ldr	r0, [pc, #24]	; (8017cdc <reason_to_str+0x2c>)
 8017cc4:	4770      	bx	lr
		return "Kernel oops";
 8017cc6:	4806      	ldr	r0, [pc, #24]	; (8017ce0 <reason_to_str+0x30>)
 8017cc8:	4770      	bx	lr
		return "Kernel panic";
 8017cca:	4806      	ldr	r0, [pc, #24]	; (8017ce4 <reason_to_str+0x34>)
 8017ccc:	4770      	bx	lr
	default:
		return "Unknown error";
 8017cce:	4806      	ldr	r0, [pc, #24]	; (8017ce8 <reason_to_str+0x38>)
 8017cd0:	4770      	bx	lr
		return "Unhandled interrupt";
 8017cd2:	4806      	ldr	r0, [pc, #24]	; (8017cec <reason_to_str+0x3c>)
	}
}
 8017cd4:	4770      	bx	lr
 8017cd6:	bf00      	nop
 8017cd8:	08028314 	.word	0x08028314
 8017cdc:	080282e8 	.word	0x080282e8
 8017ce0:	080282f8 	.word	0x080282f8
 8017ce4:	08028304 	.word	0x08028304
 8017ce8:	080282c4 	.word	0x080282c4
 8017cec:	080282d4 	.word	0x080282d4

08017cf0 <thread_name_get>:
{
 8017cf0:	b508      	push	{r3, lr}
	const char *thread_name = k_thread_name_get(thread);
 8017cf2:	f00a faa0 	bl	8022236 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
 8017cf6:	b120      	cbz	r0, 8017d02 <thread_name_get+0x12>
 8017cf8:	4603      	mov	r3, r0
 8017cfa:	7802      	ldrb	r2, [r0, #0]
 8017cfc:	b11a      	cbz	r2, 8017d06 <thread_name_get+0x16>
}
 8017cfe:	4618      	mov	r0, r3
 8017d00:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
 8017d02:	4b02      	ldr	r3, [pc, #8]	; (8017d0c <thread_name_get+0x1c>)
 8017d04:	e7fb      	b.n	8017cfe <thread_name_get+0xe>
 8017d06:	4b01      	ldr	r3, [pc, #4]	; (8017d0c <thread_name_get+0x1c>)
	return thread_name;
 8017d08:	e7f9      	b.n	8017cfe <thread_name_get+0xe>
 8017d0a:	bf00      	nop
 8017d0c:	08026410 	.word	0x08026410

08017d10 <k_sys_fatal_error_handler>:
{
 8017d10:	b510      	push	{r4, lr}
 8017d12:	4604      	mov	r4, r0
	z_impl_log_panic();
 8017d14:	f7ee fbd0 	bl	80064b8 <z_impl_log_panic>
	LOG_ERR("Halting system");
 8017d18:	f04f 0100 	mov.w	r1, #0
 8017d1c:	2301      	movs	r3, #1
 8017d1e:	f363 0102 	bfi	r1, r3, #0, #3
 8017d22:	f36f 01c5 	bfc	r1, #3, #3
 8017d26:	4b06      	ldr	r3, [pc, #24]	; (8017d40 <k_sys_fatal_error_handler+0x30>)
 8017d28:	4a06      	ldr	r2, [pc, #24]	; (8017d44 <k_sys_fatal_error_handler+0x34>)
 8017d2a:	1a9b      	subs	r3, r3, r2
 8017d2c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8017d30:	f363 118f 	bfi	r1, r3, #6, #10
 8017d34:	4804      	ldr	r0, [pc, #16]	; (8017d48 <k_sys_fatal_error_handler+0x38>)
 8017d36:	f7ee fd73 	bl	8006820 <log_0>
	arch_system_halt(reason);
 8017d3a:	4620      	mov	r0, r4
 8017d3c:	f009 ff5e 	bl	8021bfc <arch_system_halt>
 8017d40:	08022c20 	.word	0x08022c20
 8017d44:	08022b90 	.word	0x08022b90
 8017d48:	08028324 	.word	0x08028324

08017d4c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8017d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d50:	b082      	sub	sp, #8
 8017d52:	4605      	mov	r5, r0
 8017d54:	460e      	mov	r6, r1
	__asm__ volatile(
 8017d56:	f04f 0310 	mov.w	r3, #16
 8017d5a:	f3ef 8711 	mrs	r7, BASEPRI
 8017d5e:	f383 8811 	msr	BASEPRI, r3
 8017d62:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
 8017d66:	f000 ff69 	bl	8018c3c <z_impl_k_current_get>
 8017d6a:	4604      	mov	r4, r0
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 8017d6c:	f04f 0800 	mov.w	r8, #0
 8017d70:	2301      	movs	r3, #1
 8017d72:	f363 0802 	bfi	r8, r3, #0, #3
 8017d76:	f36f 08c5 	bfc	r8, #3, #3
 8017d7a:	4b28      	ldr	r3, [pc, #160]	; (8017e1c <z_fatal_error+0xd0>)
 8017d7c:	4a28      	ldr	r2, [pc, #160]	; (8017e20 <z_fatal_error+0xd4>)
 8017d7e:	1a9b      	subs	r3, r3, r2
 8017d80:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8017d84:	f363 188f 	bfi	r8, r3, #6, #10
 8017d88:	4628      	mov	r0, r5
 8017d8a:	f7ff ff91 	bl	8017cb0 <reason_to_str>
 8017d8e:	4602      	mov	r2, r0
 8017d90:	f8ad 8000 	strh.w	r8, [sp]
 8017d94:	2300      	movs	r3, #0
 8017d96:	4629      	mov	r1, r5
 8017d98:	4822      	ldr	r0, [pc, #136]	; (8017e24 <z_fatal_error+0xd8>)
 8017d9a:	f7ee fb05 	bl	80063a8 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 8017d9e:	b11e      	cbz	r6, 8017da8 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 8017da0:	69f3      	ldr	r3, [r6, #28]
 8017da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017da6:	bb33      	cbnz	r3, 8017df6 <z_fatal_error+0xaa>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 8017da8:	f04f 0800 	mov.w	r8, #0
 8017dac:	2301      	movs	r3, #1
 8017dae:	f363 0802 	bfi	r8, r3, #0, #3
 8017db2:	f36f 08c5 	bfc	r8, #3, #3
 8017db6:	4b19      	ldr	r3, [pc, #100]	; (8017e1c <z_fatal_error+0xd0>)
 8017db8:	4a19      	ldr	r2, [pc, #100]	; (8017e20 <z_fatal_error+0xd4>)
 8017dba:	1a9b      	subs	r3, r3, r2
 8017dbc:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8017dc0:	f363 188f 	bfi	r8, r3, #6, #10
 8017dc4:	4620      	mov	r0, r4
 8017dc6:	f7ff ff93 	bl	8017cf0 <thread_name_get>
 8017dca:	f7ee f9e9 	bl	80061a0 <log_strdup>
 8017dce:	4602      	mov	r2, r0
 8017dd0:	4643      	mov	r3, r8
 8017dd2:	4621      	mov	r1, r4
 8017dd4:	4814      	ldr	r0, [pc, #80]	; (8017e28 <z_fatal_error+0xdc>)
 8017dd6:	f7ee fc33 	bl	8006640 <log_2>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 8017dda:	4631      	mov	r1, r6
 8017ddc:	4628      	mov	r0, r5
 8017dde:	f7ff ff97 	bl	8017d10 <k_sys_fatal_error_handler>
	__asm__ volatile(
 8017de2:	f387 8811 	msr	BASEPRI, r7
 8017de6:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 8017dea:	4620      	mov	r0, r4
 8017dec:	f7f3 fe2e 	bl	800ba4c <z_impl_k_thread_abort>
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
 8017df0:	b002      	add	sp, #8
 8017df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Fault during interrupt handling\n");
 8017df6:	f04f 0100 	mov.w	r1, #0
 8017dfa:	2301      	movs	r3, #1
 8017dfc:	f363 0102 	bfi	r1, r3, #0, #3
 8017e00:	f36f 01c5 	bfc	r1, #3, #3
 8017e04:	4b05      	ldr	r3, [pc, #20]	; (8017e1c <z_fatal_error+0xd0>)
 8017e06:	4a06      	ldr	r2, [pc, #24]	; (8017e20 <z_fatal_error+0xd4>)
 8017e08:	1a9b      	subs	r3, r3, r2
 8017e0a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8017e0e:	f363 118f 	bfi	r1, r3, #6, #10
 8017e12:	4806      	ldr	r0, [pc, #24]	; (8017e2c <z_fatal_error+0xe0>)
 8017e14:	f7ee fd04 	bl	8006820 <log_0>
 8017e18:	e7c6      	b.n	8017da8 <z_fatal_error+0x5c>
 8017e1a:	bf00      	nop
 8017e1c:	08022c20 	.word	0x08022c20
 8017e20:	08022b90 	.word	0x08022b90
 8017e24:	08028334 	.word	0x08028334
 8017e28:	08028380 	.word	0x08028380
 8017e2c:	0802835c 	.word	0x0802835c

08017e30 <init_idle_thread>:

/* LCOV_EXCL_STOP */

#if defined(CONFIG_MULTITHREADING)
static void init_idle_thread(int i)
{
 8017e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e32:	b087      	sub	sp, #28
	struct k_thread *thread = &z_idle_threads[i];
 8017e34:	4e0f      	ldr	r6, [pc, #60]	; (8017e74 <init_idle_thread+0x44>)
 8017e36:	ebc0 1500 	rsb	r5, r0, r0, lsl #4
 8017e3a:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
	k_thread_stack_t *stack = z_idle_stacks[i];
 8017e3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
 8017e42:	2300      	movs	r3, #0
 8017e44:	9305      	str	r3, [sp, #20]
 8017e46:	2201      	movs	r2, #1
 8017e48:	9204      	str	r2, [sp, #16]
 8017e4a:	220f      	movs	r2, #15
 8017e4c:	9203      	str	r2, [sp, #12]
 8017e4e:	9302      	str	r3, [sp, #8]
 8017e50:	9301      	str	r3, [sp, #4]
 8017e52:	9300      	str	r3, [sp, #0]
 8017e54:	4b08      	ldr	r3, [pc, #32]	; (8017e78 <init_idle_thread+0x48>)
 8017e56:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8017e5a:	4908      	ldr	r1, [pc, #32]	; (8017e7c <init_idle_thread+0x4c>)
 8017e5c:	eb01 1180 	add.w	r1, r1, r0, lsl #6
 8017e60:	4628      	mov	r0, r5
 8017e62:	f000 ff6d 	bl	8018d40 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8017e66:	7b6b      	ldrb	r3, [r5, #13]
 8017e68:	f023 0304 	bic.w	r3, r3, #4
 8017e6c:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
 8017e6e:	b007      	add	sp, #28
 8017e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e72:	bf00      	nop
 8017e74:	20003220 	.word	0x20003220
 8017e78:	080226b1 	.word	0x080226b1
 8017e7c:	200075a8 	.word	0x200075a8

08017e80 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
#ifdef CONFIG_MULTITHREADING
static char *prepare_multithreading(void)
{
 8017e80:	b570      	push	{r4, r5, r6, lr}
 8017e82:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
 8017e84:	f000 fe20 	bl	8018ac8 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
 8017e88:	4d1d      	ldr	r5, [pc, #116]	; (8017f00 <prepare_multithreading+0x80>)
 8017e8a:	4b1e      	ldr	r3, [pc, #120]	; (8017f04 <prepare_multithreading+0x84>)
 8017e8c:	621d      	str	r5, [r3, #32]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8017e8e:	4b1e      	ldr	r3, [pc, #120]	; (8017f08 <prepare_multithreading+0x88>)
 8017e90:	9305      	str	r3, [sp, #20]
 8017e92:	2301      	movs	r3, #1
 8017e94:	9304      	str	r3, [sp, #16]
 8017e96:	2400      	movs	r4, #0
 8017e98:	9403      	str	r4, [sp, #12]
 8017e9a:	9402      	str	r4, [sp, #8]
 8017e9c:	9401      	str	r4, [sp, #4]
 8017e9e:	9400      	str	r4, [sp, #0]
 8017ea0:	4b1a      	ldr	r3, [pc, #104]	; (8017f0c <prepare_multithreading+0x8c>)
 8017ea2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017ea6:	491a      	ldr	r1, [pc, #104]	; (8017f10 <prepare_multithreading+0x90>)
 8017ea8:	4628      	mov	r0, r5
 8017eaa:	f000 ff49 	bl	8018d40 <z_setup_new_thread>
 8017eae:	4606      	mov	r6, r0
 8017eb0:	7b6b      	ldrb	r3, [r5, #13]
 8017eb2:	f023 0304 	bic.w	r3, r3, #4
 8017eb6:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
 8017eb8:	4628      	mov	r0, r5
 8017eba:	f00a f8bf 	bl	802203c <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
 8017ebe:	2c00      	cmp	r4, #0
 8017ec0:	dd07      	ble.n	8017ed2 <prepare_multithreading+0x52>
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 8017ec2:	4b10      	ldr	r3, [pc, #64]	; (8017f04 <prepare_multithreading+0x84>)
 8017ec4:	f103 0218 	add.w	r2, r3, #24
 8017ec8:	619a      	str	r2, [r3, #24]
	list->tail = (sys_dnode_t *)list;
 8017eca:	61da      	str	r2, [r3, #28]
	}

	initialize_timeouts();

	return stack_ptr;
}
 8017ecc:	4630      	mov	r0, r6
 8017ece:	b006      	add	sp, #24
 8017ed0:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
 8017ed2:	4620      	mov	r0, r4
 8017ed4:	f7ff ffac 	bl	8017e30 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 8017ed8:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8017edc:	4a0d      	ldr	r2, [pc, #52]	; (8017f14 <prepare_multithreading+0x94>)
 8017ede:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8017ee2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8017ee6:	4b07      	ldr	r3, [pc, #28]	; (8017f04 <prepare_multithreading+0x84>)
 8017ee8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8017eec:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
 8017eee:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
 8017ef0:	4a09      	ldr	r2, [pc, #36]	; (8017f18 <prepare_multithreading+0x98>)
 8017ef2:	eb02 22c4 	add.w	r2, r2, r4, lsl #11
 8017ef6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
		_kernel.cpus[i].irq_stack =
 8017efa:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
 8017efc:	3401      	adds	r4, #1
 8017efe:	e7de      	b.n	8017ebe <prepare_multithreading+0x3e>
 8017f00:	20003298 	.word	0x20003298
 8017f04:	200046e8 	.word	0x200046e8
 8017f08:	08028398 	.word	0x08028398
 8017f0c:	08017f7d 	.word	0x08017f7d
 8017f10:	200071a8 	.word	0x200071a8
 8017f14:	20003220 	.word	0x20003220
 8017f18:	200076e8 	.word	0x200076e8

08017f1c <switch_to_main_thread>:

static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
 8017f1c:	b508      	push	{r3, lr}
 8017f1e:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8017f20:	4a01      	ldr	r2, [pc, #4]	; (8017f28 <switch_to_main_thread+0xc>)
 8017f22:	4802      	ldr	r0, [pc, #8]	; (8017f2c <switch_to_main_thread+0x10>)
 8017f24:	f7f3 f8f2 	bl	800b10c <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8017f28:	08017f7d 	.word	0x08017f7d
 8017f2c:	20003298 	.word	0x20003298

08017f30 <z_bss_zero>:
{
 8017f30:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 8017f32:	4803      	ldr	r0, [pc, #12]	; (8017f40 <z_bss_zero+0x10>)
 8017f34:	4a03      	ldr	r2, [pc, #12]	; (8017f44 <z_bss_zero+0x14>)
 8017f36:	1a12      	subs	r2, r2, r0
 8017f38:	2100      	movs	r1, #0
 8017f3a:	f004 fcdd 	bl	801c8f8 <memset>
}
 8017f3e:	bd08      	pop	{r3, pc}
 8017f40:	20001298 	.word	0x20001298
 8017f44:	20005974 	.word	0x20005974

08017f48 <z_data_copy>:
{
 8017f48:	b508      	push	{r3, lr}
		 __data_ram_end - __data_ram_start);
 8017f4a:	4806      	ldr	r0, [pc, #24]	; (8017f64 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
 8017f4c:	4a06      	ldr	r2, [pc, #24]	; (8017f68 <z_data_copy+0x20>)
 8017f4e:	1a12      	subs	r2, r2, r0
 8017f50:	4906      	ldr	r1, [pc, #24]	; (8017f6c <z_data_copy+0x24>)
 8017f52:	f004 fcac 	bl	801c8ae <memcpy>
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
 8017f56:	4a06      	ldr	r2, [pc, #24]	; (8017f70 <z_data_copy+0x28>)
 8017f58:	4906      	ldr	r1, [pc, #24]	; (8017f74 <z_data_copy+0x2c>)
 8017f5a:	4807      	ldr	r0, [pc, #28]	; (8017f78 <z_data_copy+0x30>)
 8017f5c:	f004 fca7 	bl	801c8ae <memcpy>
}
 8017f60:	bd08      	pop	{r3, pc}
 8017f62:	bf00      	nop
 8017f64:	20000000 	.word	0x20000000
 8017f68:	20001294 	.word	0x20001294
 8017f6c:	0802845c 	.word	0x0802845c
 8017f70:	00000000 	.word	0x00000000
 8017f74:	0802845c 	.word	0x0802845c
 8017f78:	20000000 	.word	0x20000000

08017f7c <bg_thread_main>:
{
 8017f7c:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 8017f7e:	4b0c      	ldr	r3, [pc, #48]	; (8017fb0 <bg_thread_main+0x34>)
 8017f80:	2201      	movs	r2, #1
 8017f82:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8017f84:	2002      	movs	r0, #2
 8017f86:	f7ff fe21 	bl	8017bcc <z_sys_init_run_level>
	printk("*** Booting Zephyr OS version %s %s ***\n",
 8017f8a:	4a0a      	ldr	r2, [pc, #40]	; (8017fb4 <bg_thread_main+0x38>)
 8017f8c:	490a      	ldr	r1, [pc, #40]	; (8017fb8 <bg_thread_main+0x3c>)
 8017f8e:	480b      	ldr	r0, [pc, #44]	; (8017fbc <bg_thread_main+0x40>)
 8017f90:	f002 f840 	bl	801a014 <printk>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 8017f94:	2003      	movs	r0, #3
 8017f96:	f7ff fe19 	bl	8017bcc <z_sys_init_run_level>
	z_init_static_threads();
 8017f9a:	f000 ff01 	bl	8018da0 <z_init_static_threads>
	main();
 8017f9e:	f7ed f8d3 	bl	8005148 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8017fa2:	4a07      	ldr	r2, [pc, #28]	; (8017fc0 <bg_thread_main+0x44>)
 8017fa4:	7b13      	ldrb	r3, [r2, #12]
 8017fa6:	f023 0301 	bic.w	r3, r3, #1
 8017faa:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8017fac:	bd08      	pop	{r3, pc}
 8017fae:	bf00      	nop
 8017fb0:	20005970 	.word	0x20005970
 8017fb4:	08024fc0 	.word	0x08024fc0
 8017fb8:	080283a0 	.word	0x080283a0
 8017fbc:	080283a8 	.word	0x080283a8
 8017fc0:	20003298 	.word	0x20003298

08017fc4 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
 8017fc4:	b500      	push	{lr}
 8017fc6:	b09f      	sub	sp, #124	; 0x7c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
 8017fc8:	f7ee f830 	bl	800602c <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 8017fcc:	4b16      	ldr	r3, [pc, #88]	; (8018028 <z_cstart+0x64>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8017fce:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8017fd2:	4c16      	ldr	r4, [pc, #88]	; (801802c <z_cstart+0x68>)
 8017fd4:	6963      	ldr	r3, [r4, #20]
 8017fd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8017fda:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017fdc:	23f0      	movs	r3, #240	; 0xf0
 8017fde:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8017fe2:	2500      	movs	r5, #0
 8017fe4:	77e5      	strb	r5, [r4, #31]
 8017fe6:	7625      	strb	r5, [r4, #24]
 8017fe8:	7665      	strb	r5, [r4, #25]
 8017fea:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8017fec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017fee:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8017ff2:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8017ff4:	f7f3 fce8 	bl	800b9c8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8017ff8:	f7f3 f8a0 	bl	800b13c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8017ffc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018000:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8018002:	62e3      	str	r3, [r4, #44]	; 0x2c
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
 8018004:	2401      	movs	r4, #1
 8018006:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
 801800a:	f88d 400c 	strb.w	r4, [sp, #12]
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
 801800e:	4b08      	ldr	r3, [pc, #32]	; (8018030 <z_cstart+0x6c>)
 8018010:	f8c3 d008 	str.w	sp, [r3, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8018014:	4628      	mov	r0, r5
 8018016:	f7ff fdd9 	bl	8017bcc <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 801801a:	4620      	mov	r0, r4
 801801c:	f7ff fdd6 	bl	8017bcc <z_sys_init_run_level>
	__stack_chk_guard = stack_guard;
	__stack_chk_guard <<= 8;
#endif	/* CONFIG_STACK_CANARIES */

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
 8018020:	f7ff ff2e 	bl	8017e80 <prepare_multithreading>
 8018024:	f7ff ff7a 	bl	8017f1c <switch_to_main_thread>
 8018028:	20007ee8 	.word	0x20007ee8
 801802c:	e000ed00 	.word	0xe000ed00
 8018030:	200046e8 	.word	0x200046e8

08018034 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
 8018034:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
 8018036:	4c06      	ldr	r4, [pc, #24]	; (8018050 <statics_init+0x1c>)
 8018038:	4b06      	ldr	r3, [pc, #24]	; (8018054 <statics_init+0x20>)
 801803a:	429c      	cmp	r4, r3
 801803c:	d206      	bcs.n	801804c <statics_init+0x18>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 801803e:	68a2      	ldr	r2, [r4, #8]
 8018040:	6861      	ldr	r1, [r4, #4]
 8018042:	4620      	mov	r0, r4
 8018044:	f009 fde3 	bl	8021c0e <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
 8018048:	3414      	adds	r4, #20
 801804a:	e7f5      	b.n	8018038 <statics_init+0x4>
	}
	return 0;
}
 801804c:	2000      	movs	r0, #0
 801804e:	bd10      	pop	{r4, pc}
 8018050:	20000f74 	.word	0x20000f74
 8018054:	20000f88 	.word	0x20000f88

08018058 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
 8018058:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 801805a:	4c06      	ldr	r4, [pc, #24]	; (8018074 <init_mem_slab_module+0x1c>)
	int rc = 0;
 801805c:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 801805e:	4b06      	ldr	r3, [pc, #24]	; (8018078 <init_mem_slab_module+0x20>)
 8018060:	429c      	cmp	r4, r3
 8018062:	d206      	bcs.n	8018072 <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
 8018064:	4620      	mov	r0, r4
 8018066:	f009 fe58 	bl	8021d1a <create_free_list>
		if (rc < 0) {
 801806a:	2800      	cmp	r0, #0
 801806c:	db01      	blt.n	8018072 <init_mem_slab_module+0x1a>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 801806e:	341c      	adds	r4, #28
 8018070:	e7f5      	b.n	801805e <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
 8018072:	bd10      	pop	{r4, pc}
 8018074:	20000f20 	.word	0x20000f20
 8018078:	20000f74 	.word	0x20000f74

0801807c <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
 801807c:	b5d0      	push	{r4, r6, r7, lr}
 801807e:	b082      	sub	sp, #8
 8018080:	460c      	mov	r4, r1
 8018082:	461f      	mov	r7, r3
	__asm__ volatile(
 8018084:	f04f 0310 	mov.w	r3, #16
 8018088:	f3ef 8111 	mrs	r1, BASEPRI
 801808c:	f383 8811 	msr	BASEPRI, r3
 8018090:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
 8018094:	6943      	ldr	r3, [r0, #20]
 8018096:	b16b      	cbz	r3, 80180b4 <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
 8018098:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
 801809a:	6943      	ldr	r3, [r0, #20]
 801809c:	681b      	ldr	r3, [r3, #0]
 801809e:	6143      	str	r3, [r0, #20]
		slab->num_used++;
 80180a0:	6983      	ldr	r3, [r0, #24]
 80180a2:	3301      	adds	r3, #1
 80180a4:	6183      	str	r3, [r0, #24]
		result = 0;
 80180a6:	2000      	movs	r0, #0
	__asm__ volatile(
 80180a8:	f381 8811 	msr	BASEPRI, r1
 80180ac:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	return result;
}
 80180b0:	b002      	add	sp, #8
 80180b2:	bdd0      	pop	{r4, r6, r7, pc}
 80180b4:	4616      	mov	r6, r2
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 80180b6:	ea56 0307 	orrs.w	r3, r6, r7
 80180ba:	d104      	bne.n	80180c6 <k_mem_slab_alloc+0x4a>
		*mem = NULL;
 80180bc:	2300      	movs	r3, #0
 80180be:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
 80180c0:	f06f 000b 	mvn.w	r0, #11
 80180c4:	e7f0      	b.n	80180a8 <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
 80180c6:	e9cd 6700 	strd	r6, r7, [sp]
 80180ca:	4602      	mov	r2, r0
 80180cc:	4804      	ldr	r0, [pc, #16]	; (80180e0 <k_mem_slab_alloc+0x64>)
 80180ce:	f000 fc8f 	bl	80189f0 <z_pend_curr>
		if (result == 0) {
 80180d2:	2800      	cmp	r0, #0
 80180d4:	d1ec      	bne.n	80180b0 <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
 80180d6:	4b03      	ldr	r3, [pc, #12]	; (80180e4 <k_mem_slab_alloc+0x68>)
 80180d8:	689b      	ldr	r3, [r3, #8]
 80180da:	695b      	ldr	r3, [r3, #20]
 80180dc:	6023      	str	r3, [r4, #0]
		return result;
 80180de:	e7e7      	b.n	80180b0 <k_mem_slab_alloc+0x34>
 80180e0:	200046e8 	.word	0x200046e8
 80180e4:	200046e8 	.word	0x200046e8

080180e8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
 80180e8:	b570      	push	{r4, r5, r6, lr}
 80180ea:	4604      	mov	r4, r0
 80180ec:	460d      	mov	r5, r1
	__asm__ volatile(
 80180ee:	f04f 0310 	mov.w	r3, #16
 80180f2:	f3ef 8611 	mrs	r6, BASEPRI
 80180f6:	f383 8811 	msr	BASEPRI, r3
 80180fa:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
 80180fe:	f00a f82d 	bl	802215c <z_unpend_first_thread>

	if (pending_thread != NULL) {
 8018102:	b150      	cbz	r0, 801811a <k_mem_slab_free+0x32>
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
 8018104:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8018106:	2100      	movs	r1, #0
 8018108:	6701      	str	r1, [r0, #112]	; 0x70
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 801810a:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
 801810c:	f009 ff96 	bl	802203c <z_ready_thread>
		z_reschedule(&lock, key);
 8018110:	4631      	mov	r1, r6
 8018112:	4808      	ldr	r0, [pc, #32]	; (8018134 <k_mem_slab_free+0x4c>)
 8018114:	f000 fa1e 	bl	8018554 <z_reschedule>
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
 8018118:	bd70      	pop	{r4, r5, r6, pc}
		**(char ***)mem = slab->free_list;
 801811a:	682b      	ldr	r3, [r5, #0]
 801811c:	6962      	ldr	r2, [r4, #20]
 801811e:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
 8018120:	682b      	ldr	r3, [r5, #0]
 8018122:	6163      	str	r3, [r4, #20]
		slab->num_used--;
 8018124:	69a3      	ldr	r3, [r4, #24]
 8018126:	3b01      	subs	r3, #1
 8018128:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
 801812a:	f386 8811 	msr	BASEPRI, r6
 801812e:	f3bf 8f6f 	isb	sy
}
 8018132:	e7f1      	b.n	8018118 <k_mem_slab_free+0x30>
 8018134:	200046e8 	.word	0x200046e8

08018138 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
 8018138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801813c:	b082      	sub	sp, #8
 801813e:	4604      	mov	r4, r0
 8018140:	460d      	mov	r5, r1
 8018142:	4610      	mov	r0, r2
 8018144:	4619      	mov	r1, r3

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
 8018146:	f104 0708 	add.w	r7, r4, #8
	__asm__ volatile(
 801814a:	f04f 0310 	mov.w	r3, #16
 801814e:	f3ef 8611 	mrs	r6, BASEPRI
 8018152:	f383 8811 	msr	BASEPRI, r3
 8018156:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs < msgq->max_msgs) {
 801815a:	6a22      	ldr	r2, [r4, #32]
 801815c:	68e3      	ldr	r3, [r4, #12]
 801815e:	429a      	cmp	r2, r3
 8018160:	d30b      	bcc.n	801817a <z_impl_k_msgq_put+0x42>
				msgq->write_ptr = msgq->buffer_start;
			}
			msgq->used_msgs++;
		}
		result = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8018162:	ea50 0301 	orrs.w	r3, r0, r1
 8018166:	d132      	bne.n	80181ce <z_impl_k_msgq_put+0x96>
		/* don't wait for message space to become available */
		result = -ENOMSG;
 8018168:	f06f 004f 	mvn.w	r0, #79	; 0x4f
	__asm__ volatile(
 801816c:	f386 8811 	msr	BASEPRI, r6
 8018170:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 8018174:	b002      	add	sp, #8
 8018176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 801817a:	4620      	mov	r0, r4
 801817c:	f009 ffee 	bl	802215c <z_unpend_first_thread>
		if (pending_thread != NULL) {
 8018180:	4680      	mov	r8, r0
 8018182:	b180      	cbz	r0, 80181a6 <z_impl_k_msgq_put+0x6e>
			(void)memcpy(pending_thread->base.swap_data, data,
 8018184:	68a2      	ldr	r2, [r4, #8]
 8018186:	4629      	mov	r1, r5
 8018188:	6940      	ldr	r0, [r0, #20]
 801818a:	f004 fb90 	bl	801c8ae <memcpy>
 801818e:	2400      	movs	r4, #0
 8018190:	f8c8 4070 	str.w	r4, [r8, #112]	; 0x70
			z_ready_thread(pending_thread);
 8018194:	4640      	mov	r0, r8
 8018196:	f009 ff51 	bl	802203c <z_ready_thread>
			z_reschedule(&msgq->lock, key);
 801819a:	4631      	mov	r1, r6
 801819c:	4638      	mov	r0, r7
 801819e:	f000 f9d9 	bl	8018554 <z_reschedule>
			return 0;
 80181a2:	4620      	mov	r0, r4
 80181a4:	e7e6      	b.n	8018174 <z_impl_k_msgq_put+0x3c>
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
 80181a6:	68a2      	ldr	r2, [r4, #8]
 80181a8:	4629      	mov	r1, r5
 80181aa:	69e0      	ldr	r0, [r4, #28]
 80181ac:	f004 fb7f 	bl	801c8ae <memcpy>
			msgq->write_ptr += msgq->msg_size;
 80181b0:	68a2      	ldr	r2, [r4, #8]
 80181b2:	69e3      	ldr	r3, [r4, #28]
 80181b4:	4413      	add	r3, r2
 80181b6:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
 80181b8:	6962      	ldr	r2, [r4, #20]
 80181ba:	4293      	cmp	r3, r2
 80181bc:	d004      	beq.n	80181c8 <z_impl_k_msgq_put+0x90>
			msgq->used_msgs++;
 80181be:	6a23      	ldr	r3, [r4, #32]
 80181c0:	3301      	adds	r3, #1
 80181c2:	6223      	str	r3, [r4, #32]
		result = 0;
 80181c4:	2000      	movs	r0, #0
 80181c6:	e7d1      	b.n	801816c <z_impl_k_msgq_put+0x34>
				msgq->write_ptr = msgq->buffer_start;
 80181c8:	6923      	ldr	r3, [r4, #16]
 80181ca:	61e3      	str	r3, [r4, #28]
 80181cc:	e7f7      	b.n	80181be <z_impl_k_msgq_put+0x86>
		_current->base.swap_data = (void *) data;
 80181ce:	4b05      	ldr	r3, [pc, #20]	; (80181e4 <z_impl_k_msgq_put+0xac>)
 80181d0:	689b      	ldr	r3, [r3, #8]
 80181d2:	615d      	str	r5, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 80181d4:	e9cd 0100 	strd	r0, r1, [sp]
 80181d8:	4622      	mov	r2, r4
 80181da:	4631      	mov	r1, r6
 80181dc:	4638      	mov	r0, r7
 80181de:	f000 fc07 	bl	80189f0 <z_pend_curr>
 80181e2:	e7c7      	b.n	8018174 <z_impl_k_msgq_put+0x3c>
 80181e4:	200046e8 	.word	0x200046e8

080181e8 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
 80181e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181ec:	b082      	sub	sp, #8
 80181ee:	4604      	mov	r4, r0
 80181f0:	4608      	mov	r0, r1
 80181f2:	461f      	mov	r7, r3

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
 80181f4:	f104 0808 	add.w	r8, r4, #8
	__asm__ volatile(
 80181f8:	f04f 0310 	mov.w	r3, #16
 80181fc:	f3ef 8511 	mrs	r5, BASEPRI
 8018200:	f383 8811 	msr	BASEPRI, r3
 8018204:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs > 0) {
 8018208:	6a23      	ldr	r3, [r4, #32]
 801820a:	b963      	cbnz	r3, 8018226 <z_impl_k_msgq_get+0x3e>
 801820c:	4616      	mov	r6, r2
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
			return 0;
		}
		result = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 801820e:	ea56 0307 	orrs.w	r3, r6, r7
 8018212:	d13d      	bne.n	8018290 <z_impl_k_msgq_get+0xa8>
		/* don't wait for a message to become available */
		result = -ENOMSG;
 8018214:	f06f 004f 	mvn.w	r0, #79	; 0x4f
	__asm__ volatile(
 8018218:	f385 8811 	msr	BASEPRI, r5
 801821c:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 8018220:	b002      	add	sp, #8
 8018222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
 8018226:	68a2      	ldr	r2, [r4, #8]
 8018228:	69a1      	ldr	r1, [r4, #24]
 801822a:	f004 fb40 	bl	801c8ae <memcpy>
		msgq->read_ptr += msgq->msg_size;
 801822e:	68a2      	ldr	r2, [r4, #8]
 8018230:	69a3      	ldr	r3, [r4, #24]
 8018232:	4413      	add	r3, r2
 8018234:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
 8018236:	6962      	ldr	r2, [r4, #20]
 8018238:	4293      	cmp	r3, r2
 801823a:	d009      	beq.n	8018250 <z_impl_k_msgq_get+0x68>
		msgq->used_msgs--;
 801823c:	6a23      	ldr	r3, [r4, #32]
 801823e:	3b01      	subs	r3, #1
 8018240:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 8018242:	4620      	mov	r0, r4
 8018244:	f009 ff8a 	bl	802215c <z_unpend_first_thread>
		if (pending_thread != NULL) {
 8018248:	4606      	mov	r6, r0
 801824a:	b920      	cbnz	r0, 8018256 <z_impl_k_msgq_get+0x6e>
		result = 0;
 801824c:	2000      	movs	r0, #0
 801824e:	e7e3      	b.n	8018218 <z_impl_k_msgq_get+0x30>
			msgq->read_ptr = msgq->buffer_start;
 8018250:	6923      	ldr	r3, [r4, #16]
 8018252:	61a3      	str	r3, [r4, #24]
 8018254:	e7f2      	b.n	801823c <z_impl_k_msgq_get+0x54>
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
 8018256:	68a2      	ldr	r2, [r4, #8]
 8018258:	6941      	ldr	r1, [r0, #20]
 801825a:	69e0      	ldr	r0, [r4, #28]
 801825c:	f004 fb27 	bl	801c8ae <memcpy>
			msgq->write_ptr += msgq->msg_size;
 8018260:	68a2      	ldr	r2, [r4, #8]
 8018262:	69e3      	ldr	r3, [r4, #28]
 8018264:	4413      	add	r3, r2
 8018266:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
 8018268:	6962      	ldr	r2, [r4, #20]
 801826a:	4293      	cmp	r3, r2
 801826c:	d00d      	beq.n	801828a <z_impl_k_msgq_get+0xa2>
			msgq->used_msgs++;
 801826e:	6a23      	ldr	r3, [r4, #32]
 8018270:	3301      	adds	r3, #1
 8018272:	6223      	str	r3, [r4, #32]
 8018274:	2400      	movs	r4, #0
 8018276:	6734      	str	r4, [r6, #112]	; 0x70
			z_ready_thread(pending_thread);
 8018278:	4630      	mov	r0, r6
 801827a:	f009 fedf 	bl	802203c <z_ready_thread>
			z_reschedule(&msgq->lock, key);
 801827e:	4629      	mov	r1, r5
 8018280:	4640      	mov	r0, r8
 8018282:	f000 f967 	bl	8018554 <z_reschedule>
			return 0;
 8018286:	4620      	mov	r0, r4
 8018288:	e7ca      	b.n	8018220 <z_impl_k_msgq_get+0x38>
				msgq->write_ptr = msgq->buffer_start;
 801828a:	6923      	ldr	r3, [r4, #16]
 801828c:	61e3      	str	r3, [r4, #28]
 801828e:	e7ee      	b.n	801826e <z_impl_k_msgq_get+0x86>
		_current->base.swap_data = data;
 8018290:	4b05      	ldr	r3, [pc, #20]	; (80182a8 <z_impl_k_msgq_get+0xc0>)
 8018292:	689b      	ldr	r3, [r3, #8]
 8018294:	6159      	str	r1, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 8018296:	e9cd 6700 	strd	r6, r7, [sp]
 801829a:	4622      	mov	r2, r4
 801829c:	4629      	mov	r1, r5
 801829e:	4640      	mov	r0, r8
 80182a0:	f000 fba6 	bl	80189f0 <z_pend_curr>
 80182a4:	e7bc      	b.n	8018220 <z_impl_k_msgq_get+0x38>
 80182a6:	bf00      	nop
 80182a8:	200046e8 	.word	0x200046e8

080182ac <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 80182ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80182b0:	b083      	sub	sp, #12
 80182b2:	4604      	mov	r4, r0
 80182b4:	461d      	mov	r5, r3
	__asm__ volatile(
 80182b6:	f04f 0310 	mov.w	r3, #16
 80182ba:	f3ef 8711 	mrs	r7, BASEPRI
 80182be:	f383 8811 	msr	BASEPRI, r3
 80182c2:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 80182c6:	68c1      	ldr	r1, [r0, #12]
 80182c8:	b999      	cbnz	r1, 80182f2 <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
 80182ca:	2900      	cmp	r1, #0
 80182cc:	d14f      	bne.n	801836e <z_impl_k_mutex_lock+0xc2>
 80182ce:	4b3a      	ldr	r3, [pc, #232]	; (80183b8 <z_impl_k_mutex_lock+0x10c>)
 80182d0:	689b      	ldr	r3, [r3, #8]
 80182d2:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 80182d6:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
 80182d8:	3101      	adds	r1, #1
 80182da:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
 80182dc:	4b36      	ldr	r3, [pc, #216]	; (80183b8 <z_impl_k_mutex_lock+0x10c>)
 80182de:	689b      	ldr	r3, [r3, #8]
 80182e0:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 80182e2:	f387 8811 	msr	BASEPRI, r7
 80182e6:	f3bf 8f6f 	isb	sy
			mutex->owner_orig_prio);

		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
 80182ea:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
 80182ec:	b003      	add	sp, #12
 80182ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80182f2:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 80182f4:	6882      	ldr	r2, [r0, #8]
 80182f6:	4b30      	ldr	r3, [pc, #192]	; (80183b8 <z_impl_k_mutex_lock+0x10c>)
 80182f8:	689b      	ldr	r3, [r3, #8]
 80182fa:	429a      	cmp	r2, r3
 80182fc:	d0e5      	beq.n	80182ca <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 80182fe:	ea55 0106 	orrs.w	r1, r5, r6
 8018302:	bf0c      	ite	eq
 8018304:	f04f 0801 	moveq.w	r8, #1
 8018308:	f04f 0800 	movne.w	r8, #0
 801830c:	d031      	beq.n	8018372 <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
 801830e:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
 8018312:	4649      	mov	r1, r9
 8018314:	f993 000e 	ldrsb.w	r0, [r3, #14]
 8018318:	f009 fd24 	bl	8021d64 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 801831c:	4581      	cmp	r9, r0
 801831e:	dc2f      	bgt.n	8018380 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
 8018320:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 8018324:	9600      	str	r6, [sp, #0]
 8018326:	9501      	str	r5, [sp, #4]
 8018328:	4622      	mov	r2, r4
 801832a:	4639      	mov	r1, r7
 801832c:	4823      	ldr	r0, [pc, #140]	; (80183bc <z_impl_k_mutex_lock+0x110>)
 801832e:	f000 fb5f 	bl	80189f0 <z_pend_curr>
	if (got_mutex == 0) {
 8018332:	2800      	cmp	r0, #0
 8018334:	d0da      	beq.n	80182ec <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
 8018336:	f04f 0310 	mov.w	r3, #16
 801833a:	f3ef 8511 	mrs	r5, BASEPRI
 801833e:	f383 8811 	msr	BASEPRI, r3
 8018342:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 8018346:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8018348:	429c      	cmp	r4, r3
 801834a:	d01f      	beq.n	801838c <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 801834c:	b1f3      	cbz	r3, 801838c <z_impl_k_mutex_lock+0xe0>
 801834e:	6921      	ldr	r1, [r4, #16]
 8018350:	f993 000e 	ldrsb.w	r0, [r3, #14]
 8018354:	f009 fd06 	bl	8021d64 <new_prio_for_inheritance>
 8018358:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 801835a:	4620      	mov	r0, r4
 801835c:	f009 fd0b 	bl	8021d76 <adjust_owner_prio>
 8018360:	b9b0      	cbnz	r0, 8018390 <z_impl_k_mutex_lock+0xe4>
 8018362:	f1b9 0f00 	cmp.w	r9, #0
 8018366:	d015      	beq.n	8018394 <z_impl_k_mutex_lock+0xe8>
 8018368:	f04f 0801 	mov.w	r8, #1
 801836c:	e012      	b.n	8018394 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
 801836e:	6923      	ldr	r3, [r4, #16]
 8018370:	e7b1      	b.n	80182d6 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
 8018372:	f387 8811 	msr	BASEPRI, r7
 8018376:	f3bf 8f6f 	isb	sy
		return -EBUSY;
 801837a:	f06f 000f 	mvn.w	r0, #15
 801837e:	e7b5      	b.n	80182ec <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
 8018380:	4601      	mov	r1, r0
 8018382:	4620      	mov	r0, r4
 8018384:	f009 fcf7 	bl	8021d76 <adjust_owner_prio>
 8018388:	4681      	mov	r9, r0
 801838a:	e7cb      	b.n	8018324 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 801838c:	6921      	ldr	r1, [r4, #16]
 801838e:	e7e4      	b.n	801835a <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 8018390:	f04f 0801 	mov.w	r8, #1
	if (resched) {
 8018394:	f1b8 0f00 	cmp.w	r8, #0
 8018398:	d106      	bne.n	80183a8 <z_impl_k_mutex_lock+0xfc>
 801839a:	f385 8811 	msr	BASEPRI, r5
 801839e:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
 80183a2:	f06f 000a 	mvn.w	r0, #10
 80183a6:	e7a1      	b.n	80182ec <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
 80183a8:	4629      	mov	r1, r5
 80183aa:	4804      	ldr	r0, [pc, #16]	; (80183bc <z_impl_k_mutex_lock+0x110>)
 80183ac:	f000 f8d2 	bl	8018554 <z_reschedule>
	return -EAGAIN;
 80183b0:	f06f 000a 	mvn.w	r0, #10
 80183b4:	e79a      	b.n	80182ec <z_impl_k_mutex_lock+0x40>
 80183b6:	bf00      	nop
 80183b8:	200046e8 	.word	0x200046e8
 80183bc:	200046e8 	.word	0x200046e8

080183c0 <z_impl_k_mutex_unlock>:
{
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
 80183c0:	6882      	ldr	r2, [r0, #8]
 80183c2:	2a00      	cmp	r2, #0
 80183c4:	d034      	beq.n	8018430 <z_impl_k_mutex_unlock+0x70>
{
 80183c6:	b538      	push	{r3, r4, r5, lr}
 80183c8:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 80183ca:	4b1c      	ldr	r3, [pc, #112]	; (801843c <z_impl_k_mutex_unlock+0x7c>)
 80183cc:	689b      	ldr	r3, [r3, #8]
 80183ce:	429a      	cmp	r2, r3
 80183d0:	d131      	bne.n	8018436 <z_impl_k_mutex_unlock+0x76>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
 80183d2:	7bda      	ldrb	r2, [r3, #15]
 80183d4:	3a01      	subs	r2, #1
 80183d6:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
 80183d8:	68c3      	ldr	r3, [r0, #12]
 80183da:	2b01      	cmp	r3, #1
 80183dc:	d005      	beq.n	80183ea <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
 80183de:	3b01      	subs	r3, #1
 80183e0:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
 80183e2:	f000 f92b 	bl	801863c <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
 80183e6:	2000      	movs	r0, #0
}
 80183e8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 80183ea:	f04f 0310 	mov.w	r3, #16
 80183ee:	f3ef 8511 	mrs	r5, BASEPRI
 80183f2:	f383 8811 	msr	BASEPRI, r3
 80183f6:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 80183fa:	6901      	ldr	r1, [r0, #16]
 80183fc:	f009 fcbb 	bl	8021d76 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 8018400:	4620      	mov	r0, r4
 8018402:	f009 feab 	bl	802215c <z_unpend_first_thread>
	mutex->owner = new_owner;
 8018406:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 8018408:	b158      	cbz	r0, 8018422 <z_impl_k_mutex_unlock+0x62>
		mutex->owner_orig_prio = new_owner->base.prio;
 801840a:	f990 300e 	ldrsb.w	r3, [r0, #14]
 801840e:	6123      	str	r3, [r4, #16]
 8018410:	2300      	movs	r3, #0
 8018412:	6703      	str	r3, [r0, #112]	; 0x70
		z_ready_thread(new_owner);
 8018414:	f009 fe12 	bl	802203c <z_ready_thread>
		z_reschedule(&lock, key);
 8018418:	4629      	mov	r1, r5
 801841a:	4809      	ldr	r0, [pc, #36]	; (8018440 <z_impl_k_mutex_unlock+0x80>)
 801841c:	f000 f89a 	bl	8018554 <z_reschedule>
 8018420:	e7df      	b.n	80183e2 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
 8018422:	2300      	movs	r3, #0
 8018424:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
 8018426:	f385 8811 	msr	BASEPRI, r5
 801842a:	f3bf 8f6f 	isb	sy
 801842e:	e7d8      	b.n	80183e2 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
 8018430:	f06f 0015 	mvn.w	r0, #21
}
 8018434:	4770      	bx	lr
		return -EPERM;
 8018436:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801843a:	e7d5      	b.n	80183e8 <z_impl_k_mutex_unlock+0x28>
 801843c:	200046e8 	.word	0x200046e8
 8018440:	200046e8 	.word	0x200046e8

08018444 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
 8018444:	b5d0      	push	{r4, r6, r7, lr}
 8018446:	b082      	sub	sp, #8
 8018448:	4601      	mov	r1, r0
 801844a:	4616      	mov	r6, r2
 801844c:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
 801844e:	4602      	mov	r2, r0
	__asm__ volatile(
 8018450:	f04f 0310 	mov.w	r3, #16
 8018454:	f3ef 8411 	mrs	r4, BASEPRI
 8018458:	f383 8811 	msr	BASEPRI, r3
 801845c:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
 8018460:	f852 0b08 	ldr.w	r0, [r2], #8
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
 8018464:	b188      	cbz	r0, 801848a <z_impl_k_queue_get+0x46>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 8018466:	6803      	ldr	r3, [r0, #0]
 8018468:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
 801846c:	600b      	str	r3, [r1, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
 801846e:	684a      	ldr	r2, [r1, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
 8018470:	4290      	cmp	r0, r2
 8018472:	d008      	beq.n	8018486 <z_impl_k_queue_get+0x42>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
 8018474:	2101      	movs	r1, #1
 8018476:	f009 fd02 	bl	8021e7e <z_queue_node_peek>
	__asm__ volatile(
 801847a:	f384 8811 	msr	BASEPRI, r4
 801847e:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
 8018482:	b002      	add	sp, #8
 8018484:	bdd0      	pop	{r4, r6, r7, pc}
	list->tail = node;
 8018486:	604b      	str	r3, [r1, #4]
}
 8018488:	e7f4      	b.n	8018474 <z_impl_k_queue_get+0x30>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 801848a:	ea56 0307 	orrs.w	r3, r6, r7
 801848e:	d00a      	beq.n	80184a6 <z_impl_k_queue_get+0x62>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
 8018490:	e9cd 6700 	strd	r6, r7, [sp]
 8018494:	4621      	mov	r1, r4
 8018496:	4610      	mov	r0, r2
 8018498:	f000 faaa 	bl	80189f0 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
 801849c:	b948      	cbnz	r0, 80184b2 <z_impl_k_queue_get+0x6e>
 801849e:	4b06      	ldr	r3, [pc, #24]	; (80184b8 <z_impl_k_queue_get+0x74>)
 80184a0:	689b      	ldr	r3, [r3, #8]
 80184a2:	6958      	ldr	r0, [r3, #20]
 80184a4:	e7ed      	b.n	8018482 <z_impl_k_queue_get+0x3e>
 80184a6:	f384 8811 	msr	BASEPRI, r4
 80184aa:	f3bf 8f6f 	isb	sy
		return NULL;
 80184ae:	2000      	movs	r0, #0
 80184b0:	e7e7      	b.n	8018482 <z_impl_k_queue_get+0x3e>
	return (ret != 0) ? NULL : _current->base.swap_data;
 80184b2:	2000      	movs	r0, #0
 80184b4:	e7e5      	b.n	8018482 <z_impl_k_queue_get+0x3e>
 80184b6:	bf00      	nop
 80184b8:	200046e8 	.word	0x200046e8

080184bc <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
 80184bc:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80184be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80184c2:	bf08      	it	eq
 80184c4:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 80184c8:	d100      	bne.n	80184cc <add_thread_timeout+0x10>
#ifdef CONFIG_LEGACY_TIMEOUT_API
		timeout = _TICK_ALIGN + k_ms_to_ticks_ceil32(timeout);
#endif
		z_add_thread_timeout(thread, timeout);
	}
}
 80184ca:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, k_timeout_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
 80184cc:	4902      	ldr	r1, [pc, #8]	; (80184d8 <add_thread_timeout+0x1c>)
 80184ce:	3018      	adds	r0, #24
 80184d0:	f000 fd6e 	bl	8018fb0 <z_add_timeout>
 80184d4:	e7f9      	b.n	80184ca <add_thread_timeout+0xe>
 80184d6:	bf00      	nop
 80184d8:	08022069 	.word	0x08022069

080184dc <z_reset_time_slice>:
{
 80184dc:	b508      	push	{r3, lr}
	if (slice_time != 0) {
 80184de:	4b08      	ldr	r3, [pc, #32]	; (8018500 <z_reset_time_slice+0x24>)
 80184e0:	681b      	ldr	r3, [r3, #0]
 80184e2:	b903      	cbnz	r3, 80184e6 <z_reset_time_slice+0xa>
}
 80184e4:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
 80184e6:	f7f2 f837 	bl	800a558 <z_clock_elapsed>
 80184ea:	4603      	mov	r3, r0
 80184ec:	4a04      	ldr	r2, [pc, #16]	; (8018500 <z_reset_time_slice+0x24>)
 80184ee:	6810      	ldr	r0, [r2, #0]
 80184f0:	4403      	add	r3, r0
 80184f2:	4a04      	ldr	r2, [pc, #16]	; (8018504 <z_reset_time_slice+0x28>)
 80184f4:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
 80184f6:	2100      	movs	r1, #0
 80184f8:	f009 ffa3 	bl	8022442 <z_set_timeout_expiry>
}
 80184fc:	e7f2      	b.n	80184e4 <z_reset_time_slice+0x8>
 80184fe:	bf00      	nop
 8018500:	2000471c 	.word	0x2000471c
 8018504:	200046e8 	.word	0x200046e8

08018508 <k_sched_time_slice_set>:
{
 8018508:	b570      	push	{r4, r5, r6, lr}
 801850a:	4604      	mov	r4, r0
 801850c:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
 801850e:	2300      	movs	r3, #0
	__asm__ volatile(
 8018510:	f04f 0210 	mov.w	r2, #16
 8018514:	f3ef 8511 	mrs	r5, BASEPRI
 8018518:	f382 8811 	msr	BASEPRI, r2
 801851c:	f3bf 8f6f 	isb	sy
 8018520:	b98b      	cbnz	r3, 8018546 <k_sched_time_slice_set+0x3e>
		_current_cpu->slice_ticks = 0;
 8018522:	4b09      	ldr	r3, [pc, #36]	; (8018548 <k_sched_time_slice_set+0x40>)
 8018524:	2200      	movs	r2, #0
 8018526:	611a      	str	r2, [r3, #16]
			return ((uint32_t)t) * (to_hz / from_hz);
 8018528:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 801852c:	005b      	lsls	r3, r3, #1
		slice_time = k_ms_to_ticks_ceil32(slice);
 801852e:	4a07      	ldr	r2, [pc, #28]	; (801854c <k_sched_time_slice_set+0x44>)
 8018530:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
 8018532:	4b07      	ldr	r3, [pc, #28]	; (8018550 <k_sched_time_slice_set+0x48>)
 8018534:	601e      	str	r6, [r3, #0]
		z_reset_time_slice();
 8018536:	f7ff ffd1 	bl	80184dc <z_reset_time_slice>
	__asm__ volatile(
 801853a:	f385 8811 	msr	BASEPRI, r5
 801853e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8018542:	2301      	movs	r3, #1
 8018544:	e7ec      	b.n	8018520 <k_sched_time_slice_set+0x18>
}
 8018546:	bd70      	pop	{r4, r5, r6, pc}
 8018548:	200046e8 	.word	0x200046e8
 801854c:	2000471c 	.word	0x2000471c
 8018550:	20004718 	.word	0x20004718

08018554 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8018554:	4608      	mov	r0, r1
 8018556:	b981      	cbnz	r1, 801857a <z_reschedule+0x26>
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
 8018558:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801855a:	f3ef 8305 	mrs	r3, IPSR
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 801855e:	b93b      	cbnz	r3, 8018570 <z_reschedule+0x1c>
	return _kernel.ready_q.cache;
 8018560:	4b08      	ldr	r3, [pc, #32]	; (8018584 <z_reschedule+0x30>)
 8018562:	6a1a      	ldr	r2, [r3, #32]
	return new_thread != _current;
 8018564:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
 8018566:	429a      	cmp	r2, r3
 8018568:	d002      	beq.n	8018570 <z_reschedule+0x1c>
	ret = arch_swap(key);
 801856a:	f7f2 fd27 	bl	800afbc <arch_swap>
		z_swap(lock, key);
 801856e:	e003      	b.n	8018578 <z_reschedule+0x24>
 8018570:	f380 8811 	msr	BASEPRI, r0
 8018574:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
 8018578:	bd08      	pop	{r3, pc}
 801857a:	f381 8811 	msr	BASEPRI, r1
 801857e:	f3bf 8f6f 	isb	sy
 8018582:	4770      	bx	lr
 8018584:	200046e8 	.word	0x200046e8

08018588 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
 8018588:	2300      	movs	r3, #0
	__asm__ volatile(
 801858a:	f04f 0210 	mov.w	r2, #16
 801858e:	f3ef 8111 	mrs	r1, BASEPRI
 8018592:	f382 8811 	msr	BASEPRI, r2
 8018596:	f3bf 8f6f 	isb	sy
 801859a:	b953      	cbnz	r3, 80185b2 <k_sched_lock+0x2a>
	--_current->base.sched_locked;
 801859c:	4b05      	ldr	r3, [pc, #20]	; (80185b4 <k_sched_lock+0x2c>)
 801859e:	689a      	ldr	r2, [r3, #8]
 80185a0:	7bd3      	ldrb	r3, [r2, #15]
 80185a2:	3b01      	subs	r3, #1
 80185a4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 80185a6:	f381 8811 	msr	BASEPRI, r1
 80185aa:	f3bf 8f6f 	isb	sy
 80185ae:	2301      	movs	r3, #1
 80185b0:	e7f3      	b.n	801859a <k_sched_lock+0x12>
		z_sched_lock();
	}
}
 80185b2:	4770      	bx	lr
 80185b4:	200046e8 	.word	0x200046e8

080185b8 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
 80185b8:	4b0a      	ldr	r3, [pc, #40]	; (80185e4 <z_priq_dumb_remove+0x2c>)
 80185ba:	4283      	cmp	r3, r0
 80185bc:	d008      	beq.n	80185d0 <z_priq_dumb_remove+0x18>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
 80185be:	684a      	ldr	r2, [r1, #4]
 80185c0:	680b      	ldr	r3, [r1, #0]
 80185c2:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 80185c4:	684a      	ldr	r2, [r1, #4]
 80185c6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80185c8:	2300      	movs	r3, #0
 80185ca:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
 80185cc:	604b      	str	r3, [r1, #4]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
 80185ce:	4770      	bx	lr
	if (pq == &_kernel.ready_q.runq && thread == _current &&
 80185d0:	3b24      	subs	r3, #36	; 0x24
 80185d2:	689b      	ldr	r3, [r3, #8]
 80185d4:	428b      	cmp	r3, r1
 80185d6:	d1f2      	bne.n	80185be <z_priq_dumb_remove+0x6>
	uint8_t state = thread->base.thread_state;
 80185d8:	7b4b      	ldrb	r3, [r1, #13]
 80185da:	f013 0f1f 	tst.w	r3, #31
 80185de:	d0ee      	beq.n	80185be <z_priq_dumb_remove+0x6>
 80185e0:	e7f5      	b.n	80185ce <z_priq_dumb_remove+0x16>
 80185e2:	bf00      	nop
 80185e4:	2000470c 	.word	0x2000470c

080185e8 <update_cache>:
{
 80185e8:	b570      	push	{r4, r5, r6, lr}
 80185ea:	4605      	mov	r5, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
 80185ec:	4e12      	ldr	r6, [pc, #72]	; (8018638 <update_cache+0x50>)
 80185ee:	f106 0024 	add.w	r0, r6, #36	; 0x24
 80185f2:	f009 fd1c 	bl	802202e <z_priq_dumb_best>
 80185f6:	4604      	mov	r4, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
 80185f8:	68b3      	ldr	r3, [r6, #8]
 80185fa:	7b5a      	ldrb	r2, [r3, #13]
 80185fc:	f012 0f20 	tst.w	r2, #32
 8018600:	d002      	beq.n	8018608 <update_cache+0x20>
		_current->base.thread_state |= _THREAD_DEAD;
 8018602:	f042 0208 	orr.w	r2, r2, #8
 8018606:	735a      	strb	r2, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
 8018608:	b164      	cbz	r4, 8018624 <update_cache+0x3c>
	if (preempt_ok != 0) {
 801860a:	b975      	cbnz	r5, 801862a <update_cache+0x42>
 801860c:	7b5a      	ldrb	r2, [r3, #13]
	if (z_is_thread_prevented_from_running(_current)) {
 801860e:	f012 0f1f 	tst.w	r2, #31
 8018612:	d10a      	bne.n	801862a <update_cache+0x42>
	return node->next != NULL;
 8018614:	69a2      	ldr	r2, [r4, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 8018616:	b942      	cbnz	r2, 801862a <update_cache+0x42>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 8018618:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
 801861a:	2a7f      	cmp	r2, #127	; 0x7f
 801861c:	d905      	bls.n	801862a <update_cache+0x42>
		_kernel.ready_q.cache = _current;
 801861e:	4a06      	ldr	r2, [pc, #24]	; (8018638 <update_cache+0x50>)
 8018620:	6213      	str	r3, [r2, #32]
 8018622:	e008      	b.n	8018636 <update_cache+0x4e>
	return thread ? thread : _current_cpu->idle_thread;
 8018624:	4a04      	ldr	r2, [pc, #16]	; (8018638 <update_cache+0x50>)
 8018626:	68d4      	ldr	r4, [r2, #12]
 8018628:	e7ef      	b.n	801860a <update_cache+0x22>
		if (thread != _current) {
 801862a:	42a3      	cmp	r3, r4
 801862c:	d001      	beq.n	8018632 <update_cache+0x4a>
			z_reset_time_slice();
 801862e:	f7ff ff55 	bl	80184dc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 8018632:	4b01      	ldr	r3, [pc, #4]	; (8018638 <update_cache+0x50>)
 8018634:	621c      	str	r4, [r3, #32]
}
 8018636:	bd70      	pop	{r4, r5, r6, pc}
 8018638:	200046e8 	.word	0x200046e8

0801863c <k_sched_unlock>:
{
 801863c:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
 801863e:	2300      	movs	r3, #0
	__asm__ volatile(
 8018640:	f04f 0210 	mov.w	r2, #16
 8018644:	f3ef 8411 	mrs	r4, BASEPRI
 8018648:	f382 8811 	msr	BASEPRI, r2
 801864c:	f3bf 8f6f 	isb	sy
 8018650:	b96b      	cbnz	r3, 801866e <k_sched_unlock+0x32>
		++_current->base.sched_locked;
 8018652:	4b0c      	ldr	r3, [pc, #48]	; (8018684 <k_sched_unlock+0x48>)
 8018654:	689a      	ldr	r2, [r3, #8]
 8018656:	7bd3      	ldrb	r3, [r2, #15]
 8018658:	3301      	adds	r3, #1
 801865a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 801865c:	2000      	movs	r0, #0
 801865e:	f7ff ffc3 	bl	80185e8 <update_cache>
	__asm__ volatile(
 8018662:	f384 8811 	msr	BASEPRI, r4
 8018666:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 801866a:	2301      	movs	r3, #1
 801866c:	e7f0      	b.n	8018650 <k_sched_unlock+0x14>
	__asm__ volatile(
 801866e:	f04f 0310 	mov.w	r3, #16
 8018672:	f3ef 8011 	mrs	r0, BASEPRI
 8018676:	f383 8811 	msr	BASEPRI, r3
 801867a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 801867e:	f009 fca5 	bl	8021fcc <z_reschedule_irqlock>
}
 8018682:	bd10      	pop	{r4, pc}
 8018684:	200046e8 	.word	0x200046e8

08018688 <ready_thread>:
{
 8018688:	b538      	push	{r3, r4, r5, lr}
 801868a:	4605      	mov	r5, r0
	uint8_t state = thread->base.thread_state;
 801868c:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 801868e:	f013 0f1f 	tst.w	r3, #31
 8018692:	d105      	bne.n	80186a0 <ready_thread+0x18>
 8018694:	6983      	ldr	r3, [r0, #24]
 8018696:	b10b      	cbz	r3, 801869c <ready_thread+0x14>
 8018698:	2300      	movs	r3, #0
 801869a:	e002      	b.n	80186a2 <ready_thread+0x1a>
 801869c:	2301      	movs	r3, #1
 801869e:	e000      	b.n	80186a2 <ready_thread+0x1a>
 80186a0:	2300      	movs	r3, #0
	if (z_is_thread_ready(thread)) {
 80186a2:	b30b      	cbz	r3, 80186e8 <ready_thread+0x60>
	return list->head == list;
 80186a4:	4b15      	ldr	r3, [pc, #84]	; (80186fc <ready_thread+0x74>)
 80186a6:	f853 4f24 	ldr.w	r4, [r3, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80186aa:	429c      	cmp	r4, r3
 80186ac:	d024      	beq.n	80186f8 <ready_thread+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80186ae:	b164      	cbz	r4, 80186ca <ready_thread+0x42>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
 80186b0:	4621      	mov	r1, r4
 80186b2:	4628      	mov	r0, r5
 80186b4:	f009 fc4a 	bl	8021f4c <z_is_t1_higher_prio_than_t2>
 80186b8:	b9b8      	cbnz	r0, 80186ea <ready_thread+0x62>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80186ba:	b134      	cbz	r4, 80186ca <ready_thread+0x42>
	return (node == list->tail) ? NULL : node->next;
 80186bc:	4b0f      	ldr	r3, [pc, #60]	; (80186fc <ready_thread+0x74>)
 80186be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80186c0:	429c      	cmp	r4, r3
 80186c2:	d002      	beq.n	80186ca <ready_thread+0x42>
 80186c4:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80186c6:	2c00      	cmp	r4, #0
 80186c8:	d1f1      	bne.n	80186ae <ready_thread+0x26>
	node->next = list;
 80186ca:	4b0c      	ldr	r3, [pc, #48]	; (80186fc <ready_thread+0x74>)
 80186cc:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80186d0:	602a      	str	r2, [r5, #0]
	node->prev = list->tail;
 80186d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80186d4:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
 80186d6:	6015      	str	r5, [r2, #0]
	list->tail = node;
 80186d8:	629d      	str	r5, [r3, #40]	; 0x28
	thread->base.thread_state |= states;
 80186da:	7b6b      	ldrb	r3, [r5, #13]
 80186dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80186e0:	736b      	strb	r3, [r5, #13]
		update_cache(0);
 80186e2:	2000      	movs	r0, #0
 80186e4:	f7ff ff80 	bl	80185e8 <update_cache>
}
 80186e8:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = successor->prev;
 80186ea:	6863      	ldr	r3, [r4, #4]
 80186ec:	606b      	str	r3, [r5, #4]
	node->next = successor;
 80186ee:	602c      	str	r4, [r5, #0]
	successor->prev->next = node;
 80186f0:	6863      	ldr	r3, [r4, #4]
 80186f2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 80186f4:	6065      	str	r5, [r4, #4]
}
 80186f6:	e7f0      	b.n	80186da <ready_thread+0x52>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80186f8:	2400      	movs	r4, #0
 80186fa:	e7d8      	b.n	80186ae <ready_thread+0x26>
 80186fc:	200046e8 	.word	0x200046e8

08018700 <z_sched_start>:
{
 8018700:	b510      	push	{r4, lr}
 8018702:	f04f 0310 	mov.w	r3, #16
 8018706:	f3ef 8411 	mrs	r4, BASEPRI
 801870a:	f383 8811 	msr	BASEPRI, r3
 801870e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 8018712:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
 8018714:	f013 0f04 	tst.w	r3, #4
 8018718:	d104      	bne.n	8018724 <z_sched_start+0x24>
	__asm__ volatile(
 801871a:	f384 8811 	msr	BASEPRI, r4
 801871e:	f3bf 8f6f 	isb	sy
}
 8018722:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8018724:	f023 0304 	bic.w	r3, r3, #4
 8018728:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
 801872a:	f7ff ffad 	bl	8018688 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 801872e:	4621      	mov	r1, r4
 8018730:	4801      	ldr	r0, [pc, #4]	; (8018738 <z_sched_start+0x38>)
 8018732:	f7ff ff0f 	bl	8018554 <z_reschedule>
 8018736:	e7f4      	b.n	8018722 <z_sched_start+0x22>
 8018738:	20004718 	.word	0x20004718

0801873c <move_thread_to_end_of_prio_q>:
{
 801873c:	b538      	push	{r3, r4, r5, lr}
 801873e:	4605      	mov	r5, r0
	if (z_is_thread_queued(thread)) {
 8018740:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8018744:	2b00      	cmp	r3, #0
 8018746:	db27      	blt.n	8018798 <move_thread_to_end_of_prio_q+0x5c>
	return list->head == list;
 8018748:	4b1a      	ldr	r3, [pc, #104]	; (80187b4 <move_thread_to_end_of_prio_q+0x78>)
 801874a:	f853 4f24 	ldr.w	r4, [r3, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 801874e:	429c      	cmp	r4, r3
 8018750:	d02e      	beq.n	80187b0 <move_thread_to_end_of_prio_q+0x74>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8018752:	b164      	cbz	r4, 801876e <move_thread_to_end_of_prio_q+0x32>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
 8018754:	4621      	mov	r1, r4
 8018756:	4628      	mov	r0, r5
 8018758:	f009 fbf8 	bl	8021f4c <z_is_t1_higher_prio_than_t2>
 801875c:	bb08      	cbnz	r0, 80187a2 <move_thread_to_end_of_prio_q+0x66>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 801875e:	b134      	cbz	r4, 801876e <move_thread_to_end_of_prio_q+0x32>
	return (node == list->tail) ? NULL : node->next;
 8018760:	4b14      	ldr	r3, [pc, #80]	; (80187b4 <move_thread_to_end_of_prio_q+0x78>)
 8018762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018764:	429c      	cmp	r4, r3
 8018766:	d002      	beq.n	801876e <move_thread_to_end_of_prio_q+0x32>
 8018768:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 801876a:	2c00      	cmp	r4, #0
 801876c:	d1f1      	bne.n	8018752 <move_thread_to_end_of_prio_q+0x16>
	node->next = list;
 801876e:	4b11      	ldr	r3, [pc, #68]	; (80187b4 <move_thread_to_end_of_prio_q+0x78>)
 8018770:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8018774:	602a      	str	r2, [r5, #0]
	node->prev = list->tail;
 8018776:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018778:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
 801877a:	6015      	str	r5, [r2, #0]
	list->tail = node;
 801877c:	629d      	str	r5, [r3, #40]	; 0x28
	thread->base.thread_state |= states;
 801877e:	7b6b      	ldrb	r3, [r5, #13]
 8018780:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018784:	736b      	strb	r3, [r5, #13]
	update_cache(thread == _current);
 8018786:	4b0b      	ldr	r3, [pc, #44]	; (80187b4 <move_thread_to_end_of_prio_q+0x78>)
 8018788:	6898      	ldr	r0, [r3, #8]
 801878a:	42a8      	cmp	r0, r5
 801878c:	bf14      	ite	ne
 801878e:	2000      	movne	r0, #0
 8018790:	2001      	moveq	r0, #1
 8018792:	f7ff ff29 	bl	80185e8 <update_cache>
}
 8018796:	bd38      	pop	{r3, r4, r5, pc}
		_priq_run_remove(&_kernel.ready_q.runq, thread);
 8018798:	4601      	mov	r1, r0
 801879a:	4807      	ldr	r0, [pc, #28]	; (80187b8 <move_thread_to_end_of_prio_q+0x7c>)
 801879c:	f7ff ff0c 	bl	80185b8 <z_priq_dumb_remove>
 80187a0:	e7d2      	b.n	8018748 <move_thread_to_end_of_prio_q+0xc>
	node->prev = successor->prev;
 80187a2:	6863      	ldr	r3, [r4, #4]
 80187a4:	606b      	str	r3, [r5, #4]
	node->next = successor;
 80187a6:	602c      	str	r4, [r5, #0]
	successor->prev->next = node;
 80187a8:	6863      	ldr	r3, [r4, #4]
 80187aa:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 80187ac:	6065      	str	r5, [r4, #4]
}
 80187ae:	e7e6      	b.n	801877e <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80187b0:	2400      	movs	r4, #0
 80187b2:	e7ce      	b.n	8018752 <move_thread_to_end_of_prio_q+0x16>
 80187b4:	200046e8 	.word	0x200046e8
 80187b8:	2000470c 	.word	0x2000470c

080187bc <z_time_slice>:
{
 80187bc:	b510      	push	{r4, lr}
	__asm__ volatile(
 80187be:	f04f 0310 	mov.w	r3, #16
 80187c2:	f3ef 8411 	mrs	r4, BASEPRI
 80187c6:	f383 8811 	msr	BASEPRI, r3
 80187ca:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 80187ce:	4b1c      	ldr	r3, [pc, #112]	; (8018840 <z_time_slice+0x84>)
 80187d0:	689b      	ldr	r3, [r3, #8]
 80187d2:	4a1c      	ldr	r2, [pc, #112]	; (8018844 <z_time_slice+0x88>)
 80187d4:	6812      	ldr	r2, [r2, #0]
 80187d6:	4293      	cmp	r3, r2
 80187d8:	d01d      	beq.n	8018816 <z_time_slice+0x5a>
	pending_current = NULL;
 80187da:	4a1a      	ldr	r2, [pc, #104]	; (8018844 <z_time_slice+0x88>)
 80187dc:	2100      	movs	r1, #0
 80187de:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
 80187e0:	4a19      	ldr	r2, [pc, #100]	; (8018848 <z_time_slice+0x8c>)
 80187e2:	6812      	ldr	r2, [r2, #0]
 80187e4:	b322      	cbz	r2, 8018830 <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 80187e6:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
 80187e8:	2a7f      	cmp	r2, #127	; 0x7f
 80187ea:	d821      	bhi.n	8018830 <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
 80187ec:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
 80187ee:	f012 0f1f 	tst.w	r2, #31
 80187f2:	d11d      	bne.n	8018830 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 80187f4:	f993 100e 	ldrsb.w	r1, [r3, #14]
 80187f8:	4a14      	ldr	r2, [pc, #80]	; (801884c <z_time_slice+0x90>)
 80187fa:	6812      	ldr	r2, [r2, #0]
 80187fc:	4291      	cmp	r1, r2
 80187fe:	db17      	blt.n	8018830 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
 8018800:	4a13      	ldr	r2, [pc, #76]	; (8018850 <z_time_slice+0x94>)
 8018802:	4293      	cmp	r3, r2
 8018804:	d014      	beq.n	8018830 <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
 8018806:	4a0e      	ldr	r2, [pc, #56]	; (8018840 <z_time_slice+0x84>)
 8018808:	6912      	ldr	r2, [r2, #16]
 801880a:	4282      	cmp	r2, r0
 801880c:	dd0a      	ble.n	8018824 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
 801880e:	1a10      	subs	r0, r2, r0
 8018810:	4b0b      	ldr	r3, [pc, #44]	; (8018840 <z_time_slice+0x84>)
 8018812:	6118      	str	r0, [r3, #16]
 8018814:	e00f      	b.n	8018836 <z_time_slice+0x7a>
		z_reset_time_slice();
 8018816:	f7ff fe61 	bl	80184dc <z_reset_time_slice>
	__asm__ volatile(
 801881a:	f384 8811 	msr	BASEPRI, r4
 801881e:	f3bf 8f6f 	isb	sy
		return;
 8018822:	e00c      	b.n	801883e <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
 8018824:	4618      	mov	r0, r3
 8018826:	f7ff ff89 	bl	801873c <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
 801882a:	f7ff fe57 	bl	80184dc <z_reset_time_slice>
 801882e:	e002      	b.n	8018836 <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
 8018830:	4b03      	ldr	r3, [pc, #12]	; (8018840 <z_time_slice+0x84>)
 8018832:	2200      	movs	r2, #0
 8018834:	611a      	str	r2, [r3, #16]
 8018836:	f384 8811 	msr	BASEPRI, r4
 801883a:	f3bf 8f6f 	isb	sy
}
 801883e:	bd10      	pop	{r4, pc}
 8018840:	200046e8 	.word	0x200046e8
 8018844:	20004714 	.word	0x20004714
 8018848:	2000471c 	.word	0x2000471c
 801884c:	20004718 	.word	0x20004718
 8018850:	20003220 	.word	0x20003220

08018854 <z_impl_k_thread_suspend>:
{
 8018854:	b538      	push	{r3, r4, r5, lr}
 8018856:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 8018858:	3018      	adds	r0, #24
 801885a:	f009 fdbe 	bl	80223da <z_abort_timeout>
	LOCKED(&sched_spinlock) {
 801885e:	2300      	movs	r3, #0
	__asm__ volatile(
 8018860:	f04f 0210 	mov.w	r2, #16
 8018864:	f3ef 8511 	mrs	r5, BASEPRI
 8018868:	f382 8811 	msr	BASEPRI, r2
 801886c:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 8018870:	e010      	b.n	8018894 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8018872:	7b63      	ldrb	r3, [r4, #13]
 8018874:	f043 0310 	orr.w	r3, r3, #16
 8018878:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
 801887a:	4b15      	ldr	r3, [pc, #84]	; (80188d0 <z_impl_k_thread_suspend+0x7c>)
 801887c:	6898      	ldr	r0, [r3, #8]
 801887e:	42a0      	cmp	r0, r4
 8018880:	bf14      	ite	ne
 8018882:	2000      	movne	r0, #0
 8018884:	2001      	moveq	r0, #1
 8018886:	f7ff feaf 	bl	80185e8 <update_cache>
	__asm__ volatile(
 801888a:	f385 8811 	msr	BASEPRI, r5
 801888e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8018892:	2301      	movs	r3, #1
 8018894:	b963      	cbnz	r3, 80188b0 <z_impl_k_thread_suspend+0x5c>
		if (z_is_thread_queued(thread)) {
 8018896:	f994 300d 	ldrsb.w	r3, [r4, #13]
 801889a:	2b00      	cmp	r3, #0
 801889c:	dae9      	bge.n	8018872 <z_impl_k_thread_suspend+0x1e>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
 801889e:	4621      	mov	r1, r4
 80188a0:	480c      	ldr	r0, [pc, #48]	; (80188d4 <z_impl_k_thread_suspend+0x80>)
 80188a2:	f7ff fe89 	bl	80185b8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 80188a6:	7b63      	ldrb	r3, [r4, #13]
 80188a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80188ac:	7363      	strb	r3, [r4, #13]
}
 80188ae:	e7e0      	b.n	8018872 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
 80188b0:	4b07      	ldr	r3, [pc, #28]	; (80188d0 <z_impl_k_thread_suspend+0x7c>)
 80188b2:	689b      	ldr	r3, [r3, #8]
 80188b4:	42a3      	cmp	r3, r4
 80188b6:	d000      	beq.n	80188ba <z_impl_k_thread_suspend+0x66>
}
 80188b8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 80188ba:	f04f 0310 	mov.w	r3, #16
 80188be:	f3ef 8011 	mrs	r0, BASEPRI
 80188c2:	f383 8811 	msr	BASEPRI, r3
 80188c6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 80188ca:	f009 fb7f 	bl	8021fcc <z_reschedule_irqlock>
 80188ce:	e7f3      	b.n	80188b8 <z_impl_k_thread_suspend+0x64>
 80188d0:	200046e8 	.word	0x200046e8
 80188d4:	2000470c 	.word	0x2000470c

080188d8 <z_thread_single_abort>:
{
 80188d8:	b570      	push	{r4, r5, r6, lr}
 80188da:	4605      	mov	r5, r0
	if (thread->fn_abort != NULL) {
 80188dc:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80188de:	b103      	cbz	r3, 80188e2 <z_thread_single_abort+0xa>
		thread->fn_abort();
 80188e0:	4798      	blx	r3
 80188e2:	f105 0018 	add.w	r0, r5, #24
 80188e6:	f009 fd78 	bl	80223da <z_abort_timeout>
	LOCKED(&sched_spinlock) {
 80188ea:	2300      	movs	r3, #0
 80188ec:	f04f 0210 	mov.w	r2, #16
 80188f0:	f3ef 8611 	mrs	r6, BASEPRI
 80188f4:	f382 8811 	msr	BASEPRI, r2
 80188f8:	f3bf 8f6f 	isb	sy
 80188fc:	e01f      	b.n	801893e <z_thread_single_abort+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 80188fe:	2201      	movs	r2, #1
 8018900:	e027      	b.n	8018952 <z_thread_single_abort+0x7a>
				_priq_run_remove(&_kernel.ready_q.runq,
 8018902:	4629      	mov	r1, r5
 8018904:	482a      	ldr	r0, [pc, #168]	; (80189b0 <z_thread_single_abort+0xd8>)
 8018906:	f7ff fe57 	bl	80185b8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 801890a:	7b6b      	ldrb	r3, [r5, #13]
 801890c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018910:	736b      	strb	r3, [r5, #13]
}
 8018912:	e024      	b.n	801895e <z_thread_single_abort+0x86>
			if (z_is_thread_pending(thread)) {
 8018914:	f013 0f02 	tst.w	r3, #2
 8018918:	d029      	beq.n	801896e <z_thread_single_abort+0x96>
				_priq_wait_remove(&pended_on(thread)->waitq,
 801891a:	4628      	mov	r0, r5
 801891c:	f009 fb14 	bl	8021f48 <pended_on>
 8018920:	4629      	mov	r1, r5
 8018922:	f7ff fe49 	bl	80185b8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8018926:	7b6b      	ldrb	r3, [r5, #13]
 8018928:	f023 0302 	bic.w	r3, r3, #2
 801892c:	736b      	strb	r3, [r5, #13]
				thread->base.pended_on = NULL;
 801892e:	2300      	movs	r3, #0
 8018930:	60ab      	str	r3, [r5, #8]
 8018932:	e01c      	b.n	801896e <z_thread_single_abort+0x96>
	__asm__ volatile(
 8018934:	f386 8811 	msr	BASEPRI, r6
 8018938:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 801893c:	2301      	movs	r3, #1
 801893e:	461a      	mov	r2, r3
 8018940:	2b00      	cmp	r3, #0
 8018942:	d134      	bne.n	80189ae <z_thread_single_abort+0xd6>
	uint8_t state = thread->base.thread_state;
 8018944:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8018946:	f013 0f1f 	tst.w	r3, #31
 801894a:	d102      	bne.n	8018952 <z_thread_single_abort+0x7a>
	return node->next != NULL;
 801894c:	69a9      	ldr	r1, [r5, #24]
 801894e:	2900      	cmp	r1, #0
 8018950:	d0d5      	beq.n	80188fe <z_thread_single_abort+0x26>
		if (z_is_thread_ready(thread)) {
 8018952:	f012 0f01 	tst.w	r2, #1
 8018956:	d0dd      	beq.n	8018914 <z_thread_single_abort+0x3c>
			if (z_is_thread_queued(thread)) {
 8018958:	f013 0f80 	tst.w	r3, #128	; 0x80
 801895c:	d1d1      	bne.n	8018902 <z_thread_single_abort+0x2a>
			update_cache(thread == _current);
 801895e:	4b15      	ldr	r3, [pc, #84]	; (80189b4 <z_thread_single_abort+0xdc>)
 8018960:	6898      	ldr	r0, [r3, #8]
 8018962:	42a8      	cmp	r0, r5
 8018964:	bf14      	ite	ne
 8018966:	2000      	movne	r0, #0
 8018968:	2001      	moveq	r0, #1
 801896a:	f7ff fe3d 	bl	80185e8 <update_cache>
		thread->base.thread_state |= mask;
 801896e:	7b6b      	ldrb	r3, [r5, #13]
 8018970:	f043 0308 	orr.w	r3, r3, #8
 8018974:	736b      	strb	r3, [r5, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 8018976:	f105 0330 	add.w	r3, r5, #48	; 0x30
	return list->head == list;
 801897a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
 801897c:	42a3      	cmp	r3, r4
 801897e:	d0d9      	beq.n	8018934 <z_thread_single_abort+0x5c>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
 8018980:	2c00      	cmp	r4, #0
 8018982:	d0d7      	beq.n	8018934 <z_thread_single_abort+0x5c>
 8018984:	f104 0018 	add.w	r0, r4, #24
 8018988:	f009 fd27 	bl	80223da <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
 801898c:	4620      	mov	r0, r4
 801898e:	f009 fadb 	bl	8021f48 <pended_on>
 8018992:	4621      	mov	r1, r4
 8018994:	f7ff fe10 	bl	80185b8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8018998:	7b63      	ldrb	r3, [r4, #13]
 801899a:	f023 0302 	bic.w	r3, r3, #2
 801899e:	7363      	strb	r3, [r4, #13]
			waiter->base.pended_on = NULL;
 80189a0:	2300      	movs	r3, #0
 80189a2:	60a3      	str	r3, [r4, #8]
 80189a4:	6723      	str	r3, [r4, #112]	; 0x70
			ready_thread(waiter);
 80189a6:	4620      	mov	r0, r4
 80189a8:	f7ff fe6e 	bl	8018688 <ready_thread>
 80189ac:	e7e3      	b.n	8018976 <z_thread_single_abort+0x9e>
}
 80189ae:	bd70      	pop	{r4, r5, r6, pc}
 80189b0:	2000470c 	.word	0x2000470c
 80189b4:	200046e8 	.word	0x200046e8

080189b8 <unready_thread>:
{
 80189b8:	b510      	push	{r4, lr}
 80189ba:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
 80189bc:	f990 300d 	ldrsb.w	r3, [r0, #13]
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	db08      	blt.n	80189d6 <unready_thread+0x1e>
	update_cache(thread == _current);
 80189c4:	4b08      	ldr	r3, [pc, #32]	; (80189e8 <unready_thread+0x30>)
 80189c6:	6898      	ldr	r0, [r3, #8]
 80189c8:	42a0      	cmp	r0, r4
 80189ca:	bf14      	ite	ne
 80189cc:	2000      	movne	r0, #0
 80189ce:	2001      	moveq	r0, #1
 80189d0:	f7ff fe0a 	bl	80185e8 <update_cache>
}
 80189d4:	bd10      	pop	{r4, pc}
		_priq_run_remove(&_kernel.ready_q.runq, thread);
 80189d6:	4601      	mov	r1, r0
 80189d8:	4804      	ldr	r0, [pc, #16]	; (80189ec <unready_thread+0x34>)
 80189da:	f7ff fded 	bl	80185b8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 80189de:	7b63      	ldrb	r3, [r4, #13]
 80189e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80189e4:	7363      	strb	r3, [r4, #13]
}
 80189e6:	e7ed      	b.n	80189c4 <unready_thread+0xc>
 80189e8:	200046e8 	.word	0x200046e8
 80189ec:	2000470c 	.word	0x2000470c

080189f0 <z_pend_curr>:
{
 80189f0:	b510      	push	{r4, lr}
 80189f2:	460c      	mov	r4, r1
 80189f4:	4611      	mov	r1, r2
	pending_current = _current;
 80189f6:	4b06      	ldr	r3, [pc, #24]	; (8018a10 <z_pend_curr+0x20>)
 80189f8:	6898      	ldr	r0, [r3, #8]
 80189fa:	4b06      	ldr	r3, [pc, #24]	; (8018a14 <z_pend_curr+0x24>)
 80189fc:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
 80189fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018a02:	f009 fb8a 	bl	802211a <pend>
 8018a06:	4620      	mov	r0, r4
 8018a08:	f7f2 fad8 	bl	800afbc <arch_swap>
}
 8018a0c:	bd10      	pop	{r4, pc}
 8018a0e:	bf00      	nop
 8018a10:	200046e8 	.word	0x200046e8
 8018a14:	20004714 	.word	0x20004714

08018a18 <z_set_prio>:
{
 8018a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a1c:	4604      	mov	r4, r0
 8018a1e:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
 8018a20:	2300      	movs	r3, #0
	__asm__ volatile(
 8018a22:	f04f 0210 	mov.w	r2, #16
 8018a26:	f3ef 8611 	mrs	r6, BASEPRI
 8018a2a:	f382 8811 	msr	BASEPRI, r2
 8018a2e:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
 8018a32:	4698      	mov	r8, r3
 8018a34:	e008      	b.n	8018a48 <z_set_prio+0x30>
		if (need_sched) {
 8018a36:	f012 0801 	ands.w	r8, r2, #1
 8018a3a:	d111      	bne.n	8018a60 <z_set_prio+0x48>
			thread->base.prio = prio;
 8018a3c:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
 8018a3e:	f386 8811 	msr	BASEPRI, r6
 8018a42:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8018a46:	2301      	movs	r3, #1
 8018a48:	461a      	mov	r2, r3
 8018a4a:	2b00      	cmp	r3, #0
 8018a4c:	d136      	bne.n	8018abc <z_set_prio+0xa4>
	uint8_t state = thread->base.thread_state;
 8018a4e:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8018a50:	f013 0f1f 	tst.w	r3, #31
 8018a54:	d1ef      	bne.n	8018a36 <z_set_prio+0x1e>
	return node->next != NULL;
 8018a56:	69a3      	ldr	r3, [r4, #24]
 8018a58:	2b00      	cmp	r3, #0
 8018a5a:	d1ec      	bne.n	8018a36 <z_set_prio+0x1e>
 8018a5c:	2201      	movs	r2, #1
 8018a5e:	e7ea      	b.n	8018a36 <z_set_prio+0x1e>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
 8018a60:	4d18      	ldr	r5, [pc, #96]	; (8018ac4 <z_set_prio+0xac>)
 8018a62:	f105 0924 	add.w	r9, r5, #36	; 0x24
 8018a66:	4621      	mov	r1, r4
 8018a68:	4648      	mov	r0, r9
 8018a6a:	f7ff fda5 	bl	80185b8 <z_priq_dumb_remove>
				thread->base.prio = prio;
 8018a6e:	73a7      	strb	r7, [r4, #14]
	return list->head == list;
 8018a70:	6a6d      	ldr	r5, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8018a72:	454d      	cmp	r5, r9
 8018a74:	d020      	beq.n	8018ab8 <z_set_prio+0xa0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8018a76:	b165      	cbz	r5, 8018a92 <z_set_prio+0x7a>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
 8018a78:	4629      	mov	r1, r5
 8018a7a:	4620      	mov	r0, r4
 8018a7c:	f009 fa66 	bl	8021f4c <z_is_t1_higher_prio_than_t2>
 8018a80:	b998      	cbnz	r0, 8018aaa <z_set_prio+0x92>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8018a82:	b135      	cbz	r5, 8018a92 <z_set_prio+0x7a>
	return (node == list->tail) ? NULL : node->next;
 8018a84:	4b0f      	ldr	r3, [pc, #60]	; (8018ac4 <z_set_prio+0xac>)
 8018a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a88:	429d      	cmp	r5, r3
 8018a8a:	d002      	beq.n	8018a92 <z_set_prio+0x7a>
 8018a8c:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8018a8e:	2d00      	cmp	r5, #0
 8018a90:	d1f1      	bne.n	8018a76 <z_set_prio+0x5e>
	node->next = list;
 8018a92:	4b0c      	ldr	r3, [pc, #48]	; (8018ac4 <z_set_prio+0xac>)
 8018a94:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8018a98:	6022      	str	r2, [r4, #0]
	node->prev = list->tail;
 8018a9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018a9c:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
 8018a9e:	6014      	str	r4, [r2, #0]
	list->tail = node;
 8018aa0:	629c      	str	r4, [r3, #40]	; 0x28
			update_cache(1);
 8018aa2:	2001      	movs	r0, #1
 8018aa4:	f7ff fda0 	bl	80185e8 <update_cache>
 8018aa8:	e7c9      	b.n	8018a3e <z_set_prio+0x26>
	node->prev = successor->prev;
 8018aaa:	686b      	ldr	r3, [r5, #4]
 8018aac:	6063      	str	r3, [r4, #4]
	node->next = successor;
 8018aae:	6025      	str	r5, [r4, #0]
	successor->prev->next = node;
 8018ab0:	686b      	ldr	r3, [r5, #4]
 8018ab2:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8018ab4:	606c      	str	r4, [r5, #4]
}
 8018ab6:	e7f4      	b.n	8018aa2 <z_set_prio+0x8a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8018ab8:	2500      	movs	r5, #0
 8018aba:	e7dc      	b.n	8018a76 <z_set_prio+0x5e>
}
 8018abc:	4640      	mov	r0, r8
 8018abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018ac2:	bf00      	nop
 8018ac4:	200046e8 	.word	0x200046e8

08018ac8 <z_sched_init>:

	return need_sched;
}

void z_sched_init(void)
{
 8018ac8:	b508      	push	{r3, lr}
	list->head = (sys_dnode_t *)list;
 8018aca:	4b05      	ldr	r3, [pc, #20]	; (8018ae0 <z_sched_init+0x18>)
 8018acc:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8018ad0:	625a      	str	r2, [r3, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
 8018ad2:	629a      	str	r2, [r3, #40]	; 0x28
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 8018ad4:	2100      	movs	r1, #0
 8018ad6:	4608      	mov	r0, r1
 8018ad8:	f7ff fd16 	bl	8018508 <k_sched_time_slice_set>
		CONFIG_TIMESLICE_PRIORITY);
#endif
}
 8018adc:	bd08      	pop	{r3, pc}
 8018ade:	bf00      	nop
 8018ae0:	200046e8 	.word	0x200046e8

08018ae4 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
 8018ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT(!arch_is_in_isr(), "");

	if (!z_is_idle_thread_object(_current)) {
 8018ae6:	4b2b      	ldr	r3, [pc, #172]	; (8018b94 <z_impl_k_yield+0xb0>)
 8018ae8:	689a      	ldr	r2, [r3, #8]
 8018aea:	4b2b      	ldr	r3, [pc, #172]	; (8018b98 <z_impl_k_yield+0xb4>)
 8018aec:	429a      	cmp	r2, r3
 8018aee:	d046      	beq.n	8018b7e <z_impl_k_yield+0x9a>
		LOCKED(&sched_spinlock) {
 8018af0:	2300      	movs	r3, #0
	__asm__ volatile(
 8018af2:	f04f 0210 	mov.w	r2, #16
 8018af6:	f3ef 8611 	mrs	r6, BASEPRI
 8018afa:	f382 8811 	msr	BASEPRI, r2
 8018afe:	f3bf 8f6f 	isb	sy
 8018b02:	e01e      	b.n	8018b42 <z_impl_k_yield+0x5e>
	node->prev = successor->prev;
 8018b04:	6863      	ldr	r3, [r4, #4]
 8018b06:	606b      	str	r3, [r5, #4]
	node->next = successor;
 8018b08:	602c      	str	r4, [r5, #0]
	successor->prev->next = node;
 8018b0a:	6863      	ldr	r3, [r4, #4]
 8018b0c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 8018b0e:	6065      	str	r5, [r4, #4]
}
 8018b10:	e009      	b.n	8018b26 <z_impl_k_yield+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8018b12:	2400      	movs	r4, #0
 8018b14:	e021      	b.n	8018b5a <z_impl_k_yield+0x76>
	node->next = list;
 8018b16:	4b1f      	ldr	r3, [pc, #124]	; (8018b94 <z_impl_k_yield+0xb0>)
 8018b18:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8018b1c:	602a      	str	r2, [r5, #0]
	node->prev = list->tail;
 8018b1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018b20:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
 8018b22:	6015      	str	r5, [r2, #0]
	list->tail = node;
 8018b24:	629d      	str	r5, [r3, #40]	; 0x28
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
			z_mark_thread_as_queued(_current);
 8018b26:	4b1b      	ldr	r3, [pc, #108]	; (8018b94 <z_impl_k_yield+0xb0>)
 8018b28:	689a      	ldr	r2, [r3, #8]
	thread->base.thread_state |= states;
 8018b2a:	7b53      	ldrb	r3, [r2, #13]
 8018b2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018b30:	7353      	strb	r3, [r2, #13]
			update_cache(1);
 8018b32:	2001      	movs	r0, #1
 8018b34:	f7ff fd58 	bl	80185e8 <update_cache>
	__asm__ volatile(
 8018b38:	f386 8811 	msr	BASEPRI, r6
 8018b3c:	f3bf 8f6f 	isb	sy
		LOCKED(&sched_spinlock) {
 8018b40:	2301      	movs	r3, #1
 8018b42:	b9e3      	cbnz	r3, 8018b7e <z_impl_k_yield+0x9a>
				_priq_run_remove(&_kernel.ready_q.runq,
 8018b44:	4c13      	ldr	r4, [pc, #76]	; (8018b94 <z_impl_k_yield+0xb0>)
 8018b46:	f104 0724 	add.w	r7, r4, #36	; 0x24
 8018b4a:	68a1      	ldr	r1, [r4, #8]
 8018b4c:	4638      	mov	r0, r7
 8018b4e:	f7ff fd33 	bl	80185b8 <z_priq_dumb_remove>
			_priq_run_add(&_kernel.ready_q.runq, _current);
 8018b52:	68a5      	ldr	r5, [r4, #8]
	return list->head == list;
 8018b54:	6a64      	ldr	r4, [r4, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8018b56:	42bc      	cmp	r4, r7
 8018b58:	d0db      	beq.n	8018b12 <z_impl_k_yield+0x2e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8018b5a:	2c00      	cmp	r4, #0
 8018b5c:	d0db      	beq.n	8018b16 <z_impl_k_yield+0x32>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
 8018b5e:	4621      	mov	r1, r4
 8018b60:	4628      	mov	r0, r5
 8018b62:	f009 f9f3 	bl	8021f4c <z_is_t1_higher_prio_than_t2>
 8018b66:	2800      	cmp	r0, #0
 8018b68:	d1cc      	bne.n	8018b04 <z_impl_k_yield+0x20>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8018b6a:	2c00      	cmp	r4, #0
 8018b6c:	d0d3      	beq.n	8018b16 <z_impl_k_yield+0x32>
	return (node == list->tail) ? NULL : node->next;
 8018b6e:	4b09      	ldr	r3, [pc, #36]	; (8018b94 <z_impl_k_yield+0xb0>)
 8018b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b72:	429c      	cmp	r4, r3
 8018b74:	d0cf      	beq.n	8018b16 <z_impl_k_yield+0x32>
 8018b76:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8018b78:	2c00      	cmp	r4, #0
 8018b7a:	d1ee      	bne.n	8018b5a <z_impl_k_yield+0x76>
 8018b7c:	e7cb      	b.n	8018b16 <z_impl_k_yield+0x32>
	__asm__ volatile(
 8018b7e:	f04f 0310 	mov.w	r3, #16
 8018b82:	f3ef 8011 	mrs	r0, BASEPRI
 8018b86:	f383 8811 	msr	BASEPRI, r3
 8018b8a:	f3bf 8f6f 	isb	sy
 8018b8e:	f7f2 fa15 	bl	800afbc <arch_swap>
		}
	}
	z_swap_unlocked();
}
 8018b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b94:	200046e8 	.word	0x200046e8
 8018b98:	20003220 	.word	0x20003220

08018b9c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
{
 8018b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %d ticks", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 8018ba0:	4604      	mov	r4, r0
 8018ba2:	b348      	cbz	r0, 8018bf8 <z_tick_sleep+0x5c>
	}

	k_timeout_t timeout;

#ifndef CONFIG_LEGACY_TIMEOUT_API
	timeout = Z_TIMEOUT_TICKS(ticks);
 8018ba4:	4606      	mov	r6, r0
 8018ba6:	17c7      	asrs	r7, r0, #31
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
 8018ba8:	f009 fc74 	bl	8022494 <z_tick_get_32>
 8018bac:	4404      	add	r4, r0
 8018bae:	f04f 0310 	mov.w	r3, #16
 8018bb2:	f3ef 8811 	mrs	r8, BASEPRI
 8018bb6:	f383 8811 	msr	BASEPRI, r3
 8018bba:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
 8018bbe:	4d10      	ldr	r5, [pc, #64]	; (8018c00 <z_tick_sleep+0x64>)
 8018bc0:	68a8      	ldr	r0, [r5, #8]
 8018bc2:	4b10      	ldr	r3, [pc, #64]	; (8018c04 <z_tick_sleep+0x68>)
 8018bc4:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
 8018bc6:	f7ff fef7 	bl	80189b8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 8018bca:	68a8      	ldr	r0, [r5, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
 8018bcc:	4632      	mov	r2, r6
 8018bce:	463b      	mov	r3, r7
 8018bd0:	490d      	ldr	r1, [pc, #52]	; (8018c08 <z_tick_sleep+0x6c>)
 8018bd2:	3018      	adds	r0, #24
 8018bd4:	f000 f9ec 	bl	8018fb0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 8018bd8:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8018bda:	7b53      	ldrb	r3, [r2, #13]
 8018bdc:	f043 0310 	orr.w	r3, r3, #16
 8018be0:	7353      	strb	r3, [r2, #13]
 8018be2:	4640      	mov	r0, r8
 8018be4:	f7f2 f9ea 	bl	800afbc <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
 8018be8:	f009 fc54 	bl	8022494 <z_tick_get_32>
 8018bec:	1a20      	subs	r0, r4, r0
	if (ticks > 0) {
 8018bee:	2800      	cmp	r0, #0
 8018bf0:	dc00      	bgt.n	8018bf4 <z_tick_sleep+0x58>
		return ticks;
	}
#endif

	return 0;
 8018bf2:	2000      	movs	r0, #0
}
 8018bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
 8018bf8:	f7ff ff74 	bl	8018ae4 <z_impl_k_yield>
		return 0;
 8018bfc:	4620      	mov	r0, r4
 8018bfe:	e7f9      	b.n	8018bf4 <z_tick_sleep+0x58>
 8018c00:	200046e8 	.word	0x200046e8
 8018c04:	20004714 	.word	0x20004714
 8018c08:	08022069 	.word	0x08022069

08018c0c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
 8018c0c:	b508      	push	{r3, lr}
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8018c0e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8018c12:	bf08      	it	eq
 8018c14:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
 8018c18:	d007      	beq.n	8018c2a <z_impl_k_sleep+0x1e>
	ticks = k_ms_to_ticks_ceil32(timeout);
#else
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
 8018c1a:	f7ff ffbf 	bl	8018b9c <z_tick_sleep>
			return t / (from_hz / to_hz);
 8018c1e:	220a      	movs	r2, #10
 8018c20:	2300      	movs	r3, #0
 8018c22:	17c1      	asrs	r1, r0, #31
 8018c24:	f7e7 fab0 	bl	8000188 <__aeabi_uldivmod>
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
 8018c28:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
 8018c2a:	4b03      	ldr	r3, [pc, #12]	; (8018c38 <z_impl_k_sleep+0x2c>)
 8018c2c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 8018c2e:	f7ff fe11 	bl	8018854 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
 8018c32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018c36:	e7f7      	b.n	8018c28 <z_impl_k_sleep+0x1c>
 8018c38:	200046e8 	.word	0x200046e8

08018c3c <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 8018c3c:	4b01      	ldr	r3, [pc, #4]	; (8018c44 <z_impl_k_current_get+0x8>)
 8018c3e:	6898      	ldr	r0, [r3, #8]
 8018c40:	4770      	bx	lr
 8018c42:	bf00      	nop
 8018c44:	200046e8 	.word	0x200046e8

08018c48 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 8018c48:	b538      	push	{r3, r4, r5, lr}
 8018c4a:	4604      	mov	r4, r0
 8018c4c:	f04f 0310 	mov.w	r3, #16
 8018c50:	f3ef 8511 	mrs	r5, BASEPRI
 8018c54:	f383 8811 	msr	BASEPRI, r3
 8018c58:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
 8018c5c:	f009 fa7e 	bl	802215c <z_unpend_first_thread>

	if (thread != NULL) {
 8018c60:	b140      	cbz	r0, 8018c74 <z_impl_k_sem_give+0x2c>
 8018c62:	2200      	movs	r2, #0
 8018c64:	6702      	str	r2, [r0, #112]	; 0x70
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 8018c66:	f009 f9e9 	bl	802203c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 8018c6a:	4629      	mov	r1, r5
 8018c6c:	4809      	ldr	r0, [pc, #36]	; (8018c94 <z_impl_k_sem_give+0x4c>)
 8018c6e:	f7ff fc71 	bl	8018554 <z_reschedule>
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
 8018c72:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 8018c74:	68a3      	ldr	r3, [r4, #8]
 8018c76:	68e2      	ldr	r2, [r4, #12]
 8018c78:	4293      	cmp	r3, r2
 8018c7a:	d008      	beq.n	8018c8e <z_impl_k_sem_give+0x46>
 8018c7c:	2201      	movs	r2, #1
 8018c7e:	4413      	add	r3, r2
 8018c80:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 8018c82:	2102      	movs	r1, #2
 8018c84:	f104 0010 	add.w	r0, r4, #16
 8018c88:	f009 fccf 	bl	802262a <z_handle_obj_poll_events>
}
 8018c8c:	e7ed      	b.n	8018c6a <z_impl_k_sem_give+0x22>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 8018c8e:	2200      	movs	r2, #0
 8018c90:	e7f5      	b.n	8018c7e <z_impl_k_sem_give+0x36>
 8018c92:	bf00      	nop
 8018c94:	20004720 	.word	0x20004720

08018c98 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 8018c98:	b530      	push	{r4, r5, lr}
 8018c9a:	b083      	sub	sp, #12
 8018c9c:	461d      	mov	r5, r3
 8018c9e:	f04f 0310 	mov.w	r3, #16
 8018ca2:	f3ef 8111 	mrs	r1, BASEPRI
 8018ca6:	f383 8811 	msr	BASEPRI, r3
 8018caa:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
 8018cae:	6883      	ldr	r3, [r0, #8]
 8018cb0:	b143      	cbz	r3, 8018cc4 <z_impl_k_sem_take+0x2c>
		sem->count--;
 8018cb2:	3b01      	subs	r3, #1
 8018cb4:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
 8018cb6:	f381 8811 	msr	BASEPRI, r1
 8018cba:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 8018cbe:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
 8018cc0:	b003      	add	sp, #12
 8018cc2:	bd30      	pop	{r4, r5, pc}
 8018cc4:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8018cc6:	ea54 0305 	orrs.w	r3, r4, r5
 8018cca:	d006      	beq.n	8018cda <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 8018ccc:	e9cd 4500 	strd	r4, r5, [sp]
 8018cd0:	4602      	mov	r2, r0
 8018cd2:	4805      	ldr	r0, [pc, #20]	; (8018ce8 <z_impl_k_sem_take+0x50>)
 8018cd4:	f7ff fe8c 	bl	80189f0 <z_pend_curr>
	return ret;
 8018cd8:	e7f2      	b.n	8018cc0 <z_impl_k_sem_take+0x28>
 8018cda:	f381 8811 	msr	BASEPRI, r1
 8018cde:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 8018ce2:	f06f 000f 	mvn.w	r0, #15
 8018ce6:	e7eb      	b.n	8018cc0 <z_impl_k_sem_take+0x28>
 8018ce8:	20004720 	.word	0x20004720

08018cec <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
 8018cec:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
 8018cee:	4c08      	ldr	r4, [pc, #32]	; (8018d10 <k_sys_work_q_init+0x24>)
 8018cf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018cf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018cf8:	4906      	ldr	r1, [pc, #24]	; (8018d14 <k_sys_work_q_init+0x28>)
 8018cfa:	4620      	mov	r0, r4
 8018cfc:	f000 f892 	bl	8018e24 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
 8018d00:	4905      	ldr	r1, [pc, #20]	; (8018d18 <k_sys_work_q_init+0x2c>)
 8018d02:	f104 0018 	add.w	r0, r4, #24
 8018d06:	f009 fa93 	bl	8022230 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
 8018d0a:	2000      	movs	r0, #0
 8018d0c:	bd10      	pop	{r4, pc}
 8018d0e:	bf00      	nop
 8018d10:	20003310 	.word	0x20003310
 8018d14:	20007ee8 	.word	0x20007ee8
 8018d18:	080283d8 	.word	0x080283d8

08018d1c <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
 8018d1c:	b538      	push	{r3, r4, r5, lr}
 8018d1e:	4614      	mov	r4, r2
 8018d20:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8018d22:	ea54 0305 	orrs.w	r3, r4, r5
 8018d26:	d102      	bne.n	8018d2e <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
 8018d28:	f009 fa87 	bl	802223a <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
 8018d2c:	bd38      	pop	{r3, r4, r5, pc}
 8018d2e:	462b      	mov	r3, r5
 8018d30:	4902      	ldr	r1, [pc, #8]	; (8018d3c <schedule_new_thread+0x20>)
 8018d32:	3018      	adds	r0, #24
 8018d34:	f000 f93c 	bl	8018fb0 <z_add_timeout>
 8018d38:	e7f8      	b.n	8018d2c <schedule_new_thread+0x10>
 8018d3a:	bf00      	nop
 8018d3c:	08022069 	.word	0x08022069

08018d40 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8018d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018d42:	b085      	sub	sp, #20
 8018d44:	4604      	mov	r4, r0
 8018d46:	460e      	mov	r6, r1
 8018d48:	4615      	mov	r5, r2
 8018d4a:	461f      	mov	r7, r3
	sys_dlist_init(&w->waitq);
 8018d4c:	f100 0330 	add.w	r3, r0, #48	; 0x30
	list->head = (sys_dnode_t *)list;
 8018d50:	6303      	str	r3, [r0, #48]	; 0x30
	list->tail = (sys_dnode_t *)list;
 8018d52:	6343      	str	r3, [r0, #52]	; 0x34
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->base.join_waiters);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
 8018d54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018d56:	2204      	movs	r2, #4
 8018d58:	990d      	ldr	r1, [sp, #52]	; 0x34
 8018d5a:	f009 fa72 	bl	8022242 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
 8018d5e:	462a      	mov	r2, r5
 8018d60:	4631      	mov	r1, r6
 8018d62:	4620      	mov	r0, r4
 8018d64:	f009 fa59 	bl	802221a <setup_thread_stack>
 8018d68:	4605      	mov	r5, r0

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8018d6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018d6c:	9302      	str	r3, [sp, #8]
 8018d6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018d70:	9301      	str	r3, [sp, #4]
 8018d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018d74:	9300      	str	r3, [sp, #0]
 8018d76:	463b      	mov	r3, r7
 8018d78:	4602      	mov	r2, r0
 8018d7a:	4631      	mov	r1, r6
 8018d7c:	4620      	mov	r0, r4
 8018d7e:	f7f2 f9a5 	bl	800b0cc <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
 8018d82:	2300      	movs	r3, #0
 8018d84:	65e3      	str	r3, [r4, #92]	; 0x5c
	new_thread->fn_abort = NULL;
 8018d86:	6623      	str	r3, [r4, #96]	; 0x60
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
 8018d88:	4b04      	ldr	r3, [pc, #16]	; (8018d9c <z_setup_new_thread+0x5c>)
 8018d8a:	689b      	ldr	r3, [r3, #8]
 8018d8c:	b123      	cbz	r3, 8018d98 <z_setup_new_thread+0x58>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
 8018d8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018d90:	66a3      	str	r3, [r4, #104]	; 0x68
	sys_trace_thread_create(new_thread);

	return stack_ptr;
}
 8018d92:	4628      	mov	r0, r5
 8018d94:	b005      	add	sp, #20
 8018d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		new_thread->resource_pool = NULL;
 8018d98:	66a3      	str	r3, [r4, #104]	; 0x68
		return stack_ptr;
 8018d9a:	e7fa      	b.n	8018d92 <z_setup_new_thread+0x52>
 8018d9c:	200046e8 	.word	0x200046e8

08018da0 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
 8018da0:	b5d0      	push	{r4, r6, r7, lr}
 8018da2:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
 8018da4:	4c1d      	ldr	r4, [pc, #116]	; (8018e1c <z_init_static_threads+0x7c>)
 8018da6:	4b1e      	ldr	r3, [pc, #120]	; (8018e20 <z_init_static_threads+0x80>)
 8018da8:	429c      	cmp	r4, r3
 8018daa:	d215      	bcs.n	8018dd8 <z_init_static_threads+0x38>
		z_setup_new_thread(
 8018dac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8018dae:	9305      	str	r3, [sp, #20]
 8018db0:	6a23      	ldr	r3, [r4, #32]
 8018db2:	9304      	str	r3, [sp, #16]
 8018db4:	69e3      	ldr	r3, [r4, #28]
 8018db6:	9303      	str	r3, [sp, #12]
 8018db8:	69a3      	ldr	r3, [r4, #24]
 8018dba:	9302      	str	r3, [sp, #8]
 8018dbc:	6963      	ldr	r3, [r4, #20]
 8018dbe:	9301      	str	r3, [sp, #4]
 8018dc0:	6923      	ldr	r3, [r4, #16]
 8018dc2:	9300      	str	r3, [sp, #0]
 8018dc4:	68e3      	ldr	r3, [r4, #12]
 8018dc6:	68a2      	ldr	r2, [r4, #8]
 8018dc8:	6861      	ldr	r1, [r4, #4]
 8018dca:	6820      	ldr	r0, [r4, #0]
 8018dcc:	f7ff ffb8 	bl	8018d40 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
 8018dd0:	6823      	ldr	r3, [r4, #0]
 8018dd2:	65dc      	str	r4, [r3, #92]	; 0x5c
	_FOREACH_STATIC_THREAD(thread_data) {
 8018dd4:	3430      	adds	r4, #48	; 0x30
 8018dd6:	e7e6      	b.n	8018da6 <z_init_static_threads+0x6>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
 8018dd8:	f7ff fbd6 	bl	8018588 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 8018ddc:	4c0f      	ldr	r4, [pc, #60]	; (8018e1c <z_init_static_threads+0x7c>)
 8018dde:	e010      	b.n	8018e02 <z_init_static_threads+0x62>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
					    K_MSEC(thread_data->init_delay));
 8018de0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018de4:	17df      	asrs	r7, r3, #31
			return t * (to_hz / from_hz);
 8018de6:	00ba      	lsls	r2, r7, #2
 8018de8:	0099      	lsls	r1, r3, #2
 8018dea:	ea42 7093 	orr.w	r0, r2, r3, lsr #30
 8018dee:	18c9      	adds	r1, r1, r3
 8018df0:	eb47 0000 	adc.w	r0, r7, r0
 8018df4:	184a      	adds	r2, r1, r1
 8018df6:	eb40 0300 	adc.w	r3, r0, r0
			schedule_new_thread(thread_data->init_thread,
 8018dfa:	6820      	ldr	r0, [r4, #0]
 8018dfc:	f7ff ff8e 	bl	8018d1c <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
 8018e00:	3430      	adds	r4, #48	; 0x30
 8018e02:	4b07      	ldr	r3, [pc, #28]	; (8018e20 <z_init_static_threads+0x80>)
 8018e04:	429c      	cmp	r4, r3
 8018e06:	d204      	bcs.n	8018e12 <z_init_static_threads+0x72>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 8018e08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018e0e:	d0f7      	beq.n	8018e00 <z_init_static_threads+0x60>
 8018e10:	e7e6      	b.n	8018de0 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
 8018e12:	f7ff fc13 	bl	801863c <k_sched_unlock>
}
 8018e16:	b006      	add	sp, #24
 8018e18:	bdd0      	pop	{r4, r6, r7, pc}
 8018e1a:	bf00      	nop
 8018e1c:	20000eac 	.word	0x20000eac
 8018e20:	20000eac 	.word	0x20000eac

08018e24 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
 8018e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e28:	b088      	sub	sp, #32
 8018e2a:	4604      	mov	r4, r0
 8018e2c:	460d      	mov	r5, r1
 8018e2e:	4616      	mov	r6, r2
 8018e30:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
 8018e32:	f009 f833 	bl	8021e9c <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
 8018e36:	f104 0818 	add.w	r8, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8018e3a:	2200      	movs	r2, #0
 8018e3c:	2300      	movs	r3, #0
 8018e3e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018e42:	9204      	str	r2, [sp, #16]
 8018e44:	9703      	str	r7, [sp, #12]
 8018e46:	9202      	str	r2, [sp, #8]
 8018e48:	9201      	str	r2, [sp, #4]
 8018e4a:	9400      	str	r4, [sp, #0]
 8018e4c:	4b06      	ldr	r3, [pc, #24]	; (8018e68 <k_work_q_start+0x44>)
 8018e4e:	4632      	mov	r2, r6
 8018e50:	4629      	mov	r1, r5
 8018e52:	4640      	mov	r0, r8
 8018e54:	f009 f9fd 	bl	8022252 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
 8018e58:	4904      	ldr	r1, [pc, #16]	; (8018e6c <k_work_q_start+0x48>)
 8018e5a:	4640      	mov	r0, r8
 8018e5c:	f009 f9e8 	bl	8022230 <z_impl_k_thread_name_set>
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
 8018e60:	b008      	add	sp, #32
 8018e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e66:	bf00      	nop
 8018e68:	0801a061 	.word	0x0801a061
 8018e6c:	080283e4 	.word	0x080283e4

08018e70 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
 8018e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018e74:	4605      	mov	r5, r0
 8018e76:	460c      	mov	r4, r1
 8018e78:	4616      	mov	r6, r2
 8018e7a:	461f      	mov	r7, r3
	__asm__ volatile(
 8018e7c:	f04f 0310 	mov.w	r3, #16
 8018e80:	f3ef 8911 	mrs	r9, BASEPRI
 8018e84:	f383 8811 	msr	BASEPRI, r3
 8018e88:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
 8018e8c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8018e8e:	b123      	cbz	r3, 8018e9a <k_delayed_work_submit_to_queue+0x2a>
 8018e90:	4283      	cmp	r3, r0
 8018e92:	d002      	beq.n	8018e9a <k_delayed_work_submit_to_queue+0x2a>
		err = -EADDRINUSE;
 8018e94:	f06f 082f 	mvn.w	r8, #47	; 0x2f
 8018e98:	e00e      	b.n	8018eb8 <k_delayed_work_submit_to_queue+0x48>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
 8018e9a:	42ab      	cmp	r3, r5
 8018e9c:	d013      	beq.n	8018ec6 <k_delayed_work_submit_to_queue+0x56>
	int err = 0;
 8018e9e:	f04f 0800 	mov.w	r8, #0
			goto done;
		}
	}

	/* Attach workqueue so the timeout callback can submit it */
	work->work_q = work_q;
 8018ea2:	62a5      	str	r5, [r4, #40]	; 0x28

	/* Submit work directly if no delay.  Note that this is a
	 * blocking operation, so release the lock first.
	 */
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8018ea4:	ea56 0307 	orrs.w	r3, r6, r7
 8018ea8:	d01a      	beq.n	8018ee0 <k_delayed_work_submit_to_queue+0x70>
#ifdef CONFIG_LEGACY_TIMEOUT_API
	delay = _TICK_ALIGN + k_ms_to_ticks_ceil32(delay);
#endif

	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);
 8018eaa:	4632      	mov	r2, r6
 8018eac:	463b      	mov	r3, r7
 8018eae:	491b      	ldr	r1, [pc, #108]	; (8018f1c <k_delayed_work_submit_to_queue+0xac>)
 8018eb0:	f104 0010 	add.w	r0, r4, #16
 8018eb4:	f000 f87c 	bl	8018fb0 <z_add_timeout>
	__asm__ volatile(
 8018eb8:	f389 8811 	msr	BASEPRI, r9
 8018ebc:	f3bf 8f6f 	isb	sy

done:
	k_spin_unlock(&lock, key);
	return err;
}
 8018ec0:	4640      	mov	r0, r8
 8018ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err = work_cancel(work);
 8018ec6:	4620      	mov	r0, r4
 8018ec8:	f009 f9e5 	bl	8022296 <work_cancel>
 8018ecc:	4680      	mov	r8, r0
		if (err == -EALREADY) {
 8018ece:	f110 0f45 	cmn.w	r0, #69	; 0x45
 8018ed2:	d002      	beq.n	8018eda <k_delayed_work_submit_to_queue+0x6a>
		} else if (err < 0) {
 8018ed4:	2800      	cmp	r0, #0
 8018ed6:	dae4      	bge.n	8018ea2 <k_delayed_work_submit_to_queue+0x32>
 8018ed8:	e7ee      	b.n	8018eb8 <k_delayed_work_submit_to_queue+0x48>
			err = 0;
 8018eda:	f04f 0800 	mov.w	r8, #0
 8018ede:	e7e0      	b.n	8018ea2 <k_delayed_work_submit_to_queue+0x32>
 8018ee0:	f389 8811 	msr	BASEPRI, r9
 8018ee4:	f3bf 8f6f 	isb	sy
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 8018ee8:	f104 0308 	add.w	r3, r4, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8018eec:	f3bf 8f5b 	dmb	ish
 8018ef0:	e853 2f00 	ldrex	r2, [r3]
 8018ef4:	f042 0101 	orr.w	r1, r2, #1
 8018ef8:	e843 1000 	strex	r0, r1, [r3]
 8018efc:	2800      	cmp	r0, #0
 8018efe:	d1f7      	bne.n	8018ef0 <k_delayed_work_submit_to_queue+0x80>
 8018f00:	f3bf 8f5b 	dmb	ish
 8018f04:	f012 0f01 	tst.w	r2, #1
 8018f08:	d002      	beq.n	8018f10 <k_delayed_work_submit_to_queue+0xa0>
		return 0;
 8018f0a:	f04f 0800 	mov.w	r8, #0
}
 8018f0e:	e7d7      	b.n	8018ec0 <k_delayed_work_submit_to_queue+0x50>
		k_queue_append(&work_q->queue, work);
 8018f10:	4621      	mov	r1, r4
 8018f12:	4628      	mov	r0, r5
 8018f14:	f008 ffce 	bl	8021eb4 <k_queue_append>
 8018f18:	e7f7      	b.n	8018f0a <k_delayed_work_submit_to_queue+0x9a>
 8018f1a:	bf00      	nop
 8018f1c:	0802233d 	.word	0x0802233d

08018f20 <first>:
	return list->head == list;
 8018f20:	4b03      	ldr	r3, [pc, #12]	; (8018f30 <first+0x10>)
 8018f22:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8018f24:	4298      	cmp	r0, r3
 8018f26:	d000      	beq.n	8018f2a <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
 8018f28:	4770      	bx	lr
 8018f2a:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
 8018f2c:	e7fc      	b.n	8018f28 <first+0x8>
 8018f2e:	bf00      	nop
 8018f30:	20000cd4 	.word	0x20000cd4

08018f34 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8018f34:	b130      	cbz	r0, 8018f44 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
 8018f36:	4a04      	ldr	r2, [pc, #16]	; (8018f48 <next+0x14>)
 8018f38:	6852      	ldr	r2, [r2, #4]
 8018f3a:	4290      	cmp	r0, r2
 8018f3c:	d001      	beq.n	8018f42 <next+0xe>
 8018f3e:	6800      	ldr	r0, [r0, #0]
 8018f40:	4770      	bx	lr
 8018f42:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
 8018f44:	4770      	bx	lr
 8018f46:	bf00      	nop
 8018f48:	20000cd4 	.word	0x20000cd4

08018f4c <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
 8018f4c:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
 8018f4e:	4b04      	ldr	r3, [pc, #16]	; (8018f60 <elapsed+0x14>)
 8018f50:	681b      	ldr	r3, [r3, #0]
 8018f52:	b10b      	cbz	r3, 8018f58 <elapsed+0xc>
 8018f54:	2000      	movs	r0, #0
}
 8018f56:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
 8018f58:	f7f1 fafe 	bl	800a558 <z_clock_elapsed>
 8018f5c:	e7fb      	b.n	8018f56 <elapsed+0xa>
 8018f5e:	bf00      	nop
 8018f60:	20004720 	.word	0x20004720

08018f64 <next_timeout>:

static int32_t next_timeout(void)
{
 8018f64:	b510      	push	{r4, lr}
	struct _timeout *to = first();
 8018f66:	f7ff ffdb 	bl	8018f20 <first>
 8018f6a:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
 8018f6c:	f7ff ffee 	bl	8018f4c <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
 8018f70:	b184      	cbz	r4, 8018f94 <next_timeout+0x30>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
 8018f72:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8018f76:	1a12      	subs	r2, r2, r0
 8018f78:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
 8018f7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8018f80:	f173 0100 	sbcs.w	r1, r3, #0
 8018f84:	da09      	bge.n	8018f9a <next_timeout+0x36>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
 8018f86:	4610      	mov	r0, r2
 8018f88:	2a00      	cmp	r2, #0
 8018f8a:	f173 0300 	sbcs.w	r3, r3, #0
 8018f8e:	da06      	bge.n	8018f9e <next_timeout+0x3a>
 8018f90:	2000      	movs	r0, #0
 8018f92:	e004      	b.n	8018f9e <next_timeout+0x3a>
	int32_t ret = to == NULL ? MAX_WAIT
 8018f94:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8018f98:	e001      	b.n	8018f9e <next_timeout+0x3a>
 8018f9a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8018f9e:	4b03      	ldr	r3, [pc, #12]	; (8018fac <next_timeout+0x48>)
 8018fa0:	691b      	ldr	r3, [r3, #16]
 8018fa2:	b113      	cbz	r3, 8018faa <next_timeout+0x46>
 8018fa4:	4283      	cmp	r3, r0
 8018fa6:	da00      	bge.n	8018faa <next_timeout+0x46>
		ret = _current_cpu->slice_ticks;
 8018fa8:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
 8018faa:	bd10      	pop	{r4, pc}
 8018fac:	200046e8 	.word	0x200046e8

08018fb0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
 8018fb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fb4:	4680      	mov	r8, r0
 8018fb6:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8018fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018fbc:	bf08      	it	eq
 8018fbe:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8018fc2:	d07e      	beq.n	80190c2 <z_add_timeout+0x112>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
 8018fc4:	1c54      	adds	r4, r2, #1
 8018fc6:	f143 0500 	adc.w	r5, r3, #0

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
 8018fca:	f06f 0301 	mvn.w	r3, #1
 8018fce:	1b1e      	subs	r6, r3, r4
 8018fd0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8018fd4:	eb6a 0705 	sbc.w	r7, sl, r5
 8018fd8:	2e00      	cmp	r6, #0
 8018fda:	f177 0300 	sbcs.w	r3, r7, #0
 8018fde:	da11      	bge.n	8019004 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 8018fe0:	f8c8 9008 	str.w	r9, [r8, #8]
	ticks = MAX(1, ticks);
 8018fe4:	4626      	mov	r6, r4
 8018fe6:	462f      	mov	r7, r5
 8018fe8:	2c01      	cmp	r4, #1
 8018fea:	f175 0300 	sbcs.w	r3, r5, #0
 8018fee:	db1b      	blt.n	8019028 <z_add_timeout+0x78>

	LOCKED(&timeout_lock) {
 8018ff0:	2300      	movs	r3, #0
	__asm__ volatile(
 8018ff2:	f04f 0210 	mov.w	r2, #16
 8018ff6:	f3ef 8911 	mrs	r9, BASEPRI
 8018ffa:	f382 8811 	msr	BASEPRI, r2
 8018ffe:	f3bf 8f6f 	isb	sy
 8019002:	e02e      	b.n	8019062 <z_add_timeout+0xb2>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
 8019004:	f7ff ffa2 	bl	8018f4c <elapsed>
 8019008:	4b2f      	ldr	r3, [pc, #188]	; (80190c8 <z_add_timeout+0x118>)
 801900a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801900e:	1812      	adds	r2, r2, r0
 8019010:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 8019014:	4619      	mov	r1, r3
 8019016:	18a2      	adds	r2, r4, r2
 8019018:	eb45 0101 	adc.w	r1, r5, r1
 801901c:	f06f 0301 	mvn.w	r3, #1
 8019020:	1a9c      	subs	r4, r3, r2
 8019022:	eb6a 0501 	sbc.w	r5, sl, r1
 8019026:	e7db      	b.n	8018fe0 <z_add_timeout+0x30>
	ticks = MAX(1, ticks);
 8019028:	2601      	movs	r6, #1
 801902a:	2700      	movs	r7, #0
 801902c:	e7e0      	b.n	8018ff0 <z_add_timeout+0x40>
		struct _timeout *t;

		to->dticks = ticks + elapsed();
		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
 801902e:	ebb4 020a 	subs.w	r2, r4, sl
 8019032:	eb65 030b 	sbc.w	r3, r5, fp
 8019036:	6102      	str	r2, [r0, #16]
 8019038:	6143      	str	r3, [r0, #20]
	node->prev = successor->prev;
 801903a:	6843      	ldr	r3, [r0, #4]
 801903c:	f8c8 3004 	str.w	r3, [r8, #4]
	node->next = successor;
 8019040:	f8c8 0000 	str.w	r0, [r8]
	successor->prev->next = node;
 8019044:	6843      	ldr	r3, [r0, #4]
 8019046:	f8c3 8000 	str.w	r8, [r3]
	successor->prev = node;
 801904a:	f8c0 8004 	str.w	r8, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
 801904e:	b338      	cbz	r0, 80190a0 <z_add_timeout+0xf0>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8019050:	f7ff ff66 	bl	8018f20 <first>
 8019054:	4580      	cmp	r8, r0
 8019056:	d02e      	beq.n	80190b6 <z_add_timeout+0x106>
	__asm__ volatile(
 8019058:	f389 8811 	msr	BASEPRI, r9
 801905c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 8019060:	2301      	movs	r3, #1
 8019062:	bb73      	cbnz	r3, 80190c2 <z_add_timeout+0x112>
		to->dticks = ticks + elapsed();
 8019064:	f7ff ff72 	bl	8018f4c <elapsed>
 8019068:	1832      	adds	r2, r6, r0
 801906a:	eb47 73e0 	adc.w	r3, r7, r0, asr #31
 801906e:	e9c8 2304 	strd	r2, r3, [r8, #16]
		for (t = first(); t != NULL; t = next(t)) {
 8019072:	f7ff ff55 	bl	8018f20 <first>
 8019076:	2800      	cmp	r0, #0
 8019078:	d0e9      	beq.n	801904e <z_add_timeout+0x9e>
			if (t->dticks > to->dticks) {
 801907a:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 801907e:	e9d8 ab04 	ldrd	sl, fp, [r8, #16]
 8019082:	45a2      	cmp	sl, r4
 8019084:	eb7b 0305 	sbcs.w	r3, fp, r5
 8019088:	dbd1      	blt.n	801902e <z_add_timeout+0x7e>
			to->dticks -= t->dticks;
 801908a:	ebba 0204 	subs.w	r2, sl, r4
 801908e:	eb6b 0305 	sbc.w	r3, fp, r5
 8019092:	f8c8 2010 	str.w	r2, [r8, #16]
 8019096:	f8c8 3014 	str.w	r3, [r8, #20]
		for (t = first(); t != NULL; t = next(t)) {
 801909a:	f7ff ff4b 	bl	8018f34 <next>
 801909e:	e7ea      	b.n	8019076 <z_add_timeout+0xc6>
	node->next = list;
 80190a0:	4b0a      	ldr	r3, [pc, #40]	; (80190cc <z_add_timeout+0x11c>)
 80190a2:	f8c8 3000 	str.w	r3, [r8]
	node->prev = list->tail;
 80190a6:	685a      	ldr	r2, [r3, #4]
 80190a8:	f8c8 2004 	str.w	r2, [r8, #4]
	list->tail->next = node;
 80190ac:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
 80190b0:	f8c3 8004 	str.w	r8, [r3, #4]
}
 80190b4:	e7cc      	b.n	8019050 <z_add_timeout+0xa0>
			z_clock_set_timeout(next_timeout(), false);
 80190b6:	f7ff ff55 	bl	8018f64 <next_timeout>
 80190ba:	2100      	movs	r1, #0
 80190bc:	f7f1 f9d4 	bl	800a468 <z_clock_set_timeout>
 80190c0:	e7ca      	b.n	8019058 <z_add_timeout+0xa8>
		}
	}
}
 80190c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190c6:	bf00      	nop
 80190c8:	200033a0 	.word	0x200033a0
 80190cc:	20000cd4 	.word	0x20000cd4

080190d0 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
 80190d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80190d2:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 80190d4:	f7ff fb72 	bl	80187bc <z_time_slice>
	__asm__ volatile(
 80190d8:	f04f 0310 	mov.w	r3, #16
 80190dc:	f3ef 8511 	mrs	r5, BASEPRI
 80190e0:	f383 8811 	msr	BASEPRI, r3
 80190e4:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 80190e8:	4b28      	ldr	r3, [pc, #160]	; (801918c <z_clock_announce+0xbc>)
 80190ea:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
 80190ec:	f7ff ff18 	bl	8018f20 <first>
 80190f0:	4604      	mov	r4, r0
 80190f2:	b350      	cbz	r0, 801914a <z_clock_announce+0x7a>
 80190f4:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
 80190f8:	4b24      	ldr	r3, [pc, #144]	; (801918c <z_clock_announce+0xbc>)
 80190fa:	681b      	ldr	r3, [r3, #0]
 80190fc:	17d9      	asrs	r1, r3, #31
 80190fe:	42b3      	cmp	r3, r6
 8019100:	eb71 0207 	sbcs.w	r2, r1, r7
 8019104:	db21      	blt.n	801914a <z_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 8019106:	4a22      	ldr	r2, [pc, #136]	; (8019190 <z_clock_announce+0xc0>)
 8019108:	e9d2 0100 	ldrd	r0, r1, [r2]
 801910c:	1980      	adds	r0, r0, r6
 801910e:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
 8019112:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
 8019116:	1b9b      	subs	r3, r3, r6
 8019118:	4a1c      	ldr	r2, [pc, #112]	; (801918c <z_clock_announce+0xbc>)
 801911a:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
 801911c:	2200      	movs	r2, #0
 801911e:	2300      	movs	r3, #0
 8019120:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
 8019124:	4620      	mov	r0, r4
 8019126:	f009 f940 	bl	80223aa <remove_timeout>
	__asm__ volatile(
 801912a:	f385 8811 	msr	BASEPRI, r5
 801912e:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
 8019132:	68a3      	ldr	r3, [r4, #8]
 8019134:	4620      	mov	r0, r4
 8019136:	4798      	blx	r3
	__asm__ volatile(
 8019138:	f04f 0310 	mov.w	r3, #16
 801913c:	f3ef 8511 	mrs	r5, BASEPRI
 8019140:	f383 8811 	msr	BASEPRI, r3
 8019144:	f3bf 8f6f 	isb	sy
 8019148:	e7d0      	b.n	80190ec <z_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
 801914a:	b144      	cbz	r4, 801915e <z_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
 801914c:	4b0f      	ldr	r3, [pc, #60]	; (801918c <z_clock_announce+0xbc>)
 801914e:	6819      	ldr	r1, [r3, #0]
 8019150:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8019154:	1a52      	subs	r2, r2, r1
 8019156:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 801915a:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
 801915e:	480c      	ldr	r0, [pc, #48]	; (8019190 <z_clock_announce+0xc0>)
 8019160:	490a      	ldr	r1, [pc, #40]	; (801918c <z_clock_announce+0xbc>)
 8019162:	680c      	ldr	r4, [r1, #0]
 8019164:	e9d0 2300 	ldrd	r2, r3, [r0]
 8019168:	1912      	adds	r2, r2, r4
 801916a:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
 801916e:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
 8019172:	2400      	movs	r4, #0
 8019174:	600c      	str	r4, [r1, #0]

	z_clock_set_timeout(next_timeout(), false);
 8019176:	f7ff fef5 	bl	8018f64 <next_timeout>
 801917a:	4621      	mov	r1, r4
 801917c:	f7f1 f974 	bl	800a468 <z_clock_set_timeout>
	__asm__ volatile(
 8019180:	f385 8811 	msr	BASEPRI, r5
 8019184:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 8019188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801918a:	bf00      	nop
 801918c:	20004720 	.word	0x20004720
 8019190:	200033a0 	.word	0x200033a0

08019194 <z_tick_get>:

int64_t z_tick_get(void)
{
 8019194:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
 8019196:	2100      	movs	r1, #0
	__asm__ volatile(
 8019198:	f04f 0310 	mov.w	r3, #16
 801919c:	f3ef 8411 	mrs	r4, BASEPRI
 80191a0:	f383 8811 	msr	BASEPRI, r3
 80191a4:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
 80191a8:	2200      	movs	r2, #0
 80191aa:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
 80191ac:	b969      	cbnz	r1, 80191ca <z_tick_get+0x36>
		t = curr_tick + z_clock_elapsed();
 80191ae:	f7f1 f9d3 	bl	800a558 <z_clock_elapsed>
 80191b2:	4b07      	ldr	r3, [pc, #28]	; (80191d0 <z_tick_get+0x3c>)
 80191b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191b8:	1812      	adds	r2, r2, r0
 80191ba:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
 80191be:	f384 8811 	msr	BASEPRI, r4
 80191c2:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 80191c6:	2101      	movs	r1, #1
 80191c8:	e7f0      	b.n	80191ac <z_tick_get+0x18>
	}
	return t;
}
 80191ca:	4610      	mov	r0, r2
 80191cc:	4619      	mov	r1, r3
 80191ce:	bd10      	pop	{r4, pc}
 80191d0:	200033a0 	.word	0x200033a0

080191d4 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 80191d4:	b510      	push	{r4, lr}
 80191d6:	4604      	mov	r4, r0

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 80191d8:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 80191dc:	ea52 0103 	orrs.w	r1, r2, r3
 80191e0:	d005      	beq.n	80191ee <z_timer_expiration_handler+0x1a>
 80191e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80191e6:	bf08      	it	eq
 80191e8:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 80191ec:	d115      	bne.n	801921a <z_timer_expiration_handler+0x46>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
 80191ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80191f0:	3301      	adds	r3, #1
 80191f2:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 80191f4:	6a23      	ldr	r3, [r4, #32]
 80191f6:	b10b      	cbz	r3, 80191fc <z_timer_expiration_handler+0x28>
		timer->expiry_fn(timer);
 80191f8:	4620      	mov	r0, r4
 80191fa:	4798      	blx	r3
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 80191fc:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
 8019200:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8019202:	42a3      	cmp	r3, r4
 8019204:	d008      	beq.n	8019218 <z_timer_expiration_handler+0x44>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 8019206:	b13c      	cbz	r4, 8019218 <z_timer_expiration_handler+0x44>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
 8019208:	4620      	mov	r0, r4
 801920a:	f008 fec0 	bl	8021f8e <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
 801920e:	4620      	mov	r0, r4
 8019210:	f008 ff14 	bl	802203c <z_ready_thread>
 8019214:	2300      	movs	r3, #0
 8019216:	6723      	str	r3, [r4, #112]	; 0x70

	arch_thread_return_value_set(thread, 0);
}
 8019218:	bd10      	pop	{r4, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 801921a:	4902      	ldr	r1, [pc, #8]	; (8019224 <z_timer_expiration_handler+0x50>)
 801921c:	f7ff fec8 	bl	8018fb0 <z_add_timeout>
 8019220:	e7e5      	b.n	80191ee <z_timer_expiration_handler+0x1a>
 8019222:	bf00      	nop
 8019224:	080191d5 	.word	0x080191d5

08019228 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 8019228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801922c:	b087      	sub	sp, #28
 801922e:	4614      	mov	r4, r2
 8019230:	461d      	mov	r5, r3
 8019232:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 8019236:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801923a:	bf08      	it	eq
 801923c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8019240:	d02f      	beq.n	80192a2 <z_impl_k_timer_start+0x7a>
 8019242:	4606      	mov	r6, r0
 8019244:	4613      	mov	r3, r2
 8019246:	462a      	mov	r2, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
 8019248:	ea58 0109 	orrs.w	r1, r8, r9
 801924c:	d00f      	beq.n	801926e <z_impl_k_timer_start+0x46>
 801924e:	f06f 0001 	mvn.w	r0, #1
 8019252:	ebb0 0008 	subs.w	r0, r0, r8
 8019256:	9000      	str	r0, [sp, #0]
 8019258:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801925c:	eb61 0009 	sbc.w	r0, r1, r9
 8019260:	9001      	str	r0, [sp, #4]
 8019262:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019266:	2800      	cmp	r0, #0
 8019268:	f171 0100 	sbcs.w	r1, r1, #0
 801926c:	db1c      	blt.n	80192a8 <z_impl_k_timer_start+0x80>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 801926e:	f06f 0101 	mvn.w	r1, #1
 8019272:	ebb1 0a03 	subs.w	sl, r1, r3
 8019276:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801927a:	eb61 0b02 	sbc.w	fp, r1, r2
 801927e:	f1ba 0f00 	cmp.w	sl, #0
 8019282:	f17b 0100 	sbcs.w	r1, fp, #0
 8019286:	db23      	blt.n	80192d0 <z_impl_k_timer_start+0xa8>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
 8019288:	4630      	mov	r0, r6
 801928a:	f009 f8a6 	bl	80223da <z_abort_timeout>
	timer->period = period;
 801928e:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
	timer->status = 0U;
 8019292:	2300      	movs	r3, #0
 8019294:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8019296:	4622      	mov	r2, r4
 8019298:	462b      	mov	r3, r5
 801929a:	4917      	ldr	r1, [pc, #92]	; (80192f8 <z_impl_k_timer_start+0xd0>)
 801929c:	4630      	mov	r0, r6
 801929e:	f7ff fe87 	bl	8018fb0 <z_add_timeout>
		     duration);
}
 80192a2:	b007      	add	sp, #28
 80192a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		period.ticks = MAX(period.ticks - 1, 1);
 80192a8:	f118 31ff 	adds.w	r1, r8, #4294967295	; 0xffffffff
 80192ac:	9104      	str	r1, [sp, #16]
 80192ae:	f149 31ff 	adc.w	r1, r9, #4294967295	; 0xffffffff
 80192b2:	9105      	str	r1, [sp, #20]
 80192b4:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
 80192b8:	4638      	mov	r0, r7
 80192ba:	4641      	mov	r1, r8
 80192bc:	2f01      	cmp	r7, #1
 80192be:	f178 0700 	sbcs.w	r7, r8, #0
 80192c2:	db02      	blt.n	80192ca <z_impl_k_timer_start+0xa2>
 80192c4:	4680      	mov	r8, r0
 80192c6:	4689      	mov	r9, r1
 80192c8:	e7d1      	b.n	801926e <z_impl_k_timer_start+0x46>
 80192ca:	2001      	movs	r0, #1
 80192cc:	2100      	movs	r1, #0
 80192ce:	e7f9      	b.n	80192c4 <z_impl_k_timer_start+0x9c>
		duration.ticks = MAX(duration.ticks - 1, 0);
 80192d0:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80192d4:	9302      	str	r3, [sp, #8]
 80192d6:	f142 33ff 	adc.w	r3, r2, #4294967295	; 0xffffffff
 80192da:	9303      	str	r3, [sp, #12]
 80192dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80192e0:	4602      	mov	r2, r0
 80192e2:	460b      	mov	r3, r1
 80192e4:	2800      	cmp	r0, #0
 80192e6:	f171 0100 	sbcs.w	r1, r1, #0
 80192ea:	db02      	blt.n	80192f2 <z_impl_k_timer_start+0xca>
 80192ec:	4614      	mov	r4, r2
 80192ee:	461d      	mov	r5, r3
 80192f0:	e7ca      	b.n	8019288 <z_impl_k_timer_start+0x60>
 80192f2:	2200      	movs	r2, #0
 80192f4:	4613      	mov	r3, r2
 80192f6:	e7f9      	b.n	80192ec <z_impl_k_timer_start+0xc4>
 80192f8:	080191d5 	.word	0x080191d5

080192fc <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
 80192fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019300:	b08f      	sub	sp, #60	; 0x3c
 8019302:	4605      	mov	r5, r0
 8019304:	9106      	str	r1, [sp, #24]
 8019306:	4690      	mov	r8, r2
 8019308:	4699      	mov	r9, r3
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
 801930a:	2301      	movs	r3, #1
 801930c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
				  .thread     = _current,
 8019310:	4b9d      	ldr	r3, [pc, #628]	; (8019588 <z_impl_k_poll+0x28c>)
 8019312:	689b      	ldr	r3, [r3, #8]
	struct _poller poller = { .is_polling = true,
 8019314:	930c      	str	r3, [sp, #48]	; 0x30
 8019316:	4b9d      	ldr	r3, [pc, #628]	; (801958c <z_impl_k_poll+0x290>)
 8019318:	930d      	str	r3, [sp, #52]	; 0x34

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, &poller,
 801931a:	ea59 0302 	orrs.w	r3, r9, r2
 801931e:	bf0c      	ite	eq
 8019320:	2301      	moveq	r3, #1
 8019322:	2300      	movne	r3, #0
 8019324:	9303      	str	r3, [sp, #12]
	for (int ii = 0; ii < num_events; ii++) {
 8019326:	2700      	movs	r7, #0
	int events_registered = 0;
 8019328:	463e      	mov	r6, r7
 801932a:	e9cd 8904 	strd	r8, r9, [sp, #16]
	for (int ii = 0; ii < num_events; ii++) {
 801932e:	e01e      	b.n	801936e <z_impl_k_poll+0x72>
		if (k_sem_count_get(event->sem) > 0) {
 8019330:	6923      	ldr	r3, [r4, #16]
	return sem->count;
 8019332:	689b      	ldr	r3, [r3, #8]
 8019334:	2b00      	cmp	r3, #0
 8019336:	d036      	beq.n	80193a6 <z_impl_k_poll+0xaa>
			*state = K_POLL_STATE_SEM_AVAILABLE;
 8019338:	2302      	movs	r3, #2
 801933a:	9302      	str	r3, [sp, #8]
			return true;
 801933c:	2301      	movs	r3, #1
 801933e:	e032      	b.n	80193a6 <z_impl_k_poll+0xaa>
		if (!k_queue_is_empty(event->queue)) {
 8019340:	6923      	ldr	r3, [r4, #16]
	return list->head;
 8019342:	681b      	ldr	r3, [r3, #0]
 8019344:	b37b      	cbz	r3, 80193a6 <z_impl_k_poll+0xaa>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
 8019346:	2304      	movs	r3, #4
 8019348:	9302      	str	r3, [sp, #8]
			return true;
 801934a:	2301      	movs	r3, #1
 801934c:	e02b      	b.n	80193a6 <z_impl_k_poll+0xaa>
		if (event->signal->signaled != 0U) {
 801934e:	6923      	ldr	r3, [r4, #16]
 8019350:	689b      	ldr	r3, [r3, #8]
 8019352:	b343      	cbz	r3, 80193a6 <z_impl_k_poll+0xaa>
			*state = K_POLL_STATE_SIGNALED;
 8019354:	2301      	movs	r3, #1
 8019356:	9302      	str	r3, [sp, #8]
 8019358:	e025      	b.n	80193a6 <z_impl_k_poll+0xaa>
		} else if (!just_check && poller->is_polling) {
 801935a:	9b03      	ldr	r3, [sp, #12]
 801935c:	b913      	cbnz	r3, 8019364 <z_impl_k_poll+0x68>
 801935e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8019362:	bb7b      	cbnz	r3, 80193c4 <z_impl_k_poll+0xc8>
 8019364:	f38a 8811 	msr	BASEPRI, sl
 8019368:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
 801936c:	3701      	adds	r7, #1
 801936e:	9b06      	ldr	r3, [sp, #24]
 8019370:	42bb      	cmp	r3, r7
 8019372:	f340 8135 	ble.w	80195e0 <z_impl_k_poll+0x2e4>
	__asm__ volatile(
 8019376:	f04f 0310 	mov.w	r3, #16
 801937a:	f3ef 8a11 	mrs	sl, BASEPRI
 801937e:	f383 8811 	msr	BASEPRI, r3
 8019382:	f3bf 8f6f 	isb	sy
		if (is_condition_met(&events[ii], &state)) {
 8019386:	eb07 0487 	add.w	r4, r7, r7, lsl #2
 801938a:	ea4f 0984 	mov.w	r9, r4, lsl #2
 801938e:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	switch (event->type) {
 8019392:	7b63      	ldrb	r3, [r4, #13]
 8019394:	f003 030f 	and.w	r3, r3, #15
 8019398:	2b02      	cmp	r3, #2
 801939a:	d0c9      	beq.n	8019330 <z_impl_k_poll+0x34>
 801939c:	2b04      	cmp	r3, #4
 801939e:	d0cf      	beq.n	8019340 <z_impl_k_poll+0x44>
 80193a0:	2b01      	cmp	r3, #1
 80193a2:	d0d4      	beq.n	801934e <z_impl_k_poll+0x52>
 80193a4:	2300      	movs	r3, #0
		if (is_condition_met(&events[ii], &state)) {
 80193a6:	2b00      	cmp	r3, #0
 80193a8:	d0d7      	beq.n	801935a <z_impl_k_poll+0x5e>
	event->poller = NULL;
 80193aa:	2100      	movs	r1, #0
 80193ac:	60a1      	str	r1, [r4, #8]
	event->state |= state;
 80193ae:	68e3      	ldr	r3, [r4, #12]
 80193b0:	f3c3 3204 	ubfx	r2, r3, #12, #5
 80193b4:	9802      	ldr	r0, [sp, #8]
 80193b6:	4302      	orrs	r2, r0
 80193b8:	f362 3310 	bfi	r3, r2, #12, #5
 80193bc:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
 80193be:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 80193c2:	e7cf      	b.n	8019364 <z_impl_k_poll+0x68>
	switch (event->type) {
 80193c4:	7b63      	ldrb	r3, [r4, #13]
 80193c6:	f003 030f 	and.w	r3, r3, #15
 80193ca:	2b02      	cmp	r3, #2
 80193cc:	d008      	beq.n	80193e0 <z_impl_k_poll+0xe4>
 80193ce:	2b04      	cmp	r3, #4
 80193d0:	d05d      	beq.n	801948e <z_impl_k_poll+0x192>
 80193d2:	2b01      	cmp	r3, #1
 80193d4:	f000 80b2 	beq.w	801953c <z_impl_k_poll+0x240>
	event->poller = poller;
 80193d8:	ab0b      	add	r3, sp, #44	; 0x2c
 80193da:	60a3      	str	r3, [r4, #8]
				events_registered += 1;
 80193dc:	3601      	adds	r6, #1
 80193de:	e7c1      	b.n	8019364 <z_impl_k_poll+0x68>
		add_event(&event->sem->poll_events, event, poller);
 80193e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80193e4:	f10b 0210 	add.w	r2, fp, #16
 80193e8:	9207      	str	r2, [sp, #28]
	return list->head == list;
 80193ea:	f8db 3010 	ldr.w	r3, [fp, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 80193ee:	429a      	cmp	r2, r3
 80193f0:	d023      	beq.n	801943a <z_impl_k_poll+0x13e>
 80193f2:	f8db 3014 	ldr.w	r3, [fp, #20]
	if ((pending == NULL) ||
 80193f6:	b303      	cbz	r3, 801943a <z_impl_k_poll+0x13e>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
 80193f8:	689b      	ldr	r3, [r3, #8]
 80193fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80193fc:	6858      	ldr	r0, [r3, #4]
 80193fe:	f008 fda5 	bl	8021f4c <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
 8019402:	b9d0      	cbnz	r0, 801943a <z_impl_k_poll+0x13e>
	return list->head == list;
 8019404:	f8db b010 	ldr.w	fp, [fp, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8019408:	9b07      	ldr	r3, [sp, #28]
 801940a:	455b      	cmp	r3, fp
 801940c:	d02a      	beq.n	8019464 <z_impl_k_poll+0x168>
 801940e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8019412:	465b      	mov	r3, fp
 8019414:	46a3      	mov	fp, r4
 8019416:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8019418:	b364      	cbz	r4, 8019474 <z_impl_k_poll+0x178>
						pending->poller->thread)) {
 801941a:	68a3      	ldr	r3, [r4, #8]
		if (z_is_t1_higher_prio_than_t2(poller->thread,
 801941c:	6859      	ldr	r1, [r3, #4]
 801941e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8019420:	f008 fd94 	bl	8021f4c <z_is_t1_higher_prio_than_t2>
 8019424:	b988      	cbnz	r0, 801944a <z_impl_k_poll+0x14e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8019426:	b33c      	cbz	r4, 8019478 <z_impl_k_poll+0x17c>
	return (node == list->tail) ? NULL : node->next;
 8019428:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801942c:	429c      	cmp	r4, r3
 801942e:	d02c      	beq.n	801948a <z_impl_k_poll+0x18e>
 8019430:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8019432:	2c00      	cmp	r4, #0
 8019434:	d1f0      	bne.n	8019418 <z_impl_k_poll+0x11c>
 8019436:	465c      	mov	r4, fp
 8019438:	e01f      	b.n	801947a <z_impl_k_poll+0x17e>
	node->next = list;
 801943a:	9a07      	ldr	r2, [sp, #28]
 801943c:	f845 2009 	str.w	r2, [r5, r9]
	node->prev = list->tail;
 8019440:	6853      	ldr	r3, [r2, #4]
 8019442:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
 8019444:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8019446:	6054      	str	r4, [r2, #4]
		return;
 8019448:	e7c6      	b.n	80193d8 <z_impl_k_poll+0xdc>
 801944a:	4623      	mov	r3, r4
 801944c:	465c      	mov	r4, fp
 801944e:	469b      	mov	fp, r3
	node->prev = successor->prev;
 8019450:	685b      	ldr	r3, [r3, #4]
 8019452:	6063      	str	r3, [r4, #4]
	node->next = successor;
 8019454:	f845 b009 	str.w	fp, [r5, r9]
	successor->prev->next = node;
 8019458:	f8db 3004 	ldr.w	r3, [fp, #4]
 801945c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 801945e:	f8cb 4004 	str.w	r4, [fp, #4]
			return;
 8019462:	e7b9      	b.n	80193d8 <z_impl_k_poll+0xdc>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8019464:	f04f 0b00 	mov.w	fp, #0
 8019468:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801946c:	465b      	mov	r3, fp
 801946e:	46a3      	mov	fp, r4
 8019470:	461c      	mov	r4, r3
 8019472:	e7d1      	b.n	8019418 <z_impl_k_poll+0x11c>
 8019474:	465c      	mov	r4, fp
 8019476:	e000      	b.n	801947a <z_impl_k_poll+0x17e>
 8019478:	465c      	mov	r4, fp
	node->next = list;
 801947a:	9a07      	ldr	r2, [sp, #28]
 801947c:	f845 2009 	str.w	r2, [r5, r9]
	node->prev = list->tail;
 8019480:	6853      	ldr	r3, [r2, #4]
 8019482:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
 8019484:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8019486:	6054      	str	r4, [r2, #4]
}
 8019488:	e7a6      	b.n	80193d8 <z_impl_k_poll+0xdc>
 801948a:	465c      	mov	r4, fp
 801948c:	e7f5      	b.n	801947a <z_impl_k_poll+0x17e>
		add_event(&event->queue->poll_events, event, poller);
 801948e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8019492:	f10b 0210 	add.w	r2, fp, #16
 8019496:	9207      	str	r2, [sp, #28]
	return list->head == list;
 8019498:	f8db 3010 	ldr.w	r3, [fp, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 801949c:	429a      	cmp	r2, r3
 801949e:	d023      	beq.n	80194e8 <z_impl_k_poll+0x1ec>
 80194a0:	f8db 3014 	ldr.w	r3, [fp, #20]
	if ((pending == NULL) ||
 80194a4:	b303      	cbz	r3, 80194e8 <z_impl_k_poll+0x1ec>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
 80194a6:	689b      	ldr	r3, [r3, #8]
 80194a8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80194aa:	6858      	ldr	r0, [r3, #4]
 80194ac:	f008 fd4e 	bl	8021f4c <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
 80194b0:	b9d0      	cbnz	r0, 80194e8 <z_impl_k_poll+0x1ec>
	return list->head == list;
 80194b2:	f8db b010 	ldr.w	fp, [fp, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80194b6:	9b07      	ldr	r3, [sp, #28]
 80194b8:	455b      	cmp	r3, fp
 80194ba:	d02a      	beq.n	8019512 <z_impl_k_poll+0x216>
 80194bc:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80194c0:	465b      	mov	r3, fp
 80194c2:	46a3      	mov	fp, r4
 80194c4:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 80194c6:	b364      	cbz	r4, 8019522 <z_impl_k_poll+0x226>
						pending->poller->thread)) {
 80194c8:	68a3      	ldr	r3, [r4, #8]
		if (z_is_t1_higher_prio_than_t2(poller->thread,
 80194ca:	6859      	ldr	r1, [r3, #4]
 80194cc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80194ce:	f008 fd3d 	bl	8021f4c <z_is_t1_higher_prio_than_t2>
 80194d2:	b988      	cbnz	r0, 80194f8 <z_impl_k_poll+0x1fc>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80194d4:	b33c      	cbz	r4, 8019526 <z_impl_k_poll+0x22a>
	return (node == list->tail) ? NULL : node->next;
 80194d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80194da:	429c      	cmp	r4, r3
 80194dc:	d02c      	beq.n	8019538 <z_impl_k_poll+0x23c>
 80194de:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 80194e0:	2c00      	cmp	r4, #0
 80194e2:	d1f0      	bne.n	80194c6 <z_impl_k_poll+0x1ca>
 80194e4:	465c      	mov	r4, fp
 80194e6:	e01f      	b.n	8019528 <z_impl_k_poll+0x22c>
	node->next = list;
 80194e8:	9a07      	ldr	r2, [sp, #28]
 80194ea:	f845 2009 	str.w	r2, [r5, r9]
	node->prev = list->tail;
 80194ee:	6853      	ldr	r3, [r2, #4]
 80194f0:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
 80194f2:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80194f4:	6054      	str	r4, [r2, #4]
		return;
 80194f6:	e76f      	b.n	80193d8 <z_impl_k_poll+0xdc>
 80194f8:	4623      	mov	r3, r4
 80194fa:	465c      	mov	r4, fp
 80194fc:	469b      	mov	fp, r3
	node->prev = successor->prev;
 80194fe:	685b      	ldr	r3, [r3, #4]
 8019500:	6063      	str	r3, [r4, #4]
	node->next = successor;
 8019502:	f845 b009 	str.w	fp, [r5, r9]
	successor->prev->next = node;
 8019506:	f8db 3004 	ldr.w	r3, [fp, #4]
 801950a:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 801950c:	f8cb 4004 	str.w	r4, [fp, #4]
			return;
 8019510:	e762      	b.n	80193d8 <z_impl_k_poll+0xdc>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8019512:	f04f 0b00 	mov.w	fp, #0
 8019516:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801951a:	465b      	mov	r3, fp
 801951c:	46a3      	mov	fp, r4
 801951e:	461c      	mov	r4, r3
 8019520:	e7d1      	b.n	80194c6 <z_impl_k_poll+0x1ca>
 8019522:	465c      	mov	r4, fp
 8019524:	e000      	b.n	8019528 <z_impl_k_poll+0x22c>
 8019526:	465c      	mov	r4, fp
	node->next = list;
 8019528:	9a07      	ldr	r2, [sp, #28]
 801952a:	f845 2009 	str.w	r2, [r5, r9]
	node->prev = list->tail;
 801952e:	6853      	ldr	r3, [r2, #4]
 8019530:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
 8019532:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8019534:	6054      	str	r4, [r2, #4]
}
 8019536:	e74f      	b.n	80193d8 <z_impl_k_poll+0xdc>
 8019538:	465c      	mov	r4, fp
 801953a:	e7f5      	b.n	8019528 <z_impl_k_poll+0x22c>
		add_event(&event->signal->poll_events, event, poller);
 801953c:	f8d4 b010 	ldr.w	fp, [r4, #16]
	return list->head == list;
 8019540:	f8db 3000 	ldr.w	r3, [fp]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 8019544:	459b      	cmp	fp, r3
 8019546:	d023      	beq.n	8019590 <z_impl_k_poll+0x294>
 8019548:	f8db 3004 	ldr.w	r3, [fp, #4]
	if ((pending == NULL) ||
 801954c:	b303      	cbz	r3, 8019590 <z_impl_k_poll+0x294>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
 801954e:	689b      	ldr	r3, [r3, #8]
 8019550:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019552:	6858      	ldr	r0, [r3, #4]
 8019554:	f008 fcfa 	bl	8021f4c <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
 8019558:	b9d0      	cbnz	r0, 8019590 <z_impl_k_poll+0x294>
	return list->head == list;
 801955a:	f8db 3000 	ldr.w	r3, [fp]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 801955e:	459b      	cmp	fp, r3
 8019560:	d02c      	beq.n	80195bc <z_impl_k_poll+0x2c0>
 8019562:	46a0      	mov	r8, r4
 8019564:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8019566:	b36c      	cbz	r4, 80195c4 <z_impl_k_poll+0x2c8>
						pending->poller->thread)) {
 8019568:	68a3      	ldr	r3, [r4, #8]
		if (z_is_t1_higher_prio_than_t2(poller->thread,
 801956a:	6859      	ldr	r1, [r3, #4]
 801956c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801956e:	f008 fced 	bl	8021f4c <z_is_t1_higher_prio_than_t2>
 8019572:	b9b0      	cbnz	r0, 80195a2 <z_impl_k_poll+0x2a6>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8019574:	b344      	cbz	r4, 80195c8 <z_impl_k_poll+0x2cc>
	return (node == list->tail) ? NULL : node->next;
 8019576:	f8db 3004 	ldr.w	r3, [fp, #4]
 801957a:	429c      	cmp	r4, r3
 801957c:	d02e      	beq.n	80195dc <z_impl_k_poll+0x2e0>
 801957e:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8019580:	2c00      	cmp	r4, #0
 8019582:	d1f0      	bne.n	8019566 <z_impl_k_poll+0x26a>
 8019584:	4644      	mov	r4, r8
 8019586:	e020      	b.n	80195ca <z_impl_k_poll+0x2ce>
 8019588:	200046e8 	.word	0x200046e8
 801958c:	08022595 	.word	0x08022595
	node->next = list;
 8019590:	f845 b009 	str.w	fp, [r5, r9]
	node->prev = list->tail;
 8019594:	f8db 3004 	ldr.w	r3, [fp, #4]
 8019598:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
 801959a:	601c      	str	r4, [r3, #0]
	list->tail = node;
 801959c:	f8cb 4004 	str.w	r4, [fp, #4]
		return;
 80195a0:	e71a      	b.n	80193d8 <z_impl_k_poll+0xdc>
 80195a2:	4622      	mov	r2, r4
 80195a4:	4644      	mov	r4, r8
	node->prev = successor->prev;
 80195a6:	6853      	ldr	r3, [r2, #4]
 80195a8:	f8c8 3004 	str.w	r3, [r8, #4]
	node->next = successor;
 80195ac:	f845 2009 	str.w	r2, [r5, r9]
	successor->prev->next = node;
 80195b0:	6853      	ldr	r3, [r2, #4]
 80195b2:	f8c3 8000 	str.w	r8, [r3]
	successor->prev = node;
 80195b6:	f8c2 8004 	str.w	r8, [r2, #4]
			return;
 80195ba:	e70d      	b.n	80193d8 <z_impl_k_poll+0xdc>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 80195bc:	2300      	movs	r3, #0
 80195be:	46a0      	mov	r8, r4
 80195c0:	461c      	mov	r4, r3
 80195c2:	e7d0      	b.n	8019566 <z_impl_k_poll+0x26a>
 80195c4:	4644      	mov	r4, r8
 80195c6:	e000      	b.n	80195ca <z_impl_k_poll+0x2ce>
 80195c8:	4644      	mov	r4, r8
	node->next = list;
 80195ca:	f845 b009 	str.w	fp, [r5, r9]
	node->prev = list->tail;
 80195ce:	f8db 3004 	ldr.w	r3, [fp, #4]
 80195d2:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
 80195d4:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80195d6:	f8cb 4004 	str.w	r4, [fp, #4]
}
 80195da:	e6fd      	b.n	80193d8 <z_impl_k_poll+0xdc>
 80195dc:	4644      	mov	r4, r8
 80195de:	e7f4      	b.n	80195ca <z_impl_k_poll+0x2ce>
 80195e0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80195e4:	f04f 0310 	mov.w	r3, #16
 80195e8:	f3ef 8111 	mrs	r1, BASEPRI
 80195ec:	f383 8811 	msr	BASEPRI, r3
 80195f0:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
 80195f4:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80195f8:	b1bb      	cbz	r3, 801962a <z_impl_k_poll+0x32e>
		clear_event_registrations(events, events_registered, key);
		k_spin_unlock(&lock, key);
		return 0;
	}

	poller.is_polling = false;
 80195fa:	2300      	movs	r3, #0
 80195fc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8019600:	ea58 0309 	orrs.w	r3, r8, r9
 8019604:	d045      	beq.n	8019692 <z_impl_k_poll+0x396>
		k_spin_unlock(&lock, key);
		return -EAGAIN;
	}

	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
 8019606:	aa09      	add	r2, sp, #36	; 0x24
 8019608:	9209      	str	r2, [sp, #36]	; 0x24
 801960a:	920a      	str	r2, [sp, #40]	; 0x28

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
 801960c:	e9cd 8900 	strd	r8, r9, [sp]
 8019610:	483e      	ldr	r0, [pc, #248]	; (801970c <z_impl_k_poll+0x410>)
 8019612:	f7ff f9ed 	bl	80189f0 <z_pend_curr>
 8019616:	f04f 0310 	mov.w	r3, #16
 801961a:	f3ef 8711 	mrs	r7, BASEPRI
 801961e:	f383 8811 	msr	BASEPRI, r3
 8019622:	f3bf 8f6f 	isb	sy
 8019626:	4639      	mov	r1, r7
	while (num_events--) {
 8019628:	e049      	b.n	80196be <z_impl_k_poll+0x3c2>
		clear_event_registrations(events, events_registered, key);
 801962a:	460c      	mov	r4, r1
	while (num_events--) {
 801962c:	e00e      	b.n	801964c <z_impl_k_poll+0x350>
	switch (event->type) {
 801962e:	b240      	sxtb	r0, r0
 8019630:	b9f0      	cbnz	r0, 8019670 <z_impl_k_poll+0x374>
	__asm__ volatile(
 8019632:	f384 8811 	msr	BASEPRI, r4
 8019636:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 801963a:	f04f 0310 	mov.w	r3, #16
 801963e:	f3ef 8411 	mrs	r4, BASEPRI
 8019642:	f383 8811 	msr	BASEPRI, r3
 8019646:	f3bf 8f6f 	isb	sy
	while (num_events--) {
 801964a:	463e      	mov	r6, r7
 801964c:	1e77      	subs	r7, r6, #1
 801964e:	b1d6      	cbz	r6, 8019686 <z_impl_k_poll+0x38a>
		clear_event_registration(&events[num_events]);
 8019650:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 8019654:	009e      	lsls	r6, r3, #2
 8019656:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
 801965a:	2200      	movs	r2, #0
 801965c:	609a      	str	r2, [r3, #8]
	switch (event->type) {
 801965e:	7b5a      	ldrb	r2, [r3, #13]
 8019660:	f3c2 0003 	ubfx	r0, r2, #0, #4
 8019664:	f002 020f 	and.w	r2, r2, #15
 8019668:	2a02      	cmp	r2, #2
 801966a:	d9e0      	bls.n	801962e <z_impl_k_poll+0x332>
 801966c:	2a04      	cmp	r2, #4
 801966e:	d1e0      	bne.n	8019632 <z_impl_k_poll+0x336>
	return node->next != NULL;
 8019670:	59aa      	ldr	r2, [r5, r6]
	if (remove && sys_dnode_is_linked(&event->_node)) {
 8019672:	2a00      	cmp	r2, #0
 8019674:	d0dd      	beq.n	8019632 <z_impl_k_poll+0x336>
	node->prev->next = node->next;
 8019676:	6858      	ldr	r0, [r3, #4]
 8019678:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
 801967a:	6858      	ldr	r0, [r3, #4]
 801967c:	6050      	str	r0, [r2, #4]
	node->next = NULL;
 801967e:	2200      	movs	r2, #0
 8019680:	51aa      	str	r2, [r5, r6]
	node->prev = NULL;
 8019682:	605a      	str	r2, [r3, #4]
	sys_dnode_init(node);
}
 8019684:	e7d5      	b.n	8019632 <z_impl_k_poll+0x336>
	__asm__ volatile(
 8019686:	f381 8811 	msr	BASEPRI, r1
 801968a:	f3bf 8f6f 	isb	sy
		return 0;
 801968e:	4630      	mov	r0, r6
 8019690:	e039      	b.n	8019706 <z_impl_k_poll+0x40a>
 8019692:	f381 8811 	msr	BASEPRI, r1
 8019696:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
 801969a:	f06f 000a 	mvn.w	r0, #10
 801969e:	e032      	b.n	8019706 <z_impl_k_poll+0x40a>
	switch (event->type) {
 80196a0:	b276      	sxtb	r6, r6
 80196a2:	b9fe      	cbnz	r6, 80196e4 <z_impl_k_poll+0x3e8>
 80196a4:	f381 8811 	msr	BASEPRI, r1
 80196a8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 80196ac:	f04f 0310 	mov.w	r3, #16
 80196b0:	f3ef 8111 	mrs	r1, BASEPRI
 80196b4:	f383 8811 	msr	BASEPRI, r3
 80196b8:	f3bf 8f6f 	isb	sy
	while (num_events--) {
 80196bc:	4626      	mov	r6, r4
 80196be:	1e74      	subs	r4, r6, #1
 80196c0:	b1ee      	cbz	r6, 80196fe <z_impl_k_poll+0x402>
		clear_event_registration(&events[num_events]);
 80196c2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80196c6:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 80196ca:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
 80196ce:	2200      	movs	r2, #0
 80196d0:	609a      	str	r2, [r3, #8]
	switch (event->type) {
 80196d2:	7b5a      	ldrb	r2, [r3, #13]
 80196d4:	f3c2 0603 	ubfx	r6, r2, #0, #4
 80196d8:	f002 020f 	and.w	r2, r2, #15
 80196dc:	2a02      	cmp	r2, #2
 80196de:	d9df      	bls.n	80196a0 <z_impl_k_poll+0x3a4>
 80196e0:	2a04      	cmp	r2, #4
 80196e2:	d1df      	bne.n	80196a4 <z_impl_k_poll+0x3a8>
	return node->next != NULL;
 80196e4:	f855 200c 	ldr.w	r2, [r5, ip]
	if (remove && sys_dnode_is_linked(&event->_node)) {
 80196e8:	2a00      	cmp	r2, #0
 80196ea:	d0db      	beq.n	80196a4 <z_impl_k_poll+0x3a8>
	node->prev->next = node->next;
 80196ec:	685e      	ldr	r6, [r3, #4]
 80196ee:	6032      	str	r2, [r6, #0]
	node->next->prev = node->prev;
 80196f0:	685e      	ldr	r6, [r3, #4]
 80196f2:	6056      	str	r6, [r2, #4]
	node->next = NULL;
 80196f4:	2200      	movs	r2, #0
 80196f6:	f845 200c 	str.w	r2, [r5, ip]
	node->prev = NULL;
 80196fa:	605a      	str	r2, [r3, #4]
}
 80196fc:	e7d2      	b.n	80196a4 <z_impl_k_poll+0x3a8>
	__asm__ volatile(
 80196fe:	f387 8811 	msr	BASEPRI, r7
 8019702:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
 8019706:	b00f      	add	sp, #60	; 0x3c
 8019708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801970c:	20004724 	.word	0x20004724

08019710 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
 8019710:	b538      	push	{r3, r4, r5, lr}
 8019712:	4603      	mov	r3, r0
	__asm__ volatile(
 8019714:	f04f 0210 	mov.w	r2, #16
 8019718:	f3ef 8511 	mrs	r5, BASEPRI
 801971c:	f382 8811 	msr	BASEPRI, r2
 8019720:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
 8019724:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
 8019726:	2201      	movs	r2, #1
 8019728:	6082      	str	r2, [r0, #8]
	return list->head == list;
 801972a:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
 801972c:	4283      	cmp	r3, r0
 801972e:	d012      	beq.n	8019756 <z_impl_k_poll_signal_raise+0x46>
	node->prev->next = node->next;
 8019730:	6842      	ldr	r2, [r0, #4]
 8019732:	6803      	ldr	r3, [r0, #0]
 8019734:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 8019736:	6842      	ldr	r2, [r0, #4]
 8019738:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 801973a:	2300      	movs	r3, #0
 801973c:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 801973e:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
 8019740:	b148      	cbz	r0, 8019756 <z_impl_k_poll_signal_raise+0x46>
		k_spin_unlock(&lock, key);
		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 8019742:	2101      	movs	r1, #1
 8019744:	f008 ff0b 	bl	802255e <signal_poll_event>
 8019748:	4604      	mov	r4, r0

	z_reschedule(&lock, key);
 801974a:	4629      	mov	r1, r5
 801974c:	4805      	ldr	r0, [pc, #20]	; (8019764 <z_impl_k_poll_signal_raise+0x54>)
 801974e:	f7fe ff01 	bl	8018554 <z_reschedule>
	return rc;
}
 8019752:	4620      	mov	r0, r4
 8019754:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 8019756:	f385 8811 	msr	BASEPRI, r5
 801975a:	f3bf 8f6f 	isb	sy
		return 0;
 801975e:	2400      	movs	r4, #0
 8019760:	e7f7      	b.n	8019752 <z_impl_k_poll_signal_raise+0x42>
 8019762:	bf00      	nop
 8019764:	20004724 	.word	0x20004724

08019768 <k_malloc>:
K_MEM_POOL_DEFINE(_heap_mem_pool, CONFIG_HEAP_MEM_POOL_MIN_SIZE,
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
 8019768:	b508      	push	{r3, lr}
 801976a:	4601      	mov	r1, r0
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
 801976c:	4801      	ldr	r0, [pc, #4]	; (8019774 <k_malloc+0xc>)
 801976e:	f008 ff6d 	bl	802264c <k_mem_pool_malloc>
}
 8019772:	bd08      	pop	{r3, pc}
 8019774:	20000cdc 	.word	0x20000cdc

08019778 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
 8019778:	b510      	push	{r4, lr}
 801977a:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
 801977c:	f008 fd52 	bl	8022224 <k_is_in_isr>
 8019780:	b938      	cbnz	r0, 8019792 <z_thread_malloc+0x1a>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
 8019782:	4b05      	ldr	r3, [pc, #20]	; (8019798 <z_thread_malloc+0x20>)
 8019784:	689b      	ldr	r3, [r3, #8]
 8019786:	6e98      	ldr	r0, [r3, #104]	; 0x68
	}

	if (pool) {
 8019788:	b110      	cbz	r0, 8019790 <z_thread_malloc+0x18>
		ret = k_mem_pool_malloc(pool, size);
 801978a:	4621      	mov	r1, r4
 801978c:	f008 ff5e 	bl	802264c <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
 8019790:	bd10      	pop	{r4, pc}
		pool = _HEAP_MEM_POOL;
 8019792:	4802      	ldr	r0, [pc, #8]	; (801979c <z_thread_malloc+0x24>)
 8019794:	e7f8      	b.n	8019788 <z_thread_malloc+0x10>
 8019796:	bf00      	nop
 8019798:	200046e8 	.word	0x200046e8
 801979c:	20000cdc 	.word	0x20000cdc

080197a0 <zmk_hid_register_mods>:
int zmk_hid_register_mods(zmk_mod_flags_t modifiers) {
 80197a0:	b538      	push	{r3, r4, r5, lr}
 80197a2:	4605      	mov	r5, r0
    for (zmk_mod_t i = 0; i < 8; i++) {
 80197a4:	2400      	movs	r4, #0
 80197a6:	e004      	b.n	80197b2 <zmk_hid_register_mods+0x12>
            zmk_hid_register_mod(i);
 80197a8:	4620      	mov	r0, r4
 80197aa:	f7e6 ff9f 	bl	80006ec <zmk_hid_register_mod>
    for (zmk_mod_t i = 0; i < 8; i++) {
 80197ae:	3401      	adds	r4, #1
 80197b0:	b2e4      	uxtb	r4, r4
 80197b2:	2c07      	cmp	r4, #7
 80197b4:	d805      	bhi.n	80197c2 <zmk_hid_register_mods+0x22>
        if (modifiers & (1 << i)) {
 80197b6:	fa45 f304 	asr.w	r3, r5, r4
 80197ba:	f013 0f01 	tst.w	r3, #1
 80197be:	d0f6      	beq.n	80197ae <zmk_hid_register_mods+0xe>
 80197c0:	e7f2      	b.n	80197a8 <zmk_hid_register_mods+0x8>
}
 80197c2:	2000      	movs	r0, #0
 80197c4:	bd38      	pop	{r3, r4, r5, pc}

080197c6 <zmk_hid_unregister_mods>:
int zmk_hid_unregister_mods(zmk_mod_flags_t modifiers) {
 80197c6:	b538      	push	{r3, r4, r5, lr}
 80197c8:	4605      	mov	r5, r0
    for (zmk_mod_t i = 0; i < 8; i++) {
 80197ca:	2400      	movs	r4, #0
 80197cc:	e004      	b.n	80197d8 <zmk_hid_unregister_mods+0x12>
            zmk_hid_unregister_mod(i);
 80197ce:	4620      	mov	r0, r4
 80197d0:	f7e6 ffd4 	bl	800077c <zmk_hid_unregister_mod>
    for (zmk_mod_t i = 0; i < 8; i++) {
 80197d4:	3401      	adds	r4, #1
 80197d6:	b2e4      	uxtb	r4, r4
 80197d8:	2c07      	cmp	r4, #7
 80197da:	d805      	bhi.n	80197e8 <zmk_hid_unregister_mods+0x22>
        if (modifiers & (1 << i)) {
 80197dc:	fa45 f304 	asr.w	r3, r5, r4
 80197e0:	f013 0f01 	tst.w	r3, #1
 80197e4:	d0f6      	beq.n	80197d4 <zmk_hid_unregister_mods+0xe>
 80197e6:	e7f2      	b.n	80197ce <zmk_hid_unregister_mods+0x8>
}
 80197e8:	2000      	movs	r0, #0
 80197ea:	bd38      	pop	{r3, r4, r5, pc}

080197ec <zmk_event_manager_raise>:
int zmk_event_manager_raise(zmk_event_t *event) { return zmk_event_manager_handle_from(event, 0); }
 80197ec:	b508      	push	{r3, lr}
 80197ee:	2100      	movs	r1, #0
 80197f0:	f7e7 f91a 	bl	8000a28 <zmk_event_manager_handle_from>
 80197f4:	bd08      	pop	{r3, pc}

080197f6 <behavior_key_press_init>:
static int behavior_key_press_init(const struct device *dev) { return 0; };
 80197f6:	2000      	movs	r0, #0
 80197f8:	4770      	bx	lr

080197fa <behavior_reset_init>:

struct behavior_reset_config {
    int type;
};

static int behavior_reset_init(const struct device *dev) { return 0; };
 80197fa:	2000      	movs	r0, #0
 80197fc:	4770      	bx	lr

080197fe <on_keymap_binding_pressed>:

static int on_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                     struct zmk_behavior_binding_event event) {
 80197fe:	b082      	sub	sp, #8
 8019800:	b508      	push	{r3, lr}
 8019802:	a902      	add	r1, sp, #8
 8019804:	e881 000c 	stmia.w	r1, {r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
 8019808:	6800      	ldr	r0, [r0, #0]
 801980a:	f7fe fa21 	bl	8017c50 <z_impl_device_get_binding>
    const struct behavior_reset_config *cfg = dev->config;
 801980e:	6843      	ldr	r3, [r0, #4]

    // TODO: Correct magic code for going into DFU?
    // See
    // https://github.com/adafruit/Adafruit_nRF52_Bootloader/blob/d6b28e66053eea467166f44875e3c7ec741cb471/src/main.c#L107
    sys_reboot(cfg->type);
 8019810:	6818      	ldr	r0, [r3, #0]
 8019812:	f7ef f96f 	bl	8008af4 <sys_reboot>
    return ZMK_BEHAVIOR_OPAQUE;
}
 8019816:	2000      	movs	r0, #0
 8019818:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801981c:	b002      	add	sp, #8
 801981e:	4770      	bx	lr

08019820 <clear_hold_tap>:
    hold_tap->position = ZMK_BHV_HOLD_TAP_POSITION_NOT_USED;
 8019820:	f242 730f 	movw	r3, #9999	; 0x270f
 8019824:	6003      	str	r3, [r0, #0]
    hold_tap->is_decided = false;
 8019826:	2300      	movs	r3, #0
 8019828:	7603      	strb	r3, [r0, #24]
    hold_tap->is_hold = false;
 801982a:	7643      	strb	r3, [r0, #25]
    hold_tap->work_is_cancelled = false;
 801982c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
}
 8019830:	4770      	bx	lr

08019832 <decide_balanced>:
    switch (event) {
 8019832:	b141      	cbz	r1, 8019846 <decide_balanced+0x14>
 8019834:	1e8b      	subs	r3, r1, #2
 8019836:	b2db      	uxtb	r3, r3
 8019838:	2b01      	cmp	r3, #1
 801983a:	d803      	bhi.n	8019844 <decide_balanced+0x12>
        hold_tap->is_hold = 1;
 801983c:	2301      	movs	r3, #1
 801983e:	7643      	strb	r3, [r0, #25]
        hold_tap->is_decided = true;
 8019840:	7603      	strb	r3, [r0, #24]
}
 8019842:	4770      	bx	lr
 8019844:	4770      	bx	lr
        hold_tap->is_hold = 0;
 8019846:	2300      	movs	r3, #0
 8019848:	7643      	strb	r3, [r0, #25]
        hold_tap->is_decided = true;
 801984a:	2301      	movs	r3, #1
 801984c:	7603      	strb	r3, [r0, #24]
        break;
 801984e:	4770      	bx	lr

08019850 <decide_tap_preferred>:
    switch (event) {
 8019850:	b111      	cbz	r1, 8019858 <decide_tap_preferred+0x8>
 8019852:	2903      	cmp	r1, #3
 8019854:	d005      	beq.n	8019862 <decide_tap_preferred+0x12>
 8019856:	4770      	bx	lr
        hold_tap->is_hold = 0;
 8019858:	2300      	movs	r3, #0
 801985a:	7643      	strb	r3, [r0, #25]
        hold_tap->is_decided = true;
 801985c:	2301      	movs	r3, #1
 801985e:	7603      	strb	r3, [r0, #24]
        break;
 8019860:	4770      	bx	lr
        hold_tap->is_hold = 1;
 8019862:	2301      	movs	r3, #1
 8019864:	7643      	strb	r3, [r0, #25]
        hold_tap->is_decided = true;
 8019866:	7603      	strb	r3, [r0, #24]
}
 8019868:	4770      	bx	lr

0801986a <decide_hold_preferred>:
    switch (event) {
 801986a:	2901      	cmp	r1, #1
 801986c:	d008      	beq.n	8019880 <decide_hold_preferred+0x16>
 801986e:	2903      	cmp	r1, #3
 8019870:	d006      	beq.n	8019880 <decide_hold_preferred+0x16>
 8019872:	b101      	cbz	r1, 8019876 <decide_hold_preferred+0xc>
}
 8019874:	4770      	bx	lr
        hold_tap->is_hold = 0;
 8019876:	2300      	movs	r3, #0
 8019878:	7643      	strb	r3, [r0, #25]
        hold_tap->is_decided = true;
 801987a:	2301      	movs	r3, #1
 801987c:	7603      	strb	r3, [r0, #24]
        break;
 801987e:	4770      	bx	lr
        hold_tap->is_hold = 1;
 8019880:	2301      	movs	r3, #1
 8019882:	7643      	strb	r3, [r0, #25]
        hold_tap->is_decided = true;
 8019884:	7603      	strb	r3, [r0, #24]
        break;
 8019886:	e7f5      	b.n	8019874 <decide_hold_preferred+0xa>

08019888 <behavior_hold_tap_listener>:
int behavior_hold_tap_listener(const zmk_event_t *eh) {
 8019888:	b510      	push	{r4, lr}
 801988a:	4604      	mov	r4, r0
    if (as_zmk_position_state_changed(eh) != NULL) {
 801988c:	f7e7 f998 	bl	8000bc0 <as_zmk_position_state_changed>
 8019890:	b118      	cbz	r0, 801989a <behavior_hold_tap_listener+0x12>
        return position_state_changed_listener(eh);
 8019892:	4620      	mov	r0, r4
 8019894:	f7e7 fca4 	bl	80011e0 <position_state_changed_listener>
}
 8019898:	bd10      	pop	{r4, pc}
    } else if (as_zmk_keycode_state_changed(eh) != NULL) {
 801989a:	4620      	mov	r0, r4
 801989c:	f7e7 f9cc 	bl	8000c38 <as_zmk_keycode_state_changed>
 80198a0:	b908      	cbnz	r0, 80198a6 <behavior_hold_tap_listener+0x1e>
    return ZMK_EV_EVENT_BUBBLE;
 80198a2:	2000      	movs	r0, #0
 80198a4:	e7f8      	b.n	8019898 <behavior_hold_tap_listener+0x10>
        return keycode_state_changed_listener(eh);
 80198a6:	4620      	mov	r0, r4
 80198a8:	f7e7 fb26 	bl	8000ef8 <keycode_state_changed_listener>
 80198ac:	e7f4      	b.n	8019898 <behavior_hold_tap_listener+0x10>

080198ae <behavior_hold_tap_timer_work_handler>:
void behavior_hold_tap_timer_work_handler(struct k_work *item) {
 80198ae:	b508      	push	{r3, lr}
 80198b0:	4603      	mov	r3, r0
    struct active_hold_tap *hold_tap = CONTAINER_OF(item, struct active_hold_tap, work);
 80198b2:	3820      	subs	r0, #32
    if (hold_tap->work_is_cancelled) {
 80198b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80198b8:	b113      	cbz	r3, 80198c0 <behavior_hold_tap_timer_work_handler+0x12>
        clear_hold_tap(hold_tap);
 80198ba:	f7ff ffb1 	bl	8019820 <clear_hold_tap>
}
 80198be:	bd08      	pop	{r3, pc}
        decide_hold_tap(hold_tap, HT_TIMER_EVENT);
 80198c0:	2103      	movs	r1, #3
 80198c2:	f7e7 fbd7 	bl	8001074 <decide_hold_tap>
}
 80198c6:	e7fa      	b.n	80198be <behavior_hold_tap_timer_work_handler+0x10>

080198c8 <clear_sticky_key>:
    sticky_key->position = ZMK_BHV_STICKY_KEY_POSITION_FREE;
 80198c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80198cc:	6003      	str	r3, [r0, #0]
}
 80198ce:	4770      	bx	lr

080198d0 <stop_timer>:
static int stop_timer(struct active_sticky_key *sticky_key) {
 80198d0:	b510      	push	{r4, lr}
 80198d2:	4604      	mov	r4, r0
    int timer_cancel_result = k_delayed_work_cancel(&sticky_key->release_timer);
 80198d4:	3020      	adds	r0, #32
 80198d6:	f008 fd53 	bl	8022380 <k_delayed_work_cancel>
    if (timer_cancel_result == -EINPROGRESS) {
 80198da:	f110 0f44 	cmn.w	r0, #68	; 0x44
 80198de:	d000      	beq.n	80198e2 <stop_timer+0x12>
}
 80198e0:	bd10      	pop	{r4, pc}
        sticky_key->timer_cancelled = true;
 80198e2:	2301      	movs	r3, #1
 80198e4:	7463      	strb	r3, [r4, #17]
    return timer_cancel_result;
 80198e6:	e7fb      	b.n	80198e0 <stop_timer+0x10>

080198e8 <behavior_sticky_key_timer_handler>:
void behavior_sticky_key_timer_handler(struct k_work *item) {
 80198e8:	4603      	mov	r3, r0
    if (sticky_key->position == ZMK_BHV_STICKY_KEY_POSITION_FREE) {
 80198ea:	f850 2c20 	ldr.w	r2, [r0, #-32]
 80198ee:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80198f2:	d036      	beq.n	8019962 <behavior_sticky_key_timer_handler+0x7a>
 80198f4:	3820      	subs	r0, #32
    if (sticky_key->timer_cancelled) {
 80198f6:	f813 2c0f 	ldrb.w	r2, [r3, #-15]
 80198fa:	b11a      	cbz	r2, 8019904 <behavior_sticky_key_timer_handler+0x1c>
        sticky_key->timer_cancelled = false;
 80198fc:	2200      	movs	r2, #0
 80198fe:	f803 2c0f 	strb.w	r2, [r3, #-15]
 8019902:	4770      	bx	lr
void behavior_sticky_key_timer_handler(struct k_work *item) {
 8019904:	b530      	push	{r4, r5, lr}
 8019906:	b093      	sub	sp, #76	; 0x4c
        release_sticky_key_behavior(sticky_key, sticky_key->release_at);
 8019908:	e953 4502 	ldrd	r4, r5, [r3, #-8]
        .behavior_dev = sticky_key->config->behavior.behavior_dev,
 801990c:	68c2      	ldr	r2, [r0, #12]
 801990e:	6852      	ldr	r2, [r2, #4]
    struct zmk_behavior_binding binding = {
 8019910:	9203      	str	r2, [sp, #12]
        .param1 = sticky_key->param1,
 8019912:	6842      	ldr	r2, [r0, #4]
    struct zmk_behavior_binding binding = {
 8019914:	9204      	str	r2, [sp, #16]
        .param2 = sticky_key->param2,
 8019916:	6882      	ldr	r2, [r0, #8]
    struct zmk_behavior_binding binding = {
 8019918:	9205      	str	r2, [sp, #20]
    struct zmk_behavior_binding_event event = {
 801991a:	2200      	movs	r2, #0
 801991c:	9206      	str	r2, [sp, #24]
        .position = sticky_key->position,
 801991e:	f853 3c20 	ldr.w	r3, [r3, #-32]
    struct zmk_behavior_binding_event event = {
 8019922:	9307      	str	r3, [sp, #28]
 8019924:	e9cd 4508 	strd	r4, r5, [sp, #32]
    clear_sticky_key(sticky_key);
 8019928:	f7ff ffce 	bl	80198c8 <clear_sticky_key>
    return behavior_keymap_binding_released(&binding, event);
 801992c:	ac0a      	add	r4, sp, #40	; 0x28
 801992e:	ab06      	add	r3, sp, #24
 8019930:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019932:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8019936:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801993a:	ac12      	add	r4, sp, #72	; 0x48
 801993c:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
 8019940:	9803      	ldr	r0, [sp, #12]
 8019942:	f7fe f985 	bl	8017c50 <z_impl_device_get_binding>
    const struct behavior_driver_api *api = (const struct behavior_driver_api *)dev->api;
 8019946:	6883      	ldr	r3, [r0, #8]
    if (api->binding_released == NULL) {
 8019948:	685c      	ldr	r4, [r3, #4]
 801994a:	b144      	cbz	r4, 801995e <behavior_sticky_key_timer_handler+0x76>
    return api->binding_released(binding, event);
 801994c:	ab12      	add	r3, sp, #72	; 0x48
 801994e:	e913 0003 	ldmdb	r3, {r0, r1}
 8019952:	e88d 0003 	stmia.w	sp, {r0, r1}
 8019956:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019958:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801995a:	a803      	add	r0, sp, #12
 801995c:	47a0      	blx	r4
}
 801995e:	b013      	add	sp, #76	; 0x4c
 8019960:	bd30      	pop	{r4, r5, pc}
 8019962:	4770      	bx	lr

08019964 <behavior_mo_init>:
static int behavior_mo_init(const struct device *dev) { return 0; };
 8019964:	2000      	movs	r0, #0
 8019966:	4770      	bx	lr

08019968 <behavior_out_init>:

static int behavior_out_init(const struct device *dev) { return 0; }
 8019968:	2000      	movs	r0, #0
 801996a:	4770      	bx	lr

0801996c <behavior_tog_init>:
static int behavior_tog_init(const struct device *dev) { return 0; };
 801996c:	2000      	movs	r0, #0
 801996e:	4770      	bx	lr

08019970 <behavior_to_init>:
static int behavior_to_init(const struct device *dev) { return 0; };
 8019970:	2000      	movs	r0, #0
 8019972:	4770      	bx	lr

08019974 <behavior_transparent_init>:
LOG_MODULE_DECLARE(zmk, CONFIG_ZMK_LOG_LEVEL);

struct behavior_transparent_config {};
struct behavior_transparent_data {};

static int behavior_transparent_init(const struct device *dev) { return 0; };
 8019974:	2000      	movs	r0, #0
 8019976:	4770      	bx	lr

08019978 <on_keymap_binding_pressed>:

static int on_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                     struct zmk_behavior_binding_event event) {
 8019978:	b082      	sub	sp, #8
 801997a:	e88d 000c 	stmia.w	sp, {r2, r3}
    return ZMK_BEHAVIOR_TRANSPARENT;
}
 801997e:	2001      	movs	r0, #1
 8019980:	b002      	add	sp, #8
 8019982:	4770      	bx	lr

08019984 <on_keymap_binding_released>:

static int on_keymap_binding_released(struct zmk_behavior_binding *binding,
                                      struct zmk_behavior_binding_event event) {
 8019984:	b082      	sub	sp, #8
 8019986:	e88d 000c 	stmia.w	sp, {r2, r3}
    return ZMK_BEHAVIOR_TRANSPARENT;
}
 801998a:	2001      	movs	r0, #1
 801998c:	b002      	add	sp, #8
 801998e:	4770      	bx	lr

08019990 <behavior_none_init>:
LOG_MODULE_DECLARE(zmk, CONFIG_ZMK_LOG_LEVEL);

struct behavior_none_config {};
struct behavior_none_data {};

static int behavior_none_init(const struct device *dev) { return 0; };
 8019990:	2000      	movs	r0, #0
 8019992:	4770      	bx	lr

08019994 <on_keymap_binding_pressed>:

static int on_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                     struct zmk_behavior_binding_event event) {
 8019994:	b082      	sub	sp, #8
 8019996:	e88d 000c 	stmia.w	sp, {r2, r3}
    return ZMK_BEHAVIOR_OPAQUE;
}
 801999a:	2000      	movs	r0, #0
 801999c:	b002      	add	sp, #8
 801999e:	4770      	bx	lr

080199a0 <on_keymap_binding_released>:

static int on_keymap_binding_released(struct zmk_behavior_binding *binding,
                                      struct zmk_behavior_binding_event event) {
 80199a0:	b082      	sub	sp, #8
 80199a2:	e88d 000c 	stmia.w	sp, {r2, r3}
    return ZMK_BEHAVIOR_OPAQUE;
}
 80199a6:	2000      	movs	r0, #0
 80199a8:	b002      	add	sp, #8
 80199aa:	4770      	bx	lr

080199ac <behavior_sensor_rotate_key_press_init>:
static int behavior_sensor_rotate_key_press_init(const struct device *dev) { return 0; };
 80199ac:	2000      	movs	r0, #0
 80199ae:	4770      	bx	lr

080199b0 <on_keymap_binding_released>:

static int on_keymap_binding_released(struct zmk_behavior_binding *binding,
                                      struct zmk_behavior_binding_event event) {
 80199b0:	b082      	sub	sp, #8
 80199b2:	e88d 000c 	stmia.w	sp, {r2, r3}
    return ZMK_BEHAVIOR_OPAQUE;
}
 80199b6:	2000      	movs	r0, #0
 80199b8:	b002      	add	sp, #8
 80199ba:	4770      	bx	lr

080199bc <behavior_ext_power_init>:

static int behavior_ext_power_init(const struct device *dev) { return 0; };
 80199bc:	2000      	movs	r0, #0
 80199be:	4770      	bx	lr

080199c0 <zmk_keymap_layer_active_with_state>:
    return (state_to_test & (BIT(layer))) == (BIT(layer)) || layer == _zmk_keymap_layer_default;
 80199c0:	2301      	movs	r3, #1
 80199c2:	4083      	lsls	r3, r0
 80199c4:	438b      	bics	r3, r1
 80199c6:	d004      	beq.n	80199d2 <zmk_keymap_layer_active_with_state+0x12>
 80199c8:	b108      	cbz	r0, 80199ce <zmk_keymap_layer_active_with_state+0xe>
 80199ca:	2000      	movs	r0, #0
};
 80199cc:	4770      	bx	lr
    return (state_to_test & (BIT(layer))) == (BIT(layer)) || layer == _zmk_keymap_layer_default;
 80199ce:	2001      	movs	r0, #1
 80199d0:	4770      	bx	lr
 80199d2:	2001      	movs	r0, #1
 80199d4:	4770      	bx	lr

080199d6 <zmk_keymap_layer_toggle>:
int zmk_keymap_layer_toggle(uint8_t layer) {
 80199d6:	b510      	push	{r4, lr}
 80199d8:	4604      	mov	r4, r0
    if (zmk_keymap_layer_active(layer)) {
 80199da:	f7e8 fb43 	bl	8002064 <zmk_keymap_layer_active>
 80199de:	b918      	cbnz	r0, 80199e8 <zmk_keymap_layer_toggle+0x12>
    return zmk_keymap_layer_activate(layer);
 80199e0:	4620      	mov	r0, r4
 80199e2:	f7e8 fb47 	bl	8002074 <zmk_keymap_layer_activate>
};
 80199e6:	bd10      	pop	{r4, pc}
        return zmk_keymap_layer_deactivate(layer);
 80199e8:	4620      	mov	r0, r4
 80199ea:	f7e8 fb8d 	bl	8002108 <zmk_keymap_layer_deactivate>
 80199ee:	e7fa      	b.n	80199e6 <zmk_keymap_layer_toggle+0x10>

080199f0 <zmk_keymap_layer_to>:
int zmk_keymap_layer_to(uint8_t layer) {
 80199f0:	b538      	push	{r3, r4, r5, lr}
 80199f2:	4605      	mov	r5, r0
    for (int i = ZMK_KEYMAP_LAYERS_LEN - 1; i >= 0; i--) {
 80199f4:	2402      	movs	r4, #2
 80199f6:	e003      	b.n	8019a00 <zmk_keymap_layer_to+0x10>
        zmk_keymap_layer_deactivate(i);
 80199f8:	b2e0      	uxtb	r0, r4
 80199fa:	f7e8 fb85 	bl	8002108 <zmk_keymap_layer_deactivate>
    for (int i = ZMK_KEYMAP_LAYERS_LEN - 1; i >= 0; i--) {
 80199fe:	3c01      	subs	r4, #1
 8019a00:	2c00      	cmp	r4, #0
 8019a02:	daf9      	bge.n	80199f8 <zmk_keymap_layer_to+0x8>
    zmk_keymap_layer_activate(layer);
 8019a04:	4628      	mov	r0, r5
 8019a06:	f7e8 fb35 	bl	8002074 <zmk_keymap_layer_activate>
}
 8019a0a:	2000      	movs	r0, #0
 8019a0c:	bd38      	pop	{r3, r4, r5, pc}

08019a0e <keymap_listener>:
    return -ENOTSUP;
}

#endif /* ZMK_KEYMAP_HAS_SENSORS */

int keymap_listener(const zmk_event_t *eh) {
 8019a0e:	b510      	push	{r4, lr}
    const struct zmk_position_state_changed *pos_ev;
    if ((pos_ev = as_zmk_position_state_changed(eh)) != NULL) {
 8019a10:	f7e7 f8d6 	bl	8000bc0 <as_zmk_position_state_changed>
 8019a14:	b130      	cbz	r0, 8019a24 <keymap_listener+0x16>
        return zmk_keymap_position_state_changed(pos_ev->position, pos_ev->state,
 8019a16:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 8019a1a:	7901      	ldrb	r1, [r0, #4]
 8019a1c:	6800      	ldr	r0, [r0, #0]
 8019a1e:	f7e8 fc61 	bl	80022e4 <zmk_keymap_position_state_changed>
                                           sensor_ev->timestamp);
    }
#endif /* ZMK_KEYMAP_HAS_SENSORS */

    return -ENOTSUP;
}
 8019a22:	bd10      	pop	{r4, pc}
    return -ENOTSUP;
 8019a24:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8019a28:	e7fb      	b.n	8019a22 <keymap_listener+0x14>

08019a2a <behavior_bt_init>:

static int behavior_bt_init(const struct device *dev) { return 0; };
 8019a2a:	2000      	movs	r0, #0
 8019a2c:	4770      	bx	lr

08019a2e <on_keymap_binding_released>:

static int on_keymap_binding_released(struct zmk_behavior_binding *binding,
                                      struct zmk_behavior_binding_event event) {
 8019a2e:	b082      	sub	sp, #8
 8019a30:	e88d 000c 	stmia.w	sp, {r2, r3}
    return ZMK_BEHAVIOR_OPAQUE;
}
 8019a34:	2000      	movs	r0, #0
 8019a36:	b002      	add	sp, #8
 8019a38:	4770      	bx	lr

08019a3a <raise_profile_changed_event_callback>:
static void raise_profile_changed_event_callback(struct k_work *work) {
 8019a3a:	b508      	push	{r3, lr}
    raise_profile_changed_event();
 8019a3c:	f7e8 fcea 	bl	8002414 <raise_profile_changed_event>
}
 8019a40:	bd08      	pop	{r3, pc}

08019a42 <zmk_ble_active_profile_is_connected>:
bool zmk_ble_active_profile_is_connected() {
 8019a42:	b510      	push	{r4, lr}
 8019a44:	b082      	sub	sp, #8
    bt_addr_le_t *addr = zmk_ble_active_profile_addr();
 8019a46:	f7e9 f9dd 	bl	8002e04 <zmk_ble_active_profile_addr>
 8019a4a:	4604      	mov	r4, r0
    if (!bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
 8019a4c:	2300      	movs	r3, #0
 8019a4e:	9300      	str	r3, [sp, #0]
 8019a50:	f8cd 3003 	str.w	r3, [sp, #3]
 8019a54:	2207      	movs	r2, #7
 8019a56:	4669      	mov	r1, sp
 8019a58:	f002 ff11 	bl	801c87e <memcmp>
 8019a5c:	b910      	cbnz	r0, 8019a64 <zmk_ble_active_profile_is_connected+0x22>
        return false;
 8019a5e:	2000      	movs	r0, #0
}
 8019a60:	b002      	add	sp, #8
 8019a62:	bd10      	pop	{r4, pc}
    } else if ((conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr)) == NULL) {
 8019a64:	4621      	mov	r1, r4
 8019a66:	2000      	movs	r0, #0
 8019a68:	f7f6 fcd8 	bl	801041c <bt_conn_lookup_addr_le>
 8019a6c:	2800      	cmp	r0, #0
 8019a6e:	d0f6      	beq.n	8019a5e <zmk_ble_active_profile_is_connected+0x1c>
    bt_conn_unref(conn);
 8019a70:	f003 fe5e 	bl	801d730 <bt_conn_unref>
    return true;
 8019a74:	2001      	movs	r0, #1
 8019a76:	e7f3      	b.n	8019a60 <zmk_ble_active_profile_is_connected+0x1e>

08019a78 <update_advertising_callback>:
static void update_advertising_callback(struct k_work *work) { update_advertising(); }
 8019a78:	b508      	push	{r3, lr}
 8019a7a:	f7e9 f9d1 	bl	8002e20 <update_advertising>
 8019a7e:	bd08      	pop	{r3, pc}

08019a80 <raise_usb_status_changed_event>:
static void raise_usb_status_changed_event() {
 8019a80:	b508      	push	{r3, lr}
    ZMK_EVENT_RAISE(new_zmk_usb_conn_state_changed(
 8019a82:	f7ea fe27 	bl	80046d4 <zmk_usb_get_conn_state>
 8019a86:	f7e7 f903 	bl	8000c90 <new_zmk_usb_conn_state_changed>
 8019a8a:	f7ff feaf 	bl	80197ec <zmk_event_manager_raise>
}
 8019a8e:	bd08      	pop	{r3, pc}

08019a90 <input_ccc_changed>:
}
 8019a90:	4770      	bx	lr

08019a92 <write_ctrl_point>:
                                const void *buf, uint16_t len, uint16_t offset, uint8_t flags) {
 8019a92:	b538      	push	{r3, r4, r5, lr}
 8019a94:	4608      	mov	r0, r1
 8019a96:	4611      	mov	r1, r2
 8019a98:	461a      	mov	r2, r3
 8019a9a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    uint8_t *value = attr->user_data;
 8019a9e:	68c0      	ldr	r0, [r0, #12]
    if (offset + len > sizeof(ctrl_point)) {
 8019aa0:	189d      	adds	r5, r3, r2
 8019aa2:	2d01      	cmp	r5, #1
 8019aa4:	d805      	bhi.n	8019ab2 <write_ctrl_point+0x20>
 8019aa6:	4614      	mov	r4, r2
    memcpy(value + offset, buf, len);
 8019aa8:	4418      	add	r0, r3
 8019aaa:	f002 ff00 	bl	801c8ae <memcpy>
}
 8019aae:	4620      	mov	r0, r4
 8019ab0:	bd38      	pop	{r3, r4, r5, pc}
        return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
 8019ab2:	f06f 0406 	mvn.w	r4, #6
 8019ab6:	e7fa      	b.n	8019aae <write_ctrl_point+0x1c>

08019ab8 <read_hids_consumer_input_report>:
                                               uint16_t len, uint16_t offset) {
 8019ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019aba:	b085      	sub	sp, #20
 8019abc:	4604      	mov	r4, r0
 8019abe:	460d      	mov	r5, r1
 8019ac0:	4616      	mov	r6, r2
 8019ac2:	461f      	mov	r7, r3
    struct zmk_hid_consumer_report_body *report_body = &zmk_hid_get_consumer_report()->body;
 8019ac4:	f7e6 ffac 	bl	8000a20 <zmk_hid_get_consumer_report>
 8019ac8:	3001      	adds	r0, #1
    return bt_gatt_attr_read(conn, attr, buf, len, offset, report_body,
 8019aca:	230c      	movs	r3, #12
 8019acc:	9302      	str	r3, [sp, #8]
 8019ace:	9001      	str	r0, [sp, #4]
 8019ad0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8019ad4:	9300      	str	r3, [sp, #0]
 8019ad6:	463b      	mov	r3, r7
 8019ad8:	4632      	mov	r2, r6
 8019ada:	4629      	mov	r1, r5
 8019adc:	4620      	mov	r0, r4
 8019ade:	f005 f9fb 	bl	801eed8 <bt_gatt_attr_read>
}
 8019ae2:	b005      	add	sp, #20
 8019ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019ae6 <read_hids_report_ref>:
                                    void *buf, uint16_t len, uint16_t offset) {
 8019ae6:	b530      	push	{r4, r5, lr}
 8019ae8:	b085      	sub	sp, #20
    return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
 8019aea:	68cc      	ldr	r4, [r1, #12]
 8019aec:	2502      	movs	r5, #2
 8019aee:	9502      	str	r5, [sp, #8]
 8019af0:	9401      	str	r4, [sp, #4]
 8019af2:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8019af6:	9400      	str	r4, [sp, #0]
 8019af8:	f005 f9ee 	bl	801eed8 <bt_gatt_attr_read>
}
 8019afc:	b005      	add	sp, #20
 8019afe:	bd30      	pop	{r4, r5, pc}

08019b00 <read_hids_info>:
                              uint16_t len, uint16_t offset) {
 8019b00:	b530      	push	{r4, r5, lr}
 8019b02:	b085      	sub	sp, #20
    return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
 8019b04:	68cc      	ldr	r4, [r1, #12]
 8019b06:	2504      	movs	r5, #4
 8019b08:	9502      	str	r5, [sp, #8]
 8019b0a:	9401      	str	r4, [sp, #4]
 8019b0c:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8019b10:	9400      	str	r4, [sp, #0]
 8019b12:	f005 f9e1 	bl	801eed8 <bt_gatt_attr_read>
}
 8019b16:	b005      	add	sp, #20
 8019b18:	bd30      	pop	{r4, r5, pc}

08019b1a <read_hids_input_report>:
                                      void *buf, uint16_t len, uint16_t offset) {
 8019b1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b1c:	b085      	sub	sp, #20
 8019b1e:	4604      	mov	r4, r0
 8019b20:	460d      	mov	r5, r1
 8019b22:	4616      	mov	r6, r2
 8019b24:	461f      	mov	r7, r3
    struct zmk_hid_keyboard_report_body *report_body = &zmk_hid_get_keyboard_report()->body;
 8019b26:	f7e6 ff77 	bl	8000a18 <zmk_hid_get_keyboard_report>
 8019b2a:	3001      	adds	r0, #1
    return bt_gatt_attr_read(conn, attr, buf, len, offset, report_body,
 8019b2c:	2308      	movs	r3, #8
 8019b2e:	9302      	str	r3, [sp, #8]
 8019b30:	9001      	str	r0, [sp, #4]
 8019b32:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8019b36:	9300      	str	r3, [sp, #0]
 8019b38:	463b      	mov	r3, r7
 8019b3a:	4632      	mov	r2, r6
 8019b3c:	4629      	mov	r1, r5
 8019b3e:	4620      	mov	r0, r4
 8019b40:	f005 f9ca 	bl	801eed8 <bt_gatt_attr_read>
}
 8019b44:	b005      	add	sp, #20
 8019b46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019b48 <is_ble_ready>:
static bool is_ble_ready() {
 8019b48:	b508      	push	{r3, lr}
    return zmk_ble_active_profile_is_connected();
 8019b4a:	f7ff ff7a 	bl	8019a42 <zmk_ble_active_profile_is_connected>
}
 8019b4e:	bd08      	pop	{r3, pc}

08019b50 <is_usb_ready>:
static bool is_usb_ready() {
 8019b50:	b508      	push	{r3, lr}

enum usb_dc_status_code zmk_usb_get_status();
enum zmk_usb_conn_state zmk_usb_get_conn_state();

static inline bool zmk_usb_is_powered() { return zmk_usb_get_conn_state() != ZMK_USB_CONN_NONE; }
static inline bool zmk_usb_is_hid_ready() { return zmk_usb_get_conn_state() == ZMK_USB_CONN_HID; }
 8019b52:	f7ea fdbf 	bl	80046d4 <zmk_usb_get_conn_state>
}
 8019b56:	2802      	cmp	r0, #2
 8019b58:	bf14      	ite	ne
 8019b5a:	2000      	movne	r0, #0
 8019b5c:	2001      	moveq	r0, #1
 8019b5e:	bd08      	pop	{r3, pc}

08019b60 <disconnect_current_endpoint>:
static void disconnect_current_endpoint() {
 8019b60:	b508      	push	{r3, lr}
    zmk_hid_keyboard_clear();
 8019b62:	f7e6 ff15 	bl	8000990 <zmk_hid_keyboard_clear>
    zmk_hid_consumer_clear();
 8019b66:	f7e6 ff4d 	bl	8000a04 <zmk_hid_consumer_clear>
    zmk_endpoints_send_report(HID_USAGE_KEY);
 8019b6a:	2007      	movs	r0, #7
 8019b6c:	f7eb f90c 	bl	8004d88 <zmk_endpoints_send_report>
    zmk_endpoints_send_report(HID_USAGE_CONSUMER);
 8019b70:	200c      	movs	r0, #12
 8019b72:	f7eb f909 	bl	8004d88 <zmk_endpoints_send_report>
}
 8019b76:	bd08      	pop	{r3, pc}

08019b78 <endpoint_listener>:

static int endpoint_listener(const zmk_event_t *eh) {
 8019b78:	b508      	push	{r3, lr}
    update_current_endpoint();
 8019b7a:	f7eb f943 	bl	8004e04 <update_current_endpoint>
    return 0;
}
 8019b7e:	2000      	movs	r0, #0
 8019b80:	bd08      	pop	{r3, pc}

08019b82 <hid_listener>:

int hid_listener(const zmk_event_t *eh) {
 8019b82:	b508      	push	{r3, lr}
    const struct zmk_keycode_state_changed *ev = as_zmk_keycode_state_changed(eh);
 8019b84:	f7e7 f858 	bl	8000c38 <as_zmk_keycode_state_changed>
    if (ev) {
 8019b88:	b118      	cbz	r0, 8019b92 <hid_listener+0x10>
        if (ev->state) {
 8019b8a:	7a82      	ldrb	r2, [r0, #10]
 8019b8c:	b11a      	cbz	r2, 8019b96 <hid_listener+0x14>
            hid_listener_keycode_pressed(ev);
 8019b8e:	f7eb fa03 	bl	8004f98 <hid_listener_keycode_pressed>
        } else {
            hid_listener_keycode_released(ev);
        }
    }
    return 0;
}
 8019b92:	2000      	movs	r0, #0
 8019b94:	bd08      	pop	{r3, pc}
            hid_listener_keycode_released(ev);
 8019b96:	f7eb fa6b 	bl	8005070 <hid_listener_keycode_released>
 8019b9a:	e7fa      	b.n	8019b92 <hid_listener+0x10>

08019b9c <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
 8019b9c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8019ba0:	b2db      	uxtb	r3, r3
 8019ba2:	2b09      	cmp	r3, #9
 8019ba4:	d802      	bhi.n	8019bac <char2hex+0x10>
		*x = c - '0';
 8019ba6:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
 8019ba8:	2000      	movs	r0, #0
 8019baa:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
 8019bac:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8019bb0:	b2db      	uxtb	r3, r3
 8019bb2:	2b05      	cmp	r3, #5
 8019bb4:	d803      	bhi.n	8019bbe <char2hex+0x22>
		*x = c - 'a' + 10;
 8019bb6:	3857      	subs	r0, #87	; 0x57
 8019bb8:	7008      	strb	r0, [r1, #0]
	return 0;
 8019bba:	2000      	movs	r0, #0
 8019bbc:	4770      	bx	lr
	} else if (c >= 'A' && c <= 'F') {
 8019bbe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8019bc2:	b2db      	uxtb	r3, r3
 8019bc4:	2b05      	cmp	r3, #5
 8019bc6:	d803      	bhi.n	8019bd0 <char2hex+0x34>
		*x = c - 'A' + 10;
 8019bc8:	3837      	subs	r0, #55	; 0x37
 8019bca:	7008      	strb	r0, [r1, #0]
	return 0;
 8019bcc:	2000      	movs	r0, #0
 8019bce:	4770      	bx	lr
		return -EINVAL;
 8019bd0:	f06f 0015 	mvn.w	r0, #21
}
 8019bd4:	4770      	bx	lr

08019bd6 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
 8019bd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019bda:	b083      	sub	sp, #12
 8019bdc:	4616      	mov	r6, r2
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
 8019bde:	f001 0201 	and.w	r2, r1, #1
 8019be2:	eb02 0851 	add.w	r8, r2, r1, lsr #1
 8019be6:	4598      	cmp	r8, r3
 8019be8:	d832      	bhi.n	8019c50 <hex2bin+0x7a>
 8019bea:	4607      	mov	r7, r0
 8019bec:	ea4f 0951 	mov.w	r9, r1, lsr #1
		return 0;
	}

	/* if hexlen is uneven, insert leading zero nibble */
	if (hexlen % 2) {
 8019bf0:	b90a      	cbnz	r2, 8019bf6 <hex2bin+0x20>
		hex++;
		buf++;
	}

	/* regular hex conversion */
	for (size_t i = 0; i < hexlen / 2; i++) {
 8019bf2:	2400      	movs	r4, #0
 8019bf4:	e012      	b.n	8019c1c <hex2bin+0x46>
		if (char2hex(hex[0], &dec) < 0) {
 8019bf6:	f10d 0107 	add.w	r1, sp, #7
 8019bfa:	7800      	ldrb	r0, [r0, #0]
 8019bfc:	f7ff ffce 	bl	8019b9c <char2hex>
 8019c00:	2800      	cmp	r0, #0
 8019c02:	db2b      	blt.n	8019c5c <hex2bin+0x86>
		buf[0] = dec;
 8019c04:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8019c08:	f806 3b01 	strb.w	r3, [r6], #1
		hex++;
 8019c0c:	3701      	adds	r7, #1
		buf++;
 8019c0e:	e7f0      	b.n	8019bf2 <hex2bin+0x1c>
		buf[i] = dec << 4;

		if (char2hex(hex[2 * i + 1], &dec) < 0) {
			return 0;
		}
		buf[i] += dec;
 8019c10:	5d33      	ldrb	r3, [r6, r4]
 8019c12:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8019c16:	4413      	add	r3, r2
 8019c18:	5533      	strb	r3, [r6, r4]
	for (size_t i = 0; i < hexlen / 2; i++) {
 8019c1a:	3401      	adds	r4, #1
 8019c1c:	45a1      	cmp	r9, r4
 8019c1e:	d919      	bls.n	8019c54 <hex2bin+0x7e>
		if (char2hex(hex[2 * i], &dec) < 0) {
 8019c20:	0065      	lsls	r5, r4, #1
 8019c22:	f10d 0107 	add.w	r1, sp, #7
 8019c26:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
 8019c2a:	f7ff ffb7 	bl	8019b9c <char2hex>
 8019c2e:	2800      	cmp	r0, #0
 8019c30:	db17      	blt.n	8019c62 <hex2bin+0x8c>
		buf[i] = dec << 4;
 8019c32:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8019c36:	011b      	lsls	r3, r3, #4
 8019c38:	5533      	strb	r3, [r6, r4]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
 8019c3a:	3501      	adds	r5, #1
 8019c3c:	f10d 0107 	add.w	r1, sp, #7
 8019c40:	5d78      	ldrb	r0, [r7, r5]
 8019c42:	f7ff ffab 	bl	8019b9c <char2hex>
 8019c46:	2800      	cmp	r0, #0
 8019c48:	dae2      	bge.n	8019c10 <hex2bin+0x3a>
			return 0;
 8019c4a:	f04f 0800 	mov.w	r8, #0
 8019c4e:	e001      	b.n	8019c54 <hex2bin+0x7e>
		return 0;
 8019c50:	f04f 0800 	mov.w	r8, #0
	}

	return hexlen / 2 + hexlen % 2;
}
 8019c54:	4640      	mov	r0, r8
 8019c56:	b003      	add	sp, #12
 8019c58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			return 0;
 8019c5c:	f04f 0800 	mov.w	r8, #0
 8019c60:	e7f8      	b.n	8019c54 <hex2bin+0x7e>
			return 0;
 8019c62:	f04f 0800 	mov.w	r8, #0
 8019c66:	e7f5      	b.n	8019c54 <hex2bin+0x7e>

08019c68 <arch_printk_char_out>:
}
 8019c68:	2000      	movs	r0, #0
 8019c6a:	4770      	bx	lr

08019c6c <print_hex>:
{
 8019c6c:	b570      	push	{r4, r5, r6, lr}
 8019c6e:	b084      	sub	sp, #16
 8019c70:	f89d 4020 	ldrb.w	r4, [sp, #32]
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
 8019c74:	1ee5      	subs	r5, r4, #3
 8019c76:	bf18      	it	ne
 8019c78:	2501      	movne	r5, #1
 8019c7a:	2c01      	cmp	r4, #1
 8019c7c:	d00a      	beq.n	8019c94 <print_hex+0x28>
 8019c7e:	2420      	movs	r4, #32
 8019c80:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8019c82:	9603      	str	r6, [sp, #12]
 8019c84:	9402      	str	r4, [sp, #8]
 8019c86:	9501      	str	r5, [sp, #4]
 8019c88:	2410      	movs	r4, #16
 8019c8a:	9400      	str	r4, [sp, #0]
 8019c8c:	f7eb faba 	bl	8005204 <print_digits>
}
 8019c90:	b004      	add	sp, #16
 8019c92:	bd70      	pop	{r4, r5, r6, pc}
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
 8019c94:	2430      	movs	r4, #48	; 0x30
 8019c96:	e7f3      	b.n	8019c80 <print_hex+0x14>

08019c98 <print_dec>:
{
 8019c98:	b570      	push	{r4, r5, r6, lr}
 8019c9a:	b084      	sub	sp, #16
 8019c9c:	f89d 4020 	ldrb.w	r4, [sp, #32]
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
 8019ca0:	1ee5      	subs	r5, r4, #3
 8019ca2:	bf18      	it	ne
 8019ca4:	2501      	movne	r5, #1
 8019ca6:	2c01      	cmp	r4, #1
 8019ca8:	d00a      	beq.n	8019cc0 <print_dec+0x28>
 8019caa:	2420      	movs	r4, #32
 8019cac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8019cae:	9603      	str	r6, [sp, #12]
 8019cb0:	9402      	str	r4, [sp, #8]
 8019cb2:	9501      	str	r5, [sp, #4]
 8019cb4:	240a      	movs	r4, #10
 8019cb6:	9400      	str	r4, [sp, #0]
 8019cb8:	f7eb faa4 	bl	8005204 <print_digits>
}
 8019cbc:	b004      	add	sp, #16
 8019cbe:	bd70      	pop	{r4, r5, r6, pc}
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
 8019cc0:	2430      	movs	r4, #48	; 0x30
 8019cc2:	e7f3      	b.n	8019cac <print_dec+0x14>

08019cc4 <ok64>:
}
 8019cc4:	2001      	movs	r0, #1
 8019cc6:	4770      	bx	lr

08019cc8 <negative>:
}
 8019cc8:	0fc8      	lsrs	r0, r1, #31
 8019cca:	4770      	bx	lr

08019ccc <str_out>:
{
 8019ccc:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 8019cce:	680c      	ldr	r4, [r1, #0]
 8019cd0:	b154      	cbz	r4, 8019ce8 <str_out+0x1c>
 8019cd2:	688a      	ldr	r2, [r1, #8]
 8019cd4:	684b      	ldr	r3, [r1, #4]
 8019cd6:	429a      	cmp	r2, r3
 8019cd8:	da06      	bge.n	8019ce8 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
 8019cda:	3b01      	subs	r3, #1
 8019cdc:	429a      	cmp	r2, r3
 8019cde:	d009      	beq.n	8019cf4 <str_out+0x28>
		ctx->str[ctx->count++] = c;
 8019ce0:	1c53      	adds	r3, r2, #1
 8019ce2:	608b      	str	r3, [r1, #8]
 8019ce4:	54a0      	strb	r0, [r4, r2]
 8019ce6:	e002      	b.n	8019cee <str_out+0x22>
		ctx->count++;
 8019ce8:	688b      	ldr	r3, [r1, #8]
 8019cea:	3301      	adds	r3, #1
 8019cec:	608b      	str	r3, [r1, #8]
}
 8019cee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019cf2:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
 8019cf4:	1c53      	adds	r3, r2, #1
 8019cf6:	608b      	str	r3, [r1, #8]
 8019cf8:	2300      	movs	r3, #0
 8019cfa:	54a3      	strb	r3, [r4, r2]
 8019cfc:	e7f7      	b.n	8019cee <str_out+0x22>

08019cfe <z_vprintk>:
{
 8019cfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d02:	b087      	sub	sp, #28
 8019d04:	4606      	mov	r6, r0
 8019d06:	460d      	mov	r5, r1
 8019d08:	4614      	mov	r4, r2
 8019d0a:	9305      	str	r3, [sp, #20]
	char length_mod = 0;
 8019d0c:	2700      	movs	r7, #0
	int min_width = -1;
 8019d0e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
 8019d12:	46bb      	mov	fp, r7
	int might_format = 0; /* 1 if encountered a '%' */
 8019d14:	46b8      	mov	r8, r7
	while (*fmt) {
 8019d16:	e002      	b.n	8019d1e <z_vprintk+0x20>
				out((int)*fmt, ctx);
 8019d18:	4629      	mov	r1, r5
 8019d1a:	47b0      	blx	r6
		++fmt;
 8019d1c:	3401      	adds	r4, #1
	while (*fmt) {
 8019d1e:	7820      	ldrb	r0, [r4, #0]
 8019d20:	2800      	cmp	r0, #0
 8019d22:	f000 8174 	beq.w	801a00e <z_vprintk+0x310>
		if (!might_format) {
 8019d26:	f1b8 0f00 	cmp.w	r8, #0
 8019d2a:	d108      	bne.n	8019d3e <z_vprintk+0x40>
			if (*fmt != '%') {
 8019d2c:	2825      	cmp	r0, #37	; 0x25
 8019d2e:	d1f3      	bne.n	8019d18 <z_vprintk+0x1a>
				length_mod = 0;
 8019d30:	2700      	movs	r7, #0
				min_width = -1;
 8019d32:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				padding = PAD_NONE;
 8019d36:	46bb      	mov	fp, r7
				might_format = 1;
 8019d38:	f04f 0801 	mov.w	r8, #1
 8019d3c:	e7ee      	b.n	8019d1c <z_vprintk+0x1e>
			switch (*fmt) {
 8019d3e:	4602      	mov	r2, r0
 8019d40:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 8019d44:	2b55      	cmp	r3, #85	; 0x55
 8019d46:	f200 8150 	bhi.w	8019fea <z_vprintk+0x2ec>
 8019d4a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8019d4e:	0148      	.short	0x0148
 8019d50:	014e014e 	.word	0x014e014e
 8019d54:	014e014e 	.word	0x014e014e
 8019d58:	014e014e 	.word	0x014e014e
 8019d5c:	0157014e 	.word	0x0157014e
 8019d60:	014e014e 	.word	0x014e014e
 8019d64:	005d0056 	.word	0x005d0056
 8019d68:	005d005d 	.word	0x005d005d
 8019d6c:	005d005d 	.word	0x005d005d
 8019d70:	005d005d 	.word	0x005d005d
 8019d74:	005d005d 	.word	0x005d005d
 8019d78:	014e014e 	.word	0x014e014e
 8019d7c:	014e014e 	.word	0x014e014e
 8019d80:	014e014e 	.word	0x014e014e
 8019d84:	014e014e 	.word	0x014e014e
 8019d88:	014e014e 	.word	0x014e014e
 8019d8c:	014e014e 	.word	0x014e014e
 8019d90:	014e014e 	.word	0x014e014e
 8019d94:	014e014e 	.word	0x014e014e
 8019d98:	014e014e 	.word	0x014e014e
 8019d9c:	014e014e 	.word	0x014e014e
 8019da0:	014e014e 	.word	0x014e014e
 8019da4:	014e014e 	.word	0x014e014e
 8019da8:	014e014e 	.word	0x014e014e
 8019dac:	014e014e 	.word	0x014e014e
 8019db0:	014e014e 	.word	0x014e014e
 8019db4:	014e00ed 	.word	0x014e00ed
 8019db8:	014e014e 	.word	0x014e014e
 8019dbc:	014e014e 	.word	0x014e014e
 8019dc0:	014e014e 	.word	0x014e014e
 8019dc4:	014e014e 	.word	0x014e014e
 8019dc8:	013f014e 	.word	0x013f014e
 8019dcc:	014e0087 	.word	0x014e0087
 8019dd0:	014e014e 	.word	0x014e014e
 8019dd4:	00870070 	.word	0x00870070
 8019dd8:	014e014e 	.word	0x014e014e
 8019ddc:	014e0070 	.word	0x014e0070
 8019de0:	014e014e 	.word	0x014e014e
 8019de4:	014e00e3 	.word	0x014e00e3
 8019de8:	011a014e 	.word	0x011a014e
 8019dec:	0087014e 	.word	0x0087014e
 8019df0:	014e014e 	.word	0x014e014e
 8019df4:	014e00ed 	.word	0x014e00ed
 8019df8:	0070      	.short	0x0070
				if (min_width < 0 && padding == PAD_NONE) {
 8019dfa:	f1ba 0f00 	cmp.w	sl, #0
 8019dfe:	da03      	bge.n	8019e08 <z_vprintk+0x10a>
 8019e00:	f1bb 0f00 	cmp.w	fp, #0
 8019e04:	f000 80fd 	beq.w	801a002 <z_vprintk+0x304>
				if (min_width < 0) {
 8019e08:	f1ba 0f00 	cmp.w	sl, #0
 8019e0c:	db0c      	blt.n	8019e28 <z_vprintk+0x12a>
					min_width = 10 * min_width + *fmt - '0';
 8019e0e:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
 8019e12:	eb02 0a4a 	add.w	sl, r2, sl, lsl #1
 8019e16:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
				if (padding == PAD_NONE) {
 8019e1a:	f1bb 0f00 	cmp.w	fp, #0
 8019e1e:	f47f af7d 	bne.w	8019d1c <z_vprintk+0x1e>
					padding = PAD_SPACE_BEFORE;
 8019e22:	f04f 0b02 	mov.w	fp, #2
				goto still_might_format;
 8019e26:	e779      	b.n	8019d1c <z_vprintk+0x1e>
					min_width = *fmt - '0';
 8019e28:	f1a2 0a30 	sub.w	sl, r2, #48	; 0x30
 8019e2c:	e7f5      	b.n	8019e1a <z_vprintk+0x11c>
				if (*fmt == 'h' && length_mod == 'h') {
 8019e2e:	2868      	cmp	r0, #104	; 0x68
 8019e30:	d00b      	beq.n	8019e4a <z_vprintk+0x14c>
				} else if (*fmt == 'l' && length_mod == 'l') {
 8019e32:	286c      	cmp	r0, #108	; 0x6c
 8019e34:	d00e      	beq.n	8019e54 <z_vprintk+0x156>
				} else if (length_mod == 0) {
 8019e36:	b15f      	cbz	r7, 8019e50 <z_vprintk+0x152>
					out((int)'%', ctx);
 8019e38:	4629      	mov	r1, r5
 8019e3a:	2025      	movs	r0, #37	; 0x25
 8019e3c:	47b0      	blx	r6
					out((int)*fmt, ctx);
 8019e3e:	4629      	mov	r1, r5
 8019e40:	7820      	ldrb	r0, [r4, #0]
 8019e42:	47b0      	blx	r6
			might_format = 0;
 8019e44:	f04f 0800 	mov.w	r8, #0
					break;
 8019e48:	e768      	b.n	8019d1c <z_vprintk+0x1e>
				if (*fmt == 'h' && length_mod == 'h') {
 8019e4a:	2f68      	cmp	r7, #104	; 0x68
 8019e4c:	d1f1      	bne.n	8019e32 <z_vprintk+0x134>
					length_mod = 'H';
 8019e4e:	2048      	movs	r0, #72	; 0x48
				goto still_might_format;
 8019e50:	4607      	mov	r7, r0
 8019e52:	e763      	b.n	8019d1c <z_vprintk+0x1e>
				} else if (*fmt == 'l' && length_mod == 'l') {
 8019e54:	2f6c      	cmp	r7, #108	; 0x6c
 8019e56:	d1ee      	bne.n	8019e36 <z_vprintk+0x138>
					length_mod = 'L';
 8019e58:	204c      	movs	r0, #76	; 0x4c
 8019e5a:	e7f9      	b.n	8019e50 <z_vprintk+0x152>
				if (length_mod == 'z') {
 8019e5c:	2f7a      	cmp	r7, #122	; 0x7a
 8019e5e:	d00d      	beq.n	8019e7c <z_vprintk+0x17e>
				} else if (length_mod == 'l') {
 8019e60:	2f6c      	cmp	r7, #108	; 0x6c
 8019e62:	d030      	beq.n	8019ec6 <z_vprintk+0x1c8>
				} else if (length_mod == 'L') {
 8019e64:	2f4c      	cmp	r7, #76	; 0x4c
 8019e66:	d036      	beq.n	8019ed6 <z_vprintk+0x1d8>
				} else if (*fmt == 'u') {
 8019e68:	2875      	cmp	r0, #117	; 0x75
 8019e6a:	d04b      	beq.n	8019f04 <z_vprintk+0x206>
					d = va_arg(ap, int);
 8019e6c:	9b05      	ldr	r3, [sp, #20]
 8019e6e:	1d1a      	adds	r2, r3, #4
 8019e70:	9205      	str	r2, [sp, #20]
 8019e72:	681b      	ldr	r3, [r3, #0]
 8019e74:	4698      	mov	r8, r3
 8019e76:	ea4f 79e3 	mov.w	r9, r3, asr #31
 8019e7a:	e006      	b.n	8019e8a <z_vprintk+0x18c>
					d = va_arg(ap, ssize_t);
 8019e7c:	9b05      	ldr	r3, [sp, #20]
 8019e7e:	1d1a      	adds	r2, r3, #4
 8019e80:	9205      	str	r2, [sp, #20]
 8019e82:	681b      	ldr	r3, [r3, #0]
 8019e84:	4698      	mov	r8, r3
 8019e86:	ea4f 79e3 	mov.w	r9, r3, asr #31
				if (*fmt != 'u' && negative(d)) {
 8019e8a:	7823      	ldrb	r3, [r4, #0]
 8019e8c:	2b75      	cmp	r3, #117	; 0x75
 8019e8e:	d00d      	beq.n	8019eac <z_vprintk+0x1ae>
 8019e90:	4640      	mov	r0, r8
 8019e92:	4649      	mov	r1, r9
 8019e94:	f7ff ff18 	bl	8019cc8 <negative>
 8019e98:	b140      	cbz	r0, 8019eac <z_vprintk+0x1ae>
					out((int)'-', ctx);
 8019e9a:	4629      	mov	r1, r5
 8019e9c:	202d      	movs	r0, #45	; 0x2d
 8019e9e:	47b0      	blx	r6
					d = -d;
 8019ea0:	f1d8 0800 	rsbs	r8, r8, #0
 8019ea4:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
					min_width--;
 8019ea8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				print_dec(out, ctx, d, padding, min_width);
 8019eac:	f8cd a004 	str.w	sl, [sp, #4]
 8019eb0:	f8cd b000 	str.w	fp, [sp]
 8019eb4:	4642      	mov	r2, r8
 8019eb6:	464b      	mov	r3, r9
 8019eb8:	4629      	mov	r1, r5
 8019eba:	4630      	mov	r0, r6
 8019ebc:	f7ff feec 	bl	8019c98 <print_dec>
			might_format = 0;
 8019ec0:	f04f 0800 	mov.w	r8, #0
				break;
 8019ec4:	e72a      	b.n	8019d1c <z_vprintk+0x1e>
					d = va_arg(ap, long);
 8019ec6:	9b05      	ldr	r3, [sp, #20]
 8019ec8:	1d1a      	adds	r2, r3, #4
 8019eca:	9205      	str	r2, [sp, #20]
 8019ecc:	681b      	ldr	r3, [r3, #0]
 8019ece:	4698      	mov	r8, r3
 8019ed0:	ea4f 79e3 	mov.w	r9, r3, asr #31
 8019ed4:	e7d9      	b.n	8019e8a <z_vprintk+0x18c>
					long long lld = va_arg(ap, long long);
 8019ed6:	9b05      	ldr	r3, [sp, #20]
 8019ed8:	3307      	adds	r3, #7
 8019eda:	f023 0307 	bic.w	r3, r3, #7
 8019ede:	f103 0208 	add.w	r2, r3, #8
 8019ee2:	9205      	str	r2, [sp, #20]
 8019ee4:	681a      	ldr	r2, [r3, #0]
 8019ee6:	685b      	ldr	r3, [r3, #4]
					if (!ok64(out, ctx, lld)) {
 8019ee8:	9203      	str	r2, [sp, #12]
 8019eea:	9304      	str	r3, [sp, #16]
 8019eec:	4629      	mov	r1, r5
 8019eee:	4630      	mov	r0, r6
 8019ef0:	f7ff fee8 	bl	8019cc4 <ok64>
 8019ef4:	2800      	cmp	r0, #0
 8019ef6:	f000 8087 	beq.w	801a008 <z_vprintk+0x30a>
					d = (printk_val_t) lld;
 8019efa:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8019efe:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8019f02:	e7c2      	b.n	8019e8a <z_vprintk+0x18c>
					d = va_arg(ap, unsigned int);
 8019f04:	9b05      	ldr	r3, [sp, #20]
 8019f06:	1d1a      	adds	r2, r3, #4
 8019f08:	9205      	str	r2, [sp, #20]
 8019f0a:	681b      	ldr	r3, [r3, #0]
 8019f0c:	4698      	mov	r8, r3
 8019f0e:	f04f 0900 	mov.w	r9, #0
 8019f12:	e7ba      	b.n	8019e8a <z_vprintk+0x18c>
				out('0', ctx);
 8019f14:	4629      	mov	r1, r5
 8019f16:	2030      	movs	r0, #48	; 0x30
 8019f18:	47b0      	blx	r6
				out('x', ctx);
 8019f1a:	4629      	mov	r1, r5
 8019f1c:	2078      	movs	r0, #120	; 0x78
 8019f1e:	47b0      	blx	r6
				min_width = sizeof(void *) * 2;
 8019f20:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
 8019f24:	f04f 0b01 	mov.w	fp, #1
				if (*fmt == 'p') {
 8019f28:	7823      	ldrb	r3, [r4, #0]
 8019f2a:	2b70      	cmp	r3, #112	; 0x70
 8019f2c:	d009      	beq.n	8019f42 <z_vprintk+0x244>
				} else if (length_mod == 'l') {
 8019f2e:	2f6c      	cmp	r7, #108	; 0x6c
 8019f30:	d017      	beq.n	8019f62 <z_vprintk+0x264>
				} else if (length_mod == 'L') {
 8019f32:	2f4c      	cmp	r7, #76	; 0x4c
 8019f34:	d01b      	beq.n	8019f6e <z_vprintk+0x270>
					x = va_arg(ap, unsigned int);
 8019f36:	9b05      	ldr	r3, [sp, #20]
 8019f38:	1d1a      	adds	r2, r3, #4
 8019f3a:	9205      	str	r2, [sp, #20]
 8019f3c:	681a      	ldr	r2, [r3, #0]
 8019f3e:	2300      	movs	r3, #0
 8019f40:	e004      	b.n	8019f4c <z_vprintk+0x24e>
					x = (uintptr_t)va_arg(ap, void *);
 8019f42:	9b05      	ldr	r3, [sp, #20]
 8019f44:	1d1a      	adds	r2, r3, #4
 8019f46:	9205      	str	r2, [sp, #20]
 8019f48:	681a      	ldr	r2, [r3, #0]
 8019f4a:	2300      	movs	r3, #0
				print_hex(out, ctx, x, padding, min_width);
 8019f4c:	f8cd a004 	str.w	sl, [sp, #4]
 8019f50:	f8cd b000 	str.w	fp, [sp]
 8019f54:	4629      	mov	r1, r5
 8019f56:	4630      	mov	r0, r6
 8019f58:	f7ff fe88 	bl	8019c6c <print_hex>
			might_format = 0;
 8019f5c:	f04f 0800 	mov.w	r8, #0
				break;
 8019f60:	e6dc      	b.n	8019d1c <z_vprintk+0x1e>
					x = va_arg(ap, unsigned long);
 8019f62:	9b05      	ldr	r3, [sp, #20]
 8019f64:	1d1a      	adds	r2, r3, #4
 8019f66:	9205      	str	r2, [sp, #20]
 8019f68:	681a      	ldr	r2, [r3, #0]
 8019f6a:	2300      	movs	r3, #0
 8019f6c:	e7ee      	b.n	8019f4c <z_vprintk+0x24e>
					x = va_arg(ap, unsigned long long);
 8019f6e:	9b05      	ldr	r3, [sp, #20]
 8019f70:	3307      	adds	r3, #7
 8019f72:	f023 0307 	bic.w	r3, r3, #7
 8019f76:	f103 0208 	add.w	r2, r3, #8
 8019f7a:	9205      	str	r2, [sp, #20]
 8019f7c:	681a      	ldr	r2, [r3, #0]
 8019f7e:	685b      	ldr	r3, [r3, #4]
 8019f80:	e7e4      	b.n	8019f4c <z_vprintk+0x24e>
				char *s = va_arg(ap, char *);
 8019f82:	9b05      	ldr	r3, [sp, #20]
 8019f84:	1d1a      	adds	r2, r3, #4
 8019f86:	9205      	str	r2, [sp, #20]
 8019f88:	f8d3 9000 	ldr.w	r9, [r3]
 8019f8c:	46c8      	mov	r8, r9
				while (*s) {
 8019f8e:	e003      	b.n	8019f98 <z_vprintk+0x29a>
					out((int)(*s++), ctx);
 8019f90:	f108 0801 	add.w	r8, r8, #1
 8019f94:	4629      	mov	r1, r5
 8019f96:	47b0      	blx	r6
				while (*s) {
 8019f98:	f898 0000 	ldrb.w	r0, [r8]
 8019f9c:	2800      	cmp	r0, #0
 8019f9e:	d1f7      	bne.n	8019f90 <z_vprintk+0x292>
				if (padding == PAD_SPACE_AFTER) {
 8019fa0:	f1bb 0f03 	cmp.w	fp, #3
 8019fa4:	d002      	beq.n	8019fac <z_vprintk+0x2ae>
			might_format = 0;
 8019fa6:	f04f 0800 	mov.w	r8, #0
 8019faa:	e6b7      	b.n	8019d1c <z_vprintk+0x1e>
					int remaining = min_width - (s - start);
 8019fac:	eba8 0309 	sub.w	r3, r8, r9
 8019fb0:	ebaa 0303 	sub.w	r3, sl, r3
					while (remaining-- > 0) {
 8019fb4:	e003      	b.n	8019fbe <z_vprintk+0x2c0>
						out(' ', ctx);
 8019fb6:	4629      	mov	r1, r5
 8019fb8:	2020      	movs	r0, #32
 8019fba:	47b0      	blx	r6
					while (remaining-- > 0) {
 8019fbc:	4643      	mov	r3, r8
 8019fbe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	dcf7      	bgt.n	8019fb6 <z_vprintk+0x2b8>
			might_format = 0;
 8019fc6:	f04f 0800 	mov.w	r8, #0
 8019fca:	e6a7      	b.n	8019d1c <z_vprintk+0x1e>
				int c = va_arg(ap, int);
 8019fcc:	9b05      	ldr	r3, [sp, #20]
 8019fce:	1d1a      	adds	r2, r3, #4
 8019fd0:	9205      	str	r2, [sp, #20]
				out(c, ctx);
 8019fd2:	4629      	mov	r1, r5
 8019fd4:	6818      	ldr	r0, [r3, #0]
 8019fd6:	47b0      	blx	r6
			might_format = 0;
 8019fd8:	f04f 0800 	mov.w	r8, #0
				break;
 8019fdc:	e69e      	b.n	8019d1c <z_vprintk+0x1e>
				out((int)'%', ctx);
 8019fde:	4629      	mov	r1, r5
 8019fe0:	2025      	movs	r0, #37	; 0x25
 8019fe2:	47b0      	blx	r6
			might_format = 0;
 8019fe4:	f04f 0800 	mov.w	r8, #0
				break;
 8019fe8:	e698      	b.n	8019d1c <z_vprintk+0x1e>
				out((int)'%', ctx);
 8019fea:	4629      	mov	r1, r5
 8019fec:	2025      	movs	r0, #37	; 0x25
 8019fee:	47b0      	blx	r6
				out((int)*fmt, ctx);
 8019ff0:	4629      	mov	r1, r5
 8019ff2:	7820      	ldrb	r0, [r4, #0]
 8019ff4:	47b0      	blx	r6
			might_format = 0;
 8019ff6:	f04f 0800 	mov.w	r8, #0
				break;
 8019ffa:	e68f      	b.n	8019d1c <z_vprintk+0x1e>
			switch (*fmt) {
 8019ffc:	f04f 0b03 	mov.w	fp, #3
 801a000:	e68c      	b.n	8019d1c <z_vprintk+0x1e>
					padding = PAD_ZERO_BEFORE;
 801a002:	f04f 0b01 	mov.w	fp, #1
 801a006:	e689      	b.n	8019d1c <z_vprintk+0x1e>
			might_format = 0;
 801a008:	f04f 0800 	mov.w	r8, #0
 801a00c:	e686      	b.n	8019d1c <z_vprintk+0x1e>
}
 801a00e:	b007      	add	sp, #28
 801a010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a014 <printk>:
{
 801a014:	b40f      	push	{r0, r1, r2, r3}
 801a016:	b500      	push	{lr}
 801a018:	b083      	sub	sp, #12
 801a01a:	a904      	add	r1, sp, #16
 801a01c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 801a020:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
 801a022:	f7eb f96b 	bl	80052fc <vprintk>
}
 801a026:	b003      	add	sp, #12
 801a028:	f85d eb04 	ldr.w	lr, [sp], #4
 801a02c:	b004      	add	sp, #16
 801a02e:	4770      	bx	lr

0801a030 <snprintk>:
{
 801a030:	b40c      	push	{r2, r3}
 801a032:	b500      	push	{lr}
 801a034:	b083      	sub	sp, #12
 801a036:	ab04      	add	r3, sp, #16
 801a038:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
 801a03c:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
 801a03e:	f7eb f96d 	bl	800531c <vsnprintk>
}
 801a042:	b003      	add	sp, #12
 801a044:	f85d eb04 	ldr.w	lr, [sp], #4
 801a048:	b002      	add	sp, #8
 801a04a:	4770      	bx	lr

0801a04c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 801a04c:	b508      	push	{r3, lr}
 801a04e:	4604      	mov	r4, r0
 801a050:	4608      	mov	r0, r1
 801a052:	4611      	mov	r1, r2
	entry(p1, p2, p3);
 801a054:	461a      	mov	r2, r3
 801a056:	47a0      	blx	r4
	return z_impl_k_current_get();
 801a058:	f7fe fdf0 	bl	8018c3c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
 801a05c:	f7f1 fcf6 	bl	800ba4c <z_impl_k_thread_abort>

0801a060 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
 801a060:	b538      	push	{r3, r4, r5, lr}
 801a062:	4604      	mov	r4, r0
	struct k_work_q *work_q = work_q_ptr;
 801a064:	e001      	b.n	801a06a <z_work_q_main+0xa>
	z_impl_k_yield();
 801a066:	f7fe fd3d 	bl	8018ae4 <z_impl_k_yield>
	return z_impl_k_queue_get(queue, timeout);
 801a06a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a06e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a072:	4620      	mov	r0, r4
 801a074:	f7fe f9e6 	bl	8018444 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
 801a078:	4603      	mov	r3, r0
 801a07a:	2800      	cmp	r0, #0
 801a07c:	d0f5      	beq.n	801a06a <z_work_q_main+0xa>
			continue;
		}

		handler = work->handler;
 801a07e:	6845      	ldr	r5, [r0, #4]
		__ASSERT(handler != NULL, "handler must be provided");

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
 801a080:	f100 0208 	add.w	r2, r0, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 801a084:	f3bf 8f5b 	dmb	ish
 801a088:	e852 1f00 	ldrex	r1, [r2]
 801a08c:	f021 0001 	bic.w	r0, r1, #1
 801a090:	e842 0c00 	strex	ip, r0, [r2]
 801a094:	f1bc 0f00 	cmp.w	ip, #0
 801a098:	d1f6      	bne.n	801a088 <z_work_q_main+0x28>
 801a09a:	f3bf 8f5b 	dmb	ish
 801a09e:	f011 0f01 	tst.w	r1, #1
 801a0a2:	d0e0      	beq.n	801a066 <z_work_q_main+0x6>
					      K_WORK_STATE_PENDING)) {
			handler(work);
 801a0a4:	4618      	mov	r0, r3
 801a0a6:	47a8      	blx	r5
 801a0a8:	e7dd      	b.n	801a066 <z_work_q_main+0x6>

0801a0aa <chunk_mem>:
#include "heap.h"

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
 801a0aa:	00c9      	lsls	r1, r1, #3
	return big_heap_chunks(bytes / CHUNK_UNIT);
}

static inline bool big_heap(struct z_heap *h)
{
	return big_heap_chunks(h->len);
 801a0ac:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
 801a0ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a0b2:	d303      	bcc.n	801a0bc <chunk_mem+0x12>
 801a0b4:	2308      	movs	r3, #8
 801a0b6:	4419      	add	r1, r3

	CHECK(!(((size_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
 801a0b8:	4408      	add	r0, r1
 801a0ba:	4770      	bx	lr
 801a0bc:	2304      	movs	r3, #4
 801a0be:	e7fa      	b.n	801a0b6 <chunk_mem+0xc>

0801a0c0 <free_list_remove_bidx>:

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
 801a0c0:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
 801a0c2:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	return big_heap_chunks(h->len);
 801a0c6:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 801a0c8:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 801a0cc:	d317      	bcc.n	801a0fe <free_list_remove_bidx+0x3e>
		return ((uint32_t *)cmem)[f];
 801a0ce:	68eb      	ldr	r3, [r5, #12]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
 801a0d0:	4299      	cmp	r1, r3
 801a0d2:	d016      	beq.n	801a102 <free_list_remove_bidx+0x42>
	if (big_heap(h)) {
 801a0d4:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 801a0d8:	d320      	bcc.n	801a11c <free_list_remove_bidx+0x5c>
		return ((uint32_t *)cmem)[f];
 801a0da:	68a9      	ldr	r1, [r5, #8]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
 801a0dc:	3204      	adds	r2, #4
 801a0de:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	void *cmem = &buf[c];
 801a0e2:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
 801a0e6:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 801a0ea:	d319      	bcc.n	801a120 <free_list_remove_bidx+0x60>
		((uint32_t *)cmem)[f] = val;
 801a0ec:	60d3      	str	r3, [r2, #12]
	void *cmem = &buf[c];
 801a0ee:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
	return big_heap_chunks(h->len);
 801a0f2:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
 801a0f4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 801a0f8:	d314      	bcc.n	801a124 <free_list_remove_bidx+0x64>
		((uint32_t *)cmem)[f] = val;
 801a0fa:	6099      	str	r1, [r3, #8]
 801a0fc:	e00c      	b.n	801a118 <free_list_remove_bidx+0x58>
		return ((uint16_t *)cmem)[f];
 801a0fe:	88eb      	ldrh	r3, [r5, #6]
 801a100:	e7e6      	b.n	801a0d0 <free_list_remove_bidx+0x10>
		h->avail_buckets &= ~(1 << bidx);
 801a102:	2301      	movs	r3, #1
 801a104:	fa03 f102 	lsl.w	r1, r3, r2
 801a108:	68c3      	ldr	r3, [r0, #12]
 801a10a:	ea23 0301 	bic.w	r3, r3, r1
 801a10e:	60c3      	str	r3, [r0, #12]
		b->next = 0;
 801a110:	3204      	adds	r2, #4
 801a112:	2300      	movs	r3, #0
 801a114:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
 801a118:	bc30      	pop	{r4, r5}
 801a11a:	4770      	bx	lr
 801a11c:	88a9      	ldrh	r1, [r5, #4]
 801a11e:	e7dd      	b.n	801a0dc <free_list_remove_bidx+0x1c>
		((uint16_t *)cmem)[f] = val;
 801a120:	80d3      	strh	r3, [r2, #6]
 801a122:	e7e4      	b.n	801a0ee <free_list_remove_bidx+0x2e>
 801a124:	8099      	strh	r1, [r3, #4]
 801a126:	e7f7      	b.n	801a118 <free_list_remove_bidx+0x58>

0801a128 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
 801a128:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0) {
 801a12a:	1d13      	adds	r3, r2, #4
 801a12c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801a130:	b9d3      	cbnz	r3, 801a168 <free_list_add_bidx+0x40>
		CHECK((h->avail_buckets & (1 << bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << bidx);
 801a132:	2301      	movs	r3, #1
 801a134:	fa03 f402 	lsl.w	r4, r3, r2
 801a138:	68c3      	ldr	r3, [r0, #12]
 801a13a:	4323      	orrs	r3, r4
 801a13c:	60c3      	str	r3, [r0, #12]
		b->next = c;
 801a13e:	3204      	adds	r2, #4
 801a140:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
 801a144:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->len);
 801a148:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
 801a14a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 801a14e:	d307      	bcc.n	801a160 <free_list_add_bidx+0x38>
		((uint32_t *)cmem)[f] = val;
 801a150:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->len);
 801a152:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
 801a154:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 801a158:	d304      	bcc.n	801a164 <free_list_add_bidx+0x3c>
		((uint32_t *)cmem)[f] = val;
 801a15a:	60d9      	str	r1, [r3, #12]
		set_prev_free_chunk(h, c, first);
		set_next_free_chunk(h, c, second);
		set_next_free_chunk(h, first, c);
		set_prev_free_chunk(h, second, c);
	}
}
 801a15c:	bc70      	pop	{r4, r5, r6}
 801a15e:	4770      	bx	lr
		((uint16_t *)cmem)[f] = val;
 801a160:	8099      	strh	r1, [r3, #4]
 801a162:	e7f6      	b.n	801a152 <free_list_add_bidx+0x2a>
 801a164:	80d9      	strh	r1, [r3, #6]
 801a166:	e7f9      	b.n	801a15c <free_list_add_bidx+0x34>
	void *cmem = &buf[c];
 801a168:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
	return big_heap_chunks(h->len);
 801a16c:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
 801a16e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 801a172:	d318      	bcc.n	801a1a6 <free_list_add_bidx+0x7e>
		return ((uint32_t *)cmem)[f];
 801a174:	68a2      	ldr	r2, [r4, #8]
	void *cmem = &buf[c];
 801a176:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	if (big_heap(h)) {
 801a17a:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 801a17e:	d314      	bcc.n	801a1aa <free_list_add_bidx+0x82>
		((uint32_t *)cmem)[f] = val;
 801a180:	60aa      	str	r2, [r5, #8]
	return big_heap_chunks(h->len);
 801a182:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
 801a184:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 801a188:	d311      	bcc.n	801a1ae <free_list_add_bidx+0x86>
		((uint32_t *)cmem)[f] = val;
 801a18a:	60eb      	str	r3, [r5, #12]
	void *cmem = &buf[c];
 801a18c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->len);
 801a190:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
 801a192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a196:	d30c      	bcc.n	801a1b2 <free_list_add_bidx+0x8a>
		((uint32_t *)cmem)[f] = val;
 801a198:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->len);
 801a19a:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
 801a19c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a1a0:	d309      	bcc.n	801a1b6 <free_list_add_bidx+0x8e>
		((uint32_t *)cmem)[f] = val;
 801a1a2:	60a1      	str	r1, [r4, #8]
 801a1a4:	e7da      	b.n	801a15c <free_list_add_bidx+0x34>
		return ((uint16_t *)cmem)[f];
 801a1a6:	88a2      	ldrh	r2, [r4, #4]
 801a1a8:	e7e5      	b.n	801a176 <free_list_add_bidx+0x4e>
		((uint16_t *)cmem)[f] = val;
 801a1aa:	80aa      	strh	r2, [r5, #4]
 801a1ac:	e7e9      	b.n	801a182 <free_list_add_bidx+0x5a>
 801a1ae:	80eb      	strh	r3, [r5, #6]
 801a1b0:	e7ec      	b.n	801a18c <free_list_add_bidx+0x64>
 801a1b2:	80d1      	strh	r1, [r2, #6]
 801a1b4:	e7f1      	b.n	801a19a <free_list_add_bidx+0x72>
 801a1b6:	80a1      	strh	r1, [r4, #4]
 801a1b8:	e7d0      	b.n	801a15c <free_list_add_bidx+0x34>

0801a1ba <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
 801a1ba:	b470      	push	{r4, r5, r6}
	void *cmem = &buf[c];
 801a1bc:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	return big_heap_chunks(h->len);
 801a1c0:	6885      	ldr	r5, [r0, #8]
	if (big_heap(h)) {
 801a1c2:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 801a1c6:	d325      	bcc.n	801a214 <split_chunks+0x5a>
		return ((uint32_t *)cmem)[f];
 801a1c8:	6866      	ldr	r6, [r4, #4]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	size_t sz0 = chunk_size(h, lc);
	size_t lsz = rc - lc;
 801a1ca:	1a53      	subs	r3, r2, r1
	size_t rsz = sz0 - lsz;
 801a1cc:	1a89      	subs	r1, r1, r2
 801a1ce:	eb01 0156 	add.w	r1, r1, r6, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 801a1d2:	005e      	lsls	r6, r3, #1
	if (big_heap(h)) {
 801a1d4:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 801a1d8:	d31e      	bcc.n	801a218 <split_chunks+0x5e>
		((uint32_t *)cmem)[f] = val;
 801a1da:	6066      	str	r6, [r4, #4]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 801a1dc:	004d      	lsls	r5, r1, #1
	void *cmem = &buf[c];
 801a1de:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
	return big_heap_chunks(h->len);
 801a1e2:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
 801a1e4:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 801a1e8:	d318      	bcc.n	801a21c <split_chunks+0x62>
		((uint32_t *)cmem)[f] = val;
 801a1ea:	6065      	str	r5, [r4, #4]
	return big_heap_chunks(h->len);
 801a1ec:	6885      	ldr	r5, [r0, #8]
	if (big_heap(h)) {
 801a1ee:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 801a1f2:	d315      	bcc.n	801a220 <split_chunks+0x66>
		((uint32_t *)cmem)[f] = val;
 801a1f4:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
	return big_heap_chunks(h->len);
 801a1f8:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
 801a1fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a1fe:	d312      	bcc.n	801a226 <split_chunks+0x6c>
		return ((uint32_t *)cmem)[f];
 801a200:	6864      	ldr	r4, [r4, #4]
	return c + chunk_size(h, c);
 801a202:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
 801a206:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a20a:	d30e      	bcc.n	801a22a <split_chunks+0x70>
		((uint32_t *)cmem)[f] = val;
 801a20c:	f840 1032 	str.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
 801a210:	bc70      	pop	{r4, r5, r6}
 801a212:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
 801a214:	8866      	ldrh	r6, [r4, #2]
 801a216:	e7d8      	b.n	801a1ca <split_chunks+0x10>
		((uint16_t *)cmem)[f] = val;
 801a218:	8066      	strh	r6, [r4, #2]
 801a21a:	e7df      	b.n	801a1dc <split_chunks+0x22>
 801a21c:	8065      	strh	r5, [r4, #2]
 801a21e:	e7e5      	b.n	801a1ec <split_chunks+0x32>
 801a220:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
 801a224:	e7e8      	b.n	801a1f8 <split_chunks+0x3e>
		return ((uint16_t *)cmem)[f];
 801a226:	8864      	ldrh	r4, [r4, #2]
 801a228:	e7eb      	b.n	801a202 <split_chunks+0x48>
		((uint16_t *)cmem)[f] = val;
 801a22a:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]
 801a22e:	e7ef      	b.n	801a210 <split_chunks+0x56>

0801a230 <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
 801a230:	b470      	push	{r4, r5, r6}
	void *cmem = &buf[c];
 801a232:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	return big_heap_chunks(h->len);
 801a236:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 801a238:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 801a23c:	d31c      	bcc.n	801a278 <merge_chunks+0x48>
		return ((uint32_t *)cmem)[f];
 801a23e:	684b      	ldr	r3, [r1, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 801a240:	085b      	lsrs	r3, r3, #1
	void *cmem = &buf[c];
 801a242:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
	if (big_heap(h)) {
 801a246:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 801a24a:	d317      	bcc.n	801a27c <merge_chunks+0x4c>
		return ((uint32_t *)cmem)[f];
 801a24c:	686e      	ldr	r6, [r5, #4]
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
 801a24e:	eb03 0356 	add.w	r3, r3, r6, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 801a252:	005e      	lsls	r6, r3, #1
	if (big_heap(h)) {
 801a254:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 801a258:	d312      	bcc.n	801a280 <merge_chunks+0x50>
		((uint32_t *)cmem)[f] = val;
 801a25a:	604e      	str	r6, [r1, #4]
	return big_heap_chunks(h->len);
 801a25c:	6881      	ldr	r1, [r0, #8]
	if (big_heap(h)) {
 801a25e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 801a262:	d30f      	bcc.n	801a284 <merge_chunks+0x54>
		return ((uint32_t *)cmem)[f];
 801a264:	686c      	ldr	r4, [r5, #4]
	return c + chunk_size(h, c);
 801a266:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
 801a26a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 801a26e:	d30b      	bcc.n	801a288 <merge_chunks+0x58>
		((uint32_t *)cmem)[f] = val;
 801a270:	f840 3032 	str.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
 801a274:	bc70      	pop	{r4, r5, r6}
 801a276:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
 801a278:	884b      	ldrh	r3, [r1, #2]
 801a27a:	e7e1      	b.n	801a240 <merge_chunks+0x10>
 801a27c:	886e      	ldrh	r6, [r5, #2]
 801a27e:	e7e6      	b.n	801a24e <merge_chunks+0x1e>
		((uint16_t *)cmem)[f] = val;
 801a280:	804e      	strh	r6, [r1, #2]
 801a282:	e7eb      	b.n	801a25c <merge_chunks+0x2c>
		return ((uint16_t *)cmem)[f];
 801a284:	886c      	ldrh	r4, [r5, #2]
 801a286:	e7ee      	b.n	801a266 <merge_chunks+0x36>
		((uint16_t *)cmem)[f] = val;
 801a288:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
 801a28c:	e7f2      	b.n	801a274 <merge_chunks+0x44>

0801a28e <mem_to_chunkid>:
	return big_heap_chunks(h->len);
 801a28e:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) ? 8 : 4;
 801a290:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a294:	d305      	bcc.n	801a2a2 <mem_to_chunkid+0x14>
 801a296:	2308      	movs	r3, #8
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 801a298:	1ac9      	subs	r1, r1, r3
 801a29a:	1a08      	subs	r0, r1, r0
 801a29c:	d403      	bmi.n	801a2a6 <mem_to_chunkid+0x18>
}
 801a29e:	10c0      	asrs	r0, r0, #3
 801a2a0:	4770      	bx	lr
 801a2a2:	2304      	movs	r3, #4
 801a2a4:	e7f8      	b.n	801a298 <mem_to_chunkid+0xa>
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 801a2a6:	3007      	adds	r0, #7
 801a2a8:	e7f9      	b.n	801a29e <mem_to_chunkid+0x10>

0801a2aa <free_list_remove>:
{
 801a2aa:	b508      	push	{r3, lr}
	return big_heap_chunks(h->len);
 801a2ac:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1;
 801a2ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a2b2:	d307      	bcc.n	801a2c4 <free_list_remove+0x1a>
	void *cmem = &buf[c];
 801a2b4:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
 801a2b8:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 801a2ba:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1;
 801a2bc:	2a01      	cmp	r2, #1
 801a2be:	d002      	beq.n	801a2c6 <free_list_remove+0x1c>
 801a2c0:	2200      	movs	r2, #0
 801a2c2:	e000      	b.n	801a2c6 <free_list_remove+0x1c>
 801a2c4:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
 801a2c6:	b9a2      	cbnz	r2, 801a2f2 <free_list_remove+0x48>
	void *cmem = &buf[c];
 801a2c8:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
 801a2cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a2d0:	d310      	bcc.n	801a2f4 <free_list_remove+0x4a>
		return ((uint32_t *)cmem)[f];
 801a2d2:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 801a2d4:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
 801a2d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a2da:	d30d      	bcc.n	801a2f8 <free_list_remove+0x4e>
 801a2dc:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline size_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
 801a2de:	3308      	adds	r3, #8
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
 801a2e0:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
 801a2e4:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
 801a2e6:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
 801a2ea:	f1c2 021f 	rsb	r2, r2, #31
 801a2ee:	f7ff fee7 	bl	801a0c0 <free_list_remove_bidx>
}
 801a2f2:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
 801a2f4:	8852      	ldrh	r2, [r2, #2]
 801a2f6:	e7ed      	b.n	801a2d4 <free_list_remove+0x2a>
	return big_heap(h) ? 8 : 4;
 801a2f8:	2304      	movs	r3, #4
 801a2fa:	e7f0      	b.n	801a2de <free_list_remove+0x34>

0801a2fc <free_list_add>:
{
 801a2fc:	b508      	push	{r3, lr}
	return big_heap_chunks(h->len);
 801a2fe:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1;
 801a300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a304:	d307      	bcc.n	801a316 <free_list_add+0x1a>
	void *cmem = &buf[c];
 801a306:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
 801a30a:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 801a30c:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1;
 801a30e:	2a01      	cmp	r2, #1
 801a310:	d002      	beq.n	801a318 <free_list_add+0x1c>
 801a312:	2200      	movs	r2, #0
 801a314:	e000      	b.n	801a318 <free_list_add+0x1c>
 801a316:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
 801a318:	b9a2      	cbnz	r2, 801a344 <free_list_add+0x48>
	void *cmem = &buf[c];
 801a31a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
 801a31e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a322:	d310      	bcc.n	801a346 <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
 801a324:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 801a326:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
 801a328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a32c:	d30d      	bcc.n	801a34a <free_list_add+0x4e>
 801a32e:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
 801a330:	3308      	adds	r3, #8
	size_t usable_sz = sz - min_chunk_size(h) + 1;
 801a332:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
 801a336:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
 801a338:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
 801a33c:	f1c2 021f 	rsb	r2, r2, #31
 801a340:	f7ff fef2 	bl	801a128 <free_list_add_bidx>
}
 801a344:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
 801a346:	8852      	ldrh	r2, [r2, #2]
 801a348:	e7ed      	b.n	801a326 <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
 801a34a:	2304      	movs	r3, #4
 801a34c:	e7f0      	b.n	801a330 <free_list_add+0x34>

0801a34e <free_chunk>:
{
 801a34e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a350:	4604      	mov	r4, r0
 801a352:	460d      	mov	r5, r1
	void *cmem = &buf[c];
 801a354:	00ce      	lsls	r6, r1, #3
 801a356:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
	return big_heap_chunks(h->len);
 801a35a:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
 801a35c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a360:	d31f      	bcc.n	801a3a2 <free_chunk+0x54>
		return ((uint32_t *)cmem)[f];
 801a362:	6879      	ldr	r1, [r7, #4]
	return c + chunk_size(h, c);
 801a364:	eb05 0151 	add.w	r1, r5, r1, lsr #1
	void *cmem = &buf[c];
 801a368:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
 801a36c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a370:	d319      	bcc.n	801a3a6 <free_chunk+0x58>
		return ((uint32_t *)cmem)[f];
 801a372:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, right_chunk(h, c))) {
 801a374:	f013 0f01 	tst.w	r3, #1
 801a378:	d017      	beq.n	801a3aa <free_chunk+0x5c>
	return big_heap_chunks(h->len);
 801a37a:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
 801a37c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a380:	d324      	bcc.n	801a3cc <free_chunk+0x7e>
		return ((uint32_t *)cmem)[f];
 801a382:	59a1      	ldr	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
 801a384:	1a69      	subs	r1, r5, r1
	void *cmem = &buf[c];
 801a386:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
 801a38a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a38e:	d31f      	bcc.n	801a3d0 <free_chunk+0x82>
		return ((uint32_t *)cmem)[f];
 801a390:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, left_chunk(h, c))) {
 801a392:	f013 0f01 	tst.w	r3, #1
 801a396:	d01d      	beq.n	801a3d4 <free_chunk+0x86>
	free_list_add(h, c);
 801a398:	4629      	mov	r1, r5
 801a39a:	4620      	mov	r0, r4
 801a39c:	f7ff ffae 	bl	801a2fc <free_list_add>
}
 801a3a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ((uint16_t *)cmem)[f];
 801a3a2:	8879      	ldrh	r1, [r7, #2]
 801a3a4:	e7de      	b.n	801a364 <free_chunk+0x16>
 801a3a6:	8853      	ldrh	r3, [r2, #2]
 801a3a8:	e7e4      	b.n	801a374 <free_chunk+0x26>
		free_list_remove(h, right_chunk(h, c));
 801a3aa:	4620      	mov	r0, r4
 801a3ac:	f7ff ff7d 	bl	801a2aa <free_list_remove>
	return big_heap_chunks(h->len);
 801a3b0:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
 801a3b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a3b6:	d307      	bcc.n	801a3c8 <free_chunk+0x7a>
		return ((uint32_t *)cmem)[f];
 801a3b8:	687a      	ldr	r2, [r7, #4]
		merge_chunks(h, c, right_chunk(h, c));
 801a3ba:	eb05 0252 	add.w	r2, r5, r2, lsr #1
 801a3be:	4629      	mov	r1, r5
 801a3c0:	4620      	mov	r0, r4
 801a3c2:	f7ff ff35 	bl	801a230 <merge_chunks>
 801a3c6:	e7d8      	b.n	801a37a <free_chunk+0x2c>
		return ((uint16_t *)cmem)[f];
 801a3c8:	887a      	ldrh	r2, [r7, #2]
 801a3ca:	e7f6      	b.n	801a3ba <free_chunk+0x6c>
 801a3cc:	5ba1      	ldrh	r1, [r4, r6]
 801a3ce:	e7d9      	b.n	801a384 <free_chunk+0x36>
 801a3d0:	8853      	ldrh	r3, [r2, #2]
 801a3d2:	e7de      	b.n	801a392 <free_chunk+0x44>
		free_list_remove(h, left_chunk(h, c));
 801a3d4:	4620      	mov	r0, r4
 801a3d6:	f7ff ff68 	bl	801a2aa <free_list_remove>
	return big_heap_chunks(h->len);
 801a3da:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
 801a3dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a3e0:	d30c      	bcc.n	801a3fc <free_chunk+0xae>
		return ((uint32_t *)cmem)[f];
 801a3e2:	59a1      	ldr	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
 801a3e4:	462a      	mov	r2, r5
 801a3e6:	1a69      	subs	r1, r5, r1
 801a3e8:	4620      	mov	r0, r4
 801a3ea:	f7ff ff21 	bl	801a230 <merge_chunks>
	return big_heap_chunks(h->len);
 801a3ee:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
 801a3f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a3f4:	d304      	bcc.n	801a400 <free_chunk+0xb2>
		return ((uint32_t *)cmem)[f];
 801a3f6:	59a3      	ldr	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
 801a3f8:	1aed      	subs	r5, r5, r3
 801a3fa:	e7cd      	b.n	801a398 <free_chunk+0x4a>
		return ((uint16_t *)cmem)[f];
 801a3fc:	5ba1      	ldrh	r1, [r4, r6]
 801a3fe:	e7f1      	b.n	801a3e4 <free_chunk+0x96>
 801a400:	5ba3      	ldrh	r3, [r4, r6]
 801a402:	e7f9      	b.n	801a3f8 <free_chunk+0xaa>

0801a404 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, size_t sz)
{
 801a404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return big_heap_chunks(h->len);
 801a406:	6886      	ldr	r6, [r0, #8]
	return big_heap(h) ? 8 : 4;
 801a408:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 801a40c:	d319      	bcc.n	801a442 <alloc_chunk+0x3e>
 801a40e:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
 801a410:	3308      	adds	r3, #8
	size_t usable_sz = sz - min_chunk_size(h) + 1;
 801a412:	eba1 04d3 	sub.w	r4, r1, r3, lsr #3
 801a416:	3401      	adds	r4, #1
	return 31 - __builtin_clz(usable_sz);
 801a418:	fab4 f484 	clz	r4, r4
 801a41c:	f1c4 021f 	rsb	r2, r4, #31
	size_t usable_sz = sz - min_chunk_size(h) + 1;
 801a420:	eba6 03d3 	sub.w	r3, r6, r3, lsr #3
 801a424:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
 801a426:	fab3 f383 	clz	r3, r3
 801a42a:	f1c3 031f 	rsb	r3, r3, #31
	int bi = bucket_idx(h, sz);
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
 801a42e:	4293      	cmp	r3, r2
 801a430:	db3f      	blt.n	801a4b2 <alloc_chunk+0xae>
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
 801a432:	1d13      	adds	r3, r2, #4
 801a434:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 801a438:	f1bc 0f00 	cmp.w	ip, #0
 801a43c:	d024      	beq.n	801a488 <alloc_chunk+0x84>
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
 801a43e:	2303      	movs	r3, #3
 801a440:	e010      	b.n	801a464 <alloc_chunk+0x60>
	return big_heap(h) ? 8 : 4;
 801a442:	2304      	movs	r3, #4
 801a444:	e7e4      	b.n	801a410 <alloc_chunk+0xc>
		return ((uint16_t *)cmem)[f];
 801a446:	f8b7 e002 	ldrh.w	lr, [r7, #2]
 801a44a:	e015      	b.n	801a478 <alloc_chunk+0x74>
		do {
			chunkid_t c = b->next;
			if (chunk_size(h, c) >= sz) {
				free_list_remove_bidx(h, c, bi);
 801a44c:	4629      	mov	r1, r5
 801a44e:	f7ff fe37 	bl	801a0c0 <free_list_remove_bidx>
				return c;
 801a452:	e021      	b.n	801a498 <alloc_chunk+0x94>
 801a454:	88fd      	ldrh	r5, [r7, #6]
			}
			b->next = next_free_chunk(h, c);
 801a456:	1d17      	adds	r7, r2, #4
 801a458:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
 801a45c:	3b01      	subs	r3, #1
 801a45e:	d013      	beq.n	801a488 <alloc_chunk+0x84>
 801a460:	45ac      	cmp	ip, r5
 801a462:	d011      	beq.n	801a488 <alloc_chunk+0x84>
			chunkid_t c = b->next;
 801a464:	1d15      	adds	r5, r2, #4
 801a466:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
	void *cmem = &buf[c];
 801a46a:	eb00 07c5 	add.w	r7, r0, r5, lsl #3
	if (big_heap(h)) {
 801a46e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 801a472:	d3e8      	bcc.n	801a446 <alloc_chunk+0x42>
		return ((uint32_t *)cmem)[f];
 801a474:	f8d7 e004 	ldr.w	lr, [r7, #4]
			if (chunk_size(h, c) >= sz) {
 801a478:	ebb1 0f5e 	cmp.w	r1, lr, lsr #1
 801a47c:	d9e6      	bls.n	801a44c <alloc_chunk+0x48>
	if (big_heap(h)) {
 801a47e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 801a482:	d3e7      	bcc.n	801a454 <alloc_chunk+0x50>
		return ((uint32_t *)cmem)[f];
 801a484:	68fd      	ldr	r5, [r7, #12]
 801a486:	e7e6      	b.n	801a456 <alloc_chunk+0x52>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
 801a488:	68c5      	ldr	r5, [r0, #12]
 801a48a:	f1c4 0320 	rsb	r3, r4, #32
 801a48e:	2401      	movs	r4, #1
 801a490:	409c      	lsls	r4, r3
 801a492:	4264      	negs	r4, r4

	if ((bmask & h->avail_buckets) != 0) {
 801a494:	4025      	ands	r5, r4
 801a496:	d101      	bne.n	801a49c <alloc_chunk+0x98>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
 801a498:	4628      	mov	r0, r5
 801a49a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
 801a49c:	fa95 f2a5 	rbit	r2, r5
 801a4a0:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
 801a4a4:	1d13      	adds	r3, r2, #4
 801a4a6:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
 801a4aa:	4629      	mov	r1, r5
 801a4ac:	f7ff fe08 	bl	801a0c0 <free_list_remove_bidx>
		return c;
 801a4b0:	e7f2      	b.n	801a498 <alloc_chunk+0x94>
		return 0;
 801a4b2:	2500      	movs	r5, #0
 801a4b4:	e7f0      	b.n	801a498 <alloc_chunk+0x94>

0801a4b6 <sys_heap_free>:
	if (mem == NULL) {
 801a4b6:	b1c1      	cbz	r1, 801a4ea <sys_heap_free+0x34>
{
 801a4b8:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
 801a4ba:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
 801a4bc:	4620      	mov	r0, r4
 801a4be:	f7ff fee6 	bl	801a28e <mem_to_chunkid>
 801a4c2:	4601      	mov	r1, r0
	void *cmem = &buf[c];
 801a4c4:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
	return big_heap_chunks(h->len);
 801a4c8:	68a2      	ldr	r2, [r4, #8]
	if (big_heap(h)) {
 801a4ca:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 801a4ce:	d307      	bcc.n	801a4e0 <sys_heap_free+0x2a>
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
 801a4d0:	685a      	ldr	r2, [r3, #4]
 801a4d2:	f022 0201 	bic.w	r2, r2, #1
 801a4d6:	605a      	str	r2, [r3, #4]
	free_chunk(h, c);
 801a4d8:	4620      	mov	r0, r4
 801a4da:	f7ff ff38 	bl	801a34e <free_chunk>
}
 801a4de:	bd10      	pop	{r4, pc}
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
 801a4e0:	885a      	ldrh	r2, [r3, #2]
 801a4e2:	f022 0201 	bic.w	r2, r2, #1
 801a4e6:	805a      	strh	r2, [r3, #2]
 801a4e8:	e7f6      	b.n	801a4d8 <sys_heap_free+0x22>
 801a4ea:	4770      	bx	lr

0801a4ec <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
	if (bytes == 0) {
 801a4ec:	2900      	cmp	r1, #0
 801a4ee:	d03b      	beq.n	801a568 <sys_heap_alloc+0x7c>
{
 801a4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4f2:	460c      	mov	r4, r1
		return NULL;
	}

	struct z_heap *h = heap->heap;
 801a4f4:	6805      	ldr	r5, [r0, #0]
	return big_heap_chunks(h->len);
 801a4f6:	68ab      	ldr	r3, [r5, #8]
	return big_heap(h) ? 8 : 4;
 801a4f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a4fc:	d320      	bcc.n	801a540 <sys_heap_alloc+0x54>
 801a4fe:	2308      	movs	r3, #8
	return chunksz(chunk_header_bytes(h) + bytes);
 801a500:	441c      	add	r4, r3
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
 801a502:	3407      	adds	r4, #7
 801a504:	08e4      	lsrs	r4, r4, #3
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
 801a506:	4621      	mov	r1, r4
 801a508:	4628      	mov	r0, r5
 801a50a:	f7ff ff7b 	bl	801a404 <alloc_chunk>
	if (c == 0) {
 801a50e:	4607      	mov	r7, r0
 801a510:	b360      	cbz	r0, 801a56c <sys_heap_alloc+0x80>
	void *cmem = &buf[c];
 801a512:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	return big_heap_chunks(h->len);
 801a516:	68ab      	ldr	r3, [r5, #8]
	if (big_heap(h)) {
 801a518:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a51c:	d312      	bcc.n	801a544 <sys_heap_alloc+0x58>
		return ((uint32_t *)cmem)[f];
 801a51e:	6873      	ldr	r3, [r6, #4]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
 801a520:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
 801a524:	d310      	bcc.n	801a548 <sys_heap_alloc+0x5c>
	return big_heap_chunks(h->len);
 801a526:	68ab      	ldr	r3, [r5, #8]
	if (big_heap(h)) {
 801a528:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a52c:	d317      	bcc.n	801a55e <sys_heap_alloc+0x72>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
 801a52e:	6873      	ldr	r3, [r6, #4]
 801a530:	f043 0301 	orr.w	r3, r3, #1
 801a534:	6073      	str	r3, [r6, #4]
		split_chunks(h, c, c + chunk_sz);
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
 801a536:	4639      	mov	r1, r7
 801a538:	4628      	mov	r0, r5
 801a53a:	f7ff fdb6 	bl	801a0aa <chunk_mem>
}
 801a53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return big_heap(h) ? 8 : 4;
 801a540:	2304      	movs	r3, #4
 801a542:	e7dd      	b.n	801a500 <sys_heap_alloc+0x14>
		return ((uint16_t *)cmem)[f];
 801a544:	8873      	ldrh	r3, [r6, #2]
 801a546:	e7eb      	b.n	801a520 <sys_heap_alloc+0x34>
		split_chunks(h, c, c + chunk_sz);
 801a548:	443c      	add	r4, r7
 801a54a:	4622      	mov	r2, r4
 801a54c:	4639      	mov	r1, r7
 801a54e:	4628      	mov	r0, r5
 801a550:	f7ff fe33 	bl	801a1ba <split_chunks>
		free_list_add(h, c + chunk_sz);
 801a554:	4621      	mov	r1, r4
 801a556:	4628      	mov	r0, r5
 801a558:	f7ff fed0 	bl	801a2fc <free_list_add>
 801a55c:	e7e3      	b.n	801a526 <sys_heap_alloc+0x3a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
 801a55e:	8873      	ldrh	r3, [r6, #2]
 801a560:	f043 0301 	orr.w	r3, r3, #1
 801a564:	8073      	strh	r3, [r6, #2]
 801a566:	e7e6      	b.n	801a536 <sys_heap_alloc+0x4a>
		return NULL;
 801a568:	2000      	movs	r0, #0
}
 801a56a:	4770      	bx	lr
		return NULL;
 801a56c:	2000      	movs	r0, #0
 801a56e:	e7e6      	b.n	801a53e <sys_heap_alloc+0x52>

0801a570 <sys_heap_init>:
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
 801a570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a572:	4603      	mov	r3, r0
	return big_heap_bytes(size) ? 8 : 4;
 801a574:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 801a578:	d32e      	bcc.n	801a5d8 <sys_heap_init+0x68>
 801a57a:	2508      	movs	r5, #8
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
 801a57c:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 801a57e:	1dc8      	adds	r0, r1, #7
 801a580:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 801a584:	440d      	add	r5, r1
 801a586:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
 801a58a:	1a2d      	subs	r5, r5, r0
 801a58c:	08ef      	lsrs	r7, r5, #3

	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
 801a58e:	4606      	mov	r6, r0
	heap->heap = h;
 801a590:	6018      	str	r0, [r3, #0]
	h->chunk0_hdr_area = 0;
 801a592:	2200      	movs	r2, #0
 801a594:	2300      	movs	r3, #0
 801a596:	e9c0 2300 	strd	r2, r3, [r0]
	h->len = buf_sz;
 801a59a:	6087      	str	r7, [r0, #8]
	h->avail_buckets = 0;
 801a59c:	2300      	movs	r3, #0
 801a59e:	60c3      	str	r3, [r0, #12]
	return big_heap(h) ? 8 : 4;
 801a5a0:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
 801a5a4:	d31a      	bcc.n	801a5dc <sys_heap_init+0x6c>
 801a5a6:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
 801a5a8:	3308      	adds	r3, #8
	size_t usable_sz = sz - min_chunk_size(h) + 1;
 801a5aa:	eba7 03d3 	sub.w	r3, r7, r3, lsr #3
 801a5ae:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
 801a5b0:	fab3 f383 	clz	r3, r3

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
 801a5b4:	f1c3 0c20 	rsb	ip, r3, #32
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
 801a5b8:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 801a5bc:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
 801a5be:	f103 0e07 	add.w	lr, r3, #7
 801a5c2:	ea4f 01de 	mov.w	r1, lr, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
 801a5c6:	2300      	movs	r3, #0
 801a5c8:	4563      	cmp	r3, ip
 801a5ca:	da09      	bge.n	801a5e0 <sys_heap_init+0x70>
		h->buckets[i].next = 0;
 801a5cc:	1d1a      	adds	r2, r3, #4
 801a5ce:	2400      	movs	r4, #0
 801a5d0:	f846 4022 	str.w	r4, [r6, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
 801a5d4:	3301      	adds	r3, #1
 801a5d6:	e7f7      	b.n	801a5c8 <sys_heap_init+0x58>
	return big_heap_bytes(size) ? 8 : 4;
 801a5d8:	2504      	movs	r5, #4
 801a5da:	e7cf      	b.n	801a57c <sys_heap_init+0xc>
	return big_heap(h) ? 8 : 4;
 801a5dc:	2304      	movs	r3, #4
 801a5de:	e7e3      	b.n	801a5a8 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 801a5e0:	004b      	lsls	r3, r1, #1
	if (big_heap(h)) {
 801a5e2:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
 801a5e6:	d32e      	bcc.n	801a646 <sys_heap_init+0xd6>
		((uint32_t *)cmem)[f] = val;
 801a5e8:	6043      	str	r3, [r0, #4]
	if (big_heap(h)) {
 801a5ea:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
 801a5ee:	d32c      	bcc.n	801a64a <sys_heap_init+0xda>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
 801a5f0:	6843      	ldr	r3, [r0, #4]
 801a5f2:	f043 0301 	orr.w	r3, r3, #1
 801a5f6:	6043      	str	r3, [r0, #4]
	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
 801a5f8:	1a7a      	subs	r2, r7, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 801a5fa:	0056      	lsls	r6, r2, #1
	void *cmem = &buf[c];
 801a5fc:	f02e 0307 	bic.w	r3, lr, #7
 801a600:	18c4      	adds	r4, r0, r3
	if (big_heap(h)) {
 801a602:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
 801a606:	d325      	bcc.n	801a654 <sys_heap_init+0xe4>
		((uint32_t *)cmem)[f] = val;
 801a608:	6066      	str	r6, [r4, #4]
	return big_heap_chunks(h->len);
 801a60a:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 801a60c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 801a610:	d322      	bcc.n	801a658 <sys_heap_init+0xe8>
		((uint32_t *)cmem)[f] = val;
 801a612:	50c1      	str	r1, [r0, r3]
	void *cmem = &buf[c];
 801a614:	f025 0307 	bic.w	r3, r5, #7
 801a618:	4405      	add	r5, r0
	return big_heap_chunks(h->len);
 801a61a:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 801a61c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 801a620:	d31c      	bcc.n	801a65c <sys_heap_init+0xec>
		((uint32_t *)cmem)[f] = val;
 801a622:	2400      	movs	r4, #0
 801a624:	606c      	str	r4, [r5, #4]
	return big_heap_chunks(h->len);
 801a626:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 801a628:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 801a62c:	d319      	bcc.n	801a662 <sys_heap_init+0xf2>
		((uint32_t *)cmem)[f] = val;
 801a62e:	50c2      	str	r2, [r0, r3]
	return big_heap_chunks(h->len);
 801a630:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
 801a632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a636:	d316      	bcc.n	801a666 <sys_heap_init+0xf6>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
 801a638:	686b      	ldr	r3, [r5, #4]
 801a63a:	f043 0301 	orr.w	r3, r3, #1
 801a63e:	606b      	str	r3, [r5, #4]
	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);

	free_list_add(h, chunk0_size);
 801a640:	f7ff fe5c 	bl	801a2fc <free_list_add>
}
 801a644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
 801a646:	8043      	strh	r3, [r0, #2]
 801a648:	e7cf      	b.n	801a5ea <sys_heap_init+0x7a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
 801a64a:	8843      	ldrh	r3, [r0, #2]
 801a64c:	f043 0301 	orr.w	r3, r3, #1
 801a650:	8043      	strh	r3, [r0, #2]
 801a652:	e7d1      	b.n	801a5f8 <sys_heap_init+0x88>
		((uint16_t *)cmem)[f] = val;
 801a654:	8066      	strh	r6, [r4, #2]
 801a656:	e7d8      	b.n	801a60a <sys_heap_init+0x9a>
 801a658:	52c1      	strh	r1, [r0, r3]
 801a65a:	e7db      	b.n	801a614 <sys_heap_init+0xa4>
 801a65c:	2400      	movs	r4, #0
 801a65e:	806c      	strh	r4, [r5, #2]
 801a660:	e7e1      	b.n	801a626 <sys_heap_init+0xb6>
 801a662:	52c2      	strh	r2, [r0, r3]
 801a664:	e7e4      	b.n	801a630 <sys_heap_init+0xc0>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
 801a666:	886b      	ldrh	r3, [r5, #2]
 801a668:	f043 0301 	orr.w	r3, r3, #1
 801a66c:	806b      	strh	r3, [r5, #2]
 801a66e:	e7e7      	b.n	801a640 <sys_heap_init+0xd0>

0801a670 <_uc>:
{
 801a670:	e004      	b.n	801a67c <_uc+0xc>
			*buf += 'A' - 'a';
 801a672:	3a20      	subs	r2, #32
 801a674:	7002      	strb	r2, [r0, #0]
	} while (*buf++);
 801a676:	f810 3b01 	ldrb.w	r3, [r0], #1
 801a67a:	b133      	cbz	r3, 801a68a <_uc+0x1a>
		if (*buf >= 'a' && *buf <= 'z') {
 801a67c:	7802      	ldrb	r2, [r0, #0]
 801a67e:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 801a682:	b2db      	uxtb	r3, r3
 801a684:	2b19      	cmp	r3, #25
 801a686:	d8f6      	bhi.n	801a676 <_uc+0x6>
 801a688:	e7f3      	b.n	801a672 <_uc+0x2>
}
 801a68a:	4770      	bx	lr

0801a68c <_to_x>:
{
 801a68c:	b4f0      	push	{r4, r5, r6, r7}
 801a68e:	4606      	mov	r6, r0
 801a690:	4604      	mov	r4, r0
 801a692:	e008      	b.n	801a6a6 <_to_x+0x1a>
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
 801a694:	2300      	movs	r3, #0
 801a696:	4625      	mov	r5, r4
 801a698:	4403      	add	r3, r0
 801a69a:	3330      	adds	r3, #48	; 0x30
 801a69c:	f805 3b01 	strb.w	r3, [r5], #1
	} while (n);
 801a6a0:	4297      	cmp	r7, r2
 801a6a2:	d30a      	bcc.n	801a6ba <_to_x+0x2e>
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
 801a6a4:	462c      	mov	r4, r5
		unsigned int d = n % base;
 801a6a6:	fbb1 f3f2 	udiv	r3, r1, r2
 801a6aa:	fb02 1013 	mls	r0, r2, r3, r1
		n /= base;
 801a6ae:	460f      	mov	r7, r1
 801a6b0:	4619      	mov	r1, r3
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
 801a6b2:	2809      	cmp	r0, #9
 801a6b4:	d9ee      	bls.n	801a694 <_to_x+0x8>
 801a6b6:	2327      	movs	r3, #39	; 0x27
 801a6b8:	e7ed      	b.n	801a696 <_to_x+0xa>
	*buf = 0;
 801a6ba:	2300      	movs	r3, #0
 801a6bc:	702b      	strb	r3, [r5, #0]
	len = buf - start;
 801a6be:	1ba8      	subs	r0, r5, r6
	for (buf--; buf > start; buf--, start++) {
 801a6c0:	e005      	b.n	801a6ce <_to_x+0x42>
		char tmp = *buf;
 801a6c2:	7823      	ldrb	r3, [r4, #0]
		*buf = *start;
 801a6c4:	7832      	ldrb	r2, [r6, #0]
 801a6c6:	f804 2901 	strb.w	r2, [r4], #-1
		*start = tmp;
 801a6ca:	f806 3b01 	strb.w	r3, [r6], #1
	for (buf--; buf > start; buf--, start++) {
 801a6ce:	42b4      	cmp	r4, r6
 801a6d0:	d8f7      	bhi.n	801a6c2 <_to_x+0x36>
}
 801a6d2:	bcf0      	pop	{r4, r5, r6, r7}
 801a6d4:	4770      	bx	lr

0801a6d6 <_to_hex>:
{
 801a6d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6d8:	4605      	mov	r5, r0
 801a6da:	461f      	mov	r7, r3
	if (alt_form) {
 801a6dc:	b17a      	cbz	r2, 801a6fe <_to_hex+0x28>
		*buf++ = '0';
 801a6de:	4604      	mov	r4, r0
 801a6e0:	2330      	movs	r3, #48	; 0x30
 801a6e2:	f804 3b02 	strb.w	r3, [r4], #2
		*buf++ = 'x';
 801a6e6:	2378      	movs	r3, #120	; 0x78
 801a6e8:	7043      	strb	r3, [r0, #1]
	len = _to_x(buf, value, 16);
 801a6ea:	2210      	movs	r2, #16
 801a6ec:	4620      	mov	r0, r4
 801a6ee:	f7ff ffcd 	bl	801a68c <_to_x>
 801a6f2:	4606      	mov	r6, r0
	if (prefix == 'X') {
 801a6f4:	2f58      	cmp	r7, #88	; 0x58
 801a6f6:	d004      	beq.n	801a702 <_to_hex+0x2c>
	return len + (buf - buf0);
 801a6f8:	1b64      	subs	r4, r4, r5
}
 801a6fa:	19a0      	adds	r0, r4, r6
 801a6fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a6fe:	4604      	mov	r4, r0
 801a700:	e7f3      	b.n	801a6ea <_to_hex+0x14>
		_uc(buf0);
 801a702:	4628      	mov	r0, r5
 801a704:	f7ff ffb4 	bl	801a670 <_uc>
 801a708:	e7f6      	b.n	801a6f8 <_to_hex+0x22>

0801a70a <_to_octal>:
{
 801a70a:	4603      	mov	r3, r0
	if (alt_form) {
 801a70c:	b11a      	cbz	r2, 801a716 <_to_octal+0xc>
		*buf++ = '0';
 801a70e:	2230      	movs	r2, #48	; 0x30
 801a710:	f800 2b01 	strb.w	r2, [r0], #1
		if (!value) {
 801a714:	b131      	cbz	r1, 801a724 <_to_octal+0x1a>
{
 801a716:	b510      	push	{r4, lr}
	return (buf - buf0) + _to_x(buf, value, 8);
 801a718:	1ac4      	subs	r4, r0, r3
 801a71a:	2208      	movs	r2, #8
 801a71c:	f7ff ffb6 	bl	801a68c <_to_x>
 801a720:	4420      	add	r0, r4
}
 801a722:	bd10      	pop	{r4, pc}
			*buf++ = 0;
 801a724:	2200      	movs	r2, #0
 801a726:	705a      	strb	r2, [r3, #1]
			return 1;
 801a728:	2001      	movs	r0, #1
}
 801a72a:	4770      	bx	lr

0801a72c <_to_udec>:
{
 801a72c:	b508      	push	{r3, lr}
	return _to_x(buf, value, 10);
 801a72e:	220a      	movs	r2, #10
 801a730:	f7ff ffac 	bl	801a68c <_to_x>
}
 801a734:	bd08      	pop	{r3, pc}

0801a736 <_to_dec>:
{
 801a736:	b538      	push	{r3, r4, r5, lr}
 801a738:	4605      	mov	r5, r0
	if (value < 0) {
 801a73a:	2900      	cmp	r1, #0
 801a73c:	db05      	blt.n	801a74a <_to_dec+0x14>
	} else if (fplus) {
 801a73e:	b17a      	cbz	r2, 801a760 <_to_dec+0x2a>
		*buf++ = '+';
 801a740:	4604      	mov	r4, r0
 801a742:	232b      	movs	r3, #43	; 0x2b
 801a744:	f804 3b01 	strb.w	r3, [r4], #1
 801a748:	e004      	b.n	801a754 <_to_dec+0x1e>
		*buf++ = '-';
 801a74a:	4604      	mov	r4, r0
 801a74c:	232d      	movs	r3, #45	; 0x2d
 801a74e:	f804 3b01 	strb.w	r3, [r4], #1
		value = -value;
 801a752:	4249      	negs	r1, r1
	return (buf + _to_udec(buf, value)) - start;
 801a754:	4620      	mov	r0, r4
 801a756:	f7ff ffe9 	bl	801a72c <_to_udec>
 801a75a:	4420      	add	r0, r4
}
 801a75c:	1b40      	subs	r0, r0, r5
 801a75e:	bd38      	pop	{r3, r4, r5, pc}
	} else if (fspace) {
 801a760:	b123      	cbz	r3, 801a76c <_to_dec+0x36>
		*buf++ = ' ';
 801a762:	4604      	mov	r4, r0
 801a764:	2320      	movs	r3, #32
 801a766:	f804 3b01 	strb.w	r3, [r4], #1
 801a76a:	e7f3      	b.n	801a754 <_to_dec+0x1e>
 801a76c:	4604      	mov	r4, r0
 801a76e:	e7f1      	b.n	801a754 <_to_dec+0x1e>

0801a770 <_rlrshift>:
{
 801a770:	b470      	push	{r4, r5, r6}
	*v = (*v & 1) + (*v >> 1);
 801a772:	6806      	ldr	r6, [r0, #0]
 801a774:	6845      	ldr	r5, [r0, #4]
 801a776:	2300      	movs	r3, #0
 801a778:	4619      	mov	r1, r3
 801a77a:	f006 0301 	and.w	r3, r6, #1
 801a77e:	0872      	lsrs	r2, r6, #1
 801a780:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 801a784:	086c      	lsrs	r4, r5, #1
 801a786:	189b      	adds	r3, r3, r2
 801a788:	eb44 0101 	adc.w	r1, r4, r1
 801a78c:	6003      	str	r3, [r0, #0]
 801a78e:	6041      	str	r1, [r0, #4]
}
 801a790:	bc70      	pop	{r4, r5, r6}
 801a792:	4770      	bx	lr

0801a794 <_get_digit>:
	if (*digit_count > 0) {
 801a794:	680b      	ldr	r3, [r1, #0]
 801a796:	2b00      	cmp	r3, #0
 801a798:	dd16      	ble.n	801a7c8 <_get_digit+0x34>
{
 801a79a:	b430      	push	{r4, r5}
 801a79c:	4604      	mov	r4, r0
		*digit_count -= 1;
 801a79e:	3b01      	subs	r3, #1
 801a7a0:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
 801a7a2:	6801      	ldr	r1, [r0, #0]
 801a7a4:	6840      	ldr	r0, [r0, #4]
 801a7a6:	0085      	lsls	r5, r0, #2
 801a7a8:	008b      	lsls	r3, r1, #2
 801a7aa:	ea45 7291 	orr.w	r2, r5, r1, lsr #30
 801a7ae:	185b      	adds	r3, r3, r1
 801a7b0:	eb40 0202 	adc.w	r2, r0, r2
 801a7b4:	18db      	adds	r3, r3, r3
 801a7b6:	4152      	adcs	r2, r2
		rval = ((*fr >> 60) & 0xF) + '0';
 801a7b8:	0f10      	lsrs	r0, r2, #28
 801a7ba:	3030      	adds	r0, #48	; 0x30
		*fr &= 0x0FFFFFFFFFFFFFFFull;
 801a7bc:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 801a7c0:	6023      	str	r3, [r4, #0]
 801a7c2:	6062      	str	r2, [r4, #4]
}
 801a7c4:	bc30      	pop	{r4, r5}
 801a7c6:	4770      	bx	lr
		rval = '0';
 801a7c8:	2030      	movs	r0, #48	; 0x30
}
 801a7ca:	4770      	bx	lr

0801a7cc <_atoi>:
{
 801a7cc:	b410      	push	{r4}
 801a7ce:	4604      	mov	r4, r0
	const char *p = *sptr - 1;
 801a7d0:	6802      	ldr	r2, [r0, #0]
 801a7d2:	3a01      	subs	r2, #1
	int i = 0;
 801a7d4:	2000      	movs	r0, #0
	while (isdigit((int)*p)) {
 801a7d6:	7813      	ldrb	r3, [r2, #0]
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 801a7d8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801a7dc:	2909      	cmp	r1, #9
 801a7de:	d806      	bhi.n	801a7ee <_atoi+0x22>
		i = 10 * i + *p++ - '0';
 801a7e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a7e4:	3201      	adds	r2, #1
 801a7e6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 801a7ea:	3830      	subs	r0, #48	; 0x30
 801a7ec:	e7f3      	b.n	801a7d6 <_atoi+0xa>
	*sptr = p;
 801a7ee:	6022      	str	r2, [r4, #0]
}
 801a7f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a7f4:	4770      	bx	lr

0801a7f6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 801a7f6:	4770      	bx	lr

0801a7f8 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
 801a7f8:	2300      	movs	r3, #0
 801a7fa:	6043      	str	r3, [r0, #4]
	list->head = NULL;
 801a7fc:	6003      	str	r3, [r0, #0]
}
 801a7fe:	4770      	bx	lr

0801a800 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
 801a800:	6803      	ldr	r3, [r0, #0]
 801a802:	b12b      	cbz	r3, 801a810 <log_list_add_tail+0x10>
		list->head = msg;
	} else {
		list->tail->next = msg;
 801a804:	6843      	ldr	r3, [r0, #4]
 801a806:	6019      	str	r1, [r3, #0]
	}

	list->tail = msg;
 801a808:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
 801a80a:	2300      	movs	r3, #0
 801a80c:	600b      	str	r3, [r1, #0]
}
 801a80e:	4770      	bx	lr
		list->head = msg;
 801a810:	6001      	str	r1, [r0, #0]
 801a812:	e7f9      	b.n	801a808 <log_list_add_tail+0x8>

0801a814 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
 801a814:	6800      	ldr	r0, [r0, #0]
 801a816:	4770      	bx	lr

0801a818 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
 801a818:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
 801a81a:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
 801a81c:	b108      	cbz	r0, 801a822 <log_list_head_get+0xa>
		list->head = list->head->next;
 801a81e:	6802      	ldr	r2, [r0, #0]
 801a820:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
 801a822:	4770      	bx	lr

0801a824 <dummy_timestamp>:
}
 801a824:	2000      	movs	r0, #0
 801a826:	4770      	bx	lr

0801a828 <msg_filter_check>:
}
 801a828:	2001      	movs	r0, #1
 801a82a:	4770      	bx	lr

0801a82c <k_uptime_get_32>:
{
 801a82c:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 801a82e:	f007 fe35 	bl	802249c <z_impl_k_uptime_ticks>
			return t / (from_hz / to_hz);
 801a832:	220a      	movs	r2, #10
 801a834:	2300      	movs	r3, #0
 801a836:	f7e5 fca7 	bl	8000188 <__aeabi_uldivmod>
}
 801a83a:	bd08      	pop	{r3, pc}

0801a83c <z_log_get_s_mask>:
{
 801a83c:	b470      	push	{r4, r5, r6}
 801a83e:	4603      	mov	r3, r0
	uint32_t mask = 0;
 801a840:	2000      	movs	r0, #0
	uint32_t arg = 0;
 801a842:	4605      	mov	r5, r0
	bool arm = false;
 801a844:	4604      	mov	r4, r0
	while ((curr = *str++) && arg < nargs) {
 801a846:	e001      	b.n	801a84c <z_log_get_s_mask+0x10>
			arm = !arm;
 801a848:	f084 0401 	eor.w	r4, r4, #1
	while ((curr = *str++) && arg < nargs) {
 801a84c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a850:	b19a      	cbz	r2, 801a87a <z_log_get_s_mask+0x3e>
 801a852:	428d      	cmp	r5, r1
 801a854:	d211      	bcs.n	801a87a <z_log_get_s_mask+0x3e>
		if (curr == '%') {
 801a856:	2a25      	cmp	r2, #37	; 0x25
 801a858:	d0f6      	beq.n	801a848 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
 801a85a:	2c00      	cmp	r4, #0
 801a85c:	d0f6      	beq.n	801a84c <z_log_get_s_mask+0x10>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
 801a85e:	f042 0620 	orr.w	r6, r2, #32
 801a862:	3e61      	subs	r6, #97	; 0x61
 801a864:	2e19      	cmp	r6, #25
 801a866:	d8f1      	bhi.n	801a84c <z_log_get_s_mask+0x10>
			if (curr == 's') {
 801a868:	2a73      	cmp	r2, #115	; 0x73
 801a86a:	d002      	beq.n	801a872 <z_log_get_s_mask+0x36>
			arg++;
 801a86c:	3501      	adds	r5, #1
			arm = false;
 801a86e:	2400      	movs	r4, #0
 801a870:	e7ec      	b.n	801a84c <z_log_get_s_mask+0x10>
				mask |= BIT(arg);
 801a872:	2201      	movs	r2, #1
 801a874:	40aa      	lsls	r2, r5
 801a876:	4310      	orrs	r0, r2
 801a878:	e7f8      	b.n	801a86c <z_log_get_s_mask+0x30>
}
 801a87a:	bc70      	pop	{r4, r5, r6}
 801a87c:	4770      	bx	lr

0801a87e <block_on_alloc>:
}
 801a87e:	2000      	movs	r0, #0
 801a880:	4770      	bx	lr

0801a882 <cont_arg_get>:

static log_arg_t cont_arg_get(struct log_msg *msg, uint32_t arg_idx)
{
	struct log_msg_cont *cont;

	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
 801a882:	2901      	cmp	r1, #1
 801a884:	d906      	bls.n	801a894 <cont_arg_get+0x12>
		return msg->payload.ext.data.args[arg_idx];
	}


	cont = msg->payload.ext.next;
 801a886:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
 801a888:	3902      	subs	r1, #2

	while (arg_idx >= ARGS_CONT_MSG) {
 801a88a:	2906      	cmp	r1, #6
 801a88c:	d907      	bls.n	801a89e <cont_arg_get+0x1c>
		arg_idx -= ARGS_CONT_MSG;
 801a88e:	3907      	subs	r1, #7
		cont = cont->next;
 801a890:	681b      	ldr	r3, [r3, #0]
 801a892:	e7fa      	b.n	801a88a <cont_arg_get+0x8>
		return msg->payload.ext.data.args[arg_idx];
 801a894:	3104      	adds	r1, #4
 801a896:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801a89a:	6888      	ldr	r0, [r1, #8]
 801a89c:	4770      	bx	lr
	}

	return cont->payload.args[arg_idx];
 801a89e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801a8a2:	6848      	ldr	r0, [r1, #4]
}
 801a8a4:	4770      	bx	lr

0801a8a6 <copy_args_to_msg>:

	return msg;
}

static void copy_args_to_msg(struct  log_msg *msg, log_arg_t *args, uint32_t nargs)
{
 801a8a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a8aa:	460d      	mov	r5, r1
 801a8ac:	4614      	mov	r4, r2
	struct log_msg_cont *cont = msg->payload.ext.next;
 801a8ae:	6946      	ldr	r6, [r0, #20]

	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
 801a8b0:	2a03      	cmp	r2, #3
 801a8b2:	d917      	bls.n	801a8e4 <copy_args_to_msg+0x3e>
		(void)memcpy(msg->payload.ext.data.args, args,
 801a8b4:	2208      	movs	r2, #8
 801a8b6:	3018      	adds	r0, #24
 801a8b8:	f001 fff9 	bl	801c8ae <memcpy>
		       LOG_MSG_NARGS_HEAD_CHUNK * sizeof(log_arg_t));
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
 801a8bc:	3c02      	subs	r4, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
 801a8be:	3508      	adds	r5, #8
		(void)memcpy(msg->payload.single.args, args,
			     nargs * sizeof(log_arg_t));
		nargs  = 0U;
	}

	while (nargs != 0U) {
 801a8c0:	b1b4      	cbz	r4, 801a8f0 <copy_args_to_msg+0x4a>
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
 801a8c2:	46a0      	mov	r8, r4
 801a8c4:	2c07      	cmp	r4, #7
 801a8c6:	bf28      	it	cs
 801a8c8:	f04f 0807 	movcs.w	r8, #7

		(void)memcpy(cont->payload.args, args,
 801a8cc:	ea4f 0788 	mov.w	r7, r8, lsl #2
 801a8d0:	463a      	mov	r2, r7
 801a8d2:	4629      	mov	r1, r5
 801a8d4:	1d30      	adds	r0, r6, #4
 801a8d6:	f001 ffea 	bl	801c8ae <memcpy>
			     cpy_args * sizeof(log_arg_t));
		nargs -= cpy_args;
 801a8da:	eba4 0408 	sub.w	r4, r4, r8
		args += cpy_args;
 801a8de:	443d      	add	r5, r7
		cont = cont->next;
 801a8e0:	6836      	ldr	r6, [r6, #0]
 801a8e2:	e7ed      	b.n	801a8c0 <copy_args_to_msg+0x1a>
		(void)memcpy(msg->payload.single.args, args,
 801a8e4:	0092      	lsls	r2, r2, #2
 801a8e6:	3014      	adds	r0, #20
 801a8e8:	f001 ffe1 	bl	801c8ae <memcpy>
		nargs  = 0U;
 801a8ec:	2400      	movs	r4, #0
 801a8ee:	e7e7      	b.n	801a8c0 <copy_args_to_msg+0x1a>
	}
}
 801a8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a8f4 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
 801a8f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a8f8:	4688      	mov	r8, r1
 801a8fa:	461c      	mov	r4, r3
 801a8fc:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
 801a900:	8901      	ldrh	r1, [r0, #8]
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
 801a902:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 801a906:	d21f      	bcs.n	801a948 <log_msg_hexdump_data_op+0x54>
 801a908:	088b      	lsrs	r3, r1, #2
		*length = 0;
		return;
	}

	if ((offset + *length) > available_len) {
 801a90a:	6811      	ldr	r1, [r2, #0]
 801a90c:	4421      	add	r1, r4
 801a90e:	4299      	cmp	r1, r3
 801a910:	d901      	bls.n	801a916 <log_msg_hexdump_data_op+0x22>
		*length = available_len - offset;
 801a912:	1b19      	subs	r1, r3, r4
 801a914:	6011      	str	r1, [r2, #0]
	}

	req_len = *length;
 801a916:	6817      	ldr	r7, [r2, #0]

	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
 801a918:	2b0c      	cmp	r3, #12
 801a91a:	d919      	bls.n	801a950 <log_msg_hexdump_data_op+0x5c>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
		head_data = msg->payload.ext.data.bytes;
 801a91c:	f100 0c18 	add.w	ip, r0, #24
		cont = msg->payload.ext.next;
 801a920:	6946      	ldr	r6, [r0, #20]
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
 801a922:	2308      	movs	r3, #8
		head_data = msg->payload.single.bytes;
		chunk_len = available_len;

	}

	if (offset < chunk_len) {
 801a924:	42a3      	cmp	r3, r4
 801a926:	d91e      	bls.n	801a966 <log_msg_hexdump_data_op+0x72>
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
 801a928:	42bb      	cmp	r3, r7
 801a92a:	bf28      	it	cs
 801a92c:	463b      	movcs	r3, r7
 801a92e:	461d      	mov	r5, r3

		if (put_op) {
 801a930:	f1b9 0f00 	cmp.w	r9, #0
 801a934:	d010      	beq.n	801a958 <log_msg_hexdump_data_op+0x64>
			(void)memcpy(&head_data[offset], data, cpy_len);
 801a936:	461a      	mov	r2, r3
 801a938:	4641      	mov	r1, r8
 801a93a:	eb0c 0004 	add.w	r0, ip, r4
 801a93e:	f001 ffb6 	bl	801c8ae <memcpy>
		} else {
			(void)memcpy(data, &head_data[offset], cpy_len);
		}

		req_len -= cpy_len;
 801a942:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
 801a944:	44a8      	add	r8, r5
 801a946:	e021      	b.n	801a98c <log_msg_hexdump_data_op+0x98>
		*length = 0;
 801a948:	2300      	movs	r3, #0
 801a94a:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
 801a94c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		head_data = msg->payload.single.bytes;
 801a950:	f100 0c14 	add.w	ip, r0, #20
	struct log_msg_cont *cont = NULL;
 801a954:	2600      	movs	r6, #0
 801a956:	e7e5      	b.n	801a924 <log_msg_hexdump_data_op+0x30>
			(void)memcpy(data, &head_data[offset], cpy_len);
 801a958:	461a      	mov	r2, r3
 801a95a:	eb0c 0104 	add.w	r1, ip, r4
 801a95e:	4640      	mov	r0, r8
 801a960:	f001 ffa5 	bl	801c8ae <memcpy>
 801a964:	e7ed      	b.n	801a942 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
 801a966:	1ae4      	subs	r4, r4, r3
		if (cont == NULL) {
 801a968:	b91e      	cbnz	r6, 801a972 <log_msg_hexdump_data_op+0x7e>
			cont = msg->payload.ext.next;
 801a96a:	6946      	ldr	r6, [r0, #20]
 801a96c:	e001      	b.n	801a972 <log_msg_hexdump_data_op+0x7e>
			cont = cont->next;
 801a96e:	6836      	ldr	r6, [r6, #0]
			offset -= chunk_len;
 801a970:	3c1c      	subs	r4, #28
		while (offset >= chunk_len) {
 801a972:	2c1b      	cmp	r4, #27
 801a974:	d8fb      	bhi.n	801a96e <log_msg_hexdump_data_op+0x7a>
 801a976:	e009      	b.n	801a98c <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
 801a978:	1931      	adds	r1, r6, r4
 801a97a:	462a      	mov	r2, r5
 801a97c:	3104      	adds	r1, #4
 801a97e:	4640      	mov	r0, r8
 801a980:	f001 ff95 	bl	801c8ae <memcpy>
		cont = cont->next;
 801a984:	6836      	ldr	r6, [r6, #0]
		req_len -= cpy_len;
 801a986:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
 801a988:	44a8      	add	r8, r5
		offset = 0;
 801a98a:	2400      	movs	r4, #0
	while ((req_len > 0) && (cont != NULL)) {
 801a98c:	2f00      	cmp	r7, #0
 801a98e:	d0dd      	beq.n	801a94c <log_msg_hexdump_data_op+0x58>
 801a990:	2e00      	cmp	r6, #0
 801a992:	d0db      	beq.n	801a94c <log_msg_hexdump_data_op+0x58>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
 801a994:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
 801a998:	42bd      	cmp	r5, r7
 801a99a:	bf28      	it	cs
 801a99c:	463d      	movcs	r5, r7
		if (put_op) {
 801a99e:	f1b9 0f00 	cmp.w	r9, #0
 801a9a2:	d0e9      	beq.n	801a978 <log_msg_hexdump_data_op+0x84>
			(void)memcpy(&cont->payload.bytes[offset],
 801a9a4:	1930      	adds	r0, r6, r4
 801a9a6:	462a      	mov	r2, r5
 801a9a8:	4641      	mov	r1, r8
 801a9aa:	3004      	adds	r0, #4
 801a9ac:	f001 ff7f 	bl	801c8ae <memcpy>
 801a9b0:	e7e8      	b.n	801a984 <log_msg_hexdump_data_op+0x90>

0801a9b2 <log_msg_get>:
	atomic_inc(&msg->hdr.ref_cnt);
 801a9b2:	3004      	adds	r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 801a9b4:	f3bf 8f5b 	dmb	ish
 801a9b8:	e850 3f00 	ldrex	r3, [r0]
 801a9bc:	3301      	adds	r3, #1
 801a9be:	e840 3200 	strex	r2, r3, [r0]
 801a9c2:	2a00      	cmp	r2, #0
 801a9c4:	d1f8      	bne.n	801a9b8 <log_msg_get+0x6>
 801a9c6:	f3bf 8f5b 	dmb	ish
}
 801a9ca:	4770      	bx	lr

0801a9cc <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
 801a9cc:	7a40      	ldrb	r0, [r0, #9]
}
 801a9ce:	0900      	lsrs	r0, r0, #4
 801a9d0:	4770      	bx	lr

0801a9d2 <log_msg_arg_get>:
{
 801a9d2:	b508      	push	{r3, lr}
	if (arg_idx >= msg->hdr.params.std.nargs) {
 801a9d4:	7a43      	ldrb	r3, [r0, #9]
 801a9d6:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
 801a9da:	d20a      	bcs.n	801a9f2 <log_msg_arg_get+0x20>
 801a9dc:	091a      	lsrs	r2, r3, #4
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
 801a9de:	2a03      	cmp	r2, #3
 801a9e0:	d804      	bhi.n	801a9ec <log_msg_arg_get+0x1a>
		arg = msg->payload.single.args[arg_idx];
 801a9e2:	3104      	adds	r1, #4
 801a9e4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 801a9e8:	6840      	ldr	r0, [r0, #4]
 801a9ea:	e003      	b.n	801a9f4 <log_msg_arg_get+0x22>
		arg = cont_arg_get(msg, arg_idx);
 801a9ec:	f7ff ff49 	bl	801a882 <cont_arg_get>
 801a9f0:	e000      	b.n	801a9f4 <log_msg_arg_get+0x22>
		return 0;
 801a9f2:	2000      	movs	r0, #0
}
 801a9f4:	bd08      	pop	{r3, pc}

0801a9f6 <log_msg_str_get>:
}
 801a9f6:	6900      	ldr	r0, [r0, #16]
 801a9f8:	4770      	bx	lr

0801a9fa <log_msg_put>:
{
 801a9fa:	b508      	push	{r3, lr}
	atomic_dec(&msg->hdr.ref_cnt);
 801a9fc:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 801a9fe:	f3bf 8f5b 	dmb	ish
 801aa02:	e853 2f00 	ldrex	r2, [r3]
 801aa06:	3a01      	subs	r2, #1
 801aa08:	e843 2100 	strex	r1, r2, [r3]
 801aa0c:	2900      	cmp	r1, #0
 801aa0e:	d1f8      	bne.n	801aa02 <log_msg_put+0x8>
 801aa10:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
 801aa14:	6843      	ldr	r3, [r0, #4]
 801aa16:	b103      	cbz	r3, 801aa1a <log_msg_put+0x20>
}
 801aa18:	bd08      	pop	{r3, pc}
		msg_free(msg);
 801aa1a:	f7eb ffe5 	bl	80069e8 <msg_free>
}
 801aa1e:	e7fb      	b.n	801aa18 <log_msg_put+0x1e>

0801aa20 <msg_alloc>:
{
 801aa20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa22:	4605      	mov	r5, r0
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 801aa24:	f7eb ffc4 	bl	80069b0 <log_msg_chunk_alloc>
	if (msg != NULL) {
 801aa28:	4607      	mov	r7, r0
 801aa2a:	b140      	cbz	r0, 801aa3e <msg_alloc+0x1e>
		msg->hdr.ref_cnt = 1;
 801aa2c:	2301      	movs	r3, #1
 801aa2e:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 801aa30:	2200      	movs	r2, #0
 801aa32:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
 801aa34:	f04f 0300 	mov.w	r3, #0
 801aa38:	f362 0300 	bfi	r3, r2, #0, #1
 801aa3c:	7203      	strb	r3, [r0, #8]
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
 801aa3e:	b1f7      	cbz	r7, 801aa7e <msg_alloc+0x5e>
 801aa40:	2d03      	cmp	r5, #3
 801aa42:	d91c      	bls.n	801aa7e <msg_alloc+0x5e>
	msg->hdr.params.std.nargs = 0U;
 801aa44:	7a7b      	ldrb	r3, [r7, #9]
 801aa46:	f36f 1307 	bfc	r3, #4, #4
 801aa4a:	727b      	strb	r3, [r7, #9]
	msg->hdr.params.generic.ext = 1;
 801aa4c:	7a3b      	ldrb	r3, [r7, #8]
 801aa4e:	f043 0302 	orr.w	r3, r3, #2
 801aa52:	723b      	strb	r3, [r7, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
 801aa54:	3d02      	subs	r5, #2
	next = &msg->payload.ext.next;
 801aa56:	f107 0614 	add.w	r6, r7, #20
	*next = NULL;
 801aa5a:	2300      	movs	r3, #0
 801aa5c:	617b      	str	r3, [r7, #20]
	while (n > 0) {
 801aa5e:	2d00      	cmp	r5, #0
 801aa60:	dd0d      	ble.n	801aa7e <msg_alloc+0x5e>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
 801aa62:	f7eb ffa5 	bl	80069b0 <log_msg_chunk_alloc>
		if (cont == NULL) {
 801aa66:	4604      	mov	r4, r0
 801aa68:	b128      	cbz	r0, 801aa76 <msg_alloc+0x56>
		*next = cont;
 801aa6a:	6030      	str	r0, [r6, #0]
		cont->next = NULL;
 801aa6c:	2300      	movs	r3, #0
 801aa6e:	6003      	str	r3, [r0, #0]
		next = &cont->next;
 801aa70:	4606      	mov	r6, r0
		n -= ARGS_CONT_MSG;
 801aa72:	3d07      	subs	r5, #7
 801aa74:	e7f3      	b.n	801aa5e <msg_alloc+0x3e>
			msg_free(msg);
 801aa76:	4638      	mov	r0, r7
 801aa78:	f7eb ffb6 	bl	80069e8 <msg_free>
			return NULL;
 801aa7c:	4627      	mov	r7, r4
}
 801aa7e:	4638      	mov	r0, r7
 801aa80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801aa82 <log_msg_create_n>:
{
 801aa82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa84:	4607      	mov	r7, r0
 801aa86:	460e      	mov	r6, r1
 801aa88:	4614      	mov	r4, r2
	msg = msg_alloc(nargs);
 801aa8a:	4610      	mov	r0, r2
 801aa8c:	f7ff ffc8 	bl	801aa20 <msg_alloc>
	if (msg != NULL) {
 801aa90:	4605      	mov	r5, r0
 801aa92:	b140      	cbz	r0, 801aaa6 <log_msg_create_n+0x24>
		msg->str = str;
 801aa94:	6107      	str	r7, [r0, #16]
		msg->hdr.params.std.nargs = nargs;
 801aa96:	7a43      	ldrb	r3, [r0, #9]
 801aa98:	f364 1307 	bfi	r3, r4, #4, #4
 801aa9c:	7243      	strb	r3, [r0, #9]
		copy_args_to_msg(msg, args, nargs);
 801aa9e:	4622      	mov	r2, r4
 801aaa0:	4631      	mov	r1, r6
 801aaa2:	f7ff ff00 	bl	801a8a6 <copy_args_to_msg>
}
 801aaa6:	4628      	mov	r0, r5
 801aaa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801aaaa <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
 801aaaa:	b510      	push	{r4, lr}
 801aaac:	b082      	sub	sp, #8
	log_msg_hexdump_data_op(msg, data, length, offset, false);
 801aaae:	2400      	movs	r4, #0
 801aab0:	9400      	str	r4, [sp, #0]
 801aab2:	f7ff ff1f 	bl	801a8f4 <log_msg_hexdump_data_op>
}
 801aab6:	b002      	add	sp, #8
 801aab8:	bd10      	pop	{r4, pc}

0801aaba <buffer_write>:
{
 801aaba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aabc:	4607      	mov	r7, r0
 801aabe:	460d      	mov	r5, r1
 801aac0:	4614      	mov	r4, r2
 801aac2:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
 801aac4:	4632      	mov	r2, r6
 801aac6:	4621      	mov	r1, r4
 801aac8:	4628      	mov	r0, r5
 801aaca:	47b8      	blx	r7
		buf += processed;
 801aacc:	4405      	add	r5, r0
	} while (len != 0);
 801aace:	1a24      	subs	r4, r4, r0
 801aad0:	d1f8      	bne.n	801aac4 <buffer_write+0xa>
}
 801aad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801aad4 <color_prefix>:
{
 801aad4:	b508      	push	{r3, lr}
 801aad6:	4613      	mov	r3, r2
	color_print(log_output, color, true, level);
 801aad8:	2201      	movs	r2, #1
 801aada:	f7ec f81f 	bl	8006b1c <color_print>
}
 801aade:	bd08      	pop	{r3, pc}

0801aae0 <color_postfix>:
{
 801aae0:	b508      	push	{r3, lr}
 801aae2:	4613      	mov	r3, r2
	color_print(log_output, color, false, level);
 801aae4:	2200      	movs	r2, #0
 801aae6:	f7ec f819 	bl	8006b1c <color_print>
}
 801aaea:	bd08      	pop	{r3, pc}

0801aaec <postfix_print>:
{
 801aaec:	b538      	push	{r3, r4, r5, lr}
 801aaee:	4605      	mov	r5, r0
 801aaf0:	460c      	mov	r4, r1
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
 801aaf2:	f001 0101 	and.w	r1, r1, #1
 801aaf6:	f7ff fff3 	bl	801aae0 <color_postfix>
	newline_print(log_output, flags);
 801aafa:	4621      	mov	r1, r4
 801aafc:	4628      	mov	r0, r5
 801aafe:	f7ec f823 	bl	8006b48 <newline_print>
}
 801ab02:	bd38      	pop	{r3, r4, r5, pc}

0801ab04 <prefix_print>:
{
 801ab04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ab08:	b083      	sub	sp, #12
 801ab0a:	4604      	mov	r4, r0
 801ab0c:	4615      	mov	r5, r2
 801ab0e:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 801ab12:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 801ab16:	f3c1 08c0 	ubfx	r8, r1, #3, #1
	if (stamp) {
 801ab1a:	f011 0702 	ands.w	r7, r1, #2
 801ab1e:	d113      	bne.n	801ab48 <prefix_print+0x44>
		color_prefix(log_output, colors_on, level);
 801ab20:	4632      	mov	r2, r6
 801ab22:	4649      	mov	r1, r9
 801ab24:	4620      	mov	r0, r4
 801ab26:	f7ff ffd5 	bl	801aad4 <color_prefix>
	length += ids_print(log_output, level_on, func_on,
 801ab2a:	9601      	str	r6, [sp, #4]
 801ab2c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801ab30:	9300      	str	r3, [sp, #0]
 801ab32:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 801ab36:	462a      	mov	r2, r5
 801ab38:	4641      	mov	r1, r8
 801ab3a:	4620      	mov	r0, r4
 801ab3c:	f7ec f876 	bl	8006c2c <ids_print>
}
 801ab40:	4438      	add	r0, r7
 801ab42:	b003      	add	sp, #12
 801ab44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		length += timestamp_print(log_output, flags, timestamp);
 801ab48:	461a      	mov	r2, r3
 801ab4a:	f7eb ffa1 	bl	8006a90 <timestamp_print>
 801ab4e:	4607      	mov	r7, r0
 801ab50:	e7e6      	b.n	801ab20 <prefix_print+0x1c>

0801ab52 <std_print>:
{
 801ab52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab56:	b08e      	sub	sp, #56	; 0x38
 801ab58:	af0e      	add	r7, sp, #56	; 0x38
 801ab5a:	4606      	mov	r6, r0
 801ab5c:	4689      	mov	r9, r1
	const char *str = log_msg_str_get(msg);
 801ab5e:	f7ff ff4a 	bl	801a9f6 <log_msg_str_get>
 801ab62:	4682      	mov	sl, r0
	uint32_t nargs = log_msg_nargs_get(msg);
 801ab64:	4630      	mov	r0, r6
 801ab66:	f7ff ff31 	bl	801a9cc <log_msg_nargs_get>
 801ab6a:	4680      	mov	r8, r0
	uint32_t *args = alloca(sizeof(uint32_t)*nargs);
 801ab6c:	0083      	lsls	r3, r0, #2
 801ab6e:	3307      	adds	r3, #7
 801ab70:	f023 0307 	bic.w	r3, r3, #7
 801ab74:	ebad 0d03 	sub.w	sp, sp, r3
 801ab78:	ad0e      	add	r5, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
 801ab7a:	2400      	movs	r4, #0
 801ab7c:	4544      	cmp	r4, r8
 801ab7e:	d207      	bcs.n	801ab90 <std_print+0x3e>
		args[i] = log_msg_arg_get(msg, i);
 801ab80:	4621      	mov	r1, r4
 801ab82:	4630      	mov	r0, r6
 801ab84:	f7ff ff25 	bl	801a9d2 <log_msg_arg_get>
 801ab88:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (i = 0; i < nargs; i++) {
 801ab8c:	3401      	adds	r4, #1
 801ab8e:	e7f5      	b.n	801ab7c <std_print+0x2a>
	switch (log_msg_nargs_get(msg)) {
 801ab90:	4630      	mov	r0, r6
 801ab92:	f7ff ff1b 	bl	801a9cc <log_msg_nargs_get>
 801ab96:	280f      	cmp	r0, #15
 801ab98:	d815      	bhi.n	801abc6 <std_print+0x74>
 801ab9a:	e8df f010 	tbh	[pc, r0, lsl #1]
 801ab9e:	0010      	.short	0x0010
 801aba0:	001d0017 	.word	0x001d0017
 801aba4:	002d0024 	.word	0x002d0024
 801aba8:	00450038 	.word	0x00450038
 801abac:	00650054 	.word	0x00650054
 801abb0:	008d0078 	.word	0x008d0078
 801abb4:	00bd00a4 	.word	0x00bd00a4
 801abb8:	00f500d8 	.word	0x00f500d8
 801abbc:	0114      	.short	0x0114
		print_formatted(log_output, str);
 801abbe:	4651      	mov	r1, sl
 801abc0:	4648      	mov	r0, r9
 801abc2:	f7eb ff51 	bl	8006a68 <print_formatted>
}
 801abc6:	46bd      	mov	sp, r7
 801abc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
 801abcc:	682a      	ldr	r2, [r5, #0]
 801abce:	4651      	mov	r1, sl
 801abd0:	4648      	mov	r0, r9
 801abd2:	f7eb ff49 	bl	8006a68 <print_formatted>
		break;
 801abd6:	e7f6      	b.n	801abc6 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1]);
 801abd8:	686b      	ldr	r3, [r5, #4]
 801abda:	682a      	ldr	r2, [r5, #0]
 801abdc:	4651      	mov	r1, sl
 801abde:	4648      	mov	r0, r9
 801abe0:	f7eb ff42 	bl	8006a68 <print_formatted>
		break;
 801abe4:	e7ef      	b.n	801abc6 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2]);
 801abe6:	686b      	ldr	r3, [r5, #4]
 801abe8:	682a      	ldr	r2, [r5, #0]
 801abea:	68a9      	ldr	r1, [r5, #8]
 801abec:	9100      	str	r1, [sp, #0]
 801abee:	4651      	mov	r1, sl
 801abf0:	4648      	mov	r0, r9
 801abf2:	f7eb ff39 	bl	8006a68 <print_formatted>
		break;
 801abf6:	e7e6      	b.n	801abc6 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
 801abf8:	686b      	ldr	r3, [r5, #4]
 801abfa:	682a      	ldr	r2, [r5, #0]
 801abfc:	68e9      	ldr	r1, [r5, #12]
 801abfe:	9101      	str	r1, [sp, #4]
 801ac00:	68a9      	ldr	r1, [r5, #8]
 801ac02:	9100      	str	r1, [sp, #0]
 801ac04:	4651      	mov	r1, sl
 801ac06:	4648      	mov	r0, r9
 801ac08:	f7eb ff2e 	bl	8006a68 <print_formatted>
		break;
 801ac0c:	e7db      	b.n	801abc6 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
 801ac0e:	686b      	ldr	r3, [r5, #4]
 801ac10:	682a      	ldr	r2, [r5, #0]
 801ac12:	6929      	ldr	r1, [r5, #16]
 801ac14:	9102      	str	r1, [sp, #8]
 801ac16:	68e9      	ldr	r1, [r5, #12]
 801ac18:	9101      	str	r1, [sp, #4]
 801ac1a:	68a9      	ldr	r1, [r5, #8]
 801ac1c:	9100      	str	r1, [sp, #0]
 801ac1e:	4651      	mov	r1, sl
 801ac20:	4648      	mov	r0, r9
 801ac22:	f7eb ff21 	bl	8006a68 <print_formatted>
		break;
 801ac26:	e7ce      	b.n	801abc6 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
 801ac28:	686b      	ldr	r3, [r5, #4]
 801ac2a:	682a      	ldr	r2, [r5, #0]
 801ac2c:	6969      	ldr	r1, [r5, #20]
 801ac2e:	9103      	str	r1, [sp, #12]
 801ac30:	6929      	ldr	r1, [r5, #16]
 801ac32:	9102      	str	r1, [sp, #8]
 801ac34:	68e9      	ldr	r1, [r5, #12]
 801ac36:	9101      	str	r1, [sp, #4]
 801ac38:	68a9      	ldr	r1, [r5, #8]
 801ac3a:	9100      	str	r1, [sp, #0]
 801ac3c:	4651      	mov	r1, sl
 801ac3e:	4648      	mov	r0, r9
 801ac40:	f7eb ff12 	bl	8006a68 <print_formatted>
		break;
 801ac44:	e7bf      	b.n	801abc6 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
 801ac46:	686b      	ldr	r3, [r5, #4]
 801ac48:	682a      	ldr	r2, [r5, #0]
 801ac4a:	69a9      	ldr	r1, [r5, #24]
 801ac4c:	9104      	str	r1, [sp, #16]
 801ac4e:	6969      	ldr	r1, [r5, #20]
 801ac50:	9103      	str	r1, [sp, #12]
 801ac52:	6929      	ldr	r1, [r5, #16]
 801ac54:	9102      	str	r1, [sp, #8]
 801ac56:	68e9      	ldr	r1, [r5, #12]
 801ac58:	9101      	str	r1, [sp, #4]
 801ac5a:	68a9      	ldr	r1, [r5, #8]
 801ac5c:	9100      	str	r1, [sp, #0]
 801ac5e:	4651      	mov	r1, sl
 801ac60:	4648      	mov	r0, r9
 801ac62:	f7eb ff01 	bl	8006a68 <print_formatted>
		break;
 801ac66:	e7ae      	b.n	801abc6 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
 801ac68:	686b      	ldr	r3, [r5, #4]
 801ac6a:	682a      	ldr	r2, [r5, #0]
 801ac6c:	69e9      	ldr	r1, [r5, #28]
 801ac6e:	9105      	str	r1, [sp, #20]
 801ac70:	69a9      	ldr	r1, [r5, #24]
 801ac72:	9104      	str	r1, [sp, #16]
 801ac74:	6969      	ldr	r1, [r5, #20]
 801ac76:	9103      	str	r1, [sp, #12]
 801ac78:	6929      	ldr	r1, [r5, #16]
 801ac7a:	9102      	str	r1, [sp, #8]
 801ac7c:	68e9      	ldr	r1, [r5, #12]
 801ac7e:	9101      	str	r1, [sp, #4]
 801ac80:	68a9      	ldr	r1, [r5, #8]
 801ac82:	9100      	str	r1, [sp, #0]
 801ac84:	4651      	mov	r1, sl
 801ac86:	4648      	mov	r0, r9
 801ac88:	f7eb feee 	bl	8006a68 <print_formatted>
		break;
 801ac8c:	e79b      	b.n	801abc6 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
 801ac8e:	686b      	ldr	r3, [r5, #4]
 801ac90:	682a      	ldr	r2, [r5, #0]
 801ac92:	6a29      	ldr	r1, [r5, #32]
 801ac94:	9106      	str	r1, [sp, #24]
 801ac96:	69e9      	ldr	r1, [r5, #28]
 801ac98:	9105      	str	r1, [sp, #20]
 801ac9a:	69a9      	ldr	r1, [r5, #24]
 801ac9c:	9104      	str	r1, [sp, #16]
 801ac9e:	6969      	ldr	r1, [r5, #20]
 801aca0:	9103      	str	r1, [sp, #12]
 801aca2:	6929      	ldr	r1, [r5, #16]
 801aca4:	9102      	str	r1, [sp, #8]
 801aca6:	68e9      	ldr	r1, [r5, #12]
 801aca8:	9101      	str	r1, [sp, #4]
 801acaa:	68a9      	ldr	r1, [r5, #8]
 801acac:	9100      	str	r1, [sp, #0]
 801acae:	4651      	mov	r1, sl
 801acb0:	4648      	mov	r0, r9
 801acb2:	f7eb fed9 	bl	8006a68 <print_formatted>
		break;
 801acb6:	e786      	b.n	801abc6 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
 801acb8:	686b      	ldr	r3, [r5, #4]
 801acba:	682a      	ldr	r2, [r5, #0]
 801acbc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 801acbe:	9107      	str	r1, [sp, #28]
 801acc0:	6a29      	ldr	r1, [r5, #32]
 801acc2:	9106      	str	r1, [sp, #24]
 801acc4:	69e9      	ldr	r1, [r5, #28]
 801acc6:	9105      	str	r1, [sp, #20]
 801acc8:	69a9      	ldr	r1, [r5, #24]
 801acca:	9104      	str	r1, [sp, #16]
 801accc:	6969      	ldr	r1, [r5, #20]
 801acce:	9103      	str	r1, [sp, #12]
 801acd0:	6929      	ldr	r1, [r5, #16]
 801acd2:	9102      	str	r1, [sp, #8]
 801acd4:	68e9      	ldr	r1, [r5, #12]
 801acd6:	9101      	str	r1, [sp, #4]
 801acd8:	68a9      	ldr	r1, [r5, #8]
 801acda:	9100      	str	r1, [sp, #0]
 801acdc:	4651      	mov	r1, sl
 801acde:	4648      	mov	r0, r9
 801ace0:	f7eb fec2 	bl	8006a68 <print_formatted>
		break;
 801ace4:	e76f      	b.n	801abc6 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
 801ace6:	686b      	ldr	r3, [r5, #4]
 801ace8:	682a      	ldr	r2, [r5, #0]
 801acea:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 801acec:	9108      	str	r1, [sp, #32]
 801acee:	6a69      	ldr	r1, [r5, #36]	; 0x24
 801acf0:	9107      	str	r1, [sp, #28]
 801acf2:	6a29      	ldr	r1, [r5, #32]
 801acf4:	9106      	str	r1, [sp, #24]
 801acf6:	69e9      	ldr	r1, [r5, #28]
 801acf8:	9105      	str	r1, [sp, #20]
 801acfa:	69a9      	ldr	r1, [r5, #24]
 801acfc:	9104      	str	r1, [sp, #16]
 801acfe:	6969      	ldr	r1, [r5, #20]
 801ad00:	9103      	str	r1, [sp, #12]
 801ad02:	6929      	ldr	r1, [r5, #16]
 801ad04:	9102      	str	r1, [sp, #8]
 801ad06:	68e9      	ldr	r1, [r5, #12]
 801ad08:	9101      	str	r1, [sp, #4]
 801ad0a:	68a9      	ldr	r1, [r5, #8]
 801ad0c:	9100      	str	r1, [sp, #0]
 801ad0e:	4651      	mov	r1, sl
 801ad10:	4648      	mov	r0, r9
 801ad12:	f7eb fea9 	bl	8006a68 <print_formatted>
		break;
 801ad16:	e756      	b.n	801abc6 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
 801ad18:	686b      	ldr	r3, [r5, #4]
 801ad1a:	682a      	ldr	r2, [r5, #0]
 801ad1c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 801ad1e:	9109      	str	r1, [sp, #36]	; 0x24
 801ad20:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 801ad22:	9108      	str	r1, [sp, #32]
 801ad24:	6a69      	ldr	r1, [r5, #36]	; 0x24
 801ad26:	9107      	str	r1, [sp, #28]
 801ad28:	6a29      	ldr	r1, [r5, #32]
 801ad2a:	9106      	str	r1, [sp, #24]
 801ad2c:	69e9      	ldr	r1, [r5, #28]
 801ad2e:	9105      	str	r1, [sp, #20]
 801ad30:	69a9      	ldr	r1, [r5, #24]
 801ad32:	9104      	str	r1, [sp, #16]
 801ad34:	6969      	ldr	r1, [r5, #20]
 801ad36:	9103      	str	r1, [sp, #12]
 801ad38:	6929      	ldr	r1, [r5, #16]
 801ad3a:	9102      	str	r1, [sp, #8]
 801ad3c:	68e9      	ldr	r1, [r5, #12]
 801ad3e:	9101      	str	r1, [sp, #4]
 801ad40:	68a9      	ldr	r1, [r5, #8]
 801ad42:	9100      	str	r1, [sp, #0]
 801ad44:	4651      	mov	r1, sl
 801ad46:	4648      	mov	r0, r9
 801ad48:	f7eb fe8e 	bl	8006a68 <print_formatted>
		break;
 801ad4c:	e73b      	b.n	801abc6 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
 801ad4e:	686b      	ldr	r3, [r5, #4]
 801ad50:	682a      	ldr	r2, [r5, #0]
 801ad52:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801ad54:	910a      	str	r1, [sp, #40]	; 0x28
 801ad56:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 801ad58:	9109      	str	r1, [sp, #36]	; 0x24
 801ad5a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 801ad5c:	9108      	str	r1, [sp, #32]
 801ad5e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 801ad60:	9107      	str	r1, [sp, #28]
 801ad62:	6a29      	ldr	r1, [r5, #32]
 801ad64:	9106      	str	r1, [sp, #24]
 801ad66:	69e9      	ldr	r1, [r5, #28]
 801ad68:	9105      	str	r1, [sp, #20]
 801ad6a:	69a9      	ldr	r1, [r5, #24]
 801ad6c:	9104      	str	r1, [sp, #16]
 801ad6e:	6969      	ldr	r1, [r5, #20]
 801ad70:	9103      	str	r1, [sp, #12]
 801ad72:	6929      	ldr	r1, [r5, #16]
 801ad74:	9102      	str	r1, [sp, #8]
 801ad76:	68e9      	ldr	r1, [r5, #12]
 801ad78:	9101      	str	r1, [sp, #4]
 801ad7a:	68a9      	ldr	r1, [r5, #8]
 801ad7c:	9100      	str	r1, [sp, #0]
 801ad7e:	4651      	mov	r1, sl
 801ad80:	4648      	mov	r0, r9
 801ad82:	f7eb fe71 	bl	8006a68 <print_formatted>
		break;
 801ad86:	e71e      	b.n	801abc6 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
 801ad88:	686b      	ldr	r3, [r5, #4]
 801ad8a:	682a      	ldr	r2, [r5, #0]
 801ad8c:	6b69      	ldr	r1, [r5, #52]	; 0x34
 801ad8e:	910b      	str	r1, [sp, #44]	; 0x2c
 801ad90:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801ad92:	910a      	str	r1, [sp, #40]	; 0x28
 801ad94:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 801ad96:	9109      	str	r1, [sp, #36]	; 0x24
 801ad98:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 801ad9a:	9108      	str	r1, [sp, #32]
 801ad9c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 801ad9e:	9107      	str	r1, [sp, #28]
 801ada0:	6a29      	ldr	r1, [r5, #32]
 801ada2:	9106      	str	r1, [sp, #24]
 801ada4:	69e9      	ldr	r1, [r5, #28]
 801ada6:	9105      	str	r1, [sp, #20]
 801ada8:	69a9      	ldr	r1, [r5, #24]
 801adaa:	9104      	str	r1, [sp, #16]
 801adac:	6969      	ldr	r1, [r5, #20]
 801adae:	9103      	str	r1, [sp, #12]
 801adb0:	6929      	ldr	r1, [r5, #16]
 801adb2:	9102      	str	r1, [sp, #8]
 801adb4:	68e9      	ldr	r1, [r5, #12]
 801adb6:	9101      	str	r1, [sp, #4]
 801adb8:	68a9      	ldr	r1, [r5, #8]
 801adba:	9100      	str	r1, [sp, #0]
 801adbc:	4651      	mov	r1, sl
 801adbe:	4648      	mov	r0, r9
 801adc0:	f7eb fe52 	bl	8006a68 <print_formatted>
		break;
 801adc4:	e6ff      	b.n	801abc6 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
 801adc6:	686b      	ldr	r3, [r5, #4]
 801adc8:	682a      	ldr	r2, [r5, #0]
 801adca:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 801adcc:	910c      	str	r1, [sp, #48]	; 0x30
 801adce:	6b69      	ldr	r1, [r5, #52]	; 0x34
 801add0:	910b      	str	r1, [sp, #44]	; 0x2c
 801add2:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801add4:	910a      	str	r1, [sp, #40]	; 0x28
 801add6:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 801add8:	9109      	str	r1, [sp, #36]	; 0x24
 801adda:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 801addc:	9108      	str	r1, [sp, #32]
 801adde:	6a69      	ldr	r1, [r5, #36]	; 0x24
 801ade0:	9107      	str	r1, [sp, #28]
 801ade2:	6a29      	ldr	r1, [r5, #32]
 801ade4:	9106      	str	r1, [sp, #24]
 801ade6:	69e9      	ldr	r1, [r5, #28]
 801ade8:	9105      	str	r1, [sp, #20]
 801adea:	69a9      	ldr	r1, [r5, #24]
 801adec:	9104      	str	r1, [sp, #16]
 801adee:	6969      	ldr	r1, [r5, #20]
 801adf0:	9103      	str	r1, [sp, #12]
 801adf2:	6929      	ldr	r1, [r5, #16]
 801adf4:	9102      	str	r1, [sp, #8]
 801adf6:	68e9      	ldr	r1, [r5, #12]
 801adf8:	9101      	str	r1, [sp, #4]
 801adfa:	68a9      	ldr	r1, [r5, #8]
 801adfc:	9100      	str	r1, [sp, #0]
 801adfe:	4651      	mov	r1, sl
 801ae00:	4648      	mov	r0, r9
 801ae02:	f7eb fe31 	bl	8006a68 <print_formatted>
}
 801ae06:	e6de      	b.n	801abc6 <std_print+0x74>

0801ae08 <log_output_flush>:
{
 801ae08:	b510      	push	{r4, lr}
 801ae0a:	4604      	mov	r4, r0
		     log_output->control_block->offset,
 801ae0c:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
 801ae0e:	6853      	ldr	r3, [r2, #4]
 801ae10:	6812      	ldr	r2, [r2, #0]
 801ae12:	6881      	ldr	r1, [r0, #8]
 801ae14:	6800      	ldr	r0, [r0, #0]
 801ae16:	f7ff fe50 	bl	801aaba <buffer_write>
	log_output->control_block->offset = 0;
 801ae1a:	6863      	ldr	r3, [r4, #4]
 801ae1c:	2200      	movs	r2, #0
 801ae1e:	601a      	str	r2, [r3, #0]
}
 801ae20:	bd10      	pop	{r4, pc}

0801ae22 <out_func>:
{
 801ae22:	b538      	push	{r3, r4, r5, lr}
 801ae24:	4605      	mov	r5, r0
 801ae26:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
 801ae28:	684b      	ldr	r3, [r1, #4]
 801ae2a:	681a      	ldr	r2, [r3, #0]
 801ae2c:	68cb      	ldr	r3, [r1, #12]
 801ae2e:	429a      	cmp	r2, r3
 801ae30:	d00f      	beq.n	801ae52 <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
 801ae32:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 801ae34:	f3bf 8f5b 	dmb	ish
 801ae38:	e853 2f00 	ldrex	r2, [r3]
 801ae3c:	1c51      	adds	r1, r2, #1
 801ae3e:	e843 1000 	strex	r0, r1, [r3]
 801ae42:	2800      	cmp	r0, #0
 801ae44:	d1f8      	bne.n	801ae38 <out_func+0x16>
 801ae46:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
 801ae4a:	68a3      	ldr	r3, [r4, #8]
 801ae4c:	549d      	strb	r5, [r3, r2]
}
 801ae4e:	2000      	movs	r0, #0
 801ae50:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
 801ae52:	4608      	mov	r0, r1
 801ae54:	f7ff ffd8 	bl	801ae08 <log_output_flush>
 801ae58:	e7eb      	b.n	801ae32 <out_func+0x10>

0801ae5a <log_output_msg_process>:
{
 801ae5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ae5c:	b085      	sub	sp, #20
 801ae5e:	4606      	mov	r6, r0
 801ae60:	460c      	mov	r4, r1
 801ae62:	4617      	mov	r7, r2
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 801ae64:	7a0b      	ldrb	r3, [r1, #8]
 801ae66:	f083 0301 	eor.w	r3, r3, #1
 801ae6a:	f003 0201 	and.w	r2, r3, #1
	return msg->hdr.timestamp;
 801ae6e:	68cb      	ldr	r3, [r1, #12]
	return msg->hdr.ids.level;
 801ae70:	7a89      	ldrb	r1, [r1, #10]
	return msg->hdr.ids.domain_id;
 801ae72:	f3c1 0cc2 	ubfx	ip, r1, #3, #3
	return msg->hdr.ids.source_id;
 801ae76:	8960      	ldrh	r0, [r4, #10]
			0 : prefix_print(log_output, flags, std_msg, timestamp,
 801ae78:	f011 0507 	ands.w	r5, r1, #7
 801ae7c:	d10f      	bne.n	801ae9e <log_output_msg_process+0x44>
 801ae7e:	2200      	movs	r2, #0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 801ae80:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg)) {
 801ae82:	f013 0f01 	tst.w	r3, #1
 801ae86:	d015      	beq.n	801aeb4 <log_output_msg_process+0x5a>
	} else if (raw_string) {
 801ae88:	b9cd      	cbnz	r5, 801aebe <log_output_msg_process+0x64>
		raw_string_print(msg, log_output);
 801ae8a:	4631      	mov	r1, r6
 801ae8c:	4620      	mov	r0, r4
 801ae8e:	f7eb ff25 	bl	8006cdc <raw_string_print>
	if (!raw_string) {
 801ae92:	b9d5      	cbnz	r5, 801aeca <log_output_msg_process+0x70>
	log_output_flush(log_output);
 801ae94:	4630      	mov	r0, r6
 801ae96:	f7ff ffb7 	bl	801ae08 <log_output_flush>
}
 801ae9a:	b005      	add	sp, #20
 801ae9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ae9e:	0980      	lsrs	r0, r0, #6
			0 : prefix_print(log_output, flags, std_msg, timestamp,
 801aea0:	9002      	str	r0, [sp, #8]
 801aea2:	f8cd c004 	str.w	ip, [sp, #4]
 801aea6:	9500      	str	r5, [sp, #0]
 801aea8:	4639      	mov	r1, r7
 801aeaa:	4630      	mov	r0, r6
 801aeac:	f7ff fe2a 	bl	801ab04 <prefix_print>
 801aeb0:	4602      	mov	r2, r0
 801aeb2:	e7e5      	b.n	801ae80 <log_output_msg_process+0x26>
		std_print(msg, log_output);
 801aeb4:	4631      	mov	r1, r6
 801aeb6:	4620      	mov	r0, r4
 801aeb8:	f7ff fe4b 	bl	801ab52 <std_print>
 801aebc:	e7e9      	b.n	801ae92 <log_output_msg_process+0x38>
		hexdump_print(msg, log_output, prefix_offset, flags);
 801aebe:	463b      	mov	r3, r7
 801aec0:	4631      	mov	r1, r6
 801aec2:	4620      	mov	r0, r4
 801aec4:	f7eb fee0 	bl	8006c88 <hexdump_print>
 801aec8:	e7e3      	b.n	801ae92 <log_output_msg_process+0x38>
		postfix_print(log_output, flags, level);
 801aeca:	462a      	mov	r2, r5
 801aecc:	4639      	mov	r1, r7
 801aece:	4630      	mov	r0, r6
 801aed0:	f7ff fe0c 	bl	801aaec <postfix_print>
 801aed4:	e7de      	b.n	801ae94 <log_output_msg_process+0x3a>

0801aed6 <read_str>:
{
 801aed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aeda:	b084      	sub	sp, #16
 801aedc:	4605      	mov	r5, r0
 801aede:	460c      	mov	r4, r1
 801aee0:	4616      	mov	r6, r2
 801aee2:	461f      	mov	r7, r3
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
 801aee4:	f8d1 800c 	ldr.w	r8, [r1, #12]
				 strlen(attr->user_data));
 801aee8:	4640      	mov	r0, r8
 801aeea:	f001 fc9a 	bl	801c822 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
 801aeee:	b280      	uxth	r0, r0
 801aef0:	9002      	str	r0, [sp, #8]
 801aef2:	f8cd 8004 	str.w	r8, [sp, #4]
 801aef6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801aefa:	9300      	str	r3, [sp, #0]
 801aefc:	463b      	mov	r3, r7
 801aefe:	4632      	mov	r2, r6
 801af00:	4621      	mov	r1, r4
 801af02:	4628      	mov	r0, r5
 801af04:	f003 ffe8 	bl	801eed8 <bt_gatt_attr_read>
}
 801af08:	b004      	add	sp, #16
 801af0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801af0e <bas_init>:
}
 801af0e:	2000      	movs	r0, #0
 801af10:	4770      	bx	lr

0801af12 <nvs_flash_rd>:
{
 801af12:	b570      	push	{r4, r5, r6, lr}
	offset = fs->offset;
 801af14:	6805      	ldr	r5, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
 801af16:	8984      	ldrh	r4, [r0, #12]
 801af18:	0c0e      	lsrs	r6, r1, #16
 801af1a:	fb06 5404 	mla	r4, r6, r4, r5
	offset += addr & ADDR_OFFS_MASK;
 801af1e:	fa14 f181 	uxtah	r1, r4, r1
	rc = flash_read(fs->flash_device, offset, data, len);
 801af22:	6a80      	ldr	r0, [r0, #40]	; 0x28
	const struct flash_driver_api *api =
 801af24:	6884      	ldr	r4, [r0, #8]
	return api->read(dev, offset, data, len);
 801af26:	6824      	ldr	r4, [r4, #0]
 801af28:	47a0      	blx	r4
}
 801af2a:	bd70      	pop	{r4, r5, r6, pc}

0801af2c <nvs_flash_ate_rd>:
{
 801af2c:	b508      	push	{r3, lr}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
 801af2e:	2308      	movs	r3, #8
 801af30:	f7ff ffef 	bl	801af12 <nvs_flash_rd>
}
 801af34:	bd08      	pop	{r3, pc}

0801af36 <nvs_ate_cmp_const>:
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
 801af36:	2300      	movs	r3, #0
 801af38:	e000      	b.n	801af3c <nvs_ate_cmp_const+0x6>
 801af3a:	3301      	adds	r3, #1
 801af3c:	2b07      	cmp	r3, #7
 801af3e:	d804      	bhi.n	801af4a <nvs_ate_cmp_const+0x14>
		if (data8[i] != value) {
 801af40:	5cc2      	ldrb	r2, [r0, r3]
 801af42:	428a      	cmp	r2, r1
 801af44:	d0f9      	beq.n	801af3a <nvs_ate_cmp_const+0x4>
			return 1;
 801af46:	2001      	movs	r0, #1
}
 801af48:	4770      	bx	lr
	return 0;
 801af4a:	2000      	movs	r0, #0
 801af4c:	4770      	bx	lr

0801af4e <nvs_sector_advance>:
	*addr += (1 << ADDR_SECT_SHIFT);
 801af4e:	680b      	ldr	r3, [r1, #0]
 801af50:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 801af54:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
 801af56:	89c2      	ldrh	r2, [r0, #14]
 801af58:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
 801af5c:	d000      	beq.n	801af60 <nvs_sector_advance+0x12>
}
 801af5e:	4770      	bx	lr
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
 801af60:	eba3 4302 	sub.w	r3, r3, r2, lsl #16
 801af64:	600b      	str	r3, [r1, #0]
}
 801af66:	e7fa      	b.n	801af5e <nvs_sector_advance+0x10>

0801af68 <nvs_flash_block_cmp>:
{
 801af68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801af6c:	b089      	sub	sp, #36	; 0x24
 801af6e:	4681      	mov	r9, r0
 801af70:	460e      	mov	r6, r1
 801af72:	4617      	mov	r7, r2
 801af74:	461d      	mov	r5, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
 801af76:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801af78:	681b      	ldr	r3, [r3, #0]
 801af7a:	f1c3 0800 	rsb	r8, r3, #0
	block_size =
 801af7e:	f008 0820 	and.w	r8, r8, #32
	while (len) {
 801af82:	e002      	b.n	801af8a <nvs_flash_block_cmp+0x22>
		len -= bytes_to_cmp;
 801af84:	1b2d      	subs	r5, r5, r4
		addr += bytes_to_cmp;
 801af86:	4426      	add	r6, r4
		data8 += bytes_to_cmp;
 801af88:	4427      	add	r7, r4
	while (len) {
 801af8a:	b1a5      	cbz	r5, 801afb6 <nvs_flash_block_cmp+0x4e>
		bytes_to_cmp = MIN(block_size, len);
 801af8c:	462c      	mov	r4, r5
 801af8e:	4545      	cmp	r5, r8
 801af90:	bf28      	it	cs
 801af92:	4644      	movcs	r4, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
 801af94:	4623      	mov	r3, r4
 801af96:	466a      	mov	r2, sp
 801af98:	4631      	mov	r1, r6
 801af9a:	4648      	mov	r0, r9
 801af9c:	f7ff ffb9 	bl	801af12 <nvs_flash_rd>
		if (rc) {
 801afa0:	4603      	mov	r3, r0
 801afa2:	b948      	cbnz	r0, 801afb8 <nvs_flash_block_cmp+0x50>
		rc = memcmp(data8, buf, bytes_to_cmp);
 801afa4:	4622      	mov	r2, r4
 801afa6:	4669      	mov	r1, sp
 801afa8:	4638      	mov	r0, r7
 801afaa:	f001 fc68 	bl	801c87e <memcmp>
		if (rc) {
 801afae:	2800      	cmp	r0, #0
 801afb0:	d0e8      	beq.n	801af84 <nvs_flash_block_cmp+0x1c>
			return 1;
 801afb2:	2301      	movs	r3, #1
 801afb4:	e000      	b.n	801afb8 <nvs_flash_block_cmp+0x50>
	return 0;
 801afb6:	2300      	movs	r3, #0
}
 801afb8:	4618      	mov	r0, r3
 801afba:	b009      	add	sp, #36	; 0x24
 801afbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801afc0 <nvs_flash_cmp_const>:
{
 801afc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801afc4:	b088      	sub	sp, #32
 801afc6:	4680      	mov	r8, r0
 801afc8:	460e      	mov	r6, r1
 801afca:	4611      	mov	r1, r2
 801afcc:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
 801afce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801afd0:	681f      	ldr	r7, [r3, #0]
 801afd2:	427f      	negs	r7, r7
	block_size =
 801afd4:	f007 0720 	and.w	r7, r7, #32
	(void)memset(cmp, value, block_size);
 801afd8:	463a      	mov	r2, r7
 801afda:	4668      	mov	r0, sp
 801afdc:	f001 fc8c 	bl	801c8f8 <memset>
	while (len) {
 801afe0:	b174      	cbz	r4, 801b000 <nvs_flash_cmp_const+0x40>
		bytes_to_cmp = MIN(block_size, len);
 801afe2:	4625      	mov	r5, r4
 801afe4:	42bc      	cmp	r4, r7
 801afe6:	bf28      	it	cs
 801afe8:	463d      	movcs	r5, r7
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
 801afea:	462b      	mov	r3, r5
 801afec:	466a      	mov	r2, sp
 801afee:	4631      	mov	r1, r6
 801aff0:	4640      	mov	r0, r8
 801aff2:	f7ff ffb9 	bl	801af68 <nvs_flash_block_cmp>
		if (rc) {
 801aff6:	4603      	mov	r3, r0
 801aff8:	b918      	cbnz	r0, 801b002 <nvs_flash_cmp_const+0x42>
		len -= bytes_to_cmp;
 801affa:	1b64      	subs	r4, r4, r5
		addr += bytes_to_cmp;
 801affc:	442e      	add	r6, r5
 801affe:	e7ef      	b.n	801afe0 <nvs_flash_cmp_const+0x20>
	return 0;
 801b000:	2300      	movs	r3, #0
}
 801b002:	4618      	mov	r0, r3
 801b004:	b008      	add	sp, #32
 801b006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b00a <nvs_flash_erase_sector>:
{
 801b00a:	b570      	push	{r4, r5, r6, lr}
 801b00c:	4604      	mov	r4, r0
	addr &= ADDR_SECT_MASK;
 801b00e:	0c0d      	lsrs	r5, r1, #16
 801b010:	042d      	lsls	r5, r5, #16
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
 801b012:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801b014:	8983      	ldrh	r3, [r0, #12]
 801b016:	7912      	ldrb	r2, [r2, #4]
 801b018:	4629      	mov	r1, r5
 801b01a:	f7ff ffd1 	bl	801afc0 <nvs_flash_cmp_const>
	if (rc <= 0) {
 801b01e:	1e06      	subs	r6, r0, #0
 801b020:	dd18      	ble.n	801b054 <nvs_flash_erase_sector+0x4a>
	offset = fs->offset;
 801b022:	6823      	ldr	r3, [r4, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
 801b024:	89a1      	ldrh	r1, [r4, #12]
 801b026:	0c2d      	lsrs	r5, r5, #16
 801b028:	fb05 3501 	mla	r5, r5, r1, r3
	rc = flash_write_protection_set(fs->flash_device, 0);
 801b02c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	const struct flash_driver_api *api =
 801b02e:	6883      	ldr	r3, [r0, #8]
	return api->write_protection(dev, enable);
 801b030:	68db      	ldr	r3, [r3, #12]
 801b032:	2100      	movs	r1, #0
 801b034:	4798      	blx	r3
	if (rc) {
 801b036:	4606      	mov	r6, r0
 801b038:	b960      	cbnz	r0, 801b054 <nvs_flash_erase_sector+0x4a>
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
 801b03a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801b03c:	89a2      	ldrh	r2, [r4, #12]
	const struct flash_driver_api *api =
 801b03e:	6883      	ldr	r3, [r0, #8]
	return api->erase(dev, offset, size);
 801b040:	689b      	ldr	r3, [r3, #8]
 801b042:	4629      	mov	r1, r5
 801b044:	4798      	blx	r3
	if (rc) {
 801b046:	4606      	mov	r6, r0
 801b048:	b920      	cbnz	r0, 801b054 <nvs_flash_erase_sector+0x4a>
	(void) flash_write_protection_set(fs->flash_device, 1);
 801b04a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	const struct flash_driver_api *api =
 801b04c:	6883      	ldr	r3, [r0, #8]
	return api->write_protection(dev, enable);
 801b04e:	68db      	ldr	r3, [r3, #12]
 801b050:	2101      	movs	r1, #1
 801b052:	4798      	blx	r3
}
 801b054:	4630      	mov	r0, r6
 801b056:	bd70      	pop	{r4, r5, r6, pc}

0801b058 <nvs_ate_crc8_check>:
{
 801b058:	b510      	push	{r4, lr}
 801b05a:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
 801b05c:	2207      	movs	r2, #7
 801b05e:	4601      	mov	r1, r0
 801b060:	20ff      	movs	r0, #255	; 0xff
 801b062:	f7ea f88f 	bl	8005184 <crc8_ccitt>
	if (crc8 == entry->crc8) {
 801b066:	79e3      	ldrb	r3, [r4, #7]
 801b068:	4283      	cmp	r3, r0
 801b06a:	d001      	beq.n	801b070 <nvs_ate_crc8_check+0x18>
	return 1;
 801b06c:	2001      	movs	r0, #1
}
 801b06e:	bd10      	pop	{r4, pc}
		return 0;
 801b070:	2000      	movs	r0, #0
 801b072:	e7fc      	b.n	801b06e <nvs_ate_crc8_check+0x16>

0801b074 <nvs_recover_last_ate>:
{
 801b074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b078:	b082      	sub	sp, #8
 801b07a:	4606      	mov	r6, r0
 801b07c:	4688      	mov	r8, r1
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
 801b07e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801b080:	681f      	ldr	r7, [r3, #0]
 801b082:	b2fb      	uxtb	r3, r7
	if (write_block_size <= 1U) {
 801b084:	2b01      	cmp	r3, #1
 801b086:	d90b      	bls.n	801b0a0 <nvs_recover_last_ate+0x2c>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
 801b088:	461f      	mov	r7, r3
 801b08a:	3307      	adds	r3, #7
 801b08c:	427f      	negs	r7, r7
 801b08e:	401f      	ands	r7, r3
	*addr -= ate_size;
 801b090:	f8d8 4000 	ldr.w	r4, [r8]
 801b094:	1be4      	subs	r4, r4, r7
 801b096:	f8c8 4000 	str.w	r4, [r8]
	data_end_addr = *addr & ADDR_SECT_MASK;
 801b09a:	0c25      	lsrs	r5, r4, #16
 801b09c:	042d      	lsls	r5, r5, #16
	while (ate_end_addr > data_end_addr) {
 801b09e:	e002      	b.n	801b0a6 <nvs_recover_last_ate+0x32>
		return len;
 801b0a0:	2708      	movs	r7, #8
 801b0a2:	e7f5      	b.n	801b090 <nvs_recover_last_ate+0x1c>
		ate_end_addr -= ate_size;
 801b0a4:	1be4      	subs	r4, r4, r7
	while (ate_end_addr > data_end_addr) {
 801b0a6:	42ac      	cmp	r4, r5
 801b0a8:	d916      	bls.n	801b0d8 <nvs_recover_last_ate+0x64>
		rc = nvs_flash_ate_rd(fs, ate_end_addr, &end_ate);
 801b0aa:	466a      	mov	r2, sp
 801b0ac:	4621      	mov	r1, r4
 801b0ae:	4630      	mov	r0, r6
 801b0b0:	f7ff ff3c 	bl	801af2c <nvs_flash_ate_rd>
		if (rc) {
 801b0b4:	4603      	mov	r3, r0
 801b0b6:	b980      	cbnz	r0, 801b0da <nvs_recover_last_ate+0x66>
		if (!nvs_ate_crc8_check(&end_ate)) {
 801b0b8:	4668      	mov	r0, sp
 801b0ba:	f7ff ffcd 	bl	801b058 <nvs_ate_crc8_check>
 801b0be:	2800      	cmp	r0, #0
 801b0c0:	d1f0      	bne.n	801b0a4 <nvs_recover_last_ate+0x30>
			data_end_addr &= ADDR_SECT_MASK;
 801b0c2:	0c2d      	lsrs	r5, r5, #16
 801b0c4:	042d      	lsls	r5, r5, #16
			data_end_addr += end_ate.offset + end_ate.len;
 801b0c6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b0ca:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801b0ce:	4413      	add	r3, r2
 801b0d0:	441d      	add	r5, r3
			*addr = ate_end_addr;
 801b0d2:	f8c8 4000 	str.w	r4, [r8]
 801b0d6:	e7e5      	b.n	801b0a4 <nvs_recover_last_ate+0x30>
	return 0;
 801b0d8:	2300      	movs	r3, #0
}
 801b0da:	4618      	mov	r0, r3
 801b0dc:	b002      	add	sp, #8
 801b0de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b0e2 <nvs_prev_ate>:
{
 801b0e2:	b570      	push	{r4, r5, r6, lr}
 801b0e4:	b082      	sub	sp, #8
 801b0e6:	4604      	mov	r4, r0
 801b0e8:	460d      	mov	r5, r1
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
 801b0ea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801b0ec:	681b      	ldr	r3, [r3, #0]
 801b0ee:	b2d9      	uxtb	r1, r3
	if (write_block_size <= 1U) {
 801b0f0:	2901      	cmp	r1, #1
 801b0f2:	d926      	bls.n	801b142 <nvs_prev_ate+0x60>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
 801b0f4:	1dce      	adds	r6, r1, #7
 801b0f6:	424b      	negs	r3, r1
 801b0f8:	401e      	ands	r6, r3
	rc = nvs_flash_ate_rd(fs, *addr, ate);
 801b0fa:	6829      	ldr	r1, [r5, #0]
 801b0fc:	4620      	mov	r0, r4
 801b0fe:	f7ff ff15 	bl	801af2c <nvs_flash_ate_rd>
	if (rc) {
 801b102:	b9e0      	cbnz	r0, 801b13e <nvs_prev_ate+0x5c>
	*addr += ate_size;
 801b104:	682a      	ldr	r2, [r5, #0]
 801b106:	4432      	add	r2, r6
 801b108:	602a      	str	r2, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
 801b10a:	b291      	uxth	r1, r2
 801b10c:	89a3      	ldrh	r3, [r4, #12]
 801b10e:	1b9b      	subs	r3, r3, r6
 801b110:	4299      	cmp	r1, r3
 801b112:	d114      	bne.n	801b13e <nvs_prev_ate+0x5c>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
 801b114:	0c13      	lsrs	r3, r2, #16
 801b116:	d116      	bne.n	801b146 <nvs_prev_ate+0x64>
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
 801b118:	89e3      	ldrh	r3, [r4, #14]
 801b11a:	3b01      	subs	r3, #1
 801b11c:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 801b120:	602a      	str	r2, [r5, #0]
	rc = nvs_flash_ate_rd(fs, *addr, &close_ate);
 801b122:	466a      	mov	r2, sp
 801b124:	6829      	ldr	r1, [r5, #0]
 801b126:	4620      	mov	r0, r4
 801b128:	f7ff ff00 	bl	801af2c <nvs_flash_ate_rd>
	if (rc) {
 801b12c:	b938      	cbnz	r0, 801b13e <nvs_prev_ate+0x5c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
 801b12e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801b130:	7919      	ldrb	r1, [r3, #4]
 801b132:	4668      	mov	r0, sp
 801b134:	f7ff feff 	bl	801af36 <nvs_ate_cmp_const>
	if (!rc) {
 801b138:	b948      	cbnz	r0, 801b14e <nvs_prev_ate+0x6c>
		*addr = fs->ate_wra;
 801b13a:	6863      	ldr	r3, [r4, #4]
 801b13c:	602b      	str	r3, [r5, #0]
}
 801b13e:	b002      	add	sp, #8
 801b140:	bd70      	pop	{r4, r5, r6, pc}
		return len;
 801b142:	2608      	movs	r6, #8
 801b144:	e7d9      	b.n	801b0fa <nvs_prev_ate+0x18>
		*addr -= (1 << ADDR_SECT_SHIFT);
 801b146:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 801b14a:	602a      	str	r2, [r5, #0]
 801b14c:	e7e9      	b.n	801b122 <nvs_prev_ate+0x40>
	if (!nvs_ate_crc8_check(&close_ate)) {
 801b14e:	4668      	mov	r0, sp
 801b150:	f7ff ff82 	bl	801b058 <nvs_ate_crc8_check>
 801b154:	b950      	cbnz	r0, 801b16c <nvs_prev_ate+0x8a>
		if (close_ate.offset < (fs->sector_size - ate_size) &&
 801b156:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801b15a:	89a3      	ldrh	r3, [r4, #12]
 801b15c:	1b9b      	subs	r3, r3, r6
 801b15e:	429a      	cmp	r2, r3
 801b160:	d204      	bcs.n	801b16c <nvs_prev_ate+0x8a>
		    !(close_ate.offset % ate_size)) {
 801b162:	fbb2 f3f6 	udiv	r3, r2, r6
 801b166:	fb06 2313 	mls	r3, r6, r3, r2
		if (close_ate.offset < (fs->sector_size - ate_size) &&
 801b16a:	b123      	cbz	r3, 801b176 <nvs_prev_ate+0x94>
	return nvs_recover_last_ate(fs, addr);
 801b16c:	4629      	mov	r1, r5
 801b16e:	4620      	mov	r0, r4
 801b170:	f7ff ff80 	bl	801b074 <nvs_recover_last_ate>
 801b174:	e7e3      	b.n	801b13e <nvs_prev_ate+0x5c>
			(*addr) &= ADDR_SECT_MASK;
 801b176:	886a      	ldrh	r2, [r5, #2]
			(*addr) += close_ate.offset;
 801b178:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b17c:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 801b180:	602b      	str	r3, [r5, #0]
			return 0;
 801b182:	e7dc      	b.n	801b13e <nvs_prev_ate+0x5c>

0801b184 <nvs_ate_crc8_update>:
{
 801b184:	b510      	push	{r4, lr}
 801b186:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
 801b188:	2207      	movs	r2, #7
 801b18a:	4601      	mov	r1, r0
 801b18c:	20ff      	movs	r0, #255	; 0xff
 801b18e:	f7e9 fff9 	bl	8005184 <crc8_ccitt>
	entry->crc8 = crc8;
 801b192:	71e0      	strb	r0, [r4, #7]
}
 801b194:	bd10      	pop	{r4, pc}

0801b196 <nvs_flash_al_wrt>:
{
 801b196:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b19a:	b088      	sub	sp, #32
	if (!len) {
 801b19c:	2b00      	cmp	r3, #0
 801b19e:	d047      	beq.n	801b230 <nvs_flash_al_wrt+0x9a>
 801b1a0:	4604      	mov	r4, r0
 801b1a2:	4616      	mov	r6, r2
 801b1a4:	461f      	mov	r7, r3
	offset = fs->offset;
 801b1a6:	6803      	ldr	r3, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
 801b1a8:	8985      	ldrh	r5, [r0, #12]
 801b1aa:	0c0a      	lsrs	r2, r1, #16
 801b1ac:	fb02 3505 	mla	r5, r2, r5, r3
	offset += addr & ADDR_OFFS_MASK;
 801b1b0:	fa15 f581 	uxtah	r5, r5, r1
 801b1b4:	46aa      	mov	sl, r5
	rc = flash_write_protection_set(fs->flash_device, 0);
 801b1b6:	6a80      	ldr	r0, [r0, #40]	; 0x28
	const struct flash_driver_api *api =
 801b1b8:	6883      	ldr	r3, [r0, #8]
	return api->write_protection(dev, enable);
 801b1ba:	68db      	ldr	r3, [r3, #12]
 801b1bc:	2100      	movs	r1, #0
 801b1be:	4798      	blx	r3
	if (rc) {
 801b1c0:	4681      	mov	r9, r0
 801b1c2:	b9d0      	cbnz	r0, 801b1fa <nvs_flash_al_wrt+0x64>
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
 801b1c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801b1c6:	681b      	ldr	r3, [r3, #0]
 801b1c8:	425b      	negs	r3, r3
	if (blen > 0) {
 801b1ca:	ea13 0807 	ands.w	r8, r3, r7
 801b1ce:	d00e      	beq.n	801b1ee <nvs_flash_al_wrt+0x58>
		rc = flash_write(fs->flash_device, offset, data8, blen);
 801b1d0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	const struct flash_driver_api *api =
 801b1d2:	6883      	ldr	r3, [r0, #8]
	return api->write(dev, offset, data, len);
 801b1d4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 801b1d8:	4643      	mov	r3, r8
 801b1da:	4632      	mov	r2, r6
 801b1dc:	4629      	mov	r1, r5
 801b1de:	47c8      	blx	r9
		if (rc) {
 801b1e0:	4681      	mov	r9, r0
 801b1e2:	b928      	cbnz	r0, 801b1f0 <nvs_flash_al_wrt+0x5a>
		len -= blen;
 801b1e4:	eba7 0708 	sub.w	r7, r7, r8
		offset += blen;
 801b1e8:	eb05 0a08 	add.w	sl, r5, r8
		data8 += blen;
 801b1ec:	4446      	add	r6, r8
	if (len) {
 801b1ee:	b947      	cbnz	r7, 801b202 <nvs_flash_al_wrt+0x6c>
	(void) flash_write_protection_set(fs->flash_device, 1);
 801b1f0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	const struct flash_driver_api *api =
 801b1f2:	6883      	ldr	r3, [r0, #8]
	return api->write_protection(dev, enable);
 801b1f4:	68db      	ldr	r3, [r3, #12]
 801b1f6:	2101      	movs	r1, #1
 801b1f8:	4798      	blx	r3
}
 801b1fa:	4648      	mov	r0, r9
 801b1fc:	b008      	add	sp, #32
 801b1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		memcpy(buf, data8, len);
 801b202:	463a      	mov	r2, r7
 801b204:	4631      	mov	r1, r6
 801b206:	4668      	mov	r0, sp
 801b208:	f001 fb51 	bl	801c8ae <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
 801b20c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			fs->flash_parameters->write_block_size - len);
 801b20e:	681a      	ldr	r2, [r3, #0]
		(void)memset(buf + len, fs->flash_parameters->erase_value,
 801b210:	1bd2      	subs	r2, r2, r7
 801b212:	7919      	ldrb	r1, [r3, #4]
 801b214:	eb0d 0007 	add.w	r0, sp, r7
 801b218:	f001 fb6e 	bl	801c8f8 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
 801b21c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
				 fs->flash_parameters->write_block_size);
 801b21e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		rc = flash_write(fs->flash_device, offset, buf,
 801b220:	681b      	ldr	r3, [r3, #0]
	const struct flash_driver_api *api =
 801b222:	6882      	ldr	r2, [r0, #8]
	return api->write(dev, offset, data, len);
 801b224:	6855      	ldr	r5, [r2, #4]
 801b226:	466a      	mov	r2, sp
 801b228:	4651      	mov	r1, sl
 801b22a:	47a8      	blx	r5
 801b22c:	4681      	mov	r9, r0
end:
 801b22e:	e7df      	b.n	801b1f0 <nvs_flash_al_wrt+0x5a>
		return 0;
 801b230:	f04f 0900 	mov.w	r9, #0
 801b234:	e7e1      	b.n	801b1fa <nvs_flash_al_wrt+0x64>

0801b236 <nvs_flash_data_wrt>:
{
 801b236:	b538      	push	{r3, r4, r5, lr}
 801b238:	4605      	mov	r5, r0
 801b23a:	4614      	mov	r4, r2
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
 801b23c:	4613      	mov	r3, r2
 801b23e:	460a      	mov	r2, r1
 801b240:	6881      	ldr	r1, [r0, #8]
 801b242:	f7ff ffa8 	bl	801b196 <nvs_flash_al_wrt>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
 801b246:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801b248:	681a      	ldr	r2, [r3, #0]
 801b24a:	b2d3      	uxtb	r3, r2
	if (write_block_size <= 1U) {
 801b24c:	2b01      	cmp	r3, #1
 801b24e:	d903      	bls.n	801b258 <nvs_flash_data_wrt+0x22>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
 801b250:	441c      	add	r4, r3
 801b252:	3c01      	subs	r4, #1
 801b254:	425a      	negs	r2, r3
 801b256:	4014      	ands	r4, r2
	fs->data_wra += nvs_al_size(fs, len);
 801b258:	68aa      	ldr	r2, [r5, #8]
 801b25a:	4422      	add	r2, r4
 801b25c:	60aa      	str	r2, [r5, #8]
}
 801b25e:	bd38      	pop	{r3, r4, r5, pc}

0801b260 <nvs_flash_block_move>:
{
 801b260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b264:	b088      	sub	sp, #32
 801b266:	4607      	mov	r7, r0
 801b268:	460e      	mov	r6, r1
 801b26a:	4615      	mov	r5, r2
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
 801b26c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801b26e:	681b      	ldr	r3, [r3, #0]
 801b270:	f1c3 0800 	rsb	r8, r3, #0
	block_size =
 801b274:	f008 0820 	and.w	r8, r8, #32
	while (len) {
 801b278:	e001      	b.n	801b27e <nvs_flash_block_move+0x1e>
		len -= bytes_to_copy;
 801b27a:	1b2d      	subs	r5, r5, r4
		addr += bytes_to_copy;
 801b27c:	4426      	add	r6, r4
	while (len) {
 801b27e:	b1a5      	cbz	r5, 801b2aa <nvs_flash_block_move+0x4a>
		bytes_to_copy = MIN(block_size, len);
 801b280:	462c      	mov	r4, r5
 801b282:	4545      	cmp	r5, r8
 801b284:	bf28      	it	cs
 801b286:	4644      	movcs	r4, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
 801b288:	4623      	mov	r3, r4
 801b28a:	466a      	mov	r2, sp
 801b28c:	4631      	mov	r1, r6
 801b28e:	4638      	mov	r0, r7
 801b290:	f7ff fe3f 	bl	801af12 <nvs_flash_rd>
		if (rc) {
 801b294:	4603      	mov	r3, r0
 801b296:	b948      	cbnz	r0, 801b2ac <nvs_flash_block_move+0x4c>
		rc = nvs_flash_data_wrt(fs, buf, bytes_to_copy);
 801b298:	4622      	mov	r2, r4
 801b29a:	4669      	mov	r1, sp
 801b29c:	4638      	mov	r0, r7
 801b29e:	f7ff ffca 	bl	801b236 <nvs_flash_data_wrt>
		if (rc) {
 801b2a2:	4603      	mov	r3, r0
 801b2a4:	2800      	cmp	r0, #0
 801b2a6:	d0e8      	beq.n	801b27a <nvs_flash_block_move+0x1a>
 801b2a8:	e000      	b.n	801b2ac <nvs_flash_block_move+0x4c>
	return 0;
 801b2aa:	2300      	movs	r3, #0
}
 801b2ac:	4618      	mov	r0, r3
 801b2ae:	b008      	add	sp, #32
 801b2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b2b4 <nvs_flash_ate_wrt>:
{
 801b2b4:	b510      	push	{r4, lr}
 801b2b6:	4604      	mov	r4, r0
 801b2b8:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
 801b2ba:	2308      	movs	r3, #8
 801b2bc:	6841      	ldr	r1, [r0, #4]
 801b2be:	f7ff ff6a 	bl	801b196 <nvs_flash_al_wrt>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
 801b2c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801b2c4:	681b      	ldr	r3, [r3, #0]
 801b2c6:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
 801b2c8:	2a01      	cmp	r2, #1
 801b2ca:	d907      	bls.n	801b2dc <nvs_flash_ate_wrt+0x28>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
 801b2cc:	4613      	mov	r3, r2
 801b2ce:	3207      	adds	r2, #7
 801b2d0:	425b      	negs	r3, r3
 801b2d2:	4013      	ands	r3, r2
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
 801b2d4:	6862      	ldr	r2, [r4, #4]
 801b2d6:	1ad2      	subs	r2, r2, r3
 801b2d8:	6062      	str	r2, [r4, #4]
}
 801b2da:	bd10      	pop	{r4, pc}
		return len;
 801b2dc:	2308      	movs	r3, #8
 801b2de:	e7f9      	b.n	801b2d4 <nvs_flash_ate_wrt+0x20>

0801b2e0 <nvs_gc>:
{
 801b2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b2e2:	b08b      	sub	sp, #44	; 0x2c
 801b2e4:	4604      	mov	r4, r0
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
 801b2e6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801b2e8:	681b      	ldr	r3, [r3, #0]
 801b2ea:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
 801b2ec:	2a01      	cmp	r2, #1
 801b2ee:	d922      	bls.n	801b336 <nvs_gc+0x56>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
 801b2f0:	1dd7      	adds	r7, r2, #7
 801b2f2:	4253      	negs	r3, r2
 801b2f4:	401f      	ands	r7, r3
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
 801b2f6:	88e3      	ldrh	r3, [r4, #6]
 801b2f8:	041b      	lsls	r3, r3, #16
 801b2fa:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
 801b2fc:	a903      	add	r1, sp, #12
 801b2fe:	4620      	mov	r0, r4
 801b300:	f7ff fe25 	bl	801af4e <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
 801b304:	89a1      	ldrh	r1, [r4, #12]
 801b306:	9b03      	ldr	r3, [sp, #12]
 801b308:	4419      	add	r1, r3
 801b30a:	1bc9      	subs	r1, r1, r7
 801b30c:	9102      	str	r1, [sp, #8]
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
 801b30e:	aa08      	add	r2, sp, #32
 801b310:	4620      	mov	r0, r4
 801b312:	f7ff fe0b 	bl	801af2c <nvs_flash_ate_rd>
	if (rc < 0) {
 801b316:	1e03      	subs	r3, r0, #0
 801b318:	db0a      	blt.n	801b330 <nvs_gc+0x50>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
 801b31a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801b31c:	7919      	ldrb	r1, [r3, #4]
 801b31e:	a808      	add	r0, sp, #32
 801b320:	f7ff fe09 	bl	801af36 <nvs_ate_cmp_const>
	if (!rc) {
 801b324:	b948      	cbnz	r0, 801b33a <nvs_gc+0x5a>
		rc = nvs_flash_erase_sector(fs, sec_addr);
 801b326:	9903      	ldr	r1, [sp, #12]
 801b328:	4620      	mov	r0, r4
 801b32a:	f7ff fe6e 	bl	801b00a <nvs_flash_erase_sector>
 801b32e:	4603      	mov	r3, r0
}
 801b330:	4618      	mov	r0, r3
 801b332:	b00b      	add	sp, #44	; 0x2c
 801b334:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return len;
 801b336:	2708      	movs	r7, #8
 801b338:	e7dd      	b.n	801b2f6 <nvs_gc+0x16>
	stop_addr = gc_addr - ate_size;
 801b33a:	9b02      	ldr	r3, [sp, #8]
 801b33c:	1bdf      	subs	r7, r3, r7
	if (!nvs_ate_crc8_check(&close_ate)) {
 801b33e:	a808      	add	r0, sp, #32
 801b340:	f7ff fe8a 	bl	801b058 <nvs_ate_crc8_check>
 801b344:	b938      	cbnz	r0, 801b356 <nvs_gc+0x76>
		gc_addr &= ADDR_SECT_MASK;
 801b346:	f8bd 200a 	ldrh.w	r2, [sp, #10]
		gc_addr += close_ate.offset;
 801b34a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801b34e:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 801b352:	9302      	str	r3, [sp, #8]
 801b354:	e022      	b.n	801b39c <nvs_gc+0xbc>
		rc = nvs_recover_last_ate(fs, &gc_addr);
 801b356:	a902      	add	r1, sp, #8
 801b358:	4620      	mov	r0, r4
 801b35a:	f7ff fe8b 	bl	801b074 <nvs_recover_last_ate>
		if (rc) {
 801b35e:	4603      	mov	r3, r0
 801b360:	b1e0      	cbz	r0, 801b39c <nvs_gc+0xbc>
 801b362:	e7e5      	b.n	801b330 <nvs_gc+0x50>
		} while (wlk_addr != fs->ate_wra);
 801b364:	6862      	ldr	r2, [r4, #4]
 801b366:	9b01      	ldr	r3, [sp, #4]
 801b368:	429a      	cmp	r2, r3
 801b36a:	d013      	beq.n	801b394 <nvs_gc+0xb4>
			wlk_prev_addr = wlk_addr;
 801b36c:	9d01      	ldr	r5, [sp, #4]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
 801b36e:	aa04      	add	r2, sp, #16
 801b370:	a901      	add	r1, sp, #4
 801b372:	4620      	mov	r0, r4
 801b374:	f7ff feb5 	bl	801b0e2 <nvs_prev_ate>
			if (rc) {
 801b378:	4603      	mov	r3, r0
 801b37a:	2800      	cmp	r0, #0
 801b37c:	d1d8      	bne.n	801b330 <nvs_gc+0x50>
			if ((wlk_ate.id == gc_ate.id) &&
 801b37e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b382:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801b386:	429a      	cmp	r2, r3
 801b388:	d1ec      	bne.n	801b364 <nvs_gc+0x84>
			    (!nvs_ate_crc8_check(&wlk_ate))) {
 801b38a:	a804      	add	r0, sp, #16
 801b38c:	f7ff fe64 	bl	801b058 <nvs_ate_crc8_check>
			if ((wlk_ate.id == gc_ate.id) &&
 801b390:	2800      	cmp	r0, #0
 801b392:	d1e7      	bne.n	801b364 <nvs_gc+0x84>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
 801b394:	42b5      	cmp	r5, r6
 801b396:	d012      	beq.n	801b3be <nvs_gc+0xde>
	} while (gc_prev_addr != stop_addr);
 801b398:	42be      	cmp	r6, r7
 801b39a:	d030      	beq.n	801b3fe <nvs_gc+0x11e>
		gc_prev_addr = gc_addr;
 801b39c:	9e02      	ldr	r6, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
 801b39e:	aa06      	add	r2, sp, #24
 801b3a0:	a902      	add	r1, sp, #8
 801b3a2:	4620      	mov	r0, r4
 801b3a4:	f7ff fe9d 	bl	801b0e2 <nvs_prev_ate>
		if (rc) {
 801b3a8:	4603      	mov	r3, r0
 801b3aa:	2800      	cmp	r0, #0
 801b3ac:	d1c0      	bne.n	801b330 <nvs_gc+0x50>
		if (nvs_ate_crc8_check(&gc_ate)) {
 801b3ae:	a806      	add	r0, sp, #24
 801b3b0:	f7ff fe52 	bl	801b058 <nvs_ate_crc8_check>
 801b3b4:	2800      	cmp	r0, #0
 801b3b6:	d1ef      	bne.n	801b398 <nvs_gc+0xb8>
		wlk_addr = fs->ate_wra;
 801b3b8:	6863      	ldr	r3, [r4, #4]
 801b3ba:	9301      	str	r3, [sp, #4]
 801b3bc:	e7d6      	b.n	801b36c <nvs_gc+0x8c>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
 801b3be:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801b3c2:	2b00      	cmp	r3, #0
 801b3c4:	d0e8      	beq.n	801b398 <nvs_gc+0xb8>
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
 801b3c6:	0c33      	lsrs	r3, r6, #16
 801b3c8:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
 801b3ca:	f8bd 501a 	ldrh.w	r5, [sp, #26]
 801b3ce:	441d      	add	r5, r3
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
 801b3d0:	8923      	ldrh	r3, [r4, #8]
 801b3d2:	f8ad 301a 	strh.w	r3, [sp, #26]
			nvs_ate_crc8_update(&gc_ate);
 801b3d6:	a806      	add	r0, sp, #24
 801b3d8:	f7ff fed4 	bl	801b184 <nvs_ate_crc8_update>
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
 801b3dc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801b3e0:	4629      	mov	r1, r5
 801b3e2:	4620      	mov	r0, r4
 801b3e4:	f7ff ff3c 	bl	801b260 <nvs_flash_block_move>
			if (rc) {
 801b3e8:	4603      	mov	r3, r0
 801b3ea:	2800      	cmp	r0, #0
 801b3ec:	d1a0      	bne.n	801b330 <nvs_gc+0x50>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
 801b3ee:	a906      	add	r1, sp, #24
 801b3f0:	4620      	mov	r0, r4
 801b3f2:	f7ff ff5f 	bl	801b2b4 <nvs_flash_ate_wrt>
			if (rc) {
 801b3f6:	4603      	mov	r3, r0
 801b3f8:	2800      	cmp	r0, #0
 801b3fa:	d0cd      	beq.n	801b398 <nvs_gc+0xb8>
 801b3fc:	e798      	b.n	801b330 <nvs_gc+0x50>
	rc = nvs_flash_erase_sector(fs, sec_addr);
 801b3fe:	9903      	ldr	r1, [sp, #12]
 801b400:	4620      	mov	r0, r4
 801b402:	f7ff fe02 	bl	801b00a <nvs_flash_erase_sector>
 801b406:	4603      	mov	r3, r0
	if (rc) {
 801b408:	e792      	b.n	801b330 <nvs_gc+0x50>

0801b40a <nvs_flash_wrt_entry>:
{
 801b40a:	b570      	push	{r4, r5, r6, lr}
 801b40c:	b082      	sub	sp, #8
 801b40e:	4604      	mov	r4, r0
 801b410:	4616      	mov	r6, r2
 801b412:	461d      	mov	r5, r3
	entry.id = id;
 801b414:	f8ad 1000 	strh.w	r1, [sp]
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
 801b418:	8903      	ldrh	r3, [r0, #8]
 801b41a:	f8ad 3002 	strh.w	r3, [sp, #2]
	entry.len = (uint16_t)len;
 801b41e:	f8ad 5004 	strh.w	r5, [sp, #4]
	entry.part = 0xff;
 801b422:	23ff      	movs	r3, #255	; 0xff
 801b424:	f88d 3006 	strb.w	r3, [sp, #6]
	nvs_ate_crc8_update(&entry);
 801b428:	4668      	mov	r0, sp
 801b42a:	f7ff feab 	bl	801b184 <nvs_ate_crc8_update>
	rc = nvs_flash_data_wrt(fs, data, len);
 801b42e:	462a      	mov	r2, r5
 801b430:	4631      	mov	r1, r6
 801b432:	4620      	mov	r0, r4
 801b434:	f7ff feff 	bl	801b236 <nvs_flash_data_wrt>
	if (rc) {
 801b438:	b108      	cbz	r0, 801b43e <nvs_flash_wrt_entry+0x34>
}
 801b43a:	b002      	add	sp, #8
 801b43c:	bd70      	pop	{r4, r5, r6, pc}
	rc = nvs_flash_ate_wrt(fs, &entry);
 801b43e:	4669      	mov	r1, sp
 801b440:	4620      	mov	r0, r4
 801b442:	f7ff ff37 	bl	801b2b4 <nvs_flash_ate_wrt>
	if (rc) {
 801b446:	e7f8      	b.n	801b43a <nvs_flash_wrt_entry+0x30>

0801b448 <nvs_sector_close>:
{
 801b448:	b530      	push	{r4, r5, lr}
 801b44a:	b083      	sub	sp, #12
 801b44c:	4604      	mov	r4, r0
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
 801b44e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801b450:	681b      	ldr	r3, [r3, #0]
 801b452:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
 801b454:	2a01      	cmp	r2, #1
 801b456:	d925      	bls.n	801b4a4 <nvs_sector_close+0x5c>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
 801b458:	4613      	mov	r3, r2
 801b45a:	3207      	adds	r2, #7
 801b45c:	425b      	negs	r3, r3
 801b45e:	401a      	ands	r2, r3
	close_ate.id = 0xFFFF;
 801b460:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b464:	f8ad 3000 	strh.w	r3, [sp]
	close_ate.len = 0U;
 801b468:	2500      	movs	r5, #0
 801b46a:	f8ad 5004 	strh.w	r5, [sp, #4]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
 801b46e:	6863      	ldr	r3, [r4, #4]
 801b470:	1899      	adds	r1, r3, r2
 801b472:	f8ad 1002 	strh.w	r1, [sp, #2]
	fs->ate_wra &= ADDR_SECT_MASK;
 801b476:	0c1b      	lsrs	r3, r3, #16
 801b478:	041b      	lsls	r3, r3, #16
	fs->ate_wra += (fs->sector_size - ate_size);
 801b47a:	89a1      	ldrh	r1, [r4, #12]
 801b47c:	1a8a      	subs	r2, r1, r2
 801b47e:	4413      	add	r3, r2
 801b480:	6063      	str	r3, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
 801b482:	4668      	mov	r0, sp
 801b484:	f7ff fe7e 	bl	801b184 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
 801b488:	4669      	mov	r1, sp
 801b48a:	4620      	mov	r0, r4
 801b48c:	f7ff ff12 	bl	801b2b4 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
 801b490:	1d21      	adds	r1, r4, #4
 801b492:	4620      	mov	r0, r4
 801b494:	f7ff fd5b 	bl	801af4e <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
 801b498:	88e3      	ldrh	r3, [r4, #6]
 801b49a:	041b      	lsls	r3, r3, #16
 801b49c:	60a3      	str	r3, [r4, #8]
}
 801b49e:	4628      	mov	r0, r5
 801b4a0:	b003      	add	sp, #12
 801b4a2:	bd30      	pop	{r4, r5, pc}
		return len;
 801b4a4:	2208      	movs	r2, #8
 801b4a6:	e7db      	b.n	801b460 <nvs_sector_close+0x18>

0801b4a8 <nvs_startup>:
{
 801b4a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b4ac:	b085      	sub	sp, #20
 801b4ae:	4604      	mov	r4, r0
	uint32_t addr = 0U;
 801b4b0:	2300      	movs	r3, #0
 801b4b2:	9301      	str	r3, [sp, #4]
	uint8_t erase_value = fs->flash_parameters->erase_value;
 801b4b4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801b4b6:	791e      	ldrb	r6, [r3, #4]
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
 801b4b8:	f100 0914 	add.w	r9, r0, #20
	return z_impl_k_mutex_lock(mutex, timeout);
 801b4bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b4c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b4c4:	4648      	mov	r0, r9
 801b4c6:	f7fc fef1 	bl	80182ac <z_impl_k_mutex_lock>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
 801b4ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801b4cc:	681b      	ldr	r3, [r3, #0]
 801b4ce:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
 801b4d0:	2a01      	cmp	r2, #1
 801b4d2:	d906      	bls.n	801b4e2 <nvs_startup+0x3a>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
 801b4d4:	1dd7      	adds	r7, r2, #7
 801b4d6:	4253      	negs	r3, r2
 801b4d8:	401f      	ands	r7, r3
	uint16_t i, closed_sectors = 0;
 801b4da:	f04f 0800 	mov.w	r8, #0
	for (i = 0; i < fs->sector_count; i++) {
 801b4de:	4645      	mov	r5, r8
 801b4e0:	e003      	b.n	801b4ea <nvs_startup+0x42>
		return len;
 801b4e2:	2708      	movs	r7, #8
 801b4e4:	e7f9      	b.n	801b4da <nvs_startup+0x32>
	for (i = 0; i < fs->sector_count; i++) {
 801b4e6:	3501      	adds	r5, #1
 801b4e8:	b2ad      	uxth	r5, r5
 801b4ea:	89e3      	ldrh	r3, [r4, #14]
 801b4ec:	42ab      	cmp	r3, r5
 801b4ee:	d91c      	bls.n	801b52a <nvs_startup+0x82>
		       (uint16_t)(fs->sector_size - ate_size);
 801b4f0:	89a1      	ldrh	r1, [r4, #12]
 801b4f2:	1bc9      	subs	r1, r1, r7
 801b4f4:	b289      	uxth	r1, r1
		addr = (i << ADDR_SECT_SHIFT) +
 801b4f6:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801b4fa:	9101      	str	r1, [sp, #4]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
 801b4fc:	2308      	movs	r3, #8
 801b4fe:	4632      	mov	r2, r6
 801b500:	4620      	mov	r0, r4
 801b502:	f7ff fd5d 	bl	801afc0 <nvs_flash_cmp_const>
		if (rc) {
 801b506:	2800      	cmp	r0, #0
 801b508:	d0ed      	beq.n	801b4e6 <nvs_startup+0x3e>
			closed_sectors++;
 801b50a:	f108 0801 	add.w	r8, r8, #1
 801b50e:	fa1f f888 	uxth.w	r8, r8
			nvs_sector_advance(fs, &addr);
 801b512:	a901      	add	r1, sp, #4
 801b514:	4620      	mov	r0, r4
 801b516:	f7ff fd1a 	bl	801af4e <nvs_sector_advance>
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
 801b51a:	2308      	movs	r3, #8
 801b51c:	4632      	mov	r2, r6
 801b51e:	9901      	ldr	r1, [sp, #4]
 801b520:	4620      	mov	r0, r4
 801b522:	f7ff fd4d 	bl	801afc0 <nvs_flash_cmp_const>
			if (!rc) {
 801b526:	2800      	cmp	r0, #0
 801b528:	d1dd      	bne.n	801b4e6 <nvs_startup+0x3e>
	if (closed_sectors == fs->sector_count) {
 801b52a:	89e3      	ldrh	r3, [r4, #14]
 801b52c:	4543      	cmp	r3, r8
 801b52e:	f000 808b 	beq.w	801b648 <nvs_startup+0x1a0>
	if (i == fs->sector_count) {
 801b532:	42ab      	cmp	r3, r5
 801b534:	d006      	beq.n	801b544 <nvs_startup+0x9c>
	fs->ate_wra = addr - ate_size;
 801b536:	9b01      	ldr	r3, [sp, #4]
 801b538:	1bda      	subs	r2, r3, r7
 801b53a:	6062      	str	r2, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
 801b53c:	0c1b      	lsrs	r3, r3, #16
 801b53e:	041b      	lsls	r3, r3, #16
 801b540:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
 801b542:	e010      	b.n	801b566 <nvs_startup+0xbe>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
 801b544:	2308      	movs	r3, #8
 801b546:	4632      	mov	r2, r6
 801b548:	9901      	ldr	r1, [sp, #4]
 801b54a:	1bc9      	subs	r1, r1, r7
 801b54c:	4620      	mov	r0, r4
 801b54e:	f7ff fd37 	bl	801afc0 <nvs_flash_cmp_const>
		if (!rc) {
 801b552:	2800      	cmp	r0, #0
 801b554:	d1ef      	bne.n	801b536 <nvs_startup+0x8e>
			nvs_sector_advance(fs, &addr);
 801b556:	a901      	add	r1, sp, #4
 801b558:	4620      	mov	r0, r4
 801b55a:	f7ff fcf8 	bl	801af4e <nvs_sector_advance>
 801b55e:	e7ea      	b.n	801b536 <nvs_startup+0x8e>
		fs->ate_wra -= ate_size;
 801b560:	6863      	ldr	r3, [r4, #4]
 801b562:	1bdb      	subs	r3, r3, r7
 801b564:	6063      	str	r3, [r4, #4]
	while (fs->ate_wra >= fs->data_wra) {
 801b566:	6861      	ldr	r1, [r4, #4]
 801b568:	68a3      	ldr	r3, [r4, #8]
 801b56a:	4299      	cmp	r1, r3
 801b56c:	d32d      	bcc.n	801b5ca <nvs_startup+0x122>
		rc = nvs_flash_ate_rd(fs, fs->ate_wra, &last_ate);
 801b56e:	aa02      	add	r2, sp, #8
 801b570:	4620      	mov	r0, r4
 801b572:	f7ff fcdb 	bl	801af2c <nvs_flash_ate_rd>
		if (rc) {
 801b576:	4605      	mov	r5, r0
 801b578:	2800      	cmp	r0, #0
 801b57a:	d148      	bne.n	801b60e <nvs_startup+0x166>
		rc = nvs_ate_cmp_const(&last_ate, erase_value);
 801b57c:	4631      	mov	r1, r6
 801b57e:	a802      	add	r0, sp, #8
 801b580:	f7ff fcd9 	bl	801af36 <nvs_ate_cmp_const>
		if (!rc) {
 801b584:	b308      	cbz	r0, 801b5ca <nvs_startup+0x122>
		if (!nvs_ate_crc8_check(&last_ate)) {
 801b586:	a802      	add	r0, sp, #8
 801b588:	f7ff fd66 	bl	801b058 <nvs_ate_crc8_check>
 801b58c:	2800      	cmp	r0, #0
 801b58e:	d1e7      	bne.n	801b560 <nvs_startup+0xb8>
			fs->data_wra = addr & ADDR_SECT_MASK;
 801b590:	f8bd 2006 	ldrh.w	r2, [sp, #6]
			fs->data_wra += last_ate.offset;
 801b594:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b598:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 801b59c:	60a3      	str	r3, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
 801b59e:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 801b5a2:	4601      	mov	r1, r0
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
 801b5a4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801b5a6:	6812      	ldr	r2, [r2, #0]
 801b5a8:	b2d5      	uxtb	r5, r2
	if (write_block_size <= 1U) {
 801b5aa:	2d01      	cmp	r5, #1
 801b5ac:	d903      	bls.n	801b5b6 <nvs_startup+0x10e>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
 801b5ae:	1941      	adds	r1, r0, r5
 801b5b0:	3901      	subs	r1, #1
 801b5b2:	426a      	negs	r2, r5
 801b5b4:	4011      	ands	r1, r2
			fs->data_wra += nvs_al_size(fs, last_ate.len);
 801b5b6:	440b      	add	r3, r1
 801b5b8:	60a3      	str	r3, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
 801b5ba:	6862      	ldr	r2, [r4, #4]
 801b5bc:	4293      	cmp	r3, r2
 801b5be:	d1cf      	bne.n	801b560 <nvs_startup+0xb8>
 801b5c0:	2800      	cmp	r0, #0
 801b5c2:	d0cd      	beq.n	801b560 <nvs_startup+0xb8>
				rc = -ESPIPE;
 801b5c4:	f06f 051c 	mvn.w	r5, #28
 801b5c8:	e021      	b.n	801b60e <nvs_startup+0x166>
	while (fs->ate_wra > fs->data_wra) {
 801b5ca:	6863      	ldr	r3, [r4, #4]
 801b5cc:	68a1      	ldr	r1, [r4, #8]
 801b5ce:	428b      	cmp	r3, r1
 801b5d0:	d90d      	bls.n	801b5ee <nvs_startup+0x146>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
 801b5d2:	1a5b      	subs	r3, r3, r1
 801b5d4:	4632      	mov	r2, r6
 801b5d6:	4620      	mov	r0, r4
 801b5d8:	f7ff fcf2 	bl	801afc0 <nvs_flash_cmp_const>
		if (rc < 0) {
 801b5dc:	1e05      	subs	r5, r0, #0
 801b5de:	db16      	blt.n	801b60e <nvs_startup+0x166>
		if (!rc) {
 801b5e0:	b12d      	cbz	r5, 801b5ee <nvs_startup+0x146>
		fs->data_wra += fs->flash_parameters->write_block_size;
 801b5e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801b5e4:	681a      	ldr	r2, [r3, #0]
 801b5e6:	68a3      	ldr	r3, [r4, #8]
 801b5e8:	4413      	add	r3, r2
 801b5ea:	60a3      	str	r3, [r4, #8]
 801b5ec:	e7ed      	b.n	801b5ca <nvs_startup+0x122>
	addr = fs->ate_wra & ADDR_SECT_MASK;
 801b5ee:	88e3      	ldrh	r3, [r4, #6]
 801b5f0:	041b      	lsls	r3, r3, #16
 801b5f2:	9301      	str	r3, [sp, #4]
	nvs_sector_advance(fs, &addr);
 801b5f4:	a901      	add	r1, sp, #4
 801b5f6:	4620      	mov	r0, r4
 801b5f8:	f7ff fca9 	bl	801af4e <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
 801b5fc:	89a3      	ldrh	r3, [r4, #12]
 801b5fe:	4632      	mov	r2, r6
 801b600:	9901      	ldr	r1, [sp, #4]
 801b602:	4620      	mov	r0, r4
 801b604:	f7ff fcdc 	bl	801afc0 <nvs_flash_cmp_const>
	if (rc < 0) {
 801b608:	1e05      	subs	r5, r0, #0
 801b60a:	db00      	blt.n	801b60e <nvs_startup+0x166>
	if (rc) {
 801b60c:	b935      	cbnz	r5, 801b61c <nvs_startup+0x174>
	return z_impl_k_mutex_unlock(mutex);
 801b60e:	4648      	mov	r0, r9
 801b610:	f7fc fed6 	bl	80183c0 <z_impl_k_mutex_unlock>
}
 801b614:	4628      	mov	r0, r5
 801b616:	b005      	add	sp, #20
 801b618:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
 801b61c:	6861      	ldr	r1, [r4, #4]
 801b61e:	4620      	mov	r0, r4
 801b620:	f7ff fcf3 	bl	801b00a <nvs_flash_erase_sector>
		if (rc) {
 801b624:	4605      	mov	r5, r0
 801b626:	2800      	cmp	r0, #0
 801b628:	d1f1      	bne.n	801b60e <nvs_startup+0x166>
		fs->ate_wra &= ADDR_SECT_MASK;
 801b62a:	88e2      	ldrh	r2, [r4, #6]
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
 801b62c:	89a3      	ldrh	r3, [r4, #12]
 801b62e:	eba3 0347 	sub.w	r3, r3, r7, lsl #1
 801b632:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 801b636:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
 801b638:	0c1b      	lsrs	r3, r3, #16
 801b63a:	041b      	lsls	r3, r3, #16
 801b63c:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
 801b63e:	4620      	mov	r0, r4
 801b640:	f7ff fe4e 	bl	801b2e0 <nvs_gc>
 801b644:	4605      	mov	r5, r0
end:
 801b646:	e7e2      	b.n	801b60e <nvs_startup+0x166>
		rc = -EDEADLK;
 801b648:	f06f 0520 	mvn.w	r5, #32
 801b64c:	e7df      	b.n	801b60e <nvs_startup+0x166>

0801b64e <nvs_delete>:
{
 801b64e:	b508      	push	{r3, lr}
	return nvs_write(fs, id, NULL, 0);
 801b650:	2300      	movs	r3, #0
 801b652:	461a      	mov	r2, r3
 801b654:	f7eb fd56 	bl	8007104 <nvs_write>
}
 801b658:	bd08      	pop	{r3, pc}

0801b65a <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
 801b65a:	b510      	push	{r4, lr}
 801b65c:	b082      	sub	sp, #8
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
 801b65e:	2400      	movs	r4, #0
 801b660:	9400      	str	r4, [sp, #0]
 801b662:	f7eb fe19 	bl	8007298 <nvs_read_hist>
	return rc;
}
 801b666:	b002      	add	sp, #8
 801b668:	bd10      	pop	{r4, pc}

0801b66a <usb_vbus_set>:
}
 801b66a:	2000      	movs	r0, #0
 801b66c:	4770      	bx	lr

0801b66e <usb_eps_reconfigure>:
{
 801b66e:	b508      	push	{r3, lr}
	if (cur_alt_setting != alt_setting) {
 801b670:	4291      	cmp	r1, r2
 801b672:	d002      	beq.n	801b67a <usb_eps_reconfigure+0xc>
		ret = reset_endpoint(ep_desc);
 801b674:	f7ec f8f2 	bl	800785c <reset_endpoint>
}
 801b678:	bd08      	pop	{r3, pc}
		ret = set_endpoint(ep_desc);
 801b67a:	f7eb fff9 	bl	8007670 <set_endpoint>
 801b67e:	e7fb      	b.n	801b678 <usb_eps_reconfigure+0xa>

0801b680 <usb_handle_std_interface_req>:
{
 801b680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b684:	4606      	mov	r6, r0
 801b686:	460d      	mov	r5, r1
	uint8_t *data = *data_buf;
 801b688:	6817      	ldr	r7, [r2, #0]
	if (!is_device_configured() ||
 801b68a:	f7eb fed3 	bl	8007434 <is_device_configured>
 801b68e:	4604      	mov	r4, r0
 801b690:	b910      	cbnz	r0, 801b698 <usb_handle_std_interface_req+0x18>
}
 801b692:	4620      	mov	r0, r4
 801b694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
 801b698:	f896 8004 	ldrb.w	r8, [r6, #4]
 801b69c:	4640      	mov	r0, r8
 801b69e:	f7eb fed3 	bl	8007448 <is_interface_valid>
	if (!is_device_configured() ||
 801b6a2:	4604      	mov	r4, r0
 801b6a4:	2800      	cmp	r0, #0
 801b6a6:	d0f4      	beq.n	801b692 <usb_handle_std_interface_req+0x12>
	switch (setup->bRequest) {
 801b6a8:	7873      	ldrb	r3, [r6, #1]
 801b6aa:	2b0a      	cmp	r3, #10
 801b6ac:	d009      	beq.n	801b6c2 <usb_handle_std_interface_req+0x42>
 801b6ae:	2b0b      	cmp	r3, #11
 801b6b0:	d00c      	beq.n	801b6cc <usb_handle_std_interface_req+0x4c>
 801b6b2:	b10b      	cbz	r3, 801b6b8 <usb_handle_std_interface_req+0x38>
 801b6b4:	2400      	movs	r4, #0
 801b6b6:	e7ec      	b.n	801b692 <usb_handle_std_interface_req+0x12>
		data[0] = 0U;
 801b6b8:	703b      	strb	r3, [r7, #0]
		data[1] = 0U;
 801b6ba:	707b      	strb	r3, [r7, #1]
		*len = 2;
 801b6bc:	2302      	movs	r3, #2
 801b6be:	602b      	str	r3, [r5, #0]
		break;
 801b6c0:	e7e7      	b.n	801b692 <usb_handle_std_interface_req+0x12>
		data[0] = 0U;
 801b6c2:	2300      	movs	r3, #0
 801b6c4:	703b      	strb	r3, [r7, #0]
		*len = 1;
 801b6c6:	2301      	movs	r3, #1
 801b6c8:	602b      	str	r3, [r5, #0]
		break;
 801b6ca:	e7e2      	b.n	801b692 <usb_handle_std_interface_req+0x12>
		usb_set_interface(setup->wIndex, setup->wValue);
 801b6cc:	78b1      	ldrb	r1, [r6, #2]
 801b6ce:	4640      	mov	r0, r8
 801b6d0:	f7ec f902 	bl	80078d8 <usb_set_interface>
		*len = 0;
 801b6d4:	2300      	movs	r3, #0
 801b6d6:	602b      	str	r3, [r5, #0]
		break;
 801b6d8:	e7db      	b.n	801b692 <usb_handle_std_interface_req+0x12>

0801b6da <disable_interface_ep>:
{
 801b6da:	b508      	push	{r3, lr}
	return usb_dc_ep_disable(ep_data->ep_addr);
 801b6dc:	7900      	ldrb	r0, [r0, #4]
 801b6de:	f7ed fe9f 	bl	8009420 <usb_dc_ep_disable>
}
 801b6e2:	bd08      	pop	{r3, pc}

0801b6e4 <usb_wakeup_request>:
}
 801b6e4:	f06f 0022 	mvn.w	r0, #34	; 0x22
 801b6e8:	4770      	bx	lr

0801b6ea <ascii7_to_utf16le>:
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
 801b6ea:	f810 2b02 	ldrb.w	r2, [r0], #2
 801b6ee:	1ed3      	subs	r3, r2, #3
	int ascii_idx_max = USB_BSTRING_ASCII_IDX_MAX(str_descr->bLength);
 801b6f0:	0852      	lsrs	r2, r2, #1
 801b6f2:	3a02      	subs	r2, #2
	for (int i = idx_max; i >= 0; i -= 2) {
 801b6f4:	2b00      	cmp	r3, #0
 801b6f6:	db0c      	blt.n	801b712 <ascii7_to_utf16le+0x28>
{
 801b6f8:	b410      	push	{r4}
		buf[i] = 0U;
 801b6fa:	2100      	movs	r1, #0
 801b6fc:	54c1      	strb	r1, [r0, r3]
		buf[i - 1] = buf[ascii_idx_max--];
 801b6fe:	1e59      	subs	r1, r3, #1
 801b700:	5c84      	ldrb	r4, [r0, r2]
 801b702:	5444      	strb	r4, [r0, r1]
	for (int i = idx_max; i >= 0; i -= 2) {
 801b704:	3b02      	subs	r3, #2
		buf[i - 1] = buf[ascii_idx_max--];
 801b706:	3a01      	subs	r2, #1
	for (int i = idx_max; i >= 0; i -= 2) {
 801b708:	2b00      	cmp	r3, #0
 801b70a:	daf6      	bge.n	801b6fa <ascii7_to_utf16le+0x10>
}
 801b70c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b710:	4770      	bx	lr
 801b712:	4770      	bx	lr

0801b714 <usb_validate_ep_cfg_data>:
{
 801b714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b718:	b083      	sub	sp, #12
 801b71a:	4605      	mov	r5, r0
 801b71c:	4689      	mov	r9, r1
 801b71e:	4690      	mov	r8, r2
	for (int i = 0; i < cfg_data->num_endpoints; i++) {
 801b720:	2700      	movs	r7, #0
 801b722:	e04a      	b.n	801b7ba <usb_validate_ep_cfg_data+0xa6>
				if ((*requested_ep & (1 << (idx + 16)))) {
 801b724:	f8d8 2000 	ldr.w	r2, [r8]
 801b728:	f104 0110 	add.w	r1, r4, #16
 801b72c:	2301      	movs	r3, #1
 801b72e:	408b      	lsls	r3, r1
 801b730:	421a      	tst	r2, r3
 801b732:	d108      	bne.n	801b746 <usb_validate_ep_cfg_data+0x32>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
 801b734:	f064 037f 	orn	r3, r4, #127	; 0x7f
 801b738:	f88d 3000 	strb.w	r3, [sp]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
 801b73c:	4668      	mov	r0, sp
 801b73e:	f7ed fd51 	bl	80091e4 <usb_dc_ep_check_cap>
 801b742:	4603      	mov	r3, r0
 801b744:	b1d0      	cbz	r0, 801b77c <usb_validate_ep_cfg_data+0x68>
		for (uint8_t idx = 1; idx < 16; idx++) {
 801b746:	3401      	adds	r4, #1
 801b748:	b2e4      	uxtb	r4, r4
 801b74a:	2c0f      	cmp	r4, #15
 801b74c:	d834      	bhi.n	801b7b8 <usb_validate_ep_cfg_data+0xa4>
			ep_cfg.ep_type = (ep_descr->bmAttributes &
 801b74e:	78eb      	ldrb	r3, [r5, #3]
 801b750:	f003 0303 	and.w	r3, r3, #3
 801b754:	f88d 3004 	strb.w	r3, [sp, #4]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
 801b758:	88ab      	ldrh	r3, [r5, #4]
 801b75a:	f8ad 3002 	strh.w	r3, [sp, #2]
			ep_cfg.ep_addr = ep_descr->bEndpointAddress;
 801b75e:	78ab      	ldrb	r3, [r5, #2]
 801b760:	f88d 3000 	strb.w	r3, [sp]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
 801b764:	f013 0f80 	tst.w	r3, #128	; 0x80
 801b768:	d1dc      	bne.n	801b724 <usb_validate_ep_cfg_data+0x10>
				if ((*requested_ep & (1 << (idx)))) {
 801b76a:	f8d8 2000 	ldr.w	r2, [r8]
 801b76e:	2301      	movs	r3, #1
 801b770:	40a3      	lsls	r3, r4
 801b772:	421a      	tst	r2, r3
 801b774:	d1e7      	bne.n	801b746 <usb_validate_ep_cfg_data+0x32>
				ep_cfg.ep_addr = idx;
 801b776:	f88d 4000 	strb.w	r4, [sp]
 801b77a:	e7df      	b.n	801b73c <usb_validate_ep_cfg_data+0x28>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
 801b77c:	f89d 2000 	ldrb.w	r2, [sp]
 801b780:	70aa      	strb	r2, [r5, #2]
				ep_data[i].ep_addr = ep_cfg.ep_addr;
 801b782:	7132      	strb	r2, [r6, #4]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
 801b784:	f012 0f80 	tst.w	r2, #128	; 0x80
 801b788:	d10b      	bne.n	801b7a2 <usb_validate_ep_cfg_data+0x8e>
					*requested_ep |= (1 << idx);
 801b78a:	2201      	movs	r2, #1
 801b78c:	fa02 f404 	lsl.w	r4, r2, r4
 801b790:	f8d8 2000 	ldr.w	r2, [r8]
 801b794:	4322      	orrs	r2, r4
 801b796:	f8c8 2000 	str.w	r2, [r8]
}
 801b79a:	4618      	mov	r0, r3
 801b79c:	b003      	add	sp, #12
 801b79e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					*requested_ep |= (1 << (idx + 16));
 801b7a2:	f104 0110 	add.w	r1, r4, #16
 801b7a6:	2201      	movs	r2, #1
 801b7a8:	fa02 f101 	lsl.w	r1, r2, r1
 801b7ac:	f8d8 2000 	ldr.w	r2, [r8]
 801b7b0:	430a      	orrs	r2, r1
 801b7b2:	f8c8 2000 	str.w	r2, [r8]
 801b7b6:	e7f0      	b.n	801b79a <usb_validate_ep_cfg_data+0x86>
	for (int i = 0; i < cfg_data->num_endpoints; i++) {
 801b7b8:	3701      	adds	r7, #1
 801b7ba:	f899 301c 	ldrb.w	r3, [r9, #28]
 801b7be:	429f      	cmp	r7, r3
 801b7c0:	da09      	bge.n	801b7d6 <usb_validate_ep_cfg_data+0xc2>
		struct usb_ep_cfg_data *ep_data = cfg_data->endpoint;
 801b7c2:	f8d9 6020 	ldr.w	r6, [r9, #32]
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
 801b7c6:	78aa      	ldrb	r2, [r5, #2]
 801b7c8:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 801b7cc:	7933      	ldrb	r3, [r6, #4]
 801b7ce:	429a      	cmp	r2, r3
 801b7d0:	d1f2      	bne.n	801b7b8 <usb_validate_ep_cfg_data+0xa4>
		for (uint8_t idx = 1; idx < 16; idx++) {
 801b7d2:	2401      	movs	r4, #1
 801b7d4:	e7b9      	b.n	801b74a <usb_validate_ep_cfg_data+0x36>
	return -1;
 801b7d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b7da:	e7de      	b.n	801b79a <usb_validate_ep_cfg_data+0x86>

0801b7dc <usb_get_dev_data_by_cfg>:
	return list->head;
 801b7dc:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
 801b7de:	b110      	cbz	r0, 801b7e6 <usb_get_dev_data_by_cfg+0xa>
 801b7e0:	3804      	subs	r0, #4
 801b7e2:	e000      	b.n	801b7e6 <usb_get_dev_data_by_cfg+0xa>
 801b7e4:	3804      	subs	r0, #4
 801b7e6:	b140      	cbz	r0, 801b7fa <usb_get_dev_data_by_cfg+0x1e>
		const struct device *dev = dev_data->dev;
 801b7e8:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg_cur = dev->config;
 801b7ea:	685b      	ldr	r3, [r3, #4]

		if (cfg_cur == cfg) {
 801b7ec:	428b      	cmp	r3, r1
 801b7ee:	d004      	beq.n	801b7fa <usb_get_dev_data_by_cfg+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
 801b7f0:	1d03      	adds	r3, r0, #4
 801b7f2:	d003      	beq.n	801b7fc <usb_get_dev_data_by_cfg+0x20>
	return node->next;
 801b7f4:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
 801b7f6:	2800      	cmp	r0, #0
 801b7f8:	d1f4      	bne.n	801b7e4 <usb_get_dev_data_by_cfg+0x8>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
 801b7fa:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
 801b7fc:	4618      	mov	r0, r3
 801b7fe:	e7f2      	b.n	801b7e6 <usb_get_dev_data_by_cfg+0xa>

0801b800 <usb_get_dev_data_by_iface>:
	return list->head;
 801b800:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
 801b802:	b110      	cbz	r0, 801b80a <usb_get_dev_data_by_iface+0xa>
 801b804:	3804      	subs	r0, #4
 801b806:	e000      	b.n	801b80a <usb_get_dev_data_by_iface+0xa>
 801b808:	3804      	subs	r0, #4
 801b80a:	b150      	cbz	r0, 801b822 <usb_get_dev_data_by_iface+0x22>
		const struct device *dev = dev_data->dev;
 801b80c:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg = dev->config;
 801b80e:	685b      	ldr	r3, [r3, #4]
		const struct usb_if_descriptor *if_desc =
 801b810:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
 801b812:	789b      	ldrb	r3, [r3, #2]
 801b814:	428b      	cmp	r3, r1
 801b816:	d004      	beq.n	801b822 <usb_get_dev_data_by_iface+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
 801b818:	1d03      	adds	r3, r0, #4
 801b81a:	d003      	beq.n	801b824 <usb_get_dev_data_by_iface+0x24>
	return node->next;
 801b81c:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
 801b81e:	2800      	cmp	r0, #0
 801b820:	d1f2      	bne.n	801b808 <usb_get_dev_data_by_iface+0x8>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
 801b822:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
 801b824:	4618      	mov	r0, r3
 801b826:	e7f0      	b.n	801b80a <usb_get_dev_data_by_iface+0xa>

0801b828 <usb_get_dev_data_by_ep>:
	return list->head;
 801b828:	6800      	ldr	r0, [r0, #0]

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
 801b82a:	b100      	cbz	r0, 801b82e <usb_get_dev_data_by_ep+0x6>
 801b82c:	3804      	subs	r0, #4
 801b82e:	b1d0      	cbz	r0, 801b866 <usb_get_dev_data_by_ep+0x3e>
{
 801b830:	b430      	push	{r4, r5}
 801b832:	e005      	b.n	801b840 <usb_get_dev_data_by_ep+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
 801b834:	1d03      	adds	r3, r0, #4
 801b836:	d012      	beq.n	801b85e <usb_get_dev_data_by_ep+0x36>
	return node->next;
 801b838:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
 801b83a:	b190      	cbz	r0, 801b862 <usb_get_dev_data_by_ep+0x3a>
 801b83c:	3804      	subs	r0, #4
 801b83e:	b180      	cbz	r0, 801b862 <usb_get_dev_data_by_ep+0x3a>
		const struct device *dev = dev_data->dev;
 801b840:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg = dev->config;
 801b842:	685c      	ldr	r4, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
 801b844:	6a25      	ldr	r5, [r4, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
 801b846:	2300      	movs	r3, #0
 801b848:	7f22      	ldrb	r2, [r4, #28]
 801b84a:	429a      	cmp	r2, r3
 801b84c:	d9f2      	bls.n	801b834 <usb_get_dev_data_by_ep+0xc>
			if (ep_data[i].ep_addr == ep) {
 801b84e:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801b852:	7912      	ldrb	r2, [r2, #4]
 801b854:	428a      	cmp	r2, r1
 801b856:	d004      	beq.n	801b862 <usb_get_dev_data_by_ep+0x3a>
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
 801b858:	3301      	adds	r3, #1
 801b85a:	b2db      	uxtb	r3, r3
 801b85c:	e7f4      	b.n	801b848 <usb_get_dev_data_by_ep+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
 801b85e:	4618      	mov	r0, r3
 801b860:	e7ed      	b.n	801b83e <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
 801b862:	bc30      	pop	{r4, r5}
 801b864:	4770      	bx	lr
 801b866:	4770      	bx	lr

0801b868 <should_bail>:
	if (info->start_offset < data->area_off) {
 801b868:	6800      	ldr	r0, [r0, #0]
 801b86a:	684b      	ldr	r3, [r1, #4]
 801b86c:	4298      	cmp	r0, r3
 801b86e:	d30c      	bcc.n	801b88a <should_bail+0x22>
{
 801b870:	b410      	push	{r4}
	} else if (info->start_offset >= data->area_off + data->area_len) {
 801b872:	688c      	ldr	r4, [r1, #8]
 801b874:	4423      	add	r3, r4
 801b876:	4298      	cmp	r0, r3
 801b878:	d20a      	bcs.n	801b890 <should_bail+0x28>
	} else if (data->ret_idx >= data->ret_len) {
 801b87a:	6908      	ldr	r0, [r1, #16]
 801b87c:	694b      	ldr	r3, [r1, #20]
 801b87e:	4298      	cmp	r0, r3
 801b880:	d20a      	bcs.n	801b898 <should_bail+0x30>
	return false;
 801b882:	2000      	movs	r0, #0
}
 801b884:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b888:	4770      	bx	lr
		*bail_value = true;
 801b88a:	2001      	movs	r0, #1
 801b88c:	7010      	strb	r0, [r2, #0]
}
 801b88e:	4770      	bx	lr
		*bail_value = false;
 801b890:	2300      	movs	r3, #0
 801b892:	7013      	strb	r3, [r2, #0]
		return true;
 801b894:	2001      	movs	r0, #1
 801b896:	e7f5      	b.n	801b884 <should_bail+0x1c>
		data->status = -ENOMEM;
 801b898:	f06f 030b 	mvn.w	r3, #11
 801b89c:	618b      	str	r3, [r1, #24]
		*bail_value = false;
 801b89e:	2300      	movs	r3, #0
 801b8a0:	7013      	strb	r3, [r2, #0]
		return true;
 801b8a2:	2001      	movs	r0, #1
 801b8a4:	e7ee      	b.n	801b884 <should_bail+0x1c>

0801b8a6 <get_sectors_cb>:
{
 801b8a6:	b570      	push	{r4, r5, r6, lr}
 801b8a8:	b082      	sub	sp, #8
 801b8aa:	4605      	mov	r5, r0
 801b8ac:	460c      	mov	r4, r1
	struct flash_sector *ret = data->ret;
 801b8ae:	68ce      	ldr	r6, [r1, #12]
	if (should_bail(info, data, &bail)) {
 801b8b0:	f10d 0207 	add.w	r2, sp, #7
 801b8b4:	f7ff ffd8 	bl	801b868 <should_bail>
 801b8b8:	b980      	cbnz	r0, 801b8dc <get_sectors_cb+0x36>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
 801b8ba:	682b      	ldr	r3, [r5, #0]
 801b8bc:	6861      	ldr	r1, [r4, #4]
 801b8be:	6922      	ldr	r2, [r4, #16]
 801b8c0:	1a5b      	subs	r3, r3, r1
 801b8c2:	f846 3032 	str.w	r3, [r6, r2, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
 801b8c6:	6923      	ldr	r3, [r4, #16]
 801b8c8:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
 801b8cc:	686b      	ldr	r3, [r5, #4]
 801b8ce:	6073      	str	r3, [r6, #4]
	data->ret_idx++;
 801b8d0:	6923      	ldr	r3, [r4, #16]
 801b8d2:	3301      	adds	r3, #1
 801b8d4:	6123      	str	r3, [r4, #16]
	return true;
 801b8d6:	2001      	movs	r0, #1
}
 801b8d8:	b002      	add	sp, #8
 801b8da:	bd70      	pop	{r4, r5, r6, pc}
		return bail;
 801b8dc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801b8e0:	e7fa      	b.n	801b8d8 <get_sectors_cb+0x32>

0801b8e2 <flash_area_layout>:
{
 801b8e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b8e4:	460d      	mov	r5, r1
 801b8e6:	4617      	mov	r7, r2
 801b8e8:	461e      	mov	r6, r3
 801b8ea:	9c06      	ldr	r4, [sp, #24]
	cb_data->area_idx = idx;
 801b8ec:	6020      	str	r0, [r4, #0]
	fa = get_flash_area_from_id(idx);
 801b8ee:	f7ec fe21 	bl	8008534 <get_flash_area_from_id>
	if (fa == NULL) {
 801b8f2:	b1b8      	cbz	r0, 801b924 <flash_area_layout+0x42>
	cb_data->area_off = fa->fa_off;
 801b8f4:	6843      	ldr	r3, [r0, #4]
 801b8f6:	6063      	str	r3, [r4, #4]
	cb_data->area_len = fa->fa_size;
 801b8f8:	6883      	ldr	r3, [r0, #8]
 801b8fa:	60a3      	str	r3, [r4, #8]
	cb_data->ret = ret;
 801b8fc:	60e7      	str	r7, [r4, #12]
	cb_data->ret_idx = 0U;
 801b8fe:	2200      	movs	r2, #0
 801b900:	6122      	str	r2, [r4, #16]
	cb_data->ret_len = *cnt;
 801b902:	682b      	ldr	r3, [r5, #0]
 801b904:	6163      	str	r3, [r4, #20]
	cb_data->status = 0;
 801b906:	61a2      	str	r2, [r4, #24]
	flash_dev = device_get_binding(fa->fa_dev_name);
 801b908:	68c0      	ldr	r0, [r0, #12]
 801b90a:	f7fc f9a1 	bl	8017c50 <z_impl_device_get_binding>
	if (flash_dev == NULL) {
 801b90e:	b160      	cbz	r0, 801b92a <flash_area_layout+0x48>
	flash_page_foreach(flash_dev, cb, cb_data);
 801b910:	4622      	mov	r2, r4
 801b912:	4631      	mov	r1, r6
 801b914:	f004 fff2 	bl	80208fc <flash_page_foreach>
	if (cb_data->status == 0) {
 801b918:	69a3      	ldr	r3, [r4, #24]
 801b91a:	b90b      	cbnz	r3, 801b920 <flash_area_layout+0x3e>
		*cnt = cb_data->ret_idx;
 801b91c:	6923      	ldr	r3, [r4, #16]
 801b91e:	602b      	str	r3, [r5, #0]
	return cb_data->status;
 801b920:	69a0      	ldr	r0, [r4, #24]
}
 801b922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
 801b924:	f06f 0015 	mvn.w	r0, #21
 801b928:	e7fb      	b.n	801b922 <flash_area_layout+0x40>
		return -ENODEV;
 801b92a:	f06f 0012 	mvn.w	r0, #18
 801b92e:	e7f8      	b.n	801b922 <flash_area_layout+0x40>

0801b930 <settings_delete>:
{
 801b930:	b508      	push	{r3, lr}
	return settings_save_one(name, NULL, 0);
 801b932:	2200      	movs	r2, #0
 801b934:	4611      	mov	r1, r2
 801b936:	f7ec fe37 	bl	80085a8 <settings_save_one>
}
 801b93a:	bd08      	pop	{r3, pc}

0801b93c <settings_name_steq>:
{
 801b93c:	b410      	push	{r4}
	if (next) {
 801b93e:	4614      	mov	r4, r2
 801b940:	b10a      	cbz	r2, 801b946 <settings_name_steq+0xa>
		*next = NULL;
 801b942:	2300      	movs	r3, #0
 801b944:	6013      	str	r3, [r2, #0]
	if ((!name) || (!key)) {
 801b946:	b1d0      	cbz	r0, 801b97e <settings_name_steq+0x42>
 801b948:	b919      	cbnz	r1, 801b952 <settings_name_steq+0x16>
		return 0;
 801b94a:	2000      	movs	r0, #0
 801b94c:	e01a      	b.n	801b984 <settings_name_steq+0x48>
		key++;
 801b94e:	3101      	adds	r1, #1
		name++;
 801b950:	3001      	adds	r0, #1
	while ((*key != '\0') && (*key == *name) &&
 801b952:	780a      	ldrb	r2, [r1, #0]
 801b954:	b12a      	cbz	r2, 801b962 <settings_name_steq+0x26>
 801b956:	7803      	ldrb	r3, [r0, #0]
 801b958:	429a      	cmp	r2, r3
 801b95a:	d102      	bne.n	801b962 <settings_name_steq+0x26>
 801b95c:	b10b      	cbz	r3, 801b962 <settings_name_steq+0x26>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
 801b95e:	2b3d      	cmp	r3, #61	; 0x3d
 801b960:	d1f5      	bne.n	801b94e <settings_name_steq+0x12>
	if (*key != '\0') {
 801b962:	b972      	cbnz	r2, 801b982 <settings_name_steq+0x46>
	if (*name == SETTINGS_NAME_SEPARATOR) {
 801b964:	7803      	ldrb	r3, [r0, #0]
 801b966:	2b2f      	cmp	r3, #47	; 0x2f
 801b968:	d004      	beq.n	801b974 <settings_name_steq+0x38>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
 801b96a:	2b3d      	cmp	r3, #61	; 0x3d
 801b96c:	d00d      	beq.n	801b98a <settings_name_steq+0x4e>
 801b96e:	b173      	cbz	r3, 801b98e <settings_name_steq+0x52>
	return 0;
 801b970:	2000      	movs	r0, #0
 801b972:	e007      	b.n	801b984 <settings_name_steq+0x48>
		if (next) {
 801b974:	b10c      	cbz	r4, 801b97a <settings_name_steq+0x3e>
			*next = name + 1;
 801b976:	3001      	adds	r0, #1
 801b978:	6020      	str	r0, [r4, #0]
		return 1;
 801b97a:	2001      	movs	r0, #1
 801b97c:	e002      	b.n	801b984 <settings_name_steq+0x48>
		return 0;
 801b97e:	2000      	movs	r0, #0
 801b980:	e000      	b.n	801b984 <settings_name_steq+0x48>
		return 0;
 801b982:	2000      	movs	r0, #0
}
 801b984:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b988:	4770      	bx	lr
		return 1;
 801b98a:	2001      	movs	r0, #1
 801b98c:	e7fa      	b.n	801b984 <settings_name_steq+0x48>
 801b98e:	2001      	movs	r0, #1
 801b990:	e7f8      	b.n	801b984 <settings_name_steq+0x48>

0801b992 <settings_name_next>:
{
 801b992:	b410      	push	{r4}
 801b994:	4602      	mov	r2, r0
	if (next) {
 801b996:	460c      	mov	r4, r1
 801b998:	b109      	cbz	r1, 801b99e <settings_name_next+0xc>
		*next = NULL;
 801b99a:	2300      	movs	r3, #0
 801b99c:	600b      	str	r3, [r1, #0]
	if (!name) {
 801b99e:	b19a      	cbz	r2, 801b9c8 <settings_name_next+0x36>
	int rc = 0;
 801b9a0:	2000      	movs	r0, #0
 801b9a2:	e001      	b.n	801b9a8 <settings_name_next+0x16>
		rc++;
 801b9a4:	3001      	adds	r0, #1
		name++;
 801b9a6:	3201      	adds	r2, #1
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
 801b9a8:	7813      	ldrb	r3, [r2, #0]
 801b9aa:	b11b      	cbz	r3, 801b9b4 <settings_name_next+0x22>
 801b9ac:	2b3d      	cmp	r3, #61	; 0x3d
 801b9ae:	d001      	beq.n	801b9b4 <settings_name_next+0x22>
 801b9b0:	2b2f      	cmp	r3, #47	; 0x2f
 801b9b2:	d1f7      	bne.n	801b9a4 <settings_name_next+0x12>
	if (*name == SETTINGS_NAME_SEPARATOR) {
 801b9b4:	2b2f      	cmp	r3, #47	; 0x2f
 801b9b6:	d002      	beq.n	801b9be <settings_name_next+0x2c>
}
 801b9b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b9bc:	4770      	bx	lr
		if (next) {
 801b9be:	2c00      	cmp	r4, #0
 801b9c0:	d0fa      	beq.n	801b9b8 <settings_name_next+0x26>
			*next = name + 1;
 801b9c2:	3201      	adds	r2, #1
 801b9c4:	6022      	str	r2, [r4, #0]
		return rc;
 801b9c6:	e7f7      	b.n	801b9b8 <settings_name_next+0x26>
		return 0;
 801b9c8:	2000      	movs	r0, #0
 801b9ca:	e7f5      	b.n	801b9b8 <settings_name_next+0x26>

0801b9cc <settings_nvs_read_fn>:
{
 801b9cc:	b510      	push	{r4, lr}
 801b9ce:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
 801b9d0:	4613      	mov	r3, r2
 801b9d2:	460a      	mov	r2, r1
 801b9d4:	8881      	ldrh	r1, [r0, #4]
 801b9d6:	6800      	ldr	r0, [r0, #0]
 801b9d8:	f7ff fe3f 	bl	801b65a <nvs_read>
 801b9dc:	4603      	mov	r3, r0
	if (rc > (ssize_t)len) {
 801b9de:	4620      	mov	r0, r4
 801b9e0:	429c      	cmp	r4, r3
 801b9e2:	db00      	blt.n	801b9e6 <settings_nvs_read_fn+0x1a>
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
 801b9e4:	4618      	mov	r0, r3
}
 801b9e6:	bd10      	pop	{r4, pc}

0801b9e8 <settings_nvs_save>:
{
 801b9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9ec:	b097      	sub	sp, #92	; 0x5c
 801b9ee:	9300      	str	r3, [sp, #0]
	if (!name) {
 801b9f0:	2900      	cmp	r1, #0
 801b9f2:	f000 808f 	beq.w	801bb14 <settings_nvs_save+0x12c>
 801b9f6:	4606      	mov	r6, r0
 801b9f8:	4692      	mov	sl, r2
 801b9fa:	468b      	mov	fp, r1
	delete = ((value == NULL) || (val_len == 0));
 801b9fc:	b13a      	cbz	r2, 801ba0e <settings_nvs_save+0x26>
 801b9fe:	b943      	cbnz	r3, 801ba12 <settings_nvs_save+0x2a>
 801ba00:	2701      	movs	r7, #1
	name_id = cf->last_name_id + 1;
 801ba02:	f9b6 5038 	ldrsh.w	r5, [r6, #56]	; 0x38
 801ba06:	3501      	adds	r5, #1
 801ba08:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
 801ba0a:	9501      	str	r5, [sp, #4]
 801ba0c:	e007      	b.n	801ba1e <settings_nvs_save+0x36>
	delete = ((value == NULL) || (val_len == 0));
 801ba0e:	2701      	movs	r7, #1
 801ba10:	e7f7      	b.n	801ba02 <settings_nvs_save+0x1a>
 801ba12:	2700      	movs	r7, #0
 801ba14:	e7f5      	b.n	801ba02 <settings_nvs_save+0x1a>
			if (rc == -ENOENT) {
 801ba16:	f110 0f02 	cmn.w	r0, #2
 801ba1a:	d03e      	beq.n	801ba9a <settings_nvs_save+0xb2>
	delete = ((value == NULL) || (val_len == 0));
 801ba1c:	4625      	mov	r5, r4
		name_id--;
 801ba1e:	1e6c      	subs	r4, r5, #1
 801ba20:	b2a4      	uxth	r4, r4
		if (name_id == NVS_NAMECNT_ID) {
 801ba22:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 801ba26:	d05a      	beq.n	801bade <settings_nvs_save+0xf6>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
 801ba28:	f106 0908 	add.w	r9, r6, #8
 801ba2c:	234a      	movs	r3, #74	; 0x4a
 801ba2e:	aa03      	add	r2, sp, #12
 801ba30:	4621      	mov	r1, r4
 801ba32:	4648      	mov	r0, r9
 801ba34:	f7ff fe11 	bl	801b65a <nvs_read>
		if (rc < 0) {
 801ba38:	2800      	cmp	r0, #0
 801ba3a:	dbec      	blt.n	801ba16 <settings_nvs_save+0x2e>
		rdname[rc] = '\0';
 801ba3c:	ab16      	add	r3, sp, #88	; 0x58
 801ba3e:	4418      	add	r0, r3
 801ba40:	2300      	movs	r3, #0
 801ba42:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
 801ba46:	a903      	add	r1, sp, #12
 801ba48:	4658      	mov	r0, fp
 801ba4a:	f000 fef2 	bl	801c832 <strcmp>
 801ba4e:	4680      	mov	r8, r0
 801ba50:	2800      	cmp	r0, #0
 801ba52:	d1e3      	bne.n	801ba1c <settings_nvs_save+0x34>
		if ((delete) && (name_id == cf->last_name_id)) {
 801ba54:	b117      	cbz	r7, 801ba5c <settings_nvs_save+0x74>
 801ba56:	8f33      	ldrh	r3, [r6, #56]	; 0x38
 801ba58:	42a3      	cmp	r3, r4
 801ba5a:	d020      	beq.n	801ba9e <settings_nvs_save+0xb6>
		if (delete) {
 801ba5c:	bb6f      	cbnz	r7, 801baba <settings_nvs_save+0xd2>
		write_name = false;
 801ba5e:	463d      	mov	r5, r7
	if (delete) {
 801ba60:	2f00      	cmp	r7, #0
 801ba62:	d15a      	bne.n	801bb1a <settings_nvs_save+0x132>
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
 801ba64:	f5b4 4f40 	cmp.w	r4, #49152	; 0xc000
 801ba68:	d05a      	beq.n	801bb20 <settings_nvs_save+0x138>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
 801ba6a:	f106 0708 	add.w	r7, r6, #8
 801ba6e:	f504 4180 	add.w	r1, r4, #16384	; 0x4000
 801ba72:	9b00      	ldr	r3, [sp, #0]
 801ba74:	4652      	mov	r2, sl
 801ba76:	b289      	uxth	r1, r1
 801ba78:	4638      	mov	r0, r7
 801ba7a:	f7eb fb43 	bl	8007104 <nvs_write>
 801ba7e:	4680      	mov	r8, r0
	if (write_name) {
 801ba80:	bb85      	cbnz	r5, 801bae4 <settings_nvs_save+0xfc>
	if (write_name_id > cf->last_name_id) {
 801ba82:	8f33      	ldrh	r3, [r6, #56]	; 0x38
 801ba84:	42a3      	cmp	r3, r4
 801ba86:	d33a      	bcc.n	801bafe <settings_nvs_save+0x116>
	if (rc < 0) {
 801ba88:	f1b8 0f00 	cmp.w	r8, #0
 801ba8c:	db01      	blt.n	801ba92 <settings_nvs_save+0xaa>
	return 0;
 801ba8e:	f04f 0800 	mov.w	r8, #0
}
 801ba92:	4640      	mov	r0, r8
 801ba94:	b017      	add	sp, #92	; 0x5c
 801ba96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				write_name_id = name_id;
 801ba9a:	9401      	str	r4, [sp, #4]
			continue;
 801ba9c:	e7be      	b.n	801ba1c <settings_nvs_save+0x34>
			cf->last_name_id--;
 801ba9e:	3b01      	subs	r3, #1
 801baa0:	4632      	mov	r2, r6
 801baa2:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
 801baa6:	2302      	movs	r3, #2
 801baa8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801baac:	4648      	mov	r0, r9
 801baae:	f7eb fb29 	bl	8007104 <nvs_write>
			if (rc < 0) {
 801bab2:	2800      	cmp	r0, #0
 801bab4:	dad2      	bge.n	801ba5c <settings_nvs_save+0x74>
				return rc;
 801bab6:	4680      	mov	r8, r0
 801bab8:	e7eb      	b.n	801ba92 <settings_nvs_save+0xaa>
			rc = nvs_delete(&cf->cf_nvs, name_id);
 801baba:	4621      	mov	r1, r4
 801babc:	4648      	mov	r0, r9
 801babe:	f7ff fdc6 	bl	801b64e <nvs_delete>
			if (rc >= 0) {
 801bac2:	2800      	cmp	r0, #0
 801bac4:	da03      	bge.n	801bace <settings_nvs_save+0xe6>
			if (rc < 0) {
 801bac6:	2800      	cmp	r0, #0
 801bac8:	dae3      	bge.n	801ba92 <settings_nvs_save+0xaa>
				return rc;
 801baca:	4680      	mov	r8, r0
 801bacc:	e7e1      	b.n	801ba92 <settings_nvs_save+0xaa>
				rc = nvs_delete(&cf->cf_nvs, name_id +
 801bace:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
 801bad2:	313f      	adds	r1, #63	; 0x3f
 801bad4:	b289      	uxth	r1, r1
 801bad6:	4648      	mov	r0, r9
 801bad8:	f7ff fdb9 	bl	801b64e <nvs_delete>
 801badc:	e7f3      	b.n	801bac6 <settings_nvs_save+0xde>
 801bade:	9c01      	ldr	r4, [sp, #4]
	write_name = true;
 801bae0:	2501      	movs	r5, #1
 801bae2:	e7bd      	b.n	801ba60 <settings_nvs_save+0x78>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
 801bae4:	4658      	mov	r0, fp
 801bae6:	f000 fe9c 	bl	801c822 <strlen>
 801baea:	4603      	mov	r3, r0
 801baec:	465a      	mov	r2, fp
 801baee:	4621      	mov	r1, r4
 801baf0:	4638      	mov	r0, r7
 801baf2:	f7eb fb07 	bl	8007104 <nvs_write>
		if (rc < 0) {
 801baf6:	f1b0 0800 	subs.w	r8, r0, #0
 801bafa:	dac2      	bge.n	801ba82 <settings_nvs_save+0x9a>
 801bafc:	e7c9      	b.n	801ba92 <settings_nvs_save+0xaa>
		cf->last_name_id = write_name_id;
 801bafe:	4632      	mov	r2, r6
 801bb00:	f822 4f38 	strh.w	r4, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
 801bb04:	2302      	movs	r3, #2
 801bb06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801bb0a:	4638      	mov	r0, r7
 801bb0c:	f7eb fafa 	bl	8007104 <nvs_write>
 801bb10:	4680      	mov	r8, r0
 801bb12:	e7b9      	b.n	801ba88 <settings_nvs_save+0xa0>
		return -EINVAL;
 801bb14:	f06f 0815 	mvn.w	r8, #21
 801bb18:	e7bb      	b.n	801ba92 <settings_nvs_save+0xaa>
		return 0;
 801bb1a:	f04f 0800 	mov.w	r8, #0
 801bb1e:	e7b8      	b.n	801ba92 <settings_nvs_save+0xaa>
		return -ENOMEM;
 801bb20:	f06f 080b 	mvn.w	r8, #11
 801bb24:	e7b5      	b.n	801ba92 <settings_nvs_save+0xaa>

0801bb26 <settings_nvs_backend_init>:
{
 801bb26:	b570      	push	{r4, r5, r6, lr}
 801bb28:	b082      	sub	sp, #8
 801bb2a:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
 801bb2c:	f100 0508 	add.w	r5, r0, #8
 801bb30:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 801bb32:	4628      	mov	r0, r5
 801bb34:	f7eb f9ee 	bl	8006f14 <nvs_init>
	if (rc) {
 801bb38:	4606      	mov	r6, r0
 801bb3a:	b110      	cbz	r0, 801bb42 <settings_nvs_backend_init+0x1c>
}
 801bb3c:	4630      	mov	r0, r6
 801bb3e:	b002      	add	sp, #8
 801bb40:	bd70      	pop	{r4, r5, r6, pc}
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
 801bb42:	2302      	movs	r3, #2
 801bb44:	f10d 0206 	add.w	r2, sp, #6
 801bb48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801bb4c:	4628      	mov	r0, r5
 801bb4e:	f7ff fd84 	bl	801b65a <nvs_read>
	if (rc < 0) {
 801bb52:	2800      	cmp	r0, #0
 801bb54:	db03      	blt.n	801bb5e <settings_nvs_backend_init+0x38>
		cf->last_name_id = last_name_id;
 801bb56:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801bb5a:	8723      	strh	r3, [r4, #56]	; 0x38
 801bb5c:	e7ee      	b.n	801bb3c <settings_nvs_backend_init+0x16>
		cf->last_name_id = NVS_NAMECNT_ID;
 801bb5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801bb62:	8723      	strh	r3, [r4, #56]	; 0x38
 801bb64:	e7ea      	b.n	801bb3c <settings_nvs_backend_init+0x16>

0801bb66 <__stm32_exti_isr_0>:
{
 801bb66:	b508      	push	{r3, lr}
 801bb68:	4602      	mov	r2, r0
	__stm32_exti_isr(0, 1, arg);
 801bb6a:	2101      	movs	r1, #1
 801bb6c:	2000      	movs	r0, #0
 801bb6e:	f7ed f809 	bl	8008b84 <__stm32_exti_isr>
}
 801bb72:	bd08      	pop	{r3, pc}

0801bb74 <__stm32_exti_isr_1>:
{
 801bb74:	b508      	push	{r3, lr}
 801bb76:	4602      	mov	r2, r0
	__stm32_exti_isr(1, 2, arg);
 801bb78:	2102      	movs	r1, #2
 801bb7a:	2001      	movs	r0, #1
 801bb7c:	f7ed f802 	bl	8008b84 <__stm32_exti_isr>
}
 801bb80:	bd08      	pop	{r3, pc}

0801bb82 <__stm32_exti_isr_2>:
{
 801bb82:	b508      	push	{r3, lr}
 801bb84:	4602      	mov	r2, r0
	__stm32_exti_isr(2, 3, arg);
 801bb86:	2103      	movs	r1, #3
 801bb88:	2002      	movs	r0, #2
 801bb8a:	f7ec fffb 	bl	8008b84 <__stm32_exti_isr>
}
 801bb8e:	bd08      	pop	{r3, pc}

0801bb90 <__stm32_exti_isr_3>:
{
 801bb90:	b508      	push	{r3, lr}
 801bb92:	4602      	mov	r2, r0
	__stm32_exti_isr(3, 4, arg);
 801bb94:	2104      	movs	r1, #4
 801bb96:	2003      	movs	r0, #3
 801bb98:	f7ec fff4 	bl	8008b84 <__stm32_exti_isr>
}
 801bb9c:	bd08      	pop	{r3, pc}

0801bb9e <__stm32_exti_isr_4>:
{
 801bb9e:	b508      	push	{r3, lr}
 801bba0:	4602      	mov	r2, r0
	__stm32_exti_isr(4, 5, arg);
 801bba2:	2105      	movs	r1, #5
 801bba4:	2004      	movs	r0, #4
 801bba6:	f7ec ffed 	bl	8008b84 <__stm32_exti_isr>
}
 801bbaa:	bd08      	pop	{r3, pc}

0801bbac <__stm32_exti_isr_9_5>:
{
 801bbac:	b508      	push	{r3, lr}
 801bbae:	4602      	mov	r2, r0
	__stm32_exti_isr(5, 10, arg);
 801bbb0:	210a      	movs	r1, #10
 801bbb2:	2005      	movs	r0, #5
 801bbb4:	f7ec ffe6 	bl	8008b84 <__stm32_exti_isr>
}
 801bbb8:	bd08      	pop	{r3, pc}

0801bbba <__stm32_exti_isr_15_10>:
{
 801bbba:	b508      	push	{r3, lr}
 801bbbc:	4602      	mov	r2, r0
	__stm32_exti_isr(10, 16, arg);
 801bbbe:	2110      	movs	r1, #16
 801bbc0:	200a      	movs	r0, #10
 801bbc2:	f7ec ffdf 	bl	8008b84 <__stm32_exti_isr>
}
 801bbc6:	bd08      	pop	{r3, pc}

0801bbc8 <__stm32_exti_connect_irqs>:

/**
 * @brief connect all interrupts
 */
static void __stm32_exti_connect_irqs(const struct device *dev)
{
 801bbc8:	b508      	push	{r3, lr}
	defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32L5X) || \
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X)
	IRQ_CONNECT(EXTI0_IRQn,
 801bbca:	2200      	movs	r2, #0
 801bbcc:	4611      	mov	r1, r2
 801bbce:	2006      	movs	r0, #6
 801bbd0:	f7ef fa66 	bl	800b0a0 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 801bbd4:	2200      	movs	r2, #0
 801bbd6:	4611      	mov	r1, r2
 801bbd8:	2007      	movs	r0, #7
 801bbda:	f7ef fa61 	bl	800b0a0 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI1_IRQ_PRI,
		__stm32_exti_isr_1, DEVICE_GET(exti_stm32),
		0);
#ifdef CONFIG_SOC_SERIES_STM32F3X
	IRQ_CONNECT(EXTI2_TSC_IRQn,
 801bbde:	2200      	movs	r2, #0
 801bbe0:	4611      	mov	r1, r2
 801bbe2:	2008      	movs	r0, #8
 801bbe4:	f7ef fa5c 	bl	800b0a0 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 801bbe8:	2200      	movs	r2, #0
 801bbea:	4611      	mov	r1, r2
 801bbec:	2009      	movs	r0, #9
 801bbee:	f7ef fa57 	bl	800b0a0 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 801bbf2:	2200      	movs	r2, #0
 801bbf4:	4611      	mov	r1, r2
 801bbf6:	200a      	movs	r0, #10
 801bbf8:	f7ef fa52 	bl	800b0a0 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI4_IRQ_PRI,
		__stm32_exti_isr_4, DEVICE_GET(exti_stm32),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 801bbfc:	2200      	movs	r2, #0
 801bbfe:	4611      	mov	r1, r2
 801bc00:	2017      	movs	r0, #23
 801bc02:	f7ef fa4d 	bl	800b0a0 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 801bc06:	2200      	movs	r2, #0
 801bc08:	4611      	mov	r1, r2
 801bc0a:	2028      	movs	r0, #40	; 0x28
 801bc0c:	f7ef fa48 	bl	800b0a0 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_LPTIM1_IRQ_PRI,
		__stm32_exti_isr_23, DEVICE_GET(exti_stm32),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F7X */
#endif
}
 801bc10:	bd08      	pop	{r3, pc}

0801bc12 <stm32_exti_init>:
{
 801bc12:	b508      	push	{r3, lr}
	__stm32_exti_connect_irqs(dev);
 801bc14:	f7ff ffd8 	bl	801bbc8 <__stm32_exti_connect_irqs>
}
 801bc18:	2000      	movs	r0, #0
 801bc1a:	bd08      	pop	{r3, pc}

0801bc1c <config_bus_clk_init>:
	clk_init->AHBCLKDivider = ahb_prescaler(
 801bc1c:	2300      	movs	r3, #0
 801bc1e:	6003      	str	r3, [r0, #0]
	clk_init->APB1CLKDivider = apb1_prescaler(
 801bc20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801bc24:	6042      	str	r2, [r0, #4]
	clk_init->APB2CLKDivider = apb2_prescaler(
 801bc26:	6083      	str	r3, [r0, #8]
}
 801bc28:	4770      	bx	lr

0801bc2a <get_bus_clock>:
}
 801bc2a:	fbb0 f0f1 	udiv	r0, r0, r1
 801bc2e:	4770      	bx	lr

0801bc30 <config_pll_init>:
	pllinit->PLLMul = ((CONFIG_CLOCK_STM32_PLL_MULTIPLIER - 2)
 801bc30:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 801bc34:	6003      	str	r3, [r0, #0]
	pllinit->Prediv = CONFIG_CLOCK_STM32_PLL_PREDIV - 1;
 801bc36:	2300      	movs	r3, #0
 801bc38:	6043      	str	r3, [r0, #4]
}
 801bc3a:	4770      	bx	lr

0801bc3c <LL_RCC_MSI_Disable>:
 * @brief Function kept for driver genericity
 */
void LL_RCC_MSI_Disable(void)
{
	/* Do nothing */
}
 801bc3c:	4770      	bx	lr

0801bc3e <stm32_pin_configure>:
{
 801bc3e:	b510      	push	{r4, lr}
 801bc40:	4613      	mov	r3, r2
	uint32_t offset = STM32_PORT(pin) * GPIO_REG_SIZE;
 801bc42:	1104      	asrs	r4, r0, #4
 801bc44:	02a4      	lsls	r4, r4, #10
	return gpio_stm32_configure((uint32_t *)port_base,
 801bc46:	460a      	mov	r2, r1
 801bc48:	f000 010f 	and.w	r1, r0, #15
 801bc4c:	f104 4090 	add.w	r0, r4, #1207959552	; 0x48000000
 801bc50:	f004 fd38 	bl	80206c4 <gpio_stm32_configure>
}
 801bc54:	bd10      	pop	{r4, pc}

0801bc56 <z_pinmux_stm32_set>:
{
 801bc56:	b538      	push	{r3, r4, r5, lr}
 801bc58:	4604      	mov	r4, r0
 801bc5a:	460d      	mov	r5, r1
	if (enable_port(STM32_PORT(pin), clk)) {
 801bc5c:	4611      	mov	r1, r2
 801bc5e:	0900      	lsrs	r0, r0, #4
 801bc60:	f7ed f8f2 	bl	8008e48 <enable_port>
 801bc64:	b930      	cbnz	r0, 801bc74 <z_pinmux_stm32_set+0x1e>
	return stm32_pin_configure(pin, func, func & STM32_AFR_MASK);
 801bc66:	f005 020f 	and.w	r2, r5, #15
 801bc6a:	4629      	mov	r1, r5
 801bc6c:	4620      	mov	r0, r4
 801bc6e:	f7ff ffe6 	bl	801bc3e <stm32_pin_configure>
}
 801bc72:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
 801bc74:	f06f 0004 	mvn.w	r0, #4
 801bc78:	e7fb      	b.n	801bc72 <z_pinmux_stm32_set+0x1c>

0801bc7a <usb_dc_ep_set_callback>:
{
 801bc7a:	b510      	push	{r4, lr}
 801bc7c:	460c      	mov	r4, r1
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 801bc7e:	f7ed f91b 	bl	8008eb8 <usb_dc_stm32_get_ep_state>
	if (!ep_state) {
 801bc82:	b110      	cbz	r0, 801bc8a <usb_dc_ep_set_callback+0x10>
	ep_state->cb = cb;
 801bc84:	6084      	str	r4, [r0, #8]
	return 0;
 801bc86:	2000      	movs	r0, #0
}
 801bc88:	bd10      	pop	{r4, pc}
		return -EINVAL;
 801bc8a:	f06f 0015 	mvn.w	r0, #21
 801bc8e:	e7fb      	b.n	801bc88 <usb_dc_ep_set_callback+0xe>

0801bc90 <usb_dc_ep_is_stalled>:
{
 801bc90:	b510      	push	{r4, lr}
 801bc92:	460c      	mov	r4, r1
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 801bc94:	f7ed f910 	bl	8008eb8 <usb_dc_stm32_get_ep_state>
	if (!ep_state || !stalled) {
 801bc98:	b120      	cbz	r0, 801bca4 <usb_dc_ep_is_stalled+0x14>
 801bc9a:	b134      	cbz	r4, 801bcaa <usb_dc_ep_is_stalled+0x1a>
	*stalled = ep_state->ep_stalled;
 801bc9c:	7943      	ldrb	r3, [r0, #5]
 801bc9e:	7023      	strb	r3, [r4, #0]
	return 0;
 801bca0:	2000      	movs	r0, #0
}
 801bca2:	bd10      	pop	{r4, pc}
		return -EINVAL;
 801bca4:	f06f 0015 	mvn.w	r0, #21
 801bca8:	e7fb      	b.n	801bca2 <usb_dc_ep_is_stalled+0x12>
 801bcaa:	f06f 0015 	mvn.w	r0, #21
 801bcae:	e7f8      	b.n	801bca2 <usb_dc_ep_is_stalled+0x12>

0801bcb0 <usb_dc_ep_read>:
{
 801bcb0:	b510      	push	{r4, lr}
 801bcb2:	4604      	mov	r4, r0
	if (usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes) != 0) {
 801bcb4:	f7ed fc7a 	bl	80095ac <usb_dc_ep_read_wait>
 801bcb8:	b920      	cbnz	r0, 801bcc4 <usb_dc_ep_read+0x14>
	if (usb_dc_ep_read_continue(ep) != 0) {
 801bcba:	4620      	mov	r0, r4
 801bcbc:	f7ed fcf2 	bl	80096a4 <usb_dc_ep_read_continue>
 801bcc0:	b918      	cbnz	r0, 801bcca <usb_dc_ep_read+0x1a>
}
 801bcc2:	bd10      	pop	{r4, pc}
		return -EINVAL;
 801bcc4:	f06f 0015 	mvn.w	r0, #21
 801bcc8:	e7fb      	b.n	801bcc2 <usb_dc_ep_read+0x12>
		return -EINVAL;
 801bcca:	f06f 0015 	mvn.w	r0, #21
 801bcce:	e7f8      	b.n	801bcc2 <usb_dc_ep_read+0x12>

0801bcd0 <usb_dc_ep_mps>:
{
 801bcd0:	b508      	push	{r3, lr}
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 801bcd2:	f7ed f8f1 	bl	8008eb8 <usb_dc_stm32_get_ep_state>
	if (!ep_state) {
 801bcd6:	b108      	cbz	r0, 801bcdc <usb_dc_ep_mps+0xc>
	return ep_state->ep_mps;
 801bcd8:	8800      	ldrh	r0, [r0, #0]
}
 801bcda:	bd08      	pop	{r3, pc}
		return -EINVAL;
 801bcdc:	f06f 0015 	mvn.w	r0, #21
 801bce0:	e7fb      	b.n	801bcda <usb_dc_ep_mps+0xa>

0801bce2 <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 801bce2:	b538      	push	{r3, r4, r5, lr}
	uint8_t ep_idx = USB_EP_GET_IDX(epnum);
 801bce4:	f001 057f 	and.w	r5, r1, #127	; 0x7f
	uint8_t ep = ep_idx | USB_EP_DIR_OUT;
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 801bce8:	4628      	mov	r0, r5
 801bcea:	f7ed f8e5 	bl	8008eb8 <usb_dc_stm32_get_ep_state>
 801bcee:	4604      	mov	r4, r0
		HAL_PCD_EP_GetRxCount(&usb_dc_stm32_state.pcd, epnum));

	/* Transaction complete, data is now stored in the buffer and ready
	 * for the upper stack (usb_dc_ep_read to retrieve).
	 */
	usb_dc_ep_get_read_count(ep, &ep_state->read_count);
 801bcf0:	f100 010c 	add.w	r1, r0, #12
 801bcf4:	4628      	mov	r0, r5
 801bcf6:	f7ed fa4b 	bl	8009190 <usb_dc_ep_get_read_count>
	ep_state->read_offset = 0U;
 801bcfa:	2300      	movs	r3, #0
 801bcfc:	6123      	str	r3, [r4, #16]

	if (ep_state->cb) {
 801bcfe:	68a3      	ldr	r3, [r4, #8]
 801bd00:	b113      	cbz	r3, 801bd08 <HAL_PCD_DataOutStageCallback+0x26>
		ep_state->cb(ep, USB_DC_EP_DATA_OUT);
 801bd02:	2101      	movs	r1, #1
 801bd04:	4628      	mov	r0, r5
 801bd06:	4798      	blx	r3
	}
}
 801bd08:	bd38      	pop	{r3, r4, r5, pc}

0801bd0a <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 801bd0a:	b538      	push	{r3, r4, r5, lr}
	uint8_t ep_idx = USB_EP_GET_IDX(epnum);
	uint8_t ep = ep_idx | USB_EP_DIR_IN;
 801bd0c:	f041 0580 	orr.w	r5, r1, #128	; 0x80
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 801bd10:	4628      	mov	r0, r5
 801bd12:	f7ed f8d1 	bl	8008eb8 <usb_dc_stm32_get_ep_state>
 801bd16:	4604      	mov	r4, r0

	LOG_DBG("epnum 0x%02x", epnum);

	__ASSERT(ep_state, "No corresponding ep_state for ep");

	k_sem_give(&ep_state->write_sem);
 801bd18:	3014      	adds	r0, #20
	z_impl_k_sem_give(sem);
 801bd1a:	f7fc ff95 	bl	8018c48 <z_impl_k_sem_give>

	if (ep_state->cb) {
 801bd1e:	68a3      	ldr	r3, [r4, #8]
 801bd20:	b113      	cbz	r3, 801bd28 <HAL_PCD_DataInStageCallback+0x1e>
		ep_state->cb(ep, USB_DC_EP_DATA_IN);
 801bd22:	2102      	movs	r1, #2
 801bd24:	4628      	mov	r0, r5
 801bd26:	4798      	blx	r3
	}
}
 801bd28:	bd38      	pop	{r3, r4, r5, pc}

0801bd2a <flash_stm32_check_status>:
	if (FLASH_STM32_REGS(dev)->SR & error) {
 801bd2a:	68c3      	ldr	r3, [r0, #12]
 801bd2c:	681b      	ldr	r3, [r3, #0]
 801bd2e:	68db      	ldr	r3, [r3, #12]
 801bd30:	f013 0f14 	tst.w	r3, #20
 801bd34:	d101      	bne.n	801bd3a <flash_stm32_check_status+0x10>
	return 0;
 801bd36:	2000      	movs	r0, #0
 801bd38:	4770      	bx	lr
		return -EIO;
 801bd3a:	f06f 0004 	mvn.w	r0, #4
}
 801bd3e:	4770      	bx	lr

0801bd40 <get_page>:
	return offset / FLASH_PAGE_SIZE;
 801bd40:	2800      	cmp	r0, #0
 801bd42:	db01      	blt.n	801bd48 <get_page+0x8>
}
 801bd44:	12c0      	asrs	r0, r0, #11
 801bd46:	4770      	bx	lr
	return offset / FLASH_PAGE_SIZE;
 801bd48:	f200 70ff 	addw	r0, r0, #2047	; 0x7ff
 801bd4c:	e7fa      	b.n	801bd44 <get_page+0x4>

0801bd4e <is_flash_locked>:
	return !!(regs->CR & FLASH_CR_LOCK);
 801bd4e:	6900      	ldr	r0, [r0, #16]
}
 801bd50:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 801bd54:	4770      	bx	lr

0801bd56 <write_enable>:
	regs->CR |= FLASH_CR_PG;
 801bd56:	6903      	ldr	r3, [r0, #16]
 801bd58:	f043 0301 	orr.w	r3, r3, #1
 801bd5c:	6103      	str	r3, [r0, #16]
}
 801bd5e:	4770      	bx	lr

0801bd60 <write_disable>:
	regs->CR &= (~FLASH_CR_PG);
 801bd60:	6903      	ldr	r3, [r0, #16]
 801bd62:	f023 0301 	bic.w	r3, r3, #1
 801bd66:	6103      	str	r3, [r0, #16]
}
 801bd68:	4770      	bx	lr

0801bd6a <erase_page_begin>:
	regs->CR |= FLASH_CR_PER;
 801bd6a:	6903      	ldr	r3, [r0, #16]
 801bd6c:	f043 0302 	orr.w	r3, r3, #2
 801bd70:	6103      	str	r3, [r0, #16]
	regs->AR = CONFIG_FLASH_BASE_ADDRESS + page * FLASH_PAGE_SIZE;
 801bd72:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 801bd76:	02c9      	lsls	r1, r1, #11
 801bd78:	6141      	str	r1, [r0, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 801bd7a:	f3bf 8f4f 	dsb	sy
	regs->CR |= FLASH_CR_STRT;
 801bd7e:	6903      	ldr	r3, [r0, #16]
 801bd80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bd84:	6103      	str	r3, [r0, #16]
}
 801bd86:	4770      	bx	lr

0801bd88 <erase_page_end>:
	regs->CR &= ~FLASH_CR_PER;
 801bd88:	6903      	ldr	r3, [r0, #16]
 801bd8a:	f023 0302 	bic.w	r3, r3, #2
 801bd8e:	6103      	str	r3, [r0, #16]
}
 801bd90:	4770      	bx	lr

0801bd92 <flash_stm32_valid_range>:
{
 801bd92:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bd94:	b085      	sub	sp, #20
 801bd96:	4606      	mov	r6, r0
 801bd98:	460c      	mov	r4, r1
 801bd9a:	4615      	mov	r5, r2
	return (!write || (offset % 2 == 0 && len % 2 == 0U)) &&
 801bd9c:	b12b      	cbz	r3, 801bdaa <flash_stm32_valid_range+0x18>
 801bd9e:	f011 0f01 	tst.w	r1, #1
 801bda2:	d119      	bne.n	801bdd8 <flash_stm32_valid_range+0x46>
 801bda4:	f012 0f01 	tst.w	r2, #1
 801bda8:	d119      	bne.n	801bdde <flash_stm32_valid_range+0x4c>
 801bdaa:	aa01      	add	r2, sp, #4
 801bdac:	4621      	mov	r1, r4
 801bdae:	4630      	mov	r0, r6
 801bdb0:	f004 fd9e 	bl	80208f0 <z_impl_flash_get_page_info_by_offs>
					    off_t offset,
					    uint32_t len)
{
	struct flash_pages_info info;

	return !(flash_get_page_info_by_offs(dev, offset, &info) ||
 801bdb4:	4607      	mov	r7, r0
 801bdb6:	b128      	cbz	r0, 801bdc4 <flash_stm32_valid_range+0x32>
 801bdb8:	2700      	movs	r7, #0
 801bdba:	f017 0f01 	tst.w	r7, #1
 801bdbe:	d010      	beq.n	801bde2 <flash_stm32_valid_range+0x50>
 801bdc0:	2001      	movs	r0, #1
 801bdc2:	e00a      	b.n	801bdda <flash_stm32_valid_range+0x48>
		 flash_get_page_info_by_offs(dev, offset + len - 1, &info));
 801bdc4:	1961      	adds	r1, r4, r5
 801bdc6:	3901      	subs	r1, #1
 801bdc8:	aa01      	add	r2, sp, #4
 801bdca:	4630      	mov	r0, r6
 801bdcc:	f004 fd90 	bl	80208f0 <z_impl_flash_get_page_info_by_offs>
	return !(flash_get_page_info_by_offs(dev, offset, &info) ||
 801bdd0:	2800      	cmp	r0, #0
 801bdd2:	d1f2      	bne.n	801bdba <flash_stm32_valid_range+0x28>
 801bdd4:	2701      	movs	r7, #1
 801bdd6:	e7f0      	b.n	801bdba <flash_stm32_valid_range+0x28>
 801bdd8:	2000      	movs	r0, #0
}
 801bdda:	b005      	add	sp, #20
 801bddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (!write || (offset % 2 == 0 && len % 2 == 0U)) &&
 801bdde:	2000      	movs	r0, #0
 801bde0:	e7fb      	b.n	801bdda <flash_stm32_valid_range+0x48>
 801bde2:	2000      	movs	r0, #0
 801bde4:	e7f9      	b.n	801bdda <flash_stm32_valid_range+0x48>

0801bde6 <flash_stm32_write_range>:
{
 801bde6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bdea:	4680      	mov	r8, r0
 801bdec:	460f      	mov	r7, r1
 801bdee:	4616      	mov	r6, r2
 801bdf0:	461d      	mov	r5, r3
	int i, rc = 0;
 801bdf2:	2000      	movs	r0, #0
	for (i = 0; i < len / sizeof(flash_prg_t); i++) {
 801bdf4:	4604      	mov	r4, r0
 801bdf6:	ebb4 0f55 	cmp.w	r4, r5, lsr #1
 801bdfa:	d20a      	bcs.n	801be12 <flash_stm32_write_range+0x2c>
		rc = write_value(dev, offset + i * sizeof(flash_prg_t),
 801bdfc:	f836 2014 	ldrh.w	r2, [r6, r4, lsl #1]
 801be00:	eb07 0144 	add.w	r1, r7, r4, lsl #1
 801be04:	4640      	mov	r0, r8
 801be06:	f7ed fe87 	bl	8009b18 <write_value>
		if (rc < 0) {
 801be0a:	2800      	cmp	r0, #0
 801be0c:	db01      	blt.n	801be12 <flash_stm32_write_range+0x2c>
	for (i = 0; i < len / sizeof(flash_prg_t); i++) {
 801be0e:	3401      	adds	r4, #1
 801be10:	e7f1      	b.n	801bdf6 <flash_stm32_write_range+0x10>
}
 801be12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801be16 <h4_discard>:
	return uart_fifo_read(uart, buf, MIN(len, sizeof(buf)));
 801be16:	460a      	mov	r2, r1
 801be18:	2921      	cmp	r1, #33	; 0x21
 801be1a:	bf28      	it	cs
 801be1c:	2221      	movcs	r2, #33	; 0x21
	const struct uart_driver_api *api =
 801be1e:	6883      	ldr	r3, [r0, #8]
	if (api->fifo_read) {
 801be20:	699b      	ldr	r3, [r3, #24]
 801be22:	b133      	cbz	r3, 801be32 <h4_discard+0x1c>
{
 801be24:	b500      	push	{lr}
 801be26:	b08b      	sub	sp, #44	; 0x2c
		return api->fifo_read(dev, rx_data, size);
 801be28:	a901      	add	r1, sp, #4
 801be2a:	4798      	blx	r3
}
 801be2c:	b00b      	add	sp, #44	; 0x2c
 801be2e:	f85d fb04 	ldr.w	pc, [sp], #4
	return 0;
 801be32:	2000      	movs	r0, #0
 801be34:	4770      	bx	lr

0801be36 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
 801be36:	428b      	cmp	r3, r1
 801be38:	d901      	bls.n	801be3e <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
 801be3a:	2000      	movs	r0, #0
	}
}
 801be3c:	4770      	bx	lr
{
 801be3e:	b538      	push	{r3, r4, r5, lr}
 801be40:	4615      	mov	r5, r2
 801be42:	461c      	mov	r4, r3
		(void)memcpy(to, from, from_len);
 801be44:	461a      	mov	r2, r3
 801be46:	4629      	mov	r1, r5
 801be48:	f000 fd31 	bl	801c8ae <memcpy>
		return from_len;
 801be4c:	4620      	mov	r0, r4
}
 801be4e:	bd38      	pop	{r3, r4, r5, pc}

0801be50 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
 801be50:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
 801be52:	f000 fd51 	bl	801c8f8 <memset>
}
 801be56:	bd08      	pop	{r3, pc}

0801be58 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
 801be58:	09c3      	lsrs	r3, r0, #7
 801be5a:	005a      	lsls	r2, r3, #1
 801be5c:	4413      	add	r3, r2
 801be5e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 801be62:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
 801be66:	b2c0      	uxtb	r0, r0
 801be68:	4770      	bx	lr

0801be6a <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
 801be6a:	b410      	push	{r4}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
 801be6c:	460b      	mov	r3, r1

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
 801be6e:	f913 2b0f 	ldrsb.w	r2, [r3], #15
 801be72:	2a00      	cmp	r2, #0
 801be74:	db03      	blt.n	801be7e <gf_double+0x14>
 801be76:	2400      	movs	r4, #0

	out += (TC_AES_BLOCK_SIZE - 1);
 801be78:	f100 020f 	add.w	r2, r0, #15
 801be7c:	e004      	b.n	801be88 <gf_double+0x1e>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
 801be7e:	2487      	movs	r4, #135	; 0x87
 801be80:	e7fa      	b.n	801be78 <gf_double+0xe>
	for (;;) {
		*out-- = (*x << 1) ^ carry;
		if (x == in) {
			break;
		}
		carry = *x-- >> 7;
 801be82:	f813 0901 	ldrb.w	r0, [r3], #-1
 801be86:	09c4      	lsrs	r4, r0, #7
		*out-- = (*x << 1) ^ carry;
 801be88:	7818      	ldrb	r0, [r3, #0]
 801be8a:	ea84 0040 	eor.w	r0, r4, r0, lsl #1
 801be8e:	f802 0901 	strb.w	r0, [r2], #-1
		if (x == in) {
 801be92:	428b      	cmp	r3, r1
 801be94:	d1f5      	bne.n	801be82 <gf_double+0x18>
	}
}
 801be96:	f85d 4b04 	ldr.w	r4, [sp], #4
 801be9a:	4770      	bx	lr

0801be9c <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
 801be9c:	b130      	cbz	r0, 801beac <tc_cmac_erase+0x10>
{
 801be9e:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
 801bea0:	2258      	movs	r2, #88	; 0x58
 801bea2:	2100      	movs	r1, #0
 801bea4:	f7ff ffd4 	bl	801be50 <_set>

	return TC_CRYPTO_SUCCESS;
 801bea8:	2001      	movs	r0, #1
}
 801beaa:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
 801beac:	2000      	movs	r0, #0
}
 801beae:	4770      	bx	lr

0801beb0 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
 801beb0:	b1a0      	cbz	r0, 801bedc <tc_cmac_init+0x2c>
{
 801beb2:	b510      	push	{r4, lr}
 801beb4:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
 801beb6:	2210      	movs	r2, #16
 801beb8:	2100      	movs	r1, #0
 801beba:	f7ff ffc9 	bl	801be50 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
 801bebe:	2210      	movs	r2, #16
 801bec0:	2100      	movs	r1, #0
 801bec2:	f104 0030 	add.w	r0, r4, #48	; 0x30
 801bec6:	f7ff ffc3 	bl	801be50 <_set>
	s->leftover_offset = 0;
 801beca:	2300      	movs	r3, #0
 801becc:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
 801bece:	2200      	movs	r2, #0
 801bed0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801bed4:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
 801bed8:	2001      	movs	r0, #1
}
 801beda:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
 801bedc:	2000      	movs	r0, #0
}
 801bede:	4770      	bx	lr

0801bee0 <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
 801bee0:	b338      	cbz	r0, 801bf32 <tc_cmac_setup+0x52>
{
 801bee2:	b570      	push	{r4, r5, r6, lr}
 801bee4:	460d      	mov	r5, r1
 801bee6:	4616      	mov	r6, r2
 801bee8:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
 801beea:	b321      	cbz	r1, 801bf36 <tc_cmac_setup+0x56>
	_set(s, 0, sizeof(*s));
 801beec:	2258      	movs	r2, #88	; 0x58
 801beee:	2100      	movs	r1, #0
 801bef0:	f7ff ffae 	bl	801be50 <_set>
	s->sched = sched;
 801bef4:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
 801bef6:	4629      	mov	r1, r5
 801bef8:	4630      	mov	r0, r6
 801befa:	f7ee fb55 	bl	800a5a8 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
 801befe:	2210      	movs	r2, #16
 801bf00:	2100      	movs	r1, #0
 801bf02:	4620      	mov	r0, r4
 801bf04:	f7ff ffa4 	bl	801be50 <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
 801bf08:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 801bf0a:	4621      	mov	r1, r4
 801bf0c:	4620      	mov	r0, r4
 801bf0e:	f7ee fba9 	bl	800a664 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
 801bf12:	f104 0510 	add.w	r5, r4, #16
 801bf16:	4621      	mov	r1, r4
 801bf18:	4628      	mov	r0, r5
 801bf1a:	f7ff ffa6 	bl	801be6a <gf_double>
	gf_double (s->K2, s->K1);
 801bf1e:	4629      	mov	r1, r5
 801bf20:	f104 0020 	add.w	r0, r4, #32
 801bf24:	f7ff ffa1 	bl	801be6a <gf_double>
	tc_cmac_init(s);
 801bf28:	4620      	mov	r0, r4
 801bf2a:	f7ff ffc1 	bl	801beb0 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
 801bf2e:	2001      	movs	r0, #1
}
 801bf30:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
 801bf32:	2000      	movs	r0, #0
}
 801bf34:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 801bf36:	2000      	movs	r0, #0
 801bf38:	e7fa      	b.n	801bf30 <tc_cmac_setup+0x50>

0801bf3a <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
 801bf3a:	2800      	cmp	r0, #0
 801bf3c:	d062      	beq.n	801c004 <tc_cmac_update+0xca>
{
 801bf3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bf42:	460e      	mov	r6, r1
 801bf44:	4617      	mov	r7, r2
 801bf46:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
 801bf48:	2a00      	cmp	r2, #0
 801bf4a:	d05d      	beq.n	801c008 <tc_cmac_update+0xce>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
 801bf4c:	2900      	cmp	r1, #0
 801bf4e:	d05e      	beq.n	801c00e <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
 801bf50:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
 801bf54:	ea50 0301 	orrs.w	r3, r0, r1
 801bf58:	d05b      	beq.n	801c012 <tc_cmac_update+0xd8>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
 801bf5a:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
 801bf5e:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
 801bf62:	6522      	str	r2, [r4, #80]	; 0x50
 801bf64:	6563      	str	r3, [r4, #84]	; 0x54

	if (s->leftover_offset > 0) {
 801bf66:	6c65      	ldr	r5, [r4, #68]	; 0x44
 801bf68:	b3a5      	cbz	r5, 801bfd4 <tc_cmac_update+0x9a>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
 801bf6a:	f1c5 0810 	rsb	r8, r5, #16

		if (data_length < remaining_space) {
 801bf6e:	4547      	cmp	r7, r8
 801bf70:	d30d      	bcc.n	801bf8e <tc_cmac_update+0x54>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
 801bf72:	f105 0030 	add.w	r0, r5, #48	; 0x30
 801bf76:	4643      	mov	r3, r8
 801bf78:	4632      	mov	r2, r6
 801bf7a:	4641      	mov	r1, r8
 801bf7c:	4420      	add	r0, r4
 801bf7e:	f7ff ff5a 	bl	801be36 <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
 801bf82:	3d10      	subs	r5, #16
 801bf84:	442f      	add	r7, r5
		data += remaining_space;
 801bf86:	4446      	add	r6, r8
		s->leftover_offset = 0;
 801bf88:	2300      	movs	r3, #0
 801bf8a:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
 801bf8c:	e013      	b.n	801bfb6 <tc_cmac_update+0x7c>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
 801bf8e:	f105 0030 	add.w	r0, r5, #48	; 0x30
 801bf92:	463b      	mov	r3, r7
 801bf94:	4632      	mov	r2, r6
 801bf96:	4639      	mov	r1, r7
 801bf98:	4420      	add	r0, r4
 801bf9a:	f7ff ff4c 	bl	801be36 <_copy>
			s->leftover_offset += data_length;
 801bf9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801bfa0:	443b      	add	r3, r7
 801bfa2:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
 801bfa4:	2001      	movs	r0, #1
 801bfa6:	e030      	b.n	801c00a <tc_cmac_update+0xd0>
			s->iv[i] ^= s->leftover[i];
 801bfa8:	18e2      	adds	r2, r4, r3
 801bfaa:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 801bfae:	5ce1      	ldrb	r1, [r4, r3]
 801bfb0:	404a      	eors	r2, r1
 801bfb2:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
 801bfb4:	3301      	adds	r3, #1
 801bfb6:	2b0f      	cmp	r3, #15
 801bfb8:	d9f6      	bls.n	801bfa8 <tc_cmac_update+0x6e>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
 801bfba:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 801bfbc:	4621      	mov	r1, r4
 801bfbe:	4620      	mov	r0, r4
 801bfc0:	f7ee fb50 	bl	800a664 <tc_aes_encrypt>
 801bfc4:	e006      	b.n	801bfd4 <tc_cmac_update+0x9a>
	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
 801bfc6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 801bfc8:	4621      	mov	r1, r4
 801bfca:	4620      	mov	r0, r4
 801bfcc:	f7ee fb4a 	bl	800a664 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
 801bfd0:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
 801bfd2:	3f10      	subs	r7, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
 801bfd4:	2f10      	cmp	r7, #16
 801bfd6:	d908      	bls.n	801bfea <tc_cmac_update+0xb0>
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
 801bfd8:	2300      	movs	r3, #0
 801bfda:	2b0f      	cmp	r3, #15
 801bfdc:	d8f3      	bhi.n	801bfc6 <tc_cmac_update+0x8c>
			s->iv[i] ^= data[i];
 801bfde:	5cf0      	ldrb	r0, [r6, r3]
 801bfe0:	5ce5      	ldrb	r5, [r4, r3]
 801bfe2:	4068      	eors	r0, r5
 801bfe4:	54e0      	strb	r0, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
 801bfe6:	3301      	adds	r3, #1
 801bfe8:	e7f7      	b.n	801bfda <tc_cmac_update+0xa0>
	}

	if (data_length > 0) {
 801bfea:	b90f      	cbnz	r7, 801bff0 <tc_cmac_update+0xb6>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
 801bfec:	2001      	movs	r0, #1
 801bfee:	e00c      	b.n	801c00a <tc_cmac_update+0xd0>
		_copy(s->leftover, data_length, data, data_length);
 801bff0:	463b      	mov	r3, r7
 801bff2:	4632      	mov	r2, r6
 801bff4:	4639      	mov	r1, r7
 801bff6:	f104 0030 	add.w	r0, r4, #48	; 0x30
 801bffa:	f7ff ff1c 	bl	801be36 <_copy>
		s->leftover_offset = data_length;
 801bffe:	6467      	str	r7, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
 801c000:	2001      	movs	r0, #1
 801c002:	e002      	b.n	801c00a <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
 801c004:	2000      	movs	r0, #0
}
 801c006:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
 801c008:	2001      	movs	r0, #1
}
 801c00a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
 801c00e:	2000      	movs	r0, #0
 801c010:	e7fb      	b.n	801c00a <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
 801c012:	2000      	movs	r0, #0
 801c014:	e7f9      	b.n	801c00a <tc_cmac_update+0xd0>

0801c016 <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
 801c016:	b370      	cbz	r0, 801c076 <tc_cmac_final+0x60>
{
 801c018:	b538      	push	{r3, r4, r5, lr}
 801c01a:	460c      	mov	r4, r1
 801c01c:	4605      	mov	r5, r0
	if (tag == (uint8_t *) 0 ||
 801c01e:	b361      	cbz	r1, 801c07a <tc_cmac_final+0x64>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
 801c020:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 801c022:	2a10      	cmp	r2, #16
 801c024:	d10d      	bne.n	801c042 <tc_cmac_final+0x2c>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
 801c026:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
 801c028:	2300      	movs	r3, #0
 801c02a:	2b0f      	cmp	r3, #15
 801c02c:	d819      	bhi.n	801c062 <tc_cmac_final+0x4c>
		s->iv[i] ^= s->leftover[i] ^ k[i];
 801c02e:	18e2      	adds	r2, r4, r3
 801c030:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 801c034:	5cc8      	ldrb	r0, [r1, r3]
 801c036:	4050      	eors	r0, r2
 801c038:	5ce2      	ldrb	r2, [r4, r3]
 801c03a:	4042      	eors	r2, r0
 801c03c:	54e2      	strb	r2, [r4, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
 801c03e:	3301      	adds	r3, #1
 801c040:	e7f3      	b.n	801c02a <tc_cmac_final+0x14>
		_set(&s->leftover[s->leftover_offset], 0, remaining);
 801c042:	f102 0030 	add.w	r0, r2, #48	; 0x30
 801c046:	f1c2 0210 	rsb	r2, r2, #16
 801c04a:	2100      	movs	r1, #0
 801c04c:	4420      	add	r0, r4
 801c04e:	f7ff feff 	bl	801be50 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
 801c052:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801c054:	4423      	add	r3, r4
 801c056:	2280      	movs	r2, #128	; 0x80
 801c058:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
 801c05c:	f104 0120 	add.w	r1, r4, #32
 801c060:	e7e2      	b.n	801c028 <tc_cmac_final+0x12>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
 801c062:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 801c064:	4621      	mov	r1, r4
 801c066:	4628      	mov	r0, r5
 801c068:	f7ee fafc 	bl	800a664 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
 801c06c:	4620      	mov	r0, r4
 801c06e:	f7ff ff15 	bl	801be9c <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
 801c072:	2001      	movs	r0, #1
}
 801c074:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
 801c076:	2000      	movs	r0, #0
}
 801c078:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 801c07a:	2000      	movs	r0, #0
 801c07c:	e7fa      	b.n	801c074 <tc_cmac_final+0x5e>

0801c07e <tc_sha256_update>:
	if (s == (TCSha256State_t) 0 ||
 801c07e:	b328      	cbz	r0, 801c0cc <tc_sha256_update+0x4e>
{
 801c080:	b570      	push	{r4, r5, r6, lr}
 801c082:	460c      	mov	r4, r1
 801c084:	4605      	mov	r5, r0
	if (s == (TCSha256State_t) 0 ||
 801c086:	b319      	cbz	r1, 801c0d0 <tc_sha256_update+0x52>
	} else if (datalen == 0) {
 801c088:	b98a      	cbnz	r2, 801c0ae <tc_sha256_update+0x30>
		return TC_CRYPTO_SUCCESS;
 801c08a:	2001      	movs	r0, #1
 801c08c:	e01d      	b.n	801c0ca <tc_sha256_update+0x4c>
			compress(s->iv, s->leftover);
 801c08e:	f105 0128 	add.w	r1, r5, #40	; 0x28
 801c092:	4628      	mov	r0, r5
 801c094:	f7ee fe8c 	bl	800adb0 <compress>
			s->leftover_offset = 0;
 801c098:	2300      	movs	r3, #0
 801c09a:	66ab      	str	r3, [r5, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
 801c09c:	6a2b      	ldr	r3, [r5, #32]
 801c09e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801c0a0:	f513 7300 	adds.w	r3, r3, #512	; 0x200
 801c0a4:	f142 0200 	adc.w	r2, r2, #0
 801c0a8:	622b      	str	r3, [r5, #32]
 801c0aa:	626a      	str	r2, [r5, #36]	; 0x24
{
 801c0ac:	4632      	mov	r2, r6
	while (datalen-- > 0) {
 801c0ae:	1e56      	subs	r6, r2, #1
 801c0b0:	b152      	cbz	r2, 801c0c8 <tc_sha256_update+0x4a>
		s->leftover[s->leftover_offset++] = *(data++);
 801c0b2:	6eab      	ldr	r3, [r5, #104]	; 0x68
 801c0b4:	1c5a      	adds	r2, r3, #1
 801c0b6:	66aa      	str	r2, [r5, #104]	; 0x68
 801c0b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c0bc:	442b      	add	r3, r5
 801c0be:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
 801c0c2:	2a3f      	cmp	r2, #63	; 0x3f
 801c0c4:	d9f2      	bls.n	801c0ac <tc_sha256_update+0x2e>
 801c0c6:	e7e2      	b.n	801c08e <tc_sha256_update+0x10>
	return TC_CRYPTO_SUCCESS;
 801c0c8:	2001      	movs	r0, #1
}
 801c0ca:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
 801c0cc:	2000      	movs	r0, #0
}
 801c0ce:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 801c0d0:	2000      	movs	r0, #0
 801c0d2:	e7fa      	b.n	801c0ca <tc_sha256_update+0x4c>

0801c0d4 <tc_sha256_final>:
	if (digest == (uint8_t *) 0 ||
 801c0d4:	2800      	cmp	r0, #0
 801c0d6:	d065      	beq.n	801c1a4 <tc_sha256_final+0xd0>
{
 801c0d8:	b570      	push	{r4, r5, r6, lr}
 801c0da:	460d      	mov	r5, r1
 801c0dc:	4604      	mov	r4, r0
	if (digest == (uint8_t *) 0 ||
 801c0de:	2900      	cmp	r1, #0
 801c0e0:	d062      	beq.n	801c1a8 <tc_sha256_final+0xd4>
	s->bits_hashed += (s->leftover_offset << 3);
 801c0e2:	6e89      	ldr	r1, [r1, #104]	; 0x68
 801c0e4:	00c8      	lsls	r0, r1, #3
 801c0e6:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
 801c0ea:	1812      	adds	r2, r2, r0
 801c0ec:	f143 0300 	adc.w	r3, r3, #0
 801c0f0:	e9c5 2308 	strd	r2, r3, [r5, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
 801c0f4:	1c48      	adds	r0, r1, #1
 801c0f6:	66a8      	str	r0, [r5, #104]	; 0x68
 801c0f8:	4429      	add	r1, r5
 801c0fa:	2380      	movs	r3, #128	; 0x80
 801c0fc:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
 801c100:	2838      	cmp	r0, #56	; 0x38
 801c102:	d82a      	bhi.n	801c15a <tc_sha256_final+0x86>
	_set(s->leftover + s->leftover_offset, 0x00,
 801c104:	f105 0628 	add.w	r6, r5, #40	; 0x28
 801c108:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 801c10a:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 801c10e:	2100      	movs	r1, #0
 801c110:	4430      	add	r0, r6
 801c112:	f7ff fe9d 	bl	801be50 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
 801c116:	6a2a      	ldr	r2, [r5, #32]
 801c118:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801c11a:	f885 2067 	strb.w	r2, [r5, #103]	; 0x67
	s->leftover[sizeof(s->leftover) - 2] = (uint8_t)(s->bits_hashed >> 8);
 801c11e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 801c122:	f885 1066 	strb.w	r1, [r5, #102]	; 0x66
	s->leftover[sizeof(s->leftover) - 3] = (uint8_t)(s->bits_hashed >> 16);
 801c126:	f3c2 4107 	ubfx	r1, r2, #16, #8
 801c12a:	f885 1065 	strb.w	r1, [r5, #101]	; 0x65
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
 801c12e:	0e12      	lsrs	r2, r2, #24
 801c130:	f885 2064 	strb.w	r2, [r5, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
 801c134:	f885 3063 	strb.w	r3, [r5, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
 801c138:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801c13c:	f885 2062 	strb.w	r2, [r5, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
 801c140:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801c144:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
 801c148:	0e1b      	lsrs	r3, r3, #24
 801c14a:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	compress(s->iv, s->leftover);
 801c14e:	4631      	mov	r1, r6
 801c150:	4628      	mov	r0, r5
 801c152:	f7ee fe2d 	bl	800adb0 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
 801c156:	2200      	movs	r2, #0
 801c158:	e01b      	b.n	801c192 <tc_sha256_final+0xbe>
		_set(s->leftover + s->leftover_offset, 0x00,
 801c15a:	f105 0628 	add.w	r6, r5, #40	; 0x28
 801c15e:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 801c162:	2100      	movs	r1, #0
 801c164:	4430      	add	r0, r6
 801c166:	f7ff fe73 	bl	801be50 <_set>
		compress(s->iv, s->leftover);
 801c16a:	4631      	mov	r1, r6
 801c16c:	4628      	mov	r0, r5
 801c16e:	f7ee fe1f 	bl	800adb0 <compress>
		s->leftover_offset = 0;
 801c172:	2300      	movs	r3, #0
 801c174:	66ab      	str	r3, [r5, #104]	; 0x68
 801c176:	e7c5      	b.n	801c104 <tc_sha256_final+0x30>
		unsigned int t = *((unsigned int *) &s->iv[i]);
 801c178:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
		*digest++ = (uint8_t)(t >> 24);
 801c17c:	0e19      	lsrs	r1, r3, #24
 801c17e:	7021      	strb	r1, [r4, #0]
		*digest++ = (uint8_t)(t >> 16);
 801c180:	f3c3 4107 	ubfx	r1, r3, #16, #8
 801c184:	7061      	strb	r1, [r4, #1]
		*digest++ = (uint8_t)(t >> 8);
 801c186:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801c18a:	70a1      	strb	r1, [r4, #2]
		*digest++ = (uint8_t)(t);
 801c18c:	70e3      	strb	r3, [r4, #3]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
 801c18e:	3201      	adds	r2, #1
		*digest++ = (uint8_t)(t);
 801c190:	3404      	adds	r4, #4
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
 801c192:	2a07      	cmp	r2, #7
 801c194:	d9f0      	bls.n	801c178 <tc_sha256_final+0xa4>
	_set(s, 0, sizeof(*s));
 801c196:	2270      	movs	r2, #112	; 0x70
 801c198:	2100      	movs	r1, #0
 801c19a:	4628      	mov	r0, r5
 801c19c:	f7ff fe58 	bl	801be50 <_set>
	return TC_CRYPTO_SUCCESS;
 801c1a0:	2001      	movs	r0, #1
}
 801c1a2:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
 801c1a4:	2000      	movs	r0, #0
}
 801c1a6:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 801c1a8:	2000      	movs	r0, #0
 801c1aa:	e7fa      	b.n	801c1a2 <tc_sha256_final+0xce>

0801c1ac <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
 801c1ac:	b430      	push	{r4, r5}
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
 801c1ae:	2300      	movs	r3, #0
 801c1b0:	4293      	cmp	r3, r2
 801c1b2:	d212      	bcs.n	801c1da <rekey+0x2e>
		key[i] = inner_pad ^ new_key[i];
 801c1b4:	5ccc      	ldrb	r4, [r1, r3]
 801c1b6:	f084 0436 	eor.w	r4, r4, #54	; 0x36
 801c1ba:	54c4      	strb	r4, [r0, r3]
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
 801c1bc:	5ccc      	ldrb	r4, [r1, r3]
 801c1be:	f103 0540 	add.w	r5, r3, #64	; 0x40
 801c1c2:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
 801c1c6:	5544      	strb	r4, [r0, r5]
	for (i = 0; i < key_size; ++i) {
 801c1c8:	3301      	adds	r3, #1
 801c1ca:	e7f1      	b.n	801c1b0 <rekey+0x4>
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
 801c1cc:	2236      	movs	r2, #54	; 0x36
 801c1ce:	54c2      	strb	r2, [r0, r3]
 801c1d0:	f103 0240 	add.w	r2, r3, #64	; 0x40
 801c1d4:	215c      	movs	r1, #92	; 0x5c
 801c1d6:	5481      	strb	r1, [r0, r2]
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
 801c1d8:	3301      	adds	r3, #1
 801c1da:	2b3f      	cmp	r3, #63	; 0x3f
 801c1dc:	d9f6      	bls.n	801c1cc <rekey+0x20>
	}
}
 801c1de:	bc30      	pop	{r4, r5}
 801c1e0:	4770      	bx	lr

0801c1e2 <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
 801c1e2:	b388      	cbz	r0, 801c248 <tc_hmac_set_key+0x66>
{
 801c1e4:	b570      	push	{r4, r5, r6, lr}
 801c1e6:	b0cc      	sub	sp, #304	; 0x130
 801c1e8:	460d      	mov	r5, r1
 801c1ea:	4614      	mov	r4, r2
 801c1ec:	4606      	mov	r6, r0
	if (ctx == (TCHmacState_t) 0 ||
 801c1ee:	b369      	cbz	r1, 801c24c <tc_hmac_set_key+0x6a>
	    key == (const uint8_t *) 0 ||
 801c1f0:	b372      	cbz	r2, 801c250 <tc_hmac_set_key+0x6e>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
 801c1f2:	2a40      	cmp	r2, #64	; 0x40
 801c1f4:	d813      	bhi.n	801c21e <tc_hmac_set_key+0x3c>
		 * certain timing attacks. Without these dummy calls,
		 * adversaries would be able to learn whether the key_size is
		 * greater than TC_SHA256_BLOCK_SIZE by measuring the time
		 * consumed in this process.
		 */
		(void)tc_sha256_init(&dummy_state.hash_state);
 801c1f6:	4668      	mov	r0, sp
 801c1f8:	f7ee feb2 	bl	800af60 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
 801c1fc:	4622      	mov	r2, r4
 801c1fe:	a93c      	add	r1, sp, #240	; 0xf0
 801c200:	4668      	mov	r0, sp
 801c202:	f7ff ff3c 	bl	801c07e <tc_sha256_update>
				       dummy_key,
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
 801c206:	4669      	mov	r1, sp
 801c208:	a824      	add	r0, sp, #144	; 0x90
 801c20a:	f7ff ff63 	bl	801c0d4 <tc_sha256_final>
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
 801c20e:	4622      	mov	r2, r4
 801c210:	4629      	mov	r1, r5
 801c212:	f106 0070 	add.w	r0, r6, #112	; 0x70
 801c216:	f7ff ffc9 	bl	801c1ac <rekey>
		rekey(ctx->key,
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
 801c21a:	2001      	movs	r0, #1
 801c21c:	e019      	b.n	801c252 <tc_hmac_set_key+0x70>
		(void)tc_sha256_init(&ctx->hash_state);
 801c21e:	f7ee fe9f 	bl	800af60 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
 801c222:	4622      	mov	r2, r4
 801c224:	4629      	mov	r1, r5
 801c226:	4630      	mov	r0, r6
 801c228:	f7ff ff29 	bl	801c07e <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
 801c22c:	f106 0490 	add.w	r4, r6, #144	; 0x90
 801c230:	4631      	mov	r1, r6
 801c232:	4620      	mov	r0, r4
 801c234:	f7ff ff4e 	bl	801c0d4 <tc_sha256_final>
		rekey(ctx->key,
 801c238:	2220      	movs	r2, #32
 801c23a:	4621      	mov	r1, r4
 801c23c:	f106 0070 	add.w	r0, r6, #112	; 0x70
 801c240:	f7ff ffb4 	bl	801c1ac <rekey>
	return TC_CRYPTO_SUCCESS;
 801c244:	2001      	movs	r0, #1
 801c246:	e004      	b.n	801c252 <tc_hmac_set_key+0x70>
		return TC_CRYPTO_FAIL;
 801c248:	2000      	movs	r0, #0
}
 801c24a:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 801c24c:	2000      	movs	r0, #0
 801c24e:	e000      	b.n	801c252 <tc_hmac_set_key+0x70>
 801c250:	2000      	movs	r0, #0
}
 801c252:	b04c      	add	sp, #304	; 0x130
 801c254:	bd70      	pop	{r4, r5, r6, pc}

0801c256 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
 801c256:	b158      	cbz	r0, 801c270 <tc_hmac_init+0x1a>
{
 801c258:	b510      	push	{r4, lr}
 801c25a:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
 801c25c:	f7ee fe80 	bl	800af60 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
 801c260:	2240      	movs	r2, #64	; 0x40
 801c262:	f104 0170 	add.w	r1, r4, #112	; 0x70
 801c266:	4620      	mov	r0, r4
 801c268:	f7ff ff09 	bl	801c07e <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
 801c26c:	2001      	movs	r0, #1
}
 801c26e:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
 801c270:	2000      	movs	r0, #0
}
 801c272:	4770      	bx	lr

0801c274 <tc_hmac_update>:
		   const void *data,
		   unsigned int data_length)
{

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
 801c274:	b120      	cbz	r0, 801c280 <tc_hmac_update+0xc>
{
 801c276:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
 801c278:	f7ff ff01 	bl	801c07e <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
 801c27c:	2001      	movs	r0, #1
}
 801c27e:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
 801c280:	2000      	movs	r0, #0
}
 801c282:	4770      	bx	lr

0801c284 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
 801c284:	b308      	cbz	r0, 801c2ca <tc_hmac_final+0x46>
{
 801c286:	b538      	push	{r3, r4, r5, lr}
 801c288:	4614      	mov	r4, r2
 801c28a:	4605      	mov	r5, r0
	if (tag == (uint8_t *) 0 ||
 801c28c:	2920      	cmp	r1, #32
 801c28e:	d11e      	bne.n	801c2ce <tc_hmac_final+0x4a>
	    taglen != TC_SHA256_DIGEST_SIZE ||
 801c290:	b1fa      	cbz	r2, 801c2d2 <tc_hmac_final+0x4e>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
 801c292:	4611      	mov	r1, r2
 801c294:	f7ff ff1e 	bl	801c0d4 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
 801c298:	4620      	mov	r0, r4
 801c29a:	f7ee fe61 	bl	800af60 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
 801c29e:	2240      	movs	r2, #64	; 0x40
 801c2a0:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
 801c2a4:	4620      	mov	r0, r4
 801c2a6:	f7ff feea 	bl	801c07e <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
 801c2aa:	2220      	movs	r2, #32
 801c2ac:	4629      	mov	r1, r5
 801c2ae:	4620      	mov	r0, r4
 801c2b0:	f7ff fee5 	bl	801c07e <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
 801c2b4:	4621      	mov	r1, r4
 801c2b6:	4628      	mov	r0, r5
 801c2b8:	f7ff ff0c 	bl	801c0d4 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
 801c2bc:	22f0      	movs	r2, #240	; 0xf0
 801c2be:	2100      	movs	r1, #0
 801c2c0:	4620      	mov	r0, r4
 801c2c2:	f7ff fdc5 	bl	801be50 <_set>

	return TC_CRYPTO_SUCCESS;
 801c2c6:	2001      	movs	r0, #1
 801c2c8:	e002      	b.n	801c2d0 <tc_hmac_final+0x4c>
		return TC_CRYPTO_FAIL;
 801c2ca:	2000      	movs	r0, #0
}
 801c2cc:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 801c2ce:	2000      	movs	r0, #0
}
 801c2d0:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
 801c2d2:	2000      	movs	r0, #0
 801c2d4:	e7fc      	b.n	801c2d0 <tc_hmac_final+0x4c>

0801c2d6 <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
 801c2d6:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 801c2da:	b082      	sub	sp, #8
 801c2dc:	4604      	mov	r4, r0
 801c2de:	460d      	mov	r5, r1
 801c2e0:	4691      	mov	r9, r2
 801c2e2:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
 801c2e4:	2300      	movs	r3, #0
 801c2e6:	f88d 3007 	strb.w	r3, [sp, #7]
	const uint8_t separator1 = 0x01;
 801c2ea:	f04f 0b01 	mov.w	fp, #1
 801c2ee:	f88d b006 	strb.w	fp, [sp, #6]

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 801c2f2:	f100 08f0 	add.w	r8, r0, #240	; 0xf0
 801c2f6:	2220      	movs	r2, #32
 801c2f8:	4641      	mov	r1, r8
 801c2fa:	f7ff ff72 	bl	801c1e2 <tc_hmac_set_key>

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
 801c2fe:	4620      	mov	r0, r4
 801c300:	f7ff ffa9 	bl	801c256 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 801c304:	f504 7688 	add.w	r6, r4, #272	; 0x110
 801c308:	2220      	movs	r2, #32
 801c30a:	4631      	mov	r1, r6
 801c30c:	4620      	mov	r0, r4
 801c30e:	f7ff ffb1 	bl	801c274 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
 801c312:	465a      	mov	r2, fp
 801c314:	f10d 0107 	add.w	r1, sp, #7
 801c318:	4620      	mov	r0, r4
 801c31a:	f7ff ffab 	bl	801c274 <tc_hmac_update>

	if (data && datalen)
 801c31e:	b115      	cbz	r5, 801c326 <update+0x50>
 801c320:	f1b9 0f00 	cmp.w	r9, #0
 801c324:	d120      	bne.n	801c368 <update+0x92>
		(void)tc_hmac_update(&prng->h, data, datalen);
	if (additional_data && additional_datalen)
 801c326:	b10f      	cbz	r7, 801c32c <update+0x56>
 801c328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c32a:	bb1b      	cbnz	r3, 801c374 <update+0x9e>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
 801c32c:	4622      	mov	r2, r4
 801c32e:	2120      	movs	r1, #32
 801c330:	4640      	mov	r0, r8
 801c332:	f7ff ffa7 	bl	801c284 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 801c336:	2220      	movs	r2, #32
 801c338:	4641      	mov	r1, r8
 801c33a:	4620      	mov	r0, r4
 801c33c:	f7ff ff51 	bl	801c1e2 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
 801c340:	4620      	mov	r0, r4
 801c342:	f7ff ff88 	bl	801c256 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 801c346:	2220      	movs	r2, #32
 801c348:	4631      	mov	r1, r6
 801c34a:	4620      	mov	r0, r4
 801c34c:	f7ff ff92 	bl	801c274 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
 801c350:	4622      	mov	r2, r4
 801c352:	2120      	movs	r1, #32
 801c354:	4630      	mov	r0, r6
 801c356:	f7ff ff95 	bl	801c284 <tc_hmac_final>

	if (data == 0 || datalen == 0)
 801c35a:	b115      	cbz	r5, 801c362 <update+0x8c>
 801c35c:	f1b9 0f00 	cmp.w	r9, #0
 801c360:	d10e      	bne.n	801c380 <update+0xaa>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
}
 801c362:	b002      	add	sp, #8
 801c364:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		(void)tc_hmac_update(&prng->h, data, datalen);
 801c368:	464a      	mov	r2, r9
 801c36a:	4629      	mov	r1, r5
 801c36c:	4620      	mov	r0, r4
 801c36e:	f7ff ff81 	bl	801c274 <tc_hmac_update>
 801c372:	e7d8      	b.n	801c326 <update+0x50>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
 801c374:	461a      	mov	r2, r3
 801c376:	4639      	mov	r1, r7
 801c378:	4620      	mov	r0, r4
 801c37a:	f7ff ff7b 	bl	801c274 <tc_hmac_update>
 801c37e:	e7d5      	b.n	801c32c <update+0x56>
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 801c380:	2220      	movs	r2, #32
 801c382:	4641      	mov	r1, r8
 801c384:	4620      	mov	r0, r4
 801c386:	f7ff ff2c 	bl	801c1e2 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
 801c38a:	4620      	mov	r0, r4
 801c38c:	f7ff ff63 	bl	801c256 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 801c390:	2220      	movs	r2, #32
 801c392:	4631      	mov	r1, r6
 801c394:	4620      	mov	r0, r4
 801c396:	f7ff ff6d 	bl	801c274 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
 801c39a:	2201      	movs	r2, #1
 801c39c:	f10d 0106 	add.w	r1, sp, #6
 801c3a0:	4620      	mov	r0, r4
 801c3a2:	f7ff ff67 	bl	801c274 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
 801c3a6:	464a      	mov	r2, r9
 801c3a8:	4629      	mov	r1, r5
 801c3aa:	4620      	mov	r0, r4
 801c3ac:	f7ff ff62 	bl	801c274 <tc_hmac_update>
	if (additional_data && additional_datalen)
 801c3b0:	b10f      	cbz	r7, 801c3b6 <update+0xe0>
 801c3b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c3b4:	b9bb      	cbnz	r3, 801c3e6 <update+0x110>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
 801c3b6:	4622      	mov	r2, r4
 801c3b8:	2120      	movs	r1, #32
 801c3ba:	4640      	mov	r0, r8
 801c3bc:	f7ff ff62 	bl	801c284 <tc_hmac_final>
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 801c3c0:	2220      	movs	r2, #32
 801c3c2:	4641      	mov	r1, r8
 801c3c4:	4620      	mov	r0, r4
 801c3c6:	f7ff ff0c 	bl	801c1e2 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
 801c3ca:	4620      	mov	r0, r4
 801c3cc:	f7ff ff43 	bl	801c256 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 801c3d0:	2220      	movs	r2, #32
 801c3d2:	4631      	mov	r1, r6
 801c3d4:	4620      	mov	r0, r4
 801c3d6:	f7ff ff4d 	bl	801c274 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
 801c3da:	4622      	mov	r2, r4
 801c3dc:	2120      	movs	r1, #32
 801c3de:	4630      	mov	r0, r6
 801c3e0:	f7ff ff50 	bl	801c284 <tc_hmac_final>
 801c3e4:	e7bd      	b.n	801c362 <update+0x8c>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
 801c3e6:	461a      	mov	r2, r3
 801c3e8:	4639      	mov	r1, r7
 801c3ea:	4620      	mov	r0, r4
 801c3ec:	f7ff ff42 	bl	801c274 <tc_hmac_update>
 801c3f0:	e7e1      	b.n	801c3b6 <update+0xe0>

0801c3f2 <tc_hmac_prng_init>:
		      const uint8_t *personalization,
		      unsigned int plen)
{

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
 801c3f2:	b1e8      	cbz	r0, 801c430 <tc_hmac_prng_init+0x3e>
{
 801c3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c3f6:	b083      	sub	sp, #12
 801c3f8:	460c      	mov	r4, r1
 801c3fa:	4615      	mov	r5, r2
 801c3fc:	4606      	mov	r6, r0
	    personalization == (uint8_t *) 0 ||
 801c3fe:	b1c9      	cbz	r1, 801c434 <tc_hmac_prng_init+0x42>
	    plen > MAX_PLEN) {
		return TC_CRYPTO_FAIL;
	}

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
 801c400:	2220      	movs	r2, #32
 801c402:	2100      	movs	r1, #0
 801c404:	30f0      	adds	r0, #240	; 0xf0
 801c406:	f7ff fd23 	bl	801be50 <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
 801c40a:	2220      	movs	r2, #32
 801c40c:	2101      	movs	r1, #1
 801c40e:	f506 7088 	add.w	r0, r6, #272	; 0x110
 801c412:	f7ff fd1d 	bl	801be50 <_set>

	update(prng, personalization, plen, 0, 0);
 801c416:	2700      	movs	r7, #0
 801c418:	9700      	str	r7, [sp, #0]
 801c41a:	463b      	mov	r3, r7
 801c41c:	462a      	mov	r2, r5
 801c41e:	4621      	mov	r1, r4
 801c420:	4630      	mov	r0, r6
 801c422:	f7ff ff58 	bl	801c2d6 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;
 801c426:	f8c6 7130 	str.w	r7, [r6, #304]	; 0x130

	return TC_CRYPTO_SUCCESS;
 801c42a:	2001      	movs	r0, #1
}
 801c42c:	b003      	add	sp, #12
 801c42e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
 801c430:	2000      	movs	r0, #0
}
 801c432:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 801c434:	2000      	movs	r0, #0
 801c436:	e7f9      	b.n	801c42c <tc_hmac_prng_init+0x3a>

0801c438 <tc_hmac_prng_reseed>:
			const uint8_t *additional_input,
			unsigned int additionallen)
{

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
 801c438:	b1d0      	cbz	r0, 801c470 <tc_hmac_prng_reseed+0x38>
{
 801c43a:	b510      	push	{r4, lr}
 801c43c:	b082      	sub	sp, #8
 801c43e:	4604      	mov	r4, r0
	if (prng == (TCHmacPrng_t) 0 ||
 801c440:	b1c1      	cbz	r1, 801c474 <tc_hmac_prng_reseed+0x3c>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
 801c442:	2a1f      	cmp	r2, #31
 801c444:	d918      	bls.n	801c478 <tc_hmac_prng_reseed+0x40>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
 801c446:	b173      	cbz	r3, 801c466 <tc_hmac_prng_reseed+0x2e>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
 801c448:	9804      	ldr	r0, [sp, #16]
 801c44a:	b908      	cbnz	r0, 801c450 <tc_hmac_prng_reseed+0x18>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
 801c44c:	2000      	movs	r0, #0
 801c44e:	e008      	b.n	801c462 <tc_hmac_prng_reseed+0x2a>
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
 801c450:	9000      	str	r0, [sp, #0]
 801c452:	4620      	mov	r0, r4
 801c454:	f7ff ff3f 	bl	801c2d6 <update>
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
 801c458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c45c:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130

	return TC_CRYPTO_SUCCESS;
 801c460:	2001      	movs	r0, #1
}
 801c462:	b002      	add	sp, #8
 801c464:	bd10      	pop	{r4, pc}
		update(prng, seed, seedlen, 0, 0);
 801c466:	2300      	movs	r3, #0
 801c468:	9300      	str	r3, [sp, #0]
 801c46a:	f7ff ff34 	bl	801c2d6 <update>
 801c46e:	e7f3      	b.n	801c458 <tc_hmac_prng_reseed+0x20>
		return TC_CRYPTO_FAIL;
 801c470:	2000      	movs	r0, #0
}
 801c472:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 801c474:	2000      	movs	r0, #0
 801c476:	e7f4      	b.n	801c462 <tc_hmac_prng_reseed+0x2a>
 801c478:	2000      	movs	r0, #0
 801c47a:	e7f2      	b.n	801c462 <tc_hmac_prng_reseed+0x2a>

0801c47c <tc_hmac_prng_generate>:
int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
 801c47c:	2800      	cmp	r0, #0
 801c47e:	d045      	beq.n	801c50c <tc_hmac_prng_generate+0x90>
{
 801c480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c484:	b082      	sub	sp, #8
 801c486:	460f      	mov	r7, r1
 801c488:	4614      	mov	r4, r2
 801c48a:	4680      	mov	r8, r0
	if (out == (uint8_t *) 0 ||
 801c48c:	2a00      	cmp	r2, #0
 801c48e:	d03f      	beq.n	801c510 <tc_hmac_prng_generate+0x94>
	    prng == (TCHmacPrng_t) 0 ||
 801c490:	2900      	cmp	r1, #0
 801c492:	d03f      	beq.n	801c514 <tc_hmac_prng_generate+0x98>
	    outlen == 0 ||
 801c494:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 801c498:	d840      	bhi.n	801c51c <tc_hmac_prng_generate+0xa0>
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
 801c49a:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
 801c49e:	2b00      	cmp	r3, #0
 801c4a0:	d03e      	beq.n	801c520 <tc_hmac_prng_generate+0xa4>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
 801c4a2:	3b01      	subs	r3, #1
 801c4a4:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
 801c4a8:	e025      	b.n	801c4f6 <tc_hmac_prng_generate+0x7a>
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 801c4aa:	2220      	movs	r2, #32
 801c4ac:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
 801c4b0:	4620      	mov	r0, r4
 801c4b2:	f7ff fe96 	bl	801c1e2 <tc_hmac_set_key>

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
 801c4b6:	4620      	mov	r0, r4
 801c4b8:	f7ff fecd 	bl	801c256 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 801c4bc:	f504 7588 	add.w	r5, r4, #272	; 0x110
 801c4c0:	2220      	movs	r2, #32
 801c4c2:	4629      	mov	r1, r5
 801c4c4:	4620      	mov	r0, r4
 801c4c6:	f7ff fed5 	bl	801c274 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
 801c4ca:	4622      	mov	r2, r4
 801c4cc:	2120      	movs	r1, #32
 801c4ce:	4628      	mov	r0, r5
 801c4d0:	f7ff fed8 	bl	801c284 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
 801c4d4:	463e      	mov	r6, r7
 801c4d6:	2f20      	cmp	r7, #32
 801c4d8:	bf28      	it	cs
 801c4da:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
 801c4dc:	4633      	mov	r3, r6
 801c4de:	462a      	mov	r2, r5
 801c4e0:	4631      	mov	r1, r6
 801c4e2:	4640      	mov	r0, r8
 801c4e4:	f7ff fca7 	bl	801be36 <_copy>

		out += bufferlen;
 801c4e8:	44b0      	add	r8, r6
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
 801c4ea:	4639      	mov	r1, r7
 801c4ec:	2f20      	cmp	r7, #32
 801c4ee:	bf38      	it	cc
 801c4f0:	2120      	movcc	r1, #32
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
 801c4f2:	f1a1 0720 	sub.w	r7, r1, #32
	while (outlen != 0) {
 801c4f6:	2f00      	cmp	r7, #0
 801c4f8:	d1d7      	bne.n	801c4aa <tc_hmac_prng_generate+0x2e>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
 801c4fa:	2100      	movs	r1, #0
 801c4fc:	9100      	str	r1, [sp, #0]
 801c4fe:	460b      	mov	r3, r1
 801c500:	460a      	mov	r2, r1
 801c502:	4620      	mov	r0, r4
 801c504:	f7ff fee7 	bl	801c2d6 <update>

	return TC_CRYPTO_SUCCESS;
 801c508:	2001      	movs	r0, #1
 801c50a:	e004      	b.n	801c516 <tc_hmac_prng_generate+0x9a>
		return TC_CRYPTO_FAIL;
 801c50c:	2000      	movs	r0, #0
}
 801c50e:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 801c510:	2000      	movs	r0, #0
 801c512:	e000      	b.n	801c516 <tc_hmac_prng_generate+0x9a>
 801c514:	2000      	movs	r0, #0
}
 801c516:	b002      	add	sp, #8
 801c518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
 801c51c:	2000      	movs	r0, #0
 801c51e:	e7fa      	b.n	801c516 <tc_hmac_prng_generate+0x9a>
		return TC_HMAC_PRNG_RESEED_REQ;
 801c520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c524:	e7f7      	b.n	801c516 <tc_hmac_prng_generate+0x9a>

0801c526 <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
 801c526:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 801c528:	2100      	movs	r1, #0
 801c52a:	2001      	movs	r0, #1
 801c52c:	f000 f805 	bl	801c53a <z_arm_fatal_error>
}
 801c530:	bd08      	pop	{r3, pc}

0801c532 <z_arm_prepare_switch_to_main>:
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 801c532:	2300      	movs	r3, #0
 801c534:	eee1 3a10 	vmsr	fpscr, r3
}
 801c538:	4770      	bx	lr

0801c53a <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 801c53a:	b538      	push	{r3, r4, r5, lr}
 801c53c:	4604      	mov	r4, r0

	if (esf != NULL) {
 801c53e:	460d      	mov	r5, r1
 801c540:	b111      	cbz	r1, 801c548 <z_arm_fatal_error+0xe>
		esf_dump(esf);
 801c542:	4608      	mov	r0, r1
 801c544:	f7ee fe0e 	bl	800b164 <esf_dump>
	}
	z_fatal_error(reason, esf);
 801c548:	4629      	mov	r1, r5
 801c54a:	4620      	mov	r0, r4
 801c54c:	f7fb fbfe 	bl	8017d4c <z_fatal_error>
}
 801c550:	bd38      	pop	{r3, r4, r5, pc}

0801c552 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 801c552:	b508      	push	{r3, lr}
 801c554:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 801c556:	6800      	ldr	r0, [r0, #0]
 801c558:	f7ff ffef 	bl	801c53a <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
 801c55c:	bd08      	pop	{r3, pc}

0801c55e <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
 801c55e:	b508      	push	{r3, lr}
	handler();
 801c560:	f7ee fe50 	bl	800b204 <z_SysNmiOnReset>
	z_arm_int_exit();
 801c564:	f7ef fa38 	bl	800b9d8 <z_arm_exc_exit>
}
 801c568:	bd08      	pop	{r3, pc}

0801c56a <memory_fault_recoverable>:
}
 801c56a:	2000      	movs	r0, #0
 801c56c:	4770      	bx	lr

0801c56e <fault_handle>:
{
 801c56e:	b508      	push	{r3, lr}
	*recoverable = false;
 801c570:	2300      	movs	r3, #0
 801c572:	7013      	strb	r3, [r2, #0]
	switch (fault) {
 801c574:	1ecb      	subs	r3, r1, #3
 801c576:	2b09      	cmp	r3, #9
 801c578:	d819      	bhi.n	801c5ae <fault_handle+0x40>
 801c57a:	e8df f003 	tbb	[pc, r3]
 801c57e:	0905      	.short	0x0905
 801c580:	1818110d 	.word	0x1818110d
 801c584:	14181818 	.word	0x14181818
		reason = hard_fault(esf, recoverable);
 801c588:	4611      	mov	r1, r2
 801c58a:	f7ef f923 	bl	800b7d4 <hard_fault>
}
 801c58e:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
 801c590:	2100      	movs	r1, #0
 801c592:	f7ee ff79 	bl	800b488 <mem_manage_fault>
		break;
 801c596:	e7fa      	b.n	801c58e <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
 801c598:	2100      	movs	r1, #0
 801c59a:	f7ef f83b 	bl	800b614 <bus_fault>
		break;
 801c59e:	e7f6      	b.n	801c58e <fault_handle+0x20>
		reason = usage_fault(esf);
 801c5a0:	f7ee fe9e 	bl	800b2e0 <usage_fault>
		break;
 801c5a4:	e7f3      	b.n	801c58e <fault_handle+0x20>
		debug_monitor(esf);
 801c5a6:	f7ee ff55 	bl	800b454 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 801c5aa:	2000      	movs	r0, #0
		break;
 801c5ac:	e7ef      	b.n	801c58e <fault_handle+0x20>
		reserved_exception(esf, fault);
 801c5ae:	f7ef f985 	bl	800b8bc <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 801c5b2:	2000      	movs	r0, #0
	return reason;
 801c5b4:	e7eb      	b.n	801c58e <fault_handle+0x20>

0801c5b6 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
 801c5b6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5ba:	4606      	mov	r6, r0
 801c5bc:	460f      	mov	r7, r1
	register const char *s = nptr;
 801c5be:	4604      	mov	r4, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
 801c5c0:	4620      	mov	r0, r4
 801c5c2:	3401      	adds	r4, #1
 801c5c4:	7801      	ldrb	r1, [r0, #0]
 801c5c6:	460b      	mov	r3, r1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
 801c5c8:	2920      	cmp	r1, #32
 801c5ca:	d0f9      	beq.n	801c5c0 <strtol+0xa>
 801c5cc:	3909      	subs	r1, #9
 801c5ce:	2904      	cmp	r1, #4
 801c5d0:	d9f6      	bls.n	801c5c0 <strtol+0xa>
	} while (isspace(c));
	if (c == '-') {
 801c5d2:	2b2d      	cmp	r3, #45	; 0x2d
 801c5d4:	d019      	beq.n	801c60a <strtol+0x54>
		neg = 1;
		c = *s++;
	} else if (c == '+') {
 801c5d6:	2b2b      	cmp	r3, #43	; 0x2b
 801c5d8:	d01c      	beq.n	801c614 <strtol+0x5e>
	register int neg = 0, any, cutlim;
 801c5da:	f04f 0e00 	mov.w	lr, #0
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
 801c5de:	b10a      	cbz	r2, 801c5e4 <strtol+0x2e>
 801c5e0:	2a10      	cmp	r2, #16
 801c5e2:	d101      	bne.n	801c5e8 <strtol+0x32>
 801c5e4:	2b30      	cmp	r3, #48	; 0x30
 801c5e6:	d01a      	beq.n	801c61e <strtol+0x68>
		c = s[1];
		s += 2;
		base = 16;
	}

	if (base == 0) {
 801c5e8:	b912      	cbnz	r2, 801c5f0 <strtol+0x3a>
		base = c == '0' ? 8 : 10;
 801c5ea:	2b30      	cmp	r3, #48	; 0x30
 801c5ec:	d020      	beq.n	801c630 <strtol+0x7a>
 801c5ee:	220a      	movs	r2, #10
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
 801c5f0:	f1be 0f00 	cmp.w	lr, #0
 801c5f4:	d01e      	beq.n	801c634 <strtol+0x7e>
 801c5f6:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
 801c5fa:	4694      	mov	ip, r2
 801c5fc:	fbb8 f1f2 	udiv	r1, r8, r2
 801c600:	fb02 8911 	mls	r9, r2, r1, r8
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
 801c604:	2500      	movs	r5, #0
 801c606:	4628      	mov	r0, r5
 801c608:	e034      	b.n	801c674 <strtol+0xbe>
		c = *s++;
 801c60a:	7823      	ldrb	r3, [r4, #0]
 801c60c:	1c84      	adds	r4, r0, #2
		neg = 1;
 801c60e:	f04f 0e01 	mov.w	lr, #1
 801c612:	e7e4      	b.n	801c5de <strtol+0x28>
		c = *s++;
 801c614:	7823      	ldrb	r3, [r4, #0]
 801c616:	1c84      	adds	r4, r0, #2
	register int neg = 0, any, cutlim;
 801c618:	f04f 0e00 	mov.w	lr, #0
 801c61c:	e7df      	b.n	801c5de <strtol+0x28>
	    c == '0' && (*s == 'x' || *s == 'X')) {
 801c61e:	7821      	ldrb	r1, [r4, #0]
 801c620:	2978      	cmp	r1, #120	; 0x78
 801c622:	d001      	beq.n	801c628 <strtol+0x72>
 801c624:	2958      	cmp	r1, #88	; 0x58
 801c626:	d1df      	bne.n	801c5e8 <strtol+0x32>
		c = s[1];
 801c628:	7863      	ldrb	r3, [r4, #1]
		s += 2;
 801c62a:	3402      	adds	r4, #2
		base = 16;
 801c62c:	2210      	movs	r2, #16
 801c62e:	e7db      	b.n	801c5e8 <strtol+0x32>
		base = c == '0' ? 8 : 10;
 801c630:	2208      	movs	r2, #8
 801c632:	e7dd      	b.n	801c5f0 <strtol+0x3a>
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
 801c634:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 801c638:	e7df      	b.n	801c5fa <strtol+0x44>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
 801c63a:	f043 0b20 	orr.w	fp, r3, #32
 801c63e:	f1ab 0b61 	sub.w	fp, fp, #97	; 0x61
		if (isdigit(c)) {
			c -= '0';
		} else if (isalpha(c)) {
 801c642:	f1bb 0f19 	cmp.w	fp, #25
 801c646:	d829      	bhi.n	801c69c <strtol+0xe6>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 801c648:	f1a3 0a41 	sub.w	sl, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
 801c64c:	f1ba 0f19 	cmp.w	sl, #25
 801c650:	d804      	bhi.n	801c65c <strtol+0xa6>
 801c652:	f04f 0a37 	mov.w	sl, #55	; 0x37
 801c656:	eba3 030a 	sub.w	r3, r3, sl
 801c65a:	e011      	b.n	801c680 <strtol+0xca>
 801c65c:	f04f 0a57 	mov.w	sl, #87	; 0x57
 801c660:	e7f9      	b.n	801c656 <strtol+0xa0>
			break;
		}
		if (c >= base) {
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
 801c662:	454b      	cmp	r3, r9
 801c664:	dd13      	ble.n	801c68e <strtol+0xd8>
			any = -1;
 801c666:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801c66a:	e001      	b.n	801c670 <strtol+0xba>
 801c66c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	for (acc = 0, any = 0;; c = *s++) {
 801c670:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 801c674:	f1a3 0b30 	sub.w	fp, r3, #48	; 0x30
		if (isdigit(c)) {
 801c678:	f1bb 0f09 	cmp.w	fp, #9
 801c67c:	d8dd      	bhi.n	801c63a <strtol+0x84>
			c -= '0';
 801c67e:	465b      	mov	r3, fp
		if (c >= base) {
 801c680:	429a      	cmp	r2, r3
 801c682:	dd0b      	ble.n	801c69c <strtol+0xe6>
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
 801c684:	2d00      	cmp	r5, #0
 801c686:	dbf1      	blt.n	801c66c <strtol+0xb6>
 801c688:	4288      	cmp	r0, r1
 801c68a:	d804      	bhi.n	801c696 <strtol+0xe0>
 801c68c:	d0e9      	beq.n	801c662 <strtol+0xac>
		} else {
			any = 1;
			acc *= base;
			acc += c;
 801c68e:	fb00 300c 	mla	r0, r0, ip, r3
			any = 1;
 801c692:	2501      	movs	r5, #1
 801c694:	e7ec      	b.n	801c670 <strtol+0xba>
			any = -1;
 801c696:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801c69a:	e7e9      	b.n	801c670 <strtol+0xba>
		}
	}

	if (any < 0) {
 801c69c:	2d00      	cmp	r5, #0
 801c69e:	db09      	blt.n	801c6b4 <strtol+0xfe>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
	} else if (neg) {
 801c6a0:	f1be 0f00 	cmp.w	lr, #0
 801c6a4:	d000      	beq.n	801c6a8 <strtol+0xf2>
		acc = -acc;
 801c6a6:	4240      	negs	r0, r0
	}

	if (endptr != NULL) {
 801c6a8:	b117      	cbz	r7, 801c6b0 <strtol+0xfa>
		*endptr = (char *)(any ? s - 1 : nptr);
 801c6aa:	b105      	cbz	r5, 801c6ae <strtol+0xf8>
 801c6ac:	1e66      	subs	r6, r4, #1
 801c6ae:	603e      	str	r6, [r7, #0]
	}
	return acc;
}
 801c6b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
 801c6b4:	f7fb faf6 	bl	8017ca4 <z_impl_z_errno>
		errno = ERANGE;
 801c6b8:	2326      	movs	r3, #38	; 0x26
 801c6ba:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
 801c6bc:	4640      	mov	r0, r8
 801c6be:	e7f3      	b.n	801c6a8 <strtol+0xf2>

0801c6c0 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
 801c6c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c6c4:	4607      	mov	r7, r0
 801c6c6:	4688      	mov	r8, r1
	register const char *s = nptr;
 801c6c8:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
 801c6ca:	4620      	mov	r0, r4
 801c6cc:	3401      	adds	r4, #1
 801c6ce:	7801      	ldrb	r1, [r0, #0]
 801c6d0:	460b      	mov	r3, r1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
 801c6d2:	2920      	cmp	r1, #32
 801c6d4:	d0f9      	beq.n	801c6ca <strtoul+0xa>
 801c6d6:	3909      	subs	r1, #9
 801c6d8:	2904      	cmp	r1, #4
 801c6da:	d9f6      	bls.n	801c6ca <strtoul+0xa>
	} while (isspace(c));
	if (c == '-') {
 801c6dc:	2b2d      	cmp	r3, #45	; 0x2d
 801c6de:	d018      	beq.n	801c712 <strtoul+0x52>
		neg = 1;
		c = *s++;
	} else if (c == '+') {
 801c6e0:	2b2b      	cmp	r3, #43	; 0x2b
 801c6e2:	d01b      	beq.n	801c71c <strtoul+0x5c>
	register int neg = 0, any, cutlim;
 801c6e4:	f04f 0900 	mov.w	r9, #0
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
 801c6e8:	b10a      	cbz	r2, 801c6ee <strtoul+0x2e>
 801c6ea:	2a10      	cmp	r2, #16
 801c6ec:	d101      	bne.n	801c6f2 <strtoul+0x32>
 801c6ee:	2b30      	cmp	r3, #48	; 0x30
 801c6f0:	d019      	beq.n	801c726 <strtoul+0x66>
		c = s[1];
		s += 2;
		base = 16;
	}

	if (base == 0) {
 801c6f2:	b912      	cbnz	r2, 801c6fa <strtoul+0x3a>
		base = c == '0' ? 8 : 10;
 801c6f4:	2b30      	cmp	r3, #48	; 0x30
 801c6f6:	d01f      	beq.n	801c738 <strtoul+0x78>
 801c6f8:	220a      	movs	r2, #10
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
 801c6fa:	4696      	mov	lr, r2
 801c6fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801c700:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
 801c704:	fb02 fc01 	mul.w	ip, r2, r1
 801c708:	ea6f 0c0c 	mvn.w	ip, ip
	for (acc = 0, any = 0;; c = *s++) {
 801c70c:	2600      	movs	r6, #0
 801c70e:	4630      	mov	r0, r6
 801c710:	e02d      	b.n	801c76e <strtoul+0xae>
		c = *s++;
 801c712:	7823      	ldrb	r3, [r4, #0]
 801c714:	1c84      	adds	r4, r0, #2
		neg = 1;
 801c716:	f04f 0901 	mov.w	r9, #1
 801c71a:	e7e5      	b.n	801c6e8 <strtoul+0x28>
		c = *s++;
 801c71c:	7823      	ldrb	r3, [r4, #0]
 801c71e:	1c84      	adds	r4, r0, #2
	register int neg = 0, any, cutlim;
 801c720:	f04f 0900 	mov.w	r9, #0
 801c724:	e7e0      	b.n	801c6e8 <strtoul+0x28>
	    c == '0' && (*s == 'x' || *s == 'X')) {
 801c726:	7821      	ldrb	r1, [r4, #0]
 801c728:	2978      	cmp	r1, #120	; 0x78
 801c72a:	d001      	beq.n	801c730 <strtoul+0x70>
 801c72c:	2958      	cmp	r1, #88	; 0x58
 801c72e:	d1e0      	bne.n	801c6f2 <strtoul+0x32>
		c = s[1];
 801c730:	7863      	ldrb	r3, [r4, #1]
		s += 2;
 801c732:	3402      	adds	r4, #2
		base = 16;
 801c734:	2210      	movs	r2, #16
 801c736:	e7dc      	b.n	801c6f2 <strtoul+0x32>
		base = c == '0' ? 8 : 10;
 801c738:	2208      	movs	r2, #8
 801c73a:	e7de      	b.n	801c6fa <strtoul+0x3a>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
 801c73c:	f043 0a20 	orr.w	sl, r3, #32
 801c740:	f1aa 0a61 	sub.w	sl, sl, #97	; 0x61
		if (isdigit(c)) {
			c -= '0';
		} else if (isalpha(c)) {
 801c744:	f1ba 0f19 	cmp.w	sl, #25
 801c748:	d825      	bhi.n	801c796 <strtoul+0xd6>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 801c74a:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
 801c74e:	2d19      	cmp	r5, #25
 801c750:	d802      	bhi.n	801c758 <strtoul+0x98>
 801c752:	2537      	movs	r5, #55	; 0x37
 801c754:	1b5b      	subs	r3, r3, r5
 801c756:	e010      	b.n	801c77a <strtoul+0xba>
 801c758:	2557      	movs	r5, #87	; 0x57
 801c75a:	e7fb      	b.n	801c754 <strtoul+0x94>
			break;
		}
		if (c >= base) {
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
 801c75c:	4563      	cmp	r3, ip
 801c75e:	dd13      	ble.n	801c788 <strtoul+0xc8>
			any = -1;
 801c760:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801c764:	e001      	b.n	801c76a <strtoul+0xaa>
 801c766:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (acc = 0, any = 0;; c = *s++) {
 801c76a:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 801c76e:	f1a3 0a30 	sub.w	sl, r3, #48	; 0x30
		if (isdigit(c)) {
 801c772:	f1ba 0f09 	cmp.w	sl, #9
 801c776:	d8e1      	bhi.n	801c73c <strtoul+0x7c>
			c -= '0';
 801c778:	4653      	mov	r3, sl
		if (c >= base) {
 801c77a:	429a      	cmp	r2, r3
 801c77c:	dd0b      	ble.n	801c796 <strtoul+0xd6>
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
 801c77e:	2e00      	cmp	r6, #0
 801c780:	dbf1      	blt.n	801c766 <strtoul+0xa6>
 801c782:	4288      	cmp	r0, r1
 801c784:	d804      	bhi.n	801c790 <strtoul+0xd0>
 801c786:	d0e9      	beq.n	801c75c <strtoul+0x9c>
		} else {
			any = 1;
			acc *= base;
			acc += c;
 801c788:	fb00 300e 	mla	r0, r0, lr, r3
			any = 1;
 801c78c:	2601      	movs	r6, #1
 801c78e:	e7ec      	b.n	801c76a <strtoul+0xaa>
			any = -1;
 801c790:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801c794:	e7e9      	b.n	801c76a <strtoul+0xaa>
		}
	}
	if (any < 0) {
 801c796:	2e00      	cmp	r6, #0
 801c798:	db0c      	blt.n	801c7b4 <strtoul+0xf4>
		acc = ULONG_MAX;
		errno = ERANGE;
	} else if (neg) {
 801c79a:	f1b9 0f00 	cmp.w	r9, #0
 801c79e:	d000      	beq.n	801c7a2 <strtoul+0xe2>
		acc = -acc;
 801c7a0:	4240      	negs	r0, r0
	}
	if (endptr != NULL) {
 801c7a2:	f1b8 0f00 	cmp.w	r8, #0
 801c7a6:	d003      	beq.n	801c7b0 <strtoul+0xf0>
		*endptr = (char *)(any ? s - 1 : nptr);
 801c7a8:	b106      	cbz	r6, 801c7ac <strtoul+0xec>
 801c7aa:	1e67      	subs	r7, r4, #1
 801c7ac:	f8c8 7000 	str.w	r7, [r8]
	}
	return acc;
}
 801c7b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c7b4:	f7fb fa76 	bl	8017ca4 <z_impl_z_errno>
		errno = ERANGE;
 801c7b8:	2326      	movs	r3, #38	; 0x26
 801c7ba:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
 801c7bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c7c0:	e7ef      	b.n	801c7a2 <strtoul+0xe2>

0801c7c2 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
 801c7c2:	4602      	mov	r2, r0
 801c7c4:	780b      	ldrb	r3, [r1, #0]
 801c7c6:	b11b      	cbz	r3, 801c7d0 <strcpy+0xe>
		*d = *s;
 801c7c8:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
 801c7cc:	3101      	adds	r1, #1
 801c7ce:	e7f9      	b.n	801c7c4 <strcpy+0x2>
	}

	*d = '\0';
 801c7d0:	7013      	strb	r3, [r2, #0]

	return dest;
}
 801c7d2:	4770      	bx	lr

0801c7d4 <strncpy>:

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
 801c7d4:	4603      	mov	r3, r0
 801c7d6:	b1aa      	cbz	r2, 801c804 <strncpy+0x30>
{
 801c7d8:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
 801c7da:	780c      	ldrb	r4, [r1, #0]
 801c7dc:	b12c      	cbz	r4, 801c7ea <strncpy+0x16>
		*d = *s;
 801c7de:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
 801c7e2:	3101      	adds	r1, #1
		d++;
		n--;
 801c7e4:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
 801c7e6:	2a00      	cmp	r2, #0
 801c7e8:	d1f7      	bne.n	801c7da <strncpy+0x6>
	}

	while (n > 0) {
 801c7ea:	b122      	cbz	r2, 801c7f6 <strncpy+0x22>
		*d = '\0';
 801c7ec:	2100      	movs	r1, #0
 801c7ee:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
 801c7f2:	3a01      	subs	r2, #1
 801c7f4:	e7f9      	b.n	801c7ea <strncpy+0x16>
	}

	return dest;
}
 801c7f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c7fa:	4770      	bx	lr
		*d = '\0';
 801c7fc:	2100      	movs	r1, #0
 801c7fe:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 801c802:	3a01      	subs	r2, #1
	while (n > 0) {
 801c804:	2a00      	cmp	r2, #0
 801c806:	d1f9      	bne.n	801c7fc <strncpy+0x28>
 801c808:	4770      	bx	lr

0801c80a <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
 801c80a:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
 801c80c:	7803      	ldrb	r3, [r0, #0]
 801c80e:	428b      	cmp	r3, r1
 801c810:	d002      	beq.n	801c818 <strchr+0xe>
 801c812:	b10b      	cbz	r3, 801c818 <strchr+0xe>
		s++;
 801c814:	3001      	adds	r0, #1
 801c816:	e7f9      	b.n	801c80c <strchr+0x2>
	}

	return (*s == tmp) ? (char *) s : NULL;
 801c818:	428b      	cmp	r3, r1
 801c81a:	d100      	bne.n	801c81e <strchr+0x14>
}
 801c81c:	4770      	bx	lr
	return (*s == tmp) ? (char *) s : NULL;
 801c81e:	2000      	movs	r0, #0
 801c820:	e7fc      	b.n	801c81c <strchr+0x12>

0801c822 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 801c822:	4603      	mov	r3, r0
	size_t n = 0;
 801c824:	2000      	movs	r0, #0

	while (*s != '\0') {
 801c826:	781a      	ldrb	r2, [r3, #0]
 801c828:	b112      	cbz	r2, 801c830 <strlen+0xe>
		s++;
 801c82a:	3301      	adds	r3, #1
		n++;
 801c82c:	3001      	adds	r0, #1
 801c82e:	e7fa      	b.n	801c826 <strlen+0x4>
	}

	return n;
}
 801c830:	4770      	bx	lr

0801c832 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
 801c832:	7803      	ldrb	r3, [r0, #0]
 801c834:	780a      	ldrb	r2, [r1, #0]
 801c836:	4293      	cmp	r3, r2
 801c838:	d103      	bne.n	801c842 <strcmp+0x10>
 801c83a:	b113      	cbz	r3, 801c842 <strcmp+0x10>
		s1++;
 801c83c:	3001      	adds	r0, #1
		s2++;
 801c83e:	3101      	adds	r1, #1
 801c840:	e7f7      	b.n	801c832 <strcmp>
	}

	return *s1 - *s2;
}
 801c842:	1a98      	subs	r0, r3, r2
 801c844:	4770      	bx	lr

0801c846 <strncmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
 801c846:	b19a      	cbz	r2, 801c870 <strncmp+0x2a>
{
 801c848:	b410      	push	{r4}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
 801c84a:	7803      	ldrb	r3, [r0, #0]
 801c84c:	780c      	ldrb	r4, [r1, #0]
 801c84e:	42a3      	cmp	r3, r4
 801c850:	d105      	bne.n	801c85e <strncmp+0x18>
 801c852:	b123      	cbz	r3, 801c85e <strncmp+0x18>
		s1++;
 801c854:	3001      	adds	r0, #1
		s2++;
 801c856:	3101      	adds	r1, #1
		n--;
 801c858:	3a01      	subs	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
 801c85a:	2a00      	cmp	r2, #0
 801c85c:	d1f5      	bne.n	801c84a <strncmp+0x4>
	}

	return (n == 0) ? 0 : (*s1 - *s2);
 801c85e:	b12a      	cbz	r2, 801c86c <strncmp+0x26>
 801c860:	7800      	ldrb	r0, [r0, #0]
 801c862:	780b      	ldrb	r3, [r1, #0]
 801c864:	1ac0      	subs	r0, r0, r3
}
 801c866:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c86a:	4770      	bx	lr
	return (n == 0) ? 0 : (*s1 - *s2);
 801c86c:	2000      	movs	r0, #0
 801c86e:	e7fa      	b.n	801c866 <strncmp+0x20>
 801c870:	b11a      	cbz	r2, 801c87a <strncmp+0x34>
 801c872:	7800      	ldrb	r0, [r0, #0]
 801c874:	780b      	ldrb	r3, [r1, #0]
 801c876:	1ac0      	subs	r0, r0, r3
 801c878:	4770      	bx	lr
 801c87a:	2000      	movs	r0, #0
}
 801c87c:	4770      	bx	lr

0801c87e <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
 801c87e:	b182      	cbz	r2, 801c8a2 <memcmp+0x24>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
 801c880:	1e53      	subs	r3, r2, #1
 801c882:	d010      	beq.n	801c8a6 <memcmp+0x28>
{
 801c884:	b410      	push	{r4}
	while ((--n > 0) && (*c1 == *c2)) {
 801c886:	7804      	ldrb	r4, [r0, #0]
 801c888:	780a      	ldrb	r2, [r1, #0]
 801c88a:	4294      	cmp	r4, r2
 801c88c:	d103      	bne.n	801c896 <memcmp+0x18>
		c1++;
 801c88e:	3001      	adds	r0, #1
		c2++;
 801c890:	3101      	adds	r1, #1
	while ((--n > 0) && (*c1 == *c2)) {
 801c892:	3b01      	subs	r3, #1
 801c894:	d1f7      	bne.n	801c886 <memcmp+0x8>
	}

	return *c1 - *c2;
 801c896:	7800      	ldrb	r0, [r0, #0]
 801c898:	780b      	ldrb	r3, [r1, #0]
 801c89a:	1ac0      	subs	r0, r0, r3
}
 801c89c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c8a0:	4770      	bx	lr
		return 0;
 801c8a2:	2000      	movs	r0, #0
 801c8a4:	4770      	bx	lr
	return *c1 - *c2;
 801c8a6:	7800      	ldrb	r0, [r0, #0]
 801c8a8:	780b      	ldrb	r3, [r1, #0]
 801c8aa:	1ac0      	subs	r0, r0, r3
}
 801c8ac:	4770      	bx	lr

0801c8ae <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
 801c8ae:	b410      	push	{r4}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
 801c8b0:	ea80 0301 	eor.w	r3, r0, r1
 801c8b4:	f013 0f03 	tst.w	r3, #3
 801c8b8:	d001      	beq.n	801c8be <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
 801c8ba:	4603      	mov	r3, r0
 801c8bc:	e017      	b.n	801c8ee <memcpy+0x40>
 801c8be:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
 801c8c0:	f013 0f03 	tst.w	r3, #3
 801c8c4:	d00b      	beq.n	801c8de <memcpy+0x30>
			if (n == 0) {
 801c8c6:	b1a2      	cbz	r2, 801c8f2 <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
 801c8c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c8cc:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
 801c8d0:	3a01      	subs	r2, #1
 801c8d2:	e7f5      	b.n	801c8c0 <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
 801c8d4:	f851 4b04 	ldr.w	r4, [r1], #4
 801c8d8:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
 801c8dc:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
 801c8de:	2a03      	cmp	r2, #3
 801c8e0:	d8f8      	bhi.n	801c8d4 <memcpy+0x26>
 801c8e2:	e004      	b.n	801c8ee <memcpy+0x40>
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
 801c8e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c8e8:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
 801c8ec:	3a01      	subs	r2, #1
	while (n > 0) {
 801c8ee:	2a00      	cmp	r2, #0
 801c8f0:	d1f8      	bne.n	801c8e4 <memcpy+0x36>
	}

	return d;
}
 801c8f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c8f6:	4770      	bx	lr

0801c8f8 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
 801c8f8:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
 801c8fa:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
 801c8fc:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
 801c8fe:	f013 0f03 	tst.w	r3, #3
 801c902:	d004      	beq.n	801c90e <memset+0x16>
		if (n == 0) {
 801c904:	b19a      	cbz	r2, 801c92e <memset+0x36>
			return buf;
		}
		*(d_byte++) = c_byte;
 801c906:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
 801c90a:	3a01      	subs	r2, #1
 801c90c:	e7f7      	b.n	801c8fe <memset+0x6>
	};

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
 801c90e:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
 801c910:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
 801c914:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
 801c918:	2a03      	cmp	r2, #3
 801c91a:	d906      	bls.n	801c92a <memset+0x32>
		*(d_word++) = c_word;
 801c91c:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
 801c920:	3a04      	subs	r2, #4
 801c922:	e7f9      	b.n	801c918 <memset+0x20>
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
		*(d_byte++) = c_byte;
 801c924:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
 801c928:	3a01      	subs	r2, #1
	while (n > 0) {
 801c92a:	2a00      	cmp	r2, #0
 801c92c:	d1fa      	bne.n	801c924 <memset+0x2c>
	}

	return buf;
}
 801c92e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c932:	4770      	bx	lr

0801c934 <_stdout_hook_default>:
}
 801c934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c938:	4770      	bx	lr

0801c93a <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
 801c93a:	684b      	ldr	r3, [r1, #4]
 801c93c:	2b01      	cmp	r3, #1
 801c93e:	dd07      	ble.n	801c950 <sprintf_out+0x16>
		*(p->ptr) = c;
 801c940:	680b      	ldr	r3, [r1, #0]
 801c942:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
 801c944:	680b      	ldr	r3, [r1, #0]
 801c946:	3301      	adds	r3, #1
 801c948:	600b      	str	r3, [r1, #0]
		p->len -= 1;
 801c94a:	684b      	ldr	r3, [r1, #4]
 801c94c:	3b01      	subs	r3, #1
 801c94e:	604b      	str	r3, [r1, #4]
}
 801c950:	2000      	movs	r0, #0
 801c952:	4770      	bx	lr

0801c954 <internal_encrypt_le>:
}
#endif /* defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY) */

static int internal_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
			       uint8_t enc_data[16])
{
 801c954:	b508      	push	{r3, lr}
#if defined(CONFIG_BT_CTLR) && defined(CONFIG_BT_HOST_CRYPTO) && \
    defined(CONFIG_BT_CTLR_LE_ENC)
	ecb_encrypt(key, plaintext, enc_data, NULL);
	return 0;
#else
	return bt_encrypt_le(key, plaintext, enc_data);
 801c956:	f000 fcc2 	bl	801d2de <bt_encrypt_le>
#endif
}
 801c95a:	bd08      	pop	{r3, pc}

0801c95c <ah>:

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
 801c95c:	b530      	push	{r4, r5, lr}
 801c95e:	b085      	sub	sp, #20
 801c960:	4604      	mov	r4, r0
 801c962:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
 801c964:	2203      	movs	r2, #3
 801c966:	4668      	mov	r0, sp
 801c968:	f7ff ffa1 	bl	801c8ae <memcpy>
	(void)memset(res + 3, 0, 13);
 801c96c:	220d      	movs	r2, #13
 801c96e:	2100      	movs	r1, #0
 801c970:	f10d 0003 	add.w	r0, sp, #3
 801c974:	f7ff ffc0 	bl	801c8f8 <memset>

	err = internal_encrypt_le(irk, res, res);
 801c978:	466a      	mov	r2, sp
 801c97a:	4669      	mov	r1, sp
 801c97c:	4620      	mov	r0, r4
 801c97e:	f7ff ffe9 	bl	801c954 <internal_encrypt_le>
	if (err) {
 801c982:	4604      	mov	r4, r0
 801c984:	b110      	cbz	r0, 801c98c <ah+0x30>
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
 801c986:	4620      	mov	r0, r4
 801c988:	b005      	add	sp, #20
 801c98a:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
 801c98c:	2203      	movs	r2, #3
 801c98e:	4669      	mov	r1, sp
 801c990:	4628      	mov	r0, r5
 801c992:	f7ff ff8c 	bl	801c8ae <memcpy>
	return 0;
 801c996:	e7f6      	b.n	801c986 <ah+0x2a>

0801c998 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
 801c998:	b510      	push	{r4, lr}
 801c99a:	b082      	sub	sp, #8
 801c99c:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
 801c99e:	aa01      	add	r2, sp, #4
 801c9a0:	3103      	adds	r1, #3
 801c9a2:	f7ff ffdb 	bl	801c95c <ah>
	if (err) {
 801c9a6:	b110      	cbz	r0, 801c9ae <bt_rpa_irk_matches+0x16>
		return false;
 801c9a8:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
 801c9aa:	b002      	add	sp, #8
 801c9ac:	bd10      	pop	{r4, pc}
	return !memcmp(addr->val, hash, 3);
 801c9ae:	2203      	movs	r2, #3
 801c9b0:	a901      	add	r1, sp, #4
 801c9b2:	4620      	mov	r0, r4
 801c9b4:	f7ff ff63 	bl	801c87e <memcmp>
 801c9b8:	fab0 f080 	clz	r0, r0
 801c9bc:	0940      	lsrs	r0, r0, #5
 801c9be:	e7f4      	b.n	801c9aa <bt_rpa_irk_matches+0x12>

0801c9c0 <bt_settings_decode_key>:
{
 801c9c0:	b570      	push	{r4, r5, r6, lr}
 801c9c2:	4605      	mov	r5, r0
 801c9c4:	460e      	mov	r6, r1
	if (settings_name_next(key, NULL) != 13) {
 801c9c6:	2100      	movs	r1, #0
 801c9c8:	f7fe ffe3 	bl	801b992 <settings_name_next>
 801c9cc:	280d      	cmp	r0, #13
 801c9ce:	d11b      	bne.n	801ca08 <bt_settings_decode_key+0x48>
	if (key[12] == '0') {
 801c9d0:	7b2b      	ldrb	r3, [r5, #12]
 801c9d2:	2b30      	cmp	r3, #48	; 0x30
 801c9d4:	d013      	beq.n	801c9fe <bt_settings_decode_key+0x3e>
	} else if (key[12] == '1') {
 801c9d6:	2b31      	cmp	r3, #49	; 0x31
 801c9d8:	d119      	bne.n	801ca0e <bt_settings_decode_key+0x4e>
		addr->type = BT_ADDR_LE_RANDOM;
 801c9da:	2301      	movs	r3, #1
 801c9dc:	7033      	strb	r3, [r6, #0]
{
 801c9de:	2400      	movs	r4, #0
	for (uint8_t i = 0; i < 6; i++) {
 801c9e0:	2c05      	cmp	r4, #5
 801c9e2:	d80f      	bhi.n	801ca04 <bt_settings_decode_key+0x44>
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
 801c9e4:	f1c4 0205 	rsb	r2, r4, #5
 801c9e8:	4432      	add	r2, r6
 801c9ea:	2301      	movs	r3, #1
 801c9ec:	441a      	add	r2, r3
 801c9ee:	2102      	movs	r1, #2
 801c9f0:	eb05 0044 	add.w	r0, r5, r4, lsl #1
 801c9f4:	f7fd f8ef 	bl	8019bd6 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
 801c9f8:	3401      	adds	r4, #1
 801c9fa:	b2e4      	uxtb	r4, r4
 801c9fc:	e7f0      	b.n	801c9e0 <bt_settings_decode_key+0x20>
		addr->type = BT_ADDR_LE_PUBLIC;
 801c9fe:	2300      	movs	r3, #0
 801ca00:	7033      	strb	r3, [r6, #0]
 801ca02:	e7ec      	b.n	801c9de <bt_settings_decode_key+0x1e>
	return 0;
 801ca04:	2000      	movs	r0, #0
}
 801ca06:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
 801ca08:	f06f 0015 	mvn.w	r0, #21
 801ca0c:	e7fb      	b.n	801ca06 <bt_settings_decode_key+0x46>
		return -EINVAL;
 801ca0e:	f06f 0015 	mvn.w	r0, #21
 801ca12:	e7f8      	b.n	801ca06 <bt_settings_decode_key+0x46>

0801ca14 <uuid128_cmp>:
{
 801ca14:	b510      	push	{r4, lr}
 801ca16:	b08a      	sub	sp, #40	; 0x28
 801ca18:	460c      	mov	r4, r1
	uuid_to_uuid128(u1, &uuid1);
 801ca1a:	a905      	add	r1, sp, #20
 801ca1c:	f7ef fa7c 	bl	800bf18 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
 801ca20:	4669      	mov	r1, sp
 801ca22:	4620      	mov	r0, r4
 801ca24:	f7ef fa78 	bl	800bf18 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
 801ca28:	2210      	movs	r2, #16
 801ca2a:	f10d 0101 	add.w	r1, sp, #1
 801ca2e:	f10d 0015 	add.w	r0, sp, #21
 801ca32:	f7ff ff24 	bl	801c87e <memcmp>
}
 801ca36:	b00a      	add	sp, #40	; 0x28
 801ca38:	bd10      	pop	{r4, pc}

0801ca3a <bt_uuid_cmp>:
{
 801ca3a:	b508      	push	{r3, lr}
	if (u1->type != u2->type) {
 801ca3c:	7803      	ldrb	r3, [r0, #0]
 801ca3e:	780a      	ldrb	r2, [r1, #0]
 801ca40:	4293      	cmp	r3, r2
 801ca42:	d107      	bne.n	801ca54 <bt_uuid_cmp+0x1a>
	switch (u1->type) {
 801ca44:	2b01      	cmp	r3, #1
 801ca46:	d00c      	beq.n	801ca62 <bt_uuid_cmp+0x28>
 801ca48:	2b02      	cmp	r3, #2
 801ca4a:	d00e      	beq.n	801ca6a <bt_uuid_cmp+0x30>
 801ca4c:	b12b      	cbz	r3, 801ca5a <bt_uuid_cmp+0x20>
 801ca4e:	f06f 0015 	mvn.w	r0, #21
}
 801ca52:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
 801ca54:	f7ff ffde 	bl	801ca14 <uuid128_cmp>
 801ca58:	e7fb      	b.n	801ca52 <bt_uuid_cmp+0x18>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
 801ca5a:	8840      	ldrh	r0, [r0, #2]
 801ca5c:	884b      	ldrh	r3, [r1, #2]
 801ca5e:	1ac0      	subs	r0, r0, r3
 801ca60:	e7f7      	b.n	801ca52 <bt_uuid_cmp+0x18>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
 801ca62:	6840      	ldr	r0, [r0, #4]
 801ca64:	684b      	ldr	r3, [r1, #4]
 801ca66:	1ac0      	subs	r0, r0, r3
 801ca68:	e7f3      	b.n	801ca52 <bt_uuid_cmp+0x18>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
 801ca6a:	2210      	movs	r2, #16
 801ca6c:	3101      	adds	r1, #1
 801ca6e:	3001      	adds	r0, #1
 801ca70:	f7ff ff05 	bl	801c87e <memcmp>
 801ca74:	e7ed      	b.n	801ca52 <bt_uuid_cmp+0x18>

0801ca76 <bt_uuid_create>:
{
 801ca76:	b538      	push	{r3, r4, r5, lr}
	switch (data_len) {
 801ca78:	2a04      	cmp	r2, #4
 801ca7a:	d00e      	beq.n	801ca9a <bt_uuid_create+0x24>
 801ca7c:	2a10      	cmp	r2, #16
 801ca7e:	d01b      	beq.n	801cab8 <bt_uuid_create+0x42>
 801ca80:	2a02      	cmp	r2, #2
 801ca82:	d001      	beq.n	801ca88 <bt_uuid_create+0x12>
 801ca84:	2000      	movs	r0, #0
}
 801ca86:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_16;
 801ca88:	2300      	movs	r3, #0
 801ca8a:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
 801ca8c:	784a      	ldrb	r2, [r1, #1]
 801ca8e:	780b      	ldrb	r3, [r1, #0]
 801ca90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
 801ca94:	8043      	strh	r3, [r0, #2]
	return true;
 801ca96:	2001      	movs	r0, #1
		break;
 801ca98:	e7f5      	b.n	801ca86 <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_32;
 801ca9a:	2301      	movs	r3, #1
 801ca9c:	7003      	strb	r3, [r0, #0]
 801ca9e:	78cc      	ldrb	r4, [r1, #3]
 801caa0:	788a      	ldrb	r2, [r1, #2]
 801caa2:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
 801caa6:	784d      	ldrb	r5, [r1, #1]
 801caa8:	780a      	ldrb	r2, [r1, #0]
 801caaa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
 801caae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
 801cab2:	6042      	str	r2, [r0, #4]
	return true;
 801cab4:	4618      	mov	r0, r3
		break;
 801cab6:	e7e6      	b.n	801ca86 <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_128;
 801cab8:	2302      	movs	r3, #2
 801caba:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
 801cabe:	2210      	movs	r2, #16
 801cac0:	f7ff fef5 	bl	801c8ae <memcpy>
	return true;
 801cac4:	2001      	movs	r0, #1
		break;
 801cac6:	e7de      	b.n	801ca86 <bt_uuid_create+0x10>

0801cac8 <get_phy>:
	switch (hci_phy) {
 801cac8:	2802      	cmp	r0, #2
 801caca:	d004      	beq.n	801cad6 <get_phy+0xe>
 801cacc:	2803      	cmp	r0, #3
 801cace:	d004      	beq.n	801cada <get_phy+0x12>
 801cad0:	2801      	cmp	r0, #1
 801cad2:	d001      	beq.n	801cad8 <get_phy+0x10>
		return 0;
 801cad4:	2000      	movs	r0, #0
}
 801cad6:	4770      	bx	lr
 801cad8:	4770      	bx	lr
		return BT_GAP_LE_PHY_CODED;
 801cada:	2004      	movs	r0, #4
 801cadc:	4770      	bx	lr

0801cade <get_adv_props>:
	switch (evt_type) {
 801cade:	2804      	cmp	r0, #4
 801cae0:	d80a      	bhi.n	801caf8 <get_adv_props+0x1a>
 801cae2:	e8df f000 	tbb	[pc, r0]
 801cae6:	0b03      	.short	0x0b03
 801cae8:	050c      	.short	0x050c
 801caea:	07          	.byte	0x07
 801caeb:	00          	.byte	0x00
		return BT_GAP_ADV_PROP_SCAN_RESPONSE |
 801caec:	2003      	movs	r0, #3
 801caee:	4770      	bx	lr
		return 0;
 801caf0:	2000      	movs	r0, #0
 801caf2:	4770      	bx	lr
		return BT_GAP_ADV_PROP_SCAN_RESPONSE |
 801caf4:	200a      	movs	r0, #10
 801caf6:	4770      	bx	lr
		return 0;
 801caf8:	2000      	movs	r0, #0
 801cafa:	4770      	bx	lr
		return BT_GAP_ADV_PROP_CONNECTABLE |
 801cafc:	2005      	movs	r0, #5
}
 801cafe:	4770      	bx	lr

0801cb00 <hci_vendor_event>:
}
 801cb00:	4770      	bx	lr

0801cb02 <get_filter_policy>:
}
 801cb02:	2000      	movs	r0, #0
 801cb04:	4770      	bx	lr

0801cb06 <valid_le_scan_param>:
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
 801cb06:	7803      	ldrb	r3, [r0, #0]
 801cb08:	2b01      	cmp	r3, #1
 801cb0a:	d815      	bhi.n	801cb38 <valid_le_scan_param+0x32>
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
 801cb0c:	6843      	ldr	r3, [r0, #4]
 801cb0e:	f033 030f 	bics.w	r3, r3, #15
 801cb12:	d113      	bne.n	801cb3c <valid_le_scan_param+0x36>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
 801cb14:	8902      	ldrh	r2, [r0, #8]
 801cb16:	1f13      	subs	r3, r2, #4
 801cb18:	b29b      	uxth	r3, r3
 801cb1a:	f643 71fc 	movw	r1, #16380	; 0x3ffc
 801cb1e:	428b      	cmp	r3, r1
 801cb20:	d80e      	bhi.n	801cb40 <valid_le_scan_param+0x3a>
	if (param->window < 0x0004 || param->window > 0x4000) {
 801cb22:	8941      	ldrh	r1, [r0, #10]
 801cb24:	1f0b      	subs	r3, r1, #4
 801cb26:	b29b      	uxth	r3, r3
 801cb28:	f643 70fc 	movw	r0, #16380	; 0x3ffc
 801cb2c:	4283      	cmp	r3, r0
 801cb2e:	d809      	bhi.n	801cb44 <valid_le_scan_param+0x3e>
	if (param->window > param->interval) {
 801cb30:	428a      	cmp	r2, r1
 801cb32:	d309      	bcc.n	801cb48 <valid_le_scan_param+0x42>
	return true;
 801cb34:	2001      	movs	r0, #1
 801cb36:	4770      	bx	lr
		return false;
 801cb38:	2000      	movs	r0, #0
 801cb3a:	4770      	bx	lr
		return false;
 801cb3c:	2000      	movs	r0, #0
 801cb3e:	4770      	bx	lr
		return false;
 801cb40:	2000      	movs	r0, #0
 801cb42:	4770      	bx	lr
		return false;
 801cb44:	2000      	movs	r0, #0
 801cb46:	4770      	bx	lr
		return false;
 801cb48:	2000      	movs	r0, #0
}
 801cb4a:	4770      	bx	lr

0801cb4c <adv_id_check_connectable_func>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 801cb4c:	f3bf 8f5b 	dmb	ish
 801cb50:	6943      	ldr	r3, [r0, #20]
 801cb52:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
 801cb56:	f013 0f40 	tst.w	r3, #64	; 0x40
 801cb5a:	d100      	bne.n	801cb5e <adv_id_check_connectable_func+0x12>
}
 801cb5c:	4770      	bx	lr
 801cb5e:	f3bf 8f5b 	dmb	ish
 801cb62:	6943      	ldr	r3, [r0, #20]
 801cb64:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
 801cb68:	f413 7f80 	tst.w	r3, #256	; 0x100
 801cb6c:	d0f6      	beq.n	801cb5c <adv_id_check_connectable_func+0x10>
	    check_data->id != adv->id) {
 801cb6e:	780a      	ldrb	r2, [r1, #0]
 801cb70:	7803      	ldrb	r3, [r0, #0]
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
 801cb72:	429a      	cmp	r2, r3
 801cb74:	d0f2      	beq.n	801cb5c <adv_id_check_connectable_func+0x10>
		check_data->adv_enabled = true;
 801cb76:	2301      	movs	r3, #1
 801cb78:	704b      	strb	r3, [r1, #1]
}
 801cb7a:	e7ef      	b.n	801cb5c <adv_id_check_connectable_func+0x10>

0801cb7c <valid_adv_param>:
{
 801cb7c:	b508      	push	{r3, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
 801cb7e:	6843      	ldr	r3, [r0, #4]
 801cb80:	f413 6f80 	tst.w	r3, #1024	; 0x400
 801cb84:	d107      	bne.n	801cb96 <valid_adv_param+0x1a>
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
 801cb86:	6902      	ldr	r2, [r0, #16]
 801cb88:	b112      	cbz	r2, 801cb90 <valid_adv_param+0x14>
 801cb8a:	f013 0f01 	tst.w	r3, #1
 801cb8e:	d004      	beq.n	801cb9a <valid_adv_param+0x1e>
	return valid_adv_ext_param(param);
 801cb90:	f7ef fbe8 	bl	800c364 <valid_adv_ext_param>
}
 801cb94:	bd08      	pop	{r3, pc}
		return false;
 801cb96:	2000      	movs	r0, #0
 801cb98:	e7fc      	b.n	801cb94 <valid_adv_param+0x18>
		return false;
 801cb9a:	2000      	movs	r0, #0
 801cb9c:	e7fa      	b.n	801cb94 <valid_adv_param+0x18>

0801cb9e <unpair_remote>:
{
 801cb9e:	b508      	push	{r3, lr}
 801cba0:	460b      	mov	r3, r1
	unpair(*id, &info->addr);
 801cba2:	4601      	mov	r1, r0
 801cba4:	7818      	ldrb	r0, [r3, #0]
 801cba6:	f7ef fc5d 	bl	800c464 <unpair>
}
 801cbaa:	bd08      	pop	{r3, pc}

0801cbac <cmd_state_set_init>:
	state->target = target;
 801cbac:	6001      	str	r1, [r0, #0]
	state->bit = bit;
 801cbae:	6042      	str	r2, [r0, #4]
	state->val = val;
 801cbb0:	7203      	strb	r3, [r0, #8]
}
 801cbb2:	4770      	bx	lr

0801cbb4 <le_set_private_addr>:
{
 801cbb4:	b500      	push	{lr}
 801cbb6:	b083      	sub	sp, #12
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
 801cbb8:	2106      	movs	r1, #6
 801cbba:	4668      	mov	r0, sp
 801cbbc:	f7f3 f8ce 	bl	800fd5c <bt_rand>
	if (err) {
 801cbc0:	b110      	cbz	r0, 801cbc8 <le_set_private_addr+0x14>
}
 801cbc2:	b003      	add	sp, #12
 801cbc4:	f85d fb04 	ldr.w	pc, [sp], #4
	nrpa.val[5] &= 0x3f;
 801cbc8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801cbcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801cbd0:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
 801cbd4:	4668      	mov	r0, sp
 801cbd6:	f7f0 fd95 	bl	800d704 <set_random_address>
 801cbda:	e7f2      	b.n	801cbc2 <le_set_private_addr+0xe>

0801cbdc <set_adv_random_address>:
{
 801cbdc:	b508      	push	{r3, lr}
		return set_random_address(addr);
 801cbde:	4608      	mov	r0, r1
 801cbe0:	f7f0 fd90 	bl	800d704 <set_random_address>
}
 801cbe4:	bd08      	pop	{r3, pc}

0801cbe6 <le_adv_set_private_addr>:
{
 801cbe6:	b510      	push	{r4, lr}
 801cbe8:	b082      	sub	sp, #8
 801cbea:	4604      	mov	r4, r0
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
 801cbec:	2106      	movs	r1, #6
 801cbee:	4668      	mov	r0, sp
 801cbf0:	f7f3 f8b4 	bl	800fd5c <bt_rand>
	if (err) {
 801cbf4:	b108      	cbz	r0, 801cbfa <le_adv_set_private_addr+0x14>
}
 801cbf6:	b002      	add	sp, #8
 801cbf8:	bd10      	pop	{r4, pc}
	nrpa.val[5] &= 0x3f;
 801cbfa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801cbfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801cc02:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_adv_random_address(adv, &nrpa);
 801cc06:	4669      	mov	r1, sp
 801cc08:	4620      	mov	r0, r4
 801cc0a:	f7ff ffe7 	bl	801cbdc <set_adv_random_address>
 801cc0e:	e7f2      	b.n	801cbf6 <le_adv_set_private_addr+0x10>

0801cc10 <set_le_adv_enable>:
{
 801cc10:	b508      	push	{r3, lr}
	return set_le_adv_enable_legacy(adv, enable);
 801cc12:	f7f0 fdbf 	bl	800d794 <set_le_adv_enable_legacy>
}
 801cc16:	bd08      	pop	{r3, pc}

0801cc18 <adv_unpause_enabled>:
{
 801cc18:	b508      	push	{r3, lr}
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
 801cc1a:	f100 0314 	add.w	r3, r0, #20
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 801cc1e:	f3bf 8f5b 	dmb	ish
 801cc22:	e853 2f00 	ldrex	r2, [r3]
 801cc26:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 801cc2a:	e843 1c00 	strex	ip, r1, [r3]
 801cc2e:	f1bc 0f00 	cmp.w	ip, #0
 801cc32:	d1f6      	bne.n	801cc22 <adv_unpause_enabled+0xa>
 801cc34:	f3bf 8f5b 	dmb	ish
 801cc38:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 801cc3c:	d100      	bne.n	801cc40 <adv_unpause_enabled+0x28>
}
 801cc3e:	bd08      	pop	{r3, pc}
		set_le_adv_enable(adv, true);
 801cc40:	2101      	movs	r1, #1
 801cc42:	f7ff ffe5 	bl	801cc10 <set_le_adv_enable>
}
 801cc46:	e7fa      	b.n	801cc3e <adv_unpause_enabled+0x26>

0801cc48 <adv_pause_enabled>:
{
 801cc48:	b508      	push	{r3, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 801cc4a:	f3bf 8f5b 	dmb	ish
 801cc4e:	6943      	ldr	r3, [r0, #20]
 801cc50:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
 801cc54:	f013 0f40 	tst.w	r3, #64	; 0x40
 801cc58:	d010      	beq.n	801cc7c <adv_pause_enabled+0x34>
 801cc5a:	f100 0214 	add.w	r2, r0, #20
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 801cc5e:	f3bf 8f5b 	dmb	ish
 801cc62:	e852 3f00 	ldrex	r3, [r2]
 801cc66:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801cc6a:	e842 3100 	strex	r1, r3, [r2]
 801cc6e:	2900      	cmp	r1, #0
 801cc70:	d1f7      	bne.n	801cc62 <adv_pause_enabled+0x1a>
 801cc72:	f3bf 8f5b 	dmb	ish
		set_le_adv_enable(adv, false);
 801cc76:	2100      	movs	r1, #0
 801cc78:	f7ff ffca 	bl	801cc10 <set_le_adv_enable>
}
 801cc7c:	bd08      	pop	{r3, pc}

0801cc7e <hci_id_add>:
{
 801cc7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc80:	460e      	mov	r6, r1
 801cc82:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
 801cc84:	2127      	movs	r1, #39	; 0x27
 801cc86:	f242 0027 	movw	r0, #8231	; 0x2027
 801cc8a:	f7f0 fa0f 	bl	800d0ac <bt_hci_cmd_create>
	if (!buf) {
 801cc8e:	b1d8      	cbz	r0, 801ccc8 <hci_id_add+0x4a>
 801cc90:	4607      	mov	r7, r0
	cp = net_buf_add(buf, sizeof(*cp));
 801cc92:	2127      	movs	r1, #39	; 0x27
 801cc94:	3008      	adds	r0, #8
 801cc96:	f003 fbf1 	bl	802047c <net_buf_simple_add>
 801cc9a:	4604      	mov	r4, r0
	memcpy(dst, src, sizeof(*dst));
 801cc9c:	2207      	movs	r2, #7
 801cc9e:	4631      	mov	r1, r6
 801cca0:	f7ff fe05 	bl	801c8ae <memcpy>
	memcpy(cp->peer_irk, peer_irk, 16);
 801cca4:	2210      	movs	r2, #16
 801cca6:	4629      	mov	r1, r5
 801cca8:	1de0      	adds	r0, r4, #7
 801ccaa:	f7ff fe00 	bl	801c8ae <memcpy>
	(void)memset(cp->local_irk, 0, 16);
 801ccae:	2210      	movs	r2, #16
 801ccb0:	2100      	movs	r1, #0
 801ccb2:	f104 0017 	add.w	r0, r4, #23
 801ccb6:	f7ff fe1f 	bl	801c8f8 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
 801ccba:	2200      	movs	r2, #0
 801ccbc:	4639      	mov	r1, r7
 801ccbe:	f242 0027 	movw	r0, #8231	; 0x2027
 801ccc2:	f7f0 fa2f 	bl	800d124 <bt_hci_cmd_send_sync>
}
 801ccc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
 801ccc8:	f06f 0036 	mvn.w	r0, #54	; 0x36
 801cccc:	e7fb      	b.n	801ccc6 <hci_id_add+0x48>

0801ccce <keys_add_id>:
{
 801ccce:	b508      	push	{r3, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
 801ccd0:	7a03      	ldrb	r3, [r0, #8]
 801ccd2:	f013 0f04 	tst.w	r3, #4
 801ccd6:	d100      	bne.n	801ccda <keys_add_id+0xc>
}
 801ccd8:	bd08      	pop	{r3, pc}
 801ccda:	4601      	mov	r1, r0
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
 801ccdc:	4602      	mov	r2, r0
 801ccde:	f812 0b2a 	ldrb.w	r0, [r2], #42
 801cce2:	3101      	adds	r1, #1
 801cce4:	f7ff ffcb 	bl	801cc7e <hci_id_add>
}
 801cce8:	e7f6      	b.n	801ccd8 <keys_add_id+0xa>

0801ccea <addr_res_enable>:
{
 801ccea:	b538      	push	{r3, r4, r5, lr}
 801ccec:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
 801ccee:	2101      	movs	r1, #1
 801ccf0:	f242 002d 	movw	r0, #8237	; 0x202d
 801ccf4:	f7f0 f9da 	bl	800d0ac <bt_hci_cmd_create>
	if (!buf) {
 801ccf8:	b158      	cbz	r0, 801cd12 <addr_res_enable+0x28>
 801ccfa:	4605      	mov	r5, r0
	net_buf_add_u8(buf, enable);
 801ccfc:	4621      	mov	r1, r4
 801ccfe:	3008      	adds	r0, #8
 801cd00:	f003 fbcd 	bl	802049e <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
 801cd04:	2200      	movs	r2, #0
 801cd06:	4629      	mov	r1, r5
 801cd08:	f242 002d 	movw	r0, #8237	; 0x202d
 801cd0c:	f7f0 fa0a 	bl	800d124 <bt_hci_cmd_send_sync>
}
 801cd10:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
 801cd12:	f06f 0036 	mvn.w	r0, #54	; 0x36
 801cd16:	e7fb      	b.n	801cd10 <addr_res_enable+0x26>

0801cd18 <set_le_scan_enable>:
{
 801cd18:	b508      	push	{r3, lr}
	return set_le_scan_enable_legacy(enable);
 801cd1a:	f7f0 fdb1 	bl	800d880 <set_le_scan_enable_legacy>
}
 801cd1e:	bd08      	pop	{r3, pc}

0801cd20 <hci_id_del>:
{
 801cd20:	b538      	push	{r3, r4, r5, lr}
 801cd22:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
 801cd24:	2107      	movs	r1, #7
 801cd26:	f242 0028 	movw	r0, #8232	; 0x2028
 801cd2a:	f7f0 f9bf 	bl	800d0ac <bt_hci_cmd_create>
	if (!buf) {
 801cd2e:	b178      	cbz	r0, 801cd50 <hci_id_del+0x30>
 801cd30:	4605      	mov	r5, r0
	cp = net_buf_add(buf, sizeof(*cp));
 801cd32:	2107      	movs	r1, #7
 801cd34:	3008      	adds	r0, #8
 801cd36:	f003 fba1 	bl	802047c <net_buf_simple_add>
 801cd3a:	2207      	movs	r2, #7
 801cd3c:	4621      	mov	r1, r4
 801cd3e:	f7ff fdb6 	bl	801c8ae <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
 801cd42:	2200      	movs	r2, #0
 801cd44:	4629      	mov	r1, r5
 801cd46:	f242 0028 	movw	r0, #8232	; 0x2028
 801cd4a:	f7f0 f9eb 	bl	800d124 <bt_hci_cmd_send_sync>
}
 801cd4e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
 801cd50:	f06f 0036 	mvn.w	r0, #54	; 0x36
 801cd54:	e7fb      	b.n	801cd4e <hci_id_del+0x2e>

0801cd56 <hci_set_ad>:
{
 801cd56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd5a:	b082      	sub	sp, #8
 801cd5c:	4607      	mov	r7, r0
 801cd5e:	460d      	mov	r5, r1
 801cd60:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
 801cd62:	2120      	movs	r1, #32
 801cd64:	f7f0 f9a2 	bl	800d0ac <bt_hci_cmd_create>
	if (!buf) {
 801cd68:	b300      	cbz	r0, 801cdac <hci_set_ad+0x56>
 801cd6a:	4680      	mov	r8, r0
	set_data = net_buf_add(buf, sizeof(*set_data));
 801cd6c:	2120      	movs	r1, #32
 801cd6e:	3008      	adds	r0, #8
 801cd70:	f003 fb84 	bl	802047c <net_buf_simple_add>
 801cd74:	4604      	mov	r4, r0
	(void)memset(set_data, 0, sizeof(*set_data));
 801cd76:	2220      	movs	r2, #32
 801cd78:	2100      	movs	r1, #0
 801cd7a:	f7ff fdbd 	bl	801c8f8 <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
 801cd7e:	9400      	str	r4, [sp, #0]
 801cd80:	4633      	mov	r3, r6
 801cd82:	462a      	mov	r2, r5
 801cd84:	211f      	movs	r1, #31
 801cd86:	1c60      	adds	r0, r4, #1
 801cd88:	f7ef fa1e 	bl	800c1c8 <set_data_add>
	if (err) {
 801cd8c:	4604      	mov	r4, r0
 801cd8e:	b948      	cbnz	r0, 801cda4 <hci_set_ad+0x4e>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
 801cd90:	2200      	movs	r2, #0
 801cd92:	4641      	mov	r1, r8
 801cd94:	4638      	mov	r0, r7
 801cd96:	f7f0 f9c5 	bl	800d124 <bt_hci_cmd_send_sync>
 801cd9a:	4604      	mov	r4, r0
}
 801cd9c:	4620      	mov	r0, r4
 801cd9e:	b002      	add	sp, #8
 801cda0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
 801cda4:	4640      	mov	r0, r8
 801cda6:	f003 fb1f 	bl	80203e8 <net_buf_unref>
		return err;
 801cdaa:	e7f7      	b.n	801cd9c <hci_set_ad+0x46>
		return -ENOBUFS;
 801cdac:	f06f 0436 	mvn.w	r4, #54	; 0x36
 801cdb0:	e7f4      	b.n	801cd9c <hci_set_ad+0x46>

0801cdb2 <set_ad>:
{
 801cdb2:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
 801cdb4:	f242 0008 	movw	r0, #8200	; 0x2008
 801cdb8:	f7ff ffcd 	bl	801cd56 <hci_set_ad>
}
 801cdbc:	bd08      	pop	{r3, pc}

0801cdbe <set_sd>:
{
 801cdbe:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
 801cdc0:	f242 0009 	movw	r0, #8201	; 0x2009
 801cdc4:	f7ff ffc7 	bl	801cd56 <hci_set_ad>
}
 801cdc8:	bd08      	pop	{r3, pc}

0801cdca <bt_lookup_id_addr>:
{
 801cdca:	b510      	push	{r4, lr}
 801cdcc:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
 801cdce:	f7f9 fcf9 	bl	80167c4 <bt_keys_find_irk>
		if (keys) {
 801cdd2:	b108      	cbz	r0, 801cdd8 <bt_lookup_id_addr+0xe>
			return &keys->addr;
 801cdd4:	3001      	adds	r0, #1
}
 801cdd6:	bd10      	pop	{r4, pc}
	return addr;
 801cdd8:	4620      	mov	r0, r4
 801cdda:	e7fc      	b.n	801cdd6 <bt_lookup_id_addr+0xc>

0801cddc <is_adv_using_rand_addr>:
{
 801cddc:	b508      	push	{r3, lr}
	struct bt_le_ext_adv *adv = bt_adv_lookup_legacy();
 801cdde:	f7f0 fe5d 	bl	800da9c <bt_adv_lookup_legacy>
	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
 801cde2:	b158      	cbz	r0, 801cdfc <is_adv_using_rand_addr+0x20>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 801cde4:	f3bf 8f5b 	dmb	ish
 801cde8:	6943      	ldr	r3, [r0, #20]
 801cdea:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
 801cdee:	f3c3 1080 	ubfx	r0, r3, #6, #1
 801cdf2:	f013 0f40 	tst.w	r3, #64	; 0x40
 801cdf6:	d002      	beq.n	801cdfe <is_adv_using_rand_addr+0x22>
 801cdf8:	2001      	movs	r0, #1
 801cdfa:	e000      	b.n	801cdfe <is_adv_using_rand_addr+0x22>
 801cdfc:	2000      	movs	r0, #0
}
 801cdfe:	bd08      	pop	{r3, pc}

0801ce00 <start_passive_scan>:
{
 801ce00:	b508      	push	{r3, lr}
	if (fast_scan) {
 801ce02:	b128      	cbz	r0, 801ce10 <start_passive_scan+0x10>
		window = BT_GAP_SCAN_FAST_WINDOW;
 801ce04:	2230      	movs	r2, #48	; 0x30
		interval = BT_GAP_SCAN_FAST_INTERVAL;
 801ce06:	2160      	movs	r1, #96	; 0x60
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
 801ce08:	2000      	movs	r0, #0
 801ce0a:	f7f0 fe7f 	bl	800db0c <start_le_scan_legacy>
}
 801ce0e:	bd08      	pop	{r3, pc}
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
 801ce10:	2212      	movs	r2, #18
		interval = CONFIG_BT_BACKGROUND_SCAN_INTERVAL;
 801ce12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801ce16:	e7f7      	b.n	801ce08 <start_passive_scan+0x8>

0801ce18 <bt_le_scan_random_addr_check>:
{
 801ce18:	b508      	push	{r3, lr}
	adv = bt_adv_lookup_legacy();
 801ce1a:	f7f0 fe3f 	bl	800da9c <bt_adv_lookup_legacy>
	if (!adv) {
 801ce1e:	b128      	cbz	r0, 801ce2c <bt_le_scan_random_addr_check+0x14>
 801ce20:	4603      	mov	r3, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 801ce22:	f3bf 8f5b 	dmb	ish
 801ce26:	695b      	ldr	r3, [r3, #20]
 801ce28:	f3bf 8f5b 	dmb	ish
}
 801ce2c:	2001      	movs	r0, #1
 801ce2e:	bd08      	pop	{r3, pc}

0801ce30 <bt_le_create_conn>:
{
 801ce30:	b508      	push	{r3, lr}
	return bt_le_create_conn_legacy(conn);
 801ce32:	f7f0 fefd 	bl	800dc30 <bt_le_create_conn_legacy>
}
 801ce36:	bd08      	pop	{r3, pc}

0801ce38 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
 801ce38:	8802      	ldrh	r2, [r0, #0]
 801ce3a:	8843      	ldrh	r3, [r0, #2]
 801ce3c:	429a      	cmp	r2, r3
 801ce3e:	d81a      	bhi.n	801ce76 <bt_le_conn_params_valid+0x3e>
 801ce40:	2a05      	cmp	r2, #5
 801ce42:	d91a      	bls.n	801ce7a <bt_le_conn_params_valid+0x42>
	    param->interval_min < 6 || param->interval_max > 3200) {
 801ce44:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 801ce48:	d819      	bhi.n	801ce7e <bt_le_conn_params_valid+0x46>
	if (param->latency > 499) {
 801ce4a:	8881      	ldrh	r1, [r0, #4]
 801ce4c:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 801ce50:	d217      	bcs.n	801ce82 <bt_le_conn_params_valid+0x4a>
{
 801ce52:	b410      	push	{r4}
	if (param->timeout < 10 || param->timeout > 3200 ||
 801ce54:	88c0      	ldrh	r0, [r0, #6]
 801ce56:	f1a0 020a 	sub.w	r2, r0, #10
 801ce5a:	b292      	uxth	r2, r2
 801ce5c:	f640 4476 	movw	r4, #3190	; 0xc76
 801ce60:	42a2      	cmp	r2, r4
 801ce62:	d810      	bhi.n	801ce86 <bt_le_conn_params_valid+0x4e>
	     ((1U + param->latency) * param->interval_max))) {
 801ce64:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
 801ce68:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
 801ce6c:	d20d      	bcs.n	801ce8a <bt_le_conn_params_valid+0x52>
	return true;
 801ce6e:	2001      	movs	r0, #1
}
 801ce70:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ce74:	4770      	bx	lr
		return false;
 801ce76:	2000      	movs	r0, #0
 801ce78:	4770      	bx	lr
 801ce7a:	2000      	movs	r0, #0
 801ce7c:	4770      	bx	lr
 801ce7e:	2000      	movs	r0, #0
 801ce80:	4770      	bx	lr
		return false;
 801ce82:	2000      	movs	r0, #0
}
 801ce84:	4770      	bx	lr
		return false;
 801ce86:	2000      	movs	r0, #0
 801ce88:	e7f2      	b.n	801ce70 <bt_le_conn_params_valid+0x38>
 801ce8a:	2000      	movs	r0, #0
 801ce8c:	e7f0      	b.n	801ce70 <bt_le_conn_params_valid+0x38>

0801ce8e <bt_security_err_get>:
	switch (hci_err) {
 801ce8e:	2829      	cmp	r0, #41	; 0x29
 801ce90:	d81e      	bhi.n	801ced0 <bt_security_err_get+0x42>
 801ce92:	e8df f000 	tbb	[pc, r0]
 801ce96:	1d20      	.short	0x1d20
 801ce98:	1f1d1d1d 	.word	0x1f1d1d1d
 801ce9c:	1d1d1d15 	.word	0x1d1d1d15
 801cea0:	1d1d1d1d 	.word	0x1d1d1d1d
 801cea4:	1d1d1d1d 	.word	0x1d1d1d1d
 801cea8:	1d1d1d1b 	.word	0x1d1d1d1b
 801ceac:	1d191d1d 	.word	0x1d191d1d
 801ceb0:	1d1d1d1d 	.word	0x1d1d1d1d
 801ceb4:	1d1d1d1d 	.word	0x1d1d1d1d
 801ceb8:	1d1d1d1d 	.word	0x1d1d1d1d
 801cebc:	171d1d1d 	.word	0x171d1d1d
		return BT_SECURITY_ERR_PIN_OR_KEY_MISSING;
 801cec0:	2002      	movs	r0, #2
 801cec2:	4770      	bx	lr
		return BT_SECURITY_ERR_PAIR_NOT_SUPPORTED;
 801cec4:	2005      	movs	r0, #5
 801cec6:	4770      	bx	lr
		return BT_SECURITY_ERR_PAIR_NOT_ALLOWED;
 801cec8:	2006      	movs	r0, #6
 801ceca:	4770      	bx	lr
		return BT_SECURITY_ERR_INVALID_PARAM;
 801cecc:	2007      	movs	r0, #7
 801cece:	4770      	bx	lr
		return BT_SECURITY_ERR_UNSPECIFIED;
 801ced0:	2008      	movs	r0, #8
 801ced2:	4770      	bx	lr
		return BT_SECURITY_ERR_AUTH_FAIL;
 801ced4:	2001      	movs	r0, #1
}
 801ced6:	4770      	bx	lr

0801ced8 <pending_id_update>:
{
 801ced8:	b508      	push	{r3, lr}
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
 801ceda:	7a03      	ldrb	r3, [r0, #8]
 801cedc:	f013 0f01 	tst.w	r3, #1
 801cee0:	d103      	bne.n	801ceea <pending_id_update+0x12>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
 801cee2:	f013 0f02 	tst.w	r3, #2
 801cee6:	d106      	bne.n	801cef6 <pending_id_update+0x1e>
}
 801cee8:	bd08      	pop	{r3, pc}
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
 801ceea:	f023 0301 	bic.w	r3, r3, #1
 801ceee:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
 801cef0:	f7f0 ffd8 	bl	800dea4 <bt_id_add>
		return;
 801cef4:	e7f8      	b.n	801cee8 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
 801cef6:	f023 0302 	bic.w	r3, r3, #2
 801cefa:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
 801cefc:	f7f1 f8c0 	bl	800e080 <bt_id_del>
		return;
 801cf00:	e7f2      	b.n	801cee8 <pending_id_update+0x10>

0801cf02 <bt_addr_le_create_static>:
{
 801cf02:	b510      	push	{r4, lr}
 801cf04:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
 801cf06:	2301      	movs	r3, #1
 801cf08:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
 801cf0c:	2106      	movs	r1, #6
 801cf0e:	f7f2 ff25 	bl	800fd5c <bt_rand>
	if (err) {
 801cf12:	b918      	cbnz	r0, 801cf1c <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
 801cf14:	79a3      	ldrb	r3, [r4, #6]
 801cf16:	f063 033f 	orn	r3, r3, #63	; 0x3f
 801cf1a:	71a3      	strb	r3, [r4, #6]
}
 801cf1c:	bd10      	pop	{r4, pc}

0801cf1e <bt_hci_disconnect>:
{
 801cf1e:	b570      	push	{r4, r5, r6, lr}
 801cf20:	4605      	mov	r5, r0
 801cf22:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
 801cf24:	2103      	movs	r1, #3
 801cf26:	f240 4006 	movw	r0, #1030	; 0x406
 801cf2a:	f7f0 f8bf 	bl	800d0ac <bt_hci_cmd_create>
	if (!buf) {
 801cf2e:	b160      	cbz	r0, 801cf4a <bt_hci_disconnect+0x2c>
 801cf30:	4606      	mov	r6, r0
	disconn = net_buf_add(buf, sizeof(*disconn));
 801cf32:	2103      	movs	r1, #3
 801cf34:	3008      	adds	r0, #8
 801cf36:	f003 faa1 	bl	802047c <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
 801cf3a:	8005      	strh	r5, [r0, #0]
	disconn->reason = reason;
 801cf3c:	7084      	strb	r4, [r0, #2]
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
 801cf3e:	4631      	mov	r1, r6
 801cf40:	f240 4006 	movw	r0, #1030	; 0x406
 801cf44:	f7f1 fb8a 	bl	800e65c <bt_hci_cmd_send>
}
 801cf48:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
 801cf4a:	f06f 0036 	mvn.w	r0, #54	; 0x36
 801cf4e:	e7fb      	b.n	801cf48 <bt_hci_disconnect+0x2a>

0801cf50 <bt_le_set_data_len>:
{
 801cf50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf52:	4606      	mov	r6, r0
 801cf54:	460f      	mov	r7, r1
 801cf56:	4614      	mov	r4, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
 801cf58:	2106      	movs	r1, #6
 801cf5a:	f242 0022 	movw	r0, #8226	; 0x2022
 801cf5e:	f7f0 f8a5 	bl	800d0ac <bt_hci_cmd_create>
	if (!buf) {
 801cf62:	b170      	cbz	r0, 801cf82 <bt_le_set_data_len+0x32>
 801cf64:	4605      	mov	r5, r0
	cp = net_buf_add(buf, sizeof(*cp));
 801cf66:	2106      	movs	r1, #6
 801cf68:	3008      	adds	r0, #8
 801cf6a:	f003 fa87 	bl	802047c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
 801cf6e:	8833      	ldrh	r3, [r6, #0]
 801cf70:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
 801cf72:	8047      	strh	r7, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
 801cf74:	8084      	strh	r4, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
 801cf76:	4629      	mov	r1, r5
 801cf78:	f242 0022 	movw	r0, #8226	; 0x2022
 801cf7c:	f7f1 fb6e 	bl	800e65c <bt_hci_cmd_send>
}
 801cf80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
 801cf82:	f06f 0036 	mvn.w	r0, #54	; 0x36
 801cf86:	e7fb      	b.n	801cf80 <bt_le_set_data_len+0x30>

0801cf88 <bt_le_set_phy>:
{
 801cf88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf8c:	4607      	mov	r7, r0
 801cf8e:	460e      	mov	r6, r1
 801cf90:	4615      	mov	r5, r2
 801cf92:	461c      	mov	r4, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
 801cf94:	2107      	movs	r1, #7
 801cf96:	f242 0032 	movw	r0, #8242	; 0x2032
 801cf9a:	f7f0 f887 	bl	800d0ac <bt_hci_cmd_create>
	if (!buf) {
 801cf9e:	b1a0      	cbz	r0, 801cfca <bt_le_set_phy+0x42>
 801cfa0:	4680      	mov	r8, r0
	cp = net_buf_add(buf, sizeof(*cp));
 801cfa2:	2107      	movs	r1, #7
 801cfa4:	3008      	adds	r0, #8
 801cfa6:	f003 fa69 	bl	802047c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
 801cfaa:	883b      	ldrh	r3, [r7, #0]
 801cfac:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
 801cfae:	7086      	strb	r6, [r0, #2]
	cp->tx_phys = pref_tx_phy;
 801cfb0:	70c5      	strb	r5, [r0, #3]
	cp->rx_phys = pref_rx_phy;
 801cfb2:	7104      	strb	r4, [r0, #4]
	cp->phy_opts = phy_opts;
 801cfb4:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801cfb8:	f8a0 3005 	strh.w	r3, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
 801cfbc:	4641      	mov	r1, r8
 801cfbe:	f242 0032 	movw	r0, #8242	; 0x2032
 801cfc2:	f7f1 fb4b 	bl	800e65c <bt_hci_cmd_send>
}
 801cfc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
 801cfca:	f06f 0036 	mvn.w	r0, #54	; 0x36
 801cfce:	e7fa      	b.n	801cfc6 <bt_le_set_phy+0x3e>

0801cfd0 <le_conn_param_req_reply>:
{
 801cfd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cfd2:	4606      	mov	r6, r0
 801cfd4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
 801cfd6:	210e      	movs	r1, #14
 801cfd8:	f242 0020 	movw	r0, #8224	; 0x2020
 801cfdc:	f7f0 f866 	bl	800d0ac <bt_hci_cmd_create>
	if (!buf) {
 801cfe0:	b1c0      	cbz	r0, 801d014 <le_conn_param_req_reply+0x44>
 801cfe2:	4607      	mov	r7, r0
	cp = net_buf_add(buf, sizeof(*cp));
 801cfe4:	210e      	movs	r1, #14
 801cfe6:	3008      	adds	r0, #8
 801cfe8:	f003 fa48 	bl	802047c <net_buf_simple_add>
 801cfec:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
 801cfee:	220e      	movs	r2, #14
 801cff0:	2100      	movs	r1, #0
 801cff2:	f7ff fc81 	bl	801c8f8 <memset>
	cp->handle = sys_cpu_to_le16(handle);
 801cff6:	8026      	strh	r6, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
 801cff8:	882b      	ldrh	r3, [r5, #0]
 801cffa:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
 801cffc:	886b      	ldrh	r3, [r5, #2]
 801cffe:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
 801d000:	88ab      	ldrh	r3, [r5, #4]
 801d002:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
 801d004:	88eb      	ldrh	r3, [r5, #6]
 801d006:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
 801d008:	4639      	mov	r1, r7
 801d00a:	f242 0020 	movw	r0, #8224	; 0x2020
 801d00e:	f7f1 fb25 	bl	800e65c <bt_hci_cmd_send>
}
 801d012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
 801d014:	f06f 0036 	mvn.w	r0, #54	; 0x36
 801d018:	e7fb      	b.n	801d012 <le_conn_param_req_reply+0x42>

0801d01a <hci_le_read_remote_features>:
{
 801d01a:	b538      	push	{r3, r4, r5, lr}
 801d01c:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
 801d01e:	2102      	movs	r1, #2
 801d020:	f242 0016 	movw	r0, #8214	; 0x2016
 801d024:	f7f0 f842 	bl	800d0ac <bt_hci_cmd_create>
	if (!buf) {
 801d028:	b168      	cbz	r0, 801d046 <hci_le_read_remote_features+0x2c>
 801d02a:	4605      	mov	r5, r0
	cp = net_buf_add(buf, sizeof(*cp));
 801d02c:	2102      	movs	r1, #2
 801d02e:	3008      	adds	r0, #8
 801d030:	f003 fa24 	bl	802047c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
 801d034:	8823      	ldrh	r3, [r4, #0]
 801d036:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
 801d038:	4629      	mov	r1, r5
 801d03a:	f242 0016 	movw	r0, #8214	; 0x2016
 801d03e:	f7f1 fb0d 	bl	800e65c <bt_hci_cmd_send>
	return 0;
 801d042:	2000      	movs	r0, #0
}
 801d044:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
 801d046:	f06f 0036 	mvn.w	r0, #54	; 0x36
 801d04a:	e7fb      	b.n	801d044 <hci_le_read_remote_features+0x2a>

0801d04c <le_adv_update>:
{
 801d04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d050:	b089      	sub	sp, #36	; 0x24
 801d052:	4607      	mov	r7, r0
 801d054:	460d      	mov	r5, r1
 801d056:	4616      	mov	r6, r2
 801d058:	461c      	mov	r4, r3
 801d05a:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 801d05e:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 801d062:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
 801d066:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
	struct bt_ad d[2] = {};
 801d06a:	2300      	movs	r3, #0
 801d06c:	9304      	str	r3, [sp, #16]
 801d06e:	9305      	str	r3, [sp, #20]
 801d070:	9306      	str	r3, [sp, #24]
 801d072:	9307      	str	r3, [sp, #28]
	if (use_name) {
 801d074:	f1b9 0f00 	cmp.w	r9, #0
 801d078:	d02c      	beq.n	801d0d4 <le_adv_update+0x88>
		const char *name = bt_get_name();
 801d07a:	f7f2 f853 	bl	800f124 <bt_get_name>
 801d07e:	9001      	str	r0, [sp, #4]
		if ((ad && ad_has_name(ad, ad_len)) ||
 801d080:	b17d      	cbz	r5, 801d0a2 <le_adv_update+0x56>
	for (i = 0; i < ad_len; i++) {
 801d082:	2200      	movs	r2, #0
 801d084:	e000      	b.n	801d088 <le_adv_update+0x3c>
 801d086:	3201      	adds	r2, #1
 801d088:	4296      	cmp	r6, r2
 801d08a:	d907      	bls.n	801d09c <le_adv_update+0x50>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
 801d08c:	f815 3032 	ldrb.w	r3, [r5, r2, lsl #3]
 801d090:	3b08      	subs	r3, #8
 801d092:	b2db      	uxtb	r3, r3
 801d094:	2b01      	cmp	r3, #1
 801d096:	d8f6      	bhi.n	801d086 <le_adv_update+0x3a>
			return true;
 801d098:	464b      	mov	r3, r9
 801d09a:	e000      	b.n	801d09e <le_adv_update+0x52>
	return false;
 801d09c:	2300      	movs	r3, #0
		if ((ad && ad_has_name(ad, ad_len)) ||
 801d09e:	2b00      	cmp	r3, #0
 801d0a0:	d15f      	bne.n	801d162 <le_adv_update+0x116>
 801d0a2:	b16c      	cbz	r4, 801d0c0 <le_adv_update+0x74>
	for (i = 0; i < ad_len; i++) {
 801d0a4:	2200      	movs	r2, #0
 801d0a6:	4590      	cmp	r8, r2
 801d0a8:	d907      	bls.n	801d0ba <le_adv_update+0x6e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
 801d0aa:	f814 3032 	ldrb.w	r3, [r4, r2, lsl #3]
 801d0ae:	3b08      	subs	r3, #8
 801d0b0:	b2db      	uxtb	r3, r3
 801d0b2:	2b01      	cmp	r3, #1
 801d0b4:	d922      	bls.n	801d0fc <le_adv_update+0xb0>
	for (i = 0; i < ad_len; i++) {
 801d0b6:	3201      	adds	r2, #1
 801d0b8:	e7f5      	b.n	801d0a6 <le_adv_update+0x5a>
	return false;
 801d0ba:	2300      	movs	r3, #0
		    (sd && ad_has_name(sd, sd_len))) {
 801d0bc:	2b00      	cmp	r3, #0
 801d0be:	d153      	bne.n	801d168 <le_adv_update+0x11c>
		data = (struct bt_data)BT_DATA(
 801d0c0:	9801      	ldr	r0, [sp, #4]
 801d0c2:	f7ff fbae 	bl	801c822 <strlen>
 801d0c6:	2309      	movs	r3, #9
 801d0c8:	f88d 3008 	strb.w	r3, [sp, #8]
 801d0cc:	f88d 0009 	strb.w	r0, [sp, #9]
 801d0d0:	9b01      	ldr	r3, [sp, #4]
 801d0d2:	9303      	str	r3, [sp, #12]
	if (!(ext_adv && scannable)) {
 801d0d4:	f1bb 0f00 	cmp.w	fp, #0
 801d0d8:	d002      	beq.n	801d0e0 <le_adv_update+0x94>
 801d0da:	f1ba 0f00 	cmp.w	sl, #0
 801d0de:	d116      	bne.n	801d10e <le_adv_update+0xc2>
		d[0].data = ad;
 801d0e0:	9504      	str	r5, [sp, #16]
		d[0].len = ad_len;
 801d0e2:	9605      	str	r6, [sp, #20]
		if (use_name && !scannable) {
 801d0e4:	f1b9 0f00 	cmp.w	r9, #0
 801d0e8:	d00a      	beq.n	801d100 <le_adv_update+0xb4>
 801d0ea:	f1ba 0f00 	cmp.w	sl, #0
 801d0ee:	d134      	bne.n	801d15a <le_adv_update+0x10e>
			d[1].data = &data;
 801d0f0:	ab02      	add	r3, sp, #8
 801d0f2:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
 801d0f4:	2301      	movs	r3, #1
 801d0f6:	9307      	str	r3, [sp, #28]
			d_len = 2;
 801d0f8:	2202      	movs	r2, #2
 801d0fa:	e002      	b.n	801d102 <le_adv_update+0xb6>
			return true;
 801d0fc:	464b      	mov	r3, r9
 801d0fe:	e7dd      	b.n	801d0bc <le_adv_update+0x70>
		d_len = 1;
 801d100:	2201      	movs	r2, #1
		err = set_ad(adv, d, d_len);
 801d102:	a904      	add	r1, sp, #16
 801d104:	4638      	mov	r0, r7
 801d106:	f7ff fe54 	bl	801cdb2 <set_ad>
		if (err) {
 801d10a:	4603      	mov	r3, r0
 801d10c:	bb08      	cbnz	r0, 801d152 <le_adv_update+0x106>
	if (scannable) {
 801d10e:	f1ba 0f00 	cmp.w	sl, #0
 801d112:	d010      	beq.n	801d136 <le_adv_update+0xea>
		d[0].data = sd;
 801d114:	9404      	str	r4, [sp, #16]
		d[0].len = sd_len;
 801d116:	f8cd 8014 	str.w	r8, [sp, #20]
		if (use_name) {
 801d11a:	f1b9 0f00 	cmp.w	r9, #0
 801d11e:	d01e      	beq.n	801d15e <le_adv_update+0x112>
			d[1].data = &data;
 801d120:	ab02      	add	r3, sp, #8
 801d122:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
 801d124:	2301      	movs	r3, #1
 801d126:	9307      	str	r3, [sp, #28]
			d_len = 2;
 801d128:	2202      	movs	r2, #2
		err = set_sd(adv, d, d_len);
 801d12a:	a904      	add	r1, sp, #16
 801d12c:	4638      	mov	r0, r7
 801d12e:	f7ff fe46 	bl	801cdbe <set_sd>
		if (err) {
 801d132:	4603      	mov	r3, r0
 801d134:	b968      	cbnz	r0, 801d152 <le_adv_update+0x106>
	atomic_set_bit(adv->flags, BT_ADV_DATA_SET);
 801d136:	3714      	adds	r7, #20
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 801d138:	f3bf 8f5b 	dmb	ish
 801d13c:	e857 3f00 	ldrex	r3, [r7]
 801d140:	f043 0304 	orr.w	r3, r3, #4
 801d144:	e847 3200 	strex	r2, r3, [r7]
 801d148:	2a00      	cmp	r2, #0
 801d14a:	d1f7      	bne.n	801d13c <le_adv_update+0xf0>
 801d14c:	f3bf 8f5b 	dmb	ish
	return 0;
 801d150:	2300      	movs	r3, #0
}
 801d152:	4618      	mov	r0, r3
 801d154:	b009      	add	sp, #36	; 0x24
 801d156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		d_len = 1;
 801d15a:	2201      	movs	r2, #1
 801d15c:	e7d1      	b.n	801d102 <le_adv_update+0xb6>
		d_len = 1;
 801d15e:	2201      	movs	r2, #1
 801d160:	e7e3      	b.n	801d12a <le_adv_update+0xde>
			return -EINVAL;
 801d162:	f06f 0315 	mvn.w	r3, #21
 801d166:	e7f4      	b.n	801d152 <le_adv_update+0x106>
 801d168:	f06f 0315 	mvn.w	r3, #21
 801d16c:	e7f1      	b.n	801d152 <le_adv_update+0x106>

0801d16e <bt_setup_random_id_addr>:
{
 801d16e:	b508      	push	{r3, lr}
	return bt_id_create(NULL, NULL);
 801d170:	2100      	movs	r1, #0
 801d172:	4608      	mov	r0, r1
 801d174:	f7f1 ffda 	bl	800f12c <bt_id_create>
}
 801d178:	bd08      	pop	{r3, pc}

0801d17a <bt_addr_le_is_bonded>:
{
 801d17a:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
 801d17c:	f7f9 fb80 	bl	8016880 <bt_keys_find_addr>
		return keys && keys->keys;
 801d180:	b118      	cbz	r0, 801d18a <bt_addr_le_is_bonded+0x10>
 801d182:	89c3      	ldrh	r3, [r0, #14]
 801d184:	b91b      	cbnz	r3, 801d18e <bt_addr_le_is_bonded+0x14>
 801d186:	2000      	movs	r0, #0
}
 801d188:	bd08      	pop	{r3, pc}
		return keys && keys->keys;
 801d18a:	2000      	movs	r0, #0
 801d18c:	e7fc      	b.n	801d188 <bt_addr_le_is_bonded+0xe>
 801d18e:	2001      	movs	r0, #1
 801d190:	e7fa      	b.n	801d188 <bt_addr_le_is_bonded+0xe>

0801d192 <bt_le_adv_start>:
{
 801d192:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d194:	b083      	sub	sp, #12
 801d196:	4607      	mov	r7, r0
 801d198:	460e      	mov	r6, r1
 801d19a:	4614      	mov	r4, r2
 801d19c:	461d      	mov	r5, r3
	struct bt_le_ext_adv *adv = adv_new_legacy();
 801d19e:	f7ee ff53 	bl	800c048 <adv_new_legacy>
	if (!adv) {
 801d1a2:	b148      	cbz	r0, 801d1b8 <bt_le_adv_start+0x26>
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
 801d1a4:	9b08      	ldr	r3, [sp, #32]
 801d1a6:	9301      	str	r3, [sp, #4]
 801d1a8:	9500      	str	r5, [sp, #0]
 801d1aa:	4623      	mov	r3, r4
 801d1ac:	4632      	mov	r2, r6
 801d1ae:	4639      	mov	r1, r7
 801d1b0:	f7f2 f820 	bl	800f1f4 <bt_le_adv_start_legacy>
}
 801d1b4:	b003      	add	sp, #12
 801d1b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOMEM;
 801d1b8:	f06f 000b 	mvn.w	r0, #11
 801d1bc:	e7fa      	b.n	801d1b4 <bt_le_adv_start+0x22>

0801d1be <bt_le_adv_resume>:
{
 801d1be:	b530      	push	{r4, r5, lr}
 801d1c0:	b083      	sub	sp, #12
	struct bt_le_ext_adv *adv = bt_adv_lookup_legacy();
 801d1c2:	f7f0 fc6b 	bl	800da9c <bt_adv_lookup_legacy>
	if (!adv) {
 801d1c6:	b150      	cbz	r0, 801d1de <bt_le_adv_resume+0x20>
 801d1c8:	4604      	mov	r4, r0
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
 801d1ca:	f100 0514 	add.w	r5, r0, #20
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 801d1ce:	f3bf 8f5b 	dmb	ish
 801d1d2:	6943      	ldr	r3, [r0, #20]
 801d1d4:	f3bf 8f5b 	dmb	ish
 801d1d8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 801d1dc:	d101      	bne.n	801d1e2 <bt_le_adv_resume+0x24>
}
 801d1de:	b003      	add	sp, #12
 801d1e0:	bd30      	pop	{r4, r5, pc}
 801d1e2:	f3bf 8f5b 	dmb	ish
 801d1e6:	6943      	ldr	r3, [r0, #20]
 801d1e8:	f3bf 8f5b 	dmb	ish
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
 801d1ec:	f013 0f40 	tst.w	r3, #64	; 0x40
 801d1f0:	d1f5      	bne.n	801d1de <bt_le_adv_resume+0x20>
 801d1f2:	f3bf 8f5b 	dmb	ish
 801d1f6:	6943      	ldr	r3, [r0, #20]
 801d1f8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
 801d1fc:	f413 7f80 	tst.w	r3, #256	; 0x100
 801d200:	d0ed      	beq.n	801d1de <bt_le_adv_resume+0x20>
	err = le_adv_start_add_conn(adv, &conn);
 801d202:	a901      	add	r1, sp, #4
 801d204:	f7ef fd46 	bl	800cc94 <le_adv_start_add_conn>
	if (err) {
 801d208:	2800      	cmp	r0, #0
 801d20a:	d1e8      	bne.n	801d1de <bt_le_adv_resume+0x20>
	err = set_le_adv_enable(adv, true);
 801d20c:	2101      	movs	r1, #1
 801d20e:	4620      	mov	r0, r4
 801d210:	f7ff fcfe 	bl	801cc10 <set_le_adv_enable>
	if (err) {
 801d214:	b908      	cbnz	r0, 801d21a <bt_le_adv_resume+0x5c>
	bool persist_paused = false;
 801d216:	2400      	movs	r4, #0
 801d218:	e011      	b.n	801d23e <bt_le_adv_resume+0x80>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
 801d21a:	2100      	movs	r1, #0
 801d21c:	9801      	ldr	r0, [sp, #4]
 801d21e:	f7f3 f9c7 	bl	80105b0 <bt_conn_set_state>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 801d222:	f3bf 8f5b 	dmb	ish
 801d226:	e855 4f00 	ldrex	r4, [r5]
 801d22a:	f424 5380 	bic.w	r3, r4, #4096	; 0x1000
 801d22e:	e845 3200 	strex	r2, r3, [r5]
 801d232:	2a00      	cmp	r2, #0
 801d234:	d1f7      	bne.n	801d226 <bt_le_adv_resume+0x68>
 801d236:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
 801d23a:	f3c4 3400 	ubfx	r4, r4, #12, #1
	bt_conn_unref(conn);
 801d23e:	9801      	ldr	r0, [sp, #4]
 801d240:	f000 fa76 	bl	801d730 <bt_conn_unref>
	if (persist_paused) {
 801d244:	2c00      	cmp	r4, #0
 801d246:	d0ca      	beq.n	801d1de <bt_le_adv_resume+0x20>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 801d248:	f3bf 8f5b 	dmb	ish
 801d24c:	e855 3f00 	ldrex	r3, [r5]
 801d250:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801d254:	e845 3200 	strex	r2, r3, [r5]
 801d258:	2a00      	cmp	r2, #0
 801d25a:	d1f7      	bne.n	801d24c <bt_le_adv_resume+0x8e>
 801d25c:	f3bf 8f5b 	dmb	ish
}
 801d260:	e7bd      	b.n	801d1de <bt_le_adv_resume+0x20>

0801d262 <le_enh_conn_complete>:
{
 801d262:	b508      	push	{r3, lr}
	enh_conn_complete((void *)buf->data);
 801d264:	6880      	ldr	r0, [r0, #8]
 801d266:	f7f2 f9ef 	bl	800f648 <enh_conn_complete>
}
 801d26a:	bd08      	pop	{r3, pc}

0801d26c <le_legacy_conn_complete>:
{
 801d26c:	b510      	push	{r4, lr}
 801d26e:	b08c      	sub	sp, #48	; 0x30
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
 801d270:	6881      	ldr	r1, [r0, #8]
	enh.status         = evt->status;
 801d272:	780b      	ldrb	r3, [r1, #0]
 801d274:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
 801d278:	f8b1 3001 	ldrh.w	r3, [r1, #1]
 801d27c:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
 801d280:	78cb      	ldrb	r3, [r1, #3]
 801d282:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
 801d286:	f8b1 300b 	ldrh.w	r3, [r1, #11]
 801d28a:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
 801d28e:	f8b1 300d 	ldrh.w	r3, [r1, #13]
 801d292:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
 801d296:	f8b1 300f 	ldrh.w	r3, [r1, #15]
 801d29a:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
 801d29e:	7c4b      	ldrb	r3, [r1, #17]
 801d2a0:	f88d 301d 	strb.w	r3, [sp, #29]
 801d2a4:	2207      	movs	r2, #7
 801d2a6:	3104      	adds	r1, #4
 801d2a8:	a801      	add	r0, sp, #4
 801d2aa:	f7ff fb00 	bl	801c8ae <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
 801d2ae:	2400      	movs	r4, #0
 801d2b0:	940a      	str	r4, [sp, #40]	; 0x28
 801d2b2:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
	memcpy(dst, src, sizeof(*dst));
 801d2b6:	2206      	movs	r2, #6
 801d2b8:	a90a      	add	r1, sp, #40	; 0x28
 801d2ba:	f10d 000b 	add.w	r0, sp, #11
 801d2be:	f7ff faf6 	bl	801c8ae <memcpy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
 801d2c2:	9408      	str	r4, [sp, #32]
 801d2c4:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
 801d2c8:	2206      	movs	r2, #6
 801d2ca:	a908      	add	r1, sp, #32
 801d2cc:	f10d 0011 	add.w	r0, sp, #17
 801d2d0:	f7ff faed 	bl	801c8ae <memcpy>
	enh_conn_complete(&enh);
 801d2d4:	4668      	mov	r0, sp
 801d2d6:	f7f2 f9b7 	bl	800f648 <enh_conn_complete>
}
 801d2da:	b00c      	add	sp, #48	; 0x30
 801d2dc:	bd10      	pop	{r4, pc}

0801d2de <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
 801d2de:	b530      	push	{r4, r5, lr}
 801d2e0:	b0b1      	sub	sp, #196	; 0xc4
 801d2e2:	460c      	mov	r4, r1
 801d2e4:	4615      	mov	r5, r2
	psrc += length - 1;
 801d2e6:	300f      	adds	r0, #15
	uint8_t *pdst = (uint8_t *)dst;
 801d2e8:	466b      	mov	r3, sp
	for (; length > 0; length--) {
 801d2ea:	2210      	movs	r2, #16
 801d2ec:	b12a      	cbz	r2, 801d2fa <bt_encrypt_le+0x1c>
		*pdst++ = *psrc--;
 801d2ee:	f810 1901 	ldrb.w	r1, [r0], #-1
 801d2f2:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
 801d2f6:	3a01      	subs	r2, #1
 801d2f8:	e7f8      	b.n	801d2ec <bt_encrypt_le+0xe>
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	sys_memcpy_swap(tmp, key, 16);

	if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
 801d2fa:	4669      	mov	r1, sp
 801d2fc:	a804      	add	r0, sp, #16
 801d2fe:	f7ed f953 	bl	800a5a8 <tc_aes128_set_encrypt_key>
 801d302:	b1f0      	cbz	r0, 801d342 <bt_encrypt_le+0x64>
	psrc += length - 1;
 801d304:	f104 010f 	add.w	r1, r4, #15
	uint8_t *pdst = (uint8_t *)dst;
 801d308:	466b      	mov	r3, sp
	for (; length > 0; length--) {
 801d30a:	2410      	movs	r4, #16
 801d30c:	e004      	b.n	801d318 <bt_encrypt_le+0x3a>
		*pdst++ = *psrc--;
 801d30e:	f811 2901 	ldrb.w	r2, [r1], #-1
 801d312:	f803 2b01 	strb.w	r2, [r3], #1
	for (; length > 0; length--) {
 801d316:	3c01      	subs	r4, #1
 801d318:	2c00      	cmp	r4, #0
 801d31a:	d1f8      	bne.n	801d30e <bt_encrypt_le+0x30>
		return -EINVAL;
	}

	sys_memcpy_swap(tmp, plaintext, 16);

	if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
 801d31c:	aa04      	add	r2, sp, #16
 801d31e:	4669      	mov	r1, sp
 801d320:	4628      	mov	r0, r5
 801d322:	f7ed f99f 	bl	800a664 <tc_aes_encrypt>
 801d326:	b178      	cbz	r0, 801d348 <bt_encrypt_le+0x6a>
	for (i = 0; i < (length/2); i++) {
 801d328:	2c07      	cmp	r4, #7
 801d32a:	d807      	bhi.n	801d33c <bt_encrypt_le+0x5e>
		uint8_t tmp = ((uint8_t *)buf)[i];
 801d32c:	5d2a      	ldrb	r2, [r5, r4]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
 801d32e:	f1c4 030f 	rsb	r3, r4, #15
 801d332:	5ce9      	ldrb	r1, [r5, r3]
 801d334:	5529      	strb	r1, [r5, r4]
		((uint8_t *)buf)[length - 1 - i] = tmp;
 801d336:	54ea      	strb	r2, [r5, r3]
	for (i = 0; i < (length/2); i++) {
 801d338:	3401      	adds	r4, #1
 801d33a:	e7f5      	b.n	801d328 <bt_encrypt_le+0x4a>

	sys_mem_swap(enc_data, 16);

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
 801d33c:	2000      	movs	r0, #0
}
 801d33e:	b031      	add	sp, #196	; 0xc4
 801d340:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
 801d342:	f06f 0015 	mvn.w	r0, #21
 801d346:	e7fa      	b.n	801d33e <bt_encrypt_le+0x60>
		return -EINVAL;
 801d348:	f06f 0015 	mvn.w	r0, #21
 801d34c:	e7f7      	b.n	801d33e <bt_encrypt_le+0x60>

0801d34e <reset_pairing>:
	conn->required_sec_level = conn->sec_level;
 801d34e:	7a43      	ldrb	r3, [r0, #9]
 801d350:	7283      	strb	r3, [r0, #10]
}
 801d352:	4770      	bx	lr

0801d354 <bt_conn_set_param_le>:
	conn->le.interval_min = param->interval_min;
 801d354:	880b      	ldrh	r3, [r1, #0]
 801d356:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
 801d35a:	884b      	ldrh	r3, [r1, #2]
 801d35c:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
 801d360:	888b      	ldrh	r3, [r1, #4]
 801d362:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
 801d366:	88cb      	ldrh	r3, [r1, #6]
 801d368:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
}
 801d36c:	4770      	bx	lr

0801d36e <create_param_validate>:
}
 801d36e:	2001      	movs	r0, #1
 801d370:	4770      	bx	lr

0801d372 <start_security>:
{
 801d372:	b508      	push	{r3, lr}
		return bt_smp_start_security(conn);
 801d374:	f002 febb 	bl	80200ee <bt_smp_start_security>
}
 801d378:	bd08      	pop	{r3, pc}

0801d37a <tx_notify>:
{
 801d37a:	b570      	push	{r4, r5, r6, lr}
 801d37c:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
 801d37e:	e010      	b.n	801d3a2 <tx_notify+0x28>
 801d380:	f383 8811 	msr	BASEPRI, r3
 801d384:	f3bf 8f6f 	isb	sy
}
 801d388:	bd70      	pop	{r4, r5, r6, pc}
	list->tail = node;
 801d38a:	6262      	str	r2, [r4, #36]	; 0x24
 801d38c:	f383 8811 	msr	BASEPRI, r3
 801d390:	f3bf 8f6f 	isb	sy
		cb = tx->cb;
 801d394:	6845      	ldr	r5, [r0, #4]
		user_data = tx->user_data;
 801d396:	6886      	ldr	r6, [r0, #8]
		tx_free(tx);
 801d398:	f7f2 fd2c 	bl	800fdf4 <tx_free>
		cb(conn, user_data);
 801d39c:	4631      	mov	r1, r6
 801d39e:	4620      	mov	r0, r4
 801d3a0:	47a8      	blx	r5
	__asm__ volatile(
 801d3a2:	f04f 0210 	mov.w	r2, #16
 801d3a6:	f3ef 8311 	mrs	r3, BASEPRI
 801d3aa:	f382 8811 	msr	BASEPRI, r2
 801d3ae:	f3bf 8f6f 	isb	sy
	return list->head;
 801d3b2:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
 801d3b4:	2800      	cmp	r0, #0
 801d3b6:	d0e3      	beq.n	801d380 <tx_notify+0x6>
	return node->next;
 801d3b8:	6802      	ldr	r2, [r0, #0]
	list->head = node;
 801d3ba:	6222      	str	r2, [r4, #32]
	return list->tail;
 801d3bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 801d3be:	4281      	cmp	r1, r0
 801d3c0:	d1e4      	bne.n	801d38c <tx_notify+0x12>
 801d3c2:	e7e2      	b.n	801d38a <tx_notify+0x10>

0801d3c4 <tx_complete_work>:
{
 801d3c4:	b508      	push	{r3, lr}
	tx_notify(conn);
 801d3c6:	3828      	subs	r0, #40	; 0x28
 801d3c8:	f7ff ffd7 	bl	801d37a <tx_notify>
}
 801d3cc:	bd08      	pop	{r3, pc}

0801d3ce <send_acl>:
{
 801d3ce:	b570      	push	{r4, r5, r6, lr}
 801d3d0:	4605      	mov	r5, r0
 801d3d2:	460c      	mov	r4, r1
	switch (flags) {
 801d3d4:	2a03      	cmp	r2, #3
 801d3d6:	d819      	bhi.n	801d40c <send_acl+0x3e>
 801d3d8:	e8df f002 	tbb	[pc, r2]
 801d3dc:	16021602 	.word	0x16021602
		flags = BT_ACL_CONT;
 801d3e0:	2600      	movs	r6, #0
	hdr = net_buf_push(buf, sizeof(*hdr));
 801d3e2:	2104      	movs	r1, #4
 801d3e4:	f104 0008 	add.w	r0, r4, #8
 801d3e8:	f003 f869 	bl	80204be <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
 801d3ec:	f9b5 3000 	ldrsh.w	r3, [r5]
 801d3f0:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
 801d3f4:	8003      	strh	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
 801d3f6:	89a3      	ldrh	r3, [r4, #12]
 801d3f8:	3b04      	subs	r3, #4
 801d3fa:	8043      	strh	r3, [r0, #2]
 801d3fc:	2302      	movs	r3, #2
 801d3fe:	7523      	strb	r3, [r4, #20]
	return bt_send(buf);
 801d400:	4620      	mov	r0, r4
 801d402:	f7f1 f921 	bl	800e648 <bt_send>
}
 801d406:	bd70      	pop	{r4, r5, r6, pc}
		flags = BT_ACL_CONT;
 801d408:	2601      	movs	r6, #1
 801d40a:	e7ea      	b.n	801d3e2 <send_acl+0x14>
 801d40c:	f06f 0015 	mvn.w	r0, #21
 801d410:	e7f9      	b.n	801d406 <send_acl+0x38>

0801d412 <process_unack_tx>:
{
 801d412:	b510      	push	{r4, lr}
 801d414:	4604      	mov	r4, r0
 801d416:	e028      	b.n	801d46a <process_unack_tx+0x58>
			conn->pending_no_cb--;
 801d418:	3b01      	subs	r3, #1
 801d41a:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
 801d41c:	f382 8811 	msr	BASEPRI, r2
 801d420:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
 801d424:	4620      	mov	r0, r4
 801d426:	f7f2 fd21 	bl	800fe6c <bt_conn_get_pkts>
 801d42a:	f7fb fc0d 	bl	8018c48 <z_impl_k_sem_give>
			continue;
 801d42e:	e01c      	b.n	801d46a <process_unack_tx+0x58>
	list->tail = node;
 801d430:	61a3      	str	r3, [r4, #24]
 801d432:	f382 8811 	msr	BASEPRI, r2
 801d436:	f3bf 8f6f 	isb	sy
		if (!node) {
 801d43a:	b350      	cbz	r0, 801d492 <process_unack_tx+0x80>
	__asm__ volatile(
 801d43c:	f04f 0210 	mov.w	r2, #16
 801d440:	f3ef 8311 	mrs	r3, BASEPRI
 801d444:	f382 8811 	msr	BASEPRI, r2
 801d448:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
 801d44c:	68c2      	ldr	r2, [r0, #12]
 801d44e:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
 801d450:	2200      	movs	r2, #0
 801d452:	60c2      	str	r2, [r0, #12]
	__asm__ volatile(
 801d454:	f383 8811 	msr	BASEPRI, r3
 801d458:	f3bf 8f6f 	isb	sy
		tx_free(tx);
 801d45c:	f7f2 fcca 	bl	800fdf4 <tx_free>
		k_sem_give(bt_conn_get_pkts(conn));
 801d460:	4620      	mov	r0, r4
 801d462:	f7f2 fd03 	bl	800fe6c <bt_conn_get_pkts>
 801d466:	f7fb fbef 	bl	8018c48 <z_impl_k_sem_give>
	__asm__ volatile(
 801d46a:	f04f 0310 	mov.w	r3, #16
 801d46e:	f3ef 8211 	mrs	r2, BASEPRI
 801d472:	f383 8811 	msr	BASEPRI, r3
 801d476:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
 801d47a:	69e3      	ldr	r3, [r4, #28]
 801d47c:	2b00      	cmp	r3, #0
 801d47e:	d1cb      	bne.n	801d418 <process_unack_tx+0x6>
	return list->head;
 801d480:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
 801d482:	2800      	cmp	r0, #0
 801d484:	d0d5      	beq.n	801d432 <process_unack_tx+0x20>
	return node->next;
 801d486:	6803      	ldr	r3, [r0, #0]
	list->head = node;
 801d488:	6163      	str	r3, [r4, #20]
	return list->tail;
 801d48a:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 801d48c:	4288      	cmp	r0, r1
 801d48e:	d1d0      	bne.n	801d432 <process_unack_tx+0x20>
 801d490:	e7ce      	b.n	801d430 <process_unack_tx+0x1e>
}
 801d492:	bd10      	pop	{r4, pc}

0801d494 <bt_conn_new>:
{
 801d494:	b510      	push	{r4, lr}
	for (i = 0; i < size; i++) {
 801d496:	2300      	movs	r3, #0
 801d498:	428b      	cmp	r3, r1
 801d49a:	d20b      	bcs.n	801d4b4 <bt_conn_new+0x20>
		if (!atomic_get(&conns[i].ref)) {
 801d49c:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 801d4a0:	eb00 1484 	add.w	r4, r0, r4, lsl #6
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 801d4a4:	f3bf 8f5b 	dmb	ish
 801d4a8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801d4aa:	f3bf 8f5b 	dmb	ish
 801d4ae:	b112      	cbz	r2, 801d4b6 <bt_conn_new+0x22>
	for (i = 0; i < size; i++) {
 801d4b0:	3301      	adds	r3, #1
 801d4b2:	e7f1      	b.n	801d498 <bt_conn_new+0x4>
	struct bt_conn *conn = NULL;
 801d4b4:	2400      	movs	r4, #0
	if (!conn) {
 801d4b6:	b18c      	cbz	r4, 801d4dc <bt_conn_new+0x48>
	(void)memset(conn, 0, sizeof(*conn));
 801d4b8:	22c0      	movs	r2, #192	; 0xc0
 801d4ba:	2100      	movs	r1, #0
 801d4bc:	4620      	mov	r0, r4
 801d4be:	f7ff fa1b 	bl	801c8f8 <memset>
	atomic_set(&conn->ref, 1);
 801d4c2:	f104 0354 	add.w	r3, r4, #84	; 0x54
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 801d4c6:	2201      	movs	r2, #1
 801d4c8:	f3bf 8f5b 	dmb	ish
 801d4cc:	e853 1f00 	ldrex	r1, [r3]
 801d4d0:	e843 2000 	strex	r0, r2, [r3]
 801d4d4:	2800      	cmp	r0, #0
 801d4d6:	d1f9      	bne.n	801d4cc <bt_conn_new+0x38>
 801d4d8:	f3bf 8f5b 	dmb	ish
}
 801d4dc:	4620      	mov	r0, r4
 801d4de:	bd10      	pop	{r4, pc}

0801d4e0 <bt_conn_le_start_encryption>:
{
 801d4e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d4e4:	4680      	mov	r8, r0
 801d4e6:	460f      	mov	r7, r1
 801d4e8:	4616      	mov	r6, r2
 801d4ea:	461d      	mov	r5, r3
 801d4ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
 801d4f0:	211c      	movs	r1, #28
 801d4f2:	f242 0019 	movw	r0, #8217	; 0x2019
 801d4f6:	f7ef fdd9 	bl	800d0ac <bt_hci_cmd_create>
	if (!buf) {
 801d4fa:	b360      	cbz	r0, 801d556 <bt_conn_le_start_encryption+0x76>
 801d4fc:	4682      	mov	sl, r0
	cp = net_buf_add(buf, sizeof(*cp));
 801d4fe:	211c      	movs	r1, #28
 801d500:	3008      	adds	r0, #8
 801d502:	f002 ffbb 	bl	802047c <net_buf_simple_add>
 801d506:	4604      	mov	r4, r0
	cp->handle = sys_cpu_to_le16(conn->handle);
 801d508:	f8b8 3000 	ldrh.w	r3, [r8]
 801d50c:	f820 3b02 	strh.w	r3, [r0], #2
	memcpy(&cp->rand, rand, sizeof(cp->rand));
 801d510:	2208      	movs	r2, #8
 801d512:	4639      	mov	r1, r7
 801d514:	f7ff f9cb 	bl	801c8ae <memcpy>
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
 801d518:	2202      	movs	r2, #2
 801d51a:	4631      	mov	r1, r6
 801d51c:	f104 000a 	add.w	r0, r4, #10
 801d520:	f7ff f9c5 	bl	801c8ae <memcpy>
	memcpy(cp->ltk, ltk, len);
 801d524:	340c      	adds	r4, #12
 801d526:	464a      	mov	r2, r9
 801d528:	4629      	mov	r1, r5
 801d52a:	4620      	mov	r0, r4
 801d52c:	f7ff f9bf 	bl	801c8ae <memcpy>
	if (len < sizeof(cp->ltk)) {
 801d530:	f1b9 0f0f 	cmp.w	r9, #15
 801d534:	d907      	bls.n	801d546 <bt_conn_le_start_encryption+0x66>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
 801d536:	2200      	movs	r2, #0
 801d538:	4651      	mov	r1, sl
 801d53a:	f242 0019 	movw	r0, #8217	; 0x2019
 801d53e:	f7ef fdf1 	bl	800d124 <bt_hci_cmd_send_sync>
}
 801d542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		(void)memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
 801d546:	f1c9 0210 	rsb	r2, r9, #16
 801d54a:	2100      	movs	r1, #0
 801d54c:	eb04 0009 	add.w	r0, r4, r9
 801d550:	f7ff f9d2 	bl	801c8f8 <memset>
 801d554:	e7ef      	b.n	801d536 <bt_conn_le_start_encryption+0x56>
		return -ENOBUFS;
 801d556:	f06f 0036 	mvn.w	r0, #54	; 0x36
 801d55a:	e7f2      	b.n	801d542 <bt_conn_le_start_encryption+0x62>

0801d55c <bt_conn_set_security>:
	if (conn->state != BT_CONN_CONNECTED) {
 801d55c:	7b43      	ldrb	r3, [r0, #13]
 801d55e:	2b07      	cmp	r3, #7
 801d560:	d12f      	bne.n	801d5c2 <bt_conn_set_security+0x66>
{
 801d562:	b510      	push	{r4, lr}
 801d564:	4604      	mov	r4, r0
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
 801d566:	7a43      	ldrb	r3, [r0, #9]
 801d568:	428b      	cmp	r3, r1
 801d56a:	d22d      	bcs.n	801d5c8 <bt_conn_set_security+0x6c>
 801d56c:	7a83      	ldrb	r3, [r0, #10]
 801d56e:	428b      	cmp	r3, r1
 801d570:	d301      	bcc.n	801d576 <bt_conn_set_security+0x1a>
		return 0;
 801d572:	2000      	movs	r0, #0
 801d574:	e029      	b.n	801d5ca <bt_conn_set_security+0x6e>
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
 801d576:	1d03      	adds	r3, r0, #4
	if (val) {
 801d578:	09ca      	lsrs	r2, r1, #7
 801d57a:	d015      	beq.n	801d5a8 <bt_conn_set_security+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 801d57c:	f3bf 8f5b 	dmb	ish
 801d580:	e853 2f00 	ldrex	r2, [r3]
 801d584:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801d588:	e843 2000 	strex	r0, r2, [r3]
 801d58c:	2800      	cmp	r0, #0
 801d58e:	d1f7      	bne.n	801d580 <bt_conn_set_security+0x24>
 801d590:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
 801d594:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 801d598:	72a1      	strb	r1, [r4, #10]
	err = start_security(conn);
 801d59a:	4620      	mov	r0, r4
 801d59c:	f7ff fee9 	bl	801d372 <start_security>
	if (err) {
 801d5a0:	b198      	cbz	r0, 801d5ca <bt_conn_set_security+0x6e>
		conn->required_sec_level = conn->sec_level;
 801d5a2:	7a63      	ldrb	r3, [r4, #9]
 801d5a4:	72a3      	strb	r3, [r4, #10]
 801d5a6:	e010      	b.n	801d5ca <bt_conn_set_security+0x6e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 801d5a8:	f3bf 8f5b 	dmb	ish
 801d5ac:	e853 2f00 	ldrex	r2, [r3]
 801d5b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801d5b4:	e843 2000 	strex	r0, r2, [r3]
 801d5b8:	2800      	cmp	r0, #0
 801d5ba:	d1f7      	bne.n	801d5ac <bt_conn_set_security+0x50>
 801d5bc:	f3bf 8f5b 	dmb	ish
 801d5c0:	e7e8      	b.n	801d594 <bt_conn_set_security+0x38>
		return -ENOTCONN;
 801d5c2:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
 801d5c6:	4770      	bx	lr
		return 0;
 801d5c8:	2000      	movs	r0, #0
}
 801d5ca:	bd10      	pop	{r4, pc}

0801d5cc <bt_conn_get_security>:
}
 801d5cc:	7a40      	ldrb	r0, [r0, #9]
 801d5ce:	4770      	bx	lr

0801d5d0 <bt_conn_reset_rx_state>:
{
 801d5d0:	b510      	push	{r4, lr}
 801d5d2:	4604      	mov	r4, r0
	if (!conn->rx) {
 801d5d4:	6900      	ldr	r0, [r0, #16]
 801d5d6:	b118      	cbz	r0, 801d5e0 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
 801d5d8:	f002 ff06 	bl	80203e8 <net_buf_unref>
	conn->rx = NULL;
 801d5dc:	2300      	movs	r3, #0
 801d5de:	6123      	str	r3, [r4, #16]
}
 801d5e0:	bd10      	pop	{r4, pc}

0801d5e2 <conn_prepare_events>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 801d5e2:	f3bf 8f5b 	dmb	ish
 801d5e6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 801d5e8:	f3bf 8f5b 	dmb	ish
	if (!atomic_get(&conn->ref)) {
 801d5ec:	b33b      	cbz	r3, 801d63e <conn_prepare_events+0x5c>
{
 801d5ee:	b510      	push	{r4, lr}
 801d5f0:	460c      	mov	r4, r1
	if (conn->state == BT_CONN_DISCONNECTED &&
 801d5f2:	7b43      	ldrb	r3, [r0, #13]
 801d5f4:	b983      	cbnz	r3, 801d618 <conn_prepare_events+0x36>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
 801d5f6:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 801d5f8:	f3bf 8f5b 	dmb	ish
 801d5fc:	e853 2f00 	ldrex	r2, [r3]
 801d600:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 801d604:	e843 1c00 	strex	ip, r1, [r3]
 801d608:	f1bc 0f00 	cmp.w	ip, #0
 801d60c:	d1f6      	bne.n	801d5fc <conn_prepare_events+0x1a>
 801d60e:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
 801d612:	f012 0f40 	tst.w	r2, #64	; 0x40
 801d616:	d10d      	bne.n	801d634 <conn_prepare_events+0x52>
	if (conn->state != BT_CONN_CONNECTED) {
 801d618:	7b43      	ldrb	r3, [r0, #13]
 801d61a:	2b07      	cmp	r3, #7
 801d61c:	d112      	bne.n	801d644 <conn_prepare_events+0x62>
	k_poll_event_init(&events[0],
 801d61e:	f100 0334 	add.w	r3, r0, #52	; 0x34
 801d622:	2200      	movs	r2, #0
 801d624:	2104      	movs	r1, #4
 801d626:	4620      	mov	r0, r4
 801d628:	f004 ffe8 	bl	80225fc <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
 801d62c:	2301      	movs	r3, #1
 801d62e:	7323      	strb	r3, [r4, #12]
	return 0;
 801d630:	2000      	movs	r0, #0
}
 801d632:	bd10      	pop	{r4, pc}
		conn_cleanup(conn);
 801d634:	f7f2 fd74 	bl	8010120 <conn_cleanup>
		return -ENOTCONN;
 801d638:	f06f 0038 	mvn.w	r0, #56	; 0x38
 801d63c:	e7f9      	b.n	801d632 <conn_prepare_events+0x50>
		return -ENOTCONN;
 801d63e:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
 801d642:	4770      	bx	lr
		return -ENOTCONN;
 801d644:	f06f 0038 	mvn.w	r0, #56	; 0x38
 801d648:	e7f3      	b.n	801d632 <conn_prepare_events+0x50>

0801d64a <bt_conn_add_le>:
{
 801d64a:	b570      	push	{r4, r5, r6, lr}
 801d64c:	4606      	mov	r6, r0
 801d64e:	460d      	mov	r5, r1
	struct bt_conn *conn = acl_conn_new();
 801d650:	f7f2 fd12 	bl	8010078 <acl_conn_new>
	if (!conn) {
 801d654:	4604      	mov	r4, r0
 801d656:	b178      	cbz	r0, 801d678 <bt_conn_add_le+0x2e>
	conn->id = id;
 801d658:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
 801d65a:	2207      	movs	r2, #7
 801d65c:	4629      	mov	r1, r5
 801d65e:	3088      	adds	r0, #136	; 0x88
 801d660:	f7ff f925 	bl	801c8ae <memcpy>
	conn->sec_level = BT_SECURITY_L1;
 801d664:	2301      	movs	r3, #1
 801d666:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
 801d668:	72a3      	strb	r3, [r4, #10]
	conn->type = BT_CONN_TYPE_LE;
 801d66a:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
 801d66c:	2318      	movs	r3, #24
 801d66e:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
 801d672:	2328      	movs	r3, #40	; 0x28
 801d674:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
}
 801d678:	4620      	mov	r0, r4
 801d67a:	bd70      	pop	{r4, r5, r6, pc}

0801d67c <bt_conn_is_peer_addr_le>:
{
 801d67c:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
 801d67e:	7a03      	ldrb	r3, [r0, #8]
 801d680:	428b      	cmp	r3, r1
 801d682:	d001      	beq.n	801d688 <bt_conn_is_peer_addr_le+0xc>
		return false;
 801d684:	2000      	movs	r0, #0
}
 801d686:	bd38      	pop	{r3, r4, r5, pc}
 801d688:	4604      	mov	r4, r0
 801d68a:	4615      	mov	r5, r2
	return memcmp(a, b, sizeof(*a));
 801d68c:	2207      	movs	r2, #7
 801d68e:	f100 0188 	add.w	r1, r0, #136	; 0x88
 801d692:	4628      	mov	r0, r5
 801d694:	f7ff f8f3 	bl	801c87e <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
 801d698:	b1a8      	cbz	r0, 801d6c6 <bt_conn_is_peer_addr_le+0x4a>
	if (conn->role == BT_HCI_ROLE_MASTER) {
 801d69a:	78e3      	ldrb	r3, [r4, #3]
 801d69c:	b14b      	cbz	r3, 801d6b2 <bt_conn_is_peer_addr_le+0x36>
 801d69e:	2207      	movs	r2, #7
 801d6a0:	f104 018f 	add.w	r1, r4, #143	; 0x8f
 801d6a4:	4628      	mov	r0, r5
 801d6a6:	f7ff f8ea 	bl	801c87e <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
 801d6aa:	fab0 f080 	clz	r0, r0
 801d6ae:	0940      	lsrs	r0, r0, #5
 801d6b0:	e7e9      	b.n	801d686 <bt_conn_is_peer_addr_le+0xa>
 801d6b2:	2207      	movs	r2, #7
 801d6b4:	f104 0196 	add.w	r1, r4, #150	; 0x96
 801d6b8:	4628      	mov	r0, r5
 801d6ba:	f7ff f8e0 	bl	801c87e <memcmp>
		return bt_addr_le_cmp(peer, &conn->le.resp_addr) == 0;
 801d6be:	fab0 f080 	clz	r0, r0
 801d6c2:	0940      	lsrs	r0, r0, #5
 801d6c4:	e7df      	b.n	801d686 <bt_conn_is_peer_addr_le+0xa>
		return true;
 801d6c6:	2001      	movs	r0, #1
 801d6c8:	e7dd      	b.n	801d686 <bt_conn_is_peer_addr_le+0xa>

0801d6ca <bt_conn_ref>:
	atomic_val_t old = atomic_inc(&conn->ref);
 801d6ca:	f100 0354 	add.w	r3, r0, #84	; 0x54
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 801d6ce:	f3bf 8f5b 	dmb	ish
 801d6d2:	e853 2f00 	ldrex	r2, [r3]
 801d6d6:	3201      	adds	r2, #1
 801d6d8:	e843 2100 	strex	r1, r2, [r3]
 801d6dc:	2900      	cmp	r1, #0
 801d6de:	d1f8      	bne.n	801d6d2 <bt_conn_ref+0x8>
 801d6e0:	f3bf 8f5b 	dmb	ish
}
 801d6e4:	4770      	bx	lr

0801d6e6 <conn_lookup_handle>:
{
 801d6e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d6e8:	4605      	mov	r5, r0
	for (i = 0; i < size; i++) {
 801d6ea:	2400      	movs	r4, #0
 801d6ec:	e000      	b.n	801d6f0 <conn_lookup_handle+0xa>
 801d6ee:	3401      	adds	r4, #1
 801d6f0:	428c      	cmp	r4, r1
 801d6f2:	d21b      	bcs.n	801d72c <conn_lookup_handle+0x46>
		if (!atomic_get(&conns[i].ref)) {
 801d6f4:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 801d6f8:	0187      	lsls	r7, r0, #6
 801d6fa:	eb05 1080 	add.w	r0, r5, r0, lsl #6
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 801d6fe:	f3bf 8f5b 	dmb	ish
 801d702:	6d43      	ldr	r3, [r0, #84]	; 0x54
 801d704:	f3bf 8f5b 	dmb	ish
 801d708:	2b00      	cmp	r3, #0
 801d70a:	d0f0      	beq.n	801d6ee <conn_lookup_handle+0x8>
 801d70c:	7b43      	ldrb	r3, [r0, #13]
 801d70e:	2b01      	cmp	r3, #1
 801d710:	d006      	beq.n	801d720 <conn_lookup_handle+0x3a>
 801d712:	b25e      	sxtb	r6, r3
 801d714:	2e00      	cmp	r6, #0
 801d716:	d0ea      	beq.n	801d6ee <conn_lookup_handle+0x8>
 801d718:	3b07      	subs	r3, #7
 801d71a:	b2db      	uxtb	r3, r3
 801d71c:	2b01      	cmp	r3, #1
 801d71e:	d8e6      	bhi.n	801d6ee <conn_lookup_handle+0x8>
		if (conns[i].handle == handle) {
 801d720:	5beb      	ldrh	r3, [r5, r7]
 801d722:	4293      	cmp	r3, r2
 801d724:	d1e3      	bne.n	801d6ee <conn_lookup_handle+0x8>
			return bt_conn_ref(&conns[i]);
 801d726:	f7ff ffd0 	bl	801d6ca <bt_conn_ref>
 801d72a:	e000      	b.n	801d72e <conn_lookup_handle+0x48>
	return NULL;
 801d72c:	2000      	movs	r0, #0
}
 801d72e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d730 <bt_conn_unref>:
{
 801d730:	b508      	push	{r3, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
 801d732:	f100 0354 	add.w	r3, r0, #84	; 0x54
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 801d736:	f3bf 8f5b 	dmb	ish
 801d73a:	e853 2f00 	ldrex	r2, [r3]
 801d73e:	3a01      	subs	r2, #1
 801d740:	e843 2100 	strex	r1, r2, [r3]
 801d744:	2900      	cmp	r1, #0
 801d746:	d1f8      	bne.n	801d73a <bt_conn_unref+0xa>
 801d748:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 801d74c:	f3bf 8f5b 	dmb	ish
 801d750:	6d43      	ldr	r3, [r0, #84]	; 0x54
 801d752:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
 801d756:	b103      	cbz	r3, 801d75a <bt_conn_unref+0x2a>
}
 801d758:	bd08      	pop	{r3, pc}
		bt_le_adv_resume();
 801d75a:	f7ff fd30 	bl	801d1be <bt_le_adv_resume>
}
 801d75e:	e7fb      	b.n	801d758 <bt_conn_unref+0x28>

0801d760 <conn_disconnect>:
{
 801d760:	b538      	push	{r3, r4, r5, lr}
 801d762:	4604      	mov	r4, r0
	err = bt_hci_disconnect(conn->handle, reason);
 801d764:	8800      	ldrh	r0, [r0, #0]
 801d766:	f7ff fbda 	bl	801cf1e <bt_hci_disconnect>
	if (err) {
 801d76a:	4605      	mov	r5, r0
 801d76c:	b108      	cbz	r0, 801d772 <conn_disconnect+0x12>
}
 801d76e:	4628      	mov	r0, r5
 801d770:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
 801d772:	2108      	movs	r1, #8
 801d774:	4620      	mov	r0, r4
 801d776:	f7f2 ff1b 	bl	80105b0 <bt_conn_set_state>
	return 0;
 801d77a:	e7f8      	b.n	801d76e <conn_disconnect+0xe>

0801d77c <bt_conn_get_dst>:
}
 801d77c:	3088      	adds	r0, #136	; 0x88
 801d77e:	4770      	bx	lr

0801d780 <bt_conn_le_phy_update>:
{
 801d780:	b510      	push	{r4, lr}
 801d782:	b082      	sub	sp, #8
 801d784:	460b      	mov	r3, r1
	if ((param->options & BT_CONN_LE_PHY_OPT_CODED_S2) &&
 801d786:	880a      	ldrh	r2, [r1, #0]
 801d788:	f002 0103 	and.w	r1, r2, #3
 801d78c:	2903      	cmp	r1, #3
 801d78e:	d007      	beq.n	801d7a0 <bt_conn_le_phy_update+0x20>
	} else if (param->options & BT_CONN_LE_PHY_OPT_CODED_S2) {
 801d790:	f012 0f01 	tst.w	r2, #1
 801d794:	d111      	bne.n	801d7ba <bt_conn_le_phy_update+0x3a>
	} else if (param->options & BT_CONN_LE_PHY_OPT_CODED_S8) {
 801d796:	f012 0f02 	tst.w	r2, #2
 801d79a:	d010      	beq.n	801d7be <bt_conn_le_phy_update+0x3e>
		phy_opts = BT_HCI_LE_PHY_CODED_S8;
 801d79c:	2402      	movs	r4, #2
 801d79e:	e000      	b.n	801d7a2 <bt_conn_le_phy_update+0x22>
		phy_opts = BT_HCI_LE_PHY_CODED_ANY;
 801d7a0:	2400      	movs	r4, #0
	if (param->pref_tx_phy == BT_GAP_LE_PHY_NONE) {
 801d7a2:	789a      	ldrb	r2, [r3, #2]
 801d7a4:	b16a      	cbz	r2, 801d7c2 <bt_conn_le_phy_update+0x42>
	all_phys = 0U;
 801d7a6:	2100      	movs	r1, #0
	if (param->pref_rx_phy == BT_GAP_LE_PHY_NONE) {
 801d7a8:	78db      	ldrb	r3, [r3, #3]
 801d7aa:	b90b      	cbnz	r3, 801d7b0 <bt_conn_le_phy_update+0x30>
		all_phys |= BT_HCI_LE_PHY_RX_ANY;
 801d7ac:	f041 0102 	orr.w	r1, r1, #2
	return bt_le_set_phy(conn, all_phys, param->pref_tx_phy,
 801d7b0:	9400      	str	r4, [sp, #0]
 801d7b2:	f7ff fbe9 	bl	801cf88 <bt_le_set_phy>
}
 801d7b6:	b002      	add	sp, #8
 801d7b8:	bd10      	pop	{r4, pc}
		phy_opts = BT_HCI_LE_PHY_CODED_S2;
 801d7ba:	2401      	movs	r4, #1
 801d7bc:	e7f1      	b.n	801d7a2 <bt_conn_le_phy_update+0x22>
		phy_opts = BT_HCI_LE_PHY_CODED_ANY;
 801d7be:	2400      	movs	r4, #0
 801d7c0:	e7ef      	b.n	801d7a2 <bt_conn_le_phy_update+0x22>
		all_phys |= BT_HCI_LE_PHY_TX_ANY;
 801d7c2:	2101      	movs	r1, #1
 801d7c4:	e7f0      	b.n	801d7a8 <bt_conn_le_phy_update+0x28>

0801d7c6 <bt_conn_le_conn_update>:
{
 801d7c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d7c8:	4606      	mov	r6, r0
 801d7ca:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
 801d7cc:	210e      	movs	r1, #14
 801d7ce:	f242 0013 	movw	r0, #8211	; 0x2013
 801d7d2:	f7ef fc6b 	bl	800d0ac <bt_hci_cmd_create>
	if (!buf) {
 801d7d6:	b1d0      	cbz	r0, 801d80e <bt_conn_le_conn_update+0x48>
 801d7d8:	4607      	mov	r7, r0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
 801d7da:	210e      	movs	r1, #14
 801d7dc:	3008      	adds	r0, #8
 801d7de:	f002 fe4d 	bl	802047c <net_buf_simple_add>
 801d7e2:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
 801d7e4:	220e      	movs	r2, #14
 801d7e6:	2100      	movs	r1, #0
 801d7e8:	f7ff f886 	bl	801c8f8 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
 801d7ec:	8833      	ldrh	r3, [r6, #0]
 801d7ee:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
 801d7f0:	882b      	ldrh	r3, [r5, #0]
 801d7f2:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
 801d7f4:	886b      	ldrh	r3, [r5, #2]
 801d7f6:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
 801d7f8:	88ab      	ldrh	r3, [r5, #4]
 801d7fa:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
 801d7fc:	88eb      	ldrh	r3, [r5, #6]
 801d7fe:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
 801d800:	2200      	movs	r2, #0
 801d802:	4639      	mov	r1, r7
 801d804:	f242 0013 	movw	r0, #8211	; 0x2013
 801d808:	f7ef fc8c 	bl	800d124 <bt_hci_cmd_send_sync>
}
 801d80c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
 801d80e:	f06f 0036 	mvn.w	r0, #54	; 0x36
 801d812:	e7fb      	b.n	801d80c <bt_conn_le_conn_update+0x46>

0801d814 <bt_conn_le_param_update>:
{
 801d814:	4603      	mov	r3, r0
	if (conn->le.interval >= param->interval_min &&
 801d816:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
 801d81a:	8808      	ldrh	r0, [r1, #0]
 801d81c:	4282      	cmp	r2, r0
 801d81e:	d307      	bcc.n	801d830 <bt_conn_le_param_update+0x1c>
	    conn->le.interval <= param->interval_max &&
 801d820:	8848      	ldrh	r0, [r1, #2]
	if (conn->le.interval >= param->interval_min &&
 801d822:	4282      	cmp	r2, r0
 801d824:	d804      	bhi.n	801d830 <bt_conn_le_param_update+0x1c>
	    conn->le.latency == param->latency &&
 801d826:	f8b3 00a4 	ldrh.w	r0, [r3, #164]	; 0xa4
 801d82a:	888a      	ldrh	r2, [r1, #4]
	    conn->le.interval <= param->interval_max &&
 801d82c:	4290      	cmp	r0, r2
 801d82e:	d026      	beq.n	801d87e <bt_conn_le_param_update+0x6a>
{
 801d830:	b510      	push	{r4, lr}
	    conn->role == BT_CONN_ROLE_MASTER) {
 801d832:	78da      	ldrb	r2, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
 801d834:	b3c2      	cbz	r2, 801d8a8 <bt_conn_le_param_update+0x94>
		if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_UPDATE)) {
 801d836:	1d1c      	adds	r4, r3, #4
 801d838:	f3bf 8f5b 	dmb	ish
 801d83c:	685a      	ldr	r2, [r3, #4]
 801d83e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
 801d842:	f3c2 2000 	ubfx	r0, r2, #8, #1
 801d846:	f412 7f80 	tst.w	r2, #256	; 0x100
 801d84a:	d131      	bne.n	801d8b0 <bt_conn_le_param_update+0x9c>
		conn->le.interval_min = param->interval_min;
 801d84c:	880a      	ldrh	r2, [r1, #0]
 801d84e:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		conn->le.interval_max = param->interval_max;
 801d852:	884a      	ldrh	r2, [r1, #2]
 801d854:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
		conn->le.pending_latency = param->latency;
 801d858:	888a      	ldrh	r2, [r1, #4]
 801d85a:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		conn->le.pending_timeout = param->timeout;
 801d85e:	88ca      	ldrh	r2, [r1, #6]
 801d860:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 801d864:	f3bf 8f5b 	dmb	ish
 801d868:	e854 3f00 	ldrex	r3, [r4]
 801d86c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801d870:	e844 3200 	strex	r2, r3, [r4]
 801d874:	2a00      	cmp	r2, #0
 801d876:	d1f7      	bne.n	801d868 <bt_conn_le_param_update+0x54>
 801d878:	f3bf 8f5b 	dmb	ish
}
 801d87c:	bd10      	pop	{r4, pc}
	    conn->le.timeout == param->timeout) {
 801d87e:	f8b3 00a6 	ldrh.w	r0, [r3, #166]	; 0xa6
 801d882:	88ca      	ldrh	r2, [r1, #6]
	    conn->le.latency == param->latency &&
 801d884:	4290      	cmp	r0, r2
 801d886:	d1d3      	bne.n	801d830 <bt_conn_le_param_update+0x1c>
		atomic_clear_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET);
 801d888:	3304      	adds	r3, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 801d88a:	f3bf 8f5b 	dmb	ish
 801d88e:	e853 2f00 	ldrex	r2, [r3]
 801d892:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801d896:	e843 2100 	strex	r1, r2, [r3]
 801d89a:	2900      	cmp	r1, #0
 801d89c:	d1f7      	bne.n	801d88e <bt_conn_le_param_update+0x7a>
 801d89e:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
 801d8a2:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
 801d8a6:	4770      	bx	lr
		return send_conn_le_param_update(conn, param);
 801d8a8:	4618      	mov	r0, r3
 801d8aa:	f7f3 f955 	bl	8010b58 <send_conn_le_param_update>
 801d8ae:	e7e5      	b.n	801d87c <bt_conn_le_param_update+0x68>
			return send_conn_le_param_update(conn, param);
 801d8b0:	4618      	mov	r0, r3
 801d8b2:	f7f3 f951 	bl	8010b58 <send_conn_le_param_update>
 801d8b6:	e7e1      	b.n	801d87c <bt_conn_le_param_update+0x68>

0801d8b8 <l2cap_connected>:
}
 801d8b8:	4770      	bx	lr

0801d8ba <l2cap_disconnected>:
}
 801d8ba:	4770      	bx	lr

0801d8bc <l2cap_chan_recv>:
{
 801d8bc:	b510      	push	{r4, lr}
 801d8be:	460c      	mov	r4, r1
	chan->ops->recv(chan, buf);
 801d8c0:	6843      	ldr	r3, [r0, #4]
 801d8c2:	691b      	ldr	r3, [r3, #16]
 801d8c4:	4798      	blx	r3
	net_buf_unref(buf);
 801d8c6:	4620      	mov	r0, r4
 801d8c8:	f002 fd8e 	bl	80203e8 <net_buf_unref>
}
 801d8cc:	bd10      	pop	{r4, pc}

0801d8ce <bt_l2cap_chan_remove>:
	return list->head;
 801d8ce:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 801d8d0:	b103      	cbz	r3, 801d8d4 <bt_l2cap_chan_remove+0x6>
 801d8d2:	3b08      	subs	r3, #8
 801d8d4:	2200      	movs	r2, #0
 801d8d6:	e017      	b.n	801d908 <bt_l2cap_chan_remove+0x3a>
{
 801d8d8:	b410      	push	{r4}
			sys_slist_remove(&conn->channels, prev, &chan->node);
 801d8da:	f103 0108 	add.w	r1, r3, #8
Z_GENLIST_REMOVE(slist, snode)
 801d8de:	b14a      	cbz	r2, 801d8f4 <bt_l2cap_chan_remove+0x26>
	return node->next;
 801d8e0:	689c      	ldr	r4, [r3, #8]
	parent->next = child;
 801d8e2:	6014      	str	r4, [r2, #0]
	return list->tail;
 801d8e4:	6d04      	ldr	r4, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
 801d8e6:	42a1      	cmp	r1, r4
 801d8e8:	d00b      	beq.n	801d902 <bt_l2cap_chan_remove+0x34>
	parent->next = child;
 801d8ea:	2200      	movs	r2, #0
 801d8ec:	609a      	str	r2, [r3, #8]
}
 801d8ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d8f2:	4770      	bx	lr
	return node->next;
 801d8f4:	689a      	ldr	r2, [r3, #8]
	list->head = node;
 801d8f6:	64c2      	str	r2, [r0, #76]	; 0x4c
	return list->tail;
 801d8f8:	6d04      	ldr	r4, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
 801d8fa:	42a1      	cmp	r1, r4
 801d8fc:	d1f5      	bne.n	801d8ea <bt_l2cap_chan_remove+0x1c>
	list->tail = node;
 801d8fe:	6502      	str	r2, [r0, #80]	; 0x50
}
 801d900:	e7f3      	b.n	801d8ea <bt_l2cap_chan_remove+0x1c>
	list->tail = node;
 801d902:	6502      	str	r2, [r0, #80]	; 0x50
}
 801d904:	e7f1      	b.n	801d8ea <bt_l2cap_chan_remove+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 801d906:	4613      	mov	r3, r2
 801d908:	b14b      	cbz	r3, 801d91e <bt_l2cap_chan_remove+0x50>
		if (chan == ch) {
 801d90a:	428b      	cmp	r3, r1
 801d90c:	d0e4      	beq.n	801d8d8 <bt_l2cap_chan_remove+0xa>
Z_GENLIST_PEEK_NEXT(slist, snode)
 801d90e:	f113 0208 	adds.w	r2, r3, #8
 801d912:	d0f8      	beq.n	801d906 <bt_l2cap_chan_remove+0x38>
	return node->next;
 801d914:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 801d916:	2b00      	cmp	r3, #0
 801d918:	d0f6      	beq.n	801d908 <bt_l2cap_chan_remove+0x3a>
 801d91a:	3b08      	subs	r3, #8
 801d91c:	e7f4      	b.n	801d908 <bt_l2cap_chan_remove+0x3a>
 801d91e:	4770      	bx	lr

0801d920 <bt_l2cap_chan_del>:
{
 801d920:	b538      	push	{r3, r4, r5, lr}
 801d922:	4604      	mov	r4, r0
	const struct bt_l2cap_chan_ops *ops = chan->ops;
 801d924:	6845      	ldr	r5, [r0, #4]
	if (!chan->conn) {
 801d926:	6803      	ldr	r3, [r0, #0]
 801d928:	b123      	cbz	r3, 801d934 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
 801d92a:	686b      	ldr	r3, [r5, #4]
 801d92c:	b103      	cbz	r3, 801d930 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
 801d92e:	4798      	blx	r3
	chan->conn = NULL;
 801d930:	2300      	movs	r3, #0
 801d932:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
 801d934:	68e3      	ldr	r3, [r4, #12]
 801d936:	b10b      	cbz	r3, 801d93c <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
 801d938:	4620      	mov	r0, r4
 801d93a:	4798      	blx	r3
	if (ops->released) {
 801d93c:	69eb      	ldr	r3, [r5, #28]
 801d93e:	b10b      	cbz	r3, 801d944 <bt_l2cap_chan_del+0x24>
		ops->released(chan);
 801d940:	4620      	mov	r0, r4
 801d942:	4798      	blx	r3
}
 801d944:	bd38      	pop	{r3, r4, r5, pc}

0801d946 <bt_l2cap_chan_add>:
{
 801d946:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
 801d948:	f101 0308 	add.w	r3, r1, #8
	parent->next = child;
 801d94c:	2400      	movs	r4, #0
 801d94e:	608c      	str	r4, [r1, #8]
	return list->tail;
 801d950:	6d04      	ldr	r4, [r0, #80]	; 0x50
Z_GENLIST_APPEND(slist, snode)
 801d952:	b134      	cbz	r4, 801d962 <bt_l2cap_chan_add+0x1c>
	parent->next = child;
 801d954:	6023      	str	r3, [r4, #0]
	list->tail = node;
 801d956:	6503      	str	r3, [r0, #80]	; 0x50
	chan->conn = conn;
 801d958:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
 801d95a:	60ca      	str	r2, [r1, #12]
}
 801d95c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d960:	4770      	bx	lr
 801d962:	6503      	str	r3, [r0, #80]	; 0x50
	list->head = node;
 801d964:	64c3      	str	r3, [r0, #76]	; 0x4c
}
 801d966:	e7f7      	b.n	801d958 <bt_l2cap_chan_add+0x12>

0801d968 <bt_l2cap_disconnected>:
{
 801d968:	b510      	push	{r4, lr}
	return list->head;
 801d96a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
 801d96c:	b140      	cbz	r0, 801d980 <bt_l2cap_disconnected+0x18>
 801d96e:	3808      	subs	r0, #8
 801d970:	d008      	beq.n	801d984 <bt_l2cap_disconnected+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
 801d972:	f110 0408 	adds.w	r4, r0, #8
 801d976:	d00a      	beq.n	801d98e <bt_l2cap_disconnected+0x26>
	return node->next;
 801d978:	6884      	ldr	r4, [r0, #8]
 801d97a:	b144      	cbz	r4, 801d98e <bt_l2cap_disconnected+0x26>
 801d97c:	3c08      	subs	r4, #8
 801d97e:	e006      	b.n	801d98e <bt_l2cap_disconnected+0x26>
 801d980:	4604      	mov	r4, r0
 801d982:	e004      	b.n	801d98e <bt_l2cap_disconnected+0x26>
 801d984:	4604      	mov	r4, r0
 801d986:	e002      	b.n	801d98e <bt_l2cap_disconnected+0x26>
 801d988:	4623      	mov	r3, r4
 801d98a:	4620      	mov	r0, r4
 801d98c:	461c      	mov	r4, r3
 801d98e:	b158      	cbz	r0, 801d9a8 <bt_l2cap_disconnected+0x40>
		bt_l2cap_chan_del(chan);
 801d990:	f7ff ffc6 	bl	801d920 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
 801d994:	2c00      	cmp	r4, #0
 801d996:	d0f7      	beq.n	801d988 <bt_l2cap_disconnected+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
 801d998:	f114 0308 	adds.w	r3, r4, #8
 801d99c:	d0f5      	beq.n	801d98a <bt_l2cap_disconnected+0x22>
	return node->next;
 801d99e:	68a3      	ldr	r3, [r4, #8]
 801d9a0:	2b00      	cmp	r3, #0
 801d9a2:	d0f2      	beq.n	801d98a <bt_l2cap_disconnected+0x22>
 801d9a4:	3b08      	subs	r3, #8
 801d9a6:	e7f0      	b.n	801d98a <bt_l2cap_disconnected+0x22>
}
 801d9a8:	bd10      	pop	{r4, pc}

0801d9aa <bt_l2cap_security_changed>:
{
 801d9aa:	b538      	push	{r3, r4, r5, lr}
 801d9ac:	460d      	mov	r5, r1
	return list->head;
 801d9ae:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
 801d9b0:	b140      	cbz	r0, 801d9c4 <bt_l2cap_security_changed+0x1a>
 801d9b2:	3808      	subs	r0, #8
 801d9b4:	d008      	beq.n	801d9c8 <bt_l2cap_security_changed+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
 801d9b6:	f110 0408 	adds.w	r4, r0, #8
 801d9ba:	d00a      	beq.n	801d9d2 <bt_l2cap_security_changed+0x28>
	return node->next;
 801d9bc:	6884      	ldr	r4, [r0, #8]
 801d9be:	b144      	cbz	r4, 801d9d2 <bt_l2cap_security_changed+0x28>
 801d9c0:	3c08      	subs	r4, #8
 801d9c2:	e006      	b.n	801d9d2 <bt_l2cap_security_changed+0x28>
 801d9c4:	4604      	mov	r4, r0
 801d9c6:	e004      	b.n	801d9d2 <bt_l2cap_security_changed+0x28>
 801d9c8:	4604      	mov	r4, r0
 801d9ca:	e002      	b.n	801d9d2 <bt_l2cap_security_changed+0x28>
 801d9cc:	4623      	mov	r3, r4
 801d9ce:	4620      	mov	r0, r4
 801d9d0:	461c      	mov	r4, r3
 801d9d2:	b170      	cbz	r0, 801d9f2 <bt_l2cap_security_changed+0x48>
		if (chan->ops->encrypt_change) {
 801d9d4:	6843      	ldr	r3, [r0, #4]
 801d9d6:	689b      	ldr	r3, [r3, #8]
 801d9d8:	b10b      	cbz	r3, 801d9de <bt_l2cap_security_changed+0x34>
			chan->ops->encrypt_change(chan, hci_status);
 801d9da:	4629      	mov	r1, r5
 801d9dc:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
 801d9de:	2c00      	cmp	r4, #0
 801d9e0:	d0f4      	beq.n	801d9cc <bt_l2cap_security_changed+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
 801d9e2:	f114 0308 	adds.w	r3, r4, #8
 801d9e6:	d0f2      	beq.n	801d9ce <bt_l2cap_security_changed+0x24>
	return node->next;
 801d9e8:	68a3      	ldr	r3, [r4, #8]
 801d9ea:	2b00      	cmp	r3, #0
 801d9ec:	d0ef      	beq.n	801d9ce <bt_l2cap_security_changed+0x24>
 801d9ee:	3b08      	subs	r3, #8
 801d9f0:	e7ed      	b.n	801d9ce <bt_l2cap_security_changed+0x24>
}
 801d9f2:	bd38      	pop	{r3, r4, r5, pc}

0801d9f4 <bt_l2cap_create_pdu_timeout>:
{
 801d9f4:	b508      	push	{r3, lr}
	return bt_conn_create_pdu_timeout(pool,
 801d9f6:	3104      	adds	r1, #4
 801d9f8:	f7f3 f93e 	bl	8010c78 <bt_conn_create_pdu_timeout>
}
 801d9fc:	bd08      	pop	{r3, pc}

0801d9fe <bt_l2cap_send_cb>:
{
 801d9fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801da00:	4605      	mov	r5, r0
 801da02:	460f      	mov	r7, r1
 801da04:	4614      	mov	r4, r2
 801da06:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
 801da08:	2104      	movs	r1, #4
 801da0a:	f102 0008 	add.w	r0, r2, #8
 801da0e:	f002 fd56 	bl	80204be <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
 801da12:	89a3      	ldrh	r3, [r4, #12]
 801da14:	3b04      	subs	r3, #4
 801da16:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
 801da18:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
 801da1a:	9b06      	ldr	r3, [sp, #24]
 801da1c:	4632      	mov	r2, r6
 801da1e:	4621      	mov	r1, r4
 801da20:	4628      	mov	r0, r5
 801da22:	f7f2 fc59 	bl	80102d8 <bt_conn_send_cb>
}
 801da26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801da28 <l2cap_send_reject>:
{
 801da28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801da2c:	b083      	sub	sp, #12
 801da2e:	4606      	mov	r6, r0
 801da30:	4690      	mov	r8, r2
 801da32:	461c      	mov	r4, r3
 801da34:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
 801da38:	1cbb      	adds	r3, r7, #2
 801da3a:	460a      	mov	r2, r1
 801da3c:	2101      	movs	r1, #1
 801da3e:	2000      	movs	r0, #0
 801da40:	f7f3 fb8a 	bl	8011158 <l2cap_create_le_sig_pdu>
	if (!buf) {
 801da44:	b1a8      	cbz	r0, 801da72 <l2cap_send_reject+0x4a>
 801da46:	4605      	mov	r5, r0
	rej = net_buf_add(buf, sizeof(*rej));
 801da48:	f100 0908 	add.w	r9, r0, #8
 801da4c:	2102      	movs	r1, #2
 801da4e:	4648      	mov	r0, r9
 801da50:	f002 fd14 	bl	802047c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
 801da54:	f8a0 8000 	strh.w	r8, [r0]
	if (data) {
 801da58:	b124      	cbz	r4, 801da64 <l2cap_send_reject+0x3c>
		net_buf_add_mem(buf, data, data_len);
 801da5a:	463a      	mov	r2, r7
 801da5c:	4621      	mov	r1, r4
 801da5e:	4648      	mov	r0, r9
 801da60:	f002 fd12 	bl	8020488 <net_buf_simple_add_mem>
 801da64:	2300      	movs	r3, #0
 801da66:	9300      	str	r3, [sp, #0]
 801da68:	462a      	mov	r2, r5
 801da6a:	2105      	movs	r1, #5
 801da6c:	4630      	mov	r0, r6
 801da6e:	f7ff ffc6 	bl	801d9fe <bt_l2cap_send_cb>
}
 801da72:	b003      	add	sp, #12
 801da74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801da78 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
 801da78:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 801da7a:	b110      	cbz	r0, 801da82 <bt_l2cap_le_lookup_tx_cid+0xa>
 801da7c:	3808      	subs	r0, #8
 801da7e:	e000      	b.n	801da82 <bt_l2cap_le_lookup_tx_cid+0xa>
 801da80:	3808      	subs	r0, #8
 801da82:	b148      	cbz	r0, 801da98 <bt_l2cap_le_lookup_tx_cid+0x20>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
 801da84:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
 801da88:	428b      	cmp	r3, r1
 801da8a:	d005      	beq.n	801da98 <bt_l2cap_le_lookup_tx_cid+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
 801da8c:	f110 0308 	adds.w	r3, r0, #8
 801da90:	d003      	beq.n	801da9a <bt_l2cap_le_lookup_tx_cid+0x22>
	return node->next;
 801da92:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 801da94:	2800      	cmp	r0, #0
 801da96:	d1f3      	bne.n	801da80 <bt_l2cap_le_lookup_tx_cid+0x8>
}
 801da98:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 801da9a:	4618      	mov	r0, r3
 801da9c:	e7f1      	b.n	801da82 <bt_l2cap_le_lookup_tx_cid+0xa>

0801da9e <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
 801da9e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 801daa0:	b110      	cbz	r0, 801daa8 <bt_l2cap_le_lookup_rx_cid+0xa>
 801daa2:	3808      	subs	r0, #8
 801daa4:	e000      	b.n	801daa8 <bt_l2cap_le_lookup_rx_cid+0xa>
 801daa6:	3808      	subs	r0, #8
 801daa8:	b148      	cbz	r0, 801dabe <bt_l2cap_le_lookup_rx_cid+0x20>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
 801daaa:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
 801daae:	428b      	cmp	r3, r1
 801dab0:	d005      	beq.n	801dabe <bt_l2cap_le_lookup_rx_cid+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
 801dab2:	f110 0308 	adds.w	r3, r0, #8
 801dab6:	d003      	beq.n	801dac0 <bt_l2cap_le_lookup_rx_cid+0x22>
	return node->next;
 801dab8:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 801daba:	2800      	cmp	r0, #0
 801dabc:	d1f3      	bne.n	801daa6 <bt_l2cap_le_lookup_rx_cid+0x8>
}
 801dabe:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 801dac0:	4618      	mov	r0, r3
 801dac2:	e7f1      	b.n	801daa8 <bt_l2cap_le_lookup_rx_cid+0xa>

0801dac4 <bt_l2cap_update_conn_param>:
{
 801dac4:	b570      	push	{r4, r5, r6, lr}
 801dac6:	b082      	sub	sp, #8
 801dac8:	4605      	mov	r5, r0
 801daca:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
 801dacc:	f7f3 fa4a 	bl	8010f64 <get_ident>
 801dad0:	4602      	mov	r2, r0
 801dad2:	2308      	movs	r3, #8
 801dad4:	2112      	movs	r1, #18
 801dad6:	2000      	movs	r0, #0
 801dad8:	f7f3 fb3e 	bl	8011158 <l2cap_create_le_sig_pdu>
	if (!buf) {
 801dadc:	b1b8      	cbz	r0, 801db0e <bt_l2cap_update_conn_param+0x4a>
 801dade:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
 801dae0:	2108      	movs	r1, #8
 801dae2:	4408      	add	r0, r1
 801dae4:	f002 fcca 	bl	802047c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
 801dae8:	8823      	ldrh	r3, [r4, #0]
 801daea:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
 801daec:	8863      	ldrh	r3, [r4, #2]
 801daee:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
 801daf0:	88a3      	ldrh	r3, [r4, #4]
 801daf2:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
 801daf4:	88e3      	ldrh	r3, [r4, #6]
 801daf6:	80c3      	strh	r3, [r0, #6]
 801daf8:	2400      	movs	r4, #0
 801dafa:	9400      	str	r4, [sp, #0]
 801dafc:	4623      	mov	r3, r4
 801dafe:	4632      	mov	r2, r6
 801db00:	2105      	movs	r1, #5
 801db02:	4628      	mov	r0, r5
 801db04:	f7ff ff7b 	bl	801d9fe <bt_l2cap_send_cb>
	return 0;
 801db08:	4620      	mov	r0, r4
}
 801db0a:	b002      	add	sp, #8
 801db0c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
 801db0e:	f06f 000b 	mvn.w	r0, #11
 801db12:	e7fa      	b.n	801db0a <bt_l2cap_update_conn_param+0x46>

0801db14 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
 801db14:	4770      	bx	lr

0801db16 <att_sent>:
{
 801db16:	b508      	push	{r3, lr}
	if (chan->ops->sent) {
 801db18:	684b      	ldr	r3, [r1, #4]
 801db1a:	695b      	ldr	r3, [r3, #20]
 801db1c:	b10b      	cbz	r3, 801db22 <att_sent+0xc>
 801db1e:	4608      	mov	r0, r1
		chan->ops->sent(chan);
 801db20:	4798      	blx	r3
}
 801db22:	bd08      	pop	{r3, pc}

0801db24 <range_is_valid>:
	if (!start || !end) {
 801db24:	b120      	cbz	r0, 801db30 <range_is_valid+0xc>
 801db26:	b119      	cbz	r1, 801db30 <range_is_valid+0xc>
	if (start > end) {
 801db28:	4288      	cmp	r0, r1
 801db2a:	d806      	bhi.n	801db3a <range_is_valid+0x16>
	return true;
 801db2c:	2001      	movs	r0, #1
}
 801db2e:	4770      	bx	lr
		if (err) {
 801db30:	b10a      	cbz	r2, 801db36 <range_is_valid+0x12>
			*err = 0U;
 801db32:	2300      	movs	r3, #0
 801db34:	8013      	strh	r3, [r2, #0]
		return false;
 801db36:	2000      	movs	r0, #0
 801db38:	4770      	bx	lr
		if (err) {
 801db3a:	b102      	cbz	r2, 801db3e <range_is_valid+0x1a>
			*err = start;
 801db3c:	8010      	strh	r0, [r2, #0]
		return false;
 801db3e:	2000      	movs	r0, #0
 801db40:	4770      	bx	lr

0801db42 <err_to_att>:
	if (err < 0 && err >= -0xff) {
 801db42:	f110 0fff 	cmn.w	r0, #255	; 0xff
 801db46:	d201      	bcs.n	801db4c <err_to_att+0xa>
	return BT_ATT_ERR_UNLIKELY;
 801db48:	200e      	movs	r0, #14
}
 801db4a:	4770      	bx	lr
		return -err;
 801db4c:	4240      	negs	r0, r0
 801db4e:	b2c0      	uxtb	r0, r0
 801db50:	4770      	bx	lr

0801db52 <attr_read_type_cb>:
{
 801db52:	b410      	push	{r4}
	if (!data->rsp->len) {
 801db54:	68d4      	ldr	r4, [r2, #12]
 801db56:	7823      	ldrb	r3, [r4, #0]
 801db58:	b92b      	cbnz	r3, 801db66 <attr_read_type_cb+0x14>
		data->rsp->len = read + sizeof(*data->item);
 801db5a:	3102      	adds	r1, #2
 801db5c:	7021      	strb	r1, [r4, #0]
	return true;
 801db5e:	2001      	movs	r0, #1
}
 801db60:	f85d 4b04 	ldr.w	r4, [sp], #4
 801db64:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->item)) {
 801db66:	3102      	adds	r1, #2
 801db68:	428b      	cmp	r3, r1
 801db6a:	d005      	beq.n	801db78 <attr_read_type_cb+0x26>
		frag->len -= sizeof(*data->item);
 801db6c:	8983      	ldrh	r3, [r0, #12]
 801db6e:	3b02      	subs	r3, #2
 801db70:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
 801db72:	2000      	movs	r0, #0
 801db74:	6110      	str	r0, [r2, #16]
		return false;
 801db76:	e7f3      	b.n	801db60 <attr_read_type_cb+0xe>
	return true;
 801db78:	2001      	movs	r0, #1
 801db7a:	e7f1      	b.n	801db60 <attr_read_type_cb+0xe>

0801db7c <attr_read_group_cb>:
	if (!data->rsp->len) {
 801db7c:	68d0      	ldr	r0, [r2, #12]
 801db7e:	7803      	ldrb	r3, [r0, #0]
 801db80:	b91b      	cbnz	r3, 801db8a <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
 801db82:	3104      	adds	r1, #4
 801db84:	7001      	strb	r1, [r0, #0]
	return true;
 801db86:	2001      	movs	r0, #1
 801db88:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
 801db8a:	3104      	adds	r1, #4
 801db8c:	428b      	cmp	r3, r1
 801db8e:	d006      	beq.n	801db9e <attr_read_group_cb+0x22>
		data->buf->len -= sizeof(*data->group);
 801db90:	6891      	ldr	r1, [r2, #8]
 801db92:	898b      	ldrh	r3, [r1, #12]
 801db94:	3b04      	subs	r3, #4
 801db96:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
 801db98:	2000      	movs	r0, #0
 801db9a:	6110      	str	r0, [r2, #16]
		return false;
 801db9c:	4770      	bx	lr
	return true;
 801db9e:	2001      	movs	r0, #1
}
 801dba0:	4770      	bx	lr

0801dba2 <att_prepare_write_req>:
}
 801dba2:	2006      	movs	r0, #6
 801dba4:	4770      	bx	lr

0801dba6 <att_exec_write_req>:
}
 801dba6:	2006      	movs	r0, #6
 801dba8:	4770      	bx	lr

0801dbaa <att_op_get_type>:
	switch (op) {
 801dbaa:	1e43      	subs	r3, r0, #1
 801dbac:	2bd1      	cmp	r3, #209	; 0xd1
 801dbae:	d874      	bhi.n	801dc9a <att_op_get_type+0xf0>
 801dbb0:	e8df f003 	tbb	[pc, r3]
 801dbb4:	696d696d 	.word	0x696d696d
 801dbb8:	696d696d 	.word	0x696d696d
 801dbbc:	696d696d 	.word	0x696d696d
 801dbc0:	696d696d 	.word	0x696d696d
 801dbc4:	736d696d 	.word	0x736d696d
 801dbc8:	696d6973 	.word	0x696d6973
 801dbcc:	736f736d 	.word	0x736f736d
 801dbd0:	73737871 	.word	0x73737871
 801dbd4:	73737373 	.word	0x73737373
 801dbd8:	73737373 	.word	0x73737373
 801dbdc:	73737373 	.word	0x73737373
 801dbe0:	73737373 	.word	0x73737373
 801dbe4:	73737373 	.word	0x73737373
 801dbe8:	73737373 	.word	0x73737373
 801dbec:	73737373 	.word	0x73737373
 801dbf0:	73737373 	.word	0x73737373
 801dbf4:	73737373 	.word	0x73737373
 801dbf8:	73737373 	.word	0x73737373
 801dbfc:	73737373 	.word	0x73737373
 801dc00:	73737373 	.word	0x73737373
 801dc04:	73736b73 	.word	0x73736b73
 801dc08:	73737373 	.word	0x73737373
 801dc0c:	73737373 	.word	0x73737373
 801dc10:	73737373 	.word	0x73737373
 801dc14:	73737373 	.word	0x73737373
 801dc18:	73737373 	.word	0x73737373
 801dc1c:	73737373 	.word	0x73737373
 801dc20:	73737373 	.word	0x73737373
 801dc24:	73737373 	.word	0x73737373
 801dc28:	73737373 	.word	0x73737373
 801dc2c:	73737373 	.word	0x73737373
 801dc30:	73737373 	.word	0x73737373
 801dc34:	73737373 	.word	0x73737373
 801dc38:	73737373 	.word	0x73737373
 801dc3c:	73737373 	.word	0x73737373
 801dc40:	73737373 	.word	0x73737373
 801dc44:	73737373 	.word	0x73737373
 801dc48:	73737373 	.word	0x73737373
 801dc4c:	73737373 	.word	0x73737373
 801dc50:	73737373 	.word	0x73737373
 801dc54:	73737373 	.word	0x73737373
 801dc58:	73737373 	.word	0x73737373
 801dc5c:	73737373 	.word	0x73737373
 801dc60:	73737373 	.word	0x73737373
 801dc64:	73737373 	.word	0x73737373
 801dc68:	73737373 	.word	0x73737373
 801dc6c:	73737373 	.word	0x73737373
 801dc70:	73737373 	.word	0x73737373
 801dc74:	73737373 	.word	0x73737373
 801dc78:	73737373 	.word	0x73737373
 801dc7c:	73737373 	.word	0x73737373
 801dc80:	73737373 	.word	0x73737373
 801dc84:	6b73      	.short	0x6b73
{
 801dc86:	2001      	movs	r0, #1
 801dc88:	4770      	bx	lr
		return ATT_COMMAND;
 801dc8a:	2000      	movs	r0, #0
 801dc8c:	4770      	bx	lr
		return ATT_RESPONSE;
 801dc8e:	2002      	movs	r0, #2
 801dc90:	4770      	bx	lr
		return ATT_NOTIFICATION;
 801dc92:	2003      	movs	r0, #3
 801dc94:	4770      	bx	lr
		return ATT_INDICATION;
 801dc96:	2005      	movs	r0, #5
 801dc98:	4770      	bx	lr
	if (op & ATT_CMD_MASK) {
 801dc9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801dc9e:	d103      	bne.n	801dca8 <att_op_get_type+0xfe>
	return ATT_UNKNOWN;
 801dca0:	2006      	movs	r0, #6
 801dca2:	4770      	bx	lr
		return ATT_CONFIRMATION;
 801dca4:	2004      	movs	r0, #4
 801dca6:	4770      	bx	lr
		return ATT_COMMAND;
 801dca8:	2000      	movs	r0, #0
}
 801dcaa:	4770      	bx	lr

0801dcac <att_chan_attach>:
{
 801dcac:	b538      	push	{r3, r4, r5, lr}
 801dcae:	4604      	mov	r4, r0
 801dcb0:	460d      	mov	r5, r1
	return list->head;
 801dcb2:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sys_slist_is_empty(&att->chans)) {
 801dcb4:	b143      	cbz	r3, 801dcc8 <att_chan_attach+0x1c>
	sys_slist_prepend(&att->chans, &chan->node);
 801dcb6:	f505 7396 	add.w	r3, r5, #300	; 0x12c
 801dcba:	6a62      	ldr	r2, [r4, #36]	; 0x24
	parent->next = child;
 801dcbc:	f8c5 212c 	str.w	r2, [r5, #300]	; 0x12c
	list->head = node;
 801dcc0:	6263      	str	r3, [r4, #36]	; 0x24
	return list->tail;
 801dcc2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
 801dcc4:	b122      	cbz	r2, 801dcd0 <att_chan_attach+0x24>
}
 801dcc6:	bd38      	pop	{r3, r4, r5, pc}
		k_fifo_init(&att->tx_queue);
 801dcc8:	300c      	adds	r0, #12
	z_impl_k_queue_init(queue);
 801dcca:	f004 f8e7 	bl	8021e9c <z_impl_k_queue_init>
}
 801dcce:	e7f2      	b.n	801dcb6 <att_chan_attach+0xa>
	list->tail = node;
 801dcd0:	62a3      	str	r3, [r4, #40]	; 0x28
}
 801dcd2:	e7f8      	b.n	801dcc6 <att_chan_attach+0x1a>

0801dcd4 <chan_req_send>:
{
 801dcd4:	b570      	push	{r4, r5, r6, lr}
 801dcd6:	4606      	mov	r6, r0
 801dcd8:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
 801dcda:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 801dcde:	692b      	ldr	r3, [r5, #16]
	size_t bytes = 0;
 801dce0:	2200      	movs	r2, #0
	while (buf) {
 801dce2:	b11b      	cbz	r3, 801dcec <chan_req_send+0x18>
		bytes += buf->len;
 801dce4:	899c      	ldrh	r4, [r3, #12]
 801dce6:	4422      	add	r2, r4
		buf = buf->frags;
 801dce8:	681b      	ldr	r3, [r3, #0]
 801dcea:	e7fa      	b.n	801dce2 <chan_req_send+0xe>
 801dcec:	4291      	cmp	r1, r2
 801dcee:	d319      	bcc.n	801dd24 <chan_req_send+0x50>
	chan->req = req;
 801dcf0:	f8c6 50c4 	str.w	r5, [r6, #196]	; 0xc4
	net_buf_simple_save(&req->buf->b, &req->state);
 801dcf4:	692c      	ldr	r4, [r5, #16]
	state->offset = net_buf_simple_headroom(buf);
 801dcf6:	f104 0008 	add.w	r0, r4, #8
 801dcfa:	f002 fc08 	bl	802050e <net_buf_simple_headroom>
 801dcfe:	81a8      	strh	r0, [r5, #12]
	state->len = buf->len;
 801dd00:	89a3      	ldrh	r3, [r4, #12]
 801dd02:	81eb      	strh	r3, [r5, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
 801dd04:	6928      	ldr	r0, [r5, #16]
 801dd06:	f002 fb95 	bl	8020434 <net_buf_ref>
 801dd0a:	4601      	mov	r1, r0
 801dd0c:	2200      	movs	r2, #0
 801dd0e:	4630      	mov	r0, r6
 801dd10:	f7f3 fd02 	bl	8011718 <chan_send>
	if (err) {
 801dd14:	4604      	mov	r4, r0
 801dd16:	b908      	cbnz	r0, 801dd1c <chan_req_send+0x48>
}
 801dd18:	4620      	mov	r0, r4
 801dd1a:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(req->buf);
 801dd1c:	6928      	ldr	r0, [r5, #16]
 801dd1e:	f002 fb63 	bl	80203e8 <net_buf_unref>
 801dd22:	e7f9      	b.n	801dd18 <chan_req_send+0x44>
		return -EMSGSIZE;
 801dd24:	f06f 0423 	mvn.w	r4, #35	; 0x23
 801dd28:	e7f6      	b.n	801dd18 <chan_req_send+0x44>

0801dd2a <bt_att_chan_send>:
{
 801dd2a:	b570      	push	{r4, r5, r6, lr}
 801dd2c:	4604      	mov	r4, r0
 801dd2e:	460d      	mov	r5, r1
	if (!cb) {
 801dd30:	4616      	mov	r6, r2
 801dd32:	b12a      	cbz	r2, 801dd40 <bt_att_chan_send+0x16>
	return chan_send(chan, buf, cb);
 801dd34:	4632      	mov	r2, r6
 801dd36:	4629      	mov	r1, r5
 801dd38:	4620      	mov	r0, r4
 801dd3a:	f7f3 fced 	bl	8011718 <chan_send>
}
 801dd3e:	bd70      	pop	{r4, r5, r6, pc}
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
 801dd40:	f500 7088 	add.w	r0, r0, #272	; 0x110
	return z_impl_k_sem_take(sem, timeout);
 801dd44:	2200      	movs	r2, #0
 801dd46:	2300      	movs	r3, #0
 801dd48:	f7fa ffa6 	bl	8018c98 <z_impl_k_sem_take>
 801dd4c:	2800      	cmp	r0, #0
 801dd4e:	daf1      	bge.n	801dd34 <bt_att_chan_send+0xa>
			return -EAGAIN;
 801dd50:	f06f 000a 	mvn.w	r0, #10
 801dd54:	e7f3      	b.n	801dd3e <bt_att_chan_send+0x14>

0801dd56 <chan_cfm_sent>:
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
 801dd56:	30c0      	adds	r0, #192	; 0xc0
 801dd58:	f3bf 8f5b 	dmb	ish
 801dd5c:	e850 3f00 	ldrex	r3, [r0]
 801dd60:	f023 0302 	bic.w	r3, r3, #2
 801dd64:	e840 3200 	strex	r2, r3, [r0]
 801dd68:	2a00      	cmp	r2, #0
 801dd6a:	d1f7      	bne.n	801dd5c <chan_cfm_sent+0x6>
 801dd6c:	f3bf 8f5b 	dmb	ish
}
 801dd70:	4770      	bx	lr

0801dd72 <chan_rsp_sent>:
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
 801dd72:	30c0      	adds	r0, #192	; 0xc0
 801dd74:	f3bf 8f5b 	dmb	ish
 801dd78:	e850 3f00 	ldrex	r3, [r0]
 801dd7c:	f023 0301 	bic.w	r3, r3, #1
 801dd80:	e840 3200 	strex	r2, r3, [r0]
 801dd84:	2a00      	cmp	r2, #0
 801dd86:	d1f7      	bne.n	801dd78 <chan_rsp_sent+0x6>
 801dd88:	f3bf 8f5b 	dmb	ish
}
 801dd8c:	4770      	bx	lr

0801dd8e <bt_att_chan_req_send>:
{
 801dd8e:	b570      	push	{r4, r5, r6, lr}
 801dd90:	4604      	mov	r4, r0
 801dd92:	460d      	mov	r5, r1
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
 801dd94:	f500 7688 	add.w	r6, r0, #272	; 0x110
 801dd98:	2200      	movs	r2, #0
 801dd9a:	2300      	movs	r3, #0
 801dd9c:	4630      	mov	r0, r6
 801dd9e:	f7fa ff7b 	bl	8018c98 <z_impl_k_sem_take>
 801dda2:	2800      	cmp	r0, #0
 801dda4:	db07      	blt.n	801ddb6 <bt_att_chan_req_send+0x28>
	err = chan_req_send(chan, req);
 801dda6:	4629      	mov	r1, r5
 801dda8:	4620      	mov	r0, r4
 801ddaa:	f7ff ff93 	bl	801dcd4 <chan_req_send>
	if (err < 0) {
 801ddae:	1e04      	subs	r4, r0, #0
 801ddb0:	db04      	blt.n	801ddbc <bt_att_chan_req_send+0x2e>
}
 801ddb2:	4620      	mov	r0, r4
 801ddb4:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
 801ddb6:	f06f 040a 	mvn.w	r4, #10
 801ddba:	e7fa      	b.n	801ddb2 <bt_att_chan_req_send+0x24>
	z_impl_k_sem_give(sem);
 801ddbc:	4630      	mov	r0, r6
 801ddbe:	f7fa ff43 	bl	8018c48 <z_impl_k_sem_give>
}
 801ddc2:	e7f6      	b.n	801ddb2 <bt_att_chan_req_send+0x24>

0801ddc4 <bt_att_status>:
{
 801ddc4:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 801ddc6:	f3bf 8f5b 	dmb	ish
 801ddca:	680b      	ldr	r3, [r1, #0]
 801ddcc:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
 801ddd0:	f013 0f01 	tst.w	r3, #1
 801ddd4:	d004      	beq.n	801dde0 <bt_att_status+0x1c>
 801ddd6:	4604      	mov	r4, r0
 801ddd8:	3808      	subs	r0, #8
	if (chan->req) {
 801ddda:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 801ddde:	b103      	cbz	r3, 801dde2 <bt_att_status+0x1e>
}
 801dde0:	bd38      	pop	{r3, r4, r5, pc}
	node = sys_slist_get(&chan->att->reqs);
 801dde2:	f854 3c08 	ldr.w	r3, [r4, #-8]
	return list->head;
 801dde6:	685d      	ldr	r5, [r3, #4]
Z_GENLIST_GET(slist, snode)
 801dde8:	2d00      	cmp	r5, #0
 801ddea:	d0f9      	beq.n	801dde0 <bt_att_status+0x1c>
	return node->next;
 801ddec:	682a      	ldr	r2, [r5, #0]
	list->head = node;
 801ddee:	605a      	str	r2, [r3, #4]
	return list->tail;
 801ddf0:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 801ddf2:	428d      	cmp	r5, r1
 801ddf4:	d00e      	beq.n	801de14 <bt_att_status+0x50>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
 801ddf6:	4629      	mov	r1, r5
 801ddf8:	f7ff ffc9 	bl	801dd8e <bt_att_chan_req_send>
 801ddfc:	2800      	cmp	r0, #0
 801ddfe:	daef      	bge.n	801dde0 <bt_att_status+0x1c>
	sys_slist_prepend(&chan->att->reqs, node);
 801de00:	f854 3c08 	ldr.w	r3, [r4, #-8]
	return list->head;
 801de04:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
 801de06:	602a      	str	r2, [r5, #0]
	list->head = node;
 801de08:	605d      	str	r5, [r3, #4]
	return list->tail;
 801de0a:	689a      	ldr	r2, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 801de0c:	2a00      	cmp	r2, #0
 801de0e:	d1e7      	bne.n	801dde0 <bt_att_status+0x1c>
	list->tail = node;
 801de10:	609d      	str	r5, [r3, #8]
}
 801de12:	e7e5      	b.n	801dde0 <bt_att_status+0x1c>
	list->tail = node;
 801de14:	609a      	str	r2, [r3, #8]
}
 801de16:	e7ee      	b.n	801ddf6 <bt_att_status+0x32>

0801de18 <att_process>:
{
 801de18:	b570      	push	{r4, r5, r6, lr}
	return list->head;
 801de1a:	6846      	ldr	r6, [r0, #4]
Z_GENLIST_GET(slist, snode)
 801de1c:	2e00      	cmp	r6, #0
 801de1e:	d038      	beq.n	801de92 <att_process+0x7a>
 801de20:	4605      	mov	r5, r0
	return node->next;
 801de22:	6833      	ldr	r3, [r6, #0]
	list->head = node;
 801de24:	6043      	str	r3, [r0, #4]
	return list->tail;
 801de26:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 801de28:	42b2      	cmp	r2, r6
 801de2a:	d00d      	beq.n	801de48 <att_process+0x30>
	return list->head;
 801de2c:	6a68      	ldr	r0, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
 801de2e:	b198      	cbz	r0, 801de58 <att_process+0x40>
 801de30:	f5b0 7096 	subs.w	r0, r0, #300	; 0x12c
 801de34:	d012      	beq.n	801de5c <att_process+0x44>
Z_GENLIST_PEEK_NEXT(slist, snode)
 801de36:	f510 7496 	adds.w	r4, r0, #300	; 0x12c
 801de3a:	d014      	beq.n	801de66 <att_process+0x4e>
	return node->next;
 801de3c:	f8d0 412c 	ldr.w	r4, [r0, #300]	; 0x12c
 801de40:	b18c      	cbz	r4, 801de66 <att_process+0x4e>
 801de42:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
 801de46:	e00e      	b.n	801de66 <att_process+0x4e>
	list->tail = node;
 801de48:	6083      	str	r3, [r0, #8]
}
 801de4a:	e7ef      	b.n	801de2c <att_process+0x14>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
 801de4c:	4631      	mov	r1, r6
 801de4e:	f7ff ff9e 	bl	801dd8e <bt_att_chan_req_send>
 801de52:	2800      	cmp	r0, #0
 801de54:	db0c      	blt.n	801de70 <att_process+0x58>
 801de56:	e01c      	b.n	801de92 <att_process+0x7a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
 801de58:	4604      	mov	r4, r0
 801de5a:	e004      	b.n	801de66 <att_process+0x4e>
 801de5c:	4604      	mov	r4, r0
 801de5e:	e002      	b.n	801de66 <att_process+0x4e>
 801de60:	4623      	mov	r3, r4
 801de62:	4620      	mov	r0, r4
 801de64:	461c      	mov	r4, r3
 801de66:	b178      	cbz	r0, 801de88 <att_process+0x70>
		if (!chan->req) {
 801de68:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
 801de6c:	2b00      	cmp	r3, #0
 801de6e:	d0ed      	beq.n	801de4c <att_process+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
 801de70:	2c00      	cmp	r4, #0
 801de72:	d0f5      	beq.n	801de60 <att_process+0x48>
Z_GENLIST_PEEK_NEXT(slist, snode)
 801de74:	f514 7396 	adds.w	r3, r4, #300	; 0x12c
 801de78:	d0f3      	beq.n	801de62 <att_process+0x4a>
	return node->next;
 801de7a:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 801de7e:	2b00      	cmp	r3, #0
 801de80:	d0ef      	beq.n	801de62 <att_process+0x4a>
 801de82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801de86:	e7ec      	b.n	801de62 <att_process+0x4a>
	return list->head;
 801de88:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
 801de8a:	6033      	str	r3, [r6, #0]
	list->head = node;
 801de8c:	606e      	str	r6, [r5, #4]
	return list->tail;
 801de8e:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
 801de90:	b103      	cbz	r3, 801de94 <att_process+0x7c>
}
 801de92:	bd70      	pop	{r4, r5, r6, pc}
	list->tail = node;
 801de94:	60ae      	str	r6, [r5, #8]
}
 801de96:	e7fc      	b.n	801de92 <att_process+0x7a>

0801de98 <process_queue>:
{
 801de98:	b570      	push	{r4, r5, r6, lr}
 801de9a:	4605      	mov	r5, r0
 801de9c:	460c      	mov	r4, r1
	buf = net_buf_get(queue, K_NO_WAIT);
 801de9e:	2200      	movs	r2, #0
 801dea0:	2300      	movs	r3, #0
 801dea2:	4608      	mov	r0, r1
 801dea4:	f002 fa6e 	bl	8020384 <net_buf_get>
	if (buf) {
 801dea8:	b170      	cbz	r0, 801dec8 <process_queue+0x30>
 801deaa:	4606      	mov	r6, r0
		err = chan_send(chan, buf, NULL);
 801deac:	2200      	movs	r2, #0
 801deae:	4601      	mov	r1, r0
 801deb0:	4628      	mov	r0, r5
 801deb2:	f7f3 fc31 	bl	8011718 <chan_send>
		if (err) {
 801deb6:	4605      	mov	r5, r0
 801deb8:	b908      	cbnz	r0, 801debe <process_queue+0x26>
}
 801deba:	4628      	mov	r0, r5
 801debc:	bd70      	pop	{r4, r5, r6, pc}
			k_queue_prepend(&queue->_queue, buf);
 801debe:	4631      	mov	r1, r6
 801dec0:	4620      	mov	r0, r4
 801dec2:	f003 fffe 	bl	8021ec2 <k_queue_prepend>
			return err;
 801dec6:	e7f8      	b.n	801deba <process_queue+0x22>
	return -ENOENT;
 801dec8:	f06f 0501 	mvn.w	r5, #1
 801decc:	e7f5      	b.n	801deba <process_queue+0x22>

0801dece <bt_att_sent>:
{
 801dece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ded0:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
 801ded2:	f1a0 0508 	sub.w	r5, r0, #8
	struct bt_att *att = chan->att;
 801ded6:	f850 6c08 	ldr.w	r6, [r0, #-8]
	if (chan->sent) {
 801deda:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
 801dede:	b10b      	cbz	r3, 801dee4 <bt_att_sent+0x16>
		chan->sent(chan);
 801dee0:	4628      	mov	r0, r5
 801dee2:	4798      	blx	r3
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
 801dee4:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 801dee8:	f3bf 8f5b 	dmb	ish
 801deec:	e853 2f00 	ldrex	r2, [r3]
 801def0:	f022 0210 	bic.w	r2, r2, #16
 801def4:	e843 2100 	strex	r1, r2, [r3]
 801def8:	2900      	cmp	r1, #0
 801defa:	d1f7      	bne.n	801deec <bt_att_sent+0x1e>
 801defc:	f3bf 8f5b 	dmb	ish
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
 801df00:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 801df04:	b133      	cbz	r3, 801df14 <bt_att_sent+0x46>
	err = process_queue(chan, &chan->tx_queue);
 801df06:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
 801df0a:	4628      	mov	r0, r5
 801df0c:	f7ff ffc4 	bl	801de98 <process_queue>
	if (!err) {
 801df10:	b9c0      	cbnz	r0, 801df44 <bt_att_sent+0x76>
}
 801df12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return list->head;
 801df14:	6877      	ldr	r7, [r6, #4]
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
 801df16:	2f00      	cmp	r7, #0
 801df18:	d0f5      	beq.n	801df06 <bt_att_sent+0x38>
	return node->next;
 801df1a:	683b      	ldr	r3, [r7, #0]
	list->head = node;
 801df1c:	6073      	str	r3, [r6, #4]
	return list->tail;
 801df1e:	68b2      	ldr	r2, [r6, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 801df20:	4297      	cmp	r7, r2
 801df22:	d00d      	beq.n	801df40 <bt_att_sent+0x72>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
 801df24:	4639      	mov	r1, r7
 801df26:	4628      	mov	r0, r5
 801df28:	f7ff fed4 	bl	801dcd4 <chan_req_send>
 801df2c:	2800      	cmp	r0, #0
 801df2e:	daf0      	bge.n	801df12 <bt_att_sent+0x44>
	return list->head;
 801df30:	6873      	ldr	r3, [r6, #4]
	parent->next = child;
 801df32:	603b      	str	r3, [r7, #0]
	list->head = node;
 801df34:	6077      	str	r7, [r6, #4]
	return list->tail;
 801df36:	68b3      	ldr	r3, [r6, #8]
Z_GENLIST_PREPEND(slist, snode)
 801df38:	2b00      	cmp	r3, #0
 801df3a:	d1e4      	bne.n	801df06 <bt_att_sent+0x38>
	list->tail = node;
 801df3c:	60b7      	str	r7, [r6, #8]
}
 801df3e:	e7e2      	b.n	801df06 <bt_att_sent+0x38>
	list->tail = node;
 801df40:	60b3      	str	r3, [r6, #8]
}
 801df42:	e7ef      	b.n	801df24 <bt_att_sent+0x56>
	err = process_queue(chan, &att->tx_queue);
 801df44:	f106 010c 	add.w	r1, r6, #12
 801df48:	4628      	mov	r0, r5
 801df4a:	f7ff ffa5 	bl	801de98 <process_queue>
	if (!err) {
 801df4e:	2800      	cmp	r0, #0
 801df50:	d0df      	beq.n	801df12 <bt_att_sent+0x44>
	k_sem_give(&chan->tx_sem);
 801df52:	f504 7084 	add.w	r0, r4, #264	; 0x108
	z_impl_k_sem_give(sem);
 801df56:	f7fa fe77 	bl	8018c48 <z_impl_k_sem_give>
}
 801df5a:	e7da      	b.n	801df12 <bt_att_sent+0x44>

0801df5c <att_notify_mult>:
{
 801df5c:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
 801df5e:	6803      	ldr	r3, [r0, #0]
 801df60:	898a      	ldrh	r2, [r1, #12]
 801df62:	6889      	ldr	r1, [r1, #8]
 801df64:	6818      	ldr	r0, [r3, #0]
 801df66:	f7f6 fb43 	bl	80145f0 <bt_gatt_mult_notification>
}
 801df6a:	2000      	movs	r0, #0
 801df6c:	bd08      	pop	{r3, pc}

0801df6e <att_notify>:
{
 801df6e:	b538      	push	{r3, r4, r5, lr}
 801df70:	4605      	mov	r5, r0
 801df72:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
 801df74:	f101 0008 	add.w	r0, r1, #8
 801df78:	f002 fac1 	bl	80204fe <net_buf_simple_pull_le16>
 801df7c:	4601      	mov	r1, r0
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
 801df7e:	682d      	ldr	r5, [r5, #0]
 801df80:	89a3      	ldrh	r3, [r4, #12]
 801df82:	68a2      	ldr	r2, [r4, #8]
 801df84:	6828      	ldr	r0, [r5, #0]
 801df86:	f001 f96a 	bl	801f25e <bt_gatt_notification>
}
 801df8a:	2000      	movs	r0, #0
 801df8c:	bd38      	pop	{r3, r4, r5, pc}

0801df8e <bt_att_chan_send_rsp>:
{
 801df8e:	b538      	push	{r3, r4, r5, lr}
 801df90:	4604      	mov	r4, r0
 801df92:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
 801df94:	f7ff fec9 	bl	801dd2a <bt_att_chan_send>
	if (err) {
 801df98:	b900      	cbnz	r0, 801df9c <bt_att_chan_send_rsp+0xe>
}
 801df9a:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_put(&chan->tx_queue, buf);
 801df9c:	4629      	mov	r1, r5
 801df9e:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
 801dfa2:	f002 fa14 	bl	80203ce <net_buf_put>
}
 801dfa6:	e7f8      	b.n	801df9a <bt_att_chan_send_rsp+0xc>

0801dfa8 <att_change_security>:
{
 801dfa8:	b508      	push	{r3, lr}
	switch (err) {
 801dfaa:	2905      	cmp	r1, #5
 801dfac:	d008      	beq.n	801dfc0 <att_change_security+0x18>
 801dfae:	290f      	cmp	r1, #15
 801dfb0:	d113      	bne.n	801dfda <att_change_security+0x32>
		if (conn->sec_level >= BT_SECURITY_L2)
 801dfb2:	7a43      	ldrb	r3, [r0, #9]
 801dfb4:	2b01      	cmp	r3, #1
 801dfb6:	d813      	bhi.n	801dfe0 <att_change_security+0x38>
		sec = BT_SECURITY_L2;
 801dfb8:	2102      	movs	r1, #2
	return bt_conn_set_security(conn, sec);
 801dfba:	f7ff facf 	bl	801d55c <bt_conn_set_security>
}
 801dfbe:	bd08      	pop	{r3, pc}
		if (conn->sec_level < BT_SECURITY_L2) {
 801dfc0:	7a43      	ldrb	r3, [r0, #9]
 801dfc2:	2b01      	cmp	r3, #1
 801dfc4:	d905      	bls.n	801dfd2 <att_change_security+0x2a>
		} else if (conn->sec_level < BT_SECURITY_L3) {
 801dfc6:	2b02      	cmp	r3, #2
 801dfc8:	d905      	bls.n	801dfd6 <att_change_security+0x2e>
		} else if (conn->sec_level < BT_SECURITY_L4) {
 801dfca:	2b03      	cmp	r3, #3
 801dfcc:	d80b      	bhi.n	801dfe6 <att_change_security+0x3e>
			sec = BT_SECURITY_L4;
 801dfce:	2104      	movs	r1, #4
 801dfd0:	e7f3      	b.n	801dfba <att_change_security+0x12>
			sec = BT_SECURITY_L2;
 801dfd2:	2102      	movs	r1, #2
 801dfd4:	e7f1      	b.n	801dfba <att_change_security+0x12>
			sec = BT_SECURITY_L3;
 801dfd6:	2103      	movs	r1, #3
 801dfd8:	e7ef      	b.n	801dfba <att_change_security+0x12>
	switch (err) {
 801dfda:	f06f 0015 	mvn.w	r0, #21
 801dfde:	e7ee      	b.n	801dfbe <att_change_security+0x16>
			return -EALREADY;
 801dfe0:	f06f 0044 	mvn.w	r0, #68	; 0x44
 801dfe4:	e7eb      	b.n	801dfbe <att_change_security+0x16>
			return -EALREADY;
 801dfe6:	f06f 0044 	mvn.w	r0, #68	; 0x44
 801dfea:	e7e8      	b.n	801dfbe <att_change_security+0x16>

0801dfec <write_cb>:
{
 801dfec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dfee:	b083      	sub	sp, #12
 801dff0:	4606      	mov	r6, r0
 801dff2:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
 801dff4:	222a      	movs	r2, #42	; 0x2a
 801dff6:	4601      	mov	r1, r0
 801dff8:	6820      	ldr	r0, [r4, #0]
 801dffa:	f001 f85f 	bl	801f0bc <bt_gatt_check_perm>
 801dffe:	7520      	strb	r0, [r4, #20]
	if (data->err) {
 801e000:	b9e8      	cbnz	r0, 801e03e <write_cb+0x52>
 801e002:	4605      	mov	r5, r0
	if (!data->req) {
 801e004:	7a23      	ldrb	r3, [r4, #8]
 801e006:	b1a3      	cbz	r3, 801e032 <write_cb+0x46>
	uint8_t flags = 0U;
 801e008:	4603      	mov	r3, r0
	write = attr->write(data->conn, attr, data->value, data->len,
 801e00a:	68b7      	ldr	r7, [r6, #8]
 801e00c:	9301      	str	r3, [sp, #4]
 801e00e:	8a63      	ldrh	r3, [r4, #18]
 801e010:	9300      	str	r3, [sp, #0]
 801e012:	8a23      	ldrh	r3, [r4, #16]
 801e014:	68e2      	ldr	r2, [r4, #12]
 801e016:	4631      	mov	r1, r6
 801e018:	6820      	ldr	r0, [r4, #0]
 801e01a:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
 801e01c:	2800      	cmp	r0, #0
 801e01e:	db02      	blt.n	801e026 <write_cb+0x3a>
 801e020:	8a23      	ldrh	r3, [r4, #16]
 801e022:	4298      	cmp	r0, r3
 801e024:	d007      	beq.n	801e036 <write_cb+0x4a>
		data->err = err_to_att(write);
 801e026:	f7ff fd8c 	bl	801db42 <err_to_att>
 801e02a:	7520      	strb	r0, [r4, #20]
}
 801e02c:	4628      	mov	r0, r5
 801e02e:	b003      	add	sp, #12
 801e030:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flags |= BT_GATT_WRITE_FLAG_CMD;
 801e032:	2302      	movs	r3, #2
 801e034:	e7e9      	b.n	801e00a <write_cb+0x1e>
	data->err = 0U;
 801e036:	2300      	movs	r3, #0
 801e038:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
 801e03a:	2501      	movs	r5, #1
 801e03c:	e7f6      	b.n	801e02c <write_cb+0x40>
		return BT_GATT_ITER_STOP;
 801e03e:	2500      	movs	r5, #0
 801e040:	e7f4      	b.n	801e02c <write_cb+0x40>

0801e042 <att_chan_read>:
{
 801e042:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e046:	b085      	sub	sp, #20
 801e048:	4680      	mov	r8, r0
 801e04a:	4689      	mov	r9, r1
 801e04c:	9202      	str	r2, [sp, #8]
 801e04e:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
 801e050:	6881      	ldr	r1, [r0, #8]
 801e052:	9103      	str	r1, [sp, #12]
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
 801e054:	f8b0 005e 	ldrh.w	r0, [r0, #94]	; 0x5e
	while (buf) {
 801e058:	4613      	mov	r3, r2
	size_t bytes = 0;
 801e05a:	2200      	movs	r2, #0
	while (buf) {
 801e05c:	b11b      	cbz	r3, 801e066 <att_chan_read+0x24>
		bytes += buf->len;
 801e05e:	8999      	ldrh	r1, [r3, #12]
 801e060:	440a      	add	r2, r1
		buf = buf->frags;
 801e062:	681b      	ldr	r3, [r3, #0]
 801e064:	e7fa      	b.n	801e05c <att_chan_read+0x1a>
 801e066:	4290      	cmp	r0, r2
 801e068:	d804      	bhi.n	801e074 <att_chan_read+0x32>
		return 0;
 801e06a:	2400      	movs	r4, #0
}
 801e06c:	4620      	mov	r0, r4
 801e06e:	b005      	add	sp, #20
 801e070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(buf);
 801e074:	9802      	ldr	r0, [sp, #8]
 801e076:	f002 f9e1 	bl	802043c <net_buf_frag_last>
 801e07a:	4607      	mov	r7, r0
	size_t len, total = 0;
 801e07c:	f04f 0a00 	mov.w	sl, #0
 801e080:	e083      	b.n	801e18a <att_chan_read+0x148>
		bytes += buf->len;
 801e082:	8999      	ldrh	r1, [r3, #12]
 801e084:	440a      	add	r2, r1
		buf = buf->frags;
 801e086:	681b      	ldr	r3, [r3, #0]
	while (buf) {
 801e088:	2b00      	cmp	r3, #0
 801e08a:	d1fa      	bne.n	801e082 <att_chan_read+0x40>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
 801e08c:	1aa4      	subs	r4, r4, r2
 801e08e:	f107 0608 	add.w	r6, r7, #8
 801e092:	4630      	mov	r0, r6
 801e094:	f002 fa3f 	bl	8020516 <net_buf_simple_tailroom>
 801e098:	4284      	cmp	r4, r0
 801e09a:	d32c      	bcc.n	801e0f6 <att_chan_read+0xb4>
 801e09c:	4630      	mov	r0, r6
 801e09e:	f002 fa3a 	bl	8020516 <net_buf_simple_tailroom>
 801e0a2:	4606      	mov	r6, r0
		if (!len) {
 801e0a4:	2e00      	cmp	r6, #0
 801e0a6:	d032      	beq.n	801e10e <att_chan_read+0xcc>
		read = attr->read(conn, attr, frag->data + frag->len, len,
 801e0a8:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801e0ac:	68b9      	ldr	r1, [r7, #8]
 801e0ae:	89ba      	ldrh	r2, [r7, #12]
 801e0b0:	9500      	str	r5, [sp, #0]
 801e0b2:	b2b3      	uxth	r3, r6
 801e0b4:	440a      	add	r2, r1
 801e0b6:	4649      	mov	r1, r9
 801e0b8:	9803      	ldr	r0, [sp, #12]
 801e0ba:	47a0      	blx	r4
		if (read < 0) {
 801e0bc:	1e04      	subs	r4, r0, #0
 801e0be:	db5a      	blt.n	801e176 <att_chan_read+0x134>
		if (cb && !cb(frag, read, user_data)) {
 801e0c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e0c2:	b12b      	cbz	r3, 801e0d0 <att_chan_read+0x8e>
 801e0c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e0c6:	4621      	mov	r1, r4
 801e0c8:	4638      	mov	r0, r7
 801e0ca:	4798      	blx	r3
 801e0cc:	2800      	cmp	r0, #0
 801e0ce:	d061      	beq.n	801e194 <att_chan_read+0x152>
		net_buf_add(frag, read);
 801e0d0:	46a3      	mov	fp, r4
 801e0d2:	4621      	mov	r1, r4
 801e0d4:	f107 0008 	add.w	r0, r7, #8
 801e0d8:	f002 f9d0 	bl	802047c <net_buf_simple_add>
		total += read;
 801e0dc:	44a2      	add	sl, r4
		offset += read;
 801e0de:	4425      	add	r5, r4
 801e0e0:	b2ad      	uxth	r5, r5
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
 801e0e2:	f8b8 005e 	ldrh.w	r0, [r8, #94]	; 0x5e
 801e0e6:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
 801e0e8:	2200      	movs	r2, #0
	while (buf) {
 801e0ea:	2b00      	cmp	r3, #0
 801e0ec:	d049      	beq.n	801e182 <att_chan_read+0x140>
		bytes += buf->len;
 801e0ee:	8999      	ldrh	r1, [r3, #12]
 801e0f0:	440a      	add	r2, r1
		buf = buf->frags;
 801e0f2:	681b      	ldr	r3, [r3, #0]
 801e0f4:	e7f9      	b.n	801e0ea <att_chan_read+0xa8>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
 801e0f6:	f8b8 605e 	ldrh.w	r6, [r8, #94]	; 0x5e
	while (buf) {
 801e0fa:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
 801e0fc:	2200      	movs	r2, #0
	while (buf) {
 801e0fe:	e002      	b.n	801e106 <att_chan_read+0xc4>
		bytes += buf->len;
 801e100:	8999      	ldrh	r1, [r3, #12]
 801e102:	440a      	add	r2, r1
		buf = buf->frags;
 801e104:	681b      	ldr	r3, [r3, #0]
	while (buf) {
 801e106:	2b00      	cmp	r3, #0
 801e108:	d1fa      	bne.n	801e100 <att_chan_read+0xbe>
 801e10a:	1ab6      	subs	r6, r6, r2
 801e10c:	e7ca      	b.n	801e0a4 <att_chan_read+0x62>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
 801e10e:	9b02      	ldr	r3, [sp, #8]
 801e110:	7998      	ldrb	r0, [r3, #6]
 801e112:	f7f8 fd27 	bl	8016b64 <net_buf_pool_get>
 801e116:	2200      	movs	r2, #0
 801e118:	2300      	movs	r3, #0
 801e11a:	f002 f92c 	bl	8020376 <net_buf_alloc_fixed>
			if (!frag) {
 801e11e:	4607      	mov	r7, r0
 801e120:	b150      	cbz	r0, 801e138 <att_chan_read+0xf6>
			net_buf_frag_add(buf, frag);
 801e122:	4601      	mov	r1, r0
 801e124:	f8dd b008 	ldr.w	fp, [sp, #8]
 801e128:	4658      	mov	r0, fp
 801e12a:	f002 f998 	bl	802045e <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
 801e12e:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
	size_t bytes = 0;
 801e132:	4632      	mov	r2, r6
	while (buf) {
 801e134:	465b      	mov	r3, fp
 801e136:	e004      	b.n	801e142 <att_chan_read+0x100>
				return total;
 801e138:	4654      	mov	r4, sl
 801e13a:	e797      	b.n	801e06c <att_chan_read+0x2a>
		bytes += buf->len;
 801e13c:	8999      	ldrh	r1, [r3, #12]
 801e13e:	440a      	add	r2, r1
		buf = buf->frags;
 801e140:	681b      	ldr	r3, [r3, #0]
	while (buf) {
 801e142:	2b00      	cmp	r3, #0
 801e144:	d1fa      	bne.n	801e13c <att_chan_read+0xfa>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
 801e146:	1aa4      	subs	r4, r4, r2
 801e148:	f107 0b08 	add.w	fp, r7, #8
 801e14c:	4658      	mov	r0, fp
 801e14e:	f002 f9e2 	bl	8020516 <net_buf_simple_tailroom>
 801e152:	4284      	cmp	r4, r0
 801e154:	d304      	bcc.n	801e160 <att_chan_read+0x11e>
 801e156:	4658      	mov	r0, fp
 801e158:	f002 f9dd 	bl	8020516 <net_buf_simple_tailroom>
 801e15c:	4606      	mov	r6, r0
 801e15e:	e7a3      	b.n	801e0a8 <att_chan_read+0x66>
 801e160:	f8b8 105e 	ldrh.w	r1, [r8, #94]	; 0x5e
 801e164:	9b02      	ldr	r3, [sp, #8]
 801e166:	e002      	b.n	801e16e <att_chan_read+0x12c>
		bytes += buf->len;
 801e168:	899a      	ldrh	r2, [r3, #12]
 801e16a:	4416      	add	r6, r2
		buf = buf->frags;
 801e16c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
 801e16e:	2b00      	cmp	r3, #0
 801e170:	d1fa      	bne.n	801e168 <att_chan_read+0x126>
 801e172:	1b8e      	subs	r6, r1, r6
 801e174:	e798      	b.n	801e0a8 <att_chan_read+0x66>
			if (total) {
 801e176:	f1ba 0f00 	cmp.w	sl, #0
 801e17a:	f43f af77 	beq.w	801e06c <att_chan_read+0x2a>
				return total;
 801e17e:	4654      	mov	r4, sl
 801e180:	e774      	b.n	801e06c <att_chan_read+0x2a>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
 801e182:	4290      	cmp	r0, r2
 801e184:	d906      	bls.n	801e194 <att_chan_read+0x152>
 801e186:	45b3      	cmp	fp, r6
 801e188:	d104      	bne.n	801e194 <att_chan_read+0x152>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
 801e18a:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
 801e18e:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
 801e190:	2200      	movs	r2, #0
	while (buf) {
 801e192:	e779      	b.n	801e088 <att_chan_read+0x46>
	return total;
 801e194:	4654      	mov	r4, sl
 801e196:	e769      	b.n	801e06c <att_chan_read+0x2a>

0801e198 <read_cb>:
{
 801e198:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e19a:	b083      	sub	sp, #12
 801e19c:	4606      	mov	r6, r0
 801e19e:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
 801e1a0:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
 801e1a2:	68bd      	ldr	r5, [r7, #8]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
 801e1a4:	6890      	ldr	r0, [r2, #8]
 801e1a6:	2100      	movs	r1, #0
 801e1a8:	3008      	adds	r0, #8
 801e1aa:	f002 f967 	bl	802047c <net_buf_simple_add>
 801e1ae:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
 801e1b0:	2300      	movs	r3, #0
 801e1b2:	7423      	strb	r3, [r4, #16]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
 801e1b4:	2215      	movs	r2, #21
 801e1b6:	4631      	mov	r1, r6
 801e1b8:	4628      	mov	r0, r5
 801e1ba:	f000 ff7f 	bl	801f0bc <bt_gatt_check_perm>
 801e1be:	7420      	strb	r0, [r4, #16]
	if (data->err) {
 801e1c0:	b118      	cbz	r0, 801e1ca <read_cb+0x32>
		return BT_GATT_ITER_STOP;
 801e1c2:	2500      	movs	r5, #0
}
 801e1c4:	4628      	mov	r0, r5
 801e1c6:	b003      	add	sp, #12
 801e1c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e1ca:	4605      	mov	r5, r0
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
 801e1cc:	2300      	movs	r3, #0
 801e1ce:	9301      	str	r3, [sp, #4]
 801e1d0:	9300      	str	r3, [sp, #0]
 801e1d2:	88a3      	ldrh	r3, [r4, #4]
 801e1d4:	68a2      	ldr	r2, [r4, #8]
 801e1d6:	4631      	mov	r1, r6
 801e1d8:	4638      	mov	r0, r7
 801e1da:	f7ff ff32 	bl	801e042 <att_chan_read>
	if (ret < 0) {
 801e1de:	2800      	cmp	r0, #0
 801e1e0:	db01      	blt.n	801e1e6 <read_cb+0x4e>
	return BT_GATT_ITER_CONTINUE;
 801e1e2:	2501      	movs	r5, #1
 801e1e4:	e7ee      	b.n	801e1c4 <read_cb+0x2c>
		data->err = err_to_att(ret);
 801e1e6:	f7ff fcac 	bl	801db42 <err_to_att>
 801e1ea:	7420      	strb	r0, [r4, #16]
		return BT_GATT_ITER_STOP;
 801e1ec:	e7ea      	b.n	801e1c4 <read_cb+0x2c>

0801e1ee <find_info_cb>:
{
 801e1ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e1f2:	4606      	mov	r6, r0
 801e1f4:	460f      	mov	r7, r1
 801e1f6:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
 801e1f8:	f8d2 8000 	ldr.w	r8, [r2]
	if (!data->rsp) {
 801e1fc:	6893      	ldr	r3, [r2, #8]
 801e1fe:	b14b      	cbz	r3, 801e214 <find_info_cb+0x26>
	switch (data->rsp->format) {
 801e200:	68a3      	ldr	r3, [r4, #8]
 801e202:	781d      	ldrb	r5, [r3, #0]
 801e204:	2d01      	cmp	r5, #1
 801e206:	d013      	beq.n	801e230 <find_info_cb+0x42>
 801e208:	2d02      	cmp	r5, #2
 801e20a:	d02d      	beq.n	801e268 <find_info_cb+0x7a>
 801e20c:	2500      	movs	r5, #0
}
 801e20e:	4628      	mov	r0, r5
 801e210:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
 801e214:	6850      	ldr	r0, [r2, #4]
 801e216:	2101      	movs	r1, #1
 801e218:	3008      	adds	r0, #8
 801e21a:	f002 f92f 	bl	802047c <net_buf_simple_add>
 801e21e:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
 801e220:	6833      	ldr	r3, [r6, #0]
 801e222:	781b      	ldrb	r3, [r3, #0]
 801e224:	b913      	cbnz	r3, 801e22c <find_info_cb+0x3e>
 801e226:	2301      	movs	r3, #1
 801e228:	7003      	strb	r3, [r0, #0]
 801e22a:	e7e9      	b.n	801e200 <find_info_cb+0x12>
 801e22c:	2302      	movs	r3, #2
 801e22e:	e7fb      	b.n	801e228 <find_info_cb+0x3a>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
 801e230:	6833      	ldr	r3, [r6, #0]
 801e232:	f893 9000 	ldrb.w	r9, [r3]
 801e236:	f1b9 0f00 	cmp.w	r9, #0
 801e23a:	d001      	beq.n	801e240 <find_info_cb+0x52>
			return BT_GATT_ITER_STOP;
 801e23c:	2500      	movs	r5, #0
 801e23e:	e7e6      	b.n	801e20e <find_info_cb+0x20>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
 801e240:	6860      	ldr	r0, [r4, #4]
 801e242:	2104      	movs	r1, #4
 801e244:	3008      	adds	r0, #8
 801e246:	f002 f919 	bl	802047c <net_buf_simple_add>
 801e24a:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
 801e24c:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
 801e24e:	6832      	ldr	r2, [r6, #0]
 801e250:	68e3      	ldr	r3, [r4, #12]
 801e252:	8852      	ldrh	r2, [r2, #2]
 801e254:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
 801e256:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
 801e25a:	6862      	ldr	r2, [r4, #4]
 801e25c:	8992      	ldrh	r2, [r2, #12]
 801e25e:	1a9b      	subs	r3, r3, r2
 801e260:	2b04      	cmp	r3, #4
 801e262:	d8d4      	bhi.n	801e20e <find_info_cb+0x20>
	return BT_GATT_ITER_STOP;
 801e264:	464d      	mov	r5, r9
 801e266:	e7d2      	b.n	801e20e <find_info_cb+0x20>
		if (attr->uuid->type != BT_UUID_TYPE_128) {
 801e268:	6833      	ldr	r3, [r6, #0]
 801e26a:	781b      	ldrb	r3, [r3, #0]
 801e26c:	2b02      	cmp	r3, #2
 801e26e:	d001      	beq.n	801e274 <find_info_cb+0x86>
			return BT_GATT_ITER_STOP;
 801e270:	2500      	movs	r5, #0
 801e272:	e7cc      	b.n	801e20e <find_info_cb+0x20>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
 801e274:	6860      	ldr	r0, [r4, #4]
 801e276:	2112      	movs	r1, #18
 801e278:	3008      	adds	r0, #8
 801e27a:	f002 f8ff 	bl	802047c <net_buf_simple_add>
 801e27e:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
 801e280:	8007      	strh	r7, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
 801e282:	68e0      	ldr	r0, [r4, #12]
 801e284:	6831      	ldr	r1, [r6, #0]
 801e286:	2210      	movs	r2, #16
 801e288:	3101      	adds	r1, #1
 801e28a:	3002      	adds	r0, #2
 801e28c:	f7fe fb0f 	bl	801c8ae <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
 801e290:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
 801e294:	6862      	ldr	r2, [r4, #4]
 801e296:	8992      	ldrh	r2, [r2, #12]
 801e298:	1a9b      	subs	r3, r3, r2
 801e29a:	2b12      	cmp	r3, #18
 801e29c:	d801      	bhi.n	801e2a2 <find_info_cb+0xb4>
	return BT_GATT_ITER_STOP;
 801e29e:	2500      	movs	r5, #0
 801e2a0:	e7b5      	b.n	801e20e <find_info_cb+0x20>
			return BT_GATT_ITER_CONTINUE;
 801e2a2:	2501      	movs	r5, #1
 801e2a4:	e7b3      	b.n	801e20e <find_info_cb+0x20>

0801e2a6 <att_get_fixed_chan>:
{
 801e2a6:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
 801e2a8:	2104      	movs	r1, #4
 801e2aa:	f7ff fbe5 	bl	801da78 <bt_l2cap_le_lookup_tx_cid>
}
 801e2ae:	3808      	subs	r0, #8
 801e2b0:	bd08      	pop	{r3, pc}

0801e2b2 <att_write_cmd>:
{
 801e2b2:	b530      	push	{r4, r5, lr}
 801e2b4:	b085      	sub	sp, #20
 801e2b6:	4605      	mov	r5, r0
 801e2b8:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
 801e2ba:	f101 0008 	add.w	r0, r1, #8
 801e2be:	f002 f91e 	bl	80204fe <net_buf_simple_pull_le16>
 801e2c2:	4603      	mov	r3, r0
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
 801e2c4:	68a2      	ldr	r2, [r4, #8]
 801e2c6:	89a1      	ldrh	r1, [r4, #12]
 801e2c8:	9102      	str	r1, [sp, #8]
 801e2ca:	9201      	str	r2, [sp, #4]
 801e2cc:	2100      	movs	r1, #0
 801e2ce:	9100      	str	r1, [sp, #0]
 801e2d0:	460a      	mov	r2, r1
 801e2d2:	4628      	mov	r0, r5
 801e2d4:	f7f3 fda4 	bl	8011e20 <att_write_rsp>
}
 801e2d8:	b005      	add	sp, #20
 801e2da:	bd30      	pop	{r4, r5, pc}

0801e2dc <att_write_req>:
{
 801e2dc:	b530      	push	{r4, r5, lr}
 801e2de:	b085      	sub	sp, #20
 801e2e0:	4605      	mov	r5, r0
 801e2e2:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
 801e2e4:	f101 0008 	add.w	r0, r1, #8
 801e2e8:	f002 f909 	bl	80204fe <net_buf_simple_pull_le16>
 801e2ec:	4603      	mov	r3, r0
			     handle, 0, buf->data, buf->len);
 801e2ee:	68a2      	ldr	r2, [r4, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
 801e2f0:	89a1      	ldrh	r1, [r4, #12]
 801e2f2:	9102      	str	r1, [sp, #8]
 801e2f4:	9201      	str	r2, [sp, #4]
 801e2f6:	2200      	movs	r2, #0
 801e2f8:	9200      	str	r2, [sp, #0]
 801e2fa:	2213      	movs	r2, #19
 801e2fc:	2112      	movs	r1, #18
 801e2fe:	4628      	mov	r0, r5
 801e300:	f7f3 fd8e 	bl	8011e20 <att_write_rsp>
}
 801e304:	b005      	add	sp, #20
 801e306:	bd30      	pop	{r4, r5, pc}

0801e308 <att_read_group_req>:
{
 801e308:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e30a:	b089      	sub	sp, #36	; 0x24
 801e30c:	4605      	mov	r5, r0
 801e30e:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
 801e310:	7b0c      	ldrb	r4, [r1, #12]
 801e312:	3c04      	subs	r4, #4
 801e314:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
 801e316:	2c02      	cmp	r4, #2
 801e318:	d001      	beq.n	801e31e <att_read_group_req+0x16>
 801e31a:	2c10      	cmp	r4, #16
 801e31c:	d142      	bne.n	801e3a4 <att_read_group_req+0x9c>
	req = net_buf_pull_mem(buf, sizeof(*req));
 801e31e:	2104      	movs	r1, #4
 801e320:	3008      	adds	r0, #8
 801e322:	f002 f8dc 	bl	80204de <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
 801e326:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
 801e328:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
 801e32a:	4622      	mov	r2, r4
 801e32c:	1d01      	adds	r1, r0, #4
 801e32e:	a801      	add	r0, sp, #4
 801e330:	f7fe fba1 	bl	801ca76 <bt_uuid_create>
 801e334:	b3c8      	cbz	r0, 801e3aa <att_read_group_req+0xa2>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
 801e336:	f10d 0216 	add.w	r2, sp, #22
 801e33a:	4639      	mov	r1, r7
 801e33c:	4630      	mov	r0, r6
 801e33e:	f7ff fbf1 	bl	801db24 <range_is_valid>
 801e342:	b1f0      	cbz	r0, 801e382 <att_read_group_req+0x7a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
 801e344:	2300      	movs	r3, #0
 801e346:	f88d 3018 	strb.w	r3, [sp, #24]
 801e34a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 801e34e:	f8ad 301a 	strh.w	r3, [sp, #26]
 801e352:	a906      	add	r1, sp, #24
 801e354:	a801      	add	r0, sp, #4
 801e356:	f7fe fb70 	bl	801ca3a <bt_uuid_cmp>
 801e35a:	b158      	cbz	r0, 801e374 <att_read_group_req+0x6c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
 801e35c:	2300      	movs	r3, #0
 801e35e:	f88d 301c 	strb.w	r3, [sp, #28]
 801e362:	f642 0301 	movw	r3, #10241	; 0x2801
 801e366:	f8ad 301e 	strh.w	r3, [sp, #30]
 801e36a:	a907      	add	r1, sp, #28
 801e36c:	a801      	add	r0, sp, #4
 801e36e:	f7fe fb64 	bl	801ca3a <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
 801e372:	b978      	cbnz	r0, 801e394 <att_read_group_req+0x8c>
	return att_read_group_rsp(chan, &u.uuid, start_handle, end_handle);
 801e374:	463b      	mov	r3, r7
 801e376:	4632      	mov	r2, r6
 801e378:	a901      	add	r1, sp, #4
 801e37a:	4628      	mov	r0, r5
 801e37c:	f7f3 fe08 	bl	8011f90 <att_read_group_rsp>
 801e380:	e011      	b.n	801e3a6 <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, err_handle,
 801e382:	2301      	movs	r3, #1
 801e384:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801e388:	2110      	movs	r1, #16
 801e38a:	4628      	mov	r0, r5
 801e38c:	f7f3 fc52 	bl	8011c34 <send_err_rsp>
		return 0;
 801e390:	2000      	movs	r0, #0
 801e392:	e008      	b.n	801e3a6 <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
 801e394:	2310      	movs	r3, #16
 801e396:	4632      	mov	r2, r6
 801e398:	4619      	mov	r1, r3
 801e39a:	4628      	mov	r0, r5
 801e39c:	f7f3 fc4a 	bl	8011c34 <send_err_rsp>
		return 0;
 801e3a0:	2000      	movs	r0, #0
 801e3a2:	e000      	b.n	801e3a6 <att_read_group_req+0x9e>
		return BT_ATT_ERR_INVALID_PDU;
 801e3a4:	2004      	movs	r0, #4
}
 801e3a6:	b009      	add	sp, #36	; 0x24
 801e3a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_UNLIKELY;
 801e3aa:	200e      	movs	r0, #14
 801e3ac:	e7fb      	b.n	801e3a6 <att_read_group_req+0x9e>

0801e3ae <att_read_blob_req>:
{
 801e3ae:	b500      	push	{lr}
 801e3b0:	b083      	sub	sp, #12
	req = (void *)buf->data;
 801e3b2:	688a      	ldr	r2, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
 801e3b4:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
 801e3b6:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
 801e3b8:	9200      	str	r2, [sp, #0]
 801e3ba:	220d      	movs	r2, #13
 801e3bc:	210c      	movs	r1, #12
 801e3be:	f7f3 fe75 	bl	80120ac <att_read_rsp>
}
 801e3c2:	b003      	add	sp, #12
 801e3c4:	f85d fb04 	ldr.w	pc, [sp], #4

0801e3c8 <att_read_req>:
{
 801e3c8:	b500      	push	{lr}
 801e3ca:	b083      	sub	sp, #12
	req = (void *)buf->data;
 801e3cc:	688b      	ldr	r3, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
 801e3ce:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
 801e3d0:	2200      	movs	r2, #0
 801e3d2:	9200      	str	r2, [sp, #0]
 801e3d4:	220b      	movs	r2, #11
 801e3d6:	210a      	movs	r1, #10
 801e3d8:	f7f3 fe68 	bl	80120ac <att_read_rsp>
}
 801e3dc:	b003      	add	sp, #12
 801e3de:	f85d fb04 	ldr.w	pc, [sp], #4

0801e3e2 <att_read_type_req>:
{
 801e3e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e3e4:	b087      	sub	sp, #28
 801e3e6:	4605      	mov	r5, r0
 801e3e8:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
 801e3ea:	7b0c      	ldrb	r4, [r1, #12]
 801e3ec:	3c04      	subs	r4, #4
 801e3ee:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
 801e3f0:	2c02      	cmp	r4, #2
 801e3f2:	d001      	beq.n	801e3f8 <att_read_type_req+0x16>
 801e3f4:	2c10      	cmp	r4, #16
 801e3f6:	d123      	bne.n	801e440 <att_read_type_req+0x5e>
	req = net_buf_pull_mem(buf, sizeof(*req));
 801e3f8:	2104      	movs	r1, #4
 801e3fa:	3008      	adds	r0, #8
 801e3fc:	f002 f86f 	bl	80204de <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
 801e400:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
 801e402:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
 801e404:	4622      	mov	r2, r4
 801e406:	1d01      	adds	r1, r0, #4
 801e408:	a801      	add	r0, sp, #4
 801e40a:	f7fe fb34 	bl	801ca76 <bt_uuid_create>
 801e40e:	b1c8      	cbz	r0, 801e444 <att_read_type_req+0x62>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
 801e410:	f10d 0216 	add.w	r2, sp, #22
 801e414:	4639      	mov	r1, r7
 801e416:	4630      	mov	r0, r6
 801e418:	f7ff fb84 	bl	801db24 <range_is_valid>
 801e41c:	b138      	cbz	r0, 801e42e <att_read_type_req+0x4c>
	return att_read_type_rsp(chan, &u.uuid, start_handle, end_handle);
 801e41e:	463b      	mov	r3, r7
 801e420:	4632      	mov	r2, r6
 801e422:	a901      	add	r1, sp, #4
 801e424:	4628      	mov	r0, r5
 801e426:	f7f3 fe93 	bl	8012150 <att_read_type_rsp>
}
 801e42a:	b007      	add	sp, #28
 801e42c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, err_handle,
 801e42e:	2301      	movs	r3, #1
 801e430:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801e434:	2108      	movs	r1, #8
 801e436:	4628      	mov	r0, r5
 801e438:	f7f3 fbfc 	bl	8011c34 <send_err_rsp>
		return 0;
 801e43c:	2000      	movs	r0, #0
 801e43e:	e7f4      	b.n	801e42a <att_read_type_req+0x48>
		return BT_ATT_ERR_INVALID_PDU;
 801e440:	2004      	movs	r0, #4
 801e442:	e7f2      	b.n	801e42a <att_read_type_req+0x48>
		return BT_ATT_ERR_UNLIKELY;
 801e444:	200e      	movs	r0, #14
 801e446:	e7f0      	b.n	801e42a <att_read_type_req+0x48>

0801e448 <att_find_type_req>:
{
 801e448:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e44c:	b087      	sub	sp, #28
 801e44e:	4607      	mov	r7, r0
 801e450:	460c      	mov	r4, r1
	req = net_buf_pull_mem(buf, sizeof(*req));
 801e452:	2106      	movs	r1, #6
 801e454:	f104 0008 	add.w	r0, r4, #8
 801e458:	f002 f841 	bl	80204de <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
 801e45c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
 801e45e:	8846      	ldrh	r6, [r0, #2]
	type = sys_le16_to_cpu(req->type);
 801e460:	f8b0 8004 	ldrh.w	r8, [r0, #4]
	value = buf->data;
 801e464:	f8d4 9008 	ldr.w	r9, [r4, #8]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
 801e468:	f10d 020e 	add.w	r2, sp, #14
 801e46c:	4631      	mov	r1, r6
 801e46e:	4628      	mov	r0, r5
 801e470:	f7ff fb58 	bl	801db24 <range_is_valid>
 801e474:	b1d0      	cbz	r0, 801e4ac <att_find_type_req+0x64>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
 801e476:	2300      	movs	r3, #0
 801e478:	f88d 3010 	strb.w	r3, [sp, #16]
 801e47c:	f8ad 8012 	strh.w	r8, [sp, #18]
 801e480:	f88d 3014 	strb.w	r3, [sp, #20]
 801e484:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 801e488:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e48c:	a905      	add	r1, sp, #20
 801e48e:	a804      	add	r0, sp, #16
 801e490:	f7fe fad3 	bl	801ca3a <bt_uuid_cmp>
 801e494:	b998      	cbnz	r0, 801e4be <att_find_type_req+0x76>
	return att_find_type_rsp(chan, start_handle, end_handle, value,
 801e496:	7b23      	ldrb	r3, [r4, #12]
 801e498:	9300      	str	r3, [sp, #0]
 801e49a:	464b      	mov	r3, r9
 801e49c:	4632      	mov	r2, r6
 801e49e:	4629      	mov	r1, r5
 801e4a0:	4638      	mov	r0, r7
 801e4a2:	f7f3 fe9f 	bl	80121e4 <att_find_type_rsp>
}
 801e4a6:	b007      	add	sp, #28
 801e4a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
 801e4ac:	2301      	movs	r3, #1
 801e4ae:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801e4b2:	2106      	movs	r1, #6
 801e4b4:	4638      	mov	r0, r7
 801e4b6:	f7f3 fbbd 	bl	8011c34 <send_err_rsp>
		return 0;
 801e4ba:	2000      	movs	r0, #0
 801e4bc:	e7f3      	b.n	801e4a6 <att_find_type_req+0x5e>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
 801e4be:	230a      	movs	r3, #10
 801e4c0:	462a      	mov	r2, r5
 801e4c2:	2106      	movs	r1, #6
 801e4c4:	4638      	mov	r0, r7
 801e4c6:	f7f3 fbb5 	bl	8011c34 <send_err_rsp>
		return 0;
 801e4ca:	2000      	movs	r0, #0
 801e4cc:	e7eb      	b.n	801e4a6 <att_find_type_req+0x5e>

0801e4ce <att_find_info_req>:
{
 801e4ce:	b570      	push	{r4, r5, r6, lr}
 801e4d0:	b082      	sub	sp, #8
 801e4d2:	4604      	mov	r4, r0
	req = (void *)buf->data;
 801e4d4:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
 801e4d6:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
 801e4d8:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
 801e4da:	f10d 0206 	add.w	r2, sp, #6
 801e4de:	4631      	mov	r1, r6
 801e4e0:	4628      	mov	r0, r5
 801e4e2:	f7ff fb1f 	bl	801db24 <range_is_valid>
 801e4e6:	b130      	cbz	r0, 801e4f6 <att_find_info_req+0x28>
	return att_find_info_rsp(chan, start_handle, end_handle);
 801e4e8:	4632      	mov	r2, r6
 801e4ea:	4629      	mov	r1, r5
 801e4ec:	4620      	mov	r0, r4
 801e4ee:	f7f3 fec3 	bl	8012278 <att_find_info_rsp>
}
 801e4f2:	b002      	add	sp, #8
 801e4f4:	bd70      	pop	{r4, r5, r6, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, err_handle,
 801e4f6:	2301      	movs	r3, #1
 801e4f8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801e4fc:	2104      	movs	r1, #4
 801e4fe:	4620      	mov	r0, r4
 801e500:	f7f3 fb98 	bl	8011c34 <send_err_rsp>
		return 0;
 801e504:	2000      	movs	r0, #0
 801e506:	e7f4      	b.n	801e4f2 <att_find_info_req+0x24>

0801e508 <bt_att_init>:
{
 801e508:	b508      	push	{r3, lr}
	bt_gatt_init();
 801e50a:	f7f5 fa7f 	bl	8013a0c <bt_gatt_init>
}
 801e50e:	bd08      	pop	{r3, pc}

0801e510 <att_req_destroy>:
{
 801e510:	b510      	push	{r4, lr}
 801e512:	4604      	mov	r4, r0
	if (req->buf) {
 801e514:	6900      	ldr	r0, [r0, #16]
 801e516:	b108      	cbz	r0, 801e51c <att_req_destroy+0xc>
		net_buf_unref(req->buf);
 801e518:	f001 ff66 	bl	80203e8 <net_buf_unref>
	if (req->destroy) {
 801e51c:	68a3      	ldr	r3, [r4, #8]
 801e51e:	b10b      	cbz	r3, 801e524 <att_req_destroy+0x14>
		req->destroy(req);
 801e520:	4620      	mov	r0, r4
 801e522:	4798      	blx	r3
	bt_att_req_free(req);
 801e524:	4620      	mov	r0, r4
 801e526:	f7f3 ff2f 	bl	8012388 <bt_att_req_free>
}
 801e52a:	bd10      	pop	{r4, pc}

0801e52c <att_handle_exec_write_rsp>:
{
 801e52c:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
 801e52e:	2300      	movs	r3, #0
 801e530:	898a      	ldrh	r2, [r1, #12]
 801e532:	6889      	ldr	r1, [r1, #8]
 801e534:	f7f3 ff34 	bl	80123a0 <att_handle_rsp>
}
 801e538:	bd08      	pop	{r3, pc}

0801e53a <att_handle_prepare_write_rsp>:
{
 801e53a:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
 801e53c:	2300      	movs	r3, #0
 801e53e:	898a      	ldrh	r2, [r1, #12]
 801e540:	6889      	ldr	r1, [r1, #8]
 801e542:	f7f3 ff2d 	bl	80123a0 <att_handle_rsp>
}
 801e546:	bd08      	pop	{r3, pc}

0801e548 <att_handle_write_rsp>:
{
 801e548:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
 801e54a:	2300      	movs	r3, #0
 801e54c:	898a      	ldrh	r2, [r1, #12]
 801e54e:	6889      	ldr	r1, [r1, #8]
 801e550:	f7f3 ff26 	bl	80123a0 <att_handle_rsp>
}
 801e554:	bd08      	pop	{r3, pc}

0801e556 <att_handle_read_group_rsp>:
{
 801e556:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
 801e558:	2300      	movs	r3, #0
 801e55a:	898a      	ldrh	r2, [r1, #12]
 801e55c:	6889      	ldr	r1, [r1, #8]
 801e55e:	f7f3 ff1f 	bl	80123a0 <att_handle_rsp>
}
 801e562:	bd08      	pop	{r3, pc}

0801e564 <att_handle_read_mult_rsp>:
{
 801e564:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
 801e566:	2300      	movs	r3, #0
 801e568:	898a      	ldrh	r2, [r1, #12]
 801e56a:	6889      	ldr	r1, [r1, #8]
 801e56c:	f7f3 ff18 	bl	80123a0 <att_handle_rsp>
}
 801e570:	bd08      	pop	{r3, pc}

0801e572 <att_handle_read_blob_rsp>:
{
 801e572:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
 801e574:	2300      	movs	r3, #0
 801e576:	898a      	ldrh	r2, [r1, #12]
 801e578:	6889      	ldr	r1, [r1, #8]
 801e57a:	f7f3 ff11 	bl	80123a0 <att_handle_rsp>
}
 801e57e:	bd08      	pop	{r3, pc}

0801e580 <att_handle_read_rsp>:
{
 801e580:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
 801e582:	2300      	movs	r3, #0
 801e584:	898a      	ldrh	r2, [r1, #12]
 801e586:	6889      	ldr	r1, [r1, #8]
 801e588:	f7f3 ff0a 	bl	80123a0 <att_handle_rsp>
}
 801e58c:	bd08      	pop	{r3, pc}

0801e58e <att_handle_read_type_rsp>:
{
 801e58e:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
 801e590:	2300      	movs	r3, #0
 801e592:	898a      	ldrh	r2, [r1, #12]
 801e594:	6889      	ldr	r1, [r1, #8]
 801e596:	f7f3 ff03 	bl	80123a0 <att_handle_rsp>
}
 801e59a:	bd08      	pop	{r3, pc}

0801e59c <att_handle_find_type_rsp>:
{
 801e59c:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
 801e59e:	2300      	movs	r3, #0
 801e5a0:	898a      	ldrh	r2, [r1, #12]
 801e5a2:	6889      	ldr	r1, [r1, #8]
 801e5a4:	f7f3 fefc 	bl	80123a0 <att_handle_rsp>
}
 801e5a8:	bd08      	pop	{r3, pc}

0801e5aa <att_handle_find_info_rsp>:
{
 801e5aa:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
 801e5ac:	2300      	movs	r3, #0
 801e5ae:	898a      	ldrh	r2, [r1, #12]
 801e5b0:	6889      	ldr	r1, [r1, #8]
 801e5b2:	f7f3 fef5 	bl	80123a0 <att_handle_rsp>
}
 801e5b6:	bd08      	pop	{r3, pc}

0801e5b8 <att_mtu_rsp>:
{
 801e5b8:	b508      	push	{r3, lr}
 801e5ba:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
 801e5bc:	6889      	ldr	r1, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
 801e5be:	880b      	ldrh	r3, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
 801e5c0:	2b16      	cmp	r3, #22
 801e5c2:	d90b      	bls.n	801e5dc <att_mtu_rsp+0x24>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
 801e5c4:	2b41      	cmp	r3, #65	; 0x41
 801e5c6:	bf28      	it	cs
 801e5c8:	2341      	movcs	r3, #65	; 0x41
 801e5ca:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
 801e5ce:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
	return att_handle_rsp(chan, rsp, buf->len, 0);
 801e5d2:	2300      	movs	r3, #0
 801e5d4:	8992      	ldrh	r2, [r2, #12]
 801e5d6:	f7f3 fee3 	bl	80123a0 <att_handle_rsp>
}
 801e5da:	bd08      	pop	{r3, pc}
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
 801e5dc:	2304      	movs	r3, #4
 801e5de:	2200      	movs	r2, #0
 801e5e0:	4611      	mov	r1, r2
 801e5e2:	f7f3 fedd 	bl	80123a0 <att_handle_rsp>
 801e5e6:	e7f8      	b.n	801e5da <att_mtu_rsp+0x22>

0801e5e8 <att_confirm>:
{
 801e5e8:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
 801e5ea:	2300      	movs	r3, #0
 801e5ec:	898a      	ldrh	r2, [r1, #12]
 801e5ee:	6889      	ldr	r1, [r1, #8]
 801e5f0:	f7f3 fed6 	bl	80123a0 <att_handle_rsp>
}
 801e5f4:	bd08      	pop	{r3, pc}

0801e5f6 <bt_att_encrypt_change>:
{
 801e5f6:	b570      	push	{r4, r5, r6, lr}
 801e5f8:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
 801e5fa:	4605      	mov	r5, r0
	struct bt_conn *conn = ch->chan.conn;
 801e5fc:	f855 6908 	ldr.w	r6, [r5], #-8
	if (hci_status) {
 801e600:	b149      	cbz	r1, 801e616 <bt_att_encrypt_change+0x20>
		if (att_chan->req) {
 801e602:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 801e606:	b12b      	cbz	r3, 801e614 <bt_att_encrypt_change+0x1e>
			att_handle_rsp(att_chan, NULL, 0,
 801e608:	2305      	movs	r3, #5
 801e60a:	2200      	movs	r2, #0
 801e60c:	4611      	mov	r1, r2
 801e60e:	4628      	mov	r0, r5
 801e610:	f7f3 fec6 	bl	80123a0 <att_handle_rsp>
}
 801e614:	bd70      	pop	{r4, r5, r6, pc}
	bt_gatt_encrypt_change(conn);
 801e616:	4630      	mov	r0, r6
 801e618:	f7f6 f8ae 	bl	8014778 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
 801e61c:	7a73      	ldrb	r3, [r6, #9]
 801e61e:	2b01      	cmp	r3, #1
 801e620:	d0f8      	beq.n	801e614 <bt_att_encrypt_change+0x1e>
	if (!att_chan->req || !att_chan->req->retrying) {
 801e622:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 801e626:	2b00      	cmp	r3, #0
 801e628:	d0f4      	beq.n	801e614 <bt_att_encrypt_change+0x1e>
 801e62a:	7d1a      	ldrb	r2, [r3, #20]
 801e62c:	2a00      	cmp	r2, #0
 801e62e:	d0f1      	beq.n	801e614 <bt_att_encrypt_change+0x1e>
	bt_att_chan_send_rsp(att_chan, att_chan->req->buf,
 801e630:	691e      	ldr	r6, [r3, #16]
 801e632:	4630      	mov	r0, r6
 801e634:	f7f2 ff2e 	bl	8011494 <chan_cb>
 801e638:	4602      	mov	r2, r0
 801e63a:	4631      	mov	r1, r6
 801e63c:	4628      	mov	r0, r5
 801e63e:	f7ff fca6 	bl	801df8e <bt_att_chan_send_rsp>
	att_chan->req->buf = NULL;
 801e642:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 801e646:	2200      	movs	r2, #0
 801e648:	611a      	str	r2, [r3, #16]
 801e64a:	e7e3      	b.n	801e614 <bt_att_encrypt_change+0x1e>

0801e64c <att_chan_detach>:
{
 801e64c:	b538      	push	{r3, r4, r5, lr}
 801e64e:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
 801e650:	6800      	ldr	r0, [r0, #0]
 801e652:	f504 7296 	add.w	r2, r4, #300	; 0x12c
	return list->head;
 801e656:	6a43      	ldr	r3, [r0, #36]	; 0x24
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 801e658:	2100      	movs	r1, #0
 801e65a:	b173      	cbz	r3, 801e67a <att_chan_detach+0x2e>
 801e65c:	429a      	cmp	r2, r3
 801e65e:	d002      	beq.n	801e666 <att_chan_detach+0x1a>
 801e660:	4619      	mov	r1, r3
 801e662:	681b      	ldr	r3, [r3, #0]
 801e664:	e7f9      	b.n	801e65a <att_chan_detach+0xe>
Z_GENLIST_REMOVE(slist, snode)
 801e666:	b151      	cbz	r1, 801e67e <att_chan_detach+0x32>
	return node->next;
 801e668:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
	parent->next = child;
 801e66c:	600b      	str	r3, [r1, #0]
	return list->tail;
 801e66e:	6a83      	ldr	r3, [r0, #40]	; 0x28
Z_GENLIST_REMOVE(slist, snode)
 801e670:	429a      	cmp	r2, r3
 801e672:	d00c      	beq.n	801e68e <att_chan_detach+0x42>
	parent->next = child;
 801e674:	2300      	movs	r3, #0
 801e676:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 801e67a:	2500      	movs	r5, #0
 801e67c:	e00e      	b.n	801e69c <att_chan_detach+0x50>
	return node->next;
 801e67e:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
	list->head = node;
 801e682:	6243      	str	r3, [r0, #36]	; 0x24
	return list->tail;
 801e684:	6a81      	ldr	r1, [r0, #40]	; 0x28
Z_GENLIST_REMOVE(slist, snode)
 801e686:	428a      	cmp	r2, r1
 801e688:	d1f4      	bne.n	801e674 <att_chan_detach+0x28>
	list->tail = node;
 801e68a:	6283      	str	r3, [r0, #40]	; 0x28
}
 801e68c:	e7f2      	b.n	801e674 <att_chan_detach+0x28>
	list->tail = node;
 801e68e:	6281      	str	r1, [r0, #40]	; 0x28
}
 801e690:	e7f0      	b.n	801e674 <att_chan_detach+0x28>
		k_sem_give(&chan->tx_sem);
 801e692:	f504 7088 	add.w	r0, r4, #272	; 0x110
	z_impl_k_sem_give(sem);
 801e696:	f7fa fad7 	bl	8018c48 <z_impl_k_sem_give>
	for (i = 0; i < CONFIG_BT_ATT_TX_MAX; i++) {
 801e69a:	3501      	adds	r5, #1
 801e69c:	2d02      	cmp	r5, #2
 801e69e:	ddf8      	ble.n	801e692 <att_chan_detach+0x46>
 801e6a0:	e002      	b.n	801e6a8 <att_chan_detach+0x5c>
		net_buf_unref(buf);
 801e6a2:	4618      	mov	r0, r3
 801e6a4:	f001 fea0 	bl	80203e8 <net_buf_unref>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
 801e6a8:	2200      	movs	r2, #0
 801e6aa:	2300      	movs	r3, #0
 801e6ac:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
 801e6b0:	f001 fe68 	bl	8020384 <net_buf_get>
 801e6b4:	4603      	mov	r3, r0
 801e6b6:	2800      	cmp	r0, #0
 801e6b8:	d1f3      	bne.n	801e6a2 <att_chan_detach+0x56>
	if (chan->req) {
 801e6ba:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 801e6be:	b12b      	cbz	r3, 801e6cc <att_chan_detach+0x80>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
 801e6c0:	230e      	movs	r3, #14
 801e6c2:	2200      	movs	r2, #0
 801e6c4:	4611      	mov	r1, r2
 801e6c6:	4620      	mov	r0, r4
 801e6c8:	f7f3 fe6a 	bl	80123a0 <att_handle_rsp>
	chan->att = NULL;
 801e6cc:	2300      	movs	r3, #0
 801e6ce:	6023      	str	r3, [r4, #0]
}
 801e6d0:	bd38      	pop	{r3, r4, r5, pc}

0801e6d2 <bt_att_disconnected>:
{
 801e6d2:	b538      	push	{r3, r4, r5, lr}
 801e6d4:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
 801e6d6:	f850 5c08 	ldr.w	r5, [r0, #-8]
	att_chan_detach(att_chan);
 801e6da:	3808      	subs	r0, #8
 801e6dc:	f7ff ffb6 	bl	801e64c <att_chan_detach>
	return list->head;
 801e6e0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (!sys_slist_is_empty(&att->chans)) {
 801e6e2:	b103      	cbz	r3, 801e6e6 <bt_att_disconnected+0x14>
}
 801e6e4:	bd38      	pop	{r3, r4, r5, pc}
	att_reset(att);
 801e6e6:	4628      	mov	r0, r5
 801e6e8:	f7f3 fee4 	bl	80124b4 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
 801e6ec:	6820      	ldr	r0, [r4, #0]
 801e6ee:	f7f6 f8df 	bl	80148b0 <bt_gatt_disconnected>
 801e6f2:	e7f7      	b.n	801e6e4 <bt_att_disconnected+0x12>

0801e6f4 <bt_att_send>:
{
 801e6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e6f8:	b082      	sub	sp, #8
 801e6fa:	4607      	mov	r7, r0
 801e6fc:	460d      	mov	r5, r1
 801e6fe:	4614      	mov	r4, r2
 801e700:	4698      	mov	r8, r3
	att = att_get(conn);
 801e702:	f7f2 fee3 	bl	80114cc <att_get>
	if (!att) {
 801e706:	b178      	cbz	r0, 801e728 <bt_att_send+0x34>
 801e708:	4606      	mov	r6, r0
	if (cb) {
 801e70a:	b99c      	cbnz	r4, 801e734 <bt_att_send+0x40>
 801e70c:	6a40      	ldr	r0, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
 801e70e:	b1d0      	cbz	r0, 801e746 <bt_att_send+0x52>
 801e710:	f5b0 7096 	subs.w	r0, r0, #300	; 0x12c
 801e714:	d01a      	beq.n	801e74c <bt_att_send+0x58>
Z_GENLIST_PEEK_NEXT(slist, snode)
 801e716:	f510 7496 	adds.w	r4, r0, #300	; 0x12c
 801e71a:	d015      	beq.n	801e748 <bt_att_send+0x54>
	return node->next;
 801e71c:	f8d0 412c 	ldr.w	r4, [r0, #300]	; 0x12c
 801e720:	b194      	cbz	r4, 801e748 <bt_att_send+0x54>
 801e722:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
 801e726:	e00f      	b.n	801e748 <bt_att_send+0x54>
		net_buf_unref(buf);
 801e728:	4628      	mov	r0, r5
 801e72a:	f001 fe5d 	bl	80203e8 <net_buf_unref>
		return -ENOTCONN;
 801e72e:	f06f 0038 	mvn.w	r0, #56	; 0x38
 801e732:	e026      	b.n	801e782 <bt_att_send+0x8e>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
 801e734:	f8cd 8000 	str.w	r8, [sp]
 801e738:	4623      	mov	r3, r4
 801e73a:	462a      	mov	r2, r5
 801e73c:	2104      	movs	r1, #4
 801e73e:	4638      	mov	r0, r7
 801e740:	f7ff f95d 	bl	801d9fe <bt_l2cap_send_cb>
 801e744:	e01d      	b.n	801e782 <bt_att_send+0x8e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
 801e746:	4604      	mov	r4, r0
 801e748:	2300      	movs	r3, #0
 801e74a:	e004      	b.n	801e756 <bt_att_send+0x62>
 801e74c:	4604      	mov	r4, r0
 801e74e:	e7fb      	b.n	801e748 <bt_att_send+0x54>
 801e750:	4622      	mov	r2, r4
 801e752:	4620      	mov	r0, r4
 801e754:	4614      	mov	r4, r2
 801e756:	b188      	cbz	r0, 801e77c <bt_att_send+0x88>
		ret = bt_att_chan_send(chan, buf, NULL);
 801e758:	2200      	movs	r2, #0
 801e75a:	4629      	mov	r1, r5
 801e75c:	f7ff fae5 	bl	801dd2a <bt_att_chan_send>
		if (ret >= 0) {
 801e760:	1e03      	subs	r3, r0, #0
 801e762:	da0b      	bge.n	801e77c <bt_att_send+0x88>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
 801e764:	2c00      	cmp	r4, #0
 801e766:	d0f3      	beq.n	801e750 <bt_att_send+0x5c>
Z_GENLIST_PEEK_NEXT(slist, snode)
 801e768:	f514 7296 	adds.w	r2, r4, #300	; 0x12c
 801e76c:	d0f1      	beq.n	801e752 <bt_att_send+0x5e>
	return node->next;
 801e76e:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
 801e772:	2a00      	cmp	r2, #0
 801e774:	d0ed      	beq.n	801e752 <bt_att_send+0x5e>
 801e776:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 801e77a:	e7ea      	b.n	801e752 <bt_att_send+0x5e>
	if (ret < 0) {
 801e77c:	2b00      	cmp	r3, #0
 801e77e:	db03      	blt.n	801e788 <bt_att_send+0x94>
	return 0;
 801e780:	2000      	movs	r0, #0
}
 801e782:	b002      	add	sp, #8
 801e784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_put(&att->tx_queue, buf);
 801e788:	4629      	mov	r1, r5
 801e78a:	f106 000c 	add.w	r0, r6, #12
 801e78e:	f001 fe1e 	bl	80203ce <net_buf_put>
	return 0;
 801e792:	2000      	movs	r0, #0
 801e794:	e7f5      	b.n	801e782 <bt_att_send+0x8e>

0801e796 <bt_att_req_send>:
{
 801e796:	b570      	push	{r4, r5, r6, lr}
 801e798:	460d      	mov	r5, r1
	att = att_get(conn);
 801e79a:	f7f2 fe97 	bl	80114cc <att_get>
	if (!att) {
 801e79e:	b170      	cbz	r0, 801e7be <bt_att_req_send+0x28>
 801e7a0:	4606      	mov	r6, r0
	return list->head;
 801e7a2:	6a40      	ldr	r0, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
 801e7a4:	b1c8      	cbz	r0, 801e7da <bt_att_req_send+0x44>
 801e7a6:	f5b0 7096 	subs.w	r0, r0, #300	; 0x12c
 801e7aa:	d018      	beq.n	801e7de <bt_att_req_send+0x48>
Z_GENLIST_PEEK_NEXT(slist, snode)
 801e7ac:	f510 7496 	adds.w	r4, r0, #300	; 0x12c
 801e7b0:	d01a      	beq.n	801e7e8 <bt_att_req_send+0x52>
	return node->next;
 801e7b2:	f8d0 412c 	ldr.w	r4, [r0, #300]	; 0x12c
 801e7b6:	b1bc      	cbz	r4, 801e7e8 <bt_att_req_send+0x52>
 801e7b8:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
 801e7bc:	e014      	b.n	801e7e8 <bt_att_req_send+0x52>
		net_buf_unref(req->buf);
 801e7be:	6928      	ldr	r0, [r5, #16]
 801e7c0:	f001 fe12 	bl	80203e8 <net_buf_unref>
		req->buf = NULL;
 801e7c4:	2300      	movs	r3, #0
 801e7c6:	612b      	str	r3, [r5, #16]
		return -ENOTCONN;
 801e7c8:	f06f 0038 	mvn.w	r0, #56	; 0x38
 801e7cc:	e024      	b.n	801e818 <bt_att_req_send+0x82>
			ret = bt_att_chan_req_send(chan, req);
 801e7ce:	4629      	mov	r1, r5
 801e7d0:	f7ff fadd 	bl	801dd8e <bt_att_chan_req_send>
			if (ret >= 0) {
 801e7d4:	2800      	cmp	r0, #0
 801e7d6:	db0c      	blt.n	801e7f2 <bt_att_req_send+0x5c>
 801e7d8:	e01e      	b.n	801e818 <bt_att_req_send+0x82>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
 801e7da:	4604      	mov	r4, r0
 801e7dc:	e004      	b.n	801e7e8 <bt_att_req_send+0x52>
 801e7de:	4604      	mov	r4, r0
 801e7e0:	e002      	b.n	801e7e8 <bt_att_req_send+0x52>
 801e7e2:	4623      	mov	r3, r4
 801e7e4:	4620      	mov	r0, r4
 801e7e6:	461c      	mov	r4, r3
 801e7e8:	b178      	cbz	r0, 801e80a <bt_att_req_send+0x74>
		if (!chan->req) {
 801e7ea:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
 801e7ee:	2b00      	cmp	r3, #0
 801e7f0:	d0ed      	beq.n	801e7ce <bt_att_req_send+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
 801e7f2:	2c00      	cmp	r4, #0
 801e7f4:	d0f5      	beq.n	801e7e2 <bt_att_req_send+0x4c>
Z_GENLIST_PEEK_NEXT(slist, snode)
 801e7f6:	f514 7396 	adds.w	r3, r4, #300	; 0x12c
 801e7fa:	d0f3      	beq.n	801e7e4 <bt_att_req_send+0x4e>
	return node->next;
 801e7fc:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 801e800:	2b00      	cmp	r3, #0
 801e802:	d0ef      	beq.n	801e7e4 <bt_att_req_send+0x4e>
 801e804:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801e808:	e7ec      	b.n	801e7e4 <bt_att_req_send+0x4e>
	parent->next = child;
 801e80a:	2300      	movs	r3, #0
 801e80c:	602b      	str	r3, [r5, #0]
	return list->tail;
 801e80e:	68b3      	ldr	r3, [r6, #8]
Z_GENLIST_APPEND(slist, snode)
 801e810:	b11b      	cbz	r3, 801e81a <bt_att_req_send+0x84>
	parent->next = child;
 801e812:	601d      	str	r5, [r3, #0]
	list->tail = node;
 801e814:	60b5      	str	r5, [r6, #8]
	return 0;
 801e816:	2000      	movs	r0, #0
}
 801e818:	bd70      	pop	{r4, r5, r6, pc}
 801e81a:	60b5      	str	r5, [r6, #8]
	list->head = node;
 801e81c:	6075      	str	r5, [r6, #4]
}
 801e81e:	e7fb      	b.n	801e818 <bt_att_req_send+0x82>

0801e820 <bt_att_req_cancel>:
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
 801e820:	2800      	cmp	r0, #0
 801e822:	d04b      	beq.n	801e8bc <bt_att_req_cancel+0x9c>
{
 801e824:	b570      	push	{r4, r5, r6, lr}
 801e826:	460d      	mov	r5, r1
	if (!conn || !req) {
 801e828:	2900      	cmp	r1, #0
 801e82a:	d03d      	beq.n	801e8a8 <bt_att_req_cancel+0x88>
		return;
	}

	att = att_get(conn);
 801e82c:	f7f2 fe4e 	bl	80114cc <att_get>
	if (!att) {
 801e830:	4606      	mov	r6, r0
 801e832:	2800      	cmp	r0, #0
 801e834:	d038      	beq.n	801e8a8 <bt_att_req_cancel+0x88>
	return list->head;
 801e836:	6a40      	ldr	r0, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
 801e838:	b158      	cbz	r0, 801e852 <bt_att_req_cancel+0x32>
 801e83a:	f5b0 7096 	subs.w	r0, r0, #300	; 0x12c
 801e83e:	d00a      	beq.n	801e856 <bt_att_req_cancel+0x36>
Z_GENLIST_PEEK_NEXT(slist, snode)
 801e840:	f510 7496 	adds.w	r4, r0, #300	; 0x12c
 801e844:	d00c      	beq.n	801e860 <bt_att_req_cancel+0x40>
	return node->next;
 801e846:	f8d0 412c 	ldr.w	r4, [r0, #300]	; 0x12c
 801e84a:	b14c      	cbz	r4, 801e860 <bt_att_req_cancel+0x40>
 801e84c:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
 801e850:	e006      	b.n	801e860 <bt_att_req_cancel+0x40>
 801e852:	4604      	mov	r4, r0
 801e854:	e004      	b.n	801e860 <bt_att_req_cancel+0x40>
 801e856:	4604      	mov	r4, r0
 801e858:	e002      	b.n	801e860 <bt_att_req_cancel+0x40>
 801e85a:	4623      	mov	r3, r4
 801e85c:	4620      	mov	r0, r4
 801e85e:	461c      	mov	r4, r3
 801e860:	b178      	cbz	r0, 801e882 <bt_att_req_cancel+0x62>
		/* Check if request is outstanding */
		if (bt_att_chan_req_cancel(chan, req)) {
 801e862:	4629      	mov	r1, r5
 801e864:	f7f3 fe8e 	bl	8012584 <bt_att_chan_req_cancel>
 801e868:	b9f0      	cbnz	r0, 801e8a8 <bt_att_req_cancel+0x88>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
 801e86a:	2c00      	cmp	r4, #0
 801e86c:	d0f5      	beq.n	801e85a <bt_att_req_cancel+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
 801e86e:	f514 7396 	adds.w	r3, r4, #300	; 0x12c
 801e872:	d0f3      	beq.n	801e85c <bt_att_req_cancel+0x3c>
	return node->next;
 801e874:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 801e878:	2b00      	cmp	r3, #0
 801e87a:	d0ef      	beq.n	801e85c <bt_att_req_cancel+0x3c>
 801e87c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801e880:	e7ec      	b.n	801e85c <bt_att_req_cancel+0x3c>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
 801e882:	462a      	mov	r2, r5
	return list->head;
 801e884:	6873      	ldr	r3, [r6, #4]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 801e886:	b163      	cbz	r3, 801e8a2 <bt_att_req_cancel+0x82>
 801e888:	429a      	cmp	r2, r3
 801e88a:	d002      	beq.n	801e892 <bt_att_req_cancel+0x72>
 801e88c:	4618      	mov	r0, r3
 801e88e:	681b      	ldr	r3, [r3, #0]
 801e890:	e7f9      	b.n	801e886 <bt_att_req_cancel+0x66>
Z_GENLIST_REMOVE(slist, snode)
 801e892:	b150      	cbz	r0, 801e8aa <bt_att_req_cancel+0x8a>
	return node->next;
 801e894:	682b      	ldr	r3, [r5, #0]
	parent->next = child;
 801e896:	6003      	str	r3, [r0, #0]
	return list->tail;
 801e898:	68b3      	ldr	r3, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
 801e89a:	429d      	cmp	r5, r3
 801e89c:	d00c      	beq.n	801e8b8 <bt_att_req_cancel+0x98>
	parent->next = child;
 801e89e:	2300      	movs	r3, #0
 801e8a0:	602b      	str	r3, [r5, #0]

	att_req_destroy(req);
 801e8a2:	4628      	mov	r0, r5
 801e8a4:	f7ff fe34 	bl	801e510 <att_req_destroy>
}
 801e8a8:	bd70      	pop	{r4, r5, r6, pc}
	return node->next;
 801e8aa:	682b      	ldr	r3, [r5, #0]
	list->head = node;
 801e8ac:	6073      	str	r3, [r6, #4]
	return list->tail;
 801e8ae:	68b2      	ldr	r2, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
 801e8b0:	4295      	cmp	r5, r2
 801e8b2:	d1f4      	bne.n	801e89e <bt_att_req_cancel+0x7e>
	list->tail = node;
 801e8b4:	60b3      	str	r3, [r6, #8]
}
 801e8b6:	e7f2      	b.n	801e89e <bt_att_req_cancel+0x7e>
	list->tail = node;
 801e8b8:	60b0      	str	r0, [r6, #8]
}
 801e8ba:	e7f0      	b.n	801e89e <bt_att_req_cancel+0x7e>
 801e8bc:	4770      	bx	lr

0801e8be <update_range>:
{
 801e8be:	b430      	push	{r4, r5}
	if (new_start >= *start && new_end <= *end) {
 801e8c0:	8804      	ldrh	r4, [r0, #0]
 801e8c2:	42a2      	cmp	r2, r4
 801e8c4:	d302      	bcc.n	801e8cc <update_range+0xe>
 801e8c6:	880d      	ldrh	r5, [r1, #0]
 801e8c8:	42ab      	cmp	r3, r5
 801e8ca:	d908      	bls.n	801e8de <update_range+0x20>
	if (*start > new_start) {
 801e8cc:	42a2      	cmp	r2, r4
 801e8ce:	d200      	bcs.n	801e8d2 <update_range+0x14>
		*start = new_start;
 801e8d0:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
 801e8d2:	880a      	ldrh	r2, [r1, #0]
 801e8d4:	4293      	cmp	r3, r2
 801e8d6:	d904      	bls.n	801e8e2 <update_range+0x24>
		*end = new_end;
 801e8d8:	800b      	strh	r3, [r1, #0]
	return true;
 801e8da:	2001      	movs	r0, #1
 801e8dc:	e002      	b.n	801e8e4 <update_range+0x26>
		return false;
 801e8de:	2000      	movs	r0, #0
 801e8e0:	e000      	b.n	801e8e4 <update_range+0x26>
	return true;
 801e8e2:	2001      	movs	r0, #1
}
 801e8e4:	bc30      	pop	{r4, r5}
 801e8e6:	4770      	bx	lr

0801e8e8 <cf_set_value>:
{
 801e8e8:	b4f0      	push	{r4, r5, r6, r7}
	for (i = 0U; i < len && i <= last_byte; i++) {
 801e8ea:	2400      	movs	r4, #0
 801e8ec:	e011      	b.n	801e912 <cf_set_value+0x2a>
		for (bit = 0U; bit <= last_bit; bit++) {
 801e8ee:	3301      	adds	r3, #1
 801e8f0:	b2db      	uxtb	r3, r3
 801e8f2:	2b02      	cmp	r3, #2
 801e8f4:	d80b      	bhi.n	801e90e <cf_set_value+0x26>
			if ((BIT(bit) & chg_bits) &&
 801e8f6:	fa25 f603 	lsr.w	r6, r5, r3
 801e8fa:	f016 0f01 	tst.w	r6, #1
 801e8fe:	d0f6      	beq.n	801e8ee <cf_set_value+0x6>
 801e900:	fa27 f603 	lsr.w	r6, r7, r3
 801e904:	f016 0f01 	tst.w	r6, #1
 801e908:	d0f1      	beq.n	801e8ee <cf_set_value+0x6>
				return false;
 801e90a:	2000      	movs	r0, #0
 801e90c:	e01b      	b.n	801e946 <cf_set_value+0x5e>
	for (i = 0U; i < len && i <= last_byte; i++) {
 801e90e:	3401      	adds	r4, #1
 801e910:	b2a4      	uxth	r4, r4
 801e912:	42a2      	cmp	r2, r4
 801e914:	d919      	bls.n	801e94a <cf_set_value+0x62>
 801e916:	2c02      	cmp	r4, #2
 801e918:	d805      	bhi.n	801e926 <cf_set_value+0x3e>
		uint8_t chg_bits = value[i] ^ cfg->data[i];
 801e91a:	5d0d      	ldrb	r5, [r1, r4]
 801e91c:	1903      	adds	r3, r0, r4
 801e91e:	7a1f      	ldrb	r7, [r3, #8]
 801e920:	407d      	eors	r5, r7
		for (bit = 0U; bit <= last_bit; bit++) {
 801e922:	2300      	movs	r3, #0
 801e924:	e7e5      	b.n	801e8f2 <cf_set_value+0xa>
 801e926:	2300      	movs	r3, #0
 801e928:	e008      	b.n	801e93c <cf_set_value+0x54>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
 801e92a:	5ccc      	ldrb	r4, [r1, r3]
 801e92c:	f004 0407 	and.w	r4, r4, #7
 801e930:	18c5      	adds	r5, r0, r3
 801e932:	7a2e      	ldrb	r6, [r5, #8]
 801e934:	4334      	orrs	r4, r6
 801e936:	722c      	strb	r4, [r5, #8]
	for (i = 0U; i < len && i < last_byte; i++) {
 801e938:	3301      	adds	r3, #1
 801e93a:	b29b      	uxth	r3, r3
 801e93c:	429a      	cmp	r2, r3
 801e93e:	d906      	bls.n	801e94e <cf_set_value+0x66>
 801e940:	2b01      	cmp	r3, #1
 801e942:	d9f2      	bls.n	801e92a <cf_set_value+0x42>
	return true;
 801e944:	2001      	movs	r0, #1
}
 801e946:	bcf0      	pop	{r4, r5, r6, r7}
 801e948:	4770      	bx	lr
 801e94a:	2300      	movs	r3, #0
 801e94c:	e7f6      	b.n	801e93c <cf_set_value+0x54>
	return true;
 801e94e:	2001      	movs	r0, #1
 801e950:	e7f9      	b.n	801e946 <cf_set_value+0x5e>

0801e952 <gatt_ccc_changed>:
{
 801e952:	b510      	push	{r4, lr}
 801e954:	460c      	mov	r4, r1
	uint16_t value = 0x0000;
 801e956:	2100      	movs	r1, #0
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
 801e958:	460b      	mov	r3, r1
 801e95a:	e000      	b.n	801e95e <gatt_ccc_changed+0xc>
 801e95c:	3301      	adds	r3, #1
 801e95e:	2b05      	cmp	r3, #5
 801e960:	dc08      	bgt.n	801e974 <gatt_ccc_changed+0x22>
		if (ccc->cfg[i].value > value) {
 801e962:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801e966:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 801e96a:	8912      	ldrh	r2, [r2, #8]
 801e96c:	428a      	cmp	r2, r1
 801e96e:	d9f5      	bls.n	801e95c <gatt_ccc_changed+0xa>
			value = ccc->cfg[i].value;
 801e970:	4611      	mov	r1, r2
 801e972:	e7f3      	b.n	801e95c <gatt_ccc_changed+0xa>
	if (value != ccc->value) {
 801e974:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 801e976:	4299      	cmp	r1, r3
 801e978:	d003      	beq.n	801e982 <gatt_ccc_changed+0x30>
		ccc->value = value;
 801e97a:	87a1      	strh	r1, [r4, #60]	; 0x3c
		if (ccc->cfg_changed) {
 801e97c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e97e:	b103      	cbz	r3, 801e982 <gatt_ccc_changed+0x30>
			ccc->cfg_changed(attr, value);
 801e980:	4798      	blx	r3
}
 801e982:	bd10      	pop	{r4, pc}

0801e984 <gatt_indicate_rsp>:
{
 801e984:	b510      	push	{r4, lr}
 801e986:	460a      	mov	r2, r1
 801e988:	9b02      	ldr	r3, [sp, #8]
	params->func(conn, params->attr, err);
 801e98a:	689c      	ldr	r4, [r3, #8]
 801e98c:	6859      	ldr	r1, [r3, #4]
 801e98e:	47a0      	blx	r4
}
 801e990:	bd10      	pop	{r4, pc}

0801e992 <match_uuid>:
	data->attr = attr;
 801e992:	6010      	str	r0, [r2, #0]
	data->handle = handle;
 801e994:	8091      	strh	r1, [r2, #4]
}
 801e996:	2000      	movs	r0, #0
 801e998:	4770      	bx	lr

0801e99a <ccc_set>:
}
 801e99a:	2000      	movs	r0, #0
 801e99c:	4770      	bx	lr

0801e99e <gen_hash_m>:
{
 801e99e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e9a0:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
 801e9a2:	6806      	ldr	r6, [r0, #0]
 801e9a4:	7835      	ldrb	r5, [r6, #0]
 801e9a6:	2d00      	cmp	r5, #0
 801e9a8:	d161      	bne.n	801ea6e <gen_hash_m+0xd0>
 801e9aa:	4607      	mov	r7, r0
 801e9ac:	4614      	mov	r4, r2
	switch (u16->val) {
 801e9ae:	8873      	ldrh	r3, [r6, #2]
 801e9b0:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
 801e9b4:	d019      	beq.n	801e9ea <gen_hash_m+0x4c>
 801e9b6:	d913      	bls.n	801e9e0 <gen_hash_m+0x42>
 801e9b8:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 801e9bc:	33ff      	adds	r3, #255	; 0xff
 801e9be:	b29b      	uxth	r3, r3
 801e9c0:	2b04      	cmp	r3, #4
 801e9c2:	d85a      	bhi.n	801ea7a <gen_hash_m+0xdc>
		value = sys_cpu_to_le16(handle);
 801e9c4:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
 801e9c8:	2202      	movs	r2, #2
 801e9ca:	f10d 010e 	add.w	r1, sp, #14
 801e9ce:	4620      	mov	r0, r4
 801e9d0:	f7fd fab3 	bl	801bf3a <tc_cmac_update>
 801e9d4:	2800      	cmp	r0, #0
 801e9d6:	d13a      	bne.n	801ea4e <gen_hash_m+0xb0>
			state->err = -EINVAL;
 801e9d8:	f06f 0315 	mvn.w	r3, #21
 801e9dc:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
 801e9de:	e047      	b.n	801ea70 <gen_hash_m+0xd2>
	switch (u16->val) {
 801e9e0:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
 801e9e4:	b29b      	uxth	r3, r3
 801e9e6:	2b03      	cmp	r3, #3
 801e9e8:	d845      	bhi.n	801ea76 <gen_hash_m+0xd8>
		value = sys_cpu_to_le16(handle);
 801e9ea:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
 801e9ee:	2202      	movs	r2, #2
 801e9f0:	f10d 010e 	add.w	r1, sp, #14
 801e9f4:	4620      	mov	r0, r4
 801e9f6:	f7fd faa0 	bl	801bf3a <tc_cmac_update>
 801e9fa:	b918      	cbnz	r0, 801ea04 <gen_hash_m+0x66>
			state->err = -EINVAL;
 801e9fc:	f06f 0315 	mvn.w	r3, #21
 801ea00:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
 801ea02:	e035      	b.n	801ea70 <gen_hash_m+0xd2>
		value = sys_cpu_to_le16(u16->val);
 801ea04:	8873      	ldrh	r3, [r6, #2]
 801ea06:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
 801ea0a:	2202      	movs	r2, #2
 801ea0c:	f10d 010e 	add.w	r1, sp, #14
 801ea10:	4620      	mov	r0, r4
 801ea12:	f7fd fa92 	bl	801bf3a <tc_cmac_update>
 801ea16:	b180      	cbz	r0, 801ea3a <gen_hash_m+0x9c>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
 801ea18:	687e      	ldr	r6, [r7, #4]
 801ea1a:	2000      	movs	r0, #0
 801ea1c:	9000      	str	r0, [sp, #0]
 801ea1e:	2310      	movs	r3, #16
 801ea20:	eb0d 0203 	add.w	r2, sp, r3
 801ea24:	4639      	mov	r1, r7
 801ea26:	47b0      	blx	r6
		if (len < 0) {
 801ea28:	1e02      	subs	r2, r0, #0
 801ea2a:	db0a      	blt.n	801ea42 <gen_hash_m+0xa4>
		if (tc_cmac_update(&state->state, data, len) ==
 801ea2c:	a904      	add	r1, sp, #16
 801ea2e:	4620      	mov	r0, r4
 801ea30:	f7fd fa83 	bl	801bf3a <tc_cmac_update>
 801ea34:	b138      	cbz	r0, 801ea46 <gen_hash_m+0xa8>
	return BT_GATT_ITER_CONTINUE;
 801ea36:	2501      	movs	r5, #1
 801ea38:	e01a      	b.n	801ea70 <gen_hash_m+0xd2>
			state->err = -EINVAL;
 801ea3a:	f06f 0315 	mvn.w	r3, #21
 801ea3e:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
 801ea40:	e016      	b.n	801ea70 <gen_hash_m+0xd2>
			state->err = len;
 801ea42:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
 801ea44:	e014      	b.n	801ea70 <gen_hash_m+0xd2>
			state->err = -EINVAL;
 801ea46:	f06f 0315 	mvn.w	r3, #21
 801ea4a:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
 801ea4c:	e010      	b.n	801ea70 <gen_hash_m+0xd2>
		value = sys_cpu_to_le16(u16->val);
 801ea4e:	8873      	ldrh	r3, [r6, #2]
 801ea50:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
 801ea54:	2202      	movs	r2, #2
 801ea56:	f10d 010e 	add.w	r1, sp, #14
 801ea5a:	4620      	mov	r0, r4
 801ea5c:	f7fd fa6d 	bl	801bf3a <tc_cmac_update>
 801ea60:	b108      	cbz	r0, 801ea66 <gen_hash_m+0xc8>
	return BT_GATT_ITER_CONTINUE;
 801ea62:	2501      	movs	r5, #1
 801ea64:	e004      	b.n	801ea70 <gen_hash_m+0xd2>
			state->err = -EINVAL;
 801ea66:	f06f 0315 	mvn.w	r3, #21
 801ea6a:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
 801ea6c:	e000      	b.n	801ea70 <gen_hash_m+0xd2>
		return BT_GATT_ITER_CONTINUE;
 801ea6e:	2501      	movs	r5, #1
}
 801ea70:	4628      	mov	r0, r5
 801ea72:	b009      	add	sp, #36	; 0x24
 801ea74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
 801ea76:	2501      	movs	r5, #1
 801ea78:	e7fa      	b.n	801ea70 <gen_hash_m+0xd2>
 801ea7a:	2501      	movs	r5, #1
 801ea7c:	e7f8      	b.n	801ea70 <gen_hash_m+0xd2>

0801ea7e <find_ccc_cfg>:
{
 801ea7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ea80:	b083      	sub	sp, #12
 801ea82:	4607      	mov	r7, r0
 801ea84:	460e      	mov	r6, r1
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
 801ea86:	2400      	movs	r4, #0
 801ea88:	e00e      	b.n	801eaa8 <find_ccc_cfg+0x2a>
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
 801ea8a:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 801ea8e:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 801ea92:	2300      	movs	r3, #0
 801ea94:	9300      	str	r3, [sp, #0]
 801ea96:	f8cd 3003 	str.w	r3, [sp, #3]
 801ea9a:	2207      	movs	r2, #7
 801ea9c:	4669      	mov	r1, sp
 801ea9e:	3001      	adds	r0, #1
 801eaa0:	f7fd feed 	bl	801c87e <memcmp>
 801eaa4:	b198      	cbz	r0, 801eace <find_ccc_cfg+0x50>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
 801eaa6:	3401      	adds	r4, #1
 801eaa8:	2c05      	cmp	r4, #5
 801eaaa:	d80f      	bhi.n	801eacc <find_ccc_cfg+0x4e>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
 801eaac:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 801eab0:	eb06 0543 	add.w	r5, r6, r3, lsl #1
		if (conn) {
 801eab4:	2f00      	cmp	r7, #0
 801eab6:	d0e8      	beq.n	801ea8a <find_ccc_cfg+0xc>
						    &cfg->peer)) {
 801eab8:	462a      	mov	r2, r5
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
 801eaba:	3201      	adds	r2, #1
 801eabc:	f816 1013 	ldrb.w	r1, [r6, r3, lsl #1]
 801eac0:	4638      	mov	r0, r7
 801eac2:	f7fe fddb 	bl	801d67c <bt_conn_is_peer_addr_le>
 801eac6:	2800      	cmp	r0, #0
 801eac8:	d0ed      	beq.n	801eaa6 <find_ccc_cfg+0x28>
 801eaca:	e000      	b.n	801eace <find_ccc_cfg+0x50>
	return NULL;
 801eacc:	2500      	movs	r5, #0
}
 801eace:	4628      	mov	r0, r5
 801ead0:	b003      	add	sp, #12
 801ead2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ead4 <ccc_find_cfg>:
{
 801ead4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ead6:	4605      	mov	r5, r0
 801ead8:	460f      	mov	r7, r1
 801eada:	4616      	mov	r6, r2
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
 801eadc:	2400      	movs	r4, #0
 801eade:	e000      	b.n	801eae2 <ccc_find_cfg+0xe>
 801eae0:	3401      	adds	r4, #1
 801eae2:	2c05      	cmp	r4, #5
 801eae4:	d815      	bhi.n	801eb12 <ccc_find_cfg+0x3e>
		if (id == ccc->cfg[i].id &&
 801eae6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 801eaea:	f815 3013 	ldrb.w	r3, [r5, r3, lsl #1]
 801eaee:	42b3      	cmp	r3, r6
 801eaf0:	d1f6      	bne.n	801eae0 <ccc_find_cfg+0xc>
		    !bt_addr_le_cmp(&ccc->cfg[i].peer, addr)) {
 801eaf2:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 801eaf6:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 801eafa:	2207      	movs	r2, #7
 801eafc:	4639      	mov	r1, r7
 801eafe:	3001      	adds	r0, #1
 801eb00:	f7fd febd 	bl	801c87e <memcmp>
		if (id == ccc->cfg[i].id &&
 801eb04:	2800      	cmp	r0, #0
 801eb06:	d1eb      	bne.n	801eae0 <ccc_find_cfg+0xc>
			return &ccc->cfg[i];
 801eb08:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801eb0c:	eb05 0044 	add.w	r0, r5, r4, lsl #1
 801eb10:	e000      	b.n	801eb14 <ccc_find_cfg+0x40>
	return NULL;
 801eb12:	2000      	movs	r0, #0
}
 801eb14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801eb16 <clear_ccc_cfg>:
{
 801eb16:	b530      	push	{r4, r5, lr}
 801eb18:	b083      	sub	sp, #12
 801eb1a:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
 801eb1c:	2500      	movs	r5, #0
 801eb1e:	9500      	str	r5, [sp, #0]
 801eb20:	f8cd 5003 	str.w	r5, [sp, #3]
	memcpy(dst, src, sizeof(*dst));
 801eb24:	2207      	movs	r2, #7
 801eb26:	4669      	mov	r1, sp
 801eb28:	3001      	adds	r0, #1
 801eb2a:	f7fd fec0 	bl	801c8ae <memcpy>
	cfg->id = 0U;
 801eb2e:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
 801eb30:	8125      	strh	r5, [r4, #8]
}
 801eb32:	b003      	add	sp, #12
 801eb34:	bd30      	pop	{r4, r5, pc}

0801eb36 <gatt_sub_add>:
{
 801eb36:	b538      	push	{r3, r4, r5, lr}
 801eb38:	4604      	mov	r4, r0
	sub = gatt_sub_find(conn);
 801eb3a:	f7f3 fdcf 	bl	80126dc <gatt_sub_find>
	if (!sub) {
 801eb3e:	4605      	mov	r5, r0
 801eb40:	b108      	cbz	r0, 801eb46 <gatt_sub_add+0x10>
}
 801eb42:	4628      	mov	r0, r5
 801eb44:	bd38      	pop	{r3, r4, r5, pc}
		sub = gatt_sub_find(NULL);
 801eb46:	f7f3 fdc9 	bl	80126dc <gatt_sub_find>
		if (sub) {
 801eb4a:	4605      	mov	r5, r0
 801eb4c:	2800      	cmp	r0, #0
 801eb4e:	d0f8      	beq.n	801eb42 <gatt_sub_add+0xc>
 801eb50:	2207      	movs	r2, #7
 801eb52:	f104 0188 	add.w	r1, r4, #136	; 0x88
 801eb56:	3001      	adds	r0, #1
 801eb58:	f7fd fea9 	bl	801c8ae <memcpy>
			sub->id = conn->id;
 801eb5c:	7a23      	ldrb	r3, [r4, #8]
 801eb5e:	702b      	strb	r3, [r5, #0]
	return sub;
 801eb60:	e7ef      	b.n	801eb42 <gatt_sub_add+0xc>

0801eb62 <gatt_sub_remove>:
{
 801eb62:	b530      	push	{r4, r5, lr}
 801eb64:	b083      	sub	sp, #12
 801eb66:	460c      	mov	r4, r1
	if (params) {
 801eb68:	b163      	cbz	r3, 801eb84 <gatt_sub_remove+0x22>
 801eb6a:	4619      	mov	r1, r3
		sys_slist_remove(&sub->list, prev, &params->node);
 801eb6c:	3314      	adds	r3, #20
Z_GENLIST_REMOVE(slist, snode)
 801eb6e:	b16a      	cbz	r2, 801eb8c <gatt_sub_remove+0x2a>
	return node->next;
 801eb70:	694d      	ldr	r5, [r1, #20]
	parent->next = child;
 801eb72:	6015      	str	r5, [r2, #0]
	return list->tail;
 801eb74:	68e5      	ldr	r5, [r4, #12]
Z_GENLIST_REMOVE(slist, snode)
 801eb76:	42ab      	cmp	r3, r5
 801eb78:	d00f      	beq.n	801eb9a <gatt_sub_remove+0x38>
	parent->next = child;
 801eb7a:	2200      	movs	r2, #0
 801eb7c:	614a      	str	r2, [r1, #20]
		params->notify(conn, params, NULL, 0);
 801eb7e:	680d      	ldr	r5, [r1, #0]
 801eb80:	4613      	mov	r3, r2
 801eb82:	47a8      	blx	r5
	return list->head;
 801eb84:	68a3      	ldr	r3, [r4, #8]
	if (sys_slist_is_empty(&sub->list)) {
 801eb86:	b153      	cbz	r3, 801eb9e <gatt_sub_remove+0x3c>
}
 801eb88:	b003      	add	sp, #12
 801eb8a:	bd30      	pop	{r4, r5, pc}
	return node->next;
 801eb8c:	694a      	ldr	r2, [r1, #20]
	list->head = node;
 801eb8e:	60a2      	str	r2, [r4, #8]
	return list->tail;
 801eb90:	68e5      	ldr	r5, [r4, #12]
Z_GENLIST_REMOVE(slist, snode)
 801eb92:	42ab      	cmp	r3, r5
 801eb94:	d1f1      	bne.n	801eb7a <gatt_sub_remove+0x18>
	list->tail = node;
 801eb96:	60e2      	str	r2, [r4, #12]
}
 801eb98:	e7ef      	b.n	801eb7a <gatt_sub_remove+0x18>
	list->tail = node;
 801eb9a:	60e2      	str	r2, [r4, #12]
}
 801eb9c:	e7ed      	b.n	801eb7a <gatt_sub_remove+0x18>
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
 801eb9e:	9300      	str	r3, [sp, #0]
 801eba0:	f8cd 3003 	str.w	r3, [sp, #3]
 801eba4:	2207      	movs	r2, #7
 801eba6:	4669      	mov	r1, sp
 801eba8:	1c60      	adds	r0, r4, #1
 801ebaa:	f7fd fe80 	bl	801c8ae <memcpy>
}
 801ebae:	e7eb      	b.n	801eb88 <gatt_sub_remove+0x26>

0801ebb0 <bt_gatt_clear_subscriptions>:
{
 801ebb0:	b538      	push	{r3, r4, r5, lr}
	sub = find_gatt_sub(id, addr);
 801ebb2:	f7f3 fdfb 	bl	80127ac <find_gatt_sub>
	if (!sub) {
 801ebb6:	b318      	cbz	r0, 801ec00 <bt_gatt_clear_subscriptions+0x50>
 801ebb8:	4605      	mov	r5, r0
	return list->head;
 801ebba:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
 801ebbc:	b143      	cbz	r3, 801ebd0 <bt_gatt_clear_subscriptions+0x20>
 801ebbe:	3b14      	subs	r3, #20
 801ebc0:	d008      	beq.n	801ebd4 <bt_gatt_clear_subscriptions+0x24>
Z_GENLIST_PEEK_NEXT(slist, snode)
 801ebc2:	f113 0414 	adds.w	r4, r3, #20
 801ebc6:	d00a      	beq.n	801ebde <bt_gatt_clear_subscriptions+0x2e>
	return node->next;
 801ebc8:	695c      	ldr	r4, [r3, #20]
 801ebca:	b144      	cbz	r4, 801ebde <bt_gatt_clear_subscriptions+0x2e>
 801ebcc:	3c14      	subs	r4, #20
 801ebce:	e006      	b.n	801ebde <bt_gatt_clear_subscriptions+0x2e>
 801ebd0:	461c      	mov	r4, r3
 801ebd2:	e004      	b.n	801ebde <bt_gatt_clear_subscriptions+0x2e>
 801ebd4:	461c      	mov	r4, r3
 801ebd6:	e002      	b.n	801ebde <bt_gatt_clear_subscriptions+0x2e>
 801ebd8:	4622      	mov	r2, r4
 801ebda:	4623      	mov	r3, r4
 801ebdc:	4614      	mov	r4, r2
 801ebde:	b17b      	cbz	r3, 801ec00 <bt_gatt_clear_subscriptions+0x50>
		params->value = 0U;
 801ebe0:	2000      	movs	r0, #0
 801ebe2:	8198      	strh	r0, [r3, #12]
		gatt_sub_remove(NULL, sub, prev, params);
 801ebe4:	4602      	mov	r2, r0
 801ebe6:	4629      	mov	r1, r5
 801ebe8:	f7ff ffbb 	bl	801eb62 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
 801ebec:	2c00      	cmp	r4, #0
 801ebee:	d0f3      	beq.n	801ebd8 <bt_gatt_clear_subscriptions+0x28>
Z_GENLIST_PEEK_NEXT(slist, snode)
 801ebf0:	f114 0214 	adds.w	r2, r4, #20
 801ebf4:	d0f1      	beq.n	801ebda <bt_gatt_clear_subscriptions+0x2a>
	return node->next;
 801ebf6:	6962      	ldr	r2, [r4, #20]
 801ebf8:	2a00      	cmp	r2, #0
 801ebfa:	d0ee      	beq.n	801ebda <bt_gatt_clear_subscriptions+0x2a>
 801ebfc:	3a14      	subs	r2, #20
 801ebfe:	e7ec      	b.n	801ebda <bt_gatt_clear_subscriptions+0x2a>
}
 801ec00:	bd38      	pop	{r3, r4, r5, pc}

0801ec02 <gatt_sub_update>:
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
 801ec02:	784a      	ldrb	r2, [r1, #1]
 801ec04:	b902      	cbnz	r2, 801ec08 <gatt_sub_update+0x6>
 801ec06:	4770      	bx	lr
{
 801ec08:	b508      	push	{r3, lr}
 801ec0a:	460b      	mov	r3, r1
 801ec0c:	2207      	movs	r2, #7
 801ec0e:	f100 0188 	add.w	r1, r0, #136	; 0x88
 801ec12:	1c58      	adds	r0, r3, #1
 801ec14:	f7fd fe4b 	bl	801c8ae <memcpy>
}
 801ec18:	bd08      	pop	{r3, pc}

0801ec1a <sc_restore_rsp>:
{
 801ec1a:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
 801ec1c:	f7f3 fd10 	bl	8012640 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
 801ec20:	b188      	cbz	r0, 801ec46 <sc_restore_rsp+0x2c>
 801ec22:	4603      	mov	r3, r0
 801ec24:	7a02      	ldrb	r2, [r0, #8]
 801ec26:	f012 0f01 	tst.w	r2, #1
 801ec2a:	d00c      	beq.n	801ec46 <sc_restore_rsp+0x2c>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
 801ec2c:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 801ec2e:	f3bf 8f5b 	dmb	ish
 801ec32:	e853 2f00 	ldrex	r2, [r3]
 801ec36:	f042 0201 	orr.w	r2, r2, #1
 801ec3a:	e843 2100 	strex	r1, r2, [r3]
 801ec3e:	2900      	cmp	r1, #0
 801ec40:	d1f7      	bne.n	801ec32 <sc_restore_rsp+0x18>
 801ec42:	f3bf 8f5b 	dmb	ish
}
 801ec46:	bd08      	pop	{r3, pc}

0801ec48 <clear_sc_cfg>:
{
 801ec48:	b508      	push	{r3, lr}
	memset(cfg, 0, sizeof(*cfg));
 801ec4a:	220c      	movs	r2, #12
 801ec4c:	2100      	movs	r1, #0
 801ec4e:	f7fd fe53 	bl	801c8f8 <memset>
}
 801ec52:	bd08      	pop	{r3, pc}

0801ec54 <sc_ccc_cfg_write>:
{
 801ec54:	b508      	push	{r3, lr}
	if (value == BT_GATT_CCC_INDICATE) {
 801ec56:	2a02      	cmp	r2, #2
 801ec58:	d003      	beq.n	801ec62 <sc_ccc_cfg_write+0xe>
		sc_clear(conn);
 801ec5a:	f7f4 f83d 	bl	8012cd8 <sc_clear>
}
 801ec5e:	2002      	movs	r0, #2
 801ec60:	bd08      	pop	{r3, pc}
		sc_save(conn->id, &conn->le.dst, 0, 0);
 801ec62:	2300      	movs	r3, #0
 801ec64:	461a      	mov	r2, r3
 801ec66:	f100 0188 	add.w	r1, r0, #136	; 0x88
 801ec6a:	7a00      	ldrb	r0, [r0, #8]
 801ec6c:	f7f3 ff52 	bl	8012b14 <sc_save>
 801ec70:	e7f5      	b.n	801ec5e <sc_ccc_cfg_write+0xa>

0801ec72 <sc_reset>:
{
 801ec72:	b510      	push	{r4, lr}
 801ec74:	4604      	mov	r4, r0
	memset(&cfg->data, 0, sizeof(cfg->data));
 801ec76:	2204      	movs	r2, #4
 801ec78:	2100      	movs	r1, #0
 801ec7a:	3008      	adds	r0, #8
 801ec7c:	f7fd fe3c 	bl	801c8f8 <memset>
		sc_store(cfg);
 801ec80:	4620      	mov	r0, r4
 801ec82:	f7f3 ff09 	bl	8012a98 <sc_store>
}
 801ec86:	bd10      	pop	{r4, pc}

0801ec88 <remove_subscriptions>:
{
 801ec88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec8c:	4606      	mov	r6, r0
	sub = gatt_sub_find(conn);
 801ec8e:	f7f3 fd25 	bl	80126dc <gatt_sub_find>
	if (!sub) {
 801ec92:	2800      	cmp	r0, #0
 801ec94:	d03b      	beq.n	801ed0e <remove_subscriptions+0x86>
 801ec96:	4607      	mov	r7, r0
	return list->head;
 801ec98:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
 801ec9a:	b385      	cbz	r5, 801ecfe <remove_subscriptions+0x76>
 801ec9c:	3d14      	subs	r5, #20
 801ec9e:	d032      	beq.n	801ed06 <remove_subscriptions+0x7e>
Z_GENLIST_PEEK_NEXT(slist, snode)
 801eca0:	f115 0414 	adds.w	r4, r5, #20
 801eca4:	d02c      	beq.n	801ed00 <remove_subscriptions+0x78>
	return node->next;
 801eca6:	696c      	ldr	r4, [r5, #20]
 801eca8:	b354      	cbz	r4, 801ed00 <remove_subscriptions+0x78>
 801ecaa:	3c14      	subs	r4, #20
 801ecac:	e028      	b.n	801ed00 <remove_subscriptions+0x78>
			params->value = 0U;
 801ecae:	2300      	movs	r3, #0
 801ecb0:	81ab      	strh	r3, [r5, #12]
			gatt_sub_remove(conn, sub, prev, params);
 801ecb2:	462b      	mov	r3, r5
 801ecb4:	4642      	mov	r2, r8
 801ecb6:	4639      	mov	r1, r7
 801ecb8:	4630      	mov	r0, r6
 801ecba:	f7ff ff52 	bl	801eb62 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
 801ecbe:	b324      	cbz	r4, 801ed0a <remove_subscriptions+0x82>
Z_GENLIST_PEEK_NEXT(slist, snode)
 801ecc0:	f114 0314 	adds.w	r3, r4, #20
 801ecc4:	d002      	beq.n	801eccc <remove_subscriptions+0x44>
	return node->next;
 801ecc6:	6963      	ldr	r3, [r4, #20]
 801ecc8:	b103      	cbz	r3, 801eccc <remove_subscriptions+0x44>
 801ecca:	3b14      	subs	r3, #20
 801eccc:	4625      	mov	r5, r4
 801ecce:	461c      	mov	r4, r3
 801ecd0:	b1ed      	cbz	r5, 801ed0e <remove_subscriptions+0x86>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
 801ecd2:	f106 0188 	add.w	r1, r6, #136	; 0x88
 801ecd6:	7a30      	ldrb	r0, [r6, #8]
 801ecd8:	f7fe fa4f 	bl	801d17a <bt_addr_le_is_bonded>
 801ecdc:	2800      	cmp	r0, #0
 801ecde:	d0e6      	beq.n	801ecae <remove_subscriptions+0x26>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 801ece0:	f3bf 8f5b 	dmb	ish
 801ece4:	692b      	ldr	r3, [r5, #16]
 801ece6:	f3bf 8f5b 	dmb	ish
 801ecea:	f013 0f01 	tst.w	r3, #1
 801ecee:	d1de      	bne.n	801ecae <remove_subscriptions+0x26>
			gatt_sub_update(conn, sub);
 801ecf0:	4639      	mov	r1, r7
 801ecf2:	4630      	mov	r0, r6
 801ecf4:	f7ff ff85 	bl	801ec02 <gatt_sub_update>
			prev = &params->node;
 801ecf8:	f105 0814 	add.w	r8, r5, #20
 801ecfc:	e7df      	b.n	801ecbe <remove_subscriptions+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
 801ecfe:	462c      	mov	r4, r5
 801ed00:	f04f 0800 	mov.w	r8, #0
 801ed04:	e7e4      	b.n	801ecd0 <remove_subscriptions+0x48>
 801ed06:	462c      	mov	r4, r5
 801ed08:	e7fa      	b.n	801ed00 <remove_subscriptions+0x78>
 801ed0a:	4623      	mov	r3, r4
 801ed0c:	e7de      	b.n	801eccc <remove_subscriptions+0x44>
}
 801ed0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ed12 <gatt_write_ccc_rsp>:
{
 801ed12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed14:	4607      	mov	r7, r0
 801ed16:	460e      	mov	r6, r1
 801ed18:	9c06      	ldr	r4, [sp, #24]
	atomic_clear_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);
 801ed1a:	f104 0310 	add.w	r3, r4, #16
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 801ed1e:	f3bf 8f5b 	dmb	ish
 801ed22:	e853 2f00 	ldrex	r2, [r3]
 801ed26:	f022 0204 	bic.w	r2, r2, #4
 801ed2a:	e843 2100 	strex	r1, r2, [r3]
 801ed2e:	2900      	cmp	r1, #0
 801ed30:	d1f7      	bne.n	801ed22 <gatt_write_ccc_rsp+0x10>
 801ed32:	f3bf 8f5b 	dmb	ish
	if (err) {
 801ed36:	b96e      	cbnz	r6, 801ed54 <gatt_write_ccc_rsp+0x42>
	} else if (!params->value) {
 801ed38:	89a3      	ldrh	r3, [r4, #12]
 801ed3a:	b923      	cbnz	r3, 801ed46 <gatt_write_ccc_rsp+0x34>
		params->notify(conn, params, NULL, 0);
 801ed3c:	6825      	ldr	r5, [r4, #0]
 801ed3e:	461a      	mov	r2, r3
 801ed40:	4621      	mov	r1, r4
 801ed42:	4638      	mov	r0, r7
 801ed44:	47a8      	blx	r5
	if (params->write) {
 801ed46:	6863      	ldr	r3, [r4, #4]
 801ed48:	b11b      	cbz	r3, 801ed52 <gatt_write_ccc_rsp+0x40>
		params->write(conn, err, NULL);
 801ed4a:	2200      	movs	r2, #0
 801ed4c:	4631      	mov	r1, r6
 801ed4e:	4638      	mov	r0, r7
 801ed50:	4798      	blx	r3
}
 801ed52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sub = gatt_sub_find(conn);
 801ed54:	4638      	mov	r0, r7
 801ed56:	f7f3 fcc1 	bl	80126dc <gatt_sub_find>
		if (!sub) {
 801ed5a:	4601      	mov	r1, r0
 801ed5c:	2800      	cmp	r0, #0
 801ed5e:	d0f8      	beq.n	801ed52 <gatt_write_ccc_rsp+0x40>
	return list->head;
 801ed60:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
 801ed62:	b10b      	cbz	r3, 801ed68 <gatt_write_ccc_rsp+0x56>
	return node->next;
 801ed64:	681a      	ldr	r2, [r3, #0]
 801ed66:	e009      	b.n	801ed7c <gatt_write_ccc_rsp+0x6a>
Z_GENLIST_PEEK_NEXT(slist, snode)
 801ed68:	461a      	mov	r2, r3
 801ed6a:	e007      	b.n	801ed7c <gatt_write_ccc_rsp+0x6a>
				gatt_sub_remove(conn, sub, tmp, params);
 801ed6c:	4623      	mov	r3, r4
 801ed6e:	4638      	mov	r0, r7
 801ed70:	f7ff fef7 	bl	801eb62 <gatt_sub_remove>
				break;
 801ed74:	e7e7      	b.n	801ed46 <gatt_write_ccc_rsp+0x34>
 801ed76:	4615      	mov	r5, r2
 801ed78:	4613      	mov	r3, r2
 801ed7a:	462a      	mov	r2, r5
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
 801ed7c:	2b00      	cmp	r3, #0
 801ed7e:	d0e2      	beq.n	801ed46 <gatt_write_ccc_rsp+0x34>
			if (node == &params->node) {
 801ed80:	f104 0514 	add.w	r5, r4, #20
 801ed84:	42ab      	cmp	r3, r5
 801ed86:	d0f1      	beq.n	801ed6c <gatt_write_ccc_rsp+0x5a>
 801ed88:	2a00      	cmp	r2, #0
 801ed8a:	d0f4      	beq.n	801ed76 <gatt_write_ccc_rsp+0x64>
	return node->next;
 801ed8c:	6815      	ldr	r5, [r2, #0]
 801ed8e:	e7f3      	b.n	801ed78 <gatt_write_ccc_rsp+0x66>

0801ed90 <gatt_foreach_iter>:
	if (handle > end_handle) {
 801ed90:	4299      	cmp	r1, r3
 801ed92:	d822      	bhi.n	801edda <gatt_foreach_iter+0x4a>
{
 801ed94:	b538      	push	{r3, r4, r5, lr}
 801ed96:	4605      	mov	r5, r0
 801ed98:	460c      	mov	r4, r1
	if (handle < start_handle) {
 801ed9a:	4291      	cmp	r1, r2
 801ed9c:	d31f      	bcc.n	801edde <gatt_foreach_iter+0x4e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
 801ed9e:	9b04      	ldr	r3, [sp, #16]
 801eda0:	b123      	cbz	r3, 801edac <gatt_foreach_iter+0x1c>
 801eda2:	6801      	ldr	r1, [r0, #0]
 801eda4:	4618      	mov	r0, r3
 801eda6:	f7fd fe48 	bl	801ca3a <bt_uuid_cmp>
 801edaa:	b9d0      	cbnz	r0, 801ede2 <gatt_foreach_iter+0x52>
	if (attr_data && attr_data != attr->user_data) {
 801edac:	9b05      	ldr	r3, [sp, #20]
 801edae:	b12b      	cbz	r3, 801edbc <gatt_foreach_iter+0x2c>
 801edb0:	68eb      	ldr	r3, [r5, #12]
 801edb2:	9a05      	ldr	r2, [sp, #20]
 801edb4:	4293      	cmp	r3, r2
 801edb6:	d001      	beq.n	801edbc <gatt_foreach_iter+0x2c>
		return BT_GATT_ITER_CONTINUE;
 801edb8:	2001      	movs	r0, #1
 801edba:	e011      	b.n	801ede0 <gatt_foreach_iter+0x50>
	*num_matches -= 1;
 801edbc:	9b06      	ldr	r3, [sp, #24]
 801edbe:	881b      	ldrh	r3, [r3, #0]
 801edc0:	3b01      	subs	r3, #1
 801edc2:	9a06      	ldr	r2, [sp, #24]
 801edc4:	8013      	strh	r3, [r2, #0]
	result = func(attr, handle, user_data);
 801edc6:	9a08      	ldr	r2, [sp, #32]
 801edc8:	4621      	mov	r1, r4
 801edca:	4628      	mov	r0, r5
 801edcc:	9b07      	ldr	r3, [sp, #28]
 801edce:	4798      	blx	r3
	if (!*num_matches) {
 801edd0:	9b06      	ldr	r3, [sp, #24]
 801edd2:	881b      	ldrh	r3, [r3, #0]
 801edd4:	b923      	cbnz	r3, 801ede0 <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
 801edd6:	2000      	movs	r0, #0
 801edd8:	e002      	b.n	801ede0 <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
 801edda:	2000      	movs	r0, #0
}
 801eddc:	4770      	bx	lr
		return BT_GATT_ITER_CONTINUE;
 801edde:	2001      	movs	r0, #1
}
 801ede0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ITER_CONTINUE;
 801ede2:	2001      	movs	r0, #1
 801ede4:	e7fc      	b.n	801ede0 <gatt_foreach_iter+0x50>

0801ede6 <gatt_write_ccc>:
{
 801ede6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801edea:	b082      	sub	sp, #8
 801edec:	4604      	mov	r4, r0
 801edee:	460f      	mov	r7, r1
 801edf0:	4616      	mov	r6, r2
 801edf2:	461d      	mov	r5, r3
 801edf4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
 801edf8:	2204      	movs	r2, #4
 801edfa:	2112      	movs	r1, #18
 801edfc:	f7f3 f878 	bl	8011ef0 <bt_att_create_pdu>
	if (!buf) {
 801ee00:	b320      	cbz	r0, 801ee4c <gatt_write_ccc+0x66>
 801ee02:	4680      	mov	r8, r0
	req = net_buf_add(buf, sizeof(*req));
 801ee04:	f100 0a08 	add.w	sl, r0, #8
 801ee08:	2102      	movs	r1, #2
 801ee0a:	4650      	mov	r0, sl
 801ee0c:	f001 fb36 	bl	802047c <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(handle);
 801ee10:	8007      	strh	r7, [r0, #0]
	net_buf_add_le16(buf, value);
 801ee12:	4631      	mov	r1, r6
 801ee14:	4650      	mov	r0, sl
 801ee16:	f001 fb49 	bl	80204ac <net_buf_simple_add_le16>
	atomic_set_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);
 801ee1a:	f109 0310 	add.w	r3, r9, #16
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 801ee1e:	f3bf 8f5b 	dmb	ish
 801ee22:	e853 2f00 	ldrex	r2, [r3]
 801ee26:	f042 0204 	orr.w	r2, r2, #4
 801ee2a:	e843 2100 	strex	r1, r2, [r3]
 801ee2e:	2900      	cmp	r1, #0
 801ee30:	d1f7      	bne.n	801ee22 <gatt_write_ccc+0x3c>
 801ee32:	f3bf 8f5b 	dmb	ish
	return gatt_send(conn, buf, func, params, NULL);
 801ee36:	2300      	movs	r3, #0
 801ee38:	9300      	str	r3, [sp, #0]
 801ee3a:	464b      	mov	r3, r9
 801ee3c:	462a      	mov	r2, r5
 801ee3e:	4641      	mov	r1, r8
 801ee40:	4620      	mov	r0, r4
 801ee42:	f7f4 f923 	bl	801308c <gatt_send>
}
 801ee46:	b002      	add	sp, #8
 801ee48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
 801ee4c:	f06f 000b 	mvn.w	r0, #11
 801ee50:	e7f9      	b.n	801ee46 <gatt_write_ccc+0x60>

0801ee52 <clear_cf_cfg>:
{
 801ee52:	b530      	push	{r4, r5, lr}
 801ee54:	b083      	sub	sp, #12
 801ee56:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
 801ee58:	2500      	movs	r5, #0
 801ee5a:	9500      	str	r5, [sp, #0]
 801ee5c:	f8cd 5003 	str.w	r5, [sp, #3]
 801ee60:	2207      	movs	r2, #7
 801ee62:	4669      	mov	r1, sp
 801ee64:	3001      	adds	r0, #1
 801ee66:	f7fd fd22 	bl	801c8ae <memcpy>
	memset(cfg->data, 0, sizeof(cfg->data));
 801ee6a:	2201      	movs	r2, #1
 801ee6c:	4629      	mov	r1, r5
 801ee6e:	f104 0008 	add.w	r0, r4, #8
 801ee72:	f7fd fd41 	bl	801c8f8 <memset>
	atomic_set(cfg->flags, 0);
 801ee76:	340c      	adds	r4, #12
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 801ee78:	f3bf 8f5b 	dmb	ish
 801ee7c:	e854 3f00 	ldrex	r3, [r4]
 801ee80:	e844 5200 	strex	r2, r5, [r4]
 801ee84:	2a00      	cmp	r2, #0
 801ee86:	d1f9      	bne.n	801ee7c <clear_cf_cfg+0x2a>
 801ee88:	f3bf 8f5b 	dmb	ish
}
 801ee8c:	b003      	add	sp, #12
 801ee8e:	bd30      	pop	{r4, r5, pc}

0801ee90 <remove_cf_cfg>:
{
 801ee90:	b570      	push	{r4, r5, r6, lr}
 801ee92:	4604      	mov	r4, r0
	cfg = find_cf_cfg(conn);
 801ee94:	f7f3 fbd4 	bl	8012640 <find_cf_cfg>
	if (!cfg) {
 801ee98:	b1e8      	cbz	r0, 801eed6 <remove_cf_cfg+0x46>
 801ee9a:	4605      	mov	r5, r0
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
 801ee9c:	f104 0688 	add.w	r6, r4, #136	; 0x88
 801eea0:	4631      	mov	r1, r6
 801eea2:	7a20      	ldrb	r0, [r4, #8]
 801eea4:	f7fe f969 	bl	801d17a <bt_addr_le_is_bonded>
 801eea8:	b918      	cbnz	r0, 801eeb2 <remove_cf_cfg+0x22>
		clear_cf_cfg(cfg);
 801eeaa:	4628      	mov	r0, r5
 801eeac:	f7ff ffd1 	bl	801ee52 <clear_cf_cfg>
 801eeb0:	e011      	b.n	801eed6 <remove_cf_cfg+0x46>
 801eeb2:	2207      	movs	r2, #7
 801eeb4:	4631      	mov	r1, r6
 801eeb6:	1c68      	adds	r0, r5, #1
 801eeb8:	f7fd fcf9 	bl	801c8ae <memcpy>
		atomic_clear_bit(cfg->flags, CF_OUT_OF_SYNC);
 801eebc:	350c      	adds	r5, #12
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 801eebe:	f3bf 8f5b 	dmb	ish
 801eec2:	e855 3f00 	ldrex	r3, [r5]
 801eec6:	f023 0302 	bic.w	r3, r3, #2
 801eeca:	e845 3200 	strex	r2, r3, [r5]
 801eece:	2a00      	cmp	r2, #0
 801eed0:	d1f7      	bne.n	801eec2 <remove_cf_cfg+0x32>
 801eed2:	f3bf 8f5b 	dmb	ish
}
 801eed6:	bd70      	pop	{r4, r5, r6, pc}

0801eed8 <bt_gatt_attr_read>:
{
 801eed8:	b510      	push	{r4, lr}
 801eeda:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801eede:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
 801eee2:	42a1      	cmp	r1, r4
 801eee4:	d80c      	bhi.n	801ef00 <bt_gatt_attr_read+0x28>
 801eee6:	4610      	mov	r0, r2
	len = MIN(buf_len, value_len - offset);
 801eee8:	1a64      	subs	r4, r4, r1
 801eeea:	42a3      	cmp	r3, r4
 801eeec:	bfa8      	it	ge
 801eeee:	4623      	movge	r3, r4
	memcpy(buf, (uint8_t *)value + offset, len);
 801eef0:	b29c      	uxth	r4, r3
 801eef2:	4622      	mov	r2, r4
 801eef4:	9b03      	ldr	r3, [sp, #12]
 801eef6:	4419      	add	r1, r3
 801eef8:	f7fd fcd9 	bl	801c8ae <memcpy>
}
 801eefc:	4620      	mov	r0, r4
 801eefe:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
 801ef00:	f06f 0406 	mvn.w	r4, #6
 801ef04:	e7fa      	b.n	801eefc <bt_gatt_attr_read+0x24>

0801ef06 <read_ppcp>:
{
 801ef06:	b510      	push	{r4, lr}
 801ef08:	b086      	sub	sp, #24
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
 801ef0a:	2418      	movs	r4, #24
 801ef0c:	f8ad 4010 	strh.w	r4, [sp, #16]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
 801ef10:	2428      	movs	r4, #40	; 0x28
 801ef12:	f8ad 4012 	strh.w	r4, [sp, #18]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
 801ef16:	2400      	movs	r4, #0
 801ef18:	f8ad 4014 	strh.w	r4, [sp, #20]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
 801ef1c:	242a      	movs	r4, #42	; 0x2a
 801ef1e:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
 801ef22:	2408      	movs	r4, #8
 801ef24:	9402      	str	r4, [sp, #8]
 801ef26:	ac04      	add	r4, sp, #16
 801ef28:	9401      	str	r4, [sp, #4]
 801ef2a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 801ef2e:	9400      	str	r4, [sp, #0]
 801ef30:	f7ff ffd2 	bl	801eed8 <bt_gatt_attr_read>
}
 801ef34:	b006      	add	sp, #24
 801ef36:	bd10      	pop	{r4, pc}

0801ef38 <read_appearance>:
{
 801ef38:	b510      	push	{r4, lr}
 801ef3a:	b086      	sub	sp, #24
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
 801ef3c:	f240 34c1 	movw	r4, #961	; 0x3c1
 801ef40:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
 801ef44:	2402      	movs	r4, #2
 801ef46:	9402      	str	r4, [sp, #8]
 801ef48:	f10d 0416 	add.w	r4, sp, #22
 801ef4c:	9401      	str	r4, [sp, #4]
 801ef4e:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 801ef52:	9400      	str	r4, [sp, #0]
 801ef54:	f7ff ffc0 	bl	801eed8 <bt_gatt_attr_read>
}
 801ef58:	b006      	add	sp, #24
 801ef5a:	bd10      	pop	{r4, pc}

0801ef5c <read_name>:
{
 801ef5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ef60:	b084      	sub	sp, #16
 801ef62:	4604      	mov	r4, r0
 801ef64:	460d      	mov	r5, r1
 801ef66:	4616      	mov	r6, r2
 801ef68:	461f      	mov	r7, r3
	const char *name = bt_get_name();
 801ef6a:	f7f0 f8db 	bl	800f124 <bt_get_name>
 801ef6e:	4680      	mov	r8, r0
				 strlen(name));
 801ef70:	f7fd fc57 	bl	801c822 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
 801ef74:	b280      	uxth	r0, r0
 801ef76:	9002      	str	r0, [sp, #8]
 801ef78:	f8cd 8004 	str.w	r8, [sp, #4]
 801ef7c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801ef80:	9300      	str	r3, [sp, #0]
 801ef82:	463b      	mov	r3, r7
 801ef84:	4632      	mov	r2, r6
 801ef86:	4629      	mov	r1, r5
 801ef88:	4620      	mov	r0, r4
 801ef8a:	f7ff ffa5 	bl	801eed8 <bt_gatt_attr_read>
}
 801ef8e:	b004      	add	sp, #16
 801ef90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ef94 <cf_read>:
{
 801ef94:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ef96:	b087      	sub	sp, #28
 801ef98:	4604      	mov	r4, r0
 801ef9a:	460d      	mov	r5, r1
 801ef9c:	4616      	mov	r6, r2
 801ef9e:	461f      	mov	r7, r3
	uint8_t data[1] = {};
 801efa0:	2300      	movs	r3, #0
 801efa2:	f88d 3014 	strb.w	r3, [sp, #20]
	cfg = find_cf_cfg(conn);
 801efa6:	f7f3 fb4b 	bl	8012640 <find_cf_cfg>
	if (cfg) {
 801efaa:	b128      	cbz	r0, 801efb8 <cf_read+0x24>
 801efac:	4601      	mov	r1, r0
		memcpy(data, cfg->data, sizeof(data));
 801efae:	2201      	movs	r2, #1
 801efb0:	3108      	adds	r1, #8
 801efb2:	a805      	add	r0, sp, #20
 801efb4:	f7fd fc7b 	bl	801c8ae <memcpy>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
 801efb8:	2301      	movs	r3, #1
 801efba:	9302      	str	r3, [sp, #8]
 801efbc:	ab05      	add	r3, sp, #20
 801efbe:	9301      	str	r3, [sp, #4]
 801efc0:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801efc4:	9300      	str	r3, [sp, #0]
 801efc6:	463b      	mov	r3, r7
 801efc8:	4632      	mov	r2, r6
 801efca:	4629      	mov	r1, r5
 801efcc:	4620      	mov	r0, r4
 801efce:	f7ff ff83 	bl	801eed8 <bt_gatt_attr_read>
}
 801efd2:	b007      	add	sp, #28
 801efd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801efd6 <bt_gatt_attr_read_service>:
{
 801efd6:	b570      	push	{r4, r5, r6, lr}
 801efd8:	b086      	sub	sp, #24
 801efda:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
 801efde:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
 801efe0:	7826      	ldrb	r6, [r4, #0]
 801efe2:	b146      	cbz	r6, 801eff6 <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
 801efe4:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
 801efe6:	2610      	movs	r6, #16
 801efe8:	9602      	str	r6, [sp, #8]
 801efea:	9401      	str	r4, [sp, #4]
 801efec:	9500      	str	r5, [sp, #0]
 801efee:	f7ff ff73 	bl	801eed8 <bt_gatt_attr_read>
}
 801eff2:	b006      	add	sp, #24
 801eff4:	bd70      	pop	{r4, r5, r6, pc}
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
 801eff6:	8864      	ldrh	r4, [r4, #2]
 801eff8:	f8ad 4016 	strh.w	r4, [sp, #22]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
 801effc:	2402      	movs	r4, #2
 801effe:	9402      	str	r4, [sp, #8]
 801f000:	f10d 0416 	add.w	r4, sp, #22
 801f004:	9401      	str	r4, [sp, #4]
 801f006:	9500      	str	r5, [sp, #0]
 801f008:	f7ff ff66 	bl	801eed8 <bt_gatt_attr_read>
 801f00c:	e7f1      	b.n	801eff2 <bt_gatt_attr_read_service+0x1c>

0801f00e <bt_gatt_attr_read_ccc>:
{
 801f00e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f010:	b087      	sub	sp, #28
 801f012:	4605      	mov	r5, r0
 801f014:	460c      	mov	r4, r1
 801f016:	4616      	mov	r6, r2
 801f018:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
 801f01a:	68c9      	ldr	r1, [r1, #12]
 801f01c:	f7ff fd2f 	bl	801ea7e <find_ccc_cfg>
	if (cfg) {
 801f020:	b190      	cbz	r0, 801f048 <bt_gatt_attr_read_ccc+0x3a>
		value = sys_cpu_to_le16(cfg->value);
 801f022:	8903      	ldrh	r3, [r0, #8]
 801f024:	f8ad 3016 	strh.w	r3, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
 801f028:	2302      	movs	r3, #2
 801f02a:	9302      	str	r3, [sp, #8]
 801f02c:	f10d 0316 	add.w	r3, sp, #22
 801f030:	9301      	str	r3, [sp, #4]
 801f032:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801f036:	9300      	str	r3, [sp, #0]
 801f038:	463b      	mov	r3, r7
 801f03a:	4632      	mov	r2, r6
 801f03c:	4621      	mov	r1, r4
 801f03e:	4628      	mov	r0, r5
 801f040:	f7ff ff4a 	bl	801eed8 <bt_gatt_attr_read>
}
 801f044:	b007      	add	sp, #28
 801f046:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = 0x0000;
 801f048:	2300      	movs	r3, #0
 801f04a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f04e:	e7eb      	b.n	801f028 <bt_gatt_attr_read_ccc+0x1a>

0801f050 <bt_gatt_attr_read_chrc>:
{
 801f050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f054:	b08a      	sub	sp, #40	; 0x28
 801f056:	4605      	mov	r5, r0
 801f058:	460c      	mov	r4, r1
 801f05a:	4616      	mov	r6, r2
 801f05c:	461f      	mov	r7, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
 801f05e:	f8d1 800c 	ldr.w	r8, [r1, #12]
	pdu.properties = chrc->properties;
 801f062:	f898 3006 	ldrb.w	r3, [r8, #6]
 801f066:	f88d 3014 	strb.w	r3, [sp, #20]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
 801f06a:	4608      	mov	r0, r1
 801f06c:	f7f4 fd4c 	bl	8013b08 <bt_gatt_attr_value_handle>
 801f070:	f8ad 0015 	strh.w	r0, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
 801f074:	f8d8 1000 	ldr.w	r1, [r8]
 801f078:	780b      	ldrb	r3, [r1, #0]
 801f07a:	b993      	cbnz	r3, 801f0a2 <bt_gatt_attr_read_chrc+0x52>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
 801f07c:	884b      	ldrh	r3, [r1, #2]
 801f07e:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2U;
 801f082:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
 801f084:	9302      	str	r3, [sp, #8]
 801f086:	ab05      	add	r3, sp, #20
 801f088:	9301      	str	r3, [sp, #4]
 801f08a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801f08e:	9300      	str	r3, [sp, #0]
 801f090:	463b      	mov	r3, r7
 801f092:	4632      	mov	r2, r6
 801f094:	4621      	mov	r1, r4
 801f096:	4628      	mov	r0, r5
 801f098:	f7ff ff1e 	bl	801eed8 <bt_gatt_attr_read>
}
 801f09c:	b00a      	add	sp, #40	; 0x28
 801f09e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
 801f0a2:	2210      	movs	r2, #16
 801f0a4:	3101      	adds	r1, #1
 801f0a6:	f10d 0017 	add.w	r0, sp, #23
 801f0aa:	f7fd fc00 	bl	801c8ae <memcpy>
		value_len += 16U;
 801f0ae:	2313      	movs	r3, #19
 801f0b0:	e7e8      	b.n	801f084 <bt_gatt_attr_read_chrc+0x34>

0801f0b2 <db_hash_process>:
{
 801f0b2:	b508      	push	{r3, lr}
	db_hash_gen(true);
 801f0b4:	2001      	movs	r0, #1
 801f0b6:	f7f4 fd89 	bl	8013bcc <db_hash_gen>
}
 801f0ba:	bd08      	pop	{r3, pc}

0801f0bc <bt_gatt_check_perm>:
{
 801f0bc:	b538      	push	{r3, r4, r5, lr}
 801f0be:	4605      	mov	r5, r0
	if ((mask & BT_GATT_PERM_READ) &&
 801f0c0:	f012 0f01 	tst.w	r2, #1
 801f0c4:	d005      	beq.n	801f0d2 <bt_gatt_check_perm+0x16>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
 801f0c6:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
 801f0c8:	f013 0f15 	tst.w	r3, #21
 801f0cc:	d01d      	beq.n	801f10a <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
 801f0ce:	684b      	ldr	r3, [r1, #4]
 801f0d0:	b1eb      	cbz	r3, 801f10e <bt_gatt_check_perm+0x52>
	if ((mask & BT_GATT_PERM_WRITE) &&
 801f0d2:	f012 0f02 	tst.w	r2, #2
 801f0d6:	d005      	beq.n	801f0e4 <bt_gatt_check_perm+0x28>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
 801f0d8:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
 801f0da:	f013 0f2a 	tst.w	r3, #42	; 0x2a
 801f0de:	d018      	beq.n	801f112 <bt_gatt_check_perm+0x56>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
 801f0e0:	688b      	ldr	r3, [r1, #8]
 801f0e2:	b1c3      	cbz	r3, 801f116 <bt_gatt_check_perm+0x5a>
	mask &= attr->perm;
 801f0e4:	7c8c      	ldrb	r4, [r1, #18]
 801f0e6:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
 801f0e8:	f014 0f30 	tst.w	r4, #48	; 0x30
 801f0ec:	d106      	bne.n	801f0fc <bt_gatt_check_perm+0x40>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
 801f0ee:	f014 000c 	ands.w	r0, r4, #12
 801f0f2:	d002      	beq.n	801f0fa <bt_gatt_check_perm+0x3e>
		if (!conn->encrypt) {
 801f0f4:	7aeb      	ldrb	r3, [r5, #11]
 801f0f6:	b183      	cbz	r3, 801f11a <bt_gatt_check_perm+0x5e>
	return 0;
 801f0f8:	2000      	movs	r0, #0
}
 801f0fa:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
 801f0fc:	4628      	mov	r0, r5
 801f0fe:	f7fe fa65 	bl	801d5cc <bt_conn_get_security>
 801f102:	2802      	cmp	r0, #2
 801f104:	d8f3      	bhi.n	801f0ee <bt_gatt_check_perm+0x32>
			return BT_ATT_ERR_AUTHENTICATION;
 801f106:	2005      	movs	r0, #5
 801f108:	e7f7      	b.n	801f0fa <bt_gatt_check_perm+0x3e>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
 801f10a:	2002      	movs	r0, #2
 801f10c:	e7f5      	b.n	801f0fa <bt_gatt_check_perm+0x3e>
 801f10e:	2002      	movs	r0, #2
 801f110:	e7f3      	b.n	801f0fa <bt_gatt_check_perm+0x3e>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
 801f112:	2003      	movs	r0, #3
 801f114:	e7f1      	b.n	801f0fa <bt_gatt_check_perm+0x3e>
 801f116:	2003      	movs	r0, #3
 801f118:	e7ef      	b.n	801f0fa <bt_gatt_check_perm+0x3e>
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
 801f11a:	200f      	movs	r0, #15
 801f11c:	e7ed      	b.n	801f0fa <bt_gatt_check_perm+0x3e>

0801f11e <gatt_discover_next>:
{
 801f11e:	b538      	push	{r3, r4, r5, lr}
 801f120:	4605      	mov	r5, r0
 801f122:	4614      	mov	r4, r2
	if (!last_handle)
 801f124:	b159      	cbz	r1, 801f13e <gatt_discover_next+0x20>
 801f126:	460b      	mov	r3, r1
	params->start_handle = last_handle;
 801f128:	8121      	strh	r1, [r4, #8]
	if (params->start_handle < UINT16_MAX) {
 801f12a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f12e:	4291      	cmp	r1, r2
 801f130:	d00a      	beq.n	801f148 <gatt_discover_next+0x2a>
		params->start_handle++;
 801f132:	3301      	adds	r3, #1
 801f134:	b29b      	uxth	r3, r3
 801f136:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
 801f138:	89e2      	ldrh	r2, [r4, #14]
 801f13a:	4293      	cmp	r3, r2
 801f13c:	d804      	bhi.n	801f148 <gatt_discover_next+0x2a>
	if (!bt_gatt_discover(conn, params)) {
 801f13e:	4621      	mov	r1, r4
 801f140:	4628      	mov	r0, r5
 801f142:	f7f4 fff7 	bl	8014134 <bt_gatt_discover>
 801f146:	b120      	cbz	r0, 801f152 <gatt_discover_next+0x34>
	params->func(conn, NULL, params);
 801f148:	6863      	ldr	r3, [r4, #4]
 801f14a:	4622      	mov	r2, r4
 801f14c:	2100      	movs	r1, #0
 801f14e:	4628      	mov	r0, r5
 801f150:	4798      	blx	r3
}
 801f152:	bd38      	pop	{r3, r4, r5, pc}

0801f154 <gatt_find_type_rsp>:
{
 801f154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f158:	b089      	sub	sp, #36	; 0x24
 801f15a:	4680      	mov	r8, r0
 801f15c:	9e10      	ldr	r6, [sp, #64]	; 0x40
	if (err) {
 801f15e:	2900      	cmp	r1, #0
 801f160:	d135      	bne.n	801f1ce <gatt_find_type_rsp+0x7a>
 801f162:	4617      	mov	r7, r2
 801f164:	461d      	mov	r5, r3
 801f166:	460c      	mov	r4, r1
	uint16_t end_handle = 0U, start_handle;
 801f168:	f04f 0900 	mov.w	r9, #0
 801f16c:	e017      	b.n	801f19e <gatt_find_type_rsp+0x4a>
			uuid_svc.val = BT_UUID_16(BT_UUID_GATT_SECONDARY)->val;
 801f16e:	f642 0301 	movw	r3, #10241	; 0x2801
 801f172:	f8ad 3002 	strh.w	r3, [sp, #2]
		value.end_handle = end_handle;
 801f176:	f8ad 1008 	strh.w	r1, [sp, #8]
		value.uuid = params->uuid;
 801f17a:	6833      	ldr	r3, [r6, #0]
 801f17c:	9301      	str	r3, [sp, #4]
		attr.uuid = &uuid_svc.uuid;
 801f17e:	f8cd d00c 	str.w	sp, [sp, #12]
		attr.handle = start_handle;
 801f182:	f8ad 201c 	strh.w	r2, [sp, #28]
		attr.user_data = &value;
 801f186:	ab01      	add	r3, sp, #4
 801f188:	9306      	str	r3, [sp, #24]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
 801f18a:	6873      	ldr	r3, [r6, #4]
 801f18c:	4632      	mov	r2, r6
 801f18e:	a903      	add	r1, sp, #12
 801f190:	4640      	mov	r0, r8
 801f192:	4798      	blx	r3
 801f194:	b300      	cbz	r0, 801f1d8 <gatt_find_type_rsp+0x84>
	     i++, length -=  sizeof(rsp->list[i])) {
 801f196:	3401      	adds	r4, #1
 801f198:	b2e4      	uxtb	r4, r4
 801f19a:	3d04      	subs	r5, #4
 801f19c:	b2ad      	uxth	r5, r5
	for (i = 0U; length >= sizeof(rsp->list[i]);
 801f19e:	2d03      	cmp	r5, #3
 801f1a0:	d914      	bls.n	801f1cc <gatt_find_type_rsp+0x78>
		struct bt_gatt_attr attr = {};
 801f1a2:	2300      	movs	r3, #0
 801f1a4:	9304      	str	r3, [sp, #16]
 801f1a6:	9305      	str	r3, [sp, #20]
 801f1a8:	9307      	str	r3, [sp, #28]
		start_handle = sys_le16_to_cpu(rsp->list[i].start_handle);
 801f1aa:	f837 2024 	ldrh.w	r2, [r7, r4, lsl #2]
		end_handle = sys_le16_to_cpu(rsp->list[i].end_handle);
 801f1ae:	eb07 0184 	add.w	r1, r7, r4, lsl #2
 801f1b2:	8849      	ldrh	r1, [r1, #2]
 801f1b4:	fa1f f981 	uxth.w	r9, r1
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
 801f1b8:	f88d 3000 	strb.w	r3, [sp]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
 801f1bc:	7c33      	ldrb	r3, [r6, #16]
 801f1be:	2b00      	cmp	r3, #0
 801f1c0:	d1d5      	bne.n	801f16e <gatt_find_type_rsp+0x1a>
			uuid_svc.val = BT_UUID_16(BT_UUID_GATT_PRIMARY)->val;
 801f1c2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 801f1c6:	f8ad 3002 	strh.w	r3, [sp, #2]
 801f1ca:	e7d4      	b.n	801f176 <gatt_find_type_rsp+0x22>
	if (length > 0) {
 801f1cc:	b13d      	cbz	r5, 801f1de <gatt_find_type_rsp+0x8a>
	params->func(conn, NULL, params);
 801f1ce:	6873      	ldr	r3, [r6, #4]
 801f1d0:	4632      	mov	r2, r6
 801f1d2:	2100      	movs	r1, #0
 801f1d4:	4640      	mov	r0, r8
 801f1d6:	4798      	blx	r3
}
 801f1d8:	b009      	add	sp, #36	; 0x24
 801f1da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	gatt_discover_next(conn, end_handle, params);
 801f1de:	4632      	mov	r2, r6
 801f1e0:	4649      	mov	r1, r9
 801f1e2:	4640      	mov	r0, r8
 801f1e4:	f7ff ff9b 	bl	801f11e <gatt_discover_next>
	return;
 801f1e8:	e7f6      	b.n	801f1d8 <gatt_find_type_rsp+0x84>

0801f1ea <gatt_read_group_rsp>:
{
 801f1ea:	b538      	push	{r3, r4, r5, lr}
 801f1ec:	4604      	mov	r4, r0
 801f1ee:	9d04      	ldr	r5, [sp, #16]
	if (err) {
 801f1f0:	b121      	cbz	r1, 801f1fc <gatt_read_group_rsp+0x12>
		params->func(conn, NULL, params);
 801f1f2:	686b      	ldr	r3, [r5, #4]
 801f1f4:	462a      	mov	r2, r5
 801f1f6:	2100      	movs	r1, #0
 801f1f8:	4798      	blx	r3
}
 801f1fa:	bd38      	pop	{r3, r4, r5, pc}
 801f1fc:	4610      	mov	r0, r2
	handle = parse_service(conn, pdu, params, length);
 801f1fe:	462a      	mov	r2, r5
 801f200:	4601      	mov	r1, r0
 801f202:	4620      	mov	r0, r4
 801f204:	f7f3 fb60 	bl	80128c8 <parse_service>
	if (!handle) {
 801f208:	4601      	mov	r1, r0
 801f20a:	2800      	cmp	r0, #0
 801f20c:	d0f5      	beq.n	801f1fa <gatt_read_group_rsp+0x10>
	gatt_discover_next(conn, handle, params);
 801f20e:	462a      	mov	r2, r5
 801f210:	4620      	mov	r0, r4
 801f212:	f7ff ff84 	bl	801f11e <gatt_discover_next>
 801f216:	e7f0      	b.n	801f1fa <gatt_read_group_rsp+0x10>

0801f218 <gatt_read_type_rsp>:
{
 801f218:	b538      	push	{r3, r4, r5, lr}
 801f21a:	4604      	mov	r4, r0
 801f21c:	9d04      	ldr	r5, [sp, #16]
	if (err) {
 801f21e:	b979      	cbnz	r1, 801f240 <gatt_read_type_rsp+0x28>
 801f220:	4610      	mov	r0, r2
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
 801f222:	7c2a      	ldrb	r2, [r5, #16]
 801f224:	2a02      	cmp	r2, #2
 801f226:	d010      	beq.n	801f24a <gatt_read_type_rsp+0x32>
		handle = parse_characteristic(conn, pdu, params, length);
 801f228:	462a      	mov	r2, r5
 801f22a:	4601      	mov	r1, r0
 801f22c:	4620      	mov	r0, r4
 801f22e:	f7f3 fe3b 	bl	8012ea8 <parse_characteristic>
	if (!handle) {
 801f232:	b148      	cbz	r0, 801f248 <gatt_read_type_rsp+0x30>
	gatt_discover_next(conn, handle, params);
 801f234:	462a      	mov	r2, r5
 801f236:	4601      	mov	r1, r0
 801f238:	4620      	mov	r0, r4
 801f23a:	f7ff ff70 	bl	801f11e <gatt_discover_next>
 801f23e:	e003      	b.n	801f248 <gatt_read_type_rsp+0x30>
		params->func(conn, NULL, params);
 801f240:	686b      	ldr	r3, [r5, #4]
 801f242:	462a      	mov	r2, r5
 801f244:	2100      	movs	r1, #0
 801f246:	4798      	blx	r3
}
 801f248:	bd38      	pop	{r3, r4, r5, pc}
		handle = parse_include(conn, pdu, params, length);
 801f24a:	462a      	mov	r2, r5
 801f24c:	4601      	mov	r1, r0
 801f24e:	4620      	mov	r0, r4
 801f250:	f7f3 ffd2 	bl	80131f8 <parse_include>
 801f254:	e7ed      	b.n	801f232 <gatt_read_type_rsp+0x1a>

0801f256 <bt_gatt_cancel>:
{
 801f256:	b508      	push	{r3, lr}
	bt_att_req_cancel(conn, params);
 801f258:	f7ff fae2 	bl	801e820 <bt_att_req_cancel>
}
 801f25c:	bd08      	pop	{r3, pc}

0801f25e <bt_gatt_notification>:
{
 801f25e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f262:	4680      	mov	r8, r0
 801f264:	460f      	mov	r7, r1
 801f266:	4691      	mov	r9, r2
 801f268:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
 801f26a:	f7f3 fa37 	bl	80126dc <gatt_sub_find>
	if (!sub) {
 801f26e:	b350      	cbz	r0, 801f2c6 <bt_gatt_notification+0x68>
	return list->head;
 801f270:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
 801f272:	b145      	cbz	r5, 801f286 <bt_gatt_notification+0x28>
 801f274:	3d14      	subs	r5, #20
 801f276:	d008      	beq.n	801f28a <bt_gatt_notification+0x2c>
Z_GENLIST_PEEK_NEXT(slist, snode)
 801f278:	f115 0414 	adds.w	r4, r5, #20
 801f27c:	d014      	beq.n	801f2a8 <bt_gatt_notification+0x4a>
	return node->next;
 801f27e:	696c      	ldr	r4, [r5, #20]
 801f280:	b194      	cbz	r4, 801f2a8 <bt_gatt_notification+0x4a>
 801f282:	3c14      	subs	r4, #20
 801f284:	e010      	b.n	801f2a8 <bt_gatt_notification+0x4a>
 801f286:	462c      	mov	r4, r5
 801f288:	e00e      	b.n	801f2a8 <bt_gatt_notification+0x4a>
 801f28a:	462c      	mov	r4, r5
 801f28c:	e00c      	b.n	801f2a8 <bt_gatt_notification+0x4a>
			bt_gatt_unsubscribe(conn, params);
 801f28e:	4629      	mov	r1, r5
 801f290:	4640      	mov	r0, r8
 801f292:	f7f5 f92d 	bl	80144f0 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
 801f296:	b1a4      	cbz	r4, 801f2c2 <bt_gatt_notification+0x64>
Z_GENLIST_PEEK_NEXT(slist, snode)
 801f298:	f114 0614 	adds.w	r6, r4, #20
 801f29c:	d002      	beq.n	801f2a4 <bt_gatt_notification+0x46>
	return node->next;
 801f29e:	6966      	ldr	r6, [r4, #20]
 801f2a0:	b106      	cbz	r6, 801f2a4 <bt_gatt_notification+0x46>
 801f2a2:	3e14      	subs	r6, #20
 801f2a4:	4625      	mov	r5, r4
 801f2a6:	4634      	mov	r4, r6
 801f2a8:	b16d      	cbz	r5, 801f2c6 <bt_gatt_notification+0x68>
		if (handle != params->value_handle) {
 801f2aa:	892b      	ldrh	r3, [r5, #8]
 801f2ac:	42bb      	cmp	r3, r7
 801f2ae:	d1f2      	bne.n	801f296 <bt_gatt_notification+0x38>
		if (params->notify(conn, params, data, length) ==
 801f2b0:	682e      	ldr	r6, [r5, #0]
 801f2b2:	4653      	mov	r3, sl
 801f2b4:	464a      	mov	r2, r9
 801f2b6:	4629      	mov	r1, r5
 801f2b8:	4640      	mov	r0, r8
 801f2ba:	47b0      	blx	r6
 801f2bc:	2800      	cmp	r0, #0
 801f2be:	d1ea      	bne.n	801f296 <bt_gatt_notification+0x38>
 801f2c0:	e7e5      	b.n	801f28e <bt_gatt_notification+0x30>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
 801f2c2:	4626      	mov	r6, r4
 801f2c4:	e7ee      	b.n	801f2a4 <bt_gatt_notification+0x46>
}
 801f2c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801f2ca <bt_gatt_change_aware>:
{
 801f2ca:	b510      	push	{r4, lr}
 801f2cc:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
 801f2ce:	f7f3 f9b7 	bl	8012640 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
 801f2d2:	2800      	cmp	r0, #0
 801f2d4:	d042      	beq.n	801f35c <bt_gatt_change_aware+0x92>
 801f2d6:	7a02      	ldrb	r2, [r0, #8]
 801f2d8:	f012 0f01 	tst.w	r2, #1
 801f2dc:	d101      	bne.n	801f2e2 <bt_gatt_change_aware+0x18>
		return true;
 801f2de:	2001      	movs	r0, #1
}
 801f2e0:	bd10      	pop	{r4, pc}
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
 801f2e2:	f100 010c 	add.w	r1, r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 801f2e6:	f3bf 8f5b 	dmb	ish
 801f2ea:	68c2      	ldr	r2, [r0, #12]
 801f2ec:	f3bf 8f5b 	dmb	ish
 801f2f0:	f012 0f01 	tst.w	r2, #1
 801f2f4:	d134      	bne.n	801f360 <bt_gatt_change_aware+0x96>
	if (!req) {
 801f2f6:	b90c      	cbnz	r4, 801f2fc <bt_gatt_change_aware+0x32>
		return false;
 801f2f8:	4620      	mov	r0, r4
 801f2fa:	e7f1      	b.n	801f2e0 <bt_gatt_change_aware+0x16>
 801f2fc:	f3bf 8f5b 	dmb	ish
 801f300:	68c3      	ldr	r3, [r0, #12]
 801f302:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
 801f306:	f013 0f02 	tst.w	r3, #2
 801f30a:	d10d      	bne.n	801f328 <bt_gatt_change_aware+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 801f30c:	f3bf 8f5b 	dmb	ish
 801f310:	e851 3f00 	ldrex	r3, [r1]
 801f314:	f043 0302 	orr.w	r3, r3, #2
 801f318:	e841 3200 	strex	r2, r3, [r1]
 801f31c:	2a00      	cmp	r2, #0
 801f31e:	d1f7      	bne.n	801f310 <bt_gatt_change_aware+0x46>
 801f320:	f3bf 8f5b 	dmb	ish
	return false;
 801f324:	2000      	movs	r0, #0
 801f326:	e7db      	b.n	801f2e0 <bt_gatt_change_aware+0x16>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 801f328:	f3bf 8f5b 	dmb	ish
 801f32c:	e851 3f00 	ldrex	r3, [r1]
 801f330:	f023 0302 	bic.w	r3, r3, #2
 801f334:	e841 3200 	strex	r2, r3, [r1]
 801f338:	2a00      	cmp	r2, #0
 801f33a:	d1f7      	bne.n	801f32c <bt_gatt_change_aware+0x62>
 801f33c:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 801f340:	f3bf 8f5b 	dmb	ish
 801f344:	e851 3f00 	ldrex	r3, [r1]
 801f348:	f043 0301 	orr.w	r3, r3, #1
 801f34c:	e841 3200 	strex	r2, r3, [r1]
 801f350:	2a00      	cmp	r2, #0
 801f352:	d1f7      	bne.n	801f344 <bt_gatt_change_aware+0x7a>
 801f354:	f3bf 8f5b 	dmb	ish
		return true;
 801f358:	4620      	mov	r0, r4
 801f35a:	e7c1      	b.n	801f2e0 <bt_gatt_change_aware+0x16>
		return true;
 801f35c:	2001      	movs	r0, #1
 801f35e:	e7bf      	b.n	801f2e0 <bt_gatt_change_aware+0x16>
		return true;
 801f360:	2001      	movs	r0, #1
 801f362:	e7bd      	b.n	801f2e0 <bt_gatt_change_aware+0x16>

0801f364 <bt_gatt_clear>:
{
 801f364:	b538      	push	{r3, r4, r5, lr}
 801f366:	4604      	mov	r4, r0
 801f368:	460d      	mov	r5, r1
	err = bt_gatt_clear_ccc(id, addr);
 801f36a:	f7f4 fcc3 	bl	8013cf4 <bt_gatt_clear_ccc>
	if (err < 0) {
 801f36e:	2800      	cmp	r0, #0
 801f370:	db10      	blt.n	801f394 <bt_gatt_clear+0x30>
		err = bt_gatt_clear_sc(id, addr);
 801f372:	4629      	mov	r1, r5
 801f374:	4620      	mov	r0, r4
 801f376:	f7f3 fc6d 	bl	8012c54 <bt_gatt_clear_sc>
		if (err < 0) {
 801f37a:	2800      	cmp	r0, #0
 801f37c:	db0a      	blt.n	801f394 <bt_gatt_clear+0x30>
		err = bt_gatt_clear_cf(id, addr);
 801f37e:	4629      	mov	r1, r5
 801f380:	4620      	mov	r0, r4
 801f382:	f7f4 fb1b 	bl	80139bc <bt_gatt_clear_cf>
		if (err < 0) {
 801f386:	2800      	cmp	r0, #0
 801f388:	db04      	blt.n	801f394 <bt_gatt_clear+0x30>
		bt_gatt_clear_subscriptions(id, addr);
 801f38a:	4629      	mov	r1, r5
 801f38c:	4620      	mov	r0, r4
 801f38e:	f7ff fc0f 	bl	801ebb0 <bt_gatt_clear_subscriptions>
	return 0;
 801f392:	2000      	movs	r0, #0
}
 801f394:	bd38      	pop	{r3, r4, r5, pc}

0801f396 <auth_err_get>:
	switch (smp_err) {
 801f396:	3801      	subs	r0, #1
 801f398:	280d      	cmp	r0, #13
 801f39a:	d812      	bhi.n	801f3c2 <auth_err_get+0x2c>
 801f39c:	e8df f000 	tbb	[pc, r0]
 801f3a0:	07091307 	.word	0x07091307
 801f3a4:	110b090b 	.word	0x110b090b
 801f3a8:	07070f0d 	.word	0x07070f0d
 801f3ac:	0d0d      	.short	0x0d0d
		return BT_SECURITY_ERR_INVALID_PARAM;
 801f3ae:	2001      	movs	r0, #1
 801f3b0:	4770      	bx	lr
		return BT_SECURITY_ERR_AUTH_REQUIREMENT;
 801f3b2:	2004      	movs	r0, #4
 801f3b4:	4770      	bx	lr
		return BT_SECURITY_ERR_PAIR_NOT_SUPPORTED;
 801f3b6:	2005      	movs	r0, #5
 801f3b8:	4770      	bx	lr
		return BT_SECURITY_ERR_PAIR_NOT_ALLOWED;
 801f3ba:	2006      	movs	r0, #6
 801f3bc:	4770      	bx	lr
		return BT_SECURITY_ERR_INVALID_PARAM;
 801f3be:	2007      	movs	r0, #7
 801f3c0:	4770      	bx	lr
		return BT_SECURITY_ERR_UNSPECIFIED;
 801f3c2:	2008      	movs	r0, #8
 801f3c4:	4770      	bx	lr
		return BT_SECURITY_ERR_OOB_NOT_AVAILABLE;
 801f3c6:	2003      	movs	r0, #3
}
 801f3c8:	4770      	bx	lr

0801f3ca <smp_err_get>:
	switch (auth_err) {
 801f3ca:	1e43      	subs	r3, r0, #1
 801f3cc:	2b07      	cmp	r3, #7
 801f3ce:	d80b      	bhi.n	801f3e8 <smp_err_get+0x1e>
 801f3d0:	e8df f003 	tbb	[pc, r3]
 801f3d4:	0c04080c 	.word	0x0c04080c
 801f3d8:	0806080d 	.word	0x0806080d
		return BT_SMP_ERR_UNSPECIFIED;
 801f3dc:	2002      	movs	r0, #2
 801f3de:	4770      	bx	lr
		return BT_SMP_ERR_INVALID_PARAMS;
 801f3e0:	200a      	movs	r0, #10
 801f3e2:	4770      	bx	lr
		return BT_SMP_ERR_UNSPECIFIED;
 801f3e4:	2008      	movs	r0, #8
 801f3e6:	4770      	bx	lr
		return 0;
 801f3e8:	2000      	movs	r0, #0
 801f3ea:	4770      	bx	lr
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
 801f3ec:	2003      	movs	r0, #3
}
 801f3ee:	4770      	bx	lr

0801f3f0 <get_encryption_key_size>:
{
 801f3f0:	4603      	mov	r3, r0
	return MIN(req->max_key_size, rsp->max_key_size);
 801f3f2:	f890 00cc 	ldrb.w	r0, [r0, #204]	; 0xcc
 801f3f6:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
}
 801f3fa:	4298      	cmp	r0, r3
 801f3fc:	bf28      	it	cs
 801f3fe:	4618      	movcs	r0, r3
 801f400:	4770      	bx	lr

0801f402 <smp_encrypt_info>:
}
 801f402:	2007      	movs	r0, #7
 801f404:	4770      	bx	lr

0801f406 <smp_master_ident>:
}
 801f406:	2007      	movs	r0, #7
 801f408:	4770      	bx	lr

0801f40a <le_sc_oob_data_req_check>:
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
 801f40a:	f890 00c3 	ldrb.w	r0, [r0, #195]	; 0xc3
}
 801f40e:	f000 0001 	and.w	r0, r0, #1
 801f412:	4770      	bx	lr

0801f414 <le_sc_oob_data_rsp_check>:
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
 801f414:	f890 00ca 	ldrb.w	r0, [r0, #202]	; 0xca
}
 801f418:	f000 0001 	and.w	r0, r0, #1
 801f41c:	4770      	bx	lr

0801f41e <le_sc_oob_config_set>:
{
 801f41e:	b570      	push	{r4, r5, r6, lr}
 801f420:	4604      	mov	r4, r0
 801f422:	460d      	mov	r5, r1
	bool req_oob_present = le_sc_oob_data_req_check(smp);
 801f424:	f7ff fff1 	bl	801f40a <le_sc_oob_data_req_check>
 801f428:	4606      	mov	r6, r0
	bool rsp_oob_present = le_sc_oob_data_rsp_check(smp);
 801f42a:	4620      	mov	r0, r4
 801f42c:	f7ff fff2 	bl	801f414 <le_sc_oob_data_rsp_check>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
 801f430:	6823      	ldr	r3, [r4, #0]
 801f432:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
 801f434:	b95b      	cbnz	r3, 801f44e <le_sc_oob_config_set+0x30>
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
 801f436:	b136      	cbz	r6, 801f446 <le_sc_oob_config_set+0x28>
 801f438:	2301      	movs	r3, #1
		if (rsp_oob_present) {
 801f43a:	b110      	cbz	r0, 801f442 <le_sc_oob_config_set+0x24>
				     BT_CONN_OOB_BOTH_PEERS :
 801f43c:	2b01      	cmp	r3, #1
 801f43e:	d004      	beq.n	801f44a <le_sc_oob_config_set+0x2c>
 801f440:	2300      	movs	r3, #0
	info->lesc.oob_config = oob_config;
 801f442:	706b      	strb	r3, [r5, #1]
}
 801f444:	bd70      	pop	{r4, r5, r6, pc}
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
 801f446:	2303      	movs	r3, #3
 801f448:	e7f7      	b.n	801f43a <le_sc_oob_config_set+0x1c>
				     BT_CONN_OOB_BOTH_PEERS :
 801f44a:	2302      	movs	r3, #2
 801f44c:	e7f9      	b.n	801f442 <le_sc_oob_config_set+0x24>
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
 801f44e:	b12e      	cbz	r6, 801f45c <le_sc_oob_config_set+0x3e>
 801f450:	2300      	movs	r3, #0
		if (rsp_oob_present) {
 801f452:	2800      	cmp	r0, #0
 801f454:	d0f5      	beq.n	801f442 <le_sc_oob_config_set+0x24>
				     BT_CONN_OOB_BOTH_PEERS :
 801f456:	b91b      	cbnz	r3, 801f460 <le_sc_oob_config_set+0x42>
 801f458:	2302      	movs	r3, #2
 801f45a:	e7f2      	b.n	801f442 <le_sc_oob_config_set+0x24>
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
 801f45c:	2303      	movs	r3, #3
 801f45e:	e7f8      	b.n	801f452 <le_sc_oob_config_set+0x34>
				     BT_CONN_OOB_BOTH_PEERS :
 801f460:	2301      	movs	r3, #1
 801f462:	e7ee      	b.n	801f442 <le_sc_oob_config_set+0x24>

0801f464 <smp_signing_info>:
}
 801f464:	2007      	movs	r0, #7
 801f466:	4770      	bx	lr

0801f468 <smp_keys_check>:
{
 801f468:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 801f46a:	f3bf 8f5b 	dmb	ish
 801f46e:	6843      	ldr	r3, [r0, #4]
 801f470:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
 801f474:	f413 6f00 	tst.w	r3, #2048	; 0x800
 801f478:	d132      	bne.n	801f4e0 <smp_keys_check+0x78>
 801f47a:	4604      	mov	r4, r0
	if (!conn->le.keys) {
 801f47c:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 801f480:	b1db      	cbz	r3, 801f4ba <smp_keys_check+0x52>
	if (!conn->le.keys ||
 801f482:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 801f486:	b36b      	cbz	r3, 801f4e4 <smp_keys_check+0x7c>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
 801f488:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
 801f48a:	f012 0f24 	tst.w	r2, #36	; 0x24
 801f48e:	d02b      	beq.n	801f4e8 <smp_keys_check+0x80>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
 801f490:	7aa1      	ldrb	r1, [r4, #10]
 801f492:	2902      	cmp	r1, #2
 801f494:	d903      	bls.n	801f49e <smp_keys_check+0x36>
	    !(conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
 801f496:	7b58      	ldrb	r0, [r3, #13]
	if (conn->required_sec_level > BT_SECURITY_L2 &&
 801f498:	f010 0f01 	tst.w	r0, #1
 801f49c:	d026      	beq.n	801f4ec <smp_keys_check+0x84>
	if (conn->required_sec_level > BT_SECURITY_L3 &&
 801f49e:	2903      	cmp	r1, #3
 801f4a0:	d926      	bls.n	801f4f0 <smp_keys_check+0x88>
	    !(conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
 801f4a2:	7b59      	ldrb	r1, [r3, #13]
	if (conn->required_sec_level > BT_SECURITY_L3 &&
 801f4a4:	f011 0f01 	tst.w	r1, #1
 801f4a8:	d124      	bne.n	801f4f4 <smp_keys_check+0x8c>
	    !(conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
 801f4aa:	f012 0f20 	tst.w	r2, #32
 801f4ae:	d123      	bne.n	801f4f8 <smp_keys_check+0x90>
	    !(conn->le.keys->enc_size == BT_SMP_MAX_ENC_KEY_SIZE)) {
 801f4b0:	7b1b      	ldrb	r3, [r3, #12]
	    !(conn->le.keys->keys & BT_KEYS_LTK_P256) &&
 801f4b2:	2b10      	cmp	r3, #16
 801f4b4:	d122      	bne.n	801f4fc <smp_keys_check+0x94>
	return true;
 801f4b6:	2001      	movs	r0, #1
 801f4b8:	e013      	b.n	801f4e2 <smp_keys_check+0x7a>
						     conn->id, &conn->le.dst);
 801f4ba:	f100 0588 	add.w	r5, r0, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
 801f4be:	462a      	mov	r2, r5
 801f4c0:	7a01      	ldrb	r1, [r0, #8]
 801f4c2:	2020      	movs	r0, #32
 801f4c4:	f7f7 f958 	bl	8016778 <bt_keys_find>
 801f4c8:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
 801f4cc:	2800      	cmp	r0, #0
 801f4ce:	d1d8      	bne.n	801f482 <smp_keys_check+0x1a>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
 801f4d0:	462a      	mov	r2, r5
 801f4d2:	7a21      	ldrb	r1, [r4, #8]
 801f4d4:	2004      	movs	r0, #4
 801f4d6:	f7f7 f94f 	bl	8016778 <bt_keys_find>
 801f4da:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
 801f4de:	e7d0      	b.n	801f482 <smp_keys_check+0x1a>
		return false;
 801f4e0:	2000      	movs	r0, #0
}
 801f4e2:	bd38      	pop	{r3, r4, r5, pc}
		return false;
 801f4e4:	2000      	movs	r0, #0
 801f4e6:	e7fc      	b.n	801f4e2 <smp_keys_check+0x7a>
 801f4e8:	2000      	movs	r0, #0
 801f4ea:	e7fa      	b.n	801f4e2 <smp_keys_check+0x7a>
		return false;
 801f4ec:	2000      	movs	r0, #0
 801f4ee:	e7f8      	b.n	801f4e2 <smp_keys_check+0x7a>
	return true;
 801f4f0:	2001      	movs	r0, #1
 801f4f2:	e7f6      	b.n	801f4e2 <smp_keys_check+0x7a>
 801f4f4:	2001      	movs	r0, #1
 801f4f6:	e7f4      	b.n	801f4e2 <smp_keys_check+0x7a>
 801f4f8:	2001      	movs	r0, #1
 801f4fa:	e7f2      	b.n	801f4e2 <smp_keys_check+0x7a>
		return false;
 801f4fc:	2000      	movs	r0, #0
 801f4fe:	e7f0      	b.n	801f4e2 <smp_keys_check+0x7a>

0801f500 <smp_reset>:
{
 801f500:	b538      	push	{r3, r4, r5, lr}
 801f502:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
 801f504:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
 801f506:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
 801f50a:	f002 ff39 	bl	8022380 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
 801f50e:	2200      	movs	r2, #0
 801f510:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
	atomic_set(&smp->allowed_cmds, 0);
 801f514:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 801f518:	f3bf 8f5b 	dmb	ish
 801f51c:	e853 1f00 	ldrex	r1, [r3]
 801f520:	e843 2000 	strex	r0, r2, [r3]
 801f524:	2800      	cmp	r0, #0
 801f526:	d1f9      	bne.n	801f51c <smp_reset+0x1c>
 801f528:	f3bf 8f5b 	dmb	ish
	atomic_set(smp->flags, 0);
 801f52c:	34bc      	adds	r4, #188	; 0xbc
 801f52e:	f3bf 8f5b 	dmb	ish
 801f532:	e854 1f00 	ldrex	r1, [r4]
 801f536:	e844 2000 	strex	r0, r2, [r4]
 801f53a:	2800      	cmp	r0, #0
 801f53c:	d1f9      	bne.n	801f532 <smp_reset+0x32>
 801f53e:	f3bf 8f5b 	dmb	ish
	if (conn->required_sec_level != conn->sec_level) {
 801f542:	7aa9      	ldrb	r1, [r5, #10]
 801f544:	7a6a      	ldrb	r2, [r5, #9]
 801f546:	4291      	cmp	r1, r2
 801f548:	d000      	beq.n	801f54c <smp_reset+0x4c>
		conn->required_sec_level = conn->sec_level;
 801f54a:	72aa      	strb	r2, [r5, #10]
	    conn->role == BT_HCI_ROLE_MASTER) {
 801f54c:	78ea      	ldrb	r2, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
 801f54e:	b162      	cbz	r2, 801f56a <smp_reset+0x6a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 801f550:	f3bf 8f5b 	dmb	ish
 801f554:	e853 2f00 	ldrex	r2, [r3]
 801f558:	f042 0202 	orr.w	r2, r2, #2
 801f55c:	e843 2100 	strex	r1, r2, [r3]
 801f560:	2900      	cmp	r1, #0
 801f562:	d1f7      	bne.n	801f554 <smp_reset+0x54>
 801f564:	f3bf 8f5b 	dmb	ish
}
 801f568:	bd38      	pop	{r3, r4, r5, pc}
 801f56a:	f3bf 8f5b 	dmb	ish
 801f56e:	e853 2f00 	ldrex	r2, [r3]
 801f572:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f576:	e843 2100 	strex	r1, r2, [r3]
 801f57a:	2900      	cmp	r1, #0
 801f57c:	d1f7      	bne.n	801f56e <smp_reset+0x6e>
 801f57e:	f3bf 8f5b 	dmb	ish
		return;
 801f582:	e7f1      	b.n	801f568 <smp_reset+0x68>

0801f584 <bt_smp_aes_cmac>:
{
 801f584:	b570      	push	{r4, r5, r6, lr}
 801f586:	b0c2      	sub	sp, #264	; 0x108
 801f588:	460c      	mov	r4, r1
 801f58a:	4615      	mov	r5, r2
 801f58c:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
 801f58e:	aa16      	add	r2, sp, #88	; 0x58
 801f590:	4601      	mov	r1, r0
 801f592:	4668      	mov	r0, sp
 801f594:	f7fc fca4 	bl	801bee0 <tc_cmac_setup>
 801f598:	b168      	cbz	r0, 801f5b6 <bt_smp_aes_cmac+0x32>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
 801f59a:	462a      	mov	r2, r5
 801f59c:	4621      	mov	r1, r4
 801f59e:	4668      	mov	r0, sp
 801f5a0:	f7fc fccb 	bl	801bf3a <tc_cmac_update>
 801f5a4:	b150      	cbz	r0, 801f5bc <bt_smp_aes_cmac+0x38>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
 801f5a6:	4669      	mov	r1, sp
 801f5a8:	4630      	mov	r0, r6
 801f5aa:	f7fc fd34 	bl	801c016 <tc_cmac_final>
 801f5ae:	b140      	cbz	r0, 801f5c2 <bt_smp_aes_cmac+0x3e>
	return 0;
 801f5b0:	2000      	movs	r0, #0
}
 801f5b2:	b042      	add	sp, #264	; 0x108
 801f5b4:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
 801f5b6:	f06f 0004 	mvn.w	r0, #4
 801f5ba:	e7fa      	b.n	801f5b2 <bt_smp_aes_cmac+0x2e>
		return -EIO;
 801f5bc:	f06f 0004 	mvn.w	r0, #4
 801f5c0:	e7f7      	b.n	801f5b2 <bt_smp_aes_cmac+0x2e>
		return -EIO;
 801f5c2:	f06f 0004 	mvn.w	r0, #4
 801f5c6:	e7f4      	b.n	801f5b2 <bt_smp_aes_cmac+0x2e>

0801f5c8 <smp_f4>:
{
 801f5c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f5ca:	b097      	sub	sp, #92	; 0x5c
 801f5cc:	9d1c      	ldr	r5, [sp, #112]	; 0x70
	psrc += length - 1;
 801f5ce:	301f      	adds	r0, #31
	uint8_t *pdst = (uint8_t *)dst;
 801f5d0:	ac01      	add	r4, sp, #4
	for (; length > 0; length--) {
 801f5d2:	2620      	movs	r6, #32
 801f5d4:	b12e      	cbz	r6, 801f5e2 <smp_f4+0x1a>
		*pdst++ = *psrc--;
 801f5d6:	f810 7901 	ldrb.w	r7, [r0], #-1
 801f5da:	f804 7b01 	strb.w	r7, [r4], #1
	for (; length > 0; length--) {
 801f5de:	3e01      	subs	r6, #1
 801f5e0:	e7f8      	b.n	801f5d4 <smp_f4+0xc>
	psrc += length - 1;
 801f5e2:	311f      	adds	r1, #31
	uint8_t *pdst = (uint8_t *)dst;
 801f5e4:	a809      	add	r0, sp, #36	; 0x24
	for (; length > 0; length--) {
 801f5e6:	2420      	movs	r4, #32
 801f5e8:	b12c      	cbz	r4, 801f5f6 <smp_f4+0x2e>
		*pdst++ = *psrc--;
 801f5ea:	f811 6901 	ldrb.w	r6, [r1], #-1
 801f5ee:	f800 6b01 	strb.w	r6, [r0], #1
	for (; length > 0; length--) {
 801f5f2:	3c01      	subs	r4, #1
 801f5f4:	e7f8      	b.n	801f5e8 <smp_f4+0x20>
	m[64] = z;
 801f5f6:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	psrc += length - 1;
 801f5fa:	320f      	adds	r2, #15
	uint8_t *pdst = (uint8_t *)dst;
 801f5fc:	ab12      	add	r3, sp, #72	; 0x48
	for (; length > 0; length--) {
 801f5fe:	2410      	movs	r4, #16
 801f600:	e004      	b.n	801f60c <smp_f4+0x44>
		*pdst++ = *psrc--;
 801f602:	f812 1901 	ldrb.w	r1, [r2], #-1
 801f606:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
 801f60a:	3c01      	subs	r4, #1
 801f60c:	2c00      	cmp	r4, #0
 801f60e:	d1f8      	bne.n	801f602 <smp_f4+0x3a>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
 801f610:	462b      	mov	r3, r5
 801f612:	2241      	movs	r2, #65	; 0x41
 801f614:	a901      	add	r1, sp, #4
 801f616:	a812      	add	r0, sp, #72	; 0x48
 801f618:	f7ff ffb4 	bl	801f584 <bt_smp_aes_cmac>
	if (err) {
 801f61c:	b948      	cbnz	r0, 801f632 <smp_f4+0x6a>
	for (i = 0; i < (length/2); i++) {
 801f61e:	2c07      	cmp	r4, #7
 801f620:	d807      	bhi.n	801f632 <smp_f4+0x6a>
		uint8_t tmp = ((uint8_t *)buf)[i];
 801f622:	5d2a      	ldrb	r2, [r5, r4]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
 801f624:	f1c4 030f 	rsb	r3, r4, #15
 801f628:	5ce9      	ldrb	r1, [r5, r3]
 801f62a:	5529      	strb	r1, [r5, r4]
		((uint8_t *)buf)[length - 1 - i] = tmp;
 801f62c:	54ea      	strb	r2, [r5, r3]
	for (i = 0; i < (length/2); i++) {
 801f62e:	3401      	adds	r4, #1
 801f630:	e7f5      	b.n	801f61e <smp_f4+0x56>
}
 801f632:	b017      	add	sp, #92	; 0x5c
 801f634:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801f636 <smp_f6>:
{
 801f636:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f638:	b097      	sub	sp, #92	; 0x5c
 801f63a:	4606      	mov	r6, r0
 801f63c:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 801f63e:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
	psrc += length - 1;
 801f640:	310f      	adds	r1, #15
	uint8_t *pdst = (uint8_t *)dst;
 801f642:	a801      	add	r0, sp, #4
	for (; length > 0; length--) {
 801f644:	2410      	movs	r4, #16
 801f646:	b12c      	cbz	r4, 801f654 <smp_f6+0x1e>
		*pdst++ = *psrc--;
 801f648:	f811 e901 	ldrb.w	lr, [r1], #-1
 801f64c:	f800 eb01 	strb.w	lr, [r0], #1
	for (; length > 0; length--) {
 801f650:	3c01      	subs	r4, #1
 801f652:	e7f8      	b.n	801f646 <smp_f6+0x10>
	psrc += length - 1;
 801f654:	320f      	adds	r2, #15
	uint8_t *pdst = (uint8_t *)dst;
 801f656:	a905      	add	r1, sp, #20
	for (; length > 0; length--) {
 801f658:	2010      	movs	r0, #16
 801f65a:	b128      	cbz	r0, 801f668 <smp_f6+0x32>
		*pdst++ = *psrc--;
 801f65c:	f812 c901 	ldrb.w	ip, [r2], #-1
 801f660:	f801 cb01 	strb.w	ip, [r1], #1
	for (; length > 0; length--) {
 801f664:	3801      	subs	r0, #1
 801f666:	e7f8      	b.n	801f65a <smp_f6+0x24>
	psrc += length - 1;
 801f668:	330f      	adds	r3, #15
	uint8_t *pdst = (uint8_t *)dst;
 801f66a:	aa09      	add	r2, sp, #36	; 0x24
	for (; length > 0; length--) {
 801f66c:	2110      	movs	r1, #16
 801f66e:	e004      	b.n	801f67a <smp_f6+0x44>
		*pdst++ = *psrc--;
 801f670:	f813 0901 	ldrb.w	r0, [r3], #-1
 801f674:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
 801f678:	3901      	subs	r1, #1
 801f67a:	2900      	cmp	r1, #0
 801f67c:	d1f8      	bne.n	801f670 <smp_f6+0x3a>
	psrc += length - 1;
 801f67e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f680:	3302      	adds	r3, #2
	uint8_t *pdst = (uint8_t *)dst;
 801f682:	aa0d      	add	r2, sp, #52	; 0x34
	for (; length > 0; length--) {
 801f684:	2103      	movs	r1, #3
 801f686:	e004      	b.n	801f692 <smp_f6+0x5c>
		*pdst++ = *psrc--;
 801f688:	f813 0901 	ldrb.w	r0, [r3], #-1
 801f68c:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
 801f690:	3901      	subs	r1, #1
 801f692:	2900      	cmp	r1, #0
 801f694:	d1f8      	bne.n	801f688 <smp_f6+0x52>
	m[51] = a1->type;
 801f696:	4639      	mov	r1, r7
 801f698:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f69c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
	memcpy(m + 52, a1->a.val, 6);
 801f6a0:	2206      	movs	r2, #6
 801f6a2:	a80e      	add	r0, sp, #56	; 0x38
 801f6a4:	f7fd f903 	bl	801c8ae <memcpy>
	psrc += length - 1;
 801f6a8:	1dbb      	adds	r3, r7, #6
	uint8_t *pdst = (uint8_t *)dst;
 801f6aa:	aa0e      	add	r2, sp, #56	; 0x38
	for (; length > 0; length--) {
 801f6ac:	2106      	movs	r1, #6
 801f6ae:	b129      	cbz	r1, 801f6bc <smp_f6+0x86>
		*pdst++ = *psrc--;
 801f6b0:	f813 0901 	ldrb.w	r0, [r3], #-1
 801f6b4:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
 801f6b8:	3901      	subs	r1, #1
 801f6ba:	e7f8      	b.n	801f6ae <smp_f6+0x78>
	m[58] = a2->type;
 801f6bc:	991e      	ldr	r1, [sp, #120]	; 0x78
 801f6be:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f6c2:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
	memcpy(m + 59, a2->a.val, 6);
 801f6c6:	2206      	movs	r2, #6
 801f6c8:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
 801f6cc:	f7fd f8ef 	bl	801c8ae <memcpy>
	psrc += length - 1;
 801f6d0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f6d2:	3306      	adds	r3, #6
	uint8_t *pdst = (uint8_t *)dst;
 801f6d4:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
	for (; length > 0; length--) {
 801f6d8:	2106      	movs	r1, #6
 801f6da:	e004      	b.n	801f6e6 <smp_f6+0xb0>
		*pdst++ = *psrc--;
 801f6dc:	f813 0901 	ldrb.w	r0, [r3], #-1
 801f6e0:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
 801f6e4:	3901      	subs	r1, #1
 801f6e6:	2900      	cmp	r1, #0
 801f6e8:	d1f8      	bne.n	801f6dc <smp_f6+0xa6>
	psrc += length - 1;
 801f6ea:	f106 000f 	add.w	r0, r6, #15
	uint8_t *pdst = (uint8_t *)dst;
 801f6ee:	ab12      	add	r3, sp, #72	; 0x48
	for (; length > 0; length--) {
 801f6f0:	2410      	movs	r4, #16
 801f6f2:	e004      	b.n	801f6fe <smp_f6+0xc8>
		*pdst++ = *psrc--;
 801f6f4:	f810 2901 	ldrb.w	r2, [r0], #-1
 801f6f8:	f803 2b01 	strb.w	r2, [r3], #1
	for (; length > 0; length--) {
 801f6fc:	3c01      	subs	r4, #1
 801f6fe:	2c00      	cmp	r4, #0
 801f700:	d1f8      	bne.n	801f6f4 <smp_f6+0xbe>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
 801f702:	462b      	mov	r3, r5
 801f704:	2241      	movs	r2, #65	; 0x41
 801f706:	a901      	add	r1, sp, #4
 801f708:	a812      	add	r0, sp, #72	; 0x48
 801f70a:	f7ff ff3b 	bl	801f584 <bt_smp_aes_cmac>
	if (err) {
 801f70e:	b138      	cbz	r0, 801f720 <smp_f6+0xea>
 801f710:	e008      	b.n	801f724 <smp_f6+0xee>
		uint8_t tmp = ((uint8_t *)buf)[i];
 801f712:	5d2a      	ldrb	r2, [r5, r4]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
 801f714:	f1c4 030f 	rsb	r3, r4, #15
 801f718:	5ce9      	ldrb	r1, [r5, r3]
 801f71a:	5529      	strb	r1, [r5, r4]
		((uint8_t *)buf)[length - 1 - i] = tmp;
 801f71c:	54ea      	strb	r2, [r5, r3]
	for (i = 0; i < (length/2); i++) {
 801f71e:	3401      	adds	r4, #1
 801f720:	2c07      	cmp	r4, #7
 801f722:	d9f6      	bls.n	801f712 <smp_f6+0xdc>
}
 801f724:	b017      	add	sp, #92	; 0x5c
 801f726:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801f728 <sc_smp_send_dhkey_check>:
{
 801f728:	b570      	push	{r4, r5, r6, lr}
 801f72a:	4604      	mov	r4, r0
 801f72c:	460d      	mov	r5, r1
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
 801f72e:	2210      	movs	r2, #16
 801f730:	210d      	movs	r1, #13
 801f732:	f7f5 f9fd 	bl	8014b30 <smp_create_pdu>
	if (!buf) {
 801f736:	b180      	cbz	r0, 801f75a <sc_smp_send_dhkey_check+0x32>
 801f738:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
 801f73a:	2110      	movs	r1, #16
 801f73c:	3008      	adds	r0, #8
 801f73e:	f000 fe9d 	bl	802047c <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
 801f742:	2210      	movs	r2, #16
 801f744:	4629      	mov	r1, r5
 801f746:	f7fd f8b2 	bl	801c8ae <memcpy>
	smp_send(smp, buf, NULL, NULL);
 801f74a:	2300      	movs	r3, #0
 801f74c:	461a      	mov	r2, r3
 801f74e:	4631      	mov	r1, r6
 801f750:	4620      	mov	r0, r4
 801f752:	f7f5 fb49 	bl	8014de8 <smp_send>
	return 0;
 801f756:	2000      	movs	r0, #0
}
 801f758:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
 801f75a:	2008      	movs	r0, #8
 801f75c:	e7fc      	b.n	801f758 <sc_smp_send_dhkey_check+0x30>

0801f75e <compute_and_send_master_dhcheck>:
{
 801f75e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f760:	b08d      	sub	sp, #52	; 0x34
 801f762:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
 801f764:	2210      	movs	r2, #16
 801f766:	2100      	movs	r1, #0
 801f768:	eb0d 0002 	add.w	r0, sp, r2
 801f76c:	f7fd f8c4 	bl	801c8f8 <memset>
	switch (smp->method) {
 801f770:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 801f774:	2b05      	cmp	r3, #5
 801f776:	d850      	bhi.n	801f81a <compute_and_send_master_dhcheck+0xbc>
 801f778:	e8df f003 	tbb	[pc, r3]
 801f77c:	09030309 	.word	0x09030309
 801f780:	454f      	.short	0x454f
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
 801f782:	2204      	movs	r2, #4
 801f784:	f504 71c8 	add.w	r1, r4, #400	; 0x190
 801f788:	a804      	add	r0, sp, #16
 801f78a:	f7fd f890 	bl	801c8ae <memcpy>
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
 801f78e:	f104 07df 	add.w	r7, r4, #223	; 0xdf
 801f792:	4625      	mov	r5, r4
		   &smp->chan.chan.conn->le.init_addr,
 801f794:	f855 3bef 	ldr.w	r3, [r5], #239
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
 801f798:	f103 0296 	add.w	r2, r3, #150	; 0x96
 801f79c:	f204 167f 	addw	r6, r4, #383	; 0x17f
		   smp->tk)) {
 801f7a0:	f104 01ff 	add.w	r1, r4, #255	; 0xff
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
 801f7a4:	9102      	str	r1, [sp, #8]
 801f7a6:	9601      	str	r6, [sp, #4]
 801f7a8:	9200      	str	r2, [sp, #0]
 801f7aa:	338f      	adds	r3, #143	; 0x8f
 801f7ac:	462a      	mov	r2, r5
 801f7ae:	4639      	mov	r1, r7
 801f7b0:	f204 104f 	addw	r0, r4, #335	; 0x14f
 801f7b4:	f7f5 fa20 	bl	8014bf8 <smp_f5>
 801f7b8:	bb88      	cbnz	r0, 801f81e <compute_and_send_master_dhcheck+0xc0>
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
 801f7ba:	4622      	mov	r2, r4
		   &smp->chan.chan.conn->le.init_addr,
 801f7bc:	f852 3bc2 	ldr.w	r3, [r2], #194
 801f7c0:	f103 018f 	add.w	r1, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr, e)) {
 801f7c4:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
 801f7c6:	a808      	add	r0, sp, #32
 801f7c8:	9003      	str	r0, [sp, #12]
 801f7ca:	9302      	str	r3, [sp, #8]
 801f7cc:	9101      	str	r1, [sp, #4]
 801f7ce:	9200      	str	r2, [sp, #0]
 801f7d0:	ab04      	add	r3, sp, #16
 801f7d2:	462a      	mov	r2, r5
 801f7d4:	4639      	mov	r1, r7
 801f7d6:	4630      	mov	r0, r6
 801f7d8:	f7ff ff2d 	bl	801f636 <smp_f6>
 801f7dc:	bb08      	cbnz	r0, 801f822 <compute_and_send_master_dhcheck+0xc4>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
 801f7de:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
 801f7e2:	f3bf 8f5b 	dmb	ish
 801f7e6:	e853 2f00 	ldrex	r2, [r3]
 801f7ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801f7ee:	e843 2100 	strex	r1, r2, [r3]
 801f7f2:	2900      	cmp	r1, #0
 801f7f4:	d1f7      	bne.n	801f7e6 <compute_and_send_master_dhcheck+0x88>
 801f7f6:	f3bf 8f5b 	dmb	ish
	return sc_smp_send_dhkey_check(smp, e);
 801f7fa:	a908      	add	r1, sp, #32
 801f7fc:	4620      	mov	r0, r4
 801f7fe:	f7ff ff93 	bl	801f728 <sc_smp_send_dhkey_check>
}
 801f802:	b00d      	add	sp, #52	; 0x34
 801f804:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (smp->oobd_remote) {
 801f806:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
 801f80a:	2900      	cmp	r1, #0
 801f80c:	d0bf      	beq.n	801f78e <compute_and_send_master_dhcheck+0x30>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
 801f80e:	2210      	movs	r2, #16
 801f810:	eb0d 0002 	add.w	r0, sp, r2
 801f814:	f7fd f84b 	bl	801c8ae <memcpy>
 801f818:	e7b9      	b.n	801f78e <compute_and_send_master_dhcheck+0x30>
	switch (smp->method) {
 801f81a:	2008      	movs	r0, #8
 801f81c:	e7f1      	b.n	801f802 <compute_and_send_master_dhcheck+0xa4>
		return BT_SMP_ERR_UNSPECIFIED;
 801f81e:	2008      	movs	r0, #8
 801f820:	e7ef      	b.n	801f802 <compute_and_send_master_dhcheck+0xa4>
		return BT_SMP_ERR_UNSPECIFIED;
 801f822:	2008      	movs	r0, #8
 801f824:	e7ed      	b.n	801f802 <compute_and_send_master_dhcheck+0xa4>

0801f826 <compute_and_check_and_send_slave_dhcheck>:
{
 801f826:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f828:	b091      	sub	sp, #68	; 0x44
 801f82a:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
 801f82c:	2210      	movs	r2, #16
 801f82e:	2100      	movs	r1, #0
 801f830:	eb0d 0002 	add.w	r0, sp, r2
 801f834:	f7fd f860 	bl	801c8f8 <memset>
	switch (smp->method) {
 801f838:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 801f83c:	2b05      	cmp	r3, #5
 801f83e:	d87e      	bhi.n	801f93e <compute_and_check_and_send_slave_dhcheck+0x118>
 801f840:	e8df f003 	tbb	[pc, r3]
 801f844:	09030309 	.word	0x09030309
 801f848:	637d      	.short	0x637d
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
 801f84a:	2204      	movs	r2, #4
 801f84c:	f504 71c8 	add.w	r1, r4, #400	; 0x190
 801f850:	a804      	add	r0, sp, #16
 801f852:	f7fd f82c 	bl	801c8ae <memcpy>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
 801f856:	f104 07ef 	add.w	r7, r4, #239	; 0xef
 801f85a:	4625      	mov	r5, r4
		   &smp->chan.chan.conn->le.init_addr,
 801f85c:	f855 3bdf 	ldr.w	r3, [r5], #223
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
 801f860:	f103 0296 	add.w	r2, r3, #150	; 0x96
 801f864:	f204 167f 	addw	r6, r4, #383	; 0x17f
		   smp->tk)) {
 801f868:	f104 01ff 	add.w	r1, r4, #255	; 0xff
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
 801f86c:	9102      	str	r1, [sp, #8]
 801f86e:	9601      	str	r6, [sp, #4]
 801f870:	9200      	str	r2, [sp, #0]
 801f872:	338f      	adds	r3, #143	; 0x8f
 801f874:	462a      	mov	r2, r5
 801f876:	4639      	mov	r1, r7
 801f878:	f204 104f 	addw	r0, r4, #335	; 0x14f
 801f87c:	f7f5 f9bc 	bl	8014bf8 <smp_f5>
 801f880:	2800      	cmp	r0, #0
 801f882:	d15e      	bne.n	801f942 <compute_and_check_and_send_slave_dhcheck+0x11c>
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
 801f884:	4622      	mov	r2, r4
		   &smp->chan.chan.conn->le.resp_addr,
 801f886:	f852 3bc9 	ldr.w	r3, [r2], #201
 801f88a:	f103 0196 	add.w	r1, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr, e)) {
 801f88e:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
 801f890:	a808      	add	r0, sp, #32
 801f892:	9003      	str	r0, [sp, #12]
 801f894:	9302      	str	r3, [sp, #8]
 801f896:	9101      	str	r1, [sp, #4]
 801f898:	9200      	str	r2, [sp, #0]
 801f89a:	ab04      	add	r3, sp, #16
 801f89c:	463a      	mov	r2, r7
 801f89e:	4629      	mov	r1, r5
 801f8a0:	4630      	mov	r0, r6
 801f8a2:	f7ff fec8 	bl	801f636 <smp_f6>
 801f8a6:	2800      	cmp	r0, #0
 801f8a8:	d14e      	bne.n	801f948 <compute_and_check_and_send_slave_dhcheck+0x122>
	if (smp->method == LE_SC_OOB) {
 801f8aa:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 801f8ae:	2b05      	cmp	r3, #5
 801f8b0:	d035      	beq.n	801f91e <compute_and_check_and_send_slave_dhcheck+0xf8>
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
 801f8b2:	4622      	mov	r2, r4
		   &smp->chan.chan.conn->le.init_addr,
 801f8b4:	f852 3bc2 	ldr.w	r3, [r2], #194
 801f8b8:	f103 018f 	add.w	r1, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr, re)) {
 801f8bc:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
 801f8be:	a80c      	add	r0, sp, #48	; 0x30
 801f8c0:	9003      	str	r0, [sp, #12]
 801f8c2:	9302      	str	r3, [sp, #8]
 801f8c4:	9101      	str	r1, [sp, #4]
 801f8c6:	9200      	str	r2, [sp, #0]
 801f8c8:	ab04      	add	r3, sp, #16
 801f8ca:	462a      	mov	r2, r5
 801f8cc:	4639      	mov	r1, r7
 801f8ce:	4630      	mov	r0, r6
 801f8d0:	f7ff feb1 	bl	801f636 <smp_f6>
 801f8d4:	bbd0      	cbnz	r0, 801f94c <compute_and_check_and_send_slave_dhcheck+0x126>
	if (memcmp(smp->e, re, 16)) {
 801f8d6:	2210      	movs	r2, #16
 801f8d8:	a90c      	add	r1, sp, #48	; 0x30
 801f8da:	f204 106f 	addw	r0, r4, #367	; 0x16f
 801f8de:	f7fc ffce 	bl	801c87e <memcmp>
 801f8e2:	bba8      	cbnz	r0, 801f950 <compute_and_check_and_send_slave_dhcheck+0x12a>
	err = sc_smp_send_dhkey_check(smp, e);
 801f8e4:	a908      	add	r1, sp, #32
 801f8e6:	4620      	mov	r0, r4
 801f8e8:	f7ff ff1e 	bl	801f728 <sc_smp_send_dhkey_check>
	if (err) {
 801f8ec:	bb50      	cbnz	r0, 801f944 <compute_and_check_and_send_slave_dhcheck+0x11e>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
 801f8ee:	34bc      	adds	r4, #188	; 0xbc
 801f8f0:	f3bf 8f5b 	dmb	ish
 801f8f4:	e854 3f00 	ldrex	r3, [r4]
 801f8f8:	f043 0302 	orr.w	r3, r3, #2
 801f8fc:	e844 3200 	strex	r2, r3, [r4]
 801f900:	2a00      	cmp	r2, #0
 801f902:	d1f7      	bne.n	801f8f4 <compute_and_check_and_send_slave_dhcheck+0xce>
 801f904:	f3bf 8f5b 	dmb	ish
	return 0;
 801f908:	e01c      	b.n	801f944 <compute_and_check_and_send_slave_dhcheck+0x11e>
		if (smp->oobd_remote) {
 801f90a:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
 801f90e:	2900      	cmp	r1, #0
 801f910:	d0a1      	beq.n	801f856 <compute_and_check_and_send_slave_dhcheck+0x30>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
 801f912:	2210      	movs	r2, #16
 801f914:	eb0d 0002 	add.w	r0, sp, r2
 801f918:	f7fc ffc9 	bl	801c8ae <memcpy>
 801f91c:	e79b      	b.n	801f856 <compute_and_check_and_send_slave_dhcheck+0x30>
		if (smp->oobd_local) {
 801f91e:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
 801f922:	b129      	cbz	r1, 801f930 <compute_and_check_and_send_slave_dhcheck+0x10a>
			memcpy(r, smp->oobd_local->r, sizeof(r));
 801f924:	2210      	movs	r2, #16
 801f926:	eb0d 0002 	add.w	r0, sp, r2
 801f92a:	f7fc ffc0 	bl	801c8ae <memcpy>
 801f92e:	e7c0      	b.n	801f8b2 <compute_and_check_and_send_slave_dhcheck+0x8c>
			memset(r, 0, sizeof(r));
 801f930:	2210      	movs	r2, #16
 801f932:	2100      	movs	r1, #0
 801f934:	eb0d 0002 	add.w	r0, sp, r2
 801f938:	f7fc ffde 	bl	801c8f8 <memset>
 801f93c:	e7b9      	b.n	801f8b2 <compute_and_check_and_send_slave_dhcheck+0x8c>
	switch (smp->method) {
 801f93e:	2008      	movs	r0, #8
 801f940:	e000      	b.n	801f944 <compute_and_check_and_send_slave_dhcheck+0x11e>
		return BT_SMP_ERR_UNSPECIFIED;
 801f942:	2008      	movs	r0, #8
}
 801f944:	b011      	add	sp, #68	; 0x44
 801f946:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
 801f948:	2008      	movs	r0, #8
 801f94a:	e7fb      	b.n	801f944 <compute_and_check_and_send_slave_dhcheck+0x11e>
		return BT_SMP_ERR_UNSPECIFIED;
 801f94c:	2008      	movs	r0, #8
 801f94e:	e7f9      	b.n	801f944 <compute_and_check_and_send_slave_dhcheck+0x11e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
 801f950:	200b      	movs	r0, #11
 801f952:	e7f7      	b.n	801f944 <compute_and_check_and_send_slave_dhcheck+0x11e>

0801f954 <smp_send_pairing_random>:
{
 801f954:	b538      	push	{r3, r4, r5, lr}
 801f956:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
 801f958:	2210      	movs	r2, #16
 801f95a:	2104      	movs	r1, #4
 801f95c:	f7f5 f8e8 	bl	8014b30 <smp_create_pdu>
	if (!rsp_buf) {
 801f960:	b188      	cbz	r0, 801f986 <smp_send_pairing_random+0x32>
 801f962:	4605      	mov	r5, r0
	req = net_buf_add(rsp_buf, sizeof(*req));
 801f964:	2110      	movs	r1, #16
 801f966:	3008      	adds	r0, #8
 801f968:	f000 fd88 	bl	802047c <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
 801f96c:	2210      	movs	r2, #16
 801f96e:	f104 01df 	add.w	r1, r4, #223	; 0xdf
 801f972:	f7fc ff9c 	bl	801c8ae <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
 801f976:	2300      	movs	r3, #0
 801f978:	461a      	mov	r2, r3
 801f97a:	4629      	mov	r1, r5
 801f97c:	4620      	mov	r0, r4
 801f97e:	f7f5 fa33 	bl	8014de8 <smp_send>
	return 0;
 801f982:	2000      	movs	r0, #0
}
 801f984:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
 801f986:	2008      	movs	r0, #8
 801f988:	e7fc      	b.n	801f984 <smp_send_pairing_random+0x30>

0801f98a <smp_pairing_confirm>:
{
 801f98a:	b538      	push	{r3, r4, r5, lr}
 801f98c:	4604      	mov	r4, r0
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
 801f98e:	6889      	ldr	r1, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
 801f990:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 801f994:	f3bf 8f5b 	dmb	ish
 801f998:	e855 3f00 	ldrex	r3, [r5]
 801f99c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801f9a0:	e845 3200 	strex	r2, r3, [r5]
 801f9a4:	2a00      	cmp	r2, #0
 801f9a6:	d1f7      	bne.n	801f998 <smp_pairing_confirm+0xe>
 801f9a8:	f3bf 8f5b 	dmb	ish
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
 801f9ac:	2210      	movs	r2, #16
 801f9ae:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
 801f9b2:	f7fc ff7c 	bl	801c8ae <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
 801f9b6:	6823      	ldr	r3, [r4, #0]
 801f9b8:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
 801f9ba:	b1bb      	cbz	r3, 801f9ec <smp_pairing_confirm+0x62>
	switch (smp->method) {
 801f9bc:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 801f9c0:	2b01      	cmp	r3, #1
 801f9c2:	d025      	beq.n	801fa10 <smp_pairing_confirm+0x86>
 801f9c4:	2b02      	cmp	r3, #2
 801f9c6:	d14c      	bne.n	801fa62 <smp_pairing_confirm+0xd8>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
 801f9c8:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 801f9cc:	f3bf 8f5b 	dmb	ish
 801f9d0:	e853 2f00 	ldrex	r2, [r3]
 801f9d4:	f042 0210 	orr.w	r2, r2, #16
 801f9d8:	e843 2100 	strex	r1, r2, [r3]
 801f9dc:	2900      	cmp	r1, #0
 801f9de:	d1f7      	bne.n	801f9d0 <smp_pairing_confirm+0x46>
 801f9e0:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_confirm(smp);
 801f9e4:	4620      	mov	r0, r4
 801f9e6:	f7f5 fa17 	bl	8014e18 <smp_send_pairing_confirm>
}
 801f9ea:	bd38      	pop	{r3, r4, r5, pc}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
 801f9ec:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
 801f9f0:	f3bf 8f5b 	dmb	ish
 801f9f4:	e853 2f00 	ldrex	r2, [r3]
 801f9f8:	f042 0210 	orr.w	r2, r2, #16
 801f9fc:	e843 2100 	strex	r1, r2, [r3]
 801fa00:	2900      	cmp	r1, #0
 801fa02:	d1f7      	bne.n	801f9f4 <smp_pairing_confirm+0x6a>
 801fa04:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_random(smp);
 801fa08:	4620      	mov	r0, r4
 801fa0a:	f7ff ffa3 	bl	801f954 <smp_send_pairing_random>
 801fa0e:	e7ec      	b.n	801f9ea <smp_pairing_confirm+0x60>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 801fa10:	f3bf 8f5b 	dmb	ish
 801fa14:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 801fa18:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
 801fa1c:	f413 7f00 	tst.w	r3, #512	; 0x200
 801fa20:	d111      	bne.n	801fa46 <smp_pairing_confirm+0xbc>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
 801fa22:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 801fa26:	f3bf 8f5b 	dmb	ish
 801fa2a:	e853 2f00 	ldrex	r2, [r3]
 801fa2e:	f042 0210 	orr.w	r2, r2, #16
 801fa32:	e843 2100 	strex	r1, r2, [r3]
 801fa36:	2900      	cmp	r1, #0
 801fa38:	d1f7      	bne.n	801fa2a <smp_pairing_confirm+0xa0>
 801fa3a:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_confirm(smp);
 801fa3e:	4620      	mov	r0, r4
 801fa40:	f7f5 f9ea 	bl	8014e18 <smp_send_pairing_confirm>
 801fa44:	e7d1      	b.n	801f9ea <smp_pairing_confirm+0x60>
 801fa46:	f3bf 8f5b 	dmb	ish
 801fa4a:	e855 3f00 	ldrex	r3, [r5]
 801fa4e:	f043 0301 	orr.w	r3, r3, #1
 801fa52:	e845 3200 	strex	r2, r3, [r5]
 801fa56:	2a00      	cmp	r2, #0
 801fa58:	d1f7      	bne.n	801fa4a <smp_pairing_confirm+0xc0>
 801fa5a:	f3bf 8f5b 	dmb	ish
			return 0;
 801fa5e:	2000      	movs	r0, #0
 801fa60:	e7c3      	b.n	801f9ea <smp_pairing_confirm+0x60>
	switch (smp->method) {
 801fa62:	2008      	movs	r0, #8
 801fa64:	e7c1      	b.n	801f9ea <smp_pairing_confirm+0x60>

0801fa66 <send_pairing_rsp>:
{
 801fa66:	b538      	push	{r3, r4, r5, lr}
 801fa68:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
 801fa6a:	2206      	movs	r2, #6
 801fa6c:	2102      	movs	r1, #2
 801fa6e:	f7f5 f85f 	bl	8014b30 <smp_create_pdu>
	if (!rsp_buf) {
 801fa72:	b188      	cbz	r0, 801fa98 <send_pairing_rsp+0x32>
 801fa74:	4605      	mov	r5, r0
	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
 801fa76:	2106      	movs	r1, #6
 801fa78:	3008      	adds	r0, #8
 801fa7a:	f000 fcff 	bl	802047c <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
 801fa7e:	2206      	movs	r2, #6
 801fa80:	f104 01c9 	add.w	r1, r4, #201	; 0xc9
 801fa84:	f7fc ff13 	bl	801c8ae <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
 801fa88:	2300      	movs	r3, #0
 801fa8a:	461a      	mov	r2, r3
 801fa8c:	4629      	mov	r1, r5
 801fa8e:	4620      	mov	r0, r4
 801fa90:	f7f5 f9aa 	bl	8014de8 <smp_send>
	return 0;
 801fa94:	2000      	movs	r0, #0
}
 801fa96:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
 801fa98:	2008      	movs	r0, #8
 801fa9a:	e7fc      	b.n	801fa96 <send_pairing_rsp+0x30>

0801fa9c <smp_error>:
{
 801fa9c:	b570      	push	{r4, r5, r6, lr}
 801fa9e:	b082      	sub	sp, #8
 801faa0:	4605      	mov	r5, r0
 801faa2:	460c      	mov	r4, r1
	smp_pairing_complete(smp, reason);
 801faa4:	f7f5 fa2e 	bl	8014f04 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
 801faa8:	2201      	movs	r2, #1
 801faaa:	2105      	movs	r1, #5
 801faac:	4628      	mov	r0, r5
 801faae:	f7f5 f83f 	bl	8014b30 <smp_create_pdu>
	if (!buf) {
 801fab2:	b180      	cbz	r0, 801fad6 <smp_error+0x3a>
 801fab4:	4606      	mov	r6, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
 801fab6:	2101      	movs	r1, #1
 801fab8:	3008      	adds	r0, #8
 801faba:	f000 fcdf 	bl	802047c <net_buf_simple_add>
	rsp->reason = reason;
 801fabe:	7004      	strb	r4, [r0, #0]
 801fac0:	2400      	movs	r4, #0
 801fac2:	9400      	str	r4, [sp, #0]
 801fac4:	4623      	mov	r3, r4
 801fac6:	4632      	mov	r2, r6
 801fac8:	2106      	movs	r1, #6
 801faca:	6828      	ldr	r0, [r5, #0]
 801facc:	f7fd ff97 	bl	801d9fe <bt_l2cap_send_cb>
	return 0;
 801fad0:	4620      	mov	r0, r4
}
 801fad2:	b002      	add	sp, #8
 801fad4:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
 801fad6:	f06f 0036 	mvn.w	r0, #54	; 0x36
 801fada:	e7fa      	b.n	801fad2 <smp_error+0x36>

0801fadc <bt_smp_disconnected>:
{
 801fadc:	b538      	push	{r3, r4, r5, lr}
 801fade:	4604      	mov	r4, r0
	struct bt_keys *keys = chan->conn->le.keys;
 801fae0:	6803      	ldr	r3, [r0, #0]
 801fae2:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	k_delayed_work_cancel(&smp->work);
 801fae6:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
 801faea:	f002 fc49 	bl	8022380 <k_delayed_work_cancel>
	if (keys) {
 801faee:	b145      	cbz	r5, 801fb02 <bt_smp_disconnected+0x26>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
 801faf0:	89eb      	ldrh	r3, [r5, #14]
 801faf2:	b11b      	cbz	r3, 801fafc <bt_smp_disconnected+0x20>
		    (keys->flags & BT_KEYS_DEBUG))) {
 801faf4:	7b6b      	ldrb	r3, [r5, #13]
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
 801faf6:	f013 0f02 	tst.w	r3, #2
 801fafa:	d002      	beq.n	801fb02 <bt_smp_disconnected+0x26>
			bt_keys_clear(keys);
 801fafc:	4628      	mov	r0, r5
 801fafe:	f7f6 fedd 	bl	80168bc <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
 801fb02:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 801fb06:	2100      	movs	r1, #0
 801fb08:	4620      	mov	r0, r4
 801fb0a:	f7fc fef5 	bl	801c8f8 <memset>
}
 801fb0e:	bd38      	pop	{r3, r4, r5, pc}

0801fb10 <smp_dhkey_check>:
{
 801fb10:	b570      	push	{r4, r5, r6, lr}
 801fb12:	b090      	sub	sp, #64	; 0x40
 801fb14:	4604      	mov	r4, r0
	struct bt_smp_dhkey_check *req = (void *)buf->data;
 801fb16:	688e      	ldr	r6, [r1, #8]
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
 801fb18:	6803      	ldr	r3, [r0, #0]
 801fb1a:	78dd      	ldrb	r5, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
 801fb1c:	b12d      	cbz	r5, 801fb2a <smp_dhkey_check+0x1a>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
 801fb1e:	2d01      	cmp	r5, #1
 801fb20:	d069      	beq.n	801fbf6 <smp_dhkey_check+0xe6>
	return 0;
 801fb22:	2500      	movs	r5, #0
}
 801fb24:	4628      	mov	r0, r5
 801fb26:	b010      	add	sp, #64	; 0x40
 801fb28:	bd70      	pop	{r4, r5, r6, pc}
		(void)memset(r, 0, sizeof(r));
 801fb2a:	2210      	movs	r2, #16
 801fb2c:	2100      	movs	r1, #0
 801fb2e:	a80c      	add	r0, sp, #48	; 0x30
 801fb30:	f7fc fee2 	bl	801c8f8 <memset>
		switch (smp->method) {
 801fb34:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 801fb38:	2b05      	cmp	r3, #5
 801fb3a:	d85a      	bhi.n	801fbf2 <smp_dhkey_check+0xe2>
 801fb3c:	e8df f003 	tbb	[pc, r3]
 801fb40:	09030309 	.word	0x09030309
 801fb44:	2059      	.short	0x2059
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
 801fb46:	2204      	movs	r2, #4
 801fb48:	f504 71c8 	add.w	r1, r4, #400	; 0x190
 801fb4c:	a80c      	add	r0, sp, #48	; 0x30
 801fb4e:	f7fc feae 	bl	801c8ae <memcpy>
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
 801fb52:	4622      	mov	r2, r4
			   &smp->chan.chan.conn->le.resp_addr,
 801fb54:	f852 3bc9 	ldr.w	r3, [r2], #201
 801fb58:	f103 0196 	add.w	r1, r3, #150	; 0x96
			   &smp->chan.chan.conn->le.init_addr, e)) {
 801fb5c:	338f      	adds	r3, #143	; 0x8f
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
 801fb5e:	a808      	add	r0, sp, #32
 801fb60:	9003      	str	r0, [sp, #12]
 801fb62:	9302      	str	r3, [sp, #8]
 801fb64:	9101      	str	r1, [sp, #4]
 801fb66:	9200      	str	r2, [sp, #0]
 801fb68:	ab0c      	add	r3, sp, #48	; 0x30
 801fb6a:	f104 02df 	add.w	r2, r4, #223	; 0xdf
 801fb6e:	f104 01ef 	add.w	r1, r4, #239	; 0xef
 801fb72:	f204 107f 	addw	r0, r4, #383	; 0x17f
 801fb76:	f7ff fd5e 	bl	801f636 <smp_f6>
 801fb7a:	b150      	cbz	r0, 801fb92 <smp_dhkey_check+0x82>
			return BT_SMP_ERR_UNSPECIFIED;
 801fb7c:	2508      	movs	r5, #8
 801fb7e:	e7d1      	b.n	801fb24 <smp_dhkey_check+0x14>
			if (smp->oobd_local) {
 801fb80:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
 801fb84:	2900      	cmp	r1, #0
 801fb86:	d0e4      	beq.n	801fb52 <smp_dhkey_check+0x42>
				memcpy(r, smp->oobd_local->r, sizeof(r));
 801fb88:	2210      	movs	r2, #16
 801fb8a:	a80c      	add	r0, sp, #48	; 0x30
 801fb8c:	f7fc fe8f 	bl	801c8ae <memcpy>
 801fb90:	e7df      	b.n	801fb52 <smp_dhkey_check+0x42>
		if (memcmp(e, req->e, 16)) {
 801fb92:	2210      	movs	r2, #16
 801fb94:	4631      	mov	r1, r6
 801fb96:	a808      	add	r0, sp, #32
 801fb98:	f7fc fe71 	bl	801c87e <memcmp>
 801fb9c:	b108      	cbz	r0, 801fba2 <smp_dhkey_check+0x92>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
 801fb9e:	250b      	movs	r5, #11
 801fba0:	e7c0      	b.n	801fb24 <smp_dhkey_check+0x14>
		enc_size = get_encryption_key_size(smp);
 801fba2:	4620      	mov	r0, r4
 801fba4:	f7ff fc24 	bl	801f3f0 <get_encryption_key_size>
 801fba8:	4606      	mov	r6, r0
		(void)memset(ediv, 0, sizeof(ediv));
 801fbaa:	2202      	movs	r2, #2
 801fbac:	2100      	movs	r1, #0
 801fbae:	a805      	add	r0, sp, #20
 801fbb0:	f7fc fea2 	bl	801c8f8 <memset>
		(void)memset(rand, 0, sizeof(rand));
 801fbb4:	2208      	movs	r2, #8
 801fbb6:	2100      	movs	r1, #0
 801fbb8:	a806      	add	r0, sp, #24
 801fbba:	f7fc fe9d 	bl	801c8f8 <memset>
						smp->tk, enc_size) < 0) {
 801fbbe:	4623      	mov	r3, r4
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, rand, ediv,
 801fbc0:	f853 0bff 	ldr.w	r0, [r3], #255
 801fbc4:	9600      	str	r6, [sp, #0]
 801fbc6:	aa05      	add	r2, sp, #20
 801fbc8:	a906      	add	r1, sp, #24
 801fbca:	f7fd fc89 	bl	801d4e0 <bt_conn_le_start_encryption>
 801fbce:	2800      	cmp	r0, #0
 801fbd0:	da01      	bge.n	801fbd6 <smp_dhkey_check+0xc6>
			return BT_SMP_ERR_UNSPECIFIED;
 801fbd2:	2508      	movs	r5, #8
 801fbd4:	e7a6      	b.n	801fb24 <smp_dhkey_check+0x14>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
 801fbd6:	34bc      	adds	r4, #188	; 0xbc
 801fbd8:	f3bf 8f5b 	dmb	ish
 801fbdc:	e854 3f00 	ldrex	r3, [r4]
 801fbe0:	f043 0302 	orr.w	r3, r3, #2
 801fbe4:	e844 3200 	strex	r2, r3, [r4]
 801fbe8:	2a00      	cmp	r2, #0
 801fbea:	d1f7      	bne.n	801fbdc <smp_dhkey_check+0xcc>
 801fbec:	f3bf 8f5b 	dmb	ish
		return 0;
 801fbf0:	e798      	b.n	801fb24 <smp_dhkey_check+0x14>
		switch (smp->method) {
 801fbf2:	2508      	movs	r5, #8
 801fbf4:	e796      	b.n	801fb24 <smp_dhkey_check+0x14>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
 801fbf6:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 801fbfa:	f3bf 8f5b 	dmb	ish
 801fbfe:	e855 3f00 	ldrex	r3, [r5]
 801fc02:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801fc06:	e845 3200 	strex	r2, r3, [r5]
 801fc0a:	2a00      	cmp	r2, #0
 801fc0c:	d1f7      	bne.n	801fbfe <smp_dhkey_check+0xee>
 801fc0e:	f3bf 8f5b 	dmb	ish
		memcpy(smp->e, req->e, sizeof(smp->e));
 801fc12:	2210      	movs	r2, #16
 801fc14:	4631      	mov	r1, r6
 801fc16:	f204 106f 	addw	r0, r4, #367	; 0x16f
 801fc1a:	f7fc fe48 	bl	801c8ae <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 801fc1e:	f3bf 8f5b 	dmb	ish
 801fc22:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 801fc26:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
 801fc2a:	f013 0f80 	tst.w	r3, #128	; 0x80
 801fc2e:	d116      	bne.n	801fc5e <smp_dhkey_check+0x14e>
 801fc30:	f3bf 8f5b 	dmb	ish
 801fc34:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 801fc38:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
 801fc3c:	f413 7f00 	tst.w	r3, #512	; 0x200
 801fc40:	d01b      	beq.n	801fc7a <smp_dhkey_check+0x16a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 801fc42:	f3bf 8f5b 	dmb	ish
 801fc46:	e855 3f00 	ldrex	r3, [r5]
 801fc4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801fc4e:	e845 3200 	strex	r2, r3, [r5]
 801fc52:	2a00      	cmp	r2, #0
 801fc54:	d1f7      	bne.n	801fc46 <smp_dhkey_check+0x136>
 801fc56:	f3bf 8f5b 	dmb	ish
			return 0;
 801fc5a:	2500      	movs	r5, #0
 801fc5c:	e762      	b.n	801fb24 <smp_dhkey_check+0x14>
 801fc5e:	f3bf 8f5b 	dmb	ish
 801fc62:	e855 3f00 	ldrex	r3, [r5]
 801fc66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801fc6a:	e845 3200 	strex	r2, r3, [r5]
 801fc6e:	2a00      	cmp	r2, #0
 801fc70:	d1f7      	bne.n	801fc62 <smp_dhkey_check+0x152>
 801fc72:	f3bf 8f5b 	dmb	ish
			return 0;
 801fc76:	2500      	movs	r5, #0
 801fc78:	e754      	b.n	801fb24 <smp_dhkey_check+0x14>
		return compute_and_check_and_send_slave_dhcheck(smp);
 801fc7a:	4620      	mov	r0, r4
 801fc7c:	f7ff fdd3 	bl	801f826 <compute_and_check_and_send_slave_dhcheck>
 801fc80:	4605      	mov	r5, r0
 801fc82:	e74f      	b.n	801fb24 <smp_dhkey_check+0x14>

0801fc84 <update_debug_keys_check>:
{
 801fc84:	b510      	push	{r4, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
 801fc86:	6804      	ldr	r4, [r0, #0]
	if (!conn->le.keys) {
 801fc88:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 801fc8c:	b163      	cbz	r3, 801fca8 <update_debug_keys_check+0x24>
	if (!conn->le.keys ||
 801fc8e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 801fc92:	b18b      	cbz	r3, 801fcb8 <update_debug_keys_check+0x34>
	    !(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
 801fc94:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
 801fc96:	f012 0f24 	tst.w	r2, #36	; 0x24
 801fc9a:	d00f      	beq.n	801fcbc <update_debug_keys_check+0x38>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
 801fc9c:	7b5b      	ldrb	r3, [r3, #13]
 801fc9e:	f013 0f02 	tst.w	r3, #2
 801fca2:	d10d      	bne.n	801fcc0 <update_debug_keys_check+0x3c>
	return true;
 801fca4:	2001      	movs	r0, #1
}
 801fca6:	bd10      	pop	{r4, pc}
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
 801fca8:	f104 0188 	add.w	r1, r4, #136	; 0x88
 801fcac:	7a20      	ldrb	r0, [r4, #8]
 801fcae:	f7f6 fcdd 	bl	801666c <bt_keys_get_addr>
 801fcb2:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
 801fcb6:	e7ea      	b.n	801fc8e <update_debug_keys_check+0xa>
		return true;
 801fcb8:	2001      	movs	r0, #1
 801fcba:	e7f4      	b.n	801fca6 <update_debug_keys_check+0x22>
 801fcbc:	2001      	movs	r0, #1
 801fcbe:	e7f2      	b.n	801fca6 <update_debug_keys_check+0x22>
		return false;
 801fcc0:	2000      	movs	r0, #0
 801fcc2:	e7f0      	b.n	801fca6 <update_debug_keys_check+0x22>

0801fcc4 <update_keys_check>:
{
 801fcc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fcc6:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
 801fcc8:	6805      	ldr	r5, [r0, #0]
	if (!conn->le.keys) {
 801fcca:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
 801fcce:	b1f3      	cbz	r3, 801fd0e <update_keys_check+0x4a>
	if (!conn->le.keys ||
 801fcd0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
 801fcd4:	b373      	cbz	r3, 801fd34 <update_keys_check+0x70>
	    !(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
 801fcd6:	89de      	ldrh	r6, [r3, #14]
	if (!conn->le.keys ||
 801fcd8:	f016 0f24 	tst.w	r6, #36	; 0x24
 801fcdc:	d02c      	beq.n	801fd38 <update_keys_check+0x74>
	if (conn->le.keys->enc_size > get_encryption_key_size(smp)) {
 801fcde:	7b1f      	ldrb	r7, [r3, #12]
 801fce0:	4620      	mov	r0, r4
 801fce2:	f7ff fb85 	bl	801f3f0 <get_encryption_key_size>
 801fce6:	4287      	cmp	r7, r0
 801fce8:	d828      	bhi.n	801fd3c <update_keys_check+0x78>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
 801fcea:	f016 0f20 	tst.w	r6, #32
 801fcee:	d116      	bne.n	801fd1e <update_keys_check+0x5a>
	if ((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
 801fcf0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
 801fcf4:	7b5b      	ldrb	r3, [r3, #13]
 801fcf6:	f013 0301 	ands.w	r3, r3, #1
 801fcfa:	d002      	beq.n	801fd02 <update_keys_check+0x3e>
	     smp->method == JUST_WORKS) {
 801fcfc:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
	if ((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
 801fd00:	b1f2      	cbz	r2, 801fd40 <update_keys_check+0x7c>
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
 801fd02:	b9fb      	cbnz	r3, 801fd44 <update_keys_check+0x80>
	     && smp->method == JUST_WORKS)) {
 801fd04:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
 801fd08:	b1f3      	cbz	r3, 801fd48 <update_keys_check+0x84>
	return true;
 801fd0a:	2001      	movs	r0, #1
 801fd0c:	e015      	b.n	801fd3a <update_keys_check+0x76>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
 801fd0e:	f105 0188 	add.w	r1, r5, #136	; 0x88
 801fd12:	7a28      	ldrb	r0, [r5, #8]
 801fd14:	f7f6 fcaa 	bl	801666c <bt_keys_get_addr>
 801fd18:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
 801fd1c:	e7d8      	b.n	801fcd0 <update_keys_check+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 801fd1e:	f3bf 8f5b 	dmb	ish
 801fd22:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 801fd26:	f3bf 8f5b 	dmb	ish
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
 801fd2a:	f013 0f20 	tst.w	r3, #32
 801fd2e:	d1df      	bne.n	801fcf0 <update_keys_check+0x2c>
		return false;
 801fd30:	2000      	movs	r0, #0
 801fd32:	e002      	b.n	801fd3a <update_keys_check+0x76>
		return true;
 801fd34:	2001      	movs	r0, #1
 801fd36:	e000      	b.n	801fd3a <update_keys_check+0x76>
 801fd38:	2001      	movs	r0, #1
}
 801fd3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
 801fd3c:	2000      	movs	r0, #0
 801fd3e:	e7fc      	b.n	801fd3a <update_keys_check+0x76>
		return false;
 801fd40:	2000      	movs	r0, #0
 801fd42:	e7fa      	b.n	801fd3a <update_keys_check+0x76>
	return true;
 801fd44:	2001      	movs	r0, #1
 801fd46:	e7f8      	b.n	801fd3a <update_keys_check+0x76>
		return false;
 801fd48:	2000      	movs	r0, #0
 801fd4a:	e7f6      	b.n	801fd3a <update_keys_check+0x76>

0801fd4c <smp_send_security_req>:
{
 801fd4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fd50:	b083      	sub	sp, #12
 801fd52:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
 801fd54:	f7f4 fecc 	bl	8014af0 <smp_chan_get>
	if (!smp) {
 801fd58:	2800      	cmp	r0, #0
 801fd5a:	d076      	beq.n	801fe4a <smp_send_security_req+0xfe>
 801fd5c:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
 801fd5e:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
 801fd62:	f3bf 8f5b 	dmb	ish
 801fd66:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 801fd6a:	f3bf 8f5b 	dmb	ish
 801fd6e:	f013 0f10 	tst.w	r3, #16
 801fd72:	d16d      	bne.n	801fe50 <smp_send_security_req+0x104>
 801fd74:	f3bf 8f5b 	dmb	ish
 801fd78:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 801fd7c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
 801fd80:	f013 0f08 	tst.w	r3, #8
 801fd84:	d167      	bne.n	801fe56 <smp_send_security_req+0x10a>
 801fd86:	f3bf 8f5b 	dmb	ish
 801fd8a:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 801fd8e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
 801fd92:	f013 0f02 	tst.w	r3, #2
 801fd96:	d161      	bne.n	801fe5c <smp_send_security_req+0x110>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
 801fd98:	4628      	mov	r0, r5
 801fd9a:	f7f4 fe6d 	bl	8014a78 <sec_level_reachable>
 801fd9e:	2800      	cmp	r0, #0
 801fda0:	d03f      	beq.n	801fe22 <smp_send_security_req+0xd6>
	if (!conn->le.keys) {
 801fda2:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
 801fda6:	2b00      	cmp	r3, #0
 801fda8:	d043      	beq.n	801fe32 <smp_send_security_req+0xe6>
	if (smp_init(smp) != 0) {
 801fdaa:	4620      	mov	r0, r4
 801fdac:	f7f5 fc4c 	bl	8015648 <smp_init>
 801fdb0:	4680      	mov	r8, r0
 801fdb2:	2800      	cmp	r0, #0
 801fdb4:	d155      	bne.n	801fe62 <smp_send_security_req+0x116>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
 801fdb6:	2201      	movs	r2, #1
 801fdb8:	210b      	movs	r1, #11
 801fdba:	4620      	mov	r0, r4
 801fdbc:	f7f4 feb8 	bl	8014b30 <smp_create_pdu>
	if (!req_buf) {
 801fdc0:	4681      	mov	r9, r0
 801fdc2:	2800      	cmp	r0, #0
 801fdc4:	d050      	beq.n	801fe68 <smp_send_security_req+0x11c>
	req = net_buf_add(req_buf, sizeof(*req));
 801fdc6:	2101      	movs	r1, #1
 801fdc8:	3008      	adds	r0, #8
 801fdca:	f000 fb57 	bl	802047c <net_buf_simple_add>
 801fdce:	4606      	mov	r6, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
 801fdd0:	2109      	movs	r1, #9
 801fdd2:	4628      	mov	r0, r5
 801fdd4:	f7f4 fe30 	bl	8014a38 <get_auth>
 801fdd8:	7030      	strb	r0, [r6, #0]
 801fdda:	2300      	movs	r3, #0
 801fddc:	9300      	str	r3, [sp, #0]
 801fdde:	464a      	mov	r2, r9
 801fde0:	2106      	movs	r1, #6
 801fde2:	4628      	mov	r0, r5
 801fde4:	f7fd fe0b 	bl	801d9fe <bt_l2cap_send_cb>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 801fde8:	f3bf 8f5b 	dmb	ish
 801fdec:	e857 3f00 	ldrex	r3, [r7]
 801fdf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801fdf4:	e847 3200 	strex	r2, r3, [r7]
 801fdf8:	2a00      	cmp	r2, #0
 801fdfa:	d1f7      	bne.n	801fdec <smp_send_security_req+0xa0>
 801fdfc:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
 801fe00:	34b8      	adds	r4, #184	; 0xb8
 801fe02:	f3bf 8f5b 	dmb	ish
 801fe06:	e854 3f00 	ldrex	r3, [r4]
 801fe0a:	f043 0302 	orr.w	r3, r3, #2
 801fe0e:	e844 3200 	strex	r2, r3, [r4]
 801fe12:	2a00      	cmp	r2, #0
 801fe14:	d1f7      	bne.n	801fe06 <smp_send_security_req+0xba>
 801fe16:	f3bf 8f5b 	dmb	ish
}
 801fe1a:	4640      	mov	r0, r8
 801fe1c:	b003      	add	sp, #12
 801fe1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
 801fe22:	4628      	mov	r0, r5
 801fe24:	f7ff fb20 	bl	801f468 <smp_keys_check>
 801fe28:	2800      	cmp	r0, #0
 801fe2a:	d1ba      	bne.n	801fda2 <smp_send_security_req+0x56>
		return -EINVAL;
 801fe2c:	f06f 0815 	mvn.w	r8, #21
 801fe30:	e7f3      	b.n	801fe1a <smp_send_security_req+0xce>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
 801fe32:	f105 0188 	add.w	r1, r5, #136	; 0x88
 801fe36:	7a28      	ldrb	r0, [r5, #8]
 801fe38:	f7f6 fc18 	bl	801666c <bt_keys_get_addr>
 801fe3c:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
 801fe40:	2800      	cmp	r0, #0
 801fe42:	d1b2      	bne.n	801fdaa <smp_send_security_req+0x5e>
			return -ENOMEM;
 801fe44:	f06f 080b 	mvn.w	r8, #11
 801fe48:	e7e7      	b.n	801fe1a <smp_send_security_req+0xce>
		return -ENOTCONN;
 801fe4a:	f06f 0838 	mvn.w	r8, #56	; 0x38
 801fe4e:	e7e4      	b.n	801fe1a <smp_send_security_req+0xce>
		return -EIO;
 801fe50:	f06f 0804 	mvn.w	r8, #4
 801fe54:	e7e1      	b.n	801fe1a <smp_send_security_req+0xce>
		return -EBUSY;
 801fe56:	f06f 080f 	mvn.w	r8, #15
 801fe5a:	e7de      	b.n	801fe1a <smp_send_security_req+0xce>
		return -EBUSY;
 801fe5c:	f06f 080f 	mvn.w	r8, #15
 801fe60:	e7db      	b.n	801fe1a <smp_send_security_req+0xce>
		return -ENOBUFS;
 801fe62:	f06f 0836 	mvn.w	r8, #54	; 0x36
 801fe66:	e7d8      	b.n	801fe1a <smp_send_security_req+0xce>
		return -ENOBUFS;
 801fe68:	f06f 0836 	mvn.w	r8, #54	; 0x36
 801fe6c:	e7d5      	b.n	801fe1a <smp_send_security_req+0xce>

0801fe6e <bt_smp_encrypt_change>:
{
 801fe6e:	b510      	push	{r4, lr}
 801fe70:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->conn;
 801fe72:	4603      	mov	r3, r0
 801fe74:	f853 2bbc 	ldr.w	r2, [r3], #188
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 801fe78:	f3bf 8f5b 	dmb	ish
 801fe7c:	e853 0f00 	ldrex	r0, [r3]
 801fe80:	f020 0002 	bic.w	r0, r0, #2
 801fe84:	e843 0c00 	strex	ip, r0, [r3]
 801fe88:	f1bc 0f00 	cmp.w	ip, #0
 801fe8c:	d1f6      	bne.n	801fe7c <bt_smp_encrypt_change+0xe>
 801fe8e:	f3bf 8f5b 	dmb	ish
	if (hci_status) {
 801fe92:	b909      	cbnz	r1, 801fe98 <bt_smp_encrypt_change+0x2a>
	if (!conn->encrypt) {
 801fe94:	7ad1      	ldrb	r1, [r2, #11]
 801fe96:	b901      	cbnz	r1, 801fe9a <bt_smp_encrypt_change+0x2c>
}
 801fe98:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 801fe9a:	f3bf 8f5b 	dmb	ish
 801fe9e:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 801fea2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
 801fea6:	f011 0f08 	tst.w	r1, #8
 801feaa:	d045      	beq.n	801ff38 <bt_smp_encrypt_change+0xca>
 801feac:	f3bf 8f5b 	dmb	ish
 801feb0:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 801feb4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
 801feb8:	f011 0f20 	tst.w	r1, #32
 801febc:	d021      	beq.n	801ff02 <bt_smp_encrypt_change+0x94>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
 801febe:	f894 11a0 	ldrb.w	r1, [r4, #416]	; 0x1a0
 801fec2:	f011 0f08 	tst.w	r1, #8
 801fec6:	d010      	beq.n	801feea <bt_smp_encrypt_change+0x7c>
		    (smp->remote_dist & BT_SMP_DIST_LINK_KEY)) {
 801fec8:	f894 11a1 	ldrb.w	r1, [r4, #417]	; 0x1a1
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
 801fecc:	f011 0f08 	tst.w	r1, #8
 801fed0:	d00b      	beq.n	801feea <bt_smp_encrypt_change+0x7c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 801fed2:	f3bf 8f5b 	dmb	ish
 801fed6:	e853 1f00 	ldrex	r1, [r3]
 801feda:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 801fede:	e843 1000 	strex	r0, r1, [r3]
 801fee2:	2800      	cmp	r0, #0
 801fee4:	d1f7      	bne.n	801fed6 <bt_smp_encrypt_change+0x68>
 801fee6:	f3bf 8f5b 	dmb	ish
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
 801feea:	f894 11a0 	ldrb.w	r1, [r4, #416]	; 0x1a0
 801feee:	f021 0108 	bic.w	r1, r1, #8
 801fef2:	f884 11a0 	strb.w	r1, [r4, #416]	; 0x1a0
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
 801fef6:	f894 11a1 	ldrb.w	r1, [r4, #417]	; 0x1a1
 801fefa:	f021 0108 	bic.w	r1, r1, #8
 801fefe:	f884 11a1 	strb.w	r1, [r4, #417]	; 0x1a1
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
 801ff02:	f894 11a1 	ldrb.w	r1, [r4, #417]	; 0x1a1
 801ff06:	f011 0f01 	tst.w	r1, #1
 801ff0a:	d119      	bne.n	801ff40 <bt_smp_encrypt_change+0xd2>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
 801ff0c:	f011 0f02 	tst.w	r1, #2
 801ff10:	d145      	bne.n	801ff9e <bt_smp_encrypt_change+0x130>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
 801ff12:	f011 0f04 	tst.w	r1, #4
 801ff16:	d022      	beq.n	801ff5e <bt_smp_encrypt_change+0xf0>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
 801ff18:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
 801ff1c:	f3bf 8f5b 	dmb	ish
 801ff20:	e851 0f00 	ldrex	r0, [r1]
 801ff24:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 801ff28:	e841 0c00 	strex	ip, r0, [r1]
 801ff2c:	f1bc 0f00 	cmp.w	ip, #0
 801ff30:	d1f6      	bne.n	801ff20 <bt_smp_encrypt_change+0xb2>
 801ff32:	f3bf 8f5b 	dmb	ish
}
 801ff36:	e012      	b.n	801ff5e <bt_smp_encrypt_change+0xf0>
		smp_reset(smp);
 801ff38:	4620      	mov	r0, r4
 801ff3a:	f7ff fae1 	bl	801f500 <smp_reset>
		return;
 801ff3e:	e7ab      	b.n	801fe98 <bt_smp_encrypt_change+0x2a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
 801ff40:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 801ff44:	f3bf 8f5b 	dmb	ish
 801ff48:	e851 0f00 	ldrex	r0, [r1]
 801ff4c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 801ff50:	e841 0c00 	strex	ip, r0, [r1]
 801ff54:	f1bc 0f00 	cmp.w	ip, #0
 801ff58:	d1f6      	bne.n	801ff48 <bt_smp_encrypt_change+0xda>
 801ff5a:	f3bf 8f5b 	dmb	ish
 801ff5e:	f3bf 8f5b 	dmb	ish
 801ff62:	e853 1f00 	ldrex	r1, [r3]
 801ff66:	f041 0104 	orr.w	r1, r1, #4
 801ff6a:	e843 1000 	strex	r0, r1, [r3]
 801ff6e:	2800      	cmp	r0, #0
 801ff70:	d1f7      	bne.n	801ff62 <bt_smp_encrypt_change+0xf4>
 801ff72:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
 801ff76:	78d3      	ldrb	r3, [r2, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
 801ff78:	b91b      	cbnz	r3, 801ff82 <bt_smp_encrypt_change+0x114>
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
 801ff7a:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
 801ff7e:	2b00      	cmp	r3, #0
 801ff80:	d18a      	bne.n	801fe98 <bt_smp_encrypt_change+0x2a>
	if (bt_smp_distribute_keys(smp)) {
 801ff82:	4620      	mov	r0, r4
 801ff84:	f7f5 fe5c 	bl	8015c40 <bt_smp_distribute_keys>
 801ff88:	2800      	cmp	r0, #0
 801ff8a:	d185      	bne.n	801fe98 <bt_smp_encrypt_change+0x2a>
	if (!smp->local_dist && !smp->remote_dist) {
 801ff8c:	f8b4 31a0 	ldrh.w	r3, [r4, #416]	; 0x1a0
 801ff90:	2b00      	cmp	r3, #0
 801ff92:	d181      	bne.n	801fe98 <bt_smp_encrypt_change+0x2a>
		smp_pairing_complete(smp, 0);
 801ff94:	2100      	movs	r1, #0
 801ff96:	4620      	mov	r0, r4
 801ff98:	f7f4 ffb4 	bl	8014f04 <smp_pairing_complete>
 801ff9c:	e77c      	b.n	801fe98 <bt_smp_encrypt_change+0x2a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
 801ff9e:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
 801ffa2:	f3bf 8f5b 	dmb	ish
 801ffa6:	e851 0f00 	ldrex	r0, [r1]
 801ffaa:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 801ffae:	e841 0c00 	strex	ip, r0, [r1]
 801ffb2:	f1bc 0f00 	cmp.w	ip, #0
 801ffb6:	d1f6      	bne.n	801ffa6 <bt_smp_encrypt_change+0x138>
 801ffb8:	f3bf 8f5b 	dmb	ish
}
 801ffbc:	e7cf      	b.n	801ff5e <bt_smp_encrypt_change+0xf0>

0801ffbe <bt_smp_request_ltk>:
{
 801ffbe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ffc2:	4604      	mov	r4, r0
 801ffc4:	4616      	mov	r6, r2
 801ffc6:	461f      	mov	r7, r3
 801ffc8:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	smp = smp_chan_get(conn);
 801ffcc:	f7f4 fd90 	bl	8014af0 <smp_chan_get>
	if (!smp) {
 801ffd0:	2800      	cmp	r0, #0
 801ffd2:	f000 8087 	beq.w	80200e4 <bt_smp_request_ltk+0x126>
 801ffd6:	4605      	mov	r5, r0
	if (ediv == 0U && rand == 0U &&
 801ffd8:	f1b8 0f00 	cmp.w	r8, #0
 801ffdc:	d102      	bne.n	801ffe4 <bt_smp_request_ltk+0x26>
 801ffde:	ea56 0307 	orrs.w	r3, r6, r7
 801ffe2:	d01f      	beq.n	8020024 <bt_smp_request_ltk+0x66>
	if (!conn->le.keys) {
 801ffe4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 801ffe8:	2b00      	cmp	r3, #0
 801ffea:	d050      	beq.n	802008e <bt_smp_request_ltk+0xd0>
	if (ediv == 0U && rand == 0U &&
 801ffec:	f1b8 0f00 	cmp.w	r8, #0
 801fff0:	d109      	bne.n	8020006 <bt_smp_request_ltk+0x48>
 801fff2:	ea56 0307 	orrs.w	r3, r6, r7
 801fff6:	d106      	bne.n	8020006 <bt_smp_request_ltk+0x48>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
 801fff8:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
 801fffc:	b119      	cbz	r1, 8020006 <bt_smp_request_ltk+0x48>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
 801fffe:	89cb      	ldrh	r3, [r1, #14]
 8020000:	f013 0f20 	tst.w	r3, #32
 8020004:	d156      	bne.n	80200b4 <bt_smp_request_ltk+0xf6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8020006:	f3bf 8f5b 	dmb	ish
 802000a:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
 802000e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
 8020012:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8020016:	d15f      	bne.n	80200d8 <bt_smp_request_ltk+0x11a>
	smp_reset(smp);
 8020018:	4628      	mov	r0, r5
 802001a:	f7ff fa71 	bl	801f500 <smp_reset>
	return false;
 802001e:	2000      	movs	r0, #0
}
 8020020:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
 8020024:	f100 09bc 	add.w	r9, r0, #188	; 0xbc
 8020028:	f3bf 8f5b 	dmb	ish
 802002c:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8020030:	f3bf 8f5b 	dmb	ish
	if (ediv == 0U && rand == 0U &&
 8020034:	f013 0f08 	tst.w	r3, #8
 8020038:	d0d4      	beq.n	801ffe4 <bt_smp_request_ltk+0x26>
 802003a:	f3bf 8f5b 	dmb	ish
 802003e:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8020042:	f3bf 8f5b 	dmb	ish
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
 8020046:	f013 0f02 	tst.w	r3, #2
 802004a:	d0cb      	beq.n	801ffe4 <bt_smp_request_ltk+0x26>
		enc_size = get_encryption_key_size(smp);
 802004c:	f7ff f9d0 	bl	801f3f0 <get_encryption_key_size>
 8020050:	4604      	mov	r4, r0
		memcpy(ltk, smp->tk, enc_size);
 8020052:	4602      	mov	r2, r0
 8020054:	f105 01ff 	add.w	r1, r5, #255	; 0xff
 8020058:	9809      	ldr	r0, [sp, #36]	; 0x24
 802005a:	f7fc fc28 	bl	801c8ae <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
 802005e:	2c0f      	cmp	r4, #15
 8020060:	d90d      	bls.n	802007e <bt_smp_request_ltk+0xc0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8020062:	f3bf 8f5b 	dmb	ish
 8020066:	e859 3f00 	ldrex	r3, [r9]
 802006a:	f043 0302 	orr.w	r3, r3, #2
 802006e:	e849 3200 	strex	r2, r3, [r9]
 8020072:	2a00      	cmp	r2, #0
 8020074:	d1f7      	bne.n	8020066 <bt_smp_request_ltk+0xa8>
 8020076:	f3bf 8f5b 	dmb	ish
		return true;
 802007a:	2001      	movs	r0, #1
 802007c:	e7d0      	b.n	8020020 <bt_smp_request_ltk+0x62>
			(void)memset(ltk + enc_size, 0,
 802007e:	f1c4 0210 	rsb	r2, r4, #16
 8020082:	2100      	movs	r1, #0
 8020084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020086:	1918      	adds	r0, r3, r4
 8020088:	f7fc fc36 	bl	801c8f8 <memset>
 802008c:	e7e9      	b.n	8020062 <bt_smp_request_ltk+0xa4>
					     &conn->le.dst);
 802008e:	f104 0988 	add.w	r9, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
 8020092:	464a      	mov	r2, r9
 8020094:	7a21      	ldrb	r1, [r4, #8]
 8020096:	2020      	movs	r0, #32
 8020098:	f7f6 fb6e 	bl	8016778 <bt_keys_find>
 802009c:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
 80200a0:	2800      	cmp	r0, #0
 80200a2:	d1a3      	bne.n	801ffec <bt_smp_request_ltk+0x2e>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
 80200a4:	464a      	mov	r2, r9
 80200a6:	7a21      	ldrb	r1, [r4, #8]
 80200a8:	2001      	movs	r0, #1
 80200aa:	f7f6 fb65 	bl	8016778 <bt_keys_find>
 80200ae:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
 80200b2:	e79b      	b.n	801ffec <bt_smp_request_ltk+0x2e>
		enc_size = conn->le.keys->enc_size;
 80200b4:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
 80200b6:	4622      	mov	r2, r4
 80200b8:	311a      	adds	r1, #26
 80200ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80200bc:	f7fc fbf7 	bl	801c8ae <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
 80200c0:	2c0f      	cmp	r4, #15
 80200c2:	d901      	bls.n	80200c8 <bt_smp_request_ltk+0x10a>
		return true;
 80200c4:	2001      	movs	r0, #1
 80200c6:	e7ab      	b.n	8020020 <bt_smp_request_ltk+0x62>
			(void)memset(ltk + enc_size, 0,
 80200c8:	f1c4 0210 	rsb	r2, r4, #16
 80200cc:	2100      	movs	r1, #0
 80200ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80200d0:	1918      	adds	r0, r3, r4
 80200d2:	f7fc fc11 	bl	801c8f8 <memset>
 80200d6:	e7f5      	b.n	80200c4 <bt_smp_request_ltk+0x106>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
 80200d8:	2202      	movs	r2, #2
 80200da:	2106      	movs	r1, #6
 80200dc:	4620      	mov	r0, r4
 80200de:	f7ef fffd 	bl	80100dc <bt_conn_security_changed>
 80200e2:	e799      	b.n	8020018 <bt_smp_request_ltk+0x5a>
		return false;
 80200e4:	2000      	movs	r0, #0
 80200e6:	e79b      	b.n	8020020 <bt_smp_request_ltk+0x62>

080200e8 <bt_smp_sign>:
}
 80200e8:	f06f 0022 	mvn.w	r0, #34	; 0x22
 80200ec:	4770      	bx	lr

080200ee <bt_smp_start_security>:
{
 80200ee:	b570      	push	{r4, r5, r6, lr}
 80200f0:	b082      	sub	sp, #8
 80200f2:	4604      	mov	r4, r0
	switch (conn->role) {
 80200f4:	78c3      	ldrb	r3, [r0, #3]
 80200f6:	b123      	cbz	r3, 8020102 <bt_smp_start_security+0x14>
 80200f8:	2b01      	cmp	r3, #1
 80200fa:	d04b      	beq.n	8020194 <bt_smp_start_security+0xa6>
 80200fc:	f06f 0015 	mvn.w	r0, #21
 8020100:	e042      	b.n	8020188 <bt_smp_start_security+0x9a>
		smp = smp_chan_get(conn);
 8020102:	f7f4 fcf5 	bl	8014af0 <smp_chan_get>
		if (!smp) {
 8020106:	4605      	mov	r5, r0
 8020108:	2800      	cmp	r0, #0
 802010a:	d046      	beq.n	802019a <bt_smp_start_security+0xac>
		if (!smp_keys_check(conn)) {
 802010c:	4620      	mov	r0, r4
 802010e:	f7ff f9ab 	bl	801f468 <smp_keys_check>
 8020112:	b3d8      	cbz	r0, 802018c <bt_smp_start_security+0x9e>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
 8020114:	f105 06bc 	add.w	r6, r5, #188	; 0xbc
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8020118:	f3bf 8f5b 	dmb	ish
 802011c:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
 8020120:	f3bf 8f5b 	dmb	ish
 8020124:	f013 0f08 	tst.w	r3, #8
 8020128:	d13a      	bne.n	80201a0 <bt_smp_start_security+0xb2>
 802012a:	f3bf 8f5b 	dmb	ish
 802012e:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
 8020132:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
 8020136:	f013 0f02 	tst.w	r3, #2
 802013a:	d134      	bne.n	80201a6 <bt_smp_start_security+0xb8>
						  conn->le.keys->ltk.rand,
 802013c:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
						  conn->le.keys->enc_size);
 8020140:	7b0b      	ldrb	r3, [r1, #12]
		err = bt_conn_le_start_encryption(conn,
 8020142:	9300      	str	r3, [sp, #0]
 8020144:	f101 031a 	add.w	r3, r1, #26
 8020148:	f101 0218 	add.w	r2, r1, #24
 802014c:	3110      	adds	r1, #16
 802014e:	4620      	mov	r0, r4
 8020150:	f7fd f9c6 	bl	801d4e0 <bt_conn_le_start_encryption>
		if (err) {
 8020154:	b9c0      	cbnz	r0, 8020188 <bt_smp_start_security+0x9a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
 8020156:	35b8      	adds	r5, #184	; 0xb8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8020158:	f3bf 8f5b 	dmb	ish
 802015c:	e855 3f00 	ldrex	r3, [r5]
 8020160:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8020164:	e845 3200 	strex	r2, r3, [r5]
 8020168:	2a00      	cmp	r2, #0
 802016a:	d1f7      	bne.n	802015c <bt_smp_start_security+0x6e>
 802016c:	f3bf 8f5b 	dmb	ish
 8020170:	f3bf 8f5b 	dmb	ish
 8020174:	e856 3f00 	ldrex	r3, [r6]
 8020178:	f043 0302 	orr.w	r3, r3, #2
 802017c:	e846 3200 	strex	r2, r3, [r6]
 8020180:	2a00      	cmp	r2, #0
 8020182:	d1f7      	bne.n	8020174 <bt_smp_start_security+0x86>
 8020184:	f3bf 8f5b 	dmb	ish
}
 8020188:	b002      	add	sp, #8
 802018a:	bd70      	pop	{r4, r5, r6, pc}
			return smp_send_pairing_req(conn);
 802018c:	4620      	mov	r0, r4
 802018e:	f7f5 fa81 	bl	8015694 <smp_send_pairing_req>
 8020192:	e7f9      	b.n	8020188 <bt_smp_start_security+0x9a>
		return smp_send_security_req(conn);
 8020194:	f7ff fdda 	bl	801fd4c <smp_send_security_req>
 8020198:	e7f6      	b.n	8020188 <bt_smp_start_security+0x9a>
			return -ENOTCONN;
 802019a:	f06f 0038 	mvn.w	r0, #56	; 0x38
 802019e:	e7f3      	b.n	8020188 <bt_smp_start_security+0x9a>
			return -EBUSY;
 80201a0:	f06f 000f 	mvn.w	r0, #15
 80201a4:	e7f0      	b.n	8020188 <bt_smp_start_security+0x9a>
			return -EBUSY;
 80201a6:	f06f 000f 	mvn.w	r0, #15
 80201aa:	e7ed      	b.n	8020188 <bt_smp_start_security+0x9a>

080201ac <id_add>:
{
 80201ac:	b508      	push	{r3, lr}
	bt_id_add(keys);
 80201ae:	f7ed fe79 	bl	800dea4 <bt_id_add>
}
 80201b2:	bd08      	pop	{r3, pc}

080201b4 <bt_keys_add_type>:
	keys->keys |= type;
 80201b4:	89c3      	ldrh	r3, [r0, #14]
 80201b6:	4319      	orrs	r1, r3
 80201b8:	81c1      	strh	r1, [r0, #14]
}
 80201ba:	4770      	bx	lr

080201bc <bt_keys_get_type>:
{
 80201bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80201be:	4606      	mov	r6, r0
 80201c0:	460c      	mov	r4, r1
 80201c2:	4615      	mov	r5, r2
	keys = bt_keys_find(type, id, addr);
 80201c4:	f7f6 fad8 	bl	8016778 <bt_keys_find>
	if (keys) {
 80201c8:	4607      	mov	r7, r0
 80201ca:	b108      	cbz	r0, 80201d0 <bt_keys_get_type+0x14>
}
 80201cc:	4638      	mov	r0, r7
 80201ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	keys = bt_keys_get_addr(id, addr);
 80201d0:	4629      	mov	r1, r5
 80201d2:	4620      	mov	r0, r4
 80201d4:	f7f6 fa4a 	bl	801666c <bt_keys_get_addr>
	if (!keys) {
 80201d8:	4607      	mov	r7, r0
 80201da:	2800      	cmp	r0, #0
 80201dc:	d0f6      	beq.n	80201cc <bt_keys_get_type+0x10>
	bt_keys_add_type(keys, type);
 80201de:	4631      	mov	r1, r6
 80201e0:	f7ff ffe8 	bl	80201b4 <bt_keys_add_type>
	return keys;
 80201e4:	e7f2      	b.n	80201cc <bt_keys_get_type+0x10>

080201e6 <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, uint8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
 80201e6:	4770      	bx	lr

080201e8 <data_alloc>:
};

#endif /* CONFIG_HEAP_MEM_POOL_SIZE > 0 */

static uint8_t *data_alloc(struct net_buf *buf, size_t *size, k_timeout_t timeout)
{
 80201e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80201ec:	4604      	mov	r4, r0
 80201ee:	460d      	mov	r5, r1
 80201f0:	4617      	mov	r7, r2
 80201f2:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 80201f4:	7980      	ldrb	r0, [r0, #6]
 80201f6:	f7f6 fcb5 	bl	8016b64 <net_buf_pool_get>

	return pool->alloc->cb->alloc(buf, size, timeout);
 80201fa:	6a03      	ldr	r3, [r0, #32]
 80201fc:	681b      	ldr	r3, [r3, #0]
 80201fe:	f8d3 8000 	ldr.w	r8, [r3]
 8020202:	463a      	mov	r2, r7
 8020204:	4633      	mov	r3, r6
 8020206:	4629      	mov	r1, r5
 8020208:	4620      	mov	r0, r4
 802020a:	47c0      	blx	r8
}
 802020c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08020210 <data_unref>:

	return pool->alloc->cb->ref(buf, data);
}

static void data_unref(struct net_buf *buf, uint8_t *data)
{
 8020210:	b538      	push	{r3, r4, r5, lr}
 8020212:	4604      	mov	r4, r0
 8020214:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 8020216:	7980      	ldrb	r0, [r0, #6]
 8020218:	f7f6 fca4 	bl	8016b64 <net_buf_pool_get>

	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
 802021c:	7963      	ldrb	r3, [r4, #5]
 802021e:	f013 0f02 	tst.w	r3, #2
 8020222:	d105      	bne.n	8020230 <data_unref+0x20>
		return;
	}

	pool->alloc->cb->unref(buf, data);
 8020224:	6a03      	ldr	r3, [r0, #32]
 8020226:	681b      	ldr	r3, [r3, #0]
 8020228:	689b      	ldr	r3, [r3, #8]
 802022a:	4629      	mov	r1, r5
 802022c:	4620      	mov	r0, r4
 802022e:	4798      	blx	r3
}
 8020230:	bd38      	pop	{r3, r4, r5, pc}

08020232 <fixed_data_alloc>:
{
 8020232:	b570      	push	{r4, r5, r6, lr}
 8020234:	4604      	mov	r4, r0
 8020236:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 8020238:	7980      	ldrb	r0, [r0, #6]
 802023a:	f7f6 fc93 	bl	8016b64 <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
 802023e:	6a03      	ldr	r3, [r0, #32]
 8020240:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
 8020242:	682a      	ldr	r2, [r5, #0]
 8020244:	6819      	ldr	r1, [r3, #0]
 8020246:	428a      	cmp	r2, r1
 8020248:	bf28      	it	cs
 802024a:	460a      	movcs	r2, r1
 802024c:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
 802024e:	685d      	ldr	r5, [r3, #4]
 8020250:	681e      	ldr	r6, [r3, #0]
 8020252:	4620      	mov	r0, r4
 8020254:	f7f6 fc8e 	bl	8016b74 <net_buf_id>
}
 8020258:	fb00 5006 	mla	r0, r0, r6, r5
 802025c:	bd70      	pop	{r4, r5, r6, pc}

0802025e <net_buf_reset>:
	buf->len  = 0U;
 802025e:	2300      	movs	r3, #0
 8020260:	8183      	strh	r3, [r0, #12]
	buf->data = buf->__buf;
 8020262:	6903      	ldr	r3, [r0, #16]
 8020264:	6083      	str	r3, [r0, #8]
}
 8020266:	4770      	bx	lr

08020268 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
 8020268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802026c:	b083      	sub	sp, #12
 802026e:	4605      	mov	r5, r0
 8020270:	9101      	str	r1, [sp, #4]
 8020272:	4616      	mov	r6, r2
 8020274:	461f      	mov	r7, r3
	uint64_t end = z_timeout_end_calc(timeout);
 8020276:	4610      	mov	r0, r2
 8020278:	4619      	mov	r1, r3
 802027a:	f002 f913 	bl	80224a4 <z_timeout_end_calc>
 802027e:	4682      	mov	sl, r0
 8020280:	9100      	str	r1, [sp, #0]
 8020282:	f04f 0310 	mov.w	r3, #16
 8020286:	f3ef 8b11 	mrs	fp, BASEPRI
 802028a:	f383 8811 	msr	BASEPRI, r3
 802028e:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
 8020292:	8b6b      	ldrh	r3, [r5, #26]
 8020294:	2b00      	cmp	r3, #0
 8020296:	d03f      	beq.n	8020318 <net_buf_alloc_len+0xb0>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
 8020298:	8b2a      	ldrh	r2, [r5, #24]
 802029a:	4293      	cmp	r3, r2
 802029c:	d32f      	bcc.n	80202fe <net_buf_alloc_len+0x96>
				irq_unlock(key);
				goto success;
			}
		}

		uninit_count = pool->uninit_count--;
 802029e:	8b6a      	ldrh	r2, [r5, #26]
 80202a0:	1e53      	subs	r3, r2, #1
 80202a2:	836b      	strh	r3, [r5, #26]
	__asm__ volatile(
 80202a4:	f38b 8811 	msr	BASEPRI, fp
 80202a8:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
 80202ac:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80202ae:	8b2b      	ldrh	r3, [r5, #24]
 80202b0:	1a9b      	subs	r3, r3, r2
 80202b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80202b6:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
	buf->pool_id = pool_id(pool);
 80202ba:	4628      	mov	r0, r5
 80202bc:	f7f6 fc46 	bl	8016b4c <pool_id>
 80202c0:	71a0      	strb	r0, [r4, #6]
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
 80202c2:	9b01      	ldr	r3, [sp, #4]
 80202c4:	2b00      	cmp	r3, #0
 80202c6:	d046      	beq.n	8020356 <net_buf_alloc_len+0xee>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 80202c8:	ea56 0307 	orrs.w	r3, r6, r7
 80202cc:	d005      	beq.n	80202da <net_buf_alloc_len+0x72>
 80202ce:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80202d2:	bf08      	it	eq
 80202d4:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 80202d8:	d12b      	bne.n	8020332 <net_buf_alloc_len+0xca>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
 80202da:	4632      	mov	r2, r6
 80202dc:	463b      	mov	r3, r7
 80202de:	a901      	add	r1, sp, #4
 80202e0:	4620      	mov	r0, r4
 80202e2:	f7ff ff81 	bl	80201e8 <data_alloc>
 80202e6:	4605      	mov	r5, r0
 80202e8:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
 80202ea:	2800      	cmp	r0, #0
 80202ec:	d135      	bne.n	802035a <net_buf_alloc_len+0xf2>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 80202ee:	79a0      	ldrb	r0, [r4, #6]
 80202f0:	f7f6 fc38 	bl	8016b64 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
 80202f4:	4621      	mov	r1, r4
 80202f6:	f001 fde4 	bl	8021ec2 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
 80202fa:	462c      	mov	r4, r5
}
 80202fc:	e037      	b.n	802036e <net_buf_alloc_len+0x106>
	return z_impl_k_queue_get(queue, timeout);
 80202fe:	2200      	movs	r2, #0
 8020300:	2300      	movs	r3, #0
 8020302:	4628      	mov	r0, r5
 8020304:	f7f8 f89e 	bl	8018444 <z_impl_k_queue_get>
			if (buf) {
 8020308:	4604      	mov	r4, r0
 802030a:	2800      	cmp	r0, #0
 802030c:	d0c7      	beq.n	802029e <net_buf_alloc_len+0x36>
 802030e:	f38b 8811 	msr	BASEPRI, fp
 8020312:	f3bf 8f6f 	isb	sy
				goto success;
 8020316:	e7d4      	b.n	80202c2 <net_buf_alloc_len+0x5a>
 8020318:	f38b 8811 	msr	BASEPRI, fp
 802031c:	f3bf 8f6f 	isb	sy
 8020320:	4632      	mov	r2, r6
 8020322:	463b      	mov	r3, r7
 8020324:	4628      	mov	r0, r5
 8020326:	f7f8 f88d 	bl	8018444 <z_impl_k_queue_get>
	if (!buf) {
 802032a:	4604      	mov	r4, r0
 802032c:	2800      	cmp	r0, #0
 802032e:	d1c8      	bne.n	80202c2 <net_buf_alloc_len+0x5a>
 8020330:	e01d      	b.n	802036e <net_buf_alloc_len+0x106>
			int64_t remaining = end - z_tick_get();
 8020332:	f7f8 ff2f 	bl	8019194 <z_tick_get>
 8020336:	ebba 0800 	subs.w	r8, sl, r0
 802033a:	9b00      	ldr	r3, [sp, #0]
 802033c:	eb63 0901 	sbc.w	r9, r3, r1
			if (remaining <= 0) {
 8020340:	f1b8 0f01 	cmp.w	r8, #1
 8020344:	f179 0300 	sbcs.w	r3, r9, #0
 8020348:	db02      	blt.n	8020350 <net_buf_alloc_len+0xe8>
				timeout = Z_TIMEOUT_TICKS(remaining);
 802034a:	4646      	mov	r6, r8
 802034c:	464f      	mov	r7, r9
 802034e:	e7c4      	b.n	80202da <net_buf_alloc_len+0x72>
				timeout = K_NO_WAIT;
 8020350:	2600      	movs	r6, #0
 8020352:	2700      	movs	r7, #0
 8020354:	e7c1      	b.n	80202da <net_buf_alloc_len+0x72>
		}

		NET_BUF_ASSERT(req_size <= size);
	} else {
		buf->__buf = NULL;
 8020356:	2300      	movs	r3, #0
 8020358:	6123      	str	r3, [r4, #16]
	}

	buf->ref   = 1U;
 802035a:	2301      	movs	r3, #1
 802035c:	7123      	strb	r3, [r4, #4]
	buf->flags = 0U;
 802035e:	2300      	movs	r3, #0
 8020360:	7163      	strb	r3, [r4, #5]
	buf->frags = NULL;
 8020362:	6023      	str	r3, [r4, #0]
	buf->size  = size;
 8020364:	9b01      	ldr	r3, [sp, #4]
 8020366:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
 8020368:	4620      	mov	r0, r4
 802036a:	f7ff ff78 	bl	802025e <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	pool->avail_count--;
	__ASSERT_NO_MSG(pool->avail_count >= 0);
#endif
	return buf;
}
 802036e:	4620      	mov	r0, r4
 8020370:	b003      	add	sp, #12
 8020372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020376 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool,
				    k_timeout_t timeout)
{
 8020376:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
 8020378:	6a01      	ldr	r1, [r0, #32]
 802037a:	6849      	ldr	r1, [r1, #4]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
 802037c:	6809      	ldr	r1, [r1, #0]
 802037e:	f7ff ff73 	bl	8020268 <net_buf_alloc_len>
}
 8020382:	bd08      	pop	{r3, pc}

08020384 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
 8020384:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
 8020386:	4605      	mov	r5, r0
 8020388:	f7f8 f85c 	bl	8018444 <z_impl_k_queue_get>
	if (!buf) {
 802038c:	4606      	mov	r6, r0
 802038e:	b190      	cbz	r0, 80203b6 <net_buf_get+0x32>
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
 8020390:	4604      	mov	r4, r0
 8020392:	e00a      	b.n	80203aa <net_buf_get+0x26>
 8020394:	2200      	movs	r2, #0
 8020396:	2300      	movs	r3, #0
 8020398:	4628      	mov	r0, r5
 802039a:	f7f8 f853 	bl	8018444 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
 802039e:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
 80203a0:	7963      	ldrb	r3, [r4, #5]
 80203a2:	f023 0301 	bic.w	r3, r3, #1
 80203a6:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
 80203a8:	4604      	mov	r4, r0
 80203aa:	7963      	ldrb	r3, [r4, #5]
 80203ac:	f013 0f01 	tst.w	r3, #1
 80203b0:	d1f0      	bne.n	8020394 <net_buf_get+0x10>
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
 80203b2:	2300      	movs	r3, #0
 80203b4:	6023      	str	r3, [r4, #0]

	return buf;
}
 80203b6:	4630      	mov	r0, r6
 80203b8:	bd70      	pop	{r4, r5, r6, pc}

080203ba <net_buf_simple_init_with_data>:

void net_buf_simple_init_with_data(struct net_buf_simple *buf,
				   void *data, size_t size)
{
	buf->__buf = data;
 80203ba:	6081      	str	r1, [r0, #8]
	buf->data  = data;
 80203bc:	6001      	str	r1, [r0, #0]
	buf->size  = size;
 80203be:	b292      	uxth	r2, r2
 80203c0:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
 80203c2:	8082      	strh	r2, [r0, #4]
}
 80203c4:	4770      	bx	lr

080203c6 <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
 80203c6:	6883      	ldr	r3, [r0, #8]
 80203c8:	440b      	add	r3, r1
 80203ca:	6003      	str	r3, [r0, #0]
}
 80203cc:	4770      	bx	lr

080203ce <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
 80203ce:	b510      	push	{r4, lr}
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
	__ASSERT_NO_MSG(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
 80203d0:	460a      	mov	r2, r1
 80203d2:	6814      	ldr	r4, [r2, #0]
 80203d4:	b12c      	cbz	r4, 80203e2 <net_buf_put+0x14>
		tail->flags |= NET_BUF_FRAGS;
 80203d6:	7953      	ldrb	r3, [r2, #5]
 80203d8:	f043 0301 	orr.w	r3, r3, #1
 80203dc:	7153      	strb	r3, [r2, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
 80203de:	4622      	mov	r2, r4
 80203e0:	e7f7      	b.n	80203d2 <net_buf_put+0x4>
	}

	k_fifo_put_list(fifo, buf, tail);
 80203e2:	f001 fd75 	bl	8021ed0 <k_queue_append_list>
}
 80203e6:	bd10      	pop	{r4, pc}

080203e8 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
 80203e8:	b538      	push	{r3, r4, r5, lr}
 80203ea:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	while (buf) {
 80203ec:	e00f      	b.n	802040e <net_buf_unref+0x26>
		if (--buf->ref > 0) {
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
 80203ee:	4620      	mov	r0, r4
 80203f0:	f7ff ff0e 	bl	8020210 <data_unref>
			buf->__buf = NULL;
 80203f4:	2300      	movs	r3, #0
 80203f6:	6123      	str	r3, [r4, #16]
		}

		buf->data = NULL;
 80203f8:	2300      	movs	r3, #0
 80203fa:	60a3      	str	r3, [r4, #8]
		buf->frags = NULL;
 80203fc:	6023      	str	r3, [r4, #0]

		pool = net_buf_pool_get(buf->pool_id);
 80203fe:	79a0      	ldrb	r0, [r4, #6]
 8020400:	f7f6 fbb0 	bl	8016b64 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		__ASSERT_NO_MSG(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
 8020404:	69c3      	ldr	r3, [r0, #28]
 8020406:	b16b      	cbz	r3, 8020424 <net_buf_unref+0x3c>
			pool->destroy(buf);
 8020408:	4620      	mov	r0, r4
 802040a:	4798      	blx	r3
{
 802040c:	462c      	mov	r4, r5
	while (buf) {
 802040e:	b184      	cbz	r4, 8020432 <net_buf_unref+0x4a>
		struct net_buf *frags = buf->frags;
 8020410:	6825      	ldr	r5, [r4, #0]
		if (--buf->ref > 0) {
 8020412:	7923      	ldrb	r3, [r4, #4]
 8020414:	3b01      	subs	r3, #1
 8020416:	b2db      	uxtb	r3, r3
 8020418:	7123      	strb	r3, [r4, #4]
 802041a:	b953      	cbnz	r3, 8020432 <net_buf_unref+0x4a>
		if (buf->__buf) {
 802041c:	6921      	ldr	r1, [r4, #16]
 802041e:	2900      	cmp	r1, #0
 8020420:	d1e5      	bne.n	80203ee <net_buf_unref+0x6>
 8020422:	e7e9      	b.n	80203f8 <net_buf_unref+0x10>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 8020424:	79a0      	ldrb	r0, [r4, #6]
 8020426:	f7f6 fb9d 	bl	8016b64 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
 802042a:	4621      	mov	r1, r4
 802042c:	f001 fd49 	bl	8021ec2 <k_queue_prepend>
}
 8020430:	e7ec      	b.n	802040c <net_buf_unref+0x24>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
 8020432:	bd38      	pop	{r3, r4, r5, pc}

08020434 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
 8020434:	7902      	ldrb	r2, [r0, #4]
 8020436:	3201      	adds	r2, #1
 8020438:	7102      	strb	r2, [r0, #4]
	return buf;
}
 802043a:	4770      	bx	lr

0802043c <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
 802043c:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
 802043e:	4618      	mov	r0, r3
 8020440:	681b      	ldr	r3, [r3, #0]
 8020442:	2b00      	cmp	r3, #0
 8020444:	d1fb      	bne.n	802043e <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
 8020446:	4770      	bx	lr

08020448 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
 8020448:	b570      	push	{r4, r5, r6, lr}
 802044a:	4604      	mov	r4, r0
 802044c:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
 802044e:	6806      	ldr	r6, [r0, #0]
 8020450:	b11e      	cbz	r6, 802045a <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
 8020452:	4608      	mov	r0, r1
 8020454:	f7ff fff2 	bl	802043c <net_buf_frag_last>
 8020458:	6006      	str	r6, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
 802045a:	6025      	str	r5, [r4, #0]
}
 802045c:	bd70      	pop	{r4, r5, r6, pc}

0802045e <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
 802045e:	b538      	push	{r3, r4, r5, lr}
 8020460:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(frag);

	if (!head) {
 8020462:	b138      	cbz	r0, 8020474 <net_buf_frag_add+0x16>
 8020464:	4604      	mov	r4, r0
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
 8020466:	f7ff ffe9 	bl	802043c <net_buf_frag_last>
 802046a:	4629      	mov	r1, r5
 802046c:	f7ff ffec 	bl	8020448 <net_buf_frag_insert>

	return head;
 8020470:	4620      	mov	r0, r4
}
 8020472:	bd38      	pop	{r3, r4, r5, pc}
		return net_buf_ref(frag);
 8020474:	4608      	mov	r0, r1
 8020476:	f7ff ffdd 	bl	8020434 <net_buf_ref>
 802047a:	e7fa      	b.n	8020472 <net_buf_frag_add+0x14>

0802047c <net_buf_simple_add>:
	return buf->data + buf->len;
 802047c:	6802      	ldr	r2, [r0, #0]
 802047e:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
 8020480:	4419      	add	r1, r3
 8020482:	8081      	strh	r1, [r0, #4]
	return tail;
}
 8020484:	18d0      	adds	r0, r2, r3
 8020486:	4770      	bx	lr

08020488 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
 8020488:	b538      	push	{r3, r4, r5, lr}
 802048a:	460d      	mov	r5, r1
 802048c:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
 802048e:	4611      	mov	r1, r2
 8020490:	f7ff fff4 	bl	802047c <net_buf_simple_add>
 8020494:	4622      	mov	r2, r4
 8020496:	4629      	mov	r1, r5
 8020498:	f7fc fa09 	bl	801c8ae <memcpy>
}
 802049c:	bd38      	pop	{r3, r4, r5, pc}

0802049e <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
 802049e:	b510      	push	{r4, lr}
 80204a0:	460c      	mov	r4, r1
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
 80204a2:	2101      	movs	r1, #1
 80204a4:	f7ff ffea 	bl	802047c <net_buf_simple_add>
	*u8 = val;
 80204a8:	7004      	strb	r4, [r0, #0]

	return u8;
}
 80204aa:	bd10      	pop	{r4, pc}

080204ac <net_buf_simple_add_le16>:

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
 80204ac:	b510      	push	{r4, lr}
 80204ae:	460c      	mov	r4, r1
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
 80204b0:	2102      	movs	r1, #2
 80204b2:	f7ff ffe3 	bl	802047c <net_buf_simple_add>
	dst[0] = val;
 80204b6:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
 80204b8:	0a24      	lsrs	r4, r4, #8
 80204ba:	7044      	strb	r4, [r0, #1]
}
 80204bc:	bd10      	pop	{r4, pc}

080204be <net_buf_simple_push>:

	sys_put_be64(val, net_buf_simple_add(buf, sizeof(val)));
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
 80204be:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
 80204c0:	6800      	ldr	r0, [r0, #0]
 80204c2:	1a40      	subs	r0, r0, r1
 80204c4:	6018      	str	r0, [r3, #0]
	buf->len += len;
 80204c6:	889a      	ldrh	r2, [r3, #4]
 80204c8:	4411      	add	r1, r2
 80204ca:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
 80204cc:	4770      	bx	lr

080204ce <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
 80204ce:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
 80204d0:	8882      	ldrh	r2, [r0, #4]
 80204d2:	1a52      	subs	r2, r2, r1
 80204d4:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
 80204d6:	6800      	ldr	r0, [r0, #0]
 80204d8:	4408      	add	r0, r1
 80204da:	6018      	str	r0, [r3, #0]
}
 80204dc:	4770      	bx	lr

080204de <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
 80204de:	4603      	mov	r3, r0
	void *data = buf->data;
 80204e0:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
 80204e2:	889a      	ldrh	r2, [r3, #4]
 80204e4:	1a52      	subs	r2, r2, r1
 80204e6:	809a      	strh	r2, [r3, #4]
	buf->data += len;
 80204e8:	4401      	add	r1, r0
 80204ea:	6019      	str	r1, [r3, #0]

	return data;
}
 80204ec:	4770      	bx	lr

080204ee <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
 80204ee:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
 80204f0:	6803      	ldr	r3, [r0, #0]
 80204f2:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
 80204f4:	2101      	movs	r1, #1
 80204f6:	f7ff ffea 	bl	80204ce <net_buf_simple_pull>

	return val;
}
 80204fa:	4620      	mov	r0, r4
 80204fc:	bd10      	pop	{r4, pc}

080204fe <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
 80204fe:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
 8020500:	6803      	ldr	r3, [r0, #0]
 8020502:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
 8020504:	2102      	movs	r1, #2
 8020506:	f7ff ffe2 	bl	80204ce <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
 802050a:	4620      	mov	r0, r4
 802050c:	bd10      	pop	{r4, pc}

0802050e <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
 802050e:	6802      	ldr	r2, [r0, #0]
 8020510:	6880      	ldr	r0, [r0, #8]
}
 8020512:	1a10      	subs	r0, r2, r0
 8020514:	4770      	bx	lr

08020516 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
 8020516:	b538      	push	{r3, r4, r5, lr}
 8020518:	4604      	mov	r4, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
 802051a:	88c5      	ldrh	r5, [r0, #6]
 802051c:	f7ff fff7 	bl	802050e <net_buf_simple_headroom>
 8020520:	1a2d      	subs	r5, r5, r0
 8020522:	88a0      	ldrh	r0, [r4, #4]
}
 8020524:	1a28      	subs	r0, r5, r0
 8020526:	bd38      	pop	{r3, r4, r5, pc}

08020528 <hid_on_get_idle>:
}
 8020528:	f06f 0022 	mvn.w	r0, #34	; 0x22
 802052c:	4770      	bx	lr

0802052e <hid_on_get_report>:
}
 802052e:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8020532:	4770      	bx	lr

08020534 <hid_on_get_protocol>:
}
 8020534:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8020538:	4770      	bx	lr

0802053a <hid_on_set_idle>:
}
 802053a:	f06f 0022 	mvn.w	r0, #34	; 0x22
 802053e:	4770      	bx	lr

08020540 <hid_on_set_report>:
}
 8020540:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8020544:	4770      	bx	lr

08020546 <hid_on_set_protocol>:
}
 8020546:	f06f 0022 	mvn.w	r0, #34	; 0x22
 802054a:	4770      	bx	lr

0802054c <usb_set_hid_report_size>:
	struct usb_if_descriptor *if_desc = (void *)cfg->interface_descriptor;
 802054c:	6843      	ldr	r3, [r0, #4]
	dst[0] = val;
 802054e:	7419      	strb	r1, [r3, #16]
	dst[1] = val >> 8;
 8020550:	0a09      	lsrs	r1, r1, #8
 8020552:	7459      	strb	r1, [r3, #17]
}
 8020554:	4770      	bx	lr

08020556 <hid_interface_config>:
	desc->if0.bInterfaceNumber = bInterfaceNumber;
 8020556:	7081      	strb	r1, [r0, #2]
}
 8020558:	4770      	bx	lr

0802055a <usb_hid_device_init>:
static int usb_hid_device_init(const struct device *dev)
{
	LOG_DBG("Init HID Device: dev %p (%s)", dev, dev->name);

	return 0;
}
 802055a:	2000      	movs	r0, #0
 802055c:	4770      	bx	lr

0802055e <usb_hid_init>:
{
 802055e:	b508      	push	{r3, lr}
	struct hid_device_info *dev_data = dev->data;
 8020560:	68c3      	ldr	r3, [r0, #12]
	usb_set_hid_report_size(cfg, dev_data->report_size);
 8020562:	8899      	ldrh	r1, [r3, #4]
 8020564:	6840      	ldr	r0, [r0, #4]
 8020566:	f7ff fff1 	bl	802054c <usb_set_hid_report_size>
}
 802056a:	2000      	movs	r0, #0
 802056c:	bd08      	pop	{r3, pc}

0802056e <gpio_stm32_isr>:
{
 802056e:	b570      	push	{r4, r5, r6, lr}
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8020570:	684e      	ldr	r6, [r1, #4]
 8020572:	2501      	movs	r5, #1
 8020574:	4085      	lsls	r5, r0
	return list->head;
 8020576:	6889      	ldr	r1, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8020578:	b119      	cbz	r1, 8020582 <gpio_stm32_isr+0x14>
 802057a:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
 802057c:	b149      	cbz	r1, 8020592 <gpio_stm32_isr+0x24>
	return node->next;
 802057e:	680c      	ldr	r4, [r1, #0]
 8020580:	e007      	b.n	8020592 <gpio_stm32_isr+0x24>
 8020582:	460c      	mov	r4, r1
 8020584:	e005      	b.n	8020592 <gpio_stm32_isr+0x24>
 8020586:	b164      	cbz	r4, 80205a2 <gpio_stm32_isr+0x34>
 8020588:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 802058a:	b104      	cbz	r4, 802058e <gpio_stm32_isr+0x20>
	return node->next;
 802058c:	6823      	ldr	r3, [r4, #0]
 802058e:	4621      	mov	r1, r4
 8020590:	461c      	mov	r4, r3
 8020592:	b141      	cbz	r1, 80205a6 <gpio_stm32_isr+0x38>
		if (cb->pin_mask & pins) {
 8020594:	688a      	ldr	r2, [r1, #8]
 8020596:	402a      	ands	r2, r5
 8020598:	d0f5      	beq.n	8020586 <gpio_stm32_isr+0x18>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 802059a:	684b      	ldr	r3, [r1, #4]
 802059c:	4630      	mov	r0, r6
 802059e:	4798      	blx	r3
 80205a0:	e7f1      	b.n	8020586 <gpio_stm32_isr+0x18>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 80205a2:	4623      	mov	r3, r4
 80205a4:	e7f3      	b.n	802058e <gpio_stm32_isr+0x20>
}
 80205a6:	bd70      	pop	{r4, r5, r6, pc}

080205a8 <gpio_stm32_flags_to_conf>:
	if ((flags & GPIO_OUTPUT) != 0) {
 80205a8:	f410 7f00 	tst.w	r0, #512	; 0x200
 80205ac:	d01b      	beq.n	80205e6 <gpio_stm32_flags_to_conf+0x3e>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 80205ae:	2310      	movs	r3, #16
 80205b0:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 80205b2:	f010 0f02 	tst.w	r0, #2
 80205b6:	d004      	beq.n	80205c2 <gpio_stm32_flags_to_conf+0x1a>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 80205b8:	f010 0f04 	tst.w	r0, #4
 80205bc:	d02c      	beq.n	8020618 <gpio_stm32_flags_to_conf+0x70>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 80205be:	2350      	movs	r3, #80	; 0x50
 80205c0:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_PULL_UP) != 0) {
 80205c2:	f010 0310 	ands.w	r3, r0, #16
 80205c6:	d005      	beq.n	80205d4 <gpio_stm32_flags_to_conf+0x2c>
			*pincfg |= STM32_PINCFG_PULL_UP;
 80205c8:	680b      	ldr	r3, [r1, #0]
 80205ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80205ce:	600b      	str	r3, [r1, #0]
	return 0;
 80205d0:	2000      	movs	r0, #0
 80205d2:	4770      	bx	lr
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 80205d4:	f010 0020 	ands.w	r0, r0, #32
 80205d8:	d020      	beq.n	802061c <gpio_stm32_flags_to_conf+0x74>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 80205da:	680a      	ldr	r2, [r1, #0]
 80205dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80205e0:	600a      	str	r2, [r1, #0]
	return 0;
 80205e2:	4618      	mov	r0, r3
 80205e4:	4770      	bx	lr
	} else if  ((flags & GPIO_INPUT) != 0) {
 80205e6:	f410 7f80 	tst.w	r0, #256	; 0x100
 80205ea:	d011      	beq.n	8020610 <gpio_stm32_flags_to_conf+0x68>
		*pincfg = STM32_PINCFG_MODE_INPUT;
 80205ec:	2300      	movs	r3, #0
 80205ee:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_PULL_UP) != 0) {
 80205f0:	f010 0310 	ands.w	r3, r0, #16
 80205f4:	d004      	beq.n	8020600 <gpio_stm32_flags_to_conf+0x58>
			*pincfg |= STM32_PINCFG_PULL_UP;
 80205f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80205fa:	600b      	str	r3, [r1, #0]
	return 0;
 80205fc:	2000      	movs	r0, #0
 80205fe:	4770      	bx	lr
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8020600:	f010 0020 	ands.w	r0, r0, #32
 8020604:	d00a      	beq.n	802061c <gpio_stm32_flags_to_conf+0x74>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8020606:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802060a:	600a      	str	r2, [r1, #0]
	return 0;
 802060c:	4618      	mov	r0, r3
 802060e:	4770      	bx	lr
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 8020610:	2330      	movs	r3, #48	; 0x30
 8020612:	600b      	str	r3, [r1, #0]
	return 0;
 8020614:	2000      	movs	r0, #0
 8020616:	4770      	bx	lr
				return -ENOTSUP;
 8020618:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 802061c:	4770      	bx	lr

0802061e <gpio_stm32_port_get_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 802061e:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8020620:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8020622:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 8020624:	600b      	str	r3, [r1, #0]
}
 8020626:	2000      	movs	r0, #0
 8020628:	4770      	bx	lr

0802062a <gpio_stm32_port_set_masked_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 802062a:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 802062c:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 802062e:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8020630:	4042      	eors	r2, r0
 8020632:	400a      	ands	r2, r1
 8020634:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 8020636:	615a      	str	r2, [r3, #20]
}
 8020638:	2000      	movs	r0, #0
 802063a:	4770      	bx	lr

0802063c <gpio_stm32_port_set_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 802063c:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 802063e:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 8020640:	6199      	str	r1, [r3, #24]
}
 8020642:	2000      	movs	r0, #0
 8020644:	4770      	bx	lr

08020646 <gpio_stm32_port_clear_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 8020646:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8020648:	685b      	ldr	r3, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 802064a:	6299      	str	r1, [r3, #40]	; 0x28
}
 802064c:	2000      	movs	r0, #0
 802064e:	4770      	bx	lr

08020650 <gpio_stm32_port_toggle_bits>:
	const struct gpio_stm32_config *cfg = dev->config;
 8020650:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8020652:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8020654:	6953      	ldr	r3, [r2, #20]
 8020656:	404b      	eors	r3, r1
 8020658:	6153      	str	r3, [r2, #20]
}
 802065a:	2000      	movs	r0, #0
 802065c:	4770      	bx	lr

0802065e <gpio_stm32_manage_callback>:
{
 802065e:	b470      	push	{r4, r5, r6}
	struct gpio_stm32_data *data = dev->data;
 8020660:	68c0      	ldr	r0, [r0, #12]
	return gpio_manage_callback(&data->cb, callback, set);
 8020662:	f100 0508 	add.w	r5, r0, #8
	return list->head;
 8020666:	6883      	ldr	r3, [r0, #8]
	if (!sys_slist_is_empty(callbacks)) {
 8020668:	b1db      	cbz	r3, 80206a2 <gpio_stm32_manage_callback+0x44>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
 802066a:	460e      	mov	r6, r1
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 802066c:	2400      	movs	r4, #0
 802066e:	e00a      	b.n	8020686 <gpio_stm32_manage_callback+0x28>
	return node->next;
 8020670:	680b      	ldr	r3, [r1, #0]
	list->head = node;
 8020672:	6083      	str	r3, [r0, #8]
	return list->tail;
 8020674:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
 8020676:	42a1      	cmp	r1, r4
 8020678:	d10f      	bne.n	802069a <gpio_stm32_manage_callback+0x3c>
	list->tail = node;
 802067a:	606b      	str	r3, [r5, #4]
}
 802067c:	e00d      	b.n	802069a <gpio_stm32_manage_callback+0x3c>
	list->tail = node;
 802067e:	606c      	str	r4, [r5, #4]
}
 8020680:	e00b      	b.n	802069a <gpio_stm32_manage_callback+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8020682:	461c      	mov	r4, r3
 8020684:	681b      	ldr	r3, [r3, #0]
 8020686:	b15b      	cbz	r3, 80206a0 <gpio_stm32_manage_callback+0x42>
 8020688:	429e      	cmp	r6, r3
 802068a:	d1fa      	bne.n	8020682 <gpio_stm32_manage_callback+0x24>
Z_GENLIST_REMOVE(slist, snode)
 802068c:	2c00      	cmp	r4, #0
 802068e:	d0ef      	beq.n	8020670 <gpio_stm32_manage_callback+0x12>
	return node->next;
 8020690:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
 8020692:	6023      	str	r3, [r4, #0]
	return list->tail;
 8020694:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
 8020696:	4299      	cmp	r1, r3
 8020698:	d0f1      	beq.n	802067e <gpio_stm32_manage_callback+0x20>
	parent->next = child;
 802069a:	2300      	movs	r3, #0
 802069c:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 802069e:	e000      	b.n	80206a2 <gpio_stm32_manage_callback+0x44>
			if (!set) {
 80206a0:	b152      	cbz	r2, 80206b8 <gpio_stm32_manage_callback+0x5a>
	if (set) {
 80206a2:	b162      	cbz	r2, 80206be <gpio_stm32_manage_callback+0x60>
	return list->head;
 80206a4:	6883      	ldr	r3, [r0, #8]
	parent->next = child;
 80206a6:	600b      	str	r3, [r1, #0]
	list->head = node;
 80206a8:	6081      	str	r1, [r0, #8]
	return list->tail;
 80206aa:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
 80206ac:	b10b      	cbz	r3, 80206b2 <gpio_stm32_manage_callback+0x54>
	return 0;
 80206ae:	2000      	movs	r0, #0
 80206b0:	e006      	b.n	80206c0 <gpio_stm32_manage_callback+0x62>
	list->tail = node;
 80206b2:	6069      	str	r1, [r5, #4]
 80206b4:	2000      	movs	r0, #0
}
 80206b6:	e003      	b.n	80206c0 <gpio_stm32_manage_callback+0x62>
				return -EINVAL;
 80206b8:	f06f 0015 	mvn.w	r0, #21
 80206bc:	e000      	b.n	80206c0 <gpio_stm32_manage_callback+0x62>
	return 0;
 80206be:	2000      	movs	r0, #0
}
 80206c0:	bc70      	pop	{r4, r5, r6}
 80206c2:	4770      	bx	lr

080206c4 <gpio_stm32_configure>:
{
 80206c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80206c6:	460f      	mov	r7, r1
	pinval = 1 << pin;
 80206c8:	2401      	movs	r4, #1
 80206ca:	408c      	lsls	r4, r1
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 80206cc:	f002 0130 	and.w	r1, r2, #48	; 0x30
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 80206d0:	f3c2 1c01 	ubfx	ip, r2, #4, #2
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80206d4:	6805      	ldr	r5, [r0, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80206d6:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 80206da:	2e00      	cmp	r6, #0
 80206dc:	d053      	beq.n	8020786 <gpio_stm32_configure+0xc2>
  return __builtin_clz(value);
 80206de:	fab6 f686 	clz	r6, r6
 80206e2:	0076      	lsls	r6, r6, #1
 80206e4:	f04f 0e03 	mov.w	lr, #3
 80206e8:	fa0e f606 	lsl.w	r6, lr, r6
 80206ec:	ea25 0606 	bic.w	r6, r5, r6
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80206f0:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80206f4:	2d00      	cmp	r5, #0
 80206f6:	d048      	beq.n	802078a <gpio_stm32_configure+0xc6>
  return __builtin_clz(value);
 80206f8:	fab5 f585 	clz	r5, r5
 80206fc:	006d      	lsls	r5, r5, #1
 80206fe:	fa0c f505 	lsl.w	r5, ip, r5
 8020702:	4335      	orrs	r5, r6
 8020704:	6005      	str	r5, [r0, #0]
	if (STM32_MODER_ALT_MODE == mode) {
 8020706:	2920      	cmp	r1, #32
 8020708:	d041      	beq.n	802078e <gpio_stm32_configure+0xca>
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 802070a:	f3c2 1180 	ubfx	r1, r2, #6, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 802070e:	6843      	ldr	r3, [r0, #4]
 8020710:	ea23 0304 	bic.w	r3, r3, r4
 8020714:	40b9      	lsls	r1, r7
 8020716:	4319      	orrs	r1, r3
 8020718:	6041      	str	r1, [r0, #4]
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 802071a:	f3c2 15c1 	ubfx	r5, r2, #7, #2
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 802071e:	6883      	ldr	r3, [r0, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8020720:	fa94 f1a4 	rbit	r1, r4
  if (value == 0U)
 8020724:	2900      	cmp	r1, #0
 8020726:	d06a      	beq.n	80207fe <gpio_stm32_configure+0x13a>
  return __builtin_clz(value);
 8020728:	fab1 f181 	clz	r1, r1
 802072c:	0049      	lsls	r1, r1, #1
 802072e:	2603      	movs	r6, #3
 8020730:	fa06 f101 	lsl.w	r1, r6, r1
 8020734:	ea23 0101 	bic.w	r1, r3, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8020738:	fa94 f3a4 	rbit	r3, r4
  if (value == 0U)
 802073c:	2b00      	cmp	r3, #0
 802073e:	d060      	beq.n	8020802 <gpio_stm32_configure+0x13e>
  return __builtin_clz(value);
 8020740:	fab3 f383 	clz	r3, r3
 8020744:	005b      	lsls	r3, r3, #1
 8020746:	fa05 f303 	lsl.w	r3, r5, r3
 802074a:	430b      	orrs	r3, r1
 802074c:	6083      	str	r3, [r0, #8]
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 802074e:	f3c2 2241 	ubfx	r2, r2, #9, #2
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8020752:	68c1      	ldr	r1, [r0, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8020754:	fa94 f3a4 	rbit	r3, r4
  if (value == 0U)
 8020758:	2b00      	cmp	r3, #0
 802075a:	d054      	beq.n	8020806 <gpio_stm32_configure+0x142>
  return __builtin_clz(value);
 802075c:	fab3 f383 	clz	r3, r3
 8020760:	005b      	lsls	r3, r3, #1
 8020762:	2503      	movs	r5, #3
 8020764:	fa05 f303 	lsl.w	r3, r5, r3
 8020768:	ea21 0303 	bic.w	r3, r1, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 802076c:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8020770:	2c00      	cmp	r4, #0
 8020772:	d04a      	beq.n	802080a <gpio_stm32_configure+0x146>
  return __builtin_clz(value);
 8020774:	fab4 f484 	clz	r4, r4
 8020778:	0064      	lsls	r4, r4, #1
 802077a:	fa02 f404 	lsl.w	r4, r2, r4
 802077e:	431c      	orrs	r4, r3
 8020780:	60c4      	str	r4, [r0, #12]
}
 8020782:	2000      	movs	r0, #0
 8020784:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 8020786:	2620      	movs	r6, #32
 8020788:	e7ab      	b.n	80206e2 <gpio_stm32_configure+0x1e>
 802078a:	2520      	movs	r5, #32
 802078c:	e7b6      	b.n	80206fc <gpio_stm32_configure+0x38>
		if (pin < 8) {
 802078e:	2f07      	cmp	r7, #7
 8020790:	dc19      	bgt.n	80207c6 <gpio_stm32_configure+0x102>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8020792:	6a05      	ldr	r5, [r0, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8020794:	fa94 f1a4 	rbit	r1, r4
  if (value == 0U)
 8020798:	b189      	cbz	r1, 80207be <gpio_stm32_configure+0xfa>
  return __builtin_clz(value);
 802079a:	fab1 f181 	clz	r1, r1
 802079e:	0089      	lsls	r1, r1, #2
 80207a0:	260f      	movs	r6, #15
 80207a2:	fa06 f101 	lsl.w	r1, r6, r1
 80207a6:	ea25 0501 	bic.w	r5, r5, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80207aa:	fa94 f1a4 	rbit	r1, r4
  if (value == 0U)
 80207ae:	b141      	cbz	r1, 80207c2 <gpio_stm32_configure+0xfe>
  return __builtin_clz(value);
 80207b0:	fab1 f181 	clz	r1, r1
 80207b4:	0089      	lsls	r1, r1, #2
 80207b6:	408b      	lsls	r3, r1
 80207b8:	432b      	orrs	r3, r5
 80207ba:	6203      	str	r3, [r0, #32]
}
 80207bc:	e7a5      	b.n	802070a <gpio_stm32_configure+0x46>
    return 32U;
 80207be:	2120      	movs	r1, #32
 80207c0:	e7ed      	b.n	802079e <gpio_stm32_configure+0xda>
 80207c2:	2120      	movs	r1, #32
 80207c4:	e7f6      	b.n	80207b4 <gpio_stm32_configure+0xf0>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80207c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80207c8:	0a21      	lsrs	r1, r4, #8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80207ca:	fa91 f5a1 	rbit	r5, r1
  if (value == 0U)
 80207ce:	b195      	cbz	r5, 80207f6 <gpio_stm32_configure+0x132>
  return __builtin_clz(value);
 80207d0:	fab5 f585 	clz	r5, r5
 80207d4:	00ad      	lsls	r5, r5, #2
 80207d6:	f04f 0c0f 	mov.w	ip, #15
 80207da:	fa0c f505 	lsl.w	r5, ip, r5
 80207de:	ea26 0505 	bic.w	r5, r6, r5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80207e2:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 80207e6:	b141      	cbz	r1, 80207fa <gpio_stm32_configure+0x136>
  return __builtin_clz(value);
 80207e8:	fab1 f181 	clz	r1, r1
 80207ec:	0089      	lsls	r1, r1, #2
 80207ee:	408b      	lsls	r3, r1
 80207f0:	432b      	orrs	r3, r5
 80207f2:	6243      	str	r3, [r0, #36]	; 0x24
}
 80207f4:	e789      	b.n	802070a <gpio_stm32_configure+0x46>
    return 32U;
 80207f6:	2520      	movs	r5, #32
 80207f8:	e7ec      	b.n	80207d4 <gpio_stm32_configure+0x110>
 80207fa:	2120      	movs	r1, #32
 80207fc:	e7f6      	b.n	80207ec <gpio_stm32_configure+0x128>
 80207fe:	2120      	movs	r1, #32
 8020800:	e794      	b.n	802072c <gpio_stm32_configure+0x68>
 8020802:	2320      	movs	r3, #32
 8020804:	e79e      	b.n	8020744 <gpio_stm32_configure+0x80>
 8020806:	2320      	movs	r3, #32
 8020808:	e7aa      	b.n	8020760 <gpio_stm32_configure+0x9c>
 802080a:	2420      	movs	r4, #32
 802080c:	e7b4      	b.n	8020778 <gpio_stm32_configure+0xb4>

0802080e <gpio_stm32_config>:
{
 802080e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020812:	b082      	sub	sp, #8
 8020814:	4605      	mov	r5, r0
 8020816:	460f      	mov	r7, r1
 8020818:	4614      	mov	r4, r2
	const struct gpio_stm32_config *cfg = dev->config;
 802081a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	err = gpio_stm32_flags_to_conf(flags, &pincfg);
 802081e:	a901      	add	r1, sp, #4
 8020820:	4610      	mov	r0, r2
 8020822:	f7ff fec1 	bl	80205a8 <gpio_stm32_flags_to_conf>
	if (err != 0) {
 8020826:	4606      	mov	r6, r0
 8020828:	b978      	cbnz	r0, 802084a <gpio_stm32_config+0x3c>
	if ((flags & GPIO_OUTPUT) != 0) {
 802082a:	f414 7f00 	tst.w	r4, #512	; 0x200
 802082e:	d005      	beq.n	802083c <gpio_stm32_config+0x2e>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8020830:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8020834:	d10d      	bne.n	8020852 <gpio_stm32_config+0x44>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8020836:	f414 6f80 	tst.w	r4, #1024	; 0x400
 802083a:	d110      	bne.n	802085e <gpio_stm32_config+0x50>
	gpio_stm32_configure(cfg->base, pin, pincfg, 0);
 802083c:	2300      	movs	r3, #0
 802083e:	9a01      	ldr	r2, [sp, #4]
 8020840:	4639      	mov	r1, r7
 8020842:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8020846:	f7ff ff3d 	bl	80206c4 <gpio_stm32_configure>
}
 802084a:	4630      	mov	r0, r6
 802084c:	b002      	add	sp, #8
 802084e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8020852:	2101      	movs	r1, #1
 8020854:	40b9      	lsls	r1, r7
 8020856:	4628      	mov	r0, r5
 8020858:	f7ff fef0 	bl	802063c <gpio_stm32_port_set_bits_raw>
 802085c:	e7ee      	b.n	802083c <gpio_stm32_config+0x2e>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 802085e:	2101      	movs	r1, #1
 8020860:	40b9      	lsls	r1, r7
 8020862:	4628      	mov	r0, r5
 8020864:	f7ff feef 	bl	8020646 <gpio_stm32_port_clear_bits_raw>
 8020868:	e7e8      	b.n	802083c <gpio_stm32_config+0x2e>

0802086a <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
 802086a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802086e:	b082      	sub	sp, #8
 8020870:	460e      	mov	r6, r1
 8020872:	4617      	mov	r7, r2
 8020874:	4698      	mov	r8, r3
	const struct flash_driver_api *api = dev->api;
 8020876:	6883      	ldr	r3, [r0, #8]
	off_t group_offs = 0;
	uint32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
 8020878:	695b      	ldr	r3, [r3, #20]
 802087a:	466a      	mov	r2, sp
 802087c:	a901      	add	r1, sp, #4
 802087e:	4798      	blx	r3
	off_t end = 0;
 8020880:	2400      	movs	r4, #0
	off_t group_offs = 0;
 8020882:	46a4      	mov	ip, r4
	size_t page_count = 0;
 8020884:	4623      	mov	r3, r4

	while (layout_size--) {
 8020886:	e00c      	b.n	80208a2 <flash_get_page_info+0x38>
		if (use_addr) {
			end += layout->pages_count * layout->pages_size;
		} else {
			end += layout->pages_count;
 8020888:	9a01      	ldr	r2, [sp, #4]
 802088a:	6812      	ldr	r2, [r2, #0]
 802088c:	4414      	add	r4, r2
		}

		if (offs < end) {
 802088e:	42b4      	cmp	r4, r6
 8020890:	dc13      	bgt.n	80208ba <flash_get_page_info+0x50>
			info->index = page_count + num_in_group;

			return 0;
		}

		group_offs += layout->pages_count * layout->pages_size;
 8020892:	9801      	ldr	r0, [sp, #4]
 8020894:	6805      	ldr	r5, [r0, #0]
 8020896:	6842      	ldr	r2, [r0, #4]
 8020898:	fb02 cc05 	mla	ip, r2, r5, ip
		page_count += layout->pages_count;
 802089c:	442b      	add	r3, r5

		layout++;
 802089e:	3008      	adds	r0, #8
 80208a0:	9001      	str	r0, [sp, #4]
	while (layout_size--) {
 80208a2:	9800      	ldr	r0, [sp, #0]
 80208a4:	1e42      	subs	r2, r0, #1
 80208a6:	9200      	str	r2, [sp, #0]
 80208a8:	b1e8      	cbz	r0, 80208e6 <flash_get_page_info+0x7c>
		if (use_addr) {
 80208aa:	2f00      	cmp	r7, #0
 80208ac:	d0ec      	beq.n	8020888 <flash_get_page_info+0x1e>
			end += layout->pages_count * layout->pages_size;
 80208ae:	9a01      	ldr	r2, [sp, #4]
 80208b0:	6811      	ldr	r1, [r2, #0]
 80208b2:	6852      	ldr	r2, [r2, #4]
 80208b4:	fb02 4401 	mla	r4, r2, r1, r4
 80208b8:	e7e9      	b.n	802088e <flash_get_page_info+0x24>
			info->size = layout->pages_size;
 80208ba:	9a01      	ldr	r2, [sp, #4]
 80208bc:	6851      	ldr	r1, [r2, #4]
 80208be:	f8c8 1004 	str.w	r1, [r8, #4]
			if (use_addr) {
 80208c2:	b177      	cbz	r7, 80208e2 <flash_get_page_info+0x78>
				num_in_group = (offs - group_offs) /
 80208c4:	eba6 060c 	sub.w	r6, r6, ip
					       layout->pages_size;
 80208c8:	6851      	ldr	r1, [r2, #4]
				num_in_group = (offs - group_offs) /
 80208ca:	fbb6 f6f1 	udiv	r6, r6, r1
					     num_in_group * layout->pages_size;
 80208ce:	6852      	ldr	r2, [r2, #4]
			info->start_offset = group_offs +
 80208d0:	fb06 c202 	mla	r2, r6, r2, ip
 80208d4:	f8c8 2000 	str.w	r2, [r8]
			info->index = page_count + num_in_group;
 80208d8:	4433      	add	r3, r6
 80208da:	f8c8 3008 	str.w	r3, [r8, #8]
			return 0;
 80208de:	2000      	movs	r0, #0
 80208e0:	e003      	b.n	80208ea <flash_get_page_info+0x80>
				num_in_group = offs - page_count;
 80208e2:	1af6      	subs	r6, r6, r3
 80208e4:	e7f3      	b.n	80208ce <flash_get_page_info+0x64>
	}

	return -EINVAL; /* page of the index doesn't exist */
 80208e6:	f06f 0015 	mvn.w	r0, #21
}
 80208ea:	b002      	add	sp, #8
 80208ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080208f0 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
 80208f0:	b508      	push	{r3, lr}
 80208f2:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, true, info);
 80208f4:	2201      	movs	r2, #1
 80208f6:	f7ff ffb8 	bl	802086a <flash_get_page_info>
}
 80208fa:	bd08      	pop	{r3, pc}

080208fc <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
 80208fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020900:	b086      	sub	sp, #24
 8020902:	4689      	mov	r9, r1
 8020904:	4690      	mov	r8, r2
	const struct flash_driver_api *api = dev->api;
 8020906:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
 8020908:	695b      	ldr	r3, [r3, #20]
 802090a:	aa01      	add	r2, sp, #4
 802090c:	a905      	add	r1, sp, #20
 802090e:	4798      	blx	r3
	off_t off = 0;
 8020910:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
 8020912:	4626      	mov	r6, r4

	for (block = 0; block < num_blocks; block++) {
 8020914:	46a2      	mov	sl, r4
 8020916:	9b01      	ldr	r3, [sp, #4]
 8020918:	4553      	cmp	r3, sl
 802091a:	d916      	bls.n	802094a <flash_page_foreach+0x4e>
		const struct flash_pages_layout *l = &layout[block];
 802091c:	9f05      	ldr	r7, [sp, #20]
 802091e:	eb07 07ca 	add.w	r7, r7, sl, lsl #3
		page_info.size = l->pages_size;
 8020922:	687b      	ldr	r3, [r7, #4]
 8020924:	9303      	str	r3, [sp, #12]

		for (i = 0; i < l->pages_count; i++) {
 8020926:	2500      	movs	r5, #0
 8020928:	683b      	ldr	r3, [r7, #0]
 802092a:	42ab      	cmp	r3, r5
 802092c:	d90a      	bls.n	8020944 <flash_page_foreach+0x48>
			page_info.start_offset = off;
 802092e:	9402      	str	r4, [sp, #8]
			page_info.index = page;
 8020930:	9604      	str	r6, [sp, #16]

			if (!cb(&page_info, data)) {
 8020932:	4641      	mov	r1, r8
 8020934:	a802      	add	r0, sp, #8
 8020936:	47c8      	blx	r9
 8020938:	b138      	cbz	r0, 802094a <flash_page_foreach+0x4e>
				return;
			}

			off += page_info.size;
 802093a:	9b03      	ldr	r3, [sp, #12]
 802093c:	441c      	add	r4, r3
			page++;
 802093e:	3601      	adds	r6, #1
		for (i = 0; i < l->pages_count; i++) {
 8020940:	3501      	adds	r5, #1
 8020942:	e7f1      	b.n	8020928 <flash_page_foreach+0x2c>
	for (block = 0; block < num_blocks; block++) {
 8020944:	f10a 0a01 	add.w	sl, sl, #1
 8020948:	e7e5      	b.n	8020916 <flash_page_foreach+0x1a>
		}
	}
}
 802094a:	b006      	add	sp, #24
 802094c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08020950 <HAL_PCD_MspInit>:
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_MspInit could be implemented in the user file
   */
}
 8020950:	4770      	bx	lr

08020952 <HAL_PCD_Init>:
  if (hpcd == NULL)
 8020952:	2800      	cmp	r0, #0
 8020954:	d053      	beq.n	80209fe <HAL_PCD_Init+0xac>
{
 8020956:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020958:	b087      	sub	sp, #28
 802095a:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 802095c:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 8020960:	b1e3      	cbz	r3, 802099c <HAL_PCD_Init+0x4a>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8020962:	2303      	movs	r3, #3
 8020964:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  __HAL_PCD_DISABLE(hpcd);
 8020968:	6820      	ldr	r0, [r4, #0]
 802096a:	f000 fc17 	bl	802119c <USB_DisableGlobalInt>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 802096e:	2300      	movs	r3, #0
 8020970:	6860      	ldr	r0, [r4, #4]
 8020972:	4283      	cmp	r3, r0
 8020974:	d217      	bcs.n	80209a6 <HAL_PCD_Init+0x54>
    hpcd->IN_ep[i].is_in = 1U;
 8020976:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 802097a:	2101      	movs	r1, #1
 802097c:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8020980:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8020984:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8020986:	2100      	movs	r1, #0
 8020988:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 802098c:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 802098e:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8020990:	1c9a      	adds	r2, r3, #2
 8020992:	0152      	lsls	r2, r2, #5
 8020994:	50a1      	str	r1, [r4, r2]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8020996:	3301      	adds	r3, #1
 8020998:	b2db      	uxtb	r3, r3
 802099a:	e7e9      	b.n	8020970 <HAL_PCD_Init+0x1e>
    hpcd->Lock = HAL_UNLOCKED;
 802099c:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
    HAL_PCD_MspInit(hpcd);
 80209a0:	f7ff ffd6 	bl	8020950 <HAL_PCD_MspInit>
 80209a4:	e7dd      	b.n	8020962 <HAL_PCD_Init+0x10>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80209a6:	2300      	movs	r3, #0
 80209a8:	e012      	b.n	80209d0 <HAL_PCD_Init+0x7e>
    hpcd->OUT_ep[i].is_in = 0U;
 80209aa:	eb04 1143 	add.w	r1, r4, r3, lsl #5
 80209ae:	2200      	movs	r2, #0
 80209b0:	f881 2129 	strb.w	r2, [r1, #297]	; 0x129
    hpcd->OUT_ep[i].num = i;
 80209b4:	f881 3128 	strb.w	r3, [r1, #296]	; 0x128
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80209b8:	f881 212b 	strb.w	r2, [r1, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 80209bc:	f8c1 2138 	str.w	r2, [r1, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80209c0:	f8c1 213c 	str.w	r2, [r1, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 80209c4:	f103 010a 	add.w	r1, r3, #10
 80209c8:	0149      	lsls	r1, r1, #5
 80209ca:	5062      	str	r2, [r4, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80209cc:	3301      	adds	r3, #1
 80209ce:	b2db      	uxtb	r3, r3
 80209d0:	4298      	cmp	r0, r3
 80209d2:	d8ea      	bhi.n	80209aa <HAL_PCD_Init+0x58>
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80209d4:	4625      	mov	r5, r4
 80209d6:	f855 7b10 	ldr.w	r7, [r5], #16
 80209da:	466e      	mov	r6, sp
 80209dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80209de:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80209e0:	682b      	ldr	r3, [r5, #0]
 80209e2:	6033      	str	r3, [r6, #0]
 80209e4:	1d23      	adds	r3, r4, #4
 80209e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80209e8:	4638      	mov	r0, r7
 80209ea:	f000 fbe1 	bl	80211b0 <USB_DevInit>
  hpcd->USB_Address = 0U;
 80209ee:	2000      	movs	r0, #0
 80209f0:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80209f4:	2301      	movs	r3, #1
 80209f6:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
}
 80209fa:	b007      	add	sp, #28
 80209fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80209fe:	2001      	movs	r0, #1
}
 8020a00:	4770      	bx	lr

08020a02 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8020a02:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8020a06:	2b01      	cmp	r3, #1
 8020a08:	d010      	beq.n	8020a2c <HAL_PCD_Start+0x2a>
{
 8020a0a:	b510      	push	{r4, lr}
 8020a0c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8020a0e:	2101      	movs	r1, #1
 8020a10:	f880 1228 	strb.w	r1, [r0, #552]	; 0x228

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8020a14:	f000 fbb9 	bl	802118a <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8020a18:	6820      	ldr	r0, [r4, #0]
 8020a1a:	f000 fef4 	bl	8021806 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8020a1e:	6820      	ldr	r0, [r4, #0]
 8020a20:	f000 fbb4 	bl	802118c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8020a24:	2000      	movs	r0, #0
 8020a26:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 8020a2a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8020a2c:	2002      	movs	r0, #2
}
 8020a2e:	4770      	bx	lr

08020a30 <HAL_PCD_SOFCallback>:
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8020a30:	4770      	bx	lr

08020a32 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8020a32:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8020a36:	2b01      	cmp	r3, #1
 8020a38:	d00d      	beq.n	8020a56 <HAL_PCD_SetAddress+0x24>
{
 8020a3a:	b510      	push	{r4, lr}
 8020a3c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8020a3e:	2301      	movs	r3, #1
 8020a40:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  hpcd->USB_Address = address;
 8020a44:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8020a48:	6800      	ldr	r0, [r0, #0]
 8020a4a:	f000 fed6 	bl	80217fa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8020a4e:	2000      	movs	r0, #0
 8020a50:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 8020a54:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8020a56:	2002      	movs	r0, #2
}
 8020a58:	4770      	bx	lr

08020a5a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8020a5a:	b570      	push	{r4, r5, r6, lr}
 8020a5c:	4605      	mov	r5, r0
 8020a5e:	460c      	mov	r4, r1
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8020a60:	f011 0f80 	tst.w	r1, #128	; 0x80
 8020a64:	d121      	bne.n	8020aaa <HAL_PCD_EP_Open+0x50>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8020a66:	f001 0007 	and.w	r0, r1, #7
 8020a6a:	0140      	lsls	r0, r0, #5
 8020a6c:	f500 7194 	add.w	r1, r0, #296	; 0x128
 8020a70:	4429      	add	r1, r5
    ep->is_in = 0U;
 8020a72:	4428      	add	r0, r5
 8020a74:	2600      	movs	r6, #0
 8020a76:	f880 6129 	strb.w	r6, [r0, #297]	; 0x129
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8020a7a:	f004 0407 	and.w	r4, r4, #7
 8020a7e:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 8020a80:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8020a82:	70cb      	strb	r3, [r1, #3]

  if (ep->is_in != 0U)
 8020a84:	784a      	ldrb	r2, [r1, #1]
 8020a86:	b102      	cbz	r2, 8020a8a <HAL_PCD_EP_Open+0x30>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8020a88:	81cc      	strh	r4, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8020a8a:	2b02      	cmp	r3, #2
 8020a8c:	d018      	beq.n	8020ac0 <HAL_PCD_EP_Open+0x66>
  {
    ep->data_pid_start = 0U;
  }

  __HAL_LOCK(hpcd);
 8020a8e:	f895 3228 	ldrb.w	r3, [r5, #552]	; 0x228
 8020a92:	2b01      	cmp	r3, #1
 8020a94:	d017      	beq.n	8020ac6 <HAL_PCD_EP_Open+0x6c>
 8020a96:	2301      	movs	r3, #1
 8020a98:	f885 3228 	strb.w	r3, [r5, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8020a9c:	6828      	ldr	r0, [r5, #0]
 8020a9e:	f000 fb9d 	bl	80211dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8020aa2:	2000      	movs	r0, #0
 8020aa4:	f885 0228 	strb.w	r0, [r5, #552]	; 0x228

  return ret;
}
 8020aa8:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8020aaa:	f001 0007 	and.w	r0, r1, #7
 8020aae:	0140      	lsls	r0, r0, #5
 8020ab0:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8020ab4:	4429      	add	r1, r5
    ep->is_in = 1U;
 8020ab6:	4428      	add	r0, r5
 8020ab8:	2601      	movs	r6, #1
 8020aba:	f880 6029 	strb.w	r6, [r0, #41]	; 0x29
 8020abe:	e7dc      	b.n	8020a7a <HAL_PCD_EP_Open+0x20>
    ep->data_pid_start = 0U;
 8020ac0:	2300      	movs	r3, #0
 8020ac2:	710b      	strb	r3, [r1, #4]
 8020ac4:	e7e3      	b.n	8020a8e <HAL_PCD_EP_Open+0x34>
  __HAL_LOCK(hpcd);
 8020ac6:	2002      	movs	r0, #2
 8020ac8:	e7ee      	b.n	8020aa8 <HAL_PCD_EP_Open+0x4e>

08020aca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8020aca:	b510      	push	{r4, lr}
 8020acc:	4604      	mov	r4, r0
 8020ace:	460b      	mov	r3, r1
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8020ad0:	f011 0f80 	tst.w	r1, #128	; 0x80
 8020ad4:	d11a      	bne.n	8020b0c <HAL_PCD_EP_Close+0x42>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8020ad6:	f001 0207 	and.w	r2, r1, #7
 8020ada:	0152      	lsls	r2, r2, #5
 8020adc:	f502 7194 	add.w	r1, r2, #296	; 0x128
 8020ae0:	4401      	add	r1, r0
    ep->is_in = 0U;
 8020ae2:	4402      	add	r2, r0
 8020ae4:	2000      	movs	r0, #0
 8020ae6:	f882 0129 	strb.w	r0, [r2, #297]	; 0x129
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8020aea:	f003 0307 	and.w	r3, r3, #7
 8020aee:	700b      	strb	r3, [r1, #0]

  __HAL_LOCK(hpcd);
 8020af0:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8020af4:	2b01      	cmp	r3, #1
 8020af6:	d014      	beq.n	8020b22 <HAL_PCD_EP_Close+0x58>
 8020af8:	2301      	movs	r3, #1
 8020afa:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8020afe:	6820      	ldr	r0, [r4, #0]
 8020b00:	f000 fd1a 	bl	8021538 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8020b04:	2000      	movs	r0, #0
 8020b06:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 8020b0a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8020b0c:	f001 0207 	and.w	r2, r1, #7
 8020b10:	0152      	lsls	r2, r2, #5
 8020b12:	f102 0128 	add.w	r1, r2, #40	; 0x28
 8020b16:	4401      	add	r1, r0
    ep->is_in = 1U;
 8020b18:	4402      	add	r2, r0
 8020b1a:	2001      	movs	r0, #1
 8020b1c:	f882 0029 	strb.w	r0, [r2, #41]	; 0x29
 8020b20:	e7e3      	b.n	8020aea <HAL_PCD_EP_Close+0x20>
  __HAL_LOCK(hpcd);
 8020b22:	2002      	movs	r0, #2
 8020b24:	e7f1      	b.n	8020b0a <HAL_PCD_EP_Close+0x40>

08020b26 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8020b26:	b570      	push	{r4, r5, r6, lr}
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8020b28:	f001 0407 	and.w	r4, r1, #7
 8020b2c:	0165      	lsls	r5, r4, #5
 8020b2e:	f505 7194 	add.w	r1, r5, #296	; 0x128
 8020b32:	4401      	add	r1, r0

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8020b34:	4405      	add	r5, r0
 8020b36:	f8c5 213c 	str.w	r2, [r5, #316]	; 0x13c
  ep->xfer_len = len;
 8020b3a:	f104 020a 	add.w	r2, r4, #10
 8020b3e:	0156      	lsls	r6, r2, #5
 8020b40:	eb00 1242 	add.w	r2, r0, r2, lsl #5
 8020b44:	5183      	str	r3, [r0, r6]
  ep->xfer_count = 0U;
 8020b46:	2300      	movs	r3, #0
 8020b48:	6053      	str	r3, [r2, #4]
  ep->is_in = 0U;
 8020b4a:	f885 3129 	strb.w	r3, [r5, #297]	; 0x129
  ep->num = ep_addr & EP_ADDR_MSK;
 8020b4e:	f885 4128 	strb.w	r4, [r5, #296]	; 0x128

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8020b52:	b924      	cbnz	r4, 8020b5e <HAL_PCD_EP_Receive+0x38>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8020b54:	6800      	ldr	r0, [r0, #0]
 8020b56:	f000 fe71 	bl	802183c <USB_EPStartXfer>
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
  }

  return HAL_OK;
}
 8020b5a:	2000      	movs	r0, #0
 8020b5c:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8020b5e:	6800      	ldr	r0, [r0, #0]
 8020b60:	f000 fe6c 	bl	802183c <USB_EPStartXfer>
 8020b64:	e7f9      	b.n	8020b5a <HAL_PCD_EP_Receive+0x34>

08020b66 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8020b66:	f001 0107 	and.w	r1, r1, #7
 8020b6a:	310a      	adds	r1, #10
 8020b6c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8020b70:	6848      	ldr	r0, [r1, #4]
 8020b72:	4770      	bx	lr

08020b74 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8020b74:	b570      	push	{r4, r5, r6, lr}
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8020b76:	f001 0407 	and.w	r4, r1, #7
 8020b7a:	0165      	lsls	r5, r4, #5
 8020b7c:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8020b80:	4401      	add	r1, r0

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8020b82:	4405      	add	r5, r0
 8020b84:	63ea      	str	r2, [r5, #60]	; 0x3c
  ep->xfer_len = len;
 8020b86:	1ca2      	adds	r2, r4, #2
 8020b88:	0156      	lsls	r6, r2, #5
 8020b8a:	eb00 1242 	add.w	r2, r0, r2, lsl #5
 8020b8e:	5183      	str	r3, [r0, r6]
  ep->xfer_count = 0U;
 8020b90:	2300      	movs	r3, #0
 8020b92:	6053      	str	r3, [r2, #4]
  ep->is_in = 1U;
 8020b94:	2301      	movs	r3, #1
 8020b96:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 8020b9a:	f885 4028 	strb.w	r4, [r5, #40]	; 0x28

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8020b9e:	b924      	cbnz	r4, 8020baa <HAL_PCD_EP_Transmit+0x36>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8020ba0:	6800      	ldr	r0, [r0, #0]
 8020ba2:	f000 fe4b 	bl	802183c <USB_EPStartXfer>
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
  }

  return HAL_OK;
}
 8020ba6:	2000      	movs	r0, #0
 8020ba8:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8020baa:	6800      	ldr	r0, [r0, #0]
 8020bac:	f000 fe46 	bl	802183c <USB_EPStartXfer>
 8020bb0:	e7f9      	b.n	8020ba6 <HAL_PCD_EP_Transmit+0x32>

08020bb2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8020bb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020bb4:	4605      	mov	r5, r0
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8020bb6:	e0a7      	b.n	8020d08 <PCD_EP_ISR_Handler+0x156>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8020bb8:	8803      	ldrh	r3, [r0, #0]
 8020bba:	b29b      	uxth	r3, r3
 8020bbc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8020bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020bc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8020bc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8020bcc:	b29b      	uxth	r3, r3
 8020bce:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8020bd0:	682a      	ldr	r2, [r5, #0]
 8020bd2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8020bd6:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8020bda:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8020bde:	3302      	adds	r3, #2
 8020be0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020be4:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8020be8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8020bec:	646b      	str	r3, [r5, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8020bee:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8020bf0:	4413      	add	r3, r2
 8020bf2:	63eb      	str	r3, [r5, #60]	; 0x3c

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8020bf4:	2100      	movs	r1, #0
 8020bf6:	4628      	mov	r0, r5
 8020bf8:	f7fb f887 	bl	801bd0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8020bfc:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8020c00:	2b00      	cmp	r3, #0
 8020c02:	f000 8081 	beq.w	8020d08 <PCD_EP_ISR_Handler+0x156>
 8020c06:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8020c08:	2b00      	cmp	r3, #0
 8020c0a:	d17d      	bne.n	8020d08 <PCD_EP_ISR_Handler+0x156>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8020c0c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8020c10:	682a      	ldr	r2, [r5, #0]
 8020c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020c16:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8020c1a:	2300      	movs	r3, #0
 8020c1c:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8020c20:	e072      	b.n	8020d08 <PCD_EP_ISR_Handler+0x156>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);

        if ((wEPVal & USB_EP_SETUP) != 0U)
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8020c22:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8020c26:	f895 2128 	ldrb.w	r2, [r5, #296]	; 0x128
 8020c2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020c2e:	3306      	adds	r3, #6
 8020c30:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020c34:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8020c38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8020c3c:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8020c40:	f8b5 212e 	ldrh.w	r2, [r5, #302]	; 0x12e
 8020c44:	f505 710c 	add.w	r1, r5, #560	; 0x230
 8020c48:	f000 ff68 	bl	8021b1c <USB_ReadPMA>
                      ep->pmaadress, (uint16_t)ep->xfer_count);

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8020c4c:	682a      	ldr	r2, [r5, #0]
 8020c4e:	8813      	ldrh	r3, [r2, #0]
 8020c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020c54:	051b      	lsls	r3, r3, #20
 8020c56:	0d1b      	lsrs	r3, r3, #20
 8020c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020c5c:	8013      	strh	r3, [r2, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8020c5e:	4628      	mov	r0, r5
 8020c60:	f7e8 fd96 	bl	8009790 <HAL_PCD_SetupStageCallback>
 8020c64:	e050      	b.n	8020d08 <PCD_EP_ISR_Handler+0x156>
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8020c66:	2a3e      	cmp	r2, #62	; 0x3e
 8020c68:	d808      	bhi.n	8020c7c <PCD_EP_ISR_Handler+0xca>
 8020c6a:	0851      	lsrs	r1, r2, #1
 8020c6c:	f012 0f01 	tst.w	r2, #1
 8020c70:	d000      	beq.n	8020c74 <PCD_EP_ISR_Handler+0xc2>
 8020c72:	3101      	adds	r1, #1
 8020c74:	0289      	lsls	r1, r1, #10
 8020c76:	f8a3 140c 	strh.w	r1, [r3, #1036]	; 0x40c
 8020c7a:	e09d      	b.n	8020db8 <PCD_EP_ISR_Handler+0x206>
 8020c7c:	0951      	lsrs	r1, r2, #5
 8020c7e:	f012 0f1f 	tst.w	r2, #31
 8020c82:	d100      	bne.n	8020c86 <PCD_EP_ISR_Handler+0xd4>
 8020c84:	3901      	subs	r1, #1
 8020c86:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8020c8a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8020c8e:	f8a3 140c 	strh.w	r1, [r3, #1036]	; 0x40c
 8020c92:	e091      	b.n	8020db8 <PCD_EP_ISR_Handler+0x206>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8020c94:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8020c98:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8020c9a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8020c9e:	f040 809a 	bne.w	8020dd6 <PCD_EP_ISR_Handler+0x224>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8020ca2:	f017 0f80 	tst.w	r7, #128	; 0x80
 8020ca6:	d02f      	beq.n	8020d08 <PCD_EP_ISR_Handler+0x156>
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8020ca8:	682a      	ldr	r2, [r5, #0]
 8020caa:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8020cae:	b29b      	uxth	r3, r3
 8020cb0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8020cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020cb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8020cbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8020cc0:	b29b      	uxth	r3, r3
 8020cc2:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8020cc6:	682a      	ldr	r2, [r5, #0]
 8020cc8:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8020ccc:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 8020cd0:	f891 0028 	ldrb.w	r0, [r1, #40]	; 0x28
 8020cd4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8020cd8:	3302      	adds	r3, #2
 8020cda:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020cde:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 8020ce2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8020ce6:	1ca3      	adds	r3, r4, #2
 8020ce8:	0158      	lsls	r0, r3, #5
 8020cea:	eb05 1343 	add.w	r3, r5, r3, lsl #5
 8020cee:	605a      	str	r2, [r3, #4]
        ep->xfer_buff += ep->xfer_count;
 8020cf0:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8020cf2:	441a      	add	r2, r3
 8020cf4:	63ca      	str	r2, [r1, #60]	; 0x3c

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8020cf6:	582b      	ldr	r3, [r5, r0]
 8020cf8:	2b00      	cmp	r3, #0
 8020cfa:	f040 8106 	bne.w	8020f0a <PCD_EP_ISR_Handler+0x358>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8020cfe:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8020d02:	4628      	mov	r0, r5
 8020d04:	f7fb f801 	bl	801bd0a <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8020d08:	6828      	ldr	r0, [r5, #0]
 8020d0a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8020d0e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8020d12:	f000 8102 	beq.w	8020f1a <PCD_EP_ISR_Handler+0x368>
    wIstr = hpcd->Instance->ISTR;
 8020d16:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
 8020d1a:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 8020d1c:	f014 040f 	ands.w	r4, r4, #15
 8020d20:	d1b8      	bne.n	8020c94 <PCD_EP_ISR_Handler+0xe2>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8020d22:	f013 0f10 	tst.w	r3, #16
 8020d26:	f43f af47 	beq.w	8020bb8 <PCD_EP_ISR_Handler+0x6>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8020d2a:	8803      	ldrh	r3, [r0, #0]
 8020d2c:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8020d2e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8020d32:	f47f af76 	bne.w	8020c22 <PCD_EP_ISR_Handler+0x70>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8020d36:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8020d3a:	d0e5      	beq.n	8020d08 <PCD_EP_ISR_Handler+0x156>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8020d3c:	8803      	ldrh	r3, [r0, #0]
 8020d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020d42:	051b      	lsls	r3, r3, #20
 8020d44:	0d1b      	lsrs	r3, r3, #20
 8020d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020d4a:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8020d4c:	6828      	ldr	r0, [r5, #0]
 8020d4e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8020d52:	f895 2128 	ldrb.w	r2, [r5, #296]	; 0x128
 8020d56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020d5a:	3306      	adds	r3, #6
 8020d5c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020d60:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8020d64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8020d68:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8020d6c:	b18b      	cbz	r3, 8020d92 <PCD_EP_ISR_Handler+0x1e0>
 8020d6e:	f8d5 113c 	ldr.w	r1, [r5, #316]	; 0x13c
 8020d72:	b171      	cbz	r1, 8020d92 <PCD_EP_ISR_Handler+0x1e0>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8020d74:	f8b5 212e 	ldrh.w	r2, [r5, #302]	; 0x12e
 8020d78:	f000 fed0 	bl	8021b1c <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8020d7c:	f8d5 2144 	ldr.w	r2, [r5, #324]	; 0x144
 8020d80:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
 8020d84:	4413      	add	r3, r2
 8020d86:	f8c5 313c 	str.w	r3, [r5, #316]	; 0x13c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8020d8a:	2100      	movs	r1, #0
 8020d8c:	4628      	mov	r0, r5
 8020d8e:	f7fa ffa8 	bl	801bce2 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8020d92:	682b      	ldr	r3, [r5, #0]
 8020d94:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8020d98:	4413      	add	r3, r2
 8020d9a:	f8d5 2138 	ldr.w	r2, [r5, #312]	; 0x138
 8020d9e:	2a00      	cmp	r2, #0
 8020da0:	f47f af61 	bne.w	8020c66 <PCD_EP_ISR_Handler+0xb4>
 8020da4:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8020da8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8020dac:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8020db0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8020db4:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8020db8:	682a      	ldr	r2, [r5, #0]
 8020dba:	8813      	ldrh	r3, [r2, #0]
 8020dbc:	b29b      	uxth	r3, r3
 8020dbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8020dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020dc6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8020dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8020dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020dd2:	8013      	strh	r3, [r2, #0]
 8020dd4:	e798      	b.n	8020d08 <PCD_EP_ISR_Handler+0x156>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8020dd6:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8020dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020dde:	051b      	lsls	r3, r3, #20
 8020de0:	0d1b      	lsrs	r3, r3, #20
 8020de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020de6:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if (ep->doublebuffer == 0U)
 8020dea:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 8020dee:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 8020df2:	b9d3      	cbnz	r3, 8020e2a <PCD_EP_ISR_Handler+0x278>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8020df4:	6828      	ldr	r0, [r5, #0]
 8020df6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8020dfa:	eb05 1244 	add.w	r2, r5, r4, lsl #5
 8020dfe:	f892 2128 	ldrb.w	r2, [r2, #296]	; 0x128
 8020e02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020e06:	3306      	adds	r3, #6
 8020e08:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020e0c:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 8020e10:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 8020e14:	b38e      	cbz	r6, 8020e7a <PCD_EP_ISR_Handler+0x2c8>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8020e16:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 8020e1a:	4633      	mov	r3, r6
 8020e1c:	f8b1 212e 	ldrh.w	r2, [r1, #302]	; 0x12e
 8020e20:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8020e24:	f000 fe7a 	bl	8021b1c <USB_ReadPMA>
 8020e28:	e027      	b.n	8020e7a <PCD_EP_ISR_Handler+0x2c8>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8020e2a:	6828      	ldr	r0, [r5, #0]
 8020e2c:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 8020e30:	f893 2128 	ldrb.w	r2, [r3, #296]	; 0x128
 8020e34:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8020e38:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8020e3c:	d046      	beq.n	8020ecc <PCD_EP_ISR_Handler+0x31a>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8020e3e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8020e42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020e46:	3302      	adds	r3, #2
 8020e48:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020e4c:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 8020e50:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8020e54:	bb86      	cbnz	r6, 8020eb8 <PCD_EP_ISR_Handler+0x306>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8020e56:	682a      	ldr	r2, [r5, #0]
 8020e58:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 8020e5c:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 8020e60:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8020e64:	b29b      	uxth	r3, r3
 8020e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8020e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020e6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8020e72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8020e76:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        ep->xfer_count += count;
 8020e7a:	f104 030a 	add.w	r3, r4, #10
 8020e7e:	0159      	lsls	r1, r3, #5
 8020e80:	eb05 1343 	add.w	r3, r5, r3, lsl #5
 8020e84:	685a      	ldr	r2, [r3, #4]
 8020e86:	4432      	add	r2, r6
 8020e88:	605a      	str	r2, [r3, #4]
        ep->xfer_buff += count;
 8020e8a:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 8020e8e:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8020e92:	4432      	add	r2, r6
 8020e94:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8020e98:	586b      	ldr	r3, [r5, r1]
 8020e9a:	b12b      	cbz	r3, 8020ea8 <PCD_EP_ISR_Handler+0x2f6>
 8020e9c:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 8020ea0:	f8d1 1138 	ldr.w	r1, [r1, #312]	; 0x138
 8020ea4:	428e      	cmp	r6, r1
 8020ea6:	d228      	bcs.n	8020efa <PCD_EP_ISR_Handler+0x348>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8020ea8:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 8020eac:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 8020eb0:	4628      	mov	r0, r5
 8020eb2:	f7fa ff16 	bl	801bce2 <HAL_PCD_DataOutStageCallback>
 8020eb6:	e6f4      	b.n	8020ca2 <PCD_EP_ISR_Handler+0xf0>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8020eb8:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 8020ebc:	4633      	mov	r3, r6
 8020ebe:	f8b1 2130 	ldrh.w	r2, [r1, #304]	; 0x130
 8020ec2:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8020ec6:	f000 fe29 	bl	8021b1c <USB_ReadPMA>
 8020eca:	e7c4      	b.n	8020e56 <PCD_EP_ISR_Handler+0x2a4>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8020ecc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8020ed0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020ed4:	3306      	adds	r3, #6
 8020ed6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020eda:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 8020ede:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8020ee2:	2e00      	cmp	r6, #0
 8020ee4:	d0b7      	beq.n	8020e56 <PCD_EP_ISR_Handler+0x2a4>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8020ee6:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 8020eea:	4633      	mov	r3, r6
 8020eec:	f8b1 2132 	ldrh.w	r2, [r1, #306]	; 0x132
 8020ef0:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8020ef4:	f000 fe12 	bl	8021b1c <USB_ReadPMA>
 8020ef8:	e7ad      	b.n	8020e56 <PCD_EP_ISR_Handler+0x2a4>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8020efa:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 8020efe:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
 8020f02:	4628      	mov	r0, r5
 8020f04:	f7ff fe0f 	bl	8020b26 <HAL_PCD_EP_Receive>
 8020f08:	e6cb      	b.n	8020ca2 <PCD_EP_ISR_Handler+0xf0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8020f0a:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 8020f0e:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8020f12:	4628      	mov	r0, r5
 8020f14:	f7ff fe2e 	bl	8020b74 <HAL_PCD_EP_Transmit>
 8020f18:	e6f6      	b.n	8020d08 <PCD_EP_ISR_Handler+0x156>
        }
      }
    }
  }
  return HAL_OK;
}
 8020f1a:	2000      	movs	r0, #0
 8020f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08020f1e <HAL_PCD_IRQHandler>:
{
 8020f1e:	b510      	push	{r4, lr}
 8020f20:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8020f22:	6800      	ldr	r0, [r0, #0]
 8020f24:	f000 fc71 	bl	802180a <USB_ReadInterrupts>
 8020f28:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8020f2c:	d145      	bne.n	8020fba <HAL_PCD_IRQHandler+0x9c>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8020f2e:	6820      	ldr	r0, [r4, #0]
 8020f30:	f000 fc6b 	bl	802180a <USB_ReadInterrupts>
 8020f34:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8020f38:	d143      	bne.n	8020fc2 <HAL_PCD_IRQHandler+0xa4>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8020f3a:	6820      	ldr	r0, [r4, #0]
 8020f3c:	f000 fc65 	bl	802180a <USB_ReadInterrupts>
 8020f40:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8020f44:	d008      	beq.n	8020f58 <HAL_PCD_IRQHandler+0x3a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8020f46:	6822      	ldr	r2, [r4, #0]
 8020f48:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8020f4c:	b29b      	uxth	r3, r3
 8020f4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8020f52:	b29b      	uxth	r3, r3
 8020f54:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8020f58:	6820      	ldr	r0, [r4, #0]
 8020f5a:	f000 fc56 	bl	802180a <USB_ReadInterrupts>
 8020f5e:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8020f62:	d008      	beq.n	8020f76 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8020f64:	6822      	ldr	r2, [r4, #0]
 8020f66:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8020f6a:	b29b      	uxth	r3, r3
 8020f6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8020f70:	b29b      	uxth	r3, r3
 8020f72:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8020f76:	6820      	ldr	r0, [r4, #0]
 8020f78:	f000 fc47 	bl	802180a <USB_ReadInterrupts>
 8020f7c:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8020f80:	d130      	bne.n	8020fe4 <HAL_PCD_IRQHandler+0xc6>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8020f82:	6820      	ldr	r0, [r4, #0]
 8020f84:	f000 fc41 	bl	802180a <USB_ReadInterrupts>
 8020f88:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8020f8c:	d149      	bne.n	8021022 <HAL_PCD_IRQHandler+0x104>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8020f8e:	6820      	ldr	r0, [r4, #0]
 8020f90:	f000 fc3b 	bl	802180a <USB_ReadInterrupts>
 8020f94:	f410 7f00 	tst.w	r0, #512	; 0x200
 8020f98:	d164      	bne.n	8021064 <HAL_PCD_IRQHandler+0x146>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8020f9a:	6820      	ldr	r0, [r4, #0]
 8020f9c:	f000 fc35 	bl	802180a <USB_ReadInterrupts>
 8020fa0:	f410 7f80 	tst.w	r0, #256	; 0x100
 8020fa4:	d008      	beq.n	8020fb8 <HAL_PCD_IRQHandler+0x9a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8020fa6:	6822      	ldr	r2, [r4, #0]
 8020fa8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8020fac:	b29b      	uxth	r3, r3
 8020fae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8020fb2:	b29b      	uxth	r3, r3
 8020fb4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8020fb8:	bd10      	pop	{r4, pc}
    (void)PCD_EP_ISR_Handler(hpcd);
 8020fba:	4620      	mov	r0, r4
 8020fbc:	f7ff fdf9 	bl	8020bb2 <PCD_EP_ISR_Handler>
 8020fc0:	e7b5      	b.n	8020f2e <HAL_PCD_IRQHandler+0x10>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8020fc2:	6822      	ldr	r2, [r4, #0]
 8020fc4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8020fc8:	b29b      	uxth	r3, r3
 8020fca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8020fce:	b29b      	uxth	r3, r3
 8020fd0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8020fd4:	4620      	mov	r0, r4
 8020fd6:	f7e8 fb9b 	bl	8009710 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8020fda:	2100      	movs	r1, #0
 8020fdc:	4620      	mov	r0, r4
 8020fde:	f7ff fd28 	bl	8020a32 <HAL_PCD_SetAddress>
 8020fe2:	e7aa      	b.n	8020f3a <HAL_PCD_IRQHandler+0x1c>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8020fe4:	6822      	ldr	r2, [r4, #0]
 8020fe6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8020fea:	b29b      	uxth	r3, r3
 8020fec:	f023 0304 	bic.w	r3, r3, #4
 8020ff0:	b29b      	uxth	r3, r3
 8020ff2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8020ff6:	6822      	ldr	r2, [r4, #0]
 8020ff8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8020ffc:	b29b      	uxth	r3, r3
 8020ffe:	f023 0308 	bic.w	r3, r3, #8
 8021002:	b29b      	uxth	r3, r3
 8021004:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8021008:	4620      	mov	r0, r4
 802100a:	f7e8 fbb5 	bl	8009778 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 802100e:	6822      	ldr	r2, [r4, #0]
 8021010:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8021014:	b29b      	uxth	r3, r3
 8021016:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802101a:	b29b      	uxth	r3, r3
 802101c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8021020:	e7af      	b.n	8020f82 <HAL_PCD_IRQHandler+0x64>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8021022:	6822      	ldr	r2, [r4, #0]
 8021024:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8021028:	f043 0308 	orr.w	r3, r3, #8
 802102c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8021030:	6822      	ldr	r2, [r4, #0]
 8021032:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8021036:	b29b      	uxth	r3, r3
 8021038:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802103c:	b29b      	uxth	r3, r3
 802103e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8021042:	6822      	ldr	r2, [r4, #0]
 8021044:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8021048:	f043 0304 	orr.w	r3, r3, #4
 802104c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8021050:	6820      	ldr	r0, [r4, #0]
 8021052:	f000 fbda 	bl	802180a <USB_ReadInterrupts>
 8021056:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 802105a:	d198      	bne.n	8020f8e <HAL_PCD_IRQHandler+0x70>
      HAL_PCD_SuspendCallback(hpcd);
 802105c:	4620      	mov	r0, r4
 802105e:	f7e8 fb7f 	bl	8009760 <HAL_PCD_SuspendCallback>
 8021062:	e794      	b.n	8020f8e <HAL_PCD_IRQHandler+0x70>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8021064:	6822      	ldr	r2, [r4, #0]
 8021066:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 802106a:	b29b      	uxth	r3, r3
 802106c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8021070:	b29b      	uxth	r3, r3
 8021072:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8021076:	4620      	mov	r0, r4
 8021078:	f7ff fcda 	bl	8020a30 <HAL_PCD_SOFCallback>
 802107c:	e78d      	b.n	8020f9a <HAL_PCD_IRQHandler+0x7c>

0802107e <HAL_PCD_EP_SetStall>:
{
 802107e:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8021080:	f001 0507 	and.w	r5, r1, #7
 8021084:	6843      	ldr	r3, [r0, #4]
 8021086:	429d      	cmp	r5, r3
 8021088:	d82c      	bhi.n	80210e4 <HAL_PCD_EP_SetStall+0x66>
 802108a:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 802108c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8021090:	d119      	bne.n	80210c6 <HAL_PCD_EP_SetStall+0x48>
    ep = &hpcd->OUT_ep[ep_addr];
 8021092:	014b      	lsls	r3, r1, #5
 8021094:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8021098:	4401      	add	r1, r0
    ep->is_in = 0U;
 802109a:	4403      	add	r3, r0
 802109c:	2200      	movs	r2, #0
 802109e:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
  ep->is_stall = 1U;
 80210a2:	2301      	movs	r3, #1
 80210a4:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80210a6:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 80210a8:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 80210ac:	2b01      	cmp	r3, #1
 80210ae:	d01b      	beq.n	80210e8 <HAL_PCD_EP_SetStall+0x6a>
 80210b0:	2301      	movs	r3, #1
 80210b2:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80210b6:	6820      	ldr	r0, [r4, #0]
 80210b8:	f000 fb29 	bl	802170e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80210bc:	b165      	cbz	r5, 80210d8 <HAL_PCD_EP_SetStall+0x5a>
  __HAL_UNLOCK(hpcd);
 80210be:	2000      	movs	r0, #0
 80210c0:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 80210c4:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80210c6:	016b      	lsls	r3, r5, #5
 80210c8:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80210cc:	4401      	add	r1, r0
    ep->is_in = 1U;
 80210ce:	4403      	add	r3, r0
 80210d0:	2201      	movs	r2, #1
 80210d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80210d6:	e7e4      	b.n	80210a2 <HAL_PCD_EP_SetStall+0x24>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80210d8:	f504 710c 	add.w	r1, r4, #560	; 0x230
 80210dc:	6820      	ldr	r0, [r4, #0]
 80210de:	f000 fb97 	bl	8021810 <USB_EP0_OutStart>
 80210e2:	e7ec      	b.n	80210be <HAL_PCD_EP_SetStall+0x40>
    return HAL_ERROR;
 80210e4:	2001      	movs	r0, #1
 80210e6:	e7ed      	b.n	80210c4 <HAL_PCD_EP_SetStall+0x46>
  __HAL_LOCK(hpcd);
 80210e8:	2002      	movs	r0, #2
 80210ea:	e7eb      	b.n	80210c4 <HAL_PCD_EP_SetStall+0x46>

080210ec <HAL_PCD_EP_ClrStall>:
{
 80210ec:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80210ee:	f001 010f 	and.w	r1, r1, #15
 80210f2:	6842      	ldr	r2, [r0, #4]
 80210f4:	4291      	cmp	r1, r2
 80210f6:	d82c      	bhi.n	8021152 <HAL_PCD_EP_ClrStall+0x66>
{
 80210f8:	b510      	push	{r4, lr}
 80210fa:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80210fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8021100:	d11c      	bne.n	802113c <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8021102:	f003 0207 	and.w	r2, r3, #7
 8021106:	0152      	lsls	r2, r2, #5
 8021108:	f502 7194 	add.w	r1, r2, #296	; 0x128
 802110c:	4401      	add	r1, r0
    ep->is_in = 0U;
 802110e:	4402      	add	r2, r0
 8021110:	2000      	movs	r0, #0
 8021112:	f882 0129 	strb.w	r0, [r2, #297]	; 0x129
  ep->is_stall = 0U;
 8021116:	2200      	movs	r2, #0
 8021118:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 802111a:	f003 0307 	and.w	r3, r3, #7
 802111e:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8021120:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8021124:	2b01      	cmp	r3, #1
 8021126:	d016      	beq.n	8021156 <HAL_PCD_EP_ClrStall+0x6a>
 8021128:	2301      	movs	r3, #1
 802112a:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 802112e:	6820      	ldr	r0, [r4, #0]
 8021130:	f000 fb12 	bl	8021758 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8021134:	2000      	movs	r0, #0
 8021136:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 802113a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 802113c:	f003 0207 	and.w	r2, r3, #7
 8021140:	0152      	lsls	r2, r2, #5
 8021142:	f102 0128 	add.w	r1, r2, #40	; 0x28
 8021146:	4401      	add	r1, r0
    ep->is_in = 1U;
 8021148:	4402      	add	r2, r0
 802114a:	2001      	movs	r0, #1
 802114c:	f882 0029 	strb.w	r0, [r2, #41]	; 0x29
 8021150:	e7e1      	b.n	8021116 <HAL_PCD_EP_ClrStall+0x2a>
    return HAL_ERROR;
 8021152:	2001      	movs	r0, #1
}
 8021154:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8021156:	2002      	movs	r0, #2
 8021158:	e7ef      	b.n	802113a <HAL_PCD_EP_ClrStall+0x4e>

0802115a <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 802115a:	f011 0f80 	tst.w	r1, #128	; 0x80
 802115e:	d009      	beq.n	8021174 <HAL_PCDEx_PMAConfig+0x1a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8021160:	f001 0107 	and.w	r1, r1, #7
 8021164:	0149      	lsls	r1, r1, #5
 8021166:	3128      	adds	r1, #40	; 0x28
 8021168:	4401      	add	r1, r0
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 802116a:	b942      	cbnz	r2, 802117e <HAL_PCDEx_PMAConfig+0x24>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 802116c:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 802116e:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8021170:	2000      	movs	r0, #0
 8021172:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8021174:	0149      	lsls	r1, r1, #5
 8021176:	f501 7194 	add.w	r1, r1, #296	; 0x128
 802117a:	4401      	add	r1, r0
 802117c:	e7f5      	b.n	802116a <HAL_PCDEx_PMAConfig+0x10>
    ep->doublebuffer = 1U;
 802117e:	2201      	movs	r2, #1
 8021180:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8021182:	810b      	strh	r3, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8021184:	0c1b      	lsrs	r3, r3, #16
 8021186:	814b      	strh	r3, [r1, #10]
 8021188:	e7f2      	b.n	8021170 <HAL_PCDEx_PMAConfig+0x16>

0802118a <HAL_PCDEx_SetConnectionState>:
  UNUSED(hpcd);
  UNUSED(state);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCDEx_SetConnectionState could be implemented in the user file
   */
}
 802118a:	4770      	bx	lr

0802118c <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 802118c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8021190:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8021194:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8021198:	2000      	movs	r0, #0
 802119a:	4770      	bx	lr

0802119c <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 802119c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80211a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80211a4:	045b      	lsls	r3, r3, #17
 80211a6:	0c5b      	lsrs	r3, r3, #17
 80211a8:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80211ac:	2000      	movs	r0, #0
 80211ae:	4770      	bx	lr

080211b0 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80211b0:	b084      	sub	sp, #16
 80211b2:	b538      	push	{r3, r4, r5, lr}
 80211b4:	ad05      	add	r5, sp, #20
 80211b6:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80211ba:	2301      	movs	r3, #1
 80211bc:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80211c0:	2500      	movs	r5, #0
 80211c2:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80211c6:	f8a0 5044 	strh.w	r5, [r0, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80211ca:	f8a0 5050 	strh.w	r5, [r0, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80211ce:	f7ff ffdd 	bl	802118c <USB_EnableGlobalInt>

  return HAL_OK;
}
 80211d2:	4628      	mov	r0, r5
 80211d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80211d8:	b004      	add	sp, #16
 80211da:	4770      	bx	lr

080211dc <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80211dc:	b430      	push	{r4, r5}
 80211de:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80211e0:	780a      	ldrb	r2, [r1, #0]
 80211e2:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 80211e6:	b2a4      	uxth	r4, r4
 80211e8:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 80211ec:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 80211f0:	b2a4      	uxth	r4, r4

  /* initialize Endpoint */
  switch (ep->type)
 80211f2:	78c8      	ldrb	r0, [r1, #3]
 80211f4:	2803      	cmp	r0, #3
 80211f6:	d85a      	bhi.n	80212ae <USB_ActivateEndpoint+0xd2>
 80211f8:	e8df f000 	tbb	[pc, r0]
 80211fc:	5102554e 	.word	0x5102554e
 8021200:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8021202:	f248 0580 	movw	r5, #32896	; 0x8080
 8021206:	432c      	orrs	r4, r5
 8021208:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 802120c:	780c      	ldrb	r4, [r1, #0]
 802120e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8021212:	b212      	sxth	r2, r2
 8021214:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8021218:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 802121c:	4322      	orrs	r2, r4
 802121e:	b292      	uxth	r2, r2
 8021220:	432a      	orrs	r2, r5
 8021222:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  if (ep->doublebuffer == 0U)
 8021226:	7b0a      	ldrb	r2, [r1, #12]
 8021228:	2a00      	cmp	r2, #0
 802122a:	f040 80aa 	bne.w	8021382 <USB_ActivateEndpoint+0x1a6>
  {
    if (ep->is_in != 0U)
 802122e:	784a      	ldrb	r2, [r1, #1]
 8021230:	2a00      	cmp	r2, #0
 8021232:	d04d      	beq.n	80212d0 <USB_ActivateEndpoint+0xf4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8021234:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8021238:	441a      	add	r2, r3
 802123a:	780c      	ldrb	r4, [r1, #0]
 802123c:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8021240:	88cc      	ldrh	r4, [r1, #6]
 8021242:	0864      	lsrs	r4, r4, #1
 8021244:	0064      	lsls	r4, r4, #1
 8021246:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 802124a:	780c      	ldrb	r4, [r1, #0]
 802124c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8021250:	f012 0f40 	tst.w	r2, #64	; 0x40
 8021254:	d00c      	beq.n	8021270 <USB_ActivateEndpoint+0x94>
 8021256:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 802125a:	b292      	uxth	r2, r2
 802125c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8021260:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8021264:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8021268:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 802126c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8021270:	78ca      	ldrb	r2, [r1, #3]
 8021272:	2a01      	cmp	r2, #1
 8021274:	d01d      	beq.n	80212b2 <USB_ActivateEndpoint+0xd6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8021276:	7809      	ldrb	r1, [r1, #0]
 8021278:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 802127c:	b292      	uxth	r2, r2
 802127e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8021282:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8021286:	f082 0220 	eor.w	r2, r2, #32
 802128a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802128e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8021292:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8021296:	e05b      	b.n	8021350 <USB_ActivateEndpoint+0x174>
      wEpRegVal |= USB_EP_CONTROL;
 8021298:	f444 7400 	orr.w	r4, r4, #512	; 0x200
      break;
 802129c:	e7b1      	b.n	8021202 <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_INTERRUPT;
 802129e:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 80212a2:	2000      	movs	r0, #0
      break;
 80212a4:	e7ad      	b.n	8021202 <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80212a6:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 80212aa:	2000      	movs	r0, #0
      break;
 80212ac:	e7a9      	b.n	8021202 <USB_ActivateEndpoint+0x26>
      ret = HAL_ERROR;
 80212ae:	2001      	movs	r0, #1
 80212b0:	e7a7      	b.n	8021202 <USB_ActivateEndpoint+0x26>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80212b2:	7809      	ldrb	r1, [r1, #0]
 80212b4:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80212b8:	b292      	uxth	r2, r2
 80212ba:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80212be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80212c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80212c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80212ca:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80212ce:	e03f      	b.n	8021350 <USB_ActivateEndpoint+0x174>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80212d0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80212d4:	441a      	add	r2, r3
 80212d6:	780c      	ldrb	r4, [r1, #0]
 80212d8:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80212dc:	88cc      	ldrh	r4, [r1, #6]
 80212de:	0864      	lsrs	r4, r4, #1
 80212e0:	0064      	lsls	r4, r4, #1
 80212e2:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80212e6:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80212ea:	441a      	add	r2, r3
 80212ec:	780c      	ldrb	r4, [r1, #0]
 80212ee:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80212f2:	690c      	ldr	r4, [r1, #16]
 80212f4:	bb74      	cbnz	r4, 8021354 <USB_ActivateEndpoint+0x178>
 80212f6:	f8b2 440c 	ldrh.w	r4, [r2, #1036]	; 0x40c
 80212fa:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 80212fe:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8021302:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8021306:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 802130a:	780c      	ldrb	r4, [r1, #0]
 802130c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8021310:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8021314:	d00c      	beq.n	8021330 <USB_ActivateEndpoint+0x154>
 8021316:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 802131a:	b292      	uxth	r2, r2
 802131c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8021320:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8021324:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8021328:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802132c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8021330:	7809      	ldrb	r1, [r1, #0]
 8021332:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8021336:	b292      	uxth	r2, r2
 8021338:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 802133c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8021340:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8021344:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8021348:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802134c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8021350:	bc30      	pop	{r4, r5}
 8021352:	4770      	bx	lr
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8021354:	2c3e      	cmp	r4, #62	; 0x3e
 8021356:	d808      	bhi.n	802136a <USB_ActivateEndpoint+0x18e>
 8021358:	0865      	lsrs	r5, r4, #1
 802135a:	f014 0f01 	tst.w	r4, #1
 802135e:	d000      	beq.n	8021362 <USB_ActivateEndpoint+0x186>
 8021360:	3501      	adds	r5, #1
 8021362:	02ad      	lsls	r5, r5, #10
 8021364:	f8a2 540c 	strh.w	r5, [r2, #1036]	; 0x40c
 8021368:	e7cf      	b.n	802130a <USB_ActivateEndpoint+0x12e>
 802136a:	0965      	lsrs	r5, r4, #5
 802136c:	f014 0f1f 	tst.w	r4, #31
 8021370:	d100      	bne.n	8021374 <USB_ActivateEndpoint+0x198>
 8021372:	3d01      	subs	r5, #1
 8021374:	ea6f 65c5 	mvn.w	r5, r5, lsl #27
 8021378:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 802137c:	f8a2 540c 	strh.w	r5, [r2, #1036]	; 0x40c
 8021380:	e7c3      	b.n	802130a <USB_ActivateEndpoint+0x12e>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8021382:	780c      	ldrb	r4, [r1, #0]
 8021384:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8021388:	b292      	uxth	r2, r2
 802138a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 802138e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8021392:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8021396:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802139a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 802139e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80213a2:	441a      	add	r2, r3
 80213a4:	780c      	ldrb	r4, [r1, #0]
 80213a6:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80213aa:	890c      	ldrh	r4, [r1, #8]
 80213ac:	0864      	lsrs	r4, r4, #1
 80213ae:	0064      	lsls	r4, r4, #1
 80213b0:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
 80213b4:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80213b8:	441a      	add	r2, r3
 80213ba:	780c      	ldrb	r4, [r1, #0]
 80213bc:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80213c0:	894c      	ldrh	r4, [r1, #10]
 80213c2:	0864      	lsrs	r4, r4, #1
 80213c4:	0064      	lsls	r4, r4, #1
 80213c6:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408
    if (ep->is_in == 0U)
 80213ca:	784a      	ldrb	r2, [r1, #1]
 80213cc:	2a00      	cmp	r2, #0
 80213ce:	d14e      	bne.n	802146e <USB_ActivateEndpoint+0x292>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80213d0:	780c      	ldrb	r4, [r1, #0]
 80213d2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80213d6:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80213da:	d00c      	beq.n	80213f6 <USB_ActivateEndpoint+0x21a>
 80213dc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80213e0:	b292      	uxth	r2, r2
 80213e2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80213e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80213ea:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80213ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80213f2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80213f6:	780c      	ldrb	r4, [r1, #0]
 80213f8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80213fc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8021400:	d00c      	beq.n	802141c <USB_ActivateEndpoint+0x240>
 8021402:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8021406:	b292      	uxth	r2, r2
 8021408:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 802140c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8021410:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8021414:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8021418:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 802141c:	780c      	ldrb	r4, [r1, #0]
 802141e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8021422:	b292      	uxth	r2, r2
 8021424:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8021428:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 802142c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8021430:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8021434:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8021438:	780d      	ldrb	r5, [r1, #0]
 802143a:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 802143e:	b292      	uxth	r2, r2
 8021440:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8021444:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8021448:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 802144c:	f248 0480 	movw	r4, #32896	; 0x8080
 8021450:	4322      	orrs	r2, r4
 8021452:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8021456:	7809      	ldrb	r1, [r1, #0]
 8021458:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 802145c:	b292      	uxth	r2, r2
 802145e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8021462:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8021466:	4322      	orrs	r2, r4
 8021468:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 802146c:	e770      	b.n	8021350 <USB_ActivateEndpoint+0x174>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 802146e:	780c      	ldrb	r4, [r1, #0]
 8021470:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8021474:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8021478:	d00c      	beq.n	8021494 <USB_ActivateEndpoint+0x2b8>
 802147a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 802147e:	b292      	uxth	r2, r2
 8021480:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8021484:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8021488:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 802148c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8021490:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8021494:	780c      	ldrb	r4, [r1, #0]
 8021496:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 802149a:	f012 0f40 	tst.w	r2, #64	; 0x40
 802149e:	d00c      	beq.n	80214ba <USB_ActivateEndpoint+0x2de>
 80214a0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80214a4:	b292      	uxth	r2, r2
 80214a6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80214aa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80214ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80214b2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80214b6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80214ba:	780c      	ldrb	r4, [r1, #0]
 80214bc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80214c0:	b292      	uxth	r2, r2
 80214c2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80214c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80214ca:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80214ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80214d2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 80214d6:	78ca      	ldrb	r2, [r1, #3]
 80214d8:	2a01      	cmp	r2, #1
 80214da:	d01e      	beq.n	802151a <USB_ActivateEndpoint+0x33e>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80214dc:	780c      	ldrb	r4, [r1, #0]
 80214de:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80214e2:	b292      	uxth	r2, r2
 80214e4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80214e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80214ec:	f082 0220 	eor.w	r2, r2, #32
 80214f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80214f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80214f8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80214fc:	7809      	ldrb	r1, [r1, #0]
 80214fe:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8021502:	b292      	uxth	r2, r2
 8021504:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8021508:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 802150c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8021510:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8021514:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8021518:	e71a      	b.n	8021350 <USB_ActivateEndpoint+0x174>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 802151a:	780c      	ldrb	r4, [r1, #0]
 802151c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8021520:	b292      	uxth	r2, r2
 8021522:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8021526:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802152a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802152e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8021532:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8021536:	e7e1      	b.n	80214fc <USB_ActivateEndpoint+0x320>

08021538 <USB_DeactivateEndpoint>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8021538:	7b0b      	ldrb	r3, [r1, #12]
 802153a:	2b00      	cmp	r3, #0
 802153c:	d146      	bne.n	80215cc <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 802153e:	784b      	ldrb	r3, [r1, #1]
 8021540:	b313      	cbz	r3, 8021588 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8021542:	780a      	ldrb	r2, [r1, #0]
 8021544:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8021548:	f013 0f40 	tst.w	r3, #64	; 0x40
 802154c:	d00c      	beq.n	8021568 <USB_DeactivateEndpoint+0x30>
 802154e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8021552:	b29b      	uxth	r3, r3
 8021554:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8021558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802155c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8021560:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8021564:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8021568:	780a      	ldrb	r2, [r1, #0]
 802156a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 802156e:	b29b      	uxth	r3, r3
 8021570:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8021574:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8021578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802157c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021580:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8021584:	2000      	movs	r0, #0
 8021586:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8021588:	780a      	ldrb	r2, [r1, #0]
 802158a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 802158e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8021592:	d00c      	beq.n	80215ae <USB_DeactivateEndpoint+0x76>
 8021594:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8021598:	b29b      	uxth	r3, r3
 802159a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802159e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80215a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80215a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80215aa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80215ae:	780a      	ldrb	r2, [r1, #0]
 80215b0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80215b4:	b29b      	uxth	r3, r3
 80215b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80215ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80215be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80215c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80215c6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80215ca:	e7db      	b.n	8021584 <USB_DeactivateEndpoint+0x4c>
{
 80215cc:	b410      	push	{r4}
    if (ep->is_in == 0U)
 80215ce:	784b      	ldrb	r3, [r1, #1]
 80215d0:	2b00      	cmp	r3, #0
 80215d2:	d14f      	bne.n	8021674 <USB_DeactivateEndpoint+0x13c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80215d4:	780a      	ldrb	r2, [r1, #0]
 80215d6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80215da:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80215de:	d00c      	beq.n	80215fa <USB_DeactivateEndpoint+0xc2>
 80215e0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80215e4:	b29b      	uxth	r3, r3
 80215e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80215ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80215ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80215f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80215f6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80215fa:	780a      	ldrb	r2, [r1, #0]
 80215fc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8021600:	f013 0f40 	tst.w	r3, #64	; 0x40
 8021604:	d00c      	beq.n	8021620 <USB_DeactivateEndpoint+0xe8>
 8021606:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 802160a:	b29b      	uxth	r3, r3
 802160c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8021610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8021614:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8021618:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 802161c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8021620:	780a      	ldrb	r2, [r1, #0]
 8021622:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8021626:	b29b      	uxth	r3, r3
 8021628:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802162c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8021630:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8021634:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8021638:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 802163c:	780b      	ldrb	r3, [r1, #0]
 802163e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8021642:	b292      	uxth	r2, r2
 8021644:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8021648:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 802164c:	f248 0480 	movw	r4, #32896	; 0x8080
 8021650:	4322      	orrs	r2, r4
 8021652:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8021656:	780a      	ldrb	r2, [r1, #0]
 8021658:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 802165c:	b29b      	uxth	r3, r3
 802165e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8021662:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8021666:	4323      	orrs	r3, r4
 8021668:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 802166c:	2000      	movs	r0, #0
 802166e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021672:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8021674:	780a      	ldrb	r2, [r1, #0]
 8021676:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 802167a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 802167e:	d00c      	beq.n	802169a <USB_DeactivateEndpoint+0x162>
 8021680:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8021684:	b29b      	uxth	r3, r3
 8021686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802168a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802168e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8021692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021696:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 802169a:	780a      	ldrb	r2, [r1, #0]
 802169c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80216a0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80216a4:	d00c      	beq.n	80216c0 <USB_DeactivateEndpoint+0x188>
 80216a6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80216aa:	b29b      	uxth	r3, r3
 80216ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80216b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80216b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80216b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80216bc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80216c0:	780a      	ldrb	r2, [r1, #0]
 80216c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80216c6:	b29b      	uxth	r3, r3
 80216c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80216cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80216d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80216d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80216d8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80216dc:	780b      	ldrb	r3, [r1, #0]
 80216de:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80216e2:	b292      	uxth	r2, r2
 80216e4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80216e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80216ec:	f248 0480 	movw	r4, #32896	; 0x8080
 80216f0:	4322      	orrs	r2, r4
 80216f2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80216f6:	780a      	ldrb	r2, [r1, #0]
 80216f8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80216fc:	b29b      	uxth	r3, r3
 80216fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8021702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8021706:	4323      	orrs	r3, r4
 8021708:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 802170c:	e7ae      	b.n	802166c <USB_DeactivateEndpoint+0x134>

0802170e <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 802170e:	784b      	ldrb	r3, [r1, #1]
 8021710:	b18b      	cbz	r3, 8021736 <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8021712:	780a      	ldrb	r2, [r1, #0]
 8021714:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8021718:	b29b      	uxth	r3, r3
 802171a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802171e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8021722:	f083 0310 	eor.w	r3, r3, #16
 8021726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802172a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802172e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 8021732:	2000      	movs	r0, #0
 8021734:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8021736:	780a      	ldrb	r2, [r1, #0]
 8021738:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 802173c:	b29b      	uxth	r3, r3
 802173e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8021742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8021746:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 802174a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802174e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021752:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8021756:	e7ec      	b.n	8021732 <USB_EPSetStall+0x24>

08021758 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8021758:	7b0b      	ldrb	r3, [r1, #12]
 802175a:	2b00      	cmp	r3, #0
 802175c:	d14b      	bne.n	80217f6 <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 802175e:	784b      	ldrb	r3, [r1, #1]
 8021760:	b333      	cbz	r3, 80217b0 <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8021762:	780a      	ldrb	r2, [r1, #0]
 8021764:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8021768:	f013 0f40 	tst.w	r3, #64	; 0x40
 802176c:	d00c      	beq.n	8021788 <USB_EPClearStall+0x30>
 802176e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8021772:	b29b      	uxth	r3, r3
 8021774:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8021778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802177c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8021780:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8021784:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8021788:	78cb      	ldrb	r3, [r1, #3]
 802178a:	2b01      	cmp	r3, #1
 802178c:	d033      	beq.n	80217f6 <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 802178e:	780a      	ldrb	r2, [r1, #0]
 8021790:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8021794:	b29b      	uxth	r3, r3
 8021796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802179a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802179e:	f083 0320 	eor.w	r3, r3, #32
 80217a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80217a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80217aa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80217ae:	e022      	b.n	80217f6 <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80217b0:	780a      	ldrb	r2, [r1, #0]
 80217b2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80217b6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80217ba:	d00c      	beq.n	80217d6 <USB_EPClearStall+0x7e>
 80217bc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80217c0:	b29b      	uxth	r3, r3
 80217c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80217c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80217ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80217ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80217d2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80217d6:	780a      	ldrb	r2, [r1, #0]
 80217d8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80217dc:	b29b      	uxth	r3, r3
 80217de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80217e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80217e6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80217ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80217ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80217f2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 80217f6:	2000      	movs	r0, #0
 80217f8:	4770      	bx	lr

080217fa <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 80217fa:	b911      	cbnz	r1, 8021802 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80217fc:	2380      	movs	r3, #128	; 0x80
 80217fe:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8021802:	2000      	movs	r0, #0
 8021804:	4770      	bx	lr

08021806 <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8021806:	2000      	movs	r0, #0
 8021808:	4770      	bx	lr

0802180a <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 802180a:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 802180e:	4770      	bx	lr

08021810 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8021810:	2000      	movs	r0, #0
 8021812:	4770      	bx	lr

08021814 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8021814:	b410      	push	{r4}
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8021816:	1c5c      	adds	r4, r3, #1
 8021818:	0864      	lsrs	r4, r4, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 802181a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 802181e:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8021822:	b144      	cbz	r4, 8021836 <USB_WritePMA+0x22>
  {
    temp1 = *pBuf;
 8021824:	780b      	ldrb	r3, [r1, #0]
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8021826:	7848      	ldrb	r0, [r1, #1]
    *pdwVal = (uint16_t)temp2;
 8021828:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 802182c:	f822 3b04 	strh.w	r3, [r2], #4

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8021830:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 8021832:	3c01      	subs	r4, #1
 8021834:	e7f5      	b.n	8021822 <USB_WritePMA+0xe>
  }
}
 8021836:	f85d 4b04 	ldr.w	r4, [sp], #4
 802183a:	4770      	bx	lr

0802183c <USB_EPStartXfer>:
{
 802183c:	b570      	push	{r4, r5, r6, lr}
 802183e:	4605      	mov	r5, r0
 8021840:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8021842:	7849      	ldrb	r1, [r1, #1]
 8021844:	2901      	cmp	r1, #1
 8021846:	d02f      	beq.n	80218a8 <USB_EPStartXfer+0x6c>
    if (ep->xfer_len > ep->maxpacket)
 8021848:	69a2      	ldr	r2, [r4, #24]
 802184a:	6923      	ldr	r3, [r4, #16]
 802184c:	429a      	cmp	r2, r3
 802184e:	f240 80e9 	bls.w	8021a24 <USB_EPStartXfer+0x1e8>
      ep->xfer_len -= len;
 8021852:	1ad2      	subs	r2, r2, r3
 8021854:	61a2      	str	r2, [r4, #24]
    if (ep->doublebuffer == 0U)
 8021856:	7b22      	ldrb	r2, [r4, #12]
 8021858:	2a00      	cmp	r2, #0
 802185a:	f040 80fe 	bne.w	8021a5a <USB_EPStartXfer+0x21e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 802185e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8021862:	442a      	add	r2, r5
 8021864:	7821      	ldrb	r1, [r4, #0]
 8021866:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 802186a:	2b00      	cmp	r3, #0
 802186c:	f040 80de 	bne.w	8021a2c <USB_EPStartXfer+0x1f0>
 8021870:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 8021874:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8021878:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 802187c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8021880:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8021884:	7822      	ldrb	r2, [r4, #0]
 8021886:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 802188a:	b29b      	uxth	r3, r3
 802188c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8021890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8021894:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8021898:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802189c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80218a0:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 80218a4:	2000      	movs	r0, #0
 80218a6:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 80218a8:	69a2      	ldr	r2, [r4, #24]
 80218aa:	6923      	ldr	r3, [r4, #16]
 80218ac:	429a      	cmp	r2, r3
 80218ae:	d91c      	bls.n	80218ea <USB_EPStartXfer+0xae>
      ep->xfer_len -= len;
 80218b0:	1ad2      	subs	r2, r2, r3
 80218b2:	61a2      	str	r2, [r4, #24]
    if (ep->doublebuffer == 0U)
 80218b4:	7b22      	ldrb	r2, [r4, #12]
 80218b6:	b1e2      	cbz	r2, 80218f2 <USB_EPStartXfer+0xb6>
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80218b8:	7822      	ldrb	r2, [r4, #0]
 80218ba:	f835 0022 	ldrh.w	r0, [r5, r2, lsl #2]
 80218be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80218c2:	d06c      	beq.n	802199e <USB_EPStartXfer+0x162>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80218c4:	2900      	cmp	r1, #0
 80218c6:	d13b      	bne.n	8021940 <USB_EPStartXfer+0x104>
 80218c8:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 80218cc:	4429      	add	r1, r5
 80218ce:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80218d2:	b9f3      	cbnz	r3, 8021912 <USB_EPStartXfer+0xd6>
 80218d4:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	; 0x40c
 80218d8:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80218dc:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80218e0:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80218e4:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 80218e8:	e031      	b.n	802194e <USB_EPStartXfer+0x112>
      ep->xfer_len = 0U;
 80218ea:	2300      	movs	r3, #0
 80218ec:	61a3      	str	r3, [r4, #24]
      len = ep->xfer_len;
 80218ee:	4613      	mov	r3, r2
 80218f0:	e7e0      	b.n	80218b4 <USB_EPStartXfer+0x78>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80218f2:	b29e      	uxth	r6, r3
 80218f4:	4633      	mov	r3, r6
 80218f6:	88e2      	ldrh	r2, [r4, #6]
 80218f8:	6961      	ldr	r1, [r4, #20]
 80218fa:	4628      	mov	r0, r5
 80218fc:	f7ff ff8a 	bl	8021814 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8021900:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8021904:	442b      	add	r3, r5
 8021906:	7822      	ldrb	r2, [r4, #0]
 8021908:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 802190c:	f8a3 6404 	strh.w	r6, [r3, #1028]	; 0x404
 8021910:	e034      	b.n	802197c <USB_EPStartXfer+0x140>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8021912:	2b3e      	cmp	r3, #62	; 0x3e
 8021914:	d808      	bhi.n	8021928 <USB_EPStartXfer+0xec>
 8021916:	0859      	lsrs	r1, r3, #1
 8021918:	f013 0f01 	tst.w	r3, #1
 802191c:	d000      	beq.n	8021920 <USB_EPStartXfer+0xe4>
 802191e:	3101      	adds	r1, #1
 8021920:	0289      	lsls	r1, r1, #10
 8021922:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8021926:	e012      	b.n	802194e <USB_EPStartXfer+0x112>
 8021928:	0959      	lsrs	r1, r3, #5
 802192a:	f013 0f1f 	tst.w	r3, #31
 802192e:	d100      	bne.n	8021932 <USB_EPStartXfer+0xf6>
 8021930:	3901      	subs	r1, #1
 8021932:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8021936:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 802193a:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 802193e:	e006      	b.n	802194e <USB_EPStartXfer+0x112>
 8021940:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8021944:	4429      	add	r1, r5
 8021946:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 802194a:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
        pmabuffer = ep->pmaaddr1;
 802194e:	8962      	ldrh	r2, [r4, #10]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8021950:	b29b      	uxth	r3, r3
 8021952:	6961      	ldr	r1, [r4, #20]
 8021954:	4628      	mov	r0, r5
 8021956:	f7ff ff5d 	bl	8021814 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 802195a:	7863      	ldrb	r3, [r4, #1]
 802195c:	2b00      	cmp	r3, #0
 802195e:	d150      	bne.n	8021a02 <USB_EPStartXfer+0x1c6>
 8021960:	7822      	ldrb	r2, [r4, #0]
 8021962:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8021966:	b29b      	uxth	r3, r3
 8021968:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802196c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8021970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8021974:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8021978:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 802197c:	7822      	ldrb	r2, [r4, #0]
 802197e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8021982:	b29b      	uxth	r3, r3
 8021984:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8021988:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802198c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8021990:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8021994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021998:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 802199c:	e782      	b.n	80218a4 <USB_EPStartXfer+0x68>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 802199e:	bb39      	cbnz	r1, 80219f0 <USB_EPStartXfer+0x1b4>
 80219a0:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 80219a4:	4429      	add	r1, r5
 80219a6:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80219aa:	b953      	cbnz	r3, 80219c2 <USB_EPStartXfer+0x186>
 80219ac:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 80219b0:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80219b4:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80219b8:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80219bc:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 80219c0:	e01d      	b.n	80219fe <USB_EPStartXfer+0x1c2>
 80219c2:	2b3e      	cmp	r3, #62	; 0x3e
 80219c4:	d808      	bhi.n	80219d8 <USB_EPStartXfer+0x19c>
 80219c6:	0859      	lsrs	r1, r3, #1
 80219c8:	f013 0f01 	tst.w	r3, #1
 80219cc:	d000      	beq.n	80219d0 <USB_EPStartXfer+0x194>
 80219ce:	3101      	adds	r1, #1
 80219d0:	0289      	lsls	r1, r1, #10
 80219d2:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 80219d6:	e012      	b.n	80219fe <USB_EPStartXfer+0x1c2>
 80219d8:	0959      	lsrs	r1, r3, #5
 80219da:	f013 0f1f 	tst.w	r3, #31
 80219de:	d100      	bne.n	80219e2 <USB_EPStartXfer+0x1a6>
 80219e0:	3901      	subs	r1, #1
 80219e2:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 80219e6:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80219ea:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 80219ee:	e006      	b.n	80219fe <USB_EPStartXfer+0x1c2>
 80219f0:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 80219f4:	4429      	add	r1, r5
 80219f6:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80219fa:	f8a2 3404 	strh.w	r3, [r2, #1028]	; 0x404
        pmabuffer = ep->pmaaddr0;
 80219fe:	8922      	ldrh	r2, [r4, #8]
 8021a00:	e7a6      	b.n	8021950 <USB_EPStartXfer+0x114>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8021a02:	2b01      	cmp	r3, #1
 8021a04:	d1ba      	bne.n	802197c <USB_EPStartXfer+0x140>
 8021a06:	7822      	ldrb	r2, [r4, #0]
 8021a08:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8021a0c:	b29b      	uxth	r3, r3
 8021a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8021a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8021a16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8021a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021a1e:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8021a22:	e7ab      	b.n	802197c <USB_EPStartXfer+0x140>
      ep->xfer_len = 0U;
 8021a24:	2300      	movs	r3, #0
 8021a26:	61a3      	str	r3, [r4, #24]
      len = ep->xfer_len;
 8021a28:	4613      	mov	r3, r2
 8021a2a:	e714      	b.n	8021856 <USB_EPStartXfer+0x1a>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8021a2c:	2b3e      	cmp	r3, #62	; 0x3e
 8021a2e:	d808      	bhi.n	8021a42 <USB_EPStartXfer+0x206>
 8021a30:	0859      	lsrs	r1, r3, #1
 8021a32:	f013 0f01 	tst.w	r3, #1
 8021a36:	d000      	beq.n	8021a3a <USB_EPStartXfer+0x1fe>
 8021a38:	3101      	adds	r1, #1
 8021a3a:	0289      	lsls	r1, r1, #10
 8021a3c:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8021a40:	e720      	b.n	8021884 <USB_EPStartXfer+0x48>
 8021a42:	0959      	lsrs	r1, r3, #5
 8021a44:	f013 0f1f 	tst.w	r3, #31
 8021a48:	d100      	bne.n	8021a4c <USB_EPStartXfer+0x210>
 8021a4a:	3901      	subs	r1, #1
 8021a4c:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8021a50:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8021a54:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8021a58:	e714      	b.n	8021884 <USB_EPStartXfer+0x48>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8021a5a:	b981      	cbnz	r1, 8021a7e <USB_EPStartXfer+0x242>
 8021a5c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8021a60:	442a      	add	r2, r5
 8021a62:	7821      	ldrb	r1, [r4, #0]
 8021a64:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8021a68:	b9f3      	cbnz	r3, 8021aa8 <USB_EPStartXfer+0x26c>
 8021a6a:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 8021a6e:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8021a72:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8021a76:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8021a7a:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8021a7e:	7862      	ldrb	r2, [r4, #1]
 8021a80:	2a00      	cmp	r2, #0
 8021a82:	d13f      	bne.n	8021b04 <USB_EPStartXfer+0x2c8>
 8021a84:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8021a88:	442a      	add	r2, r5
 8021a8a:	7821      	ldrb	r1, [r4, #0]
 8021a8c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8021a90:	bb0b      	cbnz	r3, 8021ad6 <USB_EPStartXfer+0x29a>
 8021a92:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 8021a96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8021a9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8021a9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8021aa2:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 8021aa6:	e6ed      	b.n	8021884 <USB_EPStartXfer+0x48>
 8021aa8:	2b3e      	cmp	r3, #62	; 0x3e
 8021aaa:	d808      	bhi.n	8021abe <USB_EPStartXfer+0x282>
 8021aac:	0859      	lsrs	r1, r3, #1
 8021aae:	f013 0f01 	tst.w	r3, #1
 8021ab2:	d000      	beq.n	8021ab6 <USB_EPStartXfer+0x27a>
 8021ab4:	3101      	adds	r1, #1
 8021ab6:	0289      	lsls	r1, r1, #10
 8021ab8:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8021abc:	e7df      	b.n	8021a7e <USB_EPStartXfer+0x242>
 8021abe:	0959      	lsrs	r1, r3, #5
 8021ac0:	f013 0f1f 	tst.w	r3, #31
 8021ac4:	d100      	bne.n	8021ac8 <USB_EPStartXfer+0x28c>
 8021ac6:	3901      	subs	r1, #1
 8021ac8:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8021acc:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8021ad0:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8021ad4:	e7d3      	b.n	8021a7e <USB_EPStartXfer+0x242>
 8021ad6:	2b3e      	cmp	r3, #62	; 0x3e
 8021ad8:	d808      	bhi.n	8021aec <USB_EPStartXfer+0x2b0>
 8021ada:	0859      	lsrs	r1, r3, #1
 8021adc:	f013 0f01 	tst.w	r3, #1
 8021ae0:	d000      	beq.n	8021ae4 <USB_EPStartXfer+0x2a8>
 8021ae2:	3101      	adds	r1, #1
 8021ae4:	0289      	lsls	r1, r1, #10
 8021ae6:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8021aea:	e6cb      	b.n	8021884 <USB_EPStartXfer+0x48>
 8021aec:	0959      	lsrs	r1, r3, #5
 8021aee:	f013 0f1f 	tst.w	r3, #31
 8021af2:	d100      	bne.n	8021af6 <USB_EPStartXfer+0x2ba>
 8021af4:	3901      	subs	r1, #1
 8021af6:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8021afa:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8021afe:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8021b02:	e6bf      	b.n	8021884 <USB_EPStartXfer+0x48>
 8021b04:	2a01      	cmp	r2, #1
 8021b06:	f47f aebd 	bne.w	8021884 <USB_EPStartXfer+0x48>
 8021b0a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8021b0e:	442a      	add	r2, r5
 8021b10:	7821      	ldrb	r1, [r4, #0]
 8021b12:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8021b16:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 8021b1a:	e6b3      	b.n	8021884 <USB_EPStartXfer+0x48>

08021b1c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8021b1c:	b410      	push	{r4}
  uint32_t n = (uint32_t)wNBytes >> 1;
 8021b1e:	085c      	lsrs	r4, r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8021b20:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021b24:	f500 6080 	add.w	r0, r0, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8021b28:	b13c      	cbz	r4, 8021b3a <USB_ReadPMA+0x1e>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8021b2a:	f830 2b04 	ldrh.w	r2, [r0], #4
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8021b2e:	700a      	strb	r2, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8021b30:	0a12      	lsrs	r2, r2, #8
 8021b32:	704a      	strb	r2, [r1, #1]
    pBuf++;
 8021b34:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 8021b36:	3c01      	subs	r4, #1
 8021b38:	e7f6      	b.n	8021b28 <USB_ReadPMA+0xc>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8021b3a:	f013 0f01 	tst.w	r3, #1
 8021b3e:	d001      	beq.n	8021b44 <USB_ReadPMA+0x28>
  {
    temp = *pdwVal;
 8021b40:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8021b42:	700b      	strb	r3, [r1, #0]
  }
}
 8021b44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021b48:	4770      	bx	lr

08021b4a <UTILS_GetPLLOutputFrequency>:
  pllfreq = __LL_RCC_CALC_PLLCLK_FREQ(PLL_InputFrequency / (UTILS_PLLInitStruct->Prediv + 1U), UTILS_PLLInitStruct->PLLMul);
 8021b4a:	684b      	ldr	r3, [r1, #4]
 8021b4c:	3301      	adds	r3, #1
 8021b4e:	fbb0 f0f3 	udiv	r0, r0, r3
 8021b52:	680b      	ldr	r3, [r1, #0]
 8021b54:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021b58:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8021b5c:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8021b60:	b132      	cbz	r2, 8021b70 <UTILS_GetPLLOutputFrequency+0x26>
  return __builtin_clz(value);
 8021b62:	fab2 f282 	clz	r2, r2
 8021b66:	40d3      	lsrs	r3, r2
 8021b68:	3302      	adds	r3, #2
}
 8021b6a:	fb03 f000 	mul.w	r0, r3, r0
 8021b6e:	4770      	bx	lr
    return 32U;
 8021b70:	2220      	movs	r2, #32
 8021b72:	e7f8      	b.n	8021b66 <UTILS_GetPLLOutputFrequency+0x1c>

08021b74 <kscan_gpio_input_devices_0>:
 8021b74:	68c0      	ldr	r0, [r0, #12]
 8021b76:	3050      	adds	r0, #80	; 0x50
 8021b78:	4770      	bx	lr

08021b7a <kscan_gpio_input_configs_0>:
 8021b7a:	6840      	ldr	r0, [r0, #4]
 8021b7c:	4770      	bx	lr

08021b7e <kscan_gpio_output_devices_0>:
 8021b7e:	68c0      	ldr	r0, [r0, #12]
 8021b80:	3060      	adds	r0, #96	; 0x60
 8021b82:	4770      	bx	lr

08021b84 <kscan_gpio_output_configs_0>:
 8021b84:	6840      	ldr	r0, [r0, #4]
 8021b86:	3030      	adds	r0, #48	; 0x30
 8021b88:	4770      	bx	lr

08021b8a <kscan_gpio_set_matrix_state_0>:
 8021b8a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021b8e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8021b92:	548b      	strb	r3, [r1, r2]
 8021b94:	4770      	bx	lr

08021b96 <kscan_gpio_enable_interrupts_0>:
 8021b96:	b538      	push	{r3, r4, r5, lr}
 8021b98:	4605      	mov	r5, r0
 8021b9a:	f7ff ffeb 	bl	8021b74 <kscan_gpio_input_devices_0>
 8021b9e:	4604      	mov	r4, r0
 8021ba0:	4628      	mov	r0, r5
 8021ba2:	f7ff ffea 	bl	8021b7a <kscan_gpio_input_configs_0>
 8021ba6:	4601      	mov	r1, r0
 8021ba8:	f44f 2398 	mov.w	r3, #311296	; 0x4c000
 8021bac:	2204      	movs	r2, #4
 8021bae:	4620      	mov	r0, r4
 8021bb0:	f7f5 fc82 	bl	80174b8 <kscan_gpio_config_interrupts>
 8021bb4:	bd38      	pop	{r3, r4, r5, pc}

08021bb6 <kscan_gpio_disable_interrupts_0>:
 8021bb6:	b538      	push	{r3, r4, r5, lr}
 8021bb8:	4605      	mov	r5, r0
 8021bba:	f7ff ffdb 	bl	8021b74 <kscan_gpio_input_devices_0>
 8021bbe:	4604      	mov	r4, r0
 8021bc0:	4628      	mov	r0, r5
 8021bc2:	f7ff ffda 	bl	8021b7a <kscan_gpio_input_configs_0>
 8021bc6:	4601      	mov	r1, r0
 8021bc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8021bcc:	2204      	movs	r2, #4
 8021bce:	4620      	mov	r0, r4
 8021bd0:	f7f5 fc72 	bl	80174b8 <kscan_gpio_config_interrupts>
 8021bd4:	bd38      	pop	{r3, r4, r5, pc}

08021bd6 <kscan_gpio_disable_0>:
 8021bd6:	b508      	push	{r3, lr}
 8021bd8:	f7ff ffed 	bl	8021bb6 <kscan_gpio_disable_interrupts_0>
 8021bdc:	bd08      	pop	{r3, pc}

08021bde <kscan_gpio_enable_0>:
 8021bde:	b510      	push	{r4, lr}
 8021be0:	4604      	mov	r4, r0
 8021be2:	f7ff ffd8 	bl	8021b96 <kscan_gpio_enable_interrupts_0>
 8021be6:	b100      	cbz	r0, 8021bea <kscan_gpio_enable_0+0xc>
 8021be8:	bd10      	pop	{r4, pc}
 8021bea:	4620      	mov	r0, r4
 8021bec:	f7f5 fd14 	bl	8017618 <kscan_gpio_read_0>
 8021bf0:	e7fa      	b.n	8021be8 <kscan_gpio_enable_0+0xa>

08021bf2 <kscan_gpio_work_handler_0>:
 8021bf2:	b508      	push	{r3, lr}
 8021bf4:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8021bf6:	f7f5 fd0f 	bl	8017618 <kscan_gpio_read_0>
 8021bfa:	bd08      	pop	{r3, pc}

08021bfc <arch_system_halt>:
	__asm__ volatile(
 8021bfc:	f04f 0210 	mov.w	r2, #16
 8021c00:	f3ef 8311 	mrs	r3, BASEPRI
 8021c04:	f382 8811 	msr	BASEPRI, r2
 8021c08:	f3bf 8f6f 	isb	sy
	for (;;) {
 8021c0c:	e7fe      	b.n	8021c0c <arch_system_halt+0x10>

08021c0e <k_heap_init>:
{
 8021c0e:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
 8021c10:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
 8021c14:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
 8021c16:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
 8021c18:	f7f8 fcaa 	bl	801a570 <sys_heap_init>
}
 8021c1c:	bd10      	pop	{r4, pc}

08021c1e <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
 8021c1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c22:	b085      	sub	sp, #20
 8021c24:	4680      	mov	r8, r0
 8021c26:	9103      	str	r1, [sp, #12]
	int64_t now, end = z_timeout_end_calc(timeout);
 8021c28:	4610      	mov	r0, r2
 8021c2a:	4619      	mov	r1, r3
 8021c2c:	f000 fc3a 	bl	80224a4 <z_timeout_end_calc>
 8021c30:	4681      	mov	r9, r0
 8021c32:	468a      	mov	sl, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
 8021c34:	f108 0b14 	add.w	fp, r8, #20
 8021c38:	f04f 0310 	mov.w	r3, #16
 8021c3c:	f3ef 8511 	mrs	r5, BASEPRI
 8021c40:	f383 8811 	msr	BASEPRI, r3
 8021c44:	f3bf 8f6f 	isb	sy
	void *ret = NULL;
 8021c48:	2400      	movs	r4, #0
 8021c4a:	e00f      	b.n	8021c6c <k_heap_alloc+0x4e>
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
 8021c4c:	e9cd 6700 	strd	r6, r7, [sp]
 8021c50:	f108 020c 	add.w	r2, r8, #12
 8021c54:	4629      	mov	r1, r5
 8021c56:	4658      	mov	r0, fp
 8021c58:	f7f6 feca 	bl	80189f0 <z_pend_curr>
 8021c5c:	f04f 0310 	mov.w	r3, #16
 8021c60:	f3ef 8511 	mrs	r5, BASEPRI
 8021c64:	f383 8811 	msr	BASEPRI, r3
 8021c68:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
 8021c6c:	b97c      	cbnz	r4, 8021c8e <k_heap_alloc+0x70>
		ret = sys_heap_alloc(&h->heap, bytes);
 8021c6e:	9903      	ldr	r1, [sp, #12]
 8021c70:	4640      	mov	r0, r8
 8021c72:	f7f8 fc3b 	bl	801a4ec <sys_heap_alloc>
 8021c76:	4604      	mov	r4, r0
		now = z_tick_get();
 8021c78:	f7f7 fa8c 	bl	8019194 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
 8021c7c:	b93c      	cbnz	r4, 8021c8e <k_heap_alloc+0x70>
 8021c7e:	ebb9 0600 	subs.w	r6, r9, r0
 8021c82:	eb6a 0701 	sbc.w	r7, sl, r1
 8021c86:	2e01      	cmp	r6, #1
 8021c88:	f177 0300 	sbcs.w	r3, r7, #0
 8021c8c:	dade      	bge.n	8021c4c <k_heap_alloc+0x2e>
	__asm__ volatile(
 8021c8e:	f385 8811 	msr	BASEPRI, r5
 8021c92:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
 8021c96:	4620      	mov	r0, r4
 8021c98:	b005      	add	sp, #20
 8021c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021c9e <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
 8021c9e:	b570      	push	{r4, r5, r6, lr}
 8021ca0:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
 8021ca2:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
 8021ca6:	f04f 0310 	mov.w	r3, #16
 8021caa:	f3ef 8511 	mrs	r5, BASEPRI
 8021cae:	f383 8811 	msr	BASEPRI, r3
 8021cb2:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
 8021cb6:	f7f8 fbfe 	bl	801a4b6 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
 8021cba:	f104 000c 	add.w	r0, r4, #12
 8021cbe:	f000 fa88 	bl	80221d2 <z_unpend_all>
 8021cc2:	b920      	cbnz	r0, 8021cce <k_heap_free+0x30>
	__asm__ volatile(
 8021cc4:	f385 8811 	msr	BASEPRI, r5
 8021cc8:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
 8021ccc:	bd70      	pop	{r4, r5, r6, pc}
		z_reschedule(&h->lock, key);
 8021cce:	4629      	mov	r1, r5
 8021cd0:	4630      	mov	r0, r6
 8021cd2:	f7f6 fc3f 	bl	8018554 <z_reschedule>
 8021cd6:	e7f9      	b.n	8021ccc <k_heap_free+0x2e>

08021cd8 <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
 8021cd8:	b538      	push	{r3, r4, r5, lr}
 8021cda:	460d      	mov	r5, r1
 8021cdc:	4614      	mov	r4, r2
	block->id.heap = p->heap;
 8021cde:	6800      	ldr	r0, [r0, #0]
 8021ce0:	6048      	str	r0, [r1, #4]
	block->data = k_heap_alloc(p->heap, size, timeout);
 8021ce2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8021ce6:	4621      	mov	r1, r4
 8021ce8:	f7ff ff99 	bl	8021c1e <k_heap_alloc>
 8021cec:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
 8021cee:	b164      	cbz	r4, 8021d0a <k_mem_pool_alloc+0x32>
 8021cf0:	b108      	cbz	r0, 8021cf6 <k_mem_pool_alloc+0x1e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
	} else {
		return 0;
 8021cf2:	2000      	movs	r0, #0
	}
}
 8021cf4:	bd38      	pop	{r3, r4, r5, pc}
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
 8021cf6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8021cfa:	4323      	orrs	r3, r4
 8021cfc:	d102      	bne.n	8021d04 <k_mem_pool_alloc+0x2c>
 8021cfe:	f06f 000b 	mvn.w	r0, #11
 8021d02:	e7f7      	b.n	8021cf4 <k_mem_pool_alloc+0x1c>
 8021d04:	f06f 000a 	mvn.w	r0, #10
 8021d08:	e7f4      	b.n	8021cf4 <k_mem_pool_alloc+0x1c>
		return 0;
 8021d0a:	2000      	movs	r0, #0
 8021d0c:	e7f2      	b.n	8021cf4 <k_mem_pool_alloc+0x1c>

08021d0e <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
 8021d0e:	b508      	push	{r3, lr}
	k_heap_free(id->heap, id->data);
 8021d10:	6801      	ldr	r1, [r0, #0]
 8021d12:	6840      	ldr	r0, [r0, #4]
 8021d14:	f7ff ffc3 	bl	8021c9e <k_heap_free>
}
 8021d18:	bd08      	pop	{r3, pc}

08021d1a <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 8021d1a:	68c2      	ldr	r2, [r0, #12]
 8021d1c:	6903      	ldr	r3, [r0, #16]
 8021d1e:	431a      	orrs	r2, r3
 8021d20:	f012 0203 	ands.w	r2, r2, #3
 8021d24:	d10d      	bne.n	8021d42 <create_free_list+0x28>
	slab->free_list = NULL;
 8021d26:	2100      	movs	r1, #0
 8021d28:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
 8021d2a:	e005      	b.n	8021d38 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
 8021d2c:	6941      	ldr	r1, [r0, #20]
 8021d2e:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
 8021d30:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
 8021d32:	68c1      	ldr	r1, [r0, #12]
 8021d34:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
 8021d36:	3201      	adds	r2, #1
 8021d38:	6881      	ldr	r1, [r0, #8]
 8021d3a:	4291      	cmp	r1, r2
 8021d3c:	d8f6      	bhi.n	8021d2c <create_free_list+0x12>
	return 0;
 8021d3e:	2000      	movs	r0, #0
 8021d40:	4770      	bx	lr
		return -EINVAL;
 8021d42:	f06f 0015 	mvn.w	r0, #21
}
 8021d46:	4770      	bx	lr

08021d48 <k_mem_slab_init>:
{
 8021d48:	b510      	push	{r4, lr}
 8021d4a:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
 8021d4c:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
 8021d4e:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
 8021d50:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
 8021d52:	2300      	movs	r3, #0
 8021d54:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
 8021d56:	f7ff ffe0 	bl	8021d1a <create_free_list>
	if (rc < 0) {
 8021d5a:	2800      	cmp	r0, #0
 8021d5c:	db01      	blt.n	8021d62 <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
 8021d5e:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
 8021d60:	6064      	str	r4, [r4, #4]
}
 8021d62:	bd10      	pop	{r4, pc}

08021d64 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
 8021d64:	4288      	cmp	r0, r1
 8021d66:	da00      	bge.n	8021d6a <new_prio_for_inheritance+0x6>
 8021d68:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
 8021d6a:	2900      	cmp	r1, #0
 8021d6c:	db01      	blt.n	8021d72 <new_prio_for_inheritance+0xe>
 8021d6e:	4608      	mov	r0, r1
 8021d70:	4770      	bx	lr
 8021d72:	2000      	movs	r0, #0
}
 8021d74:	4770      	bx	lr

08021d76 <adjust_owner_prio>:
{
 8021d76:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
 8021d78:	6880      	ldr	r0, [r0, #8]
 8021d7a:	f990 300e 	ldrsb.w	r3, [r0, #14]
 8021d7e:	428b      	cmp	r3, r1
 8021d80:	d101      	bne.n	8021d86 <adjust_owner_prio+0x10>
	return false;
 8021d82:	2000      	movs	r0, #0
}
 8021d84:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
 8021d86:	f7f6 fe47 	bl	8018a18 <z_set_prio>
 8021d8a:	e7fb      	b.n	8021d84 <adjust_owner_prio+0xe>

08021d8c <z_impl_k_mutex_init>:
{
 8021d8c:	4603      	mov	r3, r0
	mutex->owner = NULL;
 8021d8e:	2000      	movs	r0, #0
 8021d90:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
 8021d92:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
 8021d94:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
 8021d96:	605b      	str	r3, [r3, #4]
}
 8021d98:	4770      	bx	lr

08021d9a <prepare_thread_to_run>:
{
 8021d9a:	b508      	push	{r3, lr}
 8021d9c:	2200      	movs	r2, #0
 8021d9e:	6702      	str	r2, [r0, #112]	; 0x70
 8021da0:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
 8021da2:	f000 f94b 	bl	802203c <z_ready_thread>
}
 8021da6:	bd08      	pop	{r3, pc}

08021da8 <queue_insert>:
{
 8021da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021dac:	4607      	mov	r7, r0
 8021dae:	4688      	mov	r8, r1
 8021db0:	4614      	mov	r4, r2
 8021db2:	461d      	mov	r5, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
 8021db4:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
 8021db8:	f04f 0310 	mov.w	r3, #16
 8021dbc:	f3ef 8911 	mrs	r9, BASEPRI
 8021dc0:	f383 8811 	msr	BASEPRI, r3
 8021dc4:	f3bf 8f6f 	isb	sy
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
 8021dc8:	4630      	mov	r0, r6
 8021dca:	f000 f9c7 	bl	802215c <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
 8021dce:	b9b8      	cbnz	r0, 8021e00 <queue_insert+0x58>
	if (alloc) {
 8021dd0:	b9fd      	cbnz	r5, 8021e12 <queue_insert+0x6a>
	node->next_and_flags = flags;
 8021dd2:	2300      	movs	r3, #0
 8021dd4:	6023      	str	r3, [r4, #0]
Z_GENLIST_INSERT(sflist, sfnode)
 8021dd6:	f1b8 0f00 	cmp.w	r8, #0
 8021dda:	d02a      	beq.n	8021e32 <queue_insert+0x8a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 8021ddc:	f8d8 3000 	ldr.w	r3, [r8]
Z_GENLIST_INSERT(sflist, sfnode)
 8021de0:	f033 0303 	bics.w	r3, r3, #3
 8021de4:	d133      	bne.n	8021e4e <queue_insert+0xa6>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 8021de6:	6823      	ldr	r3, [r4, #0]
 8021de8:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
 8021dec:	6023      	str	r3, [r4, #0]
	return list->tail;
 8021dee:	687a      	ldr	r2, [r7, #4]
Z_GENLIST_APPEND(sflist, sfnode)
 8021df0:	b352      	cbz	r2, 8021e48 <queue_insert+0xa0>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 8021df2:	6813      	ldr	r3, [r2, #0]
 8021df4:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
 8021df8:	4323      	orrs	r3, r4
 8021dfa:	6013      	str	r3, [r2, #0]
	list->tail = node;
 8021dfc:	607c      	str	r4, [r7, #4]
}
 8021dfe:	e032      	b.n	8021e66 <queue_insert+0xbe>
		prepare_thread_to_run(first_pending_thread, data);
 8021e00:	4621      	mov	r1, r4
 8021e02:	f7ff ffca 	bl	8021d9a <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
 8021e06:	4649      	mov	r1, r9
 8021e08:	4630      	mov	r0, r6
 8021e0a:	f7f6 fba3 	bl	8018554 <z_reschedule>
		return 0;
 8021e0e:	2000      	movs	r0, #0
 8021e10:	e033      	b.n	8021e7a <queue_insert+0xd2>
		anode = z_thread_malloc(sizeof(*anode));
 8021e12:	2008      	movs	r0, #8
 8021e14:	f7f7 fcb0 	bl	8019778 <z_thread_malloc>
		if (anode == NULL) {
 8021e18:	b120      	cbz	r0, 8021e24 <queue_insert+0x7c>
		anode->data = data;
 8021e1a:	6044      	str	r4, [r0, #4]
	node->next_and_flags = flags;
 8021e1c:	2201      	movs	r2, #1
 8021e1e:	6002      	str	r2, [r0, #0]
		data = anode;
 8021e20:	4604      	mov	r4, r0
 8021e22:	e7d8      	b.n	8021dd6 <queue_insert+0x2e>
	__asm__ volatile(
 8021e24:	f389 8811 	msr	BASEPRI, r9
 8021e28:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
 8021e2c:	f06f 000b 	mvn.w	r0, #11
 8021e30:	e023      	b.n	8021e7a <queue_insert+0xd2>
	return list->head;
 8021e32:	683a      	ldr	r2, [r7, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 8021e34:	6823      	ldr	r3, [r4, #0]
 8021e36:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
 8021e3a:	4313      	orrs	r3, r2
 8021e3c:	6023      	str	r3, [r4, #0]
	list->head = node;
 8021e3e:	603c      	str	r4, [r7, #0]
	return list->tail;
 8021e40:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
 8021e42:	b983      	cbnz	r3, 8021e66 <queue_insert+0xbe>
	list->tail = node;
 8021e44:	607c      	str	r4, [r7, #4]
}
 8021e46:	e00e      	b.n	8021e66 <queue_insert+0xbe>
	list->tail = node;
 8021e48:	607c      	str	r4, [r7, #4]
	list->head = node;
 8021e4a:	603c      	str	r4, [r7, #0]
}
 8021e4c:	e00b      	b.n	8021e66 <queue_insert+0xbe>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 8021e4e:	6822      	ldr	r2, [r4, #0]
 8021e50:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
 8021e54:	4313      	orrs	r3, r2
 8021e56:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 8021e58:	f8d8 3000 	ldr.w	r3, [r8]
 8021e5c:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
 8021e60:	431c      	orrs	r4, r3
 8021e62:	f8c8 4000 	str.w	r4, [r8]
	z_handle_obj_poll_events(&queue->poll_events, state);
 8021e66:	2104      	movs	r1, #4
 8021e68:	f107 0010 	add.w	r0, r7, #16
 8021e6c:	f000 fbdd 	bl	802262a <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
 8021e70:	4649      	mov	r1, r9
 8021e72:	4630      	mov	r0, r6
 8021e74:	f7f6 fb6e 	bl	8018554 <z_reschedule>
	return 0;
 8021e78:	2000      	movs	r0, #0
}
 8021e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08021e7e <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
 8021e7e:	b160      	cbz	r0, 8021e9a <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 8021e80:	6803      	ldr	r3, [r0, #0]
 8021e82:	f013 0f03 	tst.w	r3, #3
 8021e86:	d008      	beq.n	8021e9a <z_queue_node_peek+0x1c>
{
 8021e88:	b510      	push	{r4, lr}
		ret = anode->data;
 8021e8a:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
 8021e8c:	b909      	cbnz	r1, 8021e92 <z_queue_node_peek+0x14>
		ret = anode->data;
 8021e8e:	4620      	mov	r0, r4
}
 8021e90:	bd10      	pop	{r4, pc}
			k_free(anode);
 8021e92:	f000 fbfa 	bl	802268a <k_free>
		ret = anode->data;
 8021e96:	4620      	mov	r0, r4
 8021e98:	e7fa      	b.n	8021e90 <z_queue_node_peek+0x12>
}
 8021e9a:	4770      	bx	lr

08021e9c <z_impl_k_queue_init>:
	list->head = NULL;
 8021e9c:	2300      	movs	r3, #0
 8021e9e:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
 8021ea0:	6043      	str	r3, [r0, #4]
 8021ea2:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
 8021ea6:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
 8021ea8:	60c3      	str	r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
 8021eaa:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
 8021eae:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
 8021eb0:	6143      	str	r3, [r0, #20]
}
 8021eb2:	4770      	bx	lr

08021eb4 <k_queue_append>:
{
 8021eb4:	b508      	push	{r3, lr}
 8021eb6:	460a      	mov	r2, r1
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
 8021eb8:	2300      	movs	r3, #0
 8021eba:	6841      	ldr	r1, [r0, #4]
 8021ebc:	f7ff ff74 	bl	8021da8 <queue_insert>
}
 8021ec0:	bd08      	pop	{r3, pc}

08021ec2 <k_queue_prepend>:
{
 8021ec2:	b508      	push	{r3, lr}
 8021ec4:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false);
 8021ec6:	2300      	movs	r3, #0
 8021ec8:	4619      	mov	r1, r3
 8021eca:	f7ff ff6d 	bl	8021da8 <queue_insert>
}
 8021ece:	bd08      	pop	{r3, pc}

08021ed0 <k_queue_append_list>:
	CHECKIF(head == NULL || tail == NULL) {
 8021ed0:	b3a1      	cbz	r1, 8021f3c <k_queue_append_list+0x6c>
{
 8021ed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021ed6:	4606      	mov	r6, r0
 8021ed8:	4617      	mov	r7, r2
 8021eda:	460c      	mov	r4, r1
	CHECKIF(head == NULL || tail == NULL) {
 8021edc:	b38a      	cbz	r2, 8021f42 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
 8021ede:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
 8021ee2:	f04f 0310 	mov.w	r3, #16
 8021ee6:	f3ef 8811 	mrs	r8, BASEPRI
 8021eea:	f383 8811 	msr	BASEPRI, r3
 8021eee:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
 8021ef2:	4628      	mov	r0, r5
 8021ef4:	f000 f932 	bl	802215c <z_unpend_first_thread>
 8021ef8:	e006      	b.n	8021f08 <k_queue_append_list+0x38>
		prepare_thread_to_run(thread, head);
 8021efa:	4621      	mov	r1, r4
 8021efc:	f7ff ff4d 	bl	8021d9a <prepare_thread_to_run>
		head = *(void **)head;
 8021f00:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
 8021f02:	4628      	mov	r0, r5
 8021f04:	f000 f92a 	bl	802215c <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
 8021f08:	b10c      	cbz	r4, 8021f0e <k_queue_append_list+0x3e>
 8021f0a:	2800      	cmp	r0, #0
 8021f0c:	d1f5      	bne.n	8021efa <k_queue_append_list+0x2a>
	if (head != NULL) {
 8021f0e:	b13c      	cbz	r4, 8021f20 <k_queue_append_list+0x50>
	return list->tail;
 8021f10:	6872      	ldr	r2, [r6, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
 8021f12:	b18a      	cbz	r2, 8021f38 <k_queue_append_list+0x68>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 8021f14:	6813      	ldr	r3, [r2, #0]
 8021f16:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
 8021f1a:	431c      	orrs	r4, r3
 8021f1c:	6014      	str	r4, [r2, #0]
	list->tail = node;
 8021f1e:	6077      	str	r7, [r6, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
 8021f20:	2104      	movs	r1, #4
 8021f22:	f106 0010 	add.w	r0, r6, #16
 8021f26:	f000 fb80 	bl	802262a <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
 8021f2a:	4641      	mov	r1, r8
 8021f2c:	4628      	mov	r0, r5
 8021f2e:	f7f6 fb11 	bl	8018554 <z_reschedule>
	return 0;
 8021f32:	2000      	movs	r0, #0
}
 8021f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	list->head = node;
 8021f38:	6034      	str	r4, [r6, #0]
}
 8021f3a:	e7f0      	b.n	8021f1e <k_queue_append_list+0x4e>
		return -EINVAL;
 8021f3c:	f06f 0015 	mvn.w	r0, #21
}
 8021f40:	4770      	bx	lr
		return -EINVAL;
 8021f42:	f06f 0015 	mvn.w	r0, #21
 8021f46:	e7f5      	b.n	8021f34 <k_queue_append_list+0x64>

08021f48 <pended_on>:
}
 8021f48:	6880      	ldr	r0, [r0, #8]
 8021f4a:	4770      	bx	lr

08021f4c <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
 8021f4c:	f990 200e 	ldrsb.w	r2, [r0, #14]
 8021f50:	f991 300e 	ldrsb.w	r3, [r1, #14]
 8021f54:	429a      	cmp	r2, r3
 8021f56:	db01      	blt.n	8021f5c <z_is_t1_higher_prio_than_t2+0x10>
	return false;
 8021f58:	2000      	movs	r0, #0
 8021f5a:	4770      	bx	lr
		return true;
 8021f5c:	2001      	movs	r0, #1
}
 8021f5e:	4770      	bx	lr

08021f60 <z_find_first_thread_to_unpend>:
{
 8021f60:	b538      	push	{r3, r4, r5, lr}
 8021f62:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
 8021f64:	2300      	movs	r3, #0
 8021f66:	f04f 0210 	mov.w	r2, #16
 8021f6a:	f3ef 8411 	mrs	r4, BASEPRI
 8021f6e:	f382 8811 	msr	BASEPRI, r2
 8021f72:	f3bf 8f6f 	isb	sy
	struct k_thread *ret = NULL;
 8021f76:	4618      	mov	r0, r3
	LOCKED(&sched_spinlock) {
 8021f78:	b943      	cbnz	r3, 8021f8c <z_find_first_thread_to_unpend+0x2c>
		ret = _priq_wait_best(&wait_q->waitq);
 8021f7a:	4628      	mov	r0, r5
 8021f7c:	f000 f857 	bl	802202e <z_priq_dumb_best>
	__asm__ volatile(
 8021f80:	f384 8811 	msr	BASEPRI, r4
 8021f84:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8021f88:	2301      	movs	r3, #1
 8021f8a:	e7f5      	b.n	8021f78 <z_find_first_thread_to_unpend+0x18>
}
 8021f8c:	bd38      	pop	{r3, r4, r5, pc}

08021f8e <z_unpend_thread_no_timeout>:
{
 8021f8e:	b538      	push	{r3, r4, r5, lr}
 8021f90:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 8021f92:	2300      	movs	r3, #0
	__asm__ volatile(
 8021f94:	f04f 0210 	mov.w	r2, #16
 8021f98:	f3ef 8511 	mrs	r5, BASEPRI
 8021f9c:	f382 8811 	msr	BASEPRI, r2
 8021fa0:	f3bf 8f6f 	isb	sy
 8021fa4:	b98b      	cbnz	r3, 8021fca <z_unpend_thread_no_timeout+0x3c>
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
 8021fa6:	4620      	mov	r0, r4
 8021fa8:	f7ff ffce 	bl	8021f48 <pended_on>
 8021fac:	4621      	mov	r1, r4
 8021fae:	f7f6 fb03 	bl	80185b8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8021fb2:	7b63      	ldrb	r3, [r4, #13]
 8021fb4:	f023 0302 	bic.w	r3, r3, #2
 8021fb8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 8021fba:	2300      	movs	r3, #0
 8021fbc:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 8021fbe:	f385 8811 	msr	BASEPRI, r5
 8021fc2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8021fc6:	2301      	movs	r3, #1
 8021fc8:	e7ec      	b.n	8021fa4 <z_unpend_thread_no_timeout+0x16>
}
 8021fca:	bd38      	pop	{r3, r4, r5, pc}

08021fcc <z_reschedule_irqlock>:
{
 8021fcc:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8021fce:	4603      	mov	r3, r0
 8021fd0:	b928      	cbnz	r0, 8021fde <z_reschedule_irqlock+0x12>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8021fd2:	f3ef 8205 	mrs	r2, IPSR
 8021fd6:	b912      	cbnz	r2, 8021fde <z_reschedule_irqlock+0x12>
 8021fd8:	f7e8 fff0 	bl	800afbc <arch_swap>
	return ret;
 8021fdc:	e003      	b.n	8021fe6 <z_reschedule_irqlock+0x1a>
 8021fde:	f383 8811 	msr	BASEPRI, r3
 8021fe2:	f3bf 8f6f 	isb	sy
}
 8021fe6:	bd08      	pop	{r3, pc}

08021fe8 <z_unpend_thread>:
{
 8021fe8:	b538      	push	{r3, r4, r5, lr}
 8021fea:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 8021fec:	2300      	movs	r3, #0
	__asm__ volatile(
 8021fee:	f04f 0210 	mov.w	r2, #16
 8021ff2:	f3ef 8511 	mrs	r5, BASEPRI
 8021ff6:	f382 8811 	msr	BASEPRI, r2
 8021ffa:	f3bf 8f6f 	isb	sy
 8021ffe:	b98b      	cbnz	r3, 8022024 <z_unpend_thread+0x3c>
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
 8022000:	4620      	mov	r0, r4
 8022002:	f7ff ffa1 	bl	8021f48 <pended_on>
 8022006:	4621      	mov	r1, r4
 8022008:	f7f6 fad6 	bl	80185b8 <z_priq_dumb_remove>
 802200c:	7b63      	ldrb	r3, [r4, #13]
 802200e:	f023 0302 	bic.w	r3, r3, #2
 8022012:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 8022014:	2300      	movs	r3, #0
 8022016:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 8022018:	f385 8811 	msr	BASEPRI, r5
 802201c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8022020:	2301      	movs	r3, #1
 8022022:	e7ec      	b.n	8021ffe <z_unpend_thread+0x16>
	return z_abort_timeout(&thread->base.timeout);
 8022024:	f104 0018 	add.w	r0, r4, #24
 8022028:	f000 f9d7 	bl	80223da <z_abort_timeout>
}
 802202c:	bd38      	pop	{r3, r4, r5, pc}

0802202e <z_priq_dumb_best>:
{
 802202e:	4603      	mov	r3, r0
	return list->head == list;
 8022030:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8022032:	4283      	cmp	r3, r0
 8022034:	d000      	beq.n	8022038 <z_priq_dumb_best+0xa>
}
 8022036:	4770      	bx	lr
	struct k_thread *thread = NULL;
 8022038:	2000      	movs	r0, #0
	return thread;
 802203a:	e7fc      	b.n	8022036 <z_priq_dumb_best+0x8>

0802203c <z_ready_thread>:
{
 802203c:	b538      	push	{r3, r4, r5, lr}
 802203e:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
 8022040:	2300      	movs	r3, #0
	__asm__ volatile(
 8022042:	f04f 0210 	mov.w	r2, #16
 8022046:	f3ef 8411 	mrs	r4, BASEPRI
 802204a:	f382 8811 	msr	BASEPRI, r2
 802204e:	f3bf 8f6f 	isb	sy
 8022052:	b943      	cbnz	r3, 8022066 <z_ready_thread+0x2a>
		ready_thread(thread);
 8022054:	4628      	mov	r0, r5
 8022056:	f7f6 fb17 	bl	8018688 <ready_thread>
	__asm__ volatile(
 802205a:	f384 8811 	msr	BASEPRI, r4
 802205e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8022062:	2301      	movs	r3, #1
 8022064:	e7f5      	b.n	8022052 <z_ready_thread+0x16>
}
 8022066:	bd38      	pop	{r3, r4, r5, pc}

08022068 <z_thread_timeout>:
{
 8022068:	b570      	push	{r4, r5, r6, lr}
 802206a:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
 802206c:	2300      	movs	r3, #0
	__asm__ volatile(
 802206e:	f04f 0210 	mov.w	r2, #16
 8022072:	f3ef 8611 	mrs	r6, BASEPRI
 8022076:	f382 8811 	msr	BASEPRI, r2
 802207a:	f3bf 8f6f 	isb	sy
 802207e:	e019      	b.n	80220b4 <z_thread_timeout+0x4c>
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
 8022080:	4620      	mov	r0, r4
 8022082:	f7ff ff61 	bl	8021f48 <pended_on>
 8022086:	4621      	mov	r1, r4
 8022088:	f7f6 fa96 	bl	80185b8 <z_priq_dumb_remove>
 802208c:	7b63      	ldrb	r3, [r4, #13]
 802208e:	f023 0302 	bic.w	r3, r3, #2
 8022092:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 8022094:	2300      	movs	r3, #0
 8022096:	60a3      	str	r3, [r4, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8022098:	f815 3c0b 	ldrb.w	r3, [r5, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 802209c:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
 80220a0:	f805 3c0b 	strb.w	r3, [r5, #-11]
		ready_thread(thread);
 80220a4:	4620      	mov	r0, r4
 80220a6:	f7f6 faef 	bl	8018688 <ready_thread>
	__asm__ volatile(
 80220aa:	f386 8811 	msr	BASEPRI, r6
 80220ae:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 80220b2:	2301      	movs	r3, #1
 80220b4:	b933      	cbnz	r3, 80220c4 <z_thread_timeout+0x5c>
		struct k_thread *thread = CONTAINER_OF(timeout,
 80220b6:	f1a5 0418 	sub.w	r4, r5, #24
		if (thread->base.pended_on != NULL) {
 80220ba:	f855 3c10 	ldr.w	r3, [r5, #-16]
 80220be:	2b00      	cmp	r3, #0
 80220c0:	d1de      	bne.n	8022080 <z_thread_timeout+0x18>
 80220c2:	e7e9      	b.n	8022098 <z_thread_timeout+0x30>
}
 80220c4:	bd70      	pop	{r4, r5, r6, pc}

080220c6 <add_to_waitq_locked>:
{
 80220c6:	b570      	push	{r4, r5, r6, lr}
 80220c8:	4605      	mov	r5, r0
 80220ca:	460e      	mov	r6, r1
	unready_thread(thread);
 80220cc:	f7f6 fc74 	bl	80189b8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 80220d0:	7b6b      	ldrb	r3, [r5, #13]
 80220d2:	f043 0302 	orr.w	r3, r3, #2
 80220d6:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
 80220d8:	b1ae      	cbz	r6, 8022106 <add_to_waitq_locked+0x40>
		thread->base.pended_on = wait_q;
 80220da:	60ae      	str	r6, [r5, #8]
	return list->head == list;
 80220dc:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80220de:	42a6      	cmp	r6, r4
 80220e0:	d019      	beq.n	8022116 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80220e2:	b15c      	cbz	r4, 80220fc <add_to_waitq_locked+0x36>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
 80220e4:	4621      	mov	r1, r4
 80220e6:	4628      	mov	r0, r5
 80220e8:	f7ff ff30 	bl	8021f4c <z_is_t1_higher_prio_than_t2>
 80220ec:	b960      	cbnz	r0, 8022108 <add_to_waitq_locked+0x42>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80220ee:	b12c      	cbz	r4, 80220fc <add_to_waitq_locked+0x36>
	return (node == list->tail) ? NULL : node->next;
 80220f0:	6873      	ldr	r3, [r6, #4]
 80220f2:	429c      	cmp	r4, r3
 80220f4:	d002      	beq.n	80220fc <add_to_waitq_locked+0x36>
 80220f6:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80220f8:	2c00      	cmp	r4, #0
 80220fa:	d1f2      	bne.n	80220e2 <add_to_waitq_locked+0x1c>
	node->next = list;
 80220fc:	602e      	str	r6, [r5, #0]
	node->prev = list->tail;
 80220fe:	6873      	ldr	r3, [r6, #4]
 8022100:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
 8022102:	601d      	str	r5, [r3, #0]
	list->tail = node;
 8022104:	6075      	str	r5, [r6, #4]
}
 8022106:	bd70      	pop	{r4, r5, r6, pc}
	node->prev = successor->prev;
 8022108:	6863      	ldr	r3, [r4, #4]
 802210a:	606b      	str	r3, [r5, #4]
	node->next = successor;
 802210c:	602c      	str	r4, [r5, #0]
	successor->prev->next = node;
 802210e:	6863      	ldr	r3, [r4, #4]
 8022110:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 8022112:	6065      	str	r5, [r4, #4]
}
 8022114:	e7f7      	b.n	8022106 <add_to_waitq_locked+0x40>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8022116:	2400      	movs	r4, #0
 8022118:	e7e3      	b.n	80220e2 <add_to_waitq_locked+0x1c>

0802211a <pend>:
{
 802211a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802211e:	4605      	mov	r5, r0
 8022120:	460f      	mov	r7, r1
 8022122:	4691      	mov	r9, r2
 8022124:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
 8022126:	2400      	movs	r4, #0
	__asm__ volatile(
 8022128:	f04f 0310 	mov.w	r3, #16
 802212c:	f3ef 8611 	mrs	r6, BASEPRI
 8022130:	f383 8811 	msr	BASEPRI, r3
 8022134:	f3bf 8f6f 	isb	sy
 8022138:	b94c      	cbnz	r4, 802214e <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
 802213a:	4639      	mov	r1, r7
 802213c:	4628      	mov	r0, r5
 802213e:	f7ff ffc2 	bl	80220c6 <add_to_waitq_locked>
	__asm__ volatile(
 8022142:	f386 8811 	msr	BASEPRI, r6
 8022146:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 802214a:	2401      	movs	r4, #1
 802214c:	e7f4      	b.n	8022138 <pend+0x1e>
	add_thread_timeout(thread, timeout);
 802214e:	464a      	mov	r2, r9
 8022150:	4643      	mov	r3, r8
 8022152:	4628      	mov	r0, r5
 8022154:	f7f6 f9b2 	bl	80184bc <add_thread_timeout>
}
 8022158:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0802215c <z_unpend_first_thread>:
{
 802215c:	b570      	push	{r4, r5, r6, lr}
 802215e:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
 8022160:	2300      	movs	r3, #0
	__asm__ volatile(
 8022162:	f04f 0210 	mov.w	r2, #16
 8022166:	f3ef 8511 	mrs	r5, BASEPRI
 802216a:	f382 8811 	msr	BASEPRI, r2
 802216e:	f3bf 8f6f 	isb	sy
	struct k_thread *ret = NULL;
 8022172:	461c      	mov	r4, r3
	LOCKED(&sched_spinlock) {
 8022174:	b94b      	cbnz	r3, 802218a <z_unpend_first_thread+0x2e>
		ret = _priq_wait_best(&wait_q->waitq);
 8022176:	4630      	mov	r0, r6
 8022178:	f7ff ff59 	bl	802202e <z_priq_dumb_best>
 802217c:	4604      	mov	r4, r0
	__asm__ volatile(
 802217e:	f385 8811 	msr	BASEPRI, r5
 8022182:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8022186:	2301      	movs	r3, #1
 8022188:	e7f4      	b.n	8022174 <z_unpend_first_thread+0x18>

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
 802218a:	b1dc      	cbz	r4, 80221c4 <z_unpend_first_thread+0x68>
	LOCKED(&sched_spinlock) {
 802218c:	2300      	movs	r3, #0
	__asm__ volatile(
 802218e:	f04f 0210 	mov.w	r2, #16
 8022192:	f3ef 8511 	mrs	r5, BASEPRI
 8022196:	f382 8811 	msr	BASEPRI, r2
 802219a:	f3bf 8f6f 	isb	sy
 802219e:	b98b      	cbnz	r3, 80221c4 <z_unpend_first_thread+0x68>
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
 80221a0:	4620      	mov	r0, r4
 80221a2:	f7ff fed1 	bl	8021f48 <pended_on>
 80221a6:	4621      	mov	r1, r4
 80221a8:	f7f6 fa06 	bl	80185b8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 80221ac:	7b63      	ldrb	r3, [r4, #13]
 80221ae:	f023 0302 	bic.w	r3, r3, #2
 80221b2:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 80221b4:	2300      	movs	r3, #0
 80221b6:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 80221b8:	f385 8811 	msr	BASEPRI, r5
 80221bc:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 80221c0:	2301      	movs	r3, #1
 80221c2:	e7ec      	b.n	802219e <z_unpend_first_thread+0x42>
	if (thread != NULL) {
 80221c4:	b11c      	cbz	r4, 80221ce <z_unpend_first_thread+0x72>
 80221c6:	f104 0018 	add.w	r0, r4, #24
 80221ca:	f000 f906 	bl	80223da <z_abort_timeout>
}
 80221ce:	4620      	mov	r0, r4
 80221d0:	bd70      	pop	{r4, r5, r6, pc}

080221d2 <z_unpend_all>:
{
 80221d2:	b538      	push	{r3, r4, r5, lr}
 80221d4:	4605      	mov	r5, r0
	int need_sched = 0;
 80221d6:	2000      	movs	r0, #0
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 80221d8:	e006      	b.n	80221e8 <z_unpend_all+0x16>
		z_unpend_thread(thread);
 80221da:	4620      	mov	r0, r4
 80221dc:	f7ff ff04 	bl	8021fe8 <z_unpend_thread>
		z_ready_thread(thread);
 80221e0:	4620      	mov	r0, r4
 80221e2:	f7ff ff2b 	bl	802203c <z_ready_thread>
		need_sched = 1;
 80221e6:	2001      	movs	r0, #1
	return list->head == list;
 80221e8:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80221ea:	42a5      	cmp	r5, r4
 80221ec:	d001      	beq.n	80221f2 <z_unpend_all+0x20>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 80221ee:	2c00      	cmp	r4, #0
 80221f0:	d1f3      	bne.n	80221da <z_unpend_all+0x8>
}
 80221f2:	bd38      	pop	{r3, r4, r5, pc}

080221f4 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
 80221f4:	b15a      	cbz	r2, 802220e <z_impl_k_sem_init+0x1a>
 80221f6:	428a      	cmp	r2, r1
 80221f8:	d30c      	bcc.n	8022214 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
 80221fa:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
 80221fc:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
 80221fe:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
 8022200:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
 8022202:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
 8022206:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
 8022208:	6143      	str	r3, [r0, #20]
	return 0;
 802220a:	2000      	movs	r0, #0
 802220c:	4770      	bx	lr
		return -EINVAL;
 802220e:	f06f 0015 	mvn.w	r0, #21
 8022212:	4770      	bx	lr
 8022214:	f06f 0015 	mvn.w	r0, #21
}
 8022218:	4770      	bx	lr

0802221a <setup_thread_stack>:
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 802221a:	3207      	adds	r2, #7
 802221c:	f022 0207 	bic.w	r2, r2, #7
}
 8022220:	1888      	adds	r0, r1, r2
 8022222:	4770      	bx	lr

08022224 <k_is_in_isr>:
 8022224:	f3ef 8005 	mrs	r0, IPSR
}
 8022228:	3800      	subs	r0, #0
 802222a:	bf18      	it	ne
 802222c:	2001      	movne	r0, #1
 802222e:	4770      	bx	lr

08022230 <z_impl_k_thread_name_set>:
}
 8022230:	f06f 0046 	mvn.w	r0, #70	; 0x46
 8022234:	4770      	bx	lr

08022236 <k_thread_name_get>:
}
 8022236:	2000      	movs	r0, #0
 8022238:	4770      	bx	lr

0802223a <z_impl_k_thread_start>:
{
 802223a:	b508      	push	{r3, lr}
	z_sched_start(thread);
 802223c:	f7f6 fa60 	bl	8018700 <z_sched_start>
}
 8022240:	bd08      	pop	{r3, pc}

08022242 <z_init_thread_base>:
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
 8022242:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 8022244:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
 8022246:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
 8022248:	2300      	movs	r3, #0
 802224a:	73c3      	strb	r3, [r0, #15]
	node->next = NULL;
 802224c:	6183      	str	r3, [r0, #24]
	node->prev = NULL;
 802224e:	61c3      	str	r3, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
 8022250:	4770      	bx	lr

08022252 <z_impl_k_thread_create>:
{
 8022252:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022254:	b087      	sub	sp, #28
 8022256:	4604      	mov	r4, r0
 8022258:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 802225c:	2500      	movs	r5, #0
 802225e:	9505      	str	r5, [sp, #20]
 8022260:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8022262:	9504      	str	r5, [sp, #16]
 8022264:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8022266:	9503      	str	r5, [sp, #12]
 8022268:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802226a:	9502      	str	r5, [sp, #8]
 802226c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802226e:	9501      	str	r5, [sp, #4]
 8022270:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022272:	9500      	str	r5, [sp, #0]
 8022274:	f7f6 fd64 	bl	8018d40 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 8022278:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 802227c:	bf08      	it	eq
 802227e:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 8022282:	d102      	bne.n	802228a <z_impl_k_thread_create+0x38>
}
 8022284:	4620      	mov	r0, r4
 8022286:	b007      	add	sp, #28
 8022288:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
 802228a:	4632      	mov	r2, r6
 802228c:	463b      	mov	r3, r7
 802228e:	4620      	mov	r0, r4
 8022290:	f7f6 fd44 	bl	8018d1c <schedule_new_thread>
 8022294:	e7f6      	b.n	8022284 <z_impl_k_thread_create+0x32>

08022296 <work_cancel>:
{
 8022296:	b538      	push	{r3, r4, r5, lr}
	CHECKIF(work->work_q == NULL) {
 8022298:	6a83      	ldr	r3, [r0, #40]	; 0x28
 802229a:	2b00      	cmp	r3, #0
 802229c:	d04b      	beq.n	8022336 <work_cancel+0xa0>
 802229e:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80222a0:	f3bf 8f5b 	dmb	ish
 80222a4:	6883      	ldr	r3, [r0, #8]
 80222a6:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
 80222aa:	f013 0f01 	tst.w	r3, #1
 80222ae:	d03a      	beq.n	8022326 <work_cancel+0x90>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
 80222b0:	6a85      	ldr	r5, [r0, #40]	; 0x28
	return list->head;
 80222b2:	682b      	ldr	r3, [r5, #0]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
 80222b4:	2200      	movs	r2, #0
 80222b6:	b1bb      	cbz	r3, 80222e8 <work_cancel+0x52>
 80222b8:	4298      	cmp	r0, r3
 80222ba:	d004      	beq.n	80222c6 <work_cancel+0x30>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 80222bc:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
 80222be:	461a      	mov	r2, r3
 80222c0:	f021 0303 	bic.w	r3, r1, #3
 80222c4:	e7f7      	b.n	80222b6 <work_cancel+0x20>
Z_GENLIST_REMOVE(sflist, sfnode)
 80222c6:	b302      	cbz	r2, 802230a <work_cancel+0x74>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 80222c8:	6823      	ldr	r3, [r4, #0]
 80222ca:	f023 0103 	bic.w	r1, r3, #3
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 80222ce:	6813      	ldr	r3, [r2, #0]
 80222d0:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
 80222d4:	430b      	orrs	r3, r1
 80222d6:	6013      	str	r3, [r2, #0]
	return list->tail;
 80222d8:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(sflist, sfnode)
 80222da:	429c      	cmp	r4, r3
 80222dc:	d01e      	beq.n	802231c <work_cancel+0x86>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 80222de:	6823      	ldr	r3, [r4, #0]
 80222e0:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
 80222e4:	6023      	str	r3, [r4, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
 80222e6:	2301      	movs	r3, #1
 80222e8:	b1d3      	cbz	r3, 8022320 <work_cancel+0x8a>
	work->work_q = NULL;
 80222ea:	2000      	movs	r0, #0
 80222ec:	62a0      	str	r0, [r4, #40]	; 0x28
	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);
 80222ee:	3408      	adds	r4, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 80222f0:	f3bf 8f5b 	dmb	ish
 80222f4:	e854 3f00 	ldrex	r3, [r4]
 80222f8:	f023 0301 	bic.w	r3, r3, #1
 80222fc:	e844 3200 	strex	r2, r3, [r4]
 8022300:	2a00      	cmp	r2, #0
 8022302:	d1f7      	bne.n	80222f4 <work_cancel+0x5e>
 8022304:	f3bf 8f5b 	dmb	ish
}
 8022308:	bd38      	pop	{r3, r4, r5, pc}
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 802230a:	6823      	ldr	r3, [r4, #0]
 802230c:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
 8022310:	602b      	str	r3, [r5, #0]
	return list->tail;
 8022312:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_REMOVE(sflist, sfnode)
 8022314:	4294      	cmp	r4, r2
 8022316:	d1e2      	bne.n	80222de <work_cancel+0x48>
	list->tail = node;
 8022318:	606b      	str	r3, [r5, #4]
}
 802231a:	e7e0      	b.n	80222de <work_cancel+0x48>
	list->tail = node;
 802231c:	606a      	str	r2, [r5, #4]
}
 802231e:	e7de      	b.n	80222de <work_cancel+0x48>
			return -EINVAL;
 8022320:	f06f 0015 	mvn.w	r0, #21
 8022324:	e7f0      	b.n	8022308 <work_cancel+0x72>
		int err = z_abort_timeout(&work->timeout);
 8022326:	3010      	adds	r0, #16
 8022328:	f000 f857 	bl	80223da <z_abort_timeout>
		if (err) {
 802232c:	2800      	cmp	r0, #0
 802232e:	d0dc      	beq.n	80222ea <work_cancel+0x54>
			return -EALREADY;
 8022330:	f06f 0044 	mvn.w	r0, #68	; 0x44
 8022334:	e7e8      	b.n	8022308 <work_cancel+0x72>
		return -EALREADY;
 8022336:	f06f 0044 	mvn.w	r0, #68	; 0x44
 802233a:	e7e5      	b.n	8022308 <work_cancel+0x72>

0802233c <work_timeout>:
{
 802233c:	b508      	push	{r3, lr}
 802233e:	4603      	mov	r3, r0
	k_work_submit_to_queue(w->work_q, &w->work);
 8022340:	6980      	ldr	r0, [r0, #24]
 8022342:	f1a3 0110 	sub.w	r1, r3, #16
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 8022346:	3b08      	subs	r3, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8022348:	f3bf 8f5b 	dmb	ish
 802234c:	e853 2f00 	ldrex	r2, [r3]
 8022350:	f042 0c01 	orr.w	ip, r2, #1
 8022354:	e843 ce00 	strex	lr, ip, [r3]
 8022358:	f1be 0f00 	cmp.w	lr, #0
 802235c:	d1f6      	bne.n	802234c <work_timeout+0x10>
 802235e:	f3bf 8f5b 	dmb	ish
 8022362:	f012 0f01 	tst.w	r2, #1
 8022366:	d000      	beq.n	802236a <work_timeout+0x2e>
}
 8022368:	bd08      	pop	{r3, pc}
		k_queue_append(&work_q->queue, work);
 802236a:	f7ff fda3 	bl	8021eb4 <k_queue_append>
 802236e:	e7fb      	b.n	8022368 <work_timeout+0x2c>

08022370 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 8022370:	2300      	movs	r3, #0
 8022372:	6003      	str	r3, [r0, #0]
 8022374:	6041      	str	r1, [r0, #4]
 8022376:	6083      	str	r3, [r0, #8]
	node->next = NULL;
 8022378:	6103      	str	r3, [r0, #16]
	node->prev = NULL;
 802237a:	6143      	str	r3, [r0, #20]
	work->work_q = NULL;
 802237c:	6283      	str	r3, [r0, #40]	; 0x28
}
 802237e:	4770      	bx	lr

08022380 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
	if (!work->work_q) {
 8022380:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8022382:	b17b      	cbz	r3, 80223a4 <k_delayed_work_cancel+0x24>
{
 8022384:	b510      	push	{r4, lr}
	__asm__ volatile(
 8022386:	f04f 0310 	mov.w	r3, #16
 802238a:	f3ef 8411 	mrs	r4, BASEPRI
 802238e:	f383 8811 	msr	BASEPRI, r3
 8022392:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
 8022396:	f7ff ff7e 	bl	8022296 <work_cancel>
	__asm__ volatile(
 802239a:	f384 8811 	msr	BASEPRI, r4
 802239e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
 80223a2:	bd10      	pop	{r4, pc}
		return -EINVAL;
 80223a4:	f06f 0015 	mvn.w	r0, #21
}
 80223a8:	4770      	bx	lr

080223aa <remove_timeout>:
{
 80223aa:	b538      	push	{r3, r4, r5, lr}
 80223ac:	4604      	mov	r4, r0
	if (next(t) != NULL) {
 80223ae:	f7f6 fdc1 	bl	8018f34 <next>
 80223b2:	b148      	cbz	r0, 80223c8 <remove_timeout+0x1e>
 80223b4:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
 80223b6:	6920      	ldr	r0, [r4, #16]
 80223b8:	6965      	ldr	r5, [r4, #20]
 80223ba:	6913      	ldr	r3, [r2, #16]
 80223bc:	6951      	ldr	r1, [r2, #20]
 80223be:	181b      	adds	r3, r3, r0
 80223c0:	eb45 0101 	adc.w	r1, r5, r1
 80223c4:	6113      	str	r3, [r2, #16]
 80223c6:	6151      	str	r1, [r2, #20]
	node->prev->next = node->next;
 80223c8:	6862      	ldr	r2, [r4, #4]
 80223ca:	6823      	ldr	r3, [r4, #0]
 80223cc:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 80223ce:	6862      	ldr	r2, [r4, #4]
 80223d0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80223d2:	2300      	movs	r3, #0
 80223d4:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
 80223d6:	6063      	str	r3, [r4, #4]
}
 80223d8:	bd38      	pop	{r3, r4, r5, pc}

080223da <z_abort_timeout>:
{
 80223da:	b570      	push	{r4, r5, r6, lr}
 80223dc:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
 80223de:	2300      	movs	r3, #0
	__asm__ volatile(
 80223e0:	f04f 0210 	mov.w	r2, #16
 80223e4:	f3ef 8611 	mrs	r6, BASEPRI
 80223e8:	f382 8811 	msr	BASEPRI, r2
 80223ec:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
 80223f0:	f06f 0015 	mvn.w	r0, #21
 80223f4:	e008      	b.n	8022408 <z_abort_timeout+0x2e>
			remove_timeout(to);
 80223f6:	4620      	mov	r0, r4
 80223f8:	f7ff ffd7 	bl	80223aa <remove_timeout>
			ret = 0;
 80223fc:	4628      	mov	r0, r5
	__asm__ volatile(
 80223fe:	f386 8811 	msr	BASEPRI, r6
 8022402:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 8022406:	2301      	movs	r3, #1
 8022408:	461d      	mov	r5, r3
 802240a:	b91b      	cbnz	r3, 8022414 <z_abort_timeout+0x3a>
	return node->next != NULL;
 802240c:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
 802240e:	2b00      	cmp	r3, #0
 8022410:	d1f1      	bne.n	80223f6 <z_abort_timeout+0x1c>
 8022412:	e7f4      	b.n	80223fe <z_abort_timeout+0x24>
}
 8022414:	bd70      	pop	{r4, r5, r6, pc}

08022416 <z_get_next_timeout_expiry>:
{
 8022416:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
 8022418:	2300      	movs	r3, #0
	__asm__ volatile(
 802241a:	f04f 0210 	mov.w	r2, #16
 802241e:	f3ef 8411 	mrs	r4, BASEPRI
 8022422:	f382 8811 	msr	BASEPRI, r2
 8022426:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
 802242a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	LOCKED(&timeout_lock) {
 802242e:	b93b      	cbnz	r3, 8022440 <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
 8022430:	f7f6 fd98 	bl	8018f64 <next_timeout>
	__asm__ volatile(
 8022434:	f384 8811 	msr	BASEPRI, r4
 8022438:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 802243c:	2301      	movs	r3, #1
 802243e:	e7f6      	b.n	802242e <z_get_next_timeout_expiry+0x18>
}
 8022440:	bd10      	pop	{r4, pc}

08022442 <z_set_timeout_expiry>:
{
 8022442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022444:	4606      	mov	r6, r0
 8022446:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
 8022448:	2300      	movs	r3, #0
	__asm__ volatile(
 802244a:	f04f 0210 	mov.w	r2, #16
 802244e:	f3ef 8511 	mrs	r5, BASEPRI
 8022452:	f382 8811 	msr	BASEPRI, r2
 8022456:	f3bf 8f6f 	isb	sy
 802245a:	e00a      	b.n	8022472 <z_set_timeout_expiry+0x30>
			      || (ticks < next_to);
 802245c:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
 802245e:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 8022462:	2801      	cmp	r0, #1
 8022464:	dd00      	ble.n	8022468 <z_set_timeout_expiry+0x26>
 8022466:	b97c      	cbnz	r4, 8022488 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
 8022468:	f385 8811 	msr	BASEPRI, r5
 802246c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 8022470:	2301      	movs	r3, #1
 8022472:	461c      	mov	r4, r3
 8022474:	b96b      	cbnz	r3, 8022492 <z_set_timeout_expiry+0x50>
		int next_to = next_timeout();
 8022476:	f7f6 fd75 	bl	8018f64 <next_timeout>
			      || (ticks < next_to);
 802247a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 802247e:	d0ed      	beq.n	802245c <z_set_timeout_expiry+0x1a>
 8022480:	42b0      	cmp	r0, r6
 8022482:	ddec      	ble.n	802245e <z_set_timeout_expiry+0x1c>
 8022484:	2401      	movs	r4, #1
 8022486:	e7ea      	b.n	802245e <z_set_timeout_expiry+0x1c>
			z_clock_set_timeout(ticks, is_idle);
 8022488:	4639      	mov	r1, r7
 802248a:	4630      	mov	r0, r6
 802248c:	f7e7 ffec 	bl	800a468 <z_clock_set_timeout>
 8022490:	e7ea      	b.n	8022468 <z_set_timeout_expiry+0x26>
}
 8022492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08022494 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
 8022494:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
 8022496:	f7f6 fe7d 	bl	8019194 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
 802249a:	bd08      	pop	{r3, pc}

0802249c <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
 802249c:	b508      	push	{r3, lr}
	return z_tick_get();
 802249e:	f7f6 fe79 	bl	8019194 <z_tick_get>
}
 80224a2:	bd08      	pop	{r3, pc}

080224a4 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
 80224a4:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80224a6:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80224aa:	bf08      	it	eq
 80224ac:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
 80224b0:	d015      	beq.n	80224de <z_timeout_end_calc+0x3a>
 80224b2:	4604      	mov	r4, r0
 80224b4:	460d      	mov	r5, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 80224b6:	ea54 0105 	orrs.w	r1, r4, r5
 80224ba:	d00d      	beq.n	80224d8 <z_timeout_end_calc+0x34>
#ifdef CONFIG_LEGACY_TIMEOUT_API
	dt = k_ms_to_ticks_ceil32(timeout);
#else
	dt = timeout.ticks;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
 80224bc:	f06f 0101 	mvn.w	r1, #1
 80224c0:	1a0a      	subs	r2, r1, r0
 80224c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80224c6:	eb61 0305 	sbc.w	r3, r1, r5
 80224ca:	2a00      	cmp	r2, #0
 80224cc:	f173 0100 	sbcs.w	r1, r3, #0
 80224d0:	db09      	blt.n	80224e6 <z_timeout_end_calc+0x42>
		return Z_TICK_ABS(dt);
 80224d2:	4610      	mov	r0, r2
 80224d4:	4619      	mov	r1, r3
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
 80224d6:	bd38      	pop	{r3, r4, r5, pc}
		return z_tick_get();
 80224d8:	f7f6 fe5c 	bl	8019194 <z_tick_get>
 80224dc:	e7fb      	b.n	80224d6 <z_timeout_end_calc+0x32>
		return UINT64_MAX;
 80224de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80224e2:	4601      	mov	r1, r0
 80224e4:	e7f7      	b.n	80224d6 <z_timeout_end_calc+0x32>
	return z_tick_get() + MAX(1, dt);
 80224e6:	f7f6 fe55 	bl	8019194 <z_tick_get>
 80224ea:	4623      	mov	r3, r4
 80224ec:	462a      	mov	r2, r5
 80224ee:	2c01      	cmp	r4, #1
 80224f0:	f175 0400 	sbcs.w	r4, r5, #0
 80224f4:	db03      	blt.n	80224fe <z_timeout_end_calc+0x5a>
 80224f6:	18c0      	adds	r0, r0, r3
 80224f8:	eb42 0101 	adc.w	r1, r2, r1
 80224fc:	e7eb      	b.n	80224d6 <z_timeout_end_calc+0x32>
 80224fe:	2301      	movs	r3, #1
 8022500:	2200      	movs	r2, #0
 8022502:	e7f8      	b.n	80224f6 <z_timeout_end_calc+0x52>

08022504 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
 8022504:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
 8022506:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
 8022508:	2300      	movs	r3, #0
 802250a:	6303      	str	r3, [r0, #48]	; 0x30
 802250c:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
 8022510:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
 8022512:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
 8022514:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 8022516:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
 8022518:	6343      	str	r3, [r0, #52]	; 0x34
}
 802251a:	4770      	bx	lr

0802251c <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 802251c:	b510      	push	{r4, lr}
 802251e:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
 8022520:	f7ff ff5b 	bl	80223da <z_abort_timeout>

	if (inactive) {
 8022524:	b9d0      	cbnz	r0, 802255c <z_impl_k_timer_stop+0x40>
		return;
	}

	if (timer->stop_fn != NULL) {
 8022526:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022528:	b10b      	cbz	r3, 802252e <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 802252a:	4620      	mov	r0, r4
 802252c:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
 802252e:	2100      	movs	r1, #0
 8022530:	f104 0018 	add.w	r0, r4, #24
 8022534:	f7ff fd14 	bl	8021f60 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
 8022538:	4604      	mov	r4, r0
 802253a:	b108      	cbz	r0, 8022540 <z_impl_k_timer_stop+0x24>
		z_unpend_thread_no_timeout(thread);
 802253c:	f7ff fd27 	bl	8021f8e <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
 8022540:	b164      	cbz	r4, 802255c <z_impl_k_timer_stop+0x40>
		z_ready_thread(pending_thread);
 8022542:	4620      	mov	r0, r4
 8022544:	f7ff fd7a 	bl	802203c <z_ready_thread>
	__asm__ volatile(
 8022548:	f04f 0310 	mov.w	r3, #16
 802254c:	f3ef 8011 	mrs	r0, BASEPRI
 8022550:	f383 8811 	msr	BASEPRI, r3
 8022554:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8022558:	f7ff fd38 	bl	8021fcc <z_reschedule_irqlock>
		z_reschedule_unlocked();
	}
}
 802255c:	bd10      	pop	{r4, pc}

0802255e <signal_poll_event>:
{
 802255e:	b570      	push	{r4, r5, r6, lr}
 8022560:	4604      	mov	r4, r0
 8022562:	460d      	mov	r5, r1
	struct _poller *poller = event->poller;
 8022564:	6886      	ldr	r6, [r0, #8]
	if (poller) {
 8022566:	b19e      	cbz	r6, 8022590 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
 8022568:	68b3      	ldr	r3, [r6, #8]
 802256a:	b173      	cbz	r3, 802258a <signal_poll_event+0x2c>
			retcode = poller->cb(event, state);
 802256c:	4798      	blx	r3
		poller->is_polling = false;
 802256e:	2300      	movs	r3, #0
 8022570:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
 8022572:	2800      	cmp	r0, #0
 8022574:	db08      	blt.n	8022588 <signal_poll_event+0x2a>
	event->poller = NULL;
 8022576:	2300      	movs	r3, #0
 8022578:	60a3      	str	r3, [r4, #8]
	event->state |= state;
 802257a:	68e3      	ldr	r3, [r4, #12]
 802257c:	f3c3 3104 	ubfx	r1, r3, #12, #5
 8022580:	430d      	orrs	r5, r1
 8022582:	f365 3310 	bfi	r3, r5, #12, #5
 8022586:	60e3      	str	r3, [r4, #12]
}
 8022588:	bd70      	pop	{r4, r5, r6, pc}
		poller->is_polling = false;
 802258a:	2000      	movs	r0, #0
 802258c:	7030      	strb	r0, [r6, #0]
		if (retcode < 0) {
 802258e:	e7f2      	b.n	8022576 <signal_poll_event+0x18>
	int retcode = 0;
 8022590:	2000      	movs	r0, #0
 8022592:	e7f0      	b.n	8022576 <signal_poll_event+0x18>

08022594 <k_poll_poller_cb>:
{
 8022594:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
 8022596:	6883      	ldr	r3, [r0, #8]
 8022598:	685c      	ldr	r4, [r3, #4]
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
 802259a:	7b63      	ldrb	r3, [r4, #13]
	if (!z_is_thread_pending(thread)) {
 802259c:	f013 0f02 	tst.w	r3, #2
 80225a0:	d027      	beq.n	80225f2 <k_poll_poller_cb+0x5e>
 80225a2:	460d      	mov	r5, r1
	return thread->base.timeout.dticks == _EXPIRED;
 80225a4:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
	if (z_is_thread_timeout_expired(thread)) {
 80225a8:	f06f 0001 	mvn.w	r0, #1
 80225ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80225b0:	428b      	cmp	r3, r1
 80225b2:	bf08      	it	eq
 80225b4:	4282      	cmpeq	r2, r0
 80225b6:	d01e      	beq.n	80225f6 <k_poll_poller_cb+0x62>
	z_unpend_thread(thread);
 80225b8:	4620      	mov	r0, r4
 80225ba:	f7ff fd15 	bl	8021fe8 <z_unpend_thread>
	arch_thread_return_value_set(thread,
 80225be:	2d08      	cmp	r5, #8
 80225c0:	d009      	beq.n	80225d6 <k_poll_poller_cb+0x42>
 80225c2:	2300      	movs	r3, #0
 80225c4:	6723      	str	r3, [r4, #112]	; 0x70
	uint8_t state = thread->base.thread_state;
 80225c6:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 80225c8:	f013 0f1f 	tst.w	r3, #31
 80225cc:	d108      	bne.n	80225e0 <k_poll_poller_cb+0x4c>
	return node->next != NULL;
 80225ce:	69a3      	ldr	r3, [r4, #24]
 80225d0:	b123      	cbz	r3, 80225dc <k_poll_poller_cb+0x48>
 80225d2:	2300      	movs	r3, #0
 80225d4:	e005      	b.n	80225e2 <k_poll_poller_cb+0x4e>
 80225d6:	f06f 0303 	mvn.w	r3, #3
 80225da:	e7f3      	b.n	80225c4 <k_poll_poller_cb+0x30>
 80225dc:	2301      	movs	r3, #1
 80225de:	e000      	b.n	80225e2 <k_poll_poller_cb+0x4e>
 80225e0:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
 80225e2:	b90b      	cbnz	r3, 80225e8 <k_poll_poller_cb+0x54>
		return 0;
 80225e4:	2000      	movs	r0, #0
 80225e6:	e005      	b.n	80225f4 <k_poll_poller_cb+0x60>
	z_ready_thread(thread);
 80225e8:	4620      	mov	r0, r4
 80225ea:	f7ff fd27 	bl	802203c <z_ready_thread>
	return 0;
 80225ee:	2000      	movs	r0, #0
 80225f0:	e000      	b.n	80225f4 <k_poll_poller_cb+0x60>
		return 0;
 80225f2:	2000      	movs	r0, #0
}
 80225f4:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
 80225f6:	f06f 000a 	mvn.w	r0, #10
 80225fa:	e7fb      	b.n	80225f4 <k_poll_poller_cb+0x60>

080225fc <k_poll_event_init>:
{
 80225fc:	b430      	push	{r4, r5}
	event->poller = NULL;
 80225fe:	2400      	movs	r4, #0
 8022600:	6084      	str	r4, [r0, #8]
	event->type = type;
 8022602:	7b45      	ldrb	r5, [r0, #13]
 8022604:	f361 0503 	bfi	r5, r1, #0, #4
 8022608:	7345      	strb	r5, [r0, #13]
	event->state = K_POLL_STATE_NOT_READY;
 802260a:	68c1      	ldr	r1, [r0, #12]
 802260c:	f364 3110 	bfi	r1, r4, #12, #5
 8022610:	60c1      	str	r1, [r0, #12]
	event->mode = mode;
 8022612:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8022616:	f362 0141 	bfi	r1, r2, #1, #1
 802261a:	7381      	strb	r1, [r0, #14]
	event->unused = 0U;
 802261c:	89c2      	ldrh	r2, [r0, #14]
 802261e:	f364 028f 	bfi	r2, r4, #2, #14
 8022622:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
 8022624:	6103      	str	r3, [r0, #16]
}
 8022626:	bc30      	pop	{r4, r5}
 8022628:	4770      	bx	lr

0802262a <z_handle_obj_poll_events>:
{
 802262a:	b508      	push	{r3, lr}
 802262c:	4603      	mov	r3, r0
	return list->head == list;
 802262e:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
 8022630:	4283      	cmp	r3, r0
 8022632:	d00a      	beq.n	802264a <z_handle_obj_poll_events+0x20>
	node->prev->next = node->next;
 8022634:	6842      	ldr	r2, [r0, #4]
 8022636:	6803      	ldr	r3, [r0, #0]
 8022638:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 802263a:	6842      	ldr	r2, [r0, #4]
 802263c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 802263e:	2300      	movs	r3, #0
 8022640:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 8022642:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
 8022644:	b108      	cbz	r0, 802264a <z_handle_obj_poll_events+0x20>
		(void) signal_poll_event(poll_event, state);
 8022646:	f7ff ff8a 	bl	802255e <signal_poll_event>
}
 802264a:	bd08      	pop	{r3, pc}

0802264c <k_mem_pool_malloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
 802264c:	2300      	movs	r3, #0
 802264e:	2208      	movs	r2, #8
 8022650:	188a      	adds	r2, r1, r2
 8022652:	d214      	bcs.n	802267e <k_mem_pool_malloc+0x32>
	if (size_add_overflow(size, WB_UP(sizeof(struct k_mem_block_id)),
 8022654:	b9bb      	cbnz	r3, 8022686 <k_mem_pool_malloc+0x3a>
{
 8022656:	b530      	push	{r4, r5, lr}
 8022658:	b085      	sub	sp, #20
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
 802265a:	2400      	movs	r4, #0
 802265c:	2500      	movs	r5, #0
 802265e:	e9cd 4500 	strd	r4, r5, [sp]
 8022662:	a902      	add	r1, sp, #8
 8022664:	f7ff fb38 	bl	8021cd8 <k_mem_pool_alloc>
 8022668:	b958      	cbnz	r0, 8022682 <k_mem_pool_malloc+0x36>
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
 802266a:	2208      	movs	r2, #8
 802266c:	eb0d 0102 	add.w	r1, sp, r2
 8022670:	9802      	ldr	r0, [sp, #8]
 8022672:	f7fa f91c 	bl	801c8ae <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
 8022676:	9802      	ldr	r0, [sp, #8]
 8022678:	3008      	adds	r0, #8
}
 802267a:	b005      	add	sp, #20
 802267c:	bd30      	pop	{r4, r5, pc}
 802267e:	2301      	movs	r3, #1
 8022680:	e7e8      	b.n	8022654 <k_mem_pool_malloc+0x8>
		return NULL;
 8022682:	2000      	movs	r0, #0
 8022684:	e7f9      	b.n	802267a <k_mem_pool_malloc+0x2e>
		return NULL;
 8022686:	2000      	movs	r0, #0
}
 8022688:	4770      	bx	lr

0802268a <k_free>:
	if (ptr != NULL) {
 802268a:	b120      	cbz	r0, 8022696 <k_free+0xc>
{
 802268c:	b508      	push	{r3, lr}
		k_mem_pool_free_id(ptr);
 802268e:	3808      	subs	r0, #8
 8022690:	f7ff fb3d 	bl	8021d0e <k_mem_pool_free_id>
}
 8022694:	bd08      	pop	{r3, pc}
 8022696:	4770      	bx	lr

08022698 <sys_power_save_idle>:
	_kernel.idle = ticks;
#endif
}

static void sys_power_save_idle(void)
{
 8022698:	b508      	push	{r3, lr}
	int32_t ticks = z_get_next_timeout_expiry();
 802269a:	f7ff febc 	bl	8022416 <z_get_next_timeout_expiry>
	 * periods less than that.  This seems... silly, given that it
	 * saves no power and does not improve latency.  But it's an
	 * API we need to honor...
	 */
#ifdef CONFIG_SYS_CLOCK_EXISTS
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
 802269e:	2802      	cmp	r0, #2
 80226a0:	dc00      	bgt.n	80226a4 <sys_power_save_idle+0xc>
 80226a2:	2001      	movs	r0, #1
 80226a4:	2101      	movs	r1, #1
 80226a6:	f7ff fecc 	bl	8022442 <z_set_timeout_expiry>
	arch_cpu_idle();
 80226aa:	f7e8 fd4d 	bl	800b148 <arch_cpu_idle>
		k_cpu_idle();
	}
#else
	k_cpu_idle();
#endif
}
 80226ae:	bd08      	pop	{r3, pc}

080226b0 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
 80226b0:	b508      	push	{r3, lr}
 80226b2:	f04f 0210 	mov.w	r2, #16
 80226b6:	f3ef 8311 	mrs	r3, BASEPRI
 80226ba:	f382 8811 	msr	BASEPRI, r2
 80226be:	f3bf 8f6f 	isb	sy
#if SMP_FALLBACK
		k_busy_wait(100);
		k_yield();
#else
		(void)arch_irq_lock();
		sys_power_save_idle();
 80226c2:	f7ff ffe9 	bl	8022698 <sys_power_save_idle>
	while (true) {
 80226c6:	e7f4      	b.n	80226b2 <idle+0x2>

080226c8 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
 80226c8:	4770      	bx	lr
